0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ".`$`.h"
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ".`$`.h`\r\n`"
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 56               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 56               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 56               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 56               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 56               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 56               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 56               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 56               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 56               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 56               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 54               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 56               LD   (RST08),HL   
0094   22 D2 56               LD   (RST10),HL   
0097   22 D4 56               LD   (RST18),HL   
009A   22 D6 56               LD   (RST20),HL   
009D   22 D8 56               LD   (RST28),HL   
00A0   22 DA 56               LD   (RST30),HL   
00A3   22 DE 56               LD   (INTVEC),HL   
00A6   22 E0 56               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 56               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 56               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 12               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   21                     DB   lsb(bang_)   ; !     1
0181   0C                     DB   lsb(dquote_)   ; "     2
0182   5E                     DB   lsb(hash_)   ; #     1
0183   09                     DB   lsb(dollar_)   ; $     1
0184   12                     DB   lsb(percent_)   ; %     1
0185   73                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   18                     DB   lsb(lparen_)   ; (     1
0188   6B                     DB   lsb(rparen_)   ; )     1
0189   A5                     DB   lsb(star_)   ; *     1
018A   C9                     DB   lsb(plus_)   ; +     1
018B   06                     DB   lsb(comma_)   ; ,     2
018C   7D                     DB   lsb(minus_)   ; -     1
018D   0F                     DB   lsb(dot_)   ; .     2
018E   1B                     DB   lsb(slash_)   ; /	    1
018F   1E                     DB   lsb(num_)   ; 0     1
0190   1E                     DB   lsb(num_)   ; 1
0191   1E                     DB   lsb(num_)   ; 2
0192   1E                     DB   lsb(num_)   ; 3
0193   1E                     DB   lsb(num_)   ; 4
0194   1E                     DB   lsb(num_)   ; 5
0195   1E                     DB   lsb(num_)   ; 6
0196   1E                     DB   lsb(num_)   ; 7
0197   1E                     DB   lsb(num_)   ; 8
0198   1E                     DB   lsb(num_)   ; 9
0199   04                     DB   lsb(colon_)   ; :     2
019A   5E                     DB   lsb(semicolon_)   ; ;     2
019B   4C                     DB   lsb(lt_)   ; <     1
019C   32                     DB   lsb(eq_)   ; =     1
019D   41                     DB   lsb(gt_)   ; >     1
019E   15                     DB   lsb(question_)   ; ?     1
019F   E9                     DB   lsb(at_)   ; @     2
01A0   E5                     DB   lsb(upcase_)   ; A     1
01A1   E5                     DB   lsb(upcase_)   ; B
01A2   E5                     DB   lsb(upcase_)   ; C
01A3   E5                     DB   lsb(upcase_)   ; D
01A4   E5                     DB   lsb(upcase_)   ; E
01A5   E5                     DB   lsb(upcase_)   ; F
01A6   E5                     DB   lsb(upcase_)   ; G
01A7   E5                     DB   lsb(upcase_)   ; h
01A8   E5                     DB   lsb(upcase_)   ; I
01A9   E5                     DB   lsb(upcase_)   ; J
01AA   E5                     DB   lsb(upcase_)   ; K
01AB   E5                     DB   lsb(upcase_)   ; L
01AC   E5                     DB   lsb(upcase_)   ; M
01AD   E5                     DB   lsb(upcase_)   ; N
01AE   E5                     DB   lsb(upcase_)   ; O
01AF   E5                     DB   lsb(upcase_)   ; p
01B0   E5                     DB   lsb(upcase_)   ; Q
01B1   E5                     DB   lsb(upcase_)   ; R
01B2   E5                     DB   lsb(upcase_)   ; S
01B3   E5                     DB   lsb(upcase_)   ; T
01B4   E5                     DB   lsb(upcase_)   ; U
01B5   E5                     DB   lsb(upcase_)   ; V
01B6   E5                     DB   lsb(upcase_)   ; W
01B7   E5                     DB   lsb(upcase_)   ; X
01B8   E5                     DB   lsb(upcase_)   ; Y
01B9   E5                     DB   lsb(upcase_)   ; Z
01BA   12                     DB   lsb(lbrack_)   ; [     2
01BB   2E                     DB   lsb(backslash_)   ; \     2
01BC   4F                     DB   lsb(rbrack_)   ; ]     2
01BD   9F                     DB   lsb(caret_)   ; ^     1
01BE   E1                     DB   lsb(underscore_)   ; _     2
01BF   B5                     DB   lsb(grave_)   ; `     2   	
01C0   00                     DB   lsb(lowcase_)   ; a     1
01C1   00                     DB   lsb(lowcase_)   ; b
01C2   00                     DB   lsb(lowcase_)   ; c
01C3   00                     DB   lsb(lowcase_)   ; d
01C4   00                     DB   lsb(lowcase_)   ; e
01C5   00                     DB   lsb(lowcase_)   ; f
01C6   00                     DB   lsb(lowcase_)   ; g
01C7   00                     DB   lsb(lowcase_)   ; h
01C8   00                     DB   lsb(lowcase_)   ; i
01C9   00                     DB   lsb(lowcase_)   ; j
01CA   00                     DB   lsb(lowcase_)   ; k
01CB   00                     DB   lsb(lowcase_)   ; l
01CC   00                     DB   lsb(lowcase_)   ; m
01CD   00                     DB   lsb(lowcase_)   ; n
01CE   00                     DB   lsb(lowcase_)   ; o
01CF   00                     DB   lsb(lowcase_)   ; p
01D0   00                     DB   lsb(lowcase_)   ; q
01D1   00                     DB   lsb(lowcase_)   ; r
01D2   00                     DB   lsb(lowcase_)   ; s
01D3   00                     DB   lsb(lowcase_)   ; t
01D4   00                     DB   lsb(lowcase_)   ; u
01D5   00                     DB   lsb(lowcase_)   ; v
01D6   00                     DB   lsb(lowcase_)   ; w
01D7   00                     DB   lsb(lowcase_)   ; x
01D8   00                     DB   lsb(lowcase_)   ; y
01D9   00                     DB   lsb(lowcase_)   ; z
01DA   CB                     DB   lsb(lbrace_)   ; {     1
01DB   D0                     DB   lsb(pipe_)   ; |     1
01DC   DB                     DB   lsb(rbrace_)   ; }     1
01DD   DE                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   00 54                  DW   TIB   ; vTIBPtr pointer into TIB
01E0   00 55                  DW   BUFFER   ; vBufPtr pointer into BUF
01E2   22 57                  DW   HEAP   ; vHeapPtr \h start of the free mem
01E4   00 00                  DW   NUL   ; vRecurPtr
01E6   02                     DB   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E7   0A                     DB   10   ; vNumBase = 10
01E8   24                     DB   "$"   ; vHexPrefix
01E9   FF                     DB   TRUE   ; vEcho
01EA   00                     DB   FALSE   ; vStrMode
01EB   00                     DB   0   
01EC   00                     DB   0   
01ED   00                     DB   0   
01EE   00                     DB   0   
01EF   00                     DB   0   
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                COLON_:      
0204   DD E9                  JP   (ix)   
0206                COMMA_:      
0206   C3 F7 0A               JP   comma   
0209                DOLLAR_:      
0209   C3 7A 0B               JP   dollar   
020C                DQUOTE_:      
020C                QUOTE_:      
020C   C3 A4 0B               JP   quote   
020F                DOT_:        
020F   C3 00 04               JP   dot   
0212                PERCENT_:      
0212   C3 BE 0B               JP   percent   
0215                QUESTION_:      
0215   C3 97 0B               JP   question   
0218                LPAREN_:      
0218   C3 CB 03               JP   lbrace   
021B                SLASH_:      
021B   C3 00 05               JP   slash   
021E                NUM_:        
021E   C3 F3 0B               JP   num   
0221                BANG_:       
0221                BANG:        ; logical invert, any non zero value
0221   03                     INC   bc   
0222   0A                     LD   a,(bc)   
0223   FE 3D                  CP   "="   
0225   20 05                  JR   nz,not   
0227   E1                     POP   hl   
0228   D1                     POP   de   
0229   C3 35 0D               JP   notequals   
022C                NOT:         
022C   0B                     DEC   bc   
022D   21 00 00               LD   hl,0   ; is considered true
0230   18 0B                  JR   eq1   
0232                EQ_:         
0232                EQ:          
0232   03                     INC   bc   
0233   0A                     LD   a,(bc)   
0234   FE 3D                  CP   "="   
0236   28 04                  JR   z,eq0   
0238   0B                     DEC   bc   
0239   C3 1D 0D               JP   assign   
023C                EQ0:         
023C   E1                     POP   hl   
023D                EQ1:         
023D   D1                     POP   de   
023E   C3 2E 0D               JP   equals   
0241                GT_:         
0241                GT:          
0241   03                     INC   bc   
0242   0A                     LD   a,(bc)   
0243   FE 3E                  CP   ">"   
0245   CA 95 0D               JP   z,shiftRight   
0248   D1                     POP   de   
0249   E1                     POP   hl   
024A   18 09                  JR   lt1   
024C                LT_:         
024C                LT:          
024C   03                     INC   bc   
024D   0A                     LD   a,(bc)   
024E   FE 3C                  CP   "<"   
0250   CA 79 0D               JP   z,shiftLeft   
0253   E1                     POP   hl   
0254   D1                     POP   de   
0255                LT1:         
0255   FE 3D                  CP   "="   
0257   CA 3C 0D               JP   z,lessthaneq   
025A   0B                     DEC   bc   
025B   C3 41 0D               JP   lessthan   
025E                             ; index of an array, based on vDataWidth 22
025E                             ; array* num -- value    ; also sets vPointer to address
025E                HASH_:       
025E                SEMICOLON_:      
025E                SEMICOLON:      
025E                ARRAYINDEX:      
025E   E1                     POP   hl   ; hl = index
025F   D1                     POP   de   ; de = array
0260   3A EE 56               LD   a,(vDataWidth)   ; a = data width
0263   3D                     DEC   a   
0264   28 01                  JR   z,arrayIndex1   
0266                ARRAYINDEX0:      
0266   29                     ADD   hl,hl   ; if data width = 2 then double
0267                ARRAYINDEX1:      
0267   19                     ADD   hl,de   ; add addr
0268   C3 2E 0F               JP   variable   
026B                             ;                               4
026B                RPAREN_:      
026B                             ; jp rparen
026B                RPAREN:      
026B   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
026E   FD 46 09               LD   b,(iy+9)   
0271   DD E9                  JP   (ix)   
0273                             ; & and                          14
0273                             ; a b -- c
0273                AMPER_:      
0273                AMPER:       
0273                AND:         
0273   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0274   E1                     POP   hl   
0275   7B                     LD   a,e   
0276   A5                     AND   l   
0277   6F                     LD   l,a   
0278   7A                     LD   a,d   
0279   A4                     AND   h   
027A   67                     LD   h,a   
027B   18 5B                  JR   add3   
027D                             ; - sub
027D                             ; a b -- c
027D                             ; -- sub
027D                             ; b1 -- b2
027D                             ; -= sub
027D                             ; a b1 -- b2
027D                MINUS_:      
027D                MINUS:       
027D   03                     INC   bc   ; check if sign of a number
027E   0A                     LD   a,(bc)   
027F   0B                     DEC   bc   
0280   FE 30                  CP   "0"   
0282   38 05                  JR   c,sub   
0284   FE 3A                  CP   "9"+1   
0286   DA F3 0B               JP   c,num   
0289                SUB:         ; Subtract the value 2nd on stack from top of stack
0289   E1                     POP   hl   ; hl = arg_b
028A   03                     INC   bc   
028B   FE 2D                  CP   "-"   
028D   20 04                  JR   nz,sub1   
028F   2B                     DEC   hl   ; --
0290   C3 1F 0D               JP   assign0   
0293                SUB1:        
0293   D1                     POP   de   ; de = arg_a
0294   FE 3D                  CP   "="   
0296   28 02                  JR   z,sub2   
0298   0B                     DEC   bc   ; -
0299   EB                     EX   de,hl   
029A                SUB2:        
029A   B7                     OR   a   ; -=
029B   ED 52                  SBC   hl,de   
029D                SUB3:        
029D   FE 3D                  CP   "="   
029F   CA 1F 0D               JP   z,assign0   
02A2   E5                     PUSH   hl   
02A3   DD E9                  JP   (ix)   
02A5                STAR_:       ; 21
02A5                STAR:        
02A5   03                     INC   bc   ; check for ** spread
02A6   0A                     LD   a,(bc)   
02A7   FE 2A                  CP   "*"   
02A9   CA 55 0D               JP   z,spread   
02AC   0B                     DEC   bc   
02AD                MUL:         
02AD   D1                     POP   de   ; get first value
02AE   E1                     POP   hl   
02AF                MUL2:        
02AF   C5                     PUSH   bc   ; Preserve the IP
02B0   44 4D                  LD   bc,hl   ; bc = 2nd value
02B2   21 00 00               LD   hl,0   
02B5   3E 10                  LD   a,16   
02B7                MUL3:        
02B7   29                     ADD   hl,hl   
02B8   CB 13                  RL   e   
02BA   CB 12                  RL   d   
02BC   30 04                  JR   nc,$+6   
02BE   09                     ADD   hl,bc   
02BF   30 01                  JR   nc,$+3   
02C1   13                     INC   de   
02C2   3D                     DEC   a   
02C3   20 F2                  JR   nz,mul3   
02C5   C1                     POP   bc   ; Restore the IP
02C6   C3 D8 02               JP   add3   
02C9                             ; + add                         25
02C9                             ; a b -- c
02C9                PLUS_:       
02C9                PLUS:        
02C9                ADD:         
02C9   03                     INC   bc   
02CA   0A                     LD   a,(bc)   
02CB   FE 2B                  CP   "+"   ; ++ increment variable
02CD   20 05                  JR   nz,add1   
02CF   E1                     POP   hl   
02D0   23                     INC   hl   
02D1   C3 1F 0D               JP   assign0   
02D4                ADD1:        
02D4   0B                     DEC   bc   
02D5   D1                     POP   de   ; second term
02D6   E1                     POP   hl   ; first term
02D7   19                     ADD   hl,de   
02D8                ADD3:        
02D8   03                     INC   bc   
02D9   0A                     LD   a,(bc)   
02DA   FE 3D                  CP   "="   
02DC   28 04                  JR   z,add4   
02DE   0B                     DEC   bc   
02DF   E5                     PUSH   hl   
02E0   DD E9                  JP   (ix)   
02E2                ADD4:        
02E2   C3 1F 0D               JP   assign0   
02E5                             ;                               18
02E5                UPCASE_:      
02E5                UPCASE:      
02E5   0A                     LD   a,(bc)   ; a = identifier char
02E6   D6 41                  SUB   "A"   ; "A" = 0
02E8   18 1B                  JR   ident1   
02EA                             ;********************** PAGE 2 END *********************************************
02EA                          ALIGN   $100   
0300                             ;********************** PAGE 3 BEGIN *********************************************
0300                LOWCASE_:      
0300                LOWCASE:      
0300   0A                     LD   a,(bc)   
0301   D6 61                  SUB   "a"   
0303   C6 1A                  ADD   a,26   
0305                IDENT1:      
0305   87                     ADD   a,a   ; l = a * 2
0306   6F                     LD   l,a   
0307   26 56                  LD   h,msb(VARS)   
0309   22 F8 56               LD   (vPointer),hl   ; store address in setter
030C   5E                     LD   e,(hl)   
030D   23                     INC   hl   
030E   56                     LD   d,(hl)   
030F   D5                     PUSH   de   
0310   DD E9                  JP   (ix)   
0312                             ; [                             14
0312                LBRACK_:      
0312                LBRACK:      
0312                ARRAYSTART:      
0312   11 00 00               LD   de,0   ; create stack frame
0315   D5                     PUSH   de   ; push null for IP
0316   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0319   FD 56 05               LD   d,(iy+5)   ; 
031C   D5                     PUSH   de   ; 
031D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0320   FD 56 03               LD   d,(iy+3)   ; 
0323   D5                     PUSH   de   ; 
0324   FD E5                  PUSH   iy   ; push BP
0326   FD 21 00 00            LD   iy,0   ; BP = SP
032A   FD 39                  ADD   iy,sp   
032C   DD E9                  JP   (ix)   
032E                             ; \                             19
032E                BACKSLASH_:      
032E                BACKSLASH:      
032E                LAMBDA:      
032E   DD E5                  PUSH   ix   
0330   CD E7 0D               CALL   parseArgs   
0333                LAMBDA1:      
0333   03                     INC   bc   ; arg_list must ve immediately followed by {
0334   0A                     LD   a,(bc)   
0335   FE 21                  CP   " "+1   ; skip white space
0337   38 FA                  JR   c,lambda1   
0339   FE 7B                  CP   "{"   
033B   28 06                  JR   z,lambda2   
033D   21 02 00               LD   hl,2   ; error 2: parse error
0340   C3 FA 10               JP   error   
0343                LAMBDA2:      
0343   CD 1D 0E               CALL   parseBlock   
0346   CD 8C 0E               CALL   createFunc   
0349   E1                     POP   hl   
034A   DD E1                  POP   ix   
034C   E5                     PUSH   hl   
034D   DD E9                  JP   (ix)   
034F                RBRACK_:      
034F                RBRACK:      
034F                ARRAYEND:      ; 53
034F   FD 54                  LD   d,iyh   ; de = BP
0351   FD 5D                  LD   e,iyl   
0353   ED 43 04 57            LD   (vTemp1),bc   ; save IP
0357   62 6B                  LD   hl,de   ; hl = de = BP
0359   B7                     OR   a   
035A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
035C   CB 3C                  SRL   h   ; 
035E   CB 1D                  RR   l   
0360   44 4D                  LD   bc,hl   ; bc = count
0362   2A EA 56               LD   hl,(vHeapPtr)   ; hl = array[-4]
0365   71                     LD   (hl),c   ; write num items in length word
0366   23                     INC   hl   
0367   70                     LD   (hl),b   
0368   23                     INC   hl   ; hl = array[0], bc = count
0369                             ; de = BP, hl = array[0], bc = count
0369   18 15                  JR   arrayEnd3   
036B                ARRAYEND1:      
036B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
036E   77                     LD   (hl),a   ; write lsb of array item
036F   23                     INC   hl   ; move to msb of array item
0370   3A EE 56               LD   a,(vDataWidth)   ; vDataWidth=1?
0373   3D                     DEC   a   
0374   28 05                  JR   z,arrayEnd2   
0376   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0379   77                     LD   (hl),a   ; write msb of array item
037A   23                     INC   hl   ; move to next word in array
037B                ARRAYEND2:      
037B   FD 2B                  DEC   iy   ; move to next word on stack
037D   FD 2B                  DEC   iy   
037F   0B                     DEC   bc   ; dec items count
0380                ARRAYEND3:      
0380   79                     LD   a,c   ; if not zero loop
0381   B0                     OR   b   
0382   20 E7                  JR   nz,arrayEnd1   
0384   EB                     EX   de,hl   ; de = end of array, hl = BP
0385   F9                     LD   sp,hl   ; sp = BP
0386   E1                     POP   hl   ; de = end of array, hl = old BP
0387   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0388   FD 62                  LD   iyh,d   
038A   FD 6B                  LD   iyl,e   
038C   D1                     POP   de   ; pop arg_list (discard)
038D   D1                     POP   de   ; pop first_arg* (discard)
038E   D1                     POP   de   ; pop IP (discard)
038F   ED 5B EA 56            LD   de,(vHeapPtr)   ; de = array[-2]
0393   13                     INC   de   
0394   13                     INC   de   
0395   D5                     PUSH   de   ; return array[0]
0396   22 EA 56               LD   (vHeapPtr),hl   ; move heap* to end of array
0399   ED 4B 04 57            LD   bc,(vTemp1)   ; restore IP
039D   DD E9                  JP   (ix)   
039F                CARET_:      
039F                             ; execute a block of code which ends with } 116
039F                             ; creates a root scope if BP == stack
039F                             ; else uses outer scope
039F                CARET:       
039F                GO:          
039F   D1                     POP   de   ; de = block*
03A0                GO1:         
03A0   7B                     LD   a,e   ; if block* == null, exit
03A1   B2                     OR   d   
03A2   20 02                  JR   nz,go2   
03A4   DD E9                  JP   (ix)   
03A6                GO2:         
03A6   1A                     LD   a,(de)   
03A7   FE 7B                  CP   "{"   
03A9   CA 90 0C               JP   z,goBlock   
03AC   FE 28                  CP   "("   
03AE   C2 C3 0C               JP   nz,goFunc   
03B1   D5                     PUSH   de   ; push de just before stack frame
03B2   CA 90 0C               JP   z,goBlock   
03B5                GRAVE_:      
03B5                GRAVE:       
03B5                PRINTLITERAL:      
03B5   03                     INC   bc   ; move to first char
03B6   ED 5B E8 56            LD   de,(vBufPtr)   ; de = buffer*
03BA   18 03                  JR   printLiteral1   
03BC                PRINTLITERAL0:      
03BC   12                     LD   (de),a   ; a -> buffer*
03BD   13                     INC   de   ; string*++,
03BE   03                     INC   bc   
03BF                PRINTLITERAL1:      
03BF   0A                     LD   a,(bc)   ; a <- string*
03C0   FE 60                  CP   "`"   ; if ` exit loop
03C2   20 F8                  JR   nz,printLiteral0   
03C4   ED 53 E8 56            LD   (vBufPtr),de   ; save buffer*' in pointer
03C8   C3 CD 0D               JP   dotNext   
03CB                LBRACE_:      
03CB                LBRACE:      
03CB   CD 1D 0E               CALL   parseBlock   
03CE   DD E9                  JP   (ix)   
03D0                             ; | or                          11
03D0                             ; a b -- c
03D0                PIPE_:       
03D0                PIPE:        
03D0                OR:          
03D0   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03D1   E1                     POP   hl   
03D2   7B                     LD   a,e   
03D3   B5                     OR   l   
03D4   6F                     LD   l,a   
03D5   7A                     LD   a,d   
03D6   B4                     OR   h   
03D7   67                     LD   h,a   
03D8   C3 D8 02               JP   add3   
03DB                RBRACE_:      
03DB   C3 23 0C               JP   rbrace   
03DE                             ; ~ char                        8
03DE                TILDE_:      
03DE   C3 70 0B               JP   tilde   
03E1                UNDERSCORE_:      
03E1                CHAR:        
03E1   03                     INC   bc   ; point to next char
03E2   0A                     LD   a,(bc)   
03E3   6F                     LD   l,a   
03E4   26 00                  LD   h,0   
03E6   E5                     PUSH   hl   
03E7   DD E9                  JP   (ix)   
03E9                AT_:         
03E9                AT:          
03E9                ADDR:        
03E9   ED 5B F8 56            LD   de,(vPointer)   
03ED   21 F8 56               LD   hl,vPointer   
03F0   C3 2E 0F               JP   variable   
03F3                             ;********************** PAGE 3 END *********************************************
03F3                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   CD 5A 0F               CALL   commandTable   
0403   61                     DB   "a"   ; .a print array
0404   AF 0A                  DW   printArray   
0406   63                     DB   "c"   ; .c print char
0407   0F 04                  DW   printChar   
0409   73                     DB   "s"   ; .s print string
040A   1E 04                  DW   printString   
040C   00                     DB   NUL   ; .  print number, fall through
040D   33 04                  DW   printNumber   
040F                             ; .c print char
040F                             ; char --
040F                PRINTCHAR:      
040F   E1                     POP   hl   ; a = char
0410   7D                     LD   a,l   
0411   ED 5B E8 56            LD   de,(vBufPtr)   ; de = buffer*
0415   12                     LD   (de),a   
0416   13                     INC   de   
0417   ED 53 E8 56            LD   (vBufPtr),de   ; save buffer*'
041B   C3 CD 0D               JP   dotNext   
041E                             ; .s print string
041E                             ; string* --
041E                PRINTSTRING:      
041E   E1                     POP   hl   ; hl = string*
041F   ED 5B E8 56            LD   de,(vBufPtr)   ; de = buffer*
0423   18 03                  JR   printString1   
0425                PRINTSTRING0:      
0425   12                     LD   (de),a   ; a -> buffer*
0426   13                     INC   de   ; string*++,
0427   23                     INC   hl   
0428                PRINTSTRING1:      
0428   7E                     LD   a,(hl)   ; a <- string*
0429   B7                     OR   a   ; if NUL exit loop
042A   20 F9                  JR   nz,printString0   
042C   ED 53 E8 56            LD   (vBufPtr),de   ; save buffer*' in pointer
0430   C3 CD 0D               JP   dotNext   
0433                             ; . print decimal
0433                             ; value --
0433                PRINTNUMBER:      
0433   3A EF 56               LD   a,(vNumBase)   
0436   FE 10                  CP   16   
0438   CA A4 04               JP   z,printHex   ; else falls through
043B   C3 3E 04               JP   printDec   
043E                             ; print decimal                 ; 70
043E                             ; value --
043E                PRINTDEC:      
043E   ED 5B E8 56            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0442   D9                     EXX      
0443   E1                     POP   hl   ; hl = value
0444   3A EE 56               LD   a,(vDataWidth)   
0447   3D                     DEC   a   
0448   20 02                  JR   nz,printDec1   
044A   26 00                  LD   h,0   
044C                PRINTDEC1:      
044C   CD 5B 04               CALL   printDec2   
044F   D9                     EXX      ; de = buffer*' bc = IP
0450   3E 20                  LD   a," "   ; append space to buffer
0452   12                     LD   (de),a   
0453   13                     INC   de   ; string*++,
0454   ED 53 E8 56            LD   (vBufPtr),de   ; update buffer* with buffer*'
0458   C3 CD 0D               JP   dotNext   
045B                             ; hl = value
045B                             ; de' = buffer*
045B                             ; a, bc, de, hl destroyed
045B                PRINTDEC2:      
045B   CB 7C                  BIT   7,h   
045D   28 0C                  JR   z,printDec3   
045F   D9                     EXX      
0460   3E 2D                  LD   a,"-"   
0462   12                     LD   (de),a   
0463   13                     INC   de   
0464   D9                     EXX      
0465   AF                     XOR   a   
0466   95                     SUB   l   
0467   6F                     LD   l,a   
0468   9F                     SBC   a,a   
0469   94                     SUB   h   
046A   67                     LD   h,a   
046B                PRINTDEC3:      
046B   0E 00                  LD   c,0   ; leading zeros flag = false
046D   11 F0 D8               LD   de,-10000   
0470   CD 8B 04               CALL   printDec4   
0473   11 18 FC               LD   de,-1000   
0476   CD 8B 04               CALL   printDec4   
0479   11 9C FF               LD   de,-100   
047C   CD 8B 04               CALL   printDec4   
047F   1E F6                  LD   e,-10   
0481   CD 8B 04               CALL   printDec4   
0484   0C                     INC   c   ; flag = true for at least digit
0485   1E FF                  LD   e,-1   
0487   CD 8B 04               CALL   printDec4   
048A   C9                     RET      
048B                PRINTDEC4:      
048B   06 2F                  LD   b,"0"-1   
048D                PRINTDEC5:      
048D   04                     INC   b   
048E   19                     ADD   hl,de   
048F   38 FC                  JR   c,printDec5   
0491   ED 52                  SBC   hl,de   
0493   3E 30                  LD   a,"0"   
0495   B8                     CP   b   
0496   20 05                  JR   nz,printDec6   
0498   AF                     XOR   a   
0499   B1                     OR   c   
049A   C8                     RET   z   
049B   18 01                  JR   printDec7   
049D                PRINTDEC6:      
049D   0C                     INC   c   
049E                PRINTDEC7:      
049E   78                     LD   a,b   
049F   D9                     EXX      
04A0   12                     LD   (de),a   
04A1   13                     INC   de   
04A2   D9                     EXX      
04A3   C9                     RET      
04A4                             ; buffer hex                    37
04A4                             ; value --
04A4                PRINTHEX:      
04A4   ED 5B E8 56            LD   de,(vBufPtr)   
04A8   3A F0 56               LD   a,(vHexPrefix)   ; "$"
04AB   B7                     OR   a   ; skip if null
04AC   28 02                  JR   z,printHex1   
04AE   12                     LD   (de),a   
04AF   13                     INC   de   ; string*++,
04B0                PRINTHEX1:      
04B0   E1                     POP   hl   ; hl = value
04B1   3A EE 56               LD   a,(vDataWidth)   
04B4   3D                     DEC   a   
04B5   28 04                  JR   z,printHex2   
04B7   7C                     LD   a,h   
04B8   CD CA 04               CALL   printHex3   
04BB                PRINTHEX2:      
04BB   7D                     LD   a,l   
04BC   CD CA 04               CALL   printHex3   
04BF   3E 20                  LD   a," "   ; append space to buffer
04C1   12                     LD   (de),a   
04C2   13                     INC   de   ; string*++,
04C3   ED 53 E8 56            LD   (vBufPtr),de   
04C7   C3 CD 0D               JP   dotNext   
04CA                PRINTHEX3:      
04CA   F5                     PUSH   af   
04CB   1F                     RRA      
04CC   1F                     RRA      
04CD   1F                     RRA      
04CE   1F                     RRA      
04CF   CD D3 04               CALL   printHex4   
04D2   F1                     POP   af   
04D3                PRINTHEX4:      
04D3   E6 0F                  AND   0x0F   
04D5   C6 90                  ADD   a,0x90   
04D7   27                     DAA      
04D8   CE 40                  ADC   a,0x40   
04DA   27                     DAA      
04DB   12                     LD   (de),a   
04DC   13                     INC   de   ; string*++,
04DD   C9                     RET      
04DE                             ;********************** PAGE 4 END *********************************************
04DE                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA B4 06               JP   z,comment   
0507   0B                     DEC   bc   
0508   CD 40 0F               CALL   charTable   
050B   26                     DB   lsb(command_a_)   
050C   41                     DB   lsb(command_b_)   
050D   00                     DB   0   
050E   54                     DB   lsb(command_d_)   
050F   00                     DB   0   
0510   5F                     DB   lsb(command_f_)   
0511   00                     DB   0   
0512   86                     DB   lsb(command_h_)   
0513   91                     DB   lsb(command_i_)   
0514   00                     DB   0   
0515   00                     DB   0   
0516   00                     DB   0   
0517   9C                     DB   lsb(command_m_)   
0518   00                     DB   0   
0519   A7                     DB   lsb(comand_o_)   
051A   AE                     DB   lsb(command_p_)   
051B   B5                     DB   lsb(command_q_)   
051C   C0                     DB   lsb(command_r_)   
051D   D3                     DB   lsb(command_s_)   
051E   D5                     DB   lsb(comand_t_)   
051F   00                     DB   0   
0520   D7                     DB   lsb(command_v_)   
0521   D9                     DB   lsb(command_w_)   
0522   DB                     DB   lsb(command_x_)   
0523   00                     DB   0   
0524   00                     DB   0   
0525   DD                     DB   lsb(command_default_)   
0526                             ; 12
0526                COMMAND_A_:      
0526   CD 72 0F               CALL   cmdTable   
0529   62 00                  DB   "b",0   ; /ab absolute
052B   60 06                  DW   absolute   
052D   64 00                  DB   "d",0   ; /ad address of
052F   6E 06                  DW   addrOf   
0531   69 00                  DB   "i",0   ; /ai array iterator
0533   35 08                  DW   arrayIter   
0535   6C 00                  DB   "l",0   ; /al array length
0537   76 06                  DW   arrayLength   
0539   73 00                  DB   "s",0   ; /as array size
053B   7F 06                  DW   arraySize   
053D   00 00                  DB   0,0   
053F   DB 06                  DW   error1   
0541                COMMAND_B_:      
0541   CD 72 0F               CALL   cmdTable   
0544   62 00                  DB   "b",0   ; /bb bye bye cold boot
0546   4B 10                  DW   coldStart   
0548   6D 00                  DB   "m",0   ; /bm byte mode
054A   AD 06                  DW   byteMode   
054C   72 00                  DB   "r",0   ; /br break from loop
054E   93 06                  DW   break   
0550   00 00                  DB   0,0   
0552   DB 06                  DW   error1   
0554                COMMAND_D_:      
0554   CD 72 0F               CALL   cmdTable   
0557   63 00                  DB   "c",0   ; /dc decimal
0559   CF 06                  DW   decBase   
055B   00 00                  DB   0,0   
055D   DB 06                  DW   error1   
055F                COMMAND_F_:      
055F   CD 72 0F               CALL   cmdTable   
0562   64 00                  DB   "d",0   ; /fd fold
0564   DA 09                  DW   fold   
0566   65 00                  DB   "e",0   ; /fe forEach
0568   2B 0A                  DW   forEach   
056A   73 00                  DB   "s",0   ; /fs funcSrc
056C   76 0A                  DW   funcSrc   
056E   74 00                  DB   "t",0   ; /ft filter
0570   7D 09                  DW   filter   
0572   31 00                  DB   "1",0   
0574   3C 11                  DW   f1   
0576   32 00                  DB   "2",0   
0578   48 11                  DW   f2   
057A   33 00                  DB   "3",0   
057C   54 11                  DW   f3   
057E   34 00                  DB   "4",0   
0580   60 11                  DW   f4   
0582   00 00                  DB   0,0   
0584   4F 0D                  DW   false1   
0586                COMMAND_H_:      
0586   CD 72 0F               CALL   cmdTable   
0589   78 00                  DB   "x",0   ; /hx hex
058B   D6 06                  DW   hexBase   
058D   00 00                  DB   0,0   
058F   DB 06                  DW   error1   
0591                             ; 6
0591                COMMAND_I_:      
0591   CD 72 0F               CALL   cmdTable   
0594   6E 00                  DB   "n",0   ; /in input
0596   E1 06                  DW   input   
0598   00 00                  DB   0,0   
059A   DB 06                  DW   error1   
059C                COMMAND_M_:      
059C   CD 72 0F               CALL   cmdTable   
059F   70 00                  DB   "p",0   ; /mp map
05A1   3C 09                  DW   map   
05A3   00 00                  DB   0,0   
05A5   DB 06                  DW   error1   
05A7                COMAND_O_:      
05A7   CD 72 0F               CALL   cmdTable   
05AA   00 00                  DB   0,0   
05AC   EC 06                  DW   output   
05AE                             ; 4
05AE                COMMAND_P_:      
05AE   CD 72 0F               CALL   cmdTable   
05B1   00 00                  DB   0,0   
05B3   DB 06                  DW   error1   
05B5                             ; 6
05B5                COMMAND_Q_:      
05B5   CD 72 0F               CALL   cmdTable   
05B8   74 00                  DB   "t",0   ; /qt quit
05BA   F5 06                  DW   quit   
05BC   00 00                  DB   0,0   
05BE   DB 06                  DW   error1   
05C0                COMMAND_R_:      
05C0   CD 72 0F               CALL   cmdTable   
05C3   63 00                  DB   "c",0   ; /rc tail call optimisation
05C5   FF 06                  DW   recur   
05C7   65 00                  DB   "e",0   ; /re remainder
05C9   05 07                  DW   remain   
05CB   67 00                  DB   "g",0   ; /rg range src
05CD   A3 07                  DW   rangeSrc   
05CF   00 00                  DB   0,0   
05D1   DB 06                  DW   error1   
05D3                COMMAND_S_:      
05D3   18 0A                  JR   command_s   
05D5                COMAND_T_:      
05D5   18 27                  JR   command_t   
05D7                COMMAND_V_:      
05D7   18 2C                  JR   command_v   
05D9                COMMAND_W_:      
05D9   18 51                  JR   command_w   
05DB                COMMAND_X_:      
05DB   18 5A                  JR   command_x   
05DD                             ; 3
05DD                COMMAND_DEFAULT_:      
05DD   18 5F                  JR   command_default   
05DF                             ;********************** PAGE 5 END *********************************************
05DF                COMMAND_S:      
05DF   CD 72 0F               CALL   cmdTable   
05E2   62 00                  DB   "b",0   
05E4   0B 07                  DW   stringBegin   
05E6   63 00                  DB   "c",0   
05E8   5D 07                  DW   stringCompare   
05EA   65 00                  DB   "e",0   
05EC   13 07                  DW   stringEnd   
05EE   69 00                  DB   "i",0   
05F0   B5 08                  DW   stringIter   
05F2   6C 00                  DB   "l",0   
05F4   42 07                  DW   stringLength   
05F6   73 00                  DB   "s",0   
05F8   51 07                  DW   stringSize   
05FA   00 00                  DB   0,0   
05FC   DB 06                  DW   error1   
05FE                COMMAND_T:      
05FE   CD 72 0F               CALL   cmdTable   
0601   00 00                  DB   0,0   
0603   49 0D                  DW   true1   
0605                COMMAND_V:      
0605   CD 72 0F               CALL   cmdTable   
0608   62 00                  DB   "b",0   
060A   75 07                  DW   varBufPtr   
060C   65 00                  DB   "e",0   
060E   7B 07                  DW   varEcho   
0610   68 00                  DB   "h",0   
0612   81 07                  DW   varHeapPtr   
0614   74 00                  DB   "t",0   
0616   87 07                  DW   varTIBPtr   
0618   78 00                  DB   "x",0   
061A   8D 07                  DW   varHexPrefix   
061C   42 00                  DB   "B",0   
061E   C9 06                  DW   constBufStart   
0620   48 00                  DB   "H",0   
0622   BD 06                  DW   constHeapStart   
0624   54 00                  DB   "T",0   
0626   C3 06                  DW   constTIBStart   
0628   00 00                  DB   0,0   
062A   DB 06                  DW   error1   
062C                COMMAND_W:      
062C   CD 72 0F               CALL   cmdTable   
062F   6D 00                  DB   "m",0   ; /wm word mode
0631   93 07                  DW   wordMode   
0633   00 00                  DB   0,0   
0635   DB 06                  DW   error1   
0637                COMMAND_X:      
0637   CD 72 0F               CALL   cmdTable   
063A   00 00                  DB   0,0   
063C   98 07                  DW   xor   
063E                COMMAND_DEFAULT:      
063E   CD 72 0F               CALL   cmdTable   
0641   00 00                  DB   0,0   
0643   45 06                  DW   div   
0645                             ;                               32
0645                DIV:         
0645   E1                     POP   hl   ; hl = arg_b
0646   D1                     POP   de   ; de = arg_a
0647   03                     INC   bc   
0648   0A                     LD   a,(bc)   
0649   FE 3D                  CP   "="   
064B   28 02                  JR   z,div2   
064D   0B                     DEC   bc   ; /
064E   EB                     EX   de,hl   
064F                DIV2:        
064F   F5                     PUSH   af   ; preserve af, bc
0650   C5                     PUSH   bc   
0651   44 4D                  LD   bc,hl   
0653   CD B4 0D               CALL   divide   
0656   EB                     EX   de,hl   
0657   ED 53 FA 56            LD   (vRemain),de   
065B   C1                     POP   bc   ; restore
065C   F1                     POP   af   
065D   C3 9D 02               JP   sub3   
0660                             ; /ab absolute
0660                             ; num -- num
0660                ABSOLUTE:      
0660   E1                     POP   hl   
0661   CB 7C                  BIT   7,h   
0663   28 06                  JR   z,absolute1   
0665   AF                     XOR   a   
0666   95                     SUB   l   
0667   6F                     LD   l,a   
0668   9F                     SBC   a,a   
0669   94                     SUB   h   
066A   67                     LD   h,a   
066B                ABSOLUTE1:      
066B   E5                     PUSH   hl   
066C   DD E9                  JP   (ix)   
066E                             ; /ad addrOf                    24
066E                             ; char -- addr
066E                ADDROF:      
066E   E1                     POP   hl   ; a = char
066F   7D                     LD   a,l   
0670   CD 93 0F               CALL   getVarAddr   
0673   E5                     PUSH   hl   
0674                ADDROF2:      
0674   DD E9                  JP   (ix)   
0676                             ; /al length of an array, num elements
0676                             ; array* -- num
0676                ARRAYLENGTH:      
0676   E1                     POP   hl   
0677   2B                     DEC   hl   ; msb size
0678   56                     LD   d,(hl)   
0679   2B                     DEC   hl   ; lsb size
067A   5E                     LD   e,(hl)   
067B   EB                     EX   de,hl   
067C                ARRAYLENGTH1:      
067C   E5                     PUSH   hl   
067D   DD E9                  JP   (ix)   
067F                             ; /as size in bytes of an array, based on current data width
067F                             ; array* -- num
067F                ARRAYSIZE:      
067F                          ;*Macro unroll:  PERFORM arrayLength
067F   DD 21 86 06            LD   ix,performM_1538S1059   
0683   C3 76 06               JP   arrayLength   
0686                PERFORMM_1538S1059:      
0686   E1                     POP   hl   
0687   3A EE 56               LD   a,(vDataWidth)   
068A   3D                     DEC   a   
068B   28 EF                  JR   z,arrayLength1   
068D   CB 3C                  SRL   h   
068F   CB 1D                  RR   l   
0691   18 E9                  JR   arrayLength1   
0693                             ; 13
0693                             ; /br break from loop
0693                             ; --
0693                BREAK:       
0693   E1                     POP   hl   ; hl = condition, break if false
0694   7D                     LD   a,l   
0695   B4                     OR   h   
0696   28 02                  JR   z,break1   
0698   DD E9                  JP   (ix)   
069A                BREAK1:      
069A   FD 5D                  LD   e,iyl   ; get block* just under stack frame
069C   FD 54                  LD   d,iyh   
069E   21 08 00               LD   hl,8   
06A1   19                     ADD   hl,de   
06A2   23                     INC   hl   
06A3   23                     INC   hl   
06A4   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
06A7   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
06AA   C3 23 0C               JP   blockEnd   
06AD                             ; /b
06AD                BYTEMODE:      
06AD   3E 01                  LD   a,1   
06AF                BYTEMODE1:      
06AF   32 EE 56               LD   (vDataWidth),a   
06B2   DD E9                  JP   (ix)   
06B4                             ; //
06B4                COMMENT:      
06B4   03                     INC   bc   ; point to next char
06B5   0A                     LD   a,(bc)   
06B6   FE 20                  CP   " "   ; terminate on any char less than SP
06B8   30 FA                  JR   nc,comment   
06BA   0B                     DEC   bc   
06BB   DD E9                  JP   (ix)   
06BD                CONSTHEAPSTART:      
06BD   11 22 57               LD   de,HEAP   
06C0   C3 3D 0F               JP   constant   
06C3                CONSTTIBSTART:      
06C3   11 00 54               LD   de,TIB   
06C6   C3 3D 0F               JP   constant   
06C9                CONSTBUFSTART:      
06C9   11 00 55               LD   de,BUFFER   
06CC   C3 3D 0F               JP   constant   
06CF                DECBASE:      
06CF   3E 0A                  LD   a,10   
06D1                DECBASE1:      
06D1   32 EF 56               LD   (vNumBase),a   
06D4   DD E9                  JP   (ix)   
06D6                HEXBASE:      
06D6   3E 10                  LD   a,16   
06D8   C3 D1 06               JP   decBase1   
06DB                ERROR1:      
06DB   21 01 00               LD   hl,1   ; error 1: unknown command
06DE   C3 FA 10               JP   error   
06E1                             ; Z80 port input
06E1                             ; port -- value
06E1                INPUT:       
06E1   E1                     POP   hl   
06E2   59                     LD   e,c   ; save IP
06E3   4D                     LD   c,l   
06E4   ED 68                  IN   l,(c)   
06E6   26 00                  LD   h,0   
06E8   4B                     LD   c,e   ; restore IP
06E9   E5                     PUSH   hl   
06EA   DD E9                  JP   (ix)   
06EC                             ; /o Z80 port output
06EC                             ; value port --
06EC                OUTPUT:      
06EC   E1                     POP   hl   
06ED   59                     LD   e,c   ; save IP
06EE   4D                     LD   c,l   
06EF   E1                     POP   hl   
06F0   ED 69                  OUT   (c),l   
06F2   4B                     LD   c,e   ; restore IP
06F3   DD E9                  JP   (ix)   
06F5                             ; /qt
06F5                             ; bool --
06F5                QUIT:        
06F5   E1                     POP   hl   ; hl = condition, exit if true
06F6   7D                     LD   a,l   
06F7   B4                     OR   h   
06F8   20 02                  JR   nz,quit1   
06FA   DD E9                  JP   (ix)   
06FC                QUIT1:       
06FC   C3 23 0C               JP   blockEnd   
06FF                RECUR:       
06FF   E1                     POP   hl   
0700   22 EC 56               LD   (vRecurPtr),hl   
0703   DD E9                  JP   (ix)   
0705                REMAIN:      
0705   2A FA 56               LD   hl,(vRemain)   
0708   E5                     PUSH   hl   
0709   DD E9                  JP   (ix)   
070B                STRINGBEGIN:      
070B   21 FF FF               LD   hl,TRUE   ; string mode = true
070E   22 F2 56               LD   (vStrMode),hl   
0711   18 27                  JR   stringEnd1   ; save hl in vBufPtr
0713                STRINGEND:      
0713   21 00 00               LD   hl,FALSE   ; string mode = false
0716   22 F2 56               LD   (vStrMode),hl   
0719   2A E8 56               LD   hl,(vBufPtr)   ; append NUL to string
071C   AF                     XOR   a   
071D   77                     LD   (hl),a   
071E   23                     INC   hl   ; hl = string_end*
071F   ED 43 04 57            LD   (vTemp1),bc   ; save IP
0723   11 00 55               LD   de,BUFFER   ; de = string*
0726   B7                     OR   a   ; bc = size
0727   ED 52                  SBC   hl,de   
0729   44 4D                  LD   bc,hl   
072B   2A EA 56               LD   hl,(vHeapPtr)   ; hl = hstring*
072E   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
072F   D5                     PUSH   de   ; return hstring*
0730   ED B0                  LDIR      ; copy size bytes from string* to hstring*
0732   ED 53 EA 56            LD   (vHeapPtr),de   ; bump heap to hstring* += size
0736   ED 4B 04 57            LD   bc,(vTemp1)   ; restore IP
073A                STRINGEND1:      
073A   21 00 55               LD   hl,BUFFER   ; reset vBufPtr
073D   22 E8 56               LD   (vBufPtr),hl   
0740   DD E9                  JP   (ix)   
0742                STRINGLENGTH:      
0742   D1                     POP   de   
0743   21 00 00               LD   hl,0   
0746   18 02                  JR   stringLength2   
0748                STRINGLENGTH1:      
0748   13                     INC   de   
0749   23                     INC   hl   
074A                STRINGLENGTH2:      
074A   1A                     LD   a,(de)   
074B   B7                     OR   a   
074C   20 FA                  JR   nz,stringLength1   
074E                STRINGLENGTH3:      
074E   E5                     PUSH   hl   
074F   DD E9                  JP   (ix)   
0751                STRINGSIZE:      
0751                          ;*Macro unroll:  PERFORM stringLength
0751   DD 21 58 07            LD   ix,performM_1679S1218   
0755   C3 42 07               JP   stringLength   
0758                PERFORMM_1679S1218:      
0758   E1                     POP   hl   
0759   23                     INC   hl   
075A   C3 4E 07               JP   stringLength3   
075D                             ; /sc string compare
075D                             ; string1* string2* -- bool
075D                             ; Compares two null terminated strings.
075D                STRINGCOMPARE:      
075D   D1                     POP   de   
075E   E1                     POP   hl   
075F                STRINGCOMPARE1:      
075F   1A                     LD   a,(de)   
0760   BE                     CP   (hl)   
0761   20 07                  JR   nz,stringCompare2   
0763   B7                     OR   a   
0764   28 09                  JR   z,stringCompare3   
0766   13                     INC   de   
0767   23                     INC   hl   
0768   18 F5                  JR   stringCompare1   
076A                STRINGCOMPARE2:      
076A   21 00 00               LD   hl,FALSE   
076D   18 03                  JR   stringCompare4   
076F                STRINGCOMPARE3:      
076F   21 FF FF               LD   hl,TRUE   
0772                STRINGCOMPARE4:      
0772   E5                     PUSH   hl   
0773   DD E9                  JP   (ix)   
0775                VARBUFPTR:      
0775   21 E8 56               LD   hl,vBufPtr   
0778   C3 2E 0F               JP   variable   
077B                VARECHO:      
077B   21 F1 56               LD   hl,vEcho   
077E   C3 2E 0F               JP   variable   
0781                VARHEAPPTR:      
0781   21 EA 56               LD   hl,vHeapPtr   
0784   C3 2E 0F               JP   variable   
0787                VARTIBPTR:      
0787   21 E6 56               LD   hl,vTIBPtr   
078A   C3 2E 0F               JP   variable   
078D                VARHEXPREFIX:      
078D   21 F0 56               LD   hl,vHexPrefix   
0790   C3 2E 0F               JP   variable   
0793                             ; /wm
0793                WORDMODE:      
0793   3E 02                  LD   a,2   
0795   C3 AF 06               JP   byteMode1   
0798                             ; /x
0798                XOR:         
0798   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0799                XOR1:        
0799   E1                     POP   hl   
079A   7B                     LD   a,e   
079B   AD                     XOR   l   
079C   6F                     LD   l,a   
079D   7A                     LD   a,d   
079E   AC                     XOR   h   
079F   67                     LD   h,a   
07A0   C3 D8 02               JP   add3   
07A3                             ;*******************************************************************
07A3                             ; Monty implementations
07A3                             ;*******************************************************************
07A3                             ; /rg rangeSrc
07A3                             ; begin end step -- src
07A3                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
07A3                RANGESRC:      ; range source: begin, end, step, local: L
07A3   CD 9F 03               CALL   go   
07A6   00 00                  DW   NUL   
07A8   B2 07                  DW   rangeSrcM_1742S1291   
07AA   AC 07                  DW   $+2   
07AC   01                     DB   1   
07AD   04 62 65 73 4C         .PSTR   "besL"   
07B2                RANGESRCM_1742S1291:      
07B2   7B                     DB   "{"   ; init mutable L [index active inrange_test]
07B3   5B 25 62 20 2F 74 20 25 73 30 3E 7B 7B 25 61 25 65 3C 7D 7D 7B 7B 25 61 25 65 3E 7D 7D 3F 5D 20 25 4C 3D 20 DB   "[%b /t %s0>{{%a%e<}}{{%a%e>}}?] %L= "   
07D7   5C 6B 74 7B            DB   "\\kt{"   
07DB   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
07E3   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
07E9   25 4C 31 3B 21 2F 71 74 DB   "%L1;!/qt"   ; if not active don't send
07F1   25 4C 30 3B 20 25 61 3D DB   "%L0; %a="   ; store current index in A
07F9   25 73 20 25 4C 30 3B 20 2B 3D DB   "%s %L0; +="   ; inc value of index by step
0803   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
080B   25 4C 32 3B 5E         DB   "%L2;^"   ; ifte: inrange_test?
0810   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1;= 0 2}"   ; ifte: /t index, /f active = false, quit
0824   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
082B   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0832   7D                     DB   "}"   
0833   7D                     DB   "}"   
0834   00                     DB   0   
0835                             ; /ai arrayIter
0835                             ; array* -- src
0835                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
0835                ARRAYITER:      
0835   CD 9F 03               CALL   go   
0838   00 00                  DW   NUL   
083A   42 08                  DW   arrayIterM_1761S1311   
083C   3E 08                  DW   $+2   
083E   01                     DB   1   
083F   02 61 4C               .PSTR   "aL"   
0842                ARRAYITERM_1761S1311:      
0842   7B                     DB   "{"   
0843   5B 30 20 2F 74 20 25 61 2F 61 6C 5D 20 25 4C 3D DB   "[0 /t %a/al] %L="   ; init mutable L [index active size]
0853   5C 6B 74 7B            DB   "\\kt{"   
0857   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
085F   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
0865   25 4C 31 3B 21 2F 71 74 DB   "%L1;!/qt"   ; if not active don't send
086D   25 4C 30 3B 20 25 69 3D DB   "%L0; %i="   ; store current index in i
0875   25 4C 30 3B 20 2B 2B   DB   "%L0; ++"   ; inc value of index
087C   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0884   25 69 20 25 4C 32 3B 20 3C DB   "%i %L2; <"   ; ifte: index < size
088D   7B 25 61 25 69 3B 20 31 7D 7B 2F 66 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%a%i; 1}{/f %L1;= 0 2}"   ; ifte: /t value, /f active = false, quit
08A4   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
08AB   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08B2   7D                     DB   "}"   
08B3   7D                     DB   "}"   
08B4   00                     DB   0   
08B5                             ; /si stringIter
08B5                             ; string* -- src
08B5                          ;*Macro unroll: FUNC stringIter, 1, "sL"
08B5                STRINGITER:      
08B5   CD 9F 03               CALL   go   
08B8   00 00                  DW   NUL   
08BA   C2 08                  DW   stringIterM_1780S1331   
08BC   BE 08                  DW   $+2   
08BE   01                     DB   1   
08BF   02 73 4C               .PSTR   "sL"   
08C2                STRINGITERM_1780S1331:      
08C2   7B                     DB   "{"   
08C3   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
08CD   5C 6B 74 7B            DB   "\\kt{"   
08D1   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
08D9   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
08E0   25 4C 31 3B 21 2F 71 74 DB   "%L1;!/qt"   ; if not active don't send
08E8   25 4C 30 3B 20 25 69 3D DB   "%L0; %i="   ; store current index in A
08F0   25 4C 30 3B 20 2B 2B   DB   "%L0; ++"   ; inc value of index by step
08F7   2F 62 6D 20 25 73 25 69 3B 20 2F 77 6D 20 25 63 3D DB   "/bm %s%i; /wm %c="   ; read byte at i, store in c as word
0908   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0910   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
0917   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1;= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
092B   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: call sink note: /rc recur
0932   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0939   7D                     DB   "}"   
093A   7D                     DB   "}"   
093B   00                     DB   0   
093C                             ; /mp map
093C                             ; src func -- src1
093C                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
093C                MAP:         ; map: source, function
093C   CD 9F 03               CALL   go   
093F   00 00                  DW   NUL   
0941   49 09                  DW   mapM_1800S1353   
0943   45 09                  DW   $+2   
0945   00                     DB   0   
0946   02 73 66               .PSTR   "sf"   
0949                MAPM_1800S1353:      
0949   7B                     DB   "{"   
094A   5C 6B 74 7B            DB   "\\kt{"   
094E   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0956   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
095A   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
095F   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
096B   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
0973   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
097A   7D                     DB   "}"   
097B   7D                     DB   "}"   
097C   00                     DB   0   
097D                             ; /ft filter
097D                             ; src pred -- src1
097D                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
097D                FILTER:      ; filter: source, predicate, local: T
097D   CD 9F 03               CALL   go   
0980   00 00                  DW   NUL   
0982   8B 09                  DW   filterM_1814S1368   
0984   86 09                  DW   $+2   
0986   01                     DB   1   
0987   03 73 70 54            .PSTR   "spT"   
098B                FILTERM_1814S1368:      
098B   7B                     DB   "{"   
098C   5B 30 5D 25 54 3D      DB   "[0]%T="   
0992   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0996   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
099A   5B                     DB   "["   
099B   7B 25 64 20 25 54 30 3B 3D 20 2F 74 7D DB   "{%d %T0;= /t}"   ; case 0: store talkback in T[0], return true
09A8   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
09B0   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
09B4   5D 25 74 3B 5E         DB   "]%t;^"   ; select on %t
09B9   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 3B 5E 7D DB   "{%d %t %k^}{0 1 %T0;^}"   ; ifte: true send d to sink, false send 1 to talkback
09CF   3F                     DB   "?"   
09D0   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09D7   7D                     DB   "}"   
09D8   7D                     DB   "}"   
09D9   00                     DB   0   
09DA                             ; /fd fold
09DA                             ; reducer is a function like: \\da00bbLi4u
09DA                             ; src init reducer -- src1
09DA                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
09DA                FOLD:        ; src, init, reducer
09DA   CD 9F 03               CALL   go   
09DD   00 00                  DW   NUL   
09DF   E9 09                  DW   foldM_1833S1388   
09E1   E3 09                  DW   $+2   
09E3   01                     DB   1   
09E4   04 73 69 72 41         .PSTR   "sirA"   
09E9                FOLDM_1833S1388:      
09E9   7B                     DB   "{"   ; reducer: \\da00bbLi4u
09EA   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
09F1   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09F5   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09F9   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
09FE   7B 25 64 20 25 41 30 3B 20 25 72 5E 25 41 30 3B 3D 20 25 41 30 3B 7D 7B 25 64 7D DB   "{%d %A0; %r^%A0;= %A0;}{%d}"   ; ifte: reduce -> acc, acc or data
0A19   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
0A21   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A28   7D                     DB   "}"   
0A29   7D                     DB   "}"   
0A2A   00                     DB   0   
0A2B                             ; /fe forEach
0A2B                             ; src proc --
0A2B                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
0A2B                FOREACH:      ; forEach: source, procedure, local: T
0A2B   CD 9F 03               CALL   go   
0A2E   00 00                  DW   NUL   
0A30   39 0A                  DW   forEachM_1847S1403   
0A32   34 0A                  DW   $+2   
0A34   01                     DB   1   
0A35   03 73 70 54            .PSTR   "spT"   
0A39                FOREACHM_1847S1403:      
0A39   7B                     DB   "{"   
0A3A   5B 30 5D 25 54 3D      DB   "[0]%T="   
0A40   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
0A44   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
0A4C   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0A51   7B 25 64 20 25 54 30 3B 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0;=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0A63   3F                     DB   "?"   ; ifte:
0A64   30 20 31 20 25 54 30 3B 5E DB   "0 1 %T0;^"   ; 0 or 1: get next src data item
0A6D   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A74   7D                     DB   "}"   
0A75   00                     DB   0   
0A76                             ; ; /fs funcSrc
0A76                             ; ; func -- src
0A76                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0A76                FUNCSRC:      ; :f func or block
0A76   CD 9F 03               CALL   go   
0A79   00 00                  DW   NUL   
0A7B   82 0A                  DW   funcSrcM_1861S1418   
0A7D   7F 0A                  DW   $+2   
0A7F   00                     DB   0   
0A80   01 66                  .PSTR   "f"   
0A82                FUNCSRCM_1861S1418:      
0A82   7B                     DB   "{"   
0A83   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0A87   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0A8F   5C 64 74 7B            DB   "\\dt{"   
0A93   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0AA5   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0AAC   7D                     DB   "}"   
0AAD   7D                     DB   "}"   
0AAE   00                     DB   0   
0AAF                          ;*Macro unroll: FUNC printArray, 2, "abc"
0AAF                PRINTARRAY:      
0AAF   CD 9F 03               CALL   go   
0AB2   00 00                  DW   NUL   
0AB4   BD 0A                  DW   printArrayM_1871S1429   
0AB6   B8 0A                  DW   $+2   
0AB8   02                     DB   2   
0AB9   03 61 62 63            .PSTR   "abc"   
0ABD                PRINTARRAYM_1871S1429:      
0ABD   7B                     DB   "{"   
0ABE   27 5B 20 27 2E 73 20 25 61 2F 61 6C 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 3B 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/al%c= 0%b= (%a %b ;. %b ++ %b %c </br)^ ']'.s"   
0AF5   7D                     DB   "}"   
0AF6   00                     DB   0   
0AF7                             ;*******************************************************************
0AF7                             ; implementations continued
0AF7                             ;*******************************************************************
0AF7                COMMA:       
0AF7   CD 72 0F               CALL   cmdTable   
0AFA   63 00                  DB   "c",NUL   ; .c print char
0AFC   06 0B                  DW   readChar   
0AFE   73 00                  DB   "s",NUL   ; .s print string
0B00   0F 0B                  DW   readString   
0B02   00 00                  DW   NUL   ; .  print number, fall through
0B04   31 0B                  DW   readNumber   
0B06                READCHAR:      
0B06   CD 81 00               CALL   getchar   
0B09   26 00                  LD   h,0   
0B0B   6F                     LD   l,a   
0B0C   E5                     PUSH   hl   
0B0D   DD E9                  JP   (ix)   
0B0F                READSTRING:      
0B0F   ED 5B EA 56            LD   de,(vHeapPtr)   
0B13   D5                     PUSH   de   ; return start of string
0B14                READSTRING1:      
0B14   CD 81 00               CALL   getchar   
0B17   FE 0D                  CP   "\r"   
0B19   28 0D                  JR   z,readString2   
0B1B   12                     LD   (de),a   
0B1C   13                     INC   de   
0B1D   3A F1 56               LD   a,(vEcho)   
0B20   3C                     INC   a   
0B21   20 F1                  JR   nz,readString1   
0B23   CD 85 00               CALL   putchar   
0B26   18 EC                  JR   readString1   
0B28                READSTRING2:      
0B28   AF                     XOR   a   
0B29   12                     LD   (de),a   
0B2A   13                     INC   de   
0B2B   ED 53 EA 56            LD   (vHeapPtr),de   
0B2F   DD E9                  JP   (ix)   
0B31                READNUMBER:      
0B31   DD E5                  PUSH   ix   
0B33                          ;*Macro unroll:  PERFORM readString
0B33   DD 21 3A 0B            LD   ix,performM_1915S1478   
0B37   C3 0F 0B               JP   readString   
0B3A                PERFORMM_1915S1478:      
0B3A   60 69                  LD   hl,bc   ; save bc, hl = string*
0B3C   E3                     EX   (sp),hl   
0B3D   22 EA 56               LD   (vHeapPtr),hl   ; restore heap* to before string
0B40   44 4D                  LD   bc,hl   
0B42   0A                     LD   a,(bc)   
0B43   FE 2D                  CP   "-"   
0B45   28 11                  JR   z,readNumber1   
0B47   FE 24                  CP   "$"   
0B49   28 17                  JR   z,readNumber2   
0B4B   FE 30                  CP   "0"   
0B4D   30 09                  JR   nc,readNumber1   
0B4F   FE 3A                  CP   "9"+1   
0B51   38 05                  JR   c,readNumber1   
0B53   21 00 00               LD   hl,0   
0B56   18 12                  JR   readNumber3   
0B58                READNUMBER1:      
0B58                          ;*Macro unroll:  PERFORM num
0B58   DD 21 5F 0B            LD   ix,performM_1932S1495   
0B5C   C3 F3 0B               JP   num   
0B5F                PERFORMM_1932S1495:      
0B5F   E1                     POP   hl   
0B60   18 08                  JR   readNumber3   
0B62                READNUMBER2:      
0B62                          ;*Macro unroll:  PERFORM hexNum
0B62   DD 21 69 0B            LD   ix,performM_1936S1499   
0B66   C3 7A 0B               JP   hexNum   
0B69                PERFORMM_1936S1499:      
0B69   E1                     POP   hl   
0B6A                READNUMBER3:      
0B6A   C1                     POP   bc   
0B6B   DD E1                  POP   ix   
0B6D   E5                     PUSH   hl   
0B6E   DD E9                  JP   (ix)   
0B70                             ; ~ bitwise invert
0B70                TILDE:       
0B70                INVERT:      
0B70   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
0B71   7D                     LD   a,l   
0B72   2F                     CPL      
0B73   6F                     LD   l,a   
0B74   7C                     LD   a,h   
0B75   2F                     CPL      
0B76   67                     LD   h,a   
0B77   C3 D8 02               JP   add3   
0B7A                             ; $ hex                         ; 22
0B7A                DOLLAR:      
0B7A                HEXNUM:      
0B7A   21 00 00               LD   hl,0   ; Clear hl to accept the number
0B7D                HEXNUM1:      
0B7D   03                     INC   bc   
0B7E   0A                     LD   a,(bc)   ; Get the character which is a numeral
0B7F   CB 77                  BIT   6,a   ; is it uppercase alpha?
0B81   28 02                  JR   z,hexnum2   ; no a decimal
0B83   D6 07                  SUB   7   ; sub 7  to make $a - $F
0B85                HEXNUM2:      
0B85   D6 30                  SUB   $30   ; form decimal digit
0B87   DA 15 0C               JP   c,num2   
0B8A   FE 10                  CP   $0F+1   
0B8C   D2 15 0C               JP   nc,num2   
0B8F   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0B90   29                     ADD   hl,hl   ; 4X
0B91   29                     ADD   hl,hl   ; 8X
0B92   29                     ADD   hl,hl   ; 16X
0B93   85                     ADD   a,l   ; add into bottom of hl
0B94   6F                     LD   l,a   
0B95   18 E6                  JR   hexnum1   
0B97                             ; ? if                            23
0B97                             ; condition then else -- value
0B97                QUESTION:      
0B97                IF:          
0B97   D1                     POP   de   ; de = else
0B98   E1                     POP   hl   ; hl = then
0B99   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0B9A   7C                     LD   a,h   
0B9B   B5                     OR   l   
0B9C   E1                     POP   hl   ; hl = then
0B9D   CA A0 03               JP   z,go1   ; if z de = else
0BA0   EB                     EX   de,hl   ; condition = false, de = then
0BA1   C3 A0 03               JP   go1   
0BA4                             ; string                        ;38
0BA4                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0BA4                QUOTE:       
0BA4                STRING:      
0BA4   2A EA 56               LD   hl,(vHeapPtr)   ; hl = heap*
0BA7   E5                     PUSH   hl   ; save start of string
0BA8   0A                     LD   a,(bc)   
0BA9   5F                     LD   e,a   ; e = matching terminator
0BAA   03                     INC   bc   ; point to next char
0BAB   18 03                  JR   string2   
0BAD                STRING1:      
0BAD   77                     LD   (hl),a   
0BAE   23                     INC   hl   ; increase count
0BAF   03                     INC   bc   ; point to next char
0BB0                STRING2:      
0BB0   0A                     LD   a,(bc)   
0BB1   BB                     CP   e   ; is it the string terminator
0BB2   28 02                  JR   z,string3   
0BB4   18 F7                  JR   string1   
0BB6                STRING3:      
0BB6   AF                     XOR   a   ; write NUL to terminate string
0BB7   77                     LD   (hl),a   ; hl = end of string
0BB8   23                     INC   hl   
0BB9   22 EA 56               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0BBC   DD E9                  JP   (ix)   
0BBE                             ; %a .. %z                      43
0BBE                             ; -- value
0BBE                             ; returns value of arg
0BBE                PERCENT:      
0BBE                ARG:         
0BBE   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0BC1   FD 56 05               LD   d,(iy+5)   
0BC4   EB                     EX   de,hl   
0BC5   7D                     LD   a,l   ; arg_list* == null, skip
0BC6   B4                     OR   h   
0BC7   28 1A                  JR   z,arg0a   
0BC9   23                     INC   hl   ; a = num_args, hl = arg_list*
0BCA   7E                     LD   a,(hl)   
0BCB   23                     INC   hl   
0BCC   B7                     OR   a   
0BCD   28 14                  JR   z,arg0a   ; num_args == 0, skip
0BCF   5F                     LD   e,a   ; e = a = num_args
0BD0   03                     INC   bc   ; a = next char = dollar_name
0BD1   0A                     LD   a,(bc)   
0BD2   C5                     PUSH   bc   ; save IP
0BD3   43                     LD   b,e   ; b = e = num_args
0BD4   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0BD7   FD 56 03               LD   d,(iy+3)   
0BDA                ARG0:        
0BDA   1B                     DEC   de   ; a = dollar_name, de = next arg*
0BDB   1B                     DEC   de   
0BDC   BE                     CP   (hl)   
0BDD   28 09                  JR   z,arg1   
0BDF   23                     INC   hl   ; hl = next arg_list*
0BE0   10 F8                  DJNZ   arg0   
0BE2   C1                     POP   bc   ; no match, restore IP
0BE3                ARG0A:       
0BE3   11 00 00               LD   de,0   ; return 0
0BE6   18 08                  JR   arg1a   
0BE8                ARG1:        
0BE8   C1                     POP   bc   ; restore IP
0BE9   EB                     EX   de,hl   ; hl = arg*
0BEA   22 F8 56               LD   (vPointer),hl   ; store arg* in setter
0BED   5E                     LD   e,(hl)   
0BEE   23                     INC   hl   
0BEF   56                     LD   d,(hl)   ; de = arg
0BF0                ARG1A:       
0BF0   D5                     PUSH   de   ; push arg
0BF1   DD E9                  JP   (ix)   
0BF3                             ; 0..9 number                   37
0BF3                NUM:         
0BF3   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0BF6   0A                     LD   a,(bc)   ; Get numeral or -
0BF7   FE 2D                  CP   "-"   
0BF9   20 01                  JR   nz,num0   
0BFB   03                     INC   bc   ; move to next char, no flags affected
0BFC                NUM0:        
0BFC   08                     EX   af,af'   ; save zero flag = 0 for later
0BFD                NUM1:        
0BFD   0A                     LD   a,(bc)   ; read digit
0BFE   D6 30                  SUB   "0"   ; less than 0?
0C00   38 13                  JR   c,num2   ; not a digit, exit loop
0C02   FE 0A                  CP   10   ; greater that 9?
0C04   30 0F                  JR   nc,num2   ; not a digit, exit loop
0C06   03                     INC   bc   ; inc IP
0C07   54 5D                  LD   de,hl   ; multiply hl * 10
0C09   29                     ADD   hl,hl   
0C0A   29                     ADD   hl,hl   
0C0B   19                     ADD   hl,de   
0C0C   29                     ADD   hl,hl   
0C0D   85                     ADD   a,l   ; add digit in a to hl
0C0E   6F                     LD   l,a   
0C0F   3E 00                  LD   a,0   
0C11   8C                     ADC   a,h   
0C12   67                     LD   h,a   
0C13   18 E8                  JR   num1   
0C15                NUM2:        
0C15   0B                     DEC   bc   
0C16   08                     EX   af,af'   ; restore zero flag
0C17   20 07                  JR   nz,num3   
0C19   EB                     EX   de,hl   ; negate the value of hl
0C1A   21 00 00               LD   hl,0   
0C1D   B7                     OR   a   ; jump to sub2
0C1E   ED 52                  SBC   hl,de   
0C20                NUM3:        
0C20   E5                     PUSH   hl   ; Put the number on the stack
0C21   DD E9                  JP   (ix)   ; and process the next character
0C23                             ; }                               58
0C23                RBRACE:      
0C23                BLOCKEND:      
0C23   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0C26   FD 56 01               LD   d,(iy+1)   
0C29   ED 53 04 57            LD   (vTemp1),de   
0C2D   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0C30   FD 56 07               LD   d,(iy+7)   
0C33   ED 53 06 57            LD   (vTemp2),de   
0C37   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0C3A   FD 56 03               LD   d,(iy+3)   
0C3D   EB                     EX   de,hl   
0C3E   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0C41   FD 56 01               LD   d,(iy+1)   
0C44   13                     INC   de   ; for carry flag <=
0C45   B7                     OR   a   
0C46   ED 52                  SBC   hl,de   
0C48   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0C4A   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0C4C   FD 5D                  LD   e,iyl   
0C4E   21 08 00               LD   hl,8   
0C51   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0C52   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0C53   18 0C                  JR   blockEnd2   
0C55                BLOCKEND1:      ; same scope
0C55   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0C58   FD 56 03               LD   d,(iy+3)   
0C5B   EB                     EX   de,hl   
0C5C   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0C5E   FD 5D                  LD   e,iyl   
0C60   EB                     EX   de,hl   
0C61                BLOCKEND2:      
0C61   44 4D                  LD   bc,hl   ; bc = hl = BP
0C63   B7                     OR   a   ; hl = BP - SP = count
0C64   ED 72                  SBC   hl,sp   
0C66   7D                     LD   a,l   
0C67   B4                     OR   h   
0C68   28 09                  JR   z,blockEnd3   
0C6A   C5                     PUSH   bc   ; bc = count, hl = BP
0C6B   44 4D                  LD   bc,hl   
0C6D   E1                     POP   hl   
0C6E   2B                     DEC   hl   ; hl = BP-1
0C6F   1B                     DEC   de   ; de = args*-1
0C70   ED B8                  LDDR      
0C72   13                     INC   de   
0C73                BLOCKEND3:      
0C73   EB                     EX   de,hl   ; sp = de = new tos*
0C74   F9                     LD   sp,hl   
0C75   ED 4B 06 57            LD   bc,(vTemp2)   
0C79   FD 2A 04 57            LD   iy,(vTemp1)   
0C7D   ED 5B EC 56            LD   de,(vRecurPtr)   ; de = recur vector
0C81   7B                     LD   a,e   ; check for NUL
0C82   B2                     OR   d   
0C83   20 02                  JR   nz,blockEnd4   
0C85   DD E9                  JP   (ix)   
0C87                BLOCKEND4:      
0C87   21 00 00               LD   hl,0   ; clear recur vector
0C8A   22 EC 56               LD   (vRecurPtr),hl   
0C8D   C3 A0 03               JP   go1   ; execute de
0C90                GOBLOCK:      
0C90   ED 53 04 57            LD   (vTemp1),de   ; save de
0C94   21 00 54               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0C97   FD 54                  LD   d,iyh   
0C99   FD 5D                  LD   e,iyl   
0C9B   B7                     OR   a   ; if stack* == BP then this is the root_scope
0C9C   ED 52                  SBC   hl,de   
0C9E   ED 5B 04 57            LD   de,(vTemp1)   ; restore de
0CA2   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0CA3   B4                     OR   h   
0CA4   3E 00                  LD   a,0   
0CA6   28 6A                  JR   z,goFunc8   
0CA8   C5                     PUSH   bc   ; push IP
0CA9   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0CAC   FD 46 05               LD   b,(iy+5)   
0CAF   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0CB2   FD 66 03               LD   h,(iy+3)   
0CB5                GOBLOCK2:      
0CB5   C5                     PUSH   bc   ; arg_list*
0CB6   E5                     PUSH   hl   ; first_arg*
0CB7   FD E5                  PUSH   iy   ; push BP
0CB9   FD 21 00 00            LD   iy,0   ; BP = SP
0CBD   FD 39                  ADD   iy,sp   
0CBF                GOBLOCK3:      
0CBF   42 4B                  LD   bc,de   ; bc = de = block*-1
0CC1   DD E9                  JP   (ix)   
0CC3                GOFUNC:      ; execute func
0CC3   EB                     EX   de,hl   ; hl = func*
0CC4   5E                     LD   e,(hl)   ; de = partial_array*
0CC5   23                     INC   hl   
0CC6   56                     LD   d,(hl)   
0CC7   23                     INC   hl   
0CC8   7B                     LD   a,e   ; if partial_array* == null skip
0CC9   B2                     OR   d   
0CCA   28 21                  JR   z,goFunc3   
0CCC   ED 43 04 57            LD   (vTemp1),bc   
0CD0   22 06 57               LD   (vTemp2),hl   ; save bc,hl
0CD3   EB                     EX   de,hl   ; hl = partial_array*
0CD4   2B                     DEC   hl   ; bc = count
0CD5   46                     LD   b,(hl)   
0CD6   2B                     DEC   hl   
0CD7   4E                     LD   c,(hl)   
0CD8   23                     INC   hl   ; hl = array data*
0CD9   23                     INC   hl   
0CDA   18 06                  JR   goFunc2   ; push each item on stack
0CDC                GOFUNC1:      
0CDC   5E                     LD   e,(hl)   ; de = partial item
0CDD   23                     INC   hl   
0CDE   56                     LD   d,(hl)   
0CDF   23                     INC   hl   
0CE0   D5                     PUSH   de   ; push on stack
0CE1   0B                     DEC   bc   
0CE2                GOFUNC2:      
0CE2   79                     LD   a,c   ; if count != 0 then loop
0CE3   B0                     OR   b   
0CE4   20 F6                  JR   nz,goFunc1   
0CE6   ED 4B 04 57            LD   bc,(vTemp1)   ; restore bc
0CEA   2A 06 57               LD   hl,(vTemp2)   ; restore hl
0CED                GOFUNC3:      
0CED   5E                     LD   e,(hl)   ; de = block*
0CEE   23                     INC   hl   
0CEF   56                     LD   d,(hl)   
0CF0   23                     INC   hl   
0CF1   ED 53 04 57            LD   (vTemp1),de   ; save block*
0CF5   5E                     LD   e,(hl)   ; de = arg_list*
0CF6   23                     INC   hl   
0CF7   56                     LD   d,(hl)   
0CF8   23                     INC   hl   
0CF9   EB                     EX   de,hl   ; hl = arg_list*
0CFA   ED 5B 04 57            LD   de,(vTemp1)   ; restore de = block*
0CFE   7D                     LD   a,l   ; if arg_list* == null a = 0
0CFF   B4                     OR   h   
0D00   20 03                  JR   nz,goFunc4   
0D02   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0D03   18 0D                  JR   goFunc8   
0D05                GOFUNC4:      ; allocate locals
0D05   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0D06   18 03                  JR   goFunc6   
0D08                GOFUNC5:      ; loop
0D08   3B                     DEC   sp   
0D09   3B                     DEC   sp   
0D0A   3D                     DEC   a   
0D0B                GOFUNC6:      
0D0B   B7                     OR   a   
0D0C   20 FA                  JR   nz,goFunc5   ; end loop
0D0E                GOFUNC7:      
0D0E   23                     INC   hl   ; a = num_args* x 2
0D0F   7E                     LD   a,(hl)   
0D10   2B                     DEC   hl   
0D11   87                     ADD   a,a   ; a *= 2
0D12                GOFUNC8:      
0D12   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0D13   44 4D                  LD   bc,hl   
0D15   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0D18   85                     ADD   a,l   
0D19   6F                     LD   l,a   
0D1A   39                     ADD   hl,sp   
0D1B   18 98                  JR   goBlock2   
0D1D                             ; =                              21
0D1D                             ; value _oldValue --            ; uses address in vPointer 15
0D1D                ASSIGN:      
0D1D   E1                     POP   hl   ; discard last accessed value
0D1E   E1                     POP   hl   ; hl = new value
0D1F                ASSIGN0:      
0D1F   EB                     EX   de,hl   ; de = new value
0D20   2A F8 56               LD   hl,(vPointer)   
0D23                ASSIGN1:      ; entry point from defineEnd
0D23   73                     LD   (hl),e   
0D24   3A EE 56               LD   a,(vDataWidth)   
0D27   3D                     DEC   a   ; is it byte?
0D28   28 02                  JR   z,assign2   
0D2A   23                     INC   hl   
0D2B   72                     LD   (hl),d   
0D2C                ASSIGN2:      
0D2C   DD E9                  JP   (ix)   
0D2E                             ; hl = value1, de = value2
0D2E                             ; hl = result
0D2E                EQUALS:      
0D2E   B7                     OR   a   ; reset the carry flag
0D2F   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0D31   28 16                  JR   z,true1   
0D33   18 1A                  JR   false1   
0D35                NOTEQUALS:      
0D35   B7                     OR   a   ; reset the carry flag
0D36   ED 52                  SBC   hl,de   
0D38   20 0F                  JR   nz,true1   
0D3A   18 13                  JR   false1   
0D3C                             ; hl = value1 de = value2
0D3C                             ; hl = result
0D3C                LESSTHANEQ:      
0D3C   B7                     OR   a   
0D3D   ED 52                  SBC   hl,de   
0D3F   18 05                  JR   lessthan1   
0D41                             ; hl = value1 de = value2
0D41                             ; hl = result
0D41                LESSTHAN:      
0D41   B7                     OR   a   
0D42   ED 52                  SBC   hl,de   
0D44   28 09                  JR   z,false1   
0D46                LESSTHAN1:      
0D46   FA 4F 0D               JP   m,false1   
0D49                TRUE1:       
0D49   21 FF FF               LD   hl,TRUE   
0D4C   E5                     PUSH   hl   
0D4D   DD E9                  JP   (ix)   
0D4F                NULL1:       
0D4F                FALSE1:      
0D4F   21 00 00               LD   hl,FALSE   
0D52   E5                     PUSH   hl   
0D53   DD E9                  JP   (ix)   
0D55                SPREAD:      
0D55   E1                     POP   hl   ; hl = array*
0D56   ED 43 04 57            LD   (vTemp1),bc   ; save bc
0D5A   2B                     DEC   hl   ; bc = length
0D5B   46                     LD   b,(hl)   
0D5C   2B                     DEC   hl   
0D5D   4E                     LD   c,(hl)   
0D5E   23                     INC   hl   ; move back to array 0
0D5F   23                     INC   hl   
0D60   18 0D                  JR   spread3   
0D62                SPREAD1:      
0D62   5E                     LD   e,(hl)   ; e = lsb data at hl
0D63   23                     INC   hl   
0D64   3A EE 56               LD   a,(vDataWidth)   ; data width = 1, d = 0, skip
0D67   57                     LD   d,a   
0D68   15                     DEC   d   
0D69   28 02                  JR   z,spread2   
0D6B   56                     LD   d,(hl)   ; d = msb data at hl
0D6C   23                     INC   hl   
0D6D                SPREAD2:      
0D6D   D5                     PUSH   de   ; return de
0D6E   0B                     DEC   bc   ; count--
0D6F                SPREAD3:      
0D6F   79                     LD   a,c   ; exit loop if bc == 0
0D70   B0                     OR   b   
0D71   20 EF                  JR   nz,spread1   
0D73   ED 4B 04 57            LD   bc,(vTemp1)   ; restore bc
0D77   DD E9                  JP   (ix)   
0D79                             ; shiftLeft
0D79                             ; value count <<
0D79                             ; count variable <<=
0D79                SHIFTLEFT:      
0D79   E1                     POP   hl   ; de = arg_a, hl = arg_b
0D7A   D1                     POP   de   
0D7B   03                     INC   bc   
0D7C   0A                     LD   a,(bc)   
0D7D   FE 3D                  CP   "="   
0D7F   28 02                  JR   z,shiftLeft2   
0D81   0B                     DEC   bc   
0D82   EB                     EX   de,hl   ; de = arg_b, hl = arg_a
0D83                SHIFTLEFT2:      
0D83   ED 43 04 57            LD   (vTemp1),bc   ; save IP
0D87   43                     LD   b,e   ; b = loop counter
0D88   04                     INC   b   ; test for counter=0 case
0D89   18 01                  JR   shiftLeft4   
0D8B                SHIFTLEFT3:      
0D8B   29                     ADD   hl,hl   ; left shift hl
0D8C                SHIFTLEFT4:      
0D8C   10 FD                  DJNZ   shiftLeft3   
0D8E   ED 4B 04 57            LD   bc,(vTemp1)   ; restore IP
0D92   C3 9D 02               JP   sub3   
0D95                             ; shiftRight
0D95                             ; value count >>
0D95                             ; count variable >>=
0D95                SHIFTRIGHT:      
0D95   E1                     POP   hl   ; de = arg_a, hl = arg_b
0D96   D1                     POP   de   
0D97   03                     INC   bc   
0D98   0A                     LD   a,(bc)   
0D99   FE 3D                  CP   "="   
0D9B   28 02                  JR   z,shiftRight2   
0D9D   0B                     DEC   bc   
0D9E   EB                     EX   de,hl   ; de = arg_a, hl = arg_b
0D9F                SHIFTRIGHT2:      
0D9F   ED 43 04 57            LD   (vTemp1),bc   ; save IP
0DA3   43                     LD   b,e   ; b = loop counter
0DA4   04                     INC   b   ; test for counter=0 case
0DA5   18 04                  JR   shiftRight4   
0DA7                SHIFTRIGHT3:      
0DA7   CB 3C                  SRL   h   ; right shift hl
0DA9   CB 1D                  RR   l   
0DAB                SHIFTRIGHT4:      
0DAB   10 FA                  DJNZ   shiftRight3   
0DAD   ED 4B 04 57            LD   bc,(vTemp1)   ; restore IP
0DB1   C3 9D 02               JP   sub3   
0DB4                             ; division subroutine.
0DB4                             ; bc: divisor, de: dividend, hl: remainder
0DB4                DIVIDE:      
0DB4   21 00 00               LD   hl,0   ; zero the remainder
0DB7   3E 10                  LD   a,16   ; loop counter
0DB9                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0DB9   CB 21                  SLA   c   
0DBB   CB 10                  RL   b   
0DBD   ED 6A                  ADC   hl,hl   
0DBF   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0DC1   38 03                  JR   c,divide2   
0DC3   0C                     INC   c   
0DC4   18 01                  JR   divide3   
0DC6                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0DC6   19                     ADD   hl,de   
0DC7                DIVIDE3:      
0DC7   3D                     DEC   a   
0DC8   20 EF                  JR   nz,divide1   
0DCA   50 59                  LD   de,bc   ; result from bc to de
0DCC   C9                     RET      
0DCD                DOTNEXT:      
0DCD   3A F2 56               LD   a,(vStrMode)   ; if string mode then exit
0DD0   3C                     INC   a   
0DD1   20 02                  JR   nz,dotNext1   
0DD3   DD E9                  JP   (ix)   
0DD5                DOTNEXT1:      
0DD5   11 00 55               LD   de,BUFFER   
0DD8   2A E8 56               LD   hl,(vBufPtr)   
0DDB   36 00                  LD   (hl),0   ; store NUL at end of string
0DDD   ED 53 E8 56            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0DE1   EB                     EX   de,hl   ; hl = BUFFER
0DE2   CD AE 0F               CALL   putstr   
0DE5   DD E9                  JP   (ix)   
0DE7                             ; arg_list - parses arg_list e.g. ab:c
0DE7                             ; -- arg_list*
0DE7                PARSEARGS:      
0DE7   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0DEA   2A EA 56               LD   hl,(vHeapPtr)   ; hl = heap*
0DED   E5                     PUSH   hl   ; save start of arg_list
0DEE   23                     INC   hl   ; skip length fields to start of string
0DEF   23                     INC   hl   
0DF0   03                     INC   bc   ; point to next char
0DF1                PARSEARGS1:      
0DF1   0A                     LD   a,(bc)   
0DF2   FE 3A                  CP   ":"   ; ":" switches from args to locals
0DF4   20 03                  JR   nz,parseArgs1a   
0DF6   14                     INC   d   ; non zero value local count acts as flag
0DF7   18 10                  JR   parseArgs3   
0DF9                PARSEARGS1A:      
0DF9   FE 61                  CP   "a"   ; < "a" terminates arg_list
0DFB   38 0F                  JR   c,parseArgs4   
0DFD   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0DFF   30 0B                  JR   nc,parseArgs4   
0E01                PARSEARGS2:      
0E01   77                     LD   (hl),a   
0E02   23                     INC   hl   
0E03   1C                     INC   e   ; increase arg count
0E04   AF                     XOR   a   
0E05   B2                     OR   d   
0E06   28 01                  JR   z,parseArgs3   
0E08   14                     INC   d   ; if d > 0 increase local count
0E09                PARSEARGS3:      
0E09   03                     INC   bc   ; point to next char
0E0A   18 E5                  JR   parseArgs1   
0E0C                PARSEARGS4:      
0E0C   0B                     DEC   bc   
0E0D   AF                     XOR   a   
0E0E   B2                     OR   d   
0E0F   28 01                  JR   z,parseArgs5   
0E11   15                     DEC   d   ; remove initial inc
0E12                PARSEARGS5:      
0E12   23                     INC   hl   
0E13   22 EA 56               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0E16   E1                     POP   hl   ; hl = start of arg_list
0E17   72                     LD   (hl),d   ; write number of locals at start - 1
0E18   23                     INC   hl   
0E19   73                     LD   (hl),e   ; write number of args + locals at start - 2
0E1A   2B                     DEC   hl   
0E1B   E3                     EX   (sp),hl   
0E1C   E9                     JP   (hl)   
0E1D                             ; create block: parses block e.g. 00bbIC4uLi4g
0E1D                             ; -- block*
0E1D                PARSEBLOCK:      
0E1D   C5                     PUSH   bc   ; return pointer to first { of block
0E1E   03                     INC   bc   
0E1F   16 01                  LD   d,1   ; nesting: count first parenthesis
0E21                PARSEBLOCK1:      ; Skip to end of definition
0E21   0A                     LD   a,(bc)   ; Get the next character
0E22   03                     INC   bc   ; Point to next character
0E23   FE 21                  CP   " " + 1   ; ignore whitespace
0E25   38 FA                  JR   c,parseBlock1   
0E27   FE 27                  CP   "'"   ; quote char
0E29   28 0F                  JR   z,parseBlock2   
0E2B   FE 22                  CP   DQ   ; double quote char
0E2D   28 0B                  JR   z,parseBlock2   
0E2F   FE 60                  CP   "`"   ; grave char
0E31   28 07                  JR   z,parseBlock2   
0E33   CB 7A                  BIT   7,d   
0E35   20 EA                  JR   nz,parseBlock1   
0E37   C3 40 0E               JP   parseBlock3   
0E3A                PARSEBLOCK2:      
0E3A   3E 80                  LD   a,$80   
0E3C   AA                     XOR   d   
0E3D   57                     LD   d,a   
0E3E   18 E1                  JR   parseBlock1   
0E40                PARSEBLOCK3:      
0E40   FE 28                  CP   "("   
0E42   28 16                  JR   z,parseBlock4   
0E44   FE 7B                  CP   "{"   
0E46   28 12                  JR   z,parseBlock4   
0E48   FE 5B                  CP   "["   
0E4A   28 0E                  JR   z,parseBlock4   
0E4C   FE 29                  CP   ")"   
0E4E   28 0D                  JR   z,parseBlock5   
0E50   FE 7D                  CP   "}"   
0E52   28 09                  JR   z,parseBlock5   
0E54   FE 5D                  CP   "]"   
0E56   28 05                  JR   z,parseBlock5   
0E58   18 C7                  JR   parseBlock1   
0E5A                PARSEBLOCK4:      
0E5A   14                     INC   d   
0E5B   18 C4                  JR   parseBlock1   
0E5D                PARSEBLOCK5:      
0E5D   15                     DEC   d   
0E5E   20 C1                  JR   nz,parseBlock1   ; get the next element
0E60   60 69                  LD   hl,bc   ; hl = IP
0E62   11 22 57               LD   de,HEAP   ; is IP pointing to object in heap
0E65   B7                     OR   a   ; IP - HEAP
0E66   ED 52                  SBC   hl,de   
0E68   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0E6A   28 1C                  JR   z,parseBlock6   
0E6C   60 69                  LD   hl,bc   ; hl = IP
0E6E   D1                     POP   de   ; de = block*
0E6F   ED 43 04 57            LD   (vTemp1),bc   ; save IP
0E73   B7                     OR   a   ; bc = size
0E74   ED 52                  SBC   hl,de   
0E76   44 4D                  LD   bc,hl   
0E78   EB                     EX   de,hl   ; hl = block* de = heap*
0E79   ED 5B EA 56            LD   de,(vHeapPtr)   
0E7D   D5                     PUSH   de   ; return hblock*
0E7E   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0E80   ED 53 EA 56            LD   (vHeapPtr),de   ; heap* += size
0E84   ED 4B 04 57            LD   bc,(vTemp1)   ; restore IP
0E88                PARSEBLOCK6:      
0E88   0B                     DEC   bc   ; balanced, exit
0E89   E1                     POP   hl   ; hl = block*
0E8A   E3                     EX   (sp),hl   ; return to caller
0E8B   E9                     JP   (hl)   
0E8C                             ; create function
0E8C                             ; arg_list* block* -- func*
0E8C                CREATEFUNC:      
0E8C   E1                     POP   hl   ; save retrn address
0E8D   22 08 57               LD   (vTemp3),hl   
0E90   ED 43 04 57            LD   (vTemp1),bc   ; save IP
0E94   E1                     POP   hl   ; hl = block*
0E95   22 06 57               LD   (vTemp2),hl   ; save block*
0E98   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0E9B   FD 56 05               LD   d,(iy+5)   
0E9E   7B                     LD   a,e   ; if arg_list == null then make a func
0E9F   B2                     OR   d   
0EA0   20 09                  JR   nz,createFunc0   
0EA2   21 00 00               LD   hl,0   ; partial_array = null
0EA5   ED 5B EA 56            LD   de,(vHeapPtr)   ; de = compile*
0EA9   18 65                  JR   createFunc5   
0EAB                CREATEFUNC0:      
0EAB   E1                     POP   hl   ; hl = inner_arg_list*
0EAC   E5                     PUSH   hl   ; save inner_arg_list
0EAD   ED 5B EA 56            LD   de,(vHeapPtr)   ; de = compile*
0EB1   7E                     LD   a,(hl)   ; compile inner_num_locals
0EB2   4F                     LD   c,a   ; b = inner_num_locals
0EB3   12                     LD   (de),a   
0EB4   23                     INC   hl   
0EB5   13                     INC   de   
0EB6   7E                     LD   a,(hl)   ; compile inner_length
0EB7   12                     LD   (de),a   
0EB8   91                     SUB   c   ; a = inner_num args
0EB9   23                     INC   hl   
0EBA   13                     INC   de   
0EBB   B7                     OR   a   ; compile args if inner_length > 0
0EBC   28 05                  JR   z,createFunc1   
0EBE   4F                     LD   c,a   ; bc = a
0EBF   06 00                  LD   b,0   
0EC1   ED B0                  LDIR      
0EC3                CREATEFUNC1:      
0EC3   EB                     EX   de,hl   ; hl = outer_arg_list
0EC4   FD 5E 04               LD   e,(iy+4)   
0EC7   FD 56 05               LD   d,(iy+5)   
0ECA   EB                     EX   de,hl   
0ECB   23                     INC   hl   ; a = outer_length
0ECC   7E                     LD   a,(hl)   
0ECD   23                     INC   hl   
0ECE   B7                     OR   a   
0ECF   28 05                  JR   z,createFunc2   
0ED1   4F                     LD   c,a   
0ED2   06 00                  LD   b,0   
0ED4   ED B0                  LDIR      ; append outer_args
0ED6                CREATEFUNC2:      ; a = outer_length
0ED6   47                     LD   b,a   ; b = a = outer_length
0ED7   2A EA 56               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0EDA   23                     INC   hl   
0EDB   7E                     LD   a,(hl)   ; add outer_length to new length
0EDC   80                     ADD   a,b   
0EDD   77                     LD   (hl),a   
0EDE   2B                     DEC   hl   
0EDF   78                     LD   a,b   ; save outer_length in a'
0EE0   08                     EX   af,af'   
0EE1   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0EE2   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0EE3   B7                     OR   a   
0EE4   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0EE6   4F                     LD   c,a   ; c = inner_num_locals
0EE7   06 00                  LD   b,0   ; bc = inner_num_locals
0EE9   23                     INC   hl   ; a = inner_length
0EEA   7E                     LD   a,(hl)   
0EEB   91                     SUB   c   ; a = inner_num_args
0EEC   23                     INC   hl   ; hl = inner_arg_chars
0EED   85                     ADD   a,l   ; hl += a
0EEE   6F                     LD   l,a   
0EEF   3E 00                  LD   a,0   
0EF1   84                     ADD   a,h   
0EF2   67                     LD   h,a   
0EF3   ED B0                  LDIR      ; append inner_locals
0EF5                CREATEFUNC2A:      
0EF5   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0EF6   12                     LD   (de),a   ; compile partial_array length field
0EF7   13                     INC   de   
0EF8   AF                     XOR   a   
0EF9   12                     LD   (de),a   
0EFA   13                     INC   de   
0EFB   D5                     PUSH   de   ; push partial_array*
0EFC   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0EFD   FD 5E 02               LD   e,(iy+2)   
0F00   FD 56 03               LD   d,(iy+3)   
0F03   EB                     EX   de,hl   
0F04                CREATEFUNC3:      
0F04   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0F05   4E                     LD   c,(hl)   
0F06   2B                     DEC   hl   
0F07   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0F08   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0F09   13                     INC   de   
0F0A   79                     LD   a,c   
0F0B   12                     LD   (de),a   
0F0C   13                     INC   de   
0F0D   10 F5                  DJNZ   createFunc3   ; b = outer_length
0F0F                CREATEFUNC4:      
0F0F   E1                     POP   hl   ; hl = partial_array*
0F10                CREATEFUNC5:      
0F10   C1                     POP   bc   ; bc = new_arg_list*
0F11   D5                     PUSH   de   ; return new func*
0F12   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0F13   73                     LD   (hl),e   ; compile partial_array* to func
0F14   23                     INC   hl   
0F15   72                     LD   (hl),d   
0F16   23                     INC   hl   
0F17   ED 5B 06 57            LD   de,(vTemp2)   ; de = block*
0F1B   73                     LD   (hl),e   ; compile block* to func
0F1C   23                     INC   hl   
0F1D   72                     LD   (hl),d   
0F1E   23                     INC   hl   
0F1F   71                     LD   (hl),c   ; compile new_arg_list* to func
0F20   23                     INC   hl   
0F21   70                     LD   (hl),b   
0F22   23                     INC   hl   
0F23   22 EA 56               LD   (vHeapPtr),hl   ; bump heap ptr
0F26   ED 4B 04 57            LD   bc,(vTemp1)   ; restore IP
0F2A   2A 08 57               LD   hl,(vTemp3)   ; jump to return address
0F2D   E9                     JP   (hl)   
0F2E                             ;*******************************************************************
0F2E                             ; general routines
0F2E                             ;*******************************************************************
0F2E                             ; hl = address
0F2E                VARIABLE:      
0F2E   22 F8 56               LD   (vPointer),hl   
0F31   5E                     LD   e,(hl)   
0F32   3A EE 56               LD   a,(vDataWidth)   
0F35   3D                     DEC   a   
0F36   16 00                  LD   d,0   
0F38   28 03                  JR   z,constant   
0F3A   23                     INC   hl   
0F3B   56                     LD   d,(hl)   
0F3C   2B                     DEC   hl   
0F3D                CONSTANT:      
0F3D   D5                     PUSH   de   
0F3E   DD E9                  JP   (ix)   
0F40                             ; followed by a table
0F40                             ; indexed on the 0-25 lowercase letter
0F40                             ; db lsb(addr)
0F40                             ; the final item index 26 matches any other char
0F40                CHARTABLE:      
0F40   03                     INC   bc   
0F41   0A                     LD   a,(bc)   
0F42   FE 7B                  CP   "z"+1   
0F44   30 0F                  JR   nc,charTable3   
0F46   D6 61                  SUB   "a"   
0F48   38 0B                  JR   c,charTable3   
0F4A                CHARTABLE1:      
0F4A   E1                     POP   hl   
0F4B   85                     ADD   a,l   
0F4C   6F                     LD   l,a   
0F4D   7E                     LD   a,(hl)   ; must have the same msb as the table
0F4E   B7                     OR   a   ; a = 0, nop
0F4F   20 02                  JR   nz,charTable2   
0F51   DD E9                  JP   (ix)   
0F53                CHARTABLE2:      
0F53   6F                     LD   l,a   
0F54   E9                     JP   (hl)   
0F55                CHARTABLE3:      
0F55   3E 1A                  LD   a,26   
0F57   0B                     DEC   bc   
0F58   18 F0                  JR   charTable1   
0F5A                             ; followed by a table
0F5A                             ; db char
0F5A                             ; dw addr
0F5A                             ; the final item must have char == NUL
0F5A                COMMANDTABLE:      
0F5A   E1                     POP   hl   
0F5B                COMMANDTABLE1:      
0F5B   03                     INC   bc   
0F5C                COMMANDTABLE2:      
0F5C   AF                     XOR   a   
0F5D   BE                     CP   (hl)   
0F5E   20 03                  JR   nz,commandTable3   
0F60   0B                     DEC   bc   
0F61   18 09                  JR   commandTable4   
0F63                COMMANDTABLE3:      
0F63   0A                     LD   a,(bc)   
0F64   BE                     CP   (hl)   
0F65   28 05                  JR   z,commandTable4   
0F67   23                     INC   hl   
0F68   23                     INC   hl   
0F69   23                     INC   hl   
0F6A   18 F0                  JR   commandTable2   
0F6C                COMMANDTABLE4:      
0F6C   23                     INC   hl   
0F6D   5E                     LD   e,(hl)   
0F6E   23                     INC   hl   
0F6F   56                     LD   d,(hl)   
0F70   EB                     EX   de,hl   
0F71   E9                     JP   (hl)   
0F72                             ; followed by a table
0F72                             ; db char
0F72                             ; db char - if null only match on first char
0F72                             ; dw addr
0F72                             ; the final item must have char == NUL
0F72                CMDTABLE:      
0F72   E1                     POP   hl   
0F73                CMDTABLE1:      
0F73                CMDTABLE2:      
0F73   56                     LD   d,(hl)   
0F74   23                     INC   hl   
0F75   5E                     LD   e,(hl)   
0F76   23                     INC   hl   
0F77   AF                     XOR   a   ; if d == 0, matched
0F78   BA                     CP   d   
0F79   28 13                  JR   z,cmdTable5   
0F7B   03                     INC   bc   ; match?
0F7C   0A                     LD   a,(bc)   
0F7D   BA                     CP   d   
0F7E   20 09                  JR   nz,cmdTable4   
0F80                CMDTABLE3:      
0F80   AF                     XOR   a   ; if e == 0, matched
0F81   BB                     CP   e   
0F82   28 0A                  JR   z,cmdTable5   
0F84   03                     INC   bc   
0F85   0A                     LD   a,(bc)   ; match?
0F86   BB                     CP   e   
0F87   28 05                  JR   z,cmdTable5   
0F89                CMDTABLE4:      ; no match, restore bc, go to next table entry
0F89   0B                     DEC   bc   
0F8A   23                     INC   hl   
0F8B   23                     INC   hl   
0F8C   18 E5                  JR   cmdTable2   
0F8E                CMDTABLE5:      ; matched, jump to addr
0F8E   5E                     LD   e,(hl)   
0F8F   23                     INC   hl   
0F90   56                     LD   d,(hl)   
0F91   EB                     EX   de,hl   
0F92   E9                     JP   (hl)   
0F93                GETVARADDR:      
0F93   21 00 00               LD   hl,0   
0F96   FE 7B                  CP   "z"+1   ; if a > z then exit
0F98   D0                     RET   nc   
0F99   D6 41                  SUB   "A"   ; a - 65
0F9B   D8                     RET   c   ; if < A then exit
0F9C   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0F9E   38 05                  JR   c,getVarAddr1   
0FA0   D6 06                  SUB   "a"-("Z"+1)   
0FA2   FE 1A                  CP   "Z"-"A"+1   
0FA4   D8                     RET   c   ; if < a then exit
0FA5                GETVARADDR1:      
0FA5   87                     ADD   a,a   ; double a
0FA6   6F                     LD   l,a   
0FA7   26 56                  LD   h,msb(VARS)   
0FA9   C9                     RET      
0FAA                PUTSTR0:      
0FAA   CD 85 00               CALL   putchar   
0FAD   23                     INC   hl   
0FAE                PUTSTR:      
0FAE   7E                     LD   a,(hl)   
0FAF   B7                     OR   a   
0FB0   20 F8                  JR   nz,putstr0   
0FB2   C9                     RET      
0FB3                             ; **************************************************************************
0FB3                             ; calculate nesting value
0FB3                             ; a is char to be tested,
0FB3                             ; e is the nesting value (initially 0)
0FB3                             ; e is increased by ( and [
0FB3                             ; e is decreased by ) and ]
0FB3                             ; e has its bit 7 toggled by `
0FB3                             ; limited to 127 levels
0FB3                             ; **************************************************************************
0FB3                NESTING:      
0FB3   FE 27                  CP   "'"   ; quote char
0FB5   28 0A                  JR   z,nesting0   
0FB7   FE 22                  CP   DQ   ; double quote char
0FB9   28 06                  JR   z,nesting0   
0FBB   FE 60                  CP   "`"   ; grave char
0FBD   28 02                  JR   z,nesting0   
0FBF   18 0A                  JR   nesting1   
0FC1                NESTING0:      
0FC1   CB 7B                  BIT   7,e   
0FC3   28 03                  JR   z,nesting1a   
0FC5   CB BB                  RES   7,e   
0FC7   C9                     RET      
0FC8                NESTING1A:      
0FC8   CB FB                  SET   7,e   
0FCA   C9                     RET      
0FCB                NESTING1:      
0FCB   CB 7B                  BIT   7,e   
0FCD   C0                     RET   nz   
0FCE   FE 7B                  CP   "{"   
0FD0   28 08                  JR   z,nesting2   
0FD2   FE 5B                  CP   "["   
0FD4   28 04                  JR   z,nesting2   
0FD6   FE 28                  CP   "("   
0FD8   20 02                  JR   nz,nesting3   
0FDA                NESTING2:      
0FDA   1C                     INC   e   
0FDB   C9                     RET      
0FDC                NESTING3:      
0FDC   FE 7D                  CP   "}"   
0FDE   28 07                  JR   z,nesting4   
0FE0   FE 5D                  CP   "]"   
0FE2   28 03                  JR   z,nesting4   
0FE4   FE 29                  CP   ")"   
0FE6   C0                     RET   nz   
0FE7                NESTING4:      
0FE7   1D                     DEC   e   
0FE8   C9                     RET      
0FE9                PROMPT:      
0FE9   CD F9 0F               CALL   printStr   
0FEC   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0FF1   C9                     RET      
0FF2                CRLF:        
0FF2   CD F9 0F               CALL   printStr   
0FF5   0D 0A 00               .CSTR   "\r\n"   
0FF8   C9                     RET      
0FF9                             ; prints a null teminated string
0FF9                             ; the string should be immediately following the call
0FF9                PRINTSTR:      
0FF9   E3                     EX   (sp),hl   ; swap			
0FFA   CD AE 0F               CALL   putstr   
0FFD   23                     INC   hl   ; inc past NUL
0FFE   E3                     EX   (sp),hl   ; put it back	
0FFF   C9                     RET      
1000                INIT:        
1000   21 F0 01               LD   hl,titleStr   
1003   11 0E 57               LD   de,titleBuf   
1006   06 14                  LD   b,20   
1008                INIT1:       
1008   1A                     LD   a,(de)   
1009   BE                     CP   (hl)   
100A   20 17                  JR   nz,coldBoot0   
100C   13                     INC   de   
100D   23                     INC   hl   
100E   10 F8                  DJNZ   init1   
1010                WARMINIT:      
1010   ED 4B FC 56            LD   bc,(vSavedIP)   ; restore IP
1014   ED 7B FE 56            LD   sp,(vSavedSP)   ; restore SP
1018   DD 2A 00 57            LD   ix,(vSavedNext)   ; restore Next
101C   FD 2A 02 57            LD   iy,(vSavedBP)   ; restore BP
1020   C3 5A 10               JP   start1   
1023                COLDBOOT0:      
1023   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
1026   11 0E 57               LD   de,titleBuf   
1029   06 14                  LD   b,20   
102B   ED B0                  LDIR      
102D                COLDINIT:      
102D   21 DE 01               LD   hl,isysVars   
1030   11 E6 56               LD   de,sysVars   
1033   01 12 00               LD   bc,4 * 2 + 10   
1036   ED B0                  LDIR      
1038   21 00 56               LD   hl,vars   ; 52 vars LO HI
103B   06 34                  LD   b,26*2   
103D   AF                     XOR   a   
103E                COLDBOOT1:      
103E   77                     LD   (hl),a   
103F   23                     INC   hl   
1040   10 FC                  DJNZ   coldBoot1   
1042   DD 21 D6 10            LD   ix,NEXT   
1046   FD 21 00 54            LD   iy,STACK   
104A   C9                     RET      
104B                COLDSTART:      
104B   31 00 54               LD   sp,STACK   
104E   CD 23 10               CALL   coldBoot0   
1051   C3 5A 10               JP   start1   
1054                START:       
1054   31 00 54               LD   sp,STACK   ; start Monty
1057   CD 00 10               CALL   init   ; setups
105A                START1:      
105A   21 0E 57               LD   hl,titleBuf   
105D   CD AE 0F               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
1060                INTERPRET:      
1060   CD E9 0F               CALL   prompt   
1063   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
1066   21 00 54               LD   hl,TIB   
1069   22 E6 56               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
106C                INTERPRET2:      ; calculate nesting
106C   1E 00                  LD   e,0   ; initilize nesting value
106E   C5                     PUSH   bc   ; save offset into TIB,
106F                             ; bc is also the count of chars in TIB
106F   21 00 54               LD   hl,TIB   ; hl is start of TIB
1072   18 06                  JR   interpret4   
1074                INTERPRET3:      
1074   7E                     LD   a,(hl)   ; a = char in TIB
1075   23                     INC   hl   ; inc pointer into TIB
1076   0B                     DEC   bc   ; dec count of chars in TIB
1077   CD B3 0F               CALL   nesting   ; update nesting value
107A                INTERPRET4:      
107A   79                     LD   a,c   ; is count zero?
107B   B0                     OR   b   
107C   20 F6                  JR   nz,interpret3   ; if not loop
107E   C1                     POP   bc   ; restore offset into TIB
107F                INTERPRET5:      
107F   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
1082   FE 20                  CP   $20   ; compare to space
1084   30 14                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
1086   FE 00                  CP   NUL   ; is it end of string? NUL end of string
1088   28 31                  JR   z,interpret8   
108A   FE 0D                  CP   "\r"   ; carriage return? ascii 13
108C   28 1A                  JR   z,interpret7   ; if anything else its macro/control
108E   FE 08                  CP   CTRL_H   
1090   CA 0C 11               JP   z,backSpace_   
1093   FE 0A                  CP   CTRL_J   
1095   CA 1C 11               JP   z,reEdit_   
1098                INTERPRET5A:      
1098   18 D2                  JR   interpret2   
109A                INTERPRET6:      
109A   21 00 54               LD   hl,TIB   
109D   09                     ADD   hl,bc   
109E   77                     LD   (hl),a   ; store the character in textbuf
109F   03                     INC   bc   
10A0   CD 85 00               CALL   putchar   ; echo character to screen
10A3   CD B3 0F               CALL   nesting   
10A6   18 D7                  JR   interpret5   ; wait for next character
10A8                INTERPRET7:      
10A8   21 00 54               LD   hl,TIB   
10AB   09                     ADD   hl,bc   
10AC   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
10AE   23                     INC   hl   
10AF   36 0A                  LD   (hl),"\n"   
10B1   23                     INC   hl   
10B2   03                     INC   bc   
10B3   03                     INC   bc   
10B4   CD F2 0F               CALL   crlf   ; echo character to screen
10B7   7B                     LD   a,e   ; if zero nesting append and ETX after \r
10B8   B7                     OR   a   
10B9   20 C4                  JR   nz,interpret5   
10BB                INTERPRET8:      
10BB   21 00 54               LD   hl,TIB   
10BE   09                     ADD   hl,bc   
10BF   22 E6 56               LD   (vTIBPtr),hl   
10C2   01 00 54               LD   bc,TIB   
10C5   ED 43 FC 56            LD   (vSavedIP),bc   ; save IP
10C9   ED 73 FE 56            LD   (vSavedSP),sp   ; save SP
10CD   DD 22 00 57            LD   (vSavedNext),ix   ; save Next
10D1   FD 22 02 57            LD   (vSavedBP),iy   ; save BP
10D5   0B                     DEC   bc   
10D6                NEXT:        
10D6   03                     INC   bc   ; Increment the IP
10D7   0A                     LD   a,(bc)   ; Get the next character and dispatch
10D8   FE 20                  CP   " "   ; whitespace?
10DA   28 FA                  JR   z,next   ; space? ignore
10DC   38 0D                  JR   c,next1   
10DE   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
10E0   6F                     LD   l,a   ; index into table
10E1   26 01                  LD   h,msb(opcodes)   ; start address of jump table
10E3   6E                     LD   l,(hl)   ; get low jump address
10E4   24                     INC   h   ; page 2
10E5   FE BA                  CP   "Z" - "!" + 1 + $80   
10E7   38 01                  JR   c,next0   
10E9   24                     INC   h   ; page 3
10EA                NEXT0:       
10EA   E9                     JP   (hl)   ; Jump to routine
10EB                NEXT1:       
10EB   FE 00                  CP   NUL   ; end of input string?
10ED   28 03                  JR   z,exit   
10EF   C3 60 10               JP   interpret   ; no, other whitespace, macros?
10F2                EXIT:        
10F2   03                     INC   bc   
10F3   60 69                  LD   hl,bc   
10F5   E9                     JP   (hl)   
10F6                RUN:         
10F6   C1                     POP   bc   
10F7   0B                     DEC   bc   
10F8   DD E9                  JP   (ix)   
10FA                ERROR:       
10FA   E5                     PUSH   hl   
10FB   CD F6 10               CALL   run   
10FE   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
1109   C3 60 10               JP   interpret   
110C                BACKSPACE_:      
110C   79                     LD   a,c   
110D   B0                     OR   b   
110E   CA 6C 10               JP   z,interpret2   
1111   0B                     DEC   bc   
1112   CD F9 0F               CALL   printStr   
1115   08 20 08 00            .CSTR   "\b \b"   
1119   C3 6C 10               JP   interpret2   
111C                REEDIT_:      
111C   CD F9 0F               CALL   printStr   
111F   0D 3E 20 00            .CSTR   "\r> "   
1123   21 00 54               LD   hl,TIB   
1126   18 04                  JR   reEdit1   
1128                REEDIT0:      
1128   CD 85 00               CALL   putchar   
112B   23                     INC   hl   
112C                REEDIT1:      
112C   7E                     LD   a,(hl)   
112D   FE 0D                  CP   "\r"   
112F   20 F7                  JR   nz,reEdit0   
1131   11 00 54               LD   de,TIB   
1134   B7                     OR   a   
1135   ED 52                  SBC   hl,de   
1137   44 4D                  LD   bc,hl   
1139   C3 6C 10               JP   interpret2   
113C                          ;*Macro unroll: FUNC f1, 0, ""
113C                F1:          
113C   CD 9F 03               CALL   go   
113F   00 00                  DW   NUL   
1141   47 11                  DW   f1M_3017S12   
1143   45 11                  DW   $+2   
1145   00                     DB   0   
1146   00                     .PSTR   ""   
1147                F1M_3017S12:      
1147   00                     DB   0   
1148                          ;*Macro unroll: FUNC f2, 0, ""
1148                F2:          
1148   CD 9F 03               CALL   go   
114B   00 00                  DW   NUL   
114D   53 11                  DW   f2M_3019S15   
114F   51 11                  DW   $+2   
1151   00                     DB   0   
1152   00                     .PSTR   ""   
1153                F2M_3019S15:      
1153   00                     DB   0   
1154                          ;*Macro unroll: FUNC f3, 0, ""
1154                F3:          
1154   CD 9F 03               CALL   go   
1157   00 00                  DW   NUL   
1159   5F 11                  DW   f3M_3021S18   
115B   5D 11                  DW   $+2   
115D   00                     DB   0   
115E   00                     .PSTR   ""   
115F                F3M_3021S18:      
115F   00                     DB   0   
1160                          ;*Macro unroll: FUNC f4, 0, ""
1160                F4:          
1160   CD 9F 03               CALL   go   
1163   00 00                  DW   NUL   
1165   6B 11                  DW   f4M_3023S21   
1167   69 11                  DW   $+2   
1169   00                     DB   0   
116A   00                     .PSTR   ""   
116B                F4M_3023S21:      
116B   00                     DB   0   
116C                          ALIGN   $100   
1200                TESTSSTART:      
1200                             ; test "0 10 1 /rg \\a{%a.} /fe", 0
1200                             ; test "0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", 0
1200                             ; test "0 10 1 /rg \\a{%a 3<}/ft \\a{%a.} /fe", 0
1200                             ; test "0 10 1 /rg  0 \\da{%d%a+}/fd \\a{%a 24<}/ft \\a{%a.} /fe", 0
1200                             ; test "[10 20 30] /ai \\a{%a.} /fe", 0
1200                             ; test "[1 2 3].a", 0
1200                             ; test "/sb `hello:` 65.c 1. 2. 3. /se .s", FALSE
1200                             ; test "`hello:` 65.c 1. 2. 3.", FALSE
1200                             ; test "/hx/bm$1234.",0
1200                             ; test "/bm257.",0
1200                             ; test "$1000 'hello there!' /si \\a{%a.c} /fe", $1000
1200                             ; test "10 0 -1 /rg \\a{%a.} /fe", 0
1200                             ; test "0 10 1 /f1 \\a{%a.} /fe", 0
1200                             ; test "0 x = 2 x + = x .", false
1200                             ; test "[_A {100} _B {200} _P {300}] A=  A {-1} /sel", 1
1200                          ;*Macro unroll:  test "7 3 /", 2
1200   31 00 54               LD   SP,STACK   
1203   CD 2D 10               CALL   coldInit   
1206   CD B4 52               CALL   execStr   
1209   37 20 33 20 2F 00      DB   "7 3 /",0   
120F   E1                     POP   HL   
1210   E5                     PUSH   HL   
1211   11 02 00               LD   DE,2   
1214   B7                     OR   A   
1215   ED 52                  SBC   HL,DE   
1217   7D                     LD   A,L   
1218   B4                     OR   H   
1219   CA 6E 12               JP   Z,expectM_3042S48   
121C   CD F9 0F               CALL   printStr   
121F   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
122B   CD F9 0F               CALL   printStr   
122E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
123D   21 02 00               LD   hl,2   
1240   E5                     PUSH   hl   
1241   E5                     PUSH   hl   
1242   CD F6 10               CALL   run   
1245   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
124C   CD F9 0F               CALL   printStr   
124F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
125C   E1                     POP   hl   
125D   E5                     PUSH   hl   
125E   E5                     PUSH   hl   
125F   CD F6 10               CALL   run   
1262   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
126D   76                     HALT      
126E                EXPECTM_3042S48:      
126E   E1                     POP   HL   
126F   CD F9 0F               CALL   printStr   
1272   44 6F 6E 65 21 00      .CSTR   "Done!"   
1278   76                     HALT      
1279                          ;*Macro unroll:  test "/f", false
1279   31 00 54               LD   SP,STACK   
127C   CD 2D 10               CALL   coldInit   
127F   CD B4 52               CALL   execStr   
1282   2F 66 00               DB   "/f",0   
1285   E1                     POP   HL   
1286   E5                     PUSH   HL   
1287   11 00 00               LD   DE,false   
128A   B7                     OR   A   
128B   ED 52                  SBC   HL,DE   
128D   7D                     LD   A,L   
128E   B4                     OR   H   
128F   CA E1 12               JP   Z,expectM_3046S53   
1292   CD F9 0F               CALL   printStr   
1295   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
129E   CD F9 0F               CALL   printStr   
12A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12B0   21 00 00               LD   hl,false   
12B3   E5                     PUSH   hl   
12B4   E5                     PUSH   hl   
12B5   CD F6 10               CALL   run   
12B8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
12BF   CD F9 0F               CALL   printStr   
12C2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12CF   E1                     POP   hl   
12D0   E5                     PUSH   hl   
12D1   E5                     PUSH   hl   
12D2   CD F6 10               CALL   run   
12D5   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
12E0   76                     HALT      
12E1                EXPECTM_3046S53:      
12E1   E1                     POP   HL   
12E2                          ;*Macro unroll:  test "/t", true
12E2   31 00 54               LD   SP,STACK   
12E5   CD 2D 10               CALL   coldInit   
12E8   CD B4 52               CALL   execStr   
12EB   2F 74 00               DB   "/t",0   
12EE   E1                     POP   HL   
12EF   E5                     PUSH   HL   
12F0   11 FF FF               LD   DE,true   
12F3   B7                     OR   A   
12F4   ED 52                  SBC   HL,DE   
12F6   7D                     LD   A,L   
12F7   B4                     OR   H   
12F8   CA 4A 13               JP   Z,expectM_3047S54   
12FB   CD F9 0F               CALL   printStr   
12FE   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
1307   CD F9 0F               CALL   printStr   
130A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1319   21 FF FF               LD   hl,true   
131C   E5                     PUSH   hl   
131D   E5                     PUSH   hl   
131E   CD F6 10               CALL   run   
1321   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1328   CD F9 0F               CALL   printStr   
132B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1338   E1                     POP   hl   
1339   E5                     PUSH   hl   
133A   E5                     PUSH   hl   
133B   CD F6 10               CALL   run   
133E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1349   76                     HALT      
134A                EXPECTM_3047S54:      
134A   E1                     POP   HL   
134B                          ;*Macro unroll:  test "1", 1
134B   31 00 54               LD   SP,STACK   
134E   CD 2D 10               CALL   coldInit   
1351   CD B4 52               CALL   execStr   
1354   31 00                  DB   "1",0   
1356   E1                     POP   HL   
1357   E5                     PUSH   HL   
1358   11 01 00               LD   DE,1   
135B   B7                     OR   A   
135C   ED 52                  SBC   HL,DE   
135E   7D                     LD   A,L   
135F   B4                     OR   H   
1360   CA B1 13               JP   Z,expectM_3048S55   
1363   CD F9 0F               CALL   printStr   
1366   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
136E   CD F9 0F               CALL   printStr   
1371   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1380   21 01 00               LD   hl,1   
1383   E5                     PUSH   hl   
1384   E5                     PUSH   hl   
1385   CD F6 10               CALL   run   
1388   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
138F   CD F9 0F               CALL   printStr   
1392   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
139F   E1                     POP   hl   
13A0   E5                     PUSH   hl   
13A1   E5                     PUSH   hl   
13A2   CD F6 10               CALL   run   
13A5   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
13B0   76                     HALT      
13B1                EXPECTM_3048S55:      
13B1   E1                     POP   HL   
13B2                          ;*Macro unroll:  test "2", 2
13B2   31 00 54               LD   SP,STACK   
13B5   CD 2D 10               CALL   coldInit   
13B8   CD B4 52               CALL   execStr   
13BB   32 00                  DB   "2",0   
13BD   E1                     POP   HL   
13BE   E5                     PUSH   HL   
13BF   11 02 00               LD   DE,2   
13C2   B7                     OR   A   
13C3   ED 52                  SBC   HL,DE   
13C5   7D                     LD   A,L   
13C6   B4                     OR   H   
13C7   CA 18 14               JP   Z,expectM_3049S56   
13CA   CD F9 0F               CALL   printStr   
13CD   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
13D5   CD F9 0F               CALL   printStr   
13D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13E7   21 02 00               LD   hl,2   
13EA   E5                     PUSH   hl   
13EB   E5                     PUSH   hl   
13EC   CD F6 10               CALL   run   
13EF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
13F6   CD F9 0F               CALL   printStr   
13F9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1406   E1                     POP   hl   
1407   E5                     PUSH   hl   
1408   E5                     PUSH   hl   
1409   CD F6 10               CALL   run   
140C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1417   76                     HALT      
1418                EXPECTM_3049S56:      
1418   E1                     POP   HL   
1419                          ;*Macro unroll:  test "1", 1
1419   31 00 54               LD   SP,STACK   
141C   CD 2D 10               CALL   coldInit   
141F   CD B4 52               CALL   execStr   
1422   31 00                  DB   "1",0   
1424   E1                     POP   HL   
1425   E5                     PUSH   HL   
1426   11 01 00               LD   DE,1   
1429   B7                     OR   A   
142A   ED 52                  SBC   HL,DE   
142C   7D                     LD   A,L   
142D   B4                     OR   H   
142E   CA 7F 14               JP   Z,expectM_3050S57   
1431   CD F9 0F               CALL   printStr   
1434   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
143C   CD F9 0F               CALL   printStr   
143F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
144E   21 01 00               LD   hl,1   
1451   E5                     PUSH   hl   
1452   E5                     PUSH   hl   
1453   CD F6 10               CALL   run   
1456   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
145D   CD F9 0F               CALL   printStr   
1460   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
146D   E1                     POP   hl   
146E   E5                     PUSH   hl   
146F   E5                     PUSH   hl   
1470   CD F6 10               CALL   run   
1473   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
147E   76                     HALT      
147F                EXPECTM_3050S57:      
147F   E1                     POP   HL   
1480                          ;*Macro unroll:  test "0", 0
1480   31 00 54               LD   SP,STACK   
1483   CD 2D 10               CALL   coldInit   
1486   CD B4 52               CALL   execStr   
1489   30 00                  DB   "0",0   
148B   E1                     POP   HL   
148C   E5                     PUSH   HL   
148D   11 00 00               LD   DE,0   
1490   B7                     OR   A   
1491   ED 52                  SBC   HL,DE   
1493   7D                     LD   A,L   
1494   B4                     OR   H   
1495   CA E6 14               JP   Z,expectM_3051S58   
1498   CD F9 0F               CALL   printStr   
149B   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
14A3   CD F9 0F               CALL   printStr   
14A6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14B5   21 00 00               LD   hl,0   
14B8   E5                     PUSH   hl   
14B9   E5                     PUSH   hl   
14BA   CD F6 10               CALL   run   
14BD   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
14C4   CD F9 0F               CALL   printStr   
14C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14D4   E1                     POP   hl   
14D5   E5                     PUSH   hl   
14D6   E5                     PUSH   hl   
14D7   CD F6 10               CALL   run   
14DA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
14E5   76                     HALT      
14E6                EXPECTM_3051S58:      
14E6   E1                     POP   HL   
14E7                          ;*Macro unroll:  test "10", 10
14E7   31 00 54               LD   SP,STACK   
14EA   CD 2D 10               CALL   coldInit   
14ED   CD B4 52               CALL   execStr   
14F0   31 30 00               DB   "10",0   
14F3   E1                     POP   HL   
14F4   E5                     PUSH   HL   
14F5   11 0A 00               LD   DE,10   
14F8   B7                     OR   A   
14F9   ED 52                  SBC   HL,DE   
14FB   7D                     LD   A,L   
14FC   B4                     OR   H   
14FD   CA 4F 15               JP   Z,expectM_3052S59   
1500   CD F9 0F               CALL   printStr   
1503   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
150C   CD F9 0F               CALL   printStr   
150F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
151E   21 0A 00               LD   hl,10   
1521   E5                     PUSH   hl   
1522   E5                     PUSH   hl   
1523   CD F6 10               CALL   run   
1526   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
152D   CD F9 0F               CALL   printStr   
1530   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
153D   E1                     POP   hl   
153E   E5                     PUSH   hl   
153F   E5                     PUSH   hl   
1540   CD F6 10               CALL   run   
1543   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
154E   76                     HALT      
154F                EXPECTM_3052S59:      
154F   E1                     POP   HL   
1550                          ;*Macro unroll:  test "123", 123
1550   31 00 54               LD   SP,STACK   
1553   CD 2D 10               CALL   coldInit   
1556   CD B4 52               CALL   execStr   
1559   31 32 33 00            DB   "123",0   
155D   E1                     POP   HL   
155E   E5                     PUSH   HL   
155F   11 7B 00               LD   DE,123   
1562   B7                     OR   A   
1563   ED 52                  SBC   HL,DE   
1565   7D                     LD   A,L   
1566   B4                     OR   H   
1567   CA BA 15               JP   Z,expectM_3053S60   
156A   CD F9 0F               CALL   printStr   
156D   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
1577   CD F9 0F               CALL   printStr   
157A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1589   21 7B 00               LD   hl,123   
158C   E5                     PUSH   hl   
158D   E5                     PUSH   hl   
158E   CD F6 10               CALL   run   
1591   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1598   CD F9 0F               CALL   printStr   
159B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15A8   E1                     POP   hl   
15A9   E5                     PUSH   hl   
15AA   E5                     PUSH   hl   
15AB   CD F6 10               CALL   run   
15AE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
15B9   76                     HALT      
15BA                EXPECTM_3053S60:      
15BA   E1                     POP   HL   
15BB                          ;*Macro unroll:  test "-1",-1
15BB   31 00 54               LD   SP,STACK   
15BE   CD 2D 10               CALL   coldInit   
15C1   CD B4 52               CALL   execStr   
15C4   2D 31 00               DB   "-1",0   
15C7   E1                     POP   HL   
15C8   E5                     PUSH   HL   
15C9   11 FF FF               LD   DE,-1   
15CC   B7                     OR   A   
15CD   ED 52                  SBC   HL,DE   
15CF   7D                     LD   A,L   
15D0   B4                     OR   H   
15D1   CA 23 16               JP   Z,expectM_3054S61   
15D4   CD F9 0F               CALL   printStr   
15D7   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
15E0   CD F9 0F               CALL   printStr   
15E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15F2   21 FF FF               LD   hl,-1   
15F5   E5                     PUSH   hl   
15F6   E5                     PUSH   hl   
15F7   CD F6 10               CALL   run   
15FA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1601   CD F9 0F               CALL   printStr   
1604   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1611   E1                     POP   hl   
1612   E5                     PUSH   hl   
1613   E5                     PUSH   hl   
1614   CD F6 10               CALL   run   
1617   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1622   76                     HALT      
1623                EXPECTM_3054S61:      
1623   E1                     POP   HL   
1624                          ;*Macro unroll:  test "-1/ab",1
1624   31 00 54               LD   SP,STACK   
1627   CD 2D 10               CALL   coldInit   
162A   CD B4 52               CALL   execStr   
162D   2D 31 2F 61 62 00      DB   "-1/ab",0   
1633   E1                     POP   HL   
1634   E5                     PUSH   HL   
1635   11 01 00               LD   DE,1   
1638   B7                     OR   A   
1639   ED 52                  SBC   HL,DE   
163B   7D                     LD   A,L   
163C   B4                     OR   H   
163D   CA 92 16               JP   Z,expectM_3055S62   
1640   CD F9 0F               CALL   printStr   
1643   43 6F 64 65 3A 20 2D 31 2F 61 62 00 .CSTR   "Code: ","-1/ab"   
164F   CD F9 0F               CALL   printStr   
1652   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1661   21 01 00               LD   hl,1   
1664   E5                     PUSH   hl   
1665   E5                     PUSH   hl   
1666   CD F6 10               CALL   run   
1669   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1670   CD F9 0F               CALL   printStr   
1673   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1680   E1                     POP   hl   
1681   E5                     PUSH   hl   
1682   E5                     PUSH   hl   
1683   CD F6 10               CALL   run   
1686   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1691   76                     HALT      
1692                EXPECTM_3055S62:      
1692   E1                     POP   HL   
1693                          ;*Macro unroll:  test "_a", $61
1693   31 00 54               LD   SP,STACK   
1696   CD 2D 10               CALL   coldInit   
1699   CD B4 52               CALL   execStr   
169C   5F 61 00               DB   "_a",0   
169F   E1                     POP   HL   
16A0   E5                     PUSH   HL   
16A1   11 61 00               LD   DE,$61   
16A4   B7                     OR   A   
16A5   ED 52                  SBC   HL,DE   
16A7   7D                     LD   A,L   
16A8   B4                     OR   H   
16A9   CA FB 16               JP   Z,expectM_3056S63   
16AC   CD F9 0F               CALL   printStr   
16AF   43 6F 64 65 3A 20 5F 61 00 .CSTR   "Code: ","_a"   
16B8   CD F9 0F               CALL   printStr   
16BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16CA   21 61 00               LD   hl,$61   
16CD   E5                     PUSH   hl   
16CE   E5                     PUSH   hl   
16CF   CD F6 10               CALL   run   
16D2   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
16D9   CD F9 0F               CALL   printStr   
16DC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16E9   E1                     POP   hl   
16EA   E5                     PUSH   hl   
16EB   E5                     PUSH   hl   
16EC   CD F6 10               CALL   run   
16EF   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
16FA   76                     HALT      
16FB                EXPECTM_3056S63:      
16FB   E1                     POP   HL   
16FC                          ;*Macro unroll:  test "__", $5F
16FC   31 00 54               LD   SP,STACK   
16FF   CD 2D 10               CALL   coldInit   
1702   CD B4 52               CALL   execStr   
1705   5F 5F 00               DB   "__",0   
1708   E1                     POP   HL   
1709   E5                     PUSH   HL   
170A   11 5F 00               LD   DE,$5F   
170D   B7                     OR   A   
170E   ED 52                  SBC   HL,DE   
1710   7D                     LD   A,L   
1711   B4                     OR   H   
1712   CA 64 17               JP   Z,expectM_3057S64   
1715   CD F9 0F               CALL   printStr   
1718   43 6F 64 65 3A 20 5F 5F 00 .CSTR   "Code: ","__"   
1721   CD F9 0F               CALL   printStr   
1724   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1733   21 5F 00               LD   hl,$5F   
1736   E5                     PUSH   hl   
1737   E5                     PUSH   hl   
1738   CD F6 10               CALL   run   
173B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1742   CD F9 0F               CALL   printStr   
1745   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1752   E1                     POP   hl   
1753   E5                     PUSH   hl   
1754   E5                     PUSH   hl   
1755   CD F6 10               CALL   run   
1758   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1763   76                     HALT      
1764                EXPECTM_3057S64:      
1764   E1                     POP   HL   
1765                          ;*Macro unroll:  test "$10", $10
1765   31 00 54               LD   SP,STACK   
1768   CD 2D 10               CALL   coldInit   
176B   CD B4 52               CALL   execStr   
176E   24 31 30 00            DB   "$10",0   
1772   E1                     POP   HL   
1773   E5                     PUSH   HL   
1774   11 10 00               LD   DE,$10   
1777   B7                     OR   A   
1778   ED 52                  SBC   HL,DE   
177A   7D                     LD   A,L   
177B   B4                     OR   H   
177C   CA CF 17               JP   Z,expectM_3058S65   
177F   CD F9 0F               CALL   printStr   
1782   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
178C   CD F9 0F               CALL   printStr   
178F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
179E   21 10 00               LD   hl,$10   
17A1   E5                     PUSH   hl   
17A2   E5                     PUSH   hl   
17A3   CD F6 10               CALL   run   
17A6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
17AD   CD F9 0F               CALL   printStr   
17B0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17BD   E1                     POP   hl   
17BE   E5                     PUSH   hl   
17BF   E5                     PUSH   hl   
17C0   CD F6 10               CALL   run   
17C3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
17CE   76                     HALT      
17CF                EXPECTM_3058S65:      
17CF   E1                     POP   HL   
17D0                          ;*Macro unroll:  test "$FF", $FF
17D0   31 00 54               LD   SP,STACK   
17D3   CD 2D 10               CALL   coldInit   
17D6   CD B4 52               CALL   execStr   
17D9   24 46 46 00            DB   "$FF",0   
17DD   E1                     POP   HL   
17DE   E5                     PUSH   HL   
17DF   11 FF 00               LD   DE,$FF   
17E2   B7                     OR   A   
17E3   ED 52                  SBC   HL,DE   
17E5   7D                     LD   A,L   
17E6   B4                     OR   H   
17E7   CA 3A 18               JP   Z,expectM_3059S66   
17EA   CD F9 0F               CALL   printStr   
17ED   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
17F7   CD F9 0F               CALL   printStr   
17FA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1809   21 FF 00               LD   hl,$FF   
180C   E5                     PUSH   hl   
180D   E5                     PUSH   hl   
180E   CD F6 10               CALL   run   
1811   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1818   CD F9 0F               CALL   printStr   
181B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1828   E1                     POP   hl   
1829   E5                     PUSH   hl   
182A   E5                     PUSH   hl   
182B   CD F6 10               CALL   run   
182E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1839   76                     HALT      
183A                EXPECTM_3059S66:      
183A   E1                     POP   HL   
183B                          ;*Macro unroll:  test "-1 2 +",1
183B   31 00 54               LD   SP,STACK   
183E   CD 2D 10               CALL   coldInit   
1841   CD B4 52               CALL   execStr   
1844   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
184B   E1                     POP   HL   
184C   E5                     PUSH   HL   
184D   11 01 00               LD   DE,1   
1850   B7                     OR   A   
1851   ED 52                  SBC   HL,DE   
1853   7D                     LD   A,L   
1854   B4                     OR   H   
1855   CA AB 18               JP   Z,expectM_3060S67   
1858   CD F9 0F               CALL   printStr   
185B   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1868   CD F9 0F               CALL   printStr   
186B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
187A   21 01 00               LD   hl,1   
187D   E5                     PUSH   hl   
187E   E5                     PUSH   hl   
187F   CD F6 10               CALL   run   
1882   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1889   CD F9 0F               CALL   printStr   
188C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1899   E1                     POP   hl   
189A   E5                     PUSH   hl   
189B   E5                     PUSH   hl   
189C   CD F6 10               CALL   run   
189F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
18AA   76                     HALT      
18AB                EXPECTM_3060S67:      
18AB   E1                     POP   HL   
18AC                          ;*Macro unroll:  test "-1 1 +",0
18AC   31 00 54               LD   SP,STACK   
18AF   CD 2D 10               CALL   coldInit   
18B2   CD B4 52               CALL   execStr   
18B5   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
18BC   E1                     POP   HL   
18BD   E5                     PUSH   HL   
18BE   11 00 00               LD   DE,0   
18C1   B7                     OR   A   
18C2   ED 52                  SBC   HL,DE   
18C4   7D                     LD   A,L   
18C5   B4                     OR   H   
18C6   CA 1C 19               JP   Z,expectM_3061S68   
18C9   CD F9 0F               CALL   printStr   
18CC   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
18D9   CD F9 0F               CALL   printStr   
18DC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18EB   21 00 00               LD   hl,0   
18EE   E5                     PUSH   hl   
18EF   E5                     PUSH   hl   
18F0   CD F6 10               CALL   run   
18F3   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
18FA   CD F9 0F               CALL   printStr   
18FD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
190A   E1                     POP   hl   
190B   E5                     PUSH   hl   
190C   E5                     PUSH   hl   
190D   CD F6 10               CALL   run   
1910   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
191B   76                     HALT      
191C                EXPECTM_3061S68:      
191C   E1                     POP   HL   
191D                          ;*Macro unroll:  test "1 2 +", 3
191D   31 00 54               LD   SP,STACK   
1920   CD 2D 10               CALL   coldInit   
1923   CD B4 52               CALL   execStr   
1926   31 20 32 20 2B 00      DB   "1 2 +",0   
192C   E1                     POP   HL   
192D   E5                     PUSH   HL   
192E   11 03 00               LD   DE,3   
1931   B7                     OR   A   
1932   ED 52                  SBC   HL,DE   
1934   7D                     LD   A,L   
1935   B4                     OR   H   
1936   CA 8B 19               JP   Z,expectM_3062S69   
1939   CD F9 0F               CALL   printStr   
193C   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1948   CD F9 0F               CALL   printStr   
194B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
195A   21 03 00               LD   hl,3   
195D   E5                     PUSH   hl   
195E   E5                     PUSH   hl   
195F   CD F6 10               CALL   run   
1962   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1969   CD F9 0F               CALL   printStr   
196C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1979   E1                     POP   hl   
197A   E5                     PUSH   hl   
197B   E5                     PUSH   hl   
197C   CD F6 10               CALL   run   
197F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
198A   76                     HALT      
198B                EXPECTM_3062S69:      
198B   E1                     POP   HL   
198C                          ;*Macro unroll:  test "4 1 2 +", 3
198C   31 00 54               LD   SP,STACK   
198F   CD 2D 10               CALL   coldInit   
1992   CD B4 52               CALL   execStr   
1995   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
199D   E1                     POP   HL   
199E   E5                     PUSH   HL   
199F   11 03 00               LD   DE,3   
19A2   B7                     OR   A   
19A3   ED 52                  SBC   HL,DE   
19A5   7D                     LD   A,L   
19A6   B4                     OR   H   
19A7   CA FE 19               JP   Z,expectM_3063S70   
19AA   CD F9 0F               CALL   printStr   
19AD   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
19BB   CD F9 0F               CALL   printStr   
19BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19CD   21 03 00               LD   hl,3   
19D0   E5                     PUSH   hl   
19D1   E5                     PUSH   hl   
19D2   CD F6 10               CALL   run   
19D5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
19DC   CD F9 0F               CALL   printStr   
19DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19EC   E1                     POP   hl   
19ED   E5                     PUSH   hl   
19EE   E5                     PUSH   hl   
19EF   CD F6 10               CALL   run   
19F2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
19FD   76                     HALT      
19FE                EXPECTM_3063S70:      
19FE   E1                     POP   HL   
19FF                          ;*Macro unroll:  test "123 456 +", 123+456
19FF   31 00 54               LD   SP,STACK   
1A02   CD 2D 10               CALL   coldInit   
1A05   CD B4 52               CALL   execStr   
1A08   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1A12   E1                     POP   HL   
1A13   E5                     PUSH   HL   
1A14   11 43 02               LD   DE,123+456   
1A17   B7                     OR   A   
1A18   ED 52                  SBC   HL,DE   
1A1A   7D                     LD   A,L   
1A1B   B4                     OR   H   
1A1C   CA 75 1A               JP   Z,expectM_3064S71   
1A1F   CD F9 0F               CALL   printStr   
1A22   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1A32   CD F9 0F               CALL   printStr   
1A35   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A44   21 43 02               LD   hl,123+456   
1A47   E5                     PUSH   hl   
1A48   E5                     PUSH   hl   
1A49   CD F6 10               CALL   run   
1A4C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1A53   CD F9 0F               CALL   printStr   
1A56   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A63   E1                     POP   hl   
1A64   E5                     PUSH   hl   
1A65   E5                     PUSH   hl   
1A66   CD F6 10               CALL   run   
1A69   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1A74   76                     HALT      
1A75                EXPECTM_3064S71:      
1A75   E1                     POP   HL   
1A76                          ;*Macro unroll:  test "64 128 +", 64+128
1A76   31 00 54               LD   SP,STACK   
1A79   CD 2D 10               CALL   coldInit   
1A7C   CD B4 52               CALL   execStr   
1A7F   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
1A88   E1                     POP   HL   
1A89   E5                     PUSH   HL   
1A8A   11 C0 00               LD   DE,64+128   
1A8D   B7                     OR   A   
1A8E   ED 52                  SBC   HL,DE   
1A90   7D                     LD   A,L   
1A91   B4                     OR   H   
1A92   CA EA 1A               JP   Z,expectM_3065S72   
1A95   CD F9 0F               CALL   printStr   
1A98   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1AA7   CD F9 0F               CALL   printStr   
1AAA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AB9   21 C0 00               LD   hl,64+128   
1ABC   E5                     PUSH   hl   
1ABD   E5                     PUSH   hl   
1ABE   CD F6 10               CALL   run   
1AC1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1AC8   CD F9 0F               CALL   printStr   
1ACB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AD8   E1                     POP   hl   
1AD9   E5                     PUSH   hl   
1ADA   E5                     PUSH   hl   
1ADB   CD F6 10               CALL   run   
1ADE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1AE9   76                     HALT      
1AEA                EXPECTM_3065S72:      
1AEA   E1                     POP   HL   
1AEB                          ;*Macro unroll:  test "1 2 +", 3
1AEB   31 00 54               LD   SP,STACK   
1AEE   CD 2D 10               CALL   coldInit   
1AF1   CD B4 52               CALL   execStr   
1AF4   31 20 32 20 2B 00      DB   "1 2 +",0   
1AFA   E1                     POP   HL   
1AFB   E5                     PUSH   HL   
1AFC   11 03 00               LD   DE,3   
1AFF   B7                     OR   A   
1B00   ED 52                  SBC   HL,DE   
1B02   7D                     LD   A,L   
1B03   B4                     OR   H   
1B04   CA 59 1B               JP   Z,expectM_3066S73   
1B07   CD F9 0F               CALL   printStr   
1B0A   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1B16   CD F9 0F               CALL   printStr   
1B19   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B28   21 03 00               LD   hl,3   
1B2B   E5                     PUSH   hl   
1B2C   E5                     PUSH   hl   
1B2D   CD F6 10               CALL   run   
1B30   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1B37   CD F9 0F               CALL   printStr   
1B3A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B47   E1                     POP   hl   
1B48   E5                     PUSH   hl   
1B49   E5                     PUSH   hl   
1B4A   CD F6 10               CALL   run   
1B4D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1B58   76                     HALT      
1B59                EXPECTM_3066S73:      
1B59   E1                     POP   HL   
1B5A                          ;*Macro unroll:  test "1a= a++ a",2
1B5A   31 00 54               LD   SP,STACK   
1B5D   CD 2D 10               CALL   coldInit   
1B60   CD B4 52               CALL   execStr   
1B63   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1B6D   E1                     POP   HL   
1B6E   E5                     PUSH   HL   
1B6F   11 02 00               LD   DE,2   
1B72   B7                     OR   A   
1B73   ED 52                  SBC   HL,DE   
1B75   7D                     LD   A,L   
1B76   B4                     OR   H   
1B77   CA D0 1B               JP   Z,expectM_3067S74   
1B7A   CD F9 0F               CALL   printStr   
1B7D   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1B8D   CD F9 0F               CALL   printStr   
1B90   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B9F   21 02 00               LD   hl,2   
1BA2   E5                     PUSH   hl   
1BA3   E5                     PUSH   hl   
1BA4   CD F6 10               CALL   run   
1BA7   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1BAE   CD F9 0F               CALL   printStr   
1BB1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BBE   E1                     POP   hl   
1BBF   E5                     PUSH   hl   
1BC0   E5                     PUSH   hl   
1BC1   CD F6 10               CALL   run   
1BC4   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1BCF   76                     HALT      
1BD0                EXPECTM_3067S74:      
1BD0   E1                     POP   HL   
1BD1                          ;*Macro unroll:  test "-1 -1 -",0
1BD1   31 00 54               LD   SP,STACK   
1BD4   CD 2D 10               CALL   coldInit   
1BD7   CD B4 52               CALL   execStr   
1BDA   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1BE2   E1                     POP   HL   
1BE3   E5                     PUSH   HL   
1BE4   11 00 00               LD   DE,0   
1BE7   B7                     OR   A   
1BE8   ED 52                  SBC   HL,DE   
1BEA   7D                     LD   A,L   
1BEB   B4                     OR   H   
1BEC   CA 43 1C               JP   Z,expectM_3068S75   
1BEF   CD F9 0F               CALL   printStr   
1BF2   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1C00   CD F9 0F               CALL   printStr   
1C03   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C12   21 00 00               LD   hl,0   
1C15   E5                     PUSH   hl   
1C16   E5                     PUSH   hl   
1C17   CD F6 10               CALL   run   
1C1A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1C21   CD F9 0F               CALL   printStr   
1C24   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C31   E1                     POP   hl   
1C32   E5                     PUSH   hl   
1C33   E5                     PUSH   hl   
1C34   CD F6 10               CALL   run   
1C37   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1C42   76                     HALT      
1C43                EXPECTM_3068S75:      
1C43   E1                     POP   HL   
1C44                          ;*Macro unroll:  test "5 3 -", 2
1C44   31 00 54               LD   SP,STACK   
1C47   CD 2D 10               CALL   coldInit   
1C4A   CD B4 52               CALL   execStr   
1C4D   35 20 33 20 2D 00      DB   "5 3 -",0   
1C53   E1                     POP   HL   
1C54   E5                     PUSH   HL   
1C55   11 02 00               LD   DE,2   
1C58   B7                     OR   A   
1C59   ED 52                  SBC   HL,DE   
1C5B   7D                     LD   A,L   
1C5C   B4                     OR   H   
1C5D   CA B2 1C               JP   Z,expectM_3069S76   
1C60   CD F9 0F               CALL   printStr   
1C63   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1C6F   CD F9 0F               CALL   printStr   
1C72   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C81   21 02 00               LD   hl,2   
1C84   E5                     PUSH   hl   
1C85   E5                     PUSH   hl   
1C86   CD F6 10               CALL   run   
1C89   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1C90   CD F9 0F               CALL   printStr   
1C93   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CA0   E1                     POP   hl   
1CA1   E5                     PUSH   hl   
1CA2   E5                     PUSH   hl   
1CA3   CD F6 10               CALL   run   
1CA6   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1CB1   76                     HALT      
1CB2                EXPECTM_3069S76:      
1CB2   E1                     POP   HL   
1CB3                          ;*Macro unroll:  test "2 1 -",1
1CB3   31 00 54               LD   SP,STACK   
1CB6   CD 2D 10               CALL   coldInit   
1CB9   CD B4 52               CALL   execStr   
1CBC   32 20 31 20 2D 00      DB   "2 1 -",0   
1CC2   E1                     POP   HL   
1CC3   E5                     PUSH   HL   
1CC4   11 01 00               LD   DE,1   
1CC7   B7                     OR   A   
1CC8   ED 52                  SBC   HL,DE   
1CCA   7D                     LD   A,L   
1CCB   B4                     OR   H   
1CCC   CA 21 1D               JP   Z,expectM_3070S77   
1CCF   CD F9 0F               CALL   printStr   
1CD2   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1CDE   CD F9 0F               CALL   printStr   
1CE1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CF0   21 01 00               LD   hl,1   
1CF3   E5                     PUSH   hl   
1CF4   E5                     PUSH   hl   
1CF5   CD F6 10               CALL   run   
1CF8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1CFF   CD F9 0F               CALL   printStr   
1D02   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D0F   E1                     POP   hl   
1D10   E5                     PUSH   hl   
1D11   E5                     PUSH   hl   
1D12   CD F6 10               CALL   run   
1D15   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1D20   76                     HALT      
1D21                EXPECTM_3070S77:      
1D21   E1                     POP   HL   
1D22                          ;*Macro unroll:  test "3a= a-- a",2
1D22   31 00 54               LD   SP,STACK   
1D25   CD 2D 10               CALL   coldInit   
1D28   CD B4 52               CALL   execStr   
1D2B   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1D35   E1                     POP   HL   
1D36   E5                     PUSH   HL   
1D37   11 02 00               LD   DE,2   
1D3A   B7                     OR   A   
1D3B   ED 52                  SBC   HL,DE   
1D3D   7D                     LD   A,L   
1D3E   B4                     OR   H   
1D3F   CA 98 1D               JP   Z,expectM_3071S78   
1D42   CD F9 0F               CALL   printStr   
1D45   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1D55   CD F9 0F               CALL   printStr   
1D58   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D67   21 02 00               LD   hl,2   
1D6A   E5                     PUSH   hl   
1D6B   E5                     PUSH   hl   
1D6C   CD F6 10               CALL   run   
1D6F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1D76   CD F9 0F               CALL   printStr   
1D79   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D86   E1                     POP   hl   
1D87   E5                     PUSH   hl   
1D88   E5                     PUSH   hl   
1D89   CD F6 10               CALL   run   
1D8C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1D97   76                     HALT      
1D98                EXPECTM_3071S78:      
1D98   E1                     POP   HL   
1D99                          ;*Macro unroll:  test "3 5 &", 1
1D99   31 00 54               LD   SP,STACK   
1D9C   CD 2D 10               CALL   coldInit   
1D9F   CD B4 52               CALL   execStr   
1DA2   33 20 35 20 26 00      DB   "3 5 &",0   
1DA8   E1                     POP   HL   
1DA9   E5                     PUSH   HL   
1DAA   11 01 00               LD   DE,1   
1DAD   B7                     OR   A   
1DAE   ED 52                  SBC   HL,DE   
1DB0   7D                     LD   A,L   
1DB1   B4                     OR   H   
1DB2   CA 07 1E               JP   Z,expectM_3072S79   
1DB5   CD F9 0F               CALL   printStr   
1DB8   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1DC4   CD F9 0F               CALL   printStr   
1DC7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DD6   21 01 00               LD   hl,1   
1DD9   E5                     PUSH   hl   
1DDA   E5                     PUSH   hl   
1DDB   CD F6 10               CALL   run   
1DDE   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1DE5   CD F9 0F               CALL   printStr   
1DE8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DF5   E1                     POP   hl   
1DF6   E5                     PUSH   hl   
1DF7   E5                     PUSH   hl   
1DF8   CD F6 10               CALL   run   
1DFB   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1E06   76                     HALT      
1E07                EXPECTM_3072S79:      
1E07   E1                     POP   HL   
1E08                          ;*Macro unroll:  test "3 5 |", 7
1E08   31 00 54               LD   SP,STACK   
1E0B   CD 2D 10               CALL   coldInit   
1E0E   CD B4 52               CALL   execStr   
1E11   33 20 35 20 7C 00      DB   "3 5 |",0   
1E17   E1                     POP   HL   
1E18   E5                     PUSH   HL   
1E19   11 07 00               LD   DE,7   
1E1C   B7                     OR   A   
1E1D   ED 52                  SBC   HL,DE   
1E1F   7D                     LD   A,L   
1E20   B4                     OR   H   
1E21   CA 76 1E               JP   Z,expectM_3073S80   
1E24   CD F9 0F               CALL   printStr   
1E27   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1E33   CD F9 0F               CALL   printStr   
1E36   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E45   21 07 00               LD   hl,7   
1E48   E5                     PUSH   hl   
1E49   E5                     PUSH   hl   
1E4A   CD F6 10               CALL   run   
1E4D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1E54   CD F9 0F               CALL   printStr   
1E57   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E64   E1                     POP   hl   
1E65   E5                     PUSH   hl   
1E66   E5                     PUSH   hl   
1E67   CD F6 10               CALL   run   
1E6A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1E75   76                     HALT      
1E76                EXPECTM_3073S80:      
1E76   E1                     POP   HL   
1E77                          ;*Macro unroll:  test "3 5 /x", 6
1E77   31 00 54               LD   SP,STACK   
1E7A   CD 2D 10               CALL   coldInit   
1E7D   CD B4 52               CALL   execStr   
1E80   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1E87   E1                     POP   HL   
1E88   E5                     PUSH   HL   
1E89   11 06 00               LD   DE,6   
1E8C   B7                     OR   A   
1E8D   ED 52                  SBC   HL,DE   
1E8F   7D                     LD   A,L   
1E90   B4                     OR   H   
1E91   CA E7 1E               JP   Z,expectM_3074S81   
1E94   CD F9 0F               CALL   printStr   
1E97   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1EA4   CD F9 0F               CALL   printStr   
1EA7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EB6   21 06 00               LD   hl,6   
1EB9   E5                     PUSH   hl   
1EBA   E5                     PUSH   hl   
1EBB   CD F6 10               CALL   run   
1EBE   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1EC5   CD F9 0F               CALL   printStr   
1EC8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1ED5   E1                     POP   hl   
1ED6   E5                     PUSH   hl   
1ED7   E5                     PUSH   hl   
1ED8   CD F6 10               CALL   run   
1EDB   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1EE6   76                     HALT      
1EE7                EXPECTM_3074S81:      
1EE7   E1                     POP   HL   
1EE8                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1EE8   31 00 54               LD   SP,STACK   
1EEB   CD 2D 10               CALL   coldInit   
1EEE   CD B4 52               CALL   execStr   
1EF1   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1F00   E1                     POP   HL   
1F01   E5                     PUSH   HL   
1F02   11 06 00               LD   DE,6   
1F05   B7                     OR   A   
1F06   ED 52                  SBC   HL,DE   
1F08   7D                     LD   A,L   
1F09   B4                     OR   H   
1F0A   CA 68 1F               JP   Z,expectM_3075S82   
1F0D   CD F9 0F               CALL   printStr   
1F10   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1F25   CD F9 0F               CALL   printStr   
1F28   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F37   21 06 00               LD   hl,6   
1F3A   E5                     PUSH   hl   
1F3B   E5                     PUSH   hl   
1F3C   CD F6 10               CALL   run   
1F3F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1F46   CD F9 0F               CALL   printStr   
1F49   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F56   E1                     POP   hl   
1F57   E5                     PUSH   hl   
1F58   E5                     PUSH   hl   
1F59   CD F6 10               CALL   run   
1F5C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1F67   76                     HALT      
1F68                EXPECTM_3075S82:      
1F68   E1                     POP   HL   
1F69                          ;*Macro unroll:  test "0 !", true
1F69   31 00 54               LD   SP,STACK   
1F6C   CD 2D 10               CALL   coldInit   
1F6F   CD B4 52               CALL   execStr   
1F72   30 20 21 00            DB   "0 !",0   
1F76   E1                     POP   HL   
1F77   E5                     PUSH   HL   
1F78   11 FF FF               LD   DE,true   
1F7B   B7                     OR   A   
1F7C   ED 52                  SBC   HL,DE   
1F7E   7D                     LD   A,L   
1F7F   B4                     OR   H   
1F80   CA D3 1F               JP   Z,expectM_3076S83   
1F83   CD F9 0F               CALL   printStr   
1F86   43 6F 64 65 3A 20 30 20 21 00 .CSTR   "Code: ","0 !"   
1F90   CD F9 0F               CALL   printStr   
1F93   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FA2   21 FF FF               LD   hl,true   
1FA5   E5                     PUSH   hl   
1FA6   E5                     PUSH   hl   
1FA7   CD F6 10               CALL   run   
1FAA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1FB1   CD F9 0F               CALL   printStr   
1FB4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FC1   E1                     POP   hl   
1FC2   E5                     PUSH   hl   
1FC3   E5                     PUSH   hl   
1FC4   CD F6 10               CALL   run   
1FC7   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1FD2   76                     HALT      
1FD3                EXPECTM_3076S83:      
1FD3   E1                     POP   HL   
1FD4                          ;*Macro unroll:  test "2 !", false
1FD4   31 00 54               LD   SP,STACK   
1FD7   CD 2D 10               CALL   coldInit   
1FDA   CD B4 52               CALL   execStr   
1FDD   32 20 21 00            DB   "2 !",0   
1FE1   E1                     POP   HL   
1FE2   E5                     PUSH   HL   
1FE3   11 00 00               LD   DE,false   
1FE6   B7                     OR   A   
1FE7   ED 52                  SBC   HL,DE   
1FE9   7D                     LD   A,L   
1FEA   B4                     OR   H   
1FEB   CA 3E 20               JP   Z,expectM_3077S84   
1FEE   CD F9 0F               CALL   printStr   
1FF1   43 6F 64 65 3A 20 32 20 21 00 .CSTR   "Code: ","2 !"   
1FFB   CD F9 0F               CALL   printStr   
1FFE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
200D   21 00 00               LD   hl,false   
2010   E5                     PUSH   hl   
2011   E5                     PUSH   hl   
2012   CD F6 10               CALL   run   
2015   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
201C   CD F9 0F               CALL   printStr   
201F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
202C   E1                     POP   hl   
202D   E5                     PUSH   hl   
202E   E5                     PUSH   hl   
202F   CD F6 10               CALL   run   
2032   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
203D   76                     HALT      
203E                EXPECTM_3077S84:      
203E   E1                     POP   HL   
203F                          ;*Macro unroll:  test "0 !!", false
203F   31 00 54               LD   SP,STACK   
2042   CD 2D 10               CALL   coldInit   
2045   CD B4 52               CALL   execStr   
2048   30 20 21 21 00         DB   "0 !!",0   
204D   E1                     POP   HL   
204E   E5                     PUSH   HL   
204F   11 00 00               LD   DE,false   
2052   B7                     OR   A   
2053   ED 52                  SBC   HL,DE   
2055   7D                     LD   A,L   
2056   B4                     OR   H   
2057   CA AB 20               JP   Z,expectM_3078S85   
205A   CD F9 0F               CALL   printStr   
205D   43 6F 64 65 3A 20 30 20 21 21 00 .CSTR   "Code: ","0 !!"   
2068   CD F9 0F               CALL   printStr   
206B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
207A   21 00 00               LD   hl,false   
207D   E5                     PUSH   hl   
207E   E5                     PUSH   hl   
207F   CD F6 10               CALL   run   
2082   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2089   CD F9 0F               CALL   printStr   
208C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2099   E1                     POP   hl   
209A   E5                     PUSH   hl   
209B   E5                     PUSH   hl   
209C   CD F6 10               CALL   run   
209F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
20AA   76                     HALT      
20AB                EXPECTM_3078S85:      
20AB   E1                     POP   HL   
20AC                          ;*Macro unroll:  test "2 !!", true
20AC   31 00 54               LD   SP,STACK   
20AF   CD 2D 10               CALL   coldInit   
20B2   CD B4 52               CALL   execStr   
20B5   32 20 21 21 00         DB   "2 !!",0   
20BA   E1                     POP   HL   
20BB   E5                     PUSH   HL   
20BC   11 FF FF               LD   DE,true   
20BF   B7                     OR   A   
20C0   ED 52                  SBC   HL,DE   
20C2   7D                     LD   A,L   
20C3   B4                     OR   H   
20C4   CA 18 21               JP   Z,expectM_3079S86   
20C7   CD F9 0F               CALL   printStr   
20CA   43 6F 64 65 3A 20 32 20 21 21 00 .CSTR   "Code: ","2 !!"   
20D5   CD F9 0F               CALL   printStr   
20D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20E7   21 FF FF               LD   hl,true   
20EA   E5                     PUSH   hl   
20EB   E5                     PUSH   hl   
20EC   CD F6 10               CALL   run   
20EF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
20F6   CD F9 0F               CALL   printStr   
20F9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2106   E1                     POP   hl   
2107   E5                     PUSH   hl   
2108   E5                     PUSH   hl   
2109   CD F6 10               CALL   run   
210C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2117   76                     HALT      
2118                EXPECTM_3079S86:      
2118   E1                     POP   HL   
2119                          ;*Macro unroll:  test "2 3 *", 6
2119   31 00 54               LD   SP,STACK   
211C   CD 2D 10               CALL   coldInit   
211F   CD B4 52               CALL   execStr   
2122   32 20 33 20 2A 00      DB   "2 3 *",0   
2128   E1                     POP   HL   
2129   E5                     PUSH   HL   
212A   11 06 00               LD   DE,6   
212D   B7                     OR   A   
212E   ED 52                  SBC   HL,DE   
2130   7D                     LD   A,L   
2131   B4                     OR   H   
2132   CA 87 21               JP   Z,expectM_3080S87   
2135   CD F9 0F               CALL   printStr   
2138   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
2144   CD F9 0F               CALL   printStr   
2147   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2156   21 06 00               LD   hl,6   
2159   E5                     PUSH   hl   
215A   E5                     PUSH   hl   
215B   CD F6 10               CALL   run   
215E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2165   CD F9 0F               CALL   printStr   
2168   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2175   E1                     POP   hl   
2176   E5                     PUSH   hl   
2177   E5                     PUSH   hl   
2178   CD F6 10               CALL   run   
217B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2186   76                     HALT      
2187                EXPECTM_3080S87:      
2187   E1                     POP   HL   
2188                          ;*Macro unroll:  test "1 2 3 + *", 5
2188   31 00 54               LD   SP,STACK   
218B   CD 2D 10               CALL   coldInit   
218E   CD B4 52               CALL   execStr   
2191   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
219B   E1                     POP   HL   
219C   E5                     PUSH   HL   
219D   11 05 00               LD   DE,5   
21A0   B7                     OR   A   
21A1   ED 52                  SBC   HL,DE   
21A3   7D                     LD   A,L   
21A4   B4                     OR   H   
21A5   CA FE 21               JP   Z,expectM_3081S88   
21A8   CD F9 0F               CALL   printStr   
21AB   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
21BB   CD F9 0F               CALL   printStr   
21BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21CD   21 05 00               LD   hl,5   
21D0   E5                     PUSH   hl   
21D1   E5                     PUSH   hl   
21D2   CD F6 10               CALL   run   
21D5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
21DC   CD F9 0F               CALL   printStr   
21DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21EC   E1                     POP   hl   
21ED   E5                     PUSH   hl   
21EE   E5                     PUSH   hl   
21EF   CD F6 10               CALL   run   
21F2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
21FD   76                     HALT      
21FE                EXPECTM_3081S88:      
21FE   E1                     POP   HL   
21FF                          ;*Macro unroll:  test "7 3 /", 2
21FF   31 00 54               LD   SP,STACK   
2202   CD 2D 10               CALL   coldInit   
2205   CD B4 52               CALL   execStr   
2208   37 20 33 20 2F 00      DB   "7 3 /",0   
220E   E1                     POP   HL   
220F   E5                     PUSH   HL   
2210   11 02 00               LD   DE,2   
2213   B7                     OR   A   
2214   ED 52                  SBC   HL,DE   
2216   7D                     LD   A,L   
2217   B4                     OR   H   
2218   CA 6D 22               JP   Z,expectM_3082S89   
221B   CD F9 0F               CALL   printStr   
221E   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
222A   CD F9 0F               CALL   printStr   
222D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
223C   21 02 00               LD   hl,2   
223F   E5                     PUSH   hl   
2240   E5                     PUSH   hl   
2241   CD F6 10               CALL   run   
2244   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
224B   CD F9 0F               CALL   printStr   
224E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
225B   E1                     POP   hl   
225C   E5                     PUSH   hl   
225D   E5                     PUSH   hl   
225E   CD F6 10               CALL   run   
2261   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
226C   76                     HALT      
226D                EXPECTM_3082S89:      
226D   E1                     POP   HL   
226E                          ;*Macro unroll:  test "100a= 1a+= a", 101
226E   31 00 54               LD   SP,STACK   
2271   CD 2D 10               CALL   coldInit   
2274   CD B4 52               CALL   execStr   
2277   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
2284   E1                     POP   HL   
2285   E5                     PUSH   HL   
2286   11 65 00               LD   DE,101   
2289   B7                     OR   A   
228A   ED 52                  SBC   HL,DE   
228C   7D                     LD   A,L   
228D   B4                     OR   H   
228E   CA EA 22               JP   Z,expectM_3083S90   
2291   CD F9 0F               CALL   printStr   
2294   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
22A7   CD F9 0F               CALL   printStr   
22AA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22B9   21 65 00               LD   hl,101   
22BC   E5                     PUSH   hl   
22BD   E5                     PUSH   hl   
22BE   CD F6 10               CALL   run   
22C1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
22C8   CD F9 0F               CALL   printStr   
22CB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22D8   E1                     POP   hl   
22D9   E5                     PUSH   hl   
22DA   E5                     PUSH   hl   
22DB   CD F6 10               CALL   run   
22DE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
22E9   76                     HALT      
22EA                EXPECTM_3083S90:      
22EA   E1                     POP   HL   
22EB                          ;*Macro unroll:  test "100a= 1a-= a", 99
22EB   31 00 54               LD   SP,STACK   
22EE   CD 2D 10               CALL   coldInit   
22F1   CD B4 52               CALL   execStr   
22F4   31 30 30 61 3D 20 31 61 2D 3D 20 61 00 DB   "100a= 1a-= a",0   
2301   E1                     POP   HL   
2302   E5                     PUSH   HL   
2303   11 63 00               LD   DE,99   
2306   B7                     OR   A   
2307   ED 52                  SBC   HL,DE   
2309   7D                     LD   A,L   
230A   B4                     OR   H   
230B   CA 67 23               JP   Z,expectM_3084S91   
230E   CD F9 0F               CALL   printStr   
2311   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2D 3D 20 61 00 .CSTR   "Code: ","100a= 1a-= a"   
2324   CD F9 0F               CALL   printStr   
2327   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2336   21 63 00               LD   hl,99   
2339   E5                     PUSH   hl   
233A   E5                     PUSH   hl   
233B   CD F6 10               CALL   run   
233E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2345   CD F9 0F               CALL   printStr   
2348   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2355   E1                     POP   hl   
2356   E5                     PUSH   hl   
2357   E5                     PUSH   hl   
2358   CD F6 10               CALL   run   
235B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2366   76                     HALT      
2367                EXPECTM_3084S91:      
2367   E1                     POP   HL   
2368                          ;*Macro unroll:  test "100a= 2a*= a", 200
2368   31 00 54               LD   SP,STACK   
236B   CD 2D 10               CALL   coldInit   
236E   CD B4 52               CALL   execStr   
2371   31 30 30 61 3D 20 32 61 2A 3D 20 61 00 DB   "100a= 2a*= a",0   
237E   E1                     POP   HL   
237F   E5                     PUSH   HL   
2380   11 C8 00               LD   DE,200   
2383   B7                     OR   A   
2384   ED 52                  SBC   HL,DE   
2386   7D                     LD   A,L   
2387   B4                     OR   H   
2388   CA E4 23               JP   Z,expectM_3085S92   
238B   CD F9 0F               CALL   printStr   
238E   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 61 2A 3D 20 61 00 .CSTR   "Code: ","100a= 2a*= a"   
23A1   CD F9 0F               CALL   printStr   
23A4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23B3   21 C8 00               LD   hl,200   
23B6   E5                     PUSH   hl   
23B7   E5                     PUSH   hl   
23B8   CD F6 10               CALL   run   
23BB   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
23C2   CD F9 0F               CALL   printStr   
23C5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23D2   E1                     POP   hl   
23D3   E5                     PUSH   hl   
23D4   E5                     PUSH   hl   
23D5   CD F6 10               CALL   run   
23D8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
23E3   76                     HALT      
23E4                EXPECTM_3085S92:      
23E4   E1                     POP   HL   
23E5                          ;*Macro unroll:  test "100a= 2 a/= a", 50
23E5   31 00 54               LD   SP,STACK   
23E8   CD 2D 10               CALL   coldInit   
23EB   CD B4 52               CALL   execStr   
23EE   31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 DB   "100a= 2 a/= a",0   
23FC   E1                     POP   HL   
23FD   E5                     PUSH   HL   
23FE   11 32 00               LD   DE,50   
2401   B7                     OR   A   
2402   ED 52                  SBC   HL,DE   
2404   7D                     LD   A,L   
2405   B4                     OR   H   
2406   CA 63 24               JP   Z,expectM_3086S93   
2409   CD F9 0F               CALL   printStr   
240C   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 .CSTR   "Code: ","100a= 2 a/= a"   
2420   CD F9 0F               CALL   printStr   
2423   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2432   21 32 00               LD   hl,50   
2435   E5                     PUSH   hl   
2436   E5                     PUSH   hl   
2437   CD F6 10               CALL   run   
243A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2441   CD F9 0F               CALL   printStr   
2444   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2451   E1                     POP   hl   
2452   E5                     PUSH   hl   
2453   E5                     PUSH   hl   
2454   CD F6 10               CALL   run   
2457   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2462   76                     HALT      
2463                EXPECTM_3086S93:      
2463   E1                     POP   HL   
2464                          ;*Macro unroll:  test "2a= 3b= a b+= b", 5
2464   31 00 54               LD   SP,STACK   
2467   CD 2D 10               CALL   coldInit   
246A   CD B4 52               CALL   execStr   
246D   32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 DB   "2a= 3b= a b+= b",0   
247D   E1                     POP   HL   
247E   E5                     PUSH   HL   
247F   11 05 00               LD   DE,5   
2482   B7                     OR   A   
2483   ED 52                  SBC   HL,DE   
2485   7D                     LD   A,L   
2486   B4                     OR   H   
2487   CA E6 24               JP   Z,expectM_3087S94   
248A   CD F9 0F               CALL   printStr   
248D   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b+= b"   
24A3   CD F9 0F               CALL   printStr   
24A6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24B5   21 05 00               LD   hl,5   
24B8   E5                     PUSH   hl   
24B9   E5                     PUSH   hl   
24BA   CD F6 10               CALL   run   
24BD   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
24C4   CD F9 0F               CALL   printStr   
24C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24D4   E1                     POP   hl   
24D5   E5                     PUSH   hl   
24D6   E5                     PUSH   hl   
24D7   CD F6 10               CALL   run   
24DA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
24E5   76                     HALT      
24E6                EXPECTM_3087S94:      
24E6   E1                     POP   HL   
24E7                          ;*Macro unroll:  test "2a= 3b= a b-= b", 1
24E7   31 00 54               LD   SP,STACK   
24EA   CD 2D 10               CALL   coldInit   
24ED   CD B4 52               CALL   execStr   
24F0   32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 DB   "2a= 3b= a b-= b",0   
2500   E1                     POP   HL   
2501   E5                     PUSH   HL   
2502   11 01 00               LD   DE,1   
2505   B7                     OR   A   
2506   ED 52                  SBC   HL,DE   
2508   7D                     LD   A,L   
2509   B4                     OR   H   
250A   CA 69 25               JP   Z,expectM_3088S95   
250D   CD F9 0F               CALL   printStr   
2510   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b-= b"   
2526   CD F9 0F               CALL   printStr   
2529   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2538   21 01 00               LD   hl,1   
253B   E5                     PUSH   hl   
253C   E5                     PUSH   hl   
253D   CD F6 10               CALL   run   
2540   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2547   CD F9 0F               CALL   printStr   
254A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2557   E1                     POP   hl   
2558   E5                     PUSH   hl   
2559   E5                     PUSH   hl   
255A   CD F6 10               CALL   run   
255D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2568   76                     HALT      
2569                EXPECTM_3088S95:      
2569   E1                     POP   HL   
256A                          ;*Macro unroll:  test "2a= 3b= a b*= b", 6
256A   31 00 54               LD   SP,STACK   
256D   CD 2D 10               CALL   coldInit   
2570   CD B4 52               CALL   execStr   
2573   32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 DB   "2a= 3b= a b*= b",0   
2583   E1                     POP   HL   
2584   E5                     PUSH   HL   
2585   11 06 00               LD   DE,6   
2588   B7                     OR   A   
2589   ED 52                  SBC   HL,DE   
258B   7D                     LD   A,L   
258C   B4                     OR   H   
258D   CA EC 25               JP   Z,expectM_3089S96   
2590   CD F9 0F               CALL   printStr   
2593   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b*= b"   
25A9   CD F9 0F               CALL   printStr   
25AC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25BB   21 06 00               LD   hl,6   
25BE   E5                     PUSH   hl   
25BF   E5                     PUSH   hl   
25C0   CD F6 10               CALL   run   
25C3   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
25CA   CD F9 0F               CALL   printStr   
25CD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25DA   E1                     POP   hl   
25DB   E5                     PUSH   hl   
25DC   E5                     PUSH   hl   
25DD   CD F6 10               CALL   run   
25E0   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
25EB   76                     HALT      
25EC                EXPECTM_3089S96:      
25EC   E1                     POP   HL   
25ED                          ;*Macro unroll:  test "2a= 6b= a b/= b", 3
25ED   31 00 54               LD   SP,STACK   
25F0   CD 2D 10               CALL   coldInit   
25F3   CD B4 52               CALL   execStr   
25F6   32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 DB   "2a= 6b= a b/= b",0   
2606   E1                     POP   HL   
2607   E5                     PUSH   HL   
2608   11 03 00               LD   DE,3   
260B   B7                     OR   A   
260C   ED 52                  SBC   HL,DE   
260E   7D                     LD   A,L   
260F   B4                     OR   H   
2610   CA 6F 26               JP   Z,expectM_3090S97   
2613   CD F9 0F               CALL   printStr   
2616   43 6F 64 65 3A 20 32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 .CSTR   "Code: ","2a= 6b= a b/= b"   
262C   CD F9 0F               CALL   printStr   
262F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
263E   21 03 00               LD   hl,3   
2641   E5                     PUSH   hl   
2642   E5                     PUSH   hl   
2643   CD F6 10               CALL   run   
2646   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
264D   CD F9 0F               CALL   printStr   
2650   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
265D   E1                     POP   hl   
265E   E5                     PUSH   hl   
265F   E5                     PUSH   hl   
2660   CD F6 10               CALL   run   
2663   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
266E   76                     HALT      
266F                EXPECTM_3090S97:      
266F   E1                     POP   HL   
2670                          ;*Macro unroll:  test "$55a= $AAa&= a",0
2670   31 00 54               LD   SP,STACK   
2673   CD 2D 10               CALL   coldInit   
2676   CD B4 52               CALL   execStr   
2679   24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 DB   "$55a= $AAa&= a",0   
2688   E1                     POP   HL   
2689   E5                     PUSH   HL   
268A   11 00 00               LD   DE,0   
268D   B7                     OR   A   
268E   ED 52                  SBC   HL,DE   
2690   7D                     LD   A,L   
2691   B4                     OR   H   
2692   CA F0 26               JP   Z,expectM_3091S98   
2695   CD F9 0F               CALL   printStr   
2698   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa&= a"   
26AD   CD F9 0F               CALL   printStr   
26B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26BF   21 00 00               LD   hl,0   
26C2   E5                     PUSH   hl   
26C3   E5                     PUSH   hl   
26C4   CD F6 10               CALL   run   
26C7   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
26CE   CD F9 0F               CALL   printStr   
26D1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26DE   E1                     POP   hl   
26DF   E5                     PUSH   hl   
26E0   E5                     PUSH   hl   
26E1   CD F6 10               CALL   run   
26E4   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
26EF   76                     HALT      
26F0                EXPECTM_3091S98:      
26F0   E1                     POP   HL   
26F1                          ;*Macro unroll:  test "$55a= $AAa|= a",$FF
26F1   31 00 54               LD   SP,STACK   
26F4   CD 2D 10               CALL   coldInit   
26F7   CD B4 52               CALL   execStr   
26FA   24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 DB   "$55a= $AAa|= a",0   
2709   E1                     POP   HL   
270A   E5                     PUSH   HL   
270B   11 FF 00               LD   DE,$FF   
270E   B7                     OR   A   
270F   ED 52                  SBC   HL,DE   
2711   7D                     LD   A,L   
2712   B4                     OR   H   
2713   CA 71 27               JP   Z,expectM_3092S99   
2716   CD F9 0F               CALL   printStr   
2719   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa|= a"   
272E   CD F9 0F               CALL   printStr   
2731   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2740   21 FF 00               LD   hl,$FF   
2743   E5                     PUSH   hl   
2744   E5                     PUSH   hl   
2745   CD F6 10               CALL   run   
2748   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
274F   CD F9 0F               CALL   printStr   
2752   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
275F   E1                     POP   hl   
2760   E5                     PUSH   hl   
2761   E5                     PUSH   hl   
2762   CD F6 10               CALL   run   
2765   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2770   76                     HALT      
2771                EXPECTM_3092S99:      
2771   E1                     POP   HL   
2772                          ;*Macro unroll:  test "$A5a= $AAa /x= a",$0F
2772   31 00 54               LD   SP,STACK   
2775   CD 2D 10               CALL   coldInit   
2778   CD B4 52               CALL   execStr   
277B   24 41 35 61 3D 20 24 41 41 61 20 2F 78 3D 20 61 00 DB   "$A5a= $AAa /x= a",0   
278C   E1                     POP   HL   
278D   E5                     PUSH   HL   
278E   11 0F 00               LD   DE,$0F   
2791   B7                     OR   A   
2792   ED 52                  SBC   HL,DE   
2794   7D                     LD   A,L   
2795   B4                     OR   H   
2796   CA F6 27               JP   Z,expectM_3093S100   
2799   CD F9 0F               CALL   printStr   
279C   43 6F 64 65 3A 20 24 41 35 61 3D 20 24 41 41 61 20 2F 78 3D 20 61 00 .CSTR   "Code: ","$A5a= $AAa /x= a"   
27B3   CD F9 0F               CALL   printStr   
27B6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27C5   21 0F 00               LD   hl,$0F   
27C8   E5                     PUSH   hl   
27C9   E5                     PUSH   hl   
27CA   CD F6 10               CALL   run   
27CD   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
27D4   CD F9 0F               CALL   printStr   
27D7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27E4   E1                     POP   hl   
27E5   E5                     PUSH   hl   
27E6   E5                     PUSH   hl   
27E7   CD F6 10               CALL   run   
27EA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
27F5   76                     HALT      
27F6                EXPECTM_3093S100:      
27F6   E1                     POP   HL   
27F7                          ;*Macro unroll:  test "$00AA~",$FF55
27F7   31 00 54               LD   SP,STACK   
27FA   CD 2D 10               CALL   coldInit   
27FD   CD B4 52               CALL   execStr   
2800   24 30 30 41 41 7E 00   DB   "$00AA~",0   
2807   E1                     POP   HL   
2808   E5                     PUSH   HL   
2809   11 55 FF               LD   DE,$FF55   
280C   B7                     OR   A   
280D   ED 52                  SBC   HL,DE   
280F   7D                     LD   A,L   
2810   B4                     OR   H   
2811   CA 67 28               JP   Z,expectM_3094S101   
2814   CD F9 0F               CALL   printStr   
2817   43 6F 64 65 3A 20 24 30 30 41 41 7E 00 .CSTR   "Code: ","$00AA~"   
2824   CD F9 0F               CALL   printStr   
2827   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2836   21 55 FF               LD   hl,$FF55   
2839   E5                     PUSH   hl   
283A   E5                     PUSH   hl   
283B   CD F6 10               CALL   run   
283E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2845   CD F9 0F               CALL   printStr   
2848   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2855   E1                     POP   hl   
2856   E5                     PUSH   hl   
2857   E5                     PUSH   hl   
2858   CD F6 10               CALL   run   
285B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2866   76                     HALT      
2867                EXPECTM_3094S101:      
2867   E1                     POP   HL   
2868                          ;*Macro unroll:  test "$AAAAa= a~= a",$5555
2868   31 00 54               LD   SP,STACK   
286B   CD 2D 10               CALL   coldInit   
286E   CD B4 52               CALL   execStr   
2871   24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 DB   "$AAAAa= a~= a",0   
287F   E1                     POP   HL   
2880   E5                     PUSH   HL   
2881   11 55 55               LD   DE,$5555   
2884   B7                     OR   A   
2885   ED 52                  SBC   HL,DE   
2887   7D                     LD   A,L   
2888   B4                     OR   H   
2889   CA E6 28               JP   Z,expectM_3095S102   
288C   CD F9 0F               CALL   printStr   
288F   43 6F 64 65 3A 20 24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 .CSTR   "Code: ","$AAAAa= a~= a"   
28A3   CD F9 0F               CALL   printStr   
28A6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28B5   21 55 55               LD   hl,$5555   
28B8   E5                     PUSH   hl   
28B9   E5                     PUSH   hl   
28BA   CD F6 10               CALL   run   
28BD   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
28C4   CD F9 0F               CALL   printStr   
28C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28D4   E1                     POP   hl   
28D5   E5                     PUSH   hl   
28D6   E5                     PUSH   hl   
28D7   CD F6 10               CALL   run   
28DA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
28E5   76                     HALT      
28E6                EXPECTM_3095S102:      
28E6   E1                     POP   HL   
28E7                          ;*Macro unroll:  test "3x= 1 x <<= x", 6
28E7   31 00 54               LD   SP,STACK   
28EA   CD 2D 10               CALL   coldInit   
28ED   CD B4 52               CALL   execStr   
28F0   33 78 3D 20 31 20 78 20 3C 3C 3D 20 78 00 DB   "3x= 1 x <<= x",0   
28FE   E1                     POP   HL   
28FF   E5                     PUSH   HL   
2900   11 06 00               LD   DE,6   
2903   B7                     OR   A   
2904   ED 52                  SBC   HL,DE   
2906   7D                     LD   A,L   
2907   B4                     OR   H   
2908   CA 65 29               JP   Z,expectM_3096S103   
290B   CD F9 0F               CALL   printStr   
290E   43 6F 64 65 3A 20 33 78 3D 20 31 20 78 20 3C 3C 3D 20 78 00 .CSTR   "Code: ","3x= 1 x <<= x"   
2922   CD F9 0F               CALL   printStr   
2925   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2934   21 06 00               LD   hl,6   
2937   E5                     PUSH   hl   
2938   E5                     PUSH   hl   
2939   CD F6 10               CALL   run   
293C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2943   CD F9 0F               CALL   printStr   
2946   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2953   E1                     POP   hl   
2954   E5                     PUSH   hl   
2955   E5                     PUSH   hl   
2956   CD F6 10               CALL   run   
2959   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2964   76                     HALT      
2965                EXPECTM_3096S103:      
2965   E1                     POP   HL   
2966                          ;*Macro unroll:  test "10x= 1 x >>= x", 5
2966   31 00 54               LD   SP,STACK   
2969   CD 2D 10               CALL   coldInit   
296C   CD B4 52               CALL   execStr   
296F   31 30 78 3D 20 31 20 78 20 3E 3E 3D 20 78 00 DB   "10x= 1 x >>= x",0   
297E   E1                     POP   HL   
297F   E5                     PUSH   HL   
2980   11 05 00               LD   DE,5   
2983   B7                     OR   A   
2984   ED 52                  SBC   HL,DE   
2986   7D                     LD   A,L   
2987   B4                     OR   H   
2988   CA E6 29               JP   Z,expectM_3097S104   
298B   CD F9 0F               CALL   printStr   
298E   43 6F 64 65 3A 20 31 30 78 3D 20 31 20 78 20 3E 3E 3D 20 78 00 .CSTR   "Code: ","10x= 1 x >>= x"   
29A3   CD F9 0F               CALL   printStr   
29A6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29B5   21 05 00               LD   hl,5   
29B8   E5                     PUSH   hl   
29B9   E5                     PUSH   hl   
29BA   CD F6 10               CALL   run   
29BD   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
29C4   CD F9 0F               CALL   printStr   
29C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29D4   E1                     POP   hl   
29D5   E5                     PUSH   hl   
29D6   E5                     PUSH   hl   
29D7   CD F6 10               CALL   run   
29DA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
29E5   76                     HALT      
29E6                EXPECTM_3097S104:      
29E6   E1                     POP   HL   
29E7                          ;*Macro unroll:  test "7 3 / /re", 1
29E7   31 00 54               LD   SP,STACK   
29EA   CD 2D 10               CALL   coldInit   
29ED   CD B4 52               CALL   execStr   
29F0   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
29FA   E1                     POP   HL   
29FB   E5                     PUSH   HL   
29FC   11 01 00               LD   DE,1   
29FF   B7                     OR   A   
2A00   ED 52                  SBC   HL,DE   
2A02   7D                     LD   A,L   
2A03   B4                     OR   H   
2A04   CA 5D 2A               JP   Z,expectM_3098S105   
2A07   CD F9 0F               CALL   printStr   
2A0A   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
2A1A   CD F9 0F               CALL   printStr   
2A1D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A2C   21 01 00               LD   hl,1   
2A2F   E5                     PUSH   hl   
2A30   E5                     PUSH   hl   
2A31   CD F6 10               CALL   run   
2A34   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2A3B   CD F9 0F               CALL   printStr   
2A3E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A4B   E1                     POP   hl   
2A4C   E5                     PUSH   hl   
2A4D   E5                     PUSH   hl   
2A4E   CD F6 10               CALL   run   
2A51   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2A5C   76                     HALT      
2A5D                EXPECTM_3098S105:      
2A5D   E1                     POP   HL   
2A5E                          ;*Macro unroll:  test "7 3 /", 2
2A5E   31 00 54               LD   SP,STACK   
2A61   CD 2D 10               CALL   coldInit   
2A64   CD B4 52               CALL   execStr   
2A67   37 20 33 20 2F 00      DB   "7 3 /",0   
2A6D   E1                     POP   HL   
2A6E   E5                     PUSH   HL   
2A6F   11 02 00               LD   DE,2   
2A72   B7                     OR   A   
2A73   ED 52                  SBC   HL,DE   
2A75   7D                     LD   A,L   
2A76   B4                     OR   H   
2A77   CA CC 2A               JP   Z,expectM_3099S106   
2A7A   CD F9 0F               CALL   printStr   
2A7D   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
2A89   CD F9 0F               CALL   printStr   
2A8C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A9B   21 02 00               LD   hl,2   
2A9E   E5                     PUSH   hl   
2A9F   E5                     PUSH   hl   
2AA0   CD F6 10               CALL   run   
2AA3   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2AAA   CD F9 0F               CALL   printStr   
2AAD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2ABA   E1                     POP   hl   
2ABB   E5                     PUSH   hl   
2ABC   E5                     PUSH   hl   
2ABD   CD F6 10               CALL   run   
2AC0   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2ACB   76                     HALT      
2ACC                EXPECTM_3099S106:      
2ACC   E1                     POP   HL   
2ACD                          ;*Macro unroll:  test "2 3 ==", FALSE
2ACD   31 00 54               LD   SP,STACK   
2AD0   CD 2D 10               CALL   coldInit   
2AD3   CD B4 52               CALL   execStr   
2AD6   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
2ADD   E1                     POP   HL   
2ADE   E5                     PUSH   HL   
2ADF   11 00 00               LD   DE,FALSE   
2AE2   B7                     OR   A   
2AE3   ED 52                  SBC   HL,DE   
2AE5   7D                     LD   A,L   
2AE6   B4                     OR   H   
2AE7   CA 3D 2B               JP   Z,expectM_3100S107   
2AEA   CD F9 0F               CALL   printStr   
2AED   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2AFA   CD F9 0F               CALL   printStr   
2AFD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B0C   21 00 00               LD   hl,FALSE   
2B0F   E5                     PUSH   hl   
2B10   E5                     PUSH   hl   
2B11   CD F6 10               CALL   run   
2B14   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2B1B   CD F9 0F               CALL   printStr   
2B1E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B2B   E1                     POP   hl   
2B2C   E5                     PUSH   hl   
2B2D   E5                     PUSH   hl   
2B2E   CD F6 10               CALL   run   
2B31   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2B3C   76                     HALT      
2B3D                EXPECTM_3100S107:      
2B3D   E1                     POP   HL   
2B3E                          ;*Macro unroll:  test "3 3 ==", TRUE
2B3E   31 00 54               LD   SP,STACK   
2B41   CD 2D 10               CALL   coldInit   
2B44   CD B4 52               CALL   execStr   
2B47   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
2B4E   E1                     POP   HL   
2B4F   E5                     PUSH   HL   
2B50   11 FF FF               LD   DE,TRUE   
2B53   B7                     OR   A   
2B54   ED 52                  SBC   HL,DE   
2B56   7D                     LD   A,L   
2B57   B4                     OR   H   
2B58   CA AE 2B               JP   Z,expectM_3101S108   
2B5B   CD F9 0F               CALL   printStr   
2B5E   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
2B6B   CD F9 0F               CALL   printStr   
2B6E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B7D   21 FF FF               LD   hl,TRUE   
2B80   E5                     PUSH   hl   
2B81   E5                     PUSH   hl   
2B82   CD F6 10               CALL   run   
2B85   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2B8C   CD F9 0F               CALL   printStr   
2B8F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B9C   E1                     POP   hl   
2B9D   E5                     PUSH   hl   
2B9E   E5                     PUSH   hl   
2B9F   CD F6 10               CALL   run   
2BA2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2BAD   76                     HALT      
2BAE                EXPECTM_3101S108:      
2BAE   E1                     POP   HL   
2BAF                          ;*Macro unroll:  test "1 2 <", TRUE
2BAF   31 00 54               LD   SP,STACK   
2BB2   CD 2D 10               CALL   coldInit   
2BB5   CD B4 52               CALL   execStr   
2BB8   31 20 32 20 3C 00      DB   "1 2 <",0   
2BBE   E1                     POP   HL   
2BBF   E5                     PUSH   HL   
2BC0   11 FF FF               LD   DE,TRUE   
2BC3   B7                     OR   A   
2BC4   ED 52                  SBC   HL,DE   
2BC6   7D                     LD   A,L   
2BC7   B4                     OR   H   
2BC8   CA 1D 2C               JP   Z,expectM_3102S109   
2BCB   CD F9 0F               CALL   printStr   
2BCE   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2BDA   CD F9 0F               CALL   printStr   
2BDD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BEC   21 FF FF               LD   hl,TRUE   
2BEF   E5                     PUSH   hl   
2BF0   E5                     PUSH   hl   
2BF1   CD F6 10               CALL   run   
2BF4   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2BFB   CD F9 0F               CALL   printStr   
2BFE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C0B   E1                     POP   hl   
2C0C   E5                     PUSH   hl   
2C0D   E5                     PUSH   hl   
2C0E   CD F6 10               CALL   run   
2C11   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2C1C   76                     HALT      
2C1D                EXPECTM_3102S109:      
2C1D   E1                     POP   HL   
2C1E                          ;*Macro unroll:  test "2 1 <", FALSE
2C1E   31 00 54               LD   SP,STACK   
2C21   CD 2D 10               CALL   coldInit   
2C24   CD B4 52               CALL   execStr   
2C27   32 20 31 20 3C 00      DB   "2 1 <",0   
2C2D   E1                     POP   HL   
2C2E   E5                     PUSH   HL   
2C2F   11 00 00               LD   DE,FALSE   
2C32   B7                     OR   A   
2C33   ED 52                  SBC   HL,DE   
2C35   7D                     LD   A,L   
2C36   B4                     OR   H   
2C37   CA 8C 2C               JP   Z,expectM_3103S110   
2C3A   CD F9 0F               CALL   printStr   
2C3D   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
2C49   CD F9 0F               CALL   printStr   
2C4C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C5B   21 00 00               LD   hl,FALSE   
2C5E   E5                     PUSH   hl   
2C5F   E5                     PUSH   hl   
2C60   CD F6 10               CALL   run   
2C63   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2C6A   CD F9 0F               CALL   printStr   
2C6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C7A   E1                     POP   hl   
2C7B   E5                     PUSH   hl   
2C7C   E5                     PUSH   hl   
2C7D   CD F6 10               CALL   run   
2C80   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2C8B   76                     HALT      
2C8C                EXPECTM_3103S110:      
2C8C   E1                     POP   HL   
2C8D                          ;*Macro unroll:  test "2 3 <", TRUE
2C8D   31 00 54               LD   SP,STACK   
2C90   CD 2D 10               CALL   coldInit   
2C93   CD B4 52               CALL   execStr   
2C96   32 20 33 20 3C 00      DB   "2 3 <",0   
2C9C   E1                     POP   HL   
2C9D   E5                     PUSH   HL   
2C9E   11 FF FF               LD   DE,TRUE   
2CA1   B7                     OR   A   
2CA2   ED 52                  SBC   HL,DE   
2CA4   7D                     LD   A,L   
2CA5   B4                     OR   H   
2CA6   CA FB 2C               JP   Z,expectM_3104S111   
2CA9   CD F9 0F               CALL   printStr   
2CAC   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2CB8   CD F9 0F               CALL   printStr   
2CBB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CCA   21 FF FF               LD   hl,TRUE   
2CCD   E5                     PUSH   hl   
2CCE   E5                     PUSH   hl   
2CCF   CD F6 10               CALL   run   
2CD2   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2CD9   CD F9 0F               CALL   printStr   
2CDC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CE9   E1                     POP   hl   
2CEA   E5                     PUSH   hl   
2CEB   E5                     PUSH   hl   
2CEC   CD F6 10               CALL   run   
2CEF   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2CFA   76                     HALT      
2CFB                EXPECTM_3104S111:      
2CFB   E1                     POP   HL   
2CFC                          ;*Macro unroll:  test "3 3 <", FALSE
2CFC   31 00 54               LD   SP,STACK   
2CFF   CD 2D 10               CALL   coldInit   
2D02   CD B4 52               CALL   execStr   
2D05   33 20 33 20 3C 00      DB   "3 3 <",0   
2D0B   E1                     POP   HL   
2D0C   E5                     PUSH   HL   
2D0D   11 00 00               LD   DE,FALSE   
2D10   B7                     OR   A   
2D11   ED 52                  SBC   HL,DE   
2D13   7D                     LD   A,L   
2D14   B4                     OR   H   
2D15   CA 6A 2D               JP   Z,expectM_3105S112   
2D18   CD F9 0F               CALL   printStr   
2D1B   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
2D27   CD F9 0F               CALL   printStr   
2D2A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D39   21 00 00               LD   hl,FALSE   
2D3C   E5                     PUSH   hl   
2D3D   E5                     PUSH   hl   
2D3E   CD F6 10               CALL   run   
2D41   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2D48   CD F9 0F               CALL   printStr   
2D4B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D58   E1                     POP   hl   
2D59   E5                     PUSH   hl   
2D5A   E5                     PUSH   hl   
2D5B   CD F6 10               CALL   run   
2D5E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2D69   76                     HALT      
2D6A                EXPECTM_3105S112:      
2D6A   E1                     POP   HL   
2D6B                          ;*Macro unroll:  test "1 2 >", FALSE
2D6B   31 00 54               LD   SP,STACK   
2D6E   CD 2D 10               CALL   coldInit   
2D71   CD B4 52               CALL   execStr   
2D74   31 20 32 20 3E 00      DB   "1 2 >",0   
2D7A   E1                     POP   HL   
2D7B   E5                     PUSH   HL   
2D7C   11 00 00               LD   DE,FALSE   
2D7F   B7                     OR   A   
2D80   ED 52                  SBC   HL,DE   
2D82   7D                     LD   A,L   
2D83   B4                     OR   H   
2D84   CA D9 2D               JP   Z,expectM_3106S113   
2D87   CD F9 0F               CALL   printStr   
2D8A   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2D96   CD F9 0F               CALL   printStr   
2D99   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DA8   21 00 00               LD   hl,FALSE   
2DAB   E5                     PUSH   hl   
2DAC   E5                     PUSH   hl   
2DAD   CD F6 10               CALL   run   
2DB0   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2DB7   CD F9 0F               CALL   printStr   
2DBA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DC7   E1                     POP   hl   
2DC8   E5                     PUSH   hl   
2DC9   E5                     PUSH   hl   
2DCA   CD F6 10               CALL   run   
2DCD   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2DD8   76                     HALT      
2DD9                EXPECTM_3106S113:      
2DD9   E1                     POP   HL   
2DDA                          ;*Macro unroll:  test "2 1 >", TRUE
2DDA   31 00 54               LD   SP,STACK   
2DDD   CD 2D 10               CALL   coldInit   
2DE0   CD B4 52               CALL   execStr   
2DE3   32 20 31 20 3E 00      DB   "2 1 >",0   
2DE9   E1                     POP   HL   
2DEA   E5                     PUSH   HL   
2DEB   11 FF FF               LD   DE,TRUE   
2DEE   B7                     OR   A   
2DEF   ED 52                  SBC   HL,DE   
2DF1   7D                     LD   A,L   
2DF2   B4                     OR   H   
2DF3   CA 48 2E               JP   Z,expectM_3107S114   
2DF6   CD F9 0F               CALL   printStr   
2DF9   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
2E05   CD F9 0F               CALL   printStr   
2E08   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E17   21 FF FF               LD   hl,TRUE   
2E1A   E5                     PUSH   hl   
2E1B   E5                     PUSH   hl   
2E1C   CD F6 10               CALL   run   
2E1F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2E26   CD F9 0F               CALL   printStr   
2E29   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E36   E1                     POP   hl   
2E37   E5                     PUSH   hl   
2E38   E5                     PUSH   hl   
2E39   CD F6 10               CALL   run   
2E3C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2E47   76                     HALT      
2E48                EXPECTM_3107S114:      
2E48   E1                     POP   HL   
2E49                          ;*Macro unroll:  test "3 3 >", FALSE
2E49   31 00 54               LD   SP,STACK   
2E4C   CD 2D 10               CALL   coldInit   
2E4F   CD B4 52               CALL   execStr   
2E52   33 20 33 20 3E 00      DB   "3 3 >",0   
2E58   E1                     POP   HL   
2E59   E5                     PUSH   HL   
2E5A   11 00 00               LD   DE,FALSE   
2E5D   B7                     OR   A   
2E5E   ED 52                  SBC   HL,DE   
2E60   7D                     LD   A,L   
2E61   B4                     OR   H   
2E62   CA B7 2E               JP   Z,expectM_3108S115   
2E65   CD F9 0F               CALL   printStr   
2E68   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
2E74   CD F9 0F               CALL   printStr   
2E77   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E86   21 00 00               LD   hl,FALSE   
2E89   E5                     PUSH   hl   
2E8A   E5                     PUSH   hl   
2E8B   CD F6 10               CALL   run   
2E8E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2E95   CD F9 0F               CALL   printStr   
2E98   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EA5   E1                     POP   hl   
2EA6   E5                     PUSH   hl   
2EA7   E5                     PUSH   hl   
2EA8   CD F6 10               CALL   run   
2EAB   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2EB6   76                     HALT      
2EB7                EXPECTM_3108S115:      
2EB7   E1                     POP   HL   
2EB8                          ;*Macro unroll:  test "4 3 >", TRUE
2EB8   31 00 54               LD   SP,STACK   
2EBB   CD 2D 10               CALL   coldInit   
2EBE   CD B4 52               CALL   execStr   
2EC1   34 20 33 20 3E 00      DB   "4 3 >",0   
2EC7   E1                     POP   HL   
2EC8   E5                     PUSH   HL   
2EC9   11 FF FF               LD   DE,TRUE   
2ECC   B7                     OR   A   
2ECD   ED 52                  SBC   HL,DE   
2ECF   7D                     LD   A,L   
2ED0   B4                     OR   H   
2ED1   CA 26 2F               JP   Z,expectM_3109S116   
2ED4   CD F9 0F               CALL   printStr   
2ED7   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2EE3   CD F9 0F               CALL   printStr   
2EE6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EF5   21 FF FF               LD   hl,TRUE   
2EF8   E5                     PUSH   hl   
2EF9   E5                     PUSH   hl   
2EFA   CD F6 10               CALL   run   
2EFD   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2F04   CD F9 0F               CALL   printStr   
2F07   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F14   E1                     POP   hl   
2F15   E5                     PUSH   hl   
2F16   E5                     PUSH   hl   
2F17   CD F6 10               CALL   run   
2F1A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2F25   76                     HALT      
2F26                EXPECTM_3109S116:      
2F26   E1                     POP   HL   
2F27                          ;*Macro unroll:  test "2 2 <=", TRUE
2F27   31 00 54               LD   SP,STACK   
2F2A   CD 2D 10               CALL   coldInit   
2F2D   CD B4 52               CALL   execStr   
2F30   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
2F37   E1                     POP   HL   
2F38   E5                     PUSH   HL   
2F39   11 FF FF               LD   DE,TRUE   
2F3C   B7                     OR   A   
2F3D   ED 52                  SBC   HL,DE   
2F3F   7D                     LD   A,L   
2F40   B4                     OR   H   
2F41   CA 97 2F               JP   Z,expectM_3110S117   
2F44   CD F9 0F               CALL   printStr   
2F47   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2F54   CD F9 0F               CALL   printStr   
2F57   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F66   21 FF FF               LD   hl,TRUE   
2F69   E5                     PUSH   hl   
2F6A   E5                     PUSH   hl   
2F6B   CD F6 10               CALL   run   
2F6E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2F75   CD F9 0F               CALL   printStr   
2F78   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F85   E1                     POP   hl   
2F86   E5                     PUSH   hl   
2F87   E5                     PUSH   hl   
2F88   CD F6 10               CALL   run   
2F8B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2F96   76                     HALT      
2F97                EXPECTM_3110S117:      
2F97   E1                     POP   HL   
2F98                          ;*Macro unroll:  test "2 2 >=", TRUE
2F98   31 00 54               LD   SP,STACK   
2F9B   CD 2D 10               CALL   coldInit   
2F9E   CD B4 52               CALL   execStr   
2FA1   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
2FA8   E1                     POP   HL   
2FA9   E5                     PUSH   HL   
2FAA   11 FF FF               LD   DE,TRUE   
2FAD   B7                     OR   A   
2FAE   ED 52                  SBC   HL,DE   
2FB0   7D                     LD   A,L   
2FB1   B4                     OR   H   
2FB2   CA 08 30               JP   Z,expectM_3111S118   
2FB5   CD F9 0F               CALL   printStr   
2FB8   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2FC5   CD F9 0F               CALL   printStr   
2FC8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FD7   21 FF FF               LD   hl,TRUE   
2FDA   E5                     PUSH   hl   
2FDB   E5                     PUSH   hl   
2FDC   CD F6 10               CALL   run   
2FDF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2FE6   CD F9 0F               CALL   printStr   
2FE9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FF6   E1                     POP   hl   
2FF7   E5                     PUSH   hl   
2FF8   E5                     PUSH   hl   
2FF9   CD F6 10               CALL   run   
2FFC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3007   76                     HALT      
3008                EXPECTM_3111S118:      
3008   E1                     POP   HL   
3009                          ;*Macro unroll:  test "3 1 <<", 6
3009   31 00 54               LD   SP,STACK   
300C   CD 2D 10               CALL   coldInit   
300F   CD B4 52               CALL   execStr   
3012   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
3019   E1                     POP   HL   
301A   E5                     PUSH   HL   
301B   11 06 00               LD   DE,6   
301E   B7                     OR   A   
301F   ED 52                  SBC   HL,DE   
3021   7D                     LD   A,L   
3022   B4                     OR   H   
3023   CA 79 30               JP   Z,expectM_3112S119   
3026   CD F9 0F               CALL   printStr   
3029   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
3036   CD F9 0F               CALL   printStr   
3039   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3048   21 06 00               LD   hl,6   
304B   E5                     PUSH   hl   
304C   E5                     PUSH   hl   
304D   CD F6 10               CALL   run   
3050   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3057   CD F9 0F               CALL   printStr   
305A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3067   E1                     POP   hl   
3068   E5                     PUSH   hl   
3069   E5                     PUSH   hl   
306A   CD F6 10               CALL   run   
306D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3078   76                     HALT      
3079                EXPECTM_3112S119:      
3079   E1                     POP   HL   
307A                          ;*Macro unroll:  test "10 1 >>", 5
307A   31 00 54               LD   SP,STACK   
307D   CD 2D 10               CALL   coldInit   
3080   CD B4 52               CALL   execStr   
3083   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
308B   E1                     POP   HL   
308C   E5                     PUSH   HL   
308D   11 05 00               LD   DE,5   
3090   B7                     OR   A   
3091   ED 52                  SBC   HL,DE   
3093   7D                     LD   A,L   
3094   B4                     OR   H   
3095   CA EC 30               JP   Z,expectM_3113S120   
3098   CD F9 0F               CALL   printStr   
309B   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
30A9   CD F9 0F               CALL   printStr   
30AC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30BB   21 05 00               LD   hl,5   
30BE   E5                     PUSH   hl   
30BF   E5                     PUSH   hl   
30C0   CD F6 10               CALL   run   
30C3   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
30CA   CD F9 0F               CALL   printStr   
30CD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30DA   E1                     POP   hl   
30DB   E5                     PUSH   hl   
30DC   E5                     PUSH   hl   
30DD   CD F6 10               CALL   run   
30E0   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
30EB   76                     HALT      
30EC                EXPECTM_3113S120:      
30EC   E1                     POP   HL   
30ED                          ;*Macro unroll:  test "1 x = x", 1
30ED   31 00 54               LD   SP,STACK   
30F0   CD 2D 10               CALL   coldInit   
30F3   CD B4 52               CALL   execStr   
30F6   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
30FE   E1                     POP   HL   
30FF   E5                     PUSH   HL   
3100   11 01 00               LD   DE,1   
3103   B7                     OR   A   
3104   ED 52                  SBC   HL,DE   
3106   7D                     LD   A,L   
3107   B4                     OR   H   
3108   CA 5F 31               JP   Z,expectM_3114S121   
310B   CD F9 0F               CALL   printStr   
310E   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
311C   CD F9 0F               CALL   printStr   
311F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
312E   21 01 00               LD   hl,1   
3131   E5                     PUSH   hl   
3132   E5                     PUSH   hl   
3133   CD F6 10               CALL   run   
3136   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
313D   CD F9 0F               CALL   printStr   
3140   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
314D   E1                     POP   hl   
314E   E5                     PUSH   hl   
314F   E5                     PUSH   hl   
3150   CD F6 10               CALL   run   
3153   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
315E   76                     HALT      
315F                EXPECTM_3114S121:      
315F   E1                     POP   HL   
3160                          ;*Macro unroll:  test "1{}^", 1
3160   31 00 54               LD   SP,STACK   
3163   CD 2D 10               CALL   coldInit   
3166   CD B4 52               CALL   execStr   
3169   31 7B 7D 5E 00         DB   "1{}^",0   
316E   E1                     POP   HL   
316F   E5                     PUSH   HL   
3170   11 01 00               LD   DE,1   
3173   B7                     OR   A   
3174   ED 52                  SBC   HL,DE   
3176   7D                     LD   A,L   
3177   B4                     OR   H   
3178   CA CC 31               JP   Z,expectM_3115S122   
317B   CD F9 0F               CALL   printStr   
317E   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
3189   CD F9 0F               CALL   printStr   
318C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
319B   21 01 00               LD   hl,1   
319E   E5                     PUSH   hl   
319F   E5                     PUSH   hl   
31A0   CD F6 10               CALL   run   
31A3   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
31AA   CD F9 0F               CALL   printStr   
31AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31BA   E1                     POP   hl   
31BB   E5                     PUSH   hl   
31BC   E5                     PUSH   hl   
31BD   CD F6 10               CALL   run   
31C0   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
31CB   76                     HALT      
31CC                EXPECTM_3115S122:      
31CC   E1                     POP   HL   
31CD                          ;*Macro unroll:  test "{1}^", 1
31CD   31 00 54               LD   SP,STACK   
31D0   CD 2D 10               CALL   coldInit   
31D3   CD B4 52               CALL   execStr   
31D6   7B 31 7D 5E 00         DB   "{1}^",0   
31DB   E1                     POP   HL   
31DC   E5                     PUSH   HL   
31DD   11 01 00               LD   DE,1   
31E0   B7                     OR   A   
31E1   ED 52                  SBC   HL,DE   
31E3   7D                     LD   A,L   
31E4   B4                     OR   H   
31E5   CA 39 32               JP   Z,expectM_3116S123   
31E8   CD F9 0F               CALL   printStr   
31EB   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
31F6   CD F9 0F               CALL   printStr   
31F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3208   21 01 00               LD   hl,1   
320B   E5                     PUSH   hl   
320C   E5                     PUSH   hl   
320D   CD F6 10               CALL   run   
3210   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3217   CD F9 0F               CALL   printStr   
321A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3227   E1                     POP   hl   
3228   E5                     PUSH   hl   
3229   E5                     PUSH   hl   
322A   CD F6 10               CALL   run   
322D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3238   76                     HALT      
3239                EXPECTM_3116S123:      
3239   E1                     POP   HL   
323A                          ;*Macro unroll:  test "{{1}^}^", 1
323A   31 00 54               LD   SP,STACK   
323D   CD 2D 10               CALL   coldInit   
3240   CD B4 52               CALL   execStr   
3243   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
324B   E1                     POP   HL   
324C   E5                     PUSH   HL   
324D   11 01 00               LD   DE,1   
3250   B7                     OR   A   
3251   ED 52                  SBC   HL,DE   
3253   7D                     LD   A,L   
3254   B4                     OR   H   
3255   CA AC 32               JP   Z,expectM_3117S124   
3258   CD F9 0F               CALL   printStr   
325B   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
3269   CD F9 0F               CALL   printStr   
326C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
327B   21 01 00               LD   hl,1   
327E   E5                     PUSH   hl   
327F   E5                     PUSH   hl   
3280   CD F6 10               CALL   run   
3283   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
328A   CD F9 0F               CALL   printStr   
328D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
329A   E1                     POP   hl   
329B   E5                     PUSH   hl   
329C   E5                     PUSH   hl   
329D   CD F6 10               CALL   run   
32A0   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
32AB   76                     HALT      
32AC                EXPECTM_3117S124:      
32AC   E1                     POP   HL   
32AD                          ;*Macro unroll:  test "{{{1}^}^}^", 1
32AD   31 00 54               LD   SP,STACK   
32B0   CD 2D 10               CALL   coldInit   
32B3   CD B4 52               CALL   execStr   
32B6   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
32C1   E1                     POP   HL   
32C2   E5                     PUSH   HL   
32C3   11 01 00               LD   DE,1   
32C6   B7                     OR   A   
32C7   ED 52                  SBC   HL,DE   
32C9   7D                     LD   A,L   
32CA   B4                     OR   H   
32CB   CA 25 33               JP   Z,expectM_3118S125   
32CE   CD F9 0F               CALL   printStr   
32D1   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
32E2   CD F9 0F               CALL   printStr   
32E5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32F4   21 01 00               LD   hl,1   
32F7   E5                     PUSH   hl   
32F8   E5                     PUSH   hl   
32F9   CD F6 10               CALL   run   
32FC   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3303   CD F9 0F               CALL   printStr   
3306   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3313   E1                     POP   hl   
3314   E5                     PUSH   hl   
3315   E5                     PUSH   hl   
3316   CD F6 10               CALL   run   
3319   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3324   76                     HALT      
3325                EXPECTM_3118S125:      
3325   E1                     POP   HL   
3326                          ;*Macro unroll:  test "1 /f{10}{20} ? +", 21
3326   31 00 54               LD   SP,STACK   
3329   CD 2D 10               CALL   coldInit   
332C   CD B4 52               CALL   execStr   
332F   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 DB   "1 /f{10}{20} ? +",0   
3340   E1                     POP   HL   
3341   E5                     PUSH   HL   
3342   11 15 00               LD   DE,21   
3345   B7                     OR   A   
3346   ED 52                  SBC   HL,DE   
3348   7D                     LD   A,L   
3349   B4                     OR   H   
334A   CA AA 33               JP   Z,expectM_3119S126   
334D   CD F9 0F               CALL   printStr   
3350   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ? +"   
3367   CD F9 0F               CALL   printStr   
336A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3379   21 15 00               LD   hl,21   
337C   E5                     PUSH   hl   
337D   E5                     PUSH   hl   
337E   CD F6 10               CALL   run   
3381   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3388   CD F9 0F               CALL   printStr   
338B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3398   E1                     POP   hl   
3399   E5                     PUSH   hl   
339A   E5                     PUSH   hl   
339B   CD F6 10               CALL   run   
339E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
33A9   76                     HALT      
33AA                EXPECTM_3119S126:      
33AA   E1                     POP   HL   
33AB                          ;*Macro unroll:  test "1 /t{10}{20} ? +", 11
33AB   31 00 54               LD   SP,STACK   
33AE   CD 2D 10               CALL   coldInit   
33B1   CD B4 52               CALL   execStr   
33B4   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 DB   "1 /t{10}{20} ? +",0   
33C5   E1                     POP   HL   
33C6   E5                     PUSH   HL   
33C7   11 0B 00               LD   DE,11   
33CA   B7                     OR   A   
33CB   ED 52                  SBC   HL,DE   
33CD   7D                     LD   A,L   
33CE   B4                     OR   H   
33CF   CA 2F 34               JP   Z,expectM_3120S127   
33D2   CD F9 0F               CALL   printStr   
33D5   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ? +"   
33EC   CD F9 0F               CALL   printStr   
33EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33FE   21 0B 00               LD   hl,11   
3401   E5                     PUSH   hl   
3402   E5                     PUSH   hl   
3403   CD F6 10               CALL   run   
3406   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
340D   CD F9 0F               CALL   printStr   
3410   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
341D   E1                     POP   hl   
341E   E5                     PUSH   hl   
341F   E5                     PUSH   hl   
3420   CD F6 10               CALL   run   
3423   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
342E   76                     HALT      
342F                EXPECTM_3120S127:      
342F   E1                     POP   HL   
3430                          ;*Macro unroll:  test "\\{2}^", 2
3430   31 00 54               LD   SP,STACK   
3433   CD 2D 10               CALL   coldInit   
3436   CD B4 52               CALL   execStr   
3439   5C 7B 32 7D 5E 00      DB   "\\{2}^",0   
343F   E1                     POP   HL   
3440   E5                     PUSH   HL   
3441   11 02 00               LD   DE,2   
3444   B7                     OR   A   
3445   ED 52                  SBC   HL,DE   
3447   7D                     LD   A,L   
3448   B4                     OR   H   
3449   CA 9E 34               JP   Z,expectM_3121S128   
344C   CD F9 0F               CALL   printStr   
344F   43 6F 64 65 3A 20 5C 7B 32 7D 5E 00 .CSTR   "Code: ","\\{2}^"   
345B   CD F9 0F               CALL   printStr   
345E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
346D   21 02 00               LD   hl,2   
3470   E5                     PUSH   hl   
3471   E5                     PUSH   hl   
3472   CD F6 10               CALL   run   
3475   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
347C   CD F9 0F               CALL   printStr   
347F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
348C   E1                     POP   hl   
348D   E5                     PUSH   hl   
348E   E5                     PUSH   hl   
348F   CD F6 10               CALL   run   
3492   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
349D   76                     HALT      
349E                EXPECTM_3121S128:      
349E   E1                     POP   HL   
349F                          ;*Macro unroll:  test "\\a{2}^", 2
349F   31 00 54               LD   SP,STACK   
34A2   CD 2D 10               CALL   coldInit   
34A5   CD B4 52               CALL   execStr   
34A8   5C 61 7B 32 7D 5E 00   DB   "\\a{2}^",0   
34AF   E1                     POP   HL   
34B0   E5                     PUSH   HL   
34B1   11 02 00               LD   DE,2   
34B4   B7                     OR   A   
34B5   ED 52                  SBC   HL,DE   
34B7   7D                     LD   A,L   
34B8   B4                     OR   H   
34B9   CA 0F 35               JP   Z,expectM_3122S129   
34BC   CD F9 0F               CALL   printStr   
34BF   43 6F 64 65 3A 20 5C 61 7B 32 7D 5E 00 .CSTR   "Code: ","\\a{2}^"   
34CC   CD F9 0F               CALL   printStr   
34CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34DE   21 02 00               LD   hl,2   
34E1   E5                     PUSH   hl   
34E2   E5                     PUSH   hl   
34E3   CD F6 10               CALL   run   
34E6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
34ED   CD F9 0F               CALL   printStr   
34F0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34FD   E1                     POP   hl   
34FE   E5                     PUSH   hl   
34FF   E5                     PUSH   hl   
3500   CD F6 10               CALL   run   
3503   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
350E   76                     HALT      
350F                EXPECTM_3122S129:      
350F   E1                     POP   HL   
3510                          ;*Macro unroll:  test "5 \\a{%a}^", 5
3510   31 00 54               LD   SP,STACK   
3513   CD 2D 10               CALL   coldInit   
3516   CD B4 52               CALL   execStr   
3519   35 20 5C 61 7B 25 61 7D 5E 00 DB   "5 \\a{%a}^",0   
3523   E1                     POP   HL   
3524   E5                     PUSH   HL   
3525   11 05 00               LD   DE,5   
3528   B7                     OR   A   
3529   ED 52                  SBC   HL,DE   
352B   7D                     LD   A,L   
352C   B4                     OR   H   
352D   CA 86 35               JP   Z,expectM_3123S130   
3530   CD F9 0F               CALL   printStr   
3533   43 6F 64 65 3A 20 35 20 5C 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a{%a}^"   
3543   CD F9 0F               CALL   printStr   
3546   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3555   21 05 00               LD   hl,5   
3558   E5                     PUSH   hl   
3559   E5                     PUSH   hl   
355A   CD F6 10               CALL   run   
355D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3564   CD F9 0F               CALL   printStr   
3567   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3574   E1                     POP   hl   
3575   E5                     PUSH   hl   
3576   E5                     PUSH   hl   
3577   CD F6 10               CALL   run   
357A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3585   76                     HALT      
3586                EXPECTM_3123S130:      
3586   E1                     POP   HL   
3587                          ;*Macro unroll:  test "5 \\a:b{%a}^", 5
3587   31 00 54               LD   SP,STACK   
358A   CD 2D 10               CALL   coldInit   
358D   CD B4 52               CALL   execStr   
3590   35 20 5C 61 3A 62 7B 25 61 7D 5E 00 DB   "5 \\a:b{%a}^",0   
359C   E1                     POP   HL   
359D   E5                     PUSH   HL   
359E   11 05 00               LD   DE,5   
35A1   B7                     OR   A   
35A2   ED 52                  SBC   HL,DE   
35A4   7D                     LD   A,L   
35A5   B4                     OR   H   
35A6   CA 01 36               JP   Z,expectM_3124S131   
35A9   CD F9 0F               CALL   printStr   
35AC   43 6F 64 65 3A 20 35 20 5C 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a:b{%a}^"   
35BE   CD F9 0F               CALL   printStr   
35C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35D0   21 05 00               LD   hl,5   
35D3   E5                     PUSH   hl   
35D4   E5                     PUSH   hl   
35D5   CD F6 10               CALL   run   
35D8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
35DF   CD F9 0F               CALL   printStr   
35E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35EF   E1                     POP   hl   
35F0   E5                     PUSH   hl   
35F1   E5                     PUSH   hl   
35F2   CD F6 10               CALL   run   
35F5   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3600   76                     HALT      
3601                EXPECTM_3124S131:      
3601   E1                     POP   HL   
3602                          ;*Macro unroll:  test "\\a{{2}^}^", 2
3602   31 00 54               LD   SP,STACK   
3605   CD 2D 10               CALL   coldInit   
3608   CD B4 52               CALL   execStr   
360B   5C 61 7B 7B 32 7D 5E 7D 5E 00 DB   "\\a{{2}^}^",0   
3615   E1                     POP   HL   
3616   E5                     PUSH   HL   
3617   11 02 00               LD   DE,2   
361A   B7                     OR   A   
361B   ED 52                  SBC   HL,DE   
361D   7D                     LD   A,L   
361E   B4                     OR   H   
361F   CA 78 36               JP   Z,expectM_3125S132   
3622   CD F9 0F               CALL   printStr   
3625   43 6F 64 65 3A 20 5C 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ","\\a{{2}^}^"   
3635   CD F9 0F               CALL   printStr   
3638   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3647   21 02 00               LD   hl,2   
364A   E5                     PUSH   hl   
364B   E5                     PUSH   hl   
364C   CD F6 10               CALL   run   
364F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3656   CD F9 0F               CALL   printStr   
3659   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3666   E1                     POP   hl   
3667   E5                     PUSH   hl   
3668   E5                     PUSH   hl   
3669   CD F6 10               CALL   run   
366C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3677   76                     HALT      
3678                EXPECTM_3125S132:      
3678   E1                     POP   HL   
3679                          ;*Macro unroll:  test "1 5 \\a{{%a}^}^", 5
3679   31 00 54               LD   SP,STACK   
367C   CD 2D 10               CALL   coldInit   
367F   CD B4 52               CALL   execStr   
3682   31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a}^}^",0   
3691   E1                     POP   HL   
3692   E5                     PUSH   HL   
3693   11 05 00               LD   DE,5   
3696   B7                     OR   A   
3697   ED 52                  SBC   HL,DE   
3699   7D                     LD   A,L   
369A   B4                     OR   H   
369B   CA F9 36               JP   Z,expectM_3126S133   
369E   CD F9 0F               CALL   printStr   
36A1   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a}^}^"   
36B6   CD F9 0F               CALL   printStr   
36B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36C8   21 05 00               LD   hl,5   
36CB   E5                     PUSH   hl   
36CC   E5                     PUSH   hl   
36CD   CD F6 10               CALL   run   
36D0   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
36D7   CD F9 0F               CALL   printStr   
36DA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36E7   E1                     POP   hl   
36E8   E5                     PUSH   hl   
36E9   E5                     PUSH   hl   
36EA   CD F6 10               CALL   run   
36ED   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
36F8   76                     HALT      
36F9                EXPECTM_3126S133:      
36F9   E1                     POP   HL   
36FA                          ;*Macro unroll:  test "1 5 \\ab{{%a}^}^", 1
36FA   31 00 54               LD   SP,STACK   
36FD   CD 2D 10               CALL   coldInit   
3700   CD B4 52               CALL   execStr   
3703   31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a}^}^",0   
3713   E1                     POP   HL   
3714   E5                     PUSH   HL   
3715   11 01 00               LD   DE,1   
3718   B7                     OR   A   
3719   ED 52                  SBC   HL,DE   
371B   7D                     LD   A,L   
371C   B4                     OR   H   
371D   CA 7C 37               JP   Z,expectM_3127S134   
3720   CD F9 0F               CALL   printStr   
3723   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a}^}^"   
3739   CD F9 0F               CALL   printStr   
373C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
374B   21 01 00               LD   hl,1   
374E   E5                     PUSH   hl   
374F   E5                     PUSH   hl   
3750   CD F6 10               CALL   run   
3753   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
375A   CD F9 0F               CALL   printStr   
375D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
376A   E1                     POP   hl   
376B   E5                     PUSH   hl   
376C   E5                     PUSH   hl   
376D   CD F6 10               CALL   run   
3770   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
377B   76                     HALT      
377C                EXPECTM_3127S134:      
377C   E1                     POP   HL   
377D                          ;*Macro unroll:  test "1 5 \\a{{%a 2 +}^}^", 7
377D   31 00 54               LD   SP,STACK   
3780   CD 2D 10               CALL   coldInit   
3783   CD B4 52               CALL   execStr   
3786   31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a 2 +}^}^",0   
3799   E1                     POP   HL   
379A   E5                     PUSH   HL   
379B   11 07 00               LD   DE,7   
379E   B7                     OR   A   
379F   ED 52                  SBC   HL,DE   
37A1   7D                     LD   A,L   
37A2   B4                     OR   H   
37A3   CA 05 38               JP   Z,expectM_3128S135   
37A6   CD F9 0F               CALL   printStr   
37A9   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a 2 +}^}^"   
37C2   CD F9 0F               CALL   printStr   
37C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37D4   21 07 00               LD   hl,7   
37D7   E5                     PUSH   hl   
37D8   E5                     PUSH   hl   
37D9   CD F6 10               CALL   run   
37DC   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
37E3   CD F9 0F               CALL   printStr   
37E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37F3   E1                     POP   hl   
37F4   E5                     PUSH   hl   
37F5   E5                     PUSH   hl   
37F6   CD F6 10               CALL   run   
37F9   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3804   76                     HALT      
3805                EXPECTM_3128S135:      
3805   E1                     POP   HL   
3806                          ;*Macro unroll:  test "1 5 \\ab{{%a %b +}^}^", 6
3806   31 00 54               LD   SP,STACK   
3809   CD 2D 10               CALL   coldInit   
380C   CD B4 52               CALL   execStr   
380F   31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a %b +}^}^",0   
3824   E1                     POP   HL   
3825   E5                     PUSH   HL   
3826   11 06 00               LD   DE,6   
3829   B7                     OR   A   
382A   ED 52                  SBC   HL,DE   
382C   7D                     LD   A,L   
382D   B4                     OR   H   
382E   CA 92 38               JP   Z,expectM_3129S136   
3831   CD F9 0F               CALL   printStr   
3834   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a %b +}^}^"   
384F   CD F9 0F               CALL   printStr   
3852   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3861   21 06 00               LD   hl,6   
3864   E5                     PUSH   hl   
3865   E5                     PUSH   hl   
3866   CD F6 10               CALL   run   
3869   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3870   CD F9 0F               CALL   printStr   
3873   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3880   E1                     POP   hl   
3881   E5                     PUSH   hl   
3882   E5                     PUSH   hl   
3883   CD F6 10               CALL   run   
3886   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3891   76                     HALT      
3892                EXPECTM_3129S136:      
3892   E1                     POP   HL   
3893                          ;*Macro unroll:  test "\\a{2} x= 1 x^", 2
3893   31 00 54               LD   SP,STACK   
3896   CD 2D 10               CALL   coldInit   
3899   CD B4 52               CALL   execStr   
389C   5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a{2} x= 1 x^",0   
38AA   E1                     POP   HL   
38AB   E5                     PUSH   HL   
38AC   11 02 00               LD   DE,2   
38AF   B7                     OR   A   
38B0   ED 52                  SBC   HL,DE   
38B2   7D                     LD   A,L   
38B3   B4                     OR   H   
38B4   CA 11 39               JP   Z,expectM_3130S137   
38B7   CD F9 0F               CALL   printStr   
38BA   43 6F 64 65 3A 20 5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{2} x= 1 x^"   
38CE   CD F9 0F               CALL   printStr   
38D1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38E0   21 02 00               LD   hl,2   
38E3   E5                     PUSH   hl   
38E4   E5                     PUSH   hl   
38E5   CD F6 10               CALL   run   
38E8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
38EF   CD F9 0F               CALL   printStr   
38F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38FF   E1                     POP   hl   
3900   E5                     PUSH   hl   
3901   E5                     PUSH   hl   
3902   CD F6 10               CALL   run   
3905   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3910   76                     HALT      
3911                EXPECTM_3130S137:      
3911   E1                     POP   HL   
3912                          ;*Macro unroll:  test "\\a{%a} x= 0 1 x^", 1
3912   31 00 54               LD   SP,STACK   
3915   CD 2D 10               CALL   coldInit   
3918   CD B4 52               CALL   execStr   
391B   5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   "\\a{%a} x= 0 1 x^",0   
392C   E1                     POP   HL   
392D   E5                     PUSH   HL   
392E   11 01 00               LD   DE,1   
3931   B7                     OR   A   
3932   ED 52                  SBC   HL,DE   
3934   7D                     LD   A,L   
3935   B4                     OR   H   
3936   CA 96 39               JP   Z,expectM_3131S138   
3939   CD F9 0F               CALL   printStr   
393C   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{%a} x= 0 1 x^"   
3953   CD F9 0F               CALL   printStr   
3956   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3965   21 01 00               LD   hl,1   
3968   E5                     PUSH   hl   
3969   E5                     PUSH   hl   
396A   CD F6 10               CALL   run   
396D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3974   CD F9 0F               CALL   printStr   
3977   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3984   E1                     POP   hl   
3985   E5                     PUSH   hl   
3986   E5                     PUSH   hl   
3987   CD F6 10               CALL   run   
398A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3995   76                     HALT      
3996                EXPECTM_3131S138:      
3996   E1                     POP   HL   
3997                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3997   31 00 54               LD   SP,STACK   
399A   CD 2D 10               CALL   coldInit   
399D   CD B4 52               CALL   execStr   
39A0   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
39B2   E1                     POP   HL   
39B3   E5                     PUSH   HL   
39B4   11 02 00               LD   DE,2   
39B7   B7                     OR   A   
39B8   ED 52                  SBC   HL,DE   
39BA   7D                     LD   A,L   
39BB   B4                     OR   H   
39BC   CA 1D 3A               JP   Z,expectM_3132S139   
39BF   CD F9 0F               CALL   printStr   
39C2   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
39DA   CD F9 0F               CALL   printStr   
39DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39EC   21 02 00               LD   hl,2   
39EF   E5                     PUSH   hl   
39F0   E5                     PUSH   hl   
39F1   CD F6 10               CALL   run   
39F4   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
39FB   CD F9 0F               CALL   printStr   
39FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A0B   E1                     POP   hl   
3A0C   E5                     PUSH   hl   
3A0D   E5                     PUSH   hl   
3A0E   CD F6 10               CALL   run   
3A11   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3A1C   76                     HALT      
3A1D                EXPECTM_3132S139:      
3A1D   E1                     POP   HL   
3A1E                          ;*Macro unroll:  test "\\a:b{%a} x= 1 2 x^", 2
3A1E   31 00 54               LD   SP,STACK   
3A21   CD 2D 10               CALL   coldInit   
3A24   CD B4 52               CALL   execStr   
3A27   5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\a:b{%a} x= 1 2 x^",0   
3A3A   E1                     POP   HL   
3A3B   E5                     PUSH   HL   
3A3C   11 02 00               LD   DE,2   
3A3F   B7                     OR   A   
3A40   ED 52                  SBC   HL,DE   
3A42   7D                     LD   A,L   
3A43   B4                     OR   H   
3A44   CA A6 3A               JP   Z,expectM_3133S140   
3A47   CD F9 0F               CALL   printStr   
3A4A   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a} x= 1 2 x^"   
3A63   CD F9 0F               CALL   printStr   
3A66   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A75   21 02 00               LD   hl,2   
3A78   E5                     PUSH   hl   
3A79   E5                     PUSH   hl   
3A7A   CD F6 10               CALL   run   
3A7D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3A84   CD F9 0F               CALL   printStr   
3A87   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A94   E1                     POP   hl   
3A95   E5                     PUSH   hl   
3A96   E5                     PUSH   hl   
3A97   CD F6 10               CALL   run   
3A9A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3AA5   76                     HALT      
3AA6                EXPECTM_3133S140:      
3AA6   E1                     POP   HL   
3AA7                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3AA7   31 00 54               LD   SP,STACK   
3AAA   CD 2D 10               CALL   coldInit   
3AAD   CD B4 52               CALL   execStr   
3AB0   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3AC2   E1                     POP   HL   
3AC3   E5                     PUSH   HL   
3AC4   11 02 00               LD   DE,2   
3AC7   B7                     OR   A   
3AC8   ED 52                  SBC   HL,DE   
3ACA   7D                     LD   A,L   
3ACB   B4                     OR   H   
3ACC   CA 2D 3B               JP   Z,expectM_3134S141   
3ACF   CD F9 0F               CALL   printStr   
3AD2   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
3AEA   CD F9 0F               CALL   printStr   
3AED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AFC   21 02 00               LD   hl,2   
3AFF   E5                     PUSH   hl   
3B00   E5                     PUSH   hl   
3B01   CD F6 10               CALL   run   
3B04   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3B0B   CD F9 0F               CALL   printStr   
3B0E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B1B   E1                     POP   hl   
3B1C   E5                     PUSH   hl   
3B1D   E5                     PUSH   hl   
3B1E   CD F6 10               CALL   run   
3B21   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3B2C   76                     HALT      
3B2D                EXPECTM_3134S141:      
3B2D   E1                     POP   HL   
3B2E                          ;*Macro unroll:  test "\\ab{%b %a} x= 10 15 x^ -", 5
3B2E   31 00 54               LD   SP,STACK   
3B31   CD 2D 10               CALL   coldInit   
3B34   CD B4 52               CALL   execStr   
3B37   5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   "\\ab{%b %a} x= 10 15 x^ -",0   
3B50   E1                     POP   HL   
3B51   E5                     PUSH   HL   
3B52   11 05 00               LD   DE,5   
3B55   B7                     OR   A   
3B56   ED 52                  SBC   HL,DE   
3B58   7D                     LD   A,L   
3B59   B4                     OR   H   
3B5A   CA C2 3B               JP   Z,expectM_3135S142   
3B5D   CD F9 0F               CALL   printStr   
3B60   43 6F 64 65 3A 20 5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","\\ab{%b %a} x= 10 15 x^ -"   
3B7F   CD F9 0F               CALL   printStr   
3B82   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B91   21 05 00               LD   hl,5   
3B94   E5                     PUSH   hl   
3B95   E5                     PUSH   hl   
3B96   CD F6 10               CALL   run   
3B99   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3BA0   CD F9 0F               CALL   printStr   
3BA3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BB0   E1                     POP   hl   
3BB1   E5                     PUSH   hl   
3BB2   E5                     PUSH   hl   
3BB3   CD F6 10               CALL   run   
3BB6   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3BC1   76                     HALT      
3BC2                EXPECTM_3135S142:      
3BC2   E1                     POP   HL   
3BC3                          ;*Macro unroll:  test "\\a:b{2} x= 1 x^", 2
3BC3   31 00 54               LD   SP,STACK   
3BC6   CD 2D 10               CALL   coldInit   
3BC9   CD B4 52               CALL   execStr   
3BCC   5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a:b{2} x= 1 x^",0   
3BDC   E1                     POP   HL   
3BDD   E5                     PUSH   HL   
3BDE   11 02 00               LD   DE,2   
3BE1   B7                     OR   A   
3BE2   ED 52                  SBC   HL,DE   
3BE4   7D                     LD   A,L   
3BE5   B4                     OR   H   
3BE6   CA 45 3C               JP   Z,expectM_3136S143   
3BE9   CD F9 0F               CALL   printStr   
3BEC   43 6F 64 65 3A 20 5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a:b{2} x= 1 x^"   
3C02   CD F9 0F               CALL   printStr   
3C05   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C14   21 02 00               LD   hl,2   
3C17   E5                     PUSH   hl   
3C18   E5                     PUSH   hl   
3C19   CD F6 10               CALL   run   
3C1C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3C23   CD F9 0F               CALL   printStr   
3C26   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C33   E1                     POP   hl   
3C34   E5                     PUSH   hl   
3C35   E5                     PUSH   hl   
3C36   CD F6 10               CALL   run   
3C39   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3C44   76                     HALT      
3C45                EXPECTM_3136S143:      
3C45   E1                     POP   HL   
3C46                          ;*Macro unroll:  test "\\:b{100 %b = %b} x= x^", 100
3C46   31 00 54               LD   SP,STACK   
3C49   CD 2D 10               CALL   coldInit   
3C4C   CD B4 52               CALL   execStr   
3C4F   5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "\\:b{100 %b = %b} x= x^",0   
3C66   E1                     POP   HL   
3C67   E5                     PUSH   HL   
3C68   11 64 00               LD   DE,100   
3C6B   B7                     OR   A   
3C6C   ED 52                  SBC   HL,DE   
3C6E   7D                     LD   A,L   
3C6F   B4                     OR   H   
3C70   CA D6 3C               JP   Z,expectM_3137S144   
3C73   CD F9 0F               CALL   printStr   
3C76   43 6F 64 65 3A 20 5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","\\:b{100 %b = %b} x= x^"   
3C93   CD F9 0F               CALL   printStr   
3C96   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CA5   21 64 00               LD   hl,100   
3CA8   E5                     PUSH   hl   
3CA9   E5                     PUSH   hl   
3CAA   CD F6 10               CALL   run   
3CAD   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3CB4   CD F9 0F               CALL   printStr   
3CB7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CC4   E1                     POP   hl   
3CC5   E5                     PUSH   hl   
3CC6   E5                     PUSH   hl   
3CC7   CD F6 10               CALL   run   
3CCA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3CD5   76                     HALT      
3CD6                EXPECTM_3137S144:      
3CD6   E1                     POP   HL   
3CD7                          ;*Macro unroll:  test "\\a:b{1 %b = %b} x= 2 x^", 1
3CD7   31 00 54               LD   SP,STACK   
3CDA   CD 2D 10               CALL   coldInit   
3CDD   CD B4 52               CALL   execStr   
3CE0   5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{1 %b = %b} x= 2 x^",0   
3CF8   E1                     POP   HL   
3CF9   E5                     PUSH   HL   
3CFA   11 01 00               LD   DE,1   
3CFD   B7                     OR   A   
3CFE   ED 52                  SBC   HL,DE   
3D00   7D                     LD   A,L   
3D01   B4                     OR   H   
3D02   CA 69 3D               JP   Z,expectM_3138S145   
3D05   CD F9 0F               CALL   printStr   
3D08   43 6F 64 65 3A 20 5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{1 %b = %b} x= 2 x^"   
3D26   CD F9 0F               CALL   printStr   
3D29   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D38   21 01 00               LD   hl,1   
3D3B   E5                     PUSH   hl   
3D3C   E5                     PUSH   hl   
3D3D   CD F6 10               CALL   run   
3D40   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3D47   CD F9 0F               CALL   printStr   
3D4A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D57   E1                     POP   hl   
3D58   E5                     PUSH   hl   
3D59   E5                     PUSH   hl   
3D5A   CD F6 10               CALL   run   
3D5D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3D68   76                     HALT      
3D69                EXPECTM_3138S145:      
3D69   E1                     POP   HL   
3D6A                          ;*Macro unroll:  test "\\a:b{%a %b = %b} x= 2 x^", 2
3D6A   31 00 54               LD   SP,STACK   
3D6D   CD 2D 10               CALL   coldInit   
3D70   CD B4 52               CALL   execStr   
3D73   5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{%a %b = %b} x= 2 x^",0   
3D8C   E1                     POP   HL   
3D8D   E5                     PUSH   HL   
3D8E   11 02 00               LD   DE,2   
3D91   B7                     OR   A   
3D92   ED 52                  SBC   HL,DE   
3D94   7D                     LD   A,L   
3D95   B4                     OR   H   
3D96   CA FE 3D               JP   Z,expectM_3139S146   
3D99   CD F9 0F               CALL   printStr   
3D9C   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a %b = %b} x= 2 x^"   
3DBB   CD F9 0F               CALL   printStr   
3DBE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DCD   21 02 00               LD   hl,2   
3DD0   E5                     PUSH   hl   
3DD1   E5                     PUSH   hl   
3DD2   CD F6 10               CALL   run   
3DD5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3DDC   CD F9 0F               CALL   printStr   
3DDF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DEC   E1                     POP   hl   
3DED   E5                     PUSH   hl   
3DEE   E5                     PUSH   hl   
3DEF   CD F6 10               CALL   run   
3DF2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3DFD   76                     HALT      
3DFE                EXPECTM_3139S146:      
3DFE   E1                     POP   HL   
3DFF                          ;*Macro unroll:  test "1 10 20 \\ab{/t{%a}{%b} ?}^ +", 11
3DFF   31 00 54               LD   SP,STACK   
3E02   CD 2D 10               CALL   coldInit   
3E05   CD B4 52               CALL   execStr   
3E08   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/t{%a}{%b} ?}^ +",0   
3E25   E1                     POP   HL   
3E26   E5                     PUSH   HL   
3E27   11 0B 00               LD   DE,11   
3E2A   B7                     OR   A   
3E2B   ED 52                  SBC   HL,DE   
3E2D   7D                     LD   A,L   
3E2E   B4                     OR   H   
3E2F   CA 9B 3E               JP   Z,expectM_3140S147   
3E32   CD F9 0F               CALL   printStr   
3E35   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/t{%a}{%b} ?}^ +"   
3E58   CD F9 0F               CALL   printStr   
3E5B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E6A   21 0B 00               LD   hl,11   
3E6D   E5                     PUSH   hl   
3E6E   E5                     PUSH   hl   
3E6F   CD F6 10               CALL   run   
3E72   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3E79   CD F9 0F               CALL   printStr   
3E7C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E89   E1                     POP   hl   
3E8A   E5                     PUSH   hl   
3E8B   E5                     PUSH   hl   
3E8C   CD F6 10               CALL   run   
3E8F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3E9A   76                     HALT      
3E9B                EXPECTM_3140S147:      
3E9B   E1                     POP   HL   
3E9C                          ;*Macro unroll:  test "1 10 20 \\ab{/f{%a}{%b} ?}^ +", 21
3E9C   31 00 54               LD   SP,STACK   
3E9F   CD 2D 10               CALL   coldInit   
3EA2   CD B4 52               CALL   execStr   
3EA5   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/f{%a}{%b} ?}^ +",0   
3EC2   E1                     POP   HL   
3EC3   E5                     PUSH   HL   
3EC4   11 15 00               LD   DE,21   
3EC7   B7                     OR   A   
3EC8   ED 52                  SBC   HL,DE   
3ECA   7D                     LD   A,L   
3ECB   B4                     OR   H   
3ECC   CA 38 3F               JP   Z,expectM_3141S148   
3ECF   CD F9 0F               CALL   printStr   
3ED2   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/f{%a}{%b} ?}^ +"   
3EF5   CD F9 0F               CALL   printStr   
3EF8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F07   21 15 00               LD   hl,21   
3F0A   E5                     PUSH   hl   
3F0B   E5                     PUSH   hl   
3F0C   CD F6 10               CALL   run   
3F0F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3F16   CD F9 0F               CALL   printStr   
3F19   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F26   E1                     POP   hl   
3F27   E5                     PUSH   hl   
3F28   E5                     PUSH   hl   
3F29   CD F6 10               CALL   run   
3F2C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3F37   76                     HALT      
3F38                EXPECTM_3141S148:      
3F38   E1                     POP   HL   
3F39                          ;*Macro unroll:  test "[10 20 30] 1;", 20
3F39   31 00 54               LD   SP,STACK   
3F3C   CD 2D 10               CALL   coldInit   
3F3F   CD B4 52               CALL   execStr   
3F42   5B 31 30 20 32 30 20 33 30 5D 20 31 3B 00 DB   "[10 20 30] 1;",0   
3F50   E1                     POP   HL   
3F51   E5                     PUSH   HL   
3F52   11 14 00               LD   DE,20   
3F55   B7                     OR   A   
3F56   ED 52                  SBC   HL,DE   
3F58   7D                     LD   A,L   
3F59   B4                     OR   H   
3F5A   CA B7 3F               JP   Z,expectM_3142S149   
3F5D   CD F9 0F               CALL   printStr   
3F60   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 3B 00 .CSTR   "Code: ","[10 20 30] 1;"   
3F74   CD F9 0F               CALL   printStr   
3F77   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F86   21 14 00               LD   hl,20   
3F89   E5                     PUSH   hl   
3F8A   E5                     PUSH   hl   
3F8B   CD F6 10               CALL   run   
3F8E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3F95   CD F9 0F               CALL   printStr   
3F98   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FA5   E1                     POP   hl   
3FA6   E5                     PUSH   hl   
3FA7   E5                     PUSH   hl   
3FA8   CD F6 10               CALL   run   
3FAB   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3FB6   76                     HALT      
3FB7                EXPECTM_3142S149:      
3FB7   E1                     POP   HL   
3FB8                          ;*Macro unroll:  test "[10 20 30 40] /al", 4
3FB8   31 00 54               LD   SP,STACK   
3FBB   CD 2D 10               CALL   coldInit   
3FBE   CD B4 52               CALL   execStr   
3FC1   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 00 DB   "[10 20 30 40] /al",0   
3FD3   E1                     POP   HL   
3FD4   E5                     PUSH   HL   
3FD5   11 04 00               LD   DE,4   
3FD8   B7                     OR   A   
3FD9   ED 52                  SBC   HL,DE   
3FDB   7D                     LD   A,L   
3FDC   B4                     OR   H   
3FDD   CA 3E 40               JP   Z,expectM_3143S150   
3FE0   CD F9 0F               CALL   printStr   
3FE3   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 00 .CSTR   "Code: ","[10 20 30 40] /al"   
3FFB   CD F9 0F               CALL   printStr   
3FFE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
400D   21 04 00               LD   hl,4   
4010   E5                     PUSH   hl   
4011   E5                     PUSH   hl   
4012   CD F6 10               CALL   run   
4015   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
401C   CD F9 0F               CALL   printStr   
401F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
402C   E1                     POP   hl   
402D   E5                     PUSH   hl   
402E   E5                     PUSH   hl   
402F   CD F6 10               CALL   run   
4032   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
403D   76                     HALT      
403E                EXPECTM_3143S150:      
403E   E1                     POP   HL   
403F                          ;*Macro unroll:  test "/bm [1 2 3] 1;", 2
403F   31 00 54               LD   SP,STACK   
4042   CD 2D 10               CALL   coldInit   
4045   CD B4 52               CALL   execStr   
4048   2F 62 6D 20 5B 31 20 32 20 33 5D 20 31 3B 00 DB   "/bm [1 2 3] 1;",0   
4057   E1                     POP   HL   
4058   E5                     PUSH   HL   
4059   11 02 00               LD   DE,2   
405C   B7                     OR   A   
405D   ED 52                  SBC   HL,DE   
405F   7D                     LD   A,L   
4060   B4                     OR   H   
4061   CA BF 40               JP   Z,expectM_3144S151   
4064   CD F9 0F               CALL   printStr   
4067   43 6F 64 65 3A 20 2F 62 6D 20 5B 31 20 32 20 33 5D 20 31 3B 00 .CSTR   "Code: ","/bm [1 2 3] 1;"   
407C   CD F9 0F               CALL   printStr   
407F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
408E   21 02 00               LD   hl,2   
4091   E5                     PUSH   hl   
4092   E5                     PUSH   hl   
4093   CD F6 10               CALL   run   
4096   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
409D   CD F9 0F               CALL   printStr   
40A0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40AD   E1                     POP   hl   
40AE   E5                     PUSH   hl   
40AF   E5                     PUSH   hl   
40B0   CD F6 10               CALL   run   
40B3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
40BE   76                     HALT      
40BF                EXPECTM_3144S151:      
40BF   E1                     POP   HL   
40C0                          ;*Macro unroll:  test "/bm [_A _B _C] 1;", 66
40C0   31 00 54               LD   SP,STACK   
40C3   CD 2D 10               CALL   coldInit   
40C6   CD B4 52               CALL   execStr   
40C9   2F 62 6D 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 3B 00 DB   "/bm [_A _B _C] 1;",0   
40DB   E1                     POP   HL   
40DC   E5                     PUSH   HL   
40DD   11 42 00               LD   DE,66   
40E0   B7                     OR   A   
40E1   ED 52                  SBC   HL,DE   
40E3   7D                     LD   A,L   
40E4   B4                     OR   H   
40E5   CA 46 41               JP   Z,expectM_3145S152   
40E8   CD F9 0F               CALL   printStr   
40EB   43 6F 64 65 3A 20 2F 62 6D 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 3B 00 .CSTR   "Code: ","/bm [_A _B _C] 1;"   
4103   CD F9 0F               CALL   printStr   
4106   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4115   21 42 00               LD   hl,66   
4118   E5                     PUSH   hl   
4119   E5                     PUSH   hl   
411A   CD F6 10               CALL   run   
411D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4124   CD F9 0F               CALL   printStr   
4127   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4134   E1                     POP   hl   
4135   E5                     PUSH   hl   
4136   E5                     PUSH   hl   
4137   CD F6 10               CALL   run   
413A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4145   76                     HALT      
4146                EXPECTM_3145S152:      
4146   E1                     POP   HL   
4147                          ;*Macro unroll:  test "[{10}{20}{30}] 0;^ ", 10
4147   31 00 54               LD   SP,STACK   
414A   CD 2D 10               CALL   coldInit   
414D   CD B4 52               CALL   execStr   
4150   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 3B 5E 20 00 DB   "[{10}{20}{30}] 0;^ ",0   
4164   E1                     POP   HL   
4165   E5                     PUSH   HL   
4166   11 0A 00               LD   DE,10   
4169   B7                     OR   A   
416A   ED 52                  SBC   HL,DE   
416C   7D                     LD   A,L   
416D   B4                     OR   H   
416E   CA D1 41               JP   Z,expectM_3146S153   
4171   CD F9 0F               CALL   printStr   
4174   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 3B 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0;^ "   
418E   CD F9 0F               CALL   printStr   
4191   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41A0   21 0A 00               LD   hl,10   
41A3   E5                     PUSH   hl   
41A4   E5                     PUSH   hl   
41A5   CD F6 10               CALL   run   
41A8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
41AF   CD F9 0F               CALL   printStr   
41B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41BF   E1                     POP   hl   
41C0   E5                     PUSH   hl   
41C1   E5                     PUSH   hl   
41C2   CD F6 10               CALL   run   
41C5   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
41D0   76                     HALT      
41D1                EXPECTM_3146S153:      
41D1   E1                     POP   HL   
41D2                          ;*Macro unroll:  test "10 20 \\ab{[{%a}{%b}] 0;^}^", 10
41D2   31 00 54               LD   SP,STACK   
41D5   CD 2D 10               CALL   coldInit   
41D8   CD B4 52               CALL   execStr   
41DB   31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 3B 5E 7D 5E 00 DB   "10 20 \\ab{[{%a}{%b}] 0;^}^",0   
41F6   E1                     POP   HL   
41F7   E5                     PUSH   HL   
41F8   11 0A 00               LD   DE,10   
41FB   B7                     OR   A   
41FC   ED 52                  SBC   HL,DE   
41FE   7D                     LD   A,L   
41FF   B4                     OR   H   
4200   CA 6A 42               JP   Z,expectM_3147S154   
4203   CD F9 0F               CALL   printStr   
4206   43 6F 64 65 3A 20 31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 3B 5E 7D 5E 00 .CSTR   "Code: ","10 20 \\ab{[{%a}{%b}] 0;^}^"   
4227   CD F9 0F               CALL   printStr   
422A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4239   21 0A 00               LD   hl,10   
423C   E5                     PUSH   hl   
423D   E5                     PUSH   hl   
423E   CD F6 10               CALL   run   
4241   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4248   CD F9 0F               CALL   printStr   
424B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4258   E1                     POP   hl   
4259   E5                     PUSH   hl   
425A   E5                     PUSH   hl   
425B   CD F6 10               CALL   run   
425E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4269   76                     HALT      
426A                EXPECTM_3147S154:      
426A   E1                     POP   HL   
426B                          ;*Macro unroll:  test "0 10 20 \\iab{[{%a}{%b}] %i;^}^", 10
426B   31 00 54               LD   SP,STACK   
426E   CD 2D 10               CALL   coldInit   
4271   CD B4 52               CALL   execStr   
4274   30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 DB   "0 10 20 \\iab{[{%a}{%b}] %i;^}^",0   
4293   E1                     POP   HL   
4294   E5                     PUSH   HL   
4295   11 0A 00               LD   DE,10   
4298   B7                     OR   A   
4299   ED 52                  SBC   HL,DE   
429B   7D                     LD   A,L   
429C   B4                     OR   H   
429D   CA 0B 43               JP   Z,expectM_3148S155   
42A0   CD F9 0F               CALL   printStr   
42A3   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 \\iab{[{%a}{%b}] %i;^}^"   
42C8   CD F9 0F               CALL   printStr   
42CB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42DA   21 0A 00               LD   hl,10   
42DD   E5                     PUSH   hl   
42DE   E5                     PUSH   hl   
42DF   CD F6 10               CALL   run   
42E2   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
42E9   CD F9 0F               CALL   printStr   
42EC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42F9   E1                     POP   hl   
42FA   E5                     PUSH   hl   
42FB   E5                     PUSH   hl   
42FC   CD F6 10               CALL   run   
42FF   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
430A   76                     HALT      
430B                EXPECTM_3148S155:      
430B   E1                     POP   HL   
430C                          ;*Macro unroll:  test "1 10 20 \\iab{[{%a}{%b}] %i;^}^", 20
430C   31 00 54               LD   SP,STACK   
430F   CD 2D 10               CALL   coldInit   
4312   CD B4 52               CALL   execStr   
4315   31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 DB   "1 10 20 \\iab{[{%a}{%b}] %i;^}^",0   
4334   E1                     POP   HL   
4335   E5                     PUSH   HL   
4336   11 14 00               LD   DE,20   
4339   B7                     OR   A   
433A   ED 52                  SBC   HL,DE   
433C   7D                     LD   A,L   
433D   B4                     OR   H   
433E   CA AC 43               JP   Z,expectM_3149S156   
4341   CD F9 0F               CALL   printStr   
4344   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 \\iab{[{%a}{%b}] %i;^}^"   
4369   CD F9 0F               CALL   printStr   
436C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
437B   21 14 00               LD   hl,20   
437E   E5                     PUSH   hl   
437F   E5                     PUSH   hl   
4380   CD F6 10               CALL   run   
4383   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
438A   CD F9 0F               CALL   printStr   
438D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
439A   E1                     POP   hl   
439B   E5                     PUSH   hl   
439C   E5                     PUSH   hl   
439D   CD F6 10               CALL   run   
43A0   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
43AB   76                     HALT      
43AC                EXPECTM_3149S156:      
43AC   E1                     POP   HL   
43AD                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
43AD   31 00 54               LD   SP,STACK   
43B0   CD 2D 10               CALL   coldInit   
43B3   CD B4 52               CALL   execStr   
43B6   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
43CE   E1                     POP   HL   
43CF   E5                     PUSH   HL   
43D0   11 06 00               LD   DE,6   
43D3   B7                     OR   A   
43D4   ED 52                  SBC   HL,DE   
43D6   7D                     LD   A,L   
43D7   B4                     OR   H   
43D8   CA 3F 44               JP   Z,expectM_3150S157   
43DB   CD F9 0F               CALL   printStr   
43DE   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
43FC   CD F9 0F               CALL   printStr   
43FF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
440E   21 06 00               LD   hl,6   
4411   E5                     PUSH   hl   
4412   E5                     PUSH   hl   
4413   CD F6 10               CALL   run   
4416   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
441D   CD F9 0F               CALL   printStr   
4420   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
442D   E1                     POP   hl   
442E   E5                     PUSH   hl   
442F   E5                     PUSH   hl   
4430   CD F6 10               CALL   run   
4433   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
443E   76                     HALT      
443F                EXPECTM_3150S157:      
443F   E1                     POP   HL   
4440                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1;", 2
4440   31 00 54               LD   SP,STACK   
4443   CD 2D 10               CALL   coldInit   
4446   CD B4 52               CALL   execStr   
4449   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 3B 00 DB   "3i= [ ( i i-- i/br )^ ] 1;",0   
4464   E1                     POP   HL   
4465   E5                     PUSH   HL   
4466   11 02 00               LD   DE,2   
4469   B7                     OR   A   
446A   ED 52                  SBC   HL,DE   
446C   7D                     LD   A,L   
446D   B4                     OR   H   
446E   CA D8 44               JP   Z,expectM_3151S158   
4471   CD F9 0F               CALL   printStr   
4474   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 3B 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1;"   
4495   CD F9 0F               CALL   printStr   
4498   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44A7   21 02 00               LD   hl,2   
44AA   E5                     PUSH   hl   
44AB   E5                     PUSH   hl   
44AC   CD F6 10               CALL   run   
44AF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
44B6   CD F9 0F               CALL   printStr   
44B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44C6   E1                     POP   hl   
44C7   E5                     PUSH   hl   
44C8   E5                     PUSH   hl   
44C9   CD F6 10               CALL   run   
44CC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
44D7   76                     HALT      
44D8                EXPECTM_3151S158:      
44D8   E1                     POP   HL   
44D9                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
44D9   31 00 54               LD   SP,STACK   
44DC   CD 2D 10               CALL   coldInit   
44DF   CD B4 52               CALL   execStr   
44E2   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
4508   E1                     POP   HL   
4509   E5                     PUSH   HL   
450A   11 0A 00               LD   DE,10   
450D   B7                     OR   A   
450E   ED 52                  SBC   HL,DE   
4510   7D                     LD   A,L   
4511   B4                     OR   H   
4512   CA 87 45               JP   Z,expectM_3152S159   
4515   CD F9 0F               CALL   printStr   
4518   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
4544   CD F9 0F               CALL   printStr   
4547   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4556   21 0A 00               LD   hl,10   
4559   E5                     PUSH   hl   
455A   E5                     PUSH   hl   
455B   CD F6 10               CALL   run   
455E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4565   CD F9 0F               CALL   printStr   
4568   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4575   E1                     POP   hl   
4576   E5                     PUSH   hl   
4577   E5                     PUSH   hl   
4578   CD F6 10               CALL   run   
457B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4586   76                     HALT      
4587                EXPECTM_3152S159:      
4587   E1                     POP   HL   
4588                          ;*Macro unroll:  test "0j= 0i= ( i j+= i++ i 5< /br )^ j ", 10
4588   31 00 54               LD   SP,STACK   
458B   CD 2D 10               CALL   coldInit   
458E   CD B4 52               CALL   execStr   
4591   30 6A 3D 20 30 69 3D 20 28 20 69 20 6A 2B 3D 20 69 2B 2B 20 69 20 35 3C 20 2F 62 72 20 29 5E 20 6A 20 00 DB   "0j= 0i= ( i j+= i++ i 5< /br )^ j ",0   
45B4   E1                     POP   HL   
45B5   E5                     PUSH   HL   
45B6   11 0A 00               LD   DE,10   
45B9   B7                     OR   A   
45BA   ED 52                  SBC   HL,DE   
45BC   7D                     LD   A,L   
45BD   B4                     OR   H   
45BE   CA 30 46               JP   Z,expectM_3153S160   
45C1   CD F9 0F               CALL   printStr   
45C4   43 6F 64 65 3A 20 30 6A 3D 20 30 69 3D 20 28 20 69 20 6A 2B 3D 20 69 2B 2B 20 69 20 35 3C 20 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0j= 0i= ( i j+= i++ i 5< /br )^ j "   
45ED   CD F9 0F               CALL   printStr   
45F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45FF   21 0A 00               LD   hl,10   
4602   E5                     PUSH   hl   
4603   E5                     PUSH   hl   
4604   CD F6 10               CALL   run   
4607   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
460E   CD F9 0F               CALL   printStr   
4611   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
461E   E1                     POP   hl   
461F   E5                     PUSH   hl   
4620   E5                     PUSH   hl   
4621   CD F6 10               CALL   run   
4624   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
462F   76                     HALT      
4630                EXPECTM_3153S160:      
4630   E1                     POP   HL   
4631                          ;*Macro unroll:  test "0t= 3i= (4j= (t++ j-- j/br)^ i-- i/br)^ t", 12
4631   31 00 54               LD   SP,STACK   
4634   CD 2D 10               CALL   coldInit   
4637   CD B4 52               CALL   execStr   
463A   30 74 3D 20 33 69 3D 20 28 34 6A 3D 20 28 74 2B 2B 20 6A 2D 2D 20 6A 2F 62 72 29 5E 20 69 2D 2D 20 69 2F 62 72 29 5E 20 74 00 DB   "0t= 3i= (4j= (t++ j-- j/br)^ i-- i/br)^ t",0   
4664   E1                     POP   HL   
4665   E5                     PUSH   HL   
4666   11 0C 00               LD   DE,12   
4669   B7                     OR   A   
466A   ED 52                  SBC   HL,DE   
466C   7D                     LD   A,L   
466D   B4                     OR   H   
466E   CA E7 46               JP   Z,expectM_3154S161   
4671   CD F9 0F               CALL   printStr   
4674   43 6F 64 65 3A 20 30 74 3D 20 33 69 3D 20 28 34 6A 3D 20 28 74 2B 2B 20 6A 2D 2D 20 6A 2F 62 72 29 5E 20 69 2D 2D 20 69 2F 62 72 29 5E 20 74 00 .CSTR   "Code: ","0t= 3i= (4j= (t++ j-- j/br)^ i-- i/br)^ t"   
46A4   CD F9 0F               CALL   printStr   
46A7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46B6   21 0C 00               LD   hl,12   
46B9   E5                     PUSH   hl   
46BA   E5                     PUSH   hl   
46BB   CD F6 10               CALL   run   
46BE   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
46C5   CD F9 0F               CALL   printStr   
46C8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46D5   E1                     POP   hl   
46D6   E5                     PUSH   hl   
46D7   E5                     PUSH   hl   
46D8   CD F6 10               CALL   run   
46DB   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
46E6   76                     HALT      
46E7                EXPECTM_3154S161:      
46E7   E1                     POP   HL   
46E8                          ;*Macro unroll:  test "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^", 6
46E8   31 00 54               LD   SP,STACK   
46EB   CD 2D 10               CALL   coldInit   
46EE   CD B4 52               CALL   execStr   
46F1   33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^",0   
471C   E1                     POP   HL   
471D   E5                     PUSH   HL   
471E   11 06 00               LD   DE,6   
4721   B7                     OR   A   
4722   ED 52                  SBC   HL,DE   
4724   7D                     LD   A,L   
4725   B4                     OR   H   
4726   CA A0 47               JP   Z,expectM_3155S162   
4729   CD F9 0F               CALL   printStr   
472C   43 6F 64 65 3A 20 33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^"   
475D   CD F9 0F               CALL   printStr   
4760   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
476F   21 06 00               LD   hl,6   
4772   E5                     PUSH   hl   
4773   E5                     PUSH   hl   
4774   CD F6 10               CALL   run   
4777   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
477E   CD F9 0F               CALL   printStr   
4781   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
478E   E1                     POP   hl   
478F   E5                     PUSH   hl   
4790   E5                     PUSH   hl   
4791   CD F6 10               CALL   run   
4794   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
479F   76                     HALT      
47A0                EXPECTM_3155S162:      
47A0   E1                     POP   HL   
47A1                          ;*Macro unroll:  test "/t \\f{1 %f/br 2 +}^",3
47A1   31 00 54               LD   SP,STACK   
47A4   CD 2D 10               CALL   coldInit   
47A7   CD B4 52               CALL   execStr   
47AA   2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/t \\f{1 %f/br 2 +}^",0   
47BE   E1                     POP   HL   
47BF   E5                     PUSH   HL   
47C0   11 03 00               LD   DE,3   
47C3   B7                     OR   A   
47C4   ED 52                  SBC   HL,DE   
47C6   7D                     LD   A,L   
47C7   B4                     OR   H   
47C8   CA 2B 48               JP   Z,expectM_3156S163   
47CB   CD F9 0F               CALL   printStr   
47CE   43 6F 64 65 3A 20 2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/t \\f{1 %f/br 2 +}^"   
47E8   CD F9 0F               CALL   printStr   
47EB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47FA   21 03 00               LD   hl,3   
47FD   E5                     PUSH   hl   
47FE   E5                     PUSH   hl   
47FF   CD F6 10               CALL   run   
4802   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4809   CD F9 0F               CALL   printStr   
480C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4819   E1                     POP   hl   
481A   E5                     PUSH   hl   
481B   E5                     PUSH   hl   
481C   CD F6 10               CALL   run   
481F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
482A   76                     HALT      
482B                EXPECTM_3156S163:      
482B   E1                     POP   HL   
482C                          ;*Macro unroll:  test "/f \\f{1 %f/br 2 +}^",1
482C   31 00 54               LD   SP,STACK   
482F   CD 2D 10               CALL   coldInit   
4832   CD B4 52               CALL   execStr   
4835   2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/f \\f{1 %f/br 2 +}^",0   
4849   E1                     POP   HL   
484A   E5                     PUSH   HL   
484B   11 01 00               LD   DE,1   
484E   B7                     OR   A   
484F   ED 52                  SBC   HL,DE   
4851   7D                     LD   A,L   
4852   B4                     OR   H   
4853   CA B6 48               JP   Z,expectM_3157S164   
4856   CD F9 0F               CALL   printStr   
4859   43 6F 64 65 3A 20 2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/f \\f{1 %f/br 2 +}^"   
4873   CD F9 0F               CALL   printStr   
4876   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4885   21 01 00               LD   hl,1   
4888   E5                     PUSH   hl   
4889   E5                     PUSH   hl   
488A   CD F6 10               CALL   run   
488D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4894   CD F9 0F               CALL   printStr   
4897   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48A4   E1                     POP   hl   
48A5   E5                     PUSH   hl   
48A6   E5                     PUSH   hl   
48A7   CD F6 10               CALL   run   
48AA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
48B5   76                     HALT      
48B6                EXPECTM_3157S164:      
48B6   E1                     POP   HL   
48B7                          ;*Macro unroll:  test "_A 1 - /ad", NUL
48B7   31 00 54               LD   SP,STACK   
48BA   CD 2D 10               CALL   coldInit   
48BD   CD B4 52               CALL   execStr   
48C0   5F 41 20 31 20 2D 20 2F 61 64 00 DB   "_A 1 - /ad",0   
48CB   E1                     POP   HL   
48CC   E5                     PUSH   HL   
48CD   11 00 00               LD   DE,NUL   
48D0   B7                     OR   A   
48D1   ED 52                  SBC   HL,DE   
48D3   7D                     LD   A,L   
48D4   B4                     OR   H   
48D5   CA 2F 49               JP   Z,expectM_3158S165   
48D8   CD F9 0F               CALL   printStr   
48DB   43 6F 64 65 3A 20 5F 41 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","_A 1 - /ad"   
48EC   CD F9 0F               CALL   printStr   
48EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48FE   21 00 00               LD   hl,NUL   
4901   E5                     PUSH   hl   
4902   E5                     PUSH   hl   
4903   CD F6 10               CALL   run   
4906   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
490D   CD F9 0F               CALL   printStr   
4910   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
491D   E1                     POP   hl   
491E   E5                     PUSH   hl   
491F   E5                     PUSH   hl   
4920   CD F6 10               CALL   run   
4923   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
492E   76                     HALT      
492F                EXPECTM_3158S165:      
492F   E1                     POP   HL   
4930                          ;*Macro unroll:  test "_Z 1 + /ad", NUL
4930   31 00 54               LD   SP,STACK   
4933   CD 2D 10               CALL   coldInit   
4936   CD B4 52               CALL   execStr   
4939   5F 5A 20 31 20 2B 20 2F 61 64 00 DB   "_Z 1 + /ad",0   
4944   E1                     POP   HL   
4945   E5                     PUSH   HL   
4946   11 00 00               LD   DE,NUL   
4949   B7                     OR   A   
494A   ED 52                  SBC   HL,DE   
494C   7D                     LD   A,L   
494D   B4                     OR   H   
494E   CA A8 49               JP   Z,expectM_3159S166   
4951   CD F9 0F               CALL   printStr   
4954   43 6F 64 65 3A 20 5F 5A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","_Z 1 + /ad"   
4965   CD F9 0F               CALL   printStr   
4968   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4977   21 00 00               LD   hl,NUL   
497A   E5                     PUSH   hl   
497B   E5                     PUSH   hl   
497C   CD F6 10               CALL   run   
497F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4986   CD F9 0F               CALL   printStr   
4989   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4996   E1                     POP   hl   
4997   E5                     PUSH   hl   
4998   E5                     PUSH   hl   
4999   CD F6 10               CALL   run   
499C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
49A7   76                     HALT      
49A8                EXPECTM_3159S166:      
49A8   E1                     POP   HL   
49A9                          ;*Macro unroll:  test "_a 1 - /ad", NUL
49A9   31 00 54               LD   SP,STACK   
49AC   CD 2D 10               CALL   coldInit   
49AF   CD B4 52               CALL   execStr   
49B2   5F 61 20 31 20 2D 20 2F 61 64 00 DB   "_a 1 - /ad",0   
49BD   E1                     POP   HL   
49BE   E5                     PUSH   HL   
49BF   11 00 00               LD   DE,NUL   
49C2   B7                     OR   A   
49C3   ED 52                  SBC   HL,DE   
49C5   7D                     LD   A,L   
49C6   B4                     OR   H   
49C7   CA 21 4A               JP   Z,expectM_3160S167   
49CA   CD F9 0F               CALL   printStr   
49CD   43 6F 64 65 3A 20 5F 61 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","_a 1 - /ad"   
49DE   CD F9 0F               CALL   printStr   
49E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49F0   21 00 00               LD   hl,NUL   
49F3   E5                     PUSH   hl   
49F4   E5                     PUSH   hl   
49F5   CD F6 10               CALL   run   
49F8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
49FF   CD F9 0F               CALL   printStr   
4A02   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A0F   E1                     POP   hl   
4A10   E5                     PUSH   hl   
4A11   E5                     PUSH   hl   
4A12   CD F6 10               CALL   run   
4A15   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4A20   76                     HALT      
4A21                EXPECTM_3160S167:      
4A21   E1                     POP   HL   
4A22                          ;*Macro unroll:  test "_z 1 + /ad", NUL
4A22   31 00 54               LD   SP,STACK   
4A25   CD 2D 10               CALL   coldInit   
4A28   CD B4 52               CALL   execStr   
4A2B   5F 7A 20 31 20 2B 20 2F 61 64 00 DB   "_z 1 + /ad",0   
4A36   E1                     POP   HL   
4A37   E5                     PUSH   HL   
4A38   11 00 00               LD   DE,NUL   
4A3B   B7                     OR   A   
4A3C   ED 52                  SBC   HL,DE   
4A3E   7D                     LD   A,L   
4A3F   B4                     OR   H   
4A40   CA 9A 4A               JP   Z,expectM_3161S168   
4A43   CD F9 0F               CALL   printStr   
4A46   43 6F 64 65 3A 20 5F 7A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","_z 1 + /ad"   
4A57   CD F9 0F               CALL   printStr   
4A5A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A69   21 00 00               LD   hl,NUL   
4A6C   E5                     PUSH   hl   
4A6D   E5                     PUSH   hl   
4A6E   CD F6 10               CALL   run   
4A71   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4A78   CD F9 0F               CALL   printStr   
4A7B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A88   E1                     POP   hl   
4A89   E5                     PUSH   hl   
4A8A   E5                     PUSH   hl   
4A8B   CD F6 10               CALL   run   
4A8E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4A99   76                     HALT      
4A9A                EXPECTM_3161S168:      
4A9A   E1                     POP   HL   
4A9B                          ;*Macro unroll:  test "_z /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
4A9B   31 00 54               LD   SP,STACK   
4A9E   CD 2D 10               CALL   coldInit   
4AA1   CD B4 52               CALL   execStr   
4AA4   5F 7A 20 2F 61 64 00   DB   "_z /ad",0   
4AAB   E1                     POP   HL   
4AAC   E5                     PUSH   HL   
4AAD   11 66 56               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4AB0   B7                     OR   A   
4AB1   ED 52                  SBC   HL,DE   
4AB3   7D                     LD   A,L   
4AB4   B4                     OR   H   
4AB5   CA 0B 4B               JP   Z,expectM_3162S169   
4AB8   CD F9 0F               CALL   printStr   
4ABB   43 6F 64 65 3A 20 5F 7A 20 2F 61 64 00 .CSTR   "Code: ","_z /ad"   
4AC8   CD F9 0F               CALL   printStr   
4ACB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4ADA   21 66 56               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4ADD   E5                     PUSH   hl   
4ADE   E5                     PUSH   hl   
4ADF   CD F6 10               CALL   run   
4AE2   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4AE9   CD F9 0F               CALL   printStr   
4AEC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4AF9   E1                     POP   hl   
4AFA   E5                     PUSH   hl   
4AFB   E5                     PUSH   hl   
4AFC   CD F6 10               CALL   run   
4AFF   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4B0A   76                     HALT      
4B0B                EXPECTM_3162S169:      
4B0B   E1                     POP   HL   
4B0C                          ;*Macro unroll:  test "_a /ad", VARS + ("Z"-"A"+1)*2
4B0C   31 00 54               LD   SP,STACK   
4B0F   CD 2D 10               CALL   coldInit   
4B12   CD B4 52               CALL   execStr   
4B15   5F 61 20 2F 61 64 00   DB   "_a /ad",0   
4B1C   E1                     POP   HL   
4B1D   E5                     PUSH   HL   
4B1E   11 34 56               LD   DE,VARS + ("Z"-"A"+1)*2   
4B21   B7                     OR   A   
4B22   ED 52                  SBC   HL,DE   
4B24   7D                     LD   A,L   
4B25   B4                     OR   H   
4B26   CA 7C 4B               JP   Z,expectM_3163S170   
4B29   CD F9 0F               CALL   printStr   
4B2C   43 6F 64 65 3A 20 5F 61 20 2F 61 64 00 .CSTR   "Code: ","_a /ad"   
4B39   CD F9 0F               CALL   printStr   
4B3C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B4B   21 34 56               LD   hl,VARS + ("Z"-"A"+1)*2   
4B4E   E5                     PUSH   hl   
4B4F   E5                     PUSH   hl   
4B50   CD F6 10               CALL   run   
4B53   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4B5A   CD F9 0F               CALL   printStr   
4B5D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B6A   E1                     POP   hl   
4B6B   E5                     PUSH   hl   
4B6C   E5                     PUSH   hl   
4B6D   CD F6 10               CALL   run   
4B70   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4B7B   76                     HALT      
4B7C                EXPECTM_3163S170:      
4B7C   E1                     POP   HL   
4B7D                          ;*Macro unroll:  test "_Z /ad", VARS + ("Z"-"A")*2
4B7D   31 00 54               LD   SP,STACK   
4B80   CD 2D 10               CALL   coldInit   
4B83   CD B4 52               CALL   execStr   
4B86   5F 5A 20 2F 61 64 00   DB   "_Z /ad",0   
4B8D   E1                     POP   HL   
4B8E   E5                     PUSH   HL   
4B8F   11 32 56               LD   DE,VARS + ("Z"-"A")*2   
4B92   B7                     OR   A   
4B93   ED 52                  SBC   HL,DE   
4B95   7D                     LD   A,L   
4B96   B4                     OR   H   
4B97   CA ED 4B               JP   Z,expectM_3164S171   
4B9A   CD F9 0F               CALL   printStr   
4B9D   43 6F 64 65 3A 20 5F 5A 20 2F 61 64 00 .CSTR   "Code: ","_Z /ad"   
4BAA   CD F9 0F               CALL   printStr   
4BAD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BBC   21 32 56               LD   hl,VARS + ("Z"-"A")*2   
4BBF   E5                     PUSH   hl   
4BC0   E5                     PUSH   hl   
4BC1   CD F6 10               CALL   run   
4BC4   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4BCB   CD F9 0F               CALL   printStr   
4BCE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BDB   E1                     POP   hl   
4BDC   E5                     PUSH   hl   
4BDD   E5                     PUSH   hl   
4BDE   CD F6 10               CALL   run   
4BE1   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4BEC   76                     HALT      
4BED                EXPECTM_3164S171:      
4BED   E1                     POP   HL   
4BEE                          ;*Macro unroll:  test "_A /ad", VARS
4BEE   31 00 54               LD   SP,STACK   
4BF1   CD 2D 10               CALL   coldInit   
4BF4   CD B4 52               CALL   execStr   
4BF7   5F 41 20 2F 61 64 00   DB   "_A /ad",0   
4BFE   E1                     POP   HL   
4BFF   E5                     PUSH   HL   
4C00   11 00 56               LD   DE,VARS   
4C03   B7                     OR   A   
4C04   ED 52                  SBC   HL,DE   
4C06   7D                     LD   A,L   
4C07   B4                     OR   H   
4C08   CA 5E 4C               JP   Z,expectM_3165S172   
4C0B   CD F9 0F               CALL   printStr   
4C0E   43 6F 64 65 3A 20 5F 41 20 2F 61 64 00 .CSTR   "Code: ","_A /ad"   
4C1B   CD F9 0F               CALL   printStr   
4C1E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C2D   21 00 56               LD   hl,VARS   
4C30   E5                     PUSH   hl   
4C31   E5                     PUSH   hl   
4C32   CD F6 10               CALL   run   
4C35   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4C3C   CD F9 0F               CALL   printStr   
4C3F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C4C   E1                     POP   hl   
4C4D   E5                     PUSH   hl   
4C4E   E5                     PUSH   hl   
4C4F   CD F6 10               CALL   run   
4C52   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4C5D   76                     HALT      
4C5E                EXPECTM_3165S172:      
4C5E   E1                     POP   HL   
4C5F                          ;*Macro unroll:  test "\\a{%a} F=1F^", 1
4C5F   31 00 54               LD   SP,STACK   
4C62   CD 2D 10               CALL   coldInit   
4C65   CD B4 52               CALL   execStr   
4C68   5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   "\\a{%a} F=1F^",0   
4C75   E1                     POP   HL   
4C76   E5                     PUSH   HL   
4C77   11 01 00               LD   DE,1   
4C7A   B7                     OR   A   
4C7B   ED 52                  SBC   HL,DE   
4C7D   7D                     LD   A,L   
4C7E   B4                     OR   H   
4C7F   CA DB 4C               JP   Z,expectM_3166S173   
4C82   CD F9 0F               CALL   printStr   
4C85   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ","\\a{%a} F=1F^"   
4C98   CD F9 0F               CALL   printStr   
4C9B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CAA   21 01 00               LD   hl,1   
4CAD   E5                     PUSH   hl   
4CAE   E5                     PUSH   hl   
4CAF   CD F6 10               CALL   run   
4CB2   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4CB9   CD F9 0F               CALL   printStr   
4CBC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4CC9   E1                     POP   hl   
4CCA   E5                     PUSH   hl   
4CCB   E5                     PUSH   hl   
4CCC   CD F6 10               CALL   run   
4CCF   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4CDA   76                     HALT      
4CDB                EXPECTM_3166S173:      
4CDB   E1                     POP   HL   
4CDC                          ;*Macro unroll:  test "1 \\b{\\a{%a}}^F= 3F^",3
4CDC   31 00 54               LD   SP,STACK   
4CDF   CD 2D 10               CALL   coldInit   
4CE2   CD B4 52               CALL   execStr   
4CE5   31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a}}^F= 3F^",0   
4CF9   E1                     POP   HL   
4CFA   E5                     PUSH   HL   
4CFB   11 03 00               LD   DE,3   
4CFE   B7                     OR   A   
4CFF   ED 52                  SBC   HL,DE   
4D01   7D                     LD   A,L   
4D02   B4                     OR   H   
4D03   CA 66 4D               JP   Z,expectM_3167S174   
4D06   CD F9 0F               CALL   printStr   
4D09   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a}}^F= 3F^"   
4D23   CD F9 0F               CALL   printStr   
4D26   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D35   21 03 00               LD   hl,3   
4D38   E5                     PUSH   hl   
4D39   E5                     PUSH   hl   
4D3A   CD F6 10               CALL   run   
4D3D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4D44   CD F9 0F               CALL   printStr   
4D47   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D54   E1                     POP   hl   
4D55   E5                     PUSH   hl   
4D56   E5                     PUSH   hl   
4D57   CD F6 10               CALL   run   
4D5A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4D65   76                     HALT      
4D66                EXPECTM_3167S174:      
4D66   E1                     POP   HL   
4D67                          ;*Macro unroll:  test "1 \\b{\\a{%a%b-}}^F= 3F^",2
4D67   31 00 54               LD   SP,STACK   
4D6A   CD 2D 10               CALL   coldInit   
4D6D   CD B4 52               CALL   execStr   
4D70   31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a%b-}}^F= 3F^",0   
4D87   E1                     POP   HL   
4D88   E5                     PUSH   HL   
4D89   11 02 00               LD   DE,2   
4D8C   B7                     OR   A   
4D8D   ED 52                  SBC   HL,DE   
4D8F   7D                     LD   A,L   
4D90   B4                     OR   H   
4D91   CA F7 4D               JP   Z,expectM_3168S175   
4D94   CD F9 0F               CALL   printStr   
4D97   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a%b-}}^F= 3F^"   
4DB4   CD F9 0F               CALL   printStr   
4DB7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4DC6   21 02 00               LD   hl,2   
4DC9   E5                     PUSH   hl   
4DCA   E5                     PUSH   hl   
4DCB   CD F6 10               CALL   run   
4DCE   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4DD5   CD F9 0F               CALL   printStr   
4DD8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DE5   E1                     POP   hl   
4DE6   E5                     PUSH   hl   
4DE7   E5                     PUSH   hl   
4DE8   CD F6 10               CALL   run   
4DEB   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4DF6   76                     HALT      
4DF7                EXPECTM_3168S175:      
4DF7   E1                     POP   HL   
4DF8                          ;*Macro unroll:  test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
4DF8   31 00 54               LD   SP,STACK   
4DFB   CD 2D 10               CALL   coldInit   
4DFE   CD B4 52               CALL   execStr   
4E01   31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
4E24   E1                     POP   HL   
4E25   E5                     PUSH   HL   
4E26   11 01 00               LD   DE,1   
4E29   B7                     OR   A   
4E2A   ED 52                  SBC   HL,DE   
4E2C   7D                     LD   A,L   
4E2D   B4                     OR   H   
4E2E   CA A0 4E               JP   Z,expectM_3169S176   
4E31   CD F9 0F               CALL   printStr   
4E34   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^"   
4E5D   CD F9 0F               CALL   printStr   
4E60   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E6F   21 01 00               LD   hl,1   
4E72   E5                     PUSH   hl   
4E73   E5                     PUSH   hl   
4E74   CD F6 10               CALL   run   
4E77   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4E7E   CD F9 0F               CALL   printStr   
4E81   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E8E   E1                     POP   hl   
4E8F   E5                     PUSH   hl   
4E90   E5                     PUSH   hl   
4E91   CD F6 10               CALL   run   
4E94   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4E9F   76                     HALT      
4EA0                EXPECTM_3169S176:      
4EA0   E1                     POP   HL   
4EA1                          ;*Macro unroll:  test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
4EA1   31 00 54               LD   SP,STACK   
4EA4   CD 2D 10               CALL   coldInit   
4EA7   CD B4 52               CALL   execStr   
4EAA   31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",0   
4ECD   E1                     POP   HL   
4ECE   E5                     PUSH   HL   
4ECF   11 01 00               LD   DE,1   
4ED2   B7                     OR   A   
4ED3   ED 52                  SBC   HL,DE   
4ED5   7D                     LD   A,L   
4ED6   B4                     OR   H   
4ED7   CA 49 4F               JP   Z,expectM_3170S177   
4EDA   CD F9 0F               CALL   printStr   
4EDD   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^"   
4F06   CD F9 0F               CALL   printStr   
4F09   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F18   21 01 00               LD   hl,1   
4F1B   E5                     PUSH   hl   
4F1C   E5                     PUSH   hl   
4F1D   CD F6 10               CALL   run   
4F20   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4F27   CD F9 0F               CALL   printStr   
4F2A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F37   E1                     POP   hl   
4F38   E5                     PUSH   hl   
4F39   E5                     PUSH   hl   
4F3A   CD F6 10               CALL   run   
4F3D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4F48   76                     HALT      
4F49                EXPECTM_3170S177:      
4F49   E1                     POP   HL   
4F4A                          ;*Macro unroll:  test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
4F4A   31 00 54               LD   SP,STACK   
4F4D   CD 2D 10               CALL   coldInit   
4F50   CD B4 52               CALL   execStr   
4F53   31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
4F83   E1                     POP   HL   
4F84   E5                     PUSH   HL   
4F85   11 02 00               LD   DE,2   
4F88   B7                     OR   A   
4F89   ED 52                  SBC   HL,DE   
4F8B   7D                     LD   A,L   
4F8C   B4                     OR   H   
4F8D   CA 0C 50               JP   Z,expectM_3171S178   
4F90   CD F9 0F               CALL   printStr   
4F93   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
4FC9   CD F9 0F               CALL   printStr   
4FCC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4FDB   21 02 00               LD   hl,2   
4FDE   E5                     PUSH   hl   
4FDF   E5                     PUSH   hl   
4FE0   CD F6 10               CALL   run   
4FE3   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4FEA   CD F9 0F               CALL   printStr   
4FED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4FFA   E1                     POP   hl   
4FFB   E5                     PUSH   hl   
4FFC   E5                     PUSH   hl   
4FFD   CD F6 10               CALL   run   
5000   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
500B   76                     HALT      
500C                EXPECTM_3171S178:      
500C   E1                     POP   HL   
500D                          ;*Macro unroll:  test "'hello'/sl",5
500D   31 00 54               LD   SP,STACK   
5010   CD 2D 10               CALL   coldInit   
5013   CD B4 52               CALL   execStr   
5016   27 68 65 6C 6C 6F 27 2F 73 6C 00 DB   "'hello'/sl",0   
5021   E1                     POP   HL   
5022   E5                     PUSH   HL   
5023   11 05 00               LD   DE,5   
5026   B7                     OR   A   
5027   ED 52                  SBC   HL,DE   
5029   7D                     LD   A,L   
502A   B4                     OR   H   
502B   CA 85 50               JP   Z,expectM_3172S179   
502E   CD F9 0F               CALL   printStr   
5031   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 2F 73 6C 00 .CSTR   "Code: ","'hello'/sl"   
5042   CD F9 0F               CALL   printStr   
5045   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5054   21 05 00               LD   hl,5   
5057   E5                     PUSH   hl   
5058   E5                     PUSH   hl   
5059   CD F6 10               CALL   run   
505C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
5063   CD F9 0F               CALL   printStr   
5066   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5073   E1                     POP   hl   
5074   E5                     PUSH   hl   
5075   E5                     PUSH   hl   
5076   CD F6 10               CALL   run   
5079   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
5084   76                     HALT      
5085                EXPECTM_3172S179:      
5085   E1                     POP   HL   
5086                          ;*Macro unroll:  test "'hello' 'hell' /sc", false
5086   31 00 54               LD   SP,STACK   
5089   CD 2D 10               CALL   coldInit   
508C   CD B4 52               CALL   execStr   
508F   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 00 DB   "'hello' 'hell' /sc",0   
50A2   E1                     POP   HL   
50A3   E5                     PUSH   HL   
50A4   11 00 00               LD   DE,false   
50A7   B7                     OR   A   
50A8   ED 52                  SBC   HL,DE   
50AA   7D                     LD   A,L   
50AB   B4                     OR   H   
50AC   CA 0E 51               JP   Z,expectM_3173S180   
50AF   CD F9 0F               CALL   printStr   
50B2   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 00 .CSTR   "Code: ","'hello' 'hell' /sc"   
50CB   CD F9 0F               CALL   printStr   
50CE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
50DD   21 00 00               LD   hl,false   
50E0   E5                     PUSH   hl   
50E1   E5                     PUSH   hl   
50E2   CD F6 10               CALL   run   
50E5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
50EC   CD F9 0F               CALL   printStr   
50EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
50FC   E1                     POP   hl   
50FD   E5                     PUSH   hl   
50FE   E5                     PUSH   hl   
50FF   CD F6 10               CALL   run   
5102   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
510D   76                     HALT      
510E                EXPECTM_3173S180:      
510E   E1                     POP   HL   
510F                          ;*Macro unroll:  test "'hello' 'hello' /sc", true
510F   31 00 54               LD   SP,STACK   
5112   CD 2D 10               CALL   coldInit   
5115   CD B4 52               CALL   execStr   
5118   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 00 DB   "'hello' 'hello' /sc",0   
512C   E1                     POP   HL   
512D   E5                     PUSH   HL   
512E   11 FF FF               LD   DE,true   
5131   B7                     OR   A   
5132   ED 52                  SBC   HL,DE   
5134   7D                     LD   A,L   
5135   B4                     OR   H   
5136   CA 99 51               JP   Z,expectM_3174S181   
5139   CD F9 0F               CALL   printStr   
513C   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 00 .CSTR   "Code: ","'hello' 'hello' /sc"   
5156   CD F9 0F               CALL   printStr   
5159   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5168   21 FF FF               LD   hl,true   
516B   E5                     PUSH   hl   
516C   E5                     PUSH   hl   
516D   CD F6 10               CALL   run   
5170   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
5177   CD F9 0F               CALL   printStr   
517A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5187   E1                     POP   hl   
5188   E5                     PUSH   hl   
5189   E5                     PUSH   hl   
518A   CD F6 10               CALL   run   
518D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
5198   76                     HALT      
5199                EXPECTM_3174S181:      
5199   E1                     POP   HL   
519A                          ;*Macro unroll:  test "[1 2 3]** + +", 6
519A   31 00 54               LD   SP,STACK   
519D   CD 2D 10               CALL   coldInit   
51A0   CD B4 52               CALL   execStr   
51A3   5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 DB   "[1 2 3]** + +",0   
51B1   E1                     POP   HL   
51B2   E5                     PUSH   HL   
51B3   11 06 00               LD   DE,6   
51B6   B7                     OR   A   
51B7   ED 52                  SBC   HL,DE   
51B9   7D                     LD   A,L   
51BA   B4                     OR   H   
51BB   CA 18 52               JP   Z,expectM_3175S182   
51BE   CD F9 0F               CALL   printStr   
51C1   43 6F 64 65 3A 20 5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 .CSTR   "Code: ","[1 2 3]** + +"   
51D5   CD F9 0F               CALL   printStr   
51D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
51E7   21 06 00               LD   hl,6   
51EA   E5                     PUSH   hl   
51EB   E5                     PUSH   hl   
51EC   CD F6 10               CALL   run   
51EF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
51F6   CD F9 0F               CALL   printStr   
51F9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5206   E1                     POP   hl   
5207   E5                     PUSH   hl   
5208   E5                     PUSH   hl   
5209   CD F6 10               CALL   run   
520C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
5217   76                     HALT      
5218                EXPECTM_3175S182:      
5218   E1                     POP   HL   
5219                          ;*Macro unroll:  test "/bm[_a [_b _c]** _d]2;", $63
5219   31 00 54               LD   SP,STACK   
521C   CD 2D 10               CALL   coldInit   
521F   CD B4 52               CALL   execStr   
5222   2F 62 6D 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 3B 00 DB   "/bm[_a [_b _c]** _d]2;",0   
5239   E1                     POP   HL   
523A   E5                     PUSH   HL   
523B   11 63 00               LD   DE,$63   
523E   B7                     OR   A   
523F   ED 52                  SBC   HL,DE   
5241   7D                     LD   A,L   
5242   B4                     OR   H   
5243   CA A9 52               JP   Z,expectM_3176S183   
5246   CD F9 0F               CALL   printStr   
5249   43 6F 64 65 3A 20 2F 62 6D 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 3B 00 .CSTR   "Code: ","/bm[_a [_b _c]** _d]2;"   
5266   CD F9 0F               CALL   printStr   
5269   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5278   21 63 00               LD   hl,$63   
527B   E5                     PUSH   hl   
527C   E5                     PUSH   hl   
527D   CD F6 10               CALL   run   
5280   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
5287   CD F9 0F               CALL   printStr   
528A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5297   E1                     POP   hl   
5298   E5                     PUSH   hl   
5299   E5                     PUSH   hl   
529A   CD F6 10               CALL   run   
529D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
52A8   76                     HALT      
52A9                EXPECTM_3176S183:      
52A9   E1                     POP   HL   
52AA                             ; ; test "$1000 0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", $1000
52AA                             ; 
52AA   CD F9 0F               CALL   printStr   
52AD   44 6F 6E 65 21 00      .CSTR   "Done!"   
52B3   76                     HALT      
52B4                             ; executes a null teminated string (null executes exit_)
52B4                             ; the string should be immedaitely following the call
52B4                EXECSTR:      ; create a root stack frame
52B4   C1                     POP   bc   ; bc = code*
52B5   0B                     DEC   bc   ; dec to prepare for next routine
52B6   11 00 00               LD   de,0   
52B9   D5                     PUSH   de   ; push fake IP
52BA   D5                     PUSH   de   ; push null arg_list*
52BB   D5                     PUSH   de   ; push null first_arg*
52BC   D5                     PUSH   de   ; push fake BP
52BD   DD E9                  JP   (ix)   
52BF                STKSIZE:   EQU   $100   ; Stack size
52BF                TIBSIZE:   EQU   $100   ; 256 bytes
52BF                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
52BF                          ALIGN   $100   
5300                          DS   STKSIZE   
5400                STACK:       
5400                          ALIGN   $100   
5400                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
5500                          ALIGN   $100   
5500                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5600                          ALIGN   $100   
5600                VARS:        
5600                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
56D0                RESTARTS:      
56D0                RST08:    DS   2   
56D2                RST10:    DS   2   
56D4                RST18:    DS   2   
56D6                RST20:    DS   2   
56D8                RST28:    DS   2   
56DA                RST30:    DS   2   ; 
56DC                BAUD:     DS   2   ; 
56DE                INTVEC:   DS   2   ; 
56E0                NMIVEC:   DS   2   ; 
56E2                GETCVEC:   DS   2   ; 
56E4                PUTCVEC:   DS   2   ; 
56E6                SYSVARS:      
56E6                             ; initialised sys variables (preserved)
56E6                VTIBPTR:   DS   2   
56E8                VBUFPTR:   DS   2   
56EA                VHEAPPTR:   DS   2   
56EC                VRECURPTR:   DS   2   
56EE                VDATAWIDTH:   DS   1   
56EF                VNUMBASE:   DS   1   
56F0                VHEXPREFIX:   DS   1   
56F1                VECHO:    DS   1   
56F2                VSTRMODE:   DS   1   
56F3                          DS   1   
56F4                          DS   1   
56F5                          DS   1   
56F6                          DS   1   
56F7                          DS   1   
56F8                             ; uninitialised sys variables (preserved)
56F8                VPOINTER:   DS   2   ; 
56FA                VREMAIN:   DS   2   ; 
56FC                VSAVEDIP:   DS   2   ; 
56FE                VSAVEDSP:   DS   2   ; 
5700                VSAVEDNEXT:   DS   2   ; 
5702                VSAVEDBP:   DS   2   ; 
5704                             ; uninitialised sys variables (unpreserved)
5704                VTEMP1:   DS   2   ; 
5706                VTEMP2:   DS   2   ; 
5708                VTEMP3:   DS   2   ; 
570A                          DS   2   ; 
570C                TBPTR:    DS   2   ; reserved for tests
570E                TITLEBUF:   DS   20   
5722                HEAP:        
5722                             ; FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
5722                             ; db "{"
5722                             ; db    "[%b /t] %L="                 ; init mutable L [index active]
5722                             ; db    "\\kt{"
5722                             ; db      "0%t!=/qt"                  ; break if type != 0
5722                             ; db      "\\dt:a{"                   ; return talkback to receive data
5722                             ; db        "%L1;!/qt"                ; if not active don't send
5722                             ; db        "%L0; %a="                ; store current index in A
5722                             ; db        "%s %L0; +="              ; inc value of index by step
5722                             ; db        "1%t!=/qt"                ; break if type != 0
5722                             ; db        "%a %e <"                 ; ifte: in range?
5722                             ; db          "{%a 1}{/f %L1;= 0 2}"  ; ifte: /t index, /f active = false, quit
5722                             ; db          "? %k/rc"              ; ifte: send to sink note: /rc recur
5722                             ; db      "} 0 %k^"                   ; init sink
5722                             ; db    "}"
5722                             ; db "}"
5722                             ; db 0
5722                             ; FUNC map, 0, "sf"                   ; map
5722                             ; db "{"
5722                             ; db    "\\kt{"
5722                             ; db      "0%t!=/qt"                  ; break if type != 0
5722                             ; db      "\\dt{"                     ; call source with tb
5722                             ; db        "1%t=="                   ; ifte: type == 1 ?
5722                             ; db        "{%d %f^}{%d}"            ; ifte: func(data) or data
5722                             ; db        "? %t %k^"               ; ifte: send to sink
5722                             ; db      "} 0 %s^"
5722                             ; db    "}"
5722                             ; db "}"
5722                             ; db 0
5722                             ; ; /ft filter
5722                             ; ; src pred -- src1
5722                             ; FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
5722                             ; db "{"
5722                             ; db    "[0]%T="
5722                             ; db    "\\kt{"                       ; return talkback to receive data
5722                             ; db      "\\dt{"                     ; call source with tb
5722                             ; db        "["
5722                             ; db          "{%d %T0;= /t}"         ; case 0: store talkback in T[0], return true
5722                             ; db          "{%d %p^}"              ; case 1: return boolean based on predicate
5722                             ; db          "{/t}"                  ; case 2: return true
5722                             ; db        "]%t;^"                   ; select on %t
5722                             ; db        "{%d %t %k^}{0 1 %T0;^}"  ; ifte: true send d to sink, false send 1 to talkback
5722                             ; db        "?"
5722                             ; db      "} 0 %s^"
5722                             ; db    "}"
5722                             ; db "}"
5722                             ; db 0
5722                             ; FUNC forEach, 1, "spT"
5722                             ; db "{"
5722                             ; db    "[0]%T="
5722                             ; db    "\\dt{"                       ; return talkback to receive data ; $56AA
5722                             ; db      "2%t==/qt"                    ; if type == 2 skip
5722                             ; db      "0%t=="                   ; ifte: type = 0 ?
5722                             ; db      "{%d %T0;=}{%d %p^}"      ; ifte: 0: store talkback, 1: send data
5722                             ; db      "?"                      ; ifte:
5722                             ; db      "0 1 %T0;^"               ; 0 or 1: get next src data item
5722                             ; db    "} 0 %s^"
5722                             ; db "}"
5722                             ; db 0
5722                             ; FUNC fold, 1, "sirA"                       ; src, init, reducer
5722                             ; db "{"                                  ; reducer: \\da00bbLi4u
5722                             ; db    "[%i]%A="
5722                             ; db    "\\kt{"                         ; return talkback to receive data
5722                             ; db      "\\dt{"                         ; call source with tb
5722                             ; db        "1%t=="                       ; ifte: type == 1 ?
5722                             ; db        "{ %d %A0; %r^ %A0;= %A0;}{%d}"      ; ifte: reduce -> acc, acc or data
5722                             ; db        "? %t %k^"                    ; ifte: send to sink
5722                             ; db      "} 0 %s^"
5722                             ; db    "}"
5722                             ; db "}"
5722                             ; db 0
5722                             ; 


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1449 IN MAIN.asm
                    > USED AT LINE 1459 IN MAIN.asm
                    > USED AT LINE 2533 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1467 IN MAIN.asm
                    > USED AT LINE 2372 IN MAIN.asm
                    > USED AT LINE 2555 IN MAIN.asm
                    > USED AT LINE 2639 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 161 IN MAIN.asm
                    > USED AT LINE 1175 IN MAIN.asm
                    > USED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 162 IN MAIN.asm
                    > USED AT LINE 1180 IN MAIN.asm
                    > USED AT LINE 1239 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1441 IN MAIN.asm
                    > USED AT LINE 1443 IN MAIN.asm
                    > USED AT LINE 1445 IN MAIN.asm
                    > USED AT LINE 2536 IN MAIN.asm
                    > USED AT LINE 2604 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 2393 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2541 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2543 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2474 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 173 IN MAIN.asm
                    > USED AT LINE 2449 IN MAIN.asm
                    > USED AT LINE 2468 IN MAIN.asm
COLON_:             0204 DEFINED AT LINE 178 IN MAIN.asm
COMMA_:             0206 DEFINED AT LINE 181 IN MAIN.asm
DOLLAR_:            0209 DEFINED AT LINE 184 IN MAIN.asm
DQUOTE_:            020C DEFINED AT LINE 187 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 188 IN MAIN.asm
DOT_:               020F DEFINED AT LINE 191 IN MAIN.asm
PERCENT_:           0212 DEFINED AT LINE 194 IN MAIN.asm
QUESTION_:          0215 DEFINED AT LINE 197 IN MAIN.asm
LPAREN_:            0218 DEFINED AT LINE 200 IN MAIN.asm
SLASH_:             021B DEFINED AT LINE 203 IN MAIN.asm
NUM_:               021E DEFINED AT LINE 206 IN MAIN.asm
BANG_:              0221 DEFINED AT LINE 209 IN MAIN.asm
BANG:               0221 DEFINED AT LINE 210 IN MAIN.asm
NOT:                022C DEFINED AT LINE 218 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
EQ_:                0232 DEFINED AT LINE 222 IN MAIN.asm
EQ:                 0232 DEFINED AT LINE 223 IN MAIN.asm
EQ0:                023C DEFINED AT LINE 230 IN MAIN.asm
                    > USED AT LINE 227 IN MAIN.asm
EQ1:                023D DEFINED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
GT_:                0241 DEFINED AT LINE 236 IN MAIN.asm
GT:                 0241 DEFINED AT LINE 237 IN MAIN.asm
LT_:                024C DEFINED AT LINE 245 IN MAIN.asm
LT:                 024C DEFINED AT LINE 246 IN MAIN.asm
LT1:                0255 DEFINED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
HASH_:              025E DEFINED AT LINE 261 IN MAIN.asm
SEMICOLON_:         025E DEFINED AT LINE 262 IN MAIN.asm
SEMICOLON:          025E DEFINED AT LINE 263 IN MAIN.asm
ARRAYINDEX:         025E DEFINED AT LINE 264 IN MAIN.asm
ARRAYINDEX0:        0266 DEFINED AT LINE 270 IN MAIN.asm
ARRAYINDEX1:        0267 DEFINED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
RPAREN_:            026B DEFINED AT LINE 277 IN MAIN.asm
RPAREN:             026B DEFINED AT LINE 279 IN MAIN.asm
AMPER_:             0273 DEFINED AT LINE 287 IN MAIN.asm
AMPER:              0273 DEFINED AT LINE 288 IN MAIN.asm
AND:                0273 DEFINED AT LINE 289 IN MAIN.asm
MINUS_:             027D DEFINED AT LINE 307 IN MAIN.asm
MINUS:              027D DEFINED AT LINE 308 IN MAIN.asm
SUB:                0289 DEFINED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
SUB1:               0293 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 320 IN MAIN.asm
SUB2:               029A DEFINED AT LINE 329 IN MAIN.asm
                    > USED AT LINE 326 IN MAIN.asm
SUB3:               029D DEFINED AT LINE 332 IN MAIN.asm
                    > USED AT LINE 1015 IN MAIN.asm
                    > USED AT LINE 1936 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
STAR_:              02A5 DEFINED AT LINE 338 IN MAIN.asm
STAR:               02A5 DEFINED AT LINE 339 IN MAIN.asm
MUL:                02AD DEFINED AT LINE 345 IN MAIN.asm
MUL2:               02AF DEFINED AT LINE 348 IN MAIN.asm
MUL3:               02B7 DEFINED AT LINE 353 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
PLUS_:              02C9 DEFINED AT LINE 368 IN MAIN.asm
PLUS:               02C9 DEFINED AT LINE 369 IN MAIN.asm
ADD:                02C9 DEFINED AT LINE 370 IN MAIN.asm
ADD1:               02D4 DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
ADD3:               02D8 DEFINED AT LINE 383 IN MAIN.asm
                    > USED AT LINE 298 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 1283 IN MAIN.asm
                    > USED AT LINE 1517 IN MAIN.asm
ADD4:               02E2 DEFINED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 387 IN MAIN.asm
UPCASE_:            02E5 DEFINED AT LINE 395 IN MAIN.asm
UPCASE:             02E5 DEFINED AT LINE 396 IN MAIN.asm
LOWCASE_:           0300 DEFINED AT LINE 405 IN MAIN.asm
LOWCASE:            0300 DEFINED AT LINE 406 IN MAIN.asm
IDENT1:             0305 DEFINED AT LINE 410 IN MAIN.asm
                    > USED AT LINE 399 IN MAIN.asm
LBRACK_:            0312 DEFINED AT LINE 422 IN MAIN.asm
LBRACK:             0312 DEFINED AT LINE 423 IN MAIN.asm
ARRAYSTART:         0312 DEFINED AT LINE 424 IN MAIN.asm
BACKSLASH_:         032E DEFINED AT LINE 439 IN MAIN.asm
BACKSLASH:          032E DEFINED AT LINE 440 IN MAIN.asm
LAMBDA:             032E DEFINED AT LINE 441 IN MAIN.asm
LAMBDA1:            0333 DEFINED AT LINE 444 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
LAMBDA2:            0343 DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
RBRACK_:            034F DEFINED AT LINE 461 IN MAIN.asm
RBRACK:             034F DEFINED AT LINE 462 IN MAIN.asm
ARRAYEND:           034F DEFINED AT LINE 463 IN MAIN.asm
ARRAYEND1:          036B DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 497 IN MAIN.asm
ARRAYEND2:          037B DEFINED AT LINE 490 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
ARRAYEND3:          0380 DEFINED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 479 IN MAIN.asm
CARET_:             039F DEFINED AT LINE 515 IN MAIN.asm
CARET:              039F DEFINED AT LINE 519 IN MAIN.asm
GO:                 039F DEFINED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03A0 DEFINED AT LINE 522 IN MAIN.asm
                    > USED AT LINE 1552 IN MAIN.asm
                    > USED AT LINE 1554 IN MAIN.asm
                    > USED AT LINE 1724 IN MAIN.asm
GO2:                03A6 DEFINED AT LINE 527 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
GRAVE_:             03B5 DEFINED AT LINE 536 IN MAIN.asm
GRAVE:              03B5 DEFINED AT LINE 537 IN MAIN.asm
PRINTLITERAL:       03B5 DEFINED AT LINE 538 IN MAIN.asm
PRINTLITERAL0:      03BC DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
PRINTLITERAL1:      03BF DEFINED AT LINE 546 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
LBRACE_:            03CB DEFINED AT LINE 553 IN MAIN.asm
LBRACE:             03CB DEFINED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
PIPE_:              03D0 DEFINED AT LINE 560 IN MAIN.asm
PIPE:               03D0 DEFINED AT LINE 561 IN MAIN.asm
OR:                 03D0 DEFINED AT LINE 562 IN MAIN.asm
RBRACE_:            03DB DEFINED AT LINE 573 IN MAIN.asm
TILDE_:             03DE DEFINED AT LINE 577 IN MAIN.asm
UNDERSCORE_:        03E1 DEFINED AT LINE 580 IN MAIN.asm
CHAR:               03E1 DEFINED AT LINE 581 IN MAIN.asm
AT_:                03E9 DEFINED AT LINE 589 IN MAIN.asm
AT:                 03E9 DEFINED AT LINE 590 IN MAIN.asm
ADDR:               03E9 DEFINED AT LINE 591 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 602 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 603 IN MAIN.asm
PRINTCHAR:          040F DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
PRINTSTRING:        041E DEFINED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
PRINTSTRING0:       0425 DEFINED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
PRINTSTRING1:       0428 DEFINED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 630 IN MAIN.asm
PRINTNUMBER:        0433 DEFINED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
PRINTDEC:           043E DEFINED AT LINE 652 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
PRINTDEC1:          044C DEFINED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 658 IN MAIN.asm
PRINTDEC2:          045B DEFINED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 661 IN MAIN.asm
PRINTDEC3:          046B DEFINED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 674 IN MAIN.asm
PRINTDEC4:          048B DEFINED AT LINE 700 IN MAIN.asm
                    > USED AT LINE 689 IN MAIN.asm
                    > USED AT LINE 691 IN MAIN.asm
                    > USED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
PRINTDEC5:          048D DEFINED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
PRINTDEC6:          049D DEFINED AT LINE 714 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
PRINTDEC7:          049E DEFINED AT LINE 716 IN MAIN.asm
                    > USED AT LINE 713 IN MAIN.asm
PRINTHEX:           04A4 DEFINED AT LINE 727 IN MAIN.asm
                    > USED AT LINE 647 IN MAIN.asm
PRINTHEX1:          04B0 DEFINED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
PRINTHEX2:          04BB DEFINED AT LINE 741 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
PRINTHEX3:          04CA DEFINED AT LINE 750 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
PRINTHEX4:          04D3 DEFINED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 774 IN MAIN.asm
COMMAND_A_:         0526 DEFINED AT LINE 810 IN MAIN.asm
COMMAND_B_:         0541 DEFINED AT LINE 825 IN MAIN.asm
COMMAND_D_:         0554 DEFINED AT LINE 836 IN MAIN.asm
COMMAND_F_:         055F DEFINED AT LINE 843 IN MAIN.asm
COMMAND_H_:         0586 DEFINED AT LINE 864 IN MAIN.asm
COMMAND_I_:         0591 DEFINED AT LINE 872 IN MAIN.asm
COMMAND_M_:         059C DEFINED AT LINE 879 IN MAIN.asm
COMAND_O_:          05A7 DEFINED AT LINE 886 IN MAIN.asm
COMMAND_P_:         05AE DEFINED AT LINE 891 IN MAIN.asm
COMMAND_Q_:         05B5 DEFINED AT LINE 897 IN MAIN.asm
COMMAND_R_:         05C0 DEFINED AT LINE 904 IN MAIN.asm
COMMAND_S_:         05D3 DEFINED AT LINE 915 IN MAIN.asm
COMAND_T_:          05D5 DEFINED AT LINE 918 IN MAIN.asm
COMMAND_V_:         05D7 DEFINED AT LINE 921 IN MAIN.asm
COMMAND_W_:         05D9 DEFINED AT LINE 924 IN MAIN.asm
COMMAND_X_:         05DB DEFINED AT LINE 927 IN MAIN.asm
COMMAND_DEFAULT_:   05DD DEFINED AT LINE 930 IN MAIN.asm
COMMAND_S:          05DF DEFINED AT LINE 936 IN MAIN.asm
                    > USED AT LINE 916 IN MAIN.asm
COMMAND_T:          05FE DEFINED AT LINE 953 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
COMMAND_V:          0605 DEFINED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 922 IN MAIN.asm
COMMAND_W:          062C DEFINED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 925 IN MAIN.asm
COMMAND_X:          0637 DEFINED AT LINE 986 IN MAIN.asm
                    > USED AT LINE 928 IN MAIN.asm
COMMAND_DEFAULT:    063E DEFINED AT LINE 991 IN MAIN.asm
                    > USED AT LINE 931 IN MAIN.asm
DIV:                0645 DEFINED AT LINE 997 IN MAIN.asm
                    > USED AT LINE 994 IN MAIN.asm
DIV2:               064F DEFINED AT LINE 1006 IN MAIN.asm
                    > USED AT LINE 1003 IN MAIN.asm
ABSOLUTE:           0660 DEFINED AT LINE 1019 IN MAIN.asm
                    > USED AT LINE 813 IN MAIN.asm
ABSOLUTE1:          066B DEFINED AT LINE 1029 IN MAIN.asm
                    > USED AT LINE 1022 IN MAIN.asm
ADDROF:             066E DEFINED AT LINE 1035 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
ADDROF2:            0674 DEFINED AT LINE 1040 IN MAIN.asm
ARRAYLENGTH:        0676 DEFINED AT LINE 1045 IN MAIN.asm
                    > USED AT LINE 819 IN MAIN.asm
                    > USED AT LINE 44
ARRAYLENGTH1:       067C DEFINED AT LINE 1052 IN MAIN.asm
                    > USED AT LINE 1063 IN MAIN.asm
                    > USED AT LINE 1066 IN MAIN.asm
ARRAYSIZE:          067F DEFINED AT LINE 1058 IN MAIN.asm
                    > USED AT LINE 821 IN MAIN.asm
PERFORMM_1538S1059: 0686 DEFINED AT LINE 45
                    > USED AT LINE 43
BREAK:              0693 DEFINED AT LINE 1071 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
BREAK1:             069A DEFINED AT LINE 1077 IN MAIN.asm
                    > USED AT LINE 1075 IN MAIN.asm
BYTEMODE:           06AD DEFINED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
BYTEMODE1:          06AF DEFINED AT LINE 1091 IN MAIN.asm
                    > USED AT LINE 1270 IN MAIN.asm
COMMENT:            06B4 DEFINED AT LINE 1096 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
                    > USED AT LINE 1100 IN MAIN.asm
CONSTHEAPSTART:     06BD DEFINED AT LINE 1104 IN MAIN.asm
                    > USED AT LINE 973 IN MAIN.asm
CONSTTIBSTART:      06C3 DEFINED AT LINE 1108 IN MAIN.asm
                    > USED AT LINE 975 IN MAIN.asm
CONSTBUFSTART:      06C9 DEFINED AT LINE 1112 IN MAIN.asm
                    > USED AT LINE 971 IN MAIN.asm
DECBASE:            06CF DEFINED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
DECBASE1:           06D1 DEFINED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 1124 IN MAIN.asm
HEXBASE:            06D6 DEFINED AT LINE 1122 IN MAIN.asm
                    > USED AT LINE 867 IN MAIN.asm
ERROR1:             06DB DEFINED AT LINE 1126 IN MAIN.asm
                    > USED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 834 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 869 IN MAIN.asm
                    > USED AT LINE 877 IN MAIN.asm
                    > USED AT LINE 884 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 951 IN MAIN.asm
                    > USED AT LINE 977 IN MAIN.asm
                    > USED AT LINE 984 IN MAIN.asm
INPUT:              06E1 DEFINED AT LINE 1132 IN MAIN.asm
                    > USED AT LINE 875 IN MAIN.asm
OUTPUT:             06EC DEFINED AT LINE 1144 IN MAIN.asm
                    > USED AT LINE 889 IN MAIN.asm
QUIT:               06F5 DEFINED AT LINE 1155 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
QUIT1:              06FC DEFINED AT LINE 1161 IN MAIN.asm
                    > USED AT LINE 1159 IN MAIN.asm
RECUR:              06FF DEFINED AT LINE 1164 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
REMAIN:             0705 DEFINED AT LINE 1169 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
STRINGBEGIN:        070B DEFINED AT LINE 1174 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
STRINGEND:          0713 DEFINED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
STRINGEND1:         073A DEFINED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
STRINGLENGTH:       0742 DEFINED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
                    > USED AT LINE 44
STRINGLENGTH1:      0748 DEFINED AT LINE 1206 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
STRINGLENGTH2:      074A DEFINED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
STRINGLENGTH3:      074E DEFINED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 1221 IN MAIN.asm
STRINGSIZE:         0751 DEFINED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
PERFORMM_1679S1218: 0758 DEFINED AT LINE 45
                    > USED AT LINE 43
STRINGCOMPARE:      075D DEFINED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 941 IN MAIN.asm
STRINGCOMPARE1:     075F DEFINED AT LINE 1229 IN MAIN.asm
                    > USED AT LINE 1237 IN MAIN.asm
STRINGCOMPARE2:     076A DEFINED AT LINE 1238 IN MAIN.asm
                    > USED AT LINE 1232 IN MAIN.asm
STRINGCOMPARE3:     076F DEFINED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 1234 IN MAIN.asm
STRINGCOMPARE4:     0772 DEFINED AT LINE 1243 IN MAIN.asm
                    > USED AT LINE 1240 IN MAIN.asm
VARBUFPTR:          0775 DEFINED AT LINE 1247 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
VARECHO:            077B DEFINED AT LINE 1251 IN MAIN.asm
                    > USED AT LINE 963 IN MAIN.asm
VARHEAPPTR:         0781 DEFINED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 965 IN MAIN.asm
VARTIBPTR:          0787 DEFINED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
VARHEXPREFIX:       078D DEFINED AT LINE 1263 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
WORDMODE:           0793 DEFINED AT LINE 1268 IN MAIN.asm
                    > USED AT LINE 982 IN MAIN.asm
XOR:                0798 DEFINED AT LINE 1273 IN MAIN.asm
                    > USED AT LINE 989 IN MAIN.asm
XOR1:               0799 DEFINED AT LINE 1275 IN MAIN.asm
RANGESRC:           07A3 DEFINED AT LINE 32
                    > USED AT LINE 911 IN MAIN.asm
RANGESRCM_1742S1291: 07B2 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          0835 DEFINED AT LINE 32
                    > USED AT LINE 817 IN MAIN.asm
ARRAYITERM_1761S1311: 0842 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         08B5 DEFINED AT LINE 32
                    > USED AT LINE 945 IN MAIN.asm
STRINGITERM_1780S1331: 08C2 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                093C DEFINED AT LINE 32
                    > USED AT LINE 882 IN MAIN.asm
MAPM_1800S1353:     0949 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             097D DEFINED AT LINE 32
                    > USED AT LINE 852 IN MAIN.asm
FILTERM_1814S1368:  098B DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               09DA DEFINED AT LINE 32
                    > USED AT LINE 846 IN MAIN.asm
FOLDM_1833S1388:    09E9 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            0A2B DEFINED AT LINE 32
                    > USED AT LINE 848 IN MAIN.asm
FOREACHM_1847S1403: 0A39 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0A76 DEFINED AT LINE 32
                    > USED AT LINE 850 IN MAIN.asm
FUNCSRCM_1861S1418: 0A82 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0AAF DEFINED AT LINE 32
                    > USED AT LINE 606 IN MAIN.asm
PRINTARRAYM_1871S1429: 0ABD DEFINED AT LINE 39
                    > USED AT LINE 35
COMMA:              0AF7 DEFINED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
READCHAR:           0B06 DEFINED AT LINE 1448 IN MAIN.asm
                    > USED AT LINE 1442 IN MAIN.asm
READSTRING:         0B0F DEFINED AT LINE 1455 IN MAIN.asm
                    > USED AT LINE 1444 IN MAIN.asm
                    > USED AT LINE 44
READSTRING1:        0B14 DEFINED AT LINE 1458 IN MAIN.asm
                    > USED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 1468 IN MAIN.asm
READSTRING2:        0B28 DEFINED AT LINE 1469 IN MAIN.asm
                    > USED AT LINE 1461 IN MAIN.asm
READNUMBER:         0B31 DEFINED AT LINE 1476 IN MAIN.asm
                    > USED AT LINE 1446 IN MAIN.asm
PERFORMM_1915S1478: 0B3A DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER1:        0B58 DEFINED AT LINE 1494 IN MAIN.asm
                    > USED AT LINE 1485 IN MAIN.asm
                    > USED AT LINE 1489 IN MAIN.asm
                    > USED AT LINE 1491 IN MAIN.asm
PERFORMM_1932S1495: 0B5F DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER2:        0B62 DEFINED AT LINE 1498 IN MAIN.asm
                    > USED AT LINE 1487 IN MAIN.asm
PERFORMM_1936S1499: 0B69 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER3:        0B6A DEFINED AT LINE 1501 IN MAIN.asm
                    > USED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 1497 IN MAIN.asm
TILDE:              0B70 DEFINED AT LINE 1508 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
INVERT:             0B70 DEFINED AT LINE 1509 IN MAIN.asm
DOLLAR:             0B7A DEFINED AT LINE 1520 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
HEXNUM:             0B7A DEFINED AT LINE 1521 IN MAIN.asm
                    > USED AT LINE 44
HEXNUM1:            0B7D DEFINED AT LINE 1523 IN MAIN.asm
                    > USED AT LINE 1540 IN MAIN.asm
HEXNUM2:            0B85 DEFINED AT LINE 1529 IN MAIN.asm
                    > USED AT LINE 1527 IN MAIN.asm
QUESTION:           0B97 DEFINED AT LINE 1544 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
IF:                 0B97 DEFINED AT LINE 1545 IN MAIN.asm
QUOTE:              0BA4 DEFINED AT LINE 1558 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
STRING:             0BA4 DEFINED AT LINE 1559 IN MAIN.asm
STRING1:            0BAD DEFINED AT LINE 1566 IN MAIN.asm
                    > USED AT LINE 1574 IN MAIN.asm
STRING2:            0BB0 DEFINED AT LINE 1570 IN MAIN.asm
                    > USED AT LINE 1565 IN MAIN.asm
STRING3:            0BB6 DEFINED AT LINE 1575 IN MAIN.asm
                    > USED AT LINE 1573 IN MAIN.asm
PERCENT:            0BBE DEFINED AT LINE 1585 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
ARG:                0BBE DEFINED AT LINE 1586 IN MAIN.asm
ARG0:               0BDA DEFINED AT LINE 1605 IN MAIN.asm
                    > USED AT LINE 1611 IN MAIN.asm
ARG0A:              0BE3 DEFINED AT LINE 1613 IN MAIN.asm
                    > USED AT LINE 1592 IN MAIN.asm
                    > USED AT LINE 1597 IN MAIN.asm
ARG1:               0BE8 DEFINED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 1609 IN MAIN.asm
ARG1A:              0BF0 DEFINED AT LINE 1623 IN MAIN.asm
                    > USED AT LINE 1615 IN MAIN.asm
NUM:                0BF3 DEFINED AT LINE 1628 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
                    > USED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 44
NUM0:               0BFC DEFINED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 1632 IN MAIN.asm
NUM1:               0BFD DEFINED AT LINE 1636 IN MAIN.asm
                    > USED AT LINE 1653 IN MAIN.asm
NUM2:               0C15 DEFINED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 1531 IN MAIN.asm
                    > USED AT LINE 1533 IN MAIN.asm
                    > USED AT LINE 1639 IN MAIN.asm
                    > USED AT LINE 1641 IN MAIN.asm
NUM3:               0C20 DEFINED AT LINE 1662 IN MAIN.asm
                    > USED AT LINE 1657 IN MAIN.asm
RBRACE:             0C23 DEFINED AT LINE 1667 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
BLOCKEND:           0C23 DEFINED AT LINE 1668 IN MAIN.asm
                    > USED AT LINE 1086 IN MAIN.asm
                    > USED AT LINE 1162 IN MAIN.asm
BLOCKEND1:          0C55 DEFINED AT LINE 1690 IN MAIN.asm
                    > USED AT LINE 1683 IN MAIN.asm
BLOCKEND2:          0C61 DEFINED AT LINE 1697 IN MAIN.asm
                    > USED AT LINE 1689 IN MAIN.asm
BLOCKEND3:          0C73 DEFINED AT LINE 1711 IN MAIN.asm
                    > USED AT LINE 1703 IN MAIN.asm
BLOCKEND4:          0C87 DEFINED AT LINE 1721 IN MAIN.asm
                    > USED AT LINE 1719 IN MAIN.asm
GOBLOCK:            0C90 DEFINED AT LINE 1726 IN MAIN.asm
                    > USED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
GOBLOCK2:           0CB5 DEFINED AT LINE 1743 IN MAIN.asm
                    > USED AT LINE 1824 IN MAIN.asm
GOBLOCK3:           0CBF DEFINED AT LINE 1749 IN MAIN.asm
GOFUNC:             0CC3 DEFINED AT LINE 1753 IN MAIN.asm
                    > USED AT LINE 532 IN MAIN.asm
GOFUNC1:            0CDC DEFINED AT LINE 1772 IN MAIN.asm
                    > USED AT LINE 1782 IN MAIN.asm
GOFUNC2:            0CE2 DEFINED AT LINE 1779 IN MAIN.asm
                    > USED AT LINE 1771 IN MAIN.asm
GOFUNC3:            0CED DEFINED AT LINE 1785 IN MAIN.asm
                    > USED AT LINE 1761 IN MAIN.asm
GOFUNC4:            0D05 DEFINED AT LINE 1802 IN MAIN.asm
                    > USED AT LINE 1799 IN MAIN.asm
GOFUNC5:            0D08 DEFINED AT LINE 1805 IN MAIN.asm
                    > USED AT LINE 1811 IN MAIN.asm
GOFUNC6:            0D0B DEFINED AT LINE 1809 IN MAIN.asm
                    > USED AT LINE 1804 IN MAIN.asm
GOFUNC7:            0D0E DEFINED AT LINE 1812 IN MAIN.asm
GOFUNC8:            0D12 DEFINED AT LINE 1817 IN MAIN.asm
                    > USED AT LINE 1737 IN MAIN.asm
                    > USED AT LINE 1801 IN MAIN.asm
ASSIGN:             0D1D DEFINED AT LINE 1828 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
ASSIGN0:            0D1F DEFINED AT LINE 1831 IN MAIN.asm
                    > USED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
ASSIGN1:            0D23 DEFINED AT LINE 1834 IN MAIN.asm
ASSIGN2:            0D2C DEFINED AT LINE 1841 IN MAIN.asm
                    > USED AT LINE 1838 IN MAIN.asm
EQUALS:             0D2E DEFINED AT LINE 1846 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
NOTEQUALS:          0D35 DEFINED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
LESSTHANEQ:         0D3C DEFINED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
LESSTHAN:           0D41 DEFINED AT LINE 1867 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN1:          0D46 DEFINED AT LINE 1872 IN MAIN.asm
                    > USED AT LINE 1863 IN MAIN.asm
TRUE1:              0D49 DEFINED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 956 IN MAIN.asm
                    > USED AT LINE 1849 IN MAIN.asm
                    > USED AT LINE 1855 IN MAIN.asm
NULL1:              0D4F DEFINED AT LINE 1879 IN MAIN.asm
FALSE1:             0D4F DEFINED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
                    > USED AT LINE 1850 IN MAIN.asm
                    > USED AT LINE 1856 IN MAIN.asm
                    > USED AT LINE 1870 IN MAIN.asm
                    > USED AT LINE 1873 IN MAIN.asm
SPREAD:             0D55 DEFINED AT LINE 1885 IN MAIN.asm
                    > USED AT LINE 343 IN MAIN.asm
SPREAD1:            0D62 DEFINED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
SPREAD2:            0D6D DEFINED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 1901 IN MAIN.asm
SPREAD3:            0D6F DEFINED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 1894 IN MAIN.asm
SHIFTLEFT:          0D79 DEFINED AT LINE 1917 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SHIFTLEFT2:         0D83 DEFINED AT LINE 1926 IN MAIN.asm
                    > USED AT LINE 1923 IN MAIN.asm
SHIFTLEFT3:         0D8B DEFINED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 1934 IN MAIN.asm
SHIFTLEFT4:         0D8C DEFINED AT LINE 1933 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
SHIFTRIGHT:         0D95 DEFINED AT LINE 1941 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
SHIFTRIGHT2:        0D9F DEFINED AT LINE 1950 IN MAIN.asm
                    > USED AT LINE 1947 IN MAIN.asm
SHIFTRIGHT3:        0DA7 DEFINED AT LINE 1955 IN MAIN.asm
                    > USED AT LINE 1959 IN MAIN.asm
SHIFTRIGHT4:        0DAB DEFINED AT LINE 1958 IN MAIN.asm
                    > USED AT LINE 1954 IN MAIN.asm
DIVIDE:             0DB4 DEFINED AT LINE 1967 IN MAIN.asm
                    > USED AT LINE 1010 IN MAIN.asm
DIVIDE1:            0DB9 DEFINED AT LINE 1970 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
DIVIDE2:            0DC6 DEFINED AT LINE 1978 IN MAIN.asm
                    > USED AT LINE 1975 IN MAIN.asm
DIVIDE3:            0DC7 DEFINED AT LINE 1980 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
DOTNEXT:            0DCD DEFINED AT LINE 1986 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
DOTNEXT1:           0DD5 DEFINED AT LINE 1991 IN MAIN.asm
                    > USED AT LINE 1989 IN MAIN.asm
PARSEARGS:          0DE7 DEFINED AT LINE 2002 IN MAIN.asm
                    > USED AT LINE 443 IN MAIN.asm
PARSEARGS1:         0DF1 DEFINED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
PARSEARGS1A:        0DF9 DEFINED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 2012 IN MAIN.asm
PARSEARGS2:         0E01 DEFINED AT LINE 2020 IN MAIN.asm
PARSEARGS3:         0E09 DEFINED AT LINE 2028 IN MAIN.asm
                    > USED AT LINE 2014 IN MAIN.asm
                    > USED AT LINE 2026 IN MAIN.asm
PARSEARGS4:         0E0C DEFINED AT LINE 2031 IN MAIN.asm
                    > USED AT LINE 2017 IN MAIN.asm
                    > USED AT LINE 2019 IN MAIN.asm
PARSEARGS5:         0E12 DEFINED AT LINE 2037 IN MAIN.asm
                    > USED AT LINE 2035 IN MAIN.asm
PARSEBLOCK:         0E1D DEFINED AT LINE 2050 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
PARSEBLOCK1:        0E21 DEFINED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 2058 IN MAIN.asm
                    > USED AT LINE 2066 IN MAIN.asm
                    > USED AT LINE 2072 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
                    > USED AT LINE 2089 IN MAIN.asm
                    > USED AT LINE 2092 IN MAIN.asm
PARSEBLOCK2:        0E3A DEFINED AT LINE 2068 IN MAIN.asm
                    > USED AT LINE 2060 IN MAIN.asm
                    > USED AT LINE 2062 IN MAIN.asm
                    > USED AT LINE 2064 IN MAIN.asm
PARSEBLOCK3:        0E40 DEFINED AT LINE 2073 IN MAIN.asm
                    > USED AT LINE 2067 IN MAIN.asm
PARSEBLOCK4:        0E5A DEFINED AT LINE 2087 IN MAIN.asm
                    > USED AT LINE 2075 IN MAIN.asm
                    > USED AT LINE 2077 IN MAIN.asm
                    > USED AT LINE 2079 IN MAIN.asm
PARSEBLOCK5:        0E5D DEFINED AT LINE 2090 IN MAIN.asm
                    > USED AT LINE 2081 IN MAIN.asm
                    > USED AT LINE 2083 IN MAIN.asm
                    > USED AT LINE 2085 IN MAIN.asm
PARSEBLOCK6:        0E88 DEFINED AT LINE 2111 IN MAIN.asm
                    > USED AT LINE 2098 IN MAIN.asm
CREATEFUNC:         0E8C DEFINED AT LINE 2119 IN MAIN.asm
                    > USED AT LINE 455 IN MAIN.asm
CREATEFUNC0:        0EAB DEFINED AT LINE 2133 IN MAIN.asm
                    > USED AT LINE 2129 IN MAIN.asm
CREATEFUNC1:        0EC3 DEFINED AT LINE 2152 IN MAIN.asm
                    > USED AT LINE 2148 IN MAIN.asm
CREATEFUNC2:        0ED6 DEFINED AT LINE 2165 IN MAIN.asm
                    > USED AT LINE 2161 IN MAIN.asm
CREATEFUNC2A:       0EF5 DEFINED AT LINE 2191 IN MAIN.asm
                    > USED AT LINE 2178 IN MAIN.asm
CREATEFUNC3:        0F04 DEFINED AT LINE 2203 IN MAIN.asm
                    > USED AT LINE 2213 IN MAIN.asm
CREATEFUNC4:        0F0F DEFINED AT LINE 2214 IN MAIN.asm
CREATEFUNC5:        0F10 DEFINED AT LINE 2216 IN MAIN.asm
                    > USED AT LINE 2132 IN MAIN.asm
VARIABLE:           0F2E DEFINED AT LINE 2243 IN MAIN.asm
                    > USED AT LINE 274 IN MAIN.asm
                    > USED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 1249 IN MAIN.asm
                    > USED AT LINE 1253 IN MAIN.asm
                    > USED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1261 IN MAIN.asm
                    > USED AT LINE 1265 IN MAIN.asm
CONSTANT:           0F3D DEFINED AT LINE 2253 IN MAIN.asm
                    > USED AT LINE 1106 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
                    > USED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 2249 IN MAIN.asm
CHARTABLE:          0F40 DEFINED AT LINE 2261 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
CHARTABLE1:         0F4A DEFINED AT LINE 2268 IN MAIN.asm
                    > USED AT LINE 2282 IN MAIN.asm
CHARTABLE2:         0F53 DEFINED AT LINE 2276 IN MAIN.asm
                    > USED AT LINE 2274 IN MAIN.asm
CHARTABLE3:         0F55 DEFINED AT LINE 2279 IN MAIN.asm
                    > USED AT LINE 2265 IN MAIN.asm
                    > USED AT LINE 2267 IN MAIN.asm
COMMANDTABLE:       0F5A DEFINED AT LINE 2288 IN MAIN.asm
                    > USED AT LINE 604 IN MAIN.asm
COMMANDTABLE1:      0F5B DEFINED AT LINE 2290 IN MAIN.asm
COMMANDTABLE2:      0F5C DEFINED AT LINE 2292 IN MAIN.asm
                    > USED AT LINE 2305 IN MAIN.asm
COMMANDTABLE3:      0F63 DEFINED AT LINE 2298 IN MAIN.asm
                    > USED AT LINE 2295 IN MAIN.asm
COMMANDTABLE4:      0F6C DEFINED AT LINE 2306 IN MAIN.asm
                    > USED AT LINE 2297 IN MAIN.asm
                    > USED AT LINE 2301 IN MAIN.asm
CMDTABLE:           0F72 DEFINED AT LINE 2319 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
                    > USED AT LINE 826 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
                    > USED AT LINE 865 IN MAIN.asm
                    > USED AT LINE 873 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
                    > USED AT LINE 905 IN MAIN.asm
                    > USED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
                    > USED AT LINE 980 IN MAIN.asm
                    > USED AT LINE 987 IN MAIN.asm
                    > USED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 1440 IN MAIN.asm
CMDTABLE1:          0F73 DEFINED AT LINE 2321 IN MAIN.asm
CMDTABLE2:          0F73 DEFINED AT LINE 2322 IN MAIN.asm
                    > USED AT LINE 2346 IN MAIN.asm
CMDTABLE3:          0F80 DEFINED AT LINE 2334 IN MAIN.asm
CMDTABLE4:          0F89 DEFINED AT LINE 2342 IN MAIN.asm
                    > USED AT LINE 2333 IN MAIN.asm
CMDTABLE5:          0F8E DEFINED AT LINE 2347 IN MAIN.asm
                    > USED AT LINE 2329 IN MAIN.asm
                    > USED AT LINE 2337 IN MAIN.asm
                    > USED AT LINE 2341 IN MAIN.asm
GETVARADDR:         0F93 DEFINED AT LINE 2354 IN MAIN.asm
                    > USED AT LINE 1038 IN MAIN.asm
GETVARADDR1:        0FA5 DEFINED AT LINE 2365 IN MAIN.asm
                    > USED AT LINE 2361 IN MAIN.asm
PUTSTR0:            0FAA DEFINED AT LINE 2371 IN MAIN.asm
                    > USED AT LINE 2377 IN MAIN.asm
PUTSTR:             0FAE DEFINED AT LINE 2374 IN MAIN.asm
                    > USED AT LINE 1997 IN MAIN.asm
                    > USED AT LINE 2443 IN MAIN.asm
                    > USED AT LINE 2500 IN MAIN.asm
NESTING:            0FB3 DEFINED AT LINE 2390 IN MAIN.asm
                    > USED AT LINE 2522 IN MAIN.asm
                    > USED AT LINE 2556 IN MAIN.asm
NESTING0:           0FC1 DEFINED AT LINE 2398 IN MAIN.asm
                    > USED AT LINE 2392 IN MAIN.asm
                    > USED AT LINE 2394 IN MAIN.asm
                    > USED AT LINE 2396 IN MAIN.asm
NESTING1A:          0FC8 DEFINED AT LINE 2403 IN MAIN.asm
                    > USED AT LINE 2400 IN MAIN.asm
NESTING1:           0FCB DEFINED AT LINE 2406 IN MAIN.asm
                    > USED AT LINE 2397 IN MAIN.asm
NESTING2:           0FDA DEFINED AT LINE 2415 IN MAIN.asm
                    > USED AT LINE 2410 IN MAIN.asm
                    > USED AT LINE 2412 IN MAIN.asm
NESTING3:           0FDC DEFINED AT LINE 2418 IN MAIN.asm
                    > USED AT LINE 2414 IN MAIN.asm
NESTING4:           0FE7 DEFINED AT LINE 2425 IN MAIN.asm
                    > USED AT LINE 2420 IN MAIN.asm
                    > USED AT LINE 2422 IN MAIN.asm
PROMPT:             0FE9 DEFINED AT LINE 2429 IN MAIN.asm
                    > USED AT LINE 2504 IN MAIN.asm
CRLF:               0FF2 DEFINED AT LINE 2434 IN MAIN.asm
                    > USED AT LINE 2569 IN MAIN.asm
PRINTSTR:           0FF9 DEFINED AT LINE 2441 IN MAIN.asm
                    > USED AT LINE 2430 IN MAIN.asm
                    > USED AT LINE 2435 IN MAIN.asm
                    > USED AT LINE 2629 IN MAIN.asm
                    > USED AT LINE 2634 IN MAIN.asm
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 49
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 189
INIT:               1000 DEFINED AT LINE 2448 IN MAIN.asm
                    > USED AT LINE 2497 IN MAIN.asm
INIT1:              1008 DEFINED AT LINE 2452 IN MAIN.asm
                    > USED AT LINE 2458 IN MAIN.asm
WARMINIT:           1010 DEFINED AT LINE 2460 IN MAIN.asm
COLDBOOT0:          1023 DEFINED AT LINE 2467 IN MAIN.asm
                    > USED AT LINE 2455 IN MAIN.asm
                    > USED AT LINE 2493 IN MAIN.asm
COLDINIT:           102D DEFINED AT LINE 2473 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          103E DEFINED AT LINE 2482 IN MAIN.asm
                    > USED AT LINE 2485 IN MAIN.asm
COLDSTART:          104B DEFINED AT LINE 2491 IN MAIN.asm
                    > USED AT LINE 828 IN MAIN.asm
START:              1054 DEFINED AT LINE 2495 IN MAIN.asm
START1:             105A DEFINED AT LINE 2498 IN MAIN.asm
                    > USED AT LINE 2465 IN MAIN.asm
                    > USED AT LINE 2494 IN MAIN.asm
INTERPRET:          1060 DEFINED AT LINE 2502 IN MAIN.asm
                    > USED AT LINE 2606 IN MAIN.asm
                    > USED AT LINE 2622 IN MAIN.asm
INTERPRET2:         106C DEFINED AT LINE 2510 IN MAIN.asm
                    > USED AT LINE 2547 IN MAIN.asm
                    > USED AT LINE 2627 IN MAIN.asm
                    > USED AT LINE 2631 IN MAIN.asm
                    > USED AT LINE 2649 IN MAIN.asm
INTERPRET3:         1074 DEFINED AT LINE 2518 IN MAIN.asm
                    > USED AT LINE 2528 IN MAIN.asm
INTERPRET4:         107A DEFINED AT LINE 2524 IN MAIN.asm
                    > USED AT LINE 2516 IN MAIN.asm
INTERPRET5:         107F DEFINED AT LINE 2531 IN MAIN.asm
                    > USED AT LINE 2557 IN MAIN.asm
                    > USED AT LINE 2572 IN MAIN.asm
INTERPRET5A:        1098 DEFINED AT LINE 2546 IN MAIN.asm
INTERPRET6:         109A DEFINED AT LINE 2549 IN MAIN.asm
                    > USED AT LINE 2535 IN MAIN.asm
INTERPRET7:         10A8 DEFINED AT LINE 2559 IN MAIN.asm
                    > USED AT LINE 2539 IN MAIN.asm
INTERPRET8:         10BB DEFINED AT LINE 2574 IN MAIN.asm
                    > USED AT LINE 2537 IN MAIN.asm
NEXT:               10D6 DEFINED AT LINE 2587 IN MAIN.asm
                    > USED AT LINE 2487 IN MAIN.asm
                    > USED AT LINE 2591 IN MAIN.asm
NEXT0:              10EA DEFINED AT LINE 2601 IN MAIN.asm
                    > USED AT LINE 2599 IN MAIN.asm
NEXT1:              10EB DEFINED AT LINE 2603 IN MAIN.asm
                    > USED AT LINE 2592 IN MAIN.asm
EXIT:               10F2 DEFINED AT LINE 2608 IN MAIN.asm
                    > USED AT LINE 2605 IN MAIN.asm
RUN:                10F6 DEFINED AT LINE 2613 IN MAIN.asm
                    > USED AT LINE 2620 IN MAIN.asm
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
ERROR:              10FA DEFINED AT LINE 2618 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 1128 IN MAIN.asm
BACKSPACE_:         110C DEFINED AT LINE 2624 IN MAIN.asm
                    > USED AT LINE 2542 IN MAIN.asm
REEDIT_:            111C DEFINED AT LINE 2633 IN MAIN.asm
                    > USED AT LINE 2544 IN MAIN.asm
REEDIT0:            1128 DEFINED AT LINE 2638 IN MAIN.asm
                    > USED AT LINE 2644 IN MAIN.asm
REEDIT1:            112C DEFINED AT LINE 2641 IN MAIN.asm
                    > USED AT LINE 2637 IN MAIN.asm
F1:                 113C DEFINED AT LINE 32
                    > USED AT LINE 854 IN MAIN.asm
F1M_3017S12:        1147 DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 1148 DEFINED AT LINE 32
                    > USED AT LINE 856 IN MAIN.asm
F2M_3019S15:        1153 DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 1154 DEFINED AT LINE 32
                    > USED AT LINE 858 IN MAIN.asm
F3M_3021S18:        115F DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 1160 DEFINED AT LINE 32
                    > USED AT LINE 860 IN MAIN.asm
F4M_3023S21:        116B DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         1200 DEFINED AT LINE 25
                    > USED AT LINE 8
EXPECTM_3042S48:    126E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3046S53:    12E1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3047S54:    134A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3048S55:    13B1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3049S56:    1418 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3050S57:    147F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3051S58:    14E6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3052S59:    154F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3053S60:    15BA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3054S61:    1623 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3055S62:    1692 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3056S63:    16FB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3057S64:    1764 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3058S65:    17CF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3059S66:    183A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3060S67:    18AB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3061S68:    191C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3062S69:    198B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3063S70:    19FE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3064S71:    1A75 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3065S72:    1AEA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3066S73:    1B59 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3067S74:    1BD0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3068S75:    1C43 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3069S76:    1CB2 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3070S77:    1D21 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3071S78:    1D98 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3072S79:    1E07 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3073S80:    1E76 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3074S81:    1EE7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3075S82:    1F68 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3076S83:    1FD3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3077S84:    203E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3078S85:    20AB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3079S86:    2118 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3080S87:    2187 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3081S88:    21FE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3082S89:    226D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3083S90:    22EA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3084S91:    2367 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3085S92:    23E4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3086S93:    2463 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3087S94:    24E6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3088S95:    2569 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3089S96:    25EC DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3090S97:    266F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3091S98:    26F0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3092S99:    2771 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3093S100:   27F6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3094S101:   2867 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3095S102:   28E6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3096S103:   2965 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3097S104:   29E6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3098S105:   2A5D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3099S106:   2ACC DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3100S107:   2B3D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3101S108:   2BAE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3102S109:   2C1D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3103S110:   2C8C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3104S111:   2CFB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3105S112:   2D6A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3106S113:   2DD9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3107S114:   2E48 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3108S115:   2EB7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3109S116:   2F26 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3110S117:   2F97 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3111S118:   3008 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3112S119:   3079 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3113S120:   30EC DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3114S121:   315F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3115S122:   31CC DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3116S123:   3239 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3117S124:   32AC DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3118S125:   3325 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3119S126:   33AA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3120S127:   342F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3121S128:   349E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3122S129:   350F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3123S130:   3586 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3124S131:   3601 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3125S132:   3678 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3126S133:   36F9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3127S134:   377C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3128S135:   3805 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3129S136:   3892 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3130S137:   3911 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3131S138:   3996 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3132S139:   3A1D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3133S140:   3AA6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3134S141:   3B2D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3135S142:   3BC2 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3136S143:   3C45 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3137S144:   3CD6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3138S145:   3D69 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3139S146:   3DFE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3140S147:   3E9B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3141S148:   3F38 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3142S149:   3FB7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3143S150:   403E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3144S151:   40BF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3145S152:   4146 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3146S153:   41D1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3147S154:   426A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3148S155:   430B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3149S156:   43AC DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3150S157:   443F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3151S158:   44D8 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3152S159:   4587 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3153S160:   4630 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3154S161:   46E7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3155S162:   47A0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3156S163:   482B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3157S164:   48B6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3158S165:   492F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3159S166:   49A8 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3160S167:   4A21 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3161S168:   4A9A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3162S169:   4B0B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3163S170:   4B7C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3164S171:   4BED DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3165S172:   4C5E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3166S173:   4CDB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3167S174:   4D66 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3168S175:   4DF7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3169S176:   4EA0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3170S177:   4F49 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3171S178:   500C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3172S179:   5085 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3173S180:   510E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3174S181:   5199 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3175S182:   5218 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3176S183:   52A9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXECSTR:            52B4 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              5400 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1728 IN MAIN.asm
                    > USED AT LINE 2488 IN MAIN.asm
                    > USED AT LINE 2492 IN MAIN.asm
                    > USED AT LINE 2496 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                5400 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 154 IN MAIN.asm
                    > USED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 2507 IN MAIN.asm
                    > USED AT LINE 2515 IN MAIN.asm
                    > USED AT LINE 2551 IN MAIN.asm
                    > USED AT LINE 2561 IN MAIN.asm
                    > USED AT LINE 2576 IN MAIN.asm
                    > USED AT LINE 2579 IN MAIN.asm
                    > USED AT LINE 2636 IN MAIN.asm
                    > USED AT LINE 2645 IN MAIN.asm
BUFFER:             5500 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 155 IN MAIN.asm
                    > USED AT LINE 1113 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
VARS:               5600 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 2479 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
RESTARTS:           56D0 DEFINED AT LINE 18 IN ram.asm
RST08:              56D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              56D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              56D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              56D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              56D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              56DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               56DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             56DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             56E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            56E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            56E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            56E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2475 IN MAIN.asm
VTIBPTR:            56E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 2508 IN MAIN.asm
                    > USED AT LINE 2578 IN MAIN.asm
VBUFPTR:            56E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
                    > USED AT LINE 1995 IN MAIN.asm
VHEAPPTR:           56EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 1191 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1456 IN MAIN.asm
                    > USED AT LINE 1473 IN MAIN.asm
                    > USED AT LINE 1481 IN MAIN.asm
                    > USED AT LINE 1560 IN MAIN.asm
                    > USED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
                    > USED AT LINE 2039 IN MAIN.asm
                    > USED AT LINE 2106 IN MAIN.asm
                    > USED AT LINE 2109 IN MAIN.asm
                    > USED AT LINE 2131 IN MAIN.asm
                    > USED AT LINE 2136 IN MAIN.asm
                    > USED AT LINE 2167 IN MAIN.asm
                    > USED AT LINE 2233 IN MAIN.asm
VRECURPTR:          56EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1166 IN MAIN.asm
                    > USED AT LINE 1716 IN MAIN.asm
                    > USED AT LINE 1723 IN MAIN.asm
VDATAWIDTH:         56EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 267 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
                    > USED AT LINE 1061 IN MAIN.asm
                    > USED AT LINE 1092 IN MAIN.asm
                    > USED AT LINE 1836 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 2246 IN MAIN.asm
VNUMBASE:           56EF DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 1119 IN MAIN.asm
VHEXPREFIX:         56F0 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
VECHO:              56F1 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 1252 IN MAIN.asm
                    > USED AT LINE 1464 IN MAIN.asm
VSTRMODE:           56F2 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1176 IN MAIN.asm
                    > USED AT LINE 1181 IN MAIN.asm
                    > USED AT LINE 1987 IN MAIN.asm
VPOINTER:           56F8 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 414 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
                    > USED AT LINE 1619 IN MAIN.asm
                    > USED AT LINE 1833 IN MAIN.asm
                    > USED AT LINE 2244 IN MAIN.asm
VREMAIN:            56FA DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 1012 IN MAIN.asm
                    > USED AT LINE 1170 IN MAIN.asm
VSAVEDIP:           56FC DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 2461 IN MAIN.asm
                    > USED AT LINE 2581 IN MAIN.asm
VSAVEDSP:           56FE DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 2462 IN MAIN.asm
                    > USED AT LINE 2582 IN MAIN.asm
VSAVEDNEXT:         5700 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 2463 IN MAIN.asm
                    > USED AT LINE 2583 IN MAIN.asm
VSAVEDBP:           5702 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 2464 IN MAIN.asm
                    > USED AT LINE 2584 IN MAIN.asm
VTEMP1:             5704 DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 466 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 1715 IN MAIN.asm
                    > USED AT LINE 1727 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
                    > USED AT LINE 1762 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
                    > USED AT LINE 1790 IN MAIN.asm
                    > USED AT LINE 1796 IN MAIN.asm
                    > USED AT LINE 1887 IN MAIN.asm
                    > USED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1927 IN MAIN.asm
                    > USED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
                    > USED AT LINE 2101 IN MAIN.asm
                    > USED AT LINE 2110 IN MAIN.asm
                    > USED AT LINE 2122 IN MAIN.asm
                    > USED AT LINE 2234 IN MAIN.asm
VTEMP2:             5706 DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 1674 IN MAIN.asm
                    > USED AT LINE 1714 IN MAIN.asm
                    > USED AT LINE 1763 IN MAIN.asm
                    > USED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 2124 IN MAIN.asm
                    > USED AT LINE 2224 IN MAIN.asm
VTEMP3:             5708 DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 2121 IN MAIN.asm
                    > USED AT LINE 2235 IN MAIN.asm
TBPTR:              570C DEFINED AT LINE 67 IN ram.asm
TITLEBUF:           570E DEFINED AT LINE 69 IN ram.asm
                    > USED AT LINE 2450 IN MAIN.asm
                    > USED AT LINE 2469 IN MAIN.asm
                    > USED AT LINE 2499 IN MAIN.asm
HEAP:               5722 DEFINED AT LINE 71 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1105 IN MAIN.asm
                    > USED AT LINE 2094 IN MAIN.asm
