0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 call flushBuffer
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call flushBuffer
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 54               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 54               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 54               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 54               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 54               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 54               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 54               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 54               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 54               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 54               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 52               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 54               LD   (RST08),HL   
0094   22 D2 54               LD   (RST10),HL   
0097   22 D4 54               LD   (RST18),HL   
009A   22 D6 54               LD   (RST20),HL   
009D   22 D8 54               LD   (RST28),HL   
00A0   22 DA 54               LD   (RST30),HL   
00A3   22 DE 54               LD   (INTVEC),HL   
00A6   22 E0 54               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 54               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 54               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 0F               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                             ; z80_RST8    equ     $CF
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 52                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 53                  DW   BUF   ; vBUFPtr pointer into BUF
0188   64 0E                  DW   next   ; nNext
018A   1C 55                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C   00 00                  DW   0   ; vRecur
018E   00 00                  DW   0   ; unused
0190                          ALIGN   $100   
0200                OPCODES:      ; still available ` ~ _ \
0200   87                     DB   lsb(nop_)   ; SP
0201   33                     DB   lsb(bang_)   ; !
0202   53                     DB   lsb(dquote_)   ; "
0203   47                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1B                     DB   lsb(tick_)   ; '
0208   15                     DB   lsb(lparen_)   ; (
0209   89                     DB   lsb(rparen_)   ; )
020A   30                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   50                     DB   lsb(comma_)   ; ,
020D   56                     DB   lsb(minus_)   ; -
020E   21                     DB   lsb(dot_)   ; .
020F   84                     DB   lsb(slash_)   ; /	
0210   44                     DB   lsb(num_)   ; 0
0211   44                     DB   lsb(num_)   ; 1
0212   44                     DB   lsb(num_)   ; 2
0213   44                     DB   lsb(num_)   ; 3
0214   44                     DB   lsb(num_)   ; 4
0215   44                     DB   lsb(num_)   ; 5
0216   44                     DB   lsb(num_)   ; 6
0217   44                     DB   lsb(num_)   ; 7
0218   44                     DB   lsb(num_)   ; 8
0219   44                     DB   lsb(num_)   ; 9
021A   24                     DB   lsb(colon_)   ; :
021B   1E                     DB   lsb(semicolon_)   ; ;
021C   72                     DB   lsb(lt_)   ; <
021D   59                     DB   lsb(eq_)   ; =
021E   67                     DB   lsb(gt_)   ; >
021F   2D                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   27                     DB   lsb(upcase_)   ; A
0222   27                     DB   lsb(upcase_)   ; B
0223   27                     DB   lsb(upcase_)   ; C
0224   27                     DB   lsb(upcase_)   ; D
0225   27                     DB   lsb(upcase_)   ; E
0226   27                     DB   lsb(upcase_)   ; F
0227   27                     DB   lsb(upcase_)   ; G
0228   27                     DB   lsb(upcase_)   ; h
0229   27                     DB   lsb(upcase_)   ; I
022A   27                     DB   lsb(upcase_)   ; J
022B   27                     DB   lsb(upcase_)   ; K
022C   27                     DB   lsb(upcase_)   ; L
022D   27                     DB   lsb(upcase_)   ; M
022E   27                     DB   lsb(upcase_)   ; N
022F   27                     DB   lsb(upcase_)   ; O
0230   27                     DB   lsb(upcase_)   ; p
0231   27                     DB   lsb(upcase_)   ; Q
0232   27                     DB   lsb(upcase_)   ; R
0233   27                     DB   lsb(upcase_)   ; S
0234   27                     DB   lsb(upcase_)   ; T
0235   27                     DB   lsb(upcase_)   ; U
0236   27                     DB   lsb(upcase_)   ; V
0237   27                     DB   lsb(upcase_)   ; W
0238   27                     DB   lsb(upcase_)   ; X
0239   27                     DB   lsb(upcase_)   ; Y
023A   27                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   87                     DB   lsb(nop_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   4D                     DB   lsb(caret_)   ; ^
023F   87                     DB   lsb(nop_)   ; _
0240   53                     DB   lsb(dquote_)   ; `     used for testing string   	
0241   2A                     DB   lsb(lowcase_)   ; a
0242   2A                     DB   lsb(lowcase_)   ; b
0243   2A                     DB   lsb(lowcase_)   ; c
0244   2A                     DB   lsb(lowcase_)   ; d
0245   2A                     DB   lsb(lowcase_)   ; e
0246   2A                     DB   lsb(lowcase_)   ; f
0247   2A                     DB   lsb(lowcase_)   ; g
0248   2A                     DB   lsb(lowcase_)   ; h
0249   2A                     DB   lsb(lowcase_)   ; i
024A   2A                     DB   lsb(lowcase_)   ; j
024B   2A                     DB   lsb(lowcase_)   ; k
024C   2A                     DB   lsb(lowcase_)   ; l
024D   2A                     DB   lsb(lowcase_)   ; m
024E   2A                     DB   lsb(lowcase_)   ; n
024F   2A                     DB   lsb(lowcase_)   ; o
0250   2A                     DB   lsb(lowcase_)   ; p
0251   2A                     DB   lsb(lowcase_)   ; q
0252   2A                     DB   lsb(lowcase_)   ; r
0253   2A                     DB   lsb(lowcase_)   ; s
0254   2A                     DB   lsb(lowcase_)   ; t
0255   2A                     DB   lsb(lowcase_)   ; u
0256   2A                     DB   lsb(lowcase_)   ; v
0257   2A                     DB   lsb(lowcase_)   ; w
0258   2A                     DB   lsb(lowcase_)   ; x
0259   2A                     DB   lsb(lowcase_)   ; y
025A   2A                     DB   lsb(lowcase_)   ; z
025B   15                     DB   lsb(lbrace_)   ; {
025C   4A                     DB   lsb(pipe_)   ; |
025D   18                     DB   lsb(rbrace_)   ; }
025E   87                     DB   lsb(nop_)   ; ~
025F   87                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 8C 03               JP   plus   
0303                AT_:         
0303   C3 A9 03               JP   at   
0306                AMPER_:      
0306   C3 B3 03               JP   amper   
0309                DOLLAR_:      
0309   C3 74 0A               JP   dollar   
030C                LBRACK_:      
030C   C3 0F 04               JP   lbrack   
030F                RBRACK_:      
030F   C3 2B 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 DA 03               JP   percent   
0315                LPAREN_:      
0315                LBRACE_:      
0315   C3 08 05               JP   lbrace   
0318                RBRACE_:      
0318   C3 71 05               JP   rbrace   
031B                TICK_:       
031B   C3 F8 05               JP   tick   
031E                SEMICOLON_:      
031E   C3 EA 06               JP   semicolon   
0321                DOT_:        
0321   C3 B4 07               JP   dot   
0324                COLON_:      
0324   C3 93 04               JP   colon   
0327                UPCASE_:      
0327   C3 91 0A               JP   upcase   
032A                LOWCASE_:      
032A   C3 96 0A               JP   lowcase   
032D                QUESTION_:      
032D   C3 A8 0A               JP   question   
0330                STAR_:       
0330   C3 2B 0B               JP   star   
0333                BANG_:       ; logical invert, any non zero value
0333   03                     INC   bc   
0334   0A                     LD   a,(bc)   
0335   FE 3D                  CP   "="   
0337   20 05                  JR   nz,not   
0339   E1                     POP   hl   
033A   D1                     POP   de   
033B   C3 10 09               JP   notequals   
033E                NOT:         
033E   0B                     DEC   bc   
033F   21 00 00               LD   hl,0   ; is considered true
0342   18 1F                  JR   eq1   
0344                NUM_:        
0344   C3 47 0B               JP   num   
0347                HASH_:       
0347   C3 7B 04               JP   hash   
034A                PIPE_:       
034A   C3 BE 03               JP   pipe   
034D                CARET_:      
034D   C3 D5 09               JP   caret   
0350                COMMA_:      
0350   C3 86 07               JP   comma   
0353                DQUOTE_:      
0353   C3 24 0C               JP   dquote   
0356                MINUS_:      
0356   C3 4C 0C               JP   minus   
0359                EQ_:         
0359   CD 00 0D               CALL   jumpTable   
035C   3D                     DB   "="   
035D   62 03                  DW   eq0   
035F   00                     DB   NUL   
0360   C9 04                  DW   assign   
0362                             ; inc bc
0362                             ; ld a,(bc)                   ; is it == ?
0362                             ; cp "="
0362                             ; jr z,eq0                    ; no its equality
0362                             ; dec bc
0362                             ; jp assign                   ; no its assignment
0362                EQ0:         
0362   E1                     POP   hl   
0363                EQ1:         
0363   D1                     POP   de   
0364   C3 08 09               JP   equals   
0367                GT_:         
0367   03                     INC   bc   
0368   0A                     LD   a,(bc)   
0369   FE 3E                  CP   ">"   
036B   CA 11 0C               JP   z,shiftRight   
036E   D1                     POP   de   
036F   E1                     POP   hl   
0370   18 09                  JR   lt1   
0372                LT_:         
0372   03                     INC   bc   
0373   0A                     LD   a,(bc)   
0374   FE 3C                  CP   "<"   
0376   CA 01 0C               JP   z,shiftLeft   
0379   E1                     POP   hl   
037A   D1                     POP   de   
037B                LT1:         
037B   FE 3D                  CP   "="   
037D   CA 19 09               JP   z,lessthaneq   
0380   0B                     DEC   bc   
0381   C3 1E 09               JP   lessthan   
0384                SLASH_:      
0384   C3 0D 06               JP   slash   
0387                NOP_:        
0387   DD E9                  JP   (ix)   
0389                RPAREN_:      
0389   C3 F9 0B               JP   rparen   
038C                             ;*******************************************************************
038C                             ; implementations
038C                             ;*******************************************************************
038C                PLUS:        
038C                ADD:         
038C   03                     INC   bc   
038D   0A                     LD   a,(bc)   
038E   FE 2B                  CP   "+"   ; ++ increment variable
0390   20 05                  JR   nz,add1   
0392   E1                     POP   hl   
0393   23                     INC   hl   
0394   C3 CB 04               JP   assign0   
0397                ADD1:        
0397   0B                     DEC   bc   
0398   D1                     POP   de   ; second term
0399   E1                     POP   hl   ; first term
039A   19                     ADD   hl,de   
039B                ADD3:        
039B   03                     INC   bc   
039C   0A                     LD   a,(bc)   
039D   FE 3D                  CP   "="   
039F   CA A6 03               JP   z,add4   
03A2   0B                     DEC   bc   
03A3   E5                     PUSH   hl   
03A4   DD E9                  JP   (ix)   
03A6                ADD4:        
03A6   C3 CB 04               JP   assign0   
03A9                             ; @ addr
03A9                             ; -- ptr
03A9                AT:          
03A9                ADDR:        
03A9   ED 5B F4 54            LD   de,(vPointer)   
03AD   21 F4 54               LD   hl,vPointer   
03B0   C3 E1 0C               JP   variable   
03B3                AMPER:       
03B3                AND:         
03B3   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B4   E1                     POP   hl   
03B5   7B                     LD   a,e   
03B6   A5                     AND   l   
03B7   6F                     LD   l,a   
03B8   7A                     LD   a,d   
03B9   A4                     AND   h   
03BA                AND1:        
03BA   67                     LD   h,a   
03BB   E5                     PUSH   hl   
03BC   DD E9                  JP   (ix)   
03BE                PIPE:        
03BE   C3 C1 03               JP   or   
03C1                OR:          
03C1   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03C2   E1                     POP   hl   
03C3   7B                     LD   a,e   
03C4   B5                     OR   l   
03C5   6F                     LD   l,a   
03C6   7A                     LD   a,d   
03C7   B4                     OR   h   
03C8   18 F0                  JR   and1   
03CA                XOR:         
03CA   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03CB                XOR1:        
03CB   E1                     POP   hl   
03CC   7B                     LD   a,e   
03CD   AD                     XOR   l   
03CE   6F                     LD   l,a   
03CF   7A                     LD   a,d   
03D0   AC                     XOR   h   
03D1   67                     LD   h,a   
03D2   E5                     PUSH   hl   
03D3   DD E9                  JP   (ix)   
03D5                INVERT:      ; Bitwise INVert the top member of the stack
03D5   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03D8   18 F1                  JR   xor1   
03DA                             ; %a .. %z
03DA                             ; -- value
03DA                             ; returns value of arg
03DA                PERCENT:      
03DA                ARG:         
03DA   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03DD   FD 56 05               LD   d,(iy+5)   
03E0   EB                     EX   de,hl   
03E1   7D                     LD   a,l   ; arg_list* == null, skip
03E2   B4                     OR   h   
03E3   28 1A                  JR   z,arg0a   
03E5   23                     INC   hl   ; a = num_args, hl = arg_list*
03E6   7E                     LD   a,(hl)   
03E7   23                     INC   hl   
03E8   B7                     OR   a   
03E9   28 14                  JR   z,arg0a   ; num_args == 0, skip
03EB   5F                     LD   e,a   ; e = a = num_args
03EC   03                     INC   bc   ; a = next char = dollar_name
03ED   0A                     LD   a,(bc)   
03EE   C5                     PUSH   bc   ; save IP
03EF   43                     LD   b,e   ; b = e = num_args
03F0   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03F3   FD 56 03               LD   d,(iy+3)   
03F6                ARG0:        
03F6   1B                     DEC   de   ; a = dollar_name, de = next arg*
03F7   1B                     DEC   de   
03F8   BE                     CP   (hl)   
03F9   28 09                  JR   z,arg1   
03FB   23                     INC   hl   ; hl = next arg_list*
03FC   10 F8                  DJNZ   arg0   
03FE   C1                     POP   bc   ; no match, restore IP
03FF                ARG0A:       
03FF   11 00 00               LD   de,0   ; return 0
0402   18 08                  JR   arg1a   
0404                ARG1:        
0404   C1                     POP   bc   ; restore IP
0405   EB                     EX   de,hl   ; hl = arg*
0406   22 F4 54               LD   (vPointer),hl   ; store arg* in setter
0409   5E                     LD   e,(hl)   
040A   23                     INC   hl   
040B   56                     LD   d,(hl)   ; de = arg
040C                ARG1A:       
040C   D5                     PUSH   de   ; push arg
040D   DD E9                  JP   (ix)   
040F                LBRACK:      
040F                ARRAYSTART:      
040F   11 00 00               LD   de,0   ; create stack frame
0412   D5                     PUSH   de   ; push null for IP
0413   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0416   FD 56 05               LD   d,(iy+5)   ; 
0419   D5                     PUSH   de   ; 
041A   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
041D   FD 56 03               LD   d,(iy+3)   ; 
0420   D5                     PUSH   de   ; 
0421   FD E5                  PUSH   iy   ; push BP
0423   FD 21 00 00            LD   iy,0   ; BP = SP
0427   FD 39                  ADD   iy,sp   
0429   DD E9                  JP   (ix)   
042B                RBRACK:      
042B                ARRAYEND:      
042B   FD 54                  LD   d,iyh   ; de = BP
042D   FD 5D                  LD   e,iyl   
042F   ED 43 00 55            LD   (vTemp1),bc   ; save IP
0433   62 6B                  LD   hl,de   ; hl = de = BP
0435   B7                     OR   a   
0436   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0438   CB 3C                  SRL   h   ; 
043A   CB 1D                  RR   l   
043C   44 4D                  LD   bc,hl   ; bc = count
043E   2A F0 54               LD   hl,(vHeapPtr)   ; hl = array[-4]
0441   71                     LD   (hl),c   ; write num items in length word
0442   23                     INC   hl   
0443   70                     LD   (hl),b   
0444   23                     INC   hl   ; hl = array[0], bc = count
0445                             ; de = BP, hl = array[0], bc = count
0445   18 15                  JR   arrayEnd3   
0447                ARRAYEND1:      
0447   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
044A   77                     LD   (hl),a   ; write lsb of array item
044B   23                     INC   hl   ; move to msb of array item
044C   3A E6 54               LD   a,(vDataWidth)   ; vDataWidth=1?
044F   3D                     DEC   a   
0450   28 05                  JR   z,arrayEnd2   
0452   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0455   77                     LD   (hl),a   ; write msb of array item
0456   23                     INC   hl   ; move to next word in array
0457                ARRAYEND2:      
0457   FD 2B                  DEC   iy   ; move to next word on stack
0459   FD 2B                  DEC   iy   
045B   0B                     DEC   bc   ; dec items count
045C                ARRAYEND3:      
045C   79                     LD   a,c   ; if not zero loop
045D   B0                     OR   b   
045E   20 E7                  JR   nz,arrayEnd1   
0460   EB                     EX   de,hl   ; de = end of array, hl = BP
0461   F9                     LD   sp,hl   ; sp = BP
0462   E1                     POP   hl   ; de = end of array, hl = old BP
0463   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0464   FD 62                  LD   iyh,d   
0466   FD 6B                  LD   iyl,e   
0468   D1                     POP   de   ; pop arg_list (discard)
0469   D1                     POP   de   ; pop first_arg* (discard)
046A   D1                     POP   de   ; pop IP (discard)
046B   ED 5B F0 54            LD   de,(vHeapPtr)   ; de = array[-2]
046F   13                     INC   de   
0470   13                     INC   de   
0471   D5                     PUSH   de   ; return array[0]
0472   22 F0 54               LD   (vHeapPtr),hl   ; move heap* to end of array
0475   ED 4B 00 55            LD   bc,(vTemp1)   ; restore IP
0479   DD E9                  JP   (ix)   
047B                             ; index of an array, based on vDataWidth
047B                             ; array num -- value    ; also sets vPointer to address
047B                HASH:        
047B                ARRAYINDEX:      
047B   E1                     POP   hl   ; hl = index
047C   D1                     POP   de   ; de = array
047D   3A E6 54               LD   a,(vDataWidth)   ; a = data width
0480   3D                     DEC   a   
0481   28 01                  JR   z,arrayIndex1   
0483                ARRAYINDEX0:      
0483   29                     ADD   hl,hl   ; if data width = 2 then double
0484                ARRAYINDEX1:      
0484   19                     ADD   hl,de   ; add addr
0485   22 F4 54               LD   (vPointer),hl   ; store address in setter
0488   16 00                  LD   d,0   
048A   5E                     LD   e,(hl)   
048B   B7                     OR   a   ; check data width again
048C   28 02                  JR   z,arrayIndex2   
048E   23                     INC   hl   
048F   56                     LD   d,(hl)   
0490                ARRAYINDEX2:      
0490   D5                     PUSH   de   
0491   DD E9                  JP   (ix)   
0493                             ; arg_list - parses input (ab:c)
0493                             ; names after the : represent uninitialised locals
0493                             ; return values are the state of the stack after the block ends
0493                             ; format: numLocals totNumArgs argChars...
0493                COLON:       
0493                ARGLIST:      
0493   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0496   2A F0 54               LD   hl,(vHeapPtr)   ; hl = heap*
0499   E5                     PUSH   hl   ; save start of arg_list
049A   23                     INC   hl   ; skip length fields to start of string
049B   23                     INC   hl   
049C   03                     INC   bc   ; point to next char
049D                ARGLIST1:      
049D   0A                     LD   a,(bc)   
049E   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A0   20 03                  JR   nz,arglist1a   
04A2   14                     INC   d   ; non zero value local count acts as flag
04A3   18 10                  JR   arglist3   
04A5                ARGLIST1A:      
04A5   FE 61                  CP   "a"   ; < "a" terminates arg_list
04A7   38 0F                  JR   c,arglist4   
04A9   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04AB   30 0B                  JR   nc,arglist4   
04AD                ARGLIST2:      
04AD   77                     LD   (hl),a   
04AE   23                     INC   hl   
04AF   1C                     INC   e   ; increase arg count
04B0   AF                     XOR   a   
04B1   B2                     OR   d   
04B2   28 01                  JR   z,arglist3   
04B4   14                     INC   d   ; if d > 0 increase local count
04B5                ARGLIST3:      
04B5   03                     INC   bc   ; point to next char
04B6   18 E5                  JR   arglist1   
04B8                ARGLIST4:      
04B8   0B                     DEC   bc   
04B9   AF                     XOR   a   
04BA   B2                     OR   d   
04BB   28 01                  JR   z,arglist5   
04BD   15                     DEC   d   ; remove initial inc
04BE                ARGLIST5:      
04BE   23                     INC   hl   
04BF   22 F0 54               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04C2   E1                     POP   hl   ; hl = start of arg_list
04C3   E5                     PUSH   hl   ; return start of arg_list
04C4   72                     LD   (hl),d   ; write number of locals at start - 1
04C5   23                     INC   hl   
04C6   73                     LD   (hl),e   ; write number of args + locals at start - 2
04C7   DD E9                  JP   (ix)   
04C9                             ; value _oldValue --            ; uses address in vPointer
04C9                ASSIGN:      
04C9   E1                     POP   hl   ; discard last accessed value
04CA   E1                     POP   hl   ; hl = new value
04CB                ASSIGN0:      
04CB   EB                     EX   de,hl   ; de = new value
04CC                ASSIGNX:      
04CC   2A F4 54               LD   hl,(vPointer)   
04CF   73                     LD   (hl),e   
04D0   3A E6 54               LD   a,(vDataWidth)   
04D3   3D                     DEC   a   ; is it byte?
04D4   28 02                  JR   z,assign1   
04D6   23                     INC   hl   
04D7   72                     LD   (hl),d   
04D8                ASSIGN1:      
04D8   DD E9                  JP   (ix)   
04DA                             ; /ab absolute
04DA                             ; num -- num
04DA                ABSOLUTE:      
04DA   E1                     POP   hl   
04DB   CB 7C                  BIT   7,h   
04DD   C8                     RET   z   
04DE   AF                     XOR   a   
04DF   95                     SUB   l   
04E0   6F                     LD   l,a   
04E1   9F                     SBC   a,a   
04E2   94                     SUB   h   
04E3   67                     LD   h,a   
04E4   E5                     PUSH   hl   
04E5   DD E9                  JP   (ix)   
04E7                             ; /ad addrOf
04E7                             ; char -- addr
04E7                ADDROF:      
04E7   E1                     POP   hl   ; a = char
04E8   7D                     LD   a,l   
04E9   FE 7B                  CP   "z"+1   ; if a > z then exit
04EB   30 19                  JR   nc,addrOf2   
04ED   D6 41                  SUB   "A"   ; a - 65
04EF   38 15                  JR   c,addrOf2   ; if < A then exit
04F1   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
04F3   38 06                  JR   c,addrOf1   
04F5   D6 06                  SUB   "a"-("Z"+1)   
04F7   FE 1A                  CP   "Z"-"A"+1   
04F9   38 0B                  JR   c,addrOf2   ; if < a then exit
04FB                ADDROF1:      
04FB   87                     ADD   a,a   ; double a
04FC   21 00 54               LD   hl,VARS   ; hl = VARS + a
04FF   85                     ADD   a,l   
0500   6F                     LD   l,a   
0501   3E 00                  LD   a,0   
0503   8C                     ADC   a,h   
0504   67                     LD   h,a   
0505   E5                     PUSH   hl   
0506                ADDROF2:      
0506   DD E9                  JP   (ix)   
0508                LBRACE:      
0508                BLOCKSTART:      
0508   C5                     PUSH   bc   ; return pointer to first { of block
0509   03                     INC   bc   
050A   16 01                  LD   d,1   ; nesting: count first parenthesis
050C                BLOCKSTART1:      ; Skip to end of definition
050C   0A                     LD   a,(bc)   ; Get the next character
050D   03                     INC   bc   ; Point to next character
050E   FE 21                  CP   " " + 1   ; ignore whitespace
0510   38 FA                  JR   c,blockStart1   
0512   FE 29                  CP   ")"   
0514   28 2D                  JR   z,blockStart4   
0516   FE 7D                  CP   "}"   
0518   28 29                  JR   z,blockStart4   
051A   FE 5D                  CP   "]"   
051C   28 25                  JR   z,blockStart4   
051E   FE 28                  CP   "("   
0520   28 16                  JR   z,blockStart2   
0522   FE 7B                  CP   "{"   
0524   28 12                  JR   z,blockStart2   
0526   FE 5B                  CP   "["   
0528   28 0E                  JR   z,blockStart2   
052A   FE 27                  CP   "'"   
052C   28 0D                  JR   z,blockStart3   
052E   FE 60                  CP   "`"   
0530   28 09                  JR   z,blockStart3   
0532   FE 22                  CP   DQ   
0534   28 05                  JR   z,blockStart3   
0536   18 D4                  JR   blockStart1   
0538                BLOCKSTART2:      
0538   14                     INC   d   
0539   18 D1                  JR   blockStart1   
053B                BLOCKSTART3:      
053B   3E 80                  LD   a,$80   
053D   AA                     XOR   d   
053E   57                     LD   d,a   
053F   20 CB                  JR   nz,blockStart1   
0541   18 03                  JR   blockStart5   
0543                BLOCKSTART4:      
0543   15                     DEC   d   
0544   20 C6                  JR   nz,blockStart1   ; get the next element
0546                BLOCKSTART5:      
0546   60 69                  LD   hl,bc   ; hl = IP
0548   11 1C 55               LD   de,HEAP   ; is IP pointing to object in heap
054B   B7                     OR   a   ; IP - HEAP
054C   ED 52                  SBC   hl,de   
054E   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0550   28 1C                  JR   z,blockStart6   
0552   60 69                  LD   hl,bc   ; hl = IP
0554   D1                     POP   de   ; de = block*
0555   ED 43 00 55            LD   (vTemp1),bc   ; save IP
0559   B7                     OR   a   ; bc = size
055A   ED 52                  SBC   hl,de   
055C   44 4D                  LD   bc,hl   
055E   EB                     EX   de,hl   ; hl = block* de = heap*
055F   ED 5B F0 54            LD   de,(vHeapPtr)   
0563   D5                     PUSH   de   ; return hblock*
0564   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0566   ED 53 F0 54            LD   (vHeapPtr),de   ; heap* += size
056A   ED 4B 00 55            LD   bc,(vTemp1)   ; restore IP
056E                BLOCKSTART6:      
056E   0B                     DEC   bc   ; balanced, exit
056F   DD E9                  JP   (ix)   
0571                RBRACE:      
0571                BLOCKEND:      
0571   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0574   FD 56 01               LD   d,(iy+1)   
0577   ED 53 00 55            LD   (vTemp1),de   
057B   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
057E   FD 56 07               LD   d,(iy+7)   
0581   ED 53 02 55            LD   (vTemp2),de   
0585   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0588   FD 56 03               LD   d,(iy+3)   
058B   EB                     EX   de,hl   
058C   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
058F   FD 56 01               LD   d,(iy+1)   
0592   13                     INC   de   ; for carry flag <=
0593   B7                     OR   a   
0594   ED 52                  SBC   hl,de   
0596   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0598   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
059A   FD 5D                  LD   e,iyl   
059C   21 08 00               LD   hl,8   
059F   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
05A0   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
05A1   18 0C                  JR   blockEnd2   
05A3                BLOCKEND1:      ; same scope
05A3   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
05A6   FD 56 03               LD   d,(iy+3)   
05A9   EB                     EX   de,hl   
05AA   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
05AC   FD 5D                  LD   e,iyl   
05AE   EB                     EX   de,hl   
05AF                BLOCKEND2:      
05AF   44 4D                  LD   bc,hl   ; bc = hl = BP
05B1   B7                     OR   a   ; hl = BP - SP = count
05B2   ED 72                  SBC   hl,sp   
05B4   7D                     LD   a,l   
05B5   B4                     OR   h   
05B6   28 09                  JR   z,blockEnd3   
05B8   C5                     PUSH   bc   ; bc = count, hl = BP
05B9   44 4D                  LD   bc,hl   
05BB   E1                     POP   hl   
05BC   2B                     DEC   hl   ; hl = BP-1
05BD   1B                     DEC   de   ; de = args*-1
05BE   ED B8                  LDDR      
05C0   13                     INC   de   
05C1                BLOCKEND3:      
05C1   EB                     EX   de,hl   ; sp = de = new tos*
05C2   F9                     LD   sp,hl   
05C3   ED 4B 02 55            LD   bc,(vTemp2)   
05C7   FD 2A 00 55            LD   iy,(vTemp1)   
05CB   ED 5B F2 54            LD   de,(vRecur)   ; de = recur vector
05CF   7B                     LD   a,e   ; check for NUL
05D0   B2                     OR   d   
05D1   20 02                  JR   nz,blockEnd4   
05D3   DD E9                  JP   (ix)   
05D5                BLOCKEND4:      
05D5   21 00 00               LD   hl,0   ; clear recur vector
05D8   22 F2 54               LD   (vRecur),hl   
05DB   C3 D6 09               JP   go1   ; execute de
05DE                             ; /br break from loop
05DE                             ; --
05DE                BREAK:       
05DE   E1                     POP   hl   
05DF   7D                     LD   a,l   
05E0   B4                     OR   h   
05E1   28 02                  JR   z,break1   
05E3   DD E9                  JP   (ix)   
05E5                BREAK1:      
05E5   FD 5D                  LD   e,iyl   ; get block* just under stack frame
05E7   FD 54                  LD   d,iyh   
05E9   21 08 00               LD   hl,8   
05EC   19                     ADD   hl,de   
05ED   23                     INC   hl   
05EE   23                     INC   hl   
05EF   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
05F2   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
05F5   C3 71 05               JP   blockEnd   
05F8                TICK:        
05F8                CHAR:        
05F8   21 00 00               LD   hl,0   ; if "" is empty or null
05FB                CHAR1:       
05FB   03                     INC   bc   ; point to next char
05FC   0A                     LD   a,(bc)   
05FD   FE 27                  CP   "'"   ; ' is the terminator
05FF   28 09                  JR   z,char3   
0601   FE 5C                  CP   $5c   ; \ is the escape
0603   20 02                  JR   nz,char2   
0605   03                     INC   bc   
0606   0A                     LD   a,(bc)   
0607                CHAR2:       
0607   6F                     LD   l,a   
0608   18 F1                  JR   char1   
060A                CHAR3:       
060A   E5                     PUSH   hl   
060B   DD E9                  JP   (ix)   
060D                SLASH:       
060D                COMMAND:      
060D   CD 00 0D               CALL   jumpTable   
0610   2F                     DB   "/"   ; // comment
0611   E1 06                  DW   comment   
0613   61                     DB   "a"   
0614   4C 06                  DW   command_a   
0616   62                     DB   "b"   
0617   58 06                  DW   command_b   
0619   63                     DB   "c"   ; /c chars
061A   D3 06                  DW   chars   
061C   64                     DB   "d"   ; /d decimal
061D   A6 07                  DW   decimal   
061F   66                     DB   "f"   
0620   64 06                  DW   command_f   
0622   68                     DB   "h"   ; /h hexadecimal
0623   AE 07                  DW   hexadecimal   
0625   69                     DB   "i"   
0626   82 06                  DW   command_i   
0628   6B                     DB   "k"   ; /k key
0629   CC 0A                  DW   key   
062B   6C                     DB   "l"   
062C   8E 06                  DW   command_l   
062E   6D                     DB   "m"   
062F   97 06                  DW   command_m   
0631   6E                     DB   "n"   ; /n numbers
0632   DB 06                  DW   numbers   
0634   6F                     DB   "o"   ; /o output
0635   DE 0A                  DW   output   
0637   70                     DB   "p"   
0638   A0 06                  DW   command_p   
063A   72                     DB   "r"   
063B   AF 06                  DW   command_r   
063D   73                     DB   "s"   ; /s size
063E   AF 0C                  DW   size   
0640   74                     DB   "t"   ; /t true
0641   26 09                  DW   true1   
0643   76                     DB   "v"   
0644   BE 06                  DW   command_v   
0646   78                     DB   "x"   ; /x xor
0647   CA 03                  DW   xor   
0649   00                     DB   NUL   
064A   95 07                  DW   div   
064C                COMMAND_A:      
064C   CD 00 0D               CALL   jumpTable   
064F   62                     DB   "b"   ; /ab absolute
0650   DA 04                  DW   absolute   
0652   64                     DB   "d"   ; /ad address of
0653   E7 04                  DW   addrOf   
0655   00                     DB   NUL   
0656   32 09                  DW   error1   
0658                COMMAND_B:      
0658   CD 00 0D               CALL   jumpTable   
065B   72                     DB   "r"   ; /br break
065C   DE 05                  DW   break   
065E   79                     DB   "y"   ; /by cold boot
065F   C7 0D                  DW   coldStart   
0661   00                     DB   NUL   
0662   32 09                  DW   error1   
0664                COMMAND_F:      
0664   CD 00 0D               CALL   jumpTable   
0667   65                     DB   "e"   ; /fe forEach
0668   3E 09                  DW   forEach   
066A   6C                     DB   "l"   ; /fl flush output buffer
066B   39 09                  DW   flush   
066D   73                     DB   "s"   ; /fs funcSrc
066E   8B 09                  DW   funcSrc   
0670   31                     DB   "1"   
0671   CC 0E                  DW   f1   
0673   32                     DB   "2"   
0674   D9 0E                  DW   f2   
0676   33                     DB   "3"   
0677   E5 0E                  DW   f3   
0679   34                     DB   "4"   
067A   F1 0E                  DW   f4   
067C   7A                     DB   "z"   
067D   C6 09                  DW   fz   
067F   00                     DB   NUL   
0680   2C 09                  DW   false1   
0682                COMMAND_I:      
0682   CD 00 0D               CALL   jumpTable   
0685   6E                     DB   "n"   ; /in input
0686   C1 0A                  DW   input   
0688   76                     DB   "v"   ; /iv invert
0689   D5 03                  DW   invert   
068B   00                     DB   NUL   
068C   32 09                  DW   error1   
068E                COMMAND_L:      
068E   CD 00 0D               CALL   jumpTable   
0691   69                     DB   "i"   ; /li literal
0692   D5 0A                  DW   literal   
0694   00                     DB   NUL   
0695   32 09                  DW   error1   
0697                COMMAND_M:      
0697   CD 00 0D               CALL   jumpTable   
069A   70                     DB   "p"   ; /mp map
069B   E7 0A                  DW   map   
069D   00                     DB   NUL   
069E   32 09                  DW   error1   
06A0                COMMAND_P:      
06A0   CD 00 0D               CALL   jumpTable   
06A3   62                     DB   "b"   ; /pb print buffer
06A4   6B 0C                  DW   printBuffer   
06A6   63                     DB   "c"   ; /pc print chars
06A7   91 0C                  DW   printChars   
06A9   6B                     DB   "k"   ; /pk print stack
06AA   D3 09                  DW   printStack   
06AC   00                     DB   NUL   
06AD   32 09                  DW   error1   
06AF                COMMAND_R:      
06AF   CD 00 0D               CALL   jumpTable   
06B2   63                     DB   "c"   ; /rc tail call optimisation
06B3   A3 0C                  DW   recur   
06B5   65                     DB   "e"   ; /re remainder
06B6   A9 0C                  DW   remain   
06B8   67                     DB   "g"   
06B9   77 0B                  DW   rangeSrc   
06BB   00                     DB   NUL   
06BC   32 09                  DW   error1   
06BE                COMMAND_V:      
06BE   CD 00 0D               CALL   jumpTable   
06C1   62                     DB   "b"   
06C2   C6 0C                  DW   varBufPtr   
06C4   68                     DB   "h"   
06C5   CF 0C                  DW   varHeapPtr   
06C7   74                     DB   "t"   
06C8   D8 0C                  DW   varTIBPtr   
06CA   42                     DB   "B"   
06CB   B7 0C                  DW   constBufStart   
06CD   54                     DB   "T"   
06CE   C1 0C                  DW   constTIBStart   
06D0   00                     DB   NUL   
06D1   32 09                  DW   error1   
06D3                CHARS:       
06D3   21 01 00               LD   hl,1   
06D6                CHARS1:      
06D6   22 E6 54               LD   (vDataWidth),hl   
06D9   DD E9                  JP   (ix)   
06DB                NUMBERS:      
06DB   21 02 00               LD   hl,2   
06DE   C3 D6 06               JP   chars1   
06E1                COMMENT:      
06E1   03                     INC   bc   ; point to next char
06E2   0A                     LD   a,(bc)   
06E3   FE 20                  CP   " "   ; terminate on any char less than SP
06E5   30 FA                  JR   nc,comment   
06E7   0B                     DEC   bc   
06E8   DD E9                  JP   (ix)   
06EA                             ; ";" createFunc
06EA                             ; arg_list* block* -- func*
06EA                SEMICOLON:      
06EA                CREATEFUNC:      
06EA   ED 43 00 55            LD   (vTemp1),bc   ; save IP
06EE   E1                     POP   hl   ; hl = block*
06EF   22 02 55               LD   (vTemp2),hl   ; save block*
06F2   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
06F5   FD 56 05               LD   d,(iy+5)   
06F8   7B                     LD   a,e   ; if arg_list == null then make a func
06F9   B2                     OR   d   
06FA   20 09                  JR   nz,createFunc0   
06FC   21 00 00               LD   hl,0   ; partial_array = null
06FF   ED 5B F0 54            LD   de,(vHeapPtr)   ; de = compile*
0703   18 65                  JR   createFunc5   
0705                CREATEFUNC0:      
0705   E1                     POP   hl   ; hl = inner_arg_list*
0706   E5                     PUSH   hl   ; save inner_arg_list
0707   ED 5B F0 54            LD   de,(vHeapPtr)   ; de = compile*
070B   7E                     LD   a,(hl)   ; compile inner_num_locals
070C   4F                     LD   c,a   ; b = inner_num_locals
070D   12                     LD   (de),a   
070E   23                     INC   hl   
070F   13                     INC   de   
0710   7E                     LD   a,(hl)   ; compile inner_length
0711   12                     LD   (de),a   
0712   91                     SUB   c   ; a = inner_num args
0713   23                     INC   hl   
0714   13                     INC   de   
0715   B7                     OR   a   ; compile args if inner_length > 0
0716   28 05                  JR   z,createFunc1   
0718   4F                     LD   c,a   ; bc = a
0719   06 00                  LD   b,0   
071B   ED B0                  LDIR      
071D                CREATEFUNC1:      
071D   EB                     EX   de,hl   ; hl = outer_arg_list
071E   FD 5E 04               LD   e,(iy+4)   
0721   FD 56 05               LD   d,(iy+5)   
0724   EB                     EX   de,hl   
0725   23                     INC   hl   ; a = outer_length
0726   7E                     LD   a,(hl)   
0727   23                     INC   hl   
0728   B7                     OR   a   
0729   28 05                  JR   z,createFunc2   
072B   4F                     LD   c,a   
072C   06 00                  LD   b,0   
072E   ED B0                  LDIR      ; append outer_args
0730                CREATEFUNC2:      ; a = outer_length
0730   47                     LD   b,a   ; b = a = outer_length
0731   2A F0 54               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0734   23                     INC   hl   
0735   7E                     LD   a,(hl)   ; add outer_length to new length
0736   80                     ADD   a,b   
0737   77                     LD   (hl),a   
0738   2B                     DEC   hl   
0739   78                     LD   a,b   ; save outer_length in a'
073A   08                     EX   af,af'   
073B   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
073C   7E                     LD   a,(hl)   ; c = a = inner_num_locals
073D   B7                     OR   a   
073E   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0740   4F                     LD   c,a   ; c = inner_num_locals
0741   06 00                  LD   b,0   ; bc = inner_num_locals
0743   23                     INC   hl   ; a = inner_length
0744   7E                     LD   a,(hl)   
0745   91                     SUB   c   ; a = inner_num_args
0746   23                     INC   hl   ; hl = inner_arg_chars
0747   85                     ADD   a,l   ; hl += a
0748   6F                     LD   l,a   
0749   3E 00                  LD   a,0   
074B   84                     ADD   a,h   
074C   67                     LD   h,a   
074D   ED B0                  LDIR      ; append inner_locals
074F                CREATEFUNC2A:      
074F   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0750   12                     LD   (de),a   ; compile partial_array length field
0751   13                     INC   de   
0752   AF                     XOR   a   
0753   12                     LD   (de),a   
0754   13                     INC   de   
0755   D5                     PUSH   de   ; push partial_array*
0756   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0757   FD 5E 02               LD   e,(iy+2)   
075A   FD 56 03               LD   d,(iy+3)   
075D   EB                     EX   de,hl   
075E                CREATEFUNC3:      
075E   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
075F   4E                     LD   c,(hl)   
0760   2B                     DEC   hl   
0761   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0762   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0763   13                     INC   de   
0764   79                     LD   a,c   
0765   12                     LD   (de),a   
0766   13                     INC   de   
0767   10 F5                  DJNZ   createFunc3   ; b = outer_length
0769                CREATEFUNC4:      
0769   E1                     POP   hl   ; hl = partial_array*
076A                CREATEFUNC5:      
076A   C1                     POP   bc   ; bc = new_arg_list*
076B   D5                     PUSH   de   ; return new func*
076C   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
076D   73                     LD   (hl),e   ; compile partial_array* to func
076E   23                     INC   hl   
076F   72                     LD   (hl),d   
0770   23                     INC   hl   
0771   ED 5B 02 55            LD   de,(vTemp2)   ; de = block*
0775   73                     LD   (hl),e   ; compile block* to func
0776   23                     INC   hl   
0777   72                     LD   (hl),d   
0778   23                     INC   hl   
0779   71                     LD   (hl),c   ; compile new_arg_list* to func
077A   23                     INC   hl   
077B   70                     LD   (hl),b   
077C   23                     INC   hl   
077D   22 F0 54               LD   (vHeapPtr),hl   ; bump heap ptr
0780   ED 4B 00 55            LD   bc,(vTemp1)   ; restore IP
0784   DD E9                  JP   (ix)   
0786                             ; , discard stack item
0786                             ; x y -- x
0786                COMMA:       
0786                DISCARD:      
0786   FD 54                  LD   d,iyh   ; limit this to SP <= BP
0788   FD 5D                  LD   e,iyl   
078A   EB                     EX   de,hl   
078B   B7                     OR   a   
078C   ED 72                  SBC   hl,sp   
078E   CB 7C                  BIT   7,h   
0790   20 01                  JR   nz,discard1   
0792   E1                     POP   hl   
0793                DISCARD1:      
0793   DD E9                  JP   (ix)   
0795                DIV:         
0795   D1                     POP   de   
0796   E1                     POP   hl   
0797   C5                     PUSH   bc   ; preserve the IP
0798   44 4D                  LD   bc,hl   
079A   CD EF 08               CALL   divide   
079D   EB                     EX   de,hl   
079E   ED 53 F6 54            LD   (vRemain),de   
07A2   C1                     POP   bc   
07A3   C3 9B 03               JP   add3   
07A6                DECIMAL:      
07A6   21 0A 00               LD   hl,10   
07A9                DECIMAL1:      
07A9   22 E8 54               LD   (vNumBase),hl   
07AC   DD E9                  JP   (ix)   
07AE                HEXADECIMAL:      
07AE   21 10 00               LD   hl,16   
07B1   C3 A9 07               JP   decimal1   
07B4                DOT:         
07B4   CD 00 0D               CALL   jumpTable   
07B7   61                     DB   "a"   ; .a print array
07B8   C6 07                  DW   bufferArray   
07BA   63                     DB   "c"   ; .c print char
07BB   CE 08                  DW   bufferChar   
07BD   73                     DB   "s"   ; .s print string
07BE   B4 08                  DW   bufferString   
07C0   78                     DB   "x"   ; .x print x chars
07C1   D3 08                  DW   bufferXChars   
07C3   00                     DB   NUL   ; .  print number
07C4   0F 08                  DW   bufferNumber   
07C6                          ;*Macro unroll: FUNC bufferArray, 2, "abc"
07C6                BUFFERARRAY:      
07C6   CD D5 09               CALL   go   
07C9   00 00                  DW   NUL   
07CB   D4 07                  DW   bufferArrayM_1611S1096   
07CD   CF 07                  DW   $+2   
07CF   02                     DB   2   
07D0   03 61 62 63            .PSTR   "abc"   
07D4                BUFFERARRAYM_1611S1096:      
07D4   7B 22 5B 20 22 2E 73 20 25 61 20 2F 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 22 5D 22 2E 73 7D 00 00 .CSTR   "{",DQ,"[ ",DQ,".s %a /s%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ",DQ,"]",DQ,".s}",0   
080F                             ; /bd buffer decimal
080F                             ; value --
080F                BUFFERNUMBER:      
080F   3A E8 54               LD   a,(vNumBase)   
0812   FE 10                  CP   16   
0814   28 66                  JR   z,bufferHex   ; else falls through
0816                             ; /bd buffer decimal
0816                             ; value --
0816                BUFFERDEC:      
0816   ED 5B EC 54            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
081A   D9                     EXX      
081B   E1                     POP   hl   ; hl = value
081C   CD 30 08               CALL   bufferDec0   
081F   D9                     EXX      ; de = buffer*' bc = IP
0820   3E 20                  LD   a," "   ; append space to buffer
0822   12                     LD   (de),a   
0823   1C                     INC   e   ; buffer*++, wraparound
0824   CC E9 0C               CALL   z,flushBuffer   
0827   2A EC 54               LD   hl,(vBufPtr)   ; hl = buffer*
082A   ED 53 EC 54            LD   (vBufPtr),de   ; update buffer* with buffer*'
082E   DD E9                  JP   (ix)   
0830                             ; hl = value
0830                             ; de' = buffer*
0830                             ; a, bc, de, hl destroyed
0830                BUFFERDEC0:      
0830   CB 7C                  BIT   7,h   
0832   28 0C                  JR   z,bufferDec1   
0834   D9                     EXX      
0835   3E 2D                  LD   a,"-"   
0837   12                     LD   (de),a   
0838   13                     INC   de   
0839   D9                     EXX      
083A   AF                     XOR   a   
083B   95                     SUB   l   
083C   6F                     LD   l,a   
083D   9F                     SBC   a,a   
083E   94                     SUB   h   
083F   67                     LD   h,a   
0840                BUFFERDEC1:      
0840   0E 00                  LD   c,0   ; leading zeros flag = false
0842   11 F0 D8               LD   de,-10000   
0845   CD 60 08               CALL   bufferDec2   
0848   11 18 FC               LD   de,-1000   
084B   CD 60 08               CALL   bufferDec2   
084E   11 9C FF               LD   de,-100   
0851   CD 60 08               CALL   bufferDec2   
0854   1E F6                  LD   e,-10   
0856   CD 60 08               CALL   bufferDec2   
0859   0C                     INC   c   ; flag = true for at least digit
085A   1E FF                  LD   e,-1   
085C   CD 60 08               CALL   bufferDec2   
085F   C9                     RET      
0860                BUFFERDEC2:      
0860   06 2F                  LD   b,"0"-1   
0862                BUFFERDEC3:      
0862   04                     INC   b   
0863   19                     ADD   hl,de   
0864   38 FC                  JR   c,bufferDec3   
0866   ED 52                  SBC   hl,de   
0868   3E 30                  LD   a,"0"   
086A   B8                     CP   b   
086B   20 05                  JR   nz,bufferDec4   
086D   AF                     XOR   a   
086E   B1                     OR   c   
086F   C8                     RET   z   
0870   18 01                  JR   bufferDec5   
0872                BUFFERDEC4:      
0872   0C                     INC   c   
0873                BUFFERDEC5:      
0873   78                     LD   a,b   
0874   D9                     EXX      
0875   12                     LD   (de),a   
0876   1C                     INC   e   
0877   CC E9 0C               CALL   z,flushBuffer   
087A   D9                     EXX      
087B   C9                     RET      
087C                             ; /bh buffer hex
087C                             ; value --
087C                BUFFERHEX:      
087C   E1                     POP   hl   ; hl = value
087D   ED 5B EC 54            LD   de,(vBufPtr)   
0881   3E 24                  LD   a,"$"   ; # prefix
0883   12                     LD   (de),a   
0884   1C                     INC   e   ; buffer*++, wraparound
0885   CC E9 0C               CALL   z,flushBuffer   
0888   7C                     LD   a,h   
0889   CD 9D 08               CALL   bufferHex1   
088C   7D                     LD   a,l   
088D   CD 9D 08               CALL   bufferHex1   
0890   3E 20                  LD   a," "   ; append space to buffer
0892   12                     LD   (de),a   
0893   1C                     INC   e   ; buffer*++, wraparound
0894   CC E9 0C               CALL   z,flushBuffer   
0897   ED 53 EC 54            LD   (vBufPtr),de   
089B   DD E9                  JP   (ix)   
089D                BUFFERHEX1:      
089D   F5                     PUSH   af   
089E   1F                     RRA      
089F   1F                     RRA      
08A0   1F                     RRA      
08A1   1F                     RRA      
08A2   CD A6 08               CALL   bufferHex2   
08A5   F1                     POP   af   
08A6                BUFFERHEX2:      
08A6   E6 0F                  AND   0x0F   
08A8   C6 90                  ADD   a,0x90   
08AA   27                     DAA      
08AB   CE 40                  ADC   a,0x40   
08AD   27                     DAA      
08AE   12                     LD   (de),a   
08AF   1C                     INC   e   ; buffer*++, wraparound
08B0   CC E9 0C               CALL   z,flushBuffer   
08B3   C9                     RET      
08B4                             ; /bs buffered string
08B4                             ; string* --
08B4                BUFFERSTRING:      
08B4   E1                     POP   hl   ; hl = string*
08B5   ED 5B EC 54            LD   de,(vBufPtr)   ; de = buffer*
08B9   18 06                  JR   bufferString1   
08BB                BUFFERSTRING0:      
08BB   12                     LD   (de),a   ; a -> buffer*
08BC   1C                     INC   e   ; buffer*++, wraparound
08BD   CC E9 0C               CALL   z,flushBuffer   
08C0   23                     INC   hl   
08C1                BUFFERSTRING1:      
08C1   7E                     LD   a,(hl)   ; a <- string*
08C2   B7                     OR   a   ; if NUL exit loop
08C3   20 F6                  JR   nz,bufferString0   
08C5   2A EC 54               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
08C8   ED 53 EC 54            LD   (vBufPtr),de   ; save buffer*' in pointer
08CC   DD E9                  JP   (ix)   
08CE                             ; /bc buffer char
08CE                             ; char --
08CE                BUFFERCHAR:      
08CE   21 01 00               LD   hl,1   
08D1   18 01                  JR   bufferXChars0   
08D3                             ; /bx buffered x chars
08D3                             ; char length --
08D3                BUFFERXCHARS:      
08D3   E1                     POP   hl   ; hl = length
08D4                BUFFERXCHARS0:      
08D4   D1                     POP   de   ; a' = char
08D5   7B                     LD   a,e   
08D6   08                     EX   af,af'   
08D7   ED 5B EC 54            LD   de,(vBufPtr)   ; de = buffer*
08DB   18 08                  JR   bufferXChars2   
08DD                BUFFERXCHARS1:      
08DD   08                     EX   af,af'   
08DE   12                     LD   (de),a   
08DF   08                     EX   af,af'   
08E0   1C                     INC   e   ; buffer*++, wraparound
08E1   CC E9 0C               CALL   z,flushBuffer   
08E4   2B                     DEC   hl   
08E5                BUFFERXCHARS2:      
08E5   7D                     LD   a,l   
08E6   B4                     OR   h   
08E7   20 F4                  JR   nz,bufferXChars1   
08E9   ED 53 EC 54            LD   (vBufPtr),de   ; save buffer*'
08ED   DD E9                  JP   (ix)   
08EF                             ; division subroutine.
08EF                             ; bc: divisor, de: dividend, hl: remainder
08EF                DIVIDE:      
08EF   21 00 00               LD   hl,0   ; zero the remainder
08F2   3E 10                  LD   a,16   ; loop counter
08F4                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
08F4   CB 21                  SLA   c   
08F6   CB 10                  RL   b   
08F8   ED 6A                  ADC   hl,hl   
08FA   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
08FC   38 03                  JR   c,divide2   
08FE   0C                     INC   c   
08FF   18 01                  JR   divide3   
0901                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0901   19                     ADD   hl,de   
0902                DIVIDE3:      
0902   3D                     DEC   a   
0903   20 EF                  JR   nz,divide1   
0905   50 59                  LD   de,bc   ; result from bc to de
0907   C9                     RET      
0908                             ; hl = value1, de = value2
0908                             ; hl = result
0908                EQUALS:      
0908   B7                     OR   a   ; reset the carry flag
0909   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
090B   28 19                  JR   z,true1   
090D   C3 2C 09               JP   false1   
0910                NOTEQUALS:      
0910   B7                     OR   a   ; reset the carry flag
0911   ED 52                  SBC   hl,de   
0913   C2 26 09               JP   nz,true1   
0916   C3 2C 09               JP   false1   
0919                             ; hl = value1 de = value2
0919                             ; hl = result
0919                LESSTHANEQ:      
0919   B7                     OR   a   
091A   ED 52                  SBC   hl,de   
091C   18 05                  JR   lessthan1   
091E                             ; hl = value1 de = value2
091E                             ; hl = result
091E                LESSTHAN:      
091E   B7                     OR   a   
091F   ED 52                  SBC   hl,de   
0921   28 09                  JR   z,false1   
0923                LESSTHAN1:      
0923   FA 2C 09               JP   m,false1   
0926                TRUE1:       
0926   21 FF FF               LD   hl,TRUE   
0929   E5                     PUSH   hl   
092A   DD E9                  JP   (ix)   
092C                NULL1:       
092C                FALSE1:      
092C   21 00 00               LD   hl,FALSE   
092F   E5                     PUSH   hl   
0930   DD E9                  JP   (ix)   
0932                ERROR1:      
0932   21 01 00               LD   hl,1   ; error 1: unknown command
0935   E5                     PUSH   hl   
0936   C3 84 0E               JP   error   
0939                             ; /fl flush
0939                             ; --
0939                FLUSH:       
0939   CD E9 0C               CALL   flushBuffer   
093C   DD E9                  JP   (ix)   
093E                             ; /fe forEach
093E                             ; src proc --
093E                          ;*Macro unroll: FUNC forEach, 1, "spT"
093E                FOREACH:      
093E   CD D5 09               CALL   go   
0941   00 00                  DW   NUL   
0943   4C 09                  DW   forEachM_1838S1342   
0945   47 09                  DW   $+2   
0947   01                     DB   1   
0948   03 73 70 54            .PSTR   "spT"   
094C                FOREACHM_1838S1342:      
094C   7B                     DB   "{"   
094D   5B 30 5D 25 54 3D      DB   "[0]%T="   
0953   3A 64 74 7B            DB   ":dt{"   ; return talkback to receive data
0957   32 25 74 21 3D 2F 62 72 DB   "2%t!=/br"   ; break if type = 2
095F   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0964   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0976   3F 3F                  DB   "??"   ; ifte:
0978   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0981   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   
0989   7D                     DB   "}"   
098A   00                     DB   0   
098B                             ; ; /fs funcSrc
098B                             ; ; func -- src
098B                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
098B                FUNCSRC:      ; :f func or block
098B   CD D5 09               CALL   go   
098E   00 00                  DW   NUL   
0990   97 09                  DW   funcSrcM_1852S1357   
0992   94 09                  DW   $+2   
0994   00                     DB   0   
0995   01 66                  .PSTR   "f"   
0997                FUNCSRCM_1852S1357:      
0997   7B                     DB   "{"   
0998   3A 6B 74 7B            DB   ":kt{"   ; :kt sink, type
099C   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
09A4   3A 64 74 7B            DB   ":dt{"   
09A8   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
09BA   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
09C2   7D 3B                  DB   "};"   
09C4   7D                     DB   "}"   
09C5   00                     DB   0   
09C6                FZ:          
09C6   21 00 52               LD   hl,STACK   
09C9   ED 72                  SBC   hl,sp   
09CB   CB 3C                  SRL   h   
09CD   CB 1D                  RR   l   
09CF   E5                     PUSH   hl   
09D0   C3 0F 08               JP   bufferNumber   
09D3                             ; /pk print stack
09D3                             ; --
09D3                PRINTSTACK:      
09D3                             ;     ld (vTemp1),bc
09D3                             ;     call printStr
09D3                             ;     .cstr "=> "
09D3                             ;     ld hl,STACK
09D3                             ;     sbc hl,sp
09D3                             ;     srl h
09D3                             ;     rr l
09D3                             ;     ld bc,hl
09D3                             ;     ld hl,STACK
09D3                             ;     jr printStack2
09D3                             ; printStack1:
09D3                             ;     dec bc
09D3                             ;     dec hl
09D3                             ;     ld d,(hl)
09D3                             ;     dec hl
09D3                             ;     ld e,(hl)
09D3                             ;     ex de,hl
09D3                             ;     call prthex
09D3                             ;     ex de,hl
09D3                             ;     ld a," "
09D3                             ;     call putchar
09D3                             ; printStack2:
09D3                             ;     ld a,c
09D3                             ;     or b
09D3                             ;     jr nz,printStack1
09D3                             ;     call prompt
09D3                             ;     ld bc,(vTemp1)
09D3   DD E9                  JP   (ix)   
09D5                             ; execute a block of code which ends with }
09D5                             ; creates a root scope if BP == stack
09D5                             ; else uses outer scope
09D5                CARET:       
09D5                GO:          
09D5   D1                     POP   de   ; de = block*
09D6                GO1:         
09D6   7B                     LD   a,e   ; if block* == null, exit
09D7   B2                     OR   d   
09D8   20 02                  JR   nz,go2   
09DA   DD E9                  JP   (ix)   
09DC                GO2:         
09DC   1A                     LD   a,(de)   
09DD   FE 7B                  CP   "{"   
09DF   28 06                  JR   z,goBlock   
09E1   FE 28                  CP   "("   
09E3   C2 1A 0A               JP   nz,goFunc   
09E6   D5                     PUSH   de   ; push de just before stack frame
09E7                GOBLOCK:      
09E7   ED 53 00 55            LD   (vTemp1),de   ; save de
09EB   21 00 52               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
09EE   FD 54                  LD   d,iyh   
09F0   FD 5D                  LD   e,iyl   
09F2   B7                     OR   a   ; if stack* == BP then this is the root_scope
09F3   ED 52                  SBC   hl,de   
09F5   ED 5B 00 55            LD   de,(vTemp1)   ; restore de
09F9   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
09FA   B4                     OR   h   
09FB   3E 00                  LD   a,0   
09FD   28 6A                  JR   z,goFunc8   
09FF   C5                     PUSH   bc   ; push IP
0A00   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0A03   FD 46 05               LD   b,(iy+5)   
0A06   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0A09   FD 66 03               LD   h,(iy+3)   
0A0C                GOBLOCK2:      
0A0C   C5                     PUSH   bc   ; arg_list*
0A0D   E5                     PUSH   hl   ; first_arg*
0A0E   FD E5                  PUSH   iy   ; push BP
0A10   FD 21 00 00            LD   iy,0   ; BP = SP
0A14   FD 39                  ADD   iy,sp   
0A16                GOBLOCK3:      
0A16   42 4B                  LD   bc,de   ; bc = de = block*-1
0A18   DD E9                  JP   (ix)   
0A1A                GOFUNC:      ; execute func
0A1A   EB                     EX   de,hl   ; hl = func*
0A1B   5E                     LD   e,(hl)   ; de = partial_array*
0A1C   23                     INC   hl   
0A1D   56                     LD   d,(hl)   
0A1E   23                     INC   hl   
0A1F   7B                     LD   a,e   ; if partial_array* == null skip
0A20   B2                     OR   d   
0A21   28 21                  JR   z,goFunc3   
0A23   ED 43 00 55            LD   (vTemp1),bc   
0A27   22 02 55               LD   (vTemp2),hl   ; save bc,hl
0A2A   EB                     EX   de,hl   ; hl = partial_array*
0A2B   2B                     DEC   hl   ; bc = count
0A2C   46                     LD   b,(hl)   
0A2D   2B                     DEC   hl   
0A2E   4E                     LD   c,(hl)   
0A2F   23                     INC   hl   ; hl = array data*
0A30   23                     INC   hl   
0A31   18 06                  JR   goFunc2   ; push each item on stack
0A33                GOFUNC1:      
0A33   5E                     LD   e,(hl)   ; de = partial item
0A34   23                     INC   hl   
0A35   56                     LD   d,(hl)   
0A36   23                     INC   hl   
0A37   D5                     PUSH   de   ; push on stack
0A38   0B                     DEC   bc   
0A39                GOFUNC2:      
0A39   79                     LD   a,c   ; if count != 0 then loop
0A3A   B0                     OR   b   
0A3B   20 F6                  JR   nz,goFunc1   
0A3D   ED 4B 00 55            LD   bc,(vTemp1)   ; restore bc
0A41   2A 02 55               LD   hl,(vTemp2)   ; restore hl
0A44                GOFUNC3:      
0A44   5E                     LD   e,(hl)   ; de = block*
0A45   23                     INC   hl   
0A46   56                     LD   d,(hl)   
0A47   23                     INC   hl   
0A48   ED 53 00 55            LD   (vTemp1),de   ; save block*
0A4C   5E                     LD   e,(hl)   ; de = arg_list*
0A4D   23                     INC   hl   
0A4E   56                     LD   d,(hl)   
0A4F   23                     INC   hl   
0A50   EB                     EX   de,hl   ; hl = arg_list*
0A51   ED 5B 00 55            LD   de,(vTemp1)   ; restore de = block*
0A55   7D                     LD   a,l   ; if arg_list* == null a = 0
0A56   B4                     OR   h   
0A57   20 03                  JR   nz,goFunc4   
0A59   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0A5A   18 0D                  JR   goFunc8   
0A5C                GOFUNC4:      ; allocate locals
0A5C   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0A5D   18 03                  JR   goFunc6   
0A5F                GOFUNC5:      ; loop
0A5F   3B                     DEC   sp   
0A60   3B                     DEC   sp   
0A61   3D                     DEC   a   
0A62                GOFUNC6:      
0A62   B7                     OR   a   
0A63   20 FA                  JR   nz,goFunc5   ; end loop
0A65                GOFUNC7:      
0A65   23                     INC   hl   ; a = num_args* x 2
0A66   7E                     LD   a,(hl)   
0A67   2B                     DEC   hl   
0A68   87                     ADD   a,a   ; a *= 2
0A69                GOFUNC8:      
0A69   C5                     PUSH   bc   ; push IP
0A6A   44 4D                  LD   bc,hl   
0A6C   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0A6F   85                     ADD   a,l   
0A70   6F                     LD   l,a   
0A71   39                     ADD   hl,sp   
0A72   18 98                  JR   goBlock2   
0A74                DOLLAR:      
0A74                HEXNUM:      
0A74   21 00 00               LD   hl,0   ; Clear hl to accept the number
0A77                HEXNUM1:      
0A77   03                     INC   bc   
0A78   0A                     LD   a,(bc)   ; Get the character which is a numeral
0A79   CB 77                  BIT   6,a   ; is it uppercase alpha?
0A7B   28 02                  JR   z,hexnum2   ; no a decimal
0A7D   D6 07                  SUB   7   ; sub 7  to make $a - $F
0A7F                HEXNUM2:      
0A7F   D6 30                  SUB   $30   ; form decimal digit
0A81   DA 69 0B               JP   c,num2   
0A84   FE 10                  CP   $0F+1   
0A86   D2 69 0B               JP   nc,num2   
0A89   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0A8A   29                     ADD   hl,hl   ; 4X
0A8B   29                     ADD   hl,hl   ; 8X
0A8C   29                     ADD   hl,hl   ; 16X
0A8D   85                     ADD   a,l   ; add into bottom of hl
0A8E   6F                     LD   l,a   
0A8F   18 E6                  JR   hexnum1   
0A91                UPCASE:      
0A91   0A                     LD   a,(bc)   ; a = identifier char
0A92   D6 41                  SUB   "A"   ; "A" = 0
0A94   18 05                  JR   ident1   
0A96                LOWCASE:      
0A96   0A                     LD   a,(bc)   
0A97   D6 61                  SUB   "a"   
0A99   C6 1A                  ADD   a,26   
0A9B                IDENT1:      
0A9B   87                     ADD   a,a   ; l = a * 2
0A9C   6F                     LD   l,a   
0A9D   26 54                  LD   h,msb(vars)   
0A9F   22 F4 54               LD   (vPointer),hl   ; store address in setter
0AA2   5E                     LD   e,(hl)   
0AA3   23                     INC   hl   
0AA4   56                     LD   d,(hl)   
0AA5   D5                     PUSH   de   
0AA6   DD E9                  JP   (ix)   
0AA8                             ; if
0AA8                             ; condition then -- value
0AA8                QUESTION:      
0AA8                IF:          
0AA8   03                     INC   bc   
0AA9   0A                     LD   a,(bc)   
0AAA   FE 3F                  CP   "?"   
0AAC   28 06                  JR   z,ifte   
0AAE   0B                     DEC   bc   
0AAF   11 00 00               LD   de,NUL   ; NUL pointer for else
0AB2   18 01                  JR   ifte1   
0AB4                             ; ifte
0AB4                             ; condition then else -- value
0AB4                IFTE:        
0AB4   D1                     POP   de   ; de = else
0AB5                IFTE1:       
0AB5   E1                     POP   hl   ; hl = then
0AB6   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0AB7   7C                     LD   a,h   
0AB8   B5                     OR   l   
0AB9   E1                     POP   hl   ; hl = then
0ABA   CA D6 09               JP   z,go1   ; if z de = else
0ABD   EB                     EX   de,hl   ; condition = false, de = then
0ABE   C3 D6 09               JP   go1   
0AC1                             ; Z80 port input
0AC1                             ; port -- value
0AC1                INPUT:       
0AC1   E1                     POP   hl   
0AC2   59                     LD   e,c   ; save IP
0AC3   4D                     LD   c,l   
0AC4   ED 68                  IN   l,(c)   
0AC6   26 00                  LD   h,0   
0AC8   4B                     LD   c,e   ; restore IP
0AC9   E5                     PUSH   hl   
0ACA   DD E9                  JP   (ix)   
0ACC                KEY:         
0ACC   CD 81 00               CALL   getchar   
0ACF   26 00                  LD   h,0   
0AD1   6F                     LD   l,a   
0AD2   E5                     PUSH   hl   
0AD3   DD E9                  JP   (ix)   
0AD5                             ; /li literal
0AD5                             ; low level operation
0AD5                             ; reads the next two bytes and
0AD5                             ; pushes a word on the stack
0AD5                             ; -- value
0AD5                LITERAL:      
0AD5   03                     INC   bc   
0AD6   0A                     LD   a,(bc)   
0AD7   6F                     LD   l,a   
0AD8   03                     INC   bc   
0AD9   0A                     LD   a,(bc)   
0ADA   67                     LD   h,a   
0ADB   E5                     PUSH   hl   
0ADC   DD E9                  JP   (ix)   
0ADE                             ; Z80 port output
0ADE                             ; value port --
0ADE                OUTPUT:      
0ADE   E1                     POP   hl   
0ADF   59                     LD   e,c   ; save IP
0AE0   4D                     LD   c,l   
0AE1   E1                     POP   hl   
0AE2   ED 69                  OUT   (c),l   
0AE4   4B                     LD   c,e   ; restore IP
0AE5   DD E9                  JP   (ix)   
0AE7                             ; /mp map
0AE7                             ; src func -- src1
0AE7                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map
0AE7                MAP:         ; map
0AE7   CD D5 09               CALL   go   
0AEA   00 00                  DW   NUL   
0AEC   F4 0A                  DW   mapM_2122S1641   
0AEE   F0 0A                  DW   $+2   
0AF0   00                     DB   0   
0AF1   02 73 66               .PSTR   "sf"   
0AF4                MAPM_2122S1641:      
0AF4   7B                     DB   "{"   
0AF5   3A 6B 74 7B            DB   ":kt{"   
0AF9   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
0B01   3A 64 74 7B            DB   ":dt{"   ; call source with tb
0B05   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0B0A   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
0B16   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0B1F   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   
0B27   7D 3B                  DB   "};"   
0B29   7D                     DB   "}"   
0B2A   00                     DB   0   
0B2B                STAR:        
0B2B                MUL:         
0B2B   D1                     POP   de   ; get first value
0B2C   E1                     POP   hl   
0B2D                MUL2:        
0B2D   C5                     PUSH   bc   ; Preserve the IP
0B2E   44 4D                  LD   bc,hl   ; bc = 2nd value
0B30   21 00 00               LD   hl,0   
0B33   3E 10                  LD   a,16   
0B35                MUL3:        
0B35   29                     ADD   hl,hl   
0B36   CB 13                  RL   e   
0B38   CB 12                  RL   d   
0B3A   30 04                  JR   nc,$+6   
0B3C   09                     ADD   hl,bc   
0B3D   30 01                  JR   nc,$+3   
0B3F   13                     INC   de   
0B40   3D                     DEC   a   
0B41   20 F2                  JR   nz,mul3   
0B43   C1                     POP   bc   ; Restore the IP
0B44   C3 9B 03               JP   add3   
0B47                NUM:         
0B47   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B4A   0A                     LD   a,(bc)   ; Get numeral or -
0B4B   FE 2D                  CP   "-"   
0B4D   20 01                  JR   nz,num0   
0B4F   03                     INC   bc   ; move to next char, no flags affected
0B50                NUM0:        
0B50   08                     EX   af,af'   ; save zero flag = 0 for later
0B51                NUM1:        
0B51   0A                     LD   a,(bc)   ; read digit
0B52   D6 30                  SUB   "0"   ; less than 0?
0B54   38 13                  JR   c,num2   ; not a digit, exit loop
0B56   FE 0A                  CP   10   ; greater that 9?
0B58   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B5A   03                     INC   bc   ; inc IP
0B5B   54 5D                  LD   de,hl   ; multiply hl * 10
0B5D   29                     ADD   hl,hl   
0B5E   29                     ADD   hl,hl   
0B5F   19                     ADD   hl,de   
0B60   29                     ADD   hl,hl   
0B61   85                     ADD   a,l   ; add digit in a to hl
0B62   6F                     LD   l,a   
0B63   3E 00                  LD   a,0   
0B65   8C                     ADC   a,h   
0B66   67                     LD   h,a   
0B67   18 E8                  JR   num1   
0B69                NUM2:        
0B69   0B                     DEC   bc   
0B6A   08                     EX   af,af'   ; restore zero flag
0B6B   20 07                  JR   nz,num3   
0B6D   EB                     EX   de,hl   ; negate the value of hl
0B6E   21 00 00               LD   hl,0   
0B71   B7                     OR   a   ; jump to sub2
0B72   ED 52                  SBC   hl,de   
0B74                NUM3:        
0B74   E5                     PUSH   hl   ; Put the number on the stack
0B75   DD E9                  JP   (ix)   ; and process the next character
0B77                             ; /rs rangeSrc
0B77                             ; begin end step -- src
0B77                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source (begin end step)
0B77                RANGESRC:      ; range source (begin end step)
0B77   CD D5 09               CALL   go   
0B7A   00 00                  DW   NUL   
0B7C   86 0B                  DW   rangeSrcM_2194S1716   
0B7E   80 0B                  DW   $+2   
0B80   01                     DB   1   
0B81   04 62 65 73 4C         .PSTR   "besL"   
0B86                RANGESRCM_2194S1716:      
0B86   7B                     DB   "{"   
0B87   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
0B92   3A 6B 74 7B            DB   ":kt{"   
0B96   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
0B9E   3A 64 74 3A 61 7B      DB   ":dt:a{"   ; return talkback to receive data
0BA4   25 4C 31 23 2F 62 72   DB   "%L1#/br"   ; if not active don't send
0BAB   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
0BB3   25 73 20 25 4C 30 23 20 2B 20 25 4C 30 23 3D DB   "%s %L0# + %L0#="   ; inc value of index by step
0BC2   31 25 74 3D 3D 2F 62 72 DB   "1%t==/br"   ; break if type != 0
0BCA   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
0BD1   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: 1: send index, 2: active = false, send quit
0BE5   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
0BED   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
0BF5   7D 3B                  DB   "};"   
0BF7   7D                     DB   "}"   
0BF8   00                     DB   0   
0BF9                RPAREN:      
0BF9   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0BFC   FD 46 09               LD   b,(iy+9)   
0BFF   DD E9                  JP   (ix)   
0C01                             ; shiftLeft
0C01                             ; value count -- value2          shift left count places
0C01                SHIFTLEFT:      
0C01   50 59                  LD   de,bc   ; save IP
0C03   C1                     POP   bc   ; bc = count
0C04   41                     LD   b,c   ; b = loop counter
0C05   E1                     POP   hl   
0C06   04                     INC   b   ; test for counter=0 case
0C07   18 01                  JR   shiftLeft2   
0C09                SHIFTLEFT1:      
0C09   29                     ADD   hl,hl   ; left shift hl
0C0A                SHIFTLEFT2:      
0C0A   10 FD                  DJNZ   shiftLeft1   
0C0C   E5                     PUSH   hl   
0C0D   42 4B                  LD   bc,de   ; restore IP
0C0F   DD E9                  JP   (ix)   
0C11                             ; shiftRight
0C11                             ; value count -- value2          shift left count places
0C11                SHIFTRIGHT:      
0C11   50 59                  LD   de,bc   ; save IP
0C13   C1                     POP   bc   ; bc = count
0C14   41                     LD   b,c   ; b = loop counter
0C15   E1                     POP   hl   
0C16   04                     INC   b   ; test for counter=0 case
0C17   18 04                  JR   shiftRight2   
0C19                SHIFTRIGHT1:      
0C19   CB 3C                  SRL   h   ; right shift hl
0C1B   CB 1D                  RR   l   
0C1D                SHIFTRIGHT2:      
0C1D   10 FA                  DJNZ   shiftRight1   
0C1F   E5                     PUSH   hl   
0C20   42 4B                  LD   bc,de   ; restore IP
0C22   DD E9                  JP   (ix)   
0C24                             ; string
0C24                             ; -- ptr                        ; points to start of string chars,
0C24                             ; length is stored at start - 2 bytes
0C24                DQUOTE:      
0C24                STRING:      
0C24   2A F0 54               LD   hl,(vHeapPtr)   ; hl = heap*
0C27   23                     INC   hl   ; skip length field to start
0C28   23                     INC   hl   
0C29   E5                     PUSH   hl   ; save start of string
0C2A   03                     INC   bc   ; point to next char
0C2B   18 03                  JR   string2   
0C2D                STRING1:      
0C2D   77                     LD   (hl),a   
0C2E   23                     INC   hl   ; increase count
0C2F   03                     INC   bc   ; point to next char
0C30                STRING2:      
0C30   0A                     LD   a,(bc)   
0C31   FE 22                  CP   DQ   ; " is the string terminator
0C33   28 04                  JR   z,string3   
0C35   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0C37   20 F4                  JR   nz,string1   
0C39                STRING3:      
0C39   AF                     XOR   a   ; write NUL to terminate string
0C3A   77                     LD   (hl),a   ; hl = end of string
0C3B   23                     INC   hl   
0C3C   22 F0 54               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0C3F   2B                     DEC   hl   ; hl = end of string without terminator
0C40   D1                     POP   de   ; de = start of string
0C41   D5                     PUSH   de   ; return start of string
0C42   B7                     OR   a   ; hl = length bytes, de = start of string
0C43   ED 52                  SBC   hl,de   
0C45   EB                     EX   de,hl   
0C46   2B                     DEC   hl   ; write length bytes to length field at start - 2
0C47   72                     LD   (hl),d   
0C48   2B                     DEC   hl   
0C49   73                     LD   (hl),e   
0C4A   DD E9                  JP   (ix)   
0C4C                MINUS:       ; negative sign or subtract
0C4C   03                     INC   bc   ; check if sign of a number
0C4D   0A                     LD   a,(bc)   
0C4E   0B                     DEC   bc   
0C4F   FE 30                  CP   "0"   
0C51   38 05                  JR   c,sub   
0C53   FE 3A                  CP   "9"+1   
0C55   DA 44 03               JP   c,num_   
0C58                SUB:         ; Subtract the value 2nd on stack from top of stack
0C58   03                     INC   bc   
0C59   FE 2D                  CP   "-"   
0C5B   20 05                  JR   nz,sub1   
0C5D   E1                     POP   hl   
0C5E   2B                     DEC   hl   
0C5F   C3 CB 04               JP   assign0   
0C62                SUB1:        
0C62   0B                     DEC   bc   
0C63   D1                     POP   de   
0C64   E1                     POP   hl   
0C65   B7                     OR   a   
0C66   ED 52                  SBC   hl,de   
0C68   C3 9B 03               JP   add3   
0C6B                             ; /pb printBuffer
0C6B                             ; --
0C6B                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
0C6B                          ;*Macro unroll: FUNC printBuffer, 0, "a"
0C6B                PRINTBUFFER:      
0C6B   CD D5 09               CALL   go   
0C6E   00 00                  DW   NUL   
0C70   77 0C                  DW   printBufferM_2310S1839   
0C72   74 0C                  DW   $+2   
0C74   00                     DB   0   
0C75   01 61                  .PSTR   "a"   
0C77                PRINTBUFFERM_2310S1839:      
0C77   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0C91                             ; printChars
0C91                             ; char* len --
0C91                PRINTCHARS:      
0C91   E1                     POP   hl   ; hl = count
0C92   D1                     POP   de   ; de = char*
0C93   CD 9E 0C               CALL   printChars2   
0C96   DD E9                  JP   (ix)   
0C98                PRINTCHARS1:      
0C98   1A                     LD   a,(de)   ; print char at char*
0C99   CD 85 00               CALL   putchar   
0C9C   13                     INC   de   ; char*++
0C9D   2B                     DEC   hl   ; count--
0C9E                PRINTCHARS2:      
0C9E   7D                     LD   a,l   ; count == 0?
0C9F   B4                     OR   h   
0CA0   C8                     RET   z   
0CA1   18 F5                  JR   printChars1   ; if not loop
0CA3                RECUR:       
0CA3   E1                     POP   hl   
0CA4   22 F2 54               LD   (vRecur),hl   
0CA7   DD E9                  JP   (ix)   
0CA9                REMAIN:      
0CA9   2A F6 54               LD   hl,(vRemain)   
0CAC   E5                     PUSH   hl   
0CAD   DD E9                  JP   (ix)   
0CAF                SIZE:        
0CAF   E1                     POP   hl   
0CB0   2B                     DEC   hl   ; msb size
0CB1   56                     LD   d,(hl)   
0CB2   2B                     DEC   hl   ; lsb size
0CB3   5E                     LD   e,(hl)   
0CB4   D5                     PUSH   de   
0CB5   DD E9                  JP   (ix)   
0CB7                CONSTBUFSTART:      
0CB7   11 00 53               LD   de,BUF   
0CBA   18 28                  JR   constant   
0CBC                CONSTHEAPSTART:      
0CBC   11 1C 55               LD   de,HEAP   
0CBF   18 23                  JR   constant   
0CC1                CONSTTIBSTART:      
0CC1   11 00 52               LD   de,TIB   
0CC4   18 1E                  JR   constant   
0CC6                VARBUFPTR:      
0CC6   ED 5B EC 54            LD   de,(vBufPtr)   
0CCA   21 EC 54               LD   hl,vBufPtr   
0CCD   18 12                  JR   variable   
0CCF                VARHEAPPTR:      
0CCF   ED 5B F0 54            LD   de,(vHeapPtr)   
0CD3   21 F0 54               LD   hl,vHeapPtr   
0CD6   18 09                  JR   variable   
0CD8                VARTIBPTR:      
0CD8   ED 5B EA 54            LD   de,(vTIBPtr)   
0CDC   21 EA 54               LD   hl,vTIBPtr   
0CDF   18 00                  JR   variable   
0CE1                VARIABLE:      
0CE1   22 F4 54               LD   (vPointer),hl   
0CE4                CONSTANT:      
0CE4   D5                     PUSH   de   
0CE5   DD E9                  JP   (ix)   
0CE7                             ; 
0CE7                FILTER:      
0CE7                SCAN:        
0CE7   DD E9                  JP   (ix)   
0CE9                             ;*******************************************************************
0CE9                             ; general routines
0CE9                             ;*******************************************************************
0CE9                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0CE9                FLUSHBUFFER:      
0CE9   F5                     PUSH   af   
0CEA   D5                     PUSH   de   
0CEB   E5                     PUSH   hl   
0CEC   2A EC 54               LD   hl,(vBufPtr)   
0CEF   11 00 53               LD   de,BUF   
0CF2   ED 53 EC 54            LD   (vBufPtr),de   
0CF6   B7                     OR   a   
0CF7   ED 52                  SBC   hl,de   
0CF9   CD 9E 0C               CALL   printChars2   
0CFC   E1                     POP   hl   
0CFD   D1                     POP   de   
0CFE   F1                     POP   af   
0CFF   C9                     RET      
0D00                             ; followed by a table
0D00                             ; db char
0D00                             ; dw addr
0D00                             ; the final item must have char == NUL
0D00                JUMPTABLE:      
0D00   03                     INC   bc   
0D01   E1                     POP   hl   
0D02                JUMPTABLE0:      
0D02   AF                     XOR   a   
0D03   BE                     CP   (hl)   
0D04   28 09                  JR   z,jumpTable1   
0D06   0A                     LD   a,(bc)   
0D07   BE                     CP   (hl)   
0D08   28 06                  JR   z,jumpTable2   
0D0A   23                     INC   hl   
0D0B   23                     INC   hl   
0D0C   23                     INC   hl   
0D0D   18 F3                  JR   jumpTable0   
0D0F                JUMPTABLE1:      
0D0F   0B                     DEC   bc   
0D10                JUMPTABLE2:      
0D10   23                     INC   hl   
0D11   5E                     LD   e,(hl)   
0D12   23                     INC   hl   
0D13   56                     LD   d,(hl)   
0D14   EB                     EX   de,hl   
0D15   E9                     JP   (hl)   
0D16                PRTSTR0:      
0D16   CD 85 00               CALL   putchar   
0D19   23                     INC   hl   
0D1A                PRTSTR:      
0D1A   7E                     LD   a,(hl)   
0D1B   B7                     OR   a   
0D1C   20 F8                  JR   nz,prtstr0   
0D1E   C9                     RET      
0D1F                             ; **************************************************************************
0D1F                             ; calculate nesting value
0D1F                             ; a is char to be tested,
0D1F                             ; e is the nesting value (initially 0)
0D1F                             ; e is increased by ( and [
0D1F                             ; e is decreased by ) and ]
0D1F                             ; e has its bit 7 toggled by `
0D1F                             ; limited to 127 levels
0D1F                             ; **************************************************************************
0D1F                NESTING:      
0D1F   FE 22                  CP   DQ   ; quote char
0D21   28 06                  JR   z,nesting0   
0D23   FE 60                  CP   "`"   ; quote char
0D25   28 02                  JR   z,nesting0   
0D27   18 0A                  JR   nesting1   
0D29                NESTING0:      
0D29   CB 7B                  BIT   7,e   
0D2B   28 03                  JR   z,nesting1a   
0D2D   CB BB                  RES   7,e   
0D2F   C9                     RET      
0D30                NESTING1A:      
0D30   CB FB                  SET   7,e   
0D32   C9                     RET      
0D33                NESTING1:      
0D33   CB 7B                  BIT   7,e   
0D35   C0                     RET   nz   
0D36   FE 7B                  CP   "{"   
0D38   28 08                  JR   z,nesting2   
0D3A   FE 5B                  CP   "["   
0D3C   28 04                  JR   z,nesting2   
0D3E   FE 28                  CP   "("   
0D40   20 02                  JR   nz,nesting3   
0D42                NESTING2:      
0D42   1C                     INC   e   
0D43   C9                     RET      
0D44                NESTING3:      
0D44   FE 7D                  CP   "}"   
0D46   28 07                  JR   z,nesting4   
0D48   FE 5D                  CP   "]"   
0D4A   28 03                  JR   z,nesting4   
0D4C   FE 29                  CP   ")"   
0D4E   C0                     RET   nz   
0D4F                NESTING4:      
0D4F   1D                     DEC   e   
0D50   C9                     RET      
0D51                PROMPT:      
0D51   CD 61 0D               CALL   printStr   
0D54   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0D59   C9                     RET      
0D5A                CRLF:        
0D5A   CD 61 0D               CALL   printStr   
0D5D   0D 0A 00               .CSTR   "\r\n"   
0D60   C9                     RET      
0D61                             ; prints a null teminated string
0D61                             ; the string should be immediately following the call
0D61                PRINTSTR:      
0D61   E3                     EX   (sp),hl   ; swap			
0D62   CD 1A 0D               CALL   prtstr   
0D65   23                     INC   hl   ; inc past NUL
0D66   E3                     EX   (sp),hl   ; put it back	
0D67   C9                     RET      
0D68                TITLESTR:      
0D68   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0D7C                INIT:        
0D7C   21 68 0D               LD   hl,titleStr   
0D7F   11 08 55               LD   de,titleBuf   
0D82   06 14                  LD   b,20   
0D84                INIT1:       
0D84   1A                     LD   a,(de)   
0D85   BE                     CP   (hl)   
0D86   20 17                  JR   nz,coldBoot0   
0D88   13                     INC   de   
0D89   23                     INC   hl   
0D8A   10 F8                  DJNZ   init1   
0D8C                WARMINIT:      
0D8C   ED 4B F8 54            LD   bc,(vSavedIP)   ; restore IP
0D90   ED 7B FA 54            LD   sp,(vSavedSP)   ; restore SP
0D94   DD 2A FC 54            LD   ix,(vSavedNext)   ; restore Next
0D98   FD 2A FE 54            LD   iy,(vSavedBP)   ; restore BP
0D9C   C3 D6 0D               JP   start1   
0D9F                COLDBOOT0:      
0D9F   21 68 0D               LD   hl,titleStr   ; copy titleStr to titleBuf
0DA2   11 08 55               LD   de,titleBuf   
0DA5   06 14                  LD   b,20   
0DA7   ED B0                  LDIR      
0DA9                COLDINIT:      
0DA9   21 80 01               LD   hl,isysVars   
0DAC   11 E6 54               LD   de,sysVars   
0DAF   01 10 00               LD   bc,8 * 2   
0DB2   ED B0                  LDIR      
0DB4   21 00 54               LD   hl,vars   ; 52 vars LO HI
0DB7   06 34                  LD   b,26*2   
0DB9   AF                     XOR   a   
0DBA                COLDBOOT1:      
0DBA   77                     LD   (hl),a   
0DBB   23                     INC   hl   
0DBC   10 FC                  DJNZ   coldBoot1   
0DBE   DD 2A EE 54            LD   ix,(vNext)   
0DC2   FD 21 00 52            LD   iy,STACK   
0DC6   C9                     RET      
0DC7                COLDSTART:      
0DC7   31 00 52               LD   sp,STACK   
0DCA   CD 9F 0D               CALL   coldBoot0   
0DCD   C3 D6 0D               JP   start1   
0DD0                START:       
0DD0   31 00 52               LD   sp,STACK   ; start Monty
0DD3   CD 7C 0D               CALL   init   ; setups
0DD6                START1:      
0DD6   21 08 55               LD   hl,titleBuf   
0DD9   CD 1A 0D               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0DDC                INTERPRET:      
0DDC   CD E9 0C               CALL   flushBuffer   
0DDF   CD 51 0D               CALL   prompt   
0DE2   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0DE5   21 00 52               LD   hl,TIB   
0DE8   22 EA 54               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0DEB                INTERPRET2:      ; calculate nesting
0DEB   1E 00                  LD   e,0   ; initilize nesting value
0DED   C5                     PUSH   bc   ; save offset into TIB,
0DEE                             ; bc is also the count of chars in TIB
0DEE   21 00 52               LD   hl,TIB   ; hl is start of TIB
0DF1   18 0B                  JR   interpret4   
0DF3                INTERPRET3:      
0DF3   3E 33                  LD   a,"3"   
0DF5   CD 85 00               CALL   putchar   
0DF8   7E                     LD   a,(hl)   ; a = char in TIB
0DF9   23                     INC   hl   ; inc pointer into TIB
0DFA   0B                     DEC   bc   ; dec count of chars in TIB
0DFB   CD 1F 0D               CALL   nesting   ; update nesting value
0DFE                INTERPRET4:      
0DFE   79                     LD   a,c   ; is count zero?
0DFF   B0                     OR   b   
0E00   20 F1                  JR   nz,interpret3   ; if not loop
0E02   C1                     POP   bc   ; restore offset into TIB
0E03                INTERPRET5:      
0E03   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0E06   FE 20                  CP   $20   ; compare to space
0E08   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0E0A   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0E0C                             ; ???? NEEDED?
0E0C   28 3B                  JR   z,interpret8   
0E0E   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0E10   28 24                  JR   z,interpret7   ; if anything else its macro/control
0E12   FE 05                  CP   CTRL_E   
0E14   CA A7 0E               JP   z,edit_   
0E17   FE 08                  CP   CTRL_H   
0E19   CA 97 0E               JP   z,backSpace_   
0E1C   FE 0A                  CP   CTRL_J   
0E1E   CA BF 0E               JP   z,reEdit_   
0E21   FE 13                  CP   CTRL_S   
0E23   CA C2 0E               JP   z,printStack_   
0E26                             ; DB     lsb(edit_)       ; ENQ ^E  5
0E26                             ; DB     lsb(reedit_)     ; LF  ^J 10
0E26                             ; DB     lsb(list_)       ; FF  ^L 12
0E26                             ; DB     lsb(printStack_) ; DLE ^P 16
0E26                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0E26                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0E26                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0E26                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0E26                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0E26                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0E26                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0E26                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0E26                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0E26                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0E26                INTERPRET5A:      
0E26                             ; ld (vTIBPtr),bc
0E26                             ; ld bc,(vTIBPtr)
0E26   18 C3                  JR   interpret2   
0E28                INTERPRET6:      
0E28   21 00 52               LD   hl,TIB   
0E2B   09                     ADD   hl,bc   
0E2C   77                     LD   (hl),a   ; store the character in textbuf
0E2D   03                     INC   bc   
0E2E   CD 85 00               CALL   putchar   ; echo character to screen
0E31   CD 1F 0D               CALL   nesting   
0E34   18 CD                  JR   interpret5   ; wait for next character
0E36                INTERPRET7:      
0E36   21 00 52               LD   hl,TIB   
0E39   09                     ADD   hl,bc   
0E3A   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0E3C   23                     INC   hl   
0E3D   36 0A                  LD   (hl),"\n"   
0E3F   23                     INC   hl   
0E40   03                     INC   bc   
0E41   03                     INC   bc   
0E42   CD 5A 0D               CALL   crlf   ; echo character to screen
0E45   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0E46   B7                     OR   a   
0E47   20 BA                  JR   nz,interpret5   
0E49                INTERPRET8:      
0E49   21 00 52               LD   hl,TIB   
0E4C   09                     ADD   hl,bc   
0E4D   22 EA 54               LD   (vTIBPtr),hl   
0E50   01 00 52               LD   bc,TIB   
0E53   ED 43 F8 54            LD   (vSavedIP),bc   ; save IP
0E57   ED 73 FA 54            LD   (vSavedSP),sp   ; save SP
0E5B   DD 22 FC 54            LD   (vSavedNext),ix   ; save Next
0E5F   FD 22 FE 54            LD   (vSavedBP),iy   ; save BP
0E63   0B                     DEC   bc   
0E64                NEXT:        
0E64   03                     INC   bc   ; Increment the IP
0E65   0A                     LD   a,(bc)   ; Get the next character and dispatch
0E66   FE 20                  CP   " "   ; whitespace?
0E68   28 FA                  JR   z,next   ; space? ignore
0E6A   38 09                  JR   c,next1   
0E6C   D6 20                  SUB   " "   
0E6E   6F                     LD   l,a   ; index into table
0E6F   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0E71   6E                     LD   l,(hl)   ; get low jump address
0E72   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0E74   E9                     JP   (hl)   ; Jump to routine
0E75                NEXT1:       
0E75   FE 00                  CP   NUL   ; end of input string?
0E77   28 03                  JR   z,exit   
0E79   C3 DC 0D               JP   interpret   ; no, other whitespace, macros?
0E7C                EXIT:        
0E7C   03                     INC   bc   
0E7D   60 69                  LD   hl,bc   
0E7F   E9                     JP   (hl)   
0E80                RUN:         
0E80   C1                     POP   bc   
0E81   0B                     DEC   bc   
0E82   DD E9                  JP   (ix)   
0E84                ERROR:       
0E84   CD 80 0E               CALL   run   
0E87   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQ,"Error ",DQ,".s .",0   
0E94   C3 DC 0D               JP   interpret   
0E97                BACKSPACE_:      
0E97   79                     LD   a,c   
0E98   B0                     OR   b   
0E99   CA EB 0D               JP   z,interpret2   
0E9C   0B                     DEC   bc   
0E9D   CD 61 0D               CALL   printStr   
0EA0   08 20 08 00            .CSTR   "\b \b"   
0EA4   C3 EB 0D               JP   interpret2   
0EA7                             ; edit
0EA7                EDIT_:       
0EA7   CD 80 0E               CALL   run   
0EAA   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQ,"var?",DQ,".s /k/ad .h",0   
0EBC   C3 DC 0D               JP   interpret   
0EBF                REEDIT_:      
0EBF   C3 DC 0D               JP   interpret   
0EC2                PRINTSTACK_:      
0EC2   CD 80 0E               CALL   run   
0EC5   2F 70 6B 00            .CSTR   "/pk"   
0EC9   C3 DC 0D               JP   interpret   
0ECC                             ; editDef:
0ECC                             ;     pop hl                      ; pop ret address
0ECC                             ;     ex (sp),hl                  ; swap with TOS
0ECC                             ;     push hl                     ; dup TOS
0ECC                             ;     ld a,l                      ; a = ident
0ECC                             ;     ld de,TIB                   ; de = start of TIB
0ECC                             ;     ld (vTIBPtr),de             ; update TIB*
0ECC                             ;     push ix                     ; save NEXT
0ECC                             ;     ld ix,editDef0              ; NEXT = editDef0
0ECC                             ;     jp lookupRef                ; convert letter into address
0ECC                             ; editDef0:
0ECC                             ;     ld e,(hl)                   ; de = (hl++)
0ECC                             ;     inc hl
0ECC                             ;     ld d,(hl)
0ECC                             ;     ld a,d                      ; de == 0 ?
0ECC                             ;     or e
0ECC                             ;     jr z,editDef4
0ECC                             ;     ld ix,editDef3              ; NEXT = editDef3
0ECC                             ;     ex de,hl
0ECC                             ;     ld a,(hl)
0ECC                             ;     cp "{"
0ECC                             ;     jr nz,editDef1
0ECC                             ;     jp editBlock0               ; convert letter into address
0ECC                             ; editDef1:
0ECC                             ;     cp "("
0ECC                             ;     jr nz,editDef2
0ECC                             ;     jp editBlock0               ; convert letter into address
0ECC                             ; editDef2:
0ECC                             ;     jp editFunc
0ECC                             ; editDef3:
0ECC                             ;     ld a," "                    ; write assign
0ECC                             ;     call writeChar
0ECC                             ;     pop hl                      ; a = ident
0ECC                             ;     ld a,l
0ECC                             ;     call writeChar
0ECC                             ;     ld a,"="                    ; write assign
0ECC                             ;     call writeChar
0ECC                             ;     ld ix,editDef4              ; NEXT = editDef4
0ECC                             ;     jp printTIB
0ECC                             ; editDef4:
0ECC                             ;     pop ix                      ; restore NEXT
0ECC                             ;     jp (ix)
0ECC                             ; writeChar:
0ECC                             ;     ld de,(vTIBPtr)             ; de = TIB*
0ECC                             ;     ld (de),a                   ; write ident
0ECC                             ;     inc de
0ECC                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0ECC                             ;     ret
0ECC                             ; ; printTIB
0ECC                             ; printTIB:
0ECC                             ;     ld hl,(vTIBPtr)
0ECC                             ;     ld de,TIB
0ECC                             ;     or a
0ECC                             ;     sbc hl,de
0ECC                             ;     jp printTIB2
0ECC                             ; printTIB1:
0ECC                             ;     ld a,(de)
0ECC                             ;     call putchar
0ECC                             ; printTIB2:
0ECC                             ;     ld a,l
0ECC                             ;     or h
0ECC                             ;     jr nz,printTIB1
0ECC                             ;     jp (ix)
0ECC                             ; editBlock:
0ECC                             ;     pop hl                      ; hl = block*
0ECC                             ; editBlock0:
0ECC                             ;     push ix                     ; save next
0ECC                             ;     push hl                     ; push block*
0ECC                             ;     push hl                     ; push block*
0ECC                             ;     ld ix,(editBlock2)
0ECC                             ;     jp blockLength
0ECC                             ; editBlock1:
0ECC                             ;     pop hl                      ; bc = length, (sp) = IP
0ECC                             ;     pop de                      ; de = block*
0ECC                             ;     ld a,l
0ECC                             ;     or h
0ECC                             ;     jr z,editBlock2
0ECC                             ;     push bc
0ECC                             ;     ld bc,hl
0ECC                             ;     ex de,hl                    ; hl = block*
0ECC                             ;     ld de,(vTIBPtr)              ; de = TIB*
0ECC                             ;     ldir                        ; copy block to TIB
0ECC                             ;     ld (vTIBPtr),de              ; save TIB*
0ECC                             ;     pop bc
0ECC                             ; editBlock2:
0ECC                             ;     pop ix                      ; restore next
0ECC                             ;     jp (ix)
0ECC                             ; editFunc:
0ECC                             ;     jp (ix)
0ECC                             ; editArray:
0ECC                             ;     jp (ix)
0ECC                             ; editArglist:
0ECC                             ;     jp (ix)
0ECC                             ; ; blockLength
0ECC                             ; ; addr1 -- length
0ECC                             ; blockLength:
0ECC                             ;     pop hl                      ; block*
0ECC                             ;     push hl                     ; save block*
0ECC                             ;     inc hl                      ; skip first char
0ECC                             ;     ld d,1                      ; increase nesting
0ECC                             ; blockLength1:                   ; Skip to end of definition
0ECC                             ;     ld a,(hl)                   ; Get the next character
0ECC                             ;     inc hl                      ; Point to next character
0ECC                             ;     cp " " + 1                  ; ignore whitespace
0ECC                             ;     jr c,blockLength1
0ECC                             ;     cp ")"
0ECC                             ;     jr z,blockLength4
0ECC                             ;     cp "}"
0ECC                             ;     jr z,blockLength4
0ECC                             ;     cp "]"
0ECC                             ;     jr z,blockLength4
0ECC                             ;     cp "("
0ECC                             ;     jr z,blockLength2
0ECC                             ;     cp "{"
0ECC                             ;     jr z,blockLength2
0ECC                             ;     cp "["
0ECC                             ;     jr z,blockLength2
0ECC                             ;     cp "'"
0ECC                             ;     jr z,blockLength3
0ECC                             ;     cp "`"
0ECC                             ;     jr z,blockLength3
0ECC                             ;     cp DQ
0ECC                             ;     jr z,blockLength3
0ECC                             ;     jr blockLength1
0ECC                             ; blockLength2:
0ECC                             ;     inc d
0ECC                             ;     jr blockLength1
0ECC                             ; blockLength4:
0ECC                             ;     dec d
0ECC                             ;     jr nz, blockLength1         ; get the next element
0ECC                             ; blockLength3:
0ECC                             ;     ld a,$80
0ECC                             ;     xor d
0ECC                             ;     ld d,a
0ECC                             ;     jr nz, blockLength1
0ECC                             ;     pop hl                      ; hl = block*
0ECC                             ;     or a
0ECC                             ;     sbc hl,de
0ECC                             ;     push hl
0ECC                             ;     jp (ix)
0ECC                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0ECC                             ; \a start of stack \#3 depth \b base \$ prompt
0ECC                             ; DW dStack               ; a vS0 start of datastack			
0ECC                             ; DW FALSE                ; b vBase16
0ECC                             ; DW 0                    ; c vTIBPtr an offset to the tib
0ECC                             ; DW 0                    ; d
0ECC                             ; DW 65                   ; e vLastDef "A" last command u defined
0ECC                             ; DW 0                    ; f
0ECC                             ; DW page6                ; g 256 bytes limits
0ECC                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0ECC                          ;*Macro unroll: FUNC f1, 0, "f"                      ; :f func or block
0ECC                F1:          ; :f func or block
0ECC   CD D5 09               CALL   go   
0ECF   00 00                  DW   NUL   
0ED1   D8 0E                  DW   f1M_2825S12   
0ED3   D5 0E                  DW   $+2   
0ED5   00                     DB   0   
0ED6   01 66                  .PSTR   "f"   
0ED8                F1M_2825S12:      
0ED8   00                     DB   0   
0ED9                          ;*Macro unroll: FUNC f2, 0, ""
0ED9                F2:          
0ED9   CD D5 09               CALL   go   
0EDC   00 00                  DW   NUL   
0EDE   E4 0E                  DW   f2M_2827S15   
0EE0   E2 0E                  DW   $+2   
0EE2   00                     DB   0   
0EE3   00                     .PSTR   ""   
0EE4                F2M_2827S15:      
0EE4   00                     DB   0   
0EE5                          ;*Macro unroll: FUNC f3, 0, ""
0EE5                F3:          
0EE5   CD D5 09               CALL   go   
0EE8   00 00                  DW   NUL   
0EEA   F0 0E                  DW   f3M_2829S18   
0EEC   EE 0E                  DW   $+2   
0EEE   00                     DB   0   
0EEF   00                     .PSTR   ""   
0EF0                F3M_2829S18:      
0EF0   00                     DB   0   
0EF1                          ;*Macro unroll: FUNC f4, 0, ""
0EF1                F4:          
0EF1   CD D5 09               CALL   go   
0EF4   00 00                  DW   NUL   
0EF6   FC 0E                  DW   f4M_2831S21   
0EF8   FA 0E                  DW   $+2   
0EFA   00                     DB   0   
0EFB   00                     .PSTR   ""   
0EFC                F4M_2831S21:      
0EFC   00                     DB   0   
0EFD                          ALIGN   $100   
0F00                TESTSSTART:      
0F00                             ; test "{/k}/fs :a{%a 1 +};/mp :a{%a.c/fl};/fe", 0
0F00                             ; test "0 10 1 /rg :a{%a.}; /fe", 0
0F00                          ;*Macro unroll:  test "0 10 1 /rg :a{%a 1 + 10 *}; /mp :a{%a.}; /fe", 0
0F00   31 00 52               LD   SP,STACK   
0F03   CD A9 0D               CALL   coldInit   
0F06   CD 70 50               CALL   execStr   
0F09   30 20 31 30 20 31 20 2F 72 67 20 3A 61 7B 25 61 20 31 20 2B 20 31 30 20 2A 7D 3B 20 2F 6D 70 20 3A 61 7B 25 61 2E 7D 3B 20 2F 66 65 00 DB   "0 10 1 /rg :a{%a 1 + 10 *}; /mp :a{%a.}; /fe",0   
0F36   CD E9 0C               CALL   flushBuffer   
0F39   E1                     POP   HL   
0F3A   E5                     PUSH   HL   
0F3B   11 00 00               LD   DE,0   
0F3E   B7                     OR   A   
0F3F   ED 52                  SBC   HL,DE   
0F41   7D                     LD   A,L   
0F42   B4                     OR   H   
0F43   CA CA 0F               JP   Z,expectM_2837S29   
0F46   CD 61 0D               CALL   printStr   
0F49   43 6F 64 65 3A 20 30 20 31 30 20 31 20 2F 72 67 20 3A 61 7B 25 61 20 31 20 2B 20 31 30 20 2A 7D 3B 20 2F 6D 70 20 3A 61 7B 25 61 2E 7D 3B 20 2F 66 65 00 .CSTR   "Code: ","0 10 1 /rg :a{%a 1 + 10 *}; /mp :a{%a.}; /fe"   
0F7C   CD 61 0D               CALL   printStr   
0F7F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F8E   21 00 00               LD   hl,0   
0F91   E5                     PUSH   hl   
0F92   E5                     PUSH   hl   
0F93   CD 80 0E               CALL   run   
0F96   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0F9E   CD E9 0C               CALL   flushBuffer   
0FA1   CD 61 0D               CALL   printStr   
0FA4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FB1   E1                     POP   hl   
0FB2   E5                     PUSH   hl   
0FB3   E5                     PUSH   hl   
0FB4   CD 80 0E               CALL   run   
0FB7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0FC6   CD E9 0C               CALL   flushBuffer   
0FC9   76                     HALT      
0FCA                EXPECTM_2837S29:      
0FCA   E1                     POP   HL   
0FCB   CD 61 0D               CALL   printStr   
0FCE   44 6F 6E 65 21 00      .CSTR   "Done!"   
0FD4   76                     HALT      
0FD5                             ; 
0FD5                          ;*Macro unroll:  test "/f", false
0FD5   31 00 52               LD   SP,STACK   
0FD8   CD A9 0D               CALL   coldInit   
0FDB   CD 70 50               CALL   execStr   
0FDE   2F 66 00               DB   "/f",0   
0FE1   CD E9 0C               CALL   flushBuffer   
0FE4   E1                     POP   HL   
0FE5   E5                     PUSH   HL   
0FE6   11 00 00               LD   DE,false   
0FE9   B7                     OR   A   
0FEA   ED 52                  SBC   HL,DE   
0FEC   7D                     LD   A,L   
0FED   B4                     OR   H   
0FEE   CA 4B 10               JP   Z,expectM_2842S37   
0FF1   CD 61 0D               CALL   printStr   
0FF4   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0FFD   CD 61 0D               CALL   printStr   
1000   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
100F   21 00 00               LD   hl,false   
1012   E5                     PUSH   hl   
1013   E5                     PUSH   hl   
1014   CD 80 0E               CALL   run   
1017   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
101F   CD E9 0C               CALL   flushBuffer   
1022   CD 61 0D               CALL   printStr   
1025   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1032   E1                     POP   hl   
1033   E5                     PUSH   hl   
1034   E5                     PUSH   hl   
1035   CD 80 0E               CALL   run   
1038   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1047   CD E9 0C               CALL   flushBuffer   
104A   76                     HALT      
104B                EXPECTM_2842S37:      
104B   E1                     POP   HL   
104C                          ;*Macro unroll:  test "/t", true
104C   31 00 52               LD   SP,STACK   
104F   CD A9 0D               CALL   coldInit   
1052   CD 70 50               CALL   execStr   
1055   2F 74 00               DB   "/t",0   
1058   CD E9 0C               CALL   flushBuffer   
105B   E1                     POP   HL   
105C   E5                     PUSH   HL   
105D   11 FF FF               LD   DE,true   
1060   B7                     OR   A   
1061   ED 52                  SBC   HL,DE   
1063   7D                     LD   A,L   
1064   B4                     OR   H   
1065   CA C2 10               JP   Z,expectM_2843S38   
1068   CD 61 0D               CALL   printStr   
106B   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
1074   CD 61 0D               CALL   printStr   
1077   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1086   21 FF FF               LD   hl,true   
1089   E5                     PUSH   hl   
108A   E5                     PUSH   hl   
108B   CD 80 0E               CALL   run   
108E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1096   CD E9 0C               CALL   flushBuffer   
1099   CD 61 0D               CALL   printStr   
109C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10A9   E1                     POP   hl   
10AA   E5                     PUSH   hl   
10AB   E5                     PUSH   hl   
10AC   CD 80 0E               CALL   run   
10AF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
10BE   CD E9 0C               CALL   flushBuffer   
10C1   76                     HALT      
10C2                EXPECTM_2843S38:      
10C2   E1                     POP   HL   
10C3                          ;*Macro unroll:  test "1", 1
10C3   31 00 52               LD   SP,STACK   
10C6   CD A9 0D               CALL   coldInit   
10C9   CD 70 50               CALL   execStr   
10CC   31 00                  DB   "1",0   
10CE   CD E9 0C               CALL   flushBuffer   
10D1   E1                     POP   HL   
10D2   E5                     PUSH   HL   
10D3   11 01 00               LD   DE,1   
10D6   B7                     OR   A   
10D7   ED 52                  SBC   HL,DE   
10D9   7D                     LD   A,L   
10DA   B4                     OR   H   
10DB   CA 37 11               JP   Z,expectM_2844S39   
10DE   CD 61 0D               CALL   printStr   
10E1   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
10E9   CD 61 0D               CALL   printStr   
10EC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10FB   21 01 00               LD   hl,1   
10FE   E5                     PUSH   hl   
10FF   E5                     PUSH   hl   
1100   CD 80 0E               CALL   run   
1103   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
110B   CD E9 0C               CALL   flushBuffer   
110E   CD 61 0D               CALL   printStr   
1111   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
111E   E1                     POP   hl   
111F   E5                     PUSH   hl   
1120   E5                     PUSH   hl   
1121   CD 80 0E               CALL   run   
1124   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1133   CD E9 0C               CALL   flushBuffer   
1136   76                     HALT      
1137                EXPECTM_2844S39:      
1137   E1                     POP   HL   
1138                          ;*Macro unroll:  test "2", 2
1138   31 00 52               LD   SP,STACK   
113B   CD A9 0D               CALL   coldInit   
113E   CD 70 50               CALL   execStr   
1141   32 00                  DB   "2",0   
1143   CD E9 0C               CALL   flushBuffer   
1146   E1                     POP   HL   
1147   E5                     PUSH   HL   
1148   11 02 00               LD   DE,2   
114B   B7                     OR   A   
114C   ED 52                  SBC   HL,DE   
114E   7D                     LD   A,L   
114F   B4                     OR   H   
1150   CA AC 11               JP   Z,expectM_2845S40   
1153   CD 61 0D               CALL   printStr   
1156   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
115E   CD 61 0D               CALL   printStr   
1161   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1170   21 02 00               LD   hl,2   
1173   E5                     PUSH   hl   
1174   E5                     PUSH   hl   
1175   CD 80 0E               CALL   run   
1178   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1180   CD E9 0C               CALL   flushBuffer   
1183   CD 61 0D               CALL   printStr   
1186   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1193   E1                     POP   hl   
1194   E5                     PUSH   hl   
1195   E5                     PUSH   hl   
1196   CD 80 0E               CALL   run   
1199   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
11A8   CD E9 0C               CALL   flushBuffer   
11AB   76                     HALT      
11AC                EXPECTM_2845S40:      
11AC   E1                     POP   HL   
11AD                          ;*Macro unroll:  test "1", 1
11AD   31 00 52               LD   SP,STACK   
11B0   CD A9 0D               CALL   coldInit   
11B3   CD 70 50               CALL   execStr   
11B6   31 00                  DB   "1",0   
11B8   CD E9 0C               CALL   flushBuffer   
11BB   E1                     POP   HL   
11BC   E5                     PUSH   HL   
11BD   11 01 00               LD   DE,1   
11C0   B7                     OR   A   
11C1   ED 52                  SBC   HL,DE   
11C3   7D                     LD   A,L   
11C4   B4                     OR   H   
11C5   CA 21 12               JP   Z,expectM_2846S41   
11C8   CD 61 0D               CALL   printStr   
11CB   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
11D3   CD 61 0D               CALL   printStr   
11D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11E5   21 01 00               LD   hl,1   
11E8   E5                     PUSH   hl   
11E9   E5                     PUSH   hl   
11EA   CD 80 0E               CALL   run   
11ED   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
11F5   CD E9 0C               CALL   flushBuffer   
11F8   CD 61 0D               CALL   printStr   
11FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1208   E1                     POP   hl   
1209   E5                     PUSH   hl   
120A   E5                     PUSH   hl   
120B   CD 80 0E               CALL   run   
120E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
121D   CD E9 0C               CALL   flushBuffer   
1220   76                     HALT      
1221                EXPECTM_2846S41:      
1221   E1                     POP   HL   
1222                          ;*Macro unroll:  test "0", 0
1222   31 00 52               LD   SP,STACK   
1225   CD A9 0D               CALL   coldInit   
1228   CD 70 50               CALL   execStr   
122B   30 00                  DB   "0",0   
122D   CD E9 0C               CALL   flushBuffer   
1230   E1                     POP   HL   
1231   E5                     PUSH   HL   
1232   11 00 00               LD   DE,0   
1235   B7                     OR   A   
1236   ED 52                  SBC   HL,DE   
1238   7D                     LD   A,L   
1239   B4                     OR   H   
123A   CA 96 12               JP   Z,expectM_2847S42   
123D   CD 61 0D               CALL   printStr   
1240   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
1248   CD 61 0D               CALL   printStr   
124B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
125A   21 00 00               LD   hl,0   
125D   E5                     PUSH   hl   
125E   E5                     PUSH   hl   
125F   CD 80 0E               CALL   run   
1262   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
126A   CD E9 0C               CALL   flushBuffer   
126D   CD 61 0D               CALL   printStr   
1270   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
127D   E1                     POP   hl   
127E   E5                     PUSH   hl   
127F   E5                     PUSH   hl   
1280   CD 80 0E               CALL   run   
1283   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1292   CD E9 0C               CALL   flushBuffer   
1295   76                     HALT      
1296                EXPECTM_2847S42:      
1296   E1                     POP   HL   
1297                          ;*Macro unroll:  test "10", 10
1297   31 00 52               LD   SP,STACK   
129A   CD A9 0D               CALL   coldInit   
129D   CD 70 50               CALL   execStr   
12A0   31 30 00               DB   "10",0   
12A3   CD E9 0C               CALL   flushBuffer   
12A6   E1                     POP   HL   
12A7   E5                     PUSH   HL   
12A8   11 0A 00               LD   DE,10   
12AB   B7                     OR   A   
12AC   ED 52                  SBC   HL,DE   
12AE   7D                     LD   A,L   
12AF   B4                     OR   H   
12B0   CA 0D 13               JP   Z,expectM_2848S43   
12B3   CD 61 0D               CALL   printStr   
12B6   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
12BF   CD 61 0D               CALL   printStr   
12C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12D1   21 0A 00               LD   hl,10   
12D4   E5                     PUSH   hl   
12D5   E5                     PUSH   hl   
12D6   CD 80 0E               CALL   run   
12D9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12E1   CD E9 0C               CALL   flushBuffer   
12E4   CD 61 0D               CALL   printStr   
12E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12F4   E1                     POP   hl   
12F5   E5                     PUSH   hl   
12F6   E5                     PUSH   hl   
12F7   CD 80 0E               CALL   run   
12FA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1309   CD E9 0C               CALL   flushBuffer   
130C   76                     HALT      
130D                EXPECTM_2848S43:      
130D   E1                     POP   HL   
130E                          ;*Macro unroll:  test "123", 123
130E   31 00 52               LD   SP,STACK   
1311   CD A9 0D               CALL   coldInit   
1314   CD 70 50               CALL   execStr   
1317   31 32 33 00            DB   "123",0   
131B   CD E9 0C               CALL   flushBuffer   
131E   E1                     POP   HL   
131F   E5                     PUSH   HL   
1320   11 7B 00               LD   DE,123   
1323   B7                     OR   A   
1324   ED 52                  SBC   HL,DE   
1326   7D                     LD   A,L   
1327   B4                     OR   H   
1328   CA 86 13               JP   Z,expectM_2849S44   
132B   CD 61 0D               CALL   printStr   
132E   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
1338   CD 61 0D               CALL   printStr   
133B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
134A   21 7B 00               LD   hl,123   
134D   E5                     PUSH   hl   
134E   E5                     PUSH   hl   
134F   CD 80 0E               CALL   run   
1352   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
135A   CD E9 0C               CALL   flushBuffer   
135D   CD 61 0D               CALL   printStr   
1360   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
136D   E1                     POP   hl   
136E   E5                     PUSH   hl   
136F   E5                     PUSH   hl   
1370   CD 80 0E               CALL   run   
1373   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1382   CD E9 0C               CALL   flushBuffer   
1385   76                     HALT      
1386                EXPECTM_2849S44:      
1386   E1                     POP   HL   
1387                          ;*Macro unroll:  test "-1",-1
1387   31 00 52               LD   SP,STACK   
138A   CD A9 0D               CALL   coldInit   
138D   CD 70 50               CALL   execStr   
1390   2D 31 00               DB   "-1",0   
1393   CD E9 0C               CALL   flushBuffer   
1396   E1                     POP   HL   
1397   E5                     PUSH   HL   
1398   11 FF FF               LD   DE,-1   
139B   B7                     OR   A   
139C   ED 52                  SBC   HL,DE   
139E   7D                     LD   A,L   
139F   B4                     OR   H   
13A0   CA FD 13               JP   Z,expectM_2850S45   
13A3   CD 61 0D               CALL   printStr   
13A6   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
13AF   CD 61 0D               CALL   printStr   
13B2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13C1   21 FF FF               LD   hl,-1   
13C4   E5                     PUSH   hl   
13C5   E5                     PUSH   hl   
13C6   CD 80 0E               CALL   run   
13C9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
13D1   CD E9 0C               CALL   flushBuffer   
13D4   CD 61 0D               CALL   printStr   
13D7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13E4   E1                     POP   hl   
13E5   E5                     PUSH   hl   
13E6   E5                     PUSH   hl   
13E7   CD 80 0E               CALL   run   
13EA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
13F9   CD E9 0C               CALL   flushBuffer   
13FC   76                     HALT      
13FD                EXPECTM_2850S45:      
13FD   E1                     POP   HL   
13FE                          ;*Macro unroll:  test "''", 0
13FE   31 00 52               LD   SP,STACK   
1401   CD A9 0D               CALL   coldInit   
1404   CD 70 50               CALL   execStr   
1407   27 27 00               DB   "''",0   
140A   CD E9 0C               CALL   flushBuffer   
140D   E1                     POP   HL   
140E   E5                     PUSH   HL   
140F   11 00 00               LD   DE,0   
1412   B7                     OR   A   
1413   ED 52                  SBC   HL,DE   
1415   7D                     LD   A,L   
1416   B4                     OR   H   
1417   CA 74 14               JP   Z,expectM_2851S46   
141A   CD 61 0D               CALL   printStr   
141D   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
1426   CD 61 0D               CALL   printStr   
1429   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1438   21 00 00               LD   hl,0   
143B   E5                     PUSH   hl   
143C   E5                     PUSH   hl   
143D   CD 80 0E               CALL   run   
1440   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1448   CD E9 0C               CALL   flushBuffer   
144B   CD 61 0D               CALL   printStr   
144E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
145B   E1                     POP   hl   
145C   E5                     PUSH   hl   
145D   E5                     PUSH   hl   
145E   CD 80 0E               CALL   run   
1461   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1470   CD E9 0C               CALL   flushBuffer   
1473   76                     HALT      
1474                EXPECTM_2851S46:      
1474   E1                     POP   HL   
1475                          ;*Macro unroll:  test "'a'", $61
1475   31 00 52               LD   SP,STACK   
1478   CD A9 0D               CALL   coldInit   
147B   CD 70 50               CALL   execStr   
147E   27 61 27 00            DB   "'a'",0   
1482   CD E9 0C               CALL   flushBuffer   
1485   E1                     POP   HL   
1486   E5                     PUSH   HL   
1487   11 61 00               LD   DE,$61   
148A   B7                     OR   A   
148B   ED 52                  SBC   HL,DE   
148D   7D                     LD   A,L   
148E   B4                     OR   H   
148F   CA ED 14               JP   Z,expectM_2852S47   
1492   CD 61 0D               CALL   printStr   
1495   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
149F   CD 61 0D               CALL   printStr   
14A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14B1   21 61 00               LD   hl,$61   
14B4   E5                     PUSH   hl   
14B5   E5                     PUSH   hl   
14B6   CD 80 0E               CALL   run   
14B9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14C1   CD E9 0C               CALL   flushBuffer   
14C4   CD 61 0D               CALL   printStr   
14C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14D4   E1                     POP   hl   
14D5   E5                     PUSH   hl   
14D6   E5                     PUSH   hl   
14D7   CD 80 0E               CALL   run   
14DA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
14E9   CD E9 0C               CALL   flushBuffer   
14EC   76                     HALT      
14ED                EXPECTM_2852S47:      
14ED   E1                     POP   HL   
14EE                          ;*Macro unroll:  test "'\\''", $27
14EE   31 00 52               LD   SP,STACK   
14F1   CD A9 0D               CALL   coldInit   
14F4   CD 70 50               CALL   execStr   
14F7   27 5C 27 27 00         DB   "'\\''",0   
14FC   CD E9 0C               CALL   flushBuffer   
14FF   E1                     POP   HL   
1500   E5                     PUSH   HL   
1501   11 27 00               LD   DE,$27   
1504   B7                     OR   A   
1505   ED 52                  SBC   HL,DE   
1507   7D                     LD   A,L   
1508   B4                     OR   H   
1509   CA 68 15               JP   Z,expectM_2853S48   
150C   CD 61 0D               CALL   printStr   
150F   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
151A   CD 61 0D               CALL   printStr   
151D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
152C   21 27 00               LD   hl,$27   
152F   E5                     PUSH   hl   
1530   E5                     PUSH   hl   
1531   CD 80 0E               CALL   run   
1534   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
153C   CD E9 0C               CALL   flushBuffer   
153F   CD 61 0D               CALL   printStr   
1542   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
154F   E1                     POP   hl   
1550   E5                     PUSH   hl   
1551   E5                     PUSH   hl   
1552   CD 80 0E               CALL   run   
1555   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1564   CD E9 0C               CALL   flushBuffer   
1567   76                     HALT      
1568                EXPECTM_2853S48:      
1568   E1                     POP   HL   
1569                          ;*Macro unroll:  test "$10", $10
1569   31 00 52               LD   SP,STACK   
156C   CD A9 0D               CALL   coldInit   
156F   CD 70 50               CALL   execStr   
1572   24 31 30 00            DB   "$10",0   
1576   CD E9 0C               CALL   flushBuffer   
1579   E1                     POP   HL   
157A   E5                     PUSH   HL   
157B   11 10 00               LD   DE,$10   
157E   B7                     OR   A   
157F   ED 52                  SBC   HL,DE   
1581   7D                     LD   A,L   
1582   B4                     OR   H   
1583   CA E1 15               JP   Z,expectM_2854S49   
1586   CD 61 0D               CALL   printStr   
1589   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
1593   CD 61 0D               CALL   printStr   
1596   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15A5   21 10 00               LD   hl,$10   
15A8   E5                     PUSH   hl   
15A9   E5                     PUSH   hl   
15AA   CD 80 0E               CALL   run   
15AD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15B5   CD E9 0C               CALL   flushBuffer   
15B8   CD 61 0D               CALL   printStr   
15BB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15C8   E1                     POP   hl   
15C9   E5                     PUSH   hl   
15CA   E5                     PUSH   hl   
15CB   CD 80 0E               CALL   run   
15CE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
15DD   CD E9 0C               CALL   flushBuffer   
15E0   76                     HALT      
15E1                EXPECTM_2854S49:      
15E1   E1                     POP   HL   
15E2                          ;*Macro unroll:  test "$FF", $FF
15E2   31 00 52               LD   SP,STACK   
15E5   CD A9 0D               CALL   coldInit   
15E8   CD 70 50               CALL   execStr   
15EB   24 46 46 00            DB   "$FF",0   
15EF   CD E9 0C               CALL   flushBuffer   
15F2   E1                     POP   HL   
15F3   E5                     PUSH   HL   
15F4   11 FF 00               LD   DE,$FF   
15F7   B7                     OR   A   
15F8   ED 52                  SBC   HL,DE   
15FA   7D                     LD   A,L   
15FB   B4                     OR   H   
15FC   CA 5A 16               JP   Z,expectM_2855S50   
15FF   CD 61 0D               CALL   printStr   
1602   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
160C   CD 61 0D               CALL   printStr   
160F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
161E   21 FF 00               LD   hl,$FF   
1621   E5                     PUSH   hl   
1622   E5                     PUSH   hl   
1623   CD 80 0E               CALL   run   
1626   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
162E   CD E9 0C               CALL   flushBuffer   
1631   CD 61 0D               CALL   printStr   
1634   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1641   E1                     POP   hl   
1642   E5                     PUSH   hl   
1643   E5                     PUSH   hl   
1644   CD 80 0E               CALL   run   
1647   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1656   CD E9 0C               CALL   flushBuffer   
1659   76                     HALT      
165A                EXPECTM_2855S50:      
165A   E1                     POP   HL   
165B                          ;*Macro unroll:  test "-1 2 +",1
165B   31 00 52               LD   SP,STACK   
165E   CD A9 0D               CALL   coldInit   
1661   CD 70 50               CALL   execStr   
1664   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
166B   CD E9 0C               CALL   flushBuffer   
166E   E1                     POP   HL   
166F   E5                     PUSH   HL   
1670   11 01 00               LD   DE,1   
1673   B7                     OR   A   
1674   ED 52                  SBC   HL,DE   
1676   7D                     LD   A,L   
1677   B4                     OR   H   
1678   CA D9 16               JP   Z,expectM_2856S51   
167B   CD 61 0D               CALL   printStr   
167E   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
168B   CD 61 0D               CALL   printStr   
168E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
169D   21 01 00               LD   hl,1   
16A0   E5                     PUSH   hl   
16A1   E5                     PUSH   hl   
16A2   CD 80 0E               CALL   run   
16A5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16AD   CD E9 0C               CALL   flushBuffer   
16B0   CD 61 0D               CALL   printStr   
16B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16C0   E1                     POP   hl   
16C1   E5                     PUSH   hl   
16C2   E5                     PUSH   hl   
16C3   CD 80 0E               CALL   run   
16C6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
16D5   CD E9 0C               CALL   flushBuffer   
16D8   76                     HALT      
16D9                EXPECTM_2856S51:      
16D9   E1                     POP   HL   
16DA                          ;*Macro unroll:  test "-1 1 +",0
16DA   31 00 52               LD   SP,STACK   
16DD   CD A9 0D               CALL   coldInit   
16E0   CD 70 50               CALL   execStr   
16E3   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
16EA   CD E9 0C               CALL   flushBuffer   
16ED   E1                     POP   HL   
16EE   E5                     PUSH   HL   
16EF   11 00 00               LD   DE,0   
16F2   B7                     OR   A   
16F3   ED 52                  SBC   HL,DE   
16F5   7D                     LD   A,L   
16F6   B4                     OR   H   
16F7   CA 58 17               JP   Z,expectM_2857S52   
16FA   CD 61 0D               CALL   printStr   
16FD   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
170A   CD 61 0D               CALL   printStr   
170D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
171C   21 00 00               LD   hl,0   
171F   E5                     PUSH   hl   
1720   E5                     PUSH   hl   
1721   CD 80 0E               CALL   run   
1724   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
172C   CD E9 0C               CALL   flushBuffer   
172F   CD 61 0D               CALL   printStr   
1732   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
173F   E1                     POP   hl   
1740   E5                     PUSH   hl   
1741   E5                     PUSH   hl   
1742   CD 80 0E               CALL   run   
1745   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1754   CD E9 0C               CALL   flushBuffer   
1757   76                     HALT      
1758                EXPECTM_2857S52:      
1758   E1                     POP   HL   
1759                          ;*Macro unroll:  test "1 2 +", 3
1759   31 00 52               LD   SP,STACK   
175C   CD A9 0D               CALL   coldInit   
175F   CD 70 50               CALL   execStr   
1762   31 20 32 20 2B 00      DB   "1 2 +",0   
1768   CD E9 0C               CALL   flushBuffer   
176B   E1                     POP   HL   
176C   E5                     PUSH   HL   
176D   11 03 00               LD   DE,3   
1770   B7                     OR   A   
1771   ED 52                  SBC   HL,DE   
1773   7D                     LD   A,L   
1774   B4                     OR   H   
1775   CA D5 17               JP   Z,expectM_2858S53   
1778   CD 61 0D               CALL   printStr   
177B   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1787   CD 61 0D               CALL   printStr   
178A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1799   21 03 00               LD   hl,3   
179C   E5                     PUSH   hl   
179D   E5                     PUSH   hl   
179E   CD 80 0E               CALL   run   
17A1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
17A9   CD E9 0C               CALL   flushBuffer   
17AC   CD 61 0D               CALL   printStr   
17AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17BC   E1                     POP   hl   
17BD   E5                     PUSH   hl   
17BE   E5                     PUSH   hl   
17BF   CD 80 0E               CALL   run   
17C2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
17D1   CD E9 0C               CALL   flushBuffer   
17D4   76                     HALT      
17D5                EXPECTM_2858S53:      
17D5   E1                     POP   HL   
17D6                          ;*Macro unroll:  test "4 1 2 +", 3
17D6   31 00 52               LD   SP,STACK   
17D9   CD A9 0D               CALL   coldInit   
17DC   CD 70 50               CALL   execStr   
17DF   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
17E7   CD E9 0C               CALL   flushBuffer   
17EA   E1                     POP   HL   
17EB   E5                     PUSH   HL   
17EC   11 03 00               LD   DE,3   
17EF   B7                     OR   A   
17F0   ED 52                  SBC   HL,DE   
17F2   7D                     LD   A,L   
17F3   B4                     OR   H   
17F4   CA 56 18               JP   Z,expectM_2859S54   
17F7   CD 61 0D               CALL   printStr   
17FA   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1808   CD 61 0D               CALL   printStr   
180B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
181A   21 03 00               LD   hl,3   
181D   E5                     PUSH   hl   
181E   E5                     PUSH   hl   
181F   CD 80 0E               CALL   run   
1822   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
182A   CD E9 0C               CALL   flushBuffer   
182D   CD 61 0D               CALL   printStr   
1830   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
183D   E1                     POP   hl   
183E   E5                     PUSH   hl   
183F   E5                     PUSH   hl   
1840   CD 80 0E               CALL   run   
1843   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1852   CD E9 0C               CALL   flushBuffer   
1855   76                     HALT      
1856                EXPECTM_2859S54:      
1856   E1                     POP   HL   
1857                          ;*Macro unroll:  test "123 456 +", 123+456
1857   31 00 52               LD   SP,STACK   
185A   CD A9 0D               CALL   coldInit   
185D   CD 70 50               CALL   execStr   
1860   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
186A   CD E9 0C               CALL   flushBuffer   
186D   E1                     POP   HL   
186E   E5                     PUSH   HL   
186F   11 43 02               LD   DE,123+456   
1872   B7                     OR   A   
1873   ED 52                  SBC   HL,DE   
1875   7D                     LD   A,L   
1876   B4                     OR   H   
1877   CA DB 18               JP   Z,expectM_2860S55   
187A   CD 61 0D               CALL   printStr   
187D   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
188D   CD 61 0D               CALL   printStr   
1890   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
189F   21 43 02               LD   hl,123+456   
18A2   E5                     PUSH   hl   
18A3   E5                     PUSH   hl   
18A4   CD 80 0E               CALL   run   
18A7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
18AF   CD E9 0C               CALL   flushBuffer   
18B2   CD 61 0D               CALL   printStr   
18B5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18C2   E1                     POP   hl   
18C3   E5                     PUSH   hl   
18C4   E5                     PUSH   hl   
18C5   CD 80 0E               CALL   run   
18C8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
18D7   CD E9 0C               CALL   flushBuffer   
18DA   76                     HALT      
18DB                EXPECTM_2860S55:      
18DB   E1                     POP   HL   
18DC                          ;*Macro unroll:  test "64 128 +", 64+128
18DC   31 00 52               LD   SP,STACK   
18DF   CD A9 0D               CALL   coldInit   
18E2   CD 70 50               CALL   execStr   
18E5   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
18EE   CD E9 0C               CALL   flushBuffer   
18F1   E1                     POP   HL   
18F2   E5                     PUSH   HL   
18F3   11 C0 00               LD   DE,64+128   
18F6   B7                     OR   A   
18F7   ED 52                  SBC   HL,DE   
18F9   7D                     LD   A,L   
18FA   B4                     OR   H   
18FB   CA 5E 19               JP   Z,expectM_2861S56   
18FE   CD 61 0D               CALL   printStr   
1901   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1910   CD 61 0D               CALL   printStr   
1913   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1922   21 C0 00               LD   hl,64+128   
1925   E5                     PUSH   hl   
1926   E5                     PUSH   hl   
1927   CD 80 0E               CALL   run   
192A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1932   CD E9 0C               CALL   flushBuffer   
1935   CD 61 0D               CALL   printStr   
1938   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1945   E1                     POP   hl   
1946   E5                     PUSH   hl   
1947   E5                     PUSH   hl   
1948   CD 80 0E               CALL   run   
194B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
195A   CD E9 0C               CALL   flushBuffer   
195D   76                     HALT      
195E                EXPECTM_2861S56:      
195E   E1                     POP   HL   
195F                          ;*Macro unroll:  test "1 2 +", 3
195F   31 00 52               LD   SP,STACK   
1962   CD A9 0D               CALL   coldInit   
1965   CD 70 50               CALL   execStr   
1968   31 20 32 20 2B 00      DB   "1 2 +",0   
196E   CD E9 0C               CALL   flushBuffer   
1971   E1                     POP   HL   
1972   E5                     PUSH   HL   
1973   11 03 00               LD   DE,3   
1976   B7                     OR   A   
1977   ED 52                  SBC   HL,DE   
1979   7D                     LD   A,L   
197A   B4                     OR   H   
197B   CA DB 19               JP   Z,expectM_2862S57   
197E   CD 61 0D               CALL   printStr   
1981   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
198D   CD 61 0D               CALL   printStr   
1990   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
199F   21 03 00               LD   hl,3   
19A2   E5                     PUSH   hl   
19A3   E5                     PUSH   hl   
19A4   CD 80 0E               CALL   run   
19A7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
19AF   CD E9 0C               CALL   flushBuffer   
19B2   CD 61 0D               CALL   printStr   
19B5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19C2   E1                     POP   hl   
19C3   E5                     PUSH   hl   
19C4   E5                     PUSH   hl   
19C5   CD 80 0E               CALL   run   
19C8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
19D7   CD E9 0C               CALL   flushBuffer   
19DA   76                     HALT      
19DB                EXPECTM_2862S57:      
19DB   E1                     POP   HL   
19DC                          ;*Macro unroll:  test "1a= a++ a",2
19DC   31 00 52               LD   SP,STACK   
19DF   CD A9 0D               CALL   coldInit   
19E2   CD 70 50               CALL   execStr   
19E5   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
19EF   CD E9 0C               CALL   flushBuffer   
19F2   E1                     POP   HL   
19F3   E5                     PUSH   HL   
19F4   11 02 00               LD   DE,2   
19F7   B7                     OR   A   
19F8   ED 52                  SBC   HL,DE   
19FA   7D                     LD   A,L   
19FB   B4                     OR   H   
19FC   CA 60 1A               JP   Z,expectM_2863S58   
19FF   CD 61 0D               CALL   printStr   
1A02   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1A12   CD 61 0D               CALL   printStr   
1A15   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A24   21 02 00               LD   hl,2   
1A27   E5                     PUSH   hl   
1A28   E5                     PUSH   hl   
1A29   CD 80 0E               CALL   run   
1A2C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A34   CD E9 0C               CALL   flushBuffer   
1A37   CD 61 0D               CALL   printStr   
1A3A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A47   E1                     POP   hl   
1A48   E5                     PUSH   hl   
1A49   E5                     PUSH   hl   
1A4A   CD 80 0E               CALL   run   
1A4D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A5C   CD E9 0C               CALL   flushBuffer   
1A5F   76                     HALT      
1A60                EXPECTM_2863S58:      
1A60   E1                     POP   HL   
1A61                          ;*Macro unroll:  test "-1 -1 -",0
1A61   31 00 52               LD   SP,STACK   
1A64   CD A9 0D               CALL   coldInit   
1A67   CD 70 50               CALL   execStr   
1A6A   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1A72   CD E9 0C               CALL   flushBuffer   
1A75   E1                     POP   HL   
1A76   E5                     PUSH   HL   
1A77   11 00 00               LD   DE,0   
1A7A   B7                     OR   A   
1A7B   ED 52                  SBC   HL,DE   
1A7D   7D                     LD   A,L   
1A7E   B4                     OR   H   
1A7F   CA E1 1A               JP   Z,expectM_2864S59   
1A82   CD 61 0D               CALL   printStr   
1A85   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1A93   CD 61 0D               CALL   printStr   
1A96   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AA5   21 00 00               LD   hl,0   
1AA8   E5                     PUSH   hl   
1AA9   E5                     PUSH   hl   
1AAA   CD 80 0E               CALL   run   
1AAD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1AB5   CD E9 0C               CALL   flushBuffer   
1AB8   CD 61 0D               CALL   printStr   
1ABB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AC8   E1                     POP   hl   
1AC9   E5                     PUSH   hl   
1ACA   E5                     PUSH   hl   
1ACB   CD 80 0E               CALL   run   
1ACE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1ADD   CD E9 0C               CALL   flushBuffer   
1AE0   76                     HALT      
1AE1                EXPECTM_2864S59:      
1AE1   E1                     POP   HL   
1AE2                          ;*Macro unroll:  test "5 3 -", 2
1AE2   31 00 52               LD   SP,STACK   
1AE5   CD A9 0D               CALL   coldInit   
1AE8   CD 70 50               CALL   execStr   
1AEB   35 20 33 20 2D 00      DB   "5 3 -",0   
1AF1   CD E9 0C               CALL   flushBuffer   
1AF4   E1                     POP   HL   
1AF5   E5                     PUSH   HL   
1AF6   11 02 00               LD   DE,2   
1AF9   B7                     OR   A   
1AFA   ED 52                  SBC   HL,DE   
1AFC   7D                     LD   A,L   
1AFD   B4                     OR   H   
1AFE   CA 5E 1B               JP   Z,expectM_2865S60   
1B01   CD 61 0D               CALL   printStr   
1B04   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1B10   CD 61 0D               CALL   printStr   
1B13   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B22   21 02 00               LD   hl,2   
1B25   E5                     PUSH   hl   
1B26   E5                     PUSH   hl   
1B27   CD 80 0E               CALL   run   
1B2A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B32   CD E9 0C               CALL   flushBuffer   
1B35   CD 61 0D               CALL   printStr   
1B38   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B45   E1                     POP   hl   
1B46   E5                     PUSH   hl   
1B47   E5                     PUSH   hl   
1B48   CD 80 0E               CALL   run   
1B4B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B5A   CD E9 0C               CALL   flushBuffer   
1B5D   76                     HALT      
1B5E                EXPECTM_2865S60:      
1B5E   E1                     POP   HL   
1B5F                          ;*Macro unroll:  test "2 1 -",1
1B5F   31 00 52               LD   SP,STACK   
1B62   CD A9 0D               CALL   coldInit   
1B65   CD 70 50               CALL   execStr   
1B68   32 20 31 20 2D 00      DB   "2 1 -",0   
1B6E   CD E9 0C               CALL   flushBuffer   
1B71   E1                     POP   HL   
1B72   E5                     PUSH   HL   
1B73   11 01 00               LD   DE,1   
1B76   B7                     OR   A   
1B77   ED 52                  SBC   HL,DE   
1B79   7D                     LD   A,L   
1B7A   B4                     OR   H   
1B7B   CA DB 1B               JP   Z,expectM_2866S61   
1B7E   CD 61 0D               CALL   printStr   
1B81   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1B8D   CD 61 0D               CALL   printStr   
1B90   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B9F   21 01 00               LD   hl,1   
1BA2   E5                     PUSH   hl   
1BA3   E5                     PUSH   hl   
1BA4   CD 80 0E               CALL   run   
1BA7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1BAF   CD E9 0C               CALL   flushBuffer   
1BB2   CD 61 0D               CALL   printStr   
1BB5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BC2   E1                     POP   hl   
1BC3   E5                     PUSH   hl   
1BC4   E5                     PUSH   hl   
1BC5   CD 80 0E               CALL   run   
1BC8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1BD7   CD E9 0C               CALL   flushBuffer   
1BDA   76                     HALT      
1BDB                EXPECTM_2866S61:      
1BDB   E1                     POP   HL   
1BDC                          ;*Macro unroll:  test "3a= a-- a",2
1BDC   31 00 52               LD   SP,STACK   
1BDF   CD A9 0D               CALL   coldInit   
1BE2   CD 70 50               CALL   execStr   
1BE5   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1BEF   CD E9 0C               CALL   flushBuffer   
1BF2   E1                     POP   HL   
1BF3   E5                     PUSH   HL   
1BF4   11 02 00               LD   DE,2   
1BF7   B7                     OR   A   
1BF8   ED 52                  SBC   HL,DE   
1BFA   7D                     LD   A,L   
1BFB   B4                     OR   H   
1BFC   CA 60 1C               JP   Z,expectM_2867S62   
1BFF   CD 61 0D               CALL   printStr   
1C02   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1C12   CD 61 0D               CALL   printStr   
1C15   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C24   21 02 00               LD   hl,2   
1C27   E5                     PUSH   hl   
1C28   E5                     PUSH   hl   
1C29   CD 80 0E               CALL   run   
1C2C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C34   CD E9 0C               CALL   flushBuffer   
1C37   CD 61 0D               CALL   printStr   
1C3A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C47   E1                     POP   hl   
1C48   E5                     PUSH   hl   
1C49   E5                     PUSH   hl   
1C4A   CD 80 0E               CALL   run   
1C4D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C5C   CD E9 0C               CALL   flushBuffer   
1C5F   76                     HALT      
1C60                EXPECTM_2867S62:      
1C60   E1                     POP   HL   
1C61                          ;*Macro unroll:  test "3 5 &", 1
1C61   31 00 52               LD   SP,STACK   
1C64   CD A9 0D               CALL   coldInit   
1C67   CD 70 50               CALL   execStr   
1C6A   33 20 35 20 26 00      DB   "3 5 &",0   
1C70   CD E9 0C               CALL   flushBuffer   
1C73   E1                     POP   HL   
1C74   E5                     PUSH   HL   
1C75   11 01 00               LD   DE,1   
1C78   B7                     OR   A   
1C79   ED 52                  SBC   HL,DE   
1C7B   7D                     LD   A,L   
1C7C   B4                     OR   H   
1C7D   CA DD 1C               JP   Z,expectM_2868S63   
1C80   CD 61 0D               CALL   printStr   
1C83   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1C8F   CD 61 0D               CALL   printStr   
1C92   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CA1   21 01 00               LD   hl,1   
1CA4   E5                     PUSH   hl   
1CA5   E5                     PUSH   hl   
1CA6   CD 80 0E               CALL   run   
1CA9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1CB1   CD E9 0C               CALL   flushBuffer   
1CB4   CD 61 0D               CALL   printStr   
1CB7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CC4   E1                     POP   hl   
1CC5   E5                     PUSH   hl   
1CC6   E5                     PUSH   hl   
1CC7   CD 80 0E               CALL   run   
1CCA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1CD9   CD E9 0C               CALL   flushBuffer   
1CDC   76                     HALT      
1CDD                EXPECTM_2868S63:      
1CDD   E1                     POP   HL   
1CDE                          ;*Macro unroll:  test "3 5 |", 7
1CDE   31 00 52               LD   SP,STACK   
1CE1   CD A9 0D               CALL   coldInit   
1CE4   CD 70 50               CALL   execStr   
1CE7   33 20 35 20 7C 00      DB   "3 5 |",0   
1CED   CD E9 0C               CALL   flushBuffer   
1CF0   E1                     POP   HL   
1CF1   E5                     PUSH   HL   
1CF2   11 07 00               LD   DE,7   
1CF5   B7                     OR   A   
1CF6   ED 52                  SBC   HL,DE   
1CF8   7D                     LD   A,L   
1CF9   B4                     OR   H   
1CFA   CA 5A 1D               JP   Z,expectM_2869S64   
1CFD   CD 61 0D               CALL   printStr   
1D00   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1D0C   CD 61 0D               CALL   printStr   
1D0F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D1E   21 07 00               LD   hl,7   
1D21   E5                     PUSH   hl   
1D22   E5                     PUSH   hl   
1D23   CD 80 0E               CALL   run   
1D26   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D2E   CD E9 0C               CALL   flushBuffer   
1D31   CD 61 0D               CALL   printStr   
1D34   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D41   E1                     POP   hl   
1D42   E5                     PUSH   hl   
1D43   E5                     PUSH   hl   
1D44   CD 80 0E               CALL   run   
1D47   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D56   CD E9 0C               CALL   flushBuffer   
1D59   76                     HALT      
1D5A                EXPECTM_2869S64:      
1D5A   E1                     POP   HL   
1D5B                          ;*Macro unroll:  test "3 5 /x", 6
1D5B   31 00 52               LD   SP,STACK   
1D5E   CD A9 0D               CALL   coldInit   
1D61   CD 70 50               CALL   execStr   
1D64   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1D6B   CD E9 0C               CALL   flushBuffer   
1D6E   E1                     POP   HL   
1D6F   E5                     PUSH   HL   
1D70   11 06 00               LD   DE,6   
1D73   B7                     OR   A   
1D74   ED 52                  SBC   HL,DE   
1D76   7D                     LD   A,L   
1D77   B4                     OR   H   
1D78   CA D9 1D               JP   Z,expectM_2870S65   
1D7B   CD 61 0D               CALL   printStr   
1D7E   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1D8B   CD 61 0D               CALL   printStr   
1D8E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D9D   21 06 00               LD   hl,6   
1DA0   E5                     PUSH   hl   
1DA1   E5                     PUSH   hl   
1DA2   CD 80 0E               CALL   run   
1DA5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1DAD   CD E9 0C               CALL   flushBuffer   
1DB0   CD 61 0D               CALL   printStr   
1DB3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DC0   E1                     POP   hl   
1DC1   E5                     PUSH   hl   
1DC2   E5                     PUSH   hl   
1DC3   CD 80 0E               CALL   run   
1DC6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1DD5   CD E9 0C               CALL   flushBuffer   
1DD8   76                     HALT      
1DD9                EXPECTM_2870S65:      
1DD9   E1                     POP   HL   
1DDA                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1DDA   31 00 52               LD   SP,STACK   
1DDD   CD A9 0D               CALL   coldInit   
1DE0   CD 70 50               CALL   execStr   
1DE3   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1DF2   CD E9 0C               CALL   flushBuffer   
1DF5   E1                     POP   HL   
1DF6   E5                     PUSH   HL   
1DF7   11 06 00               LD   DE,6   
1DFA   B7                     OR   A   
1DFB   ED 52                  SBC   HL,DE   
1DFD   7D                     LD   A,L   
1DFE   B4                     OR   H   
1DFF   CA 68 1E               JP   Z,expectM_2871S66   
1E02   CD 61 0D               CALL   printStr   
1E05   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1E1A   CD 61 0D               CALL   printStr   
1E1D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E2C   21 06 00               LD   hl,6   
1E2F   E5                     PUSH   hl   
1E30   E5                     PUSH   hl   
1E31   CD 80 0E               CALL   run   
1E34   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E3C   CD E9 0C               CALL   flushBuffer   
1E3F   CD 61 0D               CALL   printStr   
1E42   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E4F   E1                     POP   hl   
1E50   E5                     PUSH   hl   
1E51   E5                     PUSH   hl   
1E52   CD 80 0E               CALL   run   
1E55   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E64   CD E9 0C               CALL   flushBuffer   
1E67   76                     HALT      
1E68                EXPECTM_2871S66:      
1E68   E1                     POP   HL   
1E69                          ;*Macro unroll:  test "2 3 *", 6
1E69   31 00 52               LD   SP,STACK   
1E6C   CD A9 0D               CALL   coldInit   
1E6F   CD 70 50               CALL   execStr   
1E72   32 20 33 20 2A 00      DB   "2 3 *",0   
1E78   CD E9 0C               CALL   flushBuffer   
1E7B   E1                     POP   HL   
1E7C   E5                     PUSH   HL   
1E7D   11 06 00               LD   DE,6   
1E80   B7                     OR   A   
1E81   ED 52                  SBC   HL,DE   
1E83   7D                     LD   A,L   
1E84   B4                     OR   H   
1E85   CA E5 1E               JP   Z,expectM_2872S67   
1E88   CD 61 0D               CALL   printStr   
1E8B   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1E97   CD 61 0D               CALL   printStr   
1E9A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EA9   21 06 00               LD   hl,6   
1EAC   E5                     PUSH   hl   
1EAD   E5                     PUSH   hl   
1EAE   CD 80 0E               CALL   run   
1EB1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1EB9   CD E9 0C               CALL   flushBuffer   
1EBC   CD 61 0D               CALL   printStr   
1EBF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1ECC   E1                     POP   hl   
1ECD   E5                     PUSH   hl   
1ECE   E5                     PUSH   hl   
1ECF   CD 80 0E               CALL   run   
1ED2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1EE1   CD E9 0C               CALL   flushBuffer   
1EE4   76                     HALT      
1EE5                EXPECTM_2872S67:      
1EE5   E1                     POP   HL   
1EE6                          ;*Macro unroll:  test "1 2 3 + *", 5
1EE6   31 00 52               LD   SP,STACK   
1EE9   CD A9 0D               CALL   coldInit   
1EEC   CD 70 50               CALL   execStr   
1EEF   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1EF9   CD E9 0C               CALL   flushBuffer   
1EFC   E1                     POP   HL   
1EFD   E5                     PUSH   HL   
1EFE   11 05 00               LD   DE,5   
1F01   B7                     OR   A   
1F02   ED 52                  SBC   HL,DE   
1F04   7D                     LD   A,L   
1F05   B4                     OR   H   
1F06   CA 6A 1F               JP   Z,expectM_2873S68   
1F09   CD 61 0D               CALL   printStr   
1F0C   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1F1C   CD 61 0D               CALL   printStr   
1F1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F2E   21 05 00               LD   hl,5   
1F31   E5                     PUSH   hl   
1F32   E5                     PUSH   hl   
1F33   CD 80 0E               CALL   run   
1F36   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F3E   CD E9 0C               CALL   flushBuffer   
1F41   CD 61 0D               CALL   printStr   
1F44   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F51   E1                     POP   hl   
1F52   E5                     PUSH   hl   
1F53   E5                     PUSH   hl   
1F54   CD 80 0E               CALL   run   
1F57   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F66   CD E9 0C               CALL   flushBuffer   
1F69   76                     HALT      
1F6A                EXPECTM_2873S68:      
1F6A   E1                     POP   HL   
1F6B                          ;*Macro unroll:  test "7 3 /", 2
1F6B   31 00 52               LD   SP,STACK   
1F6E   CD A9 0D               CALL   coldInit   
1F71   CD 70 50               CALL   execStr   
1F74   37 20 33 20 2F 00      DB   "7 3 /",0   
1F7A   CD E9 0C               CALL   flushBuffer   
1F7D   E1                     POP   HL   
1F7E   E5                     PUSH   HL   
1F7F   11 02 00               LD   DE,2   
1F82   B7                     OR   A   
1F83   ED 52                  SBC   HL,DE   
1F85   7D                     LD   A,L   
1F86   B4                     OR   H   
1F87   CA E7 1F               JP   Z,expectM_2874S69   
1F8A   CD 61 0D               CALL   printStr   
1F8D   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1F99   CD 61 0D               CALL   printStr   
1F9C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FAB   21 02 00               LD   hl,2   
1FAE   E5                     PUSH   hl   
1FAF   E5                     PUSH   hl   
1FB0   CD 80 0E               CALL   run   
1FB3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1FBB   CD E9 0C               CALL   flushBuffer   
1FBE   CD 61 0D               CALL   printStr   
1FC1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FCE   E1                     POP   hl   
1FCF   E5                     PUSH   hl   
1FD0   E5                     PUSH   hl   
1FD1   CD 80 0E               CALL   run   
1FD4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1FE3   CD E9 0C               CALL   flushBuffer   
1FE6   76                     HALT      
1FE7                EXPECTM_2874S69:      
1FE7   E1                     POP   HL   
1FE8                          ;*Macro unroll:  test "100a= 1a+= a", 101
1FE8   31 00 52               LD   SP,STACK   
1FEB   CD A9 0D               CALL   coldInit   
1FEE   CD 70 50               CALL   execStr   
1FF1   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
1FFE   CD E9 0C               CALL   flushBuffer   
2001   E1                     POP   HL   
2002   E5                     PUSH   HL   
2003   11 65 00               LD   DE,101   
2006   B7                     OR   A   
2007   ED 52                  SBC   HL,DE   
2009   7D                     LD   A,L   
200A   B4                     OR   H   
200B   CA 72 20               JP   Z,expectM_2875S70   
200E   CD 61 0D               CALL   printStr   
2011   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
2024   CD 61 0D               CALL   printStr   
2027   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2036   21 65 00               LD   hl,101   
2039   E5                     PUSH   hl   
203A   E5                     PUSH   hl   
203B   CD 80 0E               CALL   run   
203E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2046   CD E9 0C               CALL   flushBuffer   
2049   CD 61 0D               CALL   printStr   
204C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2059   E1                     POP   hl   
205A   E5                     PUSH   hl   
205B   E5                     PUSH   hl   
205C   CD 80 0E               CALL   run   
205F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
206E   CD E9 0C               CALL   flushBuffer   
2071   76                     HALT      
2072                EXPECTM_2875S70:      
2072   E1                     POP   HL   
2073                          ;*Macro unroll:  test "100a= a1-= a", 99
2073   31 00 52               LD   SP,STACK   
2076   CD A9 0D               CALL   coldInit   
2079   CD 70 50               CALL   execStr   
207C   31 30 30 61 3D 20 61 31 2D 3D 20 61 00 DB   "100a= a1-= a",0   
2089   CD E9 0C               CALL   flushBuffer   
208C   E1                     POP   HL   
208D   E5                     PUSH   HL   
208E   11 63 00               LD   DE,99   
2091   B7                     OR   A   
2092   ED 52                  SBC   HL,DE   
2094   7D                     LD   A,L   
2095   B4                     OR   H   
2096   CA FD 20               JP   Z,expectM_2876S71   
2099   CD 61 0D               CALL   printStr   
209C   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 31 2D 3D 20 61 00 .CSTR   "Code: ","100a= a1-= a"   
20AF   CD 61 0D               CALL   printStr   
20B2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20C1   21 63 00               LD   hl,99   
20C4   E5                     PUSH   hl   
20C5   E5                     PUSH   hl   
20C6   CD 80 0E               CALL   run   
20C9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
20D1   CD E9 0C               CALL   flushBuffer   
20D4   CD 61 0D               CALL   printStr   
20D7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20E4   E1                     POP   hl   
20E5   E5                     PUSH   hl   
20E6   E5                     PUSH   hl   
20E7   CD 80 0E               CALL   run   
20EA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
20F9   CD E9 0C               CALL   flushBuffer   
20FC   76                     HALT      
20FD                EXPECTM_2876S71:      
20FD   E1                     POP   HL   
20FE                          ;*Macro unroll:  test "100a= a2*= a", 200
20FE   31 00 52               LD   SP,STACK   
2101   CD A9 0D               CALL   coldInit   
2104   CD 70 50               CALL   execStr   
2107   31 30 30 61 3D 20 61 32 2A 3D 20 61 00 DB   "100a= a2*= a",0   
2114   CD E9 0C               CALL   flushBuffer   
2117   E1                     POP   HL   
2118   E5                     PUSH   HL   
2119   11 C8 00               LD   DE,200   
211C   B7                     OR   A   
211D   ED 52                  SBC   HL,DE   
211F   7D                     LD   A,L   
2120   B4                     OR   H   
2121   CA 88 21               JP   Z,expectM_2877S72   
2124   CD 61 0D               CALL   printStr   
2127   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2A 3D 20 61 00 .CSTR   "Code: ","100a= a2*= a"   
213A   CD 61 0D               CALL   printStr   
213D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
214C   21 C8 00               LD   hl,200   
214F   E5                     PUSH   hl   
2150   E5                     PUSH   hl   
2151   CD 80 0E               CALL   run   
2154   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
215C   CD E9 0C               CALL   flushBuffer   
215F   CD 61 0D               CALL   printStr   
2162   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
216F   E1                     POP   hl   
2170   E5                     PUSH   hl   
2171   E5                     PUSH   hl   
2172   CD 80 0E               CALL   run   
2175   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2184   CD E9 0C               CALL   flushBuffer   
2187   76                     HALT      
2188                EXPECTM_2877S72:      
2188   E1                     POP   HL   
2189                          ;*Macro unroll:  test "100a= a2/= a", 50
2189   31 00 52               LD   SP,STACK   
218C   CD A9 0D               CALL   coldInit   
218F   CD 70 50               CALL   execStr   
2192   31 30 30 61 3D 20 61 32 2F 3D 20 61 00 DB   "100a= a2/= a",0   
219F   CD E9 0C               CALL   flushBuffer   
21A2   E1                     POP   HL   
21A3   E5                     PUSH   HL   
21A4   11 32 00               LD   DE,50   
21A7   B7                     OR   A   
21A8   ED 52                  SBC   HL,DE   
21AA   7D                     LD   A,L   
21AB   B4                     OR   H   
21AC   CA 13 22               JP   Z,expectM_2878S73   
21AF   CD 61 0D               CALL   printStr   
21B2   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2F 3D 20 61 00 .CSTR   "Code: ","100a= a2/= a"   
21C5   CD 61 0D               CALL   printStr   
21C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21D7   21 32 00               LD   hl,50   
21DA   E5                     PUSH   hl   
21DB   E5                     PUSH   hl   
21DC   CD 80 0E               CALL   run   
21DF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
21E7   CD E9 0C               CALL   flushBuffer   
21EA   CD 61 0D               CALL   printStr   
21ED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21FA   E1                     POP   hl   
21FB   E5                     PUSH   hl   
21FC   E5                     PUSH   hl   
21FD   CD 80 0E               CALL   run   
2200   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
220F   CD E9 0C               CALL   flushBuffer   
2212   76                     HALT      
2213                EXPECTM_2878S73:      
2213   E1                     POP   HL   
2214                          ;*Macro unroll:  test "7 3 / /re", 1
2214   31 00 52               LD   SP,STACK   
2217   CD A9 0D               CALL   coldInit   
221A   CD 70 50               CALL   execStr   
221D   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
2227   CD E9 0C               CALL   flushBuffer   
222A   E1                     POP   HL   
222B   E5                     PUSH   HL   
222C   11 01 00               LD   DE,1   
222F   B7                     OR   A   
2230   ED 52                  SBC   HL,DE   
2232   7D                     LD   A,L   
2233   B4                     OR   H   
2234   CA 98 22               JP   Z,expectM_2879S74   
2237   CD 61 0D               CALL   printStr   
223A   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
224A   CD 61 0D               CALL   printStr   
224D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
225C   21 01 00               LD   hl,1   
225F   E5                     PUSH   hl   
2260   E5                     PUSH   hl   
2261   CD 80 0E               CALL   run   
2264   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
226C   CD E9 0C               CALL   flushBuffer   
226F   CD 61 0D               CALL   printStr   
2272   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
227F   E1                     POP   hl   
2280   E5                     PUSH   hl   
2281   E5                     PUSH   hl   
2282   CD 80 0E               CALL   run   
2285   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2294   CD E9 0C               CALL   flushBuffer   
2297   76                     HALT      
2298                EXPECTM_2879S74:      
2298   E1                     POP   HL   
2299                          ;*Macro unroll:  test "7 3 /", 2
2299   31 00 52               LD   SP,STACK   
229C   CD A9 0D               CALL   coldInit   
229F   CD 70 50               CALL   execStr   
22A2   37 20 33 20 2F 00      DB   "7 3 /",0   
22A8   CD E9 0C               CALL   flushBuffer   
22AB   E1                     POP   HL   
22AC   E5                     PUSH   HL   
22AD   11 02 00               LD   DE,2   
22B0   B7                     OR   A   
22B1   ED 52                  SBC   HL,DE   
22B3   7D                     LD   A,L   
22B4   B4                     OR   H   
22B5   CA 15 23               JP   Z,expectM_2880S75   
22B8   CD 61 0D               CALL   printStr   
22BB   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
22C7   CD 61 0D               CALL   printStr   
22CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22D9   21 02 00               LD   hl,2   
22DC   E5                     PUSH   hl   
22DD   E5                     PUSH   hl   
22DE   CD 80 0E               CALL   run   
22E1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
22E9   CD E9 0C               CALL   flushBuffer   
22EC   CD 61 0D               CALL   printStr   
22EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22FC   E1                     POP   hl   
22FD   E5                     PUSH   hl   
22FE   E5                     PUSH   hl   
22FF   CD 80 0E               CALL   run   
2302   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2311   CD E9 0C               CALL   flushBuffer   
2314   76                     HALT      
2315                EXPECTM_2880S75:      
2315   E1                     POP   HL   
2316                          ;*Macro unroll:  test "2 3 ==", FALSE
2316   31 00 52               LD   SP,STACK   
2319   CD A9 0D               CALL   coldInit   
231C   CD 70 50               CALL   execStr   
231F   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
2326   CD E9 0C               CALL   flushBuffer   
2329   E1                     POP   HL   
232A   E5                     PUSH   HL   
232B   11 00 00               LD   DE,FALSE   
232E   B7                     OR   A   
232F   ED 52                  SBC   HL,DE   
2331   7D                     LD   A,L   
2332   B4                     OR   H   
2333   CA 94 23               JP   Z,expectM_2881S76   
2336   CD 61 0D               CALL   printStr   
2339   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2346   CD 61 0D               CALL   printStr   
2349   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2358   21 00 00               LD   hl,FALSE   
235B   E5                     PUSH   hl   
235C   E5                     PUSH   hl   
235D   CD 80 0E               CALL   run   
2360   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2368   CD E9 0C               CALL   flushBuffer   
236B   CD 61 0D               CALL   printStr   
236E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
237B   E1                     POP   hl   
237C   E5                     PUSH   hl   
237D   E5                     PUSH   hl   
237E   CD 80 0E               CALL   run   
2381   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2390   CD E9 0C               CALL   flushBuffer   
2393   76                     HALT      
2394                EXPECTM_2881S76:      
2394   E1                     POP   HL   
2395                          ;*Macro unroll:  test "3 3 ==", TRUE
2395   31 00 52               LD   SP,STACK   
2398   CD A9 0D               CALL   coldInit   
239B   CD 70 50               CALL   execStr   
239E   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
23A5   CD E9 0C               CALL   flushBuffer   
23A8   E1                     POP   HL   
23A9   E5                     PUSH   HL   
23AA   11 FF FF               LD   DE,TRUE   
23AD   B7                     OR   A   
23AE   ED 52                  SBC   HL,DE   
23B0   7D                     LD   A,L   
23B1   B4                     OR   H   
23B2   CA 13 24               JP   Z,expectM_2882S77   
23B5   CD 61 0D               CALL   printStr   
23B8   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
23C5   CD 61 0D               CALL   printStr   
23C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23D7   21 FF FF               LD   hl,TRUE   
23DA   E5                     PUSH   hl   
23DB   E5                     PUSH   hl   
23DC   CD 80 0E               CALL   run   
23DF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
23E7   CD E9 0C               CALL   flushBuffer   
23EA   CD 61 0D               CALL   printStr   
23ED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23FA   E1                     POP   hl   
23FB   E5                     PUSH   hl   
23FC   E5                     PUSH   hl   
23FD   CD 80 0E               CALL   run   
2400   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
240F   CD E9 0C               CALL   flushBuffer   
2412   76                     HALT      
2413                EXPECTM_2882S77:      
2413   E1                     POP   HL   
2414                          ;*Macro unroll:  test "1 2 <", TRUE
2414   31 00 52               LD   SP,STACK   
2417   CD A9 0D               CALL   coldInit   
241A   CD 70 50               CALL   execStr   
241D   31 20 32 20 3C 00      DB   "1 2 <",0   
2423   CD E9 0C               CALL   flushBuffer   
2426   E1                     POP   HL   
2427   E5                     PUSH   HL   
2428   11 FF FF               LD   DE,TRUE   
242B   B7                     OR   A   
242C   ED 52                  SBC   HL,DE   
242E   7D                     LD   A,L   
242F   B4                     OR   H   
2430   CA 90 24               JP   Z,expectM_2883S78   
2433   CD 61 0D               CALL   printStr   
2436   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2442   CD 61 0D               CALL   printStr   
2445   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2454   21 FF FF               LD   hl,TRUE   
2457   E5                     PUSH   hl   
2458   E5                     PUSH   hl   
2459   CD 80 0E               CALL   run   
245C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2464   CD E9 0C               CALL   flushBuffer   
2467   CD 61 0D               CALL   printStr   
246A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2477   E1                     POP   hl   
2478   E5                     PUSH   hl   
2479   E5                     PUSH   hl   
247A   CD 80 0E               CALL   run   
247D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
248C   CD E9 0C               CALL   flushBuffer   
248F   76                     HALT      
2490                EXPECTM_2883S78:      
2490   E1                     POP   HL   
2491                          ;*Macro unroll:  test "2 1 <", FALSE
2491   31 00 52               LD   SP,STACK   
2494   CD A9 0D               CALL   coldInit   
2497   CD 70 50               CALL   execStr   
249A   32 20 31 20 3C 00      DB   "2 1 <",0   
24A0   CD E9 0C               CALL   flushBuffer   
24A3   E1                     POP   HL   
24A4   E5                     PUSH   HL   
24A5   11 00 00               LD   DE,FALSE   
24A8   B7                     OR   A   
24A9   ED 52                  SBC   HL,DE   
24AB   7D                     LD   A,L   
24AC   B4                     OR   H   
24AD   CA 0D 25               JP   Z,expectM_2884S79   
24B0   CD 61 0D               CALL   printStr   
24B3   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
24BF   CD 61 0D               CALL   printStr   
24C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24D1   21 00 00               LD   hl,FALSE   
24D4   E5                     PUSH   hl   
24D5   E5                     PUSH   hl   
24D6   CD 80 0E               CALL   run   
24D9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
24E1   CD E9 0C               CALL   flushBuffer   
24E4   CD 61 0D               CALL   printStr   
24E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24F4   E1                     POP   hl   
24F5   E5                     PUSH   hl   
24F6   E5                     PUSH   hl   
24F7   CD 80 0E               CALL   run   
24FA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2509   CD E9 0C               CALL   flushBuffer   
250C   76                     HALT      
250D                EXPECTM_2884S79:      
250D   E1                     POP   HL   
250E                          ;*Macro unroll:  test "2 3 <", TRUE
250E   31 00 52               LD   SP,STACK   
2511   CD A9 0D               CALL   coldInit   
2514   CD 70 50               CALL   execStr   
2517   32 20 33 20 3C 00      DB   "2 3 <",0   
251D   CD E9 0C               CALL   flushBuffer   
2520   E1                     POP   HL   
2521   E5                     PUSH   HL   
2522   11 FF FF               LD   DE,TRUE   
2525   B7                     OR   A   
2526   ED 52                  SBC   HL,DE   
2528   7D                     LD   A,L   
2529   B4                     OR   H   
252A   CA 8A 25               JP   Z,expectM_2885S80   
252D   CD 61 0D               CALL   printStr   
2530   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
253C   CD 61 0D               CALL   printStr   
253F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
254E   21 FF FF               LD   hl,TRUE   
2551   E5                     PUSH   hl   
2552   E5                     PUSH   hl   
2553   CD 80 0E               CALL   run   
2556   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
255E   CD E9 0C               CALL   flushBuffer   
2561   CD 61 0D               CALL   printStr   
2564   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2571   E1                     POP   hl   
2572   E5                     PUSH   hl   
2573   E5                     PUSH   hl   
2574   CD 80 0E               CALL   run   
2577   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2586   CD E9 0C               CALL   flushBuffer   
2589   76                     HALT      
258A                EXPECTM_2885S80:      
258A   E1                     POP   HL   
258B                          ;*Macro unroll:  test "3 3 <", FALSE
258B   31 00 52               LD   SP,STACK   
258E   CD A9 0D               CALL   coldInit   
2591   CD 70 50               CALL   execStr   
2594   33 20 33 20 3C 00      DB   "3 3 <",0   
259A   CD E9 0C               CALL   flushBuffer   
259D   E1                     POP   HL   
259E   E5                     PUSH   HL   
259F   11 00 00               LD   DE,FALSE   
25A2   B7                     OR   A   
25A3   ED 52                  SBC   HL,DE   
25A5   7D                     LD   A,L   
25A6   B4                     OR   H   
25A7   CA 07 26               JP   Z,expectM_2886S81   
25AA   CD 61 0D               CALL   printStr   
25AD   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
25B9   CD 61 0D               CALL   printStr   
25BC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25CB   21 00 00               LD   hl,FALSE   
25CE   E5                     PUSH   hl   
25CF   E5                     PUSH   hl   
25D0   CD 80 0E               CALL   run   
25D3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25DB   CD E9 0C               CALL   flushBuffer   
25DE   CD 61 0D               CALL   printStr   
25E1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25EE   E1                     POP   hl   
25EF   E5                     PUSH   hl   
25F0   E5                     PUSH   hl   
25F1   CD 80 0E               CALL   run   
25F4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2603   CD E9 0C               CALL   flushBuffer   
2606   76                     HALT      
2607                EXPECTM_2886S81:      
2607   E1                     POP   HL   
2608                          ;*Macro unroll:  test "1 2 >", FALSE
2608   31 00 52               LD   SP,STACK   
260B   CD A9 0D               CALL   coldInit   
260E   CD 70 50               CALL   execStr   
2611   31 20 32 20 3E 00      DB   "1 2 >",0   
2617   CD E9 0C               CALL   flushBuffer   
261A   E1                     POP   HL   
261B   E5                     PUSH   HL   
261C   11 00 00               LD   DE,FALSE   
261F   B7                     OR   A   
2620   ED 52                  SBC   HL,DE   
2622   7D                     LD   A,L   
2623   B4                     OR   H   
2624   CA 84 26               JP   Z,expectM_2887S82   
2627   CD 61 0D               CALL   printStr   
262A   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2636   CD 61 0D               CALL   printStr   
2639   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2648   21 00 00               LD   hl,FALSE   
264B   E5                     PUSH   hl   
264C   E5                     PUSH   hl   
264D   CD 80 0E               CALL   run   
2650   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2658   CD E9 0C               CALL   flushBuffer   
265B   CD 61 0D               CALL   printStr   
265E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
266B   E1                     POP   hl   
266C   E5                     PUSH   hl   
266D   E5                     PUSH   hl   
266E   CD 80 0E               CALL   run   
2671   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2680   CD E9 0C               CALL   flushBuffer   
2683   76                     HALT      
2684                EXPECTM_2887S82:      
2684   E1                     POP   HL   
2685                          ;*Macro unroll:  test "2 1 >", TRUE
2685   31 00 52               LD   SP,STACK   
2688   CD A9 0D               CALL   coldInit   
268B   CD 70 50               CALL   execStr   
268E   32 20 31 20 3E 00      DB   "2 1 >",0   
2694   CD E9 0C               CALL   flushBuffer   
2697   E1                     POP   HL   
2698   E5                     PUSH   HL   
2699   11 FF FF               LD   DE,TRUE   
269C   B7                     OR   A   
269D   ED 52                  SBC   HL,DE   
269F   7D                     LD   A,L   
26A0   B4                     OR   H   
26A1   CA 01 27               JP   Z,expectM_2888S83   
26A4   CD 61 0D               CALL   printStr   
26A7   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
26B3   CD 61 0D               CALL   printStr   
26B6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26C5   21 FF FF               LD   hl,TRUE   
26C8   E5                     PUSH   hl   
26C9   E5                     PUSH   hl   
26CA   CD 80 0E               CALL   run   
26CD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26D5   CD E9 0C               CALL   flushBuffer   
26D8   CD 61 0D               CALL   printStr   
26DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26E8   E1                     POP   hl   
26E9   E5                     PUSH   hl   
26EA   E5                     PUSH   hl   
26EB   CD 80 0E               CALL   run   
26EE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
26FD   CD E9 0C               CALL   flushBuffer   
2700   76                     HALT      
2701                EXPECTM_2888S83:      
2701   E1                     POP   HL   
2702                          ;*Macro unroll:  test "3 3 >", FALSE
2702   31 00 52               LD   SP,STACK   
2705   CD A9 0D               CALL   coldInit   
2708   CD 70 50               CALL   execStr   
270B   33 20 33 20 3E 00      DB   "3 3 >",0   
2711   CD E9 0C               CALL   flushBuffer   
2714   E1                     POP   HL   
2715   E5                     PUSH   HL   
2716   11 00 00               LD   DE,FALSE   
2719   B7                     OR   A   
271A   ED 52                  SBC   HL,DE   
271C   7D                     LD   A,L   
271D   B4                     OR   H   
271E   CA 7E 27               JP   Z,expectM_2889S84   
2721   CD 61 0D               CALL   printStr   
2724   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
2730   CD 61 0D               CALL   printStr   
2733   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2742   21 00 00               LD   hl,FALSE   
2745   E5                     PUSH   hl   
2746   E5                     PUSH   hl   
2747   CD 80 0E               CALL   run   
274A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2752   CD E9 0C               CALL   flushBuffer   
2755   CD 61 0D               CALL   printStr   
2758   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2765   E1                     POP   hl   
2766   E5                     PUSH   hl   
2767   E5                     PUSH   hl   
2768   CD 80 0E               CALL   run   
276B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
277A   CD E9 0C               CALL   flushBuffer   
277D   76                     HALT      
277E                EXPECTM_2889S84:      
277E   E1                     POP   HL   
277F                          ;*Macro unroll:  test "4 3 >", TRUE
277F   31 00 52               LD   SP,STACK   
2782   CD A9 0D               CALL   coldInit   
2785   CD 70 50               CALL   execStr   
2788   34 20 33 20 3E 00      DB   "4 3 >",0   
278E   CD E9 0C               CALL   flushBuffer   
2791   E1                     POP   HL   
2792   E5                     PUSH   HL   
2793   11 FF FF               LD   DE,TRUE   
2796   B7                     OR   A   
2797   ED 52                  SBC   HL,DE   
2799   7D                     LD   A,L   
279A   B4                     OR   H   
279B   CA FB 27               JP   Z,expectM_2890S85   
279E   CD 61 0D               CALL   printStr   
27A1   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
27AD   CD 61 0D               CALL   printStr   
27B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27BF   21 FF FF               LD   hl,TRUE   
27C2   E5                     PUSH   hl   
27C3   E5                     PUSH   hl   
27C4   CD 80 0E               CALL   run   
27C7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27CF   CD E9 0C               CALL   flushBuffer   
27D2   CD 61 0D               CALL   printStr   
27D5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27E2   E1                     POP   hl   
27E3   E5                     PUSH   hl   
27E4   E5                     PUSH   hl   
27E5   CD 80 0E               CALL   run   
27E8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
27F7   CD E9 0C               CALL   flushBuffer   
27FA   76                     HALT      
27FB                EXPECTM_2890S85:      
27FB   E1                     POP   HL   
27FC                          ;*Macro unroll:  test "2 2 <=", TRUE
27FC   31 00 52               LD   SP,STACK   
27FF   CD A9 0D               CALL   coldInit   
2802   CD 70 50               CALL   execStr   
2805   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
280C   CD E9 0C               CALL   flushBuffer   
280F   E1                     POP   HL   
2810   E5                     PUSH   HL   
2811   11 FF FF               LD   DE,TRUE   
2814   B7                     OR   A   
2815   ED 52                  SBC   HL,DE   
2817   7D                     LD   A,L   
2818   B4                     OR   H   
2819   CA 7A 28               JP   Z,expectM_2891S86   
281C   CD 61 0D               CALL   printStr   
281F   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
282C   CD 61 0D               CALL   printStr   
282F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
283E   21 FF FF               LD   hl,TRUE   
2841   E5                     PUSH   hl   
2842   E5                     PUSH   hl   
2843   CD 80 0E               CALL   run   
2846   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
284E   CD E9 0C               CALL   flushBuffer   
2851   CD 61 0D               CALL   printStr   
2854   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2861   E1                     POP   hl   
2862   E5                     PUSH   hl   
2863   E5                     PUSH   hl   
2864   CD 80 0E               CALL   run   
2867   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2876   CD E9 0C               CALL   flushBuffer   
2879   76                     HALT      
287A                EXPECTM_2891S86:      
287A   E1                     POP   HL   
287B                          ;*Macro unroll:  test "2 2 >=", TRUE
287B   31 00 52               LD   SP,STACK   
287E   CD A9 0D               CALL   coldInit   
2881   CD 70 50               CALL   execStr   
2884   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
288B   CD E9 0C               CALL   flushBuffer   
288E   E1                     POP   HL   
288F   E5                     PUSH   HL   
2890   11 FF FF               LD   DE,TRUE   
2893   B7                     OR   A   
2894   ED 52                  SBC   HL,DE   
2896   7D                     LD   A,L   
2897   B4                     OR   H   
2898   CA F9 28               JP   Z,expectM_2892S87   
289B   CD 61 0D               CALL   printStr   
289E   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
28AB   CD 61 0D               CALL   printStr   
28AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28BD   21 FF FF               LD   hl,TRUE   
28C0   E5                     PUSH   hl   
28C1   E5                     PUSH   hl   
28C2   CD 80 0E               CALL   run   
28C5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28CD   CD E9 0C               CALL   flushBuffer   
28D0   CD 61 0D               CALL   printStr   
28D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28E0   E1                     POP   hl   
28E1   E5                     PUSH   hl   
28E2   E5                     PUSH   hl   
28E3   CD 80 0E               CALL   run   
28E6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
28F5   CD E9 0C               CALL   flushBuffer   
28F8   76                     HALT      
28F9                EXPECTM_2892S87:      
28F9   E1                     POP   HL   
28FA                          ;*Macro unroll:  test "3 1 <<", 6
28FA   31 00 52               LD   SP,STACK   
28FD   CD A9 0D               CALL   coldInit   
2900   CD 70 50               CALL   execStr   
2903   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
290A   CD E9 0C               CALL   flushBuffer   
290D   E1                     POP   HL   
290E   E5                     PUSH   HL   
290F   11 06 00               LD   DE,6   
2912   B7                     OR   A   
2913   ED 52                  SBC   HL,DE   
2915   7D                     LD   A,L   
2916   B4                     OR   H   
2917   CA 78 29               JP   Z,expectM_2893S88   
291A   CD 61 0D               CALL   printStr   
291D   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
292A   CD 61 0D               CALL   printStr   
292D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
293C   21 06 00               LD   hl,6   
293F   E5                     PUSH   hl   
2940   E5                     PUSH   hl   
2941   CD 80 0E               CALL   run   
2944   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
294C   CD E9 0C               CALL   flushBuffer   
294F   CD 61 0D               CALL   printStr   
2952   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
295F   E1                     POP   hl   
2960   E5                     PUSH   hl   
2961   E5                     PUSH   hl   
2962   CD 80 0E               CALL   run   
2965   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2974   CD E9 0C               CALL   flushBuffer   
2977   76                     HALT      
2978                EXPECTM_2893S88:      
2978   E1                     POP   HL   
2979                          ;*Macro unroll:  test "10 1 >>", 5
2979   31 00 52               LD   SP,STACK   
297C   CD A9 0D               CALL   coldInit   
297F   CD 70 50               CALL   execStr   
2982   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
298A   CD E9 0C               CALL   flushBuffer   
298D   E1                     POP   HL   
298E   E5                     PUSH   HL   
298F   11 05 00               LD   DE,5   
2992   B7                     OR   A   
2993   ED 52                  SBC   HL,DE   
2995   7D                     LD   A,L   
2996   B4                     OR   H   
2997   CA F9 29               JP   Z,expectM_2894S89   
299A   CD 61 0D               CALL   printStr   
299D   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
29AB   CD 61 0D               CALL   printStr   
29AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29BD   21 05 00               LD   hl,5   
29C0   E5                     PUSH   hl   
29C1   E5                     PUSH   hl   
29C2   CD 80 0E               CALL   run   
29C5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
29CD   CD E9 0C               CALL   flushBuffer   
29D0   CD 61 0D               CALL   printStr   
29D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29E0   E1                     POP   hl   
29E1   E5                     PUSH   hl   
29E2   E5                     PUSH   hl   
29E3   CD 80 0E               CALL   run   
29E6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
29F5   CD E9 0C               CALL   flushBuffer   
29F8   76                     HALT      
29F9                EXPECTM_2894S89:      
29F9   E1                     POP   HL   
29FA                          ;*Macro unroll:  test "1 x = x", 1
29FA   31 00 52               LD   SP,STACK   
29FD   CD A9 0D               CALL   coldInit   
2A00   CD 70 50               CALL   execStr   
2A03   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
2A0B   CD E9 0C               CALL   flushBuffer   
2A0E   E1                     POP   HL   
2A0F   E5                     PUSH   HL   
2A10   11 01 00               LD   DE,1   
2A13   B7                     OR   A   
2A14   ED 52                  SBC   HL,DE   
2A16   7D                     LD   A,L   
2A17   B4                     OR   H   
2A18   CA 7A 2A               JP   Z,expectM_2895S90   
2A1B   CD 61 0D               CALL   printStr   
2A1E   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2A2C   CD 61 0D               CALL   printStr   
2A2F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A3E   21 01 00               LD   hl,1   
2A41   E5                     PUSH   hl   
2A42   E5                     PUSH   hl   
2A43   CD 80 0E               CALL   run   
2A46   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A4E   CD E9 0C               CALL   flushBuffer   
2A51   CD 61 0D               CALL   printStr   
2A54   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A61   E1                     POP   hl   
2A62   E5                     PUSH   hl   
2A63   E5                     PUSH   hl   
2A64   CD 80 0E               CALL   run   
2A67   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A76   CD E9 0C               CALL   flushBuffer   
2A79   76                     HALT      
2A7A                EXPECTM_2895S90:      
2A7A   E1                     POP   HL   
2A7B                          ;*Macro unroll:  test "1{}^", 1
2A7B   31 00 52               LD   SP,STACK   
2A7E   CD A9 0D               CALL   coldInit   
2A81   CD 70 50               CALL   execStr   
2A84   31 7B 7D 5E 00         DB   "1{}^",0   
2A89   CD E9 0C               CALL   flushBuffer   
2A8C   E1                     POP   HL   
2A8D   E5                     PUSH   HL   
2A8E   11 01 00               LD   DE,1   
2A91   B7                     OR   A   
2A92   ED 52                  SBC   HL,DE   
2A94   7D                     LD   A,L   
2A95   B4                     OR   H   
2A96   CA F5 2A               JP   Z,expectM_2896S91   
2A99   CD 61 0D               CALL   printStr   
2A9C   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2AA7   CD 61 0D               CALL   printStr   
2AAA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AB9   21 01 00               LD   hl,1   
2ABC   E5                     PUSH   hl   
2ABD   E5                     PUSH   hl   
2ABE   CD 80 0E               CALL   run   
2AC1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2AC9   CD E9 0C               CALL   flushBuffer   
2ACC   CD 61 0D               CALL   printStr   
2ACF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2ADC   E1                     POP   hl   
2ADD   E5                     PUSH   hl   
2ADE   E5                     PUSH   hl   
2ADF   CD 80 0E               CALL   run   
2AE2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2AF1   CD E9 0C               CALL   flushBuffer   
2AF4   76                     HALT      
2AF5                EXPECTM_2896S91:      
2AF5   E1                     POP   HL   
2AF6                          ;*Macro unroll:  test "{1}^", 1
2AF6   31 00 52               LD   SP,STACK   
2AF9   CD A9 0D               CALL   coldInit   
2AFC   CD 70 50               CALL   execStr   
2AFF   7B 31 7D 5E 00         DB   "{1}^",0   
2B04   CD E9 0C               CALL   flushBuffer   
2B07   E1                     POP   HL   
2B08   E5                     PUSH   HL   
2B09   11 01 00               LD   DE,1   
2B0C   B7                     OR   A   
2B0D   ED 52                  SBC   HL,DE   
2B0F   7D                     LD   A,L   
2B10   B4                     OR   H   
2B11   CA 70 2B               JP   Z,expectM_2897S92   
2B14   CD 61 0D               CALL   printStr   
2B17   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2B22   CD 61 0D               CALL   printStr   
2B25   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B34   21 01 00               LD   hl,1   
2B37   E5                     PUSH   hl   
2B38   E5                     PUSH   hl   
2B39   CD 80 0E               CALL   run   
2B3C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B44   CD E9 0C               CALL   flushBuffer   
2B47   CD 61 0D               CALL   printStr   
2B4A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B57   E1                     POP   hl   
2B58   E5                     PUSH   hl   
2B59   E5                     PUSH   hl   
2B5A   CD 80 0E               CALL   run   
2B5D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B6C   CD E9 0C               CALL   flushBuffer   
2B6F   76                     HALT      
2B70                EXPECTM_2897S92:      
2B70   E1                     POP   HL   
2B71                          ;*Macro unroll:  test "{{1}^}^", 1
2B71   31 00 52               LD   SP,STACK   
2B74   CD A9 0D               CALL   coldInit   
2B77   CD 70 50               CALL   execStr   
2B7A   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
2B82   CD E9 0C               CALL   flushBuffer   
2B85   E1                     POP   HL   
2B86   E5                     PUSH   HL   
2B87   11 01 00               LD   DE,1   
2B8A   B7                     OR   A   
2B8B   ED 52                  SBC   HL,DE   
2B8D   7D                     LD   A,L   
2B8E   B4                     OR   H   
2B8F   CA F1 2B               JP   Z,expectM_2898S93   
2B92   CD 61 0D               CALL   printStr   
2B95   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2BA3   CD 61 0D               CALL   printStr   
2BA6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BB5   21 01 00               LD   hl,1   
2BB8   E5                     PUSH   hl   
2BB9   E5                     PUSH   hl   
2BBA   CD 80 0E               CALL   run   
2BBD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2BC5   CD E9 0C               CALL   flushBuffer   
2BC8   CD 61 0D               CALL   printStr   
2BCB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BD8   E1                     POP   hl   
2BD9   E5                     PUSH   hl   
2BDA   E5                     PUSH   hl   
2BDB   CD 80 0E               CALL   run   
2BDE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BED   CD E9 0C               CALL   flushBuffer   
2BF0   76                     HALT      
2BF1                EXPECTM_2898S93:      
2BF1   E1                     POP   HL   
2BF2                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2BF2   31 00 52               LD   SP,STACK   
2BF5   CD A9 0D               CALL   coldInit   
2BF8   CD 70 50               CALL   execStr   
2BFB   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2C06   CD E9 0C               CALL   flushBuffer   
2C09   E1                     POP   HL   
2C0A   E5                     PUSH   HL   
2C0B   11 01 00               LD   DE,1   
2C0E   B7                     OR   A   
2C0F   ED 52                  SBC   HL,DE   
2C11   7D                     LD   A,L   
2C12   B4                     OR   H   
2C13   CA 78 2C               JP   Z,expectM_2899S94   
2C16   CD 61 0D               CALL   printStr   
2C19   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2C2A   CD 61 0D               CALL   printStr   
2C2D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C3C   21 01 00               LD   hl,1   
2C3F   E5                     PUSH   hl   
2C40   E5                     PUSH   hl   
2C41   CD 80 0E               CALL   run   
2C44   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C4C   CD E9 0C               CALL   flushBuffer   
2C4F   CD 61 0D               CALL   printStr   
2C52   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C5F   E1                     POP   hl   
2C60   E5                     PUSH   hl   
2C61   E5                     PUSH   hl   
2C62   CD 80 0E               CALL   run   
2C65   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C74   CD E9 0C               CALL   flushBuffer   
2C77   76                     HALT      
2C78                EXPECTM_2899S94:      
2C78   E1                     POP   HL   
2C79                          ;*Macro unroll:  test "5 /f{10} ?", 5
2C79   31 00 52               LD   SP,STACK   
2C7C   CD A9 0D               CALL   coldInit   
2C7F   CD 70 50               CALL   execStr   
2C82   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2C8D   CD E9 0C               CALL   flushBuffer   
2C90   E1                     POP   HL   
2C91   E5                     PUSH   HL   
2C92   11 05 00               LD   DE,5   
2C95   B7                     OR   A   
2C96   ED 52                  SBC   HL,DE   
2C98   7D                     LD   A,L   
2C99   B4                     OR   H   
2C9A   CA FF 2C               JP   Z,expectM_2900S95   
2C9D   CD 61 0D               CALL   printStr   
2CA0   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2CB1   CD 61 0D               CALL   printStr   
2CB4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CC3   21 05 00               LD   hl,5   
2CC6   E5                     PUSH   hl   
2CC7   E5                     PUSH   hl   
2CC8   CD 80 0E               CALL   run   
2CCB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2CD3   CD E9 0C               CALL   flushBuffer   
2CD6   CD 61 0D               CALL   printStr   
2CD9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CE6   E1                     POP   hl   
2CE7   E5                     PUSH   hl   
2CE8   E5                     PUSH   hl   
2CE9   CD 80 0E               CALL   run   
2CEC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CFB   CD E9 0C               CALL   flushBuffer   
2CFE   76                     HALT      
2CFF                EXPECTM_2900S95:      
2CFF   E1                     POP   HL   
2D00                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2D00   31 00 52               LD   SP,STACK   
2D03   CD A9 0D               CALL   coldInit   
2D06   CD 70 50               CALL   execStr   
2D09   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2D16   CD E9 0C               CALL   flushBuffer   
2D19   E1                     POP   HL   
2D1A   E5                     PUSH   HL   
2D1B   11 0F 00               LD   DE,15   
2D1E   B7                     OR   A   
2D1F   ED 52                  SBC   HL,DE   
2D21   7D                     LD   A,L   
2D22   B4                     OR   H   
2D23   CA 8A 2D               JP   Z,expectM_2901S96   
2D26   CD 61 0D               CALL   printStr   
2D29   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2D3C   CD 61 0D               CALL   printStr   
2D3F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D4E   21 0F 00               LD   hl,15   
2D51   E5                     PUSH   hl   
2D52   E5                     PUSH   hl   
2D53   CD 80 0E               CALL   run   
2D56   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D5E   CD E9 0C               CALL   flushBuffer   
2D61   CD 61 0D               CALL   printStr   
2D64   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D71   E1                     POP   hl   
2D72   E5                     PUSH   hl   
2D73   E5                     PUSH   hl   
2D74   CD 80 0E               CALL   run   
2D77   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D86   CD E9 0C               CALL   flushBuffer   
2D89   76                     HALT      
2D8A                EXPECTM_2901S96:      
2D8A   E1                     POP   HL   
2D8B                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2D8B   31 00 52               LD   SP,STACK   
2D8E   CD A9 0D               CALL   coldInit   
2D91   CD 70 50               CALL   execStr   
2D94   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2DA6   CD E9 0C               CALL   flushBuffer   
2DA9   E1                     POP   HL   
2DAA   E5                     PUSH   HL   
2DAB   11 15 00               LD   DE,21   
2DAE   B7                     OR   A   
2DAF   ED 52                  SBC   HL,DE   
2DB1   7D                     LD   A,L   
2DB2   B4                     OR   H   
2DB3   CA 1F 2E               JP   Z,expectM_2902S97   
2DB6   CD 61 0D               CALL   printStr   
2DB9   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2DD1   CD 61 0D               CALL   printStr   
2DD4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DE3   21 15 00               LD   hl,21   
2DE6   E5                     PUSH   hl   
2DE7   E5                     PUSH   hl   
2DE8   CD 80 0E               CALL   run   
2DEB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2DF3   CD E9 0C               CALL   flushBuffer   
2DF6   CD 61 0D               CALL   printStr   
2DF9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E06   E1                     POP   hl   
2E07   E5                     PUSH   hl   
2E08   E5                     PUSH   hl   
2E09   CD 80 0E               CALL   run   
2E0C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E1B   CD E9 0C               CALL   flushBuffer   
2E1E   76                     HALT      
2E1F                EXPECTM_2902S97:      
2E1F   E1                     POP   HL   
2E20                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2E20   31 00 52               LD   SP,STACK   
2E23   CD A9 0D               CALL   coldInit   
2E26   CD 70 50               CALL   execStr   
2E29   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
2E3B   CD E9 0C               CALL   flushBuffer   
2E3E   E1                     POP   HL   
2E3F   E5                     PUSH   HL   
2E40   11 0B 00               LD   DE,11   
2E43   B7                     OR   A   
2E44   ED 52                  SBC   HL,DE   
2E46   7D                     LD   A,L   
2E47   B4                     OR   H   
2E48   CA B4 2E               JP   Z,expectM_2903S98   
2E4B   CD 61 0D               CALL   printStr   
2E4E   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2E66   CD 61 0D               CALL   printStr   
2E69   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E78   21 0B 00               LD   hl,11   
2E7B   E5                     PUSH   hl   
2E7C   E5                     PUSH   hl   
2E7D   CD 80 0E               CALL   run   
2E80   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E88   CD E9 0C               CALL   flushBuffer   
2E8B   CD 61 0D               CALL   printStr   
2E8E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E9B   E1                     POP   hl   
2E9C   E5                     PUSH   hl   
2E9D   E5                     PUSH   hl   
2E9E   CD 80 0E               CALL   run   
2EA1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2EB0   CD E9 0C               CALL   flushBuffer   
2EB3   76                     HALT      
2EB4                EXPECTM_2903S98:      
2EB4   E1                     POP   HL   
2EB5                          ;*Macro unroll:  test ": 0#", $0000
2EB5   31 00 52               LD   SP,STACK   
2EB8   CD A9 0D               CALL   coldInit   
2EBB   CD 70 50               CALL   execStr   
2EBE   3A 20 30 23 00         DB   ": 0#",0   
2EC3   CD E9 0C               CALL   flushBuffer   
2EC6   E1                     POP   HL   
2EC7   E5                     PUSH   HL   
2EC8   11 00 00               LD   DE,$0000   
2ECB   B7                     OR   A   
2ECC   ED 52                  SBC   HL,DE   
2ECE   7D                     LD   A,L   
2ECF   B4                     OR   H   
2ED0   CA 2F 2F               JP   Z,expectM_2904S99   
2ED3   CD 61 0D               CALL   printStr   
2ED6   43 6F 64 65 3A 20 3A 20 30 23 00 .CSTR   "Code: ",": 0#"   
2EE1   CD 61 0D               CALL   printStr   
2EE4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EF3   21 00 00               LD   hl,$0000   
2EF6   E5                     PUSH   hl   
2EF7   E5                     PUSH   hl   
2EF8   CD 80 0E               CALL   run   
2EFB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F03   CD E9 0C               CALL   flushBuffer   
2F06   CD 61 0D               CALL   printStr   
2F09   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F16   E1                     POP   hl   
2F17   E5                     PUSH   hl   
2F18   E5                     PUSH   hl   
2F19   CD 80 0E               CALL   run   
2F1C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F2B   CD E9 0C               CALL   flushBuffer   
2F2E   76                     HALT      
2F2F                EXPECTM_2904S99:      
2F2F   E1                     POP   HL   
2F30                          ;*Macro unroll:  test ":a 0#", $0100
2F30   31 00 52               LD   SP,STACK   
2F33   CD A9 0D               CALL   coldInit   
2F36   CD 70 50               CALL   execStr   
2F39   3A 61 20 30 23 00      DB   ":a 0#",0   
2F3F   CD E9 0C               CALL   flushBuffer   
2F42   E1                     POP   HL   
2F43   E5                     PUSH   HL   
2F44   11 00 01               LD   DE,$0100   
2F47   B7                     OR   A   
2F48   ED 52                  SBC   HL,DE   
2F4A   7D                     LD   A,L   
2F4B   B4                     OR   H   
2F4C   CA AC 2F               JP   Z,expectM_2905S100   
2F4F   CD 61 0D               CALL   printStr   
2F52   43 6F 64 65 3A 20 3A 61 20 30 23 00 .CSTR   "Code: ",":a 0#"   
2F5E   CD 61 0D               CALL   printStr   
2F61   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F70   21 00 01               LD   hl,$0100   
2F73   E5                     PUSH   hl   
2F74   E5                     PUSH   hl   
2F75   CD 80 0E               CALL   run   
2F78   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F80   CD E9 0C               CALL   flushBuffer   
2F83   CD 61 0D               CALL   printStr   
2F86   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F93   E1                     POP   hl   
2F94   E5                     PUSH   hl   
2F95   E5                     PUSH   hl   
2F96   CD 80 0E               CALL   run   
2F99   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2FA8   CD E9 0C               CALL   flushBuffer   
2FAB   76                     HALT      
2FAC                EXPECTM_2905S100:      
2FAC   E1                     POP   HL   
2FAD                          ;*Macro unroll:  test ":a: 0#", $0100
2FAD   31 00 52               LD   SP,STACK   
2FB0   CD A9 0D               CALL   coldInit   
2FB3   CD 70 50               CALL   execStr   
2FB6   3A 61 3A 20 30 23 00   DB   ":a: 0#",0   
2FBD   CD E9 0C               CALL   flushBuffer   
2FC0   E1                     POP   HL   
2FC1   E5                     PUSH   HL   
2FC2   11 00 01               LD   DE,$0100   
2FC5   B7                     OR   A   
2FC6   ED 52                  SBC   HL,DE   
2FC8   7D                     LD   A,L   
2FC9   B4                     OR   H   
2FCA   CA 2B 30               JP   Z,expectM_2906S101   
2FCD   CD 61 0D               CALL   printStr   
2FD0   43 6F 64 65 3A 20 3A 61 3A 20 30 23 00 .CSTR   "Code: ",":a: 0#"   
2FDD   CD 61 0D               CALL   printStr   
2FE0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FEF   21 00 01               LD   hl,$0100   
2FF2   E5                     PUSH   hl   
2FF3   E5                     PUSH   hl   
2FF4   CD 80 0E               CALL   run   
2FF7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2FFF   CD E9 0C               CALL   flushBuffer   
3002   CD 61 0D               CALL   printStr   
3005   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3012   E1                     POP   hl   
3013   E5                     PUSH   hl   
3014   E5                     PUSH   hl   
3015   CD 80 0E               CALL   run   
3018   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3027   CD E9 0C               CALL   flushBuffer   
302A   76                     HALT      
302B                EXPECTM_2906S101:      
302B   E1                     POP   HL   
302C                          ;*Macro unroll:  test ":a:b 0#", $0201
302C   31 00 52               LD   SP,STACK   
302F   CD A9 0D               CALL   coldInit   
3032   CD 70 50               CALL   execStr   
3035   3A 61 3A 62 20 30 23 00 DB   ":a:b 0#",0   
303D   CD E9 0C               CALL   flushBuffer   
3040   E1                     POP   HL   
3041   E5                     PUSH   HL   
3042   11 01 02               LD   DE,$0201   
3045   B7                     OR   A   
3046   ED 52                  SBC   HL,DE   
3048   7D                     LD   A,L   
3049   B4                     OR   H   
304A   CA AC 30               JP   Z,expectM_2907S102   
304D   CD 61 0D               CALL   printStr   
3050   43 6F 64 65 3A 20 3A 61 3A 62 20 30 23 00 .CSTR   "Code: ",":a:b 0#"   
305E   CD 61 0D               CALL   printStr   
3061   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3070   21 01 02               LD   hl,$0201   
3073   E5                     PUSH   hl   
3074   E5                     PUSH   hl   
3075   CD 80 0E               CALL   run   
3078   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3080   CD E9 0C               CALL   flushBuffer   
3083   CD 61 0D               CALL   printStr   
3086   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3093   E1                     POP   hl   
3094   E5                     PUSH   hl   
3095   E5                     PUSH   hl   
3096   CD 80 0E               CALL   run   
3099   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
30A8   CD E9 0C               CALL   flushBuffer   
30AB   76                     HALT      
30AC                EXPECTM_2907S102:      
30AC   E1                     POP   HL   
30AD                          ;*Macro unroll:  test "::b 0#", $0101
30AD   31 00 52               LD   SP,STACK   
30B0   CD A9 0D               CALL   coldInit   
30B3   CD 70 50               CALL   execStr   
30B6   3A 3A 62 20 30 23 00   DB   "::b 0#",0   
30BD   CD E9 0C               CALL   flushBuffer   
30C0   E1                     POP   HL   
30C1   E5                     PUSH   HL   
30C2   11 01 01               LD   DE,$0101   
30C5   B7                     OR   A   
30C6   ED 52                  SBC   HL,DE   
30C8   7D                     LD   A,L   
30C9   B4                     OR   H   
30CA   CA 2B 31               JP   Z,expectM_2908S103   
30CD   CD 61 0D               CALL   printStr   
30D0   43 6F 64 65 3A 20 3A 3A 62 20 30 23 00 .CSTR   "Code: ","::b 0#"   
30DD   CD 61 0D               CALL   printStr   
30E0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30EF   21 01 01               LD   hl,$0101   
30F2   E5                     PUSH   hl   
30F3   E5                     PUSH   hl   
30F4   CD 80 0E               CALL   run   
30F7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
30FF   CD E9 0C               CALL   flushBuffer   
3102   CD 61 0D               CALL   printStr   
3105   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3112   E1                     POP   hl   
3113   E5                     PUSH   hl   
3114   E5                     PUSH   hl   
3115   CD 80 0E               CALL   run   
3118   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3127   CD E9 0C               CALL   flushBuffer   
312A   76                     HALT      
312B                EXPECTM_2908S103:      
312B   E1                     POP   HL   
312C                          ;*Macro unroll:  test ":{2};^", 2
312C   31 00 52               LD   SP,STACK   
312F   CD A9 0D               CALL   coldInit   
3132   CD 70 50               CALL   execStr   
3135   3A 7B 32 7D 3B 5E 00   DB   ":{2};^",0   
313C   CD E9 0C               CALL   flushBuffer   
313F   E1                     POP   HL   
3140   E5                     PUSH   HL   
3141   11 02 00               LD   DE,2   
3144   B7                     OR   A   
3145   ED 52                  SBC   HL,DE   
3147   7D                     LD   A,L   
3148   B4                     OR   H   
3149   CA AA 31               JP   Z,expectM_2909S104   
314C   CD 61 0D               CALL   printStr   
314F   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
315C   CD 61 0D               CALL   printStr   
315F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
316E   21 02 00               LD   hl,2   
3171   E5                     PUSH   hl   
3172   E5                     PUSH   hl   
3173   CD 80 0E               CALL   run   
3176   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
317E   CD E9 0C               CALL   flushBuffer   
3181   CD 61 0D               CALL   printStr   
3184   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3191   E1                     POP   hl   
3192   E5                     PUSH   hl   
3193   E5                     PUSH   hl   
3194   CD 80 0E               CALL   run   
3197   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
31A6   CD E9 0C               CALL   flushBuffer   
31A9   76                     HALT      
31AA                EXPECTM_2909S104:      
31AA   E1                     POP   HL   
31AB                          ;*Macro unroll:  test ":a{2};^", 2
31AB   31 00 52               LD   SP,STACK   
31AE   CD A9 0D               CALL   coldInit   
31B1   CD 70 50               CALL   execStr   
31B4   3A 61 7B 32 7D 3B 5E 00 DB   ":a{2};^",0   
31BC   CD E9 0C               CALL   flushBuffer   
31BF   E1                     POP   HL   
31C0   E5                     PUSH   HL   
31C1   11 02 00               LD   DE,2   
31C4   B7                     OR   A   
31C5   ED 52                  SBC   HL,DE   
31C7   7D                     LD   A,L   
31C8   B4                     OR   H   
31C9   CA 2B 32               JP   Z,expectM_2910S105   
31CC   CD 61 0D               CALL   printStr   
31CF   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
31DD   CD 61 0D               CALL   printStr   
31E0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31EF   21 02 00               LD   hl,2   
31F2   E5                     PUSH   hl   
31F3   E5                     PUSH   hl   
31F4   CD 80 0E               CALL   run   
31F7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
31FF   CD E9 0C               CALL   flushBuffer   
3202   CD 61 0D               CALL   printStr   
3205   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3212   E1                     POP   hl   
3213   E5                     PUSH   hl   
3214   E5                     PUSH   hl   
3215   CD 80 0E               CALL   run   
3218   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3227   CD E9 0C               CALL   flushBuffer   
322A   76                     HALT      
322B                EXPECTM_2910S105:      
322B   E1                     POP   HL   
322C                          ;*Macro unroll:  test "5 :a{%a};^", 5
322C   31 00 52               LD   SP,STACK   
322F   CD A9 0D               CALL   coldInit   
3232   CD 70 50               CALL   execStr   
3235   35 20 3A 61 7B 25 61 7D 3B 5E 00 DB   "5 :a{%a};^",0   
3240   CD E9 0C               CALL   flushBuffer   
3243   E1                     POP   HL   
3244   E5                     PUSH   HL   
3245   11 05 00               LD   DE,5   
3248   B7                     OR   A   
3249   ED 52                  SBC   HL,DE   
324B   7D                     LD   A,L   
324C   B4                     OR   H   
324D   CA B2 32               JP   Z,expectM_2911S106   
3250   CD 61 0D               CALL   printStr   
3253   43 6F 64 65 3A 20 35 20 3A 61 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{%a};^"   
3264   CD 61 0D               CALL   printStr   
3267   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3276   21 05 00               LD   hl,5   
3279   E5                     PUSH   hl   
327A   E5                     PUSH   hl   
327B   CD 80 0E               CALL   run   
327E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3286   CD E9 0C               CALL   flushBuffer   
3289   CD 61 0D               CALL   printStr   
328C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3299   E1                     POP   hl   
329A   E5                     PUSH   hl   
329B   E5                     PUSH   hl   
329C   CD 80 0E               CALL   run   
329F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
32AE   CD E9 0C               CALL   flushBuffer   
32B1   76                     HALT      
32B2                EXPECTM_2911S106:      
32B2   E1                     POP   HL   
32B3                          ;*Macro unroll:  test "5 :a:b{%a};^", 5
32B3   31 00 52               LD   SP,STACK   
32B6   CD A9 0D               CALL   coldInit   
32B9   CD 70 50               CALL   execStr   
32BC   35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 DB   "5 :a:b{%a};^",0   
32C9   CD E9 0C               CALL   flushBuffer   
32CC   E1                     POP   HL   
32CD   E5                     PUSH   HL   
32CE   11 05 00               LD   DE,5   
32D1   B7                     OR   A   
32D2   ED 52                  SBC   HL,DE   
32D4   7D                     LD   A,L   
32D5   B4                     OR   H   
32D6   CA 3D 33               JP   Z,expectM_2912S107   
32D9   CD 61 0D               CALL   printStr   
32DC   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{%a};^"   
32EF   CD 61 0D               CALL   printStr   
32F2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3301   21 05 00               LD   hl,5   
3304   E5                     PUSH   hl   
3305   E5                     PUSH   hl   
3306   CD 80 0E               CALL   run   
3309   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3311   CD E9 0C               CALL   flushBuffer   
3314   CD 61 0D               CALL   printStr   
3317   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3324   E1                     POP   hl   
3325   E5                     PUSH   hl   
3326   E5                     PUSH   hl   
3327   CD 80 0E               CALL   run   
332A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3339   CD E9 0C               CALL   flushBuffer   
333C   76                     HALT      
333D                EXPECTM_2912S107:      
333D   E1                     POP   HL   
333E                          ;*Macro unroll:  test ":a{{2}^};^", 2
333E   31 00 52               LD   SP,STACK   
3341   CD A9 0D               CALL   coldInit   
3344   CD 70 50               CALL   execStr   
3347   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 DB   ":a{{2}^};^",0   
3352   CD E9 0C               CALL   flushBuffer   
3355   E1                     POP   HL   
3356   E5                     PUSH   HL   
3357   11 02 00               LD   DE,2   
335A   B7                     OR   A   
335B   ED 52                  SBC   HL,DE   
335D   7D                     LD   A,L   
335E   B4                     OR   H   
335F   CA C4 33               JP   Z,expectM_2913S108   
3362   CD 61 0D               CALL   printStr   
3365   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
3376   CD 61 0D               CALL   printStr   
3379   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3388   21 02 00               LD   hl,2   
338B   E5                     PUSH   hl   
338C   E5                     PUSH   hl   
338D   CD 80 0E               CALL   run   
3390   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3398   CD E9 0C               CALL   flushBuffer   
339B   CD 61 0D               CALL   printStr   
339E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33AB   E1                     POP   hl   
33AC   E5                     PUSH   hl   
33AD   E5                     PUSH   hl   
33AE   CD 80 0E               CALL   run   
33B1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
33C0   CD E9 0C               CALL   flushBuffer   
33C3   76                     HALT      
33C4                EXPECTM_2913S108:      
33C4   E1                     POP   HL   
33C5                          ;*Macro unroll:  test "1 5 :a{{%a}^};^", 5
33C5   31 00 52               LD   SP,STACK   
33C8   CD A9 0D               CALL   coldInit   
33CB   CD 70 50               CALL   execStr   
33CE   31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a}^};^",0   
33DE   CD E9 0C               CALL   flushBuffer   
33E1   E1                     POP   HL   
33E2   E5                     PUSH   HL   
33E3   11 05 00               LD   DE,5   
33E6   B7                     OR   A   
33E7   ED 52                  SBC   HL,DE   
33E9   7D                     LD   A,L   
33EA   B4                     OR   H   
33EB   CA 55 34               JP   Z,expectM_2914S109   
33EE   CD 61 0D               CALL   printStr   
33F1   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a}^};^"   
3407   CD 61 0D               CALL   printStr   
340A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3419   21 05 00               LD   hl,5   
341C   E5                     PUSH   hl   
341D   E5                     PUSH   hl   
341E   CD 80 0E               CALL   run   
3421   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3429   CD E9 0C               CALL   flushBuffer   
342C   CD 61 0D               CALL   printStr   
342F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
343C   E1                     POP   hl   
343D   E5                     PUSH   hl   
343E   E5                     PUSH   hl   
343F   CD 80 0E               CALL   run   
3442   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3451   CD E9 0C               CALL   flushBuffer   
3454   76                     HALT      
3455                EXPECTM_2914S109:      
3455   E1                     POP   HL   
3456                          ;*Macro unroll:  test "1 5 :ab{{%a}^};^", 1
3456   31 00 52               LD   SP,STACK   
3459   CD A9 0D               CALL   coldInit   
345C   CD 70 50               CALL   execStr   
345F   31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a}^};^",0   
3470   CD E9 0C               CALL   flushBuffer   
3473   E1                     POP   HL   
3474   E5                     PUSH   HL   
3475   11 01 00               LD   DE,1   
3478   B7                     OR   A   
3479   ED 52                  SBC   HL,DE   
347B   7D                     LD   A,L   
347C   B4                     OR   H   
347D   CA E8 34               JP   Z,expectM_2915S110   
3480   CD 61 0D               CALL   printStr   
3483   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a}^};^"   
349A   CD 61 0D               CALL   printStr   
349D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34AC   21 01 00               LD   hl,1   
34AF   E5                     PUSH   hl   
34B0   E5                     PUSH   hl   
34B1   CD 80 0E               CALL   run   
34B4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
34BC   CD E9 0C               CALL   flushBuffer   
34BF   CD 61 0D               CALL   printStr   
34C2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34CF   E1                     POP   hl   
34D0   E5                     PUSH   hl   
34D1   E5                     PUSH   hl   
34D2   CD 80 0E               CALL   run   
34D5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
34E4   CD E9 0C               CALL   flushBuffer   
34E7   76                     HALT      
34E8                EXPECTM_2915S110:      
34E8   E1                     POP   HL   
34E9                          ;*Macro unroll:  test "1 5 :a{{%a 2 +}^};^", 7
34E9   31 00 52               LD   SP,STACK   
34EC   CD A9 0D               CALL   coldInit   
34EF   CD 70 50               CALL   execStr   
34F2   31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a 2 +}^};^",0   
3506   CD E9 0C               CALL   flushBuffer   
3509   E1                     POP   HL   
350A   E5                     PUSH   HL   
350B   11 07 00               LD   DE,7   
350E   B7                     OR   A   
350F   ED 52                  SBC   HL,DE   
3511   7D                     LD   A,L   
3512   B4                     OR   H   
3513   CA 81 35               JP   Z,expectM_2916S111   
3516   CD 61 0D               CALL   printStr   
3519   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a 2 +}^};^"   
3533   CD 61 0D               CALL   printStr   
3536   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3545   21 07 00               LD   hl,7   
3548   E5                     PUSH   hl   
3549   E5                     PUSH   hl   
354A   CD 80 0E               CALL   run   
354D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3555   CD E9 0C               CALL   flushBuffer   
3558   CD 61 0D               CALL   printStr   
355B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3568   E1                     POP   hl   
3569   E5                     PUSH   hl   
356A   E5                     PUSH   hl   
356B   CD 80 0E               CALL   run   
356E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
357D   CD E9 0C               CALL   flushBuffer   
3580   76                     HALT      
3581                EXPECTM_2916S111:      
3581   E1                     POP   HL   
3582                          ;*Macro unroll:  test "1 5 :ab{{%a %b +}^};^", 6
3582   31 00 52               LD   SP,STACK   
3585   CD A9 0D               CALL   coldInit   
3588   CD 70 50               CALL   execStr   
358B   31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a %b +}^};^",0   
35A1   CD E9 0C               CALL   flushBuffer   
35A4   E1                     POP   HL   
35A5   E5                     PUSH   HL   
35A6   11 06 00               LD   DE,6   
35A9   B7                     OR   A   
35AA   ED 52                  SBC   HL,DE   
35AC   7D                     LD   A,L   
35AD   B4                     OR   H   
35AE   CA 1E 36               JP   Z,expectM_2917S112   
35B1   CD 61 0D               CALL   printStr   
35B4   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a %b +}^};^"   
35D0   CD 61 0D               CALL   printStr   
35D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35E2   21 06 00               LD   hl,6   
35E5   E5                     PUSH   hl   
35E6   E5                     PUSH   hl   
35E7   CD 80 0E               CALL   run   
35EA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
35F2   CD E9 0C               CALL   flushBuffer   
35F5   CD 61 0D               CALL   printStr   
35F8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3605   E1                     POP   hl   
3606   E5                     PUSH   hl   
3607   E5                     PUSH   hl   
3608   CD 80 0E               CALL   run   
360B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
361A   CD E9 0C               CALL   flushBuffer   
361D   76                     HALT      
361E                EXPECTM_2917S112:      
361E   E1                     POP   HL   
361F                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
361F   31 00 52               LD   SP,STACK   
3622   CD A9 0D               CALL   coldInit   
3625   CD 70 50               CALL   execStr   
3628   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a{2}; x= 1 x^",0   
3637   CD E9 0C               CALL   flushBuffer   
363A   E1                     POP   HL   
363B   E5                     PUSH   HL   
363C   11 02 00               LD   DE,2   
363F   B7                     OR   A   
3640   ED 52                  SBC   HL,DE   
3642   7D                     LD   A,L   
3643   B4                     OR   H   
3644   CA AD 36               JP   Z,expectM_2918S113   
3647   CD 61 0D               CALL   printStr   
364A   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
365F   CD 61 0D               CALL   printStr   
3662   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3671   21 02 00               LD   hl,2   
3674   E5                     PUSH   hl   
3675   E5                     PUSH   hl   
3676   CD 80 0E               CALL   run   
3679   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3681   CD E9 0C               CALL   flushBuffer   
3684   CD 61 0D               CALL   printStr   
3687   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3694   E1                     POP   hl   
3695   E5                     PUSH   hl   
3696   E5                     PUSH   hl   
3697   CD 80 0E               CALL   run   
369A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
36A9   CD E9 0C               CALL   flushBuffer   
36AC   76                     HALT      
36AD                EXPECTM_2918S113:      
36AD   E1                     POP   HL   
36AE                          ;*Macro unroll:  test ":a{%a}; x= 0 1 x^", 1
36AE   31 00 52               LD   SP,STACK   
36B1   CD A9 0D               CALL   coldInit   
36B4   CD 70 50               CALL   execStr   
36B7   3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 DB   ":a{%a}; x= 0 1 x^",0   
36C9   CD E9 0C               CALL   flushBuffer   
36CC   E1                     POP   HL   
36CD   E5                     PUSH   HL   
36CE   11 01 00               LD   DE,1   
36D1   B7                     OR   A   
36D2   ED 52                  SBC   HL,DE   
36D4   7D                     LD   A,L   
36D5   B4                     OR   H   
36D6   CA 42 37               JP   Z,expectM_2919S114   
36D9   CD 61 0D               CALL   printStr   
36DC   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{%a}; x= 0 1 x^"   
36F4   CD 61 0D               CALL   printStr   
36F7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3706   21 01 00               LD   hl,1   
3709   E5                     PUSH   hl   
370A   E5                     PUSH   hl   
370B   CD 80 0E               CALL   run   
370E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3716   CD E9 0C               CALL   flushBuffer   
3719   CD 61 0D               CALL   printStr   
371C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3729   E1                     POP   hl   
372A   E5                     PUSH   hl   
372B   E5                     PUSH   hl   
372C   CD 80 0E               CALL   run   
372F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
373E   CD E9 0C               CALL   flushBuffer   
3741   76                     HALT      
3742                EXPECTM_2919S114:      
3742   E1                     POP   HL   
3743                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
3743   31 00 52               LD   SP,STACK   
3746   CD A9 0D               CALL   coldInit   
3749   CD 70 50               CALL   execStr   
374C   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
375F   CD E9 0C               CALL   flushBuffer   
3762   E1                     POP   HL   
3763   E5                     PUSH   HL   
3764   11 02 00               LD   DE,2   
3767   B7                     OR   A   
3768   ED 52                  SBC   HL,DE   
376A   7D                     LD   A,L   
376B   B4                     OR   H   
376C   CA D9 37               JP   Z,expectM_2920S115   
376F   CD 61 0D               CALL   printStr   
3772   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
378B   CD 61 0D               CALL   printStr   
378E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
379D   21 02 00               LD   hl,2   
37A0   E5                     PUSH   hl   
37A1   E5                     PUSH   hl   
37A2   CD 80 0E               CALL   run   
37A5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
37AD   CD E9 0C               CALL   flushBuffer   
37B0   CD 61 0D               CALL   printStr   
37B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37C0   E1                     POP   hl   
37C1   E5                     PUSH   hl   
37C2   E5                     PUSH   hl   
37C3   CD 80 0E               CALL   run   
37C6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
37D5   CD E9 0C               CALL   flushBuffer   
37D8   76                     HALT      
37D9                EXPECTM_2920S115:      
37D9   E1                     POP   HL   
37DA                          ;*Macro unroll:  test ":a:b{%a}; x= 1 2 x^", 2
37DA   31 00 52               LD   SP,STACK   
37DD   CD A9 0D               CALL   coldInit   
37E0   CD 70 50               CALL   execStr   
37E3   3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":a:b{%a}; x= 1 2 x^",0   
37F7   CD E9 0C               CALL   flushBuffer   
37FA   E1                     POP   HL   
37FB   E5                     PUSH   HL   
37FC   11 02 00               LD   DE,2   
37FF   B7                     OR   A   
3800   ED 52                  SBC   HL,DE   
3802   7D                     LD   A,L   
3803   B4                     OR   H   
3804   CA 72 38               JP   Z,expectM_2921S116   
3807   CD 61 0D               CALL   printStr   
380A   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a}; x= 1 2 x^"   
3824   CD 61 0D               CALL   printStr   
3827   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3836   21 02 00               LD   hl,2   
3839   E5                     PUSH   hl   
383A   E5                     PUSH   hl   
383B   CD 80 0E               CALL   run   
383E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3846   CD E9 0C               CALL   flushBuffer   
3849   CD 61 0D               CALL   printStr   
384C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3859   E1                     POP   hl   
385A   E5                     PUSH   hl   
385B   E5                     PUSH   hl   
385C   CD 80 0E               CALL   run   
385F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
386E   CD E9 0C               CALL   flushBuffer   
3871   76                     HALT      
3872                EXPECTM_2921S116:      
3872   E1                     POP   HL   
3873                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
3873   31 00 52               LD   SP,STACK   
3876   CD A9 0D               CALL   coldInit   
3879   CD 70 50               CALL   execStr   
387C   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
388F   CD E9 0C               CALL   flushBuffer   
3892   E1                     POP   HL   
3893   E5                     PUSH   HL   
3894   11 02 00               LD   DE,2   
3897   B7                     OR   A   
3898   ED 52                  SBC   HL,DE   
389A   7D                     LD   A,L   
389B   B4                     OR   H   
389C   CA 09 39               JP   Z,expectM_2922S117   
389F   CD 61 0D               CALL   printStr   
38A2   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
38BB   CD 61 0D               CALL   printStr   
38BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38CD   21 02 00               LD   hl,2   
38D0   E5                     PUSH   hl   
38D1   E5                     PUSH   hl   
38D2   CD 80 0E               CALL   run   
38D5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
38DD   CD E9 0C               CALL   flushBuffer   
38E0   CD 61 0D               CALL   printStr   
38E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38F0   E1                     POP   hl   
38F1   E5                     PUSH   hl   
38F2   E5                     PUSH   hl   
38F3   CD 80 0E               CALL   run   
38F6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3905   CD E9 0C               CALL   flushBuffer   
3908   76                     HALT      
3909                EXPECTM_2922S117:      
3909   E1                     POP   HL   
390A                          ;*Macro unroll:  test ":ab{%b %a}; x= 10 15 x^ -", 5
390A   31 00 52               LD   SP,STACK   
390D   CD A9 0D               CALL   coldInit   
3910   CD 70 50               CALL   execStr   
3913   3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   ":ab{%b %a}; x= 10 15 x^ -",0   
392D   CD E9 0C               CALL   flushBuffer   
3930   E1                     POP   HL   
3931   E5                     PUSH   HL   
3932   11 05 00               LD   DE,5   
3935   B7                     OR   A   
3936   ED 52                  SBC   HL,DE   
3938   7D                     LD   A,L   
3939   B4                     OR   H   
393A   CA AE 39               JP   Z,expectM_2923S118   
393D   CD 61 0D               CALL   printStr   
3940   43 6F 64 65 3A 20 3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{%b %a}; x= 10 15 x^ -"   
3960   CD 61 0D               CALL   printStr   
3963   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3972   21 05 00               LD   hl,5   
3975   E5                     PUSH   hl   
3976   E5                     PUSH   hl   
3977   CD 80 0E               CALL   run   
397A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3982   CD E9 0C               CALL   flushBuffer   
3985   CD 61 0D               CALL   printStr   
3988   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3995   E1                     POP   hl   
3996   E5                     PUSH   hl   
3997   E5                     PUSH   hl   
3998   CD 80 0E               CALL   run   
399B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
39AA   CD E9 0C               CALL   flushBuffer   
39AD   76                     HALT      
39AE                EXPECTM_2923S118:      
39AE   E1                     POP   HL   
39AF                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
39AF   31 00 52               LD   SP,STACK   
39B2   CD A9 0D               CALL   coldInit   
39B5   CD 70 50               CALL   execStr   
39B8   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a:b{2}; x= 1 x^",0   
39C9   CD E9 0C               CALL   flushBuffer   
39CC   E1                     POP   HL   
39CD   E5                     PUSH   HL   
39CE   11 02 00               LD   DE,2   
39D1   B7                     OR   A   
39D2   ED 52                  SBC   HL,DE   
39D4   7D                     LD   A,L   
39D5   B4                     OR   H   
39D6   CA 41 3A               JP   Z,expectM_2924S119   
39D9   CD 61 0D               CALL   printStr   
39DC   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
39F3   CD 61 0D               CALL   printStr   
39F6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A05   21 02 00               LD   hl,2   
3A08   E5                     PUSH   hl   
3A09   E5                     PUSH   hl   
3A0A   CD 80 0E               CALL   run   
3A0D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A15   CD E9 0C               CALL   flushBuffer   
3A18   CD 61 0D               CALL   printStr   
3A1B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A28   E1                     POP   hl   
3A29   E5                     PUSH   hl   
3A2A   E5                     PUSH   hl   
3A2B   CD 80 0E               CALL   run   
3A2E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A3D   CD E9 0C               CALL   flushBuffer   
3A40   76                     HALT      
3A41                EXPECTM_2924S119:      
3A41   E1                     POP   HL   
3A42                          ;*Macro unroll:  test "::b{100 %b = %b}; x= x^", 100
3A42   31 00 52               LD   SP,STACK   
3A45   CD A9 0D               CALL   coldInit   
3A48   CD 70 50               CALL   execStr   
3A4B   3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 DB   "::b{100 %b = %b}; x= x^",0   
3A63   CD E9 0C               CALL   flushBuffer   
3A66   E1                     POP   HL   
3A67   E5                     PUSH   HL   
3A68   11 64 00               LD   DE,100   
3A6B   B7                     OR   A   
3A6C   ED 52                  SBC   HL,DE   
3A6E   7D                     LD   A,L   
3A6F   B4                     OR   H   
3A70   CA E2 3A               JP   Z,expectM_2925S120   
3A73   CD 61 0D               CALL   printStr   
3A76   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 %b = %b}; x= x^"   
3A94   CD 61 0D               CALL   printStr   
3A97   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AA6   21 64 00               LD   hl,100   
3AA9   E5                     PUSH   hl   
3AAA   E5                     PUSH   hl   
3AAB   CD 80 0E               CALL   run   
3AAE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3AB6   CD E9 0C               CALL   flushBuffer   
3AB9   CD 61 0D               CALL   printStr   
3ABC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AC9   E1                     POP   hl   
3ACA   E5                     PUSH   hl   
3ACB   E5                     PUSH   hl   
3ACC   CD 80 0E               CALL   run   
3ACF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3ADE   CD E9 0C               CALL   flushBuffer   
3AE1   76                     HALT      
3AE2                EXPECTM_2925S120:      
3AE2   E1                     POP   HL   
3AE3                          ;*Macro unroll:  test ":a:b{1 %b = %b}; x= 2 x^", 1
3AE3   31 00 52               LD   SP,STACK   
3AE6   CD A9 0D               CALL   coldInit   
3AE9   CD 70 50               CALL   execStr   
3AEC   3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{1 %b = %b}; x= 2 x^",0   
3B05   CD E9 0C               CALL   flushBuffer   
3B08   E1                     POP   HL   
3B09   E5                     PUSH   HL   
3B0A   11 01 00               LD   DE,1   
3B0D   B7                     OR   A   
3B0E   ED 52                  SBC   HL,DE   
3B10   7D                     LD   A,L   
3B11   B4                     OR   H   
3B12   CA 85 3B               JP   Z,expectM_2926S121   
3B15   CD 61 0D               CALL   printStr   
3B18   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 %b = %b}; x= 2 x^"   
3B37   CD 61 0D               CALL   printStr   
3B3A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B49   21 01 00               LD   hl,1   
3B4C   E5                     PUSH   hl   
3B4D   E5                     PUSH   hl   
3B4E   CD 80 0E               CALL   run   
3B51   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B59   CD E9 0C               CALL   flushBuffer   
3B5C   CD 61 0D               CALL   printStr   
3B5F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B6C   E1                     POP   hl   
3B6D   E5                     PUSH   hl   
3B6E   E5                     PUSH   hl   
3B6F   CD 80 0E               CALL   run   
3B72   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B81   CD E9 0C               CALL   flushBuffer   
3B84   76                     HALT      
3B85                EXPECTM_2926S121:      
3B85   E1                     POP   HL   
3B86                          ;*Macro unroll:  test ":a:b{%a %b = %b}; x= 2 x^", 2
3B86   31 00 52               LD   SP,STACK   
3B89   CD A9 0D               CALL   coldInit   
3B8C   CD 70 50               CALL   execStr   
3B8F   3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{%a %b = %b}; x= 2 x^",0   
3BA9   CD E9 0C               CALL   flushBuffer   
3BAC   E1                     POP   HL   
3BAD   E5                     PUSH   HL   
3BAE   11 02 00               LD   DE,2   
3BB1   B7                     OR   A   
3BB2   ED 52                  SBC   HL,DE   
3BB4   7D                     LD   A,L   
3BB5   B4                     OR   H   
3BB6   CA 2A 3C               JP   Z,expectM_2927S122   
3BB9   CD 61 0D               CALL   printStr   
3BBC   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a %b = %b}; x= 2 x^"   
3BDC   CD 61 0D               CALL   printStr   
3BDF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BEE   21 02 00               LD   hl,2   
3BF1   E5                     PUSH   hl   
3BF2   E5                     PUSH   hl   
3BF3   CD 80 0E               CALL   run   
3BF6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3BFE   CD E9 0C               CALL   flushBuffer   
3C01   CD 61 0D               CALL   printStr   
3C04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C11   E1                     POP   hl   
3C12   E5                     PUSH   hl   
3C13   E5                     PUSH   hl   
3C14   CD 80 0E               CALL   run   
3C17   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C26   CD E9 0C               CALL   flushBuffer   
3C29   76                     HALT      
3C2A                EXPECTM_2927S122:      
3C2A   E1                     POP   HL   
3C2B                          ;*Macro unroll:  test "1 10 20 :ab{/t{%a}{%b} ??};^ +", 11
3C2B   31 00 52               LD   SP,STACK   
3C2E   CD A9 0D               CALL   coldInit   
3C31   CD 70 50               CALL   execStr   
3C34   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/t{%a}{%b} ??};^ +",0   
3C53   CD E9 0C               CALL   flushBuffer   
3C56   E1                     POP   HL   
3C57   E5                     PUSH   HL   
3C58   11 0B 00               LD   DE,11   
3C5B   B7                     OR   A   
3C5C   ED 52                  SBC   HL,DE   
3C5E   7D                     LD   A,L   
3C5F   B4                     OR   H   
3C60   CA D9 3C               JP   Z,expectM_2928S123   
3C63   CD 61 0D               CALL   printStr   
3C66   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{%a}{%b} ??};^ +"   
3C8B   CD 61 0D               CALL   printStr   
3C8E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C9D   21 0B 00               LD   hl,11   
3CA0   E5                     PUSH   hl   
3CA1   E5                     PUSH   hl   
3CA2   CD 80 0E               CALL   run   
3CA5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3CAD   CD E9 0C               CALL   flushBuffer   
3CB0   CD 61 0D               CALL   printStr   
3CB3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CC0   E1                     POP   hl   
3CC1   E5                     PUSH   hl   
3CC2   E5                     PUSH   hl   
3CC3   CD 80 0E               CALL   run   
3CC6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3CD5   CD E9 0C               CALL   flushBuffer   
3CD8   76                     HALT      
3CD9                EXPECTM_2928S123:      
3CD9   E1                     POP   HL   
3CDA                          ;*Macro unroll:  test "1 10 20 :ab{/f{%a}{%b} ??};^ +", 21
3CDA   31 00 52               LD   SP,STACK   
3CDD   CD A9 0D               CALL   coldInit   
3CE0   CD 70 50               CALL   execStr   
3CE3   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/f{%a}{%b} ??};^ +",0   
3D02   CD E9 0C               CALL   flushBuffer   
3D05   E1                     POP   HL   
3D06   E5                     PUSH   HL   
3D07   11 15 00               LD   DE,21   
3D0A   B7                     OR   A   
3D0B   ED 52                  SBC   HL,DE   
3D0D   7D                     LD   A,L   
3D0E   B4                     OR   H   
3D0F   CA 88 3D               JP   Z,expectM_2929S124   
3D12   CD 61 0D               CALL   printStr   
3D15   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{%a}{%b} ??};^ +"   
3D3A   CD 61 0D               CALL   printStr   
3D3D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D4C   21 15 00               LD   hl,21   
3D4F   E5                     PUSH   hl   
3D50   E5                     PUSH   hl   
3D51   CD 80 0E               CALL   run   
3D54   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D5C   CD E9 0C               CALL   flushBuffer   
3D5F   CD 61 0D               CALL   printStr   
3D62   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D6F   E1                     POP   hl   
3D70   E5                     PUSH   hl   
3D71   E5                     PUSH   hl   
3D72   CD 80 0E               CALL   run   
3D75   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D84   CD E9 0C               CALL   flushBuffer   
3D87   76                     HALT      
3D88                EXPECTM_2929S124:      
3D88   E1                     POP   HL   
3D89                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3D89   31 00 52               LD   SP,STACK   
3D8C   CD A9 0D               CALL   coldInit   
3D8F   CD 70 50               CALL   execStr   
3D92   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
3DA0   CD E9 0C               CALL   flushBuffer   
3DA3   E1                     POP   HL   
3DA4   E5                     PUSH   HL   
3DA5   11 14 00               LD   DE,20   
3DA8   B7                     OR   A   
3DA9   ED 52                  SBC   HL,DE   
3DAB   7D                     LD   A,L   
3DAC   B4                     OR   H   
3DAD   CA 15 3E               JP   Z,expectM_2930S125   
3DB0   CD 61 0D               CALL   printStr   
3DB3   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
3DC7   CD 61 0D               CALL   printStr   
3DCA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DD9   21 14 00               LD   hl,20   
3DDC   E5                     PUSH   hl   
3DDD   E5                     PUSH   hl   
3DDE   CD 80 0E               CALL   run   
3DE1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3DE9   CD E9 0C               CALL   flushBuffer   
3DEC   CD 61 0D               CALL   printStr   
3DEF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DFC   E1                     POP   hl   
3DFD   E5                     PUSH   hl   
3DFE   E5                     PUSH   hl   
3DFF   CD 80 0E               CALL   run   
3E02   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E11   CD E9 0C               CALL   flushBuffer   
3E14   76                     HALT      
3E15                EXPECTM_2930S125:      
3E15   E1                     POP   HL   
3E16                          ;*Macro unroll:  test "[10 20 30 40] /s", 4
3E16   31 00 52               LD   SP,STACK   
3E19   CD A9 0D               CALL   coldInit   
3E1C   CD 70 50               CALL   execStr   
3E1F   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 DB   "[10 20 30 40] /s",0   
3E30   CD E9 0C               CALL   flushBuffer   
3E33   E1                     POP   HL   
3E34   E5                     PUSH   HL   
3E35   11 04 00               LD   DE,4   
3E38   B7                     OR   A   
3E39   ED 52                  SBC   HL,DE   
3E3B   7D                     LD   A,L   
3E3C   B4                     OR   H   
3E3D   CA A8 3E               JP   Z,expectM_2931S126   
3E40   CD 61 0D               CALL   printStr   
3E43   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "Code: ","[10 20 30 40] /s"   
3E5A   CD 61 0D               CALL   printStr   
3E5D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E6C   21 04 00               LD   hl,4   
3E6F   E5                     PUSH   hl   
3E70   E5                     PUSH   hl   
3E71   CD 80 0E               CALL   run   
3E74   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E7C   CD E9 0C               CALL   flushBuffer   
3E7F   CD 61 0D               CALL   printStr   
3E82   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E8F   E1                     POP   hl   
3E90   E5                     PUSH   hl   
3E91   E5                     PUSH   hl   
3E92   CD 80 0E               CALL   run   
3E95   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3EA4   CD E9 0C               CALL   flushBuffer   
3EA7   76                     HALT      
3EA8                EXPECTM_2931S126:      
3EA8   E1                     POP   HL   
3EA9                          ;*Macro unroll:  test "/c [1 2 3] 1#", 2
3EA9   31 00 52               LD   SP,STACK   
3EAC   CD A9 0D               CALL   coldInit   
3EAF   CD 70 50               CALL   execStr   
3EB2   2F 63 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/c [1 2 3] 1#",0   
3EC0   CD E9 0C               CALL   flushBuffer   
3EC3   E1                     POP   HL   
3EC4   E5                     PUSH   HL   
3EC5   11 02 00               LD   DE,2   
3EC8   B7                     OR   A   
3EC9   ED 52                  SBC   HL,DE   
3ECB   7D                     LD   A,L   
3ECC   B4                     OR   H   
3ECD   CA 35 3F               JP   Z,expectM_2932S127   
3ED0   CD 61 0D               CALL   printStr   
3ED3   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/c [1 2 3] 1#"   
3EE7   CD 61 0D               CALL   printStr   
3EEA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3EF9   21 02 00               LD   hl,2   
3EFC   E5                     PUSH   hl   
3EFD   E5                     PUSH   hl   
3EFE   CD 80 0E               CALL   run   
3F01   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F09   CD E9 0C               CALL   flushBuffer   
3F0C   CD 61 0D               CALL   printStr   
3F0F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F1C   E1                     POP   hl   
3F1D   E5                     PUSH   hl   
3F1E   E5                     PUSH   hl   
3F1F   CD 80 0E               CALL   run   
3F22   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F31   CD E9 0C               CALL   flushBuffer   
3F34   76                     HALT      
3F35                EXPECTM_2932S127:      
3F35   E1                     POP   HL   
3F36                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1#", 66
3F36   31 00 52               LD   SP,STACK   
3F39   CD A9 0D               CALL   coldInit   
3F3C   CD 70 50               CALL   execStr   
3F3F   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 DB   "/c ['A' 'B' 'C'] 1#",0   
3F53   CD E9 0C               CALL   flushBuffer   
3F56   E1                     POP   HL   
3F57   E5                     PUSH   HL   
3F58   11 42 00               LD   DE,66   
3F5B   B7                     OR   A   
3F5C   ED 52                  SBC   HL,DE   
3F5E   7D                     LD   A,L   
3F5F   B4                     OR   H   
3F60   CA CE 3F               JP   Z,expectM_2933S128   
3F63   CD 61 0D               CALL   printStr   
3F66   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1#"   
3F80   CD 61 0D               CALL   printStr   
3F83   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F92   21 42 00               LD   hl,66   
3F95   E5                     PUSH   hl   
3F96   E5                     PUSH   hl   
3F97   CD 80 0E               CALL   run   
3F9A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3FA2   CD E9 0C               CALL   flushBuffer   
3FA5   CD 61 0D               CALL   printStr   
3FA8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FB5   E1                     POP   hl   
3FB6   E5                     PUSH   hl   
3FB7   E5                     PUSH   hl   
3FB8   CD 80 0E               CALL   run   
3FBB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3FCA   CD E9 0C               CALL   flushBuffer   
3FCD   76                     HALT      
3FCE                EXPECTM_2933S128:      
3FCE   E1                     POP   HL   
3FCF                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3FCF   31 00 52               LD   SP,STACK   
3FD2   CD A9 0D               CALL   coldInit   
3FD5   CD 70 50               CALL   execStr   
3FD8   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
3FEC   CD E9 0C               CALL   flushBuffer   
3FEF   E1                     POP   HL   
3FF0   E5                     PUSH   HL   
3FF1   11 0A 00               LD   DE,10   
3FF4   B7                     OR   A   
3FF5   ED 52                  SBC   HL,DE   
3FF7   7D                     LD   A,L   
3FF8   B4                     OR   H   
3FF9   CA 67 40               JP   Z,expectM_2934S129   
3FFC   CD 61 0D               CALL   printStr   
3FFF   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
4019   CD 61 0D               CALL   printStr   
401C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
402B   21 0A 00               LD   hl,10   
402E   E5                     PUSH   hl   
402F   E5                     PUSH   hl   
4030   CD 80 0E               CALL   run   
4033   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
403B   CD E9 0C               CALL   flushBuffer   
403E   CD 61 0D               CALL   printStr   
4041   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
404E   E1                     POP   hl   
404F   E5                     PUSH   hl   
4050   E5                     PUSH   hl   
4051   CD 80 0E               CALL   run   
4054   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4063   CD E9 0C               CALL   flushBuffer   
4066   76                     HALT      
4067                EXPECTM_2934S129:      
4067   E1                     POP   HL   
4068                          ;*Macro unroll:  test "10 20 :ab {[{%a}{%b}] 0#^};^", 10
4068   31 00 52               LD   SP,STACK   
406B   CD A9 0D               CALL   coldInit   
406E   CD 70 50               CALL   execStr   
4071   31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 DB   "10 20 :ab {[{%a}{%b}] 0#^};^",0   
408E   CD E9 0C               CALL   flushBuffer   
4091   E1                     POP   HL   
4092   E5                     PUSH   HL   
4093   11 0A 00               LD   DE,10   
4096   B7                     OR   A   
4097   ED 52                  SBC   HL,DE   
4099   7D                     LD   A,L   
409A   B4                     OR   H   
409B   CA 12 41               JP   Z,expectM_2935S130   
409E   CD 61 0D               CALL   printStr   
40A1   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab {[{%a}{%b}] 0#^};^"   
40C4   CD 61 0D               CALL   printStr   
40C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40D6   21 0A 00               LD   hl,10   
40D9   E5                     PUSH   hl   
40DA   E5                     PUSH   hl   
40DB   CD 80 0E               CALL   run   
40DE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
40E6   CD E9 0C               CALL   flushBuffer   
40E9   CD 61 0D               CALL   printStr   
40EC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40F9   E1                     POP   hl   
40FA   E5                     PUSH   hl   
40FB   E5                     PUSH   hl   
40FC   CD 80 0E               CALL   run   
40FF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
410E   CD E9 0C               CALL   flushBuffer   
4111   76                     HALT      
4112                EXPECTM_2935S130:      
4112   E1                     POP   HL   
4113                          ;*Macro unroll:  test "0 10 20 :iab {[{%a}{%b}] %i#^};^", 10
4113   31 00 52               LD   SP,STACK   
4116   CD A9 0D               CALL   coldInit   
4119   CD 70 50               CALL   execStr   
411C   30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "0 10 20 :iab {[{%a}{%b}] %i#^};^",0   
413D   CD E9 0C               CALL   flushBuffer   
4140   E1                     POP   HL   
4141   E5                     PUSH   HL   
4142   11 0A 00               LD   DE,10   
4145   B7                     OR   A   
4146   ED 52                  SBC   HL,DE   
4148   7D                     LD   A,L   
4149   B4                     OR   H   
414A   CA C5 41               JP   Z,expectM_2936S131   
414D   CD 61 0D               CALL   printStr   
4150   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab {[{%a}{%b}] %i#^};^"   
4177   CD 61 0D               CALL   printStr   
417A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4189   21 0A 00               LD   hl,10   
418C   E5                     PUSH   hl   
418D   E5                     PUSH   hl   
418E   CD 80 0E               CALL   run   
4191   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4199   CD E9 0C               CALL   flushBuffer   
419C   CD 61 0D               CALL   printStr   
419F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41AC   E1                     POP   hl   
41AD   E5                     PUSH   hl   
41AE   E5                     PUSH   hl   
41AF   CD 80 0E               CALL   run   
41B2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
41C1   CD E9 0C               CALL   flushBuffer   
41C4   76                     HALT      
41C5                EXPECTM_2936S131:      
41C5   E1                     POP   HL   
41C6                          ;*Macro unroll:  test "1 10 20 :iab {[{%a}{%b}] %i#^};^", 20
41C6   31 00 52               LD   SP,STACK   
41C9   CD A9 0D               CALL   coldInit   
41CC   CD 70 50               CALL   execStr   
41CF   31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "1 10 20 :iab {[{%a}{%b}] %i#^};^",0   
41F0   CD E9 0C               CALL   flushBuffer   
41F3   E1                     POP   HL   
41F4   E5                     PUSH   HL   
41F5   11 14 00               LD   DE,20   
41F8   B7                     OR   A   
41F9   ED 52                  SBC   HL,DE   
41FB   7D                     LD   A,L   
41FC   B4                     OR   H   
41FD   CA 78 42               JP   Z,expectM_2937S132   
4200   CD 61 0D               CALL   printStr   
4203   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab {[{%a}{%b}] %i#^};^"   
422A   CD 61 0D               CALL   printStr   
422D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
423C   21 14 00               LD   hl,20   
423F   E5                     PUSH   hl   
4240   E5                     PUSH   hl   
4241   CD 80 0E               CALL   run   
4244   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
424C   CD E9 0C               CALL   flushBuffer   
424F   CD 61 0D               CALL   printStr   
4252   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
425F   E1                     POP   hl   
4260   E5                     PUSH   hl   
4261   E5                     PUSH   hl   
4262   CD 80 0E               CALL   run   
4265   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4274   CD E9 0C               CALL   flushBuffer   
4277   76                     HALT      
4278                EXPECTM_2937S132:      
4278   E1                     POP   HL   
4279                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
4279   31 00 52               LD   SP,STACK   
427C   CD A9 0D               CALL   coldInit   
427F   CD 70 50               CALL   execStr   
4282   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
429A   CD E9 0C               CALL   flushBuffer   
429D   E1                     POP   HL   
429E   E5                     PUSH   HL   
429F   11 06 00               LD   DE,6   
42A2   B7                     OR   A   
42A3   ED 52                  SBC   HL,DE   
42A5   7D                     LD   A,L   
42A6   B4                     OR   H   
42A7   CA 19 43               JP   Z,expectM_2938S133   
42AA   CD 61 0D               CALL   printStr   
42AD   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
42CB   CD 61 0D               CALL   printStr   
42CE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42DD   21 06 00               LD   hl,6   
42E0   E5                     PUSH   hl   
42E1   E5                     PUSH   hl   
42E2   CD 80 0E               CALL   run   
42E5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
42ED   CD E9 0C               CALL   flushBuffer   
42F0   CD 61 0D               CALL   printStr   
42F3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4300   E1                     POP   hl   
4301   E5                     PUSH   hl   
4302   E5                     PUSH   hl   
4303   CD 80 0E               CALL   run   
4306   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4315   CD E9 0C               CALL   flushBuffer   
4318   76                     HALT      
4319                EXPECTM_2938S133:      
4319   E1                     POP   HL   
431A                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
431A   31 00 52               LD   SP,STACK   
431D   CD A9 0D               CALL   coldInit   
4320   CD 70 50               CALL   execStr   
4323   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
433E   CD E9 0C               CALL   flushBuffer   
4341   E1                     POP   HL   
4342   E5                     PUSH   HL   
4343   11 02 00               LD   DE,2   
4346   B7                     OR   A   
4347   ED 52                  SBC   HL,DE   
4349   7D                     LD   A,L   
434A   B4                     OR   H   
434B   CA C0 43               JP   Z,expectM_2939S134   
434E   CD 61 0D               CALL   printStr   
4351   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
4372   CD 61 0D               CALL   printStr   
4375   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4384   21 02 00               LD   hl,2   
4387   E5                     PUSH   hl   
4388   E5                     PUSH   hl   
4389   CD 80 0E               CALL   run   
438C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4394   CD E9 0C               CALL   flushBuffer   
4397   CD 61 0D               CALL   printStr   
439A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43A7   E1                     POP   hl   
43A8   E5                     PUSH   hl   
43A9   E5                     PUSH   hl   
43AA   CD 80 0E               CALL   run   
43AD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
43BC   CD E9 0C               CALL   flushBuffer   
43BF   76                     HALT      
43C0                EXPECTM_2939S134:      
43C0   E1                     POP   HL   
43C1                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
43C1   31 00 52               LD   SP,STACK   
43C4   CD A9 0D               CALL   coldInit   
43C7   CD 70 50               CALL   execStr   
43CA   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
43F0   CD E9 0C               CALL   flushBuffer   
43F3   E1                     POP   HL   
43F4   E5                     PUSH   HL   
43F5   11 0A 00               LD   DE,10   
43F8   B7                     OR   A   
43F9   ED 52                  SBC   HL,DE   
43FB   7D                     LD   A,L   
43FC   B4                     OR   H   
43FD   CA 7D 44               JP   Z,expectM_2940S135   
4400   CD 61 0D               CALL   printStr   
4403   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
442F   CD 61 0D               CALL   printStr   
4432   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4441   21 0A 00               LD   hl,10   
4444   E5                     PUSH   hl   
4445   E5                     PUSH   hl   
4446   CD 80 0E               CALL   run   
4449   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4451   CD E9 0C               CALL   flushBuffer   
4454   CD 61 0D               CALL   printStr   
4457   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4464   E1                     POP   hl   
4465   E5                     PUSH   hl   
4466   E5                     PUSH   hl   
4467   CD 80 0E               CALL   run   
446A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4479   CD E9 0C               CALL   flushBuffer   
447C   76                     HALT      
447D                EXPECTM_2940S135:      
447D   E1                     POP   HL   
447E                          ;*Macro unroll:  test "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^", 6
447E   31 00 52               LD   SP,STACK   
4481   CD A9 0D               CALL   coldInit   
4484   CD 70 50               CALL   execStr   
4487   33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 DB   "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^",0   
44B4   CD E9 0C               CALL   flushBuffer   
44B7   E1                     POP   HL   
44B8   E5                     PUSH   HL   
44B9   11 06 00               LD   DE,6   
44BC   B7                     OR   A   
44BD   ED 52                  SBC   HL,DE   
44BF   7D                     LD   A,L   
44C0   B4                     OR   H   
44C1   CA 48 45               JP   Z,expectM_2941S136   
44C4   CD 61 0D               CALL   printStr   
44C7   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "Code: ","3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^"   
44FA   CD 61 0D               CALL   printStr   
44FD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
450C   21 06 00               LD   hl,6   
450F   E5                     PUSH   hl   
4510   E5                     PUSH   hl   
4511   CD 80 0E               CALL   run   
4514   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
451C   CD E9 0C               CALL   flushBuffer   
451F   CD 61 0D               CALL   printStr   
4522   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
452F   E1                     POP   hl   
4530   E5                     PUSH   hl   
4531   E5                     PUSH   hl   
4532   CD 80 0E               CALL   run   
4535   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4544   CD E9 0C               CALL   flushBuffer   
4547   76                     HALT      
4548                EXPECTM_2941S136:      
4548   E1                     POP   HL   
4549                          ;*Macro unroll:  test "/t :f{1 %f/br 2 +};^",3
4549   31 00 52               LD   SP,STACK   
454C   CD A9 0D               CALL   coldInit   
454F   CD 70 50               CALL   execStr   
4552   2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 DB   "/t :f{1 %f/br 2 +};^",0   
4567   CD E9 0C               CALL   flushBuffer   
456A   E1                     POP   HL   
456B   E5                     PUSH   HL   
456C   11 03 00               LD   DE,3   
456F   B7                     OR   A   
4570   ED 52                  SBC   HL,DE   
4572   7D                     LD   A,L   
4573   B4                     OR   H   
4574   CA E3 45               JP   Z,expectM_2942S137   
4577   CD 61 0D               CALL   printStr   
457A   43 6F 64 65 3A 20 2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 .CSTR   "Code: ","/t :f{1 %f/br 2 +};^"   
4595   CD 61 0D               CALL   printStr   
4598   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45A7   21 03 00               LD   hl,3   
45AA   E5                     PUSH   hl   
45AB   E5                     PUSH   hl   
45AC   CD 80 0E               CALL   run   
45AF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
45B7   CD E9 0C               CALL   flushBuffer   
45BA   CD 61 0D               CALL   printStr   
45BD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45CA   E1                     POP   hl   
45CB   E5                     PUSH   hl   
45CC   E5                     PUSH   hl   
45CD   CD 80 0E               CALL   run   
45D0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
45DF   CD E9 0C               CALL   flushBuffer   
45E2   76                     HALT      
45E3                EXPECTM_2942S137:      
45E3   E1                     POP   HL   
45E4                          ;*Macro unroll:  test "/f :f{1 %f/br 2 +};^",1
45E4   31 00 52               LD   SP,STACK   
45E7   CD A9 0D               CALL   coldInit   
45EA   CD 70 50               CALL   execStr   
45ED   2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 DB   "/f :f{1 %f/br 2 +};^",0   
4602   CD E9 0C               CALL   flushBuffer   
4605   E1                     POP   HL   
4606   E5                     PUSH   HL   
4607   11 01 00               LD   DE,1   
460A   B7                     OR   A   
460B   ED 52                  SBC   HL,DE   
460D   7D                     LD   A,L   
460E   B4                     OR   H   
460F   CA 7E 46               JP   Z,expectM_2943S138   
4612   CD 61 0D               CALL   printStr   
4615   43 6F 64 65 3A 20 2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 .CSTR   "Code: ","/f :f{1 %f/br 2 +};^"   
4630   CD 61 0D               CALL   printStr   
4633   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4642   21 01 00               LD   hl,1   
4645   E5                     PUSH   hl   
4646   E5                     PUSH   hl   
4647   CD 80 0E               CALL   run   
464A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4652   CD E9 0C               CALL   flushBuffer   
4655   CD 61 0D               CALL   printStr   
4658   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4665   E1                     POP   hl   
4666   E5                     PUSH   hl   
4667   E5                     PUSH   hl   
4668   CD 80 0E               CALL   run   
466B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
467A   CD E9 0C               CALL   flushBuffer   
467D   76                     HALT      
467E                EXPECTM_2943S138:      
467E   E1                     POP   HL   
467F                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
467F   31 00 52               LD   SP,STACK   
4682   CD A9 0D               CALL   coldInit   
4685   CD 70 50               CALL   execStr   
4688   27 41 27 20 31 20 2D 20 2F 61 64 00 DB   "'A' 1 - /ad",0   
4694   CD E9 0C               CALL   flushBuffer   
4697   E1                     POP   HL   
4698   E5                     PUSH   HL   
4699   11 00 00               LD   DE,NUL   
469C   B7                     OR   A   
469D   ED 52                  SBC   HL,DE   
469F   7D                     LD   A,L   
46A0   B4                     OR   H   
46A1   CA 07 47               JP   Z,expectM_2944S139   
46A4   CD 61 0D               CALL   printStr   
46A7   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
46B9   CD 61 0D               CALL   printStr   
46BC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46CB   21 00 00               LD   hl,NUL   
46CE   E5                     PUSH   hl   
46CF   E5                     PUSH   hl   
46D0   CD 80 0E               CALL   run   
46D3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
46DB   CD E9 0C               CALL   flushBuffer   
46DE   CD 61 0D               CALL   printStr   
46E1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46EE   E1                     POP   hl   
46EF   E5                     PUSH   hl   
46F0   E5                     PUSH   hl   
46F1   CD 80 0E               CALL   run   
46F4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4703   CD E9 0C               CALL   flushBuffer   
4706   76                     HALT      
4707                EXPECTM_2944S139:      
4707   E1                     POP   HL   
4708                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
4708   31 00 52               LD   SP,STACK   
470B   CD A9 0D               CALL   coldInit   
470E   CD 70 50               CALL   execStr   
4711   27 5A 27 20 31 20 2B 20 2F 61 64 00 DB   "'Z' 1 + /ad",0   
471D   CD E9 0C               CALL   flushBuffer   
4720   E1                     POP   HL   
4721   E5                     PUSH   HL   
4722   11 00 00               LD   DE,NUL   
4725   B7                     OR   A   
4726   ED 52                  SBC   HL,DE   
4728   7D                     LD   A,L   
4729   B4                     OR   H   
472A   CA 90 47               JP   Z,expectM_2945S140   
472D   CD 61 0D               CALL   printStr   
4730   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
4742   CD 61 0D               CALL   printStr   
4745   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4754   21 00 00               LD   hl,NUL   
4757   E5                     PUSH   hl   
4758   E5                     PUSH   hl   
4759   CD 80 0E               CALL   run   
475C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4764   CD E9 0C               CALL   flushBuffer   
4767   CD 61 0D               CALL   printStr   
476A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4777   E1                     POP   hl   
4778   E5                     PUSH   hl   
4779   E5                     PUSH   hl   
477A   CD 80 0E               CALL   run   
477D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
478C   CD E9 0C               CALL   flushBuffer   
478F   76                     HALT      
4790                EXPECTM_2945S140:      
4790   E1                     POP   HL   
4791                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
4791   31 00 52               LD   SP,STACK   
4794   CD A9 0D               CALL   coldInit   
4797   CD 70 50               CALL   execStr   
479A   27 61 27 20 31 20 2D 20 2F 61 64 00 DB   "'a' 1 - /ad",0   
47A6   CD E9 0C               CALL   flushBuffer   
47A9   E1                     POP   HL   
47AA   E5                     PUSH   HL   
47AB   11 00 00               LD   DE,NUL   
47AE   B7                     OR   A   
47AF   ED 52                  SBC   HL,DE   
47B1   7D                     LD   A,L   
47B2   B4                     OR   H   
47B3   CA 19 48               JP   Z,expectM_2946S141   
47B6   CD 61 0D               CALL   printStr   
47B9   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
47CB   CD 61 0D               CALL   printStr   
47CE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47DD   21 00 00               LD   hl,NUL   
47E0   E5                     PUSH   hl   
47E1   E5                     PUSH   hl   
47E2   CD 80 0E               CALL   run   
47E5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
47ED   CD E9 0C               CALL   flushBuffer   
47F0   CD 61 0D               CALL   printStr   
47F3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4800   E1                     POP   hl   
4801   E5                     PUSH   hl   
4802   E5                     PUSH   hl   
4803   CD 80 0E               CALL   run   
4806   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4815   CD E9 0C               CALL   flushBuffer   
4818   76                     HALT      
4819                EXPECTM_2946S141:      
4819   E1                     POP   HL   
481A                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
481A   31 00 52               LD   SP,STACK   
481D   CD A9 0D               CALL   coldInit   
4820   CD 70 50               CALL   execStr   
4823   27 7A 27 20 31 20 2B 20 2F 61 64 00 DB   "'z' 1 + /ad",0   
482F   CD E9 0C               CALL   flushBuffer   
4832   E1                     POP   HL   
4833   E5                     PUSH   HL   
4834   11 00 00               LD   DE,NUL   
4837   B7                     OR   A   
4838   ED 52                  SBC   HL,DE   
483A   7D                     LD   A,L   
483B   B4                     OR   H   
483C   CA A2 48               JP   Z,expectM_2947S142   
483F   CD 61 0D               CALL   printStr   
4842   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
4854   CD 61 0D               CALL   printStr   
4857   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4866   21 00 00               LD   hl,NUL   
4869   E5                     PUSH   hl   
486A   E5                     PUSH   hl   
486B   CD 80 0E               CALL   run   
486E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4876   CD E9 0C               CALL   flushBuffer   
4879   CD 61 0D               CALL   printStr   
487C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4889   E1                     POP   hl   
488A   E5                     PUSH   hl   
488B   E5                     PUSH   hl   
488C   CD 80 0E               CALL   run   
488F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
489E   CD E9 0C               CALL   flushBuffer   
48A1   76                     HALT      
48A2                EXPECTM_2947S142:      
48A2   E1                     POP   HL   
48A3                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
48A3   31 00 52               LD   SP,STACK   
48A6   CD A9 0D               CALL   coldInit   
48A9   CD 70 50               CALL   execStr   
48AC   27 7A 27 20 2F 61 64 00 DB   "'z' /ad",0   
48B4   CD E9 0C               CALL   flushBuffer   
48B7   E1                     POP   HL   
48B8   E5                     PUSH   HL   
48B9   11 66 54               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
48BC   B7                     OR   A   
48BD   ED 52                  SBC   HL,DE   
48BF   7D                     LD   A,L   
48C0   B4                     OR   H   
48C1   CA 23 49               JP   Z,expectM_2948S143   
48C4   CD 61 0D               CALL   printStr   
48C7   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
48D5   CD 61 0D               CALL   printStr   
48D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48E7   21 66 54               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
48EA   E5                     PUSH   hl   
48EB   E5                     PUSH   hl   
48EC   CD 80 0E               CALL   run   
48EF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
48F7   CD E9 0C               CALL   flushBuffer   
48FA   CD 61 0D               CALL   printStr   
48FD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
490A   E1                     POP   hl   
490B   E5                     PUSH   hl   
490C   E5                     PUSH   hl   
490D   CD 80 0E               CALL   run   
4910   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
491F   CD E9 0C               CALL   flushBuffer   
4922   76                     HALT      
4923                EXPECTM_2948S143:      
4923   E1                     POP   HL   
4924                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
4924   31 00 52               LD   SP,STACK   
4927   CD A9 0D               CALL   coldInit   
492A   CD 70 50               CALL   execStr   
492D   27 61 27 20 2F 61 64 00 DB   "'a' /ad",0   
4935   CD E9 0C               CALL   flushBuffer   
4938   E1                     POP   HL   
4939   E5                     PUSH   HL   
493A   11 34 54               LD   DE,VARS + ("Z"-"A"+1)*2   
493D   B7                     OR   A   
493E   ED 52                  SBC   HL,DE   
4940   7D                     LD   A,L   
4941   B4                     OR   H   
4942   CA A4 49               JP   Z,expectM_2949S144   
4945   CD 61 0D               CALL   printStr   
4948   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
4956   CD 61 0D               CALL   printStr   
4959   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4968   21 34 54               LD   hl,VARS + ("Z"-"A"+1)*2   
496B   E5                     PUSH   hl   
496C   E5                     PUSH   hl   
496D   CD 80 0E               CALL   run   
4970   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4978   CD E9 0C               CALL   flushBuffer   
497B   CD 61 0D               CALL   printStr   
497E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
498B   E1                     POP   hl   
498C   E5                     PUSH   hl   
498D   E5                     PUSH   hl   
498E   CD 80 0E               CALL   run   
4991   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
49A0   CD E9 0C               CALL   flushBuffer   
49A3   76                     HALT      
49A4                EXPECTM_2949S144:      
49A4   E1                     POP   HL   
49A5                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
49A5   31 00 52               LD   SP,STACK   
49A8   CD A9 0D               CALL   coldInit   
49AB   CD 70 50               CALL   execStr   
49AE   27 5A 27 20 2F 61 64 00 DB   "'Z' /ad",0   
49B6   CD E9 0C               CALL   flushBuffer   
49B9   E1                     POP   HL   
49BA   E5                     PUSH   HL   
49BB   11 32 54               LD   DE,VARS + ("Z"-"A")*2   
49BE   B7                     OR   A   
49BF   ED 52                  SBC   HL,DE   
49C1   7D                     LD   A,L   
49C2   B4                     OR   H   
49C3   CA 25 4A               JP   Z,expectM_2950S145   
49C6   CD 61 0D               CALL   printStr   
49C9   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
49D7   CD 61 0D               CALL   printStr   
49DA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49E9   21 32 54               LD   hl,VARS + ("Z"-"A")*2   
49EC   E5                     PUSH   hl   
49ED   E5                     PUSH   hl   
49EE   CD 80 0E               CALL   run   
49F1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
49F9   CD E9 0C               CALL   flushBuffer   
49FC   CD 61 0D               CALL   printStr   
49FF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A0C   E1                     POP   hl   
4A0D   E5                     PUSH   hl   
4A0E   E5                     PUSH   hl   
4A0F   CD 80 0E               CALL   run   
4A12   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4A21   CD E9 0C               CALL   flushBuffer   
4A24   76                     HALT      
4A25                EXPECTM_2950S145:      
4A25   E1                     POP   HL   
4A26                          ;*Macro unroll:  test "'A' /ad", VARS
4A26   31 00 52               LD   SP,STACK   
4A29   CD A9 0D               CALL   coldInit   
4A2C   CD 70 50               CALL   execStr   
4A2F   27 41 27 20 2F 61 64 00 DB   "'A' /ad",0   
4A37   CD E9 0C               CALL   flushBuffer   
4A3A   E1                     POP   HL   
4A3B   E5                     PUSH   HL   
4A3C   11 00 54               LD   DE,VARS   
4A3F   B7                     OR   A   
4A40   ED 52                  SBC   HL,DE   
4A42   7D                     LD   A,L   
4A43   B4                     OR   H   
4A44   CA A6 4A               JP   Z,expectM_2951S146   
4A47   CD 61 0D               CALL   printStr   
4A4A   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
4A58   CD 61 0D               CALL   printStr   
4A5B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A6A   21 00 54               LD   hl,VARS   
4A6D   E5                     PUSH   hl   
4A6E   E5                     PUSH   hl   
4A6F   CD 80 0E               CALL   run   
4A72   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4A7A   CD E9 0C               CALL   flushBuffer   
4A7D   CD 61 0D               CALL   printStr   
4A80   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A8D   E1                     POP   hl   
4A8E   E5                     PUSH   hl   
4A8F   E5                     PUSH   hl   
4A90   CD 80 0E               CALL   run   
4A93   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4AA2   CD E9 0C               CALL   flushBuffer   
4AA5   76                     HALT      
4AA6                EXPECTM_2951S146:      
4AA6   E1                     POP   HL   
4AA7                          ;*Macro unroll:  test "-1. /c/vB 0#", $2D
4AA7   31 00 52               LD   SP,STACK   
4AAA   CD A9 0D               CALL   coldInit   
4AAD   CD 70 50               CALL   execStr   
4AB0   2D 31 2E 20 2F 63 2F 76 42 20 30 23 00 DB   "-1. /c/vB 0#",0   
4ABD   CD E9 0C               CALL   flushBuffer   
4AC0   E1                     POP   HL   
4AC1   E5                     PUSH   HL   
4AC2   11 2D 00               LD   DE,$2D   
4AC5   B7                     OR   A   
4AC6   ED 52                  SBC   HL,DE   
4AC8   7D                     LD   A,L   
4AC9   B4                     OR   H   
4ACA   CA 31 4B               JP   Z,expectM_2952S147   
4ACD   CD 61 0D               CALL   printStr   
4AD0   43 6F 64 65 3A 20 2D 31 2E 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "Code: ","-1. /c/vB 0#"   
4AE3   CD 61 0D               CALL   printStr   
4AE6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4AF5   21 2D 00               LD   hl,$2D   
4AF8   E5                     PUSH   hl   
4AF9   E5                     PUSH   hl   
4AFA   CD 80 0E               CALL   run   
4AFD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4B05   CD E9 0C               CALL   flushBuffer   
4B08   CD 61 0D               CALL   printStr   
4B0B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B18   E1                     POP   hl   
4B19   E5                     PUSH   hl   
4B1A   E5                     PUSH   hl   
4B1B   CD 80 0E               CALL   run   
4B1E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4B2D   CD E9 0C               CALL   flushBuffer   
4B30   76                     HALT      
4B31                EXPECTM_2952S147:      
4B31   E1                     POP   HL   
4B32                          ;*Macro unroll:  test {DQ,"A",DQ,".s /c/vB 0#"}, 65
4B32   31 00 52               LD   SP,STACK   
4B35   CD A9 0D               CALL   coldInit   
4B38   CD 70 50               CALL   execStr   
4B3B   22 41 22 2E 73 20 2F 63 2F 76 42 20 30 23 00 DB   DQ,"A",DQ,".s /c/vB 0#",0   
4B4A   CD E9 0C               CALL   flushBuffer   
4B4D   E1                     POP   HL   
4B4E   E5                     PUSH   HL   
4B4F   11 41 00               LD   DE,65   
4B52   B7                     OR   A   
4B53   ED 52                  SBC   HL,DE   
4B55   7D                     LD   A,L   
4B56   B4                     OR   H   
4B57   CA C0 4B               JP   Z,expectM_2953S148   
4B5A   CD 61 0D               CALL   printStr   
4B5D   43 6F 64 65 3A 20 22 41 22 2E 73 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "Code: ",DQ,"A",DQ,".s /c/vB 0#"   
4B72   CD 61 0D               CALL   printStr   
4B75   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B84   21 41 00               LD   hl,65   
4B87   E5                     PUSH   hl   
4B88   E5                     PUSH   hl   
4B89   CD 80 0E               CALL   run   
4B8C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4B94   CD E9 0C               CALL   flushBuffer   
4B97   CD 61 0D               CALL   printStr   
4B9A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BA7   E1                     POP   hl   
4BA8   E5                     PUSH   hl   
4BA9   E5                     PUSH   hl   
4BAA   CD 80 0E               CALL   run   
4BAD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4BBC   CD E9 0C               CALL   flushBuffer   
4BBF   76                     HALT      
4BC0                EXPECTM_2953S148:      
4BC0   E1                     POP   HL   
4BC1                          ;*Macro unroll:  test "123. /c/vB 1#", $32
4BC1   31 00 52               LD   SP,STACK   
4BC4   CD A9 0D               CALL   coldInit   
4BC7   CD 70 50               CALL   execStr   
4BCA   31 32 33 2E 20 2F 63 2F 76 42 20 31 23 00 DB   "123. /c/vB 1#",0   
4BD8   CD E9 0C               CALL   flushBuffer   
4BDB   E1                     POP   HL   
4BDC   E5                     PUSH   HL   
4BDD   11 32 00               LD   DE,$32   
4BE0   B7                     OR   A   
4BE1   ED 52                  SBC   HL,DE   
4BE3   7D                     LD   A,L   
4BE4   B4                     OR   H   
4BE5   CA 4D 4C               JP   Z,expectM_2954S149   
4BE8   CD 61 0D               CALL   printStr   
4BEB   43 6F 64 65 3A 20 31 32 33 2E 20 2F 63 2F 76 42 20 31 23 00 .CSTR   "Code: ","123. /c/vB 1#"   
4BFF   CD 61 0D               CALL   printStr   
4C02   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C11   21 32 00               LD   hl,$32   
4C14   E5                     PUSH   hl   
4C15   E5                     PUSH   hl   
4C16   CD 80 0E               CALL   run   
4C19   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4C21   CD E9 0C               CALL   flushBuffer   
4C24   CD 61 0D               CALL   printStr   
4C27   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C34   E1                     POP   hl   
4C35   E5                     PUSH   hl   
4C36   E5                     PUSH   hl   
4C37   CD 80 0E               CALL   run   
4C3A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4C49   CD E9 0C               CALL   flushBuffer   
4C4C   76                     HALT      
4C4D                EXPECTM_2954S149:      
4C4D   E1                     POP   HL   
4C4E                          ;*Macro unroll:  test ":a{%a}; F=1F^", 1
4C4E   31 00 52               LD   SP,STACK   
4C51   CD A9 0D               CALL   coldInit   
4C54   CD 70 50               CALL   execStr   
4C57   3A 61 7B 25 61 7D 3B 20 46 3D 31 46 5E 00 DB   ":a{%a}; F=1F^",0   
4C65   CD E9 0C               CALL   flushBuffer   
4C68   E1                     POP   HL   
4C69   E5                     PUSH   HL   
4C6A   11 01 00               LD   DE,1   
4C6D   B7                     OR   A   
4C6E   ED 52                  SBC   HL,DE   
4C70   7D                     LD   A,L   
4C71   B4                     OR   H   
4C72   CA DA 4C               JP   Z,expectM_2955S150   
4C75   CD 61 0D               CALL   printStr   
4C78   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 3B 20 46 3D 31 46 5E 00 .CSTR   "Code: ",":a{%a}; F=1F^"   
4C8C   CD 61 0D               CALL   printStr   
4C8F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C9E   21 01 00               LD   hl,1   
4CA1   E5                     PUSH   hl   
4CA2   E5                     PUSH   hl   
4CA3   CD 80 0E               CALL   run   
4CA6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4CAE   CD E9 0C               CALL   flushBuffer   
4CB1   CD 61 0D               CALL   printStr   
4CB4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4CC1   E1                     POP   hl   
4CC2   E5                     PUSH   hl   
4CC3   E5                     PUSH   hl   
4CC4   CD 80 0E               CALL   run   
4CC7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4CD6   CD E9 0C               CALL   flushBuffer   
4CD9   76                     HALT      
4CDA                EXPECTM_2955S150:      
4CDA   E1                     POP   HL   
4CDB                          ;*Macro unroll:  test "1 :b{:a{%a};};^F= 3F^",3
4CDB   31 00 52               LD   SP,STACK   
4CDE   CD A9 0D               CALL   coldInit   
4CE1   CD 70 50               CALL   execStr   
4CE4   31 20 3A 62 7B 3A 61 7B 25 61 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a};};^F= 3F^",0   
4CFA   CD E9 0C               CALL   flushBuffer   
4CFD   E1                     POP   HL   
4CFE   E5                     PUSH   HL   
4CFF   11 03 00               LD   DE,3   
4D02   B7                     OR   A   
4D03   ED 52                  SBC   HL,DE   
4D05   7D                     LD   A,L   
4D06   B4                     OR   H   
4D07   CA 77 4D               JP   Z,expectM_2956S151   
4D0A   CD 61 0D               CALL   printStr   
4D0D   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a};};^F= 3F^"   
4D29   CD 61 0D               CALL   printStr   
4D2C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D3B   21 03 00               LD   hl,3   
4D3E   E5                     PUSH   hl   
4D3F   E5                     PUSH   hl   
4D40   CD 80 0E               CALL   run   
4D43   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4D4B   CD E9 0C               CALL   flushBuffer   
4D4E   CD 61 0D               CALL   printStr   
4D51   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D5E   E1                     POP   hl   
4D5F   E5                     PUSH   hl   
4D60   E5                     PUSH   hl   
4D61   CD 80 0E               CALL   run   
4D64   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4D73   CD E9 0C               CALL   flushBuffer   
4D76   76                     HALT      
4D77                EXPECTM_2956S151:      
4D77   E1                     POP   HL   
4D78                          ;*Macro unroll:  test "1 :b{:a{%a%b-};};^F= 3F^",2
4D78   31 00 52               LD   SP,STACK   
4D7B   CD A9 0D               CALL   coldInit   
4D7E   CD 70 50               CALL   execStr   
4D81   31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a%b-};};^F= 3F^",0   
4D9A   CD E9 0C               CALL   flushBuffer   
4D9D   E1                     POP   HL   
4D9E   E5                     PUSH   HL   
4D9F   11 02 00               LD   DE,2   
4DA2   B7                     OR   A   
4DA3   ED 52                  SBC   HL,DE   
4DA5   7D                     LD   A,L   
4DA6   B4                     OR   H   
4DA7   CA 1A 4E               JP   Z,expectM_2957S152   
4DAA   CD 61 0D               CALL   printStr   
4DAD   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a%b-};};^F= 3F^"   
4DCC   CD 61 0D               CALL   printStr   
4DCF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4DDE   21 02 00               LD   hl,2   
4DE1   E5                     PUSH   hl   
4DE2   E5                     PUSH   hl   
4DE3   CD 80 0E               CALL   run   
4DE6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4DEE   CD E9 0C               CALL   flushBuffer   
4DF1   CD 61 0D               CALL   printStr   
4DF4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E01   E1                     POP   hl   
4E02   E5                     PUSH   hl   
4E03   E5                     PUSH   hl   
4E04   CD 80 0E               CALL   run   
4E07   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4E16   CD E9 0C               CALL   flushBuffer   
4E19   76                     HALT      
4E1A                EXPECTM_2957S152:      
4E1A   E1                     POP   HL   
4E1B                          ;*Macro unroll:  test "1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^",1
4E1B   31 00 52               LD   SP,STACK   
4E1E   CD A9 0D               CALL   coldInit   
4E21   CD 70 50               CALL   execStr   
4E24   31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^",0   
4E49   CD E9 0C               CALL   flushBuffer   
4E4C   E1                     POP   HL   
4E4D   E5                     PUSH   HL   
4E4E   11 01 00               LD   DE,1   
4E51   B7                     OR   A   
4E52   ED 52                  SBC   HL,DE   
4E54   7D                     LD   A,L   
4E55   B4                     OR   H   
4E56   CA D5 4E               JP   Z,expectM_2958S153   
4E59   CD 61 0D               CALL   printStr   
4E5C   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^"   
4E87   CD 61 0D               CALL   printStr   
4E8A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E99   21 01 00               LD   hl,1   
4E9C   E5                     PUSH   hl   
4E9D   E5                     PUSH   hl   
4E9E   CD 80 0E               CALL   run   
4EA1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4EA9   CD E9 0C               CALL   flushBuffer   
4EAC   CD 61 0D               CALL   printStr   
4EAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4EBC   E1                     POP   hl   
4EBD   E5                     PUSH   hl   
4EBE   E5                     PUSH   hl   
4EBF   CD 80 0E               CALL   run   
4EC2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4ED1   CD E9 0C               CALL   flushBuffer   
4ED4   76                     HALT      
4ED5                EXPECTM_2958S153:      
4ED5   E1                     POP   HL   
4ED6                          ;*Macro unroll:  test "1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^",1
4ED6   31 00 52               LD   SP,STACK   
4ED9   CD A9 0D               CALL   coldInit   
4EDC   CD 70 50               CALL   execStr   
4EDF   31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^",0   
4F04   CD E9 0C               CALL   flushBuffer   
4F07   E1                     POP   HL   
4F08   E5                     PUSH   HL   
4F09   11 01 00               LD   DE,1   
4F0C   B7                     OR   A   
4F0D   ED 52                  SBC   HL,DE   
4F0F   7D                     LD   A,L   
4F10   B4                     OR   H   
4F11   CA 90 4F               JP   Z,expectM_2959S154   
4F14   CD 61 0D               CALL   printStr   
4F17   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^"   
4F42   CD 61 0D               CALL   printStr   
4F45   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F54   21 01 00               LD   hl,1   
4F57   E5                     PUSH   hl   
4F58   E5                     PUSH   hl   
4F59   CD 80 0E               CALL   run   
4F5C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4F64   CD E9 0C               CALL   flushBuffer   
4F67   CD 61 0D               CALL   printStr   
4F6A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F77   E1                     POP   hl   
4F78   E5                     PUSH   hl   
4F79   E5                     PUSH   hl   
4F7A   CD 80 0E               CALL   run   
4F7D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4F8C   CD E9 0C               CALL   flushBuffer   
4F8F   76                     HALT      
4F90                EXPECTM_2959S154:      
4F90   E1                     POP   HL   
4F91                          ;*Macro unroll:  test "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^",2
4F91   31 00 52               LD   SP,STACK   
4F94   CD A9 0D               CALL   coldInit   
4F97   CD 70 50               CALL   execStr   
4F9A   31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^",0   
4FCC   CD E9 0C               CALL   flushBuffer   
4FCF   E1                     POP   HL   
4FD0   E5                     PUSH   HL   
4FD1   11 02 00               LD   DE,2   
4FD4   B7                     OR   A   
4FD5   ED 52                  SBC   HL,DE   
4FD7   7D                     LD   A,L   
4FD8   B4                     OR   H   
4FD9   CA 65 50               JP   Z,expectM_2960S155   
4FDC   CD 61 0D               CALL   printStr   
4FDF   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^"   
5017   CD 61 0D               CALL   printStr   
501A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5029   21 02 00               LD   hl,2   
502C   E5                     PUSH   hl   
502D   E5                     PUSH   hl   
502E   CD 80 0E               CALL   run   
5031   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
5039   CD E9 0C               CALL   flushBuffer   
503C   CD 61 0D               CALL   printStr   
503F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
504C   E1                     POP   hl   
504D   E5                     PUSH   hl   
504E   E5                     PUSH   hl   
504F   CD 80 0E               CALL   run   
5052   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
5061   CD E9 0C               CALL   flushBuffer   
5064   76                     HALT      
5065                EXPECTM_2960S155:      
5065   E1                     POP   HL   
5066                             ; 
5066   CD 61 0D               CALL   printStr   
5069   44 6F 6E 65 21 00      .CSTR   "Done!"   
506F   76                     HALT      
5070                             ; executes a null teminated string (null executes exit_)
5070                             ; the string should be immedaitely following the call
5070                EXECSTR:      ; create a root stack frame
5070   C1                     POP   bc   ; bc = code*
5071   0B                     DEC   bc   ; dec to prepare for next routine
5072   11 00 00               LD   de,0   
5075   D5                     PUSH   de   ; push fake IP
5076   D5                     PUSH   de   ; push null arg_list*
5077   D5                     PUSH   de   ; push null first_arg*
5078   D5                     PUSH   de   ; push fake BP
5079   DD E9                  JP   (ix)   
507B                STKSIZE:   EQU   $100   ; Stack size
507B                TIBSIZE:   EQU   $100   ; 256 bytes
507B                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
507B                          ALIGN   $100   
5100                          DS   STKSIZE   
5200                STACK:       
5200                          ALIGN   $100   
5200                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
5300                          ALIGN   $100   
5300                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5400                          ALIGN   $100   
5400                VARS:        
5400                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
54D0                RESTARTS:      
54D0                RST08:    DS   2   
54D2                RST10:    DS   2   
54D4                RST18:    DS   2   
54D6                RST20:    DS   2   
54D8                RST28:    DS   2   
54DA                RST30:    DS   2   ; 
54DC                BAUD:     DS   2   ; 
54DE                INTVEC:   DS   2   ; 
54E0                NMIVEC:   DS   2   ; 
54E2                GETCVEC:   DS   2   ; 
54E4                PUTCVEC:   DS   2   ; 
54E6                SYSVARS:      
54E6                             ; initialised sys variables (preserved)
54E6                VDATAWIDTH:   DS   2   ; 
54E8                VNUMBASE:   DS   2   ; 
54EA                VTIBPTR:   DS   2   ; 
54EC                VBUFPTR:   DS   2   ; 
54EE                VNEXT:    DS   2   ; 
54F0                VHEAPPTR:   DS   2   ; 
54F2                VRECUR:   DS   2   ; 
54F4                             ; uninitialised sys variables (preserved)
54F4                VPOINTER:   DS   2   ; 
54F6                VREMAIN:   DS   2   ; 
54F8                VSAVEDIP:   DS   2   ; 
54FA                VSAVEDSP:   DS   2   ; 
54FC                VSAVEDNEXT:   DS   2   ; 
54FE                VSAVEDBP:   DS   2   ; 
5500                             ; uninitialised sys variables (unpreserved)
5500                VTEMP1:   DS   2   ; 
5502                VTEMP2:   DS   2   ; 
5504                VLASTDEF:   DS   2   ; 
5506                TBPTR:    DS   2   ; reserved for tests
5508                TITLEBUF:   DS   20   
551C                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0CE7 DEFINED AT LINE 1919 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 2046 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1607 IN MAIN.asm
                    > USED AT LINE 2137 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 1971 IN MAIN.asm
                    > USED AT LINE 2121 IN MAIN.asm
                    > USED AT LINE 2183 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1320 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1325 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 239 IN MAIN.asm
                    > USED AT LINE 810 IN MAIN.asm
                    > USED AT LINE 819 IN MAIN.asm
                    > USED AT LINE 828 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
                    > USED AT LINE 858 IN MAIN.asm
                    > USED AT LINE 865 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
                    > USED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
                    > USED AT LINE 1093 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1578 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 2140 IN MAIN.asm
                    > USED AT LINE 2228 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 634 IN MAIN.asm
                    > USED AT LINE 1097 IN MAIN.asm
                    > USED AT LINE 1791 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
                    > USED AT LINE 2243 IN MAIN.asm
                    > USED AT LINE 2258 IN MAIN.asm
                    > USED AT LINE 8
                    > USED AT LINE 20
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2146 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2148 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2150 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 2152 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 53 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN MAIN.asm
                    > USED AT LINE 2074 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 69 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 172 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 174 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 176 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 178 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 180 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 182 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 184 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 186 IN MAIN.asm
LPAREN_:            0315 DEFINED AT LINE 188 IN MAIN.asm
LBRACE_:            0315 DEFINED AT LINE 189 IN MAIN.asm
RBRACE_:            0318 DEFINED AT LINE 191 IN MAIN.asm
TICK_:              031B DEFINED AT LINE 193 IN MAIN.asm
SEMICOLON_:         031E DEFINED AT LINE 195 IN MAIN.asm
DOT_:               0321 DEFINED AT LINE 197 IN MAIN.asm
COLON_:             0324 DEFINED AT LINE 199 IN MAIN.asm
UPCASE_:            0327 DEFINED AT LINE 201 IN MAIN.asm
LOWCASE_:           032A DEFINED AT LINE 203 IN MAIN.asm
QUESTION_:          032D DEFINED AT LINE 205 IN MAIN.asm
STAR_:              0330 DEFINED AT LINE 207 IN MAIN.asm
BANG_:              0333 DEFINED AT LINE 209 IN MAIN.asm
NOT:                033E DEFINED AT LINE 217 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
NUM_:               0344 DEFINED AT LINE 221 IN MAIN.asm
                    > USED AT LINE 1819 IN MAIN.asm
HASH_:              0347 DEFINED AT LINE 223 IN MAIN.asm
PIPE_:              034A DEFINED AT LINE 225 IN MAIN.asm
CARET_:             034D DEFINED AT LINE 227 IN MAIN.asm
COMMA_:             0350 DEFINED AT LINE 229 IN MAIN.asm
DQUOTE_:            0353 DEFINED AT LINE 231 IN MAIN.asm
MINUS_:             0356 DEFINED AT LINE 233 IN MAIN.asm
EQ_:                0359 DEFINED AT LINE 235 IN MAIN.asm
EQ0:                0362 DEFINED AT LINE 247 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
EQ1:                0363 DEFINED AT LINE 249 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
GT_:                0367 DEFINED AT LINE 253 IN MAIN.asm
LT_:                0372 DEFINED AT LINE 261 IN MAIN.asm
LT1:                037B DEFINED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 260 IN MAIN.asm
SLASH_:             0384 DEFINED AT LINE 273 IN MAIN.asm
NOP_:               0387 DEFINED AT LINE 275 IN MAIN.asm
RPAREN_:            0389 DEFINED AT LINE 277 IN MAIN.asm
PLUS:               038C DEFINED AT LINE 283 IN MAIN.asm
                    > USED AT LINE 175 IN MAIN.asm
ADD:                038C DEFINED AT LINE 284 IN MAIN.asm
ADD1:               0397 DEFINED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 288 IN MAIN.asm
ADD3:               039B DEFINED AT LINE 297 IN MAIN.asm
                    > USED AT LINE 1072 IN MAIN.asm
                    > USED AT LINE 1674 IN MAIN.asm
                    > USED AT LINE 1833 IN MAIN.asm
ADD4:               03A6 DEFINED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 301 IN MAIN.asm
AT:                 03A9 DEFINED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 177 IN MAIN.asm
ADDR:               03A9 DEFINED AT LINE 311 IN MAIN.asm
AMPER:              03B3 DEFINED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
AND:                03B3 DEFINED AT LINE 317 IN MAIN.asm
AND1:               03BA DEFINED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 341 IN MAIN.asm
PIPE:               03BE DEFINED AT LINE 330 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
OR:                 03C1 DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 331 IN MAIN.asm
XOR:                03CA DEFINED AT LINE 343 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
XOR1:               03CB DEFINED AT LINE 345 IN MAIN.asm
                    > USED AT LINE 357 IN MAIN.asm
INVERT:             03D5 DEFINED AT LINE 355 IN MAIN.asm
                    > USED AT LINE 857 IN MAIN.asm
PERCENT:            03DA DEFINED AT LINE 362 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
ARG:                03DA DEFINED AT LINE 363 IN MAIN.asm
ARG0:               03F6 DEFINED AT LINE 382 IN MAIN.asm
                    > USED AT LINE 388 IN MAIN.asm
ARG0A:              03FF DEFINED AT LINE 390 IN MAIN.asm
                    > USED AT LINE 369 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
ARG1:               0404 DEFINED AT LINE 393 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
ARG1A:              040C DEFINED AT LINE 400 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
LBRACK:             040F DEFINED AT LINE 404 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
ARRAYSTART:         040F DEFINED AT LINE 405 IN MAIN.asm
RBRACK:             042B DEFINED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
ARRAYEND:           042B DEFINED AT LINE 420 IN MAIN.asm
ARRAYEND1:          0447 DEFINED AT LINE 437 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
ARRAYEND2:          0457 DEFINED AT LINE 447 IN MAIN.asm
                    > USED AT LINE 443 IN MAIN.asm
ARRAYEND3:          045C DEFINED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 436 IN MAIN.asm
HASH:               047B DEFINED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
ARRAYINDEX:         047B DEFINED AT LINE 475 IN MAIN.asm
ARRAYINDEX0:        0483 DEFINED AT LINE 481 IN MAIN.asm
ARRAYINDEX1:        0484 DEFINED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 480 IN MAIN.asm
ARRAYINDEX2:        0490 DEFINED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 489 IN MAIN.asm
COLON:              0493 DEFINED AT LINE 500 IN MAIN.asm
                    > USED AT LINE 200 IN MAIN.asm
ARGLIST:            0493 DEFINED AT LINE 501 IN MAIN.asm
ARGLIST1:           049D DEFINED AT LINE 508 IN MAIN.asm
                    > USED AT LINE 529 IN MAIN.asm
ARGLIST1A:          04A5 DEFINED AT LINE 514 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
ARGLIST2:           04AD DEFINED AT LINE 519 IN MAIN.asm
ARGLIST3:           04B5 DEFINED AT LINE 527 IN MAIN.asm
                    > USED AT LINE 513 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
ARGLIST4:           04B8 DEFINED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 518 IN MAIN.asm
ARGLIST5:           04BE DEFINED AT LINE 536 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
ASSIGN:             04C9 DEFINED AT LINE 547 IN MAIN.asm
                    > USED AT LINE 240 IN MAIN.asm
ASSIGN0:            04CB DEFINED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
                    > USED AT LINE 306 IN MAIN.asm
                    > USED AT LINE 1826 IN MAIN.asm
ASSIGNX:            04CC DEFINED AT LINE 552 IN MAIN.asm
ASSIGN1:            04D8 DEFINED AT LINE 560 IN MAIN.asm
                    > USED AT LINE 557 IN MAIN.asm
ABSOLUTE:           04DA DEFINED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 816 IN MAIN.asm
ADDROF:             04E7 DEFINED AT LINE 580 IN MAIN.asm
                    > USED AT LINE 818 IN MAIN.asm
ADDROF1:            04FB DEFINED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
ADDROF2:            0506 DEFINED AT LINE 601 IN MAIN.asm
                    > USED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 586 IN MAIN.asm
                    > USED AT LINE 591 IN MAIN.asm
LBRACE:             0508 DEFINED AT LINE 605 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
BLOCKSTART:         0508 DEFINED AT LINE 606 IN MAIN.asm
BLOCKSTART1:        050C DEFINED AT LINE 610 IN MAIN.asm
                    > USED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
BLOCKSTART2:        0538 DEFINED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 624 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
BLOCKSTART3:        053B DEFINED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 633 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
BLOCKSTART4:        0543 DEFINED AT LINE 646 IN MAIN.asm
                    > USED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 621 IN MAIN.asm
BLOCKSTART5:        0546 DEFINED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 645 IN MAIN.asm
BLOCKSTART6:        056E DEFINED AT LINE 668 IN MAIN.asm
                    > USED AT LINE 655 IN MAIN.asm
RBRACE:             0571 DEFINED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
BLOCKEND:           0571 DEFINED AT LINE 673 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
BLOCKEND1:          05A3 DEFINED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 688 IN MAIN.asm
BLOCKEND2:          05AF DEFINED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 694 IN MAIN.asm
BLOCKEND3:          05C1 DEFINED AT LINE 716 IN MAIN.asm
                    > USED AT LINE 708 IN MAIN.asm
BLOCKEND4:          05D5 DEFINED AT LINE 726 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
BREAK:              05DE DEFINED AT LINE 733 IN MAIN.asm
                    > USED AT LINE 825 IN MAIN.asm
BREAK1:             05E5 DEFINED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 737 IN MAIN.asm
TICK:               05F8 DEFINED AT LINE 750 IN MAIN.asm
                    > USED AT LINE 194 IN MAIN.asm
CHAR:               05F8 DEFINED AT LINE 751 IN MAIN.asm
CHAR1:              05FB DEFINED AT LINE 753 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
CHAR2:              0607 DEFINED AT LINE 762 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
CHAR3:              060A DEFINED AT LINE 765 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
SLASH:              060D DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 274 IN MAIN.asm
COMMAND:            060D DEFINED AT LINE 770 IN MAIN.asm
COMMAND_A:          064C DEFINED AT LINE 813 IN MAIN.asm
                    > USED AT LINE 775 IN MAIN.asm
COMMAND_B:          0658 DEFINED AT LINE 822 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
COMMAND_F:          0664 DEFINED AT LINE 831 IN MAIN.asm
                    > USED AT LINE 783 IN MAIN.asm
COMMAND_I:          0682 DEFINED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
COMMAND_L:          068E DEFINED AT LINE 861 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
COMMAND_M:          0697 DEFINED AT LINE 868 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
COMMAND_P:          06A0 DEFINED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 799 IN MAIN.asm
COMMAND_R:          06AF DEFINED AT LINE 886 IN MAIN.asm
                    > USED AT LINE 801 IN MAIN.asm
COMMAND_V:          06BE DEFINED AT LINE 897 IN MAIN.asm
                    > USED AT LINE 807 IN MAIN.asm
CHARS:              06D3 DEFINED AT LINE 912 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
CHARS1:             06D6 DEFINED AT LINE 914 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
NUMBERS:            06DB DEFINED AT LINE 917 IN MAIN.asm
                    > USED AT LINE 795 IN MAIN.asm
COMMENT:            06E1 DEFINED AT LINE 921 IN MAIN.asm
                    > USED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 925 IN MAIN.asm
SEMICOLON:          06EA DEFINED AT LINE 931 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
CREATEFUNC:         06EA DEFINED AT LINE 932 IN MAIN.asm
CREATEFUNC0:        0705 DEFINED AT LINE 944 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
CREATEFUNC1:        071D DEFINED AT LINE 963 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
CREATEFUNC2:        0730 DEFINED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 972 IN MAIN.asm
CREATEFUNC2A:       074F DEFINED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 989 IN MAIN.asm
CREATEFUNC3:        075E DEFINED AT LINE 1014 IN MAIN.asm
                    > USED AT LINE 1024 IN MAIN.asm
CREATEFUNC4:        0769 DEFINED AT LINE 1025 IN MAIN.asm
CREATEFUNC5:        076A DEFINED AT LINE 1027 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
COMMA:              0786 DEFINED AT LINE 1050 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
DISCARD:            0786 DEFINED AT LINE 1051 IN MAIN.asm
DISCARD1:           0793 DEFINED AT LINE 1060 IN MAIN.asm
                    > USED AT LINE 1058 IN MAIN.asm
DIV:                0795 DEFINED AT LINE 1063 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
DECIMAL:            07A6 DEFINED AT LINE 1074 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
DECIMAL1:           07A9 DEFINED AT LINE 1076 IN MAIN.asm
                    > USED AT LINE 1081 IN MAIN.asm
HEXADECIMAL:        07AE DEFINED AT LINE 1079 IN MAIN.asm
                    > USED AT LINE 785 IN MAIN.asm
DOT:                07B4 DEFINED AT LINE 1083 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
BUFFERARRAY:        07C6 DEFINED AT LINE 32
                    > USED AT LINE 1086 IN MAIN.asm
BUFFERARRAYM_1611S1096: 07D4 DEFINED AT LINE 39
                    > USED AT LINE 35
BUFFERNUMBER:       080F DEFINED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 1094 IN MAIN.asm
                    > USED AT LINE 1374 IN MAIN.asm
BUFFERDEC:          0816 DEFINED AT LINE 1108 IN MAIN.asm
BUFFERDEC0:         0830 DEFINED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 1112 IN MAIN.asm
BUFFERDEC1:         0840 DEFINED AT LINE 1139 IN MAIN.asm
                    > USED AT LINE 1127 IN MAIN.asm
BUFFERDEC2:         0860 DEFINED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 1142 IN MAIN.asm
                    > USED AT LINE 1144 IN MAIN.asm
                    > USED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 1148 IN MAIN.asm
                    > USED AT LINE 1151 IN MAIN.asm
BUFFERDEC3:         0862 DEFINED AT LINE 1155 IN MAIN.asm
                    > USED AT LINE 1158 IN MAIN.asm
BUFFERDEC4:         0872 DEFINED AT LINE 1167 IN MAIN.asm
                    > USED AT LINE 1162 IN MAIN.asm
BUFFERDEC5:         0873 DEFINED AT LINE 1169 IN MAIN.asm
                    > USED AT LINE 1166 IN MAIN.asm
BUFFERHEX:          087C DEFINED AT LINE 1180 IN MAIN.asm
                    > USED AT LINE 1104 IN MAIN.asm
BUFFERHEX1:         089D DEFINED AT LINE 1198 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 1190 IN MAIN.asm
BUFFERHEX2:         08A6 DEFINED AT LINE 1206 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
BUFFERSTRING:       08B4 DEFINED AT LINE 1219 IN MAIN.asm
                    > USED AT LINE 1090 IN MAIN.asm
BUFFERSTRING0:      08BB DEFINED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 1231 IN MAIN.asm
BUFFERSTRING1:      08C1 DEFINED AT LINE 1228 IN MAIN.asm
                    > USED AT LINE 1222 IN MAIN.asm
BUFFERCHAR:         08CE DEFINED AT LINE 1238 IN MAIN.asm
                    > USED AT LINE 1088 IN MAIN.asm
BUFFERXCHARS:       08D3 DEFINED AT LINE 1244 IN MAIN.asm
                    > USED AT LINE 1092 IN MAIN.asm
BUFFERXCHARS0:      08D4 DEFINED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 1240 IN MAIN.asm
BUFFERXCHARS1:      08DD DEFINED AT LINE 1252 IN MAIN.asm
                    > USED AT LINE 1262 IN MAIN.asm
BUFFERXCHARS2:      08E5 DEFINED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 1251 IN MAIN.asm
DIVIDE:             08EF DEFINED AT LINE 1269 IN MAIN.asm
                    > USED AT LINE 1068 IN MAIN.asm
DIVIDE1:            08F4 DEFINED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 1284 IN MAIN.asm
DIVIDE2:            0901 DEFINED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 1277 IN MAIN.asm
DIVIDE3:            0902 DEFINED AT LINE 1282 IN MAIN.asm
                    > USED AT LINE 1279 IN MAIN.asm
EQUALS:             0908 DEFINED AT LINE 1290 IN MAIN.asm
                    > USED AT LINE 251 IN MAIN.asm
NOTEQUALS:          0910 DEFINED AT LINE 1296 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
LESSTHANEQ:         0919 DEFINED AT LINE 1304 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
LESSTHAN:           091E DEFINED AT LINE 1311 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
LESSTHAN1:          0923 DEFINED AT LINE 1316 IN MAIN.asm
                    > USED AT LINE 1307 IN MAIN.asm
TRUE1:              0926 DEFINED AT LINE 1319 IN MAIN.asm
                    > USED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 1293 IN MAIN.asm
                    > USED AT LINE 1299 IN MAIN.asm
NULL1:              092C DEFINED AT LINE 1323 IN MAIN.asm
FALSE1:             092C DEFINED AT LINE 1324 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 1294 IN MAIN.asm
                    > USED AT LINE 1300 IN MAIN.asm
                    > USED AT LINE 1314 IN MAIN.asm
                    > USED AT LINE 1317 IN MAIN.asm
ERROR1:             0932 DEFINED AT LINE 1329 IN MAIN.asm
                    > USED AT LINE 820 IN MAIN.asm
                    > USED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 859 IN MAIN.asm
                    > USED AT LINE 866 IN MAIN.asm
                    > USED AT LINE 873 IN MAIN.asm
                    > USED AT LINE 884 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
FLUSH:              0939 DEFINED AT LINE 1336 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
FOREACH:            093E DEFINED AT LINE 32
                    > USED AT LINE 834 IN MAIN.asm
FOREACHM_1838S1342: 094C DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            098B DEFINED AT LINE 32
                    > USED AT LINE 838 IN MAIN.asm
FUNCSRCM_1852S1357: 0997 DEFINED AT LINE 39
                    > USED AT LINE 35
FZ:                 09C6 DEFINED AT LINE 1368 IN MAIN.asm
                    > USED AT LINE 848 IN MAIN.asm
PRINTSTACK:         09D3 DEFINED AT LINE 1378 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
CARET:              09D5 DEFINED AT LINE 1412 IN MAIN.asm
                    > USED AT LINE 228 IN MAIN.asm
GO:                 09D5 DEFINED AT LINE 1413 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                09D6 DEFINED AT LINE 1415 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 1590 IN MAIN.asm
                    > USED AT LINE 1592 IN MAIN.asm
GO2:                09DC DEFINED AT LINE 1420 IN MAIN.asm
                    > USED AT LINE 1418 IN MAIN.asm
GOBLOCK:            09E7 DEFINED AT LINE 1428 IN MAIN.asm
                    > USED AT LINE 1423 IN MAIN.asm
GOBLOCK2:           0A0C DEFINED AT LINE 1445 IN MAIN.asm
                    > USED AT LINE 1526 IN MAIN.asm
GOBLOCK3:           0A16 DEFINED AT LINE 1451 IN MAIN.asm
GOFUNC:             0A1A DEFINED AT LINE 1455 IN MAIN.asm
                    > USED AT LINE 1425 IN MAIN.asm
GOFUNC1:            0A33 DEFINED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1484 IN MAIN.asm
GOFUNC2:            0A39 DEFINED AT LINE 1481 IN MAIN.asm
                    > USED AT LINE 1473 IN MAIN.asm
GOFUNC3:            0A44 DEFINED AT LINE 1487 IN MAIN.asm
                    > USED AT LINE 1463 IN MAIN.asm
GOFUNC4:            0A5C DEFINED AT LINE 1504 IN MAIN.asm
                    > USED AT LINE 1501 IN MAIN.asm
GOFUNC5:            0A5F DEFINED AT LINE 1507 IN MAIN.asm
                    > USED AT LINE 1513 IN MAIN.asm
GOFUNC6:            0A62 DEFINED AT LINE 1511 IN MAIN.asm
                    > USED AT LINE 1506 IN MAIN.asm
GOFUNC7:            0A65 DEFINED AT LINE 1514 IN MAIN.asm
GOFUNC8:            0A69 DEFINED AT LINE 1519 IN MAIN.asm
                    > USED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 1503 IN MAIN.asm
DOLLAR:             0A74 DEFINED AT LINE 1528 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
HEXNUM:             0A74 DEFINED AT LINE 1529 IN MAIN.asm
HEXNUM1:            0A77 DEFINED AT LINE 1531 IN MAIN.asm
                    > USED AT LINE 1548 IN MAIN.asm
HEXNUM2:            0A7F DEFINED AT LINE 1537 IN MAIN.asm
                    > USED AT LINE 1535 IN MAIN.asm
UPCASE:             0A91 DEFINED AT LINE 1550 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
LOWCASE:            0A96 DEFINED AT LINE 1554 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
IDENT1:             0A9B DEFINED AT LINE 1558 IN MAIN.asm
                    > USED AT LINE 1553 IN MAIN.asm
QUESTION:           0AA8 DEFINED AT LINE 1571 IN MAIN.asm
                    > USED AT LINE 206 IN MAIN.asm
IF:                 0AA8 DEFINED AT LINE 1572 IN MAIN.asm
IFTE:               0AB4 DEFINED AT LINE 1582 IN MAIN.asm
                    > USED AT LINE 1576 IN MAIN.asm
IFTE1:              0AB5 DEFINED AT LINE 1584 IN MAIN.asm
                    > USED AT LINE 1579 IN MAIN.asm
INPUT:              0AC1 DEFINED AT LINE 1596 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
KEY:                0ACC DEFINED AT LINE 1606 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
LITERAL:            0AD5 DEFINED AT LINE 1618 IN MAIN.asm
                    > USED AT LINE 864 IN MAIN.asm
OUTPUT:             0ADE DEFINED AT LINE 1630 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
MAP:                0AE7 DEFINED AT LINE 32
                    > USED AT LINE 871 IN MAIN.asm
MAPM_2122S1641:     0AF4 DEFINED AT LINE 39
                    > USED AT LINE 35
STAR:               0B2B DEFINED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 208 IN MAIN.asm
MUL:                0B2B DEFINED AT LINE 1655 IN MAIN.asm
MUL2:               0B2D DEFINED AT LINE 1658 IN MAIN.asm
MUL3:               0B35 DEFINED AT LINE 1663 IN MAIN.asm
                    > USED AT LINE 1672 IN MAIN.asm
NUM:                0B47 DEFINED AT LINE 1676 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
NUM0:               0B50 DEFINED AT LINE 1682 IN MAIN.asm
                    > USED AT LINE 1680 IN MAIN.asm
NUM1:               0B51 DEFINED AT LINE 1684 IN MAIN.asm
                    > USED AT LINE 1701 IN MAIN.asm
NUM2:               0B69 DEFINED AT LINE 1702 IN MAIN.asm
                    > USED AT LINE 1539 IN MAIN.asm
                    > USED AT LINE 1541 IN MAIN.asm
                    > USED AT LINE 1687 IN MAIN.asm
                    > USED AT LINE 1689 IN MAIN.asm
NUM3:               0B74 DEFINED AT LINE 1710 IN MAIN.asm
                    > USED AT LINE 1705 IN MAIN.asm
RANGESRC:           0B77 DEFINED AT LINE 32
                    > USED AT LINE 893 IN MAIN.asm
RANGESRCM_2194S1716: 0B86 DEFINED AT LINE 39
                    > USED AT LINE 35
RPAREN:             0BF9 DEFINED AT LINE 1734 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
SHIFTLEFT:          0C01 DEFINED AT LINE 1741 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
SHIFTLEFT1:         0C09 DEFINED AT LINE 1748 IN MAIN.asm
                    > USED AT LINE 1751 IN MAIN.asm
SHIFTLEFT2:         0C0A DEFINED AT LINE 1750 IN MAIN.asm
                    > USED AT LINE 1747 IN MAIN.asm
SHIFTRIGHT:         0C11 DEFINED AT LINE 1758 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
SHIFTRIGHT1:        0C19 DEFINED AT LINE 1765 IN MAIN.asm
                    > USED AT LINE 1769 IN MAIN.asm
SHIFTRIGHT2:        0C1D DEFINED AT LINE 1768 IN MAIN.asm
                    > USED AT LINE 1764 IN MAIN.asm
DQUOTE:             0C24 DEFINED AT LINE 1777 IN MAIN.asm
                    > USED AT LINE 232 IN MAIN.asm
STRING:             0C24 DEFINED AT LINE 1778 IN MAIN.asm
STRING1:            0C2D DEFINED AT LINE 1785 IN MAIN.asm
                    > USED AT LINE 1794 IN MAIN.asm
STRING2:            0C30 DEFINED AT LINE 1789 IN MAIN.asm
                    > USED AT LINE 1784 IN MAIN.asm
STRING3:            0C39 DEFINED AT LINE 1795 IN MAIN.asm
                    > USED AT LINE 1792 IN MAIN.asm
MINUS:              0C4C DEFINED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
SUB:                0C58 DEFINED AT LINE 1820 IN MAIN.asm
                    > USED AT LINE 1817 IN MAIN.asm
SUB1:               0C62 DEFINED AT LINE 1827 IN MAIN.asm
                    > USED AT LINE 1823 IN MAIN.asm
PRINTBUFFER:        0C6B DEFINED AT LINE 32
                    > USED AT LINE 878 IN MAIN.asm
PRINTBUFFERM_2310S1839: 0C77 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTCHARS:         0C91 DEFINED AT LINE 1844 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
PRINTCHARS1:        0C98 DEFINED AT LINE 1850 IN MAIN.asm
                    > USED AT LINE 1859 IN MAIN.asm
PRINTCHARS2:        0C9E DEFINED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 1847 IN MAIN.asm
                    > USED AT LINE 1936 IN MAIN.asm
RECUR:              0CA3 DEFINED AT LINE 1861 IN MAIN.asm
                    > USED AT LINE 889 IN MAIN.asm
REMAIN:             0CA9 DEFINED AT LINE 1866 IN MAIN.asm
                    > USED AT LINE 891 IN MAIN.asm
SIZE:               0CAF DEFINED AT LINE 1871 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
CONSTBUFSTART:      0CB7 DEFINED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
CONSTHEAPSTART:     0CBC DEFINED AT LINE 1884 IN MAIN.asm
CONSTTIBSTART:      0CC1 DEFINED AT LINE 1888 IN MAIN.asm
                    > USED AT LINE 908 IN MAIN.asm
VARBUFPTR:          0CC6 DEFINED AT LINE 1892 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
VARHEAPPTR:         0CCF DEFINED AT LINE 1897 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
VARTIBPTR:          0CD8 DEFINED AT LINE 1902 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
VARIABLE:           0CE1 DEFINED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 314 IN MAIN.asm
                    > USED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 1900 IN MAIN.asm
                    > USED AT LINE 1905 IN MAIN.asm
CONSTANT:           0CE4 DEFINED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 1882 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
                    > USED AT LINE 1890 IN MAIN.asm
FILTER:             0CE7 DEFINED AT LINE 1918 IN MAIN.asm
FLUSHBUFFER:        0CE9 DEFINED AT LINE 1927 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 1174 IN MAIN.asm
                    > USED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1337 IN MAIN.asm
                    > USED AT LINE 2104 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
JUMPTABLE:          0D00 DEFINED AT LINE 1946 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
                    > USED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
                    > USED AT LINE 869 IN MAIN.asm
                    > USED AT LINE 876 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
                    > USED AT LINE 1084 IN MAIN.asm
JUMPTABLE0:         0D02 DEFINED AT LINE 1949 IN MAIN.asm
                    > USED AT LINE 1959 IN MAIN.asm
JUMPTABLE1:         0D0F DEFINED AT LINE 1960 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
JUMPTABLE2:         0D10 DEFINED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 1955 IN MAIN.asm
PRTSTR0:            0D16 DEFINED AT LINE 1970 IN MAIN.asm
                    > USED AT LINE 1976 IN MAIN.asm
PRTSTR:             0D1A DEFINED AT LINE 1973 IN MAIN.asm
                    > USED AT LINE 2040 IN MAIN.asm
                    > USED AT LINE 2100 IN MAIN.asm
NESTING:            0D1F DEFINED AT LINE 1989 IN MAIN.asm
                    > USED AT LINE 2126 IN MAIN.asm
                    > USED AT LINE 2184 IN MAIN.asm
NESTING0:           0D29 DEFINED AT LINE 1995 IN MAIN.asm
                    > USED AT LINE 1991 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
NESTING1A:          0D30 DEFINED AT LINE 2000 IN MAIN.asm
                    > USED AT LINE 1997 IN MAIN.asm
NESTING1:           0D33 DEFINED AT LINE 2003 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
NESTING2:           0D42 DEFINED AT LINE 2012 IN MAIN.asm
                    > USED AT LINE 2007 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
NESTING3:           0D44 DEFINED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
NESTING4:           0D4F DEFINED AT LINE 2022 IN MAIN.asm
                    > USED AT LINE 2017 IN MAIN.asm
                    > USED AT LINE 2019 IN MAIN.asm
PROMPT:             0D51 DEFINED AT LINE 2026 IN MAIN.asm
                    > USED AT LINE 2105 IN MAIN.asm
CRLF:               0D5A DEFINED AT LINE 2031 IN MAIN.asm
                    > USED AT LINE 2197 IN MAIN.asm
PRINTSTR:           0D61 DEFINED AT LINE 2038 IN MAIN.asm
                    > USED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 2032 IN MAIN.asm
                    > USED AT LINE 2251 IN MAIN.asm
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 159
TITLESTR:           0D68 DEFINED AT LINE 2045 IN MAIN.asm
                    > USED AT LINE 2049 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
INIT:               0D7C DEFINED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2097 IN MAIN.asm
INIT1:              0D84 DEFINED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2058 IN MAIN.asm
WARMINIT:           0D8C DEFINED AT LINE 2060 IN MAIN.asm
COLDBOOT0:          0D9F DEFINED AT LINE 2067 IN MAIN.asm
                    > USED AT LINE 2055 IN MAIN.asm
                    > USED AT LINE 2093 IN MAIN.asm
COLDINIT:           0DA9 DEFINED AT LINE 2073 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0DBA DEFINED AT LINE 2082 IN MAIN.asm
                    > USED AT LINE 2085 IN MAIN.asm
COLDSTART:          0DC7 DEFINED AT LINE 2091 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
START:              0DD0 DEFINED AT LINE 2095 IN MAIN.asm
START1:             0DD6 DEFINED AT LINE 2098 IN MAIN.asm
                    > USED AT LINE 2065 IN MAIN.asm
                    > USED AT LINE 2094 IN MAIN.asm
INTERPRET:          0DDC DEFINED AT LINE 2102 IN MAIN.asm
                    > USED AT LINE 2230 IN MAIN.asm
                    > USED AT LINE 2244 IN MAIN.asm
                    > USED AT LINE 2259 IN MAIN.asm
                    > USED AT LINE 2262 IN MAIN.asm
                    > USED AT LINE 2267 IN MAIN.asm
INTERPRET2:         0DEB DEFINED AT LINE 2111 IN MAIN.asm
                    > USED AT LINE 2175 IN MAIN.asm
                    > USED AT LINE 2249 IN MAIN.asm
                    > USED AT LINE 2253 IN MAIN.asm
INTERPRET3:         0DF3 DEFINED AT LINE 2119 IN MAIN.asm
                    > USED AT LINE 2132 IN MAIN.asm
INTERPRET4:         0DFE DEFINED AT LINE 2128 IN MAIN.asm
                    > USED AT LINE 2117 IN MAIN.asm
INTERPRET5:         0E03 DEFINED AT LINE 2135 IN MAIN.asm
                    > USED AT LINE 2185 IN MAIN.asm
                    > USED AT LINE 2200 IN MAIN.asm
INTERPRET5A:        0E26 DEFINED AT LINE 2172 IN MAIN.asm
INTERPRET6:         0E28 DEFINED AT LINE 2177 IN MAIN.asm
                    > USED AT LINE 2139 IN MAIN.asm
INTERPRET7:         0E36 DEFINED AT LINE 2187 IN MAIN.asm
                    > USED AT LINE 2144 IN MAIN.asm
INTERPRET8:         0E49 DEFINED AT LINE 2202 IN MAIN.asm
                    > USED AT LINE 2142 IN MAIN.asm
NEXT:               0E64 DEFINED AT LINE 2215 IN MAIN.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 2219 IN MAIN.asm
NEXT1:              0E75 DEFINED AT LINE 2227 IN MAIN.asm
                    > USED AT LINE 2220 IN MAIN.asm
EXIT:               0E7C DEFINED AT LINE 2232 IN MAIN.asm
                    > USED AT LINE 2229 IN MAIN.asm
RUN:                0E80 DEFINED AT LINE 2236 IN MAIN.asm
                    > USED AT LINE 2242 IN MAIN.asm
                    > USED AT LINE 2257 IN MAIN.asm
                    > USED AT LINE 2265 IN MAIN.asm
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
ERROR:              0E84 DEFINED AT LINE 2241 IN MAIN.asm
                    > USED AT LINE 1332 IN MAIN.asm
BACKSPACE_:         0E97 DEFINED AT LINE 2246 IN MAIN.asm
                    > USED AT LINE 2149 IN MAIN.asm
EDIT_:              0EA7 DEFINED AT LINE 2256 IN MAIN.asm
                    > USED AT LINE 2147 IN MAIN.asm
REEDIT_:            0EBF DEFINED AT LINE 2261 IN MAIN.asm
                    > USED AT LINE 2151 IN MAIN.asm
PRINTSTACK_:        0EC2 DEFINED AT LINE 2264 IN MAIN.asm
                    > USED AT LINE 2153 IN MAIN.asm
F1:                 0ECC DEFINED AT LINE 32
                    > USED AT LINE 840 IN MAIN.asm
F1M_2825S12:        0ED8 DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 0ED9 DEFINED AT LINE 32
                    > USED AT LINE 842 IN MAIN.asm
F2M_2827S15:        0EE4 DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 0EE5 DEFINED AT LINE 32
                    > USED AT LINE 844 IN MAIN.asm
F3M_2829S18:        0EF0 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 0EF1 DEFINED AT LINE 32
                    > USED AT LINE 846 IN MAIN.asm
F4M_2831S21:        0EFC DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         0F00 DEFINED AT LINE 25
                    > USED AT LINE 8
EXPECTM_2837S29:    0FCA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2842S37:    104B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2843S38:    10C2 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2844S39:    1137 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2845S40:    11AC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2846S41:    1221 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2847S42:    1296 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2848S43:    130D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2849S44:    1386 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2850S45:    13FD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2851S46:    1474 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2852S47:    14ED DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2853S48:    1568 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2854S49:    15E1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2855S50:    165A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2856S51:    16D9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2857S52:    1758 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2858S53:    17D5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2859S54:    1856 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2860S55:    18DB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2861S56:    195E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2862S57:    19DB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2863S58:    1A60 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2864S59:    1AE1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2865S60:    1B5E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2866S61:    1BDB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2867S62:    1C60 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2868S63:    1CDD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2869S64:    1D5A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2870S65:    1DD9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2871S66:    1E68 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2872S67:    1EE5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2873S68:    1F6A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2874S69:    1FE7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2875S70:    2072 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2876S71:    20FD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2877S72:    2188 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2878S73:    2213 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2879S74:    2298 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2880S75:    2315 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2881S76:    2394 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2882S77:    2413 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2883S78:    2490 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2884S79:    250D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2885S80:    258A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2886S81:    2607 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2887S82:    2684 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2888S83:    2701 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2889S84:    277E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2890S85:    27FB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2891S86:    287A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2892S87:    28F9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2893S88:    2978 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2894S89:    29F9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2895S90:    2A7A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2896S91:    2AF5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2897S92:    2B70 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2898S93:    2BF1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2899S94:    2C78 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2900S95:    2CFF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2901S96:    2D8A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2902S97:    2E1F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2903S98:    2EB4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2904S99:    2F2F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2905S100:   2FAC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2906S101:   302B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2907S102:   30AC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2908S103:   312B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2909S104:   31AA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2910S105:   322B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2911S106:   32B2 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2912S107:   333D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2913S108:   33C4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2914S109:   3455 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2915S110:   34E8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2916S111:   3581 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2917S112:   361E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2918S113:   36AD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2919S114:   3742 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2920S115:   37D9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2921S116:   3872 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2922S117:   3909 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2923S118:   39AE DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2924S119:   3A41 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2925S120:   3AE2 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2926S121:   3B85 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2927S122:   3C2A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2928S123:   3CD9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2929S124:   3D88 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2930S125:   3E15 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2931S126:   3EA8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2932S127:   3F35 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2933S128:   3FCE DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2934S129:   4067 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2935S130:   4112 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2936S131:   41C5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2937S132:   4278 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2938S133:   4319 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2939S134:   43C0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2940S135:   447D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2941S136:   4548 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2942S137:   45E3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2943S138:   467E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2944S139:   4707 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2945S140:   4790 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2946S141:   4819 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2947S142:   48A2 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2948S143:   4923 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2949S144:   49A4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2950S145:   4A25 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2951S146:   4AA6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2952S147:   4B31 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2953S148:   4BC0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2954S149:   4C4D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2955S150:   4CDA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2956S151:   4D77 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2957S152:   4E1A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2958S153:   4ED5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2959S154:   4F90 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2960S155:   5065 DEFINED AT LINE 40
                    > USED AT LINE 17
EXECSTR:            5070 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              5200 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1369 IN MAIN.asm
                    > USED AT LINE 1430 IN MAIN.asm
                    > USED AT LINE 2088 IN MAIN.asm
                    > USED AT LINE 2092 IN MAIN.asm
                    > USED AT LINE 2096 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                5200 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 1889 IN MAIN.asm
                    > USED AT LINE 2108 IN MAIN.asm
                    > USED AT LINE 2116 IN MAIN.asm
                    > USED AT LINE 2179 IN MAIN.asm
                    > USED AT LINE 2189 IN MAIN.asm
                    > USED AT LINE 2204 IN MAIN.asm
                    > USED AT LINE 2207 IN MAIN.asm
BUF:                5300 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 1932 IN MAIN.asm
VARS:               5400 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 2079 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
RESTARTS:           54D0 DEFINED AT LINE 18 IN ram.asm
RST08:              54D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              54D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              54D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              54D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              54D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              54DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               54DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             54DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             54E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            54E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            54E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            54E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2075 IN MAIN.asm
VDATAWIDTH:         54E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 441 IN MAIN.asm
                    > USED AT LINE 478 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 915 IN MAIN.asm
VNUMBASE:           54E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1077 IN MAIN.asm
                    > USED AT LINE 1102 IN MAIN.asm
VTIBPTR:            54EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1903 IN MAIN.asm
                    > USED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 2109 IN MAIN.asm
                    > USED AT LINE 2206 IN MAIN.asm
VBUFPTR:            54EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 1221 IN MAIN.asm
                    > USED AT LINE 1232 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
                    > USED AT LINE 1263 IN MAIN.asm
                    > USED AT LINE 1893 IN MAIN.asm
                    > USED AT LINE 1894 IN MAIN.asm
                    > USED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 1933 IN MAIN.asm
VNEXT:              54EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2087 IN MAIN.asm
VHEAPPTR:           54F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 430 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 468 IN MAIN.asm
                    > USED AT LINE 503 IN MAIN.asm
                    > USED AT LINE 538 IN MAIN.asm
                    > USED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 942 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
                    > USED AT LINE 978 IN MAIN.asm
                    > USED AT LINE 1044 IN MAIN.asm
                    > USED AT LINE 1779 IN MAIN.asm
                    > USED AT LINE 1799 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
VRECUR:             54F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 721 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 1863 IN MAIN.asm
VPOINTER:           54F4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 312 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
                    > USED AT LINE 396 IN MAIN.asm
                    > USED AT LINE 485 IN MAIN.asm
                    > USED AT LINE 553 IN MAIN.asm
                    > USED AT LINE 1562 IN MAIN.asm
                    > USED AT LINE 1908 IN MAIN.asm
VREMAIN:            54F6 DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1867 IN MAIN.asm
VSAVEDIP:           54F8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 2209 IN MAIN.asm
VSAVEDSP:           54FA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 2062 IN MAIN.asm
                    > USED AT LINE 2210 IN MAIN.asm
VSAVEDNEXT:         54FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2063 IN MAIN.asm
                    > USED AT LINE 2211 IN MAIN.asm
VSAVEDBP:           54FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2064 IN MAIN.asm
                    > USED AT LINE 2212 IN MAIN.asm
VTEMP1:             5500 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 423 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
                    > USED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 720 IN MAIN.asm
                    > USED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 1045 IN MAIN.asm
                    > USED AT LINE 1429 IN MAIN.asm
                    > USED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 1464 IN MAIN.asm
                    > USED AT LINE 1485 IN MAIN.asm
                    > USED AT LINE 1492 IN MAIN.asm
                    > USED AT LINE 1498 IN MAIN.asm
VTEMP2:             5502 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 679 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
                    > USED AT LINE 1035 IN MAIN.asm
                    > USED AT LINE 1465 IN MAIN.asm
                    > USED AT LINE 1486 IN MAIN.asm
VLASTDEF:           5504 DEFINED AT LINE 58 IN ram.asm
TBPTR:              5506 DEFINED AT LINE 59 IN ram.asm
TITLEBUF:           5508 DEFINED AT LINE 61 IN ram.asm
                    > USED AT LINE 2050 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
                    > USED AT LINE 2099 IN MAIN.asm
HEAP:               551C DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
                    > USED AT LINE 1885 IN MAIN.asm
