0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 call flushBuffer
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call flushBuffer
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 55               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 55               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 55               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 55               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 55               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 55               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 55               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 55               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 55               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 55               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 53               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 55               LD   (RST08),HL   
0094   22 D2 55               LD   (RST10),HL   
0097   22 D4 55               LD   (RST18),HL   
009A   22 D6 55               LD   (RST20),HL   
009D   22 D8 55               LD   (RST28),HL   
00A0   22 DA 55               LD   (RST30),HL   
00A3   22 DE 55               LD   (INTVEC),HL   
00A6   22 E0 55               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 55               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 55               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 10               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                             ; z80_RST8    equ     $CF
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 53                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 54                  DW   BUF   ; vBUFPtr pointer into BUF
0188   FB 0D                  DW   next   ; nNext
018A   1C 56                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C   00 00                  DW   0   ; vRecur
018E   00 00                  DW   0   ; unused
0190                          ALIGN   $100   
0200                OPCODES:      ; still available ` ~ _ \
0200   87                     DB   lsb(nop_)   ; SP
0201   33                     DB   lsb(bang_)   ; !
0202   53                     DB   lsb(dquote_)   ; "
0203   47                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1B                     DB   lsb(tick_)   ; '
0208   15                     DB   lsb(lparen_)   ; (
0209   89                     DB   lsb(rparen_)   ; )
020A   30                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   50                     DB   lsb(comma_)   ; ,
020D   56                     DB   lsb(minus_)   ; -
020E   21                     DB   lsb(dot_)   ; .
020F   84                     DB   lsb(slash_)   ; /	
0210   44                     DB   lsb(num_)   ; 0
0211   44                     DB   lsb(num_)   ; 1
0212   44                     DB   lsb(num_)   ; 2
0213   44                     DB   lsb(num_)   ; 3
0214   44                     DB   lsb(num_)   ; 4
0215   44                     DB   lsb(num_)   ; 5
0216   44                     DB   lsb(num_)   ; 6
0217   44                     DB   lsb(num_)   ; 7
0218   44                     DB   lsb(num_)   ; 8
0219   44                     DB   lsb(num_)   ; 9
021A   24                     DB   lsb(colon_)   ; :
021B   1E                     DB   lsb(semicolon_)   ; ;
021C   72                     DB   lsb(lt_)   ; <
021D   59                     DB   lsb(eq_)   ; =
021E   67                     DB   lsb(gt_)   ; >
021F   2D                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   27                     DB   lsb(upcase_)   ; A
0222   27                     DB   lsb(upcase_)   ; B
0223   27                     DB   lsb(upcase_)   ; C
0224   27                     DB   lsb(upcase_)   ; D
0225   27                     DB   lsb(upcase_)   ; E
0226   27                     DB   lsb(upcase_)   ; F
0227   27                     DB   lsb(upcase_)   ; G
0228   27                     DB   lsb(upcase_)   ; h
0229   27                     DB   lsb(upcase_)   ; I
022A   27                     DB   lsb(upcase_)   ; J
022B   27                     DB   lsb(upcase_)   ; K
022C   27                     DB   lsb(upcase_)   ; L
022D   27                     DB   lsb(upcase_)   ; M
022E   27                     DB   lsb(upcase_)   ; N
022F   27                     DB   lsb(upcase_)   ; O
0230   27                     DB   lsb(upcase_)   ; p
0231   27                     DB   lsb(upcase_)   ; Q
0232   27                     DB   lsb(upcase_)   ; R
0233   27                     DB   lsb(upcase_)   ; S
0234   27                     DB   lsb(upcase_)   ; T
0235   27                     DB   lsb(upcase_)   ; U
0236   27                     DB   lsb(upcase_)   ; V
0237   27                     DB   lsb(upcase_)   ; W
0238   27                     DB   lsb(upcase_)   ; X
0239   27                     DB   lsb(upcase_)   ; Y
023A   27                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   87                     DB   lsb(nop_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   4D                     DB   lsb(caret_)   ; ^
023F   87                     DB   lsb(nop_)   ; _
0240   53                     DB   lsb(dquote_)   ; `     used for testing string   	
0241   2A                     DB   lsb(lowcase_)   ; a
0242   2A                     DB   lsb(lowcase_)   ; b
0243   2A                     DB   lsb(lowcase_)   ; c
0244   2A                     DB   lsb(lowcase_)   ; d
0245   2A                     DB   lsb(lowcase_)   ; e
0246   2A                     DB   lsb(lowcase_)   ; f
0247   2A                     DB   lsb(lowcase_)   ; g
0248   2A                     DB   lsb(lowcase_)   ; h
0249   2A                     DB   lsb(lowcase_)   ; i
024A   2A                     DB   lsb(lowcase_)   ; j
024B   2A                     DB   lsb(lowcase_)   ; k
024C   2A                     DB   lsb(lowcase_)   ; l
024D   2A                     DB   lsb(lowcase_)   ; m
024E   2A                     DB   lsb(lowcase_)   ; n
024F   2A                     DB   lsb(lowcase_)   ; o
0250   2A                     DB   lsb(lowcase_)   ; p
0251   2A                     DB   lsb(lowcase_)   ; q
0252   2A                     DB   lsb(lowcase_)   ; r
0253   2A                     DB   lsb(lowcase_)   ; s
0254   2A                     DB   lsb(lowcase_)   ; t
0255   2A                     DB   lsb(lowcase_)   ; u
0256   2A                     DB   lsb(lowcase_)   ; v
0257   2A                     DB   lsb(lowcase_)   ; w
0258   2A                     DB   lsb(lowcase_)   ; x
0259   2A                     DB   lsb(lowcase_)   ; y
025A   2A                     DB   lsb(lowcase_)   ; z
025B   15                     DB   lsb(lbrace_)   ; {
025C   4A                     DB   lsb(pipe_)   ; |
025D   18                     DB   lsb(rbrace_)   ; }
025E   87                     DB   lsb(nop_)   ; ~
025F   87                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 8C 03               JP   plus   
0303                AT_:         
0303   C3 A9 03               JP   at   
0306                AMPER_:      
0306   C3 B3 03               JP   amper   
0309                DOLLAR_:      
0309   C3 7E 0A               JP   dollar   
030C                LBRACK_:      
030C   C3 15 04               JP   lbrack   
030F                RBRACK_:      
030F   C3 31 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 E0 03               JP   percent   
0315                LPAREN_:      
0315                LBRACE_:      
0315   C3 0E 05               JP   lbrace   
0318                RBRACE_:      
0318   C3 77 05               JP   rbrace   
031B                TICK_:       
031B   C3 FE 05               JP   tick   
031E                SEMICOLON_:      
031E   C3 E7 06               JP   semicolon   
0321                DOT_:        
0321   C3 B1 07               JP   dot   
0324                COLON_:      
0324   C3 99 04               JP   colon   
0327                UPCASE_:      
0327   C3 9B 0A               JP   upcase   
032A                LOWCASE_:      
032A   C3 A0 0A               JP   lowcase   
032D                QUESTION_:      
032D   C3 B2 0A               JP   question   
0330                STAR_:       
0330   C3 38 0B               JP   star   
0333                BANG_:       ; logical invert, any non zero value
0333   03                     INC   bc   
0334   0A                     LD   a,(bc)   
0335   FE 3D                  CP   "="   
0337   20 05                  JR   nz,not   
0339   E1                     POP   hl   
033A   D1                     POP   de   
033B   C3 0D 09               JP   notequals   
033E                NOT:         
033E   0B                     DEC   bc   
033F   21 00 00               LD   hl,0   ; is considered true
0342   18 1F                  JR   eq1   
0344                NUM_:        
0344   C3 54 0B               JP   num   
0347                HASH_:       
0347   C3 81 04               JP   hash   
034A                PIPE_:       
034A   C3 BE 03               JP   pipe   
034D                CARET_:      
034D   C3 DF 09               JP   caret   
0350                COMMA_:      
0350   C3 83 07               JP   comma   
0353                DQUOTE_:      
0353   C3 B9 0B               JP   dquote   
0356                MINUS_:      
0356   C3 E1 0B               JP   minus   
0359                EQ_:         
0359   CD 97 0C               CALL   jumpTable   
035C   3D                     DB   "="   
035D   62 03                  DW   eq0   
035F   00                     DB   NUL   
0360   CF 04                  DW   assign   
0362                             ; inc bc
0362                             ; ld a,(bc)                   ; is it == ?
0362                             ; cp "="
0362                             ; jr z,eq0                    ; no its equality
0362                             ; dec bc
0362                             ; jp assign                   ; no its assignment
0362                EQ0:         
0362   E1                     POP   hl   
0363                EQ1:         
0363   D1                     POP   de   
0364   C3 05 09               JP   equals   
0367                GT_:         
0367   03                     INC   bc   
0368   0A                     LD   a,(bc)   
0369   FE 3E                  CP   ">"   
036B   CA A6 0B               JP   z,shiftRight   
036E   D1                     POP   de   
036F   E1                     POP   hl   
0370   18 09                  JR   lt1   
0372                LT_:         
0372   03                     INC   bc   
0373   0A                     LD   a,(bc)   
0374   FE 3C                  CP   "<"   
0376   CA 96 0B               JP   z,shiftLeft   
0379   E1                     POP   hl   
037A   D1                     POP   de   
037B                LT1:         
037B   FE 3D                  CP   "="   
037D   CA 16 09               JP   z,lessthaneq   
0380   0B                     DEC   bc   
0381   C3 1B 09               JP   lessthan   
0384                SLASH_:      
0384   C3 13 06               JP   slash   
0387                NOP_:        
0387   DD E9                  JP   (ix)   
0389                RPAREN_:      
0389   C3 8E 0B               JP   rparen   
038C                             ;*******************************************************************
038C                             ; implementations
038C                             ;*******************************************************************
038C                PLUS:        
038C                ADD:         
038C   03                     INC   bc   
038D   0A                     LD   a,(bc)   
038E   FE 2B                  CP   "+"   ; ++ increment variable
0390   20 05                  JR   nz,add1   
0392   E1                     POP   hl   
0393   23                     INC   hl   
0394   C3 D1 04               JP   assign0   
0397                ADD1:        
0397   0B                     DEC   bc   
0398   D1                     POP   de   ; second term
0399   E1                     POP   hl   ; first term
039A   19                     ADD   hl,de   
039B                ADD3:        
039B   03                     INC   bc   
039C   0A                     LD   a,(bc)   
039D   FE 3D                  CP   "="   
039F   CA A6 03               JP   z,add4   
03A2   0B                     DEC   bc   
03A3   E5                     PUSH   hl   
03A4   DD E9                  JP   (ix)   
03A6                ADD4:        
03A6   C3 D1 04               JP   assign0   
03A9                             ; @ addr
03A9                             ; -- ptr
03A9                AT:          
03A9                ADDR:        
03A9   ED 5B F4 55            LD   de,(vPointer)   
03AD   21 F4 55               LD   hl,vPointer   
03B0   C3 78 0C               JP   variable   
03B3                AMPER:       
03B3                AND:         
03B3   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B4   E1                     POP   hl   
03B5   7B                     LD   a,e   
03B6   A5                     AND   l   
03B7   6F                     LD   l,a   
03B8   7A                     LD   a,d   
03B9   A4                     AND   h   
03BA                AND1:        
03BA   67                     LD   h,a   
03BB   E5                     PUSH   hl   
03BC   DD E9                  JP   (ix)   
03BE                PIPE:        
03BE   CD 97 0C               CALL   jumpTable   
03C1   3E                     DB   ">"   
03C2   84 0B                  DW   pipeStream   
03C4   00                     DB   NUL   
03C5   C7 03                  DW   or   
03C7                OR:          
03C7   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03C8   E1                     POP   hl   
03C9   7B                     LD   a,e   
03CA   B5                     OR   l   
03CB   6F                     LD   l,a   
03CC   7A                     LD   a,d   
03CD   B4                     OR   h   
03CE   18 EA                  JR   and1   
03D0                XOR:         
03D0   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03D1                XOR1:        
03D1   E1                     POP   hl   
03D2   7B                     LD   a,e   
03D3   AD                     XOR   l   
03D4   6F                     LD   l,a   
03D5   7A                     LD   a,d   
03D6   AC                     XOR   h   
03D7   67                     LD   h,a   
03D8   E5                     PUSH   hl   
03D9   DD E9                  JP   (ix)   
03DB                INVERT:      ; Bitwise INVert the top member of the stack
03DB   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03DE   18 F1                  JR   xor1   
03E0                             ; %a .. %z
03E0                             ; -- value
03E0                             ; returns value of arg
03E0                PERCENT:      
03E0                ARG:         
03E0   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03E3   FD 56 05               LD   d,(iy+5)   
03E6   EB                     EX   de,hl   
03E7   7D                     LD   a,l   ; arg_list* == null, skip
03E8   B4                     OR   h   
03E9   28 1A                  JR   z,arg0a   
03EB   23                     INC   hl   ; a = num_args, hl = arg_list*
03EC   7E                     LD   a,(hl)   
03ED   23                     INC   hl   
03EE   B7                     OR   a   
03EF   28 14                  JR   z,arg0a   ; num_args == 0, skip
03F1   5F                     LD   e,a   ; e = a = num_args
03F2   03                     INC   bc   ; a = next char = dollar_name
03F3   0A                     LD   a,(bc)   
03F4   C5                     PUSH   bc   ; save IP
03F5   43                     LD   b,e   ; b = e = num_args
03F6   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03F9   FD 56 03               LD   d,(iy+3)   
03FC                ARG0:        
03FC   1B                     DEC   de   ; a = dollar_name, de = next arg*
03FD   1B                     DEC   de   
03FE   BE                     CP   (hl)   
03FF   28 09                  JR   z,arg1   
0401   23                     INC   hl   ; hl = next arg_list*
0402   10 F8                  DJNZ   arg0   
0404   C1                     POP   bc   ; no match, restore IP
0405                ARG0A:       
0405   11 00 00               LD   de,0   ; return 0
0408   18 08                  JR   arg1a   
040A                ARG1:        
040A   C1                     POP   bc   ; restore IP
040B   EB                     EX   de,hl   ; hl = arg*
040C   22 F4 55               LD   (vPointer),hl   ; store arg* in setter
040F   5E                     LD   e,(hl)   
0410   23                     INC   hl   
0411   56                     LD   d,(hl)   ; de = arg
0412                ARG1A:       
0412   D5                     PUSH   de   ; push arg
0413   DD E9                  JP   (ix)   
0415                LBRACK:      
0415                ARRAYSTART:      
0415   11 00 00               LD   de,0   ; create stack frame
0418   D5                     PUSH   de   ; push null for IP
0419   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
041C   FD 56 05               LD   d,(iy+5)   ; 
041F   D5                     PUSH   de   ; 
0420   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0423   FD 56 03               LD   d,(iy+3)   ; 
0426   D5                     PUSH   de   ; 
0427   FD E5                  PUSH   iy   ; push BP
0429   FD 21 00 00            LD   iy,0   ; BP = SP
042D   FD 39                  ADD   iy,sp   
042F   DD E9                  JP   (ix)   
0431                RBRACK:      
0431                ARRAYEND:      
0431   FD 54                  LD   d,iyh   ; de = BP
0433   FD 5D                  LD   e,iyl   
0435   ED 43 00 56            LD   (vTemp1),bc   ; save IP
0439   62 6B                  LD   hl,de   ; hl = de = BP
043B   B7                     OR   a   
043C   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
043E   CB 3C                  SRL   h   ; 
0440   CB 1D                  RR   l   
0442   44 4D                  LD   bc,hl   ; bc = count
0444   2A F0 55               LD   hl,(vHeapPtr)   ; hl = array[-4]
0447   71                     LD   (hl),c   ; write num items in length word
0448   23                     INC   hl   
0449   70                     LD   (hl),b   
044A   23                     INC   hl   ; hl = array[0], bc = count
044B                             ; de = BP, hl = array[0], bc = count
044B   18 15                  JR   arrayEnd3   
044D                ARRAYEND1:      
044D   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0450   77                     LD   (hl),a   ; write lsb of array item
0451   23                     INC   hl   ; move to msb of array item
0452   3A E6 55               LD   a,(vDataWidth)   ; vDataWidth=1?
0455   3D                     DEC   a   
0456   28 05                  JR   z,arrayEnd2   
0458   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
045B   77                     LD   (hl),a   ; write msb of array item
045C   23                     INC   hl   ; move to next word in array
045D                ARRAYEND2:      
045D   FD 2B                  DEC   iy   ; move to next word on stack
045F   FD 2B                  DEC   iy   
0461   0B                     DEC   bc   ; dec items count
0462                ARRAYEND3:      
0462   79                     LD   a,c   ; if not zero loop
0463   B0                     OR   b   
0464   20 E7                  JR   nz,arrayEnd1   
0466   EB                     EX   de,hl   ; de = end of array, hl = BP
0467   F9                     LD   sp,hl   ; sp = BP
0468   E1                     POP   hl   ; de = end of array, hl = old BP
0469   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
046A   FD 62                  LD   iyh,d   
046C   FD 6B                  LD   iyl,e   
046E   D1                     POP   de   ; pop arg_list (discard)
046F   D1                     POP   de   ; pop first_arg* (discard)
0470   D1                     POP   de   ; pop IP (discard)
0471   ED 5B F0 55            LD   de,(vHeapPtr)   ; de = array[-2]
0475   13                     INC   de   
0476   13                     INC   de   
0477   D5                     PUSH   de   ; return array[0]
0478   22 F0 55               LD   (vHeapPtr),hl   ; move heap* to end of array
047B   ED 4B 00 56            LD   bc,(vTemp1)   ; restore IP
047F   DD E9                  JP   (ix)   
0481                             ; index of an array, based on vDataWidth
0481                             ; array num -- value    ; also sets vPointer to address
0481                HASH:        
0481                ARRAYINDEX:      
0481   E1                     POP   hl   ; hl = index
0482   D1                     POP   de   ; de = array
0483   3A E6 55               LD   a,(vDataWidth)   ; a = data width
0486   3D                     DEC   a   
0487   28 01                  JR   z,arrayIndex1   
0489                ARRAYINDEX0:      
0489   29                     ADD   hl,hl   ; if data width = 2 then double
048A                ARRAYINDEX1:      
048A   19                     ADD   hl,de   ; add addr
048B   22 F4 55               LD   (vPointer),hl   ; store address in setter
048E   16 00                  LD   d,0   
0490   5E                     LD   e,(hl)   
0491   B7                     OR   a   ; check data width again
0492   28 02                  JR   z,arrayIndex2   
0494   23                     INC   hl   
0495   56                     LD   d,(hl)   
0496                ARRAYINDEX2:      
0496   D5                     PUSH   de   
0497   DD E9                  JP   (ix)   
0499                             ; arg_list - parses input (ab:c)
0499                             ; names after the : represent uninitialised locals
0499                             ; return values are the state of the stack after the block ends
0499                             ; format: numLocals totNumArgs argChars...
0499                COLON:       
0499                ARGLIST:      
0499   11 00 00               LD   de,0   ; d = count locals, e = count args ()
049C   2A F0 55               LD   hl,(vHeapPtr)   ; hl = heap*
049F   E5                     PUSH   hl   ; save start of arg_list
04A0   23                     INC   hl   ; skip length fields to start of string
04A1   23                     INC   hl   
04A2   03                     INC   bc   ; point to next char
04A3                ARGLIST1:      
04A3   0A                     LD   a,(bc)   
04A4   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A6   20 03                  JR   nz,arglist1a   
04A8   14                     INC   d   ; non zero value local count acts as flag
04A9   18 10                  JR   arglist3   
04AB                ARGLIST1A:      
04AB   FE 61                  CP   "a"   ; < "a" terminates arg_list
04AD   38 0F                  JR   c,arglist4   
04AF   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B1   30 0B                  JR   nc,arglist4   
04B3                ARGLIST2:      
04B3   77                     LD   (hl),a   
04B4   23                     INC   hl   
04B5   1C                     INC   e   ; increase arg count
04B6   AF                     XOR   a   
04B7   B2                     OR   d   
04B8   28 01                  JR   z,arglist3   
04BA   14                     INC   d   ; if d > 0 increase local count
04BB                ARGLIST3:      
04BB   03                     INC   bc   ; point to next char
04BC   18 E5                  JR   arglist1   
04BE                ARGLIST4:      
04BE   0B                     DEC   bc   
04BF   AF                     XOR   a   
04C0   B2                     OR   d   
04C1   28 01                  JR   z,arglist5   
04C3   15                     DEC   d   ; remove initial inc
04C4                ARGLIST5:      
04C4   23                     INC   hl   
04C5   22 F0 55               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04C8   E1                     POP   hl   ; hl = start of arg_list
04C9   E5                     PUSH   hl   ; return start of arg_list
04CA   72                     LD   (hl),d   ; write number of locals at start - 1
04CB   23                     INC   hl   
04CC   73                     LD   (hl),e   ; write number of args + locals at start - 2
04CD   DD E9                  JP   (ix)   
04CF                             ; value _oldValue --            ; uses address in vPointer
04CF                ASSIGN:      
04CF   E1                     POP   hl   ; discard last accessed value
04D0   E1                     POP   hl   ; hl = new value
04D1                ASSIGN0:      
04D1   EB                     EX   de,hl   ; de = new value
04D2                ASSIGNX:      
04D2   2A F4 55               LD   hl,(vPointer)   
04D5   73                     LD   (hl),e   
04D6   3A E6 55               LD   a,(vDataWidth)   
04D9   3D                     DEC   a   ; is it byte?
04DA   28 02                  JR   z,assign1   
04DC   23                     INC   hl   
04DD   72                     LD   (hl),d   
04DE                ASSIGN1:      
04DE   DD E9                  JP   (ix)   
04E0                             ; /ab absolute
04E0                             ; num -- num
04E0                ABSOLUTE:      
04E0   E1                     POP   hl   
04E1   CB 7C                  BIT   7,h   
04E3   C8                     RET   z   
04E4   AF                     XOR   a   
04E5   95                     SUB   l   
04E6   6F                     LD   l,a   
04E7   9F                     SBC   a,a   
04E8   94                     SUB   h   
04E9   67                     LD   h,a   
04EA   E5                     PUSH   hl   
04EB   DD E9                  JP   (ix)   
04ED                             ; /ad addrOf
04ED                             ; char -- addr
04ED                ADDROF:      
04ED   E1                     POP   hl   ; a = char
04EE   7D                     LD   a,l   
04EF   FE 7B                  CP   "z"+1   ; if a > z then exit
04F1   30 19                  JR   nc,addrOf2   
04F3   D6 41                  SUB   "A"   ; a - 65
04F5   38 15                  JR   c,addrOf2   ; if < A then exit
04F7   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
04F9   38 06                  JR   c,addrOf1   
04FB   D6 06                  SUB   "a"-("Z"+1)   
04FD   FE 1A                  CP   "Z"-"A"+1   
04FF   38 0B                  JR   c,addrOf2   ; if < a then exit
0501                ADDROF1:      
0501   87                     ADD   a,a   ; double a
0502   21 00 55               LD   hl,VARS   ; hl = VARS + a
0505   85                     ADD   a,l   
0506   6F                     LD   l,a   
0507   3E 00                  LD   a,0   
0509   8C                     ADC   a,h   
050A   67                     LD   h,a   
050B   E5                     PUSH   hl   
050C                ADDROF2:      
050C   DD E9                  JP   (ix)   
050E                LBRACE:      
050E                BLOCKSTART:      
050E   C5                     PUSH   bc   ; return pointer to first { of block
050F   03                     INC   bc   
0510   16 01                  LD   d,1   ; nesting: count first parenthesis
0512                BLOCKSTART1:      ; Skip to end of definition
0512   0A                     LD   a,(bc)   ; Get the next character
0513   03                     INC   bc   ; Point to next character
0514   FE 21                  CP   " " + 1   ; ignore whitespace
0516   38 FA                  JR   c,blockStart1   
0518   FE 29                  CP   ")"   
051A   28 2D                  JR   z,blockStart4   
051C   FE 7D                  CP   "}"   
051E   28 29                  JR   z,blockStart4   
0520   FE 5D                  CP   "]"   
0522   28 25                  JR   z,blockStart4   
0524   FE 28                  CP   "("   
0526   28 16                  JR   z,blockStart2   
0528   FE 7B                  CP   "{"   
052A   28 12                  JR   z,blockStart2   
052C   FE 5B                  CP   "["   
052E   28 0E                  JR   z,blockStart2   
0530   FE 27                  CP   "'"   
0532   28 0D                  JR   z,blockStart3   
0534   FE 60                  CP   "`"   
0536   28 09                  JR   z,blockStart3   
0538   FE 22                  CP   DQ   
053A   28 05                  JR   z,blockStart3   
053C   18 D4                  JR   blockStart1   
053E                BLOCKSTART2:      
053E   14                     INC   d   
053F   18 D1                  JR   blockStart1   
0541                BLOCKSTART3:      
0541   3E 80                  LD   a,$80   
0543   AA                     XOR   d   
0544   57                     LD   d,a   
0545   20 CB                  JR   nz,blockStart1   
0547   18 03                  JR   blockStart5   
0549                BLOCKSTART4:      
0549   15                     DEC   d   
054A   20 C6                  JR   nz,blockStart1   ; get the next element
054C                BLOCKSTART5:      
054C   60 69                  LD   hl,bc   ; hl = IP
054E   11 1C 56               LD   de,HEAP   ; is IP pointing to object in heap
0551   B7                     OR   a   ; IP - HEAP
0552   ED 52                  SBC   hl,de   
0554   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0556   28 1C                  JR   z,blockStart6   
0558   60 69                  LD   hl,bc   ; hl = IP
055A   D1                     POP   de   ; de = block*
055B   ED 43 00 56            LD   (vTemp1),bc   ; save IP
055F   B7                     OR   a   ; bc = size
0560   ED 52                  SBC   hl,de   
0562   44 4D                  LD   bc,hl   
0564   EB                     EX   de,hl   ; hl = block* de = heap*
0565   ED 5B F0 55            LD   de,(vHeapPtr)   
0569   D5                     PUSH   de   ; return hblock*
056A   ED B0                  LDIR      ; copy size bytes from block* to hblock*
056C   ED 53 F0 55            LD   (vHeapPtr),de   ; heap* += size
0570   ED 4B 00 56            LD   bc,(vTemp1)   ; restore IP
0574                BLOCKSTART6:      
0574   0B                     DEC   bc   ; balanced, exit
0575   DD E9                  JP   (ix)   
0577                RBRACE:      
0577                BLOCKEND:      
0577   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
057A   FD 56 01               LD   d,(iy+1)   
057D   ED 53 00 56            LD   (vTemp1),de   
0581   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0584   FD 56 07               LD   d,(iy+7)   
0587   ED 53 02 56            LD   (vTemp2),de   
058B   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
058E   FD 56 03               LD   d,(iy+3)   
0591   EB                     EX   de,hl   
0592   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0595   FD 56 01               LD   d,(iy+1)   
0598   13                     INC   de   ; for carry flag <=
0599   B7                     OR   a   
059A   ED 52                  SBC   hl,de   
059C   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
059E   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
05A0   FD 5D                  LD   e,iyl   
05A2   21 08 00               LD   hl,8   
05A5   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
05A6   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
05A7   18 0C                  JR   blockEnd2   
05A9                BLOCKEND1:      ; same scope
05A9   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
05AC   FD 56 03               LD   d,(iy+3)   
05AF   EB                     EX   de,hl   
05B0   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
05B2   FD 5D                  LD   e,iyl   
05B4   EB                     EX   de,hl   
05B5                BLOCKEND2:      
05B5   44 4D                  LD   bc,hl   ; bc = hl = BP
05B7   B7                     OR   a   ; hl = BP - SP = count
05B8   ED 72                  SBC   hl,sp   
05BA   7D                     LD   a,l   
05BB   B4                     OR   h   
05BC   28 09                  JR   z,blockEnd3   
05BE   C5                     PUSH   bc   ; bc = count, hl = BP
05BF   44 4D                  LD   bc,hl   
05C1   E1                     POP   hl   
05C2   2B                     DEC   hl   ; hl = BP-1
05C3   1B                     DEC   de   ; de = args*-1
05C4   ED B8                  LDDR      
05C6   13                     INC   de   
05C7                BLOCKEND3:      
05C7   EB                     EX   de,hl   ; sp = de = new tos*
05C8   F9                     LD   sp,hl   
05C9   ED 4B 02 56            LD   bc,(vTemp2)   
05CD   FD 2A 00 56            LD   iy,(vTemp1)   
05D1   ED 5B F2 55            LD   de,(vRecur)   ; de = recur vector
05D5   7B                     LD   a,e   ; check for NUL
05D6   B2                     OR   d   
05D7   20 02                  JR   nz,blockEnd4   
05D9   DD E9                  JP   (ix)   
05DB                BLOCKEND4:      
05DB   21 00 00               LD   hl,0   ; clear recur vector
05DE   22 F2 55               LD   (vRecur),hl   
05E1   C3 E0 09               JP   go1   ; execute de
05E4                             ; /br break from loop
05E4                             ; --
05E4                BREAK:       
05E4   E1                     POP   hl   
05E5   7D                     LD   a,l   
05E6   B4                     OR   h   
05E7   28 02                  JR   z,break1   
05E9   DD E9                  JP   (ix)   
05EB                BREAK1:      
05EB   FD 5D                  LD   e,iyl   ; get block* just under stack frame
05ED   FD 54                  LD   d,iyh   
05EF   21 08 00               LD   hl,8   
05F2   19                     ADD   hl,de   
05F3   23                     INC   hl   
05F4   23                     INC   hl   
05F5   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
05F8   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
05FB   C3 77 05               JP   blockEnd   
05FE                TICK:        
05FE                CHAR:        
05FE   21 00 00               LD   hl,0   ; if "" is empty or null
0601                CHAR1:       
0601   03                     INC   bc   ; point to next char
0602   0A                     LD   a,(bc)   
0603   FE 27                  CP   "'"   ; ' is the terminator
0605   28 09                  JR   z,char3   
0607   FE 5C                  CP   $5c   ; \ is the escape
0609   20 02                  JR   nz,char2   
060B   03                     INC   bc   
060C   0A                     LD   a,(bc)   
060D                CHAR2:       
060D   6F                     LD   l,a   
060E   18 F1                  JR   char1   
0610                CHAR3:       
0610   E5                     PUSH   hl   
0611   DD E9                  JP   (ix)   
0613                SLASH:       
0613                COMMAND:      
0613   CD 97 0C               CALL   jumpTable   
0616   2F                     DB   "/"   ; // comment
0617   DE 06                  DW   comment   
0619   61                     DB   "a"   
061A   52 06                  DW   command_a   
061C   62                     DB   "b"   
061D   5E 06                  DW   command_b   
061F   63                     DB   "c"   ; /c chars
0620   D0 06                  DW   chars   
0622   64                     DB   "d"   ; /d decimal
0623   A3 07                  DW   decimal   
0625   66                     DB   "f"   
0626   6A 06                  DW   command_f   
0628   68                     DB   "h"   ; /h hexadecimal
0629   AB 07                  DW   hexadecimal   
062B   69                     DB   "i"   
062C   82 06                  DW   command_i   
062E   6B                     DB   "k"   ; /k key
062F   D6 0A                  DW   key   
0631   6C                     DB   "l"   
0632   8E 06                  DW   command_l   
0634   6D                     DB   "m"   
0635   97 06                  DW   command_m   
0637   6E                     DB   "n"   ; /n numbers
0638   D8 06                  DW   numbers   
063A   6F                     DB   "o"   ; /o output
063B   E8 0A                  DW   output   
063D   70                     DB   "p"   
063E   A0 06                  DW   command_p   
0640   72                     DB   "r"   
0641   AF 06                  DW   command_r   
0643   73                     DB   "s"   ; /s size
0644   46 0C                  DW   size   
0646   74                     DB   "t"   ; /t true
0647   23 09                  DW   true1   
0649   76                     DB   "v"   
064A   BB 06                  DW   command_v   
064C   78                     DB   "x"   ; /x xor
064D   D0 03                  DW   xor   
064F   00                     DB   NUL   
0650   92 07                  DW   div   
0652                COMMAND_A:      
0652   CD 97 0C               CALL   jumpTable   
0655   62                     DB   "b"   ; /ab absolute
0656   E0 04                  DW   absolute   
0658   64                     DB   "d"   ; /ad address of
0659   ED 04                  DW   addrOf   
065B   00                     DB   NUL   
065C   2F 09                  DW   error1   
065E                COMMAND_B:      
065E   CD 97 0C               CALL   jumpTable   
0661   72                     DB   "r"   ; /br break
0662   E4 05                  DW   break   
0664   79                     DB   "y"   ; /by cold boot
0665   5E 0D                  DW   coldStart   
0667   00                     DB   NUL   
0668   2F 09                  DW   error1   
066A                COMMAND_F:      
066A   CD 97 0C               CALL   jumpTable   
066D   65                     DB   "e"   ; /fe forEach
066E   36 09                  DW   forEach   
0670   73                     DB   "s"   ; /fs funcSrc
0671   A4 09                  DW   funcSrc   
0673   31                     DB   "1"   
0674   63 0E                  DW   f1   
0676   32                     DB   "2"   
0677   EC 0E                  DW   f2   
0679   33                     DB   "3"   
067A   48 0F                  DW   f3   
067C   34                     DB   "4"   
067D   C8 0F                  DW   f4   
067F   00                     DB   NUL   
0680   29 09                  DW   false1   
0682                COMMAND_I:      
0682   CD 97 0C               CALL   jumpTable   
0685   6E                     DB   "n"   ; /in input
0686   CB 0A                  DW   input   
0688   76                     DB   "v"   ; /iv invert
0689   DB 03                  DW   invert   
068B   00                     DB   NUL   
068C   2F 09                  DW   error1   
068E                COMMAND_L:      
068E   CD 97 0C               CALL   jumpTable   
0691   69                     DB   "i"   ; /li literal
0692   DF 0A                  DW   literal   
0694   00                     DB   NUL   
0695   2F 09                  DW   error1   
0697                COMMAND_M:      
0697   CD 97 0C               CALL   jumpTable   
069A   70                     DB   "p"   ; /mp map
069B   F1 0A                  DW   map   
069D   00                     DB   NUL   
069E   2F 09                  DW   error1   
06A0                COMMAND_P:      
06A0   CD 97 0C               CALL   jumpTable   
06A3   62                     DB   "b"   ; /pb print buffer
06A4   00 0C                  DW   printBuffer   
06A6   63                     DB   "c"   ; /pc print chars
06A7   26 0C                  DW   printChars   
06A9   6B                     DB   "k"   ; /pk print stack
06AA   38 0C                  DW   printStack   
06AC   00                     DB   NUL   
06AD   2F 09                  DW   error1   
06AF                COMMAND_R:      
06AF   CD 97 0C               CALL   jumpTable   
06B2   63                     DB   "c"   ; /rc tail call optimisation
06B3   3A 0C                  DW   recur   
06B5   65                     DB   "e"   ; /re remainder
06B6   40 0C                  DW   remain   
06B8   00                     DB   NUL   
06B9   2F 09                  DW   error1   
06BB                COMMAND_V:      
06BB   CD 97 0C               CALL   jumpTable   
06BE   62                     DB   "b"   
06BF   5D 0C                  DW   varBufPtr   
06C1   68                     DB   "h"   
06C2   66 0C                  DW   varHeapPtr   
06C4   74                     DB   "t"   
06C5   6F 0C                  DW   varTIBPtr   
06C7   42                     DB   "B"   
06C8   4E 0C                  DW   constBufStart   
06CA   54                     DB   "T"   
06CB   58 0C                  DW   constTIBStart   
06CD   00                     DB   NUL   
06CE   2F 09                  DW   error1   
06D0                CHARS:       
06D0   21 01 00               LD   hl,1   
06D3                CHARS1:      
06D3   22 E6 55               LD   (vDataWidth),hl   
06D6   DD E9                  JP   (ix)   
06D8                NUMBERS:      
06D8   21 02 00               LD   hl,2   
06DB   C3 D3 06               JP   chars1   
06DE                COMMENT:      
06DE   03                     INC   bc   ; point to next char
06DF   0A                     LD   a,(bc)   
06E0   FE 20                  CP   " "   ; terminate on any char less than SP
06E2   30 FA                  JR   nc,comment   
06E4   0B                     DEC   bc   
06E5   DD E9                  JP   (ix)   
06E7                             ; ";" createFunc
06E7                             ; arg_list* block* -- func*
06E7                SEMICOLON:      
06E7                CREATEFUNC:      
06E7   ED 43 00 56            LD   (vTemp1),bc   ; save IP
06EB   E1                     POP   hl   ; hl = block*
06EC   22 02 56               LD   (vTemp2),hl   ; save block*
06EF   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
06F2   FD 56 05               LD   d,(iy+5)   
06F5   7B                     LD   a,e   ; if arg_list == null then make a func
06F6   B2                     OR   d   
06F7   20 09                  JR   nz,createFunc0   
06F9   21 00 00               LD   hl,0   ; partial_array = null
06FC   ED 5B F0 55            LD   de,(vHeapPtr)   ; de = compile*
0700   18 65                  JR   createFunc5   
0702                CREATEFUNC0:      
0702   E1                     POP   hl   ; hl = inner_arg_list*
0703   E5                     PUSH   hl   ; save inner_arg_list
0704   ED 5B F0 55            LD   de,(vHeapPtr)   ; de = compile*
0708   7E                     LD   a,(hl)   ; compile inner_num_locals
0709   4F                     LD   c,a   ; b = inner_num_locals
070A   12                     LD   (de),a   
070B   23                     INC   hl   
070C   13                     INC   de   
070D   7E                     LD   a,(hl)   ; compile inner_length
070E   12                     LD   (de),a   
070F   91                     SUB   c   ; a = inner_num args
0710   23                     INC   hl   
0711   13                     INC   de   
0712   B7                     OR   a   ; compile args if inner_length > 0
0713   28 05                  JR   z,createFunc1   
0715   4F                     LD   c,a   ; bc = a
0716   06 00                  LD   b,0   
0718   ED B0                  LDIR      
071A                CREATEFUNC1:      
071A   EB                     EX   de,hl   ; hl = outer_arg_list
071B   FD 5E 04               LD   e,(iy+4)   
071E   FD 56 05               LD   d,(iy+5)   
0721   EB                     EX   de,hl   
0722   23                     INC   hl   ; a = outer_length
0723   7E                     LD   a,(hl)   
0724   23                     INC   hl   
0725   B7                     OR   a   
0726   28 05                  JR   z,createFunc2   
0728   4F                     LD   c,a   
0729   06 00                  LD   b,0   
072B   ED B0                  LDIR      ; append outer_args
072D                CREATEFUNC2:      ; a = outer_length
072D   47                     LD   b,a   ; b = a = outer_length
072E   2A F0 55               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0731   23                     INC   hl   
0732   7E                     LD   a,(hl)   ; add outer_length to new length
0733   80                     ADD   a,b   
0734   77                     LD   (hl),a   
0735   2B                     DEC   hl   
0736   78                     LD   a,b   ; save outer_length in a'
0737   08                     EX   af,af'   
0738   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0739   7E                     LD   a,(hl)   ; c = a = inner_num_locals
073A   B7                     OR   a   
073B   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
073D   4F                     LD   c,a   ; c = inner_num_locals
073E   06 00                  LD   b,0   ; bc = inner_num_locals
0740   23                     INC   hl   ; a = inner_length
0741   7E                     LD   a,(hl)   
0742   91                     SUB   c   ; a = inner_num_args
0743   23                     INC   hl   ; hl = inner_arg_chars
0744   85                     ADD   a,l   ; hl += a
0745   6F                     LD   l,a   
0746   3E 00                  LD   a,0   
0748   84                     ADD   a,h   
0749   67                     LD   h,a   
074A   ED B0                  LDIR      ; append inner_locals
074C                CREATEFUNC2A:      
074C   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
074D   12                     LD   (de),a   ; compile partial_array length field
074E   13                     INC   de   
074F   AF                     XOR   a   
0750   12                     LD   (de),a   
0751   13                     INC   de   
0752   D5                     PUSH   de   ; push partial_array*
0753   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0754   FD 5E 02               LD   e,(iy+2)   
0757   FD 56 03               LD   d,(iy+3)   
075A   EB                     EX   de,hl   
075B                CREATEFUNC3:      
075B   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
075C   4E                     LD   c,(hl)   
075D   2B                     DEC   hl   
075E   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
075F   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0760   13                     INC   de   
0761   79                     LD   a,c   
0762   12                     LD   (de),a   
0763   13                     INC   de   
0764   10 F5                  DJNZ   createFunc3   ; b = outer_length
0766                CREATEFUNC4:      
0766   E1                     POP   hl   ; hl = partial_array*
0767                CREATEFUNC5:      
0767   C1                     POP   bc   ; bc = new_arg_list*
0768   D5                     PUSH   de   ; return new func*
0769   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
076A   73                     LD   (hl),e   ; compile partial_array* to func
076B   23                     INC   hl   
076C   72                     LD   (hl),d   
076D   23                     INC   hl   
076E   ED 5B 02 56            LD   de,(vTemp2)   ; de = block*
0772   73                     LD   (hl),e   ; compile block* to func
0773   23                     INC   hl   
0774   72                     LD   (hl),d   
0775   23                     INC   hl   
0776   71                     LD   (hl),c   ; compile new_arg_list* to func
0777   23                     INC   hl   
0778   70                     LD   (hl),b   
0779   23                     INC   hl   
077A   22 F0 55               LD   (vHeapPtr),hl   ; bump heap ptr
077D   ED 4B 00 56            LD   bc,(vTemp1)   ; restore IP
0781   DD E9                  JP   (ix)   
0783                             ; , discard stack item
0783                             ; x y -- x
0783                COMMA:       
0783                DISCARD:      
0783   FD 54                  LD   d,iyh   ; limit this to SP <= BP
0785   FD 5D                  LD   e,iyl   
0787   EB                     EX   de,hl   
0788   B7                     OR   a   
0789   ED 72                  SBC   hl,sp   
078B   CB 7C                  BIT   7,h   
078D   20 01                  JR   nz,discard1   
078F   E1                     POP   hl   
0790                DISCARD1:      
0790   DD E9                  JP   (ix)   
0792                DIV:         
0792   D1                     POP   de   
0793   E1                     POP   hl   
0794   C5                     PUSH   bc   ; preserve the IP
0795   44 4D                  LD   bc,hl   
0797   CD EC 08               CALL   divide   
079A   EB                     EX   de,hl   
079B   ED 53 F6 55            LD   (vRemain),de   
079F   C1                     POP   bc   
07A0   C3 9B 03               JP   add3   
07A3                DECIMAL:      
07A3   21 0A 00               LD   hl,10   
07A6                DECIMAL1:      
07A6   22 E8 55               LD   (vNumBase),hl   
07A9   DD E9                  JP   (ix)   
07AB                HEXADECIMAL:      
07AB   21 10 00               LD   hl,16   
07AE   C3 A6 07               JP   decimal1   
07B1                DOT:         
07B1   CD 97 0C               CALL   jumpTable   
07B4   61                     DB   "a"   ; .a print array
07B5   C3 07                  DW   bufferArray   
07B7   63                     DB   "c"   ; .c print char
07B8   CB 08                  DW   bufferChar   
07BA   73                     DB   "s"   ; .s print string
07BB   B1 08                  DW   bufferString   
07BD   78                     DB   "x"   ; .x print x chars
07BE   D0 08                  DW   bufferXChars   
07C0   00                     DB   NUL   ; .  print number
07C1   0C 08                  DW   bufferNumber   
07C3                          ;*Macro unroll: FUNC bufferArray, 2, "abc"
07C3                BUFFERARRAY:      
07C3   CD DF 09               CALL   go   
07C6   00 00                  DW   NUL   
07C8   D1 07                  DW   bufferArrayM_1609S1094   
07CA   CC 07                  DW   $+2   
07CC   02                     DB   2   
07CD   03 61 62 63            .PSTR   "abc"   
07D1                BUFFERARRAYM_1609S1094:      
07D1   7B 22 5B 20 22 2E 73 20 25 61 20 2F 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 22 5D 22 2E 73 7D 00 00 .CSTR   "{",DQ,"[ ",DQ,".s %a /s%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ",DQ,"]",DQ,".s}",0   
080C                             ; /bd buffer decimal
080C                             ; value --
080C                BUFFERNUMBER:      
080C   3A E8 55               LD   a,(vNumBase)   
080F   FE 10                  CP   16   
0811   28 66                  JR   z,bufferHex   ; else falls through
0813                             ; /bd buffer decimal
0813                             ; value --
0813                BUFFERDEC:      
0813   ED 5B EC 55            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0817   D9                     EXX      
0818   E1                     POP   hl   ; hl = value
0819   CD 2D 08               CALL   bufferDec0   
081C   D9                     EXX      ; de = buffer*' bc = IP
081D   3E 20                  LD   a," "   ; append space to buffer
081F   12                     LD   (de),a   
0820   1C                     INC   e   ; buffer*++, wraparound
0821   CC 80 0C               CALL   z,flushBuffer   
0824   2A EC 55               LD   hl,(vBufPtr)   ; hl = buffer*
0827   ED 53 EC 55            LD   (vBufPtr),de   ; update buffer* with buffer*'
082B   DD E9                  JP   (ix)   
082D                             ; hl = value
082D                             ; de' = buffer*
082D                             ; a, bc, de, hl destroyed
082D                BUFFERDEC0:      
082D   CB 7C                  BIT   7,h   
082F   28 0C                  JR   z,bufferDec1   
0831   D9                     EXX      
0832   3E 2D                  LD   a,"-"   
0834   12                     LD   (de),a   
0835   13                     INC   de   
0836   D9                     EXX      
0837   AF                     XOR   a   
0838   95                     SUB   l   
0839   6F                     LD   l,a   
083A   9F                     SBC   a,a   
083B   94                     SUB   h   
083C   67                     LD   h,a   
083D                BUFFERDEC1:      
083D   0E 00                  LD   c,0   ; leading zeros flag = false
083F   11 F0 D8               LD   de,-10000   
0842   CD 5D 08               CALL   bufferDec2   
0845   11 18 FC               LD   de,-1000   
0848   CD 5D 08               CALL   bufferDec2   
084B   11 9C FF               LD   de,-100   
084E   CD 5D 08               CALL   bufferDec2   
0851   1E F6                  LD   e,-10   
0853   CD 5D 08               CALL   bufferDec2   
0856   0C                     INC   c   ; flag = true for at least digit
0857   1E FF                  LD   e,-1   
0859   CD 5D 08               CALL   bufferDec2   
085C   C9                     RET      
085D                BUFFERDEC2:      
085D   06 2F                  LD   b,"0"-1   
085F                BUFFERDEC3:      
085F   04                     INC   b   
0860   19                     ADD   hl,de   
0861   38 FC                  JR   c,bufferDec3   
0863   ED 52                  SBC   hl,de   
0865   3E 30                  LD   a,"0"   
0867   B8                     CP   b   
0868   20 05                  JR   nz,bufferDec4   
086A   AF                     XOR   a   
086B   B1                     OR   c   
086C   C8                     RET   z   
086D   18 01                  JR   bufferDec5   
086F                BUFFERDEC4:      
086F   0C                     INC   c   
0870                BUFFERDEC5:      
0870   78                     LD   a,b   
0871   D9                     EXX      
0872   12                     LD   (de),a   
0873   1C                     INC   e   
0874   CC 80 0C               CALL   z,flushBuffer   
0877   D9                     EXX      
0878   C9                     RET      
0879                             ; /bh buffer hex
0879                             ; value --
0879                BUFFERHEX:      
0879   E1                     POP   hl   ; hl = value
087A   ED 5B EC 55            LD   de,(vBufPtr)   
087E   3E 24                  LD   a,"$"   ; # prefix
0880   12                     LD   (de),a   
0881   1C                     INC   e   ; buffer*++, wraparound
0882   CC 80 0C               CALL   z,flushBuffer   
0885   7C                     LD   a,h   
0886   CD 9A 08               CALL   bufferHex1   
0889   7D                     LD   a,l   
088A   CD 9A 08               CALL   bufferHex1   
088D   3E 20                  LD   a," "   ; append space to buffer
088F   12                     LD   (de),a   
0890   1C                     INC   e   ; buffer*++, wraparound
0891   CC 80 0C               CALL   z,flushBuffer   
0894   ED 53 EC 55            LD   (vBufPtr),de   
0898   DD E9                  JP   (ix)   
089A                BUFFERHEX1:      
089A   F5                     PUSH   af   
089B   1F                     RRA      
089C   1F                     RRA      
089D   1F                     RRA      
089E   1F                     RRA      
089F   CD A3 08               CALL   bufferHex2   
08A2   F1                     POP   af   
08A3                BUFFERHEX2:      
08A3   E6 0F                  AND   0x0F   
08A5   C6 90                  ADD   a,0x90   
08A7   27                     DAA      
08A8   CE 40                  ADC   a,0x40   
08AA   27                     DAA      
08AB   12                     LD   (de),a   
08AC   1C                     INC   e   ; buffer*++, wraparound
08AD   CC 80 0C               CALL   z,flushBuffer   
08B0   C9                     RET      
08B1                             ; /bs buffered string
08B1                             ; string* --
08B1                BUFFERSTRING:      
08B1   E1                     POP   hl   ; hl = string*
08B2   ED 5B EC 55            LD   de,(vBufPtr)   ; de = buffer*
08B6   18 06                  JR   bufferString1   
08B8                BUFFERSTRING0:      
08B8   12                     LD   (de),a   ; a -> buffer*
08B9   1C                     INC   e   ; buffer*++, wraparound
08BA   CC 80 0C               CALL   z,flushBuffer   
08BD   23                     INC   hl   
08BE                BUFFERSTRING1:      
08BE   7E                     LD   a,(hl)   ; a <- string*
08BF   B7                     OR   a   ; if NUL exit loop
08C0   20 F6                  JR   nz,bufferString0   
08C2   2A EC 55               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
08C5   ED 53 EC 55            LD   (vBufPtr),de   ; save buffer*' in pointer
08C9   DD E9                  JP   (ix)   
08CB                             ; /bc buffer char
08CB                             ; char --
08CB                BUFFERCHAR:      
08CB   21 01 00               LD   hl,1   
08CE   18 01                  JR   bufferXChars0   
08D0                             ; /bx buffered x chars
08D0                             ; char length --
08D0                BUFFERXCHARS:      
08D0   E1                     POP   hl   ; hl = length
08D1                BUFFERXCHARS0:      
08D1   D1                     POP   de   ; a' = char
08D2   7B                     LD   a,e   
08D3   08                     EX   af,af'   
08D4   ED 5B EC 55            LD   de,(vBufPtr)   ; de = buffer*
08D8   18 08                  JR   bufferXChars2   
08DA                BUFFERXCHARS1:      
08DA   08                     EX   af,af'   
08DB   12                     LD   (de),a   
08DC   08                     EX   af,af'   
08DD   1C                     INC   e   ; buffer*++, wraparound
08DE   CC 80 0C               CALL   z,flushBuffer   
08E1   2B                     DEC   hl   
08E2                BUFFERXCHARS2:      
08E2   7D                     LD   a,l   
08E3   B4                     OR   h   
08E4   20 F4                  JR   nz,bufferXChars1   
08E6   ED 53 EC 55            LD   (vBufPtr),de   ; save buffer*'
08EA   DD E9                  JP   (ix)   
08EC                             ; division subroutine.
08EC                             ; bc: divisor, de: dividend, hl: remainder
08EC                DIVIDE:      
08EC   21 00 00               LD   hl,0   ; zero the remainder
08EF   3E 10                  LD   a,16   ; loop counter
08F1                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
08F1   CB 21                  SLA   c   
08F3   CB 10                  RL   b   
08F5   ED 6A                  ADC   hl,hl   
08F7   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
08F9   38 03                  JR   c,divide2   
08FB   0C                     INC   c   
08FC   18 01                  JR   divide3   
08FE                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
08FE   19                     ADD   hl,de   
08FF                DIVIDE3:      
08FF   3D                     DEC   a   
0900   20 EF                  JR   nz,divide1   
0902   50 59                  LD   de,bc   ; result from bc to de
0904   C9                     RET      
0905                             ; hl = value1, de = value2
0905                             ; hl = result
0905                EQUALS:      
0905   B7                     OR   a   ; reset the carry flag
0906   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0908   28 19                  JR   z,true1   
090A   C3 29 09               JP   false1   
090D                NOTEQUALS:      
090D   B7                     OR   a   ; reset the carry flag
090E   ED 52                  SBC   hl,de   
0910   C2 23 09               JP   nz,true1   
0913   C3 29 09               JP   false1   
0916                             ; hl = value1 de = value2
0916                             ; hl = result
0916                LESSTHANEQ:      
0916   B7                     OR   a   
0917   ED 52                  SBC   hl,de   
0919   18 05                  JR   lessthan1   
091B                             ; hl = value1 de = value2
091B                             ; hl = result
091B                LESSTHAN:      
091B   B7                     OR   a   
091C   ED 52                  SBC   hl,de   
091E   28 09                  JR   z,false1   
0920                LESSTHAN1:      
0920   FA 29 09               JP   m,false1   
0923                TRUE1:       
0923   21 FF FF               LD   hl,TRUE   
0926   E5                     PUSH   hl   
0927   DD E9                  JP   (ix)   
0929                NULL1:       
0929                FALSE1:      
0929   21 00 00               LD   hl,FALSE   
092C   E5                     PUSH   hl   
092D   DD E9                  JP   (ix)   
092F                ERROR1:      
092F   21 01 00               LD   hl,1   ; error 1: unknown command
0932   E5                     PUSH   hl   
0933   C3 1B 0E               JP   error   
0936                             ; /fe forEach
0936                             ; :o -- :s
0936                          ;*Macro unroll: FUNC forEach, 0, "p"                       ; :p proc
0936                FOREACH:      ; :p proc
0936   CD DF 09               CALL   go   
0939   00 00                  DW   NUL   
093B   42 09                  DW   forEachM_1831S1334   
093D   3F 09                  DW   $+2   
093F   00                     DB   0   
0940   01 70                  .PSTR   "p"   
0942                FOREACHM_1831S1334:      
0942   7B                     DB   "{"   
0943   3A 73 3A 54 7B         DB   ":s:T{"   ; :s source
0948   5B 30 5D 25 54 3D      DB   "[0]%T="   
094E   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0956   3A 64 74 7B            DB   ":dt{"   
095A   7B 20 30 25 74 3D 3D 2F 62 72 20 25 64 20 25 54 30 23 3D 20 7D DB   "{ 0%t==/br %d %T0#= }"   ; 0: store talkback
096F   7B 20 31 25 74 3D 3D 2F 62 72 20 25 64 20 25 70 5E 20 7D DB   "{ 1%t==/br %d %p^ }"   ; 1: send data to proc
0982   7B 20 32 25 74 21 3D 2F 62 72 20 30 20 31 20 25 54 30 23 5E 20 7D DB   "{ 2%t!=/br 0 1 %T0#^ }"   ; 0 or 1: get next data item
0998   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   ; init source
09A0   7D 3B                  DB   "};"   
09A2   7D                     DB   "}"   
09A3   00                     DB   0   
09A4                             ; ; /fs funcSrc
09A4                             ; ; func -- src
09A4                             ; FUNC funcSrc, 1, "f"                      ; :f func or block
09A4                             ; db "{"
09A4                             ; db    ":kt{"                              ; :kt sink, type
09A4                             ; db         "0%t==/br"                     ; break if t != 0
09A4                             ; db         ":dt{"
09A4                             ; db             "1%t==/br %f^ 1 %k^"       ; if t == 1 send data to sink
09A4                             ; db         "}; 0 %k^"                      ; init sink
09A4                             ; db     "};"
09A4                             ; db "}"
09A4                             ; db 0
09A4                             ; ; /fs funcSrc
09A4                             ; ; func -- src
09A4                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
09A4                FUNCSRC:      ; :f func or block
09A4   CD DF 09               CALL   go   
09A7   00 00                  DW   NUL   
09A9   B0 09                  DW   funcSrcM_1858S1363   
09AB   AD 09                  DW   $+2   
09AD   00                     DB   0   
09AE   01 66                  .PSTR   "f"   
09B0                FUNCSRCM_1858S1363:      
09B0   7B                     DB   "{"   
09B1   3A 6B 74 7B            DB   ":kt{"   ; :kt sink, type
09B5   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
09BD   3A 64 74 7B            DB   ":dt{"   
09C1   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
09D3   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
09DB   7D 3B                  DB   "};"   
09DD   7D                     DB   "}"   
09DE   00                     DB   0   
09DF                             ; execute a block of code which ends with }
09DF                             ; creates a root scope if BP == stack
09DF                             ; else uses outer scope
09DF                CARET:       
09DF                GO:          
09DF   D1                     POP   de   ; de = block*
09E0                GO1:         
09E0   7B                     LD   a,e   ; if block* == null, exit
09E1   B2                     OR   d   
09E2   20 02                  JR   nz,go2   
09E4   DD E9                  JP   (ix)   
09E6                GO2:         
09E6   1A                     LD   a,(de)   
09E7   FE 7B                  CP   "{"   
09E9   28 06                  JR   z,goBlock   
09EB   FE 28                  CP   "("   
09ED   C2 24 0A               JP   nz,goFunc   
09F0   D5                     PUSH   de   ; push de just before stack frame
09F1                GOBLOCK:      
09F1   ED 53 00 56            LD   (vTemp1),de   ; save de
09F5   21 00 53               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
09F8   FD 54                  LD   d,iyh   
09FA   FD 5D                  LD   e,iyl   
09FC   B7                     OR   a   ; if stack* == BP then this is the root_scope
09FD   ED 52                  SBC   hl,de   
09FF   ED 5B 00 56            LD   de,(vTemp1)   ; restore de
0A03   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0A04   B4                     OR   h   
0A05   3E 00                  LD   a,0   
0A07   28 6A                  JR   z,goFunc8   
0A09   C5                     PUSH   bc   ; push IP
0A0A   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0A0D   FD 46 05               LD   b,(iy+5)   
0A10   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0A13   FD 66 03               LD   h,(iy+3)   
0A16                GOBLOCK2:      
0A16   C5                     PUSH   bc   ; arg_list*
0A17   E5                     PUSH   hl   ; first_arg*
0A18   FD E5                  PUSH   iy   ; push BP
0A1A   FD 21 00 00            LD   iy,0   ; BP = SP
0A1E   FD 39                  ADD   iy,sp   
0A20                GOBLOCK3:      
0A20   42 4B                  LD   bc,de   ; bc = de = block*-1
0A22   DD E9                  JP   (ix)   
0A24                GOFUNC:      ; execute func
0A24   EB                     EX   de,hl   ; hl = func*
0A25   5E                     LD   e,(hl)   ; de = partial_array*
0A26   23                     INC   hl   
0A27   56                     LD   d,(hl)   
0A28   23                     INC   hl   
0A29   7B                     LD   a,e   ; if partial_array* == null skip
0A2A   B2                     OR   d   
0A2B   28 21                  JR   z,goFunc3   
0A2D   ED 43 00 56            LD   (vTemp1),bc   
0A31   22 02 56               LD   (vTemp2),hl   ; save bc,hl
0A34   EB                     EX   de,hl   ; hl = partial_array*
0A35   2B                     DEC   hl   ; bc = count
0A36   46                     LD   b,(hl)   
0A37   2B                     DEC   hl   
0A38   4E                     LD   c,(hl)   
0A39   23                     INC   hl   ; hl = array data*
0A3A   23                     INC   hl   
0A3B   18 06                  JR   goFunc2   ; push each item on stack
0A3D                GOFUNC1:      
0A3D   5E                     LD   e,(hl)   ; de = partial item
0A3E   23                     INC   hl   
0A3F   56                     LD   d,(hl)   
0A40   23                     INC   hl   
0A41   D5                     PUSH   de   ; push on stack
0A42   0B                     DEC   bc   
0A43                GOFUNC2:      
0A43   79                     LD   a,c   ; if count != 0 then loop
0A44   B0                     OR   b   
0A45   20 F6                  JR   nz,goFunc1   
0A47   ED 4B 00 56            LD   bc,(vTemp1)   ; restore bc
0A4B   2A 02 56               LD   hl,(vTemp2)   ; restore hl
0A4E                GOFUNC3:      
0A4E   5E                     LD   e,(hl)   ; de = block*
0A4F   23                     INC   hl   
0A50   56                     LD   d,(hl)   
0A51   23                     INC   hl   
0A52   ED 53 00 56            LD   (vTemp1),de   ; save block*
0A56   5E                     LD   e,(hl)   ; de = arg_list*
0A57   23                     INC   hl   
0A58   56                     LD   d,(hl)   
0A59   23                     INC   hl   
0A5A   EB                     EX   de,hl   ; hl = arg_list*
0A5B   ED 5B 00 56            LD   de,(vTemp1)   ; restore de = block*
0A5F   7D                     LD   a,l   ; if arg_list* == null a = 0
0A60   B4                     OR   h   
0A61   20 03                  JR   nz,goFunc4   
0A63   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0A64   18 0D                  JR   goFunc8   
0A66                GOFUNC4:      ; allocate locals
0A66   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0A67   18 03                  JR   goFunc6   
0A69                GOFUNC5:      ; loop
0A69   3B                     DEC   sp   
0A6A   3B                     DEC   sp   
0A6B   3D                     DEC   a   
0A6C                GOFUNC6:      
0A6C   B7                     OR   a   
0A6D   20 FA                  JR   nz,goFunc5   ; end loop
0A6F                GOFUNC7:      
0A6F   23                     INC   hl   ; a = num_args* x 2
0A70   7E                     LD   a,(hl)   
0A71   2B                     DEC   hl   
0A72   87                     ADD   a,a   ; a *= 2
0A73                GOFUNC8:      
0A73   C5                     PUSH   bc   ; push IP
0A74   44 4D                  LD   bc,hl   
0A76   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0A79   85                     ADD   a,l   
0A7A   6F                     LD   l,a   
0A7B   39                     ADD   hl,sp   
0A7C   18 98                  JR   goBlock2   
0A7E                DOLLAR:      
0A7E                HEXNUM:      
0A7E   21 00 00               LD   hl,0   ; Clear hl to accept the number
0A81                HEXNUM1:      
0A81   03                     INC   bc   
0A82   0A                     LD   a,(bc)   ; Get the character which is a numeral
0A83   CB 77                  BIT   6,a   ; is it uppercase alpha?
0A85   28 02                  JR   z,hexnum2   ; no a decimal
0A87   D6 07                  SUB   7   ; sub 7  to make $a - $F
0A89                HEXNUM2:      
0A89   D6 30                  SUB   $30   ; form decimal digit
0A8B   DA 76 0B               JP   c,num2   
0A8E   FE 10                  CP   $0F+1   
0A90   D2 76 0B               JP   nc,num2   
0A93   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0A94   29                     ADD   hl,hl   ; 4X
0A95   29                     ADD   hl,hl   ; 8X
0A96   29                     ADD   hl,hl   ; 16X
0A97   85                     ADD   a,l   ; add into bottom of hl
0A98   6F                     LD   l,a   
0A99   18 E6                  JR   hexnum1   
0A9B                UPCASE:      
0A9B   0A                     LD   a,(bc)   ; a = identifier char
0A9C   D6 41                  SUB   "A"   ; "A" = 0
0A9E   18 05                  JR   ident1   
0AA0                LOWCASE:      
0AA0   0A                     LD   a,(bc)   
0AA1   D6 61                  SUB   "a"   
0AA3   C6 1A                  ADD   a,26   
0AA5                IDENT1:      
0AA5   87                     ADD   a,a   ; l = a * 2
0AA6   6F                     LD   l,a   
0AA7   26 55                  LD   h,msb(vars)   
0AA9   22 F4 55               LD   (vPointer),hl   ; store address in setter
0AAC   5E                     LD   e,(hl)   
0AAD   23                     INC   hl   
0AAE   56                     LD   d,(hl)   
0AAF   D5                     PUSH   de   
0AB0   DD E9                  JP   (ix)   
0AB2                             ; if
0AB2                             ; condition then -- value
0AB2                QUESTION:      
0AB2                IF:          
0AB2   03                     INC   bc   
0AB3   0A                     LD   a,(bc)   
0AB4   FE 3F                  CP   "?"   
0AB6   28 06                  JR   z,ifte   
0AB8   0B                     DEC   bc   
0AB9   11 00 00               LD   de,NUL   ; NUL pointer for else
0ABC   18 01                  JR   ifte1   
0ABE                             ; ifte
0ABE                             ; condition then else -- value
0ABE                IFTE:        
0ABE   D1                     POP   de   ; de = else
0ABF                IFTE1:       
0ABF   E1                     POP   hl   ; hl = then
0AC0   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0AC1   7C                     LD   a,h   
0AC2   B5                     OR   l   
0AC3   E1                     POP   hl   ; hl = then
0AC4   CA E0 09               JP   z,go1   ; if z de = else
0AC7   EB                     EX   de,hl   ; condition = false, de = then
0AC8   C3 E0 09               JP   go1   
0ACB                             ; Z80 port input
0ACB                             ; port -- value
0ACB                INPUT:       
0ACB   E1                     POP   hl   
0ACC   59                     LD   e,c   ; save IP
0ACD   4D                     LD   c,l   
0ACE   ED 68                  IN   l,(c)   
0AD0   26 00                  LD   h,0   
0AD2   4B                     LD   c,e   ; restore IP
0AD3   E5                     PUSH   hl   
0AD4   DD E9                  JP   (ix)   
0AD6                KEY:         
0AD6   CD 81 00               CALL   getchar   
0AD9   26 00                  LD   h,0   
0ADB   6F                     LD   l,a   
0ADC   E5                     PUSH   hl   
0ADD   DD E9                  JP   (ix)   
0ADF                             ; /li literal
0ADF                             ; low level operation
0ADF                             ; reads the next two bytes and
0ADF                             ; pushes a word on the stack
0ADF                             ; -- value
0ADF                LITERAL:      
0ADF   03                     INC   bc   
0AE0   0A                     LD   a,(bc)   
0AE1   6F                     LD   l,a   
0AE2   03                     INC   bc   
0AE3   0A                     LD   a,(bc)   
0AE4   67                     LD   h,a   
0AE5   E5                     PUSH   hl   
0AE6   DD E9                  JP   (ix)   
0AE8                             ; Z80 port output
0AE8                             ; value port --
0AE8                OUTPUT:      
0AE8   E1                     POP   hl   
0AE9   59                     LD   e,c   ; save IP
0AEA   4D                     LD   c,l   
0AEB   E1                     POP   hl   
0AEC   ED 69                  OUT   (c),l   
0AEE   4B                     LD   c,e   ; restore IP
0AEF   DD E9                  JP   (ix)   
0AF1                             ; /mp map
0AF1                             ; func -- :s00bbOm1r
0AF1                          ;*Macro unroll: FUNC map, 0, "f"                            ; :f func
0AF1                MAP:         ; :f func
0AF1   CD DF 09               CALL   go   
0AF4   00 00                  DW   NUL   
0AF6   FD 0A                  DW   mapM_2090S1606   
0AF8   FA 0A                  DW   $+2   
0AFA   00                     DB   0   
0AFB   01 66                  .PSTR   "f"   
0AFD                MAPM_2090S1606:      
0AFD   7B                     DB   "{"   
0AFE   3A 73 7B               DB   ":s{"   ; :s source
0B01   3A 6B 74 7B            DB   ":kt{"   ; :kt sink, type
0B05   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0B0D   3A 64 74 7B            DB   ":dt{"   
0B11   31 25 74 3D 3D 7B 25 64 20 25 66 5E 7D 7B 25 64 7D 3F 3F DB   "1%t=={%d %f^}{%d}??"   ; if t == 1 pass data through func else raw
0B24   25 74 20 25 6B 5E      DB   "%t %k^"   ; send data to sink
0B2A   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   ; init source
0B32   7D 3B                  DB   "};"   
0B34   7D 3B                  DB   "};"   
0B36   7D                     DB   "}"   
0B37   00                     DB   0   
0B38                STAR:        
0B38                MUL:         
0B38   D1                     POP   de   ; get first value
0B39   E1                     POP   hl   
0B3A                MUL2:        
0B3A   C5                     PUSH   bc   ; Preserve the IP
0B3B   44 4D                  LD   bc,hl   ; bc = 2nd value
0B3D   21 00 00               LD   hl,0   
0B40   3E 10                  LD   a,16   
0B42                MUL3:        
0B42   29                     ADD   hl,hl   
0B43   CB 13                  RL   e   
0B45   CB 12                  RL   d   
0B47   30 04                  JR   nc,$+6   
0B49   09                     ADD   hl,bc   
0B4A   30 01                  JR   nc,$+3   
0B4C   13                     INC   de   
0B4D   3D                     DEC   a   
0B4E   20 F2                  JR   nz,mul3   
0B50   C1                     POP   bc   ; Restore the IP
0B51   C3 9B 03               JP   add3   
0B54                NUM:         
0B54   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B57   0A                     LD   a,(bc)   ; Get numeral or -
0B58   FE 2D                  CP   "-"   
0B5A   20 01                  JR   nz,num0   
0B5C   03                     INC   bc   ; move to next char, no flags affected
0B5D                NUM0:        
0B5D   08                     EX   af,af'   ; save zero flag = 0 for later
0B5E                NUM1:        
0B5E   0A                     LD   a,(bc)   ; read digit
0B5F   D6 30                  SUB   "0"   ; less than 0?
0B61   38 13                  JR   c,num2   ; not a digit, exit loop
0B63   FE 0A                  CP   10   ; greater that 9?
0B65   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B67   03                     INC   bc   ; inc IP
0B68   54 5D                  LD   de,hl   ; multiply hl * 10
0B6A   29                     ADD   hl,hl   
0B6B   29                     ADD   hl,hl   
0B6C   19                     ADD   hl,de   
0B6D   29                     ADD   hl,hl   
0B6E   85                     ADD   a,l   ; add digit in a to hl
0B6F   6F                     LD   l,a   
0B70   3E 00                  LD   a,0   
0B72   8C                     ADC   a,h   
0B73   67                     LD   h,a   
0B74   18 E8                  JR   num1   
0B76                NUM2:        
0B76   0B                     DEC   bc   
0B77   08                     EX   af,af'   ; restore zero flag
0B78   20 07                  JR   nz,num3   
0B7A   EB                     EX   de,hl   ; negate the value of hl
0B7B   21 00 00               LD   hl,0   
0B7E   B7                     OR   a   ; jump to sub2
0B7F   ED 52                  SBC   hl,de   
0B81                NUM3:        
0B81   E5                     PUSH   hl   ; Put the number on the stack
0B82   DD E9                  JP   (ix)   ; and process the next character
0B84                             ; |> pipeStream
0B84                             ; source sink -- source
0B84                             ; connects a sink with a source
0B84                PIPESTREAM:      
0B84   E1                     POP   hl   ; hl = sink
0B85   D1                     POP   de   ; de = src
0B86   E5                     PUSH   hl   ; push sink
0B87   21 00 00               LD   hl,0   ; push type = greet
0B8A   E5                     PUSH   hl   
0B8B   C3 E0 09               JP   go1   ; go to address in de
0B8E                RPAREN:      
0B8E   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0B91   FD 46 09               LD   b,(iy+9)   
0B94   DD E9                  JP   (ix)   
0B96                             ; shiftLeft
0B96                             ; value count -- value2          shift left count places
0B96                SHIFTLEFT:      
0B96   50 59                  LD   de,bc   ; save IP
0B98   C1                     POP   bc   ; bc = count
0B99   41                     LD   b,c   ; b = loop counter
0B9A   E1                     POP   hl   
0B9B   04                     INC   b   ; test for counter=0 case
0B9C   18 01                  JR   shiftLeft2   
0B9E                SHIFTLEFT1:      
0B9E   29                     ADD   hl,hl   ; left shift hl
0B9F                SHIFTLEFT2:      
0B9F   10 FD                  DJNZ   shiftLeft1   
0BA1   E5                     PUSH   hl   
0BA2   42 4B                  LD   bc,de   ; restore IP
0BA4   DD E9                  JP   (ix)   
0BA6                             ; shiftRight
0BA6                             ; value count -- value2          shift left count places
0BA6                SHIFTRIGHT:      
0BA6   50 59                  LD   de,bc   ; save IP
0BA8   C1                     POP   bc   ; bc = count
0BA9   41                     LD   b,c   ; b = loop counter
0BAA   E1                     POP   hl   
0BAB   04                     INC   b   ; test for counter=0 case
0BAC   18 04                  JR   shiftRight2   
0BAE                SHIFTRIGHT1:      
0BAE   CB 3C                  SRL   h   ; right shift hl
0BB0   CB 1D                  RR   l   
0BB2                SHIFTRIGHT2:      
0BB2   10 FA                  DJNZ   shiftRight1   
0BB4   E5                     PUSH   hl   
0BB5   42 4B                  LD   bc,de   ; restore IP
0BB7   DD E9                  JP   (ix)   
0BB9                             ; string
0BB9                             ; -- ptr                        ; points to start of string chars,
0BB9                             ; length is stored at start - 2 bytes
0BB9                DQUOTE:      
0BB9                STRING:      
0BB9   2A F0 55               LD   hl,(vHeapPtr)   ; hl = heap*
0BBC   23                     INC   hl   ; skip length field to start
0BBD   23                     INC   hl   
0BBE   E5                     PUSH   hl   ; save start of string
0BBF   03                     INC   bc   ; point to next char
0BC0   18 03                  JR   string2   
0BC2                STRING1:      
0BC2   77                     LD   (hl),a   
0BC3   23                     INC   hl   ; increase count
0BC4   03                     INC   bc   ; point to next char
0BC5                STRING2:      
0BC5   0A                     LD   a,(bc)   
0BC6   FE 22                  CP   DQ   ; " is the string terminator
0BC8   28 04                  JR   z,string3   
0BCA   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0BCC   20 F4                  JR   nz,string1   
0BCE                STRING3:      
0BCE   AF                     XOR   a   ; write NUL to terminate string
0BCF   77                     LD   (hl),a   ; hl = end of string
0BD0   23                     INC   hl   
0BD1   22 F0 55               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0BD4   2B                     DEC   hl   ; hl = end of string without terminator
0BD5   D1                     POP   de   ; de = start of string
0BD6   D5                     PUSH   de   ; return start of string
0BD7   B7                     OR   a   ; hl = length bytes, de = start of string
0BD8   ED 52                  SBC   hl,de   
0BDA   EB                     EX   de,hl   
0BDB   2B                     DEC   hl   ; write length bytes to length field at start - 2
0BDC   72                     LD   (hl),d   
0BDD   2B                     DEC   hl   
0BDE   73                     LD   (hl),e   
0BDF   DD E9                  JP   (ix)   
0BE1                MINUS:       ; negative sign or subtract
0BE1   03                     INC   bc   ; check if sign of a number
0BE2   0A                     LD   a,(bc)   
0BE3   0B                     DEC   bc   
0BE4   FE 30                  CP   "0"   
0BE6   38 05                  JR   c,sub   
0BE8   FE 3A                  CP   "9"+1   
0BEA   DA 44 03               JP   c,num_   
0BED                SUB:         ; Subtract the value 2nd on stack from top of stack
0BED   03                     INC   bc   
0BEE   FE 2D                  CP   "-"   
0BF0   20 05                  JR   nz,sub1   
0BF2   E1                     POP   hl   
0BF3   2B                     DEC   hl   
0BF4   C3 D1 04               JP   assign0   
0BF7                SUB1:        
0BF7   0B                     DEC   bc   
0BF8   D1                     POP   de   
0BF9   E1                     POP   hl   
0BFA   B7                     OR   a   
0BFB   ED 52                  SBC   hl,de   
0BFD   C3 9B 03               JP   add3   
0C00                             ; /pb printBuffer
0C00                             ; --
0C00                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
0C00                          ;*Macro unroll: FUNC printBuffer, 0, "a"
0C00                PRINTBUFFER:      
0C00   CD DF 09               CALL   go   
0C03   00 00                  DW   NUL   
0C05   0C 0C                  DW   printBufferM_2270S1796   
0C07   09 0C                  DW   $+2   
0C09   00                     DB   0   
0C0A   01 61                  .PSTR   "a"   
0C0C                PRINTBUFFERM_2270S1796:      
0C0C   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0C26                             ; printChars
0C26                             ; char* len --
0C26                PRINTCHARS:      
0C26   E1                     POP   hl   ; hl = count
0C27   D1                     POP   de   ; de = char*
0C28   CD 33 0C               CALL   printChars2   
0C2B   DD E9                  JP   (ix)   
0C2D                PRINTCHARS1:      
0C2D   1A                     LD   a,(de)   ; print char at char*
0C2E   CD 85 00               CALL   putchar   
0C31   13                     INC   de   ; char*++
0C32   2B                     DEC   hl   ; count--
0C33                PRINTCHARS2:      
0C33   7D                     LD   a,l   ; count == 0?
0C34   B4                     OR   h   
0C35   C8                     RET   z   
0C36   18 F5                  JR   printChars1   ; if not loop
0C38                             ; /pk print stack
0C38                             ; --
0C38                PRINTSTACK:      
0C38                             ;     ld (vTemp1),bc
0C38                             ;     call printStr
0C38                             ;     .cstr "=> "
0C38                             ;     ld hl,STACK
0C38                             ;     sbc hl,sp
0C38                             ;     srl h
0C38                             ;     rr l
0C38                             ;     ld bc,hl
0C38                             ;     ld hl,STACK
0C38                             ;     jr printStack2
0C38                             ; printStack1:
0C38                             ;     dec bc
0C38                             ;     dec hl
0C38                             ;     ld d,(hl)
0C38                             ;     dec hl
0C38                             ;     ld e,(hl)
0C38                             ;     ex de,hl
0C38                             ;     call prthex
0C38                             ;     ex de,hl
0C38                             ;     ld a," "
0C38                             ;     call putchar
0C38                             ; printStack2:
0C38                             ;     ld a,c
0C38                             ;     or b
0C38                             ;     jr nz,printStack1
0C38                             ;     call prompt
0C38                             ;     ld bc,(vTemp1)
0C38   DD E9                  JP   (ix)   
0C3A                RECUR:       
0C3A   E1                     POP   hl   
0C3B   22 F2 55               LD   (vRecur),hl   
0C3E   DD E9                  JP   (ix)   
0C40                REMAIN:      
0C40   2A F6 55               LD   hl,(vRemain)   
0C43   E5                     PUSH   hl   
0C44   DD E9                  JP   (ix)   
0C46                SIZE:        
0C46   E1                     POP   hl   
0C47   2B                     DEC   hl   ; msb size
0C48   56                     LD   d,(hl)   
0C49   2B                     DEC   hl   ; lsb size
0C4A   5E                     LD   e,(hl)   
0C4B   D5                     PUSH   de   
0C4C   DD E9                  JP   (ix)   
0C4E                CONSTBUFSTART:      
0C4E   11 00 54               LD   de,BUF   
0C51   18 28                  JR   constant   
0C53                CONSTHEAPSTART:      
0C53   11 1C 56               LD   de,HEAP   
0C56   18 23                  JR   constant   
0C58                CONSTTIBSTART:      
0C58   11 00 53               LD   de,TIB   
0C5B   18 1E                  JR   constant   
0C5D                VARBUFPTR:      
0C5D   ED 5B EC 55            LD   de,(vBufPtr)   
0C61   21 EC 55               LD   hl,vBufPtr   
0C64   18 12                  JR   variable   
0C66                VARHEAPPTR:      
0C66   ED 5B F0 55            LD   de,(vHeapPtr)   
0C6A   21 F0 55               LD   hl,vHeapPtr   
0C6D   18 09                  JR   variable   
0C6F                VARTIBPTR:      
0C6F   ED 5B EA 55            LD   de,(vTIBPtr)   
0C73   21 EA 55               LD   hl,vTIBPtr   
0C76   18 00                  JR   variable   
0C78                VARIABLE:      
0C78   22 F4 55               LD   (vPointer),hl   
0C7B                CONSTANT:      
0C7B   D5                     PUSH   de   
0C7C   DD E9                  JP   (ix)   
0C7E                             ; 
0C7E                FILTER:      
0C7E                SCAN:        
0C7E   DD E9                  JP   (ix)   
0C80                             ;*******************************************************************
0C80                             ; general routines
0C80                             ;*******************************************************************
0C80                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0C80                FLUSHBUFFER:      
0C80   F5                     PUSH   af   
0C81   D5                     PUSH   de   
0C82   E5                     PUSH   hl   
0C83   2A EC 55               LD   hl,(vBufPtr)   
0C86   11 00 54               LD   de,BUF   
0C89   ED 53 EC 55            LD   (vBufPtr),de   
0C8D   B7                     OR   a   
0C8E   ED 52                  SBC   hl,de   
0C90   CD 33 0C               CALL   printChars2   
0C93   E1                     POP   hl   
0C94   D1                     POP   de   
0C95   F1                     POP   af   
0C96   C9                     RET      
0C97                             ; followed by a table
0C97                             ; db char
0C97                             ; dw addr
0C97                             ; the final item must have char == NUL
0C97                JUMPTABLE:      
0C97   03                     INC   bc   
0C98   E1                     POP   hl   
0C99                JUMPTABLE0:      
0C99   AF                     XOR   a   
0C9A   BE                     CP   (hl)   
0C9B   28 09                  JR   z,jumpTable1   
0C9D   0A                     LD   a,(bc)   
0C9E   BE                     CP   (hl)   
0C9F   28 06                  JR   z,jumpTable2   
0CA1   23                     INC   hl   
0CA2   23                     INC   hl   
0CA3   23                     INC   hl   
0CA4   18 F3                  JR   jumpTable0   
0CA6                JUMPTABLE1:      
0CA6   0B                     DEC   bc   
0CA7                JUMPTABLE2:      
0CA7   23                     INC   hl   
0CA8   5E                     LD   e,(hl)   
0CA9   23                     INC   hl   
0CAA   56                     LD   d,(hl)   
0CAB   EB                     EX   de,hl   
0CAC   E9                     JP   (hl)   
0CAD                PRTSTR0:      
0CAD   CD 85 00               CALL   putchar   
0CB0   23                     INC   hl   
0CB1                PRTSTR:      
0CB1   7E                     LD   a,(hl)   
0CB2   B7                     OR   a   
0CB3   20 F8                  JR   nz,prtstr0   
0CB5   C9                     RET      
0CB6                             ; **************************************************************************
0CB6                             ; calculate nesting value
0CB6                             ; a is char to be tested,
0CB6                             ; e is the nesting value (initially 0)
0CB6                             ; e is increased by ( and [
0CB6                             ; e is decreased by ) and ]
0CB6                             ; e has its bit 7 toggled by `
0CB6                             ; limited to 127 levels
0CB6                             ; **************************************************************************
0CB6                NESTING:      
0CB6   FE 22                  CP   DQ   ; quote char
0CB8   28 06                  JR   z,nesting0   
0CBA   FE 60                  CP   "`"   ; quote char
0CBC   28 02                  JR   z,nesting0   
0CBE   18 0A                  JR   nesting1   
0CC0                NESTING0:      
0CC0   CB 7B                  BIT   7,e   
0CC2   28 03                  JR   z,nesting1a   
0CC4   CB BB                  RES   7,e   
0CC6   C9                     RET      
0CC7                NESTING1A:      
0CC7   CB FB                  SET   7,e   
0CC9   C9                     RET      
0CCA                NESTING1:      
0CCA   CB 7B                  BIT   7,e   
0CCC   C0                     RET   nz   
0CCD   FE 7B                  CP   "{"   
0CCF   28 08                  JR   z,nesting2   
0CD1   FE 5B                  CP   "["   
0CD3   28 04                  JR   z,nesting2   
0CD5   FE 28                  CP   "("   
0CD7   20 02                  JR   nz,nesting3   
0CD9                NESTING2:      
0CD9   1C                     INC   e   
0CDA   C9                     RET      
0CDB                NESTING3:      
0CDB   FE 7D                  CP   "}"   
0CDD   28 07                  JR   z,nesting4   
0CDF   FE 5D                  CP   "]"   
0CE1   28 03                  JR   z,nesting4   
0CE3   FE 29                  CP   ")"   
0CE5   C0                     RET   nz   
0CE6                NESTING4:      
0CE6   1D                     DEC   e   
0CE7   C9                     RET      
0CE8                PROMPT:      
0CE8   CD F8 0C               CALL   printStr   
0CEB   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0CF0   C9                     RET      
0CF1                CRLF:        
0CF1   CD F8 0C               CALL   printStr   
0CF4   0D 0A 00               .CSTR   "\r\n"   
0CF7   C9                     RET      
0CF8                             ; prints a null teminated string
0CF8                             ; the string should be immediately following the call
0CF8                PRINTSTR:      
0CF8   E3                     EX   (sp),hl   ; swap			
0CF9   CD B1 0C               CALL   prtstr   
0CFC   23                     INC   hl   ; inc past NUL
0CFD   E3                     EX   (sp),hl   ; put it back	
0CFE   C9                     RET      
0CFF                TITLESTR:      
0CFF   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0D13                INIT:        
0D13   21 FF 0C               LD   hl,titleStr   
0D16   11 08 56               LD   de,titleBuf   
0D19   06 14                  LD   b,20   
0D1B                INIT1:       
0D1B   1A                     LD   a,(de)   
0D1C   BE                     CP   (hl)   
0D1D   20 17                  JR   nz,coldBoot0   
0D1F   13                     INC   de   
0D20   23                     INC   hl   
0D21   10 F8                  DJNZ   init1   
0D23                WARMINIT:      
0D23   ED 4B F8 55            LD   bc,(vSavedIP)   ; restore IP
0D27   ED 7B FA 55            LD   sp,(vSavedSP)   ; restore SP
0D2B   DD 2A FC 55            LD   ix,(vSavedNext)   ; restore Next
0D2F   FD 2A FE 55            LD   iy,(vSavedBP)   ; restore BP
0D33   C3 6D 0D               JP   start1   
0D36                COLDBOOT0:      
0D36   21 FF 0C               LD   hl,titleStr   ; copy titleStr to titleBuf
0D39   11 08 56               LD   de,titleBuf   
0D3C   06 14                  LD   b,20   
0D3E   ED B0                  LDIR      
0D40                COLDINIT:      
0D40   21 80 01               LD   hl,isysVars   
0D43   11 E6 55               LD   de,sysVars   
0D46   01 10 00               LD   bc,8 * 2   
0D49   ED B0                  LDIR      
0D4B   21 00 55               LD   hl,vars   ; 52 vars LO HI
0D4E   06 34                  LD   b,26*2   
0D50   AF                     XOR   a   
0D51                COLDBOOT1:      
0D51   77                     LD   (hl),a   
0D52   23                     INC   hl   
0D53   10 FC                  DJNZ   coldBoot1   
0D55   DD 2A EE 55            LD   ix,(vNext)   
0D59   FD 21 00 53            LD   iy,STACK   
0D5D   C9                     RET      
0D5E                COLDSTART:      
0D5E   31 00 53               LD   sp,STACK   
0D61   CD 36 0D               CALL   coldBoot0   
0D64   C3 6D 0D               JP   start1   
0D67                START:       
0D67   31 00 53               LD   sp,STACK   ; start Monty
0D6A   CD 13 0D               CALL   init   ; setups
0D6D                START1:      
0D6D   21 08 56               LD   hl,titleBuf   
0D70   CD B1 0C               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0D73                INTERPRET:      
0D73   CD 80 0C               CALL   flushBuffer   
0D76   CD E8 0C               CALL   prompt   
0D79   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0D7C   21 00 53               LD   hl,TIB   
0D7F   22 EA 55               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0D82                INTERPRET2:      ; calculate nesting
0D82   1E 00                  LD   e,0   ; initilize nesting value
0D84   C5                     PUSH   bc   ; save offset into TIB,
0D85                             ; bc is also the count of chars in TIB
0D85   21 00 53               LD   hl,TIB   ; hl is start of TIB
0D88   18 0B                  JR   interpret4   
0D8A                INTERPRET3:      
0D8A   3E 33                  LD   a,"3"   
0D8C   CD 85 00               CALL   putchar   
0D8F   7E                     LD   a,(hl)   ; a = char in TIB
0D90   23                     INC   hl   ; inc pointer into TIB
0D91   0B                     DEC   bc   ; dec count of chars in TIB
0D92   CD B6 0C               CALL   nesting   ; update nesting value
0D95                INTERPRET4:      
0D95   79                     LD   a,c   ; is count zero?
0D96   B0                     OR   b   
0D97   20 F1                  JR   nz,interpret3   ; if not loop
0D99   C1                     POP   bc   ; restore offset into TIB
0D9A                INTERPRET5:      
0D9A   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0D9D   FE 20                  CP   $20   ; compare to space
0D9F   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0DA1   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0DA3                             ; ???? NEEDED?
0DA3   28 3B                  JR   z,interpret8   
0DA5   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0DA7   28 24                  JR   z,interpret7   ; if anything else its macro/control
0DA9   FE 05                  CP   CTRL_E   
0DAB   CA 3E 0E               JP   z,edit_   
0DAE   FE 08                  CP   CTRL_H   
0DB0   CA 2E 0E               JP   z,backSpace_   
0DB3   FE 0A                  CP   CTRL_J   
0DB5   CA 56 0E               JP   z,reEdit_   
0DB8   FE 13                  CP   CTRL_S   
0DBA   CA 59 0E               JP   z,printStack_   
0DBD                             ; DB     lsb(edit_)       ; ENQ ^E  5
0DBD                             ; DB     lsb(reedit_)     ; LF  ^J 10
0DBD                             ; DB     lsb(list_)       ; FF  ^L 12
0DBD                             ; DB     lsb(printStack_) ; DLE ^P 16
0DBD                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0DBD                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0DBD                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0DBD                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0DBD                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0DBD                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0DBD                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0DBD                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0DBD                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0DBD                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0DBD                INTERPRET5A:      
0DBD                             ; ld (vTIBPtr),bc
0DBD                             ; ld bc,(vTIBPtr)
0DBD   18 C3                  JR   interpret2   
0DBF                INTERPRET6:      
0DBF   21 00 53               LD   hl,TIB   
0DC2   09                     ADD   hl,bc   
0DC3   77                     LD   (hl),a   ; store the character in textbuf
0DC4   03                     INC   bc   
0DC5   CD 85 00               CALL   putchar   ; echo character to screen
0DC8   CD B6 0C               CALL   nesting   
0DCB   18 CD                  JR   interpret5   ; wait for next character
0DCD                INTERPRET7:      
0DCD   21 00 53               LD   hl,TIB   
0DD0   09                     ADD   hl,bc   
0DD1   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0DD3   23                     INC   hl   
0DD4   36 0A                  LD   (hl),"\n"   
0DD6   23                     INC   hl   
0DD7   03                     INC   bc   
0DD8   03                     INC   bc   
0DD9   CD F1 0C               CALL   crlf   ; echo character to screen
0DDC   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0DDD   B7                     OR   a   
0DDE   20 BA                  JR   nz,interpret5   
0DE0                INTERPRET8:      
0DE0   21 00 53               LD   hl,TIB   
0DE3   09                     ADD   hl,bc   
0DE4   22 EA 55               LD   (vTIBPtr),hl   
0DE7   01 00 53               LD   bc,TIB   
0DEA   ED 43 F8 55            LD   (vSavedIP),bc   ; save IP
0DEE   ED 73 FA 55            LD   (vSavedSP),sp   ; save SP
0DF2   DD 22 FC 55            LD   (vSavedNext),ix   ; save Next
0DF6   FD 22 FE 55            LD   (vSavedBP),iy   ; save BP
0DFA   0B                     DEC   bc   
0DFB                NEXT:        
0DFB   03                     INC   bc   ; Increment the IP
0DFC   0A                     LD   a,(bc)   ; Get the next character and dispatch
0DFD   FE 20                  CP   " "   ; whitespace?
0DFF   28 FA                  JR   z,next   ; space? ignore
0E01   38 09                  JR   c,next1   
0E03   D6 20                  SUB   " "   
0E05   6F                     LD   l,a   ; index into table
0E06   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0E08   6E                     LD   l,(hl)   ; get low jump address
0E09   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0E0B   E9                     JP   (hl)   ; Jump to routine
0E0C                NEXT1:       
0E0C   FE 00                  CP   NUL   ; end of input string?
0E0E   28 03                  JR   z,exit   
0E10   C3 73 0D               JP   interpret   ; no, other whitespace, macros?
0E13                EXIT:        
0E13   03                     INC   bc   
0E14   60 69                  LD   hl,bc   
0E16   E9                     JP   (hl)   
0E17                RUN:         
0E17   C1                     POP   bc   
0E18   0B                     DEC   bc   
0E19   DD E9                  JP   (ix)   
0E1B                ERROR:       
0E1B   CD 17 0E               CALL   run   
0E1E   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQ,"Error ",DQ,".s .",0   
0E2B   C3 73 0D               JP   interpret   
0E2E                BACKSPACE_:      
0E2E   79                     LD   a,c   
0E2F   B0                     OR   b   
0E30   CA 82 0D               JP   z,interpret2   
0E33   0B                     DEC   bc   
0E34   CD F8 0C               CALL   printStr   
0E37   08 20 08 00            .CSTR   "\b \b"   
0E3B   C3 82 0D               JP   interpret2   
0E3E                             ; edit
0E3E                EDIT_:       
0E3E   CD 17 0E               CALL   run   
0E41   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQ,"var?",DQ,".s /k/ad .h",0   
0E53   C3 73 0D               JP   interpret   
0E56                REEDIT_:      
0E56   C3 73 0D               JP   interpret   
0E59                PRINTSTACK_:      
0E59   CD 17 0E               CALL   run   
0E5C   2F 70 6B 00            .CSTR   "/pk"   
0E60   C3 73 0D               JP   interpret   
0E63                             ; editDef:
0E63                             ;     pop hl                      ; pop ret address
0E63                             ;     ex (sp),hl                  ; swap with TOS
0E63                             ;     push hl                     ; dup TOS
0E63                             ;     ld a,l                      ; a = ident
0E63                             ;     ld de,TIB                   ; de = start of TIB
0E63                             ;     ld (vTIBPtr),de             ; update TIB*
0E63                             ;     push ix                     ; save NEXT
0E63                             ;     ld ix,editDef0              ; NEXT = editDef0
0E63                             ;     jp lookupRef                ; convert letter into address
0E63                             ; editDef0:
0E63                             ;     ld e,(hl)                   ; de = (hl++)
0E63                             ;     inc hl
0E63                             ;     ld d,(hl)
0E63                             ;     ld a,d                      ; de == 0 ?
0E63                             ;     or e
0E63                             ;     jr z,editDef4
0E63                             ;     ld ix,editDef3              ; NEXT = editDef3
0E63                             ;     ex de,hl
0E63                             ;     ld a,(hl)
0E63                             ;     cp "{"
0E63                             ;     jr nz,editDef1
0E63                             ;     jp editBlock0               ; convert letter into address
0E63                             ; editDef1:
0E63                             ;     cp "("
0E63                             ;     jr nz,editDef2
0E63                             ;     jp editBlock0               ; convert letter into address
0E63                             ; editDef2:
0E63                             ;     jp editFunc
0E63                             ; editDef3:
0E63                             ;     ld a," "                    ; write assign
0E63                             ;     call writeChar
0E63                             ;     pop hl                      ; a = ident
0E63                             ;     ld a,l
0E63                             ;     call writeChar
0E63                             ;     ld a,"="                    ; write assign
0E63                             ;     call writeChar
0E63                             ;     ld ix,editDef4              ; NEXT = editDef4
0E63                             ;     jp printTIB
0E63                             ; editDef4:
0E63                             ;     pop ix                      ; restore NEXT
0E63                             ;     jp (ix)
0E63                             ; writeChar:
0E63                             ;     ld de,(vTIBPtr)             ; de = TIB*
0E63                             ;     ld (de),a                   ; write ident
0E63                             ;     inc de
0E63                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0E63                             ;     ret
0E63                             ; ; printTIB
0E63                             ; printTIB:
0E63                             ;     ld hl,(vTIBPtr)
0E63                             ;     ld de,TIB
0E63                             ;     or a
0E63                             ;     sbc hl,de
0E63                             ;     jp printTIB2
0E63                             ; printTIB1:
0E63                             ;     ld a,(de)
0E63                             ;     call putchar
0E63                             ; printTIB2:
0E63                             ;     ld a,l
0E63                             ;     or h
0E63                             ;     jr nz,printTIB1
0E63                             ;     jp (ix)
0E63                             ; editBlock:
0E63                             ;     pop hl                      ; hl = block*
0E63                             ; editBlock0:
0E63                             ;     push ix                     ; save next
0E63                             ;     push hl                     ; push block*
0E63                             ;     push hl                     ; push block*
0E63                             ;     ld ix,(editBlock2)
0E63                             ;     jp blockLength
0E63                             ; editBlock1:
0E63                             ;     pop hl                      ; bc = length, (sp) = IP
0E63                             ;     pop de                      ; de = block*
0E63                             ;     ld a,l
0E63                             ;     or h
0E63                             ;     jr z,editBlock2
0E63                             ;     push bc
0E63                             ;     ld bc,hl
0E63                             ;     ex de,hl                    ; hl = block*
0E63                             ;     ld de,(vTIBPtr)              ; de = TIB*
0E63                             ;     ldir                        ; copy block to TIB
0E63                             ;     ld (vTIBPtr),de              ; save TIB*
0E63                             ;     pop bc
0E63                             ; editBlock2:
0E63                             ;     pop ix                      ; restore next
0E63                             ;     jp (ix)
0E63                             ; editFunc:
0E63                             ;     jp (ix)
0E63                             ; editArray:
0E63                             ;     jp (ix)
0E63                             ; editArglist:
0E63                             ;     jp (ix)
0E63                             ; ; blockLength
0E63                             ; ; addr1 -- length
0E63                             ; blockLength:
0E63                             ;     pop hl                      ; block*
0E63                             ;     push hl                     ; save block*
0E63                             ;     inc hl                      ; skip first char
0E63                             ;     ld d,1                      ; increase nesting
0E63                             ; blockLength1:                   ; Skip to end of definition
0E63                             ;     ld a,(hl)                   ; Get the next character
0E63                             ;     inc hl                      ; Point to next character
0E63                             ;     cp " " + 1                  ; ignore whitespace
0E63                             ;     jr c,blockLength1
0E63                             ;     cp ")"
0E63                             ;     jr z,blockLength4
0E63                             ;     cp "}"
0E63                             ;     jr z,blockLength4
0E63                             ;     cp "]"
0E63                             ;     jr z,blockLength4
0E63                             ;     cp "("
0E63                             ;     jr z,blockLength2
0E63                             ;     cp "{"
0E63                             ;     jr z,blockLength2
0E63                             ;     cp "["
0E63                             ;     jr z,blockLength2
0E63                             ;     cp "'"
0E63                             ;     jr z,blockLength3
0E63                             ;     cp "`"
0E63                             ;     jr z,blockLength3
0E63                             ;     cp DQ
0E63                             ;     jr z,blockLength3
0E63                             ;     jr blockLength1
0E63                             ; blockLength2:
0E63                             ;     inc d
0E63                             ;     jr blockLength1
0E63                             ; blockLength4:
0E63                             ;     dec d
0E63                             ;     jr nz, blockLength1         ; get the next element
0E63                             ; blockLength3:
0E63                             ;     ld a,$80
0E63                             ;     xor d
0E63                             ;     ld d,a
0E63                             ;     jr nz, blockLength1
0E63                             ;     pop hl                      ; hl = block*
0E63                             ;     or a
0E63                             ;     sbc hl,de
0E63                             ;     push hl
0E63                             ;     jp (ix)
0E63                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0E63                             ; \a start of stack \#3 depth \b base \$ prompt
0E63                             ; DW dStack               ; a vS0 start of datastack			
0E63                             ; DW FALSE                ; b vBase16
0E63                             ; DW 0                    ; c vTIBPtr an offset to the tib
0E63                             ; DW 0                    ; d
0E63                             ; DW 65                   ; e vLastDef "A" last command u defined
0E63                             ; DW 0                    ; f
0E63                             ; DW page6                ; g 256 bytes limits
0E63                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0E63                          ;*Macro unroll: FUNC f1, 2, "besIA"                         ; range source
0E63                F1:          ; range source
0E63   CD DF 09               CALL   go   
0E66   00 00                  DW   NUL   
0E68   73 0E                  DW   f1M_2816S12   
0E6A   6C 0E                  DW   $+2   
0E6C   02                     DB   2   
0E6D   05 62 65 73 49 41      .PSTR   "besIA"   
0E73                F1M_2816S12:      
0E73   7B                     DB   "{"   
0E74   5B 25 62 20 2F 74 5D 20 25 49 3D DB   "[%b /t] %I="   ; init mutable I [index active]
0E7F   3A 6B 74 7B            DB   ":kt{"   
0E83   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
0E8B   3A 64 74 7B            DB   ":dt{"   ; return talkback to receive data
0E8F   25 49 31 23 2F 62 72   DB   "%I1#/br"   ; if not active don't send
0E96   25 49 30 23 20 25 41 3D DB   "%I0# %A="   
0E9E   25 73 20 25 49 30 23 20 2B 20 25 49 30 23 3D DB   "%s %I0# + %I0#="   ; inc value of I by s
0EAD   31 25 74 3D 3D 2F 62 72 DB   "1%t==/br"   ; break if type != 0
0EB5   25 41 20 25 65 20 3C   DB   "%A %e <"   ; cond: in range?
0EBC   7B 25 41 20 31 20 25 6B 2F 72 63 7D DB   "{%A 1 %k/rc}"   ; ifte args to send to sink,
0EC8   7B 2F 66 20 25 49 31 23 3D 20 30 20 32 20 25 6B 2F 72 63 7D 20 DB   "{/f %I1#= 0 2 %k/rc} "   ; note: /rc recur
0EDD   3F 3F 20               DB   "?? "   
0EE0   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
0EE8   7D 3B                  DB   "};"   
0EEA   7D                     DB   "}"   
0EEB   00                     DB   0   
0EEC                          ;*Macro unroll: FUNC f2, 0, "sf"                            ; map
0EEC                F2:          ; map
0EEC   CD DF 09               CALL   go   
0EEF   00 00                  DW   NUL   
0EF1   F9 0E                  DW   f2M_2834S31   
0EF3   F5 0E                  DW   $+2   
0EF5   00                     DB   0   
0EF6   02 73 66               .PSTR   "sf"   
0EF9                F2M_2834S31:      
0EF9   7B                     DB   "{"   
0EFA   3A 6B 74 7B            DB   ":kt{"   ; line 24
0EFE   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
0F06   3A 64 74 7B            DB   ":dt{"   ; call source with tb
0F0A   7B 31 25 74 3D 3D 2F 62 72 20 25 64 20 25 66 5E 20 25 74 20 25 6B 2F 72 63 7D 5E DB   "{1%t==/br %d %f^ %t %k/rc}^"   ; todo: add function
0F25   7B 31 25 74 21 3D 2F 62 72 20 25 64 20 25 74 20 25 6B 2F 72 63 7D 5E DB   "{1%t!=/br %d %t %k/rc}^"   
0F3C   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   
0F44   7D 3B                  DB   "};"   
0F46   7D                     DB   "}"   
0F47   00                     DB   0   
0F48                          ;*Macro unroll: FUNC f3, 1, "spT"                           ; forEach
0F48                F3:          ; forEach
0F48   CD DF 09               CALL   go   
0F4B   00 00                  DW   NUL   
0F4D   56 0F                  DW   f3M_2845S43   
0F4F   51 0F                  DW   $+2   
0F51   01                     DB   1   
0F52   03 73 70 54            .PSTR   "spT"   
0F56                F3M_2845S43:      
0F56   7B                     DB   "{"   
0F57   5B 30 5D 25 54 3D      DB   "[0]%T="   
0F5D   3A 64 74 7B            DB   ":dt{"   ; return talkback to receive data
0F61   7B 20 30 25 74 3D 3D 2F 62 72 20 25 64 20 25 54 30 23 3D 20 7D 5E DB   "{ 0%t==/br %d %T0#= }^"   ; 0: store talkback
0F77   25 54 30 23 2F 62 72   DB   "%T0#/br"   
0F7E   7B 20 31 25 74 3D 3D 2F 62 72 20 25 64 20 25 70 5E 20 7D 5E DB   "{ 1%t==/br %d %p^ }^"   ; 1: send data to proc
0F92   7B 20 32 25 74 21 3D 2F 62 72 20 30 20 31 20 25 54 30 23 5E 20 7D 5E DB   "{ 2%t!=/br 0 1 %T0#^ }^"   ; 0 or 1: get next data item
0FA9   7B 20 32 25 74 3D 3D 2F 62 72 20 30 20 25 54 30 23 3D 20 7D 5E DB   "{ 2%t==/br 0 %T0#= }^"   
0FBE   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   
0FC6   7D                     DB   "}"   
0FC7   00                     DB   0   
0FC8                          ;*Macro unroll: FUNC f4, 1, "sT"                            ; sink
0FC8                F4:          ; sink
0FC8   CD DF 09               CALL   go   
0FCB   00 00                  DW   NUL   
0FCD   D5 0F                  DW   f4M_2857S56   
0FCF   D1 0F                  DW   $+2   
0FD1   01                     DB   1   
0FD2   02 73 54               .PSTR   "sT"   
0FD5                F4M_2857S56:      
0FD5                             ; db "{"
0FD5                             ; db      "`f4`.s %s."
0FD5                             ; db      "[0]%T="
0FD5                             ; db      ":dt{"                              ; return talkback to receive data
0FD5                             ; ; db          "`f4-a`.s %d."
0FD5                             ; db          "{ 0%t==/br %d %T0#= }^"        ; 0: store talkback
0FD5                             ; db          "{ 1%t==/br %d. }^"          ; 1: send data to proc
0FD5                             ; db          "{ 2%t!=/br 0 1 %T0#^ }^"       ; 0 or 1: get next data item
0FD5                             ; db      "}; 0 %s^"
0FD5                             ; db "}"
0FD5   00                     DB   0   
0FD6                          ALIGN   $100   
1000                TESTSSTART:      
1000                             ; test "0 10 1 /f1 :a{%a.}; /f2", 0
1000                          ;*Macro unroll:  test "0 10 1 /f1 :a{1 %a +}; /f2 :a{%a.}; /f3", 0
1000   31 00 53               LD   SP,STACK   
1003   CD 40 0D               CALL   coldInit   
1006   CD 66 51               CALL   execStr   
1009   30 20 31 30 20 31 20 2F 66 31 20 3A 61 7B 31 20 25 61 20 2B 7D 3B 20 2F 66 32 20 3A 61 7B 25 61 2E 7D 3B 20 2F 66 33 00 DB   "0 10 1 /f1 :a{1 %a +}; /f2 :a{%a.}; /f3",0   
1031   CD 80 0C               CALL   flushBuffer   
1034   E1                     POP   HL   
1035   E5                     PUSH   HL   
1036   11 00 00               LD   DE,0   
1039   B7                     OR   A   
103A   ED 52                  SBC   HL,DE   
103C   7D                     LD   A,L   
103D   B4                     OR   H   
103E   CA C0 10               JP   Z,expectM_2872S73   
1041   CD F8 0C               CALL   printStr   
1044   43 6F 64 65 3A 20 30 20 31 30 20 31 20 2F 66 31 20 3A 61 7B 31 20 25 61 20 2B 7D 3B 20 2F 66 32 20 3A 61 7B 25 61 2E 7D 3B 20 2F 66 33 00 .CSTR   "Code: ","0 10 1 /f1 :a{1 %a +}; /f2 :a{%a.}; /f3"   
1072   CD F8 0C               CALL   printStr   
1075   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1084   21 00 00               LD   hl,0   
1087   E5                     PUSH   hl   
1088   E5                     PUSH   hl   
1089   CD 17 0E               CALL   run   
108C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1094   CD 80 0C               CALL   flushBuffer   
1097   CD F8 0C               CALL   printStr   
109A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10A7   E1                     POP   hl   
10A8   E5                     PUSH   hl   
10A9   E5                     PUSH   hl   
10AA   CD 17 0E               CALL   run   
10AD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
10BC   CD 80 0C               CALL   flushBuffer   
10BF   76                     HALT      
10C0                EXPECTM_2872S73:      
10C0   E1                     POP   HL   
10C1   CD F8 0C               CALL   printStr   
10C4   44 6F 6E 65 21 00      .CSTR   "Done!"   
10CA   76                     HALT      
10CB                             ; 
10CB                          ;*Macro unroll:  test "/f", false
10CB   31 00 53               LD   SP,STACK   
10CE   CD 40 0D               CALL   coldInit   
10D1   CD 66 51               CALL   execStr   
10D4   2F 66 00               DB   "/f",0   
10D7   CD 80 0C               CALL   flushBuffer   
10DA   E1                     POP   HL   
10DB   E5                     PUSH   HL   
10DC   11 00 00               LD   DE,false   
10DF   B7                     OR   A   
10E0   ED 52                  SBC   HL,DE   
10E2   7D                     LD   A,L   
10E3   B4                     OR   H   
10E4   CA 41 11               JP   Z,expectM_2877S81   
10E7   CD F8 0C               CALL   printStr   
10EA   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
10F3   CD F8 0C               CALL   printStr   
10F6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1105   21 00 00               LD   hl,false   
1108   E5                     PUSH   hl   
1109   E5                     PUSH   hl   
110A   CD 17 0E               CALL   run   
110D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1115   CD 80 0C               CALL   flushBuffer   
1118   CD F8 0C               CALL   printStr   
111B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1128   E1                     POP   hl   
1129   E5                     PUSH   hl   
112A   E5                     PUSH   hl   
112B   CD 17 0E               CALL   run   
112E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
113D   CD 80 0C               CALL   flushBuffer   
1140   76                     HALT      
1141                EXPECTM_2877S81:      
1141   E1                     POP   HL   
1142                          ;*Macro unroll:  test "/t", true
1142   31 00 53               LD   SP,STACK   
1145   CD 40 0D               CALL   coldInit   
1148   CD 66 51               CALL   execStr   
114B   2F 74 00               DB   "/t",0   
114E   CD 80 0C               CALL   flushBuffer   
1151   E1                     POP   HL   
1152   E5                     PUSH   HL   
1153   11 FF FF               LD   DE,true   
1156   B7                     OR   A   
1157   ED 52                  SBC   HL,DE   
1159   7D                     LD   A,L   
115A   B4                     OR   H   
115B   CA B8 11               JP   Z,expectM_2878S82   
115E   CD F8 0C               CALL   printStr   
1161   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
116A   CD F8 0C               CALL   printStr   
116D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
117C   21 FF FF               LD   hl,true   
117F   E5                     PUSH   hl   
1180   E5                     PUSH   hl   
1181   CD 17 0E               CALL   run   
1184   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
118C   CD 80 0C               CALL   flushBuffer   
118F   CD F8 0C               CALL   printStr   
1192   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
119F   E1                     POP   hl   
11A0   E5                     PUSH   hl   
11A1   E5                     PUSH   hl   
11A2   CD 17 0E               CALL   run   
11A5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
11B4   CD 80 0C               CALL   flushBuffer   
11B7   76                     HALT      
11B8                EXPECTM_2878S82:      
11B8   E1                     POP   HL   
11B9                          ;*Macro unroll:  test "1", 1
11B9   31 00 53               LD   SP,STACK   
11BC   CD 40 0D               CALL   coldInit   
11BF   CD 66 51               CALL   execStr   
11C2   31 00                  DB   "1",0   
11C4   CD 80 0C               CALL   flushBuffer   
11C7   E1                     POP   HL   
11C8   E5                     PUSH   HL   
11C9   11 01 00               LD   DE,1   
11CC   B7                     OR   A   
11CD   ED 52                  SBC   HL,DE   
11CF   7D                     LD   A,L   
11D0   B4                     OR   H   
11D1   CA 2D 12               JP   Z,expectM_2879S83   
11D4   CD F8 0C               CALL   printStr   
11D7   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
11DF   CD F8 0C               CALL   printStr   
11E2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11F1   21 01 00               LD   hl,1   
11F4   E5                     PUSH   hl   
11F5   E5                     PUSH   hl   
11F6   CD 17 0E               CALL   run   
11F9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1201   CD 80 0C               CALL   flushBuffer   
1204   CD F8 0C               CALL   printStr   
1207   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1214   E1                     POP   hl   
1215   E5                     PUSH   hl   
1216   E5                     PUSH   hl   
1217   CD 17 0E               CALL   run   
121A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1229   CD 80 0C               CALL   flushBuffer   
122C   76                     HALT      
122D                EXPECTM_2879S83:      
122D   E1                     POP   HL   
122E                          ;*Macro unroll:  test "2", 2
122E   31 00 53               LD   SP,STACK   
1231   CD 40 0D               CALL   coldInit   
1234   CD 66 51               CALL   execStr   
1237   32 00                  DB   "2",0   
1239   CD 80 0C               CALL   flushBuffer   
123C   E1                     POP   HL   
123D   E5                     PUSH   HL   
123E   11 02 00               LD   DE,2   
1241   B7                     OR   A   
1242   ED 52                  SBC   HL,DE   
1244   7D                     LD   A,L   
1245   B4                     OR   H   
1246   CA A2 12               JP   Z,expectM_2880S84   
1249   CD F8 0C               CALL   printStr   
124C   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
1254   CD F8 0C               CALL   printStr   
1257   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1266   21 02 00               LD   hl,2   
1269   E5                     PUSH   hl   
126A   E5                     PUSH   hl   
126B   CD 17 0E               CALL   run   
126E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1276   CD 80 0C               CALL   flushBuffer   
1279   CD F8 0C               CALL   printStr   
127C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1289   E1                     POP   hl   
128A   E5                     PUSH   hl   
128B   E5                     PUSH   hl   
128C   CD 17 0E               CALL   run   
128F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
129E   CD 80 0C               CALL   flushBuffer   
12A1   76                     HALT      
12A2                EXPECTM_2880S84:      
12A2   E1                     POP   HL   
12A3                          ;*Macro unroll:  test "1", 1
12A3   31 00 53               LD   SP,STACK   
12A6   CD 40 0D               CALL   coldInit   
12A9   CD 66 51               CALL   execStr   
12AC   31 00                  DB   "1",0   
12AE   CD 80 0C               CALL   flushBuffer   
12B1   E1                     POP   HL   
12B2   E5                     PUSH   HL   
12B3   11 01 00               LD   DE,1   
12B6   B7                     OR   A   
12B7   ED 52                  SBC   HL,DE   
12B9   7D                     LD   A,L   
12BA   B4                     OR   H   
12BB   CA 17 13               JP   Z,expectM_2881S85   
12BE   CD F8 0C               CALL   printStr   
12C1   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
12C9   CD F8 0C               CALL   printStr   
12CC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12DB   21 01 00               LD   hl,1   
12DE   E5                     PUSH   hl   
12DF   E5                     PUSH   hl   
12E0   CD 17 0E               CALL   run   
12E3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12EB   CD 80 0C               CALL   flushBuffer   
12EE   CD F8 0C               CALL   printStr   
12F1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12FE   E1                     POP   hl   
12FF   E5                     PUSH   hl   
1300   E5                     PUSH   hl   
1301   CD 17 0E               CALL   run   
1304   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1313   CD 80 0C               CALL   flushBuffer   
1316   76                     HALT      
1317                EXPECTM_2881S85:      
1317   E1                     POP   HL   
1318                          ;*Macro unroll:  test "0", 0
1318   31 00 53               LD   SP,STACK   
131B   CD 40 0D               CALL   coldInit   
131E   CD 66 51               CALL   execStr   
1321   30 00                  DB   "0",0   
1323   CD 80 0C               CALL   flushBuffer   
1326   E1                     POP   HL   
1327   E5                     PUSH   HL   
1328   11 00 00               LD   DE,0   
132B   B7                     OR   A   
132C   ED 52                  SBC   HL,DE   
132E   7D                     LD   A,L   
132F   B4                     OR   H   
1330   CA 8C 13               JP   Z,expectM_2882S86   
1333   CD F8 0C               CALL   printStr   
1336   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
133E   CD F8 0C               CALL   printStr   
1341   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1350   21 00 00               LD   hl,0   
1353   E5                     PUSH   hl   
1354   E5                     PUSH   hl   
1355   CD 17 0E               CALL   run   
1358   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1360   CD 80 0C               CALL   flushBuffer   
1363   CD F8 0C               CALL   printStr   
1366   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1373   E1                     POP   hl   
1374   E5                     PUSH   hl   
1375   E5                     PUSH   hl   
1376   CD 17 0E               CALL   run   
1379   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1388   CD 80 0C               CALL   flushBuffer   
138B   76                     HALT      
138C                EXPECTM_2882S86:      
138C   E1                     POP   HL   
138D                          ;*Macro unroll:  test "10", 10
138D   31 00 53               LD   SP,STACK   
1390   CD 40 0D               CALL   coldInit   
1393   CD 66 51               CALL   execStr   
1396   31 30 00               DB   "10",0   
1399   CD 80 0C               CALL   flushBuffer   
139C   E1                     POP   HL   
139D   E5                     PUSH   HL   
139E   11 0A 00               LD   DE,10   
13A1   B7                     OR   A   
13A2   ED 52                  SBC   HL,DE   
13A4   7D                     LD   A,L   
13A5   B4                     OR   H   
13A6   CA 03 14               JP   Z,expectM_2883S87   
13A9   CD F8 0C               CALL   printStr   
13AC   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
13B5   CD F8 0C               CALL   printStr   
13B8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13C7   21 0A 00               LD   hl,10   
13CA   E5                     PUSH   hl   
13CB   E5                     PUSH   hl   
13CC   CD 17 0E               CALL   run   
13CF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
13D7   CD 80 0C               CALL   flushBuffer   
13DA   CD F8 0C               CALL   printStr   
13DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13EA   E1                     POP   hl   
13EB   E5                     PUSH   hl   
13EC   E5                     PUSH   hl   
13ED   CD 17 0E               CALL   run   
13F0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
13FF   CD 80 0C               CALL   flushBuffer   
1402   76                     HALT      
1403                EXPECTM_2883S87:      
1403   E1                     POP   HL   
1404                          ;*Macro unroll:  test "123", 123
1404   31 00 53               LD   SP,STACK   
1407   CD 40 0D               CALL   coldInit   
140A   CD 66 51               CALL   execStr   
140D   31 32 33 00            DB   "123",0   
1411   CD 80 0C               CALL   flushBuffer   
1414   E1                     POP   HL   
1415   E5                     PUSH   HL   
1416   11 7B 00               LD   DE,123   
1419   B7                     OR   A   
141A   ED 52                  SBC   HL,DE   
141C   7D                     LD   A,L   
141D   B4                     OR   H   
141E   CA 7C 14               JP   Z,expectM_2884S88   
1421   CD F8 0C               CALL   printStr   
1424   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
142E   CD F8 0C               CALL   printStr   
1431   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1440   21 7B 00               LD   hl,123   
1443   E5                     PUSH   hl   
1444   E5                     PUSH   hl   
1445   CD 17 0E               CALL   run   
1448   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1450   CD 80 0C               CALL   flushBuffer   
1453   CD F8 0C               CALL   printStr   
1456   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1463   E1                     POP   hl   
1464   E5                     PUSH   hl   
1465   E5                     PUSH   hl   
1466   CD 17 0E               CALL   run   
1469   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1478   CD 80 0C               CALL   flushBuffer   
147B   76                     HALT      
147C                EXPECTM_2884S88:      
147C   E1                     POP   HL   
147D                          ;*Macro unroll:  test "-1",-1
147D   31 00 53               LD   SP,STACK   
1480   CD 40 0D               CALL   coldInit   
1483   CD 66 51               CALL   execStr   
1486   2D 31 00               DB   "-1",0   
1489   CD 80 0C               CALL   flushBuffer   
148C   E1                     POP   HL   
148D   E5                     PUSH   HL   
148E   11 FF FF               LD   DE,-1   
1491   B7                     OR   A   
1492   ED 52                  SBC   HL,DE   
1494   7D                     LD   A,L   
1495   B4                     OR   H   
1496   CA F3 14               JP   Z,expectM_2885S89   
1499   CD F8 0C               CALL   printStr   
149C   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
14A5   CD F8 0C               CALL   printStr   
14A8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14B7   21 FF FF               LD   hl,-1   
14BA   E5                     PUSH   hl   
14BB   E5                     PUSH   hl   
14BC   CD 17 0E               CALL   run   
14BF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14C7   CD 80 0C               CALL   flushBuffer   
14CA   CD F8 0C               CALL   printStr   
14CD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14DA   E1                     POP   hl   
14DB   E5                     PUSH   hl   
14DC   E5                     PUSH   hl   
14DD   CD 17 0E               CALL   run   
14E0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
14EF   CD 80 0C               CALL   flushBuffer   
14F2   76                     HALT      
14F3                EXPECTM_2885S89:      
14F3   E1                     POP   HL   
14F4                          ;*Macro unroll:  test "''", 0
14F4   31 00 53               LD   SP,STACK   
14F7   CD 40 0D               CALL   coldInit   
14FA   CD 66 51               CALL   execStr   
14FD   27 27 00               DB   "''",0   
1500   CD 80 0C               CALL   flushBuffer   
1503   E1                     POP   HL   
1504   E5                     PUSH   HL   
1505   11 00 00               LD   DE,0   
1508   B7                     OR   A   
1509   ED 52                  SBC   HL,DE   
150B   7D                     LD   A,L   
150C   B4                     OR   H   
150D   CA 6A 15               JP   Z,expectM_2886S90   
1510   CD F8 0C               CALL   printStr   
1513   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
151C   CD F8 0C               CALL   printStr   
151F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
152E   21 00 00               LD   hl,0   
1531   E5                     PUSH   hl   
1532   E5                     PUSH   hl   
1533   CD 17 0E               CALL   run   
1536   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
153E   CD 80 0C               CALL   flushBuffer   
1541   CD F8 0C               CALL   printStr   
1544   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1551   E1                     POP   hl   
1552   E5                     PUSH   hl   
1553   E5                     PUSH   hl   
1554   CD 17 0E               CALL   run   
1557   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1566   CD 80 0C               CALL   flushBuffer   
1569   76                     HALT      
156A                EXPECTM_2886S90:      
156A   E1                     POP   HL   
156B                          ;*Macro unroll:  test "'a'", $61
156B   31 00 53               LD   SP,STACK   
156E   CD 40 0D               CALL   coldInit   
1571   CD 66 51               CALL   execStr   
1574   27 61 27 00            DB   "'a'",0   
1578   CD 80 0C               CALL   flushBuffer   
157B   E1                     POP   HL   
157C   E5                     PUSH   HL   
157D   11 61 00               LD   DE,$61   
1580   B7                     OR   A   
1581   ED 52                  SBC   HL,DE   
1583   7D                     LD   A,L   
1584   B4                     OR   H   
1585   CA E3 15               JP   Z,expectM_2887S91   
1588   CD F8 0C               CALL   printStr   
158B   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
1595   CD F8 0C               CALL   printStr   
1598   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15A7   21 61 00               LD   hl,$61   
15AA   E5                     PUSH   hl   
15AB   E5                     PUSH   hl   
15AC   CD 17 0E               CALL   run   
15AF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15B7   CD 80 0C               CALL   flushBuffer   
15BA   CD F8 0C               CALL   printStr   
15BD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15CA   E1                     POP   hl   
15CB   E5                     PUSH   hl   
15CC   E5                     PUSH   hl   
15CD   CD 17 0E               CALL   run   
15D0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
15DF   CD 80 0C               CALL   flushBuffer   
15E2   76                     HALT      
15E3                EXPECTM_2887S91:      
15E3   E1                     POP   HL   
15E4                          ;*Macro unroll:  test "'\\''", $27
15E4   31 00 53               LD   SP,STACK   
15E7   CD 40 0D               CALL   coldInit   
15EA   CD 66 51               CALL   execStr   
15ED   27 5C 27 27 00         DB   "'\\''",0   
15F2   CD 80 0C               CALL   flushBuffer   
15F5   E1                     POP   HL   
15F6   E5                     PUSH   HL   
15F7   11 27 00               LD   DE,$27   
15FA   B7                     OR   A   
15FB   ED 52                  SBC   HL,DE   
15FD   7D                     LD   A,L   
15FE   B4                     OR   H   
15FF   CA 5E 16               JP   Z,expectM_2888S92   
1602   CD F8 0C               CALL   printStr   
1605   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
1610   CD F8 0C               CALL   printStr   
1613   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1622   21 27 00               LD   hl,$27   
1625   E5                     PUSH   hl   
1626   E5                     PUSH   hl   
1627   CD 17 0E               CALL   run   
162A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1632   CD 80 0C               CALL   flushBuffer   
1635   CD F8 0C               CALL   printStr   
1638   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1645   E1                     POP   hl   
1646   E5                     PUSH   hl   
1647   E5                     PUSH   hl   
1648   CD 17 0E               CALL   run   
164B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
165A   CD 80 0C               CALL   flushBuffer   
165D   76                     HALT      
165E                EXPECTM_2888S92:      
165E   E1                     POP   HL   
165F                          ;*Macro unroll:  test "$10", $10
165F   31 00 53               LD   SP,STACK   
1662   CD 40 0D               CALL   coldInit   
1665   CD 66 51               CALL   execStr   
1668   24 31 30 00            DB   "$10",0   
166C   CD 80 0C               CALL   flushBuffer   
166F   E1                     POP   HL   
1670   E5                     PUSH   HL   
1671   11 10 00               LD   DE,$10   
1674   B7                     OR   A   
1675   ED 52                  SBC   HL,DE   
1677   7D                     LD   A,L   
1678   B4                     OR   H   
1679   CA D7 16               JP   Z,expectM_2889S93   
167C   CD F8 0C               CALL   printStr   
167F   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
1689   CD F8 0C               CALL   printStr   
168C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
169B   21 10 00               LD   hl,$10   
169E   E5                     PUSH   hl   
169F   E5                     PUSH   hl   
16A0   CD 17 0E               CALL   run   
16A3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16AB   CD 80 0C               CALL   flushBuffer   
16AE   CD F8 0C               CALL   printStr   
16B1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16BE   E1                     POP   hl   
16BF   E5                     PUSH   hl   
16C0   E5                     PUSH   hl   
16C1   CD 17 0E               CALL   run   
16C4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
16D3   CD 80 0C               CALL   flushBuffer   
16D6   76                     HALT      
16D7                EXPECTM_2889S93:      
16D7   E1                     POP   HL   
16D8                          ;*Macro unroll:  test "$FF", $FF
16D8   31 00 53               LD   SP,STACK   
16DB   CD 40 0D               CALL   coldInit   
16DE   CD 66 51               CALL   execStr   
16E1   24 46 46 00            DB   "$FF",0   
16E5   CD 80 0C               CALL   flushBuffer   
16E8   E1                     POP   HL   
16E9   E5                     PUSH   HL   
16EA   11 FF 00               LD   DE,$FF   
16ED   B7                     OR   A   
16EE   ED 52                  SBC   HL,DE   
16F0   7D                     LD   A,L   
16F1   B4                     OR   H   
16F2   CA 50 17               JP   Z,expectM_2890S94   
16F5   CD F8 0C               CALL   printStr   
16F8   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
1702   CD F8 0C               CALL   printStr   
1705   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1714   21 FF 00               LD   hl,$FF   
1717   E5                     PUSH   hl   
1718   E5                     PUSH   hl   
1719   CD 17 0E               CALL   run   
171C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1724   CD 80 0C               CALL   flushBuffer   
1727   CD F8 0C               CALL   printStr   
172A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1737   E1                     POP   hl   
1738   E5                     PUSH   hl   
1739   E5                     PUSH   hl   
173A   CD 17 0E               CALL   run   
173D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
174C   CD 80 0C               CALL   flushBuffer   
174F   76                     HALT      
1750                EXPECTM_2890S94:      
1750   E1                     POP   HL   
1751                          ;*Macro unroll:  test "-1 2 +",1
1751   31 00 53               LD   SP,STACK   
1754   CD 40 0D               CALL   coldInit   
1757   CD 66 51               CALL   execStr   
175A   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
1761   CD 80 0C               CALL   flushBuffer   
1764   E1                     POP   HL   
1765   E5                     PUSH   HL   
1766   11 01 00               LD   DE,1   
1769   B7                     OR   A   
176A   ED 52                  SBC   HL,DE   
176C   7D                     LD   A,L   
176D   B4                     OR   H   
176E   CA CF 17               JP   Z,expectM_2891S95   
1771   CD F8 0C               CALL   printStr   
1774   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1781   CD F8 0C               CALL   printStr   
1784   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1793   21 01 00               LD   hl,1   
1796   E5                     PUSH   hl   
1797   E5                     PUSH   hl   
1798   CD 17 0E               CALL   run   
179B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
17A3   CD 80 0C               CALL   flushBuffer   
17A6   CD F8 0C               CALL   printStr   
17A9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17B6   E1                     POP   hl   
17B7   E5                     PUSH   hl   
17B8   E5                     PUSH   hl   
17B9   CD 17 0E               CALL   run   
17BC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
17CB   CD 80 0C               CALL   flushBuffer   
17CE   76                     HALT      
17CF                EXPECTM_2891S95:      
17CF   E1                     POP   HL   
17D0                          ;*Macro unroll:  test "-1 1 +",0
17D0   31 00 53               LD   SP,STACK   
17D3   CD 40 0D               CALL   coldInit   
17D6   CD 66 51               CALL   execStr   
17D9   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
17E0   CD 80 0C               CALL   flushBuffer   
17E3   E1                     POP   HL   
17E4   E5                     PUSH   HL   
17E5   11 00 00               LD   DE,0   
17E8   B7                     OR   A   
17E9   ED 52                  SBC   HL,DE   
17EB   7D                     LD   A,L   
17EC   B4                     OR   H   
17ED   CA 4E 18               JP   Z,expectM_2892S96   
17F0   CD F8 0C               CALL   printStr   
17F3   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1800   CD F8 0C               CALL   printStr   
1803   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1812   21 00 00               LD   hl,0   
1815   E5                     PUSH   hl   
1816   E5                     PUSH   hl   
1817   CD 17 0E               CALL   run   
181A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1822   CD 80 0C               CALL   flushBuffer   
1825   CD F8 0C               CALL   printStr   
1828   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1835   E1                     POP   hl   
1836   E5                     PUSH   hl   
1837   E5                     PUSH   hl   
1838   CD 17 0E               CALL   run   
183B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
184A   CD 80 0C               CALL   flushBuffer   
184D   76                     HALT      
184E                EXPECTM_2892S96:      
184E   E1                     POP   HL   
184F                          ;*Macro unroll:  test "1 2 +", 3
184F   31 00 53               LD   SP,STACK   
1852   CD 40 0D               CALL   coldInit   
1855   CD 66 51               CALL   execStr   
1858   31 20 32 20 2B 00      DB   "1 2 +",0   
185E   CD 80 0C               CALL   flushBuffer   
1861   E1                     POP   HL   
1862   E5                     PUSH   HL   
1863   11 03 00               LD   DE,3   
1866   B7                     OR   A   
1867   ED 52                  SBC   HL,DE   
1869   7D                     LD   A,L   
186A   B4                     OR   H   
186B   CA CB 18               JP   Z,expectM_2893S97   
186E   CD F8 0C               CALL   printStr   
1871   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
187D   CD F8 0C               CALL   printStr   
1880   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
188F   21 03 00               LD   hl,3   
1892   E5                     PUSH   hl   
1893   E5                     PUSH   hl   
1894   CD 17 0E               CALL   run   
1897   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
189F   CD 80 0C               CALL   flushBuffer   
18A2   CD F8 0C               CALL   printStr   
18A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18B2   E1                     POP   hl   
18B3   E5                     PUSH   hl   
18B4   E5                     PUSH   hl   
18B5   CD 17 0E               CALL   run   
18B8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
18C7   CD 80 0C               CALL   flushBuffer   
18CA   76                     HALT      
18CB                EXPECTM_2893S97:      
18CB   E1                     POP   HL   
18CC                          ;*Macro unroll:  test "4 1 2 +", 3
18CC   31 00 53               LD   SP,STACK   
18CF   CD 40 0D               CALL   coldInit   
18D2   CD 66 51               CALL   execStr   
18D5   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
18DD   CD 80 0C               CALL   flushBuffer   
18E0   E1                     POP   HL   
18E1   E5                     PUSH   HL   
18E2   11 03 00               LD   DE,3   
18E5   B7                     OR   A   
18E6   ED 52                  SBC   HL,DE   
18E8   7D                     LD   A,L   
18E9   B4                     OR   H   
18EA   CA 4C 19               JP   Z,expectM_2894S98   
18ED   CD F8 0C               CALL   printStr   
18F0   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
18FE   CD F8 0C               CALL   printStr   
1901   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1910   21 03 00               LD   hl,3   
1913   E5                     PUSH   hl   
1914   E5                     PUSH   hl   
1915   CD 17 0E               CALL   run   
1918   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1920   CD 80 0C               CALL   flushBuffer   
1923   CD F8 0C               CALL   printStr   
1926   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1933   E1                     POP   hl   
1934   E5                     PUSH   hl   
1935   E5                     PUSH   hl   
1936   CD 17 0E               CALL   run   
1939   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1948   CD 80 0C               CALL   flushBuffer   
194B   76                     HALT      
194C                EXPECTM_2894S98:      
194C   E1                     POP   HL   
194D                          ;*Macro unroll:  test "123 456 +", 123+456
194D   31 00 53               LD   SP,STACK   
1950   CD 40 0D               CALL   coldInit   
1953   CD 66 51               CALL   execStr   
1956   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1960   CD 80 0C               CALL   flushBuffer   
1963   E1                     POP   HL   
1964   E5                     PUSH   HL   
1965   11 43 02               LD   DE,123+456   
1968   B7                     OR   A   
1969   ED 52                  SBC   HL,DE   
196B   7D                     LD   A,L   
196C   B4                     OR   H   
196D   CA D1 19               JP   Z,expectM_2895S99   
1970   CD F8 0C               CALL   printStr   
1973   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1983   CD F8 0C               CALL   printStr   
1986   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1995   21 43 02               LD   hl,123+456   
1998   E5                     PUSH   hl   
1999   E5                     PUSH   hl   
199A   CD 17 0E               CALL   run   
199D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
19A5   CD 80 0C               CALL   flushBuffer   
19A8   CD F8 0C               CALL   printStr   
19AB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19B8   E1                     POP   hl   
19B9   E5                     PUSH   hl   
19BA   E5                     PUSH   hl   
19BB   CD 17 0E               CALL   run   
19BE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
19CD   CD 80 0C               CALL   flushBuffer   
19D0   76                     HALT      
19D1                EXPECTM_2895S99:      
19D1   E1                     POP   HL   
19D2                          ;*Macro unroll:  test "64 128 +", 64+128
19D2   31 00 53               LD   SP,STACK   
19D5   CD 40 0D               CALL   coldInit   
19D8   CD 66 51               CALL   execStr   
19DB   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
19E4   CD 80 0C               CALL   flushBuffer   
19E7   E1                     POP   HL   
19E8   E5                     PUSH   HL   
19E9   11 C0 00               LD   DE,64+128   
19EC   B7                     OR   A   
19ED   ED 52                  SBC   HL,DE   
19EF   7D                     LD   A,L   
19F0   B4                     OR   H   
19F1   CA 54 1A               JP   Z,expectM_2896S100   
19F4   CD F8 0C               CALL   printStr   
19F7   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1A06   CD F8 0C               CALL   printStr   
1A09   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A18   21 C0 00               LD   hl,64+128   
1A1B   E5                     PUSH   hl   
1A1C   E5                     PUSH   hl   
1A1D   CD 17 0E               CALL   run   
1A20   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A28   CD 80 0C               CALL   flushBuffer   
1A2B   CD F8 0C               CALL   printStr   
1A2E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A3B   E1                     POP   hl   
1A3C   E5                     PUSH   hl   
1A3D   E5                     PUSH   hl   
1A3E   CD 17 0E               CALL   run   
1A41   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A50   CD 80 0C               CALL   flushBuffer   
1A53   76                     HALT      
1A54                EXPECTM_2896S100:      
1A54   E1                     POP   HL   
1A55                          ;*Macro unroll:  test "1 2 +", 3
1A55   31 00 53               LD   SP,STACK   
1A58   CD 40 0D               CALL   coldInit   
1A5B   CD 66 51               CALL   execStr   
1A5E   31 20 32 20 2B 00      DB   "1 2 +",0   
1A64   CD 80 0C               CALL   flushBuffer   
1A67   E1                     POP   HL   
1A68   E5                     PUSH   HL   
1A69   11 03 00               LD   DE,3   
1A6C   B7                     OR   A   
1A6D   ED 52                  SBC   HL,DE   
1A6F   7D                     LD   A,L   
1A70   B4                     OR   H   
1A71   CA D1 1A               JP   Z,expectM_2897S101   
1A74   CD F8 0C               CALL   printStr   
1A77   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1A83   CD F8 0C               CALL   printStr   
1A86   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A95   21 03 00               LD   hl,3   
1A98   E5                     PUSH   hl   
1A99   E5                     PUSH   hl   
1A9A   CD 17 0E               CALL   run   
1A9D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1AA5   CD 80 0C               CALL   flushBuffer   
1AA8   CD F8 0C               CALL   printStr   
1AAB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AB8   E1                     POP   hl   
1AB9   E5                     PUSH   hl   
1ABA   E5                     PUSH   hl   
1ABB   CD 17 0E               CALL   run   
1ABE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1ACD   CD 80 0C               CALL   flushBuffer   
1AD0   76                     HALT      
1AD1                EXPECTM_2897S101:      
1AD1   E1                     POP   HL   
1AD2                          ;*Macro unroll:  test "1a= a++ a",2
1AD2   31 00 53               LD   SP,STACK   
1AD5   CD 40 0D               CALL   coldInit   
1AD8   CD 66 51               CALL   execStr   
1ADB   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1AE5   CD 80 0C               CALL   flushBuffer   
1AE8   E1                     POP   HL   
1AE9   E5                     PUSH   HL   
1AEA   11 02 00               LD   DE,2   
1AED   B7                     OR   A   
1AEE   ED 52                  SBC   HL,DE   
1AF0   7D                     LD   A,L   
1AF1   B4                     OR   H   
1AF2   CA 56 1B               JP   Z,expectM_2898S102   
1AF5   CD F8 0C               CALL   printStr   
1AF8   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1B08   CD F8 0C               CALL   printStr   
1B0B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B1A   21 02 00               LD   hl,2   
1B1D   E5                     PUSH   hl   
1B1E   E5                     PUSH   hl   
1B1F   CD 17 0E               CALL   run   
1B22   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B2A   CD 80 0C               CALL   flushBuffer   
1B2D   CD F8 0C               CALL   printStr   
1B30   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B3D   E1                     POP   hl   
1B3E   E5                     PUSH   hl   
1B3F   E5                     PUSH   hl   
1B40   CD 17 0E               CALL   run   
1B43   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B52   CD 80 0C               CALL   flushBuffer   
1B55   76                     HALT      
1B56                EXPECTM_2898S102:      
1B56   E1                     POP   HL   
1B57                          ;*Macro unroll:  test "-1 -1 -",0
1B57   31 00 53               LD   SP,STACK   
1B5A   CD 40 0D               CALL   coldInit   
1B5D   CD 66 51               CALL   execStr   
1B60   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1B68   CD 80 0C               CALL   flushBuffer   
1B6B   E1                     POP   HL   
1B6C   E5                     PUSH   HL   
1B6D   11 00 00               LD   DE,0   
1B70   B7                     OR   A   
1B71   ED 52                  SBC   HL,DE   
1B73   7D                     LD   A,L   
1B74   B4                     OR   H   
1B75   CA D7 1B               JP   Z,expectM_2899S103   
1B78   CD F8 0C               CALL   printStr   
1B7B   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1B89   CD F8 0C               CALL   printStr   
1B8C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B9B   21 00 00               LD   hl,0   
1B9E   E5                     PUSH   hl   
1B9F   E5                     PUSH   hl   
1BA0   CD 17 0E               CALL   run   
1BA3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1BAB   CD 80 0C               CALL   flushBuffer   
1BAE   CD F8 0C               CALL   printStr   
1BB1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BBE   E1                     POP   hl   
1BBF   E5                     PUSH   hl   
1BC0   E5                     PUSH   hl   
1BC1   CD 17 0E               CALL   run   
1BC4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1BD3   CD 80 0C               CALL   flushBuffer   
1BD6   76                     HALT      
1BD7                EXPECTM_2899S103:      
1BD7   E1                     POP   HL   
1BD8                          ;*Macro unroll:  test "5 3 -", 2
1BD8   31 00 53               LD   SP,STACK   
1BDB   CD 40 0D               CALL   coldInit   
1BDE   CD 66 51               CALL   execStr   
1BE1   35 20 33 20 2D 00      DB   "5 3 -",0   
1BE7   CD 80 0C               CALL   flushBuffer   
1BEA   E1                     POP   HL   
1BEB   E5                     PUSH   HL   
1BEC   11 02 00               LD   DE,2   
1BEF   B7                     OR   A   
1BF0   ED 52                  SBC   HL,DE   
1BF2   7D                     LD   A,L   
1BF3   B4                     OR   H   
1BF4   CA 54 1C               JP   Z,expectM_2900S104   
1BF7   CD F8 0C               CALL   printStr   
1BFA   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1C06   CD F8 0C               CALL   printStr   
1C09   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C18   21 02 00               LD   hl,2   
1C1B   E5                     PUSH   hl   
1C1C   E5                     PUSH   hl   
1C1D   CD 17 0E               CALL   run   
1C20   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C28   CD 80 0C               CALL   flushBuffer   
1C2B   CD F8 0C               CALL   printStr   
1C2E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C3B   E1                     POP   hl   
1C3C   E5                     PUSH   hl   
1C3D   E5                     PUSH   hl   
1C3E   CD 17 0E               CALL   run   
1C41   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C50   CD 80 0C               CALL   flushBuffer   
1C53   76                     HALT      
1C54                EXPECTM_2900S104:      
1C54   E1                     POP   HL   
1C55                          ;*Macro unroll:  test "2 1 -",1
1C55   31 00 53               LD   SP,STACK   
1C58   CD 40 0D               CALL   coldInit   
1C5B   CD 66 51               CALL   execStr   
1C5E   32 20 31 20 2D 00      DB   "2 1 -",0   
1C64   CD 80 0C               CALL   flushBuffer   
1C67   E1                     POP   HL   
1C68   E5                     PUSH   HL   
1C69   11 01 00               LD   DE,1   
1C6C   B7                     OR   A   
1C6D   ED 52                  SBC   HL,DE   
1C6F   7D                     LD   A,L   
1C70   B4                     OR   H   
1C71   CA D1 1C               JP   Z,expectM_2901S105   
1C74   CD F8 0C               CALL   printStr   
1C77   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1C83   CD F8 0C               CALL   printStr   
1C86   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C95   21 01 00               LD   hl,1   
1C98   E5                     PUSH   hl   
1C99   E5                     PUSH   hl   
1C9A   CD 17 0E               CALL   run   
1C9D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1CA5   CD 80 0C               CALL   flushBuffer   
1CA8   CD F8 0C               CALL   printStr   
1CAB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CB8   E1                     POP   hl   
1CB9   E5                     PUSH   hl   
1CBA   E5                     PUSH   hl   
1CBB   CD 17 0E               CALL   run   
1CBE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1CCD   CD 80 0C               CALL   flushBuffer   
1CD0   76                     HALT      
1CD1                EXPECTM_2901S105:      
1CD1   E1                     POP   HL   
1CD2                          ;*Macro unroll:  test "3a= a-- a",2
1CD2   31 00 53               LD   SP,STACK   
1CD5   CD 40 0D               CALL   coldInit   
1CD8   CD 66 51               CALL   execStr   
1CDB   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1CE5   CD 80 0C               CALL   flushBuffer   
1CE8   E1                     POP   HL   
1CE9   E5                     PUSH   HL   
1CEA   11 02 00               LD   DE,2   
1CED   B7                     OR   A   
1CEE   ED 52                  SBC   HL,DE   
1CF0   7D                     LD   A,L   
1CF1   B4                     OR   H   
1CF2   CA 56 1D               JP   Z,expectM_2902S106   
1CF5   CD F8 0C               CALL   printStr   
1CF8   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1D08   CD F8 0C               CALL   printStr   
1D0B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D1A   21 02 00               LD   hl,2   
1D1D   E5                     PUSH   hl   
1D1E   E5                     PUSH   hl   
1D1F   CD 17 0E               CALL   run   
1D22   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D2A   CD 80 0C               CALL   flushBuffer   
1D2D   CD F8 0C               CALL   printStr   
1D30   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D3D   E1                     POP   hl   
1D3E   E5                     PUSH   hl   
1D3F   E5                     PUSH   hl   
1D40   CD 17 0E               CALL   run   
1D43   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D52   CD 80 0C               CALL   flushBuffer   
1D55   76                     HALT      
1D56                EXPECTM_2902S106:      
1D56   E1                     POP   HL   
1D57                          ;*Macro unroll:  test "3 5 &", 1
1D57   31 00 53               LD   SP,STACK   
1D5A   CD 40 0D               CALL   coldInit   
1D5D   CD 66 51               CALL   execStr   
1D60   33 20 35 20 26 00      DB   "3 5 &",0   
1D66   CD 80 0C               CALL   flushBuffer   
1D69   E1                     POP   HL   
1D6A   E5                     PUSH   HL   
1D6B   11 01 00               LD   DE,1   
1D6E   B7                     OR   A   
1D6F   ED 52                  SBC   HL,DE   
1D71   7D                     LD   A,L   
1D72   B4                     OR   H   
1D73   CA D3 1D               JP   Z,expectM_2903S107   
1D76   CD F8 0C               CALL   printStr   
1D79   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1D85   CD F8 0C               CALL   printStr   
1D88   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D97   21 01 00               LD   hl,1   
1D9A   E5                     PUSH   hl   
1D9B   E5                     PUSH   hl   
1D9C   CD 17 0E               CALL   run   
1D9F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1DA7   CD 80 0C               CALL   flushBuffer   
1DAA   CD F8 0C               CALL   printStr   
1DAD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DBA   E1                     POP   hl   
1DBB   E5                     PUSH   hl   
1DBC   E5                     PUSH   hl   
1DBD   CD 17 0E               CALL   run   
1DC0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1DCF   CD 80 0C               CALL   flushBuffer   
1DD2   76                     HALT      
1DD3                EXPECTM_2903S107:      
1DD3   E1                     POP   HL   
1DD4                          ;*Macro unroll:  test "3 5 |", 7
1DD4   31 00 53               LD   SP,STACK   
1DD7   CD 40 0D               CALL   coldInit   
1DDA   CD 66 51               CALL   execStr   
1DDD   33 20 35 20 7C 00      DB   "3 5 |",0   
1DE3   CD 80 0C               CALL   flushBuffer   
1DE6   E1                     POP   HL   
1DE7   E5                     PUSH   HL   
1DE8   11 07 00               LD   DE,7   
1DEB   B7                     OR   A   
1DEC   ED 52                  SBC   HL,DE   
1DEE   7D                     LD   A,L   
1DEF   B4                     OR   H   
1DF0   CA 50 1E               JP   Z,expectM_2904S108   
1DF3   CD F8 0C               CALL   printStr   
1DF6   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1E02   CD F8 0C               CALL   printStr   
1E05   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E14   21 07 00               LD   hl,7   
1E17   E5                     PUSH   hl   
1E18   E5                     PUSH   hl   
1E19   CD 17 0E               CALL   run   
1E1C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E24   CD 80 0C               CALL   flushBuffer   
1E27   CD F8 0C               CALL   printStr   
1E2A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E37   E1                     POP   hl   
1E38   E5                     PUSH   hl   
1E39   E5                     PUSH   hl   
1E3A   CD 17 0E               CALL   run   
1E3D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E4C   CD 80 0C               CALL   flushBuffer   
1E4F   76                     HALT      
1E50                EXPECTM_2904S108:      
1E50   E1                     POP   HL   
1E51                          ;*Macro unroll:  test "3 5 /x", 6
1E51   31 00 53               LD   SP,STACK   
1E54   CD 40 0D               CALL   coldInit   
1E57   CD 66 51               CALL   execStr   
1E5A   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1E61   CD 80 0C               CALL   flushBuffer   
1E64   E1                     POP   HL   
1E65   E5                     PUSH   HL   
1E66   11 06 00               LD   DE,6   
1E69   B7                     OR   A   
1E6A   ED 52                  SBC   HL,DE   
1E6C   7D                     LD   A,L   
1E6D   B4                     OR   H   
1E6E   CA CF 1E               JP   Z,expectM_2905S109   
1E71   CD F8 0C               CALL   printStr   
1E74   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1E81   CD F8 0C               CALL   printStr   
1E84   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E93   21 06 00               LD   hl,6   
1E96   E5                     PUSH   hl   
1E97   E5                     PUSH   hl   
1E98   CD 17 0E               CALL   run   
1E9B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1EA3   CD 80 0C               CALL   flushBuffer   
1EA6   CD F8 0C               CALL   printStr   
1EA9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EB6   E1                     POP   hl   
1EB7   E5                     PUSH   hl   
1EB8   E5                     PUSH   hl   
1EB9   CD 17 0E               CALL   run   
1EBC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1ECB   CD 80 0C               CALL   flushBuffer   
1ECE   76                     HALT      
1ECF                EXPECTM_2905S109:      
1ECF   E1                     POP   HL   
1ED0                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1ED0   31 00 53               LD   SP,STACK   
1ED3   CD 40 0D               CALL   coldInit   
1ED6   CD 66 51               CALL   execStr   
1ED9   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1EE8   CD 80 0C               CALL   flushBuffer   
1EEB   E1                     POP   HL   
1EEC   E5                     PUSH   HL   
1EED   11 06 00               LD   DE,6   
1EF0   B7                     OR   A   
1EF1   ED 52                  SBC   HL,DE   
1EF3   7D                     LD   A,L   
1EF4   B4                     OR   H   
1EF5   CA 5E 1F               JP   Z,expectM_2906S110   
1EF8   CD F8 0C               CALL   printStr   
1EFB   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1F10   CD F8 0C               CALL   printStr   
1F13   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F22   21 06 00               LD   hl,6   
1F25   E5                     PUSH   hl   
1F26   E5                     PUSH   hl   
1F27   CD 17 0E               CALL   run   
1F2A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F32   CD 80 0C               CALL   flushBuffer   
1F35   CD F8 0C               CALL   printStr   
1F38   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F45   E1                     POP   hl   
1F46   E5                     PUSH   hl   
1F47   E5                     PUSH   hl   
1F48   CD 17 0E               CALL   run   
1F4B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F5A   CD 80 0C               CALL   flushBuffer   
1F5D   76                     HALT      
1F5E                EXPECTM_2906S110:      
1F5E   E1                     POP   HL   
1F5F                          ;*Macro unroll:  test "2 3 *", 6
1F5F   31 00 53               LD   SP,STACK   
1F62   CD 40 0D               CALL   coldInit   
1F65   CD 66 51               CALL   execStr   
1F68   32 20 33 20 2A 00      DB   "2 3 *",0   
1F6E   CD 80 0C               CALL   flushBuffer   
1F71   E1                     POP   HL   
1F72   E5                     PUSH   HL   
1F73   11 06 00               LD   DE,6   
1F76   B7                     OR   A   
1F77   ED 52                  SBC   HL,DE   
1F79   7D                     LD   A,L   
1F7A   B4                     OR   H   
1F7B   CA DB 1F               JP   Z,expectM_2907S111   
1F7E   CD F8 0C               CALL   printStr   
1F81   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1F8D   CD F8 0C               CALL   printStr   
1F90   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F9F   21 06 00               LD   hl,6   
1FA2   E5                     PUSH   hl   
1FA3   E5                     PUSH   hl   
1FA4   CD 17 0E               CALL   run   
1FA7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1FAF   CD 80 0C               CALL   flushBuffer   
1FB2   CD F8 0C               CALL   printStr   
1FB5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FC2   E1                     POP   hl   
1FC3   E5                     PUSH   hl   
1FC4   E5                     PUSH   hl   
1FC5   CD 17 0E               CALL   run   
1FC8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1FD7   CD 80 0C               CALL   flushBuffer   
1FDA   76                     HALT      
1FDB                EXPECTM_2907S111:      
1FDB   E1                     POP   HL   
1FDC                          ;*Macro unroll:  test "1 2 3 + *", 5
1FDC   31 00 53               LD   SP,STACK   
1FDF   CD 40 0D               CALL   coldInit   
1FE2   CD 66 51               CALL   execStr   
1FE5   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1FEF   CD 80 0C               CALL   flushBuffer   
1FF2   E1                     POP   HL   
1FF3   E5                     PUSH   HL   
1FF4   11 05 00               LD   DE,5   
1FF7   B7                     OR   A   
1FF8   ED 52                  SBC   HL,DE   
1FFA   7D                     LD   A,L   
1FFB   B4                     OR   H   
1FFC   CA 60 20               JP   Z,expectM_2908S112   
1FFF   CD F8 0C               CALL   printStr   
2002   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
2012   CD F8 0C               CALL   printStr   
2015   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2024   21 05 00               LD   hl,5   
2027   E5                     PUSH   hl   
2028   E5                     PUSH   hl   
2029   CD 17 0E               CALL   run   
202C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2034   CD 80 0C               CALL   flushBuffer   
2037   CD F8 0C               CALL   printStr   
203A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2047   E1                     POP   hl   
2048   E5                     PUSH   hl   
2049   E5                     PUSH   hl   
204A   CD 17 0E               CALL   run   
204D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
205C   CD 80 0C               CALL   flushBuffer   
205F   76                     HALT      
2060                EXPECTM_2908S112:      
2060   E1                     POP   HL   
2061                          ;*Macro unroll:  test "7 3 /", 2
2061   31 00 53               LD   SP,STACK   
2064   CD 40 0D               CALL   coldInit   
2067   CD 66 51               CALL   execStr   
206A   37 20 33 20 2F 00      DB   "7 3 /",0   
2070   CD 80 0C               CALL   flushBuffer   
2073   E1                     POP   HL   
2074   E5                     PUSH   HL   
2075   11 02 00               LD   DE,2   
2078   B7                     OR   A   
2079   ED 52                  SBC   HL,DE   
207B   7D                     LD   A,L   
207C   B4                     OR   H   
207D   CA DD 20               JP   Z,expectM_2909S113   
2080   CD F8 0C               CALL   printStr   
2083   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
208F   CD F8 0C               CALL   printStr   
2092   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20A1   21 02 00               LD   hl,2   
20A4   E5                     PUSH   hl   
20A5   E5                     PUSH   hl   
20A6   CD 17 0E               CALL   run   
20A9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
20B1   CD 80 0C               CALL   flushBuffer   
20B4   CD F8 0C               CALL   printStr   
20B7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20C4   E1                     POP   hl   
20C5   E5                     PUSH   hl   
20C6   E5                     PUSH   hl   
20C7   CD 17 0E               CALL   run   
20CA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
20D9   CD 80 0C               CALL   flushBuffer   
20DC   76                     HALT      
20DD                EXPECTM_2909S113:      
20DD   E1                     POP   HL   
20DE                          ;*Macro unroll:  test "100a= 1a+= a", 101
20DE   31 00 53               LD   SP,STACK   
20E1   CD 40 0D               CALL   coldInit   
20E4   CD 66 51               CALL   execStr   
20E7   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
20F4   CD 80 0C               CALL   flushBuffer   
20F7   E1                     POP   HL   
20F8   E5                     PUSH   HL   
20F9   11 65 00               LD   DE,101   
20FC   B7                     OR   A   
20FD   ED 52                  SBC   HL,DE   
20FF   7D                     LD   A,L   
2100   B4                     OR   H   
2101   CA 68 21               JP   Z,expectM_2910S114   
2104   CD F8 0C               CALL   printStr   
2107   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
211A   CD F8 0C               CALL   printStr   
211D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
212C   21 65 00               LD   hl,101   
212F   E5                     PUSH   hl   
2130   E5                     PUSH   hl   
2131   CD 17 0E               CALL   run   
2134   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
213C   CD 80 0C               CALL   flushBuffer   
213F   CD F8 0C               CALL   printStr   
2142   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
214F   E1                     POP   hl   
2150   E5                     PUSH   hl   
2151   E5                     PUSH   hl   
2152   CD 17 0E               CALL   run   
2155   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2164   CD 80 0C               CALL   flushBuffer   
2167   76                     HALT      
2168                EXPECTM_2910S114:      
2168   E1                     POP   HL   
2169                          ;*Macro unroll:  test "100a= a1-= a", 99
2169   31 00 53               LD   SP,STACK   
216C   CD 40 0D               CALL   coldInit   
216F   CD 66 51               CALL   execStr   
2172   31 30 30 61 3D 20 61 31 2D 3D 20 61 00 DB   "100a= a1-= a",0   
217F   CD 80 0C               CALL   flushBuffer   
2182   E1                     POP   HL   
2183   E5                     PUSH   HL   
2184   11 63 00               LD   DE,99   
2187   B7                     OR   A   
2188   ED 52                  SBC   HL,DE   
218A   7D                     LD   A,L   
218B   B4                     OR   H   
218C   CA F3 21               JP   Z,expectM_2911S115   
218F   CD F8 0C               CALL   printStr   
2192   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 31 2D 3D 20 61 00 .CSTR   "Code: ","100a= a1-= a"   
21A5   CD F8 0C               CALL   printStr   
21A8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21B7   21 63 00               LD   hl,99   
21BA   E5                     PUSH   hl   
21BB   E5                     PUSH   hl   
21BC   CD 17 0E               CALL   run   
21BF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
21C7   CD 80 0C               CALL   flushBuffer   
21CA   CD F8 0C               CALL   printStr   
21CD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21DA   E1                     POP   hl   
21DB   E5                     PUSH   hl   
21DC   E5                     PUSH   hl   
21DD   CD 17 0E               CALL   run   
21E0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
21EF   CD 80 0C               CALL   flushBuffer   
21F2   76                     HALT      
21F3                EXPECTM_2911S115:      
21F3   E1                     POP   HL   
21F4                          ;*Macro unroll:  test "100a= a2*= a", 200
21F4   31 00 53               LD   SP,STACK   
21F7   CD 40 0D               CALL   coldInit   
21FA   CD 66 51               CALL   execStr   
21FD   31 30 30 61 3D 20 61 32 2A 3D 20 61 00 DB   "100a= a2*= a",0   
220A   CD 80 0C               CALL   flushBuffer   
220D   E1                     POP   HL   
220E   E5                     PUSH   HL   
220F   11 C8 00               LD   DE,200   
2212   B7                     OR   A   
2213   ED 52                  SBC   HL,DE   
2215   7D                     LD   A,L   
2216   B4                     OR   H   
2217   CA 7E 22               JP   Z,expectM_2912S116   
221A   CD F8 0C               CALL   printStr   
221D   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2A 3D 20 61 00 .CSTR   "Code: ","100a= a2*= a"   
2230   CD F8 0C               CALL   printStr   
2233   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2242   21 C8 00               LD   hl,200   
2245   E5                     PUSH   hl   
2246   E5                     PUSH   hl   
2247   CD 17 0E               CALL   run   
224A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2252   CD 80 0C               CALL   flushBuffer   
2255   CD F8 0C               CALL   printStr   
2258   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2265   E1                     POP   hl   
2266   E5                     PUSH   hl   
2267   E5                     PUSH   hl   
2268   CD 17 0E               CALL   run   
226B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
227A   CD 80 0C               CALL   flushBuffer   
227D   76                     HALT      
227E                EXPECTM_2912S116:      
227E   E1                     POP   HL   
227F                          ;*Macro unroll:  test "100a= a2/= a", 50
227F   31 00 53               LD   SP,STACK   
2282   CD 40 0D               CALL   coldInit   
2285   CD 66 51               CALL   execStr   
2288   31 30 30 61 3D 20 61 32 2F 3D 20 61 00 DB   "100a= a2/= a",0   
2295   CD 80 0C               CALL   flushBuffer   
2298   E1                     POP   HL   
2299   E5                     PUSH   HL   
229A   11 32 00               LD   DE,50   
229D   B7                     OR   A   
229E   ED 52                  SBC   HL,DE   
22A0   7D                     LD   A,L   
22A1   B4                     OR   H   
22A2   CA 09 23               JP   Z,expectM_2913S117   
22A5   CD F8 0C               CALL   printStr   
22A8   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2F 3D 20 61 00 .CSTR   "Code: ","100a= a2/= a"   
22BB   CD F8 0C               CALL   printStr   
22BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22CD   21 32 00               LD   hl,50   
22D0   E5                     PUSH   hl   
22D1   E5                     PUSH   hl   
22D2   CD 17 0E               CALL   run   
22D5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
22DD   CD 80 0C               CALL   flushBuffer   
22E0   CD F8 0C               CALL   printStr   
22E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22F0   E1                     POP   hl   
22F1   E5                     PUSH   hl   
22F2   E5                     PUSH   hl   
22F3   CD 17 0E               CALL   run   
22F6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2305   CD 80 0C               CALL   flushBuffer   
2308   76                     HALT      
2309                EXPECTM_2913S117:      
2309   E1                     POP   HL   
230A                          ;*Macro unroll:  test "7 3 / /re", 1
230A   31 00 53               LD   SP,STACK   
230D   CD 40 0D               CALL   coldInit   
2310   CD 66 51               CALL   execStr   
2313   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
231D   CD 80 0C               CALL   flushBuffer   
2320   E1                     POP   HL   
2321   E5                     PUSH   HL   
2322   11 01 00               LD   DE,1   
2325   B7                     OR   A   
2326   ED 52                  SBC   HL,DE   
2328   7D                     LD   A,L   
2329   B4                     OR   H   
232A   CA 8E 23               JP   Z,expectM_2914S118   
232D   CD F8 0C               CALL   printStr   
2330   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
2340   CD F8 0C               CALL   printStr   
2343   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2352   21 01 00               LD   hl,1   
2355   E5                     PUSH   hl   
2356   E5                     PUSH   hl   
2357   CD 17 0E               CALL   run   
235A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2362   CD 80 0C               CALL   flushBuffer   
2365   CD F8 0C               CALL   printStr   
2368   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2375   E1                     POP   hl   
2376   E5                     PUSH   hl   
2377   E5                     PUSH   hl   
2378   CD 17 0E               CALL   run   
237B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
238A   CD 80 0C               CALL   flushBuffer   
238D   76                     HALT      
238E                EXPECTM_2914S118:      
238E   E1                     POP   HL   
238F                          ;*Macro unroll:  test "7 3 /", 2
238F   31 00 53               LD   SP,STACK   
2392   CD 40 0D               CALL   coldInit   
2395   CD 66 51               CALL   execStr   
2398   37 20 33 20 2F 00      DB   "7 3 /",0   
239E   CD 80 0C               CALL   flushBuffer   
23A1   E1                     POP   HL   
23A2   E5                     PUSH   HL   
23A3   11 02 00               LD   DE,2   
23A6   B7                     OR   A   
23A7   ED 52                  SBC   HL,DE   
23A9   7D                     LD   A,L   
23AA   B4                     OR   H   
23AB   CA 0B 24               JP   Z,expectM_2915S119   
23AE   CD F8 0C               CALL   printStr   
23B1   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
23BD   CD F8 0C               CALL   printStr   
23C0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23CF   21 02 00               LD   hl,2   
23D2   E5                     PUSH   hl   
23D3   E5                     PUSH   hl   
23D4   CD 17 0E               CALL   run   
23D7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
23DF   CD 80 0C               CALL   flushBuffer   
23E2   CD F8 0C               CALL   printStr   
23E5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23F2   E1                     POP   hl   
23F3   E5                     PUSH   hl   
23F4   E5                     PUSH   hl   
23F5   CD 17 0E               CALL   run   
23F8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2407   CD 80 0C               CALL   flushBuffer   
240A   76                     HALT      
240B                EXPECTM_2915S119:      
240B   E1                     POP   HL   
240C                          ;*Macro unroll:  test "2 3 ==", FALSE
240C   31 00 53               LD   SP,STACK   
240F   CD 40 0D               CALL   coldInit   
2412   CD 66 51               CALL   execStr   
2415   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
241C   CD 80 0C               CALL   flushBuffer   
241F   E1                     POP   HL   
2420   E5                     PUSH   HL   
2421   11 00 00               LD   DE,FALSE   
2424   B7                     OR   A   
2425   ED 52                  SBC   HL,DE   
2427   7D                     LD   A,L   
2428   B4                     OR   H   
2429   CA 8A 24               JP   Z,expectM_2916S120   
242C   CD F8 0C               CALL   printStr   
242F   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
243C   CD F8 0C               CALL   printStr   
243F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
244E   21 00 00               LD   hl,FALSE   
2451   E5                     PUSH   hl   
2452   E5                     PUSH   hl   
2453   CD 17 0E               CALL   run   
2456   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
245E   CD 80 0C               CALL   flushBuffer   
2461   CD F8 0C               CALL   printStr   
2464   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2471   E1                     POP   hl   
2472   E5                     PUSH   hl   
2473   E5                     PUSH   hl   
2474   CD 17 0E               CALL   run   
2477   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2486   CD 80 0C               CALL   flushBuffer   
2489   76                     HALT      
248A                EXPECTM_2916S120:      
248A   E1                     POP   HL   
248B                          ;*Macro unroll:  test "3 3 ==", TRUE
248B   31 00 53               LD   SP,STACK   
248E   CD 40 0D               CALL   coldInit   
2491   CD 66 51               CALL   execStr   
2494   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
249B   CD 80 0C               CALL   flushBuffer   
249E   E1                     POP   HL   
249F   E5                     PUSH   HL   
24A0   11 FF FF               LD   DE,TRUE   
24A3   B7                     OR   A   
24A4   ED 52                  SBC   HL,DE   
24A6   7D                     LD   A,L   
24A7   B4                     OR   H   
24A8   CA 09 25               JP   Z,expectM_2917S121   
24AB   CD F8 0C               CALL   printStr   
24AE   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
24BB   CD F8 0C               CALL   printStr   
24BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24CD   21 FF FF               LD   hl,TRUE   
24D0   E5                     PUSH   hl   
24D1   E5                     PUSH   hl   
24D2   CD 17 0E               CALL   run   
24D5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
24DD   CD 80 0C               CALL   flushBuffer   
24E0   CD F8 0C               CALL   printStr   
24E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24F0   E1                     POP   hl   
24F1   E5                     PUSH   hl   
24F2   E5                     PUSH   hl   
24F3   CD 17 0E               CALL   run   
24F6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2505   CD 80 0C               CALL   flushBuffer   
2508   76                     HALT      
2509                EXPECTM_2917S121:      
2509   E1                     POP   HL   
250A                          ;*Macro unroll:  test "1 2 <", TRUE
250A   31 00 53               LD   SP,STACK   
250D   CD 40 0D               CALL   coldInit   
2510   CD 66 51               CALL   execStr   
2513   31 20 32 20 3C 00      DB   "1 2 <",0   
2519   CD 80 0C               CALL   flushBuffer   
251C   E1                     POP   HL   
251D   E5                     PUSH   HL   
251E   11 FF FF               LD   DE,TRUE   
2521   B7                     OR   A   
2522   ED 52                  SBC   HL,DE   
2524   7D                     LD   A,L   
2525   B4                     OR   H   
2526   CA 86 25               JP   Z,expectM_2918S122   
2529   CD F8 0C               CALL   printStr   
252C   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2538   CD F8 0C               CALL   printStr   
253B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
254A   21 FF FF               LD   hl,TRUE   
254D   E5                     PUSH   hl   
254E   E5                     PUSH   hl   
254F   CD 17 0E               CALL   run   
2552   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
255A   CD 80 0C               CALL   flushBuffer   
255D   CD F8 0C               CALL   printStr   
2560   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
256D   E1                     POP   hl   
256E   E5                     PUSH   hl   
256F   E5                     PUSH   hl   
2570   CD 17 0E               CALL   run   
2573   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2582   CD 80 0C               CALL   flushBuffer   
2585   76                     HALT      
2586                EXPECTM_2918S122:      
2586   E1                     POP   HL   
2587                          ;*Macro unroll:  test "2 1 <", FALSE
2587   31 00 53               LD   SP,STACK   
258A   CD 40 0D               CALL   coldInit   
258D   CD 66 51               CALL   execStr   
2590   32 20 31 20 3C 00      DB   "2 1 <",0   
2596   CD 80 0C               CALL   flushBuffer   
2599   E1                     POP   HL   
259A   E5                     PUSH   HL   
259B   11 00 00               LD   DE,FALSE   
259E   B7                     OR   A   
259F   ED 52                  SBC   HL,DE   
25A1   7D                     LD   A,L   
25A2   B4                     OR   H   
25A3   CA 03 26               JP   Z,expectM_2919S123   
25A6   CD F8 0C               CALL   printStr   
25A9   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
25B5   CD F8 0C               CALL   printStr   
25B8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25C7   21 00 00               LD   hl,FALSE   
25CA   E5                     PUSH   hl   
25CB   E5                     PUSH   hl   
25CC   CD 17 0E               CALL   run   
25CF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25D7   CD 80 0C               CALL   flushBuffer   
25DA   CD F8 0C               CALL   printStr   
25DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25EA   E1                     POP   hl   
25EB   E5                     PUSH   hl   
25EC   E5                     PUSH   hl   
25ED   CD 17 0E               CALL   run   
25F0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
25FF   CD 80 0C               CALL   flushBuffer   
2602   76                     HALT      
2603                EXPECTM_2919S123:      
2603   E1                     POP   HL   
2604                          ;*Macro unroll:  test "2 3 <", TRUE
2604   31 00 53               LD   SP,STACK   
2607   CD 40 0D               CALL   coldInit   
260A   CD 66 51               CALL   execStr   
260D   32 20 33 20 3C 00      DB   "2 3 <",0   
2613   CD 80 0C               CALL   flushBuffer   
2616   E1                     POP   HL   
2617   E5                     PUSH   HL   
2618   11 FF FF               LD   DE,TRUE   
261B   B7                     OR   A   
261C   ED 52                  SBC   HL,DE   
261E   7D                     LD   A,L   
261F   B4                     OR   H   
2620   CA 80 26               JP   Z,expectM_2920S124   
2623   CD F8 0C               CALL   printStr   
2626   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2632   CD F8 0C               CALL   printStr   
2635   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2644   21 FF FF               LD   hl,TRUE   
2647   E5                     PUSH   hl   
2648   E5                     PUSH   hl   
2649   CD 17 0E               CALL   run   
264C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2654   CD 80 0C               CALL   flushBuffer   
2657   CD F8 0C               CALL   printStr   
265A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2667   E1                     POP   hl   
2668   E5                     PUSH   hl   
2669   E5                     PUSH   hl   
266A   CD 17 0E               CALL   run   
266D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
267C   CD 80 0C               CALL   flushBuffer   
267F   76                     HALT      
2680                EXPECTM_2920S124:      
2680   E1                     POP   HL   
2681                          ;*Macro unroll:  test "3 3 <", FALSE
2681   31 00 53               LD   SP,STACK   
2684   CD 40 0D               CALL   coldInit   
2687   CD 66 51               CALL   execStr   
268A   33 20 33 20 3C 00      DB   "3 3 <",0   
2690   CD 80 0C               CALL   flushBuffer   
2693   E1                     POP   HL   
2694   E5                     PUSH   HL   
2695   11 00 00               LD   DE,FALSE   
2698   B7                     OR   A   
2699   ED 52                  SBC   HL,DE   
269B   7D                     LD   A,L   
269C   B4                     OR   H   
269D   CA FD 26               JP   Z,expectM_2921S125   
26A0   CD F8 0C               CALL   printStr   
26A3   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
26AF   CD F8 0C               CALL   printStr   
26B2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26C1   21 00 00               LD   hl,FALSE   
26C4   E5                     PUSH   hl   
26C5   E5                     PUSH   hl   
26C6   CD 17 0E               CALL   run   
26C9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26D1   CD 80 0C               CALL   flushBuffer   
26D4   CD F8 0C               CALL   printStr   
26D7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26E4   E1                     POP   hl   
26E5   E5                     PUSH   hl   
26E6   E5                     PUSH   hl   
26E7   CD 17 0E               CALL   run   
26EA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
26F9   CD 80 0C               CALL   flushBuffer   
26FC   76                     HALT      
26FD                EXPECTM_2921S125:      
26FD   E1                     POP   HL   
26FE                          ;*Macro unroll:  test "1 2 >", FALSE
26FE   31 00 53               LD   SP,STACK   
2701   CD 40 0D               CALL   coldInit   
2704   CD 66 51               CALL   execStr   
2707   31 20 32 20 3E 00      DB   "1 2 >",0   
270D   CD 80 0C               CALL   flushBuffer   
2710   E1                     POP   HL   
2711   E5                     PUSH   HL   
2712   11 00 00               LD   DE,FALSE   
2715   B7                     OR   A   
2716   ED 52                  SBC   HL,DE   
2718   7D                     LD   A,L   
2719   B4                     OR   H   
271A   CA 7A 27               JP   Z,expectM_2922S126   
271D   CD F8 0C               CALL   printStr   
2720   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
272C   CD F8 0C               CALL   printStr   
272F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
273E   21 00 00               LD   hl,FALSE   
2741   E5                     PUSH   hl   
2742   E5                     PUSH   hl   
2743   CD 17 0E               CALL   run   
2746   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
274E   CD 80 0C               CALL   flushBuffer   
2751   CD F8 0C               CALL   printStr   
2754   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2761   E1                     POP   hl   
2762   E5                     PUSH   hl   
2763   E5                     PUSH   hl   
2764   CD 17 0E               CALL   run   
2767   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2776   CD 80 0C               CALL   flushBuffer   
2779   76                     HALT      
277A                EXPECTM_2922S126:      
277A   E1                     POP   HL   
277B                          ;*Macro unroll:  test "2 1 >", TRUE
277B   31 00 53               LD   SP,STACK   
277E   CD 40 0D               CALL   coldInit   
2781   CD 66 51               CALL   execStr   
2784   32 20 31 20 3E 00      DB   "2 1 >",0   
278A   CD 80 0C               CALL   flushBuffer   
278D   E1                     POP   HL   
278E   E5                     PUSH   HL   
278F   11 FF FF               LD   DE,TRUE   
2792   B7                     OR   A   
2793   ED 52                  SBC   HL,DE   
2795   7D                     LD   A,L   
2796   B4                     OR   H   
2797   CA F7 27               JP   Z,expectM_2923S127   
279A   CD F8 0C               CALL   printStr   
279D   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
27A9   CD F8 0C               CALL   printStr   
27AC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27BB   21 FF FF               LD   hl,TRUE   
27BE   E5                     PUSH   hl   
27BF   E5                     PUSH   hl   
27C0   CD 17 0E               CALL   run   
27C3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27CB   CD 80 0C               CALL   flushBuffer   
27CE   CD F8 0C               CALL   printStr   
27D1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27DE   E1                     POP   hl   
27DF   E5                     PUSH   hl   
27E0   E5                     PUSH   hl   
27E1   CD 17 0E               CALL   run   
27E4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
27F3   CD 80 0C               CALL   flushBuffer   
27F6   76                     HALT      
27F7                EXPECTM_2923S127:      
27F7   E1                     POP   HL   
27F8                          ;*Macro unroll:  test "3 3 >", FALSE
27F8   31 00 53               LD   SP,STACK   
27FB   CD 40 0D               CALL   coldInit   
27FE   CD 66 51               CALL   execStr   
2801   33 20 33 20 3E 00      DB   "3 3 >",0   
2807   CD 80 0C               CALL   flushBuffer   
280A   E1                     POP   HL   
280B   E5                     PUSH   HL   
280C   11 00 00               LD   DE,FALSE   
280F   B7                     OR   A   
2810   ED 52                  SBC   HL,DE   
2812   7D                     LD   A,L   
2813   B4                     OR   H   
2814   CA 74 28               JP   Z,expectM_2924S128   
2817   CD F8 0C               CALL   printStr   
281A   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
2826   CD F8 0C               CALL   printStr   
2829   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2838   21 00 00               LD   hl,FALSE   
283B   E5                     PUSH   hl   
283C   E5                     PUSH   hl   
283D   CD 17 0E               CALL   run   
2840   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2848   CD 80 0C               CALL   flushBuffer   
284B   CD F8 0C               CALL   printStr   
284E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
285B   E1                     POP   hl   
285C   E5                     PUSH   hl   
285D   E5                     PUSH   hl   
285E   CD 17 0E               CALL   run   
2861   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2870   CD 80 0C               CALL   flushBuffer   
2873   76                     HALT      
2874                EXPECTM_2924S128:      
2874   E1                     POP   HL   
2875                          ;*Macro unroll:  test "4 3 >", TRUE
2875   31 00 53               LD   SP,STACK   
2878   CD 40 0D               CALL   coldInit   
287B   CD 66 51               CALL   execStr   
287E   34 20 33 20 3E 00      DB   "4 3 >",0   
2884   CD 80 0C               CALL   flushBuffer   
2887   E1                     POP   HL   
2888   E5                     PUSH   HL   
2889   11 FF FF               LD   DE,TRUE   
288C   B7                     OR   A   
288D   ED 52                  SBC   HL,DE   
288F   7D                     LD   A,L   
2890   B4                     OR   H   
2891   CA F1 28               JP   Z,expectM_2925S129   
2894   CD F8 0C               CALL   printStr   
2897   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
28A3   CD F8 0C               CALL   printStr   
28A6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28B5   21 FF FF               LD   hl,TRUE   
28B8   E5                     PUSH   hl   
28B9   E5                     PUSH   hl   
28BA   CD 17 0E               CALL   run   
28BD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28C5   CD 80 0C               CALL   flushBuffer   
28C8   CD F8 0C               CALL   printStr   
28CB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28D8   E1                     POP   hl   
28D9   E5                     PUSH   hl   
28DA   E5                     PUSH   hl   
28DB   CD 17 0E               CALL   run   
28DE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
28ED   CD 80 0C               CALL   flushBuffer   
28F0   76                     HALT      
28F1                EXPECTM_2925S129:      
28F1   E1                     POP   HL   
28F2                          ;*Macro unroll:  test "2 2 <=", TRUE
28F2   31 00 53               LD   SP,STACK   
28F5   CD 40 0D               CALL   coldInit   
28F8   CD 66 51               CALL   execStr   
28FB   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
2902   CD 80 0C               CALL   flushBuffer   
2905   E1                     POP   HL   
2906   E5                     PUSH   HL   
2907   11 FF FF               LD   DE,TRUE   
290A   B7                     OR   A   
290B   ED 52                  SBC   HL,DE   
290D   7D                     LD   A,L   
290E   B4                     OR   H   
290F   CA 70 29               JP   Z,expectM_2926S130   
2912   CD F8 0C               CALL   printStr   
2915   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2922   CD F8 0C               CALL   printStr   
2925   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2934   21 FF FF               LD   hl,TRUE   
2937   E5                     PUSH   hl   
2938   E5                     PUSH   hl   
2939   CD 17 0E               CALL   run   
293C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2944   CD 80 0C               CALL   flushBuffer   
2947   CD F8 0C               CALL   printStr   
294A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2957   E1                     POP   hl   
2958   E5                     PUSH   hl   
2959   E5                     PUSH   hl   
295A   CD 17 0E               CALL   run   
295D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
296C   CD 80 0C               CALL   flushBuffer   
296F   76                     HALT      
2970                EXPECTM_2926S130:      
2970   E1                     POP   HL   
2971                          ;*Macro unroll:  test "2 2 >=", TRUE
2971   31 00 53               LD   SP,STACK   
2974   CD 40 0D               CALL   coldInit   
2977   CD 66 51               CALL   execStr   
297A   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
2981   CD 80 0C               CALL   flushBuffer   
2984   E1                     POP   HL   
2985   E5                     PUSH   HL   
2986   11 FF FF               LD   DE,TRUE   
2989   B7                     OR   A   
298A   ED 52                  SBC   HL,DE   
298C   7D                     LD   A,L   
298D   B4                     OR   H   
298E   CA EF 29               JP   Z,expectM_2927S131   
2991   CD F8 0C               CALL   printStr   
2994   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
29A1   CD F8 0C               CALL   printStr   
29A4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29B3   21 FF FF               LD   hl,TRUE   
29B6   E5                     PUSH   hl   
29B7   E5                     PUSH   hl   
29B8   CD 17 0E               CALL   run   
29BB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
29C3   CD 80 0C               CALL   flushBuffer   
29C6   CD F8 0C               CALL   printStr   
29C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29D6   E1                     POP   hl   
29D7   E5                     PUSH   hl   
29D8   E5                     PUSH   hl   
29D9   CD 17 0E               CALL   run   
29DC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
29EB   CD 80 0C               CALL   flushBuffer   
29EE   76                     HALT      
29EF                EXPECTM_2927S131:      
29EF   E1                     POP   HL   
29F0                          ;*Macro unroll:  test "3 1 <<", 6
29F0   31 00 53               LD   SP,STACK   
29F3   CD 40 0D               CALL   coldInit   
29F6   CD 66 51               CALL   execStr   
29F9   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
2A00   CD 80 0C               CALL   flushBuffer   
2A03   E1                     POP   HL   
2A04   E5                     PUSH   HL   
2A05   11 06 00               LD   DE,6   
2A08   B7                     OR   A   
2A09   ED 52                  SBC   HL,DE   
2A0B   7D                     LD   A,L   
2A0C   B4                     OR   H   
2A0D   CA 6E 2A               JP   Z,expectM_2928S132   
2A10   CD F8 0C               CALL   printStr   
2A13   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2A20   CD F8 0C               CALL   printStr   
2A23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A32   21 06 00               LD   hl,6   
2A35   E5                     PUSH   hl   
2A36   E5                     PUSH   hl   
2A37   CD 17 0E               CALL   run   
2A3A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A42   CD 80 0C               CALL   flushBuffer   
2A45   CD F8 0C               CALL   printStr   
2A48   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A55   E1                     POP   hl   
2A56   E5                     PUSH   hl   
2A57   E5                     PUSH   hl   
2A58   CD 17 0E               CALL   run   
2A5B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A6A   CD 80 0C               CALL   flushBuffer   
2A6D   76                     HALT      
2A6E                EXPECTM_2928S132:      
2A6E   E1                     POP   HL   
2A6F                          ;*Macro unroll:  test "10 1 >>", 5
2A6F   31 00 53               LD   SP,STACK   
2A72   CD 40 0D               CALL   coldInit   
2A75   CD 66 51               CALL   execStr   
2A78   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
2A80   CD 80 0C               CALL   flushBuffer   
2A83   E1                     POP   HL   
2A84   E5                     PUSH   HL   
2A85   11 05 00               LD   DE,5   
2A88   B7                     OR   A   
2A89   ED 52                  SBC   HL,DE   
2A8B   7D                     LD   A,L   
2A8C   B4                     OR   H   
2A8D   CA EF 2A               JP   Z,expectM_2929S133   
2A90   CD F8 0C               CALL   printStr   
2A93   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2AA1   CD F8 0C               CALL   printStr   
2AA4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AB3   21 05 00               LD   hl,5   
2AB6   E5                     PUSH   hl   
2AB7   E5                     PUSH   hl   
2AB8   CD 17 0E               CALL   run   
2ABB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2AC3   CD 80 0C               CALL   flushBuffer   
2AC6   CD F8 0C               CALL   printStr   
2AC9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AD6   E1                     POP   hl   
2AD7   E5                     PUSH   hl   
2AD8   E5                     PUSH   hl   
2AD9   CD 17 0E               CALL   run   
2ADC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2AEB   CD 80 0C               CALL   flushBuffer   
2AEE   76                     HALT      
2AEF                EXPECTM_2929S133:      
2AEF   E1                     POP   HL   
2AF0                          ;*Macro unroll:  test "1 x = x", 1
2AF0   31 00 53               LD   SP,STACK   
2AF3   CD 40 0D               CALL   coldInit   
2AF6   CD 66 51               CALL   execStr   
2AF9   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
2B01   CD 80 0C               CALL   flushBuffer   
2B04   E1                     POP   HL   
2B05   E5                     PUSH   HL   
2B06   11 01 00               LD   DE,1   
2B09   B7                     OR   A   
2B0A   ED 52                  SBC   HL,DE   
2B0C   7D                     LD   A,L   
2B0D   B4                     OR   H   
2B0E   CA 70 2B               JP   Z,expectM_2930S134   
2B11   CD F8 0C               CALL   printStr   
2B14   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2B22   CD F8 0C               CALL   printStr   
2B25   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B34   21 01 00               LD   hl,1   
2B37   E5                     PUSH   hl   
2B38   E5                     PUSH   hl   
2B39   CD 17 0E               CALL   run   
2B3C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B44   CD 80 0C               CALL   flushBuffer   
2B47   CD F8 0C               CALL   printStr   
2B4A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B57   E1                     POP   hl   
2B58   E5                     PUSH   hl   
2B59   E5                     PUSH   hl   
2B5A   CD 17 0E               CALL   run   
2B5D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B6C   CD 80 0C               CALL   flushBuffer   
2B6F   76                     HALT      
2B70                EXPECTM_2930S134:      
2B70   E1                     POP   HL   
2B71                          ;*Macro unroll:  test "1{}^", 1
2B71   31 00 53               LD   SP,STACK   
2B74   CD 40 0D               CALL   coldInit   
2B77   CD 66 51               CALL   execStr   
2B7A   31 7B 7D 5E 00         DB   "1{}^",0   
2B7F   CD 80 0C               CALL   flushBuffer   
2B82   E1                     POP   HL   
2B83   E5                     PUSH   HL   
2B84   11 01 00               LD   DE,1   
2B87   B7                     OR   A   
2B88   ED 52                  SBC   HL,DE   
2B8A   7D                     LD   A,L   
2B8B   B4                     OR   H   
2B8C   CA EB 2B               JP   Z,expectM_2931S135   
2B8F   CD F8 0C               CALL   printStr   
2B92   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2B9D   CD F8 0C               CALL   printStr   
2BA0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BAF   21 01 00               LD   hl,1   
2BB2   E5                     PUSH   hl   
2BB3   E5                     PUSH   hl   
2BB4   CD 17 0E               CALL   run   
2BB7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2BBF   CD 80 0C               CALL   flushBuffer   
2BC2   CD F8 0C               CALL   printStr   
2BC5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BD2   E1                     POP   hl   
2BD3   E5                     PUSH   hl   
2BD4   E5                     PUSH   hl   
2BD5   CD 17 0E               CALL   run   
2BD8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BE7   CD 80 0C               CALL   flushBuffer   
2BEA   76                     HALT      
2BEB                EXPECTM_2931S135:      
2BEB   E1                     POP   HL   
2BEC                          ;*Macro unroll:  test "{1}^", 1
2BEC   31 00 53               LD   SP,STACK   
2BEF   CD 40 0D               CALL   coldInit   
2BF2   CD 66 51               CALL   execStr   
2BF5   7B 31 7D 5E 00         DB   "{1}^",0   
2BFA   CD 80 0C               CALL   flushBuffer   
2BFD   E1                     POP   HL   
2BFE   E5                     PUSH   HL   
2BFF   11 01 00               LD   DE,1   
2C02   B7                     OR   A   
2C03   ED 52                  SBC   HL,DE   
2C05   7D                     LD   A,L   
2C06   B4                     OR   H   
2C07   CA 66 2C               JP   Z,expectM_2932S136   
2C0A   CD F8 0C               CALL   printStr   
2C0D   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2C18   CD F8 0C               CALL   printStr   
2C1B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C2A   21 01 00               LD   hl,1   
2C2D   E5                     PUSH   hl   
2C2E   E5                     PUSH   hl   
2C2F   CD 17 0E               CALL   run   
2C32   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C3A   CD 80 0C               CALL   flushBuffer   
2C3D   CD F8 0C               CALL   printStr   
2C40   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C4D   E1                     POP   hl   
2C4E   E5                     PUSH   hl   
2C4F   E5                     PUSH   hl   
2C50   CD 17 0E               CALL   run   
2C53   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C62   CD 80 0C               CALL   flushBuffer   
2C65   76                     HALT      
2C66                EXPECTM_2932S136:      
2C66   E1                     POP   HL   
2C67                          ;*Macro unroll:  test "{{1}^}^", 1
2C67   31 00 53               LD   SP,STACK   
2C6A   CD 40 0D               CALL   coldInit   
2C6D   CD 66 51               CALL   execStr   
2C70   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
2C78   CD 80 0C               CALL   flushBuffer   
2C7B   E1                     POP   HL   
2C7C   E5                     PUSH   HL   
2C7D   11 01 00               LD   DE,1   
2C80   B7                     OR   A   
2C81   ED 52                  SBC   HL,DE   
2C83   7D                     LD   A,L   
2C84   B4                     OR   H   
2C85   CA E7 2C               JP   Z,expectM_2933S137   
2C88   CD F8 0C               CALL   printStr   
2C8B   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2C99   CD F8 0C               CALL   printStr   
2C9C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CAB   21 01 00               LD   hl,1   
2CAE   E5                     PUSH   hl   
2CAF   E5                     PUSH   hl   
2CB0   CD 17 0E               CALL   run   
2CB3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2CBB   CD 80 0C               CALL   flushBuffer   
2CBE   CD F8 0C               CALL   printStr   
2CC1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CCE   E1                     POP   hl   
2CCF   E5                     PUSH   hl   
2CD0   E5                     PUSH   hl   
2CD1   CD 17 0E               CALL   run   
2CD4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CE3   CD 80 0C               CALL   flushBuffer   
2CE6   76                     HALT      
2CE7                EXPECTM_2933S137:      
2CE7   E1                     POP   HL   
2CE8                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2CE8   31 00 53               LD   SP,STACK   
2CEB   CD 40 0D               CALL   coldInit   
2CEE   CD 66 51               CALL   execStr   
2CF1   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2CFC   CD 80 0C               CALL   flushBuffer   
2CFF   E1                     POP   HL   
2D00   E5                     PUSH   HL   
2D01   11 01 00               LD   DE,1   
2D04   B7                     OR   A   
2D05   ED 52                  SBC   HL,DE   
2D07   7D                     LD   A,L   
2D08   B4                     OR   H   
2D09   CA 6E 2D               JP   Z,expectM_2934S138   
2D0C   CD F8 0C               CALL   printStr   
2D0F   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2D20   CD F8 0C               CALL   printStr   
2D23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D32   21 01 00               LD   hl,1   
2D35   E5                     PUSH   hl   
2D36   E5                     PUSH   hl   
2D37   CD 17 0E               CALL   run   
2D3A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D42   CD 80 0C               CALL   flushBuffer   
2D45   CD F8 0C               CALL   printStr   
2D48   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D55   E1                     POP   hl   
2D56   E5                     PUSH   hl   
2D57   E5                     PUSH   hl   
2D58   CD 17 0E               CALL   run   
2D5B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D6A   CD 80 0C               CALL   flushBuffer   
2D6D   76                     HALT      
2D6E                EXPECTM_2934S138:      
2D6E   E1                     POP   HL   
2D6F                          ;*Macro unroll:  test "5 /f{10} ?", 5
2D6F   31 00 53               LD   SP,STACK   
2D72   CD 40 0D               CALL   coldInit   
2D75   CD 66 51               CALL   execStr   
2D78   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2D83   CD 80 0C               CALL   flushBuffer   
2D86   E1                     POP   HL   
2D87   E5                     PUSH   HL   
2D88   11 05 00               LD   DE,5   
2D8B   B7                     OR   A   
2D8C   ED 52                  SBC   HL,DE   
2D8E   7D                     LD   A,L   
2D8F   B4                     OR   H   
2D90   CA F5 2D               JP   Z,expectM_2935S139   
2D93   CD F8 0C               CALL   printStr   
2D96   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2DA7   CD F8 0C               CALL   printStr   
2DAA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DB9   21 05 00               LD   hl,5   
2DBC   E5                     PUSH   hl   
2DBD   E5                     PUSH   hl   
2DBE   CD 17 0E               CALL   run   
2DC1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2DC9   CD 80 0C               CALL   flushBuffer   
2DCC   CD F8 0C               CALL   printStr   
2DCF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DDC   E1                     POP   hl   
2DDD   E5                     PUSH   hl   
2DDE   E5                     PUSH   hl   
2DDF   CD 17 0E               CALL   run   
2DE2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DF1   CD 80 0C               CALL   flushBuffer   
2DF4   76                     HALT      
2DF5                EXPECTM_2935S139:      
2DF5   E1                     POP   HL   
2DF6                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2DF6   31 00 53               LD   SP,STACK   
2DF9   CD 40 0D               CALL   coldInit   
2DFC   CD 66 51               CALL   execStr   
2DFF   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2E0C   CD 80 0C               CALL   flushBuffer   
2E0F   E1                     POP   HL   
2E10   E5                     PUSH   HL   
2E11   11 0F 00               LD   DE,15   
2E14   B7                     OR   A   
2E15   ED 52                  SBC   HL,DE   
2E17   7D                     LD   A,L   
2E18   B4                     OR   H   
2E19   CA 80 2E               JP   Z,expectM_2936S140   
2E1C   CD F8 0C               CALL   printStr   
2E1F   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2E32   CD F8 0C               CALL   printStr   
2E35   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E44   21 0F 00               LD   hl,15   
2E47   E5                     PUSH   hl   
2E48   E5                     PUSH   hl   
2E49   CD 17 0E               CALL   run   
2E4C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E54   CD 80 0C               CALL   flushBuffer   
2E57   CD F8 0C               CALL   printStr   
2E5A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E67   E1                     POP   hl   
2E68   E5                     PUSH   hl   
2E69   E5                     PUSH   hl   
2E6A   CD 17 0E               CALL   run   
2E6D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E7C   CD 80 0C               CALL   flushBuffer   
2E7F   76                     HALT      
2E80                EXPECTM_2936S140:      
2E80   E1                     POP   HL   
2E81                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2E81   31 00 53               LD   SP,STACK   
2E84   CD 40 0D               CALL   coldInit   
2E87   CD 66 51               CALL   execStr   
2E8A   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2E9C   CD 80 0C               CALL   flushBuffer   
2E9F   E1                     POP   HL   
2EA0   E5                     PUSH   HL   
2EA1   11 15 00               LD   DE,21   
2EA4   B7                     OR   A   
2EA5   ED 52                  SBC   HL,DE   
2EA7   7D                     LD   A,L   
2EA8   B4                     OR   H   
2EA9   CA 15 2F               JP   Z,expectM_2937S141   
2EAC   CD F8 0C               CALL   printStr   
2EAF   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2EC7   CD F8 0C               CALL   printStr   
2ECA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2ED9   21 15 00               LD   hl,21   
2EDC   E5                     PUSH   hl   
2EDD   E5                     PUSH   hl   
2EDE   CD 17 0E               CALL   run   
2EE1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2EE9   CD 80 0C               CALL   flushBuffer   
2EEC   CD F8 0C               CALL   printStr   
2EEF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EFC   E1                     POP   hl   
2EFD   E5                     PUSH   hl   
2EFE   E5                     PUSH   hl   
2EFF   CD 17 0E               CALL   run   
2F02   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F11   CD 80 0C               CALL   flushBuffer   
2F14   76                     HALT      
2F15                EXPECTM_2937S141:      
2F15   E1                     POP   HL   
2F16                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2F16   31 00 53               LD   SP,STACK   
2F19   CD 40 0D               CALL   coldInit   
2F1C   CD 66 51               CALL   execStr   
2F1F   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
2F31   CD 80 0C               CALL   flushBuffer   
2F34   E1                     POP   HL   
2F35   E5                     PUSH   HL   
2F36   11 0B 00               LD   DE,11   
2F39   B7                     OR   A   
2F3A   ED 52                  SBC   HL,DE   
2F3C   7D                     LD   A,L   
2F3D   B4                     OR   H   
2F3E   CA AA 2F               JP   Z,expectM_2938S142   
2F41   CD F8 0C               CALL   printStr   
2F44   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2F5C   CD F8 0C               CALL   printStr   
2F5F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F6E   21 0B 00               LD   hl,11   
2F71   E5                     PUSH   hl   
2F72   E5                     PUSH   hl   
2F73   CD 17 0E               CALL   run   
2F76   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F7E   CD 80 0C               CALL   flushBuffer   
2F81   CD F8 0C               CALL   printStr   
2F84   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F91   E1                     POP   hl   
2F92   E5                     PUSH   hl   
2F93   E5                     PUSH   hl   
2F94   CD 17 0E               CALL   run   
2F97   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2FA6   CD 80 0C               CALL   flushBuffer   
2FA9   76                     HALT      
2FAA                EXPECTM_2938S142:      
2FAA   E1                     POP   HL   
2FAB                          ;*Macro unroll:  test ": 0#", $0000
2FAB   31 00 53               LD   SP,STACK   
2FAE   CD 40 0D               CALL   coldInit   
2FB1   CD 66 51               CALL   execStr   
2FB4   3A 20 30 23 00         DB   ": 0#",0   
2FB9   CD 80 0C               CALL   flushBuffer   
2FBC   E1                     POP   HL   
2FBD   E5                     PUSH   HL   
2FBE   11 00 00               LD   DE,$0000   
2FC1   B7                     OR   A   
2FC2   ED 52                  SBC   HL,DE   
2FC4   7D                     LD   A,L   
2FC5   B4                     OR   H   
2FC6   CA 25 30               JP   Z,expectM_2939S143   
2FC9   CD F8 0C               CALL   printStr   
2FCC   43 6F 64 65 3A 20 3A 20 30 23 00 .CSTR   "Code: ",": 0#"   
2FD7   CD F8 0C               CALL   printStr   
2FDA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FE9   21 00 00               LD   hl,$0000   
2FEC   E5                     PUSH   hl   
2FED   E5                     PUSH   hl   
2FEE   CD 17 0E               CALL   run   
2FF1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2FF9   CD 80 0C               CALL   flushBuffer   
2FFC   CD F8 0C               CALL   printStr   
2FFF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
300C   E1                     POP   hl   
300D   E5                     PUSH   hl   
300E   E5                     PUSH   hl   
300F   CD 17 0E               CALL   run   
3012   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3021   CD 80 0C               CALL   flushBuffer   
3024   76                     HALT      
3025                EXPECTM_2939S143:      
3025   E1                     POP   HL   
3026                          ;*Macro unroll:  test ":a 0#", $0100
3026   31 00 53               LD   SP,STACK   
3029   CD 40 0D               CALL   coldInit   
302C   CD 66 51               CALL   execStr   
302F   3A 61 20 30 23 00      DB   ":a 0#",0   
3035   CD 80 0C               CALL   flushBuffer   
3038   E1                     POP   HL   
3039   E5                     PUSH   HL   
303A   11 00 01               LD   DE,$0100   
303D   B7                     OR   A   
303E   ED 52                  SBC   HL,DE   
3040   7D                     LD   A,L   
3041   B4                     OR   H   
3042   CA A2 30               JP   Z,expectM_2940S144   
3045   CD F8 0C               CALL   printStr   
3048   43 6F 64 65 3A 20 3A 61 20 30 23 00 .CSTR   "Code: ",":a 0#"   
3054   CD F8 0C               CALL   printStr   
3057   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3066   21 00 01               LD   hl,$0100   
3069   E5                     PUSH   hl   
306A   E5                     PUSH   hl   
306B   CD 17 0E               CALL   run   
306E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3076   CD 80 0C               CALL   flushBuffer   
3079   CD F8 0C               CALL   printStr   
307C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3089   E1                     POP   hl   
308A   E5                     PUSH   hl   
308B   E5                     PUSH   hl   
308C   CD 17 0E               CALL   run   
308F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
309E   CD 80 0C               CALL   flushBuffer   
30A1   76                     HALT      
30A2                EXPECTM_2940S144:      
30A2   E1                     POP   HL   
30A3                          ;*Macro unroll:  test ":a: 0#", $0100
30A3   31 00 53               LD   SP,STACK   
30A6   CD 40 0D               CALL   coldInit   
30A9   CD 66 51               CALL   execStr   
30AC   3A 61 3A 20 30 23 00   DB   ":a: 0#",0   
30B3   CD 80 0C               CALL   flushBuffer   
30B6   E1                     POP   HL   
30B7   E5                     PUSH   HL   
30B8   11 00 01               LD   DE,$0100   
30BB   B7                     OR   A   
30BC   ED 52                  SBC   HL,DE   
30BE   7D                     LD   A,L   
30BF   B4                     OR   H   
30C0   CA 21 31               JP   Z,expectM_2941S145   
30C3   CD F8 0C               CALL   printStr   
30C6   43 6F 64 65 3A 20 3A 61 3A 20 30 23 00 .CSTR   "Code: ",":a: 0#"   
30D3   CD F8 0C               CALL   printStr   
30D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30E5   21 00 01               LD   hl,$0100   
30E8   E5                     PUSH   hl   
30E9   E5                     PUSH   hl   
30EA   CD 17 0E               CALL   run   
30ED   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
30F5   CD 80 0C               CALL   flushBuffer   
30F8   CD F8 0C               CALL   printStr   
30FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3108   E1                     POP   hl   
3109   E5                     PUSH   hl   
310A   E5                     PUSH   hl   
310B   CD 17 0E               CALL   run   
310E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
311D   CD 80 0C               CALL   flushBuffer   
3120   76                     HALT      
3121                EXPECTM_2941S145:      
3121   E1                     POP   HL   
3122                          ;*Macro unroll:  test ":a:b 0#", $0201
3122   31 00 53               LD   SP,STACK   
3125   CD 40 0D               CALL   coldInit   
3128   CD 66 51               CALL   execStr   
312B   3A 61 3A 62 20 30 23 00 DB   ":a:b 0#",0   
3133   CD 80 0C               CALL   flushBuffer   
3136   E1                     POP   HL   
3137   E5                     PUSH   HL   
3138   11 01 02               LD   DE,$0201   
313B   B7                     OR   A   
313C   ED 52                  SBC   HL,DE   
313E   7D                     LD   A,L   
313F   B4                     OR   H   
3140   CA A2 31               JP   Z,expectM_2942S146   
3143   CD F8 0C               CALL   printStr   
3146   43 6F 64 65 3A 20 3A 61 3A 62 20 30 23 00 .CSTR   "Code: ",":a:b 0#"   
3154   CD F8 0C               CALL   printStr   
3157   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3166   21 01 02               LD   hl,$0201   
3169   E5                     PUSH   hl   
316A   E5                     PUSH   hl   
316B   CD 17 0E               CALL   run   
316E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3176   CD 80 0C               CALL   flushBuffer   
3179   CD F8 0C               CALL   printStr   
317C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3189   E1                     POP   hl   
318A   E5                     PUSH   hl   
318B   E5                     PUSH   hl   
318C   CD 17 0E               CALL   run   
318F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
319E   CD 80 0C               CALL   flushBuffer   
31A1   76                     HALT      
31A2                EXPECTM_2942S146:      
31A2   E1                     POP   HL   
31A3                          ;*Macro unroll:  test "::b 0#", $0101
31A3   31 00 53               LD   SP,STACK   
31A6   CD 40 0D               CALL   coldInit   
31A9   CD 66 51               CALL   execStr   
31AC   3A 3A 62 20 30 23 00   DB   "::b 0#",0   
31B3   CD 80 0C               CALL   flushBuffer   
31B6   E1                     POP   HL   
31B7   E5                     PUSH   HL   
31B8   11 01 01               LD   DE,$0101   
31BB   B7                     OR   A   
31BC   ED 52                  SBC   HL,DE   
31BE   7D                     LD   A,L   
31BF   B4                     OR   H   
31C0   CA 21 32               JP   Z,expectM_2943S147   
31C3   CD F8 0C               CALL   printStr   
31C6   43 6F 64 65 3A 20 3A 3A 62 20 30 23 00 .CSTR   "Code: ","::b 0#"   
31D3   CD F8 0C               CALL   printStr   
31D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31E5   21 01 01               LD   hl,$0101   
31E8   E5                     PUSH   hl   
31E9   E5                     PUSH   hl   
31EA   CD 17 0E               CALL   run   
31ED   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
31F5   CD 80 0C               CALL   flushBuffer   
31F8   CD F8 0C               CALL   printStr   
31FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3208   E1                     POP   hl   
3209   E5                     PUSH   hl   
320A   E5                     PUSH   hl   
320B   CD 17 0E               CALL   run   
320E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
321D   CD 80 0C               CALL   flushBuffer   
3220   76                     HALT      
3221                EXPECTM_2943S147:      
3221   E1                     POP   HL   
3222                          ;*Macro unroll:  test ":{2};^", 2
3222   31 00 53               LD   SP,STACK   
3225   CD 40 0D               CALL   coldInit   
3228   CD 66 51               CALL   execStr   
322B   3A 7B 32 7D 3B 5E 00   DB   ":{2};^",0   
3232   CD 80 0C               CALL   flushBuffer   
3235   E1                     POP   HL   
3236   E5                     PUSH   HL   
3237   11 02 00               LD   DE,2   
323A   B7                     OR   A   
323B   ED 52                  SBC   HL,DE   
323D   7D                     LD   A,L   
323E   B4                     OR   H   
323F   CA A0 32               JP   Z,expectM_2944S148   
3242   CD F8 0C               CALL   printStr   
3245   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
3252   CD F8 0C               CALL   printStr   
3255   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3264   21 02 00               LD   hl,2   
3267   E5                     PUSH   hl   
3268   E5                     PUSH   hl   
3269   CD 17 0E               CALL   run   
326C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3274   CD 80 0C               CALL   flushBuffer   
3277   CD F8 0C               CALL   printStr   
327A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3287   E1                     POP   hl   
3288   E5                     PUSH   hl   
3289   E5                     PUSH   hl   
328A   CD 17 0E               CALL   run   
328D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
329C   CD 80 0C               CALL   flushBuffer   
329F   76                     HALT      
32A0                EXPECTM_2944S148:      
32A0   E1                     POP   HL   
32A1                          ;*Macro unroll:  test ":a{2};^", 2
32A1   31 00 53               LD   SP,STACK   
32A4   CD 40 0D               CALL   coldInit   
32A7   CD 66 51               CALL   execStr   
32AA   3A 61 7B 32 7D 3B 5E 00 DB   ":a{2};^",0   
32B2   CD 80 0C               CALL   flushBuffer   
32B5   E1                     POP   HL   
32B6   E5                     PUSH   HL   
32B7   11 02 00               LD   DE,2   
32BA   B7                     OR   A   
32BB   ED 52                  SBC   HL,DE   
32BD   7D                     LD   A,L   
32BE   B4                     OR   H   
32BF   CA 21 33               JP   Z,expectM_2945S149   
32C2   CD F8 0C               CALL   printStr   
32C5   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
32D3   CD F8 0C               CALL   printStr   
32D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32E5   21 02 00               LD   hl,2   
32E8   E5                     PUSH   hl   
32E9   E5                     PUSH   hl   
32EA   CD 17 0E               CALL   run   
32ED   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
32F5   CD 80 0C               CALL   flushBuffer   
32F8   CD F8 0C               CALL   printStr   
32FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3308   E1                     POP   hl   
3309   E5                     PUSH   hl   
330A   E5                     PUSH   hl   
330B   CD 17 0E               CALL   run   
330E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
331D   CD 80 0C               CALL   flushBuffer   
3320   76                     HALT      
3321                EXPECTM_2945S149:      
3321   E1                     POP   HL   
3322                          ;*Macro unroll:  test "5 :a{%a};^", 5
3322   31 00 53               LD   SP,STACK   
3325   CD 40 0D               CALL   coldInit   
3328   CD 66 51               CALL   execStr   
332B   35 20 3A 61 7B 25 61 7D 3B 5E 00 DB   "5 :a{%a};^",0   
3336   CD 80 0C               CALL   flushBuffer   
3339   E1                     POP   HL   
333A   E5                     PUSH   HL   
333B   11 05 00               LD   DE,5   
333E   B7                     OR   A   
333F   ED 52                  SBC   HL,DE   
3341   7D                     LD   A,L   
3342   B4                     OR   H   
3343   CA A8 33               JP   Z,expectM_2946S150   
3346   CD F8 0C               CALL   printStr   
3349   43 6F 64 65 3A 20 35 20 3A 61 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{%a};^"   
335A   CD F8 0C               CALL   printStr   
335D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
336C   21 05 00               LD   hl,5   
336F   E5                     PUSH   hl   
3370   E5                     PUSH   hl   
3371   CD 17 0E               CALL   run   
3374   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
337C   CD 80 0C               CALL   flushBuffer   
337F   CD F8 0C               CALL   printStr   
3382   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
338F   E1                     POP   hl   
3390   E5                     PUSH   hl   
3391   E5                     PUSH   hl   
3392   CD 17 0E               CALL   run   
3395   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
33A4   CD 80 0C               CALL   flushBuffer   
33A7   76                     HALT      
33A8                EXPECTM_2946S150:      
33A8   E1                     POP   HL   
33A9                          ;*Macro unroll:  test "5 :a:b{%a};^", 5
33A9   31 00 53               LD   SP,STACK   
33AC   CD 40 0D               CALL   coldInit   
33AF   CD 66 51               CALL   execStr   
33B2   35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 DB   "5 :a:b{%a};^",0   
33BF   CD 80 0C               CALL   flushBuffer   
33C2   E1                     POP   HL   
33C3   E5                     PUSH   HL   
33C4   11 05 00               LD   DE,5   
33C7   B7                     OR   A   
33C8   ED 52                  SBC   HL,DE   
33CA   7D                     LD   A,L   
33CB   B4                     OR   H   
33CC   CA 33 34               JP   Z,expectM_2947S151   
33CF   CD F8 0C               CALL   printStr   
33D2   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{%a};^"   
33E5   CD F8 0C               CALL   printStr   
33E8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33F7   21 05 00               LD   hl,5   
33FA   E5                     PUSH   hl   
33FB   E5                     PUSH   hl   
33FC   CD 17 0E               CALL   run   
33FF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3407   CD 80 0C               CALL   flushBuffer   
340A   CD F8 0C               CALL   printStr   
340D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
341A   E1                     POP   hl   
341B   E5                     PUSH   hl   
341C   E5                     PUSH   hl   
341D   CD 17 0E               CALL   run   
3420   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
342F   CD 80 0C               CALL   flushBuffer   
3432   76                     HALT      
3433                EXPECTM_2947S151:      
3433   E1                     POP   HL   
3434                          ;*Macro unroll:  test ":a{{2}^};^", 2
3434   31 00 53               LD   SP,STACK   
3437   CD 40 0D               CALL   coldInit   
343A   CD 66 51               CALL   execStr   
343D   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 DB   ":a{{2}^};^",0   
3448   CD 80 0C               CALL   flushBuffer   
344B   E1                     POP   HL   
344C   E5                     PUSH   HL   
344D   11 02 00               LD   DE,2   
3450   B7                     OR   A   
3451   ED 52                  SBC   HL,DE   
3453   7D                     LD   A,L   
3454   B4                     OR   H   
3455   CA BA 34               JP   Z,expectM_2948S152   
3458   CD F8 0C               CALL   printStr   
345B   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
346C   CD F8 0C               CALL   printStr   
346F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
347E   21 02 00               LD   hl,2   
3481   E5                     PUSH   hl   
3482   E5                     PUSH   hl   
3483   CD 17 0E               CALL   run   
3486   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
348E   CD 80 0C               CALL   flushBuffer   
3491   CD F8 0C               CALL   printStr   
3494   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34A1   E1                     POP   hl   
34A2   E5                     PUSH   hl   
34A3   E5                     PUSH   hl   
34A4   CD 17 0E               CALL   run   
34A7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
34B6   CD 80 0C               CALL   flushBuffer   
34B9   76                     HALT      
34BA                EXPECTM_2948S152:      
34BA   E1                     POP   HL   
34BB                          ;*Macro unroll:  test "1 5 :a{{%a}^};^", 5
34BB   31 00 53               LD   SP,STACK   
34BE   CD 40 0D               CALL   coldInit   
34C1   CD 66 51               CALL   execStr   
34C4   31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a}^};^",0   
34D4   CD 80 0C               CALL   flushBuffer   
34D7   E1                     POP   HL   
34D8   E5                     PUSH   HL   
34D9   11 05 00               LD   DE,5   
34DC   B7                     OR   A   
34DD   ED 52                  SBC   HL,DE   
34DF   7D                     LD   A,L   
34E0   B4                     OR   H   
34E1   CA 4B 35               JP   Z,expectM_2949S153   
34E4   CD F8 0C               CALL   printStr   
34E7   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a}^};^"   
34FD   CD F8 0C               CALL   printStr   
3500   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
350F   21 05 00               LD   hl,5   
3512   E5                     PUSH   hl   
3513   E5                     PUSH   hl   
3514   CD 17 0E               CALL   run   
3517   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
351F   CD 80 0C               CALL   flushBuffer   
3522   CD F8 0C               CALL   printStr   
3525   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3532   E1                     POP   hl   
3533   E5                     PUSH   hl   
3534   E5                     PUSH   hl   
3535   CD 17 0E               CALL   run   
3538   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3547   CD 80 0C               CALL   flushBuffer   
354A   76                     HALT      
354B                EXPECTM_2949S153:      
354B   E1                     POP   HL   
354C                          ;*Macro unroll:  test "1 5 :ab{{%a}^};^", 1
354C   31 00 53               LD   SP,STACK   
354F   CD 40 0D               CALL   coldInit   
3552   CD 66 51               CALL   execStr   
3555   31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a}^};^",0   
3566   CD 80 0C               CALL   flushBuffer   
3569   E1                     POP   HL   
356A   E5                     PUSH   HL   
356B   11 01 00               LD   DE,1   
356E   B7                     OR   A   
356F   ED 52                  SBC   HL,DE   
3571   7D                     LD   A,L   
3572   B4                     OR   H   
3573   CA DE 35               JP   Z,expectM_2950S154   
3576   CD F8 0C               CALL   printStr   
3579   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a}^};^"   
3590   CD F8 0C               CALL   printStr   
3593   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35A2   21 01 00               LD   hl,1   
35A5   E5                     PUSH   hl   
35A6   E5                     PUSH   hl   
35A7   CD 17 0E               CALL   run   
35AA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
35B2   CD 80 0C               CALL   flushBuffer   
35B5   CD F8 0C               CALL   printStr   
35B8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35C5   E1                     POP   hl   
35C6   E5                     PUSH   hl   
35C7   E5                     PUSH   hl   
35C8   CD 17 0E               CALL   run   
35CB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
35DA   CD 80 0C               CALL   flushBuffer   
35DD   76                     HALT      
35DE                EXPECTM_2950S154:      
35DE   E1                     POP   HL   
35DF                          ;*Macro unroll:  test "1 5 :a{{%a 2 +}^};^", 7
35DF   31 00 53               LD   SP,STACK   
35E2   CD 40 0D               CALL   coldInit   
35E5   CD 66 51               CALL   execStr   
35E8   31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a 2 +}^};^",0   
35FC   CD 80 0C               CALL   flushBuffer   
35FF   E1                     POP   HL   
3600   E5                     PUSH   HL   
3601   11 07 00               LD   DE,7   
3604   B7                     OR   A   
3605   ED 52                  SBC   HL,DE   
3607   7D                     LD   A,L   
3608   B4                     OR   H   
3609   CA 77 36               JP   Z,expectM_2951S155   
360C   CD F8 0C               CALL   printStr   
360F   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a 2 +}^};^"   
3629   CD F8 0C               CALL   printStr   
362C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
363B   21 07 00               LD   hl,7   
363E   E5                     PUSH   hl   
363F   E5                     PUSH   hl   
3640   CD 17 0E               CALL   run   
3643   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
364B   CD 80 0C               CALL   flushBuffer   
364E   CD F8 0C               CALL   printStr   
3651   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
365E   E1                     POP   hl   
365F   E5                     PUSH   hl   
3660   E5                     PUSH   hl   
3661   CD 17 0E               CALL   run   
3664   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3673   CD 80 0C               CALL   flushBuffer   
3676   76                     HALT      
3677                EXPECTM_2951S155:      
3677   E1                     POP   HL   
3678                          ;*Macro unroll:  test "1 5 :ab{{%a %b +}^};^", 6
3678   31 00 53               LD   SP,STACK   
367B   CD 40 0D               CALL   coldInit   
367E   CD 66 51               CALL   execStr   
3681   31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a %b +}^};^",0   
3697   CD 80 0C               CALL   flushBuffer   
369A   E1                     POP   HL   
369B   E5                     PUSH   HL   
369C   11 06 00               LD   DE,6   
369F   B7                     OR   A   
36A0   ED 52                  SBC   HL,DE   
36A2   7D                     LD   A,L   
36A3   B4                     OR   H   
36A4   CA 14 37               JP   Z,expectM_2952S156   
36A7   CD F8 0C               CALL   printStr   
36AA   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a %b +}^};^"   
36C6   CD F8 0C               CALL   printStr   
36C9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36D8   21 06 00               LD   hl,6   
36DB   E5                     PUSH   hl   
36DC   E5                     PUSH   hl   
36DD   CD 17 0E               CALL   run   
36E0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
36E8   CD 80 0C               CALL   flushBuffer   
36EB   CD F8 0C               CALL   printStr   
36EE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36FB   E1                     POP   hl   
36FC   E5                     PUSH   hl   
36FD   E5                     PUSH   hl   
36FE   CD 17 0E               CALL   run   
3701   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3710   CD 80 0C               CALL   flushBuffer   
3713   76                     HALT      
3714                EXPECTM_2952S156:      
3714   E1                     POP   HL   
3715                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
3715   31 00 53               LD   SP,STACK   
3718   CD 40 0D               CALL   coldInit   
371B   CD 66 51               CALL   execStr   
371E   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a{2}; x= 1 x^",0   
372D   CD 80 0C               CALL   flushBuffer   
3730   E1                     POP   HL   
3731   E5                     PUSH   HL   
3732   11 02 00               LD   DE,2   
3735   B7                     OR   A   
3736   ED 52                  SBC   HL,DE   
3738   7D                     LD   A,L   
3739   B4                     OR   H   
373A   CA A3 37               JP   Z,expectM_2953S157   
373D   CD F8 0C               CALL   printStr   
3740   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
3755   CD F8 0C               CALL   printStr   
3758   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3767   21 02 00               LD   hl,2   
376A   E5                     PUSH   hl   
376B   E5                     PUSH   hl   
376C   CD 17 0E               CALL   run   
376F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3777   CD 80 0C               CALL   flushBuffer   
377A   CD F8 0C               CALL   printStr   
377D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
378A   E1                     POP   hl   
378B   E5                     PUSH   hl   
378C   E5                     PUSH   hl   
378D   CD 17 0E               CALL   run   
3790   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
379F   CD 80 0C               CALL   flushBuffer   
37A2   76                     HALT      
37A3                EXPECTM_2953S157:      
37A3   E1                     POP   HL   
37A4                          ;*Macro unroll:  test ":a{%a}; x= 0 1 x^", 1
37A4   31 00 53               LD   SP,STACK   
37A7   CD 40 0D               CALL   coldInit   
37AA   CD 66 51               CALL   execStr   
37AD   3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 DB   ":a{%a}; x= 0 1 x^",0   
37BF   CD 80 0C               CALL   flushBuffer   
37C2   E1                     POP   HL   
37C3   E5                     PUSH   HL   
37C4   11 01 00               LD   DE,1   
37C7   B7                     OR   A   
37C8   ED 52                  SBC   HL,DE   
37CA   7D                     LD   A,L   
37CB   B4                     OR   H   
37CC   CA 38 38               JP   Z,expectM_2954S158   
37CF   CD F8 0C               CALL   printStr   
37D2   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{%a}; x= 0 1 x^"   
37EA   CD F8 0C               CALL   printStr   
37ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37FC   21 01 00               LD   hl,1   
37FF   E5                     PUSH   hl   
3800   E5                     PUSH   hl   
3801   CD 17 0E               CALL   run   
3804   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
380C   CD 80 0C               CALL   flushBuffer   
380F   CD F8 0C               CALL   printStr   
3812   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
381F   E1                     POP   hl   
3820   E5                     PUSH   hl   
3821   E5                     PUSH   hl   
3822   CD 17 0E               CALL   run   
3825   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3834   CD 80 0C               CALL   flushBuffer   
3837   76                     HALT      
3838                EXPECTM_2954S158:      
3838   E1                     POP   HL   
3839                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
3839   31 00 53               LD   SP,STACK   
383C   CD 40 0D               CALL   coldInit   
383F   CD 66 51               CALL   execStr   
3842   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
3855   CD 80 0C               CALL   flushBuffer   
3858   E1                     POP   HL   
3859   E5                     PUSH   HL   
385A   11 02 00               LD   DE,2   
385D   B7                     OR   A   
385E   ED 52                  SBC   HL,DE   
3860   7D                     LD   A,L   
3861   B4                     OR   H   
3862   CA CF 38               JP   Z,expectM_2955S159   
3865   CD F8 0C               CALL   printStr   
3868   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
3881   CD F8 0C               CALL   printStr   
3884   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3893   21 02 00               LD   hl,2   
3896   E5                     PUSH   hl   
3897   E5                     PUSH   hl   
3898   CD 17 0E               CALL   run   
389B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
38A3   CD 80 0C               CALL   flushBuffer   
38A6   CD F8 0C               CALL   printStr   
38A9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38B6   E1                     POP   hl   
38B7   E5                     PUSH   hl   
38B8   E5                     PUSH   hl   
38B9   CD 17 0E               CALL   run   
38BC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
38CB   CD 80 0C               CALL   flushBuffer   
38CE   76                     HALT      
38CF                EXPECTM_2955S159:      
38CF   E1                     POP   HL   
38D0                          ;*Macro unroll:  test ":a:b{%a}; x= 1 2 x^", 2
38D0   31 00 53               LD   SP,STACK   
38D3   CD 40 0D               CALL   coldInit   
38D6   CD 66 51               CALL   execStr   
38D9   3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":a:b{%a}; x= 1 2 x^",0   
38ED   CD 80 0C               CALL   flushBuffer   
38F0   E1                     POP   HL   
38F1   E5                     PUSH   HL   
38F2   11 02 00               LD   DE,2   
38F5   B7                     OR   A   
38F6   ED 52                  SBC   HL,DE   
38F8   7D                     LD   A,L   
38F9   B4                     OR   H   
38FA   CA 68 39               JP   Z,expectM_2956S160   
38FD   CD F8 0C               CALL   printStr   
3900   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a}; x= 1 2 x^"   
391A   CD F8 0C               CALL   printStr   
391D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
392C   21 02 00               LD   hl,2   
392F   E5                     PUSH   hl   
3930   E5                     PUSH   hl   
3931   CD 17 0E               CALL   run   
3934   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
393C   CD 80 0C               CALL   flushBuffer   
393F   CD F8 0C               CALL   printStr   
3942   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
394F   E1                     POP   hl   
3950   E5                     PUSH   hl   
3951   E5                     PUSH   hl   
3952   CD 17 0E               CALL   run   
3955   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3964   CD 80 0C               CALL   flushBuffer   
3967   76                     HALT      
3968                EXPECTM_2956S160:      
3968   E1                     POP   HL   
3969                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
3969   31 00 53               LD   SP,STACK   
396C   CD 40 0D               CALL   coldInit   
396F   CD 66 51               CALL   execStr   
3972   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
3985   CD 80 0C               CALL   flushBuffer   
3988   E1                     POP   HL   
3989   E5                     PUSH   HL   
398A   11 02 00               LD   DE,2   
398D   B7                     OR   A   
398E   ED 52                  SBC   HL,DE   
3990   7D                     LD   A,L   
3991   B4                     OR   H   
3992   CA FF 39               JP   Z,expectM_2957S161   
3995   CD F8 0C               CALL   printStr   
3998   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
39B1   CD F8 0C               CALL   printStr   
39B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39C3   21 02 00               LD   hl,2   
39C6   E5                     PUSH   hl   
39C7   E5                     PUSH   hl   
39C8   CD 17 0E               CALL   run   
39CB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
39D3   CD 80 0C               CALL   flushBuffer   
39D6   CD F8 0C               CALL   printStr   
39D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39E6   E1                     POP   hl   
39E7   E5                     PUSH   hl   
39E8   E5                     PUSH   hl   
39E9   CD 17 0E               CALL   run   
39EC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
39FB   CD 80 0C               CALL   flushBuffer   
39FE   76                     HALT      
39FF                EXPECTM_2957S161:      
39FF   E1                     POP   HL   
3A00                          ;*Macro unroll:  test ":ab{%b %a}; x= 10 15 x^ -", 5
3A00   31 00 53               LD   SP,STACK   
3A03   CD 40 0D               CALL   coldInit   
3A06   CD 66 51               CALL   execStr   
3A09   3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   ":ab{%b %a}; x= 10 15 x^ -",0   
3A23   CD 80 0C               CALL   flushBuffer   
3A26   E1                     POP   HL   
3A27   E5                     PUSH   HL   
3A28   11 05 00               LD   DE,5   
3A2B   B7                     OR   A   
3A2C   ED 52                  SBC   HL,DE   
3A2E   7D                     LD   A,L   
3A2F   B4                     OR   H   
3A30   CA A4 3A               JP   Z,expectM_2958S162   
3A33   CD F8 0C               CALL   printStr   
3A36   43 6F 64 65 3A 20 3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{%b %a}; x= 10 15 x^ -"   
3A56   CD F8 0C               CALL   printStr   
3A59   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A68   21 05 00               LD   hl,5   
3A6B   E5                     PUSH   hl   
3A6C   E5                     PUSH   hl   
3A6D   CD 17 0E               CALL   run   
3A70   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A78   CD 80 0C               CALL   flushBuffer   
3A7B   CD F8 0C               CALL   printStr   
3A7E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A8B   E1                     POP   hl   
3A8C   E5                     PUSH   hl   
3A8D   E5                     PUSH   hl   
3A8E   CD 17 0E               CALL   run   
3A91   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3AA0   CD 80 0C               CALL   flushBuffer   
3AA3   76                     HALT      
3AA4                EXPECTM_2958S162:      
3AA4   E1                     POP   HL   
3AA5                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
3AA5   31 00 53               LD   SP,STACK   
3AA8   CD 40 0D               CALL   coldInit   
3AAB   CD 66 51               CALL   execStr   
3AAE   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a:b{2}; x= 1 x^",0   
3ABF   CD 80 0C               CALL   flushBuffer   
3AC2   E1                     POP   HL   
3AC3   E5                     PUSH   HL   
3AC4   11 02 00               LD   DE,2   
3AC7   B7                     OR   A   
3AC8   ED 52                  SBC   HL,DE   
3ACA   7D                     LD   A,L   
3ACB   B4                     OR   H   
3ACC   CA 37 3B               JP   Z,expectM_2959S163   
3ACF   CD F8 0C               CALL   printStr   
3AD2   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
3AE9   CD F8 0C               CALL   printStr   
3AEC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AFB   21 02 00               LD   hl,2   
3AFE   E5                     PUSH   hl   
3AFF   E5                     PUSH   hl   
3B00   CD 17 0E               CALL   run   
3B03   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B0B   CD 80 0C               CALL   flushBuffer   
3B0E   CD F8 0C               CALL   printStr   
3B11   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B1E   E1                     POP   hl   
3B1F   E5                     PUSH   hl   
3B20   E5                     PUSH   hl   
3B21   CD 17 0E               CALL   run   
3B24   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B33   CD 80 0C               CALL   flushBuffer   
3B36   76                     HALT      
3B37                EXPECTM_2959S163:      
3B37   E1                     POP   HL   
3B38                          ;*Macro unroll:  test "::b{100 %b = %b}; x= x^", 100
3B38   31 00 53               LD   SP,STACK   
3B3B   CD 40 0D               CALL   coldInit   
3B3E   CD 66 51               CALL   execStr   
3B41   3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 DB   "::b{100 %b = %b}; x= x^",0   
3B59   CD 80 0C               CALL   flushBuffer   
3B5C   E1                     POP   HL   
3B5D   E5                     PUSH   HL   
3B5E   11 64 00               LD   DE,100   
3B61   B7                     OR   A   
3B62   ED 52                  SBC   HL,DE   
3B64   7D                     LD   A,L   
3B65   B4                     OR   H   
3B66   CA D8 3B               JP   Z,expectM_2960S164   
3B69   CD F8 0C               CALL   printStr   
3B6C   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 %b = %b}; x= x^"   
3B8A   CD F8 0C               CALL   printStr   
3B8D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B9C   21 64 00               LD   hl,100   
3B9F   E5                     PUSH   hl   
3BA0   E5                     PUSH   hl   
3BA1   CD 17 0E               CALL   run   
3BA4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3BAC   CD 80 0C               CALL   flushBuffer   
3BAF   CD F8 0C               CALL   printStr   
3BB2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BBF   E1                     POP   hl   
3BC0   E5                     PUSH   hl   
3BC1   E5                     PUSH   hl   
3BC2   CD 17 0E               CALL   run   
3BC5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3BD4   CD 80 0C               CALL   flushBuffer   
3BD7   76                     HALT      
3BD8                EXPECTM_2960S164:      
3BD8   E1                     POP   HL   
3BD9                          ;*Macro unroll:  test ":a:b{1 %b = %b}; x= 2 x^", 1
3BD9   31 00 53               LD   SP,STACK   
3BDC   CD 40 0D               CALL   coldInit   
3BDF   CD 66 51               CALL   execStr   
3BE2   3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{1 %b = %b}; x= 2 x^",0   
3BFB   CD 80 0C               CALL   flushBuffer   
3BFE   E1                     POP   HL   
3BFF   E5                     PUSH   HL   
3C00   11 01 00               LD   DE,1   
3C03   B7                     OR   A   
3C04   ED 52                  SBC   HL,DE   
3C06   7D                     LD   A,L   
3C07   B4                     OR   H   
3C08   CA 7B 3C               JP   Z,expectM_2961S165   
3C0B   CD F8 0C               CALL   printStr   
3C0E   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 %b = %b}; x= 2 x^"   
3C2D   CD F8 0C               CALL   printStr   
3C30   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C3F   21 01 00               LD   hl,1   
3C42   E5                     PUSH   hl   
3C43   E5                     PUSH   hl   
3C44   CD 17 0E               CALL   run   
3C47   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C4F   CD 80 0C               CALL   flushBuffer   
3C52   CD F8 0C               CALL   printStr   
3C55   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C62   E1                     POP   hl   
3C63   E5                     PUSH   hl   
3C64   E5                     PUSH   hl   
3C65   CD 17 0E               CALL   run   
3C68   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C77   CD 80 0C               CALL   flushBuffer   
3C7A   76                     HALT      
3C7B                EXPECTM_2961S165:      
3C7B   E1                     POP   HL   
3C7C                          ;*Macro unroll:  test ":a:b{%a %b = %b}; x= 2 x^", 2
3C7C   31 00 53               LD   SP,STACK   
3C7F   CD 40 0D               CALL   coldInit   
3C82   CD 66 51               CALL   execStr   
3C85   3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{%a %b = %b}; x= 2 x^",0   
3C9F   CD 80 0C               CALL   flushBuffer   
3CA2   E1                     POP   HL   
3CA3   E5                     PUSH   HL   
3CA4   11 02 00               LD   DE,2   
3CA7   B7                     OR   A   
3CA8   ED 52                  SBC   HL,DE   
3CAA   7D                     LD   A,L   
3CAB   B4                     OR   H   
3CAC   CA 20 3D               JP   Z,expectM_2962S166   
3CAF   CD F8 0C               CALL   printStr   
3CB2   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a %b = %b}; x= 2 x^"   
3CD2   CD F8 0C               CALL   printStr   
3CD5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CE4   21 02 00               LD   hl,2   
3CE7   E5                     PUSH   hl   
3CE8   E5                     PUSH   hl   
3CE9   CD 17 0E               CALL   run   
3CEC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3CF4   CD 80 0C               CALL   flushBuffer   
3CF7   CD F8 0C               CALL   printStr   
3CFA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D07   E1                     POP   hl   
3D08   E5                     PUSH   hl   
3D09   E5                     PUSH   hl   
3D0A   CD 17 0E               CALL   run   
3D0D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D1C   CD 80 0C               CALL   flushBuffer   
3D1F   76                     HALT      
3D20                EXPECTM_2962S166:      
3D20   E1                     POP   HL   
3D21                          ;*Macro unroll:  test "1 10 20 :ab{/t{%a}{%b} ??};^ +", 11
3D21   31 00 53               LD   SP,STACK   
3D24   CD 40 0D               CALL   coldInit   
3D27   CD 66 51               CALL   execStr   
3D2A   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/t{%a}{%b} ??};^ +",0   
3D49   CD 80 0C               CALL   flushBuffer   
3D4C   E1                     POP   HL   
3D4D   E5                     PUSH   HL   
3D4E   11 0B 00               LD   DE,11   
3D51   B7                     OR   A   
3D52   ED 52                  SBC   HL,DE   
3D54   7D                     LD   A,L   
3D55   B4                     OR   H   
3D56   CA CF 3D               JP   Z,expectM_2963S167   
3D59   CD F8 0C               CALL   printStr   
3D5C   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{%a}{%b} ??};^ +"   
3D81   CD F8 0C               CALL   printStr   
3D84   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D93   21 0B 00               LD   hl,11   
3D96   E5                     PUSH   hl   
3D97   E5                     PUSH   hl   
3D98   CD 17 0E               CALL   run   
3D9B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3DA3   CD 80 0C               CALL   flushBuffer   
3DA6   CD F8 0C               CALL   printStr   
3DA9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DB6   E1                     POP   hl   
3DB7   E5                     PUSH   hl   
3DB8   E5                     PUSH   hl   
3DB9   CD 17 0E               CALL   run   
3DBC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3DCB   CD 80 0C               CALL   flushBuffer   
3DCE   76                     HALT      
3DCF                EXPECTM_2963S167:      
3DCF   E1                     POP   HL   
3DD0                          ;*Macro unroll:  test "1 10 20 :ab{/f{%a}{%b} ??};^ +", 21
3DD0   31 00 53               LD   SP,STACK   
3DD3   CD 40 0D               CALL   coldInit   
3DD6   CD 66 51               CALL   execStr   
3DD9   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/f{%a}{%b} ??};^ +",0   
3DF8   CD 80 0C               CALL   flushBuffer   
3DFB   E1                     POP   HL   
3DFC   E5                     PUSH   HL   
3DFD   11 15 00               LD   DE,21   
3E00   B7                     OR   A   
3E01   ED 52                  SBC   HL,DE   
3E03   7D                     LD   A,L   
3E04   B4                     OR   H   
3E05   CA 7E 3E               JP   Z,expectM_2964S168   
3E08   CD F8 0C               CALL   printStr   
3E0B   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{%a}{%b} ??};^ +"   
3E30   CD F8 0C               CALL   printStr   
3E33   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E42   21 15 00               LD   hl,21   
3E45   E5                     PUSH   hl   
3E46   E5                     PUSH   hl   
3E47   CD 17 0E               CALL   run   
3E4A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E52   CD 80 0C               CALL   flushBuffer   
3E55   CD F8 0C               CALL   printStr   
3E58   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E65   E1                     POP   hl   
3E66   E5                     PUSH   hl   
3E67   E5                     PUSH   hl   
3E68   CD 17 0E               CALL   run   
3E6B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E7A   CD 80 0C               CALL   flushBuffer   
3E7D   76                     HALT      
3E7E                EXPECTM_2964S168:      
3E7E   E1                     POP   HL   
3E7F                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3E7F   31 00 53               LD   SP,STACK   
3E82   CD 40 0D               CALL   coldInit   
3E85   CD 66 51               CALL   execStr   
3E88   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
3E96   CD 80 0C               CALL   flushBuffer   
3E99   E1                     POP   HL   
3E9A   E5                     PUSH   HL   
3E9B   11 14 00               LD   DE,20   
3E9E   B7                     OR   A   
3E9F   ED 52                  SBC   HL,DE   
3EA1   7D                     LD   A,L   
3EA2   B4                     OR   H   
3EA3   CA 0B 3F               JP   Z,expectM_2965S169   
3EA6   CD F8 0C               CALL   printStr   
3EA9   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
3EBD   CD F8 0C               CALL   printStr   
3EC0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3ECF   21 14 00               LD   hl,20   
3ED2   E5                     PUSH   hl   
3ED3   E5                     PUSH   hl   
3ED4   CD 17 0E               CALL   run   
3ED7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3EDF   CD 80 0C               CALL   flushBuffer   
3EE2   CD F8 0C               CALL   printStr   
3EE5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3EF2   E1                     POP   hl   
3EF3   E5                     PUSH   hl   
3EF4   E5                     PUSH   hl   
3EF5   CD 17 0E               CALL   run   
3EF8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F07   CD 80 0C               CALL   flushBuffer   
3F0A   76                     HALT      
3F0B                EXPECTM_2965S169:      
3F0B   E1                     POP   HL   
3F0C                          ;*Macro unroll:  test "[10 20 30 40] /s", 4
3F0C   31 00 53               LD   SP,STACK   
3F0F   CD 40 0D               CALL   coldInit   
3F12   CD 66 51               CALL   execStr   
3F15   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 DB   "[10 20 30 40] /s",0   
3F26   CD 80 0C               CALL   flushBuffer   
3F29   E1                     POP   HL   
3F2A   E5                     PUSH   HL   
3F2B   11 04 00               LD   DE,4   
3F2E   B7                     OR   A   
3F2F   ED 52                  SBC   HL,DE   
3F31   7D                     LD   A,L   
3F32   B4                     OR   H   
3F33   CA 9E 3F               JP   Z,expectM_2966S170   
3F36   CD F8 0C               CALL   printStr   
3F39   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "Code: ","[10 20 30 40] /s"   
3F50   CD F8 0C               CALL   printStr   
3F53   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F62   21 04 00               LD   hl,4   
3F65   E5                     PUSH   hl   
3F66   E5                     PUSH   hl   
3F67   CD 17 0E               CALL   run   
3F6A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F72   CD 80 0C               CALL   flushBuffer   
3F75   CD F8 0C               CALL   printStr   
3F78   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F85   E1                     POP   hl   
3F86   E5                     PUSH   hl   
3F87   E5                     PUSH   hl   
3F88   CD 17 0E               CALL   run   
3F8B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F9A   CD 80 0C               CALL   flushBuffer   
3F9D   76                     HALT      
3F9E                EXPECTM_2966S170:      
3F9E   E1                     POP   HL   
3F9F                          ;*Macro unroll:  test "/c [1 2 3] 1#", 2
3F9F   31 00 53               LD   SP,STACK   
3FA2   CD 40 0D               CALL   coldInit   
3FA5   CD 66 51               CALL   execStr   
3FA8   2F 63 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/c [1 2 3] 1#",0   
3FB6   CD 80 0C               CALL   flushBuffer   
3FB9   E1                     POP   HL   
3FBA   E5                     PUSH   HL   
3FBB   11 02 00               LD   DE,2   
3FBE   B7                     OR   A   
3FBF   ED 52                  SBC   HL,DE   
3FC1   7D                     LD   A,L   
3FC2   B4                     OR   H   
3FC3   CA 2B 40               JP   Z,expectM_2967S171   
3FC6   CD F8 0C               CALL   printStr   
3FC9   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/c [1 2 3] 1#"   
3FDD   CD F8 0C               CALL   printStr   
3FE0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FEF   21 02 00               LD   hl,2   
3FF2   E5                     PUSH   hl   
3FF3   E5                     PUSH   hl   
3FF4   CD 17 0E               CALL   run   
3FF7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3FFF   CD 80 0C               CALL   flushBuffer   
4002   CD F8 0C               CALL   printStr   
4005   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4012   E1                     POP   hl   
4013   E5                     PUSH   hl   
4014   E5                     PUSH   hl   
4015   CD 17 0E               CALL   run   
4018   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4027   CD 80 0C               CALL   flushBuffer   
402A   76                     HALT      
402B                EXPECTM_2967S171:      
402B   E1                     POP   HL   
402C                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1#", 66
402C   31 00 53               LD   SP,STACK   
402F   CD 40 0D               CALL   coldInit   
4032   CD 66 51               CALL   execStr   
4035   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 DB   "/c ['A' 'B' 'C'] 1#",0   
4049   CD 80 0C               CALL   flushBuffer   
404C   E1                     POP   HL   
404D   E5                     PUSH   HL   
404E   11 42 00               LD   DE,66   
4051   B7                     OR   A   
4052   ED 52                  SBC   HL,DE   
4054   7D                     LD   A,L   
4055   B4                     OR   H   
4056   CA C4 40               JP   Z,expectM_2968S172   
4059   CD F8 0C               CALL   printStr   
405C   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1#"   
4076   CD F8 0C               CALL   printStr   
4079   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4088   21 42 00               LD   hl,66   
408B   E5                     PUSH   hl   
408C   E5                     PUSH   hl   
408D   CD 17 0E               CALL   run   
4090   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4098   CD 80 0C               CALL   flushBuffer   
409B   CD F8 0C               CALL   printStr   
409E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40AB   E1                     POP   hl   
40AC   E5                     PUSH   hl   
40AD   E5                     PUSH   hl   
40AE   CD 17 0E               CALL   run   
40B1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
40C0   CD 80 0C               CALL   flushBuffer   
40C3   76                     HALT      
40C4                EXPECTM_2968S172:      
40C4   E1                     POP   HL   
40C5                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
40C5   31 00 53               LD   SP,STACK   
40C8   CD 40 0D               CALL   coldInit   
40CB   CD 66 51               CALL   execStr   
40CE   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
40E2   CD 80 0C               CALL   flushBuffer   
40E5   E1                     POP   HL   
40E6   E5                     PUSH   HL   
40E7   11 0A 00               LD   DE,10   
40EA   B7                     OR   A   
40EB   ED 52                  SBC   HL,DE   
40ED   7D                     LD   A,L   
40EE   B4                     OR   H   
40EF   CA 5D 41               JP   Z,expectM_2969S173   
40F2   CD F8 0C               CALL   printStr   
40F5   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
410F   CD F8 0C               CALL   printStr   
4112   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4121   21 0A 00               LD   hl,10   
4124   E5                     PUSH   hl   
4125   E5                     PUSH   hl   
4126   CD 17 0E               CALL   run   
4129   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4131   CD 80 0C               CALL   flushBuffer   
4134   CD F8 0C               CALL   printStr   
4137   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4144   E1                     POP   hl   
4145   E5                     PUSH   hl   
4146   E5                     PUSH   hl   
4147   CD 17 0E               CALL   run   
414A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4159   CD 80 0C               CALL   flushBuffer   
415C   76                     HALT      
415D                EXPECTM_2969S173:      
415D   E1                     POP   HL   
415E                          ;*Macro unroll:  test "10 20 :ab {[{%a}{%b}] 0#^};^", 10
415E   31 00 53               LD   SP,STACK   
4161   CD 40 0D               CALL   coldInit   
4164   CD 66 51               CALL   execStr   
4167   31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 DB   "10 20 :ab {[{%a}{%b}] 0#^};^",0   
4184   CD 80 0C               CALL   flushBuffer   
4187   E1                     POP   HL   
4188   E5                     PUSH   HL   
4189   11 0A 00               LD   DE,10   
418C   B7                     OR   A   
418D   ED 52                  SBC   HL,DE   
418F   7D                     LD   A,L   
4190   B4                     OR   H   
4191   CA 08 42               JP   Z,expectM_2970S174   
4194   CD F8 0C               CALL   printStr   
4197   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab {[{%a}{%b}] 0#^};^"   
41BA   CD F8 0C               CALL   printStr   
41BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41CC   21 0A 00               LD   hl,10   
41CF   E5                     PUSH   hl   
41D0   E5                     PUSH   hl   
41D1   CD 17 0E               CALL   run   
41D4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
41DC   CD 80 0C               CALL   flushBuffer   
41DF   CD F8 0C               CALL   printStr   
41E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41EF   E1                     POP   hl   
41F0   E5                     PUSH   hl   
41F1   E5                     PUSH   hl   
41F2   CD 17 0E               CALL   run   
41F5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4204   CD 80 0C               CALL   flushBuffer   
4207   76                     HALT      
4208                EXPECTM_2970S174:      
4208   E1                     POP   HL   
4209                          ;*Macro unroll:  test "0 10 20 :iab {[{%a}{%b}] %i#^};^", 10
4209   31 00 53               LD   SP,STACK   
420C   CD 40 0D               CALL   coldInit   
420F   CD 66 51               CALL   execStr   
4212   30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "0 10 20 :iab {[{%a}{%b}] %i#^};^",0   
4233   CD 80 0C               CALL   flushBuffer   
4236   E1                     POP   HL   
4237   E5                     PUSH   HL   
4238   11 0A 00               LD   DE,10   
423B   B7                     OR   A   
423C   ED 52                  SBC   HL,DE   
423E   7D                     LD   A,L   
423F   B4                     OR   H   
4240   CA BB 42               JP   Z,expectM_2971S175   
4243   CD F8 0C               CALL   printStr   
4246   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab {[{%a}{%b}] %i#^};^"   
426D   CD F8 0C               CALL   printStr   
4270   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
427F   21 0A 00               LD   hl,10   
4282   E5                     PUSH   hl   
4283   E5                     PUSH   hl   
4284   CD 17 0E               CALL   run   
4287   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
428F   CD 80 0C               CALL   flushBuffer   
4292   CD F8 0C               CALL   printStr   
4295   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42A2   E1                     POP   hl   
42A3   E5                     PUSH   hl   
42A4   E5                     PUSH   hl   
42A5   CD 17 0E               CALL   run   
42A8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
42B7   CD 80 0C               CALL   flushBuffer   
42BA   76                     HALT      
42BB                EXPECTM_2971S175:      
42BB   E1                     POP   HL   
42BC                          ;*Macro unroll:  test "1 10 20 :iab {[{%a}{%b}] %i#^};^", 20
42BC   31 00 53               LD   SP,STACK   
42BF   CD 40 0D               CALL   coldInit   
42C2   CD 66 51               CALL   execStr   
42C5   31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "1 10 20 :iab {[{%a}{%b}] %i#^};^",0   
42E6   CD 80 0C               CALL   flushBuffer   
42E9   E1                     POP   HL   
42EA   E5                     PUSH   HL   
42EB   11 14 00               LD   DE,20   
42EE   B7                     OR   A   
42EF   ED 52                  SBC   HL,DE   
42F1   7D                     LD   A,L   
42F2   B4                     OR   H   
42F3   CA 6E 43               JP   Z,expectM_2972S176   
42F6   CD F8 0C               CALL   printStr   
42F9   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab {[{%a}{%b}] %i#^};^"   
4320   CD F8 0C               CALL   printStr   
4323   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4332   21 14 00               LD   hl,20   
4335   E5                     PUSH   hl   
4336   E5                     PUSH   hl   
4337   CD 17 0E               CALL   run   
433A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4342   CD 80 0C               CALL   flushBuffer   
4345   CD F8 0C               CALL   printStr   
4348   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4355   E1                     POP   hl   
4356   E5                     PUSH   hl   
4357   E5                     PUSH   hl   
4358   CD 17 0E               CALL   run   
435B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
436A   CD 80 0C               CALL   flushBuffer   
436D   76                     HALT      
436E                EXPECTM_2972S176:      
436E   E1                     POP   HL   
436F                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
436F   31 00 53               LD   SP,STACK   
4372   CD 40 0D               CALL   coldInit   
4375   CD 66 51               CALL   execStr   
4378   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
4390   CD 80 0C               CALL   flushBuffer   
4393   E1                     POP   HL   
4394   E5                     PUSH   HL   
4395   11 06 00               LD   DE,6   
4398   B7                     OR   A   
4399   ED 52                  SBC   HL,DE   
439B   7D                     LD   A,L   
439C   B4                     OR   H   
439D   CA 0F 44               JP   Z,expectM_2973S177   
43A0   CD F8 0C               CALL   printStr   
43A3   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
43C1   CD F8 0C               CALL   printStr   
43C4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43D3   21 06 00               LD   hl,6   
43D6   E5                     PUSH   hl   
43D7   E5                     PUSH   hl   
43D8   CD 17 0E               CALL   run   
43DB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
43E3   CD 80 0C               CALL   flushBuffer   
43E6   CD F8 0C               CALL   printStr   
43E9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43F6   E1                     POP   hl   
43F7   E5                     PUSH   hl   
43F8   E5                     PUSH   hl   
43F9   CD 17 0E               CALL   run   
43FC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
440B   CD 80 0C               CALL   flushBuffer   
440E   76                     HALT      
440F                EXPECTM_2973S177:      
440F   E1                     POP   HL   
4410                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
4410   31 00 53               LD   SP,STACK   
4413   CD 40 0D               CALL   coldInit   
4416   CD 66 51               CALL   execStr   
4419   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
4434   CD 80 0C               CALL   flushBuffer   
4437   E1                     POP   HL   
4438   E5                     PUSH   HL   
4439   11 02 00               LD   DE,2   
443C   B7                     OR   A   
443D   ED 52                  SBC   HL,DE   
443F   7D                     LD   A,L   
4440   B4                     OR   H   
4441   CA B6 44               JP   Z,expectM_2974S178   
4444   CD F8 0C               CALL   printStr   
4447   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
4468   CD F8 0C               CALL   printStr   
446B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
447A   21 02 00               LD   hl,2   
447D   E5                     PUSH   hl   
447E   E5                     PUSH   hl   
447F   CD 17 0E               CALL   run   
4482   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
448A   CD 80 0C               CALL   flushBuffer   
448D   CD F8 0C               CALL   printStr   
4490   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
449D   E1                     POP   hl   
449E   E5                     PUSH   hl   
449F   E5                     PUSH   hl   
44A0   CD 17 0E               CALL   run   
44A3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
44B2   CD 80 0C               CALL   flushBuffer   
44B5   76                     HALT      
44B6                EXPECTM_2974S178:      
44B6   E1                     POP   HL   
44B7                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
44B7   31 00 53               LD   SP,STACK   
44BA   CD 40 0D               CALL   coldInit   
44BD   CD 66 51               CALL   execStr   
44C0   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
44E6   CD 80 0C               CALL   flushBuffer   
44E9   E1                     POP   HL   
44EA   E5                     PUSH   HL   
44EB   11 0A 00               LD   DE,10   
44EE   B7                     OR   A   
44EF   ED 52                  SBC   HL,DE   
44F1   7D                     LD   A,L   
44F2   B4                     OR   H   
44F3   CA 73 45               JP   Z,expectM_2975S179   
44F6   CD F8 0C               CALL   printStr   
44F9   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
4525   CD F8 0C               CALL   printStr   
4528   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4537   21 0A 00               LD   hl,10   
453A   E5                     PUSH   hl   
453B   E5                     PUSH   hl   
453C   CD 17 0E               CALL   run   
453F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4547   CD 80 0C               CALL   flushBuffer   
454A   CD F8 0C               CALL   printStr   
454D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
455A   E1                     POP   hl   
455B   E5                     PUSH   hl   
455C   E5                     PUSH   hl   
455D   CD 17 0E               CALL   run   
4560   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
456F   CD 80 0C               CALL   flushBuffer   
4572   76                     HALT      
4573                EXPECTM_2975S179:      
4573   E1                     POP   HL   
4574                          ;*Macro unroll:  test "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^", 6
4574   31 00 53               LD   SP,STACK   
4577   CD 40 0D               CALL   coldInit   
457A   CD 66 51               CALL   execStr   
457D   33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 DB   "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^",0   
45AA   CD 80 0C               CALL   flushBuffer   
45AD   E1                     POP   HL   
45AE   E5                     PUSH   HL   
45AF   11 06 00               LD   DE,6   
45B2   B7                     OR   A   
45B3   ED 52                  SBC   HL,DE   
45B5   7D                     LD   A,L   
45B6   B4                     OR   H   
45B7   CA 3E 46               JP   Z,expectM_2976S180   
45BA   CD F8 0C               CALL   printStr   
45BD   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "Code: ","3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^"   
45F0   CD F8 0C               CALL   printStr   
45F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4602   21 06 00               LD   hl,6   
4605   E5                     PUSH   hl   
4606   E5                     PUSH   hl   
4607   CD 17 0E               CALL   run   
460A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4612   CD 80 0C               CALL   flushBuffer   
4615   CD F8 0C               CALL   printStr   
4618   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4625   E1                     POP   hl   
4626   E5                     PUSH   hl   
4627   E5                     PUSH   hl   
4628   CD 17 0E               CALL   run   
462B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
463A   CD 80 0C               CALL   flushBuffer   
463D   76                     HALT      
463E                EXPECTM_2976S180:      
463E   E1                     POP   HL   
463F                          ;*Macro unroll:  test "/t :f{1 %f/br 2 +};^",3
463F   31 00 53               LD   SP,STACK   
4642   CD 40 0D               CALL   coldInit   
4645   CD 66 51               CALL   execStr   
4648   2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 DB   "/t :f{1 %f/br 2 +};^",0   
465D   CD 80 0C               CALL   flushBuffer   
4660   E1                     POP   HL   
4661   E5                     PUSH   HL   
4662   11 03 00               LD   DE,3   
4665   B7                     OR   A   
4666   ED 52                  SBC   HL,DE   
4668   7D                     LD   A,L   
4669   B4                     OR   H   
466A   CA D9 46               JP   Z,expectM_2977S181   
466D   CD F8 0C               CALL   printStr   
4670   43 6F 64 65 3A 20 2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 .CSTR   "Code: ","/t :f{1 %f/br 2 +};^"   
468B   CD F8 0C               CALL   printStr   
468E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
469D   21 03 00               LD   hl,3   
46A0   E5                     PUSH   hl   
46A1   E5                     PUSH   hl   
46A2   CD 17 0E               CALL   run   
46A5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
46AD   CD 80 0C               CALL   flushBuffer   
46B0   CD F8 0C               CALL   printStr   
46B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46C0   E1                     POP   hl   
46C1   E5                     PUSH   hl   
46C2   E5                     PUSH   hl   
46C3   CD 17 0E               CALL   run   
46C6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
46D5   CD 80 0C               CALL   flushBuffer   
46D8   76                     HALT      
46D9                EXPECTM_2977S181:      
46D9   E1                     POP   HL   
46DA                          ;*Macro unroll:  test "/f :f{1 %f/br 2 +};^",1
46DA   31 00 53               LD   SP,STACK   
46DD   CD 40 0D               CALL   coldInit   
46E0   CD 66 51               CALL   execStr   
46E3   2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 DB   "/f :f{1 %f/br 2 +};^",0   
46F8   CD 80 0C               CALL   flushBuffer   
46FB   E1                     POP   HL   
46FC   E5                     PUSH   HL   
46FD   11 01 00               LD   DE,1   
4700   B7                     OR   A   
4701   ED 52                  SBC   HL,DE   
4703   7D                     LD   A,L   
4704   B4                     OR   H   
4705   CA 74 47               JP   Z,expectM_2978S182   
4708   CD F8 0C               CALL   printStr   
470B   43 6F 64 65 3A 20 2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 3B 5E 00 .CSTR   "Code: ","/f :f{1 %f/br 2 +};^"   
4726   CD F8 0C               CALL   printStr   
4729   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4738   21 01 00               LD   hl,1   
473B   E5                     PUSH   hl   
473C   E5                     PUSH   hl   
473D   CD 17 0E               CALL   run   
4740   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4748   CD 80 0C               CALL   flushBuffer   
474B   CD F8 0C               CALL   printStr   
474E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
475B   E1                     POP   hl   
475C   E5                     PUSH   hl   
475D   E5                     PUSH   hl   
475E   CD 17 0E               CALL   run   
4761   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4770   CD 80 0C               CALL   flushBuffer   
4773   76                     HALT      
4774                EXPECTM_2978S182:      
4774   E1                     POP   HL   
4775                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
4775   31 00 53               LD   SP,STACK   
4778   CD 40 0D               CALL   coldInit   
477B   CD 66 51               CALL   execStr   
477E   27 41 27 20 31 20 2D 20 2F 61 64 00 DB   "'A' 1 - /ad",0   
478A   CD 80 0C               CALL   flushBuffer   
478D   E1                     POP   HL   
478E   E5                     PUSH   HL   
478F   11 00 00               LD   DE,NUL   
4792   B7                     OR   A   
4793   ED 52                  SBC   HL,DE   
4795   7D                     LD   A,L   
4796   B4                     OR   H   
4797   CA FD 47               JP   Z,expectM_2979S183   
479A   CD F8 0C               CALL   printStr   
479D   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
47AF   CD F8 0C               CALL   printStr   
47B2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47C1   21 00 00               LD   hl,NUL   
47C4   E5                     PUSH   hl   
47C5   E5                     PUSH   hl   
47C6   CD 17 0E               CALL   run   
47C9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
47D1   CD 80 0C               CALL   flushBuffer   
47D4   CD F8 0C               CALL   printStr   
47D7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47E4   E1                     POP   hl   
47E5   E5                     PUSH   hl   
47E6   E5                     PUSH   hl   
47E7   CD 17 0E               CALL   run   
47EA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
47F9   CD 80 0C               CALL   flushBuffer   
47FC   76                     HALT      
47FD                EXPECTM_2979S183:      
47FD   E1                     POP   HL   
47FE                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
47FE   31 00 53               LD   SP,STACK   
4801   CD 40 0D               CALL   coldInit   
4804   CD 66 51               CALL   execStr   
4807   27 5A 27 20 31 20 2B 20 2F 61 64 00 DB   "'Z' 1 + /ad",0   
4813   CD 80 0C               CALL   flushBuffer   
4816   E1                     POP   HL   
4817   E5                     PUSH   HL   
4818   11 00 00               LD   DE,NUL   
481B   B7                     OR   A   
481C   ED 52                  SBC   HL,DE   
481E   7D                     LD   A,L   
481F   B4                     OR   H   
4820   CA 86 48               JP   Z,expectM_2980S184   
4823   CD F8 0C               CALL   printStr   
4826   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
4838   CD F8 0C               CALL   printStr   
483B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
484A   21 00 00               LD   hl,NUL   
484D   E5                     PUSH   hl   
484E   E5                     PUSH   hl   
484F   CD 17 0E               CALL   run   
4852   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
485A   CD 80 0C               CALL   flushBuffer   
485D   CD F8 0C               CALL   printStr   
4860   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
486D   E1                     POP   hl   
486E   E5                     PUSH   hl   
486F   E5                     PUSH   hl   
4870   CD 17 0E               CALL   run   
4873   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4882   CD 80 0C               CALL   flushBuffer   
4885   76                     HALT      
4886                EXPECTM_2980S184:      
4886   E1                     POP   HL   
4887                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
4887   31 00 53               LD   SP,STACK   
488A   CD 40 0D               CALL   coldInit   
488D   CD 66 51               CALL   execStr   
4890   27 61 27 20 31 20 2D 20 2F 61 64 00 DB   "'a' 1 - /ad",0   
489C   CD 80 0C               CALL   flushBuffer   
489F   E1                     POP   HL   
48A0   E5                     PUSH   HL   
48A1   11 00 00               LD   DE,NUL   
48A4   B7                     OR   A   
48A5   ED 52                  SBC   HL,DE   
48A7   7D                     LD   A,L   
48A8   B4                     OR   H   
48A9   CA 0F 49               JP   Z,expectM_2981S185   
48AC   CD F8 0C               CALL   printStr   
48AF   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
48C1   CD F8 0C               CALL   printStr   
48C4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48D3   21 00 00               LD   hl,NUL   
48D6   E5                     PUSH   hl   
48D7   E5                     PUSH   hl   
48D8   CD 17 0E               CALL   run   
48DB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
48E3   CD 80 0C               CALL   flushBuffer   
48E6   CD F8 0C               CALL   printStr   
48E9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48F6   E1                     POP   hl   
48F7   E5                     PUSH   hl   
48F8   E5                     PUSH   hl   
48F9   CD 17 0E               CALL   run   
48FC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
490B   CD 80 0C               CALL   flushBuffer   
490E   76                     HALT      
490F                EXPECTM_2981S185:      
490F   E1                     POP   HL   
4910                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
4910   31 00 53               LD   SP,STACK   
4913   CD 40 0D               CALL   coldInit   
4916   CD 66 51               CALL   execStr   
4919   27 7A 27 20 31 20 2B 20 2F 61 64 00 DB   "'z' 1 + /ad",0   
4925   CD 80 0C               CALL   flushBuffer   
4928   E1                     POP   HL   
4929   E5                     PUSH   HL   
492A   11 00 00               LD   DE,NUL   
492D   B7                     OR   A   
492E   ED 52                  SBC   HL,DE   
4930   7D                     LD   A,L   
4931   B4                     OR   H   
4932   CA 98 49               JP   Z,expectM_2982S186   
4935   CD F8 0C               CALL   printStr   
4938   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
494A   CD F8 0C               CALL   printStr   
494D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
495C   21 00 00               LD   hl,NUL   
495F   E5                     PUSH   hl   
4960   E5                     PUSH   hl   
4961   CD 17 0E               CALL   run   
4964   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
496C   CD 80 0C               CALL   flushBuffer   
496F   CD F8 0C               CALL   printStr   
4972   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
497F   E1                     POP   hl   
4980   E5                     PUSH   hl   
4981   E5                     PUSH   hl   
4982   CD 17 0E               CALL   run   
4985   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4994   CD 80 0C               CALL   flushBuffer   
4997   76                     HALT      
4998                EXPECTM_2982S186:      
4998   E1                     POP   HL   
4999                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
4999   31 00 53               LD   SP,STACK   
499C   CD 40 0D               CALL   coldInit   
499F   CD 66 51               CALL   execStr   
49A2   27 7A 27 20 2F 61 64 00 DB   "'z' /ad",0   
49AA   CD 80 0C               CALL   flushBuffer   
49AD   E1                     POP   HL   
49AE   E5                     PUSH   HL   
49AF   11 66 55               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
49B2   B7                     OR   A   
49B3   ED 52                  SBC   HL,DE   
49B5   7D                     LD   A,L   
49B6   B4                     OR   H   
49B7   CA 19 4A               JP   Z,expectM_2983S187   
49BA   CD F8 0C               CALL   printStr   
49BD   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
49CB   CD F8 0C               CALL   printStr   
49CE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49DD   21 66 55               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
49E0   E5                     PUSH   hl   
49E1   E5                     PUSH   hl   
49E2   CD 17 0E               CALL   run   
49E5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
49ED   CD 80 0C               CALL   flushBuffer   
49F0   CD F8 0C               CALL   printStr   
49F3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A00   E1                     POP   hl   
4A01   E5                     PUSH   hl   
4A02   E5                     PUSH   hl   
4A03   CD 17 0E               CALL   run   
4A06   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4A15   CD 80 0C               CALL   flushBuffer   
4A18   76                     HALT      
4A19                EXPECTM_2983S187:      
4A19   E1                     POP   HL   
4A1A                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
4A1A   31 00 53               LD   SP,STACK   
4A1D   CD 40 0D               CALL   coldInit   
4A20   CD 66 51               CALL   execStr   
4A23   27 61 27 20 2F 61 64 00 DB   "'a' /ad",0   
4A2B   CD 80 0C               CALL   flushBuffer   
4A2E   E1                     POP   HL   
4A2F   E5                     PUSH   HL   
4A30   11 34 55               LD   DE,VARS + ("Z"-"A"+1)*2   
4A33   B7                     OR   A   
4A34   ED 52                  SBC   HL,DE   
4A36   7D                     LD   A,L   
4A37   B4                     OR   H   
4A38   CA 9A 4A               JP   Z,expectM_2984S188   
4A3B   CD F8 0C               CALL   printStr   
4A3E   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
4A4C   CD F8 0C               CALL   printStr   
4A4F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A5E   21 34 55               LD   hl,VARS + ("Z"-"A"+1)*2   
4A61   E5                     PUSH   hl   
4A62   E5                     PUSH   hl   
4A63   CD 17 0E               CALL   run   
4A66   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4A6E   CD 80 0C               CALL   flushBuffer   
4A71   CD F8 0C               CALL   printStr   
4A74   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A81   E1                     POP   hl   
4A82   E5                     PUSH   hl   
4A83   E5                     PUSH   hl   
4A84   CD 17 0E               CALL   run   
4A87   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4A96   CD 80 0C               CALL   flushBuffer   
4A99   76                     HALT      
4A9A                EXPECTM_2984S188:      
4A9A   E1                     POP   HL   
4A9B                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
4A9B   31 00 53               LD   SP,STACK   
4A9E   CD 40 0D               CALL   coldInit   
4AA1   CD 66 51               CALL   execStr   
4AA4   27 5A 27 20 2F 61 64 00 DB   "'Z' /ad",0   
4AAC   CD 80 0C               CALL   flushBuffer   
4AAF   E1                     POP   HL   
4AB0   E5                     PUSH   HL   
4AB1   11 32 55               LD   DE,VARS + ("Z"-"A")*2   
4AB4   B7                     OR   A   
4AB5   ED 52                  SBC   HL,DE   
4AB7   7D                     LD   A,L   
4AB8   B4                     OR   H   
4AB9   CA 1B 4B               JP   Z,expectM_2985S189   
4ABC   CD F8 0C               CALL   printStr   
4ABF   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
4ACD   CD F8 0C               CALL   printStr   
4AD0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4ADF   21 32 55               LD   hl,VARS + ("Z"-"A")*2   
4AE2   E5                     PUSH   hl   
4AE3   E5                     PUSH   hl   
4AE4   CD 17 0E               CALL   run   
4AE7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4AEF   CD 80 0C               CALL   flushBuffer   
4AF2   CD F8 0C               CALL   printStr   
4AF5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B02   E1                     POP   hl   
4B03   E5                     PUSH   hl   
4B04   E5                     PUSH   hl   
4B05   CD 17 0E               CALL   run   
4B08   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4B17   CD 80 0C               CALL   flushBuffer   
4B1A   76                     HALT      
4B1B                EXPECTM_2985S189:      
4B1B   E1                     POP   HL   
4B1C                          ;*Macro unroll:  test "'A' /ad", VARS
4B1C   31 00 53               LD   SP,STACK   
4B1F   CD 40 0D               CALL   coldInit   
4B22   CD 66 51               CALL   execStr   
4B25   27 41 27 20 2F 61 64 00 DB   "'A' /ad",0   
4B2D   CD 80 0C               CALL   flushBuffer   
4B30   E1                     POP   HL   
4B31   E5                     PUSH   HL   
4B32   11 00 55               LD   DE,VARS   
4B35   B7                     OR   A   
4B36   ED 52                  SBC   HL,DE   
4B38   7D                     LD   A,L   
4B39   B4                     OR   H   
4B3A   CA 9C 4B               JP   Z,expectM_2986S190   
4B3D   CD F8 0C               CALL   printStr   
4B40   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
4B4E   CD F8 0C               CALL   printStr   
4B51   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B60   21 00 55               LD   hl,VARS   
4B63   E5                     PUSH   hl   
4B64   E5                     PUSH   hl   
4B65   CD 17 0E               CALL   run   
4B68   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4B70   CD 80 0C               CALL   flushBuffer   
4B73   CD F8 0C               CALL   printStr   
4B76   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B83   E1                     POP   hl   
4B84   E5                     PUSH   hl   
4B85   E5                     PUSH   hl   
4B86   CD 17 0E               CALL   run   
4B89   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4B98   CD 80 0C               CALL   flushBuffer   
4B9B   76                     HALT      
4B9C                EXPECTM_2986S190:      
4B9C   E1                     POP   HL   
4B9D                          ;*Macro unroll:  test "-1. /c/vB 0#", $2D
4B9D   31 00 53               LD   SP,STACK   
4BA0   CD 40 0D               CALL   coldInit   
4BA3   CD 66 51               CALL   execStr   
4BA6   2D 31 2E 20 2F 63 2F 76 42 20 30 23 00 DB   "-1. /c/vB 0#",0   
4BB3   CD 80 0C               CALL   flushBuffer   
4BB6   E1                     POP   HL   
4BB7   E5                     PUSH   HL   
4BB8   11 2D 00               LD   DE,$2D   
4BBB   B7                     OR   A   
4BBC   ED 52                  SBC   HL,DE   
4BBE   7D                     LD   A,L   
4BBF   B4                     OR   H   
4BC0   CA 27 4C               JP   Z,expectM_2987S191   
4BC3   CD F8 0C               CALL   printStr   
4BC6   43 6F 64 65 3A 20 2D 31 2E 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "Code: ","-1. /c/vB 0#"   
4BD9   CD F8 0C               CALL   printStr   
4BDC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BEB   21 2D 00               LD   hl,$2D   
4BEE   E5                     PUSH   hl   
4BEF   E5                     PUSH   hl   
4BF0   CD 17 0E               CALL   run   
4BF3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4BFB   CD 80 0C               CALL   flushBuffer   
4BFE   CD F8 0C               CALL   printStr   
4C01   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C0E   E1                     POP   hl   
4C0F   E5                     PUSH   hl   
4C10   E5                     PUSH   hl   
4C11   CD 17 0E               CALL   run   
4C14   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4C23   CD 80 0C               CALL   flushBuffer   
4C26   76                     HALT      
4C27                EXPECTM_2987S191:      
4C27   E1                     POP   HL   
4C28                          ;*Macro unroll:  test {DQ,"A",DQ,".s /c/vB 0#"}, 65
4C28   31 00 53               LD   SP,STACK   
4C2B   CD 40 0D               CALL   coldInit   
4C2E   CD 66 51               CALL   execStr   
4C31   22 41 22 2E 73 20 2F 63 2F 76 42 20 30 23 00 DB   DQ,"A",DQ,".s /c/vB 0#",0   
4C40   CD 80 0C               CALL   flushBuffer   
4C43   E1                     POP   HL   
4C44   E5                     PUSH   HL   
4C45   11 41 00               LD   DE,65   
4C48   B7                     OR   A   
4C49   ED 52                  SBC   HL,DE   
4C4B   7D                     LD   A,L   
4C4C   B4                     OR   H   
4C4D   CA B6 4C               JP   Z,expectM_2988S192   
4C50   CD F8 0C               CALL   printStr   
4C53   43 6F 64 65 3A 20 22 41 22 2E 73 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "Code: ",DQ,"A",DQ,".s /c/vB 0#"   
4C68   CD F8 0C               CALL   printStr   
4C6B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C7A   21 41 00               LD   hl,65   
4C7D   E5                     PUSH   hl   
4C7E   E5                     PUSH   hl   
4C7F   CD 17 0E               CALL   run   
4C82   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4C8A   CD 80 0C               CALL   flushBuffer   
4C8D   CD F8 0C               CALL   printStr   
4C90   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C9D   E1                     POP   hl   
4C9E   E5                     PUSH   hl   
4C9F   E5                     PUSH   hl   
4CA0   CD 17 0E               CALL   run   
4CA3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4CB2   CD 80 0C               CALL   flushBuffer   
4CB5   76                     HALT      
4CB6                EXPECTM_2988S192:      
4CB6   E1                     POP   HL   
4CB7                          ;*Macro unroll:  test "123. /c/vB 1#", $32
4CB7   31 00 53               LD   SP,STACK   
4CBA   CD 40 0D               CALL   coldInit   
4CBD   CD 66 51               CALL   execStr   
4CC0   31 32 33 2E 20 2F 63 2F 76 42 20 31 23 00 DB   "123. /c/vB 1#",0   
4CCE   CD 80 0C               CALL   flushBuffer   
4CD1   E1                     POP   HL   
4CD2   E5                     PUSH   HL   
4CD3   11 32 00               LD   DE,$32   
4CD6   B7                     OR   A   
4CD7   ED 52                  SBC   HL,DE   
4CD9   7D                     LD   A,L   
4CDA   B4                     OR   H   
4CDB   CA 43 4D               JP   Z,expectM_2989S193   
4CDE   CD F8 0C               CALL   printStr   
4CE1   43 6F 64 65 3A 20 31 32 33 2E 20 2F 63 2F 76 42 20 31 23 00 .CSTR   "Code: ","123. /c/vB 1#"   
4CF5   CD F8 0C               CALL   printStr   
4CF8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D07   21 32 00               LD   hl,$32   
4D0A   E5                     PUSH   hl   
4D0B   E5                     PUSH   hl   
4D0C   CD 17 0E               CALL   run   
4D0F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4D17   CD 80 0C               CALL   flushBuffer   
4D1A   CD F8 0C               CALL   printStr   
4D1D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D2A   E1                     POP   hl   
4D2B   E5                     PUSH   hl   
4D2C   E5                     PUSH   hl   
4D2D   CD 17 0E               CALL   run   
4D30   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4D3F   CD 80 0C               CALL   flushBuffer   
4D42   76                     HALT      
4D43                EXPECTM_2989S193:      
4D43   E1                     POP   HL   
4D44                          ;*Macro unroll:  test ":a{%a}; F=1F^", 1
4D44   31 00 53               LD   SP,STACK   
4D47   CD 40 0D               CALL   coldInit   
4D4A   CD 66 51               CALL   execStr   
4D4D   3A 61 7B 25 61 7D 3B 20 46 3D 31 46 5E 00 DB   ":a{%a}; F=1F^",0   
4D5B   CD 80 0C               CALL   flushBuffer   
4D5E   E1                     POP   HL   
4D5F   E5                     PUSH   HL   
4D60   11 01 00               LD   DE,1   
4D63   B7                     OR   A   
4D64   ED 52                  SBC   HL,DE   
4D66   7D                     LD   A,L   
4D67   B4                     OR   H   
4D68   CA D0 4D               JP   Z,expectM_2990S194   
4D6B   CD F8 0C               CALL   printStr   
4D6E   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 3B 20 46 3D 31 46 5E 00 .CSTR   "Code: ",":a{%a}; F=1F^"   
4D82   CD F8 0C               CALL   printStr   
4D85   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D94   21 01 00               LD   hl,1   
4D97   E5                     PUSH   hl   
4D98   E5                     PUSH   hl   
4D99   CD 17 0E               CALL   run   
4D9C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4DA4   CD 80 0C               CALL   flushBuffer   
4DA7   CD F8 0C               CALL   printStr   
4DAA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DB7   E1                     POP   hl   
4DB8   E5                     PUSH   hl   
4DB9   E5                     PUSH   hl   
4DBA   CD 17 0E               CALL   run   
4DBD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4DCC   CD 80 0C               CALL   flushBuffer   
4DCF   76                     HALT      
4DD0                EXPECTM_2990S194:      
4DD0   E1                     POP   HL   
4DD1                          ;*Macro unroll:  test "1 :b{:a{%a};};^F= 3F^",3
4DD1   31 00 53               LD   SP,STACK   
4DD4   CD 40 0D               CALL   coldInit   
4DD7   CD 66 51               CALL   execStr   
4DDA   31 20 3A 62 7B 3A 61 7B 25 61 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a};};^F= 3F^",0   
4DF0   CD 80 0C               CALL   flushBuffer   
4DF3   E1                     POP   HL   
4DF4   E5                     PUSH   HL   
4DF5   11 03 00               LD   DE,3   
4DF8   B7                     OR   A   
4DF9   ED 52                  SBC   HL,DE   
4DFB   7D                     LD   A,L   
4DFC   B4                     OR   H   
4DFD   CA 6D 4E               JP   Z,expectM_2991S195   
4E00   CD F8 0C               CALL   printStr   
4E03   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a};};^F= 3F^"   
4E1F   CD F8 0C               CALL   printStr   
4E22   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E31   21 03 00               LD   hl,3   
4E34   E5                     PUSH   hl   
4E35   E5                     PUSH   hl   
4E36   CD 17 0E               CALL   run   
4E39   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4E41   CD 80 0C               CALL   flushBuffer   
4E44   CD F8 0C               CALL   printStr   
4E47   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E54   E1                     POP   hl   
4E55   E5                     PUSH   hl   
4E56   E5                     PUSH   hl   
4E57   CD 17 0E               CALL   run   
4E5A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4E69   CD 80 0C               CALL   flushBuffer   
4E6C   76                     HALT      
4E6D                EXPECTM_2991S195:      
4E6D   E1                     POP   HL   
4E6E                          ;*Macro unroll:  test "1 :b{:a{%a%b-};};^F= 3F^",2
4E6E   31 00 53               LD   SP,STACK   
4E71   CD 40 0D               CALL   coldInit   
4E74   CD 66 51               CALL   execStr   
4E77   31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a%b-};};^F= 3F^",0   
4E90   CD 80 0C               CALL   flushBuffer   
4E93   E1                     POP   HL   
4E94   E5                     PUSH   HL   
4E95   11 02 00               LD   DE,2   
4E98   B7                     OR   A   
4E99   ED 52                  SBC   HL,DE   
4E9B   7D                     LD   A,L   
4E9C   B4                     OR   H   
4E9D   CA 10 4F               JP   Z,expectM_2992S196   
4EA0   CD F8 0C               CALL   printStr   
4EA3   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a%b-};};^F= 3F^"   
4EC2   CD F8 0C               CALL   printStr   
4EC5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4ED4   21 02 00               LD   hl,2   
4ED7   E5                     PUSH   hl   
4ED8   E5                     PUSH   hl   
4ED9   CD 17 0E               CALL   run   
4EDC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4EE4   CD 80 0C               CALL   flushBuffer   
4EE7   CD F8 0C               CALL   printStr   
4EEA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4EF7   E1                     POP   hl   
4EF8   E5                     PUSH   hl   
4EF9   E5                     PUSH   hl   
4EFA   CD 17 0E               CALL   run   
4EFD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4F0C   CD 80 0C               CALL   flushBuffer   
4F0F   76                     HALT      
4F10                EXPECTM_2992S196:      
4F10   E1                     POP   HL   
4F11                          ;*Macro unroll:  test "1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^",1
4F11   31 00 53               LD   SP,STACK   
4F14   CD 40 0D               CALL   coldInit   
4F17   CD 66 51               CALL   execStr   
4F1A   31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^",0   
4F3F   CD 80 0C               CALL   flushBuffer   
4F42   E1                     POP   HL   
4F43   E5                     PUSH   HL   
4F44   11 01 00               LD   DE,1   
4F47   B7                     OR   A   
4F48   ED 52                  SBC   HL,DE   
4F4A   7D                     LD   A,L   
4F4B   B4                     OR   H   
4F4C   CA CB 4F               JP   Z,expectM_2993S197   
4F4F   CD F8 0C               CALL   printStr   
4F52   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a:c{%a%b-%c= %c--%c};};^F= 3F^"   
4F7D   CD F8 0C               CALL   printStr   
4F80   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F8F   21 01 00               LD   hl,1   
4F92   E5                     PUSH   hl   
4F93   E5                     PUSH   hl   
4F94   CD 17 0E               CALL   run   
4F97   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4F9F   CD 80 0C               CALL   flushBuffer   
4FA2   CD F8 0C               CALL   printStr   
4FA5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4FB2   E1                     POP   hl   
4FB3   E5                     PUSH   hl   
4FB4   E5                     PUSH   hl   
4FB5   CD 17 0E               CALL   run   
4FB8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4FC7   CD 80 0C               CALL   flushBuffer   
4FCA   76                     HALT      
4FCB                EXPECTM_2993S197:      
4FCB   E1                     POP   HL   
4FCC                          ;*Macro unroll:  test "1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^",1
4FCC   31 00 53               LD   SP,STACK   
4FCF   CD 40 0D               CALL   coldInit   
4FD2   CD 66 51               CALL   execStr   
4FD5   31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^",0   
4FFA   CD 80 0C               CALL   flushBuffer   
4FFD   E1                     POP   HL   
4FFE   E5                     PUSH   HL   
4FFF   11 01 00               LD   DE,1   
5002   B7                     OR   A   
5003   ED 52                  SBC   HL,DE   
5005   7D                     LD   A,L   
5006   B4                     OR   H   
5007   CA 86 50               JP   Z,expectM_2994S198   
500A   CD F8 0C               CALL   printStr   
500D   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a{%a%b-%c= %c--%c};};^F= 3F^"   
5038   CD F8 0C               CALL   printStr   
503B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
504A   21 01 00               LD   hl,1   
504D   E5                     PUSH   hl   
504E   E5                     PUSH   hl   
504F   CD 17 0E               CALL   run   
5052   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
505A   CD 80 0C               CALL   flushBuffer   
505D   CD F8 0C               CALL   printStr   
5060   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
506D   E1                     POP   hl   
506E   E5                     PUSH   hl   
506F   E5                     PUSH   hl   
5070   CD 17 0E               CALL   run   
5073   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
5082   CD 80 0C               CALL   flushBuffer   
5085   76                     HALT      
5086                EXPECTM_2994S198:      
5086   E1                     POP   HL   
5087                          ;*Macro unroll:  test "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^",2
5087   31 00 53               LD   SP,STACK   
508A   CD 40 0D               CALL   coldInit   
508D   CD 66 51               CALL   execStr   
5090   31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^",0   
50C2   CD 80 0C               CALL   flushBuffer   
50C5   E1                     POP   HL   
50C6   E5                     PUSH   HL   
50C7   11 02 00               LD   DE,2   
50CA   B7                     OR   A   
50CB   ED 52                  SBC   HL,DE   
50CD   7D                     LD   A,L   
50CE   B4                     OR   H   
50CF   CA 5B 51               JP   Z,expectM_2995S199   
50D2   CD F8 0C               CALL   printStr   
50D5   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 3B 7D 3B 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d};};^F= 3F^"   
510D   CD F8 0C               CALL   printStr   
5110   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
511F   21 02 00               LD   hl,2   
5122   E5                     PUSH   hl   
5123   E5                     PUSH   hl   
5124   CD 17 0E               CALL   run   
5127   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
512F   CD 80 0C               CALL   flushBuffer   
5132   CD F8 0C               CALL   printStr   
5135   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5142   E1                     POP   hl   
5143   E5                     PUSH   hl   
5144   E5                     PUSH   hl   
5145   CD 17 0E               CALL   run   
5148   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
5157   CD 80 0C               CALL   flushBuffer   
515A   76                     HALT      
515B                EXPECTM_2995S199:      
515B   E1                     POP   HL   
515C                             ; 
515C   CD F8 0C               CALL   printStr   
515F   44 6F 6E 65 21 00      .CSTR   "Done!"   
5165   76                     HALT      
5166                             ; executes a null teminated string (null executes exit_)
5166                             ; the string should be immedaitely following the call
5166                EXECSTR:      ; create a root stack frame
5166   C1                     POP   bc   ; bc = code*
5167   0B                     DEC   bc   ; dec to prepare for next routine
5168   11 00 00               LD   de,0   
516B   D5                     PUSH   de   ; push fake IP
516C   D5                     PUSH   de   ; push null arg_list*
516D   D5                     PUSH   de   ; push null first_arg*
516E   D5                     PUSH   de   ; push fake BP
516F   DD E9                  JP   (ix)   
5171                STKSIZE:   EQU   $100   ; Stack size
5171                TIBSIZE:   EQU   $100   ; 256 bytes
5171                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
5171                          ALIGN   $100   
5200                          DS   STKSIZE   
5300                STACK:       
5300                          ALIGN   $100   
5300                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
5400                          ALIGN   $100   
5400                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5500                          ALIGN   $100   
5500                VARS:        
5500                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
55D0                RESTARTS:      
55D0                RST08:    DS   2   
55D2                RST10:    DS   2   
55D4                RST18:    DS   2   
55D6                RST20:    DS   2   
55D8                RST28:    DS   2   
55DA                RST30:    DS   2   ; 
55DC                BAUD:     DS   2   ; 
55DE                INTVEC:   DS   2   ; 
55E0                NMIVEC:   DS   2   ; 
55E2                GETCVEC:   DS   2   ; 
55E4                PUTCVEC:   DS   2   ; 
55E6                SYSVARS:      
55E6                             ; initialised sys variables (preserved)
55E6                VDATAWIDTH:   DS   2   ; 
55E8                VNUMBASE:   DS   2   ; 
55EA                VTIBPTR:   DS   2   ; 
55EC                VBUFPTR:   DS   2   ; 
55EE                VNEXT:    DS   2   ; 
55F0                VHEAPPTR:   DS   2   ; 
55F2                VRECUR:   DS   2   ; 
55F4                             ; uninitialised sys variables (preserved)
55F4                VPOINTER:   DS   2   ; 
55F6                VREMAIN:   DS   2   ; 
55F8                VSAVEDIP:   DS   2   ; 
55FA                VSAVEDSP:   DS   2   ; 
55FC                VSAVEDNEXT:   DS   2   ; 
55FE                VSAVEDBP:   DS   2   ; 
5600                             ; uninitialised sys variables (unpreserved)
5600                VTEMP1:   DS   2   ; 
5602                VTEMP2:   DS   2   ; 
5604                VLASTDEF:   DS   2   ; 
5606                TBPTR:    DS   2   ; reserved for tests
5608                TITLEBUF:   DS   20   
561C                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0C7E DEFINED AT LINE 1908 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 2035 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1572 IN MAIN.asm
                    > USED AT LINE 2126 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1809 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
                    > USED AT LINE 2110 IN MAIN.asm
                    > USED AT LINE 2172 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1318 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1323 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 239 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
                    > USED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
                    > USED AT LINE 858 IN MAIN.asm
                    > USED AT LINE 865 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
                    > USED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
                    > USED AT LINE 1091 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 2129 IN MAIN.asm
                    > USED AT LINE 2217 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
                    > USED AT LINE 1748 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
                    > USED AT LINE 2232 IN MAIN.asm
                    > USED AT LINE 2247 IN MAIN.asm
                    > USED AT LINE 8
                    > USED AT LINE 20
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2135 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2137 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2139 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 2141 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 53 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN MAIN.asm
                    > USED AT LINE 2063 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 69 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 172 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 174 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 176 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 178 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 180 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 182 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 184 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 186 IN MAIN.asm
LPAREN_:            0315 DEFINED AT LINE 188 IN MAIN.asm
LBRACE_:            0315 DEFINED AT LINE 189 IN MAIN.asm
RBRACE_:            0318 DEFINED AT LINE 191 IN MAIN.asm
TICK_:              031B DEFINED AT LINE 193 IN MAIN.asm
SEMICOLON_:         031E DEFINED AT LINE 195 IN MAIN.asm
DOT_:               0321 DEFINED AT LINE 197 IN MAIN.asm
COLON_:             0324 DEFINED AT LINE 199 IN MAIN.asm
UPCASE_:            0327 DEFINED AT LINE 201 IN MAIN.asm
LOWCASE_:           032A DEFINED AT LINE 203 IN MAIN.asm
QUESTION_:          032D DEFINED AT LINE 205 IN MAIN.asm
STAR_:              0330 DEFINED AT LINE 207 IN MAIN.asm
BANG_:              0333 DEFINED AT LINE 209 IN MAIN.asm
NOT:                033E DEFINED AT LINE 217 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
NUM_:               0344 DEFINED AT LINE 221 IN MAIN.asm
                    > USED AT LINE 1776 IN MAIN.asm
HASH_:              0347 DEFINED AT LINE 223 IN MAIN.asm
PIPE_:              034A DEFINED AT LINE 225 IN MAIN.asm
CARET_:             034D DEFINED AT LINE 227 IN MAIN.asm
COMMA_:             0350 DEFINED AT LINE 229 IN MAIN.asm
DQUOTE_:            0353 DEFINED AT LINE 231 IN MAIN.asm
MINUS_:             0356 DEFINED AT LINE 233 IN MAIN.asm
EQ_:                0359 DEFINED AT LINE 235 IN MAIN.asm
EQ0:                0362 DEFINED AT LINE 247 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
EQ1:                0363 DEFINED AT LINE 249 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
GT_:                0367 DEFINED AT LINE 253 IN MAIN.asm
LT_:                0372 DEFINED AT LINE 261 IN MAIN.asm
LT1:                037B DEFINED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 260 IN MAIN.asm
SLASH_:             0384 DEFINED AT LINE 273 IN MAIN.asm
NOP_:               0387 DEFINED AT LINE 275 IN MAIN.asm
RPAREN_:            0389 DEFINED AT LINE 277 IN MAIN.asm
PLUS:               038C DEFINED AT LINE 283 IN MAIN.asm
                    > USED AT LINE 175 IN MAIN.asm
ADD:                038C DEFINED AT LINE 284 IN MAIN.asm
ADD1:               0397 DEFINED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 288 IN MAIN.asm
ADD3:               039B DEFINED AT LINE 297 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1640 IN MAIN.asm
                    > USED AT LINE 1790 IN MAIN.asm
ADD4:               03A6 DEFINED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 301 IN MAIN.asm
AT:                 03A9 DEFINED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 177 IN MAIN.asm
ADDR:               03A9 DEFINED AT LINE 311 IN MAIN.asm
AMPER:              03B3 DEFINED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
AND:                03B3 DEFINED AT LINE 317 IN MAIN.asm
AND1:               03BA DEFINED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 345 IN MAIN.asm
PIPE:               03BE DEFINED AT LINE 330 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
OR:                 03C7 DEFINED AT LINE 337 IN MAIN.asm
                    > USED AT LINE 335 IN MAIN.asm
XOR:                03D0 DEFINED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 813 IN MAIN.asm
XOR1:               03D1 DEFINED AT LINE 349 IN MAIN.asm
                    > USED AT LINE 361 IN MAIN.asm
INVERT:             03DB DEFINED AT LINE 359 IN MAIN.asm
                    > USED AT LINE 857 IN MAIN.asm
PERCENT:            03E0 DEFINED AT LINE 366 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
ARG:                03E0 DEFINED AT LINE 367 IN MAIN.asm
ARG0:               03FC DEFINED AT LINE 386 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
ARG0A:              0405 DEFINED AT LINE 394 IN MAIN.asm
                    > USED AT LINE 373 IN MAIN.asm
                    > USED AT LINE 378 IN MAIN.asm
ARG1:               040A DEFINED AT LINE 397 IN MAIN.asm
                    > USED AT LINE 390 IN MAIN.asm
ARG1A:              0412 DEFINED AT LINE 404 IN MAIN.asm
                    > USED AT LINE 396 IN MAIN.asm
LBRACK:             0415 DEFINED AT LINE 408 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
ARRAYSTART:         0415 DEFINED AT LINE 409 IN MAIN.asm
RBRACK:             0431 DEFINED AT LINE 423 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
ARRAYEND:           0431 DEFINED AT LINE 424 IN MAIN.asm
ARRAYEND1:          044D DEFINED AT LINE 441 IN MAIN.asm
                    > USED AT LINE 458 IN MAIN.asm
ARRAYEND2:          045D DEFINED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
ARRAYEND3:          0462 DEFINED AT LINE 455 IN MAIN.asm
                    > USED AT LINE 440 IN MAIN.asm
HASH:               0481 DEFINED AT LINE 478 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
ARRAYINDEX:         0481 DEFINED AT LINE 479 IN MAIN.asm
ARRAYINDEX0:        0489 DEFINED AT LINE 485 IN MAIN.asm
ARRAYINDEX1:        048A DEFINED AT LINE 487 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
ARRAYINDEX2:        0496 DEFINED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 493 IN MAIN.asm
COLON:              0499 DEFINED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 200 IN MAIN.asm
ARGLIST:            0499 DEFINED AT LINE 505 IN MAIN.asm
ARGLIST1:           04A3 DEFINED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 533 IN MAIN.asm
ARGLIST1A:          04AB DEFINED AT LINE 518 IN MAIN.asm
                    > USED AT LINE 515 IN MAIN.asm
ARGLIST2:           04B3 DEFINED AT LINE 523 IN MAIN.asm
ARGLIST3:           04BB DEFINED AT LINE 531 IN MAIN.asm
                    > USED AT LINE 517 IN MAIN.asm
                    > USED AT LINE 529 IN MAIN.asm
ARGLIST4:           04BE DEFINED AT LINE 534 IN MAIN.asm
                    > USED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 522 IN MAIN.asm
ARGLIST5:           04C4 DEFINED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 538 IN MAIN.asm
ASSIGN:             04CF DEFINED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 240 IN MAIN.asm
ASSIGN0:            04D1 DEFINED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
                    > USED AT LINE 306 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
ASSIGNX:            04D2 DEFINED AT LINE 556 IN MAIN.asm
ASSIGN1:            04DE DEFINED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
ABSOLUTE:           04E0 DEFINED AT LINE 569 IN MAIN.asm
                    > USED AT LINE 820 IN MAIN.asm
ADDROF:             04ED DEFINED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
ADDROF1:            0501 DEFINED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
ADDROF2:            050C DEFINED AT LINE 605 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
                    > USED AT LINE 590 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
LBRACE:             050E DEFINED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
BLOCKSTART:         050E DEFINED AT LINE 610 IN MAIN.asm
BLOCKSTART1:        0512 DEFINED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 618 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
                    > USED AT LINE 652 IN MAIN.asm
BLOCKSTART2:        053E DEFINED AT LINE 641 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
                    > USED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 632 IN MAIN.asm
BLOCKSTART3:        0541 DEFINED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
BLOCKSTART4:        0549 DEFINED AT LINE 650 IN MAIN.asm
                    > USED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
BLOCKSTART5:        054C DEFINED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 649 IN MAIN.asm
BLOCKSTART6:        0574 DEFINED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 659 IN MAIN.asm
RBRACE:             0577 DEFINED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
BLOCKEND:           0577 DEFINED AT LINE 677 IN MAIN.asm
                    > USED AT LINE 752 IN MAIN.asm
BLOCKEND1:          05A9 DEFINED AT LINE 699 IN MAIN.asm
                    > USED AT LINE 692 IN MAIN.asm
BLOCKEND2:          05B5 DEFINED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
BLOCKEND3:          05C7 DEFINED AT LINE 720 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
BLOCKEND4:          05DB DEFINED AT LINE 730 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
BREAK:              05E4 DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 829 IN MAIN.asm
BREAK1:             05EB DEFINED AT LINE 743 IN MAIN.asm
                    > USED AT LINE 741 IN MAIN.asm
TICK:               05FE DEFINED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 194 IN MAIN.asm
CHAR:               05FE DEFINED AT LINE 755 IN MAIN.asm
CHAR1:              0601 DEFINED AT LINE 757 IN MAIN.asm
                    > USED AT LINE 768 IN MAIN.asm
CHAR2:              060D DEFINED AT LINE 766 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
CHAR3:              0610 DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
SLASH:              0613 DEFINED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 274 IN MAIN.asm
COMMAND:            0613 DEFINED AT LINE 774 IN MAIN.asm
COMMAND_A:          0652 DEFINED AT LINE 817 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
COMMAND_B:          065E DEFINED AT LINE 826 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
COMMAND_F:          066A DEFINED AT LINE 835 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
COMMAND_I:          0682 DEFINED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
COMMAND_L:          068E DEFINED AT LINE 861 IN MAIN.asm
                    > USED AT LINE 795 IN MAIN.asm
COMMAND_M:          0697 DEFINED AT LINE 868 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
COMMAND_P:          06A0 DEFINED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
COMMAND_R:          06AF DEFINED AT LINE 886 IN MAIN.asm
                    > USED AT LINE 805 IN MAIN.asm
COMMAND_V:          06BB DEFINED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
CHARS:              06D0 DEFINED AT LINE 910 IN MAIN.asm
                    > USED AT LINE 783 IN MAIN.asm
CHARS1:             06D3 DEFINED AT LINE 912 IN MAIN.asm
                    > USED AT LINE 917 IN MAIN.asm
NUMBERS:            06D8 DEFINED AT LINE 915 IN MAIN.asm
                    > USED AT LINE 799 IN MAIN.asm
COMMENT:            06DE DEFINED AT LINE 919 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 923 IN MAIN.asm
SEMICOLON:          06E7 DEFINED AT LINE 929 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
CREATEFUNC:         06E7 DEFINED AT LINE 930 IN MAIN.asm
CREATEFUNC0:        0702 DEFINED AT LINE 942 IN MAIN.asm
                    > USED AT LINE 938 IN MAIN.asm
CREATEFUNC1:        071A DEFINED AT LINE 961 IN MAIN.asm
                    > USED AT LINE 957 IN MAIN.asm
CREATEFUNC2:        072D DEFINED AT LINE 974 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
CREATEFUNC2A:       074C DEFINED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 987 IN MAIN.asm
CREATEFUNC3:        075B DEFINED AT LINE 1012 IN MAIN.asm
                    > USED AT LINE 1022 IN MAIN.asm
CREATEFUNC4:        0766 DEFINED AT LINE 1023 IN MAIN.asm
CREATEFUNC5:        0767 DEFINED AT LINE 1025 IN MAIN.asm
                    > USED AT LINE 941 IN MAIN.asm
COMMA:              0783 DEFINED AT LINE 1048 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
DISCARD:            0783 DEFINED AT LINE 1049 IN MAIN.asm
DISCARD1:           0790 DEFINED AT LINE 1058 IN MAIN.asm
                    > USED AT LINE 1056 IN MAIN.asm
DIV:                0792 DEFINED AT LINE 1061 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
DECIMAL:            07A3 DEFINED AT LINE 1072 IN MAIN.asm
                    > USED AT LINE 785 IN MAIN.asm
DECIMAL1:           07A6 DEFINED AT LINE 1074 IN MAIN.asm
                    > USED AT LINE 1079 IN MAIN.asm
HEXADECIMAL:        07AB DEFINED AT LINE 1077 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
DOT:                07B1 DEFINED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
BUFFERARRAY:        07C3 DEFINED AT LINE 32
                    > USED AT LINE 1084 IN MAIN.asm
BUFFERARRAYM_1609S1094: 07D1 DEFINED AT LINE 39
                    > USED AT LINE 35
BUFFERNUMBER:       080C DEFINED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 1092 IN MAIN.asm
BUFFERDEC:          0813 DEFINED AT LINE 1106 IN MAIN.asm
BUFFERDEC0:         082D DEFINED AT LINE 1123 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
BUFFERDEC1:         083D DEFINED AT LINE 1137 IN MAIN.asm
                    > USED AT LINE 1125 IN MAIN.asm
BUFFERDEC2:         085D DEFINED AT LINE 1151 IN MAIN.asm
                    > USED AT LINE 1140 IN MAIN.asm
                    > USED AT LINE 1142 IN MAIN.asm
                    > USED AT LINE 1144 IN MAIN.asm
                    > USED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 1149 IN MAIN.asm
BUFFERDEC3:         085F DEFINED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 1156 IN MAIN.asm
BUFFERDEC4:         086F DEFINED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 1160 IN MAIN.asm
BUFFERDEC5:         0870 DEFINED AT LINE 1167 IN MAIN.asm
                    > USED AT LINE 1164 IN MAIN.asm
BUFFERHEX:          0879 DEFINED AT LINE 1178 IN MAIN.asm
                    > USED AT LINE 1102 IN MAIN.asm
BUFFERHEX1:         089A DEFINED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
BUFFERHEX2:         08A3 DEFINED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
BUFFERSTRING:       08B1 DEFINED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 1088 IN MAIN.asm
BUFFERSTRING0:      08B8 DEFINED AT LINE 1221 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
BUFFERSTRING1:      08BE DEFINED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 1220 IN MAIN.asm
BUFFERCHAR:         08CB DEFINED AT LINE 1236 IN MAIN.asm
                    > USED AT LINE 1086 IN MAIN.asm
BUFFERXCHARS:       08D0 DEFINED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 1090 IN MAIN.asm
BUFFERXCHARS0:      08D1 DEFINED AT LINE 1244 IN MAIN.asm
                    > USED AT LINE 1238 IN MAIN.asm
BUFFERXCHARS1:      08DA DEFINED AT LINE 1250 IN MAIN.asm
                    > USED AT LINE 1260 IN MAIN.asm
BUFFERXCHARS2:      08E2 DEFINED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1249 IN MAIN.asm
DIVIDE:             08EC DEFINED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 1066 IN MAIN.asm
DIVIDE1:            08F1 DEFINED AT LINE 1270 IN MAIN.asm
                    > USED AT LINE 1282 IN MAIN.asm
DIVIDE2:            08FE DEFINED AT LINE 1278 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
DIVIDE3:            08FF DEFINED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 1277 IN MAIN.asm
EQUALS:             0905 DEFINED AT LINE 1288 IN MAIN.asm
                    > USED AT LINE 251 IN MAIN.asm
NOTEQUALS:          090D DEFINED AT LINE 1294 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
LESSTHANEQ:         0916 DEFINED AT LINE 1302 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
LESSTHAN:           091B DEFINED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
LESSTHAN1:          0920 DEFINED AT LINE 1314 IN MAIN.asm
                    > USED AT LINE 1305 IN MAIN.asm
TRUE1:              0923 DEFINED AT LINE 1317 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 1291 IN MAIN.asm
                    > USED AT LINE 1297 IN MAIN.asm
NULL1:              0929 DEFINED AT LINE 1321 IN MAIN.asm
FALSE1:             0929 DEFINED AT LINE 1322 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 1292 IN MAIN.asm
                    > USED AT LINE 1298 IN MAIN.asm
                    > USED AT LINE 1312 IN MAIN.asm
                    > USED AT LINE 1315 IN MAIN.asm
ERROR1:             092F DEFINED AT LINE 1327 IN MAIN.asm
                    > USED AT LINE 824 IN MAIN.asm
                    > USED AT LINE 833 IN MAIN.asm
                    > USED AT LINE 859 IN MAIN.asm
                    > USED AT LINE 866 IN MAIN.asm
                    > USED AT LINE 873 IN MAIN.asm
                    > USED AT LINE 884 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
                    > USED AT LINE 908 IN MAIN.asm
FOREACH:            0936 DEFINED AT LINE 32
                    > USED AT LINE 838 IN MAIN.asm
FOREACHM_1831S1334: 0942 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            09A4 DEFINED AT LINE 32
                    > USED AT LINE 840 IN MAIN.asm
FUNCSRCM_1858S1363: 09B0 DEFINED AT LINE 39
                    > USED AT LINE 35
CARET:              09DF DEFINED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 228 IN MAIN.asm
GO:                 09DF DEFINED AT LINE 1378 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                09E0 DEFINED AT LINE 1380 IN MAIN.asm
                    > USED AT LINE 733 IN MAIN.asm
                    > USED AT LINE 1555 IN MAIN.asm
                    > USED AT LINE 1557 IN MAIN.asm
                    > USED AT LINE 1689 IN MAIN.asm
GO2:                09E6 DEFINED AT LINE 1385 IN MAIN.asm
                    > USED AT LINE 1383 IN MAIN.asm
GOBLOCK:            09F1 DEFINED AT LINE 1393 IN MAIN.asm
                    > USED AT LINE 1388 IN MAIN.asm
GOBLOCK2:           0A16 DEFINED AT LINE 1410 IN MAIN.asm
                    > USED AT LINE 1491 IN MAIN.asm
GOBLOCK3:           0A20 DEFINED AT LINE 1416 IN MAIN.asm
GOFUNC:             0A24 DEFINED AT LINE 1420 IN MAIN.asm
                    > USED AT LINE 1390 IN MAIN.asm
GOFUNC1:            0A3D DEFINED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 1449 IN MAIN.asm
GOFUNC2:            0A43 DEFINED AT LINE 1446 IN MAIN.asm
                    > USED AT LINE 1438 IN MAIN.asm
GOFUNC3:            0A4E DEFINED AT LINE 1452 IN MAIN.asm
                    > USED AT LINE 1428 IN MAIN.asm
GOFUNC4:            0A66 DEFINED AT LINE 1469 IN MAIN.asm
                    > USED AT LINE 1466 IN MAIN.asm
GOFUNC5:            0A69 DEFINED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
GOFUNC6:            0A6C DEFINED AT LINE 1476 IN MAIN.asm
                    > USED AT LINE 1471 IN MAIN.asm
GOFUNC7:            0A6F DEFINED AT LINE 1479 IN MAIN.asm
GOFUNC8:            0A73 DEFINED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 1404 IN MAIN.asm
                    > USED AT LINE 1468 IN MAIN.asm
DOLLAR:             0A7E DEFINED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
HEXNUM:             0A7E DEFINED AT LINE 1494 IN MAIN.asm
HEXNUM1:            0A81 DEFINED AT LINE 1496 IN MAIN.asm
                    > USED AT LINE 1513 IN MAIN.asm
HEXNUM2:            0A89 DEFINED AT LINE 1502 IN MAIN.asm
                    > USED AT LINE 1500 IN MAIN.asm
UPCASE:             0A9B DEFINED AT LINE 1515 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
LOWCASE:            0AA0 DEFINED AT LINE 1519 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
IDENT1:             0AA5 DEFINED AT LINE 1523 IN MAIN.asm
                    > USED AT LINE 1518 IN MAIN.asm
QUESTION:           0AB2 DEFINED AT LINE 1536 IN MAIN.asm
                    > USED AT LINE 206 IN MAIN.asm
IF:                 0AB2 DEFINED AT LINE 1537 IN MAIN.asm
IFTE:               0ABE DEFINED AT LINE 1547 IN MAIN.asm
                    > USED AT LINE 1541 IN MAIN.asm
IFTE1:              0ABF DEFINED AT LINE 1549 IN MAIN.asm
                    > USED AT LINE 1544 IN MAIN.asm
INPUT:              0ACB DEFINED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
KEY:                0AD6 DEFINED AT LINE 1571 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
LITERAL:            0ADF DEFINED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 864 IN MAIN.asm
OUTPUT:             0AE8 DEFINED AT LINE 1595 IN MAIN.asm
                    > USED AT LINE 801 IN MAIN.asm
MAP:                0AF1 DEFINED AT LINE 32
                    > USED AT LINE 871 IN MAIN.asm
MAPM_2090S1606:     0AFD DEFINED AT LINE 39
                    > USED AT LINE 35
STAR:               0B38 DEFINED AT LINE 1620 IN MAIN.asm
                    > USED AT LINE 208 IN MAIN.asm
MUL:                0B38 DEFINED AT LINE 1621 IN MAIN.asm
MUL2:               0B3A DEFINED AT LINE 1624 IN MAIN.asm
MUL3:               0B42 DEFINED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1638 IN MAIN.asm
NUM:                0B54 DEFINED AT LINE 1642 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
NUM0:               0B5D DEFINED AT LINE 1648 IN MAIN.asm
                    > USED AT LINE 1646 IN MAIN.asm
NUM1:               0B5E DEFINED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 1667 IN MAIN.asm
NUM2:               0B76 DEFINED AT LINE 1668 IN MAIN.asm
                    > USED AT LINE 1504 IN MAIN.asm
                    > USED AT LINE 1506 IN MAIN.asm
                    > USED AT LINE 1653 IN MAIN.asm
                    > USED AT LINE 1655 IN MAIN.asm
NUM3:               0B81 DEFINED AT LINE 1676 IN MAIN.asm
                    > USED AT LINE 1671 IN MAIN.asm
PIPESTREAM:         0B84 DEFINED AT LINE 1683 IN MAIN.asm
                    > USED AT LINE 333 IN MAIN.asm
RPAREN:             0B8E DEFINED AT LINE 1691 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
SHIFTLEFT:          0B96 DEFINED AT LINE 1698 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
SHIFTLEFT1:         0B9E DEFINED AT LINE 1705 IN MAIN.asm
                    > USED AT LINE 1708 IN MAIN.asm
SHIFTLEFT2:         0B9F DEFINED AT LINE 1707 IN MAIN.asm
                    > USED AT LINE 1704 IN MAIN.asm
SHIFTRIGHT:         0BA6 DEFINED AT LINE 1715 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
SHIFTRIGHT1:        0BAE DEFINED AT LINE 1722 IN MAIN.asm
                    > USED AT LINE 1726 IN MAIN.asm
SHIFTRIGHT2:        0BB2 DEFINED AT LINE 1725 IN MAIN.asm
                    > USED AT LINE 1721 IN MAIN.asm
DQUOTE:             0BB9 DEFINED AT LINE 1734 IN MAIN.asm
                    > USED AT LINE 232 IN MAIN.asm
STRING:             0BB9 DEFINED AT LINE 1735 IN MAIN.asm
STRING1:            0BC2 DEFINED AT LINE 1742 IN MAIN.asm
                    > USED AT LINE 1751 IN MAIN.asm
STRING2:            0BC5 DEFINED AT LINE 1746 IN MAIN.asm
                    > USED AT LINE 1741 IN MAIN.asm
STRING3:            0BCE DEFINED AT LINE 1752 IN MAIN.asm
                    > USED AT LINE 1749 IN MAIN.asm
MINUS:              0BE1 DEFINED AT LINE 1769 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
SUB:                0BED DEFINED AT LINE 1777 IN MAIN.asm
                    > USED AT LINE 1774 IN MAIN.asm
SUB1:               0BF7 DEFINED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 1780 IN MAIN.asm
PRINTBUFFER:        0C00 DEFINED AT LINE 32
                    > USED AT LINE 878 IN MAIN.asm
PRINTBUFFERM_2270S1796: 0C0C DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTCHARS:         0C26 DEFINED AT LINE 1801 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
PRINTCHARS1:        0C2D DEFINED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 1816 IN MAIN.asm
PRINTCHARS2:        0C33 DEFINED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 1804 IN MAIN.asm
                    > USED AT LINE 1925 IN MAIN.asm
PRINTSTACK:         0C38 DEFINED AT LINE 1820 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
RECUR:              0C3A DEFINED AT LINE 1850 IN MAIN.asm
                    > USED AT LINE 889 IN MAIN.asm
REMAIN:             0C40 DEFINED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 891 IN MAIN.asm
SIZE:               0C46 DEFINED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 807 IN MAIN.asm
CONSTBUFSTART:      0C4E DEFINED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
CONSTHEAPSTART:     0C53 DEFINED AT LINE 1873 IN MAIN.asm
CONSTTIBSTART:      0C58 DEFINED AT LINE 1877 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
VARBUFPTR:          0C5D DEFINED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
VARHEAPPTR:         0C66 DEFINED AT LINE 1886 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
VARTIBPTR:          0C6F DEFINED AT LINE 1891 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
VARIABLE:           0C78 DEFINED AT LINE 1896 IN MAIN.asm
                    > USED AT LINE 314 IN MAIN.asm
                    > USED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1889 IN MAIN.asm
                    > USED AT LINE 1894 IN MAIN.asm
CONSTANT:           0C7B DEFINED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 1871 IN MAIN.asm
                    > USED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 1879 IN MAIN.asm
FILTER:             0C7E DEFINED AT LINE 1907 IN MAIN.asm
FLUSHBUFFER:        0C80 DEFINED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 1172 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
                    > USED AT LINE 1192 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 2093 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
JUMPTABLE:          0C97 DEFINED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 775 IN MAIN.asm
                    > USED AT LINE 818 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
                    > USED AT LINE 869 IN MAIN.asm
                    > USED AT LINE 876 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 1082 IN MAIN.asm
JUMPTABLE0:         0C99 DEFINED AT LINE 1938 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
JUMPTABLE1:         0CA6 DEFINED AT LINE 1949 IN MAIN.asm
                    > USED AT LINE 1941 IN MAIN.asm
JUMPTABLE2:         0CA7 DEFINED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
PRTSTR0:            0CAD DEFINED AT LINE 1959 IN MAIN.asm
                    > USED AT LINE 1965 IN MAIN.asm
PRTSTR:             0CB1 DEFINED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
                    > USED AT LINE 2089 IN MAIN.asm
NESTING:            0CB6 DEFINED AT LINE 1978 IN MAIN.asm
                    > USED AT LINE 2115 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
NESTING0:           0CC0 DEFINED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 1980 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
NESTING1A:          0CC7 DEFINED AT LINE 1989 IN MAIN.asm
                    > USED AT LINE 1986 IN MAIN.asm
NESTING1:           0CCA DEFINED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 1983 IN MAIN.asm
NESTING2:           0CD9 DEFINED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
                    > USED AT LINE 1998 IN MAIN.asm
NESTING3:           0CDB DEFINED AT LINE 2004 IN MAIN.asm
                    > USED AT LINE 2000 IN MAIN.asm
NESTING4:           0CE6 DEFINED AT LINE 2011 IN MAIN.asm
                    > USED AT LINE 2006 IN MAIN.asm
                    > USED AT LINE 2008 IN MAIN.asm
PROMPT:             0CE8 DEFINED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 2094 IN MAIN.asm
CRLF:               0CF1 DEFINED AT LINE 2020 IN MAIN.asm
                    > USED AT LINE 2186 IN MAIN.asm
PRINTSTR:           0CF8 DEFINED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 2016 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
                    > USED AT LINE 2240 IN MAIN.asm
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 75
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 203
TITLESTR:           0CFF DEFINED AT LINE 2034 IN MAIN.asm
                    > USED AT LINE 2038 IN MAIN.asm
                    > USED AT LINE 2057 IN MAIN.asm
INIT:               0D13 DEFINED AT LINE 2037 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
INIT1:              0D1B DEFINED AT LINE 2041 IN MAIN.asm
                    > USED AT LINE 2047 IN MAIN.asm
WARMINIT:           0D23 DEFINED AT LINE 2049 IN MAIN.asm
COLDBOOT0:          0D36 DEFINED AT LINE 2056 IN MAIN.asm
                    > USED AT LINE 2044 IN MAIN.asm
                    > USED AT LINE 2082 IN MAIN.asm
COLDINIT:           0D40 DEFINED AT LINE 2062 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0D51 DEFINED AT LINE 2071 IN MAIN.asm
                    > USED AT LINE 2074 IN MAIN.asm
COLDSTART:          0D5E DEFINED AT LINE 2080 IN MAIN.asm
                    > USED AT LINE 831 IN MAIN.asm
START:              0D67 DEFINED AT LINE 2084 IN MAIN.asm
START1:             0D6D DEFINED AT LINE 2087 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 2083 IN MAIN.asm
INTERPRET:          0D73 DEFINED AT LINE 2091 IN MAIN.asm
                    > USED AT LINE 2219 IN MAIN.asm
                    > USED AT LINE 2233 IN MAIN.asm
                    > USED AT LINE 2248 IN MAIN.asm
                    > USED AT LINE 2251 IN MAIN.asm
                    > USED AT LINE 2256 IN MAIN.asm
INTERPRET2:         0D82 DEFINED AT LINE 2100 IN MAIN.asm
                    > USED AT LINE 2164 IN MAIN.asm
                    > USED AT LINE 2238 IN MAIN.asm
                    > USED AT LINE 2242 IN MAIN.asm
INTERPRET3:         0D8A DEFINED AT LINE 2108 IN MAIN.asm
                    > USED AT LINE 2121 IN MAIN.asm
INTERPRET4:         0D95 DEFINED AT LINE 2117 IN MAIN.asm
                    > USED AT LINE 2106 IN MAIN.asm
INTERPRET5:         0D9A DEFINED AT LINE 2124 IN MAIN.asm
                    > USED AT LINE 2174 IN MAIN.asm
                    > USED AT LINE 2189 IN MAIN.asm
INTERPRET5A:        0DBD DEFINED AT LINE 2161 IN MAIN.asm
INTERPRET6:         0DBF DEFINED AT LINE 2166 IN MAIN.asm
                    > USED AT LINE 2128 IN MAIN.asm
INTERPRET7:         0DCD DEFINED AT LINE 2176 IN MAIN.asm
                    > USED AT LINE 2133 IN MAIN.asm
INTERPRET8:         0DE0 DEFINED AT LINE 2191 IN MAIN.asm
                    > USED AT LINE 2131 IN MAIN.asm
NEXT:               0DFB DEFINED AT LINE 2204 IN MAIN.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 2208 IN MAIN.asm
NEXT1:              0E0C DEFINED AT LINE 2216 IN MAIN.asm
                    > USED AT LINE 2209 IN MAIN.asm
EXIT:               0E13 DEFINED AT LINE 2221 IN MAIN.asm
                    > USED AT LINE 2218 IN MAIN.asm
RUN:                0E17 DEFINED AT LINE 2225 IN MAIN.asm
                    > USED AT LINE 2231 IN MAIN.asm
                    > USED AT LINE 2246 IN MAIN.asm
                    > USED AT LINE 2254 IN MAIN.asm
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
ERROR:              0E1B DEFINED AT LINE 2230 IN MAIN.asm
                    > USED AT LINE 1330 IN MAIN.asm
BACKSPACE_:         0E2E DEFINED AT LINE 2235 IN MAIN.asm
                    > USED AT LINE 2138 IN MAIN.asm
EDIT_:              0E3E DEFINED AT LINE 2245 IN MAIN.asm
                    > USED AT LINE 2136 IN MAIN.asm
REEDIT_:            0E56 DEFINED AT LINE 2250 IN MAIN.asm
                    > USED AT LINE 2140 IN MAIN.asm
PRINTSTACK_:        0E59 DEFINED AT LINE 2253 IN MAIN.asm
                    > USED AT LINE 2142 IN MAIN.asm
F1:                 0E63 DEFINED AT LINE 32
                    > USED AT LINE 842 IN MAIN.asm
F1M_2816S12:        0E73 DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 0EEC DEFINED AT LINE 32
                    > USED AT LINE 844 IN MAIN.asm
F2M_2834S31:        0EF9 DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 0F48 DEFINED AT LINE 32
                    > USED AT LINE 846 IN MAIN.asm
F3M_2845S43:        0F56 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 0FC8 DEFINED AT LINE 32
                    > USED AT LINE 848 IN MAIN.asm
F4M_2857S56:        0FD5 DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         1000 DEFINED AT LINE 70
                    > USED AT LINE 8
EXPECTM_2872S73:    10C0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2877S81:    1141 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2878S82:    11B8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2879S83:    122D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2880S84:    12A2 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2881S85:    1317 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2882S86:    138C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2883S87:    1403 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2884S88:    147C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2885S89:    14F3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2886S90:    156A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2887S91:    15E3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2888S92:    165E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2889S93:    16D7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2890S94:    1750 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2891S95:    17CF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2892S96:    184E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2893S97:    18CB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2894S98:    194C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2895S99:    19D1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2896S100:   1A54 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2897S101:   1AD1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2898S102:   1B56 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2899S103:   1BD7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2900S104:   1C54 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2901S105:   1CD1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2902S106:   1D56 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2903S107:   1DD3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2904S108:   1E50 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2905S109:   1ECF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2906S110:   1F5E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2907S111:   1FDB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2908S112:   2060 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2909S113:   20DD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2910S114:   2168 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2911S115:   21F3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2912S116:   227E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2913S117:   2309 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2914S118:   238E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2915S119:   240B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2916S120:   248A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2917S121:   2509 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2918S122:   2586 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2919S123:   2603 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2920S124:   2680 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2921S125:   26FD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2922S126:   277A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2923S127:   27F7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2924S128:   2874 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2925S129:   28F1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2926S130:   2970 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2927S131:   29EF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2928S132:   2A6E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2929S133:   2AEF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2930S134:   2B70 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2931S135:   2BEB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2932S136:   2C66 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2933S137:   2CE7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2934S138:   2D6E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2935S139:   2DF5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2936S140:   2E80 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2937S141:   2F15 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2938S142:   2FAA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2939S143:   3025 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2940S144:   30A2 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2941S145:   3121 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2942S146:   31A2 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2943S147:   3221 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2944S148:   32A0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2945S149:   3321 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2946S150:   33A8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2947S151:   3433 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2948S152:   34BA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2949S153:   354B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2950S154:   35DE DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2951S155:   3677 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2952S156:   3714 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2953S157:   37A3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2954S158:   3838 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2955S159:   38CF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2956S160:   3968 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2957S161:   39FF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2958S162:   3AA4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2959S163:   3B37 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2960S164:   3BD8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2961S165:   3C7B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2962S166:   3D20 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2963S167:   3DCF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2964S168:   3E7E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2965S169:   3F0B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2966S170:   3F9E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2967S171:   402B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2968S172:   40C4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2969S173:   415D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2970S174:   4208 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2971S175:   42BB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2972S176:   436E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2973S177:   440F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2974S178:   44B6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2975S179:   4573 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2976S180:   463E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2977S181:   46D9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2978S182:   4774 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2979S183:   47FD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2980S184:   4886 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2981S185:   490F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2982S186:   4998 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2983S187:   4A19 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2984S188:   4A9A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2985S189:   4B1B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2986S190:   4B9C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2987S191:   4C27 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2988S192:   4CB6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2989S193:   4D43 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2990S194:   4DD0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2991S195:   4E6D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2992S196:   4F10 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2993S197:   4FCB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2994S198:   5086 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2995S199:   515B DEFINED AT LINE 40
                    > USED AT LINE 17
EXECSTR:            5166 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              5300 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1395 IN MAIN.asm
                    > USED AT LINE 2077 IN MAIN.asm
                    > USED AT LINE 2081 IN MAIN.asm
                    > USED AT LINE 2085 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                5300 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2105 IN MAIN.asm
                    > USED AT LINE 2168 IN MAIN.asm
                    > USED AT LINE 2178 IN MAIN.asm
                    > USED AT LINE 2193 IN MAIN.asm
                    > USED AT LINE 2196 IN MAIN.asm
BUF:                5400 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 1870 IN MAIN.asm
                    > USED AT LINE 1921 IN MAIN.asm
VARS:               5500 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 598 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
RESTARTS:           55D0 DEFINED AT LINE 18 IN ram.asm
RST08:              55D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              55D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              55D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              55D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              55D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              55DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               55DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             55DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             55E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            55E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            55E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            55E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2064 IN MAIN.asm
VDATAWIDTH:         55E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 445 IN MAIN.asm
                    > USED AT LINE 482 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
VNUMBASE:           55E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1075 IN MAIN.asm
                    > USED AT LINE 1100 IN MAIN.asm
VTIBPTR:            55EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1892 IN MAIN.asm
                    > USED AT LINE 1893 IN MAIN.asm
                    > USED AT LINE 2098 IN MAIN.asm
                    > USED AT LINE 2195 IN MAIN.asm
VBUFPTR:            55EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 1180 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
                    > USED AT LINE 1230 IN MAIN.asm
                    > USED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 1261 IN MAIN.asm
                    > USED AT LINE 1882 IN MAIN.asm
                    > USED AT LINE 1883 IN MAIN.asm
                    > USED AT LINE 1920 IN MAIN.asm
                    > USED AT LINE 1922 IN MAIN.asm
VNEXT:              55EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2076 IN MAIN.asm
VHEAPPTR:           55F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 434 IN MAIN.asm
                    > USED AT LINE 468 IN MAIN.asm
                    > USED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
                    > USED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 1042 IN MAIN.asm
                    > USED AT LINE 1736 IN MAIN.asm
                    > USED AT LINE 1756 IN MAIN.asm
                    > USED AT LINE 1887 IN MAIN.asm
                    > USED AT LINE 1888 IN MAIN.asm
VRECUR:             55F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 725 IN MAIN.asm
                    > USED AT LINE 732 IN MAIN.asm
                    > USED AT LINE 1852 IN MAIN.asm
VPOINTER:           55F4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 312 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
                    > USED AT LINE 400 IN MAIN.asm
                    > USED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 1527 IN MAIN.asm
                    > USED AT LINE 1897 IN MAIN.asm
VREMAIN:            55F6 DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 1856 IN MAIN.asm
VSAVEDIP:           55F8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 2050 IN MAIN.asm
                    > USED AT LINE 2198 IN MAIN.asm
VSAVEDSP:           55FA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 2051 IN MAIN.asm
                    > USED AT LINE 2199 IN MAIN.asm
VSAVEDNEXT:         55FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2200 IN MAIN.asm
VSAVEDBP:           55FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2053 IN MAIN.asm
                    > USED AT LINE 2201 IN MAIN.asm
VTEMP1:             5600 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 427 IN MAIN.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
                    > USED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 680 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
                    > USED AT LINE 931 IN MAIN.asm
                    > USED AT LINE 1043 IN MAIN.asm
                    > USED AT LINE 1394 IN MAIN.asm
                    > USED AT LINE 1400 IN MAIN.asm
                    > USED AT LINE 1429 IN MAIN.asm
                    > USED AT LINE 1450 IN MAIN.asm
                    > USED AT LINE 1457 IN MAIN.asm
                    > USED AT LINE 1463 IN MAIN.asm
VTEMP2:             5602 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
                    > USED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 1033 IN MAIN.asm
                    > USED AT LINE 1430 IN MAIN.asm
                    > USED AT LINE 1451 IN MAIN.asm
VLASTDEF:           5604 DEFINED AT LINE 58 IN ram.asm
TBPTR:              5606 DEFINED AT LINE 59 IN ram.asm
TITLEBUF:           5608 DEFINED AT LINE 61 IN ram.asm
                    > USED AT LINE 2039 IN MAIN.asm
                    > USED AT LINE 2058 IN MAIN.asm
                    > USED AT LINE 2088 IN MAIN.asm
HEAP:               561C DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 655 IN MAIN.asm
                    > USED AT LINE 1874 IN MAIN.asm
