0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 3A               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 3A               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 3A               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 3A               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 3A               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 3A               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 3A               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 3A               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 3A               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 3A               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 39               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 3A               LD   (RST08),HL   
0094   22 D2 3A               LD   (RST10),HL   
0097   22 D4 3A               LD   (RST18),HL   
009A   22 D6 3A               LD   (RST20),HL   
009D   22 D8 3A               LD   (RST28),HL   
00A0   22 DA 3A               LD   (RST30),HL   
00A3   22 DE 3A               LD   (INTVEC),HL   
00A6   22 E0 3A               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 3A               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 3A               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 39               LD   SP,STACK   
00C6   CD 72 09               CALL   init   
00C9   C3 00 0B               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; ?
00CC                DC2:      EQU   18   ; ?
00CC                DC3:      EQU   19   ; ?
00CC                ESC:      EQU   27   ; ?
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; first_arg*                        -- first_arg*
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0184   FD 09                  DW   next   ; g nNext
0186   00 3D                  DW   heap   ; h vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available , ;
0220   85                     DB   lsb(nop_)   ; SP
0221   3F                     DB   lsb(not_)   ; !
0222   50                     DB   lsb(string_)   ; "
0223   47                     DB   lsb(hexnum_)   ; #
0224   09                     DB   lsb(arg_)   ; $
0225   15                     DB   lsb(arrIndex_)   ; %
0226   06                     DB   lsb(and_)   ; &
0227   1E                     DB   lsb(char_)   ; '
0228   0C                     DB   lsb(arg_list_)   ; (
0229   85                     DB   lsb(nop_)   ; )
022A   3C                     DB   lsb(mul_)   ; *
022B   00                     DB   lsb(add_)   ; +
022C   85                     DB   lsb(nop_)   ; ,
022D   53                     DB   lsb(sub_)   ; -
022E   24                     DB   lsb(dot_)   ; .
022F   82                     DB   lsb(div_)   ; /	
0230   44                     DB   lsb(num_)   ; 0
0231   44                     DB   lsb(num_)   ; 1
0232   44                     DB   lsb(num_)   ; 2
0233   44                     DB   lsb(num_)   ; 3
0234   44                     DB   lsb(num_)   ; 4
0235   44                     DB   lsb(num_)   ; 5
0236   44                     DB   lsb(num_)   ; 6
0237   44                     DB   lsb(num_)   ; 7
0238   44                     DB   lsb(num_)   ; 8
0239   44                     DB   lsb(num_)   ; 9
023A   2A                     DB   lsb(go_)   ; :
023B   85                     DB   lsb(nop_)   ; ;
023C   70                     DB   lsb(lt_)   ; <
023D   56                     DB   lsb(eq_)   ; =
023E   65                     DB   lsb(gt_)   ; >
023F   33                     DB   lsb(if_)   ; ?
0240   03                     DB   lsb(addr_)   ; @
0241   2D                     DB   lsb(identU_)   ; A
0242   2D                     DB   lsb(identU_)   ; B
0243   2D                     DB   lsb(identU_)   ; C
0244   2D                     DB   lsb(identU_)   ; D
0245   2D                     DB   lsb(identU_)   ; E
0246   2D                     DB   lsb(identU_)   ; F
0247   2D                     DB   lsb(identU_)   ; G
0248   2D                     DB   lsb(identU_)   ; h
0249   2D                     DB   lsb(identU_)   ; I
024A   2D                     DB   lsb(identU_)   ; J
024B   2D                     DB   lsb(identU_)   ; K
024C   2D                     DB   lsb(identU_)   ; L
024D   2D                     DB   lsb(identU_)   ; M
024E   2D                     DB   lsb(identU_)   ; N
024F   2D                     DB   lsb(identU_)   ; O
0250   2D                     DB   lsb(identU_)   ; p
0251   2D                     DB   lsb(identU_)   ; Q
0252   2D                     DB   lsb(identU_)   ; R
0253   2D                     DB   lsb(identU_)   ; S
0254   2D                     DB   lsb(identU_)   ; T
0255   2D                     DB   lsb(identU_)   ; U
0256   2D                     DB   lsb(identU_)   ; V
0257   2D                     DB   lsb(identU_)   ; W
0258   2D                     DB   lsb(identU_)   ; X
0259   2D                     DB   lsb(identU_)   ; Y
025A   2D                     DB   lsb(identU_)   ; Z
025B   0F                     DB   lsb(arrBegin_)   ; [
025C   21                     DB   lsb(command_)   ; \
025D   12                     DB   lsb(arrEnd_)   ; ]
025E   4D                     DB   lsb(xor_)   ; ^
025F   27                     DB   lsb(remain_)   ; _
0260   50                     DB   lsb(string_)   ; `     used for testing string   	
0261   30                     DB   lsb(identL_)   ; a
0262   30                     DB   lsb(identL_)   ; b
0263   30                     DB   lsb(identL_)   ; c
0264   30                     DB   lsb(identL_)   ; d
0265   30                     DB   lsb(identL_)   ; e
0266   30                     DB   lsb(identL_)   ; f
0267   30                     DB   lsb(identL_)   ; g
0268   30                     DB   lsb(identL_)   ; h
0269   30                     DB   lsb(identL_)   ; i
026A   30                     DB   lsb(identL_)   ; j
026B   30                     DB   lsb(identL_)   ; k
026C   30                     DB   lsb(identL_)   ; l
026D   30                     DB   lsb(identL_)   ; m
026E   30                     DB   lsb(identL_)   ; n
026F   30                     DB   lsb(identL_)   ; o
0270   30                     DB   lsb(identL_)   ; p
0271   30                     DB   lsb(identL_)   ; q
0272   30                     DB   lsb(identL_)   ; r
0273   30                     DB   lsb(identL_)   ; s
0274   30                     DB   lsb(identL_)   ; t
0275   30                     DB   lsb(identL_)   ; u
0276   30                     DB   lsb(identL_)   ; v
0277   30                     DB   lsb(identL_)   ; w
0278   30                     DB   lsb(identL_)   ; x
0279   30                     DB   lsb(identL_)   ; y
027A   30                     DB   lsb(identL_)   ; z
027B   18                     DB   lsb(block_)   ; {
027C   4A                     DB   lsb(or_)   ; |
027D   1B                     DB   lsb(blockEnd_)   ; }
027E   36                     DB   lsb(inv_)   ; ~
027F   85                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                ADD_:        ; add the top 2 members of the stack
0300   C3 87 03               JP   add   
0303                ADDR_:       
0303   C3 A0 03               JP   addr   
0306                AND_:        
0306   C3 AC 03               JP   and   
0309                ARG_:        
0309   C3 C9 03               JP   arg   
030C                ARG_LIST_:      
030C   C3 00 04               JP   arg_list   
030F                ARRBEGIN_:      
030F   C3 32 04               JP   arrBegin   
0312                ARREND_:      
0312   C3 4E 04               JP   arrEnd   
0315                ARRINDEX_:      
0315   C3 9C 04               JP   arrIndex   
0318                BLOCK_:      
0318   C3 C5 04               JP   block   
031B                BLOCKEND_:      
031B   C3 2E 05               JP   blockend   
031E                CHAR_:       
031E   C3 83 05               JP   char   
0321                COMMAND_:      
0321   C3 A2 07               JP   command   
0324                DOT_:        
0324   C3 AB 05               JP   dot   
0327                REMAIN_:      
0327   C3 31 07               JP   remain   
032A                GO_:         
032A   C3 0F 06               JP   go   
032D                IDENTU_:      
032D   C3 B3 06               JP   identU   
0330                IDENTL_:      
0330   C3 B8 06               JP   identL   
0333                IF_:         
0333   C3 CA 06               JP   if   
0336                INV_:        ; Bitwise INVert the top member of the stack
0336   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0339   C3 C1 03               JP   xor1   
033C                MUL_:        
033C   C3 E3 06               JP   mul   
033F                NOT_:        ; logical invert, any non zero value
033F   21 00 00               LD   hl,0   ; is considered true
0342   18 1D                  JR   eq1   
0344                NUM_:        
0344   C3 01 07               JP   num   
0347                HEXNUM_:      
0347   C3 96 06               JP   hexnum   
034A                OR_:         
034A   C3 B7 03               JP   or   
034D                XOR_:        
034D   C3 C0 03               JP   xor   
0350                STRING_:      
0350   C3 5A 07               JP   string   
0353                SUB_:        
0353   C3 82 07               JP   sub   
0356                EQ_:         
0356   03                     INC   bc   
0357   0A                     LD   a,(bc)   ; is it == ?
0358   FE 3D                  CP   "="   
035A   28 04                  JR   z,eq0   ; no its equality
035C   0B                     DEC   bc   
035D   C3 B4 04               JP   assign   ; no its assignment
0360                EQ0:         
0360   E1                     POP   hl   
0361                EQ1:         
0361   D1                     POP   de   
0362   C3 EE 05               JP   equals   
0365                GT_:         
0365   03                     INC   bc   
0366   0A                     LD   a,(bc)   
0367   FE 3E                  CP   ">"   
0369   CA 47 07               JP   z,shiftRight   
036C   D1                     POP   de   
036D   E1                     POP   hl   
036E   18 09                  JR   lt1   
0370                LT_:         
0370   03                     INC   bc   
0371   0A                     LD   a,(bc)   
0372   FE 3C                  CP   "<"   
0374   CA 37 07               JP   z,shiftLeft   
0377   E1                     POP   hl   
0378   D1                     POP   de   
0379                LT1:         
0379   FE 3D                  CP   "="   
037B   CA F6 05               JP   z,lessthaneq   
037E   0B                     DEC   bc   
037F   C3 FB 05               JP   lessthan   
0382                DIV_:        
0382   C3 98 05               JP   div   
0385                NOP_:        
0385   DD E9                  JP   (ix)   
0387                             ;*******************************************************************
0387                             ; word operators
0387                             ;*******************************************************************
0387                ADD:         
0387   03                     INC   bc   
0388   0A                     LD   a,(bc)   
0389   FE 2B                  CP   "+"   ; ++ increment variable
038B   20 07                  JR   nz,add1   
038D   11 01 00               LD   de,1   
0390   3E 3D                  LD   a,"="   
0392   18 01                  JR   add2   
0394                ADD1:        
0394   D1                     POP   de   ; second term
0395                ADD2:        
0395   E1                     POP   hl   ; first term
0396   19                     ADD   hl,de   
0397                ADD3:        
0397   FE 3D                  CP   "="   ; += add to variable
0399   CA B6 04               JP   z,assign0   
039C   E5                     PUSH   hl   
039D   0B                     DEC   bc   
039E   DD E9                  JP   (ix)   
03A0                             ; -- ptr
03A0                ADDR:        
03A0   2A F0 3A               LD   hl,(vPointer)   
03A3   E5                     PUSH   hl   
03A4   21 F0 3A               LD   hl,vPointer   
03A7   22 F0 3A               LD   (vPointer),hl   
03AA   DD E9                  JP   (ix)   
03AC                AND:         
03AC   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03AD   E1                     POP   hl   
03AE   7B                     LD   a,e   
03AF   A5                     AND   l   
03B0   6F                     LD   l,a   
03B1   7A                     LD   a,d   
03B2   A4                     AND   h   
03B3                AND1:        
03B3   67                     LD   h,a   
03B4   E5                     PUSH   hl   
03B5   DD E9                  JP   (ix)   
03B7                OR:          
03B7   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03B8   E1                     POP   hl   
03B9   7B                     LD   a,e   
03BA   B5                     OR   l   
03BB   6F                     LD   l,a   
03BC   7A                     LD   a,d   
03BD   B4                     OR   h   
03BE   18 F3                  JR   and1   
03C0                XOR:         
03C0   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03C1                XOR1:        
03C1   E1                     POP   hl   
03C2   7B                     LD   a,e   
03C3   AD                     XOR   l   
03C4   6F                     LD   l,a   
03C5   7A                     LD   a,d   
03C6   AC                     XOR   h   
03C7   18 EA                  JR   and1   
03C9                             ; $a .. $z
03C9                             ; -- value
03C9                             ; returns value of arg
03C9                ARG:         
03C9   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03CC   FD 56 05               LD   d,(iy+5)   
03CF   EB                     EX   de,hl   
03D0   7D                     LD   a,l   ; arg_list* == null, skip
03D1   B4                     OR   h   
03D2   28 1C                  JR   z,arg0a   
03D4   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D5   2B                     DEC   hl   
03D6   7E                     LD   a,(hl)   
03D7   23                     INC   hl   
03D8   23                     INC   hl   
03D9   B7                     OR   a   
03DA   28 14                  JR   z,arg0a   ; num_args == 0, skip
03DC   5F                     LD   e,a   ; e = a = num_args
03DD   03                     INC   bc   ; a = next char = arg_name
03DE   0A                     LD   a,(bc)   
03DF   C5                     PUSH   bc   ; save IP
03E0   43                     LD   b,e   ; b = e = num_args
03E1   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E4   FD 56 03               LD   d,(iy+3)   
03E7                ARG0:        
03E7   1B                     DEC   de   ; a = arg_name, de = next arg*
03E8   1B                     DEC   de   
03E9   BE                     CP   (hl)   
03EA   28 09                  JR   z,arg1   
03EC   23                     INC   hl   ; hl = next arg_list*
03ED   10 F8                  DJNZ   arg0   
03EF   C1                     POP   bc   ; no match, restore IP
03F0                ARG0A:       
03F0   11 00 00               LD   de,0   ; return 0
03F3   18 08                  JR   arg1a   
03F5                ARG1:        
03F5   C1                     POP   bc   ; restore IP
03F6   EB                     EX   de,hl   ; hl = arg*
03F7   22 F0 3A               LD   (vPointer),hl   ; store arg* in setter
03FA   5E                     LD   e,(hl)   
03FB   23                     INC   hl   
03FC   56                     LD   d,(hl)   ; de = arg
03FD                ARG1A:       
03FD   D5                     PUSH   de   ; push arg
03FE   DD E9                  JP   (ix)   
0400                             ; arg_list - parses input (ab:c)
0400                             ; names after the : represent uninitialised locals
0400                             ; return values are the state of the stack after the block ends
0400                ARG_LIST:      
0400   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0403   2A EC 3A               LD   hl,(vHeapPtr)   ; hl = heap*
0406   23                     INC   hl   ; skip length field to start
0407   23                     INC   hl   
0408   E5                     PUSH   hl   ; save start of arg_list
0409   03                     INC   bc   ; point to next char
040A                ARG_LIST1:      
040A   0A                     LD   a,(bc)   
040B   FE 29                  CP   ")"   ; ) is the arg_list terminator
040D   28 12                  JR   z,arg_list4   
040F   FE 3A                  CP   ":"   
0411   20 03                  JR   nz,arg_list2   
0413   14                     INC   d   ; non zero value local count acts as flag
0414   20 08                  JR   nz,arg_list3   
0416                ARG_LIST2:      
0416   77                     LD   (hl),a   
0417   23                     INC   hl   
0418   1C                     INC   e   ; increase arg count
0419   AF                     XOR   a   
041A   B2                     OR   d   
041B   28 01                  JR   z,arg_list3   
041D   14                     INC   d   ; if d > 0 increase local count
041E                ARG_LIST3:      
041E   03                     INC   bc   ; point to next char
041F   18 E9                  JR   arg_list1   
0421                ARG_LIST4:      
0421   AF                     XOR   a   
0422   B2                     OR   d   
0423   28 01                  JR   z,arg_list5   
0425   15                     DEC   d   ; remove initial inc
0426                ARG_LIST5:      
0426   23                     INC   hl   
0427   22 EC 3A               LD   (vHeapPtr),hl   ; bump heap* to after end of string
042A   E1                     POP   hl   ; hl = start of arg_list
042B   E5                     PUSH   hl   ; return start of string
042C   2B                     DEC   hl   ; write length bytes to length field at start - 2
042D   72                     LD   (hl),d   
042E   2B                     DEC   hl   
042F   73                     LD   (hl),e   
0430   DD E9                  JP   (ix)   
0432                ARRBEGIN:      
0432   11 00 00               LD   de,0   ; create stack frame
0435   D5                     PUSH   de   ; push null for IP
0436   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0439   FD 56 05               LD   d,(iy+5)   ; 
043C   D5                     PUSH   de   ; 
043D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0440   FD 56 03               LD   d,(iy+3)   ; 
0443   D5                     PUSH   de   ; 
0444   FD E5                  PUSH   iy   ; push BP
0446   FD 21 00 00            LD   iy,0   ; BP = SP
044A   FD 39                  ADD   iy,sp   
044C   DD E9                  JP   (ix)   
044E                ARREND:      
044E   FD 54                  LD   d,iyh   ; de = BP
0450   FD 5D                  LD   e,iyl   
0452   ED 43 F8 3A            LD   (vTemp1),bc   ; save IP
0456   62 6B                  LD   hl,de   ; hl = de = BP
0458   B7                     OR   a   
0459   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
045B   CB 3C                  SRL   h   ; 
045D   CB 1D                  RR   l   
045F   44 4D                  LD   bc,hl   ; bc = count
0461   2A EC 3A               LD   hl,(vHeapPtr)   ; hl = array[-2]
0464   71                     LD   (hl),c   ; write num items in length word
0465   23                     INC   hl   
0466   70                     LD   (hl),b   
0467   23                     INC   hl   ; hl = array[0], bc = count
0468                             ; de = BP, hl = array[0], bc = count
0468                ARREND1:      
0468   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
046B   77                     LD   (hl),a   ; write lsb of array item
046C   23                     INC   hl   ; move to msb of array item
046D   3A E6 3A               LD   a,(vDataWidth)   ; vDataWidth=1?
0470   3D                     DEC   a   
0471   28 05                  JR   z,arrEnd2   
0473   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0476   77                     LD   (hl),a   ; write msb of array item
0477   23                     INC   hl   ; move to next word in array
0478                ARREND2:      
0478   FD 2B                  DEC   iy   ; move to next word on stack
047A   FD 2B                  DEC   iy   
047C   0B                     DEC   bc   ; dec items count
047D   79                     LD   a,c   ; if not zero loop
047E   B0                     OR   b   
047F   20 E7                  JR   nz,arrEnd1   
0481   EB                     EX   de,hl   ; de = end of array, hl = BP
0482   F9                     LD   sp,hl   ; sp = BP
0483   E1                     POP   hl   ; de = end of array, hl = old BP
0484   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0485   FD 62                  LD   iyh,d   
0487   FD 6B                  LD   iyl,e   
0489   D1                     POP   de   ; pop arg_list (discard)
048A   D1                     POP   de   ; pop first_arg* (discard)
048B   D1                     POP   de   ; pop IP (discard)
048C   ED 5B EC 3A            LD   de,(vHeapPtr)   ; de = array[-2]
0490   22 EC 3A               LD   (vHeapPtr),hl   ; move heap* to end of array
0493   ED 4B F8 3A            LD   bc,(vTemp1)   ; restore IP
0497   13                     INC   de   ; de = array[0]
0498   13                     INC   de   
0499   D5                     PUSH   de   ; return array[0]
049A   DD E9                  JP   (ix)   
049C                             ; index of an array, based on vDataWidth
049C                             ; array num -- value    ; also sets vPointer to address
049C                ARRINDEX:      
049C   E1                     POP   hl   ; hl = index
049D   D1                     POP   de   ; de = array
049E   3A E6 3A               LD   a,(vDataWidth)   ; a = data width
04A1   3D                     DEC   a   
04A2   28 01                  JR   z,arrIndex1   
04A4                ARRINDEX0:      
04A4   29                     ADD   hl,hl   ; if data width = 2 then double
04A5                ARRINDEX1:      
04A5   19                     ADD   hl,de   ; add addr
04A6   22 F0 3A               LD   (vPointer),hl   ; store address in setter
04A9   16 00                  LD   d,0   
04AB   5E                     LD   e,(hl)   
04AC   B7                     OR   a   ; check data width again
04AD   28 02                  JR   z,arrIndex2   
04AF   23                     INC   hl   
04B0   56                     LD   d,(hl)   
04B1                ARRINDEX2:      
04B1   D5                     PUSH   de   
04B2   DD E9                  JP   (ix)   
04B4                             ; value _oldValue --            ; uses address in vPointer
04B4                ASSIGN:      
04B4   E1                     POP   hl   ; discard last accessed value
04B5   E1                     POP   hl   ; hl = new value
04B6                ASSIGN0:      
04B6   EB                     EX   de,hl   ; de = new value
04B7                ASSIGNX:      
04B7   2A F0 3A               LD   hl,(vPointer)   
04BA   73                     LD   (hl),e   
04BB   3A E6 3A               LD   a,(vDataWidth)   
04BE   3D                     DEC   a   ; is it byte?
04BF   28 02                  JR   z,assign1   
04C1   23                     INC   hl   
04C2   72                     LD   (hl),d   
04C3                ASSIGN1:      
04C3   DD E9                  JP   (ix)   
04C5                BLOCK:       
04C5   C5                     PUSH   bc   ; return pointer to first { of block
04C6   03                     INC   bc   
04C7   16 01                  LD   d,1   ; nesting: count first parenthesis
04C9                BLOCK1:      ; Skip to end of definition
04C9   0A                     LD   a,(bc)   ; Get the next character
04CA   03                     INC   bc   ; Point to next character
04CB   FE 21                  CP   " " + 1   ; ignore whitespace
04CD   38 FA                  JR   c,block1   
04CF   FE 29                  CP   ")"   
04D1   28 2D                  JR   z,block4   
04D3   FE 7D                  CP   "}"   
04D5   28 29                  JR   z,block4   
04D7   FE 5D                  CP   "]"   
04D9   28 25                  JR   z,block4   
04DB   FE 28                  CP   "("   
04DD   28 16                  JR   z,block2   
04DF   FE 7B                  CP   "{"   
04E1   28 12                  JR   z,block2   
04E3   FE 5B                  CP   "["   
04E5   28 0E                  JR   z,block2   
04E7   FE 27                  CP   "'"   
04E9   28 0D                  JR   z,block3   
04EB   FE 60                  CP   "`"   
04ED   28 09                  JR   z,block3   
04EF   FE 22                  CP   $22   
04F1   28 05                  JR   z,block3   
04F3   18 D4                  JR   block1   
04F5                BLOCK2:      
04F5   14                     INC   d   
04F6   18 D1                  JR   block1   
04F8                BLOCK3:      
04F8   3E 80                  LD   a,$80   
04FA   AA                     XOR   d   
04FB   47                     LD   b,a   
04FC   20 CB                  JR   nz,block1   
04FE   18 03                  JR   block5   
0500                BLOCK4:      
0500   15                     DEC   d   
0501   20 C6                  JR   nz,block1   ; get the next element
0503                BLOCK5:      
0503   60 69                  LD   hl,bc   ; hl = IP
0505   11 00 3D               LD   de,HEAP   ; is IP pointing to object in heap
0508   B7                     OR   a   ; IP - HEAP
0509   ED 52                  SBC   hl,de   
050B   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
050D   28 1C                  JR   z,block6   
050F   60 69                  LD   hl,bc   ; hl = IP
0511   D1                     POP   de   ; de = block*
0512   ED 43 F8 3A            LD   (vTemp1),bc   ; save IP
0516   B7                     OR   a   ; bc = size
0517   ED 52                  SBC   hl,de   
0519   44 4D                  LD   bc,hl   
051B   EB                     EX   de,hl   ; hl = block* de = heap*
051C   ED 5B EC 3A            LD   de,(vHeapPtr)   
0520   D5                     PUSH   de   ; return hblock*
0521   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0523   ED 53 EC 3A            LD   (vHeapPtr),de   ; heap* += size
0527   ED 4B F8 3A            LD   bc,(vTemp1)   ; restore IP
052B                BLOCK6:      
052B   0B                     DEC   bc   ; balanced, exit
052C   DD E9                  JP   (ix)   
052E                BLOCKEND:      
052E   D9                     EXX      ; de" = oldBP bc" = oldIP
052F   FD 5E 00               LD   e,(iy+0)   
0532   FD 56 01               LD   d,(iy+1)   
0535   FD 4E 06               LD   c,(iy+6)   
0538   FD 46 07               LD   b,(iy+7)   
053B   D9                     EXX      
053C   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
053F   FD 56 03               LD   d,(iy+3)   
0542   EB                     EX   de,hl   
0543   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0546   FD 56 01               LD   d,(iy+1)   
0549   13                     INC   de   ; for carry flag <=
054A   B7                     OR   a   
054B   ED 52                  SBC   hl,de   
054D   38 0B                  JR   c,blockend1   ; oldBP >= first_arg, same scope skip
054F   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0551   FD 5D                  LD   e,iyl   
0553   21 08 00               LD   hl,8   
0556   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0557   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0558   18 0C                  JR   blockend2   
055A                BLOCKEND1:      ; same scope
055A   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
055D   FD 56 03               LD   d,(iy+3)   
0560   EB                     EX   de,hl   
0561   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0563   FD 5D                  LD   e,iyl   
0565   EB                     EX   de,hl   
0566                BLOCKEND2:      
0566   44 4D                  LD   bc,hl   ; bc = hl = BP
0568   B7                     OR   a   ; hl = BP - SP = count
0569   ED 72                  SBC   hl,sp   
056B   7D                     LD   a,l   
056C   B4                     OR   h   
056D   28 09                  JR   z,blockend3   
056F   C5                     PUSH   bc   ; bc = count, hl = BP
0570   44 4D                  LD   bc,hl   
0572   E1                     POP   hl   
0573   2B                     DEC   hl   ; hl = BP-1
0574   1B                     DEC   de   ; de = args*-1
0575   ED B8                  LDDR      
0577   13                     INC   de   
0578                BLOCKEND3:      
0578   EB                     EX   de,hl   ; hl = new tos
0579   F9                     LD   sp,hl   ; sp = new tos
057A   D9                     EXX      ; bc = IP, iy = oldBP
057B   D5                     PUSH   de   
057C   C5                     PUSH   bc   
057D   D9                     EXX      
057E   C1                     POP   bc   
057F   FD E1                  POP   iy   
0581   DD E9                  JP   (ix)   
0583                CHAR:        
0583   21 00 00               LD   hl,0   ; if "" is empty or null
0586                CHAR1:       
0586   03                     INC   bc   ; point to next char
0587   0A                     LD   a,(bc)   
0588   FE 27                  CP   "'"   ; ' is the terminator
058A   28 09                  JR   z,char3   
058C   FE 5C                  CP   $5c   ; \ is the escape
058E   20 02                  JR   nz,char2   
0590   03                     INC   bc   
0591   0A                     LD   a,(bc)   
0592                CHAR2:       
0592   6F                     LD   l,a   
0593   18 F1                  JR   char1   
0595                CHAR3:       
0595   E5                     PUSH   hl   
0596   DD E9                  JP   (ix)   
0598                DIV:         
0598   D1                     POP   de   
0599   E1                     POP   hl   
059A   C5                     PUSH   bc   ; preserve the IP
059B   44 4D                  LD   bc,hl   
059D   CD D5 05               CALL   divide   
05A0   EB                     EX   de,hl   
05A1   ED 53 F6 3A            LD   (vRemain),de   
05A5   C1                     POP   bc   
05A6   03                     INC   bc   
05A7   0A                     LD   a,(bc)   
05A8   C3 97 03               JP   add3   
05AB                DOT:         
05AB   E1                     POP   hl   
05AC   03                     INC   bc   
05AD   0A                     LD   a,(bc)   
05AE   FE 68                  CP   "h"   
05B0   20 05                  JR   nz,dot1   
05B2   CD EE 08               CALL   prthex   
05B5   18 17                  JR   dot4   
05B7                DOT1:        
05B7   FE 73                  CP   "s"   
05B9   20 05                  JR   nz,dot2   
05BB   CD 11 09               CALL   prtstr   
05BE   18 0E                  JR   dot4   
05C0                DOT2:        
05C0   FE 63                  CP   "c"   
05C2   20 06                  JR   nz,dot3   
05C4   7D                     LD   a,l   
05C5   CD 85 00               CALL   putchar   
05C8   18 04                  JR   dot4   
05CA                DOT3:        
05CA   0B                     DEC   bc   
05CB   CD A6 08               CALL   prtdec   
05CE                DOT4:        
05CE   3E 20                  LD   a," "   
05D0   CD 85 00               CALL   putchar   
05D3   DD E9                  JP   (ix)   
05D5                             ; division subroutine.
05D5                             ; bc: divisor, de: dividend, hl: remainder
05D5                DIVIDE:      
05D5   21 00 00               LD   hl,0   ; zero the remainder
05D8   3E 10                  LD   a,16   ; loop counter
05DA                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
05DA   CB 21                  SLA   c   
05DC   CB 10                  RL   b   
05DE   ED 6A                  ADC   hl,hl   
05E0   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
05E2   38 03                  JR   c,divide2   
05E4   0C                     INC   c   
05E5   18 01                  JR   divide3   
05E7                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
05E7   19                     ADD   hl,de   
05E8                DIVIDE3:      
05E8   3D                     DEC   a   
05E9   20 EF                  JR   nz,divide1   
05EB   50 59                  LD   de,bc   ; result from bc to de
05ED   C9                     RET      
05EE                             ; hl = value1, de = value2
05EE                             ; hl = result
05EE                EQUALS:      
05EE   B7                     OR   a   ; reset the carry flag
05EF   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
05F1   28 10                  JR   z,true1   
05F3   C3 09 06               JP   false1   
05F6                             ; hl = value1 de = value2
05F6                             ; hl = result
05F6                LESSTHANEQ:      
05F6   B7                     OR   a   
05F7   ED 52                  SBC   hl,de   
05F9   18 05                  JR   lessthan1   
05FB                             ; hl = value1 de = value2
05FB                             ; hl = result
05FB                LESSTHAN:      
05FB   B7                     OR   a   
05FC   ED 52                  SBC   hl,de   
05FE   28 09                  JR   z,false1   
0600                LESSTHAN1:      
0600   FA 09 06               JP   m,false1   
0603                TRUE1:       
0603   21 FF FF               LD   hl,TRUE   
0606   E5                     PUSH   hl   
0607   DD E9                  JP   (ix)   
0609                NULL1:       
0609                FALSE1:      
0609   21 00 00               LD   hl,FALSE   
060C   E5                     PUSH   hl   
060D   DD E9                  JP   (ix)   
060F                             ; execute a block of code which ends with }
060F                             ; creates a root scope if BP == stack
060F                             ; else uses outer scope
060F                GO:          
060F   D1                     POP   de   ; de = block*
0610                GO1:         
0610   7B                     LD   a,e   ; if block* == null, exit
0611   B2                     OR   d   
0612   20 02                  JR   nz,go2   
0614   DD E9                  JP   (ix)   
0616                GO2:         
0616   1A                     LD   a,(de)   
0617   FE 7B                  CP   "{"   
0619   CA 62 06               JP   z,goBlock   
061C                GOFUNC:      ; execute code at pointer
061C   EB                     EX   de,hl   ; hl = func*
061D   5E                     LD   e,(hl)   ; de = hblock*
061E   23                     INC   hl   
061F   56                     LD   d,(hl)   
0620   23                     INC   hl   
0621   7B                     LD   a,e   
0622   B2                     OR   d   
0623   28 12                  JR   z,goFunc0   
0625   22 F8 3A               LD   (vTemp1),hl   
0628   ED 43 FA 3A            LD   (vTemp2),bc   
062C   EB                     EX   de,hl   
062D   CD 5F 09               CALL   pushArray   
0630   2A F8 3A               LD   hl,(vTemp1)   
0633   ED 4B FA 3A            LD   bc,(vTemp2)   
0637                GOFUNC0:      
0637   5E                     LD   e,(hl)   ; de = hblock*
0638   23                     INC   hl   
0639   56                     LD   d,(hl)   
063A   23                     INC   hl   
063B   D5                     PUSH   de   ; save hblock*
063C   5E                     LD   e,(hl)   ; de = arg_list*
063D   23                     INC   hl   
063E   56                     LD   d,(hl)   
063F   23                     INC   hl   
0640   EB                     EX   de,hl   ; hl = arg_list*
0641   D1                     POP   de   ; restore hblock*
0642   7D                     LD   a,l   ; if arg_list* != null skip
0643   B4                     OR   h   
0644   20 03                  JR   nz,goFunc1   
0646   C5                     PUSH   bc   ; push IP
0647   18 3A                  JR   goBlock2   
0649                GOFUNC1:      
0649   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
064A   7E                     LD   a,(hl)   
064B   23                     INC   hl   
064C   B7                     OR   a   
064D   28 05                  JR   z,goFunc3   
064F                GOFUNC2:      
064F   3B                     DEC   sp   
0650   3B                     DEC   sp   
0651   3D                     DEC   a   
0652   20 FB                  JR   nz,goFunc2   
0654                GOFUNC3:      
0654   C5                     PUSH   bc   ; push IP
0655   E5                     PUSH   hl   ; push arg_list*
0656   2B                     DEC   hl   ; hl = num_args*
0657   2B                     DEC   hl   
0658   7E                     LD   a,(hl)   ; hl = num_args * 2
0659   87                     ADD   a,a   
065A   C6 04                  ADD   a,4   ; offset for IP and arg_list
065C   6F                     LD   l,a   
065D   26 00                  LD   h,$0   
065F   39                     ADD   hl,sp   ; hl = first_arg*
0660   18 27                  JR   goBlock4   
0662                GOBLOCK:      
0662   13                     INC   de   
0663   C5                     PUSH   bc   ; push IP
0664   21 80 39               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0667   FD 44                  LD   b,iyh   
0669   FD 4D                  LD   c,iyl   
066B   B7                     OR   a   ; hl = stack - BP = root_scope
066C   ED 42                  SBC   hl,bc   
066E   7D                     LD   a,l   ; if root_scope, skip
066F   B4                     OR   h   
0670   28 11                  JR   z,goBlock2   
0672   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0675   FD 46 05               LD   b,(iy+5)   
0678   C5                     PUSH   bc   
0679   FD 4E 02               LD   c,(iy+2)   ; hl = first_arg* (parent)
067C   FD 46 03               LD   b,(iy+3)   
067F   60 69                  LD   hl,bc   
0681   18 05                  JR   goBlock3   
0683                GOBLOCK2:      
0683   E5                     PUSH   hl   ; push arg_list (null)
0684   21 04 00               LD   hl,4   ; hl = first_arg* (BP+8)
0687   39                     ADD   hl,sp   
0688                GOBLOCK3:      
0688   1B                     DEC   de   
0689                GOBLOCK4:      
0689   E5                     PUSH   hl   ; push first_arg
068A   FD E5                  PUSH   iy   ; push BP
068C   FD 21 00 00            LD   iy,0   ; BP = SP
0690   FD 39                  ADD   iy,sp   
0692   42 4B                  LD   bc,de   ; bc = de = block*-1
0694   DD E9                  JP   (ix)   
0696                HEXNUM:      
0696   21 00 00               LD   hl,0   ; Clear hl to accept the number
0699                HEXNUM1:      
0699   03                     INC   bc   
069A   0A                     LD   a,(bc)   ; Get the character which is a numeral
069B   CB 77                  BIT   6,a   ; is it uppercase alpha?
069D   28 02                  JR   z,hexnum2   ; no a decimal
069F   D6 07                  SUB   7   ; sub 7  to make $a - $F
06A1                HEXNUM2:      
06A1   D6 30                  SUB   $30   ; form decimal digit
06A3   DA 23 07               JP   c,num2   
06A6   FE 10                  CP   $0F+1   
06A8   D2 23 07               JP   nc,num2   
06AB   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06AC   29                     ADD   hl,hl   ; 4X
06AD   29                     ADD   hl,hl   ; 8X
06AE   29                     ADD   hl,hl   ; 16X
06AF   85                     ADD   a,l   ; add into bottom of hl
06B0   6F                     LD   l,a   
06B1   18 E6                  JR   hexnum1   
06B3                IDENTU:      
06B3   0A                     LD   a,(bc)   ; a = identifier char
06B4   D6 41                  SUB   "A"   ; "A" = 0
06B6   18 05                  JR   ident1   
06B8                IDENTL:      
06B8   0A                     LD   a,(bc)   
06B9   D6 61                  SUB   "a"   
06BB   C6 1A                  ADD   a,26   
06BD                IDENT1:      
06BD   87                     ADD   a,a   ; l = a * 2
06BE   6F                     LD   l,a   
06BF   26 3A                  LD   h,msb(vars)   
06C1   22 F0 3A               LD   (vPointer),hl   ; store address in setter
06C4   5E                     LD   e,(hl)   
06C5   23                     INC   hl   
06C6   56                     LD   d,(hl)   
06C7   D5                     PUSH   de   
06C8   DD E9                  JP   (ix)   
06CA                             ; if
06CA                             ; condition then -- value
06CA                IF:          
06CA   03                     INC   bc   
06CB   0A                     LD   a,(bc)   
06CC   FE 3F                  CP   "?"   
06CE   28 06                  JR   z,ifte   
06D0   0B                     DEC   bc   
06D1   11 00 00               LD   de,0   ; NUL pointer for else
06D4   18 01                  JR   ifte1   
06D6                             ; ifte
06D6                             ; condition then else -- value
06D6                IFTE:        
06D6   D1                     POP   de   ; de = else
06D7                IFTE1:       
06D7   E1                     POP   hl   ; hl = then
06D8   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
06D9   7C                     LD   a,h   
06DA   B5                     OR   l   
06DB   E1                     POP   hl   ; hl = then
06DC   CA 10 06               JP   z,go1   ; if z de = else
06DF   EB                     EX   de,hl   ; condition = false, de = then
06E0   C3 10 06               JP   go1   
06E3                MUL:         
06E3   D1                     POP   de   ; get first value
06E4   E1                     POP   hl   
06E5                MUL2:        
06E5   C5                     PUSH   bc   ; Preserve the IP
06E6   44 4D                  LD   bc,hl   ; bc = 2nd value
06E8   21 00 00               LD   hl,0   
06EB   3E 10                  LD   a,16   
06ED                MUL3:        
06ED   29                     ADD   hl,hl   
06EE   CB 13                  RL   e   
06F0   CB 12                  RL   d   
06F2   30 04                  JR   nc,$+6   
06F4   09                     ADD   hl,bc   
06F5   30 01                  JR   nc,$+3   
06F7   13                     INC   de   
06F8   3D                     DEC   a   
06F9   20 F2                  JR   nz,mul3   
06FB   C1                     POP   bc   ; Restore the IP
06FC   03                     INC   bc   
06FD   0A                     LD   a,(bc)   
06FE   C3 97 03               JP   add3   
0701                NUM:         
0701   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0704   0A                     LD   a,(bc)   ; Get numeral or -
0705   FE 2D                  CP   "-"   
0707   20 01                  JR   nz,num0   
0709   03                     INC   bc   ; move to next char, no flags affected
070A                NUM0:        
070A   08                     EX   af,af'   ; save zero flag = 0 for later
070B                NUM1:        
070B   0A                     LD   a,(bc)   ; read digit
070C   D6 30                  SUB   "0"   ; less than 0?
070E   38 13                  JR   c,num2   ; not a digit, exit loop
0710   FE 0A                  CP   10   ; greater that 9?
0712   30 0F                  JR   nc,num2   ; not a digit, exit loop
0714   03                     INC   bc   ; inc IP
0715   54 5D                  LD   de,hl   ; multiply hl * 10
0717   29                     ADD   hl,hl   
0718   29                     ADD   hl,hl   
0719   19                     ADD   hl,de   
071A   29                     ADD   hl,hl   
071B   85                     ADD   a,l   ; add digit in a to hl
071C   6F                     LD   l,a   
071D   3E 00                  LD   a,0   
071F   8C                     ADC   a,h   
0720   67                     LD   h,a   
0721   18 E8                  JR   num1   
0723                NUM2:        
0723   0B                     DEC   bc   
0724   08                     EX   af,af'   ; restore zero flag
0725   20 07                  JR   nz,num3   
0727   EB                     EX   de,hl   ; negate the value of hl
0728   21 00 00               LD   hl,0   
072B   B7                     OR   a   ; jump to sub2
072C   ED 52                  SBC   hl,de   
072E                NUM3:        
072E   E5                     PUSH   hl   ; Put the number on the stack
072F   DD E9                  JP   (ix)   ; and process the next character
0731                REMAIN:      
0731   2A F6 3A               LD   hl,(vRemain)   
0734   E5                     PUSH   hl   
0735   DD E9                  JP   (ix)   
0737                             ; shiftLeft
0737                             ; value count -- value2          shift left count places
0737                SHIFTLEFT:      
0737   50 59                  LD   de,bc   ; save IP
0739   C1                     POP   bc   ; bc = count
073A   41                     LD   b,c   ; b = loop counter
073B   E1                     POP   hl   
073C   04                     INC   b   ; test for counter=0 case
073D   18 01                  JR   shiftLeft2   
073F                SHIFTLEFT1:      
073F   29                     ADD   hl,hl   ; left shift hl
0740                SHIFTLEFT2:      
0740   10 FD                  DJNZ   shiftLeft1   
0742   E5                     PUSH   hl   
0743   42 4B                  LD   bc,de   ; restore IP
0745   DD E9                  JP   (ix)   
0747                             ; shiftRight
0747                             ; value count -- value2          shift left count places
0747                SHIFTRIGHT:      
0747   50 59                  LD   de,bc   ; save IP
0749   C1                     POP   bc   ; bc = count
074A   41                     LD   b,c   ; b = loop counter
074B   E1                     POP   hl   
074C   04                     INC   b   ; test for counter=0 case
074D   18 04                  JR   shiftRight2   
074F                SHIFTRIGHT1:      
074F   CB 3C                  SRL   h   ; right shift hl
0751   CB 1D                  RR   l   
0753                SHIFTRIGHT2:      
0753   10 FA                  DJNZ   shiftRight1   
0755   E5                     PUSH   hl   
0756   42 4B                  LD   bc,de   ; restore IP
0758   DD E9                  JP   (ix)   
075A                             ; string
075A                             ; -- ptr                        ; points to start of string chars,
075A                             ; length is stored at start - 2 bytes
075A                STRING:      
075A   2A EC 3A               LD   hl,(vHeapPtr)   ; hl = heap*
075D   23                     INC   hl   ; skip length field to start
075E   23                     INC   hl   
075F   E5                     PUSH   hl   ; save start of string
0760   03                     INC   bc   ; point to next char
0761   18 03                  JR   string2   
0763                STRING1:      
0763   77                     LD   (hl),a   
0764   23                     INC   hl   ; increase count
0765   03                     INC   bc   ; point to next char
0766                STRING2:      
0766   0A                     LD   a,(bc)   
0767   FE 22                  CP   DQUOTE   ; " is the string terminator
0769   20 F8                  JR   nz,string1   
076B   FE 60                  CP   "`"   ; ` is the string terminator used in testing
076D   20 F4                  JR   nz,string1   
076F   AF                     XOR   a   ; write NUL to terminate string
0770   77                     LD   (hl),a   ; hl = end of string
0771   23                     INC   hl   
0772   22 EC 3A               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0775   2B                     DEC   hl   ; hl = end of string without terminator
0776   D1                     POP   de   ; de = start of string
0777   D5                     PUSH   de   ; return start of string
0778   B7                     OR   a   ; hl = length bytes, de = start of string
0779   ED 52                  SBC   hl,de   
077B   EB                     EX   de,hl   
077C   2B                     DEC   hl   ; write length bytes to length field at start - 2
077D   72                     LD   (hl),d   
077E   2B                     DEC   hl   
077F   73                     LD   (hl),e   
0780   DD E9                  JP   (ix)   
0782                SUB:         ; negative sign or subtract
0782   03                     INC   bc   ; check if sign of a number
0783   0A                     LD   a,(bc)   
0784   0B                     DEC   bc   
0785   FE 30                  CP   "0"   
0787   38 05                  JR   c,sub0   
0789   FE 3A                  CP   "9"+1   
078B   DA 44 03               JP   c,num_   
078E                SUB0:        ; Subtract the value 2nd on stack from top of stack
078E   03                     INC   bc   
078F   FE 2D                  CP   "-"   
0791   20 07                  JR   nz,sub1   
0793   11 01 00               LD   de,1   
0796   3E 3D                  LD   a,"="   
0798   18 01                  JR   sub3   
079A                SUB1:        
079A   D1                     POP   de   
079B                SUB3:        
079B   E1                     POP   hl   
079C   B7                     OR   a   
079D   ED 52                  SBC   hl,de   
079F   C3 97 03               JP   add3   
07A2                             ;*******************************************************************
07A2                             ; commands
07A2                             ;*******************************************************************
07A2                COMMAND:      
07A2   03                     INC   bc   
07A3   0A                     LD   a,(bc)   
07A4   FE 5C                  CP   $5C   ; \\ comment
07A6   CA 1C 08               JP   z,comment   
07A9   FE 61                  CP   "a"   ; \a absolute
07AB   CA F0 07               JP   z,abs1   
07AE   FE 62                  CP   "b"   ; \b bytes
07B0   CA 25 08               JP   z,bytes   
07B3   FE 63                  CP   "c"   ; \c closure
07B5   CA 25 08               JP   z,bytes   
07B8   FE 66                  CP   "f"   ; \f func
07BA   CA 2D 08               JP   z,func   
07BD   FE 46                  CP   "F"   ; \F false
07BF   CA 09 06               JP   z,false1   
07C2   FE 69                  CP   "i"   ; \i input
07C4   CA 49 08               JP   z,input   
07C7   FE 6B                  CP   "k"   ; \k key
07C9   CA 54 08               JP   z,key   
07CC   FE 6F                  CP   "o"   ; \o output
07CE   CA 5D 08               JP   z,output   
07D1   FE 72                  CP   "r"   ; \r repeat
07D3   CA 66 08               JP   z,repeat   
07D6   FE 73                  CP   "s"   ; \s select
07D8   CA 6E 08               JP   z,select   
07DB   FE 54                  CP   "T"   ; \T true
07DD   CA 03 06               JP   z,true1   
07E0   FE 77                  CP   "w"   ; \w words
07E2   CA 78 08               JP   z,words   
07E5   FE 78                  CP   "x"   ; \x exit loop or block
07E7   CA 7E 08               JP   z,blockExit   
07EA   21 01 00               LD   hl,1   ; error 1: unknown command
07ED   C3 16 0A               JP   error   
07F0                ABS1:        
07F0   E1                     POP   hl   
07F1   CB 7C                  BIT   7,h   
07F3   C8                     RET   z   
07F4   AF                     XOR   a   
07F5   95                     SUB   l   
07F6   6F                     LD   l,a   
07F7   9F                     SBC   a,a   
07F8   94                     SUB   h   
07F9   67                     LD   h,a   
07FA   E5                     PUSH   hl   
07FB   DD E9                  JP   (ix)   
07FD                             ; array* arg_list* block* -- ptr
07FD                CLOSURE:      
07FD   2A EC 3A               LD   hl,(vHeapPtr)   ; hl = heap*
0800   23                     INC   hl   
0801   23                     INC   hl   
0802   D1                     POP   de   ; de = block*
0803   73                     LD   (hl),e   ; compile block*
0804   23                     INC   hl   
0805   72                     LD   (hl),d   
0806   23                     INC   hl   
0807   D1                     POP   de   ; de = arg_list*
0808   73                     LD   (hl),e   ; compile arg_list*
0809   23                     INC   hl   
080A   72                     LD   (hl),d   
080B   23                     INC   hl   
080C   ED 5B EC 3A            LD   de,(vHeapPtr)   ; de = closure*
0810   22 EC 3A               LD   (vHeapPtr),hl   ; heap* += 6
0813   EB                     EX   de,hl   ; hl = closure*
0814   D1                     POP   de   ; de = array*
0815   E5                     PUSH   hl   ; return closure*
0816   73                     LD   (hl),e   ; compile array*
0817   23                     INC   hl   
0818   72                     LD   (hl),d   
0819   23                     INC   hl   
081A   DD E9                  JP   (ix)   
081C                COMMENT:      
081C   03                     INC   bc   ; point to next char
081D   0A                     LD   a,(bc)   
081E   FE 20                  CP   " "   ; terminate on any char less than SP
0820   30 FA                  JR   nc,comment   
0822   0B                     DEC   bc   
0823   DD E9                  JP   (ix)   
0825                BYTES:       
0825   21 01 00               LD   hl,1   
0828                BYTES1:      
0828   22 E6 3A               LD   (vDataWidth),hl   
082B   DD E9                  JP   (ix)   
082D                             ; arg_list* block* -- ptr
082D                FUNC:        
082D   D1                     POP   de   ; de = block* hl = heap*
082E   2A EC 3A               LD   hl,(vHeapPtr)   
0831   AF                     XOR   a   
0832   77                     LD   (hl),a   ; compile null closure*
0833   23                     INC   hl   
0834   77                     LD   (hl),a   
0835   23                     INC   hl   
0836   73                     LD   (hl),e   ; compile block*
0837   23                     INC   hl   
0838   72                     LD   (hl),d   
0839   23                     INC   hl   
083A   D1                     POP   de   ; de = block*
083B   73                     LD   (hl),e   ; compile arg_list*
083C   23                     INC   hl   
083D   72                     LD   (hl),d   
083E   23                     INC   hl   
083F   ED 5B EC 3A            LD   de,(vHeapPtr)   ; return func*
0843   D5                     PUSH   de   
0844   22 EC 3A               LD   (vHeapPtr),hl   ; heap* += 4
0847   DD E9                  JP   (ix)   
0849                             ; Z80 port input
0849                             ; port -- value
0849                INPUT:       
0849   E1                     POP   hl   
084A   59                     LD   e,c   ; save IP
084B   4D                     LD   c,l   
084C   ED 68                  IN   l,(c)   
084E   26 00                  LD   h,0   
0850   4B                     LD   c,e   ; restore IP
0851   E5                     PUSH   hl   
0852   DD E9                  JP   (ix)   
0854                KEY:         
0854   CD 81 00               CALL   getchar   
0857   26 00                  LD   h,0   
0859   6F                     LD   l,a   
085A   E5                     PUSH   hl   
085B   DD E9                  JP   (ix)   
085D                             ; Z80 port output
085D                             ; value port --
085D                OUTPUT:      
085D   E1                     POP   hl   
085E   59                     LD   e,c   ; save IP
085F   4D                     LD   c,l   
0860   E1                     POP   hl   
0861   ED 69                  OUT   (c),l   
0863   4B                     LD   c,e   ; restore IP
0864   DD E9                  JP   (ix)   
0866                             ; repeat
0866                             ; block* --
0866                REPEAT:      
0866   0B                     DEC   bc   ; rewind IP to before \r
0867   0B                     DEC   bc   
0868   E1                     POP   hl   
0869   E5                     PUSH   hl   
086A   E5                     PUSH   hl   
086B   C3 0F 06               JP   go   
086E                             ; select
086E                             ; index array -- value
086E                SELECT:      
086E   D1                     POP   de   ; de = array
086F   E1                     POP   hl   ; hl = index
0870   29                     ADD   hl,hl   ; if data width = 2 then double
0871   19                     ADD   hl,de   ; add addr
0872   5E                     LD   e,(hl)   
0873   23                     INC   hl   
0874   56                     LD   d,(hl)   
0875   C3 10 06               JP   go1   
0878                WORDS:       
0878   21 02 00               LD   hl,2   
087B   C3 28 08               JP   bytes1   
087E                BLOCKEXIT:      
087E   E1                     POP   hl   
087F   7D                     LD   a,l   
0880   B4                     OR   h   
0881   28 02                  JR   z,blockExit1   
0883   DD E9                  JP   (ix)   
0885                BLOCKEXIT1:      
0885   FD 6E 06               LD   l,(iy+6)   ; hl = oldIP
0888   FD 66 07               LD   h,(iy+7)   
088B   23                     INC   hl   ; forward IP on stack to after \r
088C   23                     INC   hl   
088D   FD 75 06               LD   (iy+6),l   
0890   FD 74 07               LD   (iy+7),h   
0893   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0896   FD 56 03               LD   d,(iy+3)   
0899   13                     INC   de   
089A   13                     INC   de   
089B   FD 73 02               LD   (iy+2),e   ; hl = first_arg*, is it in this scope?
089E   FD 72 03               LD   (iy+3),d   
08A1   C3 2E 05               JP   blockEnd   
08A4                             ; 
08A4                             ; 
08A4                             ; 
08A4                             ; 
08A4                FILTER:      
08A4                MAP:         
08A4                SCAN:        
08A4   DD E9                  JP   (ix)   
08A6                             ; print decimal
08A6                             ; hl = value
08A6                PRTDEC:      
08A6   CB 7C                  BIT   7,h   
08A8   28 0B                  JR   z,prtdec0   
08AA   3E 2D                  LD   a,"-"   
08AC   CD 85 00               CALL   putchar   
08AF   AF                     XOR   a   
08B0   95                     SUB   l   
08B1   6F                     LD   l,a   
08B2   9F                     SBC   a,a   
08B3   94                     SUB   h   
08B4   67                     LD   h,a   
08B5                PRTDEC0:      
08B5   C5                     PUSH   bc   
08B6   0E 00                  LD   c,0   ; leading zeros flag = false
08B8   11 F0 D8               LD   de,-10000   
08BB   CD D7 08               CALL   prtdec1   
08BE   11 18 FC               LD   de,-1000   
08C1   CD D7 08               CALL   prtdec1   
08C4   11 9C FF               LD   de,-100   
08C7   CD D7 08               CALL   prtdec1   
08CA   1E F6                  LD   e,-10   
08CC   CD D7 08               CALL   prtdec1   
08CF   0C                     INC   c   ; flag = true for at least digit
08D0   1E FF                  LD   e,-1   
08D2   CD D7 08               CALL   prtdec1   
08D5   C1                     POP   bc   
08D6   C9                     RET      
08D7                PRTDEC1:      
08D7   06 2F                  LD   b,"0"-1   
08D9                PRTDEC2:      
08D9   04                     INC   b   
08DA   19                     ADD   hl,de   
08DB   38 FC                  JR   c,prtdec2   
08DD   ED 52                  SBC   hl,de   
08DF   3E 30                  LD   a,"0"   
08E1   B8                     CP   b   
08E2   20 05                  JR   nz,prtdec3   
08E4   AF                     XOR   a   
08E5   B1                     OR   c   
08E6   C8                     RET   z   
08E7   18 01                  JR   prtdec4   
08E9                PRTDEC3:      
08E9   0C                     INC   c   
08EA                PRTDEC4:      
08EA   78                     LD   a,b   
08EB   C3 85 00               JP   putchar   
08EE                PRTHEX:      ; display hl as a 16-bit number in hex.
08EE   C5                     PUSH   bc   ; preserve the IP
08EF   7C                     LD   a,h   
08F0   CD F9 08               CALL   prthex2   
08F3   7D                     LD   a,l   
08F4   CD F9 08               CALL   prthex2   
08F7   C1                     POP   bc   
08F8   C9                     RET      
08F9                PRTHEX2:      
08F9   4F                     LD   c,a   
08FA   1F                     RRA      
08FB   1F                     RRA      
08FC   1F                     RRA      
08FD   1F                     RRA      
08FE   CD 02 09               CALL   prthex3   
0901   79                     LD   a,c   
0902                PRTHEX3:      
0902   E6 0F                  AND   0x0F   
0904   C6 90                  ADD   a,0x90   
0906   27                     DAA      
0907   CE 40                  ADC   a,0x40   
0909   27                     DAA      
090A   C3 85 00               JP   putchar   
090D                PRTSTR0:      
090D   CD 85 00               CALL   putchar   
0910   23                     INC   hl   
0911                PRTSTR:      
0911   7E                     LD   a,(hl)   
0912   B7                     OR   a   
0913   20 F8                  JR   nz,prtstr0   
0915   C9                     RET      
0916                             ; **************************************************************************
0916                             ; calculate nesting value
0916                             ; a is char to be tested,
0916                             ; e is the nesting value (initially 0)
0916                             ; e is increased by ( and [
0916                             ; e is decreased by ) and ]
0916                             ; e has its bit 7 toggled by `
0916                             ; limited to 127 levels
0916                             ; **************************************************************************
0916                NESTING:      
0916   FE 22                  CP   DQUOTE   ; quote char
0918   28 06                  JR   z,nesting0   
091A   FE 60                  CP   "`"   ; quote char
091C   28 02                  JR   z,nesting0   
091E   18 0A                  JR   nesting1   
0920                NESTING0:      
0920   CB 7B                  BIT   7,e   
0922   28 03                  JR   z,nesting1a   
0924   CB BB                  RES   7,e   
0926   C9                     RET      
0927                NESTING1A:      
0927   CB FB                  SET   7,e   
0929   C9                     RET      
092A                NESTING1:      
092A   CB 7B                  BIT   7,e   
092C   C0                     RET   nz   
092D   FE 7B                  CP   "{"   
092F   28 08                  JR   z,nesting2   
0931   FE 5B                  CP   "["   
0933   28 04                  JR   z,nesting2   
0935   FE 28                  CP   "("   
0937   20 02                  JR   nz,nesting3   
0939                NESTING2:      
0939   1C                     INC   e   
093A   C9                     RET      
093B                NESTING3:      
093B   FE 7D                  CP   "}"   
093D   28 07                  JR   z,nesting4   
093F   FE 5D                  CP   "]"   
0941   28 03                  JR   z,nesting4   
0943   FE 29                  CP   ")"   
0945   C0                     RET   nz   
0946                NESTING4:      
0946   1D                     DEC   e   
0947   C9                     RET      
0948                PROMPT:      
0948   CD 58 09               CALL   printStr   
094B   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0950   C9                     RET      
0951                CRLF:        
0951   CD 58 09               CALL   printStr   
0954   0D 0A 00               .CSTR   "\r\n"   
0957   C9                     RET      
0958                             ; prints a null teminated string
0958                             ; the string should be immedaitely following the call
0958                PRINTSTR:      
0958   E3                     EX   (sp),hl   ; swap			
0959   CD 11 09               CALL   prtstr   
095C   23                     INC   hl   ; inc past NUL
095D   E3                     EX   (sp),hl   ; put it back	
095E   C9                     RET      
095F                             ; push contents of array on stack
095F                             ; hl = array*
095F                             ; destroys bc,de
095F                PUSHARRAY:      
095F   2B                     DEC   hl   ; bc = count
0960   46                     LD   b,(hl)   
0961   2B                     DEC   hl   
0962   4E                     LD   c,(hl)   
0963   23                     INC   hl   ; push each item on stack
0964   23                     INC   hl   
0965   18 06                  JR   pushArray2   
0967                PUSHARRAY1:      
0967   5E                     LD   e,(hl)   
0968   23                     INC   hl   
0969   56                     LD   d,(hl)   
096A   23                     INC   hl   
096B   D5                     PUSH   de   
096C   0B                     DEC   bc   
096D                PUSHARRAY2:      
096D   79                     LD   a,c   
096E   B0                     OR   b   
096F   20 F6                  JR   nz,pushArray1   
0971   C9                     RET      
0972                INIT:        
0972   DD 2A EA 3A            LD   ix,(vNext)   
0976   FD 21 80 39            LD   iy,STACK   
097A   21 80 01               LD   hl,isysVars   
097D   11 E6 3A               LD   de,sysVars   
0980   01 10 00               LD   bc,8 * 2   
0983   ED B0                  LDIR      
0985   21 00 3A               LD   hl,vars   ; 52 vars LO HI
0988   06 34                  LD   b,26*2   
098A   AF                     XOR   a   
098B                INIT0:       
098B   77                     LD   (hl),a   
098C   23                     INC   hl   
098D   10 FC                  DJNZ   init0   
098F   C9                     RET      
0990                START:       
0990   31 80 39               LD   sp,STACK   ; start of monty
0993   CD 72 09               CALL   init   ; setups
0996   CD 58 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0999   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
09A6                INTERPRET:      
09A6   CD 48 09               CALL   prompt   
09A9   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
09AC   ED 43 E8 3A            LD   (vTIBPtr),bc   
09B0                INTERPRET2:      ; calc nesting (a macro might have changed it)
09B0   1E 00                  LD   e,0   ; initilize nesting value
09B2   C5                     PUSH   bc   ; save offset into TIB,
09B3                             ; bc is also the count of chars in TIB
09B3   21 00 3B               LD   hl,TIB   ; hl is start of TIB
09B6   18 06                  JR   interpret4   
09B8                INTERPRET3:      
09B8   7E                     LD   a,(hl)   ; a = char in TIB
09B9   23                     INC   hl   ; inc pointer into TIB
09BA   0B                     DEC   bc   ; dec count of chars in TIB
09BB   CD 16 09               CALL   nesting   ; update nesting value
09BE                INTERPRET4:      
09BE   79                     LD   a,c   ; is count zero?
09BF   B0                     OR   b   
09C0   20 F6                  JR   nz,interpret3   ; if not loop
09C2   C1                     POP   bc   ; restore offset into TIB
09C3                INTERPRET5:      
09C3   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
09C6   FE 20                  CP   $20   ; compare to space
09C8   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
09CA   FE 00                  CP   $0   ; is it end of string? NUL end of string
09CC                             ; ???? NEEDED?
09CC   28 27                  JR   z,interpret8   
09CE   FE 0D                  CP   "\r"   ; carriage return? ascii 13
09D0   28 10                  JR   z,interpret7   ; if anything else its macro/control
09D2                             ; macro
09D2                             ;  ld (vTIBPtr),bc
09D2                             ;  ld hl,ctrlCodes
09D2                             ;  add a,l			            ; look up key of macros
09D2                             ;  ld l,a
09D2                             ;  ld e,(hl)
09D2                             ;  ld a,e
09D2                             ;  or a
09D2                             ;  jr z,macro1
09D2                             ;  ld d,msb(macros)
09D2                             ;  push de
09D2                             ;  call call		            ; monty exec_ operation and jump to it
09D2                             ;  db DC1,0
09D2                             ; macro1:
09D2                             ;  ld bc,(vTIBPtr)
09D2   18 DC                  JR   interpret2   
09D4                INTERPRET6:      
09D4   21 00 3B               LD   hl,TIB   
09D7   09                     ADD   hl,bc   
09D8   77                     LD   (hl),a   ; store the character in textbuf
09D9   03                     INC   bc   
09DA   CD 85 00               CALL   putchar   ; echo character to screen
09DD   CD 16 09               CALL   nesting   
09E0   18 E1                  JR   interpret5   ; wait for next character
09E2                INTERPRET7:      
09E2   21 00 3B               LD   hl,TIB   
09E5   09                     ADD   hl,bc   
09E6   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
09E8   23                     INC   hl   
09E9   36 0A                  LD   (hl),"\n"   
09EB   23                     INC   hl   
09EC   03                     INC   bc   
09ED   03                     INC   bc   
09EE   CD 51 09               CALL   crlf   ; echo character to screen
09F1   7B                     LD   a,e   ; if zero nesting append and ETX after \r
09F2   B7                     OR   a   
09F3   20 CE                  JR   nz,interpret5   
09F5                INTERPRET8:      
09F5   ED 43 E8 3A            LD   (vTIBPtr),bc   
09F9   01 00 3B               LD   bc,TIB   ; Instructions stored on heap at address HERE,
09FC                             ; we pressed enter
09FC   0B                     DEC   bc   
09FD                NEXT:        
09FD   03                     INC   bc   ; Increment the IP
09FE   0A                     LD   a,(bc)   ; Get the next character and dispatch
09FF   FE 20                  CP   " "   ; whitespace?
0A01   28 FA                  JR   z,next   ; space? ignore
0A03   38 07                  JR   c,next1   
0A05   6F                     LD   l,a   ; index into table
0A06   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0A08   6E                     LD   l,(hl)   ; get low jump address
0A09   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0A0B   E9                     JP   (hl)   ; Jump to routine
0A0C                NEXT1:       
0A0C   FE 00                  CP   NUL   ; end of input string?
0A0E   28 03                  JR   z,exit_   
0A10   C3 A6 09               JP   interpret   ; no, other whitespace, macros?
0A13                EXIT_:       
0A13   60 69                  LD   hl,bc   
0A15   E9                     JP   (hl)   
0A16                ERROR:       
0A16   CD 58 09               CALL   printStr   
0A19   45 72 72 6F 72 20 00   .CSTR   "Error "   
0A20   CD A6 08               CALL   prtdec   
0A23   C3 A6 09               JP   interpret   
0A26                          ALIGN   $100   
0B00                TESTSSTART:      
0B00                          ;*Macro unroll:  test "5 (a) {$a} \\f :", 5
0B00   31 80 39               LD   SP,STACK   
0B03   CD 72 09               CALL   init   
0B06   CD 18 38               CALL   execStr   
0B09   35 20 28 61 29 20 7B 24 61 7D 20 5C 66 20 3A 00 .CSTR   "5 (a) {$a} \\f :"   
0B19                          ;*Macro unroll:  expect "5 (a) {$a} \\f :",5
0B19   E1                     POP   HL   
0B1A   E5                     PUSH   HL   
0B1B   11 05 00               LD   DE,5   
0B1E   B7                     OR   A   
0B1F   ED 52                  SBC   HL,DE   
0B21   7D                     LD   A,L   
0B22   B4                     OR   H   
0B23   28 5A                  JR   Z,expectM_0_2114S43   
0B25   CD 58 09               CALL   printStr   
0B28   43 6F 64 65 3A 20 35 20 28 61 29 20 7B 24 61 7D 20 5C 66 20 3A 00 .CSTR   "Code: ","5 (a) {$a} \\f :"   
0B3E   CD 58 09               CALL   printStr   
0B41   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B50   21 05 00               LD   HL,5   
0B53   CD A6 08               CALL   prtdec   
0B56   CD 58 09               CALL   printStr   
0B59   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0B66   E1                     POP   hl   
0B67   E5                     PUSH   hl   
0B68   CD A6 08               CALL   prtdec   
0B6B   E1                     POP   hl   
0B6C   CD 58 09               CALL   printStr   
0B6F   20 28 23 00            .CSTR   " (#"   
0B73   CD EE 08               CALL   prthex   
0B76   CD 58 09               CALL   printStr   
0B79   29 0D 0A 00            .CSTR   ")\r\n"   
0B7D   76                     HALT      
0B7E   00                     .CSTR      
0B7F                EXPECTM_0_2114S43:      
0B7F   E1                     POP   HL   
0B80   CD 58 09               CALL   printStr   
0B83   44 6F 6E 65 21 00      .CSTR   "Done!"   
0B89   76                     HALT      
0B8A                             ; 
0B8A                          ;*Macro unroll:  test "\\F", false
0B8A   31 80 39               LD   SP,STACK   
0B8D   CD 72 09               CALL   init   
0B90   CD 18 38               CALL   execStr   
0B93   5C 46 00               .CSTR   "\\F"   
0B96                          ;*Macro unroll:  expect "\\F",false
0B96   E1                     POP   HL   
0B97   E5                     PUSH   HL   
0B98   11 00 00               LD   DE,false   
0B9B   B7                     OR   A   
0B9C   ED 52                  SBC   HL,DE   
0B9E   7D                     LD   A,L   
0B9F   B4                     OR   H   
0BA0   28 4D                  JR   Z,expectM_0_2119S43   
0BA2   CD 58 09               CALL   printStr   
0BA5   43 6F 64 65 3A 20 5C 46 00 .CSTR   "Code: ","\\F"   
0BAE   CD 58 09               CALL   printStr   
0BB1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0BC0   21 00 00               LD   HL,false   
0BC3   CD A6 08               CALL   prtdec   
0BC6   CD 58 09               CALL   printStr   
0BC9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0BD6   E1                     POP   hl   
0BD7   E5                     PUSH   hl   
0BD8   CD A6 08               CALL   prtdec   
0BDB   E1                     POP   hl   
0BDC   CD 58 09               CALL   printStr   
0BDF   20 28 23 00            .CSTR   " (#"   
0BE3   CD EE 08               CALL   prthex   
0BE6   CD 58 09               CALL   printStr   
0BE9   29 0D 0A 00            .CSTR   ")\r\n"   
0BED   76                     HALT      
0BEE   00                     .CSTR      
0BEF                EXPECTM_0_2119S43:      
0BEF   E1                     POP   HL   
0BF0                          ;*Macro unroll:  test "\\T", true
0BF0   31 80 39               LD   SP,STACK   
0BF3   CD 72 09               CALL   init   
0BF6   CD 18 38               CALL   execStr   
0BF9   5C 54 00               .CSTR   "\\T"   
0BFC                          ;*Macro unroll:  expect "\\T",true
0BFC   E1                     POP   HL   
0BFD   E5                     PUSH   HL   
0BFE   11 FF FF               LD   DE,true   
0C01   B7                     OR   A   
0C02   ED 52                  SBC   HL,DE   
0C04   7D                     LD   A,L   
0C05   B4                     OR   H   
0C06   28 4D                  JR   Z,expectM_0_2120S43   
0C08   CD 58 09               CALL   printStr   
0C0B   43 6F 64 65 3A 20 5C 54 00 .CSTR   "Code: ","\\T"   
0C14   CD 58 09               CALL   printStr   
0C17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C26   21 FF FF               LD   HL,true   
0C29   CD A6 08               CALL   prtdec   
0C2C   CD 58 09               CALL   printStr   
0C2F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0C3C   E1                     POP   hl   
0C3D   E5                     PUSH   hl   
0C3E   CD A6 08               CALL   prtdec   
0C41   E1                     POP   hl   
0C42   CD 58 09               CALL   printStr   
0C45   20 28 23 00            .CSTR   " (#"   
0C49   CD EE 08               CALL   prthex   
0C4C   CD 58 09               CALL   printStr   
0C4F   29 0D 0A 00            .CSTR   ")\r\n"   
0C53   76                     HALT      
0C54   00                     .CSTR      
0C55                EXPECTM_0_2120S43:      
0C55   E1                     POP   HL   
0C56                          ;*Macro unroll:  test "1", 1
0C56   31 80 39               LD   SP,STACK   
0C59   CD 72 09               CALL   init   
0C5C   CD 18 38               CALL   execStr   
0C5F   31 00                  .CSTR   "1"   
0C61                          ;*Macro unroll:  expect "1",1
0C61   E1                     POP   HL   
0C62   E5                     PUSH   HL   
0C63   11 01 00               LD   DE,1   
0C66   B7                     OR   A   
0C67   ED 52                  SBC   HL,DE   
0C69   7D                     LD   A,L   
0C6A   B4                     OR   H   
0C6B   28 4C                  JR   Z,expectM_0_2121S43   
0C6D   CD 58 09               CALL   printStr   
0C70   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0C78   CD 58 09               CALL   printStr   
0C7B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C8A   21 01 00               LD   HL,1   
0C8D   CD A6 08               CALL   prtdec   
0C90   CD 58 09               CALL   printStr   
0C93   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0CA0   E1                     POP   hl   
0CA1   E5                     PUSH   hl   
0CA2   CD A6 08               CALL   prtdec   
0CA5   E1                     POP   hl   
0CA6   CD 58 09               CALL   printStr   
0CA9   20 28 23 00            .CSTR   " (#"   
0CAD   CD EE 08               CALL   prthex   
0CB0   CD 58 09               CALL   printStr   
0CB3   29 0D 0A 00            .CSTR   ")\r\n"   
0CB7   76                     HALT      
0CB8   00                     .CSTR      
0CB9                EXPECTM_0_2121S43:      
0CB9   E1                     POP   HL   
0CBA                          ;*Macro unroll:  test "2", 2
0CBA   31 80 39               LD   SP,STACK   
0CBD   CD 72 09               CALL   init   
0CC0   CD 18 38               CALL   execStr   
0CC3   32 00                  .CSTR   "2"   
0CC5                          ;*Macro unroll:  expect "2",2
0CC5   E1                     POP   HL   
0CC6   E5                     PUSH   HL   
0CC7   11 02 00               LD   DE,2   
0CCA   B7                     OR   A   
0CCB   ED 52                  SBC   HL,DE   
0CCD   7D                     LD   A,L   
0CCE   B4                     OR   H   
0CCF   28 4C                  JR   Z,expectM_0_2122S43   
0CD1   CD 58 09               CALL   printStr   
0CD4   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0CDC   CD 58 09               CALL   printStr   
0CDF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0CEE   21 02 00               LD   HL,2   
0CF1   CD A6 08               CALL   prtdec   
0CF4   CD 58 09               CALL   printStr   
0CF7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D04   E1                     POP   hl   
0D05   E5                     PUSH   hl   
0D06   CD A6 08               CALL   prtdec   
0D09   E1                     POP   hl   
0D0A   CD 58 09               CALL   printStr   
0D0D   20 28 23 00            .CSTR   " (#"   
0D11   CD EE 08               CALL   prthex   
0D14   CD 58 09               CALL   printStr   
0D17   29 0D 0A 00            .CSTR   ")\r\n"   
0D1B   76                     HALT      
0D1C   00                     .CSTR      
0D1D                EXPECTM_0_2122S43:      
0D1D   E1                     POP   HL   
0D1E                          ;*Macro unroll:  test "1", 1
0D1E   31 80 39               LD   SP,STACK   
0D21   CD 72 09               CALL   init   
0D24   CD 18 38               CALL   execStr   
0D27   31 00                  .CSTR   "1"   
0D29                          ;*Macro unroll:  expect "1",1
0D29   E1                     POP   HL   
0D2A   E5                     PUSH   HL   
0D2B   11 01 00               LD   DE,1   
0D2E   B7                     OR   A   
0D2F   ED 52                  SBC   HL,DE   
0D31   7D                     LD   A,L   
0D32   B4                     OR   H   
0D33   28 4C                  JR   Z,expectM_0_2123S43   
0D35   CD 58 09               CALL   printStr   
0D38   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0D40   CD 58 09               CALL   printStr   
0D43   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D52   21 01 00               LD   HL,1   
0D55   CD A6 08               CALL   prtdec   
0D58   CD 58 09               CALL   printStr   
0D5B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D68   E1                     POP   hl   
0D69   E5                     PUSH   hl   
0D6A   CD A6 08               CALL   prtdec   
0D6D   E1                     POP   hl   
0D6E   CD 58 09               CALL   printStr   
0D71   20 28 23 00            .CSTR   " (#"   
0D75   CD EE 08               CALL   prthex   
0D78   CD 58 09               CALL   printStr   
0D7B   29 0D 0A 00            .CSTR   ")\r\n"   
0D7F   76                     HALT      
0D80   00                     .CSTR      
0D81                EXPECTM_0_2123S43:      
0D81   E1                     POP   HL   
0D82                          ;*Macro unroll:  test "0", 0
0D82   31 80 39               LD   SP,STACK   
0D85   CD 72 09               CALL   init   
0D88   CD 18 38               CALL   execStr   
0D8B   30 00                  .CSTR   "0"   
0D8D                          ;*Macro unroll:  expect "0",0
0D8D   E1                     POP   HL   
0D8E   E5                     PUSH   HL   
0D8F   11 00 00               LD   DE,0   
0D92   B7                     OR   A   
0D93   ED 52                  SBC   HL,DE   
0D95   7D                     LD   A,L   
0D96   B4                     OR   H   
0D97   28 4C                  JR   Z,expectM_0_2124S43   
0D99   CD 58 09               CALL   printStr   
0D9C   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0DA4   CD 58 09               CALL   printStr   
0DA7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DB6   21 00 00               LD   HL,0   
0DB9   CD A6 08               CALL   prtdec   
0DBC   CD 58 09               CALL   printStr   
0DBF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DCC   E1                     POP   hl   
0DCD   E5                     PUSH   hl   
0DCE   CD A6 08               CALL   prtdec   
0DD1   E1                     POP   hl   
0DD2   CD 58 09               CALL   printStr   
0DD5   20 28 23 00            .CSTR   " (#"   
0DD9   CD EE 08               CALL   prthex   
0DDC   CD 58 09               CALL   printStr   
0DDF   29 0D 0A 00            .CSTR   ")\r\n"   
0DE3   76                     HALT      
0DE4   00                     .CSTR      
0DE5                EXPECTM_0_2124S43:      
0DE5   E1                     POP   HL   
0DE6                          ;*Macro unroll:  test "10", 10
0DE6   31 80 39               LD   SP,STACK   
0DE9   CD 72 09               CALL   init   
0DEC   CD 18 38               CALL   execStr   
0DEF   31 30 00               .CSTR   "10"   
0DF2                          ;*Macro unroll:  expect "10",10
0DF2   E1                     POP   HL   
0DF3   E5                     PUSH   HL   
0DF4   11 0A 00               LD   DE,10   
0DF7   B7                     OR   A   
0DF8   ED 52                  SBC   HL,DE   
0DFA   7D                     LD   A,L   
0DFB   B4                     OR   H   
0DFC   28 4D                  JR   Z,expectM_0_2125S43   
0DFE   CD 58 09               CALL   printStr   
0E01   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
0E0A   CD 58 09               CALL   printStr   
0E0D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E1C   21 0A 00               LD   HL,10   
0E1F   CD A6 08               CALL   prtdec   
0E22   CD 58 09               CALL   printStr   
0E25   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E32   E1                     POP   hl   
0E33   E5                     PUSH   hl   
0E34   CD A6 08               CALL   prtdec   
0E37   E1                     POP   hl   
0E38   CD 58 09               CALL   printStr   
0E3B   20 28 23 00            .CSTR   " (#"   
0E3F   CD EE 08               CALL   prthex   
0E42   CD 58 09               CALL   printStr   
0E45   29 0D 0A 00            .CSTR   ")\r\n"   
0E49   76                     HALT      
0E4A   00                     .CSTR      
0E4B                EXPECTM_0_2125S43:      
0E4B   E1                     POP   HL   
0E4C                          ;*Macro unroll:  test "123", 123
0E4C   31 80 39               LD   SP,STACK   
0E4F   CD 72 09               CALL   init   
0E52   CD 18 38               CALL   execStr   
0E55   31 32 33 00            .CSTR   "123"   
0E59                          ;*Macro unroll:  expect "123",123
0E59   E1                     POP   HL   
0E5A   E5                     PUSH   HL   
0E5B   11 7B 00               LD   DE,123   
0E5E   B7                     OR   A   
0E5F   ED 52                  SBC   HL,DE   
0E61   7D                     LD   A,L   
0E62   B4                     OR   H   
0E63   28 4E                  JR   Z,expectM_0_2126S43   
0E65   CD 58 09               CALL   printStr   
0E68   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
0E72   CD 58 09               CALL   printStr   
0E75   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E84   21 7B 00               LD   HL,123   
0E87   CD A6 08               CALL   prtdec   
0E8A   CD 58 09               CALL   printStr   
0E8D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E9A   E1                     POP   hl   
0E9B   E5                     PUSH   hl   
0E9C   CD A6 08               CALL   prtdec   
0E9F   E1                     POP   hl   
0EA0   CD 58 09               CALL   printStr   
0EA3   20 28 23 00            .CSTR   " (#"   
0EA7   CD EE 08               CALL   prthex   
0EAA   CD 58 09               CALL   printStr   
0EAD   29 0D 0A 00            .CSTR   ")\r\n"   
0EB1   76                     HALT      
0EB2   00                     .CSTR      
0EB3                EXPECTM_0_2126S43:      
0EB3   E1                     POP   HL   
0EB4                          ;*Macro unroll:  test "-1",-1
0EB4   31 80 39               LD   SP,STACK   
0EB7   CD 72 09               CALL   init   
0EBA   CD 18 38               CALL   execStr   
0EBD   2D 31 00               .CSTR   "-1"   
0EC0                          ;*Macro unroll:  expect "-1",-1
0EC0   E1                     POP   HL   
0EC1   E5                     PUSH   HL   
0EC2   11 FF FF               LD   DE,-1   
0EC5   B7                     OR   A   
0EC6   ED 52                  SBC   HL,DE   
0EC8   7D                     LD   A,L   
0EC9   B4                     OR   H   
0ECA   28 4D                  JR   Z,expectM_0_2127S43   
0ECC   CD 58 09               CALL   printStr   
0ECF   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
0ED8   CD 58 09               CALL   printStr   
0EDB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EEA   21 FF FF               LD   HL,-1   
0EED   CD A6 08               CALL   prtdec   
0EF0   CD 58 09               CALL   printStr   
0EF3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F00   E1                     POP   hl   
0F01   E5                     PUSH   hl   
0F02   CD A6 08               CALL   prtdec   
0F05   E1                     POP   hl   
0F06   CD 58 09               CALL   printStr   
0F09   20 28 23 00            .CSTR   " (#"   
0F0D   CD EE 08               CALL   prthex   
0F10   CD 58 09               CALL   printStr   
0F13   29 0D 0A 00            .CSTR   ")\r\n"   
0F17   76                     HALT      
0F18   00                     .CSTR      
0F19                EXPECTM_0_2127S43:      
0F19   E1                     POP   HL   
0F1A                          ;*Macro unroll:  test "''", 0
0F1A   31 80 39               LD   SP,STACK   
0F1D   CD 72 09               CALL   init   
0F20   CD 18 38               CALL   execStr   
0F23   27 27 00               .CSTR   "''"   
0F26                          ;*Macro unroll:  expect "''",0
0F26   E1                     POP   HL   
0F27   E5                     PUSH   HL   
0F28   11 00 00               LD   DE,0   
0F2B   B7                     OR   A   
0F2C   ED 52                  SBC   HL,DE   
0F2E   7D                     LD   A,L   
0F2F   B4                     OR   H   
0F30   28 4D                  JR   Z,expectM_0_2128S43   
0F32   CD 58 09               CALL   printStr   
0F35   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
0F3E   CD 58 09               CALL   printStr   
0F41   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F50   21 00 00               LD   HL,0   
0F53   CD A6 08               CALL   prtdec   
0F56   CD 58 09               CALL   printStr   
0F59   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F66   E1                     POP   hl   
0F67   E5                     PUSH   hl   
0F68   CD A6 08               CALL   prtdec   
0F6B   E1                     POP   hl   
0F6C   CD 58 09               CALL   printStr   
0F6F   20 28 23 00            .CSTR   " (#"   
0F73   CD EE 08               CALL   prthex   
0F76   CD 58 09               CALL   printStr   
0F79   29 0D 0A 00            .CSTR   ")\r\n"   
0F7D   76                     HALT      
0F7E   00                     .CSTR      
0F7F                EXPECTM_0_2128S43:      
0F7F   E1                     POP   HL   
0F80                          ;*Macro unroll:  test "'a'", $61
0F80   31 80 39               LD   SP,STACK   
0F83   CD 72 09               CALL   init   
0F86   CD 18 38               CALL   execStr   
0F89   27 61 27 00            .CSTR   "'a'"   
0F8D                          ;*Macro unroll:  expect "'a'",$61
0F8D   E1                     POP   HL   
0F8E   E5                     PUSH   HL   
0F8F   11 61 00               LD   DE,$61   
0F92   B7                     OR   A   
0F93   ED 52                  SBC   HL,DE   
0F95   7D                     LD   A,L   
0F96   B4                     OR   H   
0F97   28 4E                  JR   Z,expectM_0_2129S43   
0F99   CD 58 09               CALL   printStr   
0F9C   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
0FA6   CD 58 09               CALL   printStr   
0FA9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FB8   21 61 00               LD   HL,$61   
0FBB   CD A6 08               CALL   prtdec   
0FBE   CD 58 09               CALL   printStr   
0FC1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FCE   E1                     POP   hl   
0FCF   E5                     PUSH   hl   
0FD0   CD A6 08               CALL   prtdec   
0FD3   E1                     POP   hl   
0FD4   CD 58 09               CALL   printStr   
0FD7   20 28 23 00            .CSTR   " (#"   
0FDB   CD EE 08               CALL   prthex   
0FDE   CD 58 09               CALL   printStr   
0FE1   29 0D 0A 00            .CSTR   ")\r\n"   
0FE5   76                     HALT      
0FE6   00                     .CSTR      
0FE7                EXPECTM_0_2129S43:      
0FE7   E1                     POP   HL   
0FE8                          ;*Macro unroll:  test "'\\''", $27
0FE8   31 80 39               LD   SP,STACK   
0FEB   CD 72 09               CALL   init   
0FEE   CD 18 38               CALL   execStr   
0FF1   27 5C 27 27 00         .CSTR   "'\\''"   
0FF6                          ;*Macro unroll:  expect "'\\''",$27
0FF6   E1                     POP   HL   
0FF7   E5                     PUSH   HL   
0FF8   11 27 00               LD   DE,$27   
0FFB   B7                     OR   A   
0FFC   ED 52                  SBC   HL,DE   
0FFE   7D                     LD   A,L   
0FFF   B4                     OR   H   
1000   28 4F                  JR   Z,expectM_0_2130S43   
1002   CD 58 09               CALL   printStr   
1005   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
1010   CD 58 09               CALL   printStr   
1013   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1022   21 27 00               LD   HL,$27   
1025   CD A6 08               CALL   prtdec   
1028   CD 58 09               CALL   printStr   
102B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1038   E1                     POP   hl   
1039   E5                     PUSH   hl   
103A   CD A6 08               CALL   prtdec   
103D   E1                     POP   hl   
103E   CD 58 09               CALL   printStr   
1041   20 28 23 00            .CSTR   " (#"   
1045   CD EE 08               CALL   prthex   
1048   CD 58 09               CALL   printStr   
104B   29 0D 0A 00            .CSTR   ")\r\n"   
104F   76                     HALT      
1050   00                     .CSTR      
1051                EXPECTM_0_2130S43:      
1051   E1                     POP   HL   
1052                          ;*Macro unroll:  test "#10", $10
1052   31 80 39               LD   SP,STACK   
1055   CD 72 09               CALL   init   
1058   CD 18 38               CALL   execStr   
105B   23 31 30 00            .CSTR   "#10"   
105F                          ;*Macro unroll:  expect "#10",$10
105F   E1                     POP   HL   
1060   E5                     PUSH   HL   
1061   11 10 00               LD   DE,$10   
1064   B7                     OR   A   
1065   ED 52                  SBC   HL,DE   
1067   7D                     LD   A,L   
1068   B4                     OR   H   
1069   28 4E                  JR   Z,expectM_0_2131S43   
106B   CD 58 09               CALL   printStr   
106E   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
1078   CD 58 09               CALL   printStr   
107B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
108A   21 10 00               LD   HL,$10   
108D   CD A6 08               CALL   prtdec   
1090   CD 58 09               CALL   printStr   
1093   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10A0   E1                     POP   hl   
10A1   E5                     PUSH   hl   
10A2   CD A6 08               CALL   prtdec   
10A5   E1                     POP   hl   
10A6   CD 58 09               CALL   printStr   
10A9   20 28 23 00            .CSTR   " (#"   
10AD   CD EE 08               CALL   prthex   
10B0   CD 58 09               CALL   printStr   
10B3   29 0D 0A 00            .CSTR   ")\r\n"   
10B7   76                     HALT      
10B8   00                     .CSTR      
10B9                EXPECTM_0_2131S43:      
10B9   E1                     POP   HL   
10BA                          ;*Macro unroll:  test "#FF", $FF
10BA   31 80 39               LD   SP,STACK   
10BD   CD 72 09               CALL   init   
10C0   CD 18 38               CALL   execStr   
10C3   23 46 46 00            .CSTR   "#FF"   
10C7                          ;*Macro unroll:  expect "#FF",$FF
10C7   E1                     POP   HL   
10C8   E5                     PUSH   HL   
10C9   11 FF 00               LD   DE,$FF   
10CC   B7                     OR   A   
10CD   ED 52                  SBC   HL,DE   
10CF   7D                     LD   A,L   
10D0   B4                     OR   H   
10D1   28 4E                  JR   Z,expectM_0_2132S43   
10D3   CD 58 09               CALL   printStr   
10D6   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
10E0   CD 58 09               CALL   printStr   
10E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10F2   21 FF 00               LD   HL,$FF   
10F5   CD A6 08               CALL   prtdec   
10F8   CD 58 09               CALL   printStr   
10FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1108   E1                     POP   hl   
1109   E5                     PUSH   hl   
110A   CD A6 08               CALL   prtdec   
110D   E1                     POP   hl   
110E   CD 58 09               CALL   printStr   
1111   20 28 23 00            .CSTR   " (#"   
1115   CD EE 08               CALL   prthex   
1118   CD 58 09               CALL   printStr   
111B   29 0D 0A 00            .CSTR   ")\r\n"   
111F   76                     HALT      
1120   00                     .CSTR      
1121                EXPECTM_0_2132S43:      
1121   E1                     POP   HL   
1122                          ;*Macro unroll:  test "-1 2 +",1
1122   31 80 39               LD   SP,STACK   
1125   CD 72 09               CALL   init   
1128   CD 18 38               CALL   execStr   
112B   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
1132                          ;*Macro unroll:  expect "-1 2 +",1
1132   E1                     POP   HL   
1133   E5                     PUSH   HL   
1134   11 01 00               LD   DE,1   
1137   B7                     OR   A   
1138   ED 52                  SBC   HL,DE   
113A   7D                     LD   A,L   
113B   B4                     OR   H   
113C   28 51                  JR   Z,expectM_0_2133S43   
113E   CD 58 09               CALL   printStr   
1141   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
114E   CD 58 09               CALL   printStr   
1151   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1160   21 01 00               LD   HL,1   
1163   CD A6 08               CALL   prtdec   
1166   CD 58 09               CALL   printStr   
1169   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1176   E1                     POP   hl   
1177   E5                     PUSH   hl   
1178   CD A6 08               CALL   prtdec   
117B   E1                     POP   hl   
117C   CD 58 09               CALL   printStr   
117F   20 28 23 00            .CSTR   " (#"   
1183   CD EE 08               CALL   prthex   
1186   CD 58 09               CALL   printStr   
1189   29 0D 0A 00            .CSTR   ")\r\n"   
118D   76                     HALT      
118E   00                     .CSTR      
118F                EXPECTM_0_2133S43:      
118F   E1                     POP   HL   
1190                          ;*Macro unroll:  test "-1 1 +",0
1190   31 80 39               LD   SP,STACK   
1193   CD 72 09               CALL   init   
1196   CD 18 38               CALL   execStr   
1199   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
11A0                          ;*Macro unroll:  expect "-1 1 +",0
11A0   E1                     POP   HL   
11A1   E5                     PUSH   HL   
11A2   11 00 00               LD   DE,0   
11A5   B7                     OR   A   
11A6   ED 52                  SBC   HL,DE   
11A8   7D                     LD   A,L   
11A9   B4                     OR   H   
11AA   28 51                  JR   Z,expectM_0_2134S43   
11AC   CD 58 09               CALL   printStr   
11AF   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
11BC   CD 58 09               CALL   printStr   
11BF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11CE   21 00 00               LD   HL,0   
11D1   CD A6 08               CALL   prtdec   
11D4   CD 58 09               CALL   printStr   
11D7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11E4   E1                     POP   hl   
11E5   E5                     PUSH   hl   
11E6   CD A6 08               CALL   prtdec   
11E9   E1                     POP   hl   
11EA   CD 58 09               CALL   printStr   
11ED   20 28 23 00            .CSTR   " (#"   
11F1   CD EE 08               CALL   prthex   
11F4   CD 58 09               CALL   printStr   
11F7   29 0D 0A 00            .CSTR   ")\r\n"   
11FB   76                     HALT      
11FC   00                     .CSTR      
11FD                EXPECTM_0_2134S43:      
11FD   E1                     POP   HL   
11FE                          ;*Macro unroll:  test "1 2 +", 3
11FE   31 80 39               LD   SP,STACK   
1201   CD 72 09               CALL   init   
1204   CD 18 38               CALL   execStr   
1207   31 20 32 20 2B 00      .CSTR   "1 2 +"   
120D                          ;*Macro unroll:  expect "1 2 +",3
120D   E1                     POP   HL   
120E   E5                     PUSH   HL   
120F   11 03 00               LD   DE,3   
1212   B7                     OR   A   
1213   ED 52                  SBC   HL,DE   
1215   7D                     LD   A,L   
1216   B4                     OR   H   
1217   28 50                  JR   Z,expectM_0_2135S43   
1219   CD 58 09               CALL   printStr   
121C   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1228   CD 58 09               CALL   printStr   
122B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
123A   21 03 00               LD   HL,3   
123D   CD A6 08               CALL   prtdec   
1240   CD 58 09               CALL   printStr   
1243   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1250   E1                     POP   hl   
1251   E5                     PUSH   hl   
1252   CD A6 08               CALL   prtdec   
1255   E1                     POP   hl   
1256   CD 58 09               CALL   printStr   
1259   20 28 23 00            .CSTR   " (#"   
125D   CD EE 08               CALL   prthex   
1260   CD 58 09               CALL   printStr   
1263   29 0D 0A 00            .CSTR   ")\r\n"   
1267   76                     HALT      
1268   00                     .CSTR      
1269                EXPECTM_0_2135S43:      
1269   E1                     POP   HL   
126A                          ;*Macro unroll:  test "4 1 2 +", 3
126A   31 80 39               LD   SP,STACK   
126D   CD 72 09               CALL   init   
1270   CD 18 38               CALL   execStr   
1273   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
127B                          ;*Macro unroll:  expect "4 1 2 +",3
127B   E1                     POP   HL   
127C   E5                     PUSH   HL   
127D   11 03 00               LD   DE,3   
1280   B7                     OR   A   
1281   ED 52                  SBC   HL,DE   
1283   7D                     LD   A,L   
1284   B4                     OR   H   
1285   28 52                  JR   Z,expectM_0_2136S43   
1287   CD 58 09               CALL   printStr   
128A   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1298   CD 58 09               CALL   printStr   
129B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12AA   21 03 00               LD   HL,3   
12AD   CD A6 08               CALL   prtdec   
12B0   CD 58 09               CALL   printStr   
12B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12C0   E1                     POP   hl   
12C1   E5                     PUSH   hl   
12C2   CD A6 08               CALL   prtdec   
12C5   E1                     POP   hl   
12C6   CD 58 09               CALL   printStr   
12C9   20 28 23 00            .CSTR   " (#"   
12CD   CD EE 08               CALL   prthex   
12D0   CD 58 09               CALL   printStr   
12D3   29 0D 0A 00            .CSTR   ")\r\n"   
12D7   76                     HALT      
12D8   00                     .CSTR      
12D9                EXPECTM_0_2136S43:      
12D9   E1                     POP   HL   
12DA                          ;*Macro unroll:  test "123 456 +", 123+456
12DA   31 80 39               LD   SP,STACK   
12DD   CD 72 09               CALL   init   
12E0   CD 18 38               CALL   execStr   
12E3   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
12ED                          ;*Macro unroll:  expect "123 456 +",123+456
12ED   E1                     POP   HL   
12EE   E5                     PUSH   HL   
12EF   11 43 02               LD   DE,123+456   
12F2   B7                     OR   A   
12F3   ED 52                  SBC   HL,DE   
12F5   7D                     LD   A,L   
12F6   B4                     OR   H   
12F7   28 54                  JR   Z,expectM_0_2137S43   
12F9   CD 58 09               CALL   printStr   
12FC   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
130C   CD 58 09               CALL   printStr   
130F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
131E   21 43 02               LD   HL,123+456   
1321   CD A6 08               CALL   prtdec   
1324   CD 58 09               CALL   printStr   
1327   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1334   E1                     POP   hl   
1335   E5                     PUSH   hl   
1336   CD A6 08               CALL   prtdec   
1339   E1                     POP   hl   
133A   CD 58 09               CALL   printStr   
133D   20 28 23 00            .CSTR   " (#"   
1341   CD EE 08               CALL   prthex   
1344   CD 58 09               CALL   printStr   
1347   29 0D 0A 00            .CSTR   ")\r\n"   
134B   76                     HALT      
134C   00                     .CSTR      
134D                EXPECTM_0_2137S43:      
134D   E1                     POP   HL   
134E                          ;*Macro unroll:  test "64 128 +", 64+128
134E   31 80 39               LD   SP,STACK   
1351   CD 72 09               CALL   init   
1354   CD 18 38               CALL   execStr   
1357   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
1360                          ;*Macro unroll:  expect "64 128 +",64+128
1360   E1                     POP   HL   
1361   E5                     PUSH   HL   
1362   11 C0 00               LD   DE,64+128   
1365   B7                     OR   A   
1366   ED 52                  SBC   HL,DE   
1368   7D                     LD   A,L   
1369   B4                     OR   H   
136A   28 53                  JR   Z,expectM_0_2138S43   
136C   CD 58 09               CALL   printStr   
136F   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
137E   CD 58 09               CALL   printStr   
1381   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1390   21 C0 00               LD   HL,64+128   
1393   CD A6 08               CALL   prtdec   
1396   CD 58 09               CALL   printStr   
1399   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13A6   E1                     POP   hl   
13A7   E5                     PUSH   hl   
13A8   CD A6 08               CALL   prtdec   
13AB   E1                     POP   hl   
13AC   CD 58 09               CALL   printStr   
13AF   20 28 23 00            .CSTR   " (#"   
13B3   CD EE 08               CALL   prthex   
13B6   CD 58 09               CALL   printStr   
13B9   29 0D 0A 00            .CSTR   ")\r\n"   
13BD   76                     HALT      
13BE   00                     .CSTR      
13BF                EXPECTM_0_2138S43:      
13BF   E1                     POP   HL   
13C0                          ;*Macro unroll:  test "1 2 +", 3
13C0   31 80 39               LD   SP,STACK   
13C3   CD 72 09               CALL   init   
13C6   CD 18 38               CALL   execStr   
13C9   31 20 32 20 2B 00      .CSTR   "1 2 +"   
13CF                          ;*Macro unroll:  expect "1 2 +",3
13CF   E1                     POP   HL   
13D0   E5                     PUSH   HL   
13D1   11 03 00               LD   DE,3   
13D4   B7                     OR   A   
13D5   ED 52                  SBC   HL,DE   
13D7   7D                     LD   A,L   
13D8   B4                     OR   H   
13D9   28 50                  JR   Z,expectM_0_2139S43   
13DB   CD 58 09               CALL   printStr   
13DE   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
13EA   CD 58 09               CALL   printStr   
13ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13FC   21 03 00               LD   HL,3   
13FF   CD A6 08               CALL   prtdec   
1402   CD 58 09               CALL   printStr   
1405   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1412   E1                     POP   hl   
1413   E5                     PUSH   hl   
1414   CD A6 08               CALL   prtdec   
1417   E1                     POP   hl   
1418   CD 58 09               CALL   printStr   
141B   20 28 23 00            .CSTR   " (#"   
141F   CD EE 08               CALL   prthex   
1422   CD 58 09               CALL   printStr   
1425   29 0D 0A 00            .CSTR   ")\r\n"   
1429   76                     HALT      
142A   00                     .CSTR      
142B                EXPECTM_0_2139S43:      
142B   E1                     POP   HL   
142C                          ;*Macro unroll:  test "1 a= a++ a",2
142C   31 80 39               LD   SP,STACK   
142F   CD 72 09               CALL   init   
1432   CD 18 38               CALL   execStr   
1435   31 20 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1 a= a++ a"   
1440                          ;*Macro unroll:  expect "1 a= a++ a",2
1440   E1                     POP   HL   
1441   E5                     PUSH   HL   
1442   11 02 00               LD   DE,2   
1445   B7                     OR   A   
1446   ED 52                  SBC   HL,DE   
1448   7D                     LD   A,L   
1449   B4                     OR   H   
144A   28 55                  JR   Z,expectM_0_2140S43   
144C   CD 58 09               CALL   printStr   
144F   43 6F 64 65 3A 20 31 20 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1 a= a++ a"   
1460   CD 58 09               CALL   printStr   
1463   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1472   21 02 00               LD   HL,2   
1475   CD A6 08               CALL   prtdec   
1478   CD 58 09               CALL   printStr   
147B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1488   E1                     POP   hl   
1489   E5                     PUSH   hl   
148A   CD A6 08               CALL   prtdec   
148D   E1                     POP   hl   
148E   CD 58 09               CALL   printStr   
1491   20 28 23 00            .CSTR   " (#"   
1495   CD EE 08               CALL   prthex   
1498   CD 58 09               CALL   printStr   
149B   29 0D 0A 00            .CSTR   ")\r\n"   
149F   76                     HALT      
14A0   00                     .CSTR      
14A1                EXPECTM_0_2140S43:      
14A1   E1                     POP   HL   
14A2                          ;*Macro unroll:  test "1 a= 2 a += a",3
14A2   31 80 39               LD   SP,STACK   
14A5   CD 72 09               CALL   init   
14A8   CD 18 38               CALL   execStr   
14AB   31 20 61 3D 20 32 20 61 20 2B 3D 20 61 00 .CSTR   "1 a= 2 a += a"   
14B9                          ;*Macro unroll:  expect "1 a= 2 a += a",3
14B9   E1                     POP   HL   
14BA   E5                     PUSH   HL   
14BB   11 03 00               LD   DE,3   
14BE   B7                     OR   A   
14BF   ED 52                  SBC   HL,DE   
14C1   7D                     LD   A,L   
14C2   B4                     OR   H   
14C3   28 58                  JR   Z,expectM_0_2141S43   
14C5   CD 58 09               CALL   printStr   
14C8   43 6F 64 65 3A 20 31 20 61 3D 20 32 20 61 20 2B 3D 20 61 00 .CSTR   "Code: ","1 a= 2 a += a"   
14DC   CD 58 09               CALL   printStr   
14DF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14EE   21 03 00               LD   HL,3   
14F1   CD A6 08               CALL   prtdec   
14F4   CD 58 09               CALL   printStr   
14F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1504   E1                     POP   hl   
1505   E5                     PUSH   hl   
1506   CD A6 08               CALL   prtdec   
1509   E1                     POP   hl   
150A   CD 58 09               CALL   printStr   
150D   20 28 23 00            .CSTR   " (#"   
1511   CD EE 08               CALL   prthex   
1514   CD 58 09               CALL   printStr   
1517   29 0D 0A 00            .CSTR   ")\r\n"   
151B   76                     HALT      
151C   00                     .CSTR      
151D                EXPECTM_0_2141S43:      
151D   E1                     POP   HL   
151E                          ;*Macro unroll:  test "-1 -1 -",0
151E   31 80 39               LD   SP,STACK   
1521   CD 72 09               CALL   init   
1524   CD 18 38               CALL   execStr   
1527   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
152F                          ;*Macro unroll:  expect "-1 -1 -",0
152F   E1                     POP   HL   
1530   E5                     PUSH   HL   
1531   11 00 00               LD   DE,0   
1534   B7                     OR   A   
1535   ED 52                  SBC   HL,DE   
1537   7D                     LD   A,L   
1538   B4                     OR   H   
1539   28 52                  JR   Z,expectM_0_2142S43   
153B   CD 58 09               CALL   printStr   
153E   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
154C   CD 58 09               CALL   printStr   
154F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
155E   21 00 00               LD   HL,0   
1561   CD A6 08               CALL   prtdec   
1564   CD 58 09               CALL   printStr   
1567   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1574   E1                     POP   hl   
1575   E5                     PUSH   hl   
1576   CD A6 08               CALL   prtdec   
1579   E1                     POP   hl   
157A   CD 58 09               CALL   printStr   
157D   20 28 23 00            .CSTR   " (#"   
1581   CD EE 08               CALL   prthex   
1584   CD 58 09               CALL   printStr   
1587   29 0D 0A 00            .CSTR   ")\r\n"   
158B   76                     HALT      
158C   00                     .CSTR      
158D                EXPECTM_0_2142S43:      
158D   E1                     POP   HL   
158E                          ;*Macro unroll:  test "5 3 -", 2
158E   31 80 39               LD   SP,STACK   
1591   CD 72 09               CALL   init   
1594   CD 18 38               CALL   execStr   
1597   35 20 33 20 2D 00      .CSTR   "5 3 -"   
159D                          ;*Macro unroll:  expect "5 3 -",2
159D   E1                     POP   HL   
159E   E5                     PUSH   HL   
159F   11 02 00               LD   DE,2   
15A2   B7                     OR   A   
15A3   ED 52                  SBC   HL,DE   
15A5   7D                     LD   A,L   
15A6   B4                     OR   H   
15A7   28 50                  JR   Z,expectM_0_2143S43   
15A9   CD 58 09               CALL   printStr   
15AC   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
15B8   CD 58 09               CALL   printStr   
15BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15CA   21 02 00               LD   HL,2   
15CD   CD A6 08               CALL   prtdec   
15D0   CD 58 09               CALL   printStr   
15D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15E0   E1                     POP   hl   
15E1   E5                     PUSH   hl   
15E2   CD A6 08               CALL   prtdec   
15E5   E1                     POP   hl   
15E6   CD 58 09               CALL   printStr   
15E9   20 28 23 00            .CSTR   " (#"   
15ED   CD EE 08               CALL   prthex   
15F0   CD 58 09               CALL   printStr   
15F3   29 0D 0A 00            .CSTR   ")\r\n"   
15F7   76                     HALT      
15F8   00                     .CSTR      
15F9                EXPECTM_0_2143S43:      
15F9   E1                     POP   HL   
15FA                          ;*Macro unroll:  test "2 1 -",1
15FA   31 80 39               LD   SP,STACK   
15FD   CD 72 09               CALL   init   
1600   CD 18 38               CALL   execStr   
1603   32 20 31 20 2D 00      .CSTR   "2 1 -"   
1609                          ;*Macro unroll:  expect "2 1 -",1
1609   E1                     POP   HL   
160A   E5                     PUSH   HL   
160B   11 01 00               LD   DE,1   
160E   B7                     OR   A   
160F   ED 52                  SBC   HL,DE   
1611   7D                     LD   A,L   
1612   B4                     OR   H   
1613   28 50                  JR   Z,expectM_0_2144S43   
1615   CD 58 09               CALL   printStr   
1618   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1624   CD 58 09               CALL   printStr   
1627   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1636   21 01 00               LD   HL,1   
1639   CD A6 08               CALL   prtdec   
163C   CD 58 09               CALL   printStr   
163F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
164C   E1                     POP   hl   
164D   E5                     PUSH   hl   
164E   CD A6 08               CALL   prtdec   
1651   E1                     POP   hl   
1652   CD 58 09               CALL   printStr   
1655   20 28 23 00            .CSTR   " (#"   
1659   CD EE 08               CALL   prthex   
165C   CD 58 09               CALL   printStr   
165F   29 0D 0A 00            .CSTR   ")\r\n"   
1663   76                     HALT      
1664   00                     .CSTR      
1665                EXPECTM_0_2144S43:      
1665   E1                     POP   HL   
1666                          ;*Macro unroll:  test "3 a= a-- a",2
1666   31 80 39               LD   SP,STACK   
1669   CD 72 09               CALL   init   
166C   CD 18 38               CALL   execStr   
166F   33 20 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3 a= a-- a"   
167A                          ;*Macro unroll:  expect "3 a= a-- a",2
167A   E1                     POP   HL   
167B   E5                     PUSH   HL   
167C   11 02 00               LD   DE,2   
167F   B7                     OR   A   
1680   ED 52                  SBC   HL,DE   
1682   7D                     LD   A,L   
1683   B4                     OR   H   
1684   28 55                  JR   Z,expectM_0_2145S43   
1686   CD 58 09               CALL   printStr   
1689   43 6F 64 65 3A 20 33 20 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3 a= a-- a"   
169A   CD 58 09               CALL   printStr   
169D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16AC   21 02 00               LD   HL,2   
16AF   CD A6 08               CALL   prtdec   
16B2   CD 58 09               CALL   printStr   
16B5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16C2   E1                     POP   hl   
16C3   E5                     PUSH   hl   
16C4   CD A6 08               CALL   prtdec   
16C7   E1                     POP   hl   
16C8   CD 58 09               CALL   printStr   
16CB   20 28 23 00            .CSTR   " (#"   
16CF   CD EE 08               CALL   prthex   
16D2   CD 58 09               CALL   printStr   
16D5   29 0D 0A 00            .CSTR   ")\r\n"   
16D9   76                     HALT      
16DA   00                     .CSTR      
16DB                EXPECTM_0_2145S43:      
16DB   E1                     POP   HL   
16DC                          ;*Macro unroll:  test "4 a= a 2 -= a",2
16DC   31 80 39               LD   SP,STACK   
16DF   CD 72 09               CALL   init   
16E2   CD 18 38               CALL   execStr   
16E5   34 20 61 3D 20 61 20 32 20 2D 3D 20 61 00 .CSTR   "4 a= a 2 -= a"   
16F3                          ;*Macro unroll:  expect "4 a= a 2 -= a",2
16F3   E1                     POP   HL   
16F4   E5                     PUSH   HL   
16F5   11 02 00               LD   DE,2   
16F8   B7                     OR   A   
16F9   ED 52                  SBC   HL,DE   
16FB   7D                     LD   A,L   
16FC   B4                     OR   H   
16FD   28 58                  JR   Z,expectM_0_2146S43   
16FF   CD 58 09               CALL   printStr   
1702   43 6F 64 65 3A 20 34 20 61 3D 20 61 20 32 20 2D 3D 20 61 00 .CSTR   "Code: ","4 a= a 2 -= a"   
1716   CD 58 09               CALL   printStr   
1719   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1728   21 02 00               LD   HL,2   
172B   CD A6 08               CALL   prtdec   
172E   CD 58 09               CALL   printStr   
1731   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
173E   E1                     POP   hl   
173F   E5                     PUSH   hl   
1740   CD A6 08               CALL   prtdec   
1743   E1                     POP   hl   
1744   CD 58 09               CALL   printStr   
1747   20 28 23 00            .CSTR   " (#"   
174B   CD EE 08               CALL   prthex   
174E   CD 58 09               CALL   printStr   
1751   29 0D 0A 00            .CSTR   ")\r\n"   
1755   76                     HALT      
1756   00                     .CSTR      
1757                EXPECTM_0_2146S43:      
1757   E1                     POP   HL   
1758                          ;*Macro unroll:  test "3 5 &", 1
1758   31 80 39               LD   SP,STACK   
175B   CD 72 09               CALL   init   
175E   CD 18 38               CALL   execStr   
1761   33 20 35 20 26 00      .CSTR   "3 5 &"   
1767                          ;*Macro unroll:  expect "3 5 &",1
1767   E1                     POP   HL   
1768   E5                     PUSH   HL   
1769   11 01 00               LD   DE,1   
176C   B7                     OR   A   
176D   ED 52                  SBC   HL,DE   
176F   7D                     LD   A,L   
1770   B4                     OR   H   
1771   28 50                  JR   Z,expectM_0_2147S43   
1773   CD 58 09               CALL   printStr   
1776   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1782   CD 58 09               CALL   printStr   
1785   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1794   21 01 00               LD   HL,1   
1797   CD A6 08               CALL   prtdec   
179A   CD 58 09               CALL   printStr   
179D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17AA   E1                     POP   hl   
17AB   E5                     PUSH   hl   
17AC   CD A6 08               CALL   prtdec   
17AF   E1                     POP   hl   
17B0   CD 58 09               CALL   printStr   
17B3   20 28 23 00            .CSTR   " (#"   
17B7   CD EE 08               CALL   prthex   
17BA   CD 58 09               CALL   printStr   
17BD   29 0D 0A 00            .CSTR   ")\r\n"   
17C1   76                     HALT      
17C2   00                     .CSTR      
17C3                EXPECTM_0_2147S43:      
17C3   E1                     POP   HL   
17C4                          ;*Macro unroll:  test "3 5 |", 7
17C4   31 80 39               LD   SP,STACK   
17C7   CD 72 09               CALL   init   
17CA   CD 18 38               CALL   execStr   
17CD   33 20 35 20 7C 00      .CSTR   "3 5 |"   
17D3                          ;*Macro unroll:  expect "3 5 |",7
17D3   E1                     POP   HL   
17D4   E5                     PUSH   HL   
17D5   11 07 00               LD   DE,7   
17D8   B7                     OR   A   
17D9   ED 52                  SBC   HL,DE   
17DB   7D                     LD   A,L   
17DC   B4                     OR   H   
17DD   28 50                  JR   Z,expectM_0_2148S43   
17DF   CD 58 09               CALL   printStr   
17E2   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
17EE   CD 58 09               CALL   printStr   
17F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1800   21 07 00               LD   HL,7   
1803   CD A6 08               CALL   prtdec   
1806   CD 58 09               CALL   printStr   
1809   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1816   E1                     POP   hl   
1817   E5                     PUSH   hl   
1818   CD A6 08               CALL   prtdec   
181B   E1                     POP   hl   
181C   CD 58 09               CALL   printStr   
181F   20 28 23 00            .CSTR   " (#"   
1823   CD EE 08               CALL   prthex   
1826   CD 58 09               CALL   printStr   
1829   29 0D 0A 00            .CSTR   ")\r\n"   
182D   76                     HALT      
182E   00                     .CSTR      
182F                EXPECTM_0_2148S43:      
182F   E1                     POP   HL   
1830                          ;*Macro unroll:  test "2 3 *", 6
1830   31 80 39               LD   SP,STACK   
1833   CD 72 09               CALL   init   
1836   CD 18 38               CALL   execStr   
1839   32 20 33 20 2A 00      .CSTR   "2 3 *"   
183F                          ;*Macro unroll:  expect "2 3 *",6
183F   E1                     POP   HL   
1840   E5                     PUSH   HL   
1841   11 06 00               LD   DE,6   
1844   B7                     OR   A   
1845   ED 52                  SBC   HL,DE   
1847   7D                     LD   A,L   
1848   B4                     OR   H   
1849   28 50                  JR   Z,expectM_0_2149S43   
184B   CD 58 09               CALL   printStr   
184E   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
185A   CD 58 09               CALL   printStr   
185D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
186C   21 06 00               LD   HL,6   
186F   CD A6 08               CALL   prtdec   
1872   CD 58 09               CALL   printStr   
1875   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1882   E1                     POP   hl   
1883   E5                     PUSH   hl   
1884   CD A6 08               CALL   prtdec   
1887   E1                     POP   hl   
1888   CD 58 09               CALL   printStr   
188B   20 28 23 00            .CSTR   " (#"   
188F   CD EE 08               CALL   prthex   
1892   CD 58 09               CALL   printStr   
1895   29 0D 0A 00            .CSTR   ")\r\n"   
1899   76                     HALT      
189A   00                     .CSTR      
189B                EXPECTM_0_2149S43:      
189B   E1                     POP   HL   
189C                          ;*Macro unroll:  test "3 x= 2 x *= x",6
189C   31 80 39               LD   SP,STACK   
189F   CD 72 09               CALL   init   
18A2   CD 18 38               CALL   execStr   
18A5   33 20 78 3D 20 32 20 78 20 2A 3D 20 78 00 .CSTR   "3 x= 2 x *= x"   
18B3                          ;*Macro unroll:  expect "3 x= 2 x *= x",6
18B3   E1                     POP   HL   
18B4   E5                     PUSH   HL   
18B5   11 06 00               LD   DE,6   
18B8   B7                     OR   A   
18B9   ED 52                  SBC   HL,DE   
18BB   7D                     LD   A,L   
18BC   B4                     OR   H   
18BD   28 58                  JR   Z,expectM_0_2150S43   
18BF   CD 58 09               CALL   printStr   
18C2   43 6F 64 65 3A 20 33 20 78 3D 20 32 20 78 20 2A 3D 20 78 00 .CSTR   "Code: ","3 x= 2 x *= x"   
18D6   CD 58 09               CALL   printStr   
18D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18E8   21 06 00               LD   HL,6   
18EB   CD A6 08               CALL   prtdec   
18EE   CD 58 09               CALL   printStr   
18F1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18FE   E1                     POP   hl   
18FF   E5                     PUSH   hl   
1900   CD A6 08               CALL   prtdec   
1903   E1                     POP   hl   
1904   CD 58 09               CALL   printStr   
1907   20 28 23 00            .CSTR   " (#"   
190B   CD EE 08               CALL   prthex   
190E   CD 58 09               CALL   printStr   
1911   29 0D 0A 00            .CSTR   ")\r\n"   
1915   76                     HALT      
1916   00                     .CSTR      
1917                EXPECTM_0_2150S43:      
1917   E1                     POP   HL   
1918                          ;*Macro unroll:  test "1 2 3 + *", 5
1918   31 80 39               LD   SP,STACK   
191B   CD 72 09               CALL   init   
191E   CD 18 38               CALL   execStr   
1921   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
192B                          ;*Macro unroll:  expect "1 2 3 + *",5
192B   E1                     POP   HL   
192C   E5                     PUSH   HL   
192D   11 05 00               LD   DE,5   
1930   B7                     OR   A   
1931   ED 52                  SBC   HL,DE   
1933   7D                     LD   A,L   
1934   B4                     OR   H   
1935   28 54                  JR   Z,expectM_0_2151S43   
1937   CD 58 09               CALL   printStr   
193A   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
194A   CD 58 09               CALL   printStr   
194D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
195C   21 05 00               LD   HL,5   
195F   CD A6 08               CALL   prtdec   
1962   CD 58 09               CALL   printStr   
1965   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1972   E1                     POP   hl   
1973   E5                     PUSH   hl   
1974   CD A6 08               CALL   prtdec   
1977   E1                     POP   hl   
1978   CD 58 09               CALL   printStr   
197B   20 28 23 00            .CSTR   " (#"   
197F   CD EE 08               CALL   prthex   
1982   CD 58 09               CALL   printStr   
1985   29 0D 0A 00            .CSTR   ")\r\n"   
1989   76                     HALT      
198A   00                     .CSTR      
198B                EXPECTM_0_2151S43:      
198B   E1                     POP   HL   
198C                          ;*Macro unroll:  test "7 3 /", 2
198C   31 80 39               LD   SP,STACK   
198F   CD 72 09               CALL   init   
1992   CD 18 38               CALL   execStr   
1995   37 20 33 20 2F 00      .CSTR   "7 3 /"   
199B                          ;*Macro unroll:  expect "7 3 /",2
199B   E1                     POP   HL   
199C   E5                     PUSH   HL   
199D   11 02 00               LD   DE,2   
19A0   B7                     OR   A   
19A1   ED 52                  SBC   HL,DE   
19A3   7D                     LD   A,L   
19A4   B4                     OR   H   
19A5   28 50                  JR   Z,expectM_0_2152S43   
19A7   CD 58 09               CALL   printStr   
19AA   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
19B6   CD 58 09               CALL   printStr   
19B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19C8   21 02 00               LD   HL,2   
19CB   CD A6 08               CALL   prtdec   
19CE   CD 58 09               CALL   printStr   
19D1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19DE   E1                     POP   hl   
19DF   E5                     PUSH   hl   
19E0   CD A6 08               CALL   prtdec   
19E3   E1                     POP   hl   
19E4   CD 58 09               CALL   printStr   
19E7   20 28 23 00            .CSTR   " (#"   
19EB   CD EE 08               CALL   prthex   
19EE   CD 58 09               CALL   printStr   
19F1   29 0D 0A 00            .CSTR   ")\r\n"   
19F5   76                     HALT      
19F6   00                     .CSTR      
19F7                EXPECTM_0_2152S43:      
19F7   E1                     POP   HL   
19F8                          ;*Macro unroll:  test "7 x= x 3 /= x", 2
19F8   31 80 39               LD   SP,STACK   
19FB   CD 72 09               CALL   init   
19FE   CD 18 38               CALL   execStr   
1A01   37 20 78 3D 20 78 20 33 20 2F 3D 20 78 00 .CSTR   "7 x= x 3 /= x"   
1A0F                          ;*Macro unroll:  expect "7 x= x 3 /= x",2
1A0F   E1                     POP   HL   
1A10   E5                     PUSH   HL   
1A11   11 02 00               LD   DE,2   
1A14   B7                     OR   A   
1A15   ED 52                  SBC   HL,DE   
1A17   7D                     LD   A,L   
1A18   B4                     OR   H   
1A19   28 58                  JR   Z,expectM_0_2153S43   
1A1B   CD 58 09               CALL   printStr   
1A1E   43 6F 64 65 3A 20 37 20 78 3D 20 78 20 33 20 2F 3D 20 78 00 .CSTR   "Code: ","7 x= x 3 /= x"   
1A32   CD 58 09               CALL   printStr   
1A35   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A44   21 02 00               LD   HL,2   
1A47   CD A6 08               CALL   prtdec   
1A4A   CD 58 09               CALL   printStr   
1A4D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A5A   E1                     POP   hl   
1A5B   E5                     PUSH   hl   
1A5C   CD A6 08               CALL   prtdec   
1A5F   E1                     POP   hl   
1A60   CD 58 09               CALL   printStr   
1A63   20 28 23 00            .CSTR   " (#"   
1A67   CD EE 08               CALL   prthex   
1A6A   CD 58 09               CALL   printStr   
1A6D   29 0D 0A 00            .CSTR   ")\r\n"   
1A71   76                     HALT      
1A72   00                     .CSTR      
1A73                EXPECTM_0_2153S43:      
1A73   E1                     POP   HL   
1A74                          ;*Macro unroll:  test "7 3 / _", 1
1A74   31 80 39               LD   SP,STACK   
1A77   CD 72 09               CALL   init   
1A7A   CD 18 38               CALL   execStr   
1A7D   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
1A85                          ;*Macro unroll:  expect "7 3 / _",1
1A85   E1                     POP   HL   
1A86   E5                     PUSH   HL   
1A87   11 01 00               LD   DE,1   
1A8A   B7                     OR   A   
1A8B   ED 52                  SBC   HL,DE   
1A8D   7D                     LD   A,L   
1A8E   B4                     OR   H   
1A8F   28 52                  JR   Z,expectM_0_2154S43   
1A91   CD 58 09               CALL   printStr   
1A94   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
1AA2   CD 58 09               CALL   printStr   
1AA5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AB4   21 01 00               LD   HL,1   
1AB7   CD A6 08               CALL   prtdec   
1ABA   CD 58 09               CALL   printStr   
1ABD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1ACA   E1                     POP   hl   
1ACB   E5                     PUSH   hl   
1ACC   CD A6 08               CALL   prtdec   
1ACF   E1                     POP   hl   
1AD0   CD 58 09               CALL   printStr   
1AD3   20 28 23 00            .CSTR   " (#"   
1AD7   CD EE 08               CALL   prthex   
1ADA   CD 58 09               CALL   printStr   
1ADD   29 0D 0A 00            .CSTR   ")\r\n"   
1AE1   76                     HALT      
1AE2   00                     .CSTR      
1AE3                EXPECTM_0_2154S43:      
1AE3   E1                     POP   HL   
1AE4                          ;*Macro unroll:  test "7 3 /", 2
1AE4   31 80 39               LD   SP,STACK   
1AE7   CD 72 09               CALL   init   
1AEA   CD 18 38               CALL   execStr   
1AED   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1AF3                          ;*Macro unroll:  expect "7 3 /",2
1AF3   E1                     POP   HL   
1AF4   E5                     PUSH   HL   
1AF5   11 02 00               LD   DE,2   
1AF8   B7                     OR   A   
1AF9   ED 52                  SBC   HL,DE   
1AFB   7D                     LD   A,L   
1AFC   B4                     OR   H   
1AFD   28 50                  JR   Z,expectM_0_2155S43   
1AFF   CD 58 09               CALL   printStr   
1B02   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1B0E   CD 58 09               CALL   printStr   
1B11   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B20   21 02 00               LD   HL,2   
1B23   CD A6 08               CALL   prtdec   
1B26   CD 58 09               CALL   printStr   
1B29   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B36   E1                     POP   hl   
1B37   E5                     PUSH   hl   
1B38   CD A6 08               CALL   prtdec   
1B3B   E1                     POP   hl   
1B3C   CD 58 09               CALL   printStr   
1B3F   20 28 23 00            .CSTR   " (#"   
1B43   CD EE 08               CALL   prthex   
1B46   CD 58 09               CALL   printStr   
1B49   29 0D 0A 00            .CSTR   ")\r\n"   
1B4D   76                     HALT      
1B4E   00                     .CSTR      
1B4F                EXPECTM_0_2155S43:      
1B4F   E1                     POP   HL   
1B50                          ;*Macro unroll:  test "2 3 ==", FALSE
1B50   31 80 39               LD   SP,STACK   
1B53   CD 72 09               CALL   init   
1B56   CD 18 38               CALL   execStr   
1B59   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1B60                          ;*Macro unroll:  expect "2 3 ==",FALSE
1B60   E1                     POP   HL   
1B61   E5                     PUSH   HL   
1B62   11 00 00               LD   DE,FALSE   
1B65   B7                     OR   A   
1B66   ED 52                  SBC   HL,DE   
1B68   7D                     LD   A,L   
1B69   B4                     OR   H   
1B6A   28 51                  JR   Z,expectM_0_2156S43   
1B6C   CD 58 09               CALL   printStr   
1B6F   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1B7C   CD 58 09               CALL   printStr   
1B7F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B8E   21 00 00               LD   HL,FALSE   
1B91   CD A6 08               CALL   prtdec   
1B94   CD 58 09               CALL   printStr   
1B97   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BA4   E1                     POP   hl   
1BA5   E5                     PUSH   hl   
1BA6   CD A6 08               CALL   prtdec   
1BA9   E1                     POP   hl   
1BAA   CD 58 09               CALL   printStr   
1BAD   20 28 23 00            .CSTR   " (#"   
1BB1   CD EE 08               CALL   prthex   
1BB4   CD 58 09               CALL   printStr   
1BB7   29 0D 0A 00            .CSTR   ")\r\n"   
1BBB   76                     HALT      
1BBC   00                     .CSTR      
1BBD                EXPECTM_0_2156S43:      
1BBD   E1                     POP   HL   
1BBE                          ;*Macro unroll:  test "3 3 ==", TRUE
1BBE   31 80 39               LD   SP,STACK   
1BC1   CD 72 09               CALL   init   
1BC4   CD 18 38               CALL   execStr   
1BC7   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1BCE                          ;*Macro unroll:  expect "3 3 ==",TRUE
1BCE   E1                     POP   HL   
1BCF   E5                     PUSH   HL   
1BD0   11 FF FF               LD   DE,TRUE   
1BD3   B7                     OR   A   
1BD4   ED 52                  SBC   HL,DE   
1BD6   7D                     LD   A,L   
1BD7   B4                     OR   H   
1BD8   28 51                  JR   Z,expectM_0_2157S43   
1BDA   CD 58 09               CALL   printStr   
1BDD   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1BEA   CD 58 09               CALL   printStr   
1BED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BFC   21 FF FF               LD   HL,TRUE   
1BFF   CD A6 08               CALL   prtdec   
1C02   CD 58 09               CALL   printStr   
1C05   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C12   E1                     POP   hl   
1C13   E5                     PUSH   hl   
1C14   CD A6 08               CALL   prtdec   
1C17   E1                     POP   hl   
1C18   CD 58 09               CALL   printStr   
1C1B   20 28 23 00            .CSTR   " (#"   
1C1F   CD EE 08               CALL   prthex   
1C22   CD 58 09               CALL   printStr   
1C25   29 0D 0A 00            .CSTR   ")\r\n"   
1C29   76                     HALT      
1C2A   00                     .CSTR      
1C2B                EXPECTM_0_2157S43:      
1C2B   E1                     POP   HL   
1C2C                          ;*Macro unroll:  test "1 2 <", TRUE
1C2C   31 80 39               LD   SP,STACK   
1C2F   CD 72 09               CALL   init   
1C32   CD 18 38               CALL   execStr   
1C35   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1C3B                          ;*Macro unroll:  expect "1 2 <",TRUE
1C3B   E1                     POP   HL   
1C3C   E5                     PUSH   HL   
1C3D   11 FF FF               LD   DE,TRUE   
1C40   B7                     OR   A   
1C41   ED 52                  SBC   HL,DE   
1C43   7D                     LD   A,L   
1C44   B4                     OR   H   
1C45   28 50                  JR   Z,expectM_0_2158S43   
1C47   CD 58 09               CALL   printStr   
1C4A   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1C56   CD 58 09               CALL   printStr   
1C59   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C68   21 FF FF               LD   HL,TRUE   
1C6B   CD A6 08               CALL   prtdec   
1C6E   CD 58 09               CALL   printStr   
1C71   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C7E   E1                     POP   hl   
1C7F   E5                     PUSH   hl   
1C80   CD A6 08               CALL   prtdec   
1C83   E1                     POP   hl   
1C84   CD 58 09               CALL   printStr   
1C87   20 28 23 00            .CSTR   " (#"   
1C8B   CD EE 08               CALL   prthex   
1C8E   CD 58 09               CALL   printStr   
1C91   29 0D 0A 00            .CSTR   ")\r\n"   
1C95   76                     HALT      
1C96   00                     .CSTR      
1C97                EXPECTM_0_2158S43:      
1C97   E1                     POP   HL   
1C98                          ;*Macro unroll:  test "2 1 <", FALSE
1C98   31 80 39               LD   SP,STACK   
1C9B   CD 72 09               CALL   init   
1C9E   CD 18 38               CALL   execStr   
1CA1   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1CA7                          ;*Macro unroll:  expect "2 1 <",FALSE
1CA7   E1                     POP   HL   
1CA8   E5                     PUSH   HL   
1CA9   11 00 00               LD   DE,FALSE   
1CAC   B7                     OR   A   
1CAD   ED 52                  SBC   HL,DE   
1CAF   7D                     LD   A,L   
1CB0   B4                     OR   H   
1CB1   28 50                  JR   Z,expectM_0_2159S43   
1CB3   CD 58 09               CALL   printStr   
1CB6   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1CC2   CD 58 09               CALL   printStr   
1CC5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CD4   21 00 00               LD   HL,FALSE   
1CD7   CD A6 08               CALL   prtdec   
1CDA   CD 58 09               CALL   printStr   
1CDD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CEA   E1                     POP   hl   
1CEB   E5                     PUSH   hl   
1CEC   CD A6 08               CALL   prtdec   
1CEF   E1                     POP   hl   
1CF0   CD 58 09               CALL   printStr   
1CF3   20 28 23 00            .CSTR   " (#"   
1CF7   CD EE 08               CALL   prthex   
1CFA   CD 58 09               CALL   printStr   
1CFD   29 0D 0A 00            .CSTR   ")\r\n"   
1D01   76                     HALT      
1D02   00                     .CSTR      
1D03                EXPECTM_0_2159S43:      
1D03   E1                     POP   HL   
1D04                          ;*Macro unroll:  test "2 3 <", TRUE
1D04   31 80 39               LD   SP,STACK   
1D07   CD 72 09               CALL   init   
1D0A   CD 18 38               CALL   execStr   
1D0D   32 20 33 20 3C 00      .CSTR   "2 3 <"   
1D13                          ;*Macro unroll:  expect "2 3 <",TRUE
1D13   E1                     POP   HL   
1D14   E5                     PUSH   HL   
1D15   11 FF FF               LD   DE,TRUE   
1D18   B7                     OR   A   
1D19   ED 52                  SBC   HL,DE   
1D1B   7D                     LD   A,L   
1D1C   B4                     OR   H   
1D1D   28 50                  JR   Z,expectM_0_2160S43   
1D1F   CD 58 09               CALL   printStr   
1D22   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
1D2E   CD 58 09               CALL   printStr   
1D31   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D40   21 FF FF               LD   HL,TRUE   
1D43   CD A6 08               CALL   prtdec   
1D46   CD 58 09               CALL   printStr   
1D49   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D56   E1                     POP   hl   
1D57   E5                     PUSH   hl   
1D58   CD A6 08               CALL   prtdec   
1D5B   E1                     POP   hl   
1D5C   CD 58 09               CALL   printStr   
1D5F   20 28 23 00            .CSTR   " (#"   
1D63   CD EE 08               CALL   prthex   
1D66   CD 58 09               CALL   printStr   
1D69   29 0D 0A 00            .CSTR   ")\r\n"   
1D6D   76                     HALT      
1D6E   00                     .CSTR      
1D6F                EXPECTM_0_2160S43:      
1D6F   E1                     POP   HL   
1D70                          ;*Macro unroll:  test "3 3 <", FALSE
1D70   31 80 39               LD   SP,STACK   
1D73   CD 72 09               CALL   init   
1D76   CD 18 38               CALL   execStr   
1D79   33 20 33 20 3C 00      .CSTR   "3 3 <"   
1D7F                          ;*Macro unroll:  expect "3 3 <",FALSE
1D7F   E1                     POP   HL   
1D80   E5                     PUSH   HL   
1D81   11 00 00               LD   DE,FALSE   
1D84   B7                     OR   A   
1D85   ED 52                  SBC   HL,DE   
1D87   7D                     LD   A,L   
1D88   B4                     OR   H   
1D89   28 50                  JR   Z,expectM_0_2161S43   
1D8B   CD 58 09               CALL   printStr   
1D8E   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
1D9A   CD 58 09               CALL   printStr   
1D9D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DAC   21 00 00               LD   HL,FALSE   
1DAF   CD A6 08               CALL   prtdec   
1DB2   CD 58 09               CALL   printStr   
1DB5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DC2   E1                     POP   hl   
1DC3   E5                     PUSH   hl   
1DC4   CD A6 08               CALL   prtdec   
1DC7   E1                     POP   hl   
1DC8   CD 58 09               CALL   printStr   
1DCB   20 28 23 00            .CSTR   " (#"   
1DCF   CD EE 08               CALL   prthex   
1DD2   CD 58 09               CALL   printStr   
1DD5   29 0D 0A 00            .CSTR   ")\r\n"   
1DD9   76                     HALT      
1DDA   00                     .CSTR      
1DDB                EXPECTM_0_2161S43:      
1DDB   E1                     POP   HL   
1DDC                          ;*Macro unroll:  test "1 2 >", FALSE
1DDC   31 80 39               LD   SP,STACK   
1DDF   CD 72 09               CALL   init   
1DE2   CD 18 38               CALL   execStr   
1DE5   31 20 32 20 3E 00      .CSTR   "1 2 >"   
1DEB                          ;*Macro unroll:  expect "1 2 >",FALSE
1DEB   E1                     POP   HL   
1DEC   E5                     PUSH   HL   
1DED   11 00 00               LD   DE,FALSE   
1DF0   B7                     OR   A   
1DF1   ED 52                  SBC   HL,DE   
1DF3   7D                     LD   A,L   
1DF4   B4                     OR   H   
1DF5   28 50                  JR   Z,expectM_0_2162S43   
1DF7   CD 58 09               CALL   printStr   
1DFA   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
1E06   CD 58 09               CALL   printStr   
1E09   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E18   21 00 00               LD   HL,FALSE   
1E1B   CD A6 08               CALL   prtdec   
1E1E   CD 58 09               CALL   printStr   
1E21   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E2E   E1                     POP   hl   
1E2F   E5                     PUSH   hl   
1E30   CD A6 08               CALL   prtdec   
1E33   E1                     POP   hl   
1E34   CD 58 09               CALL   printStr   
1E37   20 28 23 00            .CSTR   " (#"   
1E3B   CD EE 08               CALL   prthex   
1E3E   CD 58 09               CALL   printStr   
1E41   29 0D 0A 00            .CSTR   ")\r\n"   
1E45   76                     HALT      
1E46   00                     .CSTR      
1E47                EXPECTM_0_2162S43:      
1E47   E1                     POP   HL   
1E48                          ;*Macro unroll:  test "2 1 >", TRUE
1E48   31 80 39               LD   SP,STACK   
1E4B   CD 72 09               CALL   init   
1E4E   CD 18 38               CALL   execStr   
1E51   32 20 31 20 3E 00      .CSTR   "2 1 >"   
1E57                          ;*Macro unroll:  expect "2 1 >",TRUE
1E57   E1                     POP   HL   
1E58   E5                     PUSH   HL   
1E59   11 FF FF               LD   DE,TRUE   
1E5C   B7                     OR   A   
1E5D   ED 52                  SBC   HL,DE   
1E5F   7D                     LD   A,L   
1E60   B4                     OR   H   
1E61   28 50                  JR   Z,expectM_0_2163S43   
1E63   CD 58 09               CALL   printStr   
1E66   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
1E72   CD 58 09               CALL   printStr   
1E75   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E84   21 FF FF               LD   HL,TRUE   
1E87   CD A6 08               CALL   prtdec   
1E8A   CD 58 09               CALL   printStr   
1E8D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E9A   E1                     POP   hl   
1E9B   E5                     PUSH   hl   
1E9C   CD A6 08               CALL   prtdec   
1E9F   E1                     POP   hl   
1EA0   CD 58 09               CALL   printStr   
1EA3   20 28 23 00            .CSTR   " (#"   
1EA7   CD EE 08               CALL   prthex   
1EAA   CD 58 09               CALL   printStr   
1EAD   29 0D 0A 00            .CSTR   ")\r\n"   
1EB1   76                     HALT      
1EB2   00                     .CSTR      
1EB3                EXPECTM_0_2163S43:      
1EB3   E1                     POP   HL   
1EB4                          ;*Macro unroll:  test "3 3 >", FALSE
1EB4   31 80 39               LD   SP,STACK   
1EB7   CD 72 09               CALL   init   
1EBA   CD 18 38               CALL   execStr   
1EBD   33 20 33 20 3E 00      .CSTR   "3 3 >"   
1EC3                          ;*Macro unroll:  expect "3 3 >",FALSE
1EC3   E1                     POP   HL   
1EC4   E5                     PUSH   HL   
1EC5   11 00 00               LD   DE,FALSE   
1EC8   B7                     OR   A   
1EC9   ED 52                  SBC   HL,DE   
1ECB   7D                     LD   A,L   
1ECC   B4                     OR   H   
1ECD   28 50                  JR   Z,expectM_0_2164S43   
1ECF   CD 58 09               CALL   printStr   
1ED2   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
1EDE   CD 58 09               CALL   printStr   
1EE1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EF0   21 00 00               LD   HL,FALSE   
1EF3   CD A6 08               CALL   prtdec   
1EF6   CD 58 09               CALL   printStr   
1EF9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F06   E1                     POP   hl   
1F07   E5                     PUSH   hl   
1F08   CD A6 08               CALL   prtdec   
1F0B   E1                     POP   hl   
1F0C   CD 58 09               CALL   printStr   
1F0F   20 28 23 00            .CSTR   " (#"   
1F13   CD EE 08               CALL   prthex   
1F16   CD 58 09               CALL   printStr   
1F19   29 0D 0A 00            .CSTR   ")\r\n"   
1F1D   76                     HALT      
1F1E   00                     .CSTR      
1F1F                EXPECTM_0_2164S43:      
1F1F   E1                     POP   HL   
1F20                          ;*Macro unroll:  test "4 3 >", TRUE
1F20   31 80 39               LD   SP,STACK   
1F23   CD 72 09               CALL   init   
1F26   CD 18 38               CALL   execStr   
1F29   34 20 33 20 3E 00      .CSTR   "4 3 >"   
1F2F                          ;*Macro unroll:  expect "4 3 >",TRUE
1F2F   E1                     POP   HL   
1F30   E5                     PUSH   HL   
1F31   11 FF FF               LD   DE,TRUE   
1F34   B7                     OR   A   
1F35   ED 52                  SBC   HL,DE   
1F37   7D                     LD   A,L   
1F38   B4                     OR   H   
1F39   28 50                  JR   Z,expectM_0_2165S43   
1F3B   CD 58 09               CALL   printStr   
1F3E   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
1F4A   CD 58 09               CALL   printStr   
1F4D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F5C   21 FF FF               LD   HL,TRUE   
1F5F   CD A6 08               CALL   prtdec   
1F62   CD 58 09               CALL   printStr   
1F65   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F72   E1                     POP   hl   
1F73   E5                     PUSH   hl   
1F74   CD A6 08               CALL   prtdec   
1F77   E1                     POP   hl   
1F78   CD 58 09               CALL   printStr   
1F7B   20 28 23 00            .CSTR   " (#"   
1F7F   CD EE 08               CALL   prthex   
1F82   CD 58 09               CALL   printStr   
1F85   29 0D 0A 00            .CSTR   ")\r\n"   
1F89   76                     HALT      
1F8A   00                     .CSTR      
1F8B                EXPECTM_0_2165S43:      
1F8B   E1                     POP   HL   
1F8C                          ;*Macro unroll:  test "2 2 <=", TRUE
1F8C   31 80 39               LD   SP,STACK   
1F8F   CD 72 09               CALL   init   
1F92   CD 18 38               CALL   execStr   
1F95   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
1F9C                          ;*Macro unroll:  expect "2 2 <=",TRUE
1F9C   E1                     POP   HL   
1F9D   E5                     PUSH   HL   
1F9E   11 FF FF               LD   DE,TRUE   
1FA1   B7                     OR   A   
1FA2   ED 52                  SBC   HL,DE   
1FA4   7D                     LD   A,L   
1FA5   B4                     OR   H   
1FA6   28 51                  JR   Z,expectM_0_2166S43   
1FA8   CD 58 09               CALL   printStr   
1FAB   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
1FB8   CD 58 09               CALL   printStr   
1FBB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FCA   21 FF FF               LD   HL,TRUE   
1FCD   CD A6 08               CALL   prtdec   
1FD0   CD 58 09               CALL   printStr   
1FD3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FE0   E1                     POP   hl   
1FE1   E5                     PUSH   hl   
1FE2   CD A6 08               CALL   prtdec   
1FE5   E1                     POP   hl   
1FE6   CD 58 09               CALL   printStr   
1FE9   20 28 23 00            .CSTR   " (#"   
1FED   CD EE 08               CALL   prthex   
1FF0   CD 58 09               CALL   printStr   
1FF3   29 0D 0A 00            .CSTR   ")\r\n"   
1FF7   76                     HALT      
1FF8   00                     .CSTR      
1FF9                EXPECTM_0_2166S43:      
1FF9   E1                     POP   HL   
1FFA                          ;*Macro unroll:  test "2 2 >=", TRUE
1FFA   31 80 39               LD   SP,STACK   
1FFD   CD 72 09               CALL   init   
2000   CD 18 38               CALL   execStr   
2003   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
200A                          ;*Macro unroll:  expect "2 2 >=",TRUE
200A   E1                     POP   HL   
200B   E5                     PUSH   HL   
200C   11 FF FF               LD   DE,TRUE   
200F   B7                     OR   A   
2010   ED 52                  SBC   HL,DE   
2012   7D                     LD   A,L   
2013   B4                     OR   H   
2014   28 51                  JR   Z,expectM_0_2167S43   
2016   CD 58 09               CALL   printStr   
2019   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2026   CD 58 09               CALL   printStr   
2029   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2038   21 FF FF               LD   HL,TRUE   
203B   CD A6 08               CALL   prtdec   
203E   CD 58 09               CALL   printStr   
2041   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
204E   E1                     POP   hl   
204F   E5                     PUSH   hl   
2050   CD A6 08               CALL   prtdec   
2053   E1                     POP   hl   
2054   CD 58 09               CALL   printStr   
2057   20 28 23 00            .CSTR   " (#"   
205B   CD EE 08               CALL   prthex   
205E   CD 58 09               CALL   printStr   
2061   29 0D 0A 00            .CSTR   ")\r\n"   
2065   76                     HALT      
2066   00                     .CSTR      
2067                EXPECTM_0_2167S43:      
2067   E1                     POP   HL   
2068                          ;*Macro unroll:  test "3 1 <<", 6
2068   31 80 39               LD   SP,STACK   
206B   CD 72 09               CALL   init   
206E   CD 18 38               CALL   execStr   
2071   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
2078                          ;*Macro unroll:  expect "3 1 <<",6
2078   E1                     POP   HL   
2079   E5                     PUSH   HL   
207A   11 06 00               LD   DE,6   
207D   B7                     OR   A   
207E   ED 52                  SBC   HL,DE   
2080   7D                     LD   A,L   
2081   B4                     OR   H   
2082   28 51                  JR   Z,expectM_0_2168S43   
2084   CD 58 09               CALL   printStr   
2087   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2094   CD 58 09               CALL   printStr   
2097   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20A6   21 06 00               LD   HL,6   
20A9   CD A6 08               CALL   prtdec   
20AC   CD 58 09               CALL   printStr   
20AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20BC   E1                     POP   hl   
20BD   E5                     PUSH   hl   
20BE   CD A6 08               CALL   prtdec   
20C1   E1                     POP   hl   
20C2   CD 58 09               CALL   printStr   
20C5   20 28 23 00            .CSTR   " (#"   
20C9   CD EE 08               CALL   prthex   
20CC   CD 58 09               CALL   printStr   
20CF   29 0D 0A 00            .CSTR   ")\r\n"   
20D3   76                     HALT      
20D4   00                     .CSTR      
20D5                EXPECTM_0_2168S43:      
20D5   E1                     POP   HL   
20D6                          ;*Macro unroll:  test "10 1 >>", 5
20D6   31 80 39               LD   SP,STACK   
20D9   CD 72 09               CALL   init   
20DC   CD 18 38               CALL   execStr   
20DF   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
20E7                          ;*Macro unroll:  expect "10 1 >>",5
20E7   E1                     POP   HL   
20E8   E5                     PUSH   HL   
20E9   11 05 00               LD   DE,5   
20EC   B7                     OR   A   
20ED   ED 52                  SBC   HL,DE   
20EF   7D                     LD   A,L   
20F0   B4                     OR   H   
20F1   28 52                  JR   Z,expectM_0_2169S43   
20F3   CD 58 09               CALL   printStr   
20F6   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2104   CD 58 09               CALL   printStr   
2107   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2116   21 05 00               LD   HL,5   
2119   CD A6 08               CALL   prtdec   
211C   CD 58 09               CALL   printStr   
211F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
212C   E1                     POP   hl   
212D   E5                     PUSH   hl   
212E   CD A6 08               CALL   prtdec   
2131   E1                     POP   hl   
2132   CD 58 09               CALL   printStr   
2135   20 28 23 00            .CSTR   " (#"   
2139   CD EE 08               CALL   prthex   
213C   CD 58 09               CALL   printStr   
213F   29 0D 0A 00            .CSTR   ")\r\n"   
2143   76                     HALT      
2144   00                     .CSTR      
2145                EXPECTM_0_2169S43:      
2145   E1                     POP   HL   
2146                          ;*Macro unroll:  test "1 x = x", 1
2146   31 80 39               LD   SP,STACK   
2149   CD 72 09               CALL   init   
214C   CD 18 38               CALL   execStr   
214F   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
2157                          ;*Macro unroll:  expect "1 x = x",1
2157   E1                     POP   HL   
2158   E5                     PUSH   HL   
2159   11 01 00               LD   DE,1   
215C   B7                     OR   A   
215D   ED 52                  SBC   HL,DE   
215F   7D                     LD   A,L   
2160   B4                     OR   H   
2161   28 52                  JR   Z,expectM_0_2170S43   
2163   CD 58 09               CALL   printStr   
2166   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2174   CD 58 09               CALL   printStr   
2177   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2186   21 01 00               LD   HL,1   
2189   CD A6 08               CALL   prtdec   
218C   CD 58 09               CALL   printStr   
218F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
219C   E1                     POP   hl   
219D   E5                     PUSH   hl   
219E   CD A6 08               CALL   prtdec   
21A1   E1                     POP   hl   
21A2   CD 58 09               CALL   printStr   
21A5   20 28 23 00            .CSTR   " (#"   
21A9   CD EE 08               CALL   prthex   
21AC   CD 58 09               CALL   printStr   
21AF   29 0D 0A 00            .CSTR   ")\r\n"   
21B3   76                     HALT      
21B4   00                     .CSTR      
21B5                EXPECTM_0_2170S43:      
21B5   E1                     POP   HL   
21B6                          ;*Macro unroll:  test "1{}:", 1
21B6   31 80 39               LD   SP,STACK   
21B9   CD 72 09               CALL   init   
21BC   CD 18 38               CALL   execStr   
21BF   31 7B 7D 3A 00         .CSTR   "1{}:"   
21C4                          ;*Macro unroll:  expect "1{}:",1
21C4   E1                     POP   HL   
21C5   E5                     PUSH   HL   
21C6   11 01 00               LD   DE,1   
21C9   B7                     OR   A   
21CA   ED 52                  SBC   HL,DE   
21CC   7D                     LD   A,L   
21CD   B4                     OR   H   
21CE   28 4F                  JR   Z,expectM_0_2171S43   
21D0   CD 58 09               CALL   printStr   
21D3   43 6F 64 65 3A 20 31 7B 7D 3A 00 .CSTR   "Code: ","1{}:"   
21DE   CD 58 09               CALL   printStr   
21E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21F0   21 01 00               LD   HL,1   
21F3   CD A6 08               CALL   prtdec   
21F6   CD 58 09               CALL   printStr   
21F9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2206   E1                     POP   hl   
2207   E5                     PUSH   hl   
2208   CD A6 08               CALL   prtdec   
220B   E1                     POP   hl   
220C   CD 58 09               CALL   printStr   
220F   20 28 23 00            .CSTR   " (#"   
2213   CD EE 08               CALL   prthex   
2216   CD 58 09               CALL   printStr   
2219   29 0D 0A 00            .CSTR   ")\r\n"   
221D   76                     HALT      
221E   00                     .CSTR      
221F                EXPECTM_0_2171S43:      
221F   E1                     POP   HL   
2220                          ;*Macro unroll:  test "{1}:", 1
2220   31 80 39               LD   SP,STACK   
2223   CD 72 09               CALL   init   
2226   CD 18 38               CALL   execStr   
2229   7B 31 7D 3A 00         .CSTR   "{1}:"   
222E                          ;*Macro unroll:  expect "{1}:",1
222E   E1                     POP   HL   
222F   E5                     PUSH   HL   
2230   11 01 00               LD   DE,1   
2233   B7                     OR   A   
2234   ED 52                  SBC   HL,DE   
2236   7D                     LD   A,L   
2237   B4                     OR   H   
2238   28 4F                  JR   Z,expectM_0_2172S43   
223A   CD 58 09               CALL   printStr   
223D   43 6F 64 65 3A 20 7B 31 7D 3A 00 .CSTR   "Code: ","{1}:"   
2248   CD 58 09               CALL   printStr   
224B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
225A   21 01 00               LD   HL,1   
225D   CD A6 08               CALL   prtdec   
2260   CD 58 09               CALL   printStr   
2263   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2270   E1                     POP   hl   
2271   E5                     PUSH   hl   
2272   CD A6 08               CALL   prtdec   
2275   E1                     POP   hl   
2276   CD 58 09               CALL   printStr   
2279   20 28 23 00            .CSTR   " (#"   
227D   CD EE 08               CALL   prthex   
2280   CD 58 09               CALL   printStr   
2283   29 0D 0A 00            .CSTR   ")\r\n"   
2287   76                     HALT      
2288   00                     .CSTR      
2289                EXPECTM_0_2172S43:      
2289   E1                     POP   HL   
228A                          ;*Macro unroll:  test "{{1}:}:", 1
228A   31 80 39               LD   SP,STACK   
228D   CD 72 09               CALL   init   
2290   CD 18 38               CALL   execStr   
2293   7B 7B 31 7D 3A 7D 3A 00 .CSTR   "{{1}:}:"   
229B                          ;*Macro unroll:  expect "{{1}:}:",1
229B   E1                     POP   HL   
229C   E5                     PUSH   HL   
229D   11 01 00               LD   DE,1   
22A0   B7                     OR   A   
22A1   ED 52                  SBC   HL,DE   
22A3   7D                     LD   A,L   
22A4   B4                     OR   H   
22A5   28 52                  JR   Z,expectM_0_2173S43   
22A7   CD 58 09               CALL   printStr   
22AA   43 6F 64 65 3A 20 7B 7B 31 7D 3A 7D 3A 00 .CSTR   "Code: ","{{1}:}:"   
22B8   CD 58 09               CALL   printStr   
22BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22CA   21 01 00               LD   HL,1   
22CD   CD A6 08               CALL   prtdec   
22D0   CD 58 09               CALL   printStr   
22D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22E0   E1                     POP   hl   
22E1   E5                     PUSH   hl   
22E2   CD A6 08               CALL   prtdec   
22E5   E1                     POP   hl   
22E6   CD 58 09               CALL   printStr   
22E9   20 28 23 00            .CSTR   " (#"   
22ED   CD EE 08               CALL   prthex   
22F0   CD 58 09               CALL   printStr   
22F3   29 0D 0A 00            .CSTR   ")\r\n"   
22F7   76                     HALT      
22F8   00                     .CSTR      
22F9                EXPECTM_0_2173S43:      
22F9   E1                     POP   HL   
22FA                          ;*Macro unroll:  test "{{{1}:}:}:", 1
22FA   31 80 39               LD   SP,STACK   
22FD   CD 72 09               CALL   init   
2300   CD 18 38               CALL   execStr   
2303   7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "{{{1}:}:}:"   
230E                          ;*Macro unroll:  expect "{{{1}:}:}:",1
230E   E1                     POP   HL   
230F   E5                     PUSH   HL   
2310   11 01 00               LD   DE,1   
2313   B7                     OR   A   
2314   ED 52                  SBC   HL,DE   
2316   7D                     LD   A,L   
2317   B4                     OR   H   
2318   28 55                  JR   Z,expectM_0_2174S43   
231A   CD 58 09               CALL   printStr   
231D   43 6F 64 65 3A 20 7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "Code: ","{{{1}:}:}:"   
232E   CD 58 09               CALL   printStr   
2331   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2340   21 01 00               LD   HL,1   
2343   CD A6 08               CALL   prtdec   
2346   CD 58 09               CALL   printStr   
2349   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2356   E1                     POP   hl   
2357   E5                     PUSH   hl   
2358   CD A6 08               CALL   prtdec   
235B   E1                     POP   hl   
235C   CD 58 09               CALL   printStr   
235F   20 28 23 00            .CSTR   " (#"   
2363   CD EE 08               CALL   prthex   
2366   CD 58 09               CALL   printStr   
2369   29 0D 0A 00            .CSTR   ")\r\n"   
236D   76                     HALT      
236E   00                     .CSTR      
236F                EXPECTM_0_2174S43:      
236F   E1                     POP   HL   
2370                          ;*Macro unroll:  test "5 \\F {10} ?", 5
2370   31 80 39               LD   SP,STACK   
2373   CD 72 09               CALL   init   
2376   CD 18 38               CALL   execStr   
2379   35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "5 \\F {10} ?"   
2385                          ;*Macro unroll:  expect "5 \\F {10} ?",5
2385   E1                     POP   HL   
2386   E5                     PUSH   HL   
2387   11 05 00               LD   DE,5   
238A   B7                     OR   A   
238B   ED 52                  SBC   HL,DE   
238D   7D                     LD   A,L   
238E   B4                     OR   H   
238F   28 56                  JR   Z,expectM_0_2175S43   
2391   CD 58 09               CALL   printStr   
2394   43 6F 64 65 3A 20 35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 \\F {10} ?"   
23A6   CD 58 09               CALL   printStr   
23A9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23B8   21 05 00               LD   HL,5   
23BB   CD A6 08               CALL   prtdec   
23BE   CD 58 09               CALL   printStr   
23C1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23CE   E1                     POP   hl   
23CF   E5                     PUSH   hl   
23D0   CD A6 08               CALL   prtdec   
23D3   E1                     POP   hl   
23D4   CD 58 09               CALL   printStr   
23D7   20 28 23 00            .CSTR   " (#"   
23DB   CD EE 08               CALL   prthex   
23DE   CD 58 09               CALL   printStr   
23E1   29 0D 0A 00            .CSTR   ")\r\n"   
23E5   76                     HALT      
23E6   00                     .CSTR      
23E7                EXPECTM_0_2175S43:      
23E7   E1                     POP   HL   
23E8                          ;*Macro unroll:  test "5 \\T {10} ? +", 15
23E8   31 80 39               LD   SP,STACK   
23EB   CD 72 09               CALL   init   
23EE   CD 18 38               CALL   execStr   
23F1   35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 \\T {10} ? +"   
23FF                          ;*Macro unroll:  expect "5 \\T {10} ? +",15
23FF   E1                     POP   HL   
2400   E5                     PUSH   HL   
2401   11 0F 00               LD   DE,15   
2404   B7                     OR   A   
2405   ED 52                  SBC   HL,DE   
2407   7D                     LD   A,L   
2408   B4                     OR   H   
2409   28 58                  JR   Z,expectM_0_2176S43   
240B   CD 58 09               CALL   printStr   
240E   43 6F 64 65 3A 20 35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 \\T {10} ? +"   
2422   CD 58 09               CALL   printStr   
2425   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2434   21 0F 00               LD   HL,15   
2437   CD A6 08               CALL   prtdec   
243A   CD 58 09               CALL   printStr   
243D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
244A   E1                     POP   hl   
244B   E5                     PUSH   hl   
244C   CD A6 08               CALL   prtdec   
244F   E1                     POP   hl   
2450   CD 58 09               CALL   printStr   
2453   20 28 23 00            .CSTR   " (#"   
2457   CD EE 08               CALL   prthex   
245A   CD 58 09               CALL   printStr   
245D   29 0D 0A 00            .CSTR   ")\r\n"   
2461   76                     HALT      
2462   00                     .CSTR      
2463                EXPECTM_0_2176S43:      
2463   E1                     POP   HL   
2464                          ;*Macro unroll:  test "1 \\F {10} {20} ?? +", 21
2464   31 80 39               LD   SP,STACK   
2467   CD 72 09               CALL   init   
246A   CD 18 38               CALL   execStr   
246D   31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\F {10} {20} ?? +"   
2481                          ;*Macro unroll:  expect "1 \\F {10} {20} ?? +",21
2481   E1                     POP   HL   
2482   E5                     PUSH   HL   
2483   11 15 00               LD   DE,21   
2486   B7                     OR   A   
2487   ED 52                  SBC   HL,DE   
2489   7D                     LD   A,L   
248A   B4                     OR   H   
248B   28 5E                  JR   Z,expectM_0_2177S43   
248D   CD 58 09               CALL   printStr   
2490   43 6F 64 65 3A 20 31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\F {10} {20} ?? +"   
24AA   CD 58 09               CALL   printStr   
24AD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24BC   21 15 00               LD   HL,21   
24BF   CD A6 08               CALL   prtdec   
24C2   CD 58 09               CALL   printStr   
24C5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24D2   E1                     POP   hl   
24D3   E5                     PUSH   hl   
24D4   CD A6 08               CALL   prtdec   
24D7   E1                     POP   hl   
24D8   CD 58 09               CALL   printStr   
24DB   20 28 23 00            .CSTR   " (#"   
24DF   CD EE 08               CALL   prthex   
24E2   CD 58 09               CALL   printStr   
24E5   29 0D 0A 00            .CSTR   ")\r\n"   
24E9   76                     HALT      
24EA   00                     .CSTR      
24EB                EXPECTM_0_2177S43:      
24EB   E1                     POP   HL   
24EC                          ;*Macro unroll:  test "1 \\T {10} {20} ?? +", 11
24EC   31 80 39               LD   SP,STACK   
24EF   CD 72 09               CALL   init   
24F2   CD 18 38               CALL   execStr   
24F5   31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\T {10} {20} ?? +"   
2509                          ;*Macro unroll:  expect "1 \\T {10} {20} ?? +",11
2509   E1                     POP   HL   
250A   E5                     PUSH   HL   
250B   11 0B 00               LD   DE,11   
250E   B7                     OR   A   
250F   ED 52                  SBC   HL,DE   
2511   7D                     LD   A,L   
2512   B4                     OR   H   
2513   28 5E                  JR   Z,expectM_0_2178S43   
2515   CD 58 09               CALL   printStr   
2518   43 6F 64 65 3A 20 31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\T {10} {20} ?? +"   
2532   CD 58 09               CALL   printStr   
2535   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2544   21 0B 00               LD   HL,11   
2547   CD A6 08               CALL   prtdec   
254A   CD 58 09               CALL   printStr   
254D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
255A   E1                     POP   hl   
255B   E5                     PUSH   hl   
255C   CD A6 08               CALL   prtdec   
255F   E1                     POP   hl   
2560   CD 58 09               CALL   printStr   
2563   20 28 23 00            .CSTR   " (#"   
2567   CD EE 08               CALL   prthex   
256A   CD 58 09               CALL   printStr   
256D   29 0D 0A 00            .CSTR   ")\r\n"   
2571   76                     HALT      
2572   00                     .CSTR      
2573                EXPECTM_0_2178S43:      
2573   E1                     POP   HL   
2574                          ;*Macro unroll:  test "() -2%", $0000
2574   31 80 39               LD   SP,STACK   
2577   CD 72 09               CALL   init   
257A   CD 18 38               CALL   execStr   
257D   28 29 20 2D 32 25 00   .CSTR   "() -2%"   
2584                          ;*Macro unroll:  expect "() -2%",$0000
2584   E1                     POP   HL   
2585   E5                     PUSH   HL   
2586   11 00 00               LD   DE,$0000   
2589   B7                     OR   A   
258A   ED 52                  SBC   HL,DE   
258C   7D                     LD   A,L   
258D   B4                     OR   H   
258E   28 51                  JR   Z,expectM_0_2179S43   
2590   CD 58 09               CALL   printStr   
2593   43 6F 64 65 3A 20 28 29 20 2D 32 25 00 .CSTR   "Code: ","() -2%"   
25A0   CD 58 09               CALL   printStr   
25A3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25B2   21 00 00               LD   HL,$0000   
25B5   CD A6 08               CALL   prtdec   
25B8   CD 58 09               CALL   printStr   
25BB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25C8   E1                     POP   hl   
25C9   E5                     PUSH   hl   
25CA   CD A6 08               CALL   prtdec   
25CD   E1                     POP   hl   
25CE   CD 58 09               CALL   printStr   
25D1   20 28 23 00            .CSTR   " (#"   
25D5   CD EE 08               CALL   prthex   
25D8   CD 58 09               CALL   printStr   
25DB   29 0D 0A 00            .CSTR   ")\r\n"   
25DF   76                     HALT      
25E0   00                     .CSTR      
25E1                EXPECTM_0_2179S43:      
25E1   E1                     POP   HL   
25E2                          ;*Macro unroll:  test "(a) -1%", $0001
25E2   31 80 39               LD   SP,STACK   
25E5   CD 72 09               CALL   init   
25E8   CD 18 38               CALL   execStr   
25EB   28 61 29 20 2D 31 25 00 .CSTR   "(a) -1%"   
25F3                          ;*Macro unroll:  expect "(a) -1%",$0001
25F3   E1                     POP   HL   
25F4   E5                     PUSH   HL   
25F5   11 01 00               LD   DE,$0001   
25F8   B7                     OR   A   
25F9   ED 52                  SBC   HL,DE   
25FB   7D                     LD   A,L   
25FC   B4                     OR   H   
25FD   28 52                  JR   Z,expectM_0_2180S43   
25FF   CD 58 09               CALL   printStr   
2602   43 6F 64 65 3A 20 28 61 29 20 2D 31 25 00 .CSTR   "Code: ","(a) -1%"   
2610   CD 58 09               CALL   printStr   
2613   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2622   21 01 00               LD   HL,$0001   
2625   CD A6 08               CALL   prtdec   
2628   CD 58 09               CALL   printStr   
262B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2638   E1                     POP   hl   
2639   E5                     PUSH   hl   
263A   CD A6 08               CALL   prtdec   
263D   E1                     POP   hl   
263E   CD 58 09               CALL   printStr   
2641   20 28 23 00            .CSTR   " (#"   
2645   CD EE 08               CALL   prthex   
2648   CD 58 09               CALL   printStr   
264B   29 0D 0A 00            .CSTR   ")\r\n"   
264F   76                     HALT      
2650   00                     .CSTR      
2651                EXPECTM_0_2180S43:      
2651   E1                     POP   HL   
2652                          ;*Macro unroll:  test "(a:) -1%", $0001
2652   31 80 39               LD   SP,STACK   
2655   CD 72 09               CALL   init   
2658   CD 18 38               CALL   execStr   
265B   28 61 3A 29 20 2D 31 25 00 .CSTR   "(a:) -1%"   
2664                          ;*Macro unroll:  expect "(a:) -1%",$0001
2664   E1                     POP   HL   
2665   E5                     PUSH   HL   
2666   11 01 00               LD   DE,$0001   
2669   B7                     OR   A   
266A   ED 52                  SBC   HL,DE   
266C   7D                     LD   A,L   
266D   B4                     OR   H   
266E   28 53                  JR   Z,expectM_0_2181S43   
2670   CD 58 09               CALL   printStr   
2673   43 6F 64 65 3A 20 28 61 3A 29 20 2D 31 25 00 .CSTR   "Code: ","(a:) -1%"   
2682   CD 58 09               CALL   printStr   
2685   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2694   21 01 00               LD   HL,$0001   
2697   CD A6 08               CALL   prtdec   
269A   CD 58 09               CALL   printStr   
269D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26AA   E1                     POP   hl   
26AB   E5                     PUSH   hl   
26AC   CD A6 08               CALL   prtdec   
26AF   E1                     POP   hl   
26B0   CD 58 09               CALL   printStr   
26B3   20 28 23 00            .CSTR   " (#"   
26B7   CD EE 08               CALL   prthex   
26BA   CD 58 09               CALL   printStr   
26BD   29 0D 0A 00            .CSTR   ")\r\n"   
26C1   76                     HALT      
26C2   00                     .CSTR      
26C3                EXPECTM_0_2181S43:      
26C3   E1                     POP   HL   
26C4                          ;*Macro unroll:  test "(a:b) -1%", $0102
26C4   31 80 39               LD   SP,STACK   
26C7   CD 72 09               CALL   init   
26CA   CD 18 38               CALL   execStr   
26CD   28 61 3A 62 29 20 2D 31 25 00 .CSTR   "(a:b) -1%"   
26D7                          ;*Macro unroll:  expect "(a:b) -1%",$0102
26D7   E1                     POP   HL   
26D8   E5                     PUSH   HL   
26D9   11 02 01               LD   DE,$0102   
26DC   B7                     OR   A   
26DD   ED 52                  SBC   HL,DE   
26DF   7D                     LD   A,L   
26E0   B4                     OR   H   
26E1   28 54                  JR   Z,expectM_0_2182S43   
26E3   CD 58 09               CALL   printStr   
26E6   43 6F 64 65 3A 20 28 61 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(a:b) -1%"   
26F6   CD 58 09               CALL   printStr   
26F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2708   21 02 01               LD   HL,$0102   
270B   CD A6 08               CALL   prtdec   
270E   CD 58 09               CALL   printStr   
2711   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
271E   E1                     POP   hl   
271F   E5                     PUSH   hl   
2720   CD A6 08               CALL   prtdec   
2723   E1                     POP   hl   
2724   CD 58 09               CALL   printStr   
2727   20 28 23 00            .CSTR   " (#"   
272B   CD EE 08               CALL   prthex   
272E   CD 58 09               CALL   printStr   
2731   29 0D 0A 00            .CSTR   ")\r\n"   
2735   76                     HALT      
2736   00                     .CSTR      
2737                EXPECTM_0_2182S43:      
2737   E1                     POP   HL   
2738                          ;*Macro unroll:  test "(:b) -1%", $0101
2738   31 80 39               LD   SP,STACK   
273B   CD 72 09               CALL   init   
273E   CD 18 38               CALL   execStr   
2741   28 3A 62 29 20 2D 31 25 00 .CSTR   "(:b) -1%"   
274A                          ;*Macro unroll:  expect "(:b) -1%",$0101
274A   E1                     POP   HL   
274B   E5                     PUSH   HL   
274C   11 01 01               LD   DE,$0101   
274F   B7                     OR   A   
2750   ED 52                  SBC   HL,DE   
2752   7D                     LD   A,L   
2753   B4                     OR   H   
2754   28 53                  JR   Z,expectM_0_2183S43   
2756   CD 58 09               CALL   printStr   
2759   43 6F 64 65 3A 20 28 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(:b) -1%"   
2768   CD 58 09               CALL   printStr   
276B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
277A   21 01 01               LD   HL,$0101   
277D   CD A6 08               CALL   prtdec   
2780   CD 58 09               CALL   printStr   
2783   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2790   E1                     POP   hl   
2791   E5                     PUSH   hl   
2792   CD A6 08               CALL   prtdec   
2795   E1                     POP   hl   
2796   CD 58 09               CALL   printStr   
2799   20 28 23 00            .CSTR   " (#"   
279D   CD EE 08               CALL   prthex   
27A0   CD 58 09               CALL   printStr   
27A3   29 0D 0A 00            .CSTR   ")\r\n"   
27A7   76                     HALT      
27A8   00                     .CSTR      
27A9                EXPECTM_0_2183S43:      
27A9   E1                     POP   HL   
27AA                          ;*Macro unroll:  test "() {2} \\f:", 2
27AA   31 80 39               LD   SP,STACK   
27AD   CD 72 09               CALL   init   
27B0   CD 18 38               CALL   execStr   
27B3   28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "() {2} \\f:"   
27BE                          ;*Macro unroll:  expect "() {2} \\f:",2
27BE   E1                     POP   HL   
27BF   E5                     PUSH   HL   
27C0   11 02 00               LD   DE,2   
27C3   B7                     OR   A   
27C4   ED 52                  SBC   HL,DE   
27C6   7D                     LD   A,L   
27C7   B4                     OR   H   
27C8   28 55                  JR   Z,expectM_0_2184S43   
27CA   CD 58 09               CALL   printStr   
27CD   43 6F 64 65 3A 20 28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","() {2} \\f:"   
27DE   CD 58 09               CALL   printStr   
27E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27F0   21 02 00               LD   HL,2   
27F3   CD A6 08               CALL   prtdec   
27F6   CD 58 09               CALL   printStr   
27F9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2806   E1                     POP   hl   
2807   E5                     PUSH   hl   
2808   CD A6 08               CALL   prtdec   
280B   E1                     POP   hl   
280C   CD 58 09               CALL   printStr   
280F   20 28 23 00            .CSTR   " (#"   
2813   CD EE 08               CALL   prthex   
2816   CD 58 09               CALL   printStr   
2819   29 0D 0A 00            .CSTR   ")\r\n"   
281D   76                     HALT      
281E   00                     .CSTR      
281F                EXPECTM_0_2184S43:      
281F   E1                     POP   HL   
2820                          ;*Macro unroll:  test "(a) {2} \\f:", 2
2820   31 80 39               LD   SP,STACK   
2823   CD 72 09               CALL   init   
2826   CD 18 38               CALL   execStr   
2829   28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "(a) {2} \\f:"   
2835                          ;*Macro unroll:  expect "(a) {2} \\f:",2
2835   E1                     POP   HL   
2836   E5                     PUSH   HL   
2837   11 02 00               LD   DE,2   
283A   B7                     OR   A   
283B   ED 52                  SBC   HL,DE   
283D   7D                     LD   A,L   
283E   B4                     OR   H   
283F   28 56                  JR   Z,expectM_0_2185S43   
2841   CD 58 09               CALL   printStr   
2844   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {2} \\f:"   
2856   CD 58 09               CALL   printStr   
2859   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2868   21 02 00               LD   HL,2   
286B   CD A6 08               CALL   prtdec   
286E   CD 58 09               CALL   printStr   
2871   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
287E   E1                     POP   hl   
287F   E5                     PUSH   hl   
2880   CD A6 08               CALL   prtdec   
2883   E1                     POP   hl   
2884   CD 58 09               CALL   printStr   
2887   20 28 23 00            .CSTR   " (#"   
288B   CD EE 08               CALL   prthex   
288E   CD 58 09               CALL   printStr   
2891   29 0D 0A 00            .CSTR   ")\r\n"   
2895   76                     HALT      
2896   00                     .CSTR      
2897                EXPECTM_0_2185S43:      
2897   E1                     POP   HL   
2898                          ;*Macro unroll:  test "5 (a) {$a} \\f:", 5
2898   31 80 39               LD   SP,STACK   
289B   CD 72 09               CALL   init   
289E   CD 18 38               CALL   execStr   
28A1   35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a) {$a} \\f:"   
28B0                          ;*Macro unroll:  expect "5 (a) {$a} \\f:",5
28B0   E1                     POP   HL   
28B1   E5                     PUSH   HL   
28B2   11 05 00               LD   DE,5   
28B5   B7                     OR   A   
28B6   ED 52                  SBC   HL,DE   
28B8   7D                     LD   A,L   
28B9   B4                     OR   H   
28BA   28 59                  JR   Z,expectM_0_2186S43   
28BC   CD 58 09               CALL   printStr   
28BF   43 6F 64 65 3A 20 35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a) {$a} \\f:"   
28D4   CD 58 09               CALL   printStr   
28D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28E6   21 05 00               LD   HL,5   
28E9   CD A6 08               CALL   prtdec   
28EC   CD 58 09               CALL   printStr   
28EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28FC   E1                     POP   hl   
28FD   E5                     PUSH   hl   
28FE   CD A6 08               CALL   prtdec   
2901   E1                     POP   hl   
2902   CD 58 09               CALL   printStr   
2905   20 28 23 00            .CSTR   " (#"   
2909   CD EE 08               CALL   prthex   
290C   CD 58 09               CALL   printStr   
290F   29 0D 0A 00            .CSTR   ")\r\n"   
2913   76                     HALT      
2914   00                     .CSTR      
2915                EXPECTM_0_2186S43:      
2915   E1                     POP   HL   
2916                          ;*Macro unroll:  test "5 (a:b) {$a} \\f:", 5
2916   31 80 39               LD   SP,STACK   
2919   CD 72 09               CALL   init   
291C   CD 18 38               CALL   execStr   
291F   35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a:b) {$a} \\f:"   
2930                          ;*Macro unroll:  expect "5 (a:b) {$a} \\f:",5
2930   E1                     POP   HL   
2931   E5                     PUSH   HL   
2932   11 05 00               LD   DE,5   
2935   B7                     OR   A   
2936   ED 52                  SBC   HL,DE   
2938   7D                     LD   A,L   
2939   B4                     OR   H   
293A   28 5B                  JR   Z,expectM_0_2187S43   
293C   CD 58 09               CALL   printStr   
293F   43 6F 64 65 3A 20 35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a:b) {$a} \\f:"   
2956   CD 58 09               CALL   printStr   
2959   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2968   21 05 00               LD   HL,5   
296B   CD A6 08               CALL   prtdec   
296E   CD 58 09               CALL   printStr   
2971   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
297E   E1                     POP   hl   
297F   E5                     PUSH   hl   
2980   CD A6 08               CALL   prtdec   
2983   E1                     POP   hl   
2984   CD 58 09               CALL   printStr   
2987   20 28 23 00            .CSTR   " (#"   
298B   CD EE 08               CALL   prthex   
298E   CD 58 09               CALL   printStr   
2991   29 0D 0A 00            .CSTR   ")\r\n"   
2995   76                     HALT      
2996   00                     .CSTR      
2997                EXPECTM_0_2187S43:      
2997   E1                     POP   HL   
2998                          ;*Macro unroll:  test "(a) {{2}:} \\f:", 2
2998   31 80 39               LD   SP,STACK   
299B   CD 72 09               CALL   init   
299E   CD 18 38               CALL   execStr   
29A1   28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "(a) {{2}:} \\f:"   
29B0                          ;*Macro unroll:  expect "(a) {{2}:} \\f:",2
29B0   E1                     POP   HL   
29B1   E5                     PUSH   HL   
29B2   11 02 00               LD   DE,2   
29B5   B7                     OR   A   
29B6   ED 52                  SBC   HL,DE   
29B8   7D                     LD   A,L   
29B9   B4                     OR   H   
29BA   28 59                  JR   Z,expectM_0_2188S43   
29BC   CD 58 09               CALL   printStr   
29BF   43 6F 64 65 3A 20 28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {{2}:} \\f:"   
29D4   CD 58 09               CALL   printStr   
29D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29E6   21 02 00               LD   HL,2   
29E9   CD A6 08               CALL   prtdec   
29EC   CD 58 09               CALL   printStr   
29EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29FC   E1                     POP   hl   
29FD   E5                     PUSH   hl   
29FE   CD A6 08               CALL   prtdec   
2A01   E1                     POP   hl   
2A02   CD 58 09               CALL   printStr   
2A05   20 28 23 00            .CSTR   " (#"   
2A09   CD EE 08               CALL   prthex   
2A0C   CD 58 09               CALL   printStr   
2A0F   29 0D 0A 00            .CSTR   ")\r\n"   
2A13   76                     HALT      
2A14   00                     .CSTR      
2A15                EXPECTM_0_2188S43:      
2A15   E1                     POP   HL   
2A16                          ;*Macro unroll:  test "1 5 (a) {{$a}:} \\f:", 5
2A16   31 80 39               LD   SP,STACK   
2A19   CD 72 09               CALL   init   
2A1C   CD 18 38               CALL   execStr   
2A1F   31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a}:} \\f:"   
2A33                          ;*Macro unroll:  expect "1 5 (a) {{$a}:} \\f:",5
2A33   E1                     POP   HL   
2A34   E5                     PUSH   HL   
2A35   11 05 00               LD   DE,5   
2A38   B7                     OR   A   
2A39   ED 52                  SBC   HL,DE   
2A3B   7D                     LD   A,L   
2A3C   B4                     OR   H   
2A3D   28 5E                  JR   Z,expectM_0_2189S43   
2A3F   CD 58 09               CALL   printStr   
2A42   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a}:} \\f:"   
2A5C   CD 58 09               CALL   printStr   
2A5F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A6E   21 05 00               LD   HL,5   
2A71   CD A6 08               CALL   prtdec   
2A74   CD 58 09               CALL   printStr   
2A77   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A84   E1                     POP   hl   
2A85   E5                     PUSH   hl   
2A86   CD A6 08               CALL   prtdec   
2A89   E1                     POP   hl   
2A8A   CD 58 09               CALL   printStr   
2A8D   20 28 23 00            .CSTR   " (#"   
2A91   CD EE 08               CALL   prthex   
2A94   CD 58 09               CALL   printStr   
2A97   29 0D 0A 00            .CSTR   ")\r\n"   
2A9B   76                     HALT      
2A9C   00                     .CSTR      
2A9D                EXPECTM_0_2189S43:      
2A9D   E1                     POP   HL   
2A9E                          ;*Macro unroll:  test "1 5 (ab) {{$a}:} \\f:", 1
2A9E   31 80 39               LD   SP,STACK   
2AA1   CD 72 09               CALL   init   
2AA4   CD 18 38               CALL   execStr   
2AA7   31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a}:} \\f:"   
2ABC                          ;*Macro unroll:  expect "1 5 (ab) {{$a}:} \\f:",1
2ABC   E1                     POP   HL   
2ABD   E5                     PUSH   HL   
2ABE   11 01 00               LD   DE,1   
2AC1   B7                     OR   A   
2AC2   ED 52                  SBC   HL,DE   
2AC4   7D                     LD   A,L   
2AC5   B4                     OR   H   
2AC6   28 5F                  JR   Z,expectM_0_2190S43   
2AC8   CD 58 09               CALL   printStr   
2ACB   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a}:} \\f:"   
2AE6   CD 58 09               CALL   printStr   
2AE9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AF8   21 01 00               LD   HL,1   
2AFB   CD A6 08               CALL   prtdec   
2AFE   CD 58 09               CALL   printStr   
2B01   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B0E   E1                     POP   hl   
2B0F   E5                     PUSH   hl   
2B10   CD A6 08               CALL   prtdec   
2B13   E1                     POP   hl   
2B14   CD 58 09               CALL   printStr   
2B17   20 28 23 00            .CSTR   " (#"   
2B1B   CD EE 08               CALL   prthex   
2B1E   CD 58 09               CALL   printStr   
2B21   29 0D 0A 00            .CSTR   ")\r\n"   
2B25   76                     HALT      
2B26   00                     .CSTR      
2B27                EXPECTM_0_2190S43:      
2B27   E1                     POP   HL   
2B28                          ;*Macro unroll:  test "1 5 (a) {{$a 2 +}:} \\f:", 7
2B28   31 80 39               LD   SP,STACK   
2B2B   CD 72 09               CALL   init   
2B2E   CD 18 38               CALL   execStr   
2B31   31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a 2 +}:} \\f:"   
2B49                          ;*Macro unroll:  expect "1 5 (a) {{$a 2 +}:} \\f:",7
2B49   E1                     POP   HL   
2B4A   E5                     PUSH   HL   
2B4B   11 07 00               LD   DE,7   
2B4E   B7                     OR   A   
2B4F   ED 52                  SBC   HL,DE   
2B51   7D                     LD   A,L   
2B52   B4                     OR   H   
2B53   28 62                  JR   Z,expectM_0_2191S43   
2B55   CD 58 09               CALL   printStr   
2B58   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a 2 +}:} \\f:"   
2B76   CD 58 09               CALL   printStr   
2B79   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B88   21 07 00               LD   HL,7   
2B8B   CD A6 08               CALL   prtdec   
2B8E   CD 58 09               CALL   printStr   
2B91   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B9E   E1                     POP   hl   
2B9F   E5                     PUSH   hl   
2BA0   CD A6 08               CALL   prtdec   
2BA3   E1                     POP   hl   
2BA4   CD 58 09               CALL   printStr   
2BA7   20 28 23 00            .CSTR   " (#"   
2BAB   CD EE 08               CALL   prthex   
2BAE   CD 58 09               CALL   printStr   
2BB1   29 0D 0A 00            .CSTR   ")\r\n"   
2BB5   76                     HALT      
2BB6   00                     .CSTR      
2BB7                EXPECTM_0_2191S43:      
2BB7   E1                     POP   HL   
2BB8                          ;*Macro unroll:  test "1 5 (ab) {{$a $b +}:} \\f:", 6
2BB8   31 80 39               LD   SP,STACK   
2BBB   CD 72 09               CALL   init   
2BBE   CD 18 38               CALL   execStr   
2BC1   31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a $b +}:} \\f:"   
2BDB                          ;*Macro unroll:  expect "1 5 (ab) {{$a $b +}:} \\f:",6
2BDB   E1                     POP   HL   
2BDC   E5                     PUSH   HL   
2BDD   11 06 00               LD   DE,6   
2BE0   B7                     OR   A   
2BE1   ED 52                  SBC   HL,DE   
2BE3   7D                     LD   A,L   
2BE4   B4                     OR   H   
2BE5   28 64                  JR   Z,expectM_0_2192S43   
2BE7   CD 58 09               CALL   printStr   
2BEA   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a $b +}:} \\f:"   
2C0A   CD 58 09               CALL   printStr   
2C0D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C1C   21 06 00               LD   HL,6   
2C1F   CD A6 08               CALL   prtdec   
2C22   CD 58 09               CALL   printStr   
2C25   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C32   E1                     POP   hl   
2C33   E5                     PUSH   hl   
2C34   CD A6 08               CALL   prtdec   
2C37   E1                     POP   hl   
2C38   CD 58 09               CALL   printStr   
2C3B   20 28 23 00            .CSTR   " (#"   
2C3F   CD EE 08               CALL   prthex   
2C42   CD 58 09               CALL   printStr   
2C45   29 0D 0A 00            .CSTR   ")\r\n"   
2C49   76                     HALT      
2C4A   00                     .CSTR      
2C4B                EXPECTM_0_2192S43:      
2C4B   E1                     POP   HL   
2C4C                          ;*Macro unroll:  test "(a) {2} \\f x= 1 x:", 2
2C4C   31 80 39               LD   SP,STACK   
2C4F   CD 72 09               CALL   init   
2C52   CD 18 38               CALL   execStr   
2C55   28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a) {2} \\f x= 1 x:"   
2C68                          ;*Macro unroll:  expect "(a) {2} \\f x= 1 x:",2
2C68   E1                     POP   HL   
2C69   E5                     PUSH   HL   
2C6A   11 02 00               LD   DE,2   
2C6D   B7                     OR   A   
2C6E   ED 52                  SBC   HL,DE   
2C70   7D                     LD   A,L   
2C71   B4                     OR   H   
2C72   28 5D                  JR   Z,expectM_0_2193S43   
2C74   CD 58 09               CALL   printStr   
2C77   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {2} \\f x= 1 x:"   
2C90   CD 58 09               CALL   printStr   
2C93   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CA2   21 02 00               LD   HL,2   
2CA5   CD A6 08               CALL   prtdec   
2CA8   CD 58 09               CALL   printStr   
2CAB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CB8   E1                     POP   hl   
2CB9   E5                     PUSH   hl   
2CBA   CD A6 08               CALL   prtdec   
2CBD   E1                     POP   hl   
2CBE   CD 58 09               CALL   printStr   
2CC1   20 28 23 00            .CSTR   " (#"   
2CC5   CD EE 08               CALL   prthex   
2CC8   CD 58 09               CALL   printStr   
2CCB   29 0D 0A 00            .CSTR   ")\r\n"   
2CCF   76                     HALT      
2CD0   00                     .CSTR      
2CD1                EXPECTM_0_2193S43:      
2CD1   E1                     POP   HL   
2CD2                          ;*Macro unroll:  test "(a) {$a} \\f x= 0 1 x:", 1
2CD2   31 80 39               LD   SP,STACK   
2CD5   CD 72 09               CALL   init   
2CD8   CD 18 38               CALL   execStr   
2CDB   28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "(a) {$a} \\f x= 0 1 x:"   
2CF1                          ;*Macro unroll:  expect "(a) {$a} \\f x= 0 1 x:",1
2CF1   E1                     POP   HL   
2CF2   E5                     PUSH   HL   
2CF3   11 01 00               LD   DE,1   
2CF6   B7                     OR   A   
2CF7   ED 52                  SBC   HL,DE   
2CF9   7D                     LD   A,L   
2CFA   B4                     OR   H   
2CFB   28 60                  JR   Z,expectM_0_2194S43   
2CFD   CD 58 09               CALL   printStr   
2D00   43 6F 64 65 3A 20 28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {$a} \\f x= 0 1 x:"   
2D1C   CD 58 09               CALL   printStr   
2D1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D2E   21 01 00               LD   HL,1   
2D31   CD A6 08               CALL   prtdec   
2D34   CD 58 09               CALL   printStr   
2D37   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D44   E1                     POP   hl   
2D45   E5                     PUSH   hl   
2D46   CD A6 08               CALL   prtdec   
2D49   E1                     POP   hl   
2D4A   CD 58 09               CALL   printStr   
2D4D   20 28 23 00            .CSTR   " (#"   
2D51   CD EE 08               CALL   prthex   
2D54   CD 58 09               CALL   printStr   
2D57   29 0D 0A 00            .CSTR   ")\r\n"   
2D5B   76                     HALT      
2D5C   00                     .CSTR      
2D5D                EXPECTM_0_2194S43:      
2D5D   E1                     POP   HL   
2D5E                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
2D5E   31 80 39               LD   SP,STACK   
2D61   CD 72 09               CALL   init   
2D64   CD 18 38               CALL   execStr   
2D67   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
2D7E                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
2D7E   E1                     POP   HL   
2D7F   E5                     PUSH   HL   
2D80   11 02 00               LD   DE,2   
2D83   B7                     OR   A   
2D84   ED 52                  SBC   HL,DE   
2D86   7D                     LD   A,L   
2D87   B4                     OR   H   
2D88   28 61                  JR   Z,expectM_0_2195S43   
2D8A   CD 58 09               CALL   printStr   
2D8D   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
2DAA   CD 58 09               CALL   printStr   
2DAD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DBC   21 02 00               LD   HL,2   
2DBF   CD A6 08               CALL   prtdec   
2DC2   CD 58 09               CALL   printStr   
2DC5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DD2   E1                     POP   hl   
2DD3   E5                     PUSH   hl   
2DD4   CD A6 08               CALL   prtdec   
2DD7   E1                     POP   hl   
2DD8   CD 58 09               CALL   printStr   
2DDB   20 28 23 00            .CSTR   " (#"   
2DDF   CD EE 08               CALL   prthex   
2DE2   CD 58 09               CALL   printStr   
2DE5   29 0D 0A 00            .CSTR   ")\r\n"   
2DE9   76                     HALT      
2DEA   00                     .CSTR      
2DEB                EXPECTM_0_2195S43:      
2DEB   E1                     POP   HL   
2DEC                          ;*Macro unroll:  test "(a:b) {$a} \\f x= 1 2 x:", 2
2DEC   31 80 39               LD   SP,STACK   
2DEF   CD 72 09               CALL   init   
2DF2   CD 18 38               CALL   execStr   
2DF5   28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(a:b) {$a} \\f x= 1 2 x:"   
2E0D                          ;*Macro unroll:  expect "(a:b) {$a} \\f x= 1 2 x:",2
2E0D   E1                     POP   HL   
2E0E   E5                     PUSH   HL   
2E0F   11 02 00               LD   DE,2   
2E12   B7                     OR   A   
2E13   ED 52                  SBC   HL,DE   
2E15   7D                     LD   A,L   
2E16   B4                     OR   H   
2E17   28 62                  JR   Z,expectM_0_2196S43   
2E19   CD 58 09               CALL   printStr   
2E1C   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a} \\f x= 1 2 x:"   
2E3A   CD 58 09               CALL   printStr   
2E3D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E4C   21 02 00               LD   HL,2   
2E4F   CD A6 08               CALL   prtdec   
2E52   CD 58 09               CALL   printStr   
2E55   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E62   E1                     POP   hl   
2E63   E5                     PUSH   hl   
2E64   CD A6 08               CALL   prtdec   
2E67   E1                     POP   hl   
2E68   CD 58 09               CALL   printStr   
2E6B   20 28 23 00            .CSTR   " (#"   
2E6F   CD EE 08               CALL   prthex   
2E72   CD 58 09               CALL   printStr   
2E75   29 0D 0A 00            .CSTR   ")\r\n"   
2E79   76                     HALT      
2E7A   00                     .CSTR      
2E7B                EXPECTM_0_2196S43:      
2E7B   E1                     POP   HL   
2E7C                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
2E7C   31 80 39               LD   SP,STACK   
2E7F   CD 72 09               CALL   init   
2E82   CD 18 38               CALL   execStr   
2E85   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
2E9C                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
2E9C   E1                     POP   HL   
2E9D   E5                     PUSH   HL   
2E9E   11 02 00               LD   DE,2   
2EA1   B7                     OR   A   
2EA2   ED 52                  SBC   HL,DE   
2EA4   7D                     LD   A,L   
2EA5   B4                     OR   H   
2EA6   28 61                  JR   Z,expectM_0_2197S43   
2EA8   CD 58 09               CALL   printStr   
2EAB   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
2EC8   CD 58 09               CALL   printStr   
2ECB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EDA   21 02 00               LD   HL,2   
2EDD   CD A6 08               CALL   prtdec   
2EE0   CD 58 09               CALL   printStr   
2EE3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EF0   E1                     POP   hl   
2EF1   E5                     PUSH   hl   
2EF2   CD A6 08               CALL   prtdec   
2EF5   E1                     POP   hl   
2EF6   CD 58 09               CALL   printStr   
2EF9   20 28 23 00            .CSTR   " (#"   
2EFD   CD EE 08               CALL   prthex   
2F00   CD 58 09               CALL   printStr   
2F03   29 0D 0A 00            .CSTR   ")\r\n"   
2F07   76                     HALT      
2F08   00                     .CSTR      
2F09                EXPECTM_0_2197S43:      
2F09   E1                     POP   HL   
2F0A                          ;*Macro unroll:  test "(ab) {$b $a} \\f x= 10 15 x: -", 5
2F0A   31 80 39               LD   SP,STACK   
2F0D   CD 72 09               CALL   init   
2F10   CD 18 38               CALL   execStr   
2F13   28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "(ab) {$b $a} \\f x= 10 15 x: -"   
2F31                          ;*Macro unroll:  expect "(ab) {$b $a} \\f x= 10 15 x: -",5
2F31   E1                     POP   HL   
2F32   E5                     PUSH   HL   
2F33   11 05 00               LD   DE,5   
2F36   B7                     OR   A   
2F37   ED 52                  SBC   HL,DE   
2F39   7D                     LD   A,L   
2F3A   B4                     OR   H   
2F3B   28 68                  JR   Z,expectM_0_2198S43   
2F3D   CD 58 09               CALL   printStr   
2F40   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "Code: ","(ab) {$b $a} \\f x= 10 15 x: -"   
2F64   CD 58 09               CALL   printStr   
2F67   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F76   21 05 00               LD   HL,5   
2F79   CD A6 08               CALL   prtdec   
2F7C   CD 58 09               CALL   printStr   
2F7F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F8C   E1                     POP   hl   
2F8D   E5                     PUSH   hl   
2F8E   CD A6 08               CALL   prtdec   
2F91   E1                     POP   hl   
2F92   CD 58 09               CALL   printStr   
2F95   20 28 23 00            .CSTR   " (#"   
2F99   CD EE 08               CALL   prthex   
2F9C   CD 58 09               CALL   printStr   
2F9F   29 0D 0A 00            .CSTR   ")\r\n"   
2FA3   76                     HALT      
2FA4   00                     .CSTR      
2FA5                EXPECTM_0_2198S43:      
2FA5   E1                     POP   HL   
2FA6                          ;*Macro unroll:  test "(a:b) {2} \\f x= 1 x:", 2
2FA6   31 80 39               LD   SP,STACK   
2FA9   CD 72 09               CALL   init   
2FAC   CD 18 38               CALL   execStr   
2FAF   28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a:b) {2} \\f x= 1 x:"   
2FC4                          ;*Macro unroll:  expect "(a:b) {2} \\f x= 1 x:",2
2FC4   E1                     POP   HL   
2FC5   E5                     PUSH   HL   
2FC6   11 02 00               LD   DE,2   
2FC9   B7                     OR   A   
2FCA   ED 52                  SBC   HL,DE   
2FCC   7D                     LD   A,L   
2FCD   B4                     OR   H   
2FCE   28 5F                  JR   Z,expectM_0_2199S43   
2FD0   CD 58 09               CALL   printStr   
2FD3   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a:b) {2} \\f x= 1 x:"   
2FEE   CD 58 09               CALL   printStr   
2FF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3000   21 02 00               LD   HL,2   
3003   CD A6 08               CALL   prtdec   
3006   CD 58 09               CALL   printStr   
3009   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3016   E1                     POP   hl   
3017   E5                     PUSH   hl   
3018   CD A6 08               CALL   prtdec   
301B   E1                     POP   hl   
301C   CD 58 09               CALL   printStr   
301F   20 28 23 00            .CSTR   " (#"   
3023   CD EE 08               CALL   prthex   
3026   CD 58 09               CALL   printStr   
3029   29 0D 0A 00            .CSTR   ")\r\n"   
302D   76                     HALT      
302E   00                     .CSTR      
302F                EXPECTM_0_2199S43:      
302F   E1                     POP   HL   
3030                          ;*Macro unroll:  test "(:b) {100 $b= $b} \\f x= x:", 100
3030   31 80 39               LD   SP,STACK   
3033   CD 72 09               CALL   init   
3036   CD 18 38               CALL   execStr   
3039   28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "(:b) {100 $b= $b} \\f x= x:"   
3054                          ;*Macro unroll:  expect "(:b) {100 $b= $b} \\f x= x:",100
3054   E1                     POP   HL   
3055   E5                     PUSH   HL   
3056   11 64 00               LD   DE,100   
3059   B7                     OR   A   
305A   ED 52                  SBC   HL,DE   
305C   7D                     LD   A,L   
305D   B4                     OR   H   
305E   28 65                  JR   Z,expectM_0_2200S43   
3060   CD 58 09               CALL   printStr   
3063   43 6F 64 65 3A 20 28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "Code: ","(:b) {100 $b= $b} \\f x= x:"   
3084   CD 58 09               CALL   printStr   
3087   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3096   21 64 00               LD   HL,100   
3099   CD A6 08               CALL   prtdec   
309C   CD 58 09               CALL   printStr   
309F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30AC   E1                     POP   hl   
30AD   E5                     PUSH   hl   
30AE   CD A6 08               CALL   prtdec   
30B1   E1                     POP   hl   
30B2   CD 58 09               CALL   printStr   
30B5   20 28 23 00            .CSTR   " (#"   
30B9   CD EE 08               CALL   prthex   
30BC   CD 58 09               CALL   printStr   
30BF   29 0D 0A 00            .CSTR   ")\r\n"   
30C3   76                     HALT      
30C4   00                     .CSTR      
30C5                EXPECTM_0_2200S43:      
30C5   E1                     POP   HL   
30C6                          ;*Macro unroll:  test "(a:b) {1 $b= $b} \\f x= 2 x:", 1
30C6   31 80 39               LD   SP,STACK   
30C9   CD 72 09               CALL   init   
30CC   CD 18 38               CALL   execStr   
30CF   28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {1 $b= $b} \\f x= 2 x:"   
30EB                          ;*Macro unroll:  expect "(a:b) {1 $b= $b} \\f x= 2 x:",1
30EB   E1                     POP   HL   
30EC   E5                     PUSH   HL   
30ED   11 01 00               LD   DE,1   
30F0   B7                     OR   A   
30F1   ED 52                  SBC   HL,DE   
30F3   7D                     LD   A,L   
30F4   B4                     OR   H   
30F5   28 66                  JR   Z,expectM_0_2201S43   
30F7   CD 58 09               CALL   printStr   
30FA   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {1 $b= $b} \\f x= 2 x:"   
311C   CD 58 09               CALL   printStr   
311F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
312E   21 01 00               LD   HL,1   
3131   CD A6 08               CALL   prtdec   
3134   CD 58 09               CALL   printStr   
3137   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3144   E1                     POP   hl   
3145   E5                     PUSH   hl   
3146   CD A6 08               CALL   prtdec   
3149   E1                     POP   hl   
314A   CD 58 09               CALL   printStr   
314D   20 28 23 00            .CSTR   " (#"   
3151   CD EE 08               CALL   prthex   
3154   CD 58 09               CALL   printStr   
3157   29 0D 0A 00            .CSTR   ")\r\n"   
315B   76                     HALT      
315C   00                     .CSTR      
315D                EXPECTM_0_2201S43:      
315D   E1                     POP   HL   
315E                          ;*Macro unroll:  test "(a:b) {$a $b= $b} \\f x= 2 x:", 2
315E   31 80 39               LD   SP,STACK   
3161   CD 72 09               CALL   init   
3164   CD 18 38               CALL   execStr   
3167   28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {$a $b= $b} \\f x= 2 x:"   
3184                          ;*Macro unroll:  expect "(a:b) {$a $b= $b} \\f x= 2 x:",2
3184   E1                     POP   HL   
3185   E5                     PUSH   HL   
3186   11 02 00               LD   DE,2   
3189   B7                     OR   A   
318A   ED 52                  SBC   HL,DE   
318C   7D                     LD   A,L   
318D   B4                     OR   H   
318E   28 67                  JR   Z,expectM_0_2202S43   
3190   CD 58 09               CALL   printStr   
3193   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a $b= $b} \\f x= 2 x:"   
31B6   CD 58 09               CALL   printStr   
31B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31C8   21 02 00               LD   HL,2   
31CB   CD A6 08               CALL   prtdec   
31CE   CD 58 09               CALL   printStr   
31D1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31DE   E1                     POP   hl   
31DF   E5                     PUSH   hl   
31E0   CD A6 08               CALL   prtdec   
31E3   E1                     POP   hl   
31E4   CD 58 09               CALL   printStr   
31E7   20 28 23 00            .CSTR   " (#"   
31EB   CD EE 08               CALL   prthex   
31EE   CD 58 09               CALL   printStr   
31F1   29 0D 0A 00            .CSTR   ")\r\n"   
31F5   76                     HALT      
31F6   00                     .CSTR      
31F7                EXPECTM_0_2202S43:      
31F7   E1                     POP   HL   
31F8                          ;*Macro unroll:  test "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +", 11
31F8   31 80 39               LD   SP,STACK   
31FB   CD 72 09               CALL   init   
31FE   CD 18 38               CALL   execStr   
3201   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
3226                          ;*Macro unroll:  expect "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +",11
3226   E1                     POP   HL   
3227   E5                     PUSH   HL   
3228   11 0B 00               LD   DE,11   
322B   B7                     OR   A   
322C   ED 52                  SBC   HL,DE   
322E   7D                     LD   A,L   
322F   B4                     OR   H   
3230   28 6F                  JR   Z,expectM_0_2203S43   
3232   CD 58 09               CALL   printStr   
3235   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
3260   CD 58 09               CALL   printStr   
3263   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3272   21 0B 00               LD   HL,11   
3275   CD A6 08               CALL   prtdec   
3278   CD 58 09               CALL   printStr   
327B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3288   E1                     POP   hl   
3289   E5                     PUSH   hl   
328A   CD A6 08               CALL   prtdec   
328D   E1                     POP   hl   
328E   CD 58 09               CALL   printStr   
3291   20 28 23 00            .CSTR   " (#"   
3295   CD EE 08               CALL   prthex   
3298   CD 58 09               CALL   printStr   
329B   29 0D 0A 00            .CSTR   ")\r\n"   
329F   76                     HALT      
32A0   00                     .CSTR      
32A1                EXPECTM_0_2203S43:      
32A1   E1                     POP   HL   
32A2                          ;*Macro unroll:  test "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +", 21
32A2   31 80 39               LD   SP,STACK   
32A5   CD 72 09               CALL   init   
32A8   CD 18 38               CALL   execStr   
32AB   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
32D0                          ;*Macro unroll:  expect "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +",21
32D0   E1                     POP   HL   
32D1   E5                     PUSH   HL   
32D2   11 15 00               LD   DE,21   
32D5   B7                     OR   A   
32D6   ED 52                  SBC   HL,DE   
32D8   7D                     LD   A,L   
32D9   B4                     OR   H   
32DA   28 6F                  JR   Z,expectM_0_2204S43   
32DC   CD 58 09               CALL   printStr   
32DF   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
330A   CD 58 09               CALL   printStr   
330D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
331C   21 15 00               LD   HL,21   
331F   CD A6 08               CALL   prtdec   
3322   CD 58 09               CALL   printStr   
3325   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3332   E1                     POP   hl   
3333   E5                     PUSH   hl   
3334   CD A6 08               CALL   prtdec   
3337   E1                     POP   hl   
3338   CD 58 09               CALL   printStr   
333B   20 28 23 00            .CSTR   " (#"   
333F   CD EE 08               CALL   prthex   
3342   CD 58 09               CALL   printStr   
3345   29 0D 0A 00            .CSTR   ")\r\n"   
3349   76                     HALT      
334A   00                     .CSTR      
334B                EXPECTM_0_2204S43:      
334B   E1                     POP   HL   
334C                          ;*Macro unroll:  test "[10 20 30] 1%", 20
334C   31 80 39               LD   SP,STACK   
334F   CD 72 09               CALL   init   
3352   CD 18 38               CALL   execStr   
3355   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
3363                          ;*Macro unroll:  expect "[10 20 30] 1%",20
3363   E1                     POP   HL   
3364   E5                     PUSH   HL   
3365   11 14 00               LD   DE,20   
3368   B7                     OR   A   
3369   ED 52                  SBC   HL,DE   
336B   7D                     LD   A,L   
336C   B4                     OR   H   
336D   28 58                  JR   Z,expectM_0_2205S43   
336F   CD 58 09               CALL   printStr   
3372   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
3386   CD 58 09               CALL   printStr   
3389   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3398   21 14 00               LD   HL,20   
339B   CD A6 08               CALL   prtdec   
339E   CD 58 09               CALL   printStr   
33A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33AE   E1                     POP   hl   
33AF   E5                     PUSH   hl   
33B0   CD A6 08               CALL   prtdec   
33B3   E1                     POP   hl   
33B4   CD 58 09               CALL   printStr   
33B7   20 28 23 00            .CSTR   " (#"   
33BB   CD EE 08               CALL   prthex   
33BE   CD 58 09               CALL   printStr   
33C1   29 0D 0A 00            .CSTR   ")\r\n"   
33C5   76                     HALT      
33C6   00                     .CSTR      
33C7                EXPECTM_0_2205S43:      
33C7   E1                     POP   HL   
33C8                          ;*Macro unroll:  test "\\b [1 2 3] 1%", 2
33C8   31 80 39               LD   SP,STACK   
33CB   CD 72 09               CALL   init   
33CE   CD 18 38               CALL   execStr   
33D1   5C 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "\\b [1 2 3] 1%"   
33DF                          ;*Macro unroll:  expect "\\b [1 2 3] 1%",2
33DF   E1                     POP   HL   
33E0   E5                     PUSH   HL   
33E1   11 02 00               LD   DE,2   
33E4   B7                     OR   A   
33E5   ED 52                  SBC   HL,DE   
33E7   7D                     LD   A,L   
33E8   B4                     OR   H   
33E9   28 58                  JR   Z,expectM_0_2206S43   
33EB   CD 58 09               CALL   printStr   
33EE   43 6F 64 65 3A 20 5C 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","\\b [1 2 3] 1%"   
3402   CD 58 09               CALL   printStr   
3405   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3414   21 02 00               LD   HL,2   
3417   CD A6 08               CALL   prtdec   
341A   CD 58 09               CALL   printStr   
341D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
342A   E1                     POP   hl   
342B   E5                     PUSH   hl   
342C   CD A6 08               CALL   prtdec   
342F   E1                     POP   hl   
3430   CD 58 09               CALL   printStr   
3433   20 28 23 00            .CSTR   " (#"   
3437   CD EE 08               CALL   prthex   
343A   CD 58 09               CALL   printStr   
343D   29 0D 0A 00            .CSTR   ")\r\n"   
3441   76                     HALT      
3442   00                     .CSTR      
3443                EXPECTM_0_2206S43:      
3443   E1                     POP   HL   
3444                          ;*Macro unroll:  test "\\b ['A' 'B' 'C'] 1%", 66
3444   31 80 39               LD   SP,STACK   
3447   CD 72 09               CALL   init   
344A   CD 18 38               CALL   execStr   
344D   5C 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "\\b ['A' 'B' 'C'] 1%"   
3461                          ;*Macro unroll:  expect "\\b ['A' 'B' 'C'] 1%",66
3461   E1                     POP   HL   
3462   E5                     PUSH   HL   
3463   11 42 00               LD   DE,66   
3466   B7                     OR   A   
3467   ED 52                  SBC   HL,DE   
3469   7D                     LD   A,L   
346A   B4                     OR   H   
346B   28 5E                  JR   Z,expectM_0_2207S43   
346D   CD 58 09               CALL   printStr   
3470   43 6F 64 65 3A 20 5C 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","\\b ['A' 'B' 'C'] 1%"   
348A   CD 58 09               CALL   printStr   
348D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
349C   21 42 00               LD   HL,66   
349F   CD A6 08               CALL   prtdec   
34A2   CD 58 09               CALL   printStr   
34A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34B2   E1                     POP   hl   
34B3   E5                     PUSH   hl   
34B4   CD A6 08               CALL   prtdec   
34B7   E1                     POP   hl   
34B8   CD 58 09               CALL   printStr   
34BB   20 28 23 00            .CSTR   " (#"   
34BF   CD EE 08               CALL   prthex   
34C2   CD 58 09               CALL   printStr   
34C5   29 0D 0A 00            .CSTR   ")\r\n"   
34C9   76                     HALT      
34CA   00                     .CSTR      
34CB                EXPECTM_0_2207S43:      
34CB   E1                     POP   HL   
34CC                          ;*Macro unroll:  test "0 [{10} {20} {30}] \\s", 10
34CC   31 80 39               LD   SP,STACK   
34CF   CD 72 09               CALL   init   
34D2   CD 18 38               CALL   execStr   
34D5   30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 5C 73 00 .CSTR   "0 [{10} {20} {30}] \\s"   
34EB                          ;*Macro unroll:  expect "0 [{10} {20} {30}] \\s",10
34EB   E1                     POP   HL   
34EC   E5                     PUSH   HL   
34ED   11 0A 00               LD   DE,10   
34F0   B7                     OR   A   
34F1   ED 52                  SBC   HL,DE   
34F3   7D                     LD   A,L   
34F4   B4                     OR   H   
34F5   28 60                  JR   Z,expectM_0_2208S43   
34F7   CD 58 09               CALL   printStr   
34FA   43 6F 64 65 3A 20 30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 5C 73 00 .CSTR   "Code: ","0 [{10} {20} {30}] \\s"   
3516   CD 58 09               CALL   printStr   
3519   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3528   21 0A 00               LD   HL,10   
352B   CD A6 08               CALL   prtdec   
352E   CD 58 09               CALL   printStr   
3531   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
353E   E1                     POP   hl   
353F   E5                     PUSH   hl   
3540   CD A6 08               CALL   prtdec   
3543   E1                     POP   hl   
3544   CD 58 09               CALL   printStr   
3547   20 28 23 00            .CSTR   " (#"   
354B   CD EE 08               CALL   prthex   
354E   CD 58 09               CALL   printStr   
3551   29 0D 0A 00            .CSTR   ")\r\n"   
3555   76                     HALT      
3556   00                     .CSTR      
3557                EXPECTM_0_2208S43:      
3557   E1                     POP   HL   
3558                          ;*Macro unroll:  test "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:", 10
3558   31 80 39               LD   SP,STACK   
355B   CD 72 09               CALL   init   
355E   CD 18 38               CALL   execStr   
3561   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:"   
3585                          ;*Macro unroll:  expect "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:",10
3585   E1                     POP   HL   
3586   E5                     PUSH   HL   
3587   11 0A 00               LD   DE,10   
358A   B7                     OR   A   
358B   ED 52                  SBC   HL,DE   
358D   7D                     LD   A,L   
358E   B4                     OR   H   
358F   28 6E                  JR   Z,expectM_0_2209S43   
3591   CD 58 09               CALL   printStr   
3594   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:"   
35BE   CD 58 09               CALL   printStr   
35C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35D0   21 0A 00               LD   HL,10   
35D3   CD A6 08               CALL   prtdec   
35D6   CD 58 09               CALL   printStr   
35D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35E6   E1                     POP   hl   
35E7   E5                     PUSH   hl   
35E8   CD A6 08               CALL   prtdec   
35EB   E1                     POP   hl   
35EC   CD 58 09               CALL   printStr   
35EF   20 28 23 00            .CSTR   " (#"   
35F3   CD EE 08               CALL   prthex   
35F6   CD 58 09               CALL   printStr   
35F9   29 0D 0A 00            .CSTR   ")\r\n"   
35FD   76                     HALT      
35FE   00                     .CSTR      
35FF                EXPECTM_0_2209S43:      
35FF   E1                     POP   HL   
3600                          ;*Macro unroll:  test "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:", 10
3600   31 80 39               LD   SP,STACK   
3603   CD 72 09               CALL   init   
3606   CD 18 38               CALL   execStr   
3609   30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
362F                          ;*Macro unroll:  expect "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:",10
362F   E1                     POP   HL   
3630   E5                     PUSH   HL   
3631   11 0A 00               LD   DE,10   
3634   B7                     OR   A   
3635   ED 52                  SBC   HL,DE   
3637   7D                     LD   A,L   
3638   B4                     OR   H   
3639   28 70                  JR   Z,expectM_0_2210S43   
363B   CD 58 09               CALL   printStr   
363E   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
366A   CD 58 09               CALL   printStr   
366D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
367C   21 0A 00               LD   HL,10   
367F   CD A6 08               CALL   prtdec   
3682   CD 58 09               CALL   printStr   
3685   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3692   E1                     POP   hl   
3693   E5                     PUSH   hl   
3694   CD A6 08               CALL   prtdec   
3697   E1                     POP   hl   
3698   CD 58 09               CALL   printStr   
369B   20 28 23 00            .CSTR   " (#"   
369F   CD EE 08               CALL   prthex   
36A2   CD 58 09               CALL   printStr   
36A5   29 0D 0A 00            .CSTR   ")\r\n"   
36A9   76                     HALT      
36AA   00                     .CSTR      
36AB                EXPECTM_0_2210S43:      
36AB   E1                     POP   HL   
36AC                          ;*Macro unroll:  test "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:", 20
36AC   31 80 39               LD   SP,STACK   
36AF   CD 72 09               CALL   init   
36B2   CD 18 38               CALL   execStr   
36B5   31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
36DB                          ;*Macro unroll:  expect "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:",20
36DB   E1                     POP   HL   
36DC   E5                     PUSH   HL   
36DD   11 14 00               LD   DE,20   
36E0   B7                     OR   A   
36E1   ED 52                  SBC   HL,DE   
36E3   7D                     LD   A,L   
36E4   B4                     OR   H   
36E5   28 70                  JR   Z,expectM_0_2211S43   
36E7   CD 58 09               CALL   printStr   
36EA   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
3716   CD 58 09               CALL   printStr   
3719   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3728   21 14 00               LD   HL,20   
372B   CD A6 08               CALL   prtdec   
372E   CD 58 09               CALL   printStr   
3731   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
373E   E1                     POP   hl   
373F   E5                     PUSH   hl   
3740   CD A6 08               CALL   prtdec   
3743   E1                     POP   hl   
3744   CD 58 09               CALL   printStr   
3747   20 28 23 00            .CSTR   " (#"   
374B   CD EE 08               CALL   prthex   
374E   CD 58 09               CALL   printStr   
3751   29 0D 0A 00            .CSTR   ")\r\n"   
3755   76                     HALT      
3756   00                     .CSTR      
3757                EXPECTM_0_2211S43:      
3757   E1                     POP   HL   
3758                          ;*Macro unroll:  test "0 j= 4 i= { j i+ j= i \\x i 1 -= } \\r j ", 10
3758   31 80 39               LD   SP,STACK   
375B   CD 72 09               CALL   init   
375E   CD 18 38               CALL   execStr   
3761   30 20 6A 3D 20 34 20 69 3D 20 7B 20 6A 20 69 2B 20 6A 3D 20 69 20 5C 78 20 69 20 31 20 2D 3D 20 7D 20 5C 72 20 6A 20 00 .CSTR   "0 j= 4 i= { j i+ j= i \\x i 1 -= } \\r j "   
3789                          ;*Macro unroll:  expect "0 j= 4 i= { j i+ j= i \\x i 1 -= } \\r j ",10
3789   E1                     POP   HL   
378A   E5                     PUSH   HL   
378B   11 0A 00               LD   DE,10   
378E   B7                     OR   A   
378F   ED 52                  SBC   HL,DE   
3791   7D                     LD   A,L   
3792   B4                     OR   H   
3793   28 72                  JR   Z,expectM_0_2212S43   
3795   CD 58 09               CALL   printStr   
3798   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 7B 20 6A 20 69 2B 20 6A 3D 20 69 20 5C 78 20 69 20 31 20 2D 3D 20 7D 20 5C 72 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= { j i+ j= i \\x i 1 -= } \\r j "   
37C6   CD 58 09               CALL   printStr   
37C9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37D8   21 0A 00               LD   HL,10   
37DB   CD A6 08               CALL   prtdec   
37DE   CD 58 09               CALL   printStr   
37E1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37EE   E1                     POP   hl   
37EF   E5                     PUSH   hl   
37F0   CD A6 08               CALL   prtdec   
37F3   E1                     POP   hl   
37F4   CD 58 09               CALL   printStr   
37F7   20 28 23 00            .CSTR   " (#"   
37FB   CD EE 08               CALL   prthex   
37FE   CD 58 09               CALL   printStr   
3801   29 0D 0A 00            .CSTR   ")\r\n"   
3805   76                     HALT      
3806   00                     .CSTR      
3807                EXPECTM_0_2212S43:      
3807   E1                     POP   HL   
3808                             ; 
3808                             ; 
3808                             ; 
3808                             ; 
3808                             ; 
3808                             ; 
3808                             ; 
3808                             ; test "10 sqrt", 3
3808                             ; test "10 sqrt %", 1
3808                             ; test "[ 1 ] closure call", 1
3808                             ; test "[ [ 2 ] ] closure call 0%", 2
3808   CD 58 09               CALL   printStr   
380B   44 6F 6E 65 21 00      .CSTR   "Done!"   
3811   76                     HALT      
3812                          ALIGN   2   
3812                PRINTER:      
3812   E1                     POP   hl   
3813   CD A6 08               CALL   prtdec   
3816   DD E9                  JP   (ix)   
3818                             ; executes a null teminated string (null executes exit_)
3818                             ; the string should be immedaitely following the call
3818                EXECSTR:      ; create a root stack frame
3818   C1                     POP   bc   ; bc = code*
3819   0B                     DEC   bc   ; dec to prepare for next routine
381A   11 00 00               LD   de,0   
381D   D5                     PUSH   de   ; push fake IP
381E   D5                     PUSH   de   ; push null arg_list*
381F   D5                     PUSH   de   ; push null first_arg*
3820   D5                     PUSH   de   ; push fake BP
3821   DD E9                  JP   (ix)   
3823                          ALIGN   $100   
3900                             ; .org RAMSTART
3900                          DS   DSIZE   
3980                STACK:       
3980                          ALIGN   $100   
3A00                VARS:        
3A00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
3AD0                RESTARTS:      
3AD0                RST08:    DS   2   
3AD2                RST10:    DS   2   
3AD4                RST18:    DS   2   
3AD6                RST20:    DS   2   
3AD8                RST28:    DS   2   
3ADA                RST30:    DS   2   ; 
3ADC                BAUD:     DS   2   ; 
3ADE                INTVEC:   DS   2   ; 
3AE0                NMIVEC:   DS   2   ; 
3AE2                GETCVEC:   DS   2   ; 
3AE4                PUTCVEC:   DS   2   ; 
3AE6                SYSVARS:      
3AE6                             ; initialised sys variables
3AE6                VDATAWIDTH:   DS   2   ; 
3AE8                VTIBPTR:   DS   2   ; 
3AEA                VNEXT:    DS   2   ; 
3AEC                VHEAPPTR:   DS   2   ; 
3AEE                             ; uninitialised sys variables
3AEE                VBLOCKEND:   DS   2   ; 
3AF0                VPOINTER:   DS   2   ; 
3AF2                VHASHSTR:   DS   2   ; 
3AF4                VLASTDEF:   DS   2   ; 
3AF6                VREMAIN:   DS   2   ; 
3AF8                VTEMP1:   DS   2   ; 
3AFA                VTEMP2:   DS   2   ; 
3AFC                TBPTR:    DS   2   ; reserved for tests
3AFE                          ALIGN   $100   
3B00                TIB:      DS   TIBSIZE   
3C00                          ALIGN   $100   
3C00                PAD:      DS   $100   
3D00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 56 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               08A4 DEFINED AT LINE 1331 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1260 IN monty.asm
                    > USED AT LINE 1556 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 740 IN monty.asm
                    > USED AT LINE 747 IN monty.asm
                    > USED AT LINE 1342 IN monty.asm
                    > USED AT LINE 1383 IN monty.asm
                    > USED AT LINE 1407 IN monty.asm
                    > USED AT LINE 1410 IN monty.asm
                    > USED AT LINE 1587 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 46 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 798 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 803 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1623 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
DQUOTE:             0022 DEFINED AT LINE 27 IN monty.asm
                    > USED AT LINE 1090 IN monty.asm
                    > USED AT LINE 1429 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 29 IN monty.asm
MACROS:             0180 DEFINED AT LINE 61 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 66 IN monty.asm
                    > USED AT LINE 1511 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 74 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 76 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 110 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 213 IN monty.asm
ADD_:               0300 DEFINED AT LINE 215 IN monty.asm
ADDR_:              0303 DEFINED AT LINE 217 IN monty.asm
AND_:               0306 DEFINED AT LINE 219 IN monty.asm
ARG_:               0309 DEFINED AT LINE 221 IN monty.asm
ARG_LIST_:          030C DEFINED AT LINE 223 IN monty.asm
ARRBEGIN_:          030F DEFINED AT LINE 225 IN monty.asm
ARREND_:            0312 DEFINED AT LINE 227 IN monty.asm
ARRINDEX_:          0315 DEFINED AT LINE 229 IN monty.asm
BLOCK_:             0318 DEFINED AT LINE 231 IN monty.asm
BLOCKEND_:          031B DEFINED AT LINE 233 IN monty.asm
CHAR_:              031E DEFINED AT LINE 235 IN monty.asm
COMMAND_:           0321 DEFINED AT LINE 237 IN monty.asm
DOT_:               0324 DEFINED AT LINE 239 IN monty.asm
REMAIN_:            0327 DEFINED AT LINE 241 IN monty.asm
GO_:                032A DEFINED AT LINE 243 IN monty.asm
IDENTU_:            032D DEFINED AT LINE 245 IN monty.asm
IDENTL_:            0330 DEFINED AT LINE 247 IN monty.asm
IF_:                0333 DEFINED AT LINE 249 IN monty.asm
INV_:               0336 DEFINED AT LINE 251 IN monty.asm
MUL_:               033C DEFINED AT LINE 254 IN monty.asm
NOT_:               033F DEFINED AT LINE 256 IN monty.asm
NUM_:               0344 DEFINED AT LINE 259 IN monty.asm
                    > USED AT LINE 1117 IN monty.asm
HEXNUM_:            0347 DEFINED AT LINE 261 IN monty.asm
OR_:                034A DEFINED AT LINE 263 IN monty.asm
XOR_:               034D DEFINED AT LINE 265 IN monty.asm
STRING_:            0350 DEFINED AT LINE 267 IN monty.asm
SUB_:               0353 DEFINED AT LINE 269 IN monty.asm
EQ_:                0356 DEFINED AT LINE 271 IN monty.asm
EQ0:                0360 DEFINED AT LINE 278 IN monty.asm
                    > USED AT LINE 275 IN monty.asm
EQ1:                0361 DEFINED AT LINE 280 IN monty.asm
                    > USED AT LINE 258 IN monty.asm
GT_:                0365 DEFINED AT LINE 284 IN monty.asm
LT_:                0370 DEFINED AT LINE 293 IN monty.asm
LT1:                0379 DEFINED AT LINE 300 IN monty.asm
                    > USED AT LINE 291 IN monty.asm
DIV_:               0382 DEFINED AT LINE 306 IN monty.asm
NOP_:               0385 DEFINED AT LINE 308 IN monty.asm
ADD:                0387 DEFINED AT LINE 315 IN monty.asm
                    > USED AT LINE 216 IN monty.asm
ADD1:               0394 DEFINED AT LINE 323 IN monty.asm
                    > USED AT LINE 319 IN monty.asm
ADD2:               0395 DEFINED AT LINE 325 IN monty.asm
                    > USED AT LINE 322 IN monty.asm
ADD3:               0397 DEFINED AT LINE 328 IN monty.asm
                    > USED AT LINE 721 IN monty.asm
                    > USED AT LINE 994 IN monty.asm
                    > USED AT LINE 1131 IN monty.asm
ADDR:               03A0 DEFINED AT LINE 336 IN monty.asm
                    > USED AT LINE 218 IN monty.asm
AND:                03AC DEFINED AT LINE 342 IN monty.asm
                    > USED AT LINE 220 IN monty.asm
AND1:               03B3 DEFINED AT LINE 350 IN monty.asm
                    > USED AT LINE 362 IN monty.asm
                    > USED AT LINE 372 IN monty.asm
OR:                 03B7 DEFINED AT LINE 354 IN monty.asm
                    > USED AT LINE 264 IN monty.asm
XOR:                03C0 DEFINED AT LINE 363 IN monty.asm
                    > USED AT LINE 266 IN monty.asm
XOR1:               03C1 DEFINED AT LINE 365 IN monty.asm
                    > USED AT LINE 253 IN monty.asm
ARG:                03C9 DEFINED AT LINE 377 IN monty.asm
                    > USED AT LINE 222 IN monty.asm
ARG0:               03E7 DEFINED AT LINE 398 IN monty.asm
                    > USED AT LINE 404 IN monty.asm
ARG0A:              03F0 DEFINED AT LINE 406 IN monty.asm
                    > USED AT LINE 383 IN monty.asm
                    > USED AT LINE 390 IN monty.asm
ARG1:               03F5 DEFINED AT LINE 409 IN monty.asm
                    > USED AT LINE 402 IN monty.asm
ARG1A:              03FD DEFINED AT LINE 416 IN monty.asm
                    > USED AT LINE 408 IN monty.asm
ARG_LIST:           0400 DEFINED AT LINE 425 IN monty.asm
                    > USED AT LINE 224 IN monty.asm
ARG_LIST1:          040A DEFINED AT LINE 432 IN monty.asm
                    > USED AT LINE 450 IN monty.asm
ARG_LIST2:          0416 DEFINED AT LINE 440 IN monty.asm
                    > USED AT LINE 437 IN monty.asm
ARG_LIST3:          041E DEFINED AT LINE 448 IN monty.asm
                    > USED AT LINE 439 IN monty.asm
                    > USED AT LINE 446 IN monty.asm
ARG_LIST4:          0421 DEFINED AT LINE 451 IN monty.asm
                    > USED AT LINE 435 IN monty.asm
ARG_LIST5:          0426 DEFINED AT LINE 456 IN monty.asm
                    > USED AT LINE 454 IN monty.asm
ARRBEGIN:           0432 DEFINED AT LINE 467 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
ARREND:             044E DEFINED AT LINE 481 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
ARREND1:            0468 DEFINED AT LINE 497 IN monty.asm
                    > USED AT LINE 513 IN monty.asm
ARREND2:            0478 DEFINED AT LINE 507 IN monty.asm
                    > USED AT LINE 503 IN monty.asm
ARRINDEX:           049C DEFINED AT LINE 534 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
ARRINDEX0:          04A4 DEFINED AT LINE 540 IN monty.asm
ARRINDEX1:          04A5 DEFINED AT LINE 542 IN monty.asm
                    > USED AT LINE 539 IN monty.asm
ARRINDEX2:          04B1 DEFINED AT LINE 551 IN monty.asm
                    > USED AT LINE 548 IN monty.asm
ASSIGN:             04B4 DEFINED AT LINE 556 IN monty.asm
                    > USED AT LINE 277 IN monty.asm
ASSIGN0:            04B6 DEFINED AT LINE 559 IN monty.asm
                    > USED AT LINE 330 IN monty.asm
ASSIGNX:            04B7 DEFINED AT LINE 561 IN monty.asm
ASSIGN1:            04C3 DEFINED AT LINE 569 IN monty.asm
                    > USED AT LINE 566 IN monty.asm
BLOCK:              04C5 DEFINED AT LINE 572 IN monty.asm
                    > USED AT LINE 232 IN monty.asm
BLOCK1:             04C9 DEFINED AT LINE 576 IN monty.asm
                    > USED AT LINE 580 IN monty.asm
                    > USED AT LINE 602 IN monty.asm
                    > USED AT LINE 605 IN monty.asm
                    > USED AT LINE 610 IN monty.asm
                    > USED AT LINE 614 IN monty.asm
BLOCK2:             04F5 DEFINED AT LINE 603 IN monty.asm
                    > USED AT LINE 590 IN monty.asm
                    > USED AT LINE 592 IN monty.asm
                    > USED AT LINE 594 IN monty.asm
BLOCK3:             04F8 DEFINED AT LINE 606 IN monty.asm
                    > USED AT LINE 597 IN monty.asm
                    > USED AT LINE 599 IN monty.asm
                    > USED AT LINE 601 IN monty.asm
BLOCK4:             0500 DEFINED AT LINE 612 IN monty.asm
                    > USED AT LINE 583 IN monty.asm
                    > USED AT LINE 585 IN monty.asm
                    > USED AT LINE 587 IN monty.asm
BLOCK5:             0503 DEFINED AT LINE 615 IN monty.asm
                    > USED AT LINE 611 IN monty.asm
BLOCK6:             052B DEFINED AT LINE 634 IN monty.asm
                    > USED AT LINE 621 IN monty.asm
BLOCKEND:           052E DEFINED AT LINE 638 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
                    > USED AT LINE 1322 IN monty.asm
BLOCKEND1:          055A DEFINED AT LINE 660 IN monty.asm
                    > USED AT LINE 653 IN monty.asm
BLOCKEND2:          0566 DEFINED AT LINE 667 IN monty.asm
                    > USED AT LINE 659 IN monty.asm
BLOCKEND3:          0578 DEFINED AT LINE 681 IN monty.asm
                    > USED AT LINE 673 IN monty.asm
CHAR:               0583 DEFINED AT LINE 692 IN monty.asm
                    > USED AT LINE 236 IN monty.asm
CHAR1:              0586 DEFINED AT LINE 694 IN monty.asm
                    > USED AT LINE 705 IN monty.asm
CHAR2:              0592 DEFINED AT LINE 703 IN monty.asm
                    > USED AT LINE 700 IN monty.asm
CHAR3:              0595 DEFINED AT LINE 706 IN monty.asm
                    > USED AT LINE 698 IN monty.asm
DIV:                0598 DEFINED AT LINE 710 IN monty.asm
                    > USED AT LINE 307 IN monty.asm
DOT:                05AB DEFINED AT LINE 723 IN monty.asm
                    > USED AT LINE 240 IN monty.asm
DOT1:               05B7 DEFINED AT LINE 731 IN monty.asm
                    > USED AT LINE 728 IN monty.asm
DOT2:               05C0 DEFINED AT LINE 736 IN monty.asm
                    > USED AT LINE 733 IN monty.asm
DOT3:               05CA DEFINED AT LINE 742 IN monty.asm
                    > USED AT LINE 738 IN monty.asm
DOT4:               05CE DEFINED AT LINE 745 IN monty.asm
                    > USED AT LINE 730 IN monty.asm
                    > USED AT LINE 735 IN monty.asm
                    > USED AT LINE 741 IN monty.asm
DIVIDE:             05D5 DEFINED AT LINE 753 IN monty.asm
                    > USED AT LINE 715 IN monty.asm
DIVIDE1:            05DA DEFINED AT LINE 756 IN monty.asm
                    > USED AT LINE 768 IN monty.asm
DIVIDE2:            05E7 DEFINED AT LINE 764 IN monty.asm
                    > USED AT LINE 761 IN monty.asm
DIVIDE3:            05E8 DEFINED AT LINE 766 IN monty.asm
                    > USED AT LINE 763 IN monty.asm
EQUALS:             05EE DEFINED AT LINE 774 IN monty.asm
                    > USED AT LINE 282 IN monty.asm
LESSTHANEQ:         05F6 DEFINED AT LINE 782 IN monty.asm
                    > USED AT LINE 302 IN monty.asm
LESSTHAN:           05FB DEFINED AT LINE 789 IN monty.asm
                    > USED AT LINE 304 IN monty.asm
LESSTHAN1:          0600 DEFINED AT LINE 794 IN monty.asm
                    > USED AT LINE 785 IN monty.asm
TRUE1:              0603 DEFINED AT LINE 797 IN monty.asm
                    > USED AT LINE 777 IN monty.asm
                    > USED AT LINE 1162 IN monty.asm
NULL1:              0609 DEFINED AT LINE 801 IN monty.asm
FALSE1:             0609 DEFINED AT LINE 802 IN monty.asm
                    > USED AT LINE 778 IN monty.asm
                    > USED AT LINE 792 IN monty.asm
                    > USED AT LINE 795 IN monty.asm
                    > USED AT LINE 1150 IN monty.asm
GO:                 060F DEFINED AT LINE 810 IN monty.asm
                    > USED AT LINE 244 IN monty.asm
                    > USED AT LINE 1285 IN monty.asm
GO1:                0610 DEFINED AT LINE 812 IN monty.asm
                    > USED AT LINE 969 IN monty.asm
                    > USED AT LINE 971 IN monty.asm
                    > USED AT LINE 1297 IN monty.asm
GO2:                0616 DEFINED AT LINE 817 IN monty.asm
                    > USED AT LINE 815 IN monty.asm
GOFUNC:             061C DEFINED AT LINE 822 IN monty.asm
GOFUNC0:            0637 DEFINED AT LINE 837 IN monty.asm
                    > USED AT LINE 830 IN monty.asm
GOFUNC1:            0649 DEFINED AT LINE 854 IN monty.asm
                    > USED AT LINE 851 IN monty.asm
GOFUNC2:            064F DEFINED AT LINE 860 IN monty.asm
                    > USED AT LINE 864 IN monty.asm
GOFUNC3:            0654 DEFINED AT LINE 865 IN monty.asm
                    > USED AT LINE 859 IN monty.asm
GOBLOCK:            0662 DEFINED AT LINE 878 IN monty.asm
                    > USED AT LINE 820 IN monty.asm
GOBLOCK2:           0683 DEFINED AT LINE 896 IN monty.asm
                    > USED AT LINE 853 IN monty.asm
                    > USED AT LINE 888 IN monty.asm
GOBLOCK3:           0688 DEFINED AT LINE 900 IN monty.asm
                    > USED AT LINE 895 IN monty.asm
GOBLOCK4:           0689 DEFINED AT LINE 902 IN monty.asm
                    > USED AT LINE 876 IN monty.asm
HEXNUM:             0696 DEFINED AT LINE 910 IN monty.asm
                    > USED AT LINE 262 IN monty.asm
HEXNUM1:            0699 DEFINED AT LINE 912 IN monty.asm
                    > USED AT LINE 929 IN monty.asm
HEXNUM2:            06A1 DEFINED AT LINE 918 IN monty.asm
                    > USED AT LINE 916 IN monty.asm
IDENTU:             06B3 DEFINED AT LINE 930 IN monty.asm
                    > USED AT LINE 246 IN monty.asm
IDENTL:             06B8 DEFINED AT LINE 934 IN monty.asm
                    > USED AT LINE 248 IN monty.asm
IDENT1:             06BD DEFINED AT LINE 938 IN monty.asm
                    > USED AT LINE 933 IN monty.asm
IF:                 06CA DEFINED AT LINE 951 IN monty.asm
                    > USED AT LINE 250 IN monty.asm
IFTE:               06D6 DEFINED AT LINE 961 IN monty.asm
                    > USED AT LINE 955 IN monty.asm
IFTE1:              06D7 DEFINED AT LINE 963 IN monty.asm
                    > USED AT LINE 958 IN monty.asm
MUL:                06E3 DEFINED AT LINE 973 IN monty.asm
                    > USED AT LINE 255 IN monty.asm
MUL2:               06E5 DEFINED AT LINE 976 IN monty.asm
MUL3:               06ED DEFINED AT LINE 981 IN monty.asm
                    > USED AT LINE 990 IN monty.asm
NUM:                0701 DEFINED AT LINE 996 IN monty.asm
                    > USED AT LINE 260 IN monty.asm
NUM0:               070A DEFINED AT LINE 1002 IN monty.asm
                    > USED AT LINE 1000 IN monty.asm
NUM1:               070B DEFINED AT LINE 1004 IN monty.asm
                    > USED AT LINE 1021 IN monty.asm
NUM2:               0723 DEFINED AT LINE 1022 IN monty.asm
                    > USED AT LINE 920 IN monty.asm
                    > USED AT LINE 922 IN monty.asm
                    > USED AT LINE 1007 IN monty.asm
                    > USED AT LINE 1009 IN monty.asm
NUM3:               072E DEFINED AT LINE 1030 IN monty.asm
                    > USED AT LINE 1025 IN monty.asm
REMAIN:             0731 DEFINED AT LINE 1034 IN monty.asm
                    > USED AT LINE 242 IN monty.asm
SHIFTLEFT:          0737 DEFINED AT LINE 1041 IN monty.asm
                    > USED AT LINE 297 IN monty.asm
SHIFTLEFT1:         073F DEFINED AT LINE 1048 IN monty.asm
                    > USED AT LINE 1051 IN monty.asm
SHIFTLEFT2:         0740 DEFINED AT LINE 1050 IN monty.asm
                    > USED AT LINE 1047 IN monty.asm
SHIFTRIGHT:         0747 DEFINED AT LINE 1058 IN monty.asm
                    > USED AT LINE 288 IN monty.asm
SHIFTRIGHT1:        074F DEFINED AT LINE 1065 IN monty.asm
                    > USED AT LINE 1069 IN monty.asm
SHIFTRIGHT2:        0753 DEFINED AT LINE 1068 IN monty.asm
                    > USED AT LINE 1064 IN monty.asm
STRING:             075A DEFINED AT LINE 1077 IN monty.asm
                    > USED AT LINE 268 IN monty.asm
STRING1:            0763 DEFINED AT LINE 1084 IN monty.asm
                    > USED AT LINE 1091 IN monty.asm
                    > USED AT LINE 1093 IN monty.asm
STRING2:            0766 DEFINED AT LINE 1088 IN monty.asm
                    > USED AT LINE 1083 IN monty.asm
SUB:                0782 DEFINED AT LINE 1110 IN monty.asm
                    > USED AT LINE 270 IN monty.asm
SUB0:               078E DEFINED AT LINE 1118 IN monty.asm
                    > USED AT LINE 1115 IN monty.asm
SUB1:               079A DEFINED AT LINE 1125 IN monty.asm
                    > USED AT LINE 1121 IN monty.asm
SUB3:               079B DEFINED AT LINE 1127 IN monty.asm
                    > USED AT LINE 1124 IN monty.asm
COMMAND:            07A2 DEFINED AT LINE 1136 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
ABS1:               07F0 DEFINED AT LINE 1171 IN monty.asm
                    > USED AT LINE 1142 IN monty.asm
CLOSURE:            07FD DEFINED AT LINE 1185 IN monty.asm
COMMENT:            081C DEFINED AT LINE 1210 IN monty.asm
                    > USED AT LINE 1140 IN monty.asm
                    > USED AT LINE 1214 IN monty.asm
BYTES:              0825 DEFINED AT LINE 1218 IN monty.asm
                    > USED AT LINE 1144 IN monty.asm
                    > USED AT LINE 1146 IN monty.asm
BYTES1:             0828 DEFINED AT LINE 1220 IN monty.asm
                    > USED AT LINE 1301 IN monty.asm
FUNC:               082D DEFINED AT LINE 1225 IN monty.asm
                    > USED AT LINE 1148 IN monty.asm
INPUT:              0849 DEFINED AT LINE 1249 IN monty.asm
                    > USED AT LINE 1152 IN monty.asm
KEY:                0854 DEFINED AT LINE 1259 IN monty.asm
                    > USED AT LINE 1154 IN monty.asm
OUTPUT:             085D DEFINED AT LINE 1268 IN monty.asm
                    > USED AT LINE 1156 IN monty.asm
REPEAT:             0866 DEFINED AT LINE 1279 IN monty.asm
                    > USED AT LINE 1158 IN monty.asm
SELECT:             086E DEFINED AT LINE 1289 IN monty.asm
                    > USED AT LINE 1160 IN monty.asm
WORDS:              0878 DEFINED AT LINE 1299 IN monty.asm
                    > USED AT LINE 1164 IN monty.asm
BLOCKEXIT:          087E DEFINED AT LINE 1303 IN monty.asm
                    > USED AT LINE 1166 IN monty.asm
BLOCKEXIT1:         0885 DEFINED AT LINE 1309 IN monty.asm
                    > USED AT LINE 1307 IN monty.asm
FILTER:             08A4 DEFINED AT LINE 1329 IN monty.asm
MAP:                08A4 DEFINED AT LINE 1330 IN monty.asm
PRTDEC:             08A6 DEFINED AT LINE 1338 IN monty.asm
                    > USED AT LINE 744 IN monty.asm
                    > USED AT LINE 1633 IN monty.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 141
PRTDEC0:            08B5 DEFINED AT LINE 1349 IN monty.asm
                    > USED AT LINE 1340 IN monty.asm
PRTDEC1:            08D7 DEFINED AT LINE 1365 IN monty.asm
                    > USED AT LINE 1353 IN monty.asm
                    > USED AT LINE 1355 IN monty.asm
                    > USED AT LINE 1357 IN monty.asm
                    > USED AT LINE 1359 IN monty.asm
                    > USED AT LINE 1362 IN monty.asm
PRTDEC2:            08D9 DEFINED AT LINE 1367 IN monty.asm
                    > USED AT LINE 1370 IN monty.asm
PRTDEC3:            08E9 DEFINED AT LINE 1379 IN monty.asm
                    > USED AT LINE 1374 IN monty.asm
PRTDEC4:            08EA DEFINED AT LINE 1381 IN monty.asm
                    > USED AT LINE 1378 IN monty.asm
PRTHEX:             08EE DEFINED AT LINE 1385 IN monty.asm
                    > USED AT LINE 729 IN monty.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            08F9 DEFINED AT LINE 1393 IN monty.asm
                    > USED AT LINE 1388 IN monty.asm
                    > USED AT LINE 1390 IN monty.asm
PRTHEX3:            0902 DEFINED AT LINE 1401 IN monty.asm
                    > USED AT LINE 1399 IN monty.asm
PRTSTR0:            090D DEFINED AT LINE 1409 IN monty.asm
                    > USED AT LINE 1415 IN monty.asm
PRTSTR:             0911 DEFINED AT LINE 1412 IN monty.asm
                    > USED AT LINE 734 IN monty.asm
                    > USED AT LINE 1479 IN monty.asm
NESTING:            0916 DEFINED AT LINE 1428 IN monty.asm
                    > USED AT LINE 1547 IN monty.asm
                    > USED AT LINE 1588 IN monty.asm
NESTING0:           0920 DEFINED AT LINE 1434 IN monty.asm
                    > USED AT LINE 1430 IN monty.asm
                    > USED AT LINE 1432 IN monty.asm
NESTING1A:          0927 DEFINED AT LINE 1439 IN monty.asm
                    > USED AT LINE 1436 IN monty.asm
NESTING1:           092A DEFINED AT LINE 1442 IN monty.asm
                    > USED AT LINE 1433 IN monty.asm
NESTING2:           0939 DEFINED AT LINE 1451 IN monty.asm
                    > USED AT LINE 1446 IN monty.asm
                    > USED AT LINE 1448 IN monty.asm
NESTING3:           093B DEFINED AT LINE 1454 IN monty.asm
                    > USED AT LINE 1450 IN monty.asm
NESTING4:           0946 DEFINED AT LINE 1461 IN monty.asm
                    > USED AT LINE 1456 IN monty.asm
                    > USED AT LINE 1458 IN monty.asm
PROMPT:             0948 DEFINED AT LINE 1465 IN monty.asm
                    > USED AT LINE 1531 IN monty.asm
CRLF:               0951 DEFINED AT LINE 1470 IN monty.asm
                    > USED AT LINE 1600 IN monty.asm
PRINTSTR:           0958 DEFINED AT LINE 1477 IN monty.asm
                    > USED AT LINE 1466 IN monty.asm
                    > USED AT LINE 1471 IN monty.asm
                    > USED AT LINE 1527 IN monty.asm
                    > USED AT LINE 1631 IN monty.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 19
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 134
PUSHARRAY:          095F DEFINED AT LINE 1487 IN monty.asm
                    > USED AT LINE 834 IN monty.asm
PUSHARRAY1:         0967 DEFINED AT LINE 1495 IN monty.asm
                    > USED AT LINE 1505 IN monty.asm
PUSHARRAY2:         096D DEFINED AT LINE 1502 IN monty.asm
                    > USED AT LINE 1494 IN monty.asm
INIT:               0972 DEFINED AT LINE 1508 IN monty.asm
                    > USED AT LINE 9
                    > USED AT LINE 1526 IN monty.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT0:              098B DEFINED AT LINE 1518 IN monty.asm
                    > USED AT LINE 1521 IN monty.asm
START:              0990 DEFINED AT LINE 1524 IN monty.asm
INTERPRET:          09A6 DEFINED AT LINE 1530 IN monty.asm
                    > USED AT LINE 1625 IN monty.asm
                    > USED AT LINE 1634 IN monty.asm
INTERPRET2:         09B0 DEFINED AT LINE 1536 IN monty.asm
                    > USED AT LINE 1580 IN monty.asm
INTERPRET3:         09B8 DEFINED AT LINE 1543 IN monty.asm
                    > USED AT LINE 1552 IN monty.asm
INTERPRET4:         09BE DEFINED AT LINE 1549 IN monty.asm
                    > USED AT LINE 1541 IN monty.asm
INTERPRET5:         09C3 DEFINED AT LINE 1555 IN monty.asm
                    > USED AT LINE 1589 IN monty.asm
                    > USED AT LINE 1603 IN monty.asm
INTERPRET6:         09D4 DEFINED AT LINE 1582 IN monty.asm
                    > USED AT LINE 1558 IN monty.asm
INTERPRET7:         09E2 DEFINED AT LINE 1591 IN monty.asm
                    > USED AT LINE 1563 IN monty.asm
INTERPRET8:         09F5 DEFINED AT LINE 1605 IN monty.asm
                    > USED AT LINE 1561 IN monty.asm
NEXT:               09FD DEFINED AT LINE 1611 IN monty.asm
                    > USED AT LINE 69 IN monty.asm
                    > USED AT LINE 1615 IN monty.asm
NEXT1:              0A0C DEFINED AT LINE 1622 IN monty.asm
                    > USED AT LINE 1616 IN monty.asm
EXIT_:              0A13 DEFINED AT LINE 1626 IN monty.asm
                    > USED AT LINE 1624 IN monty.asm
ERROR:              0A16 DEFINED AT LINE 1630 IN monty.asm
                    > USED AT LINE 1169 IN monty.asm
TESTSSTART:         0B00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2114S43:  0B7F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2119S43:  0BEF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2120S43:  0C55 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2121S43:  0CB9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2122S43:  0D1D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2123S43:  0D81 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2124S43:  0DE5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2125S43:  0E4B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2126S43:  0EB3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2127S43:  0F19 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2128S43:  0F7F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2129S43:  0FE7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2130S43:  1051 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2131S43:  10B9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2132S43:  1121 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2133S43:  118F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2134S43:  11FD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2135S43:  1269 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2136S43:  12D9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2137S43:  134D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2138S43:  13BF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2139S43:  142B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2140S43:  14A1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2141S43:  151D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2142S43:  158D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2143S43:  15F9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2144S43:  1665 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2145S43:  16DB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2146S43:  1757 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2147S43:  17C3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2148S43:  182F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2149S43:  189B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2150S43:  1917 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2151S43:  198B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2152S43:  19F7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2153S43:  1A73 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2154S43:  1AE3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2155S43:  1B4F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2156S43:  1BBD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2157S43:  1C2B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2158S43:  1C97 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2159S43:  1D03 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2160S43:  1D6F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2161S43:  1DDB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2162S43:  1E47 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2163S43:  1EB3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2164S43:  1F1F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2165S43:  1F8B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2166S43:  1FF9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2167S43:  2067 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2168S43:  20D5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2169S43:  2145 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2170S43:  21B5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2171S43:  221F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2172S43:  2289 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2173S43:  22F9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2174S43:  236F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2175S43:  23E7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2176S43:  2463 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2177S43:  24EB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2178S43:  2573 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2179S43:  25E1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2180S43:  2651 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2181S43:  26C3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2182S43:  2737 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2183S43:  27A9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2184S43:  281F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2185S43:  2897 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2186S43:  2915 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2187S43:  2997 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2188S43:  2A15 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2189S43:  2A9D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2190S43:  2B27 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2191S43:  2BB7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2192S43:  2C4B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2193S43:  2CD1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2194S43:  2D5D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2195S43:  2DEB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2196S43:  2E7B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2197S43:  2F09 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2198S43:  2FA5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2199S43:  302F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2200S43:  30C5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2201S43:  315D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2202S43:  31F7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2203S43:  32A1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2204S43:  334B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2205S43:  33C7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2206S43:  3443 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2207S43:  34CB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2208S43:  3557 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2209S43:  35FF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2210S43:  36AB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2211S43:  3757 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2212S43:  3807 DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            3812 DEFINED AT LINE 139
EXECSTR:            3818 DEFINED AT LINE 146
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
STACK:              3980 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 881 IN monty.asm
                    > USED AT LINE 1510 IN monty.asm
                    > USED AT LINE 1525 IN monty.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
VARS:               3A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1515 IN monty.asm
RESTARTS:           3AD0 DEFINED AT LINE 11 IN ram.asm
RST08:              3AD0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              3AD2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              3AD4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              3AD6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              3AD8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              3ADA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               3ADC DEFINED AT LINE 19 IN ram.asm
INTVEC:             3ADE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             3AE0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            3AE2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            3AE4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            3AE6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1512 IN monty.asm
VDATAWIDTH:         3AE6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 501 IN monty.asm
                    > USED AT LINE 537 IN monty.asm
                    > USED AT LINE 564 IN monty.asm
                    > USED AT LINE 1221 IN monty.asm
VTIBPTR:            3AE8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1534 IN monty.asm
                    > USED AT LINE 1606 IN monty.asm
VNEXT:              3AEA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1509 IN monty.asm
VHEAPPTR:           3AEC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 427 IN monty.asm
                    > USED AT LINE 458 IN monty.asm
                    > USED AT LINE 491 IN monty.asm
                    > USED AT LINE 523 IN monty.asm
                    > USED AT LINE 524 IN monty.asm
                    > USED AT LINE 629 IN monty.asm
                    > USED AT LINE 632 IN monty.asm
                    > USED AT LINE 1078 IN monty.asm
                    > USED AT LINE 1097 IN monty.asm
                    > USED AT LINE 1186 IN monty.asm
                    > USED AT LINE 1199 IN monty.asm
                    > USED AT LINE 1200 IN monty.asm
                    > USED AT LINE 1227 IN monty.asm
                    > USED AT LINE 1242 IN monty.asm
                    > USED AT LINE 1244 IN monty.asm
VBLOCKEND:          3AEE DEFINED AT LINE 36 IN ram.asm
VPOINTER:           3AF0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 337 IN monty.asm
                    > USED AT LINE 339 IN monty.asm
                    > USED AT LINE 340 IN monty.asm
                    > USED AT LINE 412 IN monty.asm
                    > USED AT LINE 544 IN monty.asm
                    > USED AT LINE 562 IN monty.asm
                    > USED AT LINE 942 IN monty.asm
VHASHSTR:           3AF2 DEFINED AT LINE 38 IN ram.asm
VLASTDEF:           3AF4 DEFINED AT LINE 39 IN ram.asm
VREMAIN:            3AF6 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 717 IN monty.asm
                    > USED AT LINE 1035 IN monty.asm
VTEMP1:             3AF8 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 484 IN monty.asm
                    > USED AT LINE 525 IN monty.asm
                    > USED AT LINE 624 IN monty.asm
                    > USED AT LINE 633 IN monty.asm
                    > USED AT LINE 831 IN monty.asm
                    > USED AT LINE 835 IN monty.asm
VTEMP2:             3AFA DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 832 IN monty.asm
                    > USED AT LINE 836 IN monty.asm
TBPTR:              3AFC DEFINED AT LINE 43 IN ram.asm
TIB:                3B00 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 1540 IN monty.asm
                    > USED AT LINE 1583 IN monty.asm
                    > USED AT LINE 1592 IN monty.asm
                    > USED AT LINE 1607 IN monty.asm
PAD:                3C00 DEFINED AT LINE 49 IN ram.asm
HEAP:               3D00 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 70 IN monty.asm
                    > USED AT LINE 617 IN monty.asm
