0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 call flushBuffer
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call flushBuffer
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 52               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 52               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 52               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 52               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 52               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 52               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 52               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 52               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 52               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 52               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 50               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 52               LD   (RST08),HL   
0094   22 D2 52               LD   (RST10),HL   
0097   22 D4 52               LD   (RST18),HL   
009A   22 D6 52               LD   (RST20),HL   
009D   22 D8 52               LD   (RST28),HL   
00A0   22 DA 52               LD   (RST30),HL   
00A3   22 DE 52               LD   (INTVEC),HL   
00A6   22 E0 52               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 52               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 52               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 10               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   F9                     DB   lsb(bang_)   ; !
0181   2B                     DB   lsb(dquote_)   ; "
0182   C3                     DB   lsb(hash_)   ; #
0183   37                     DB   lsb(dollar_)   ; $
0184   19                     DB   lsb(percent_)   ; %
0185   A1                     DB   lsb(amper_)   ; &
0186   1F                     DB   lsb(quote_)   ; '
0187   45                     DB   lsb(lparen_)   ; (
0188   3D                     DB   lsb(rparen_)   ; )
0189   F5                     DB   lsb(star_)   ; *
018A   DB                     DB   lsb(plus_)   ; +
018B   28                     DB   lsb(comma_)   ; ,
018C   F7                     DB   lsb(minus_)   ; -
018D   22                     DB   lsb(dot_)   ; .
018E   34                     DB   lsb(slash_)   ; /	
018F   11                     DB   lsb(num_)   ; 0
0190   11                     DB   lsb(num_)   ; 1
0191   11                     DB   lsb(num_)   ; 2
0192   11                     DB   lsb(num_)   ; 3
0193   11                     DB   lsb(num_)   ; 4
0194   11                     DB   lsb(num_)   ; 5
0195   11                     DB   lsb(num_)   ; 6
0196   11                     DB   lsb(num_)   ; 7
0197   11                     DB   lsb(num_)   ; 8
0198   11                     DB   lsb(num_)   ; 9
0199   6F                     DB   lsb(colon_)   ; :
019A   5B                     DB   lsb(semicolon_)   ; ;
019B   FF                     DB   lsb(lt_)   ; <
019C   FB                     DB   lsb(eq_)   ; =
019D   FD                     DB   lsb(gt_)   ; >
019E   3A                     DB   lsb(question_)   ; ?
019F   04                     DB   lsb(at_)   ; @
01A0   AC                     DB   lsb(upcase_)   ; A
01A1   AC                     DB   lsb(upcase_)   ; B
01A2   AC                     DB   lsb(upcase_)   ; C
01A3   AC                     DB   lsb(upcase_)   ; D
01A4   AC                     DB   lsb(upcase_)   ; E
01A5   AC                     DB   lsb(upcase_)   ; F
01A6   AC                     DB   lsb(upcase_)   ; G
01A7   AC                     DB   lsb(upcase_)   ; h
01A8   AC                     DB   lsb(upcase_)   ; I
01A9   AC                     DB   lsb(upcase_)   ; J
01AA   AC                     DB   lsb(upcase_)   ; K
01AB   AC                     DB   lsb(upcase_)   ; L
01AC   AC                     DB   lsb(upcase_)   ; M
01AD   AC                     DB   lsb(upcase_)   ; N
01AE   AC                     DB   lsb(upcase_)   ; O
01AF   AC                     DB   lsb(upcase_)   ; p
01B0   AC                     DB   lsb(upcase_)   ; Q
01B1   AC                     DB   lsb(upcase_)   ; R
01B2   AC                     DB   lsb(upcase_)   ; S
01B3   AC                     DB   lsb(upcase_)   ; T
01B4   AC                     DB   lsb(upcase_)   ; U
01B5   AC                     DB   lsb(upcase_)   ; V
01B6   AC                     DB   lsb(upcase_)   ; W
01B7   AC                     DB   lsb(upcase_)   ; X
01B8   AC                     DB   lsb(upcase_)   ; Y
01B9   AC                     DB   lsb(upcase_)   ; Z
01BA   85                     DB   lsb(lbrack_)   ; [
01BB   0E                     DB   lsb(backslash_)   ; \
01BC   16                     DB   lsb(rbrack_)   ; ]
01BD   25                     DB   lsb(caret_)   ; ^
01BE   31                     DB   lsb(underscore_)   ; _
01BF   2E                     DB   lsb(grave_)   ; `     used for testing string   	
01C0   B1                     DB   lsb(lowcase_)   ; a
01C1   B1                     DB   lsb(lowcase_)   ; b
01C2   B1                     DB   lsb(lowcase_)   ; c
01C3   B1                     DB   lsb(lowcase_)   ; d
01C4   B1                     DB   lsb(lowcase_)   ; e
01C5   B1                     DB   lsb(lowcase_)   ; f
01C6   B1                     DB   lsb(lowcase_)   ; g
01C7   B1                     DB   lsb(lowcase_)   ; h
01C8   B1                     DB   lsb(lowcase_)   ; i
01C9   B1                     DB   lsb(lowcase_)   ; j
01CA   B1                     DB   lsb(lowcase_)   ; k
01CB   B1                     DB   lsb(lowcase_)   ; l
01CC   B1                     DB   lsb(lowcase_)   ; m
01CD   B1                     DB   lsb(lowcase_)   ; n
01CE   B1                     DB   lsb(lowcase_)   ; o
01CF   B1                     DB   lsb(lowcase_)   ; p
01D0   B1                     DB   lsb(lowcase_)   ; q
01D1   B1                     DB   lsb(lowcase_)   ; r
01D2   B1                     DB   lsb(lowcase_)   ; s
01D3   B1                     DB   lsb(lowcase_)   ; t
01D4   B1                     DB   lsb(lowcase_)   ; u
01D5   B1                     DB   lsb(lowcase_)   ; v
01D6   B1                     DB   lsb(lowcase_)   ; w
01D7   B1                     DB   lsb(lowcase_)   ; x
01D8   B1                     DB   lsb(lowcase_)   ; y
01D9   B1                     DB   lsb(lowcase_)   ; z
01DA   45                     DB   lsb(lbrace_)   ; {
01DB   52                     DB   lsb(pipe_)   ; |
01DC   1C                     DB   lsb(rbrace_)   ; }
01DD   4A                     DB   lsb(tilde_)   ; ~
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 50                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 51                  DW   BUF   ; vBUFPtr pointer into BUF
01E6   44 0F                  DW   next   ; nNext
01E8   20 53                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; unused
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                             ; @ addr
0204                             ; -- ptr
0204                AT_:         
0204                ADDR:        
0204   ED 5B F6 52            LD   de,(vPointer)   
0208   21 F6 52               LD   hl,vPointer   
020B   C3 BC 07               JP   variable   
020E                BACKSLASH_:      
020E   C3 01 04               JP   backslash   
0211                NUM_:        
0211   C3 4C 04               JP   num   
0214                NOP_:        
0214   DD E9                  JP   (ix)   
0216                RBRACK_:      
0216   C3 27 0B               JP   rbrack   
0219                PERCENT_:      
0219   C3 A3 04               JP   percent   
021C                RBRACE_:      
021C   C3 77 0B               JP   rbrace   
021F                QUOTE_:      
021F   C3 7C 04               JP   quote   
0222                DOT_:        
0222   C3 00 05               JP   dot   
0225                CARET_:      
0225   C3 E4 0B               JP   caret   
0228                COMMA_:      
0228   C3 04 0B               JP   comma   
022B                DQUOTE_:      
022B   C3 7C 04               JP   dquote   
022E                GRAVE_:      
022E   C3 7C 04               JP   grave   
0231                UNDERSCORE_:      
0231   C3 04 0B               JP   underscore   
0234                SLASH_:      
0234   C3 00 06               JP   slash   
0237                DOLLAR_:      
0237   C3 CB 03               JP   dollar   
023A                QUESTION_:      
023A   C3 E8 03               JP   question   
023D                             ;                               4
023D                RPAREN_:      
023D                RPAREN:      
023D   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0240   FD 46 09               LD   b,(iy+9)   
0243   DD E9                  JP   (ix)   
0245                             ; { block start                 ; 4
0245                             ; -- block*
0245                LPAREN_:      
0245                LBRACE_:      
0245                LBRACE:      
0245   CD B9 0C               CALL   parseBlock   
0248   DD E9                  JP   (ix)   
024A                             ; ~ char                        8
024A                TILDE_:      
024A                TILDE:       
024A                CHAR:        
024A   03                     INC   bc   ; point to next char
024B   0A                     LD   a,(bc)   
024C   6F                     LD   l,a   
024D   26 00                  LD   h,0   
024F   E5                     PUSH   hl   
0250   DD E9                  JP   (ix)   
0252                             ; & and                          11
0252                             ; a b -- c
0252                PIPE_:       
0252                PIPE:        
0252                OR:          
0252   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0253   E1                     POP   hl   
0254   7B                     LD   a,e   
0255   B5                     OR   l   
0256   6F                     LD   l,a   
0257   7A                     LD   a,d   
0258   B4                     OR   h   
0259   18 4D                  JR   and1   
025B                             ; := define                     12
025B                SEMICOLON_:      
025B                SEMICOLON:      
025B                DEFINEEND:      
025B   2A F4 52               LD   hl,(vDefine)   ; hl = define*
025E   7D                     LD   a,l   
025F   B4                     OR   h   
0260   28 0B                  JR   z,defineEnd1   
0262   11 00 00               LD   de,NUL   ; set vDefine=NUL
0265   ED 53 F4 52            LD   (vDefine),de   
0269   D1                     POP   de   ; de = value
026A   C3 40 03               JP   assign1   
026D                DEFINEEND1:      
026D   DD E9                  JP   (ix)   
026F                             ; _ func                        14
026F                             ; -- func*
026F                COLON_:      
026F                COLON:       
026F   03                     INC   bc   ; arg_list must ve immediately followed by {
0270   0A                     LD   a,(bc)   
0271   FE 3D                  CP   "="   ; := definition
0273   28 07                  JR   z,defineStart   
0275   0B                     DEC   bc   
0276   21 01 00               LD   hl,1   
0279   C3 63 0F               JP   error   
027C                DEFINESTART:      
027C   E1                     POP   hl   ; discard variable value
027D   2A F6 52               LD   hl,(vPointer)   ; vDefine = vPointer
0280   22 F4 52               LD   (vDefine),hl   
0283   DD E9                  JP   (ix)   
0285                             ; [                             14
0285                LBRACK_:      
0285                LBRACK:      
0285                ARRAYSTART:      
0285   11 00 00               LD   de,0   ; create stack frame
0288   D5                     PUSH   de   ; push null for IP
0289   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
028C   FD 56 05               LD   d,(iy+5)   ; 
028F   D5                     PUSH   de   ; 
0290   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0293   FD 56 03               LD   d,(iy+3)   ; 
0296   D5                     PUSH   de   ; 
0297   FD E5                  PUSH   iy   ; push BP
0299   FD 21 00 00            LD   iy,0   ; BP = SP
029D   FD 39                  ADD   iy,sp   
029F   DD E9                  JP   (ix)   
02A1                             ; & and                          14
02A1                             ; a b -- c
02A1                AMPER_:      
02A1                AMPER:       
02A1                AND:         
02A1   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
02A2   E1                     POP   hl   
02A3   7B                     LD   a,e   
02A4   A5                     AND   l   
02A5   6F                     LD   l,a   
02A6   7A                     LD   a,d   
02A7   A4                     AND   h   
02A8                AND1:        
02A8   67                     LD   h,a   
02A9   E5                     PUSH   hl   
02AA   DD E9                  JP   (ix)   
02AC                             ;                               18
02AC                UPCASE_:      
02AC                UPCASE:      
02AC   0A                     LD   a,(bc)   ; a = identifier char
02AD   D6 41                  SUB   "A"   ; "A" = 0
02AF   18 05                  JR   ident1   
02B1                LOWCASE_:      
02B1                LOWCASE:      
02B1   0A                     LD   a,(bc)   
02B2   D6 61                  SUB   "a"   
02B4   C6 1A                  ADD   a,26   
02B6                IDENT1:      
02B6   87                     ADD   a,a   ; l = a * 2
02B7   6F                     LD   l,a   
02B8   26 52                  LD   h,msb(vars)   
02BA   22 F6 52               LD   (vPointer),hl   ; store address in setter
02BD   5E                     LD   e,(hl)   
02BE   23                     INC   hl   
02BF   56                     LD   d,(hl)   
02C0   D5                     PUSH   de   
02C1   DD E9                  JP   (ix)   
02C3                             ; index of an array, based on vDataWidth 22
02C3                             ; array* num -- value    ; also sets vPointer to address
02C3                HASH_:       
02C3                HASH:        
02C3                ARRAYINDEX:      
02C3   E1                     POP   hl   ; hl = index
02C4   D1                     POP   de   ; de = array
02C5   3A E6 52               LD   a,(vDataWidth)   ; a = data width
02C8   3D                     DEC   a   
02C9   28 01                  JR   z,arrayIndex1   
02CB                ARRAYINDEX0:      
02CB   29                     ADD   hl,hl   ; if data width = 2 then double
02CC                ARRAYINDEX1:      
02CC   19                     ADD   hl,de   ; add addr
02CD   22 F6 52               LD   (vPointer),hl   ; store address in setter
02D0   16 00                  LD   d,0   
02D2   5E                     LD   e,(hl)   
02D3   B7                     OR   a   ; check data width again
02D4   28 02                  JR   z,arrayIndex2   
02D6   23                     INC   hl   
02D7   56                     LD   d,(hl)   
02D8                ARRAYINDEX2:      
02D8   D5                     PUSH   de   
02D9   DD E9                  JP   (ix)   
02DB                PLUS_:       
02DB                             ; + add                         25
02DB                             ; a b -- c
02DB                PLUS:        
02DB                ADD:         
02DB   03                     INC   bc   
02DC   0A                     LD   a,(bc)   
02DD   FE 2B                  CP   "+"   ; ++ increment variable
02DF   20 04                  JR   nz,add1   
02E1   E1                     POP   hl   
02E2   23                     INC   hl   
02E3   18 57                  JR   assign0   
02E5                ADD1:        
02E5   0B                     DEC   bc   
02E6   D1                     POP   de   ; second term
02E7   E1                     POP   hl   ; first term
02E8   19                     ADD   hl,de   
02E9                ADD3:        
02E9   03                     INC   bc   
02EA   0A                     LD   a,(bc)   
02EB   FE 3D                  CP   "="   
02ED   28 04                  JR   z,add4   
02EF   0B                     DEC   bc   
02F0   E5                     PUSH   hl   
02F1   DD E9                  JP   (ix)   
02F3                ADD4:        
02F3   18 47                  JR   assign0   
02F5                STAR_:       
02F5   18 0A                  JR   star   
02F7                MINUS_:      
02F7   18 24                  JR   minus   
02F9                BANG_:       
02F9   18 50                  JR   bang   
02FB                EQ_:         
02FB   18 5E                  JR   eq   
02FD                GT_:         
02FD   18 69                  JR   gt   
02FF                LT_:         
02FF   18 71                  JR   lt   
0301                             ;********************** PAGE 2 END *********************************************
0301                             ;********************** PAGE 3,4 BEGIN (shorter ops) *****************************
0301                             ;                               21
0301                STAR:        
0301                MUL:         
0301   D1                     POP   de   ; get first value
0302   E1                     POP   hl   
0303                MUL2:        
0303   C5                     PUSH   bc   ; Preserve the IP
0304   44 4D                  LD   bc,hl   ; bc = 2nd value
0306   21 00 00               LD   hl,0   
0309   3E 10                  LD   a,16   
030B                MUL3:        
030B   29                     ADD   hl,hl   
030C   CB 13                  RL   e   
030E   CB 12                  RL   d   
0310   30 04                  JR   nc,$+6   
0312   09                     ADD   hl,bc   
0313   30 01                  JR   nc,$+3   
0315   13                     INC   de   
0316   3D                     DEC   a   
0317   20 F2                  JR   nz,mul3   
0319   C1                     POP   bc   ; Restore the IP
031A   C3 E9 02               JP   add3   
031D                             ; - sub                          23
031D                             ; a b -- c
031D                MINUS:       
031D   03                     INC   bc   ; check if sign of a number
031E   0A                     LD   a,(bc)   
031F   0B                     DEC   bc   
0320   FE 30                  CP   "0"   
0322   38 05                  JR   c,sub   
0324   FE 3A                  CP   "9"+1   
0326   DA 4C 04               JP   c,num   
0329                SUB:         ; Subtract the value 2nd on stack from top of stack
0329   03                     INC   bc   
032A   FE 2D                  CP   "-"   
032C   20 04                  JR   nz,sub1   
032E   E1                     POP   hl   
032F   2B                     DEC   hl   
0330   18 0A                  JR   assign0   
0332                SUB1:        
0332   0B                     DEC   bc   
0333   D1                     POP   de   
0334   E1                     POP   hl   
0335   B7                     OR   a   
0336   ED 52                  SBC   hl,de   
0338   18 AF                  JR   add3   
033A                             ; value _oldValue --            ; uses address in vPointer 15
033A                ASSIGN:      
033A   E1                     POP   hl   ; discard last accessed value
033B   E1                     POP   hl   ; hl = new value
033C                ASSIGN0:      
033C   EB                     EX   de,hl   ; de = new value
033D   2A F6 52               LD   hl,(vPointer)   
0340                ASSIGN1:      ; entry point from defineEnd
0340   73                     LD   (hl),e   
0341   3A E6 52               LD   a,(vDataWidth)   
0344   3D                     DEC   a   ; is it byte?
0345   28 02                  JR   z,assign2   
0347   23                     INC   hl   
0348   72                     LD   (hl),d   
0349                ASSIGN2:      
0349   DD E9                  JP   (ix)   
034B                BANG:        ; logical invert, any non zero value
034B   03                     INC   bc   
034C   0A                     LD   a,(bc)   
034D   FE 3D                  CP   "="   
034F   20 04                  JR   nz,not   
0351   E1                     POP   hl   
0352   D1                     POP   de   
0353   18 33                  JR   notequals   
0355                NOT:         
0355   0B                     DEC   bc   
0356   21 00 00               LD   hl,0   ; is considered true
0359   18 0A                  JR   eq1   
035B                EQ:          
035B   CD FB 0D               CALL   jumpTable   
035E   3D                     DB   "="   
035F   64                     DB   lsb(eq0_)   
0360   00                     DB   NUL   
0361   C3 3A 03               JP   assign   
0364                EQ0_:        
0364   E1                     POP   hl   
0365                EQ1:         
0365   D1                     POP   de   
0366   18 19                  JR   equals   
0368                GT:          
0368   03                     INC   bc   
0369   0A                     LD   a,(bc)   
036A   FE 3E                  CP   ">"   
036C   28 4A                  JR   z,shiftRight   
036E   D1                     POP   de   
036F   E1                     POP   hl   
0370   18 08                  JR   lt1   
0372                LT:          
0372   03                     INC   bc   
0373   0A                     LD   a,(bc)   
0374   FE 3C                  CP   "<"   
0376   28 30                  JR   z,shiftLeft   
0378   E1                     POP   hl   
0379   D1                     POP   de   
037A                LT1:         
037A   FE 3D                  CP   "="   
037C   28 11                  JR   z,lessthaneq   
037E   0B                     DEC   bc   
037F   18 13                  JR   lessthan   
0381                             ; hl = value1, de = value2
0381                             ; hl = result
0381                EQUALS:      
0381   B7                     OR   a   ; reset the carry flag
0382   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0384   28 16                  JR   z,true1   
0386   18 1A                  JR   false1   
0388                NOTEQUALS:      
0388   B7                     OR   a   ; reset the carry flag
0389   ED 52                  SBC   hl,de   
038B   20 0F                  JR   nz,true1   
038D   18 13                  JR   false1   
038F                             ; hl = value1 de = value2
038F                             ; hl = result
038F                LESSTHANEQ:      
038F   B7                     OR   a   
0390   ED 52                  SBC   hl,de   
0392   18 05                  JR   lessthan1   
0394                             ; hl = value1 de = value2
0394                             ; hl = result
0394                LESSTHAN:      
0394   B7                     OR   a   
0395   ED 52                  SBC   hl,de   
0397   28 09                  JR   z,false1   
0399                LESSTHAN1:      
0399   FA A2 03               JP   m,false1   
039C                TRUE1:       
039C   21 FF FF               LD   hl,TRUE   
039F   E5                     PUSH   hl   
03A0   DD E9                  JP   (ix)   
03A2                NULL1:       
03A2                FALSE1:      
03A2   21 00 00               LD   hl,FALSE   
03A5   E5                     PUSH   hl   
03A6   DD E9                  JP   (ix)   
03A8                             ; shiftLeft                     15
03A8                             ; value count -- value2          shift left count places
03A8                SHIFTLEFT:      
03A8   50 59                  LD   de,bc   ; save IP
03AA   C1                     POP   bc   ; bc = count
03AB   41                     LD   b,c   ; b = loop counter
03AC   E1                     POP   hl   
03AD   04                     INC   b   ; test for counter=0 case
03AE   18 01                  JR   shiftLeft2   
03B0                SHIFTLEFT1:      
03B0   29                     ADD   hl,hl   ; left shift hl
03B1                SHIFTLEFT2:      
03B1   10 FD                  DJNZ   shiftLeft1   
03B3   E5                     PUSH   hl   
03B4   42 4B                  LD   bc,de   ; restore IP
03B6   DD E9                  JP   (ix)   
03B8                             ; shiftRight                    16
03B8                             ; value count -- value2          shift left count places
03B8                SHIFTRIGHT:      
03B8   50 59                  LD   de,bc   ; save IP
03BA   C1                     POP   bc   ; bc = count
03BB   41                     LD   b,c   ; b = loop counter
03BC   E1                     POP   hl   
03BD   04                     INC   b   ; test for counter=0 case
03BE   18 04                  JR   shiftRight2   
03C0                SHIFTRIGHT1:      
03C0   CB 3C                  SRL   h   ; right shift hl
03C2   CB 1D                  RR   l   
03C4                SHIFTRIGHT2:      
03C4   10 FA                  DJNZ   shiftRight1   
03C6   E5                     PUSH   hl   
03C7   42 4B                  LD   bc,de   ; restore IP
03C9   DD E9                  JP   (ix)   
03CB                             ; $ hex                         ; 22
03CB                DOLLAR:      
03CB                HEXNUM:      
03CB   21 00 00               LD   hl,0   ; Clear hl to accept the number
03CE                HEXNUM1:      
03CE   03                     INC   bc   
03CF   0A                     LD   a,(bc)   ; Get the character which is a numeral
03D0   CB 77                  BIT   6,a   ; is it uppercase alpha?
03D2   28 02                  JR   z,hexnum2   ; no a decimal
03D4   D6 07                  SUB   7   ; sub 7  to make $a - $F
03D6                HEXNUM2:      
03D6   D6 30                  SUB   $30   ; form decimal digit
03D8   DA 6E 04               JP   c,num2   
03DB   FE 10                  CP   $0F+1   
03DD   D2 6E 04               JP   nc,num2   
03E0   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
03E1   29                     ADD   hl,hl   ; 4X
03E2   29                     ADD   hl,hl   ; 8X
03E3   29                     ADD   hl,hl   ; 16X
03E4   85                     ADD   a,l   ; add into bottom of hl
03E5   6F                     LD   l,a   
03E6   18 E6                  JR   hexnum1   
03E8                             ; if                            23
03E8                             ; condition then -- value
03E8                QUESTION:      
03E8                IF:          
03E8   03                     INC   bc   
03E9   0A                     LD   a,(bc)   
03EA   FE 3F                  CP   "?"   
03EC   28 06                  JR   z,ifte   
03EE   0B                     DEC   bc   
03EF   11 00 00               LD   de,NUL   ; NUL pointer for else
03F2   18 01                  JR   ifte1   
03F4                             ; ifte
03F4                             ; condition then else -- value
03F4                IFTE:        
03F4   D1                     POP   de   ; de = else
03F5                IFTE1:       
03F5   E1                     POP   hl   ; hl = then
03F6   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
03F7   7C                     LD   a,h   
03F8   B5                     OR   l   
03F9   E1                     POP   hl   ; hl = then
03FA   CA E5 0B               JP   z,go1   ; if z de = else
03FD   EB                     EX   de,hl   ; condition = false, de = then
03FE   C3 E5 0B               JP   go1   
0401                             ; \                             19
0401                BACKSLASH:      
0401                LAMBDA:      
0401   DD E5                  PUSH   ix   
0403   CD 83 0C               CALL   parseArgs   
0406                LAMBDA1:      
0406   03                     INC   bc   ; arg_list must ve immediately followed by {
0407   0A                     LD   a,(bc)   
0408   FE 21                  CP   " "+1   ; skip white space
040A   38 FA                  JR   c,lambda1   
040C   FE 7B                  CP   "{"   
040E   28 06                  JR   z,lambda2   
0410   21 02 00               LD   hl,2   ; error 2: parse error
0413   C3 63 0F               JP   error   
0416                LAMBDA2:      
0416   CD B9 0C               CALL   parseBlock   
0419   CD 23 0D               CALL   createFunc   
041C   E1                     POP   hl   
041D   DD E1                  POP   ix   
041F   E5                     PUSH   hl   
0420   DD E9                  JP   (ix)   
0422                             ;                               32
0422                DIV:         
0422   D1                     POP   de   
0423   E1                     POP   hl   
0424   C5                     PUSH   bc   ; preserve the IP
0425   44 4D                  LD   bc,hl   
0427   CD 33 04               CALL   divide   
042A   EB                     EX   de,hl   
042B   ED 53 F8 52            LD   (vRemain),de   
042F   C1                     POP   bc   
0430   C3 E9 02               JP   add3   
0433                             ; division subroutine.
0433                             ; bc: divisor, de: dividend, hl: remainder
0433                DIVIDE:      
0433   21 00 00               LD   hl,0   ; zero the remainder
0436   3E 10                  LD   a,16   ; loop counter
0438                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0438   CB 21                  SLA   c   
043A   CB 10                  RL   b   
043C   ED 6A                  ADC   hl,hl   
043E   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0440   38 03                  JR   c,divide2   
0442   0C                     INC   c   
0443   18 01                  JR   divide3   
0445                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0445   19                     ADD   hl,de   
0446                DIVIDE3:      
0446   3D                     DEC   a   
0447   20 EF                  JR   nz,divide1   
0449   50 59                  LD   de,bc   ; result from bc to de
044B   C9                     RET      
044C                             ; 0..9 number                   37
044C                NUM:         
044C   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
044F   0A                     LD   a,(bc)   ; Get numeral or -
0450   FE 2D                  CP   "-"   
0452   20 01                  JR   nz,num0   
0454   03                     INC   bc   ; move to next char, no flags affected
0455                NUM0:        
0455   08                     EX   af,af'   ; save zero flag = 0 for later
0456                NUM1:        
0456   0A                     LD   a,(bc)   ; read digit
0457   D6 30                  SUB   "0"   ; less than 0?
0459   38 13                  JR   c,num2   ; not a digit, exit loop
045B   FE 0A                  CP   10   ; greater that 9?
045D   30 0F                  JR   nc,num2   ; not a digit, exit loop
045F   03                     INC   bc   ; inc IP
0460   54 5D                  LD   de,hl   ; multiply hl * 10
0462   29                     ADD   hl,hl   
0463   29                     ADD   hl,hl   
0464   19                     ADD   hl,de   
0465   29                     ADD   hl,hl   
0466   85                     ADD   a,l   ; add digit in a to hl
0467   6F                     LD   l,a   
0468   3E 00                  LD   a,0   
046A   8C                     ADC   a,h   
046B   67                     LD   h,a   
046C   18 E8                  JR   num1   
046E                NUM2:        
046E   0B                     DEC   bc   
046F   08                     EX   af,af'   ; restore zero flag
0470   20 07                  JR   nz,num3   
0472   EB                     EX   de,hl   ; negate the value of hl
0473   21 00 00               LD   hl,0   
0476   B7                     OR   a   ; jump to sub2
0477   ED 52                  SBC   hl,de   
0479                NUM3:        
0479   E5                     PUSH   hl   ; Put the number on the stack
047A   DD E9                  JP   (ix)   ; and process the next character
047C                             ; string                        ;38
047C                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
047C                GRAVE:       
047C                QUOTE:       
047C                DQUOTE:      
047C                STRING:      
047C   2A F0 52               LD   hl,(vHeapPtr)   ; hl = heap*
047F   23                     INC   hl   ; skip length field to start
0480   23                     INC   hl   
0481   E5                     PUSH   hl   ; save start of string
0482   0A                     LD   a,(bc)   
0483   5F                     LD   e,a   ; e = matching terminator
0484   03                     INC   bc   ; point to next char
0485   18 03                  JR   string2   
0487                STRING1:      
0487   77                     LD   (hl),a   
0488   23                     INC   hl   ; increase count
0489   03                     INC   bc   ; point to next char
048A                STRING2:      
048A   0A                     LD   a,(bc)   
048B   BB                     CP   e   ; is it the string terminator
048C   28 02                  JR   z,string3   
048E   18 F7                  JR   string1   
0490                STRING3:      
0490   AF                     XOR   a   ; write NUL to terminate string
0491   77                     LD   (hl),a   ; hl = end of string
0492   23                     INC   hl   
0493   22 F0 52               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0496   2B                     DEC   hl   ; hl = end of string without terminator
0497   D1                     POP   de   ; de = start of string
0498   D5                     PUSH   de   ; return start of string
0499   B7                     OR   a   ; hl = length bytes, de = start of string
049A   ED 52                  SBC   hl,de   
049C   EB                     EX   de,hl   
049D   2B                     DEC   hl   ; write length bytes to length field at start - 2
049E   72                     LD   (hl),d   
049F   2B                     DEC   hl   
04A0   73                     LD   (hl),e   
04A1   DD E9                  JP   (ix)   
04A3                             ; %a .. %z                      43
04A3                             ; -- value
04A3                             ; returns value of arg
04A3                PERCENT:      
04A3                ARG:         
04A3   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
04A6   FD 56 05               LD   d,(iy+5)   
04A9   EB                     EX   de,hl   
04AA   7D                     LD   a,l   ; arg_list* == null, skip
04AB   B4                     OR   h   
04AC   28 1A                  JR   z,arg0a   
04AE   23                     INC   hl   ; a = num_args, hl = arg_list*
04AF   7E                     LD   a,(hl)   
04B0   23                     INC   hl   
04B1   B7                     OR   a   
04B2   28 14                  JR   z,arg0a   ; num_args == 0, skip
04B4   5F                     LD   e,a   ; e = a = num_args
04B5   03                     INC   bc   ; a = next char = dollar_name
04B6   0A                     LD   a,(bc)   
04B7   C5                     PUSH   bc   ; save IP
04B8   43                     LD   b,e   ; b = e = num_args
04B9   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
04BC   FD 56 03               LD   d,(iy+3)   
04BF                ARG0:        
04BF   1B                     DEC   de   ; a = dollar_name, de = next arg*
04C0   1B                     DEC   de   
04C1   BE                     CP   (hl)   
04C2   28 09                  JR   z,arg1   
04C4   23                     INC   hl   ; hl = next arg_list*
04C5   10 F8                  DJNZ   arg0   
04C7   C1                     POP   bc   ; no match, restore IP
04C8                ARG0A:       
04C8   11 00 00               LD   de,0   ; return 0
04CB   18 08                  JR   arg1a   
04CD                ARG1:        
04CD   C1                     POP   bc   ; restore IP
04CE   EB                     EX   de,hl   ; hl = arg*
04CF   22 F6 52               LD   (vPointer),hl   ; store arg* in setter
04D2   5E                     LD   e,(hl)   
04D3   23                     INC   hl   
04D4   56                     LD   d,(hl)   ; de = arg
04D5                ARG1A:       
04D5   D5                     PUSH   de   ; push arg
04D6   DD E9                  JP   (ix)   
04D8                             ;********************** PAGE 3,4 END *********************************************
04D8                          ALIGN   $100   
0500                             ;********************** PAGE 5X BEGIN *********************************************
0500                             ;                               67
0500                DOT:         
0500   CD FB 0D               CALL   jumpTable   
0503   61                     DB   "a"   ; .a print array
0504   BC                     DB   lsb(dotArray)   
0505   63                     DB   "c"   ; .c print char
0506   D2                     DB   lsb(dotChar_)   
0507   73                     DB   "s"   ; .s print string
0508   B8                     DB   lsb(dotString_)   
0509   78                     DB   "x"   ; .x print x chars
050A   D7                     DB   lsb(dotXChars_)   
050B   00                     DB   NUL   ; .  print number
050C   C3 0F 05               JP   dotNumber_   
050F                             ; /bd buffer decimal
050F                             ; value --
050F                DOTNUMBER_:      
050F   3A E8 52               LD   a,(vNumBase)   
0512   FE 10                  CP   16   
0514   CA 80 05               JP   z,dotHex   ; else falls through
0517   C3 1A 05               JP   dotDec   
051A                             ; print decimal                 ; 70
051A                             ; value --
051A                DOTDEC:      
051A   ED 5B EC 52            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
051E   D9                     EXX      
051F   E1                     POP   hl   ; hl = value
0520   CD 34 05               CALL   dotDec0   
0523   D9                     EXX      ; de = buffer*' bc = IP
0524   3E 20                  LD   a," "   ; append space to buffer
0526   12                     LD   (de),a   
0527   1C                     INC   e   ; buffer*++, wraparound
0528   CC C5 0D               CALL   z,flushBuffer   
052B   2A EC 52               LD   hl,(vBufPtr)   ; hl = buffer*
052E   ED 53 EC 52            LD   (vBufPtr),de   ; update buffer* with buffer*'
0532   DD E9                  JP   (ix)   
0534                             ; hl = value
0534                             ; de' = buffer*
0534                             ; a, bc, de, hl destroyed
0534                DOTDEC0:      
0534   CB 7C                  BIT   7,h   
0536   28 0C                  JR   z,dotDec1   
0538   D9                     EXX      
0539   3E 2D                  LD   a,"-"   
053B   12                     LD   (de),a   
053C   13                     INC   de   
053D   D9                     EXX      
053E   AF                     XOR   a   
053F   95                     SUB   l   
0540   6F                     LD   l,a   
0541   9F                     SBC   a,a   
0542   94                     SUB   h   
0543   67                     LD   h,a   
0544                DOTDEC1:      
0544   0E 00                  LD   c,0   ; leading zeros flag = false
0546   11 F0 D8               LD   de,-10000   
0549   CD 64 05               CALL   dotDec2   
054C   11 18 FC               LD   de,-1000   
054F   CD 64 05               CALL   dotDec2   
0552   11 9C FF               LD   de,-100   
0555   CD 64 05               CALL   dotDec2   
0558   1E F6                  LD   e,-10   
055A   CD 64 05               CALL   dotDec2   
055D   0C                     INC   c   ; flag = true for at least digit
055E   1E FF                  LD   e,-1   
0560   CD 64 05               CALL   dotDec2   
0563   C9                     RET      
0564                DOTDEC2:      
0564   06 2F                  LD   b,"0"-1   
0566                DOTDEC3:      
0566   04                     INC   b   
0567   19                     ADD   hl,de   
0568   38 FC                  JR   c,dotDec3   
056A   ED 52                  SBC   hl,de   
056C   3E 30                  LD   a,"0"   
056E   B8                     CP   b   
056F   20 05                  JR   nz,dotDec4   
0571   AF                     XOR   a   
0572   B1                     OR   c   
0573   C8                     RET   z   
0574   18 01                  JR   dotDec5   
0576                DOTDEC4:      
0576   0C                     INC   c   
0577                DOTDEC5:      
0577   78                     LD   a,b   
0578   D9                     EXX      
0579   12                     LD   (de),a   
057A   1C                     INC   e   
057B   CC C5 0D               CALL   z,flushBuffer   
057E   D9                     EXX      
057F   C9                     RET      
0580                             ; buffer hex                    37
0580                             ; value --
0580                DOTHEX:      
0580   E1                     POP   hl   ; hl = value
0581   ED 5B EC 52            LD   de,(vBufPtr)   
0585   3E 24                  LD   a,"$"   ; # prefix
0587   12                     LD   (de),a   
0588   1C                     INC   e   ; buffer*++, wraparound
0589   CC C5 0D               CALL   z,flushBuffer   
058C   7C                     LD   a,h   
058D   CD A1 05               CALL   dotHex1   
0590   7D                     LD   a,l   
0591   CD A1 05               CALL   dotHex1   
0594   3E 20                  LD   a," "   ; append space to buffer
0596   12                     LD   (de),a   
0597   1C                     INC   e   ; buffer*++, wraparound
0598   CC C5 0D               CALL   z,flushBuffer   
059B   ED 53 EC 52            LD   (vBufPtr),de   
059F   DD E9                  JP   (ix)   
05A1                DOTHEX1:      
05A1   F5                     PUSH   af   
05A2   1F                     RRA      
05A3   1F                     RRA      
05A4   1F                     RRA      
05A5   1F                     RRA      
05A6   CD AA 05               CALL   dotHex2   
05A9   F1                     POP   af   
05AA                DOTHEX2:      
05AA   E6 0F                  AND   0x0F   
05AC   C6 90                  ADD   a,0x90   
05AE   27                     DAA      
05AF   CE 40                  ADC   a,0x40   
05B1   27                     DAA      
05B2   12                     LD   (de),a   
05B3   1C                     INC   e   ; buffer*++, wraparound
05B4   CC C5 0D               CALL   z,flushBuffer   
05B7   C9                     RET      
05B8                             ; /bs buffered string
05B8                             ; string* --
05B8                DOTSTRING_:      
05B8   E1                     POP   hl   ; hl = string*
05B9   ED 5B EC 52            LD   de,(vBufPtr)   ; de = buffer*
05BD   18 06                  JR   dotString1   
05BF                DOTSTRING0:      
05BF   12                     LD   (de),a   ; a -> buffer*
05C0   1C                     INC   e   ; buffer*++, wraparound
05C1   CC C5 0D               CALL   z,flushBuffer   
05C4   23                     INC   hl   
05C5                DOTSTRING1:      
05C5   7E                     LD   a,(hl)   ; a <- string*
05C6   B7                     OR   a   ; if NUL exit loop
05C7   20 F6                  JR   nz,dotString0   
05C9   2A EC 52               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
05CC   ED 53 EC 52            LD   (vBufPtr),de   ; save buffer*' in pointer
05D0   DD E9                  JP   (ix)   
05D2                             ; .c print char
05D2                             ; char --
05D2                DOTCHAR_:      
05D2   21 01 00               LD   hl,1   
05D5   18 01                  JR   dotXChars0   
05D7                             ; .x print x chars
05D7                             ; char length --
05D7                DOTXCHARS_:      
05D7   E1                     POP   hl   ; hl = length
05D8                DOTXCHARS0:      
05D8   D1                     POP   de   ; a' = char
05D9   7B                     LD   a,e   
05DA   08                     EX   af,af'   
05DB   ED 5B EC 52            LD   de,(vBufPtr)   ; de = buffer*
05DF   18 08                  JR   dotXChars2   
05E1                DOTXCHARS1:      
05E1   08                     EX   af,af'   
05E2   12                     LD   (de),a   
05E3   08                     EX   af,af'   
05E4   1C                     INC   e   ; buffer*++, wraparound
05E5   CC C5 0D               CALL   z,flushBuffer   
05E8   2B                     DEC   hl   
05E9                DOTXCHARS2:      
05E9   7D                     LD   a,l   
05EA   B4                     OR   h   
05EB   20 F4                  JR   nz,dotXChars1   
05ED   ED 53 EC 52            LD   (vBufPtr),de   ; save buffer*'
05F1   DD E9                  JP   (ix)   
05F3                             ;********************** PAGE 5 END *********************************************
05F3                          ALIGN   $100   
0600                             ;********************** PAGE 6 BEGIN *********************************************
0600                SLASH:       
0600                COMMAND:      
0600   03                     INC   bc   
0601   0A                     LD   a,(bc)   
0602   FE 2F                  CP   "/"   ; // comment
0604   CA 93 06               JP   z,comment   
0607   0B                     DEC   bc   
0608   CD E7 0D               CALL   commandTable   
060B   C4                     DB   lsb(command_a_)   
060C   88                     DB   lsb(command_b_)   
060D   42                     DB   lsb(command_nop_)   
060E   44                     DB   lsb(decimal_)   
060F   42                     DB   lsb(command_nop_)   
0610   FA                     DB   lsb(command_f_)   
0611   42                     DB   lsb(command_nop_)   
0612   56                     DB   lsb(hexadecimal_)   
0613   7F                     DB   lsb(command_i_)   
0614   42                     DB   lsb(command_nop_)   
0615   5C                     DB   lsb(key_)   
0616   42                     DB   lsb(command_nop_)   
0617   26                     DB   lsb(command_m_)   
0618   42                     DB   lsb(command_nop_)   
0619   5F                     DB   lsb(output_)   
061A   29                     DB   lsb(command_p_)   
061B   30                     DB   lsb(command_q_)   
061C   39                     DB   lsb(command_r_)   
061D   3C                     DB   lsb(command_s_)   
061E   62                     DB   lsb(true_)   
061F   42                     DB   lsb(command_nop_)   
0620   3F                     DB   lsb(command_v_)   
0621   65                     DB   lsb(words_)   
0622   B9                     DB   lsb(xor_)   
0623   42                     DB   lsb(command_nop_)   
0624   42                     DB   lsb(command_nop_)   
0625   4C                     DB   lsb(div_)   
0626                             ; 2
0626                COMMAND_M_:      
0626   C3 4B 07               JP   command_m   
0629                             ; 4
0629                COMMAND_P_:      
0629   CD FB 0D               CALL   jumpTable   
062C   00                     DB   NUL   
062D   C3 50 06               JP   error1_   
0630                             ; 6
0630                COMMAND_Q_:      
0630   CD FB 0D               CALL   jumpTable   
0633   74                     DB   "t"   ; /qt quit
0634   9C                     DB   lsb(quit_)   
0635   00                     DB   NUL   
0636   C3 50 06               JP   error1_   
0639                             ; 2
0639                COMMAND_R_:      
0639   C3 57 07               JP   command_r   
063C                             ; 2
063C                COMMAND_S_:      
063C   C3 70 07               JP   command_s   
063F                             ; 2
063F                COMMAND_V_:      
063F   C3 7F 07               JP   command_v   
0642                             ; 2
0642                COMMAND_NOP_:      
0642   DD E9                  JP   (ix)   
0644                             ; 5
0644                DECIMAL_:      
0644   21 0A 00               LD   hl,10   
0647                DECIMAL1:      
0647   22 E8 52               LD   (vNumBase),hl   
064A   DD E9                  JP   (ix)   
064C                             ; 3
064C                DIV_:        
064C   00                     DB   NUL   
064D   C3 22 04               JP   div   
0650                             ; 3
0650                ERROR1_:      
0650   21 01 00               LD   hl,1   ; error 1: unknown command
0653   C3 63 0F               JP   error   
0656                             ; 3
0656                HEXADECIMAL_:      
0656   21 10 00               LD   hl,16   
0659   C3 47 06               JP   decimal1   
065C                             ; 2
065C                KEY_:        
065C   C3 00 07               JP   key   
065F                             ; 2
065F                OUTPUT_:      
065F   C3 09 07               JP   output   
0662                             ; 2
0662                TRUE_:       
0662   C3 9C 03               JP   true1   
0665                             ; 2
0665                WORDS_:      
0665   C3 71 06               JP   words   
0668                             ; 2
0668                ADDROF_:      
0668   C3 06 0B               JP   addrOf   
066B                             ; 2
066B                ARRAYITER_:      
066B   C3 3E 08               JP   arrayIter   
066E                             ; 3
066E                             ; /by
066E                COLDSTART_:      
066E   C3 AC 0E               JP   coldStart   
0671                             ; 4
0671                             ; /w
0671                WORDS:       
0671   21 02 00               LD   hl,2   
0674   C3 7A 06               JP   bytes1   
0677                             ; 6
0677                             ; /b
0677                BYTES_:      
0677   21 01 00               LD   hl,1   
067A                BYTES1:      
067A   22 E6 52               LD   (vDataWidth),hl   
067D   DD E9                  JP   (ix)   
067F                             ; 6
067F                COMMAND_I_:      
067F   CD FB 0D               CALL   jumpTable   
0682   6E                     DB   "n"   ; /in input
0683   A6                     DB   lsb(input_)   
0684   00                     DB   NUL   
0685   C3 50 06               JP   error1_   
0688                             ; 8
0688                COMMAND_B_:      
0688   CD FB 0D               CALL   jumpTable   
068B   72                     DB   "r"   ; /br break
068C   D3                     DB   lsb(break_)   
068D   79                     DB   "y"   ; /by cold boot
068E   6E                     DB   lsb(coldStart_)   
068F   00                     DB   NUL   
0690   C3 77 06               JP   bytes_   ; /b bytes
0693                             ; 8
0693                             ; //
0693                COMMENT:      
0693   03                     INC   bc   ; point to next char
0694   0A                     LD   a,(bc)   
0695   FE 20                  CP   " "   ; terminate on any char less than SP
0697   30 FA                  JR   nc,comment   
0699   0B                     DEC   bc   
069A   DD E9                  JP   (ix)   
069C                             ; 10
069C                             ; /qt
069C                             ; bool --
069C                QUIT_:       
069C   E1                     POP   hl   ; hl = condition, exit if true
069D   7D                     LD   a,l   
069E   B4                     OR   h   
069F   20 02                  JR   nz,quit1   
06A1   DD E9                  JP   (ix)   
06A3                QUIT1:       
06A3   C3 77 0B               JP   blockEnd   
06A6                             ; 11
06A6                             ; Z80 port input
06A6                             ; port -- value
06A6                INPUT_:      
06A6   E1                     POP   hl   
06A7   59                     LD   e,c   ; save IP
06A8   4D                     LD   c,l   
06A9   ED 68                  IN   l,(c)   
06AB   26 00                  LD   h,0   
06AD   4B                     LD   c,e   ; restore IP
06AE   E5                     PUSH   hl   
06AF   DD E9                  JP   (ix)   
06B1                             ; 10
06B1                             ; /as size of an array, num elements, ignores vDataWidth :-/
06B1                             ; array* -- num
06B1                ARRAYSIZE_:      
06B1   E1                     POP   hl   
06B2   2B                     DEC   hl   ; msb size
06B3   56                     LD   d,(hl)   
06B4   2B                     DEC   hl   ; lsb size
06B5   5E                     LD   e,(hl)   
06B6   D5                     PUSH   de   
06B7   DD E9                  JP   (ix)   
06B9                             ; 12
06B9                XOR_:        
06B9   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
06BA                XOR1:        
06BA   E1                     POP   hl   
06BB   7B                     LD   a,e   
06BC   AD                     XOR   l   
06BD   6F                     LD   l,a   
06BE   7A                     LD   a,d   
06BF   AC                     XOR   h   
06C0   67                     LD   h,a   
06C1   E5                     PUSH   hl   
06C2   DD E9                  JP   (ix)   
06C4                             ; 12
06C4                COMMAND_A_:      
06C4   CD FB 0D               CALL   jumpTable   
06C7   62                     DB   "b"   ; /ab absolute
06C8   ED                     DB   lsb(absolute_)   
06C9   64                     DB   "d"   ; /ad address of
06CA   68                     DB   lsb(addrOf_)   
06CB   69                     DB   "i"   ; /ad address of
06CC   6B                     DB   lsb(arrayIter_)   
06CD   73                     DB   "s"   ; /as array size
06CE   B1                     DB   lsb(arraySize_)   
06CF   00                     DB   NUL   
06D0   C3 50 06               JP   error1_   
06D3                             ; 13
06D3                             ; /br break from loop
06D3                             ; --
06D3                BREAK_:      
06D3                BREAK:       
06D3   E1                     POP   hl   ; hl = condition, break if false
06D4   7D                     LD   a,l   
06D5   B4                     OR   h   
06D6   28 02                  JR   z,break1   
06D8   DD E9                  JP   (ix)   
06DA                BREAK1:      
06DA   FD 5D                  LD   e,iyl   ; get block* just under stack frame
06DC   FD 54                  LD   d,iyh   
06DE   21 08 00               LD   hl,8   
06E1   19                     ADD   hl,de   
06E2   23                     INC   hl   
06E3   23                     INC   hl   
06E4   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
06E7   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
06EA   C3 77 0B               JP   blockEnd   
06ED                             ; 14
06ED                             ; /ab absolute
06ED                             ; num -- num
06ED                ABSOLUTE_:      
06ED   E1                     POP   hl   
06EE   CB 7C                  BIT   7,h   
06F0   C8                     RET   z   
06F1   AF                     XOR   a   
06F2   95                     SUB   l   
06F3   6F                     LD   l,a   
06F4   9F                     SBC   a,a   
06F5   94                     SUB   h   
06F6   67                     LD   h,a   
06F7   E5                     PUSH   hl   
06F8   DD E9                  JP   (ix)   
06FA                             ; 2
06FA                COMMAND_F_:      
06FA   18 16                  JR   command_f   
06FC                             ;********************** PAGE 6 END *********************************************
06FC                          ALIGN   $100   
0700                             ;********************** PAGE 7 BEGIN *********************************************
0700                             ; /k                              6
0700                KEY:         
0700   CD 81 00               CALL   getchar   
0703   26 00                  LD   h,0   
0705   6F                     LD   l,a   
0706   E5                     PUSH   hl   
0707   DD E9                  JP   (ix)   
0709                             ; /o Z80 port output               9
0709                             ; value port --
0709                OUTPUT:      
0709   E1                     POP   hl   
070A   59                     LD   e,c   ; save IP
070B   4D                     LD   c,l   
070C   E1                     POP   hl   
070D   ED 69                  OUT   (c),l   
070F   4B                     LD   c,e   ; restore IP
0710   DD E9                  JP   (ix)   
0712                COMMAND_F:      
0712   CD FB 0D               CALL   jumpTable   
0715   64                     DB   "d"   ; /fd fold
0716   36                     DB   lsb(fold_)   
0717   65                     DB   "e"   ; /fe forEach
0718   2B                     DB   lsb(forEach_)   
0719   6C                     DB   "l"   ; /fl flush output buffer
071A   2E                     DB   lsb(flush_)   
071B   73                     DB   "s"   ; /fs funcSrc
071C   39                     DB   lsb(funcSrc_)   
071D   74                     DB   "t"   ; /ft filter
071E   33                     DB   lsb(filter_)   
071F   31                     DB   "1"   
0720   3C                     DB   lsb(f1_)   
0721   32                     DB   "2"   
0722   3F                     DB   lsb(f2_)   
0723   33                     DB   "3"   
0724   42                     DB   lsb(f3_)   
0725   34                     DB   "4"   
0726   45                     DB   lsb(f4_)   
0727   00                     DB   NUL   
0728   C3 48 07               JP   false_   
072B                FOREACH_:      
072B   C3 37 0A               JP   forEach   
072E                             ; /fl flush
072E                             ; --
072E                FLUSH_:      
072E   CD C5 0D               CALL   flushBuffer   
0731   DD E9                  JP   (ix)   
0733                FILTER_:      
0733   C3 87 09               JP   filter   
0736                FOLD_:       
0736   C3 E5 09               JP   fold   
0739                FUNCSRC_:      
0739   C3 83 0A               JP   funcSrc   
073C                F1_:         
073C   C3 AC 0F               JP   f1   
073F                F2_:         
073F   C3 BA 0F               JP   f2   
0742                F3_:         
0742   C3 C6 0F               JP   f3   
0745                F4_:         
0745   C3 D2 0F               JP   f4   
0748                FALSE_:      
0748   C3 A2 03               JP   false1   
074B                COMMAND_M:      
074B   CD FB 0D               CALL   jumpTable   
074E   70                     DB   "p"   ; /mp map
074F   54                     DB   lsb(map_)   
0750   00                     DB   NUL   
0751   C3 50 06               JP   error1_   
0754                MAP_:        
0754   C3 45 09               JP   map   
0757                COMMAND_R:      
0757   CD FB 0D               CALL   jumpTable   
075A   63                     DB   "c"   ; /rc tail call optimisation
075B   64                     DB   lsb(recur_)   
075C   65                     DB   "e"   ; /re remainder
075D   6A                     DB   lsb(remain_)   
075E   67                     DB   "g"   ; /rg range src
075F   7C                     DB   lsb(rangeSrc_)   
0760   00                     DB   NUL   
0761   C3 50 06               JP   error1_   
0764                RECUR_:      
0764   E1                     POP   hl   
0765   22 F2 52               LD   (vRecur),hl   
0768   DD E9                  JP   (ix)   
076A                REMAIN_:      
076A   2A F8 52               LD   hl,(vRemain)   
076D   E5                     PUSH   hl   
076E   DD E9                  JP   (ix)   
0770                COMMAND_S:      
0770   CD FB 0D               CALL   jumpTable   
0773   69                     DB   "i"   
0774   79                     DB   lsb(stringIter_)   
0775   00                     DB   NUL   
0776   C3 50 06               JP   error1_   
0779                STRINGITER_:      
0779   C3 BF 08               JP   stringIter   
077C                RANGESRC_:      
077C   C3 C2 07               JP   rangeSrc   
077F                COMMAND_V:      
077F   CD FB 0D               CALL   jumpTable   
0782   62                     DB   "b"   
0783   A1                     DB   lsb(varBufPtr_)   
0784   68                     DB   "h"   
0785   AA                     DB   lsb(varHeapPtr_)   
0786   74                     DB   "t"   
0787   B3                     DB   lsb(varTIBPtr_)   
0788   42                     DB   "B"   
0789   92                     DB   lsb(constBufStart_)   
078A   48                     DB   "H"   
078B   97                     DB   lsb(constHeapStart_)   
078C   54                     DB   "T"   
078D   9C                     DB   lsb(constTIBStart_)   
078E   00                     DB   NUL   
078F   C3 50 06               JP   error1_   
0792                CONSTBUFSTART_:      
0792   11 00 51               LD   de,BUF   
0795   18 28                  JR   constant   
0797                CONSTHEAPSTART_:      
0797   11 20 53               LD   de,HEAP   
079A   18 23                  JR   constant   
079C                CONSTTIBSTART_:      
079C   11 00 50               LD   de,TIB   
079F   18 1E                  JR   constant   
07A1                VARBUFPTR_:      
07A1   ED 5B EC 52            LD   de,(vBufPtr)   
07A5   21 EC 52               LD   hl,vBufPtr   
07A8   18 12                  JR   variable   
07AA                VARHEAPPTR_:      
07AA   ED 5B F0 52            LD   de,(vHeapPtr)   
07AE   21 F0 52               LD   hl,vHeapPtr   
07B1   18 09                  JR   variable   
07B3                VARTIBPTR_:      
07B3   ED 5B EA 52            LD   de,(vTIBPtr)   
07B7   21 EA 52               LD   hl,vTIBPtr   
07BA   18 00                  JR   variable   
07BC                VARIABLE:      
07BC   22 F6 52               LD   (vPointer),hl   
07BF                CONSTANT:      
07BF   D5                     PUSH   de   
07C0   DD E9                  JP   (ix)   
07C2                             ;********************** PAGE 7 END *********************************************
07C2                             ;*******************************************************************
07C2                             ; Monty implementations
07C2                             ;*******************************************************************
07C2                             ; /rg rangeSrc
07C2                             ; begin end step -- src
07C2                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
07C2                RANGESRC:      ; range source: begin, end, step, local: L
07C2   CD E4 0B               CALL   go   
07C5   00 00                  DW   NUL   
07C7   D1 07                  DW   rangeSrcM_1910S1511   
07C9   CB 07                  DW   $+2   
07CB   01                     DB   1   
07CC   04 62 65 73 4C         .PSTR   "besL"   
07D1                RANGESRCM_1910S1511:      
07D1   7B                     DB   "{"   
07D2   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
07DD   5C 6B 74 7B            DB   "\\kt{"   
07E1   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
07E9   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
07EF   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
07F7   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
07FF   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
0809   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0811   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
0818   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
082C   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
0834   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
083B   7D                     DB   "}"   
083C   7D                     DB   "}"   
083D   00                     DB   0   
083E                             ; /ai arrayIter
083E                             ; array* -- src
083E                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
083E                ARRAYITER:      
083E   CD E4 0B               CALL   go   
0841   00 00                  DW   NUL   
0843   4B 08                  DW   arrayIterM_1929S1531   
0845   47 08                  DW   $+2   
0847   01                     DB   1   
0848   02 61 4C               .PSTR   "aL"   
084B                ARRAYITERM_1929S1531:      
084B   7B                     DB   "{"   
084C   5B 30 20 2F 74 20 25 61 2F 61 73 5D 20 25 4C 3D DB   "[0 /t %a/as] %L="   ; init mutable L [index active size]
085C   5C 6B 74 7B            DB   "\\kt{"   
0860   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0868   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
086E   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0876   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
087E   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
0885   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
088D   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
0896   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
08AD   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
08B5   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08BC   7D                     DB   "}"   
08BD   7D                     DB   "}"   
08BE   00                     DB   0   
08BF                             ; /si stringIter
08BF                             ; string* -- src
08BF                          ;*Macro unroll: FUNC stringIter, 1, "sL"
08BF                STRINGITER:      
08BF   CD E4 0B               CALL   go   
08C2   00 00                  DW   NUL   
08C4   CC 08                  DW   stringIterM_1948S1551   
08C6   C8 08                  DW   $+2   
08C8   01                     DB   1   
08C9   02 73 4C               .PSTR   "sL"   
08CC                STRINGITERM_1948S1551:      
08CC   7B                     DB   "{"   
08CD   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
08D7   5C 6B 74 7B            DB   "\\kt{"   
08DB   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
08E3   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
08EA   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
08F2   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
08FA   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
0901   2F 62 20 25 73 25 69 23 20 2F 77 20 25 63 3D DB   "/b %s%i# /w %c="   ; read byte at i, store in c as word
0910   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0918   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
091F   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
0933   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
093B   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0942   7D                     DB   "}"   
0943   7D                     DB   "}"   
0944   00                     DB   0   
0945                             ; /mp map
0945                             ; src func -- src1
0945                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
0945                MAP:         ; map: source, function
0945   CD E4 0B               CALL   go   
0948   00 00                  DW   NUL   
094A   52 09                  DW   mapM_1968S1573   
094C   4E 09                  DW   $+2   
094E   00                     DB   0   
094F   02 73 66               .PSTR   "sf"   
0952                MAPM_1968S1573:      
0952   7B                     DB   "{"   
0953   5C 6B 74 7B            DB   "\\kt{"   
0957   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
095F   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0963   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0968   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
0974   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
097D   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0984   7D                     DB   "}"   
0985   7D                     DB   "}"   
0986   00                     DB   0   
0987                             ; /ft filter
0987                             ; src pred -- src1
0987                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
0987                FILTER:      ; filter: source, predicate, local: T
0987   CD E4 0B               CALL   go   
098A   00 00                  DW   NUL   
098C   95 09                  DW   filterM_1982S1588   
098E   90 09                  DW   $+2   
0990   01                     DB   1   
0991   03 73 70 54            .PSTR   "spT"   
0995                FILTERM_1982S1588:      
0995   7B                     DB   "{"   
0996   5B 30 5D 25 54 3D      DB   "[0]%T="   
099C   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09A0   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09A4   5B                     DB   "["   
09A5   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
09B2   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
09BA   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
09BE   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
09C3   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
09D9   3F 3F                  DB   "??"   
09DB   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09E2   7D                     DB   "}"   
09E3   7D                     DB   "}"   
09E4   00                     DB   0   
09E5                             ; /fd fold
09E5                             ; reducer is a function like: \\da00bbLi4u
09E5                             ; src init reducer -- src1
09E5                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
09E5                FOLD:        ; src, init, reducer
09E5   CD E4 0B               CALL   go   
09E8   00 00                  DW   NUL   
09EA   F4 09                  DW   foldM_2001S1608   
09EC   EE 09                  DW   $+2   
09EE   01                     DB   1   
09EF   04 73 69 72 41         .PSTR   "sirA"   
09F4                FOLDM_2001S1608:      
09F4   7B                     DB   "{"   ; reducer: \\da00bbLi4u
09F5   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
09FC   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0A00   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0A04   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0A09   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
0A24   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0A2D   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A34   7D                     DB   "}"   
0A35   7D                     DB   "}"   
0A36   00                     DB   0   
0A37                             ; /fe forEach
0A37                             ; src proc --
0A37                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
0A37                FOREACH:      ; forEach: source, procedure, local: T
0A37   CD E4 0B               CALL   go   
0A3A   00 00                  DW   NUL   
0A3C   45 0A                  DW   forEachM_2015S1623   
0A3E   40 0A                  DW   $+2   
0A40   01                     DB   1   
0A41   03 73 70 54            .PSTR   "spT"   
0A45                FOREACHM_2015S1623:      
0A45   7B                     DB   "{"   
0A46   5B 30 5D 25 54 3D      DB   "[0]%T="   
0A4C   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
0A50   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
0A58   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0A5D   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0A6F   3F 3F                  DB   "??"   ; ifte:
0A71   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0A7A   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A81   7D                     DB   "}"   
0A82   00                     DB   0   
0A83                             ; ; /fs funcSrc
0A83                             ; ; func -- src
0A83                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0A83                FUNCSRC:      ; :f func or block
0A83   CD E4 0B               CALL   go   
0A86   00 00                  DW   NUL   
0A88   8F 0A                  DW   funcSrcM_2029S1638   
0A8A   8C 0A                  DW   $+2   
0A8C   00                     DB   0   
0A8D   01 66                  .PSTR   "f"   
0A8F                FUNCSRCM_2029S1638:      
0A8F   7B                     DB   "{"   
0A90   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0A94   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0A9C   5C 64 74 7B            DB   "\\dt{"   
0AA0   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0AB2   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0AB9   7D                     DB   "}"   
0ABA   7D                     DB   "}"   
0ABB   00                     DB   0   
0ABC                          ;*Macro unroll: FUNC dotArray, 2, "abc"
0ABC                DOTARRAY:      
0ABC   CD E4 0B               CALL   go   
0ABF   00 00                  DW   NUL   
0AC1   CA 0A                  DW   dotArrayM_2039S1649   
0AC3   C5 0A                  DW   $+2   
0AC5   02                     DB   2   
0AC6   03 61 62 63            .PSTR   "abc"   
0ACA                DOTARRAYM_2039S1649:      
0ACA   7B                     DB   "{"   
0ACB   60 5B 20 60 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 60 5D 60 2E 73 DB   "`[ `.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ `]`.s"   
0B02   7D                     DB   "}"   
0B03   00                     DB   0   
0B04                             ;*******************************************************************
0B04                             ; unused opcodes (reserved)
0B04                             ;*******************************************************************
0B04                UNDERSCORE:      
0B04                COMMA:       
0B04   DD E9                  JP   (ix)   
0B06                             ;*******************************************************************
0B06                             ; implementations
0B06                             ;*******************************************************************
0B06                             ; /ad addrOf                    24
0B06                             ; char -- addr
0B06                ADDROF:      
0B06   E1                     POP   hl   ; a = char
0B07   7D                     LD   a,l   
0B08   FE 7B                  CP   "z"+1   ; if a > z then exit
0B0A   30 19                  JR   nc,addrOf2   
0B0C   D6 41                  SUB   "A"   ; a - 65
0B0E   38 15                  JR   c,addrOf2   ; if < A then exit
0B10   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0B12   38 06                  JR   c,addrOf1   
0B14   D6 06                  SUB   "a"-("Z"+1)   
0B16   FE 1A                  CP   "Z"-"A"+1   
0B18   38 0B                  JR   c,addrOf2   ; if < a then exit
0B1A                ADDROF1:      
0B1A   87                     ADD   a,a   ; double a
0B1B   21 00 52               LD   hl,VARS   ; hl = VARS + a
0B1E   85                     ADD   a,l   
0B1F   6F                     LD   l,a   
0B20   3E 00                  LD   a,0   
0B22   8C                     ADC   a,h   
0B23   67                     LD   h,a   
0B24   E5                     PUSH   hl   
0B25                ADDROF2:      
0B25   DD E9                  JP   (ix)   
0B27                             ;                               51
0B27                RBRACK:      
0B27                ARRAYEND:      
0B27   FD 54                  LD   d,iyh   ; de = BP
0B29   FD 5D                  LD   e,iyl   
0B2B   ED 43 02 53            LD   (vTemp1),bc   ; save IP
0B2F   62 6B                  LD   hl,de   ; hl = de = BP
0B31   B7                     OR   a   
0B32   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0B34   CB 3C                  SRL   h   ; 
0B36   CB 1D                  RR   l   
0B38   44 4D                  LD   bc,hl   ; bc = count
0B3A   2A F0 52               LD   hl,(vHeapPtr)   ; hl = array[-4]
0B3D   71                     LD   (hl),c   ; write num items in length word
0B3E   23                     INC   hl   
0B3F   70                     LD   (hl),b   
0B40   23                     INC   hl   ; hl = array[0], bc = count
0B41                             ; de = BP, hl = array[0], bc = count
0B41   18 15                  JR   arrayEnd3   
0B43                ARRAYEND1:      
0B43   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0B46   77                     LD   (hl),a   ; write lsb of array item
0B47   23                     INC   hl   ; move to msb of array item
0B48   3A E6 52               LD   a,(vDataWidth)   ; vDataWidth=1?
0B4B   3D                     DEC   a   
0B4C   28 05                  JR   z,arrayEnd2   
0B4E   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0B51   77                     LD   (hl),a   ; write msb of array item
0B52   23                     INC   hl   ; move to next word in array
0B53                ARRAYEND2:      
0B53   FD 2B                  DEC   iy   ; move to next word on stack
0B55   FD 2B                  DEC   iy   
0B57   0B                     DEC   bc   ; dec items count
0B58                ARRAYEND3:      
0B58   79                     LD   a,c   ; if not zero loop
0B59   B0                     OR   b   
0B5A   20 E7                  JR   nz,arrayEnd1   
0B5C   EB                     EX   de,hl   ; de = end of array, hl = BP
0B5D   F9                     LD   sp,hl   ; sp = BP
0B5E   E1                     POP   hl   ; de = end of array, hl = old BP
0B5F   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0B60   FD 62                  LD   iyh,d   
0B62   FD 6B                  LD   iyl,e   
0B64   D1                     POP   de   ; pop arg_list (discard)
0B65   D1                     POP   de   ; pop first_arg* (discard)
0B66   D1                     POP   de   ; pop IP (discard)
0B67   ED 5B F0 52            LD   de,(vHeapPtr)   ; de = array[-2]
0B6B   13                     INC   de   
0B6C   13                     INC   de   
0B6D   D5                     PUSH   de   ; return array[0]
0B6E   22 F0 52               LD   (vHeapPtr),hl   ; move heap* to end of array
0B71   ED 4B 02 53            LD   bc,(vTemp1)   ; restore IP
0B75   DD E9                  JP   (ix)   
0B77                             ;                               58
0B77                RBRACE:      
0B77                BLOCKEND:      
0B77   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0B7A   FD 56 01               LD   d,(iy+1)   
0B7D   ED 53 02 53            LD   (vTemp1),de   
0B81   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0B84   FD 56 07               LD   d,(iy+7)   
0B87   ED 53 04 53            LD   (vTemp2),de   
0B8B   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0B8E   FD 56 03               LD   d,(iy+3)   
0B91   EB                     EX   de,hl   
0B92   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0B95   FD 56 01               LD   d,(iy+1)   
0B98   13                     INC   de   ; for carry flag <=
0B99   B7                     OR   a   
0B9A   ED 52                  SBC   hl,de   
0B9C   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0B9E   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0BA0   FD 5D                  LD   e,iyl   
0BA2   21 08 00               LD   hl,8   
0BA5   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0BA6   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0BA7   18 0C                  JR   blockEnd2   
0BA9                BLOCKEND1:      ; same scope
0BA9   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0BAC   FD 56 03               LD   d,(iy+3)   
0BAF   EB                     EX   de,hl   
0BB0   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0BB2   FD 5D                  LD   e,iyl   
0BB4   EB                     EX   de,hl   
0BB5                BLOCKEND2:      
0BB5   44 4D                  LD   bc,hl   ; bc = hl = BP
0BB7   B7                     OR   a   ; hl = BP - SP = count
0BB8   ED 72                  SBC   hl,sp   
0BBA   7D                     LD   a,l   
0BBB   B4                     OR   h   
0BBC   28 09                  JR   z,blockEnd3   
0BBE   C5                     PUSH   bc   ; bc = count, hl = BP
0BBF   44 4D                  LD   bc,hl   
0BC1   E1                     POP   hl   
0BC2   2B                     DEC   hl   ; hl = BP-1
0BC3   1B                     DEC   de   ; de = args*-1
0BC4   ED B8                  LDDR      
0BC6   13                     INC   de   
0BC7                BLOCKEND3:      
0BC7   EB                     EX   de,hl   ; sp = de = new tos*
0BC8   F9                     LD   sp,hl   
0BC9   ED 4B 04 53            LD   bc,(vTemp2)   
0BCD   FD 2A 02 53            LD   iy,(vTemp1)   
0BD1   ED 5B F2 52            LD   de,(vRecur)   ; de = recur vector
0BD5   7B                     LD   a,e   ; check for NUL
0BD6   B2                     OR   d   
0BD7   20 02                  JR   nz,blockEnd4   
0BD9   DD E9                  JP   (ix)   
0BDB                BLOCKEND4:      
0BDB   21 00 00               LD   hl,0   ; clear recur vector
0BDE   22 F2 52               LD   (vRecur),hl   
0BE1   C3 E5 0B               JP   go1   ; execute de
0BE4                             ; execute a block of code which ends with } 116
0BE4                             ; creates a root scope if BP == stack
0BE4                             ; else uses outer scope
0BE4                CARET:       
0BE4                GO:          
0BE4   D1                     POP   de   ; de = block*
0BE5                GO1:         
0BE5   7B                     LD   a,e   ; if block* == null, exit
0BE6   B2                     OR   d   
0BE7   20 02                  JR   nz,go2   
0BE9   DD E9                  JP   (ix)   
0BEB                GO2:         
0BEB   1A                     LD   a,(de)   
0BEC   FE 7B                  CP   "{"   
0BEE   28 06                  JR   z,goBlock   
0BF0   FE 28                  CP   "("   
0BF2   C2 29 0C               JP   nz,goFunc   
0BF5   D5                     PUSH   de   ; push de just before stack frame
0BF6                GOBLOCK:      
0BF6   ED 53 02 53            LD   (vTemp1),de   ; save de
0BFA   21 00 50               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0BFD   FD 54                  LD   d,iyh   
0BFF   FD 5D                  LD   e,iyl   
0C01   B7                     OR   a   ; if stack* == BP then this is the root_scope
0C02   ED 52                  SBC   hl,de   
0C04   ED 5B 02 53            LD   de,(vTemp1)   ; restore de
0C08   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0C09   B4                     OR   h   
0C0A   3E 00                  LD   a,0   
0C0C   28 6A                  JR   z,goFunc8   
0C0E   C5                     PUSH   bc   ; push IP
0C0F   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0C12   FD 46 05               LD   b,(iy+5)   
0C15   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0C18   FD 66 03               LD   h,(iy+3)   
0C1B                GOBLOCK2:      
0C1B   C5                     PUSH   bc   ; arg_list*
0C1C   E5                     PUSH   hl   ; first_arg*
0C1D   FD E5                  PUSH   iy   ; push BP
0C1F   FD 21 00 00            LD   iy,0   ; BP = SP
0C23   FD 39                  ADD   iy,sp   
0C25                GOBLOCK3:      
0C25   42 4B                  LD   bc,de   ; bc = de = block*-1
0C27   DD E9                  JP   (ix)   
0C29                GOFUNC:      ; execute func
0C29   EB                     EX   de,hl   ; hl = func*
0C2A   5E                     LD   e,(hl)   ; de = partial_array*
0C2B   23                     INC   hl   
0C2C   56                     LD   d,(hl)   
0C2D   23                     INC   hl   
0C2E   7B                     LD   a,e   ; if partial_array* == null skip
0C2F   B2                     OR   d   
0C30   28 21                  JR   z,goFunc3   
0C32   ED 43 02 53            LD   (vTemp1),bc   
0C36   22 04 53               LD   (vTemp2),hl   ; save bc,hl
0C39   EB                     EX   de,hl   ; hl = partial_array*
0C3A   2B                     DEC   hl   ; bc = count
0C3B   46                     LD   b,(hl)   
0C3C   2B                     DEC   hl   
0C3D   4E                     LD   c,(hl)   
0C3E   23                     INC   hl   ; hl = array data*
0C3F   23                     INC   hl   
0C40   18 06                  JR   goFunc2   ; push each item on stack
0C42                GOFUNC1:      
0C42   5E                     LD   e,(hl)   ; de = partial item
0C43   23                     INC   hl   
0C44   56                     LD   d,(hl)   
0C45   23                     INC   hl   
0C46   D5                     PUSH   de   ; push on stack
0C47   0B                     DEC   bc   
0C48                GOFUNC2:      
0C48   79                     LD   a,c   ; if count != 0 then loop
0C49   B0                     OR   b   
0C4A   20 F6                  JR   nz,goFunc1   
0C4C   ED 4B 02 53            LD   bc,(vTemp1)   ; restore bc
0C50   2A 04 53               LD   hl,(vTemp2)   ; restore hl
0C53                GOFUNC3:      
0C53   5E                     LD   e,(hl)   ; de = block*
0C54   23                     INC   hl   
0C55   56                     LD   d,(hl)   
0C56   23                     INC   hl   
0C57   ED 53 02 53            LD   (vTemp1),de   ; save block*
0C5B   5E                     LD   e,(hl)   ; de = arg_list*
0C5C   23                     INC   hl   
0C5D   56                     LD   d,(hl)   
0C5E   23                     INC   hl   
0C5F   EB                     EX   de,hl   ; hl = arg_list*
0C60   ED 5B 02 53            LD   de,(vTemp1)   ; restore de = block*
0C64   7D                     LD   a,l   ; if arg_list* == null a = 0
0C65   B4                     OR   h   
0C66   20 03                  JR   nz,goFunc4   
0C68   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0C69   18 0D                  JR   goFunc8   
0C6B                GOFUNC4:      ; allocate locals
0C6B   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0C6C   18 03                  JR   goFunc6   
0C6E                GOFUNC5:      ; loop
0C6E   3B                     DEC   sp   
0C6F   3B                     DEC   sp   
0C70   3D                     DEC   a   
0C71                GOFUNC6:      
0C71   B7                     OR   a   
0C72   20 FA                  JR   nz,goFunc5   ; end loop
0C74                GOFUNC7:      
0C74   23                     INC   hl   ; a = num_args* x 2
0C75   7E                     LD   a,(hl)   
0C76   2B                     DEC   hl   
0C77   87                     ADD   a,a   ; a *= 2
0C78                GOFUNC8:      
0C78   C5                     PUSH   bc   ; push IP
0C79   44 4D                  LD   bc,hl   
0C7B   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0C7E   85                     ADD   a,l   
0C7F   6F                     LD   l,a   
0C80   39                     ADD   hl,sp   
0C81   18 98                  JR   goBlock2   
0C83                             ; 
0C83                             ;*******************************************************************
0C83                             ; general routines
0C83                             ;*******************************************************************
0C83                             ; arg_list - parses arg_list e.g. ab:c
0C83                             ; -- arg_list*
0C83                PARSEARGS:      
0C83   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0C86   2A F0 52               LD   hl,(vHeapPtr)   ; hl = heap*
0C89   E5                     PUSH   hl   ; save start of arg_list
0C8A   23                     INC   hl   ; skip length fields to start of string
0C8B   23                     INC   hl   
0C8C   03                     INC   bc   ; point to next char
0C8D                PARSEARGS1:      
0C8D   0A                     LD   a,(bc)   
0C8E   FE 3A                  CP   ":"   ; ":" switches from args to locals
0C90   20 03                  JR   nz,parseArgs1a   
0C92   14                     INC   d   ; non zero value local count acts as flag
0C93   18 10                  JR   parseArgs3   
0C95                PARSEARGS1A:      
0C95   FE 61                  CP   "a"   ; < "a" terminates arg_list
0C97   38 0F                  JR   c,parseArgs4   
0C99   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0C9B   30 0B                  JR   nc,parseArgs4   
0C9D                PARSEARGS2:      
0C9D   77                     LD   (hl),a   
0C9E   23                     INC   hl   
0C9F   1C                     INC   e   ; increase arg count
0CA0   AF                     XOR   a   
0CA1   B2                     OR   d   
0CA2   28 01                  JR   z,parseArgs3   
0CA4   14                     INC   d   ; if d > 0 increase local count
0CA5                PARSEARGS3:      
0CA5   03                     INC   bc   ; point to next char
0CA6   18 E5                  JR   parseArgs1   
0CA8                PARSEARGS4:      
0CA8   0B                     DEC   bc   
0CA9   AF                     XOR   a   
0CAA   B2                     OR   d   
0CAB   28 01                  JR   z,parseArgs5   
0CAD   15                     DEC   d   ; remove initial inc
0CAE                PARSEARGS5:      
0CAE   23                     INC   hl   
0CAF   22 F0 52               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0CB2   E1                     POP   hl   ; hl = start of arg_list
0CB3   72                     LD   (hl),d   ; write number of locals at start - 1
0CB4   23                     INC   hl   
0CB5   73                     LD   (hl),e   ; write number of args + locals at start - 2
0CB6   2B                     DEC   hl   
0CB7   E3                     EX   (sp),hl   
0CB8   E9                     JP   (hl)   
0CB9                             ; create block: parses block e.g. 00bbIC4uLi4g
0CB9                             ; -- block*
0CB9                PARSEBLOCK:      
0CB9   C5                     PUSH   bc   ; return pointer to first { of block
0CBA   03                     INC   bc   
0CBB   16 01                  LD   d,1   ; nesting: count first parenthesis
0CBD                PARSEBLOCK1:      ; Skip to end of definition
0CBD   0A                     LD   a,(bc)   ; Get the next character
0CBE   03                     INC   bc   ; Point to next character
0CBF   FE 21                  CP   " " + 1   ; ignore whitespace
0CC1   38 FA                  JR   c,parseBlock1   
0CC3   FE 29                  CP   ")"   
0CC5   28 2D                  JR   z,parseBlock4   
0CC7   FE 7D                  CP   "}"   
0CC9   28 29                  JR   z,parseBlock4   
0CCB   FE 5D                  CP   "]"   
0CCD   28 25                  JR   z,parseBlock4   
0CCF   FE 28                  CP   "("   
0CD1   28 16                  JR   z,parseBlock2   
0CD3   FE 7B                  CP   "{"   
0CD5   28 12                  JR   z,parseBlock2   
0CD7   FE 5B                  CP   "["   
0CD9   28 0E                  JR   z,parseBlock2   
0CDB   FE 27                  CP   "'"   
0CDD   28 0D                  JR   z,parseBlock3   
0CDF   FE 60                  CP   "`"   
0CE1   28 09                  JR   z,parseBlock3   
0CE3   FE 22                  CP   DQ   
0CE5   28 05                  JR   z,parseBlock3   
0CE7   18 D4                  JR   parseBlock1   
0CE9                PARSEBLOCK2:      
0CE9   14                     INC   d   
0CEA   18 D1                  JR   parseBlock1   
0CEC                PARSEBLOCK3:      
0CEC   3E 80                  LD   a,$80   
0CEE   AA                     XOR   d   
0CEF   57                     LD   d,a   
0CF0   20 CB                  JR   nz,parseBlock1   
0CF2   18 03                  JR   parseBlock5   
0CF4                PARSEBLOCK4:      
0CF4   15                     DEC   d   
0CF5   20 C6                  JR   nz,parseBlock1   ; get the next element
0CF7                PARSEBLOCK5:      
0CF7   60 69                  LD   hl,bc   ; hl = IP
0CF9   11 20 53               LD   de,HEAP   ; is IP pointing to object in heap
0CFC   B7                     OR   a   ; IP - HEAP
0CFD   ED 52                  SBC   hl,de   
0CFF   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0D01   28 1C                  JR   z,parseBlock6   
0D03   60 69                  LD   hl,bc   ; hl = IP
0D05   D1                     POP   de   ; de = block*
0D06   ED 43 02 53            LD   (vTemp1),bc   ; save IP
0D0A   B7                     OR   a   ; bc = size
0D0B   ED 52                  SBC   hl,de   
0D0D   44 4D                  LD   bc,hl   
0D0F   EB                     EX   de,hl   ; hl = block* de = heap*
0D10   ED 5B F0 52            LD   de,(vHeapPtr)   
0D14   D5                     PUSH   de   ; return hblock*
0D15   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0D17   ED 53 F0 52            LD   (vHeapPtr),de   ; heap* += size
0D1B   ED 4B 02 53            LD   bc,(vTemp1)   ; restore IP
0D1F                PARSEBLOCK6:      
0D1F   0B                     DEC   bc   ; balanced, exit
0D20   E1                     POP   hl   ; hl = block*
0D21   E3                     EX   (sp),hl   ; return to caller
0D22   E9                     JP   (hl)   
0D23                             ; create function
0D23                             ; arg_list* block* -- func*
0D23                CREATEFUNC:      
0D23   E1                     POP   hl   ; save retrn address
0D24   22 06 53               LD   (vTemp3),hl   
0D27   ED 43 02 53            LD   (vTemp1),bc   ; save IP
0D2B   E1                     POP   hl   ; hl = block*
0D2C   22 04 53               LD   (vTemp2),hl   ; save block*
0D2F   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0D32   FD 56 05               LD   d,(iy+5)   
0D35   7B                     LD   a,e   ; if arg_list == null then make a func
0D36   B2                     OR   d   
0D37   20 09                  JR   nz,createFunc0   
0D39   21 00 00               LD   hl,0   ; partial_array = null
0D3C   ED 5B F0 52            LD   de,(vHeapPtr)   ; de = compile*
0D40   18 65                  JR   createFunc5   
0D42                CREATEFUNC0:      
0D42   E1                     POP   hl   ; hl = inner_arg_list*
0D43   E5                     PUSH   hl   ; save inner_arg_list
0D44   ED 5B F0 52            LD   de,(vHeapPtr)   ; de = compile*
0D48   7E                     LD   a,(hl)   ; compile inner_num_locals
0D49   4F                     LD   c,a   ; b = inner_num_locals
0D4A   12                     LD   (de),a   
0D4B   23                     INC   hl   
0D4C   13                     INC   de   
0D4D   7E                     LD   a,(hl)   ; compile inner_length
0D4E   12                     LD   (de),a   
0D4F   91                     SUB   c   ; a = inner_num args
0D50   23                     INC   hl   
0D51   13                     INC   de   
0D52   B7                     OR   a   ; compile args if inner_length > 0
0D53   28 05                  JR   z,createFunc1   
0D55   4F                     LD   c,a   ; bc = a
0D56   06 00                  LD   b,0   
0D58   ED B0                  LDIR      
0D5A                CREATEFUNC1:      
0D5A   EB                     EX   de,hl   ; hl = outer_arg_list
0D5B   FD 5E 04               LD   e,(iy+4)   
0D5E   FD 56 05               LD   d,(iy+5)   
0D61   EB                     EX   de,hl   
0D62   23                     INC   hl   ; a = outer_length
0D63   7E                     LD   a,(hl)   
0D64   23                     INC   hl   
0D65   B7                     OR   a   
0D66   28 05                  JR   z,createFunc2   
0D68   4F                     LD   c,a   
0D69   06 00                  LD   b,0   
0D6B   ED B0                  LDIR      ; append outer_args
0D6D                CREATEFUNC2:      ; a = outer_length
0D6D   47                     LD   b,a   ; b = a = outer_length
0D6E   2A F0 52               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0D71   23                     INC   hl   
0D72   7E                     LD   a,(hl)   ; add outer_length to new length
0D73   80                     ADD   a,b   
0D74   77                     LD   (hl),a   
0D75   2B                     DEC   hl   
0D76   78                     LD   a,b   ; save outer_length in a'
0D77   08                     EX   af,af'   
0D78   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0D79   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0D7A   B7                     OR   a   
0D7B   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0D7D   4F                     LD   c,a   ; c = inner_num_locals
0D7E   06 00                  LD   b,0   ; bc = inner_num_locals
0D80   23                     INC   hl   ; a = inner_length
0D81   7E                     LD   a,(hl)   
0D82   91                     SUB   c   ; a = inner_num_args
0D83   23                     INC   hl   ; hl = inner_arg_chars
0D84   85                     ADD   a,l   ; hl += a
0D85   6F                     LD   l,a   
0D86   3E 00                  LD   a,0   
0D88   84                     ADD   a,h   
0D89   67                     LD   h,a   
0D8A   ED B0                  LDIR      ; append inner_locals
0D8C                CREATEFUNC2A:      
0D8C   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0D8D   12                     LD   (de),a   ; compile partial_array length field
0D8E   13                     INC   de   
0D8F   AF                     XOR   a   
0D90   12                     LD   (de),a   
0D91   13                     INC   de   
0D92   D5                     PUSH   de   ; push partial_array*
0D93   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0D94   FD 5E 02               LD   e,(iy+2)   
0D97   FD 56 03               LD   d,(iy+3)   
0D9A   EB                     EX   de,hl   
0D9B                CREATEFUNC3:      
0D9B   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0D9C   4E                     LD   c,(hl)   
0D9D   2B                     DEC   hl   
0D9E   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0D9F   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0DA0   13                     INC   de   
0DA1   79                     LD   a,c   
0DA2   12                     LD   (de),a   
0DA3   13                     INC   de   
0DA4   10 F5                  DJNZ   createFunc3   ; b = outer_length
0DA6                CREATEFUNC4:      
0DA6   E1                     POP   hl   ; hl = partial_array*
0DA7                CREATEFUNC5:      
0DA7   C1                     POP   bc   ; bc = new_arg_list*
0DA8   D5                     PUSH   de   ; return new func*
0DA9   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0DAA   73                     LD   (hl),e   ; compile partial_array* to func
0DAB   23                     INC   hl   
0DAC   72                     LD   (hl),d   
0DAD   23                     INC   hl   
0DAE   ED 5B 04 53            LD   de,(vTemp2)   ; de = block*
0DB2   73                     LD   (hl),e   ; compile block* to func
0DB3   23                     INC   hl   
0DB4   72                     LD   (hl),d   
0DB5   23                     INC   hl   
0DB6   71                     LD   (hl),c   ; compile new_arg_list* to func
0DB7   23                     INC   hl   
0DB8   70                     LD   (hl),b   
0DB9   23                     INC   hl   
0DBA   22 F0 52               LD   (vHeapPtr),hl   ; bump heap ptr
0DBD   ED 4B 02 53            LD   bc,(vTemp1)   ; restore IP
0DC1   2A 06 53               LD   hl,(vTemp3)   ; jump to return address
0DC4   E9                     JP   (hl)   
0DC5                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0DC5                FLUSHBUFFER:      
0DC5   F5                     PUSH   af   
0DC6   D5                     PUSH   de   
0DC7   E5                     PUSH   hl   
0DC8   2A EC 52               LD   hl,(vBufPtr)   
0DCB   11 00 51               LD   de,BUF   
0DCE   ED 53 EC 52            LD   (vBufPtr),de   
0DD2   B7                     OR   a   
0DD3   ED 52                  SBC   hl,de   
0DD5   CD E2 0D               CALL   printChars2   
0DD8   E1                     POP   hl   
0DD9   D1                     POP   de   
0DDA   F1                     POP   af   
0DDB   C9                     RET      
0DDC                PRINTCHARS1:      
0DDC   1A                     LD   a,(de)   ; print char at char*
0DDD   CD 85 00               CALL   putchar   
0DE0   13                     INC   de   ; char*++
0DE1   2B                     DEC   hl   ; count--
0DE2                PRINTCHARS2:      
0DE2   7D                     LD   a,l   ; count == 0?
0DE3   B4                     OR   h   
0DE4   C8                     RET   z   
0DE5   18 F5                  JR   printChars1   ; if not loop
0DE7                COMMANDTABLE:      
0DE7   03                     INC   bc   
0DE8   0A                     LD   a,(bc)   
0DE9   FE 7B                  CP   "z"+1   
0DEB   30 09                  JR   nc,commandTable2   
0DED   D6 61                  SUB   "a"   
0DEF   38 05                  JR   c,commandTable2   
0DF1                COMMANDTABLE1:      
0DF1   E1                     POP   hl   
0DF2   85                     ADD   a,l   
0DF3   6F                     LD   l,a   
0DF4   6E                     LD   l,(hl)   ; must have the same msb as the table
0DF5   E9                     JP   (hl)   
0DF6                COMMANDTABLE2:      
0DF6   3E 1A                  LD   a,26   
0DF8   0B                     DEC   bc   
0DF9   18 F6                  JR   commandTable1   
0DFB                             ; followed by a table
0DFB                             ; db char
0DFB                             ; db lsb(addr)
0DFB                             ; the final item must have char == NUL
0DFB                JUMPTABLE:      
0DFB   E1                     POP   hl   
0DFC   03                     INC   bc   
0DFD                JUMPTABLE0:      
0DFD   AF                     XOR   a   
0DFE   BE                     CP   (hl)   
0DFF   28 0B                  JR   z,jumpTable2   
0E01   0A                     LD   a,(bc)   
0E02   BE                     CP   (hl)   
0E03   28 04                  JR   z,jumpTable1   
0E05   23                     INC   hl   
0E06   23                     INC   hl   
0E07   18 F4                  JR   jumpTable0   
0E09                JUMPTABLE1:      
0E09   23                     INC   hl   
0E0A   6E                     LD   l,(hl)   ; must have the same msb as the table
0E0B   E9                     JP   (hl)   
0E0C                JUMPTABLE2:      
0E0C   0B                     DEC   bc   
0E0D   23                     INC   hl   
0E0E   E9                     JP   (hl)   
0E0F                PRTSTR0:      
0E0F   CD 85 00               CALL   putchar   
0E12   23                     INC   hl   
0E13                PRTSTR:      
0E13   7E                     LD   a,(hl)   
0E14   B7                     OR   a   
0E15   20 F8                  JR   nz,prtstr0   
0E17   C9                     RET      
0E18                             ; **************************************************************************
0E18                             ; calculate nesting value
0E18                             ; a is char to be tested,
0E18                             ; e is the nesting value (initially 0)
0E18                             ; e is increased by ( and [
0E18                             ; e is decreased by ) and ]
0E18                             ; e has its bit 7 toggled by `
0E18                             ; limited to 127 levels
0E18                             ; **************************************************************************
0E18                NESTING:      
0E18   FE 22                  CP   DQ   ; quote char
0E1A   28 06                  JR   z,nesting0   
0E1C   FE 60                  CP   "`"   ; quote char
0E1E   28 02                  JR   z,nesting0   
0E20   18 0A                  JR   nesting1   
0E22                NESTING0:      
0E22   CB 7B                  BIT   7,e   
0E24   28 03                  JR   z,nesting1a   
0E26   CB BB                  RES   7,e   
0E28   C9                     RET      
0E29                NESTING1A:      
0E29   CB FB                  SET   7,e   
0E2B   C9                     RET      
0E2C                NESTING1:      
0E2C   CB 7B                  BIT   7,e   
0E2E   C0                     RET   nz   
0E2F   FE 7B                  CP   "{"   
0E31   28 08                  JR   z,nesting2   
0E33   FE 5B                  CP   "["   
0E35   28 04                  JR   z,nesting2   
0E37   FE 28                  CP   "("   
0E39   20 02                  JR   nz,nesting3   
0E3B                NESTING2:      
0E3B   1C                     INC   e   
0E3C   C9                     RET      
0E3D                NESTING3:      
0E3D   FE 7D                  CP   "}"   
0E3F   28 07                  JR   z,nesting4   
0E41   FE 5D                  CP   "]"   
0E43   28 03                  JR   z,nesting4   
0E45   FE 29                  CP   ")"   
0E47   C0                     RET   nz   
0E48                NESTING4:      
0E48   1D                     DEC   e   
0E49   C9                     RET      
0E4A                PROMPT:      
0E4A   CD 5A 0E               CALL   printStr   
0E4D   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0E52   C9                     RET      
0E53                CRLF:        
0E53   CD 5A 0E               CALL   printStr   
0E56   0D 0A 00               .CSTR   "\r\n"   
0E59   C9                     RET      
0E5A                             ; prints a null teminated string
0E5A                             ; the string should be immediately following the call
0E5A                PRINTSTR:      
0E5A   E3                     EX   (sp),hl   ; swap			
0E5B   CD 13 0E               CALL   prtstr   
0E5E   23                     INC   hl   ; inc past NUL
0E5F   E3                     EX   (sp),hl   ; put it back	
0E60   C9                     RET      
0E61                INIT:        
0E61   21 F0 01               LD   hl,titleStr   
0E64   11 0C 53               LD   de,titleBuf   
0E67   06 14                  LD   b,20   
0E69                INIT1:       
0E69   1A                     LD   a,(de)   
0E6A   BE                     CP   (hl)   
0E6B   20 17                  JR   nz,coldBoot0   
0E6D   13                     INC   de   
0E6E   23                     INC   hl   
0E6F   10 F8                  DJNZ   init1   
0E71                WARMINIT:      
0E71   ED 4B FA 52            LD   bc,(vSavedIP)   ; restore IP
0E75   ED 7B FC 52            LD   sp,(vSavedSP)   ; restore SP
0E79   DD 2A FE 52            LD   ix,(vSavedNext)   ; restore Next
0E7D   FD 2A 00 53            LD   iy,(vSavedBP)   ; restore BP
0E81   C3 BB 0E               JP   start1   
0E84                COLDBOOT0:      
0E84   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0E87   11 0C 53               LD   de,titleBuf   
0E8A   06 14                  LD   b,20   
0E8C   ED B0                  LDIR      
0E8E                COLDINIT:      
0E8E   21 DE 01               LD   hl,isysVars   
0E91   11 E6 52               LD   de,sysVars   
0E94   01 10 00               LD   bc,8 * 2   
0E97   ED B0                  LDIR      
0E99   21 00 52               LD   hl,vars   ; 52 vars LO HI
0E9C   06 34                  LD   b,26*2   
0E9E   AF                     XOR   a   
0E9F                COLDBOOT1:      
0E9F   77                     LD   (hl),a   
0EA0   23                     INC   hl   
0EA1   10 FC                  DJNZ   coldBoot1   
0EA3   DD 2A EE 52            LD   ix,(vNext)   
0EA7   FD 21 00 50            LD   iy,STACK   
0EAB   C9                     RET      
0EAC                COLDSTART:      
0EAC   31 00 50               LD   sp,STACK   
0EAF   CD 84 0E               CALL   coldBoot0   
0EB2   C3 BB 0E               JP   start1   
0EB5                START:       
0EB5   31 00 50               LD   sp,STACK   ; start Monty
0EB8   CD 61 0E               CALL   init   ; setups
0EBB                START1:      
0EBB   21 0C 53               LD   hl,titleBuf   
0EBE   CD 13 0E               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0EC1                INTERPRET:      
0EC1   CD C5 0D               CALL   flushBuffer   
0EC4   CD 4A 0E               CALL   prompt   
0EC7   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0ECA   21 00 50               LD   hl,TIB   
0ECD   22 EA 52               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0ED0                INTERPRET2:      ; calculate nesting
0ED0   1E 00                  LD   e,0   ; initilize nesting value
0ED2   C5                     PUSH   bc   ; save offset into TIB,
0ED3                             ; bc is also the count of chars in TIB
0ED3   21 00 50               LD   hl,TIB   ; hl is start of TIB
0ED6   18 0B                  JR   interpret4   
0ED8                INTERPRET3:      
0ED8   3E 33                  LD   a,"3"   
0EDA   CD 85 00               CALL   putchar   
0EDD   7E                     LD   a,(hl)   ; a = char in TIB
0EDE   23                     INC   hl   ; inc pointer into TIB
0EDF   0B                     DEC   bc   ; dec count of chars in TIB
0EE0   CD 18 0E               CALL   nesting   ; update nesting value
0EE3                INTERPRET4:      
0EE3   79                     LD   a,c   ; is count zero?
0EE4   B0                     OR   b   
0EE5   20 F1                  JR   nz,interpret3   ; if not loop
0EE7   C1                     POP   bc   ; restore offset into TIB
0EE8                INTERPRET5:      
0EE8   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0EEB   FE 20                  CP   $20   ; compare to space
0EED   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0EEF   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0EF1                             ; ???? NEEDED?
0EF1   28 36                  JR   z,interpret8   
0EF3   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0EF5   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0EF7   FE 05                  CP   CTRL_E   
0EF9   CA 87 0F               JP   z,edit_   
0EFC   FE 08                  CP   CTRL_H   
0EFE   CA 77 0F               JP   z,backSpace_   
0F01   FE 0A                  CP   CTRL_J   
0F03   CA 9F 0F               JP   z,reEdit_   
0F06                             ; cp CTRL_S
0F06                             ; jp z,printStack_
0F06                             ; DB     lsb(edit_)       ; ENQ ^E  5
0F06                             ; DB     lsb(reedit_)     ; LF  ^J 10
0F06                             ; DB     lsb(list_)       ; FF  ^L 12
0F06                             ; DB     lsb(printStack_) ; DLE ^P 16
0F06                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0F06                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0F06                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0F06                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0F06                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0F06                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0F06                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0F06                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0F06                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0F06                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0F06                INTERPRET5A:      
0F06                             ; ld (vTIBPtr),bc
0F06                             ; ld bc,(vTIBPtr)
0F06   18 C8                  JR   interpret2   
0F08                INTERPRET6:      
0F08   21 00 50               LD   hl,TIB   
0F0B   09                     ADD   hl,bc   
0F0C   77                     LD   (hl),a   ; store the character in textbuf
0F0D   03                     INC   bc   
0F0E   CD 85 00               CALL   putchar   ; echo character to screen
0F11   CD 18 0E               CALL   nesting   
0F14   18 D2                  JR   interpret5   ; wait for next character
0F16                INTERPRET7:      
0F16   21 00 50               LD   hl,TIB   
0F19   09                     ADD   hl,bc   
0F1A   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0F1C   23                     INC   hl   
0F1D   36 0A                  LD   (hl),"\n"   
0F1F   23                     INC   hl   
0F20   03                     INC   bc   
0F21   03                     INC   bc   
0F22   CD 53 0E               CALL   crlf   ; echo character to screen
0F25   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0F26   B7                     OR   a   
0F27   20 BF                  JR   nz,interpret5   
0F29                INTERPRET8:      
0F29   21 00 50               LD   hl,TIB   
0F2C   09                     ADD   hl,bc   
0F2D   22 EA 52               LD   (vTIBPtr),hl   
0F30   01 00 50               LD   bc,TIB   
0F33   ED 43 FA 52            LD   (vSavedIP),bc   ; save IP
0F37   ED 73 FC 52            LD   (vSavedSP),sp   ; save SP
0F3B   DD 22 FE 52            LD   (vSavedNext),ix   ; save Next
0F3F   FD 22 00 53            LD   (vSavedBP),iy   ; save BP
0F43   0B                     DEC   bc   
0F44                NEXT:        
0F44   03                     INC   bc   ; Increment the IP
0F45   0A                     LD   a,(bc)   ; Get the next character and dispatch
0F46   FE 20                  CP   " "   ; whitespace?
0F48   28 FA                  JR   z,next   ; space? ignore
0F4A   38 08                  JR   c,next1   
0F4C   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0F4E   6F                     LD   l,a   ; index into table
0F4F   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0F51   6E                     LD   l,(hl)   ; get low jump address
0F52   24                     INC   h   ; Load h with page after opcodes
0F53   E9                     JP   (hl)   ; Jump to routine
0F54                NEXT1:       
0F54   FE 00                  CP   NUL   ; end of input string?
0F56   28 03                  JR   z,exit   
0F58   C3 C1 0E               JP   interpret   ; no, other whitespace, macros?
0F5B                EXIT:        
0F5B   03                     INC   bc   
0F5C   60 69                  LD   hl,bc   
0F5E   E9                     JP   (hl)   
0F5F                RUN:         
0F5F   C1                     POP   bc   
0F60   0B                     DEC   bc   
0F61   DD E9                  JP   (ix)   
0F63                ERROR:       
0F63   E5                     PUSH   hl   
0F64   CD 5F 0F               CALL   run   
0F67   60 45 72 72 6F 72 20 60 2E 73 20 2E 00 DB   "`Error `.s .",0   
0F74   C3 C1 0E               JP   interpret   
0F77                BACKSPACE_:      
0F77   79                     LD   a,c   
0F78   B0                     OR   b   
0F79   CA D0 0E               JP   z,interpret2   
0F7C   0B                     DEC   bc   
0F7D   CD 5A 0E               CALL   printStr   
0F80   08 20 08 00            .CSTR   "\b \b"   
0F84   C3 D0 0E               JP   interpret2   
0F87                             ; edit
0F87                EDIT_:       
0F87   CD 5F 0F               CALL   run   
0F8A   60 76 61 72 3F 60 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?`.s /k/ad .h",0   
0F9C   C3 C1 0E               JP   interpret   
0F9F                REEDIT_:      
0F9F   C3 C1 0E               JP   interpret   
0FA2                PRINTSTACK_:      
0FA2   CD 5F 0F               CALL   run   
0FA5   2F 70 6B 00            .CSTR   "/pk"   
0FA9   C3 C1 0E               JP   interpret   
0FAC                             ; editDef:
0FAC                             ;     pop hl                      ; pop ret address
0FAC                             ;     ex (sp),hl                  ; swap with TOS
0FAC                             ;     push hl                     ; dup TOS
0FAC                             ;     ld a,l                      ; a = ident
0FAC                             ;     ld de,TIB                   ; de = start of TIB
0FAC                             ;     ld (vTIBPtr),de             ; update TIB*
0FAC                             ;     push ix                     ; save NEXT
0FAC                             ;     ld ix,editDef0              ; NEXT = editDef0
0FAC                             ;     jp lookupRef                ; convert letter into address
0FAC                             ; editDef0:
0FAC                             ;     ld e,(hl)                   ; de = (hl++)
0FAC                             ;     inc hl
0FAC                             ;     ld d,(hl)
0FAC                             ;     ld a,d                      ; de == 0 ?
0FAC                             ;     or e
0FAC                             ;     jr z,editDef4
0FAC                             ;     ld ix,editDef3              ; NEXT = editDef3
0FAC                             ;     ex de,hl
0FAC                             ;     ld a,(hl)
0FAC                             ;     cp "{"
0FAC                             ;     jr nz,editDef1
0FAC                             ;     jp editBlock0               ; convert letter into address
0FAC                             ; editDef1:
0FAC                             ;     cp "("
0FAC                             ;     jr nz,editDef2
0FAC                             ;     jp editBlock0               ; convert letter into address
0FAC                             ; editDef2:
0FAC                             ;     jp editFunc
0FAC                             ; editDef3:
0FAC                             ;     ld a," "                    ; write assign
0FAC                             ;     call writeChar
0FAC                             ;     pop hl                      ; a = ident
0FAC                             ;     ld a,l
0FAC                             ;     call writeChar
0FAC                             ;     ld a,"="                    ; write assign
0FAC                             ;     call writeChar
0FAC                             ;     ld ix,editDef4              ; NEXT = editDef4
0FAC                             ;     jp printTIB
0FAC                             ; editDef4:
0FAC                             ;     pop ix                      ; restore NEXT
0FAC                             ;     jp (ix)
0FAC                             ; writeChar:
0FAC                             ;     ld de,(vTIBPtr)             ; de = TIB*
0FAC                             ;     ld (de),a                   ; write ident
0FAC                             ;     inc de
0FAC                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0FAC                             ;     ret
0FAC                             ; ; printTIB
0FAC                             ; printTIB:
0FAC                             ;     ld hl,(vTIBPtr)
0FAC                             ;     ld de,TIB
0FAC                             ;     or a
0FAC                             ;     sbc hl,de
0FAC                             ;     jp printTIB2
0FAC                             ; printTIB1:
0FAC                             ;     ld a,(de)
0FAC                             ;     call putchar
0FAC                             ; printTIB2:
0FAC                             ;     ld a,l
0FAC                             ;     or h
0FAC                             ;     jr nz,printTIB1
0FAC                             ;     jp (ix)
0FAC                             ; editBlock:
0FAC                             ;     pop hl                      ; hl = block*
0FAC                             ; editBlock0:
0FAC                             ;     push ix                     ; save next
0FAC                             ;     push hl                     ; push block*
0FAC                             ;     push hl                     ; push block*
0FAC                             ;     ld ix,(editBlock2)
0FAC                             ;     jp blockLength
0FAC                             ; editBlock1:
0FAC                             ;     pop hl                      ; bc = length, (sp) = IP
0FAC                             ;     pop de                      ; de = block*
0FAC                             ;     ld a,l
0FAC                             ;     or h
0FAC                             ;     jr z,editBlock2
0FAC                             ;     push bc
0FAC                             ;     ld bc,hl
0FAC                             ;     ex de,hl                    ; hl = block*
0FAC                             ;     ld de,(vTIBPtr)              ; de = TIB*
0FAC                             ;     ldir                        ; copy block to TIB
0FAC                             ;     ld (vTIBPtr),de              ; save TIB*
0FAC                             ;     pop bc
0FAC                             ; editBlock2:
0FAC                             ;     pop ix                      ; restore next
0FAC                             ;     jp (ix)
0FAC                             ; editFunc:
0FAC                             ;     jp (ix)
0FAC                             ; editArray:
0FAC                             ;     jp (ix)
0FAC                             ; editparseArgs:
0FAC                             ;     jp (ix)
0FAC                             ; ; blockLength
0FAC                             ; ; addr1 -- length
0FAC                             ; blockLength:
0FAC                             ;     pop hl                      ; block*
0FAC                             ;     push hl                     ; save block*
0FAC                             ;     inc hl                      ; skip first char
0FAC                             ;     ld d,1                      ; increase nesting
0FAC                             ; blockLength1:                   ; Skip to end of definition
0FAC                             ;     ld a,(hl)                   ; Get the next character
0FAC                             ;     inc hl                      ; Point to next character
0FAC                             ;     cp " " + 1                  ; ignore whitespace
0FAC                             ;     jr c,blockLength1
0FAC                             ;     cp ")"
0FAC                             ;     jr z,blockLength4
0FAC                             ;     cp "}"
0FAC                             ;     jr z,blockLength4
0FAC                             ;     cp "]"
0FAC                             ;     jr z,blockLength4
0FAC                             ;     cp "("
0FAC                             ;     jr z,blockLength2
0FAC                             ;     cp "{"
0FAC                             ;     jr z,blockLength2
0FAC                             ;     cp "["
0FAC                             ;     jr z,blockLength2
0FAC                             ;     cp "'"
0FAC                             ;     jr z,blockLength3
0FAC                             ;     cp "`"
0FAC                             ;     jr z,blockLength3
0FAC                             ;     cp DQ
0FAC                             ;     jr z,blockLength3
0FAC                             ;     jr blockLength1
0FAC                             ; blockLength2:
0FAC                             ;     inc d
0FAC                             ;     jr blockLength1
0FAC                             ; blockLength4:
0FAC                             ;     dec d
0FAC                             ;     jr nz, blockLength1         ; get the next element
0FAC                             ; blockLength3:
0FAC                             ;     ld a,$80
0FAC                             ;     xor d
0FAC                             ;     ld d,a
0FAC                             ;     jr nz, blockLength1
0FAC                             ;     pop hl                      ; hl = block*
0FAC                             ;     or a
0FAC                             ;     sbc hl,de
0FAC                             ;     push hl
0FAC                             ;     jp (ix)
0FAC                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0FAC                             ; \a start of stack \#3 depth \b base \$ prompt
0FAC                             ; DW dStack               ; a vS0 start of datastack			
0FAC                             ; DW FALSE                ; b vBase16
0FAC                             ; DW 0                    ; c vTIBPtr an offset to the tib
0FAC                             ; DW 0                    ; d
0FAC                             ; DW 65                   ; e vLastDef "A" last command u defined
0FAC                             ; DW 0                    ; f
0FAC                             ; DW page6                ; g 256 bytes limits
0FAC                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0FAC                          ;*Macro unroll: FUNC f1, 1, "sL"
0FAC                F1:          
0FAC   CD E4 0B               CALL   go   
0FAF   00 00                  DW   NUL   
0FB1   B9 0F                  DW   f1M_3014S12   
0FB3   B5 0F                  DW   $+2   
0FB5   01                     DB   1   
0FB6   02 73 4C               .PSTR   "sL"   
0FB9                F1M_3014S12:      
0FB9   00                     DB   0   
0FBA                          ;*Macro unroll: FUNC f2, 0, ""
0FBA                F2:          
0FBA   CD E4 0B               CALL   go   
0FBD   00 00                  DW   NUL   
0FBF   C5 0F                  DW   f2M_3016S15   
0FC1   C3 0F                  DW   $+2   
0FC3   00                     DB   0   
0FC4   00                     .PSTR   ""   
0FC5                F2M_3016S15:      
0FC5   00                     DB   0   
0FC6                          ;*Macro unroll: FUNC f3, 0, ""
0FC6                F3:          
0FC6   CD E4 0B               CALL   go   
0FC9   00 00                  DW   NUL   
0FCB   D1 0F                  DW   f3M_3018S18   
0FCD   CF 0F                  DW   $+2   
0FCF   00                     DB   0   
0FD0   00                     .PSTR   ""   
0FD1                F3M_3018S18:      
0FD1   00                     DB   0   
0FD2                          ;*Macro unroll: FUNC f4, 0, ""
0FD2                F4:          
0FD2   CD E4 0B               CALL   go   
0FD5   00 00                  DW   NUL   
0FD7   DD 0F                  DW   f4M_3020S21   
0FD9   DB 0F                  DW   $+2   
0FDB   00                     DB   0   
0FDC   00                     .PSTR   ""   
0FDD                F4M_3020S21:      
0FDD   00                     DB   0   
0FDE                          ALIGN   $100   
1000                TESTSSTART:      
1000                             ; test "0 10 1 /rg \\a{%i.} /fe", 0
1000                             ; test "$1000 0 10 1 /rg \\a{%i 1 + 10 *} /mp \\a{%i.} /fe", $1000
1000                             ; test "$1000 0 10 1 /rg \\a{%i 1 + 10 *} /mp \\a{%i.} /fe", $1000
1000                             ; test "$1000 0 10 1 /rg \\a{%i.} /fe", $1000
1000                             ; test "$1000 0 10 1 /rg \\a{%i 3<}/ft \\a{%i.} /fe", $1000
1000                             ; test "$1000 0 10 1 /rg  0 \\da{%d%i+}/fd \\a{%i 24<}/ft \\a{%i.} /fe", $1000
1000                             ; test "$1000 [10 20 30] /ai \\a{%a.} /fe", $1000
1000                          ;*Macro unroll:  test "$1000 'hello there!' /si \\a{%a.c} /fe", $1000
1000   31 00 50               LD   SP,STACK   
1003   CD 8E 0E               CALL   coldInit   
1006   CD A1 4E               CALL   execStr   
1009   24 31 30 30 30 20 27 68 65 6C 6C 6F 20 74 68 65 72 65 21 27 20 2F 73 69 20 5C 61 7B 25 61 2E 63 7D 20 2F 66 65 00 DB   "$1000 'hello there!' /si \\a{%a.c} /fe",0   
102F   CD C5 0D               CALL   flushBuffer   
1032   E1                     POP   HL   
1033   E5                     PUSH   HL   
1034   11 00 10               LD   DE,$1000   
1037   B7                     OR   A   
1038   ED 52                  SBC   HL,DE   
103A   7D                     LD   A,L   
103B   B4                     OR   H   
103C   CA BC 10               JP   Z,expectM_3031S34   
103F   CD 5A 0E               CALL   printStr   
1042   43 6F 64 65 3A 20 24 31 30 30 30 20 27 68 65 6C 6C 6F 20 74 68 65 72 65 21 27 20 2F 73 69 20 5C 61 7B 25 61 2E 63 7D 20 2F 66 65 00 .CSTR   "Code: ","$1000 'hello there!' /si \\a{%a.c} /fe"   
106E   CD 5A 0E               CALL   printStr   
1071   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1080   21 00 10               LD   hl,$1000   
1083   E5                     PUSH   hl   
1084   E5                     PUSH   hl   
1085   CD 5F 0F               CALL   run   
1088   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1090   CD C5 0D               CALL   flushBuffer   
1093   CD 5A 0E               CALL   printStr   
1096   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10A3   E1                     POP   hl   
10A4   E5                     PUSH   hl   
10A5   E5                     PUSH   hl   
10A6   CD 5F 0F               CALL   run   
10A9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
10B8   CD C5 0D               CALL   flushBuffer   
10BB   76                     HALT      
10BC                EXPECTM_3031S34:      
10BC   E1                     POP   HL   
10BD   CD 5A 0E               CALL   printStr   
10C0   44 6F 6E 65 21 00      .CSTR   "Done!"   
10C6   76                     HALT      
10C7                             ; 
10C7                          ;*Macro unroll:  test "/f", false
10C7   31 00 50               LD   SP,STACK   
10CA   CD 8E 0E               CALL   coldInit   
10CD   CD A1 4E               CALL   execStr   
10D0   2F 66 00               DB   "/f",0   
10D3   CD C5 0D               CALL   flushBuffer   
10D6   E1                     POP   HL   
10D7   E5                     PUSH   HL   
10D8   11 00 00               LD   DE,false   
10DB   B7                     OR   A   
10DC   ED 52                  SBC   HL,DE   
10DE   7D                     LD   A,L   
10DF   B4                     OR   H   
10E0   CA 3D 11               JP   Z,expectM_3036S42   
10E3   CD 5A 0E               CALL   printStr   
10E6   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
10EF   CD 5A 0E               CALL   printStr   
10F2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1101   21 00 00               LD   hl,false   
1104   E5                     PUSH   hl   
1105   E5                     PUSH   hl   
1106   CD 5F 0F               CALL   run   
1109   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1111   CD C5 0D               CALL   flushBuffer   
1114   CD 5A 0E               CALL   printStr   
1117   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1124   E1                     POP   hl   
1125   E5                     PUSH   hl   
1126   E5                     PUSH   hl   
1127   CD 5F 0F               CALL   run   
112A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1139   CD C5 0D               CALL   flushBuffer   
113C   76                     HALT      
113D                EXPECTM_3036S42:      
113D   E1                     POP   HL   
113E                          ;*Macro unroll:  test "/t", true
113E   31 00 50               LD   SP,STACK   
1141   CD 8E 0E               CALL   coldInit   
1144   CD A1 4E               CALL   execStr   
1147   2F 74 00               DB   "/t",0   
114A   CD C5 0D               CALL   flushBuffer   
114D   E1                     POP   HL   
114E   E5                     PUSH   HL   
114F   11 FF FF               LD   DE,true   
1152   B7                     OR   A   
1153   ED 52                  SBC   HL,DE   
1155   7D                     LD   A,L   
1156   B4                     OR   H   
1157   CA B4 11               JP   Z,expectM_3037S43   
115A   CD 5A 0E               CALL   printStr   
115D   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
1166   CD 5A 0E               CALL   printStr   
1169   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1178   21 FF FF               LD   hl,true   
117B   E5                     PUSH   hl   
117C   E5                     PUSH   hl   
117D   CD 5F 0F               CALL   run   
1180   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1188   CD C5 0D               CALL   flushBuffer   
118B   CD 5A 0E               CALL   printStr   
118E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
119B   E1                     POP   hl   
119C   E5                     PUSH   hl   
119D   E5                     PUSH   hl   
119E   CD 5F 0F               CALL   run   
11A1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
11B0   CD C5 0D               CALL   flushBuffer   
11B3   76                     HALT      
11B4                EXPECTM_3037S43:      
11B4   E1                     POP   HL   
11B5                          ;*Macro unroll:  test "1", 1
11B5   31 00 50               LD   SP,STACK   
11B8   CD 8E 0E               CALL   coldInit   
11BB   CD A1 4E               CALL   execStr   
11BE   31 00                  DB   "1",0   
11C0   CD C5 0D               CALL   flushBuffer   
11C3   E1                     POP   HL   
11C4   E5                     PUSH   HL   
11C5   11 01 00               LD   DE,1   
11C8   B7                     OR   A   
11C9   ED 52                  SBC   HL,DE   
11CB   7D                     LD   A,L   
11CC   B4                     OR   H   
11CD   CA 29 12               JP   Z,expectM_3038S44   
11D0   CD 5A 0E               CALL   printStr   
11D3   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
11DB   CD 5A 0E               CALL   printStr   
11DE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11ED   21 01 00               LD   hl,1   
11F0   E5                     PUSH   hl   
11F1   E5                     PUSH   hl   
11F2   CD 5F 0F               CALL   run   
11F5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
11FD   CD C5 0D               CALL   flushBuffer   
1200   CD 5A 0E               CALL   printStr   
1203   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1210   E1                     POP   hl   
1211   E5                     PUSH   hl   
1212   E5                     PUSH   hl   
1213   CD 5F 0F               CALL   run   
1216   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1225   CD C5 0D               CALL   flushBuffer   
1228   76                     HALT      
1229                EXPECTM_3038S44:      
1229   E1                     POP   HL   
122A                          ;*Macro unroll:  test "2", 2
122A   31 00 50               LD   SP,STACK   
122D   CD 8E 0E               CALL   coldInit   
1230   CD A1 4E               CALL   execStr   
1233   32 00                  DB   "2",0   
1235   CD C5 0D               CALL   flushBuffer   
1238   E1                     POP   HL   
1239   E5                     PUSH   HL   
123A   11 02 00               LD   DE,2   
123D   B7                     OR   A   
123E   ED 52                  SBC   HL,DE   
1240   7D                     LD   A,L   
1241   B4                     OR   H   
1242   CA 9E 12               JP   Z,expectM_3039S45   
1245   CD 5A 0E               CALL   printStr   
1248   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
1250   CD 5A 0E               CALL   printStr   
1253   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1262   21 02 00               LD   hl,2   
1265   E5                     PUSH   hl   
1266   E5                     PUSH   hl   
1267   CD 5F 0F               CALL   run   
126A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1272   CD C5 0D               CALL   flushBuffer   
1275   CD 5A 0E               CALL   printStr   
1278   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1285   E1                     POP   hl   
1286   E5                     PUSH   hl   
1287   E5                     PUSH   hl   
1288   CD 5F 0F               CALL   run   
128B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
129A   CD C5 0D               CALL   flushBuffer   
129D   76                     HALT      
129E                EXPECTM_3039S45:      
129E   E1                     POP   HL   
129F                          ;*Macro unroll:  test "1", 1
129F   31 00 50               LD   SP,STACK   
12A2   CD 8E 0E               CALL   coldInit   
12A5   CD A1 4E               CALL   execStr   
12A8   31 00                  DB   "1",0   
12AA   CD C5 0D               CALL   flushBuffer   
12AD   E1                     POP   HL   
12AE   E5                     PUSH   HL   
12AF   11 01 00               LD   DE,1   
12B2   B7                     OR   A   
12B3   ED 52                  SBC   HL,DE   
12B5   7D                     LD   A,L   
12B6   B4                     OR   H   
12B7   CA 13 13               JP   Z,expectM_3040S46   
12BA   CD 5A 0E               CALL   printStr   
12BD   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
12C5   CD 5A 0E               CALL   printStr   
12C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12D7   21 01 00               LD   hl,1   
12DA   E5                     PUSH   hl   
12DB   E5                     PUSH   hl   
12DC   CD 5F 0F               CALL   run   
12DF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12E7   CD C5 0D               CALL   flushBuffer   
12EA   CD 5A 0E               CALL   printStr   
12ED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12FA   E1                     POP   hl   
12FB   E5                     PUSH   hl   
12FC   E5                     PUSH   hl   
12FD   CD 5F 0F               CALL   run   
1300   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
130F   CD C5 0D               CALL   flushBuffer   
1312   76                     HALT      
1313                EXPECTM_3040S46:      
1313   E1                     POP   HL   
1314                          ;*Macro unroll:  test "0", 0
1314   31 00 50               LD   SP,STACK   
1317   CD 8E 0E               CALL   coldInit   
131A   CD A1 4E               CALL   execStr   
131D   30 00                  DB   "0",0   
131F   CD C5 0D               CALL   flushBuffer   
1322   E1                     POP   HL   
1323   E5                     PUSH   HL   
1324   11 00 00               LD   DE,0   
1327   B7                     OR   A   
1328   ED 52                  SBC   HL,DE   
132A   7D                     LD   A,L   
132B   B4                     OR   H   
132C   CA 88 13               JP   Z,expectM_3041S47   
132F   CD 5A 0E               CALL   printStr   
1332   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
133A   CD 5A 0E               CALL   printStr   
133D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
134C   21 00 00               LD   hl,0   
134F   E5                     PUSH   hl   
1350   E5                     PUSH   hl   
1351   CD 5F 0F               CALL   run   
1354   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
135C   CD C5 0D               CALL   flushBuffer   
135F   CD 5A 0E               CALL   printStr   
1362   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
136F   E1                     POP   hl   
1370   E5                     PUSH   hl   
1371   E5                     PUSH   hl   
1372   CD 5F 0F               CALL   run   
1375   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1384   CD C5 0D               CALL   flushBuffer   
1387   76                     HALT      
1388                EXPECTM_3041S47:      
1388   E1                     POP   HL   
1389                          ;*Macro unroll:  test "10", 10
1389   31 00 50               LD   SP,STACK   
138C   CD 8E 0E               CALL   coldInit   
138F   CD A1 4E               CALL   execStr   
1392   31 30 00               DB   "10",0   
1395   CD C5 0D               CALL   flushBuffer   
1398   E1                     POP   HL   
1399   E5                     PUSH   HL   
139A   11 0A 00               LD   DE,10   
139D   B7                     OR   A   
139E   ED 52                  SBC   HL,DE   
13A0   7D                     LD   A,L   
13A1   B4                     OR   H   
13A2   CA FF 13               JP   Z,expectM_3042S48   
13A5   CD 5A 0E               CALL   printStr   
13A8   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
13B1   CD 5A 0E               CALL   printStr   
13B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13C3   21 0A 00               LD   hl,10   
13C6   E5                     PUSH   hl   
13C7   E5                     PUSH   hl   
13C8   CD 5F 0F               CALL   run   
13CB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
13D3   CD C5 0D               CALL   flushBuffer   
13D6   CD 5A 0E               CALL   printStr   
13D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13E6   E1                     POP   hl   
13E7   E5                     PUSH   hl   
13E8   E5                     PUSH   hl   
13E9   CD 5F 0F               CALL   run   
13EC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
13FB   CD C5 0D               CALL   flushBuffer   
13FE   76                     HALT      
13FF                EXPECTM_3042S48:      
13FF   E1                     POP   HL   
1400                          ;*Macro unroll:  test "123", 123
1400   31 00 50               LD   SP,STACK   
1403   CD 8E 0E               CALL   coldInit   
1406   CD A1 4E               CALL   execStr   
1409   31 32 33 00            DB   "123",0   
140D   CD C5 0D               CALL   flushBuffer   
1410   E1                     POP   HL   
1411   E5                     PUSH   HL   
1412   11 7B 00               LD   DE,123   
1415   B7                     OR   A   
1416   ED 52                  SBC   HL,DE   
1418   7D                     LD   A,L   
1419   B4                     OR   H   
141A   CA 78 14               JP   Z,expectM_3043S49   
141D   CD 5A 0E               CALL   printStr   
1420   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
142A   CD 5A 0E               CALL   printStr   
142D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
143C   21 7B 00               LD   hl,123   
143F   E5                     PUSH   hl   
1440   E5                     PUSH   hl   
1441   CD 5F 0F               CALL   run   
1444   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
144C   CD C5 0D               CALL   flushBuffer   
144F   CD 5A 0E               CALL   printStr   
1452   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
145F   E1                     POP   hl   
1460   E5                     PUSH   hl   
1461   E5                     PUSH   hl   
1462   CD 5F 0F               CALL   run   
1465   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1474   CD C5 0D               CALL   flushBuffer   
1477   76                     HALT      
1478                EXPECTM_3043S49:      
1478   E1                     POP   HL   
1479                          ;*Macro unroll:  test "-1",-1
1479   31 00 50               LD   SP,STACK   
147C   CD 8E 0E               CALL   coldInit   
147F   CD A1 4E               CALL   execStr   
1482   2D 31 00               DB   "-1",0   
1485   CD C5 0D               CALL   flushBuffer   
1488   E1                     POP   HL   
1489   E5                     PUSH   HL   
148A   11 FF FF               LD   DE,-1   
148D   B7                     OR   A   
148E   ED 52                  SBC   HL,DE   
1490   7D                     LD   A,L   
1491   B4                     OR   H   
1492   CA EF 14               JP   Z,expectM_3044S50   
1495   CD 5A 0E               CALL   printStr   
1498   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
14A1   CD 5A 0E               CALL   printStr   
14A4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14B3   21 FF FF               LD   hl,-1   
14B6   E5                     PUSH   hl   
14B7   E5                     PUSH   hl   
14B8   CD 5F 0F               CALL   run   
14BB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14C3   CD C5 0D               CALL   flushBuffer   
14C6   CD 5A 0E               CALL   printStr   
14C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14D6   E1                     POP   hl   
14D7   E5                     PUSH   hl   
14D8   E5                     PUSH   hl   
14D9   CD 5F 0F               CALL   run   
14DC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
14EB   CD C5 0D               CALL   flushBuffer   
14EE   76                     HALT      
14EF                EXPECTM_3044S50:      
14EF   E1                     POP   HL   
14F0                          ;*Macro unroll:  test "~a", $61
14F0   31 00 50               LD   SP,STACK   
14F3   CD 8E 0E               CALL   coldInit   
14F6   CD A1 4E               CALL   execStr   
14F9   7E 61 00               DB   "~a",0   
14FC   CD C5 0D               CALL   flushBuffer   
14FF   E1                     POP   HL   
1500   E5                     PUSH   HL   
1501   11 61 00               LD   DE,$61   
1504   B7                     OR   A   
1505   ED 52                  SBC   HL,DE   
1507   7D                     LD   A,L   
1508   B4                     OR   H   
1509   CA 66 15               JP   Z,expectM_3045S51   
150C   CD 5A 0E               CALL   printStr   
150F   43 6F 64 65 3A 20 7E 61 00 .CSTR   "Code: ","~a"   
1518   CD 5A 0E               CALL   printStr   
151B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
152A   21 61 00               LD   hl,$61   
152D   E5                     PUSH   hl   
152E   E5                     PUSH   hl   
152F   CD 5F 0F               CALL   run   
1532   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
153A   CD C5 0D               CALL   flushBuffer   
153D   CD 5A 0E               CALL   printStr   
1540   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
154D   E1                     POP   hl   
154E   E5                     PUSH   hl   
154F   E5                     PUSH   hl   
1550   CD 5F 0F               CALL   run   
1553   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1562   CD C5 0D               CALL   flushBuffer   
1565   76                     HALT      
1566                EXPECTM_3045S51:      
1566   E1                     POP   HL   
1567                          ;*Macro unroll:  test "~~", $7e
1567   31 00 50               LD   SP,STACK   
156A   CD 8E 0E               CALL   coldInit   
156D   CD A1 4E               CALL   execStr   
1570   7E 7E 00               DB   "~~",0   
1573   CD C5 0D               CALL   flushBuffer   
1576   E1                     POP   HL   
1577   E5                     PUSH   HL   
1578   11 7E 00               LD   DE,$7e   
157B   B7                     OR   A   
157C   ED 52                  SBC   HL,DE   
157E   7D                     LD   A,L   
157F   B4                     OR   H   
1580   CA DD 15               JP   Z,expectM_3046S52   
1583   CD 5A 0E               CALL   printStr   
1586   43 6F 64 65 3A 20 7E 7E 00 .CSTR   "Code: ","~~"   
158F   CD 5A 0E               CALL   printStr   
1592   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15A1   21 7E 00               LD   hl,$7e   
15A4   E5                     PUSH   hl   
15A5   E5                     PUSH   hl   
15A6   CD 5F 0F               CALL   run   
15A9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15B1   CD C5 0D               CALL   flushBuffer   
15B4   CD 5A 0E               CALL   printStr   
15B7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15C4   E1                     POP   hl   
15C5   E5                     PUSH   hl   
15C6   E5                     PUSH   hl   
15C7   CD 5F 0F               CALL   run   
15CA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
15D9   CD C5 0D               CALL   flushBuffer   
15DC   76                     HALT      
15DD                EXPECTM_3046S52:      
15DD   E1                     POP   HL   
15DE                          ;*Macro unroll:  test "$10", $10
15DE   31 00 50               LD   SP,STACK   
15E1   CD 8E 0E               CALL   coldInit   
15E4   CD A1 4E               CALL   execStr   
15E7   24 31 30 00            DB   "$10",0   
15EB   CD C5 0D               CALL   flushBuffer   
15EE   E1                     POP   HL   
15EF   E5                     PUSH   HL   
15F0   11 10 00               LD   DE,$10   
15F3   B7                     OR   A   
15F4   ED 52                  SBC   HL,DE   
15F6   7D                     LD   A,L   
15F7   B4                     OR   H   
15F8   CA 56 16               JP   Z,expectM_3047S53   
15FB   CD 5A 0E               CALL   printStr   
15FE   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
1608   CD 5A 0E               CALL   printStr   
160B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
161A   21 10 00               LD   hl,$10   
161D   E5                     PUSH   hl   
161E   E5                     PUSH   hl   
161F   CD 5F 0F               CALL   run   
1622   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
162A   CD C5 0D               CALL   flushBuffer   
162D   CD 5A 0E               CALL   printStr   
1630   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
163D   E1                     POP   hl   
163E   E5                     PUSH   hl   
163F   E5                     PUSH   hl   
1640   CD 5F 0F               CALL   run   
1643   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1652   CD C5 0D               CALL   flushBuffer   
1655   76                     HALT      
1656                EXPECTM_3047S53:      
1656   E1                     POP   HL   
1657                          ;*Macro unroll:  test "$FF", $FF
1657   31 00 50               LD   SP,STACK   
165A   CD 8E 0E               CALL   coldInit   
165D   CD A1 4E               CALL   execStr   
1660   24 46 46 00            DB   "$FF",0   
1664   CD C5 0D               CALL   flushBuffer   
1667   E1                     POP   HL   
1668   E5                     PUSH   HL   
1669   11 FF 00               LD   DE,$FF   
166C   B7                     OR   A   
166D   ED 52                  SBC   HL,DE   
166F   7D                     LD   A,L   
1670   B4                     OR   H   
1671   CA CF 16               JP   Z,expectM_3048S54   
1674   CD 5A 0E               CALL   printStr   
1677   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
1681   CD 5A 0E               CALL   printStr   
1684   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1693   21 FF 00               LD   hl,$FF   
1696   E5                     PUSH   hl   
1697   E5                     PUSH   hl   
1698   CD 5F 0F               CALL   run   
169B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16A3   CD C5 0D               CALL   flushBuffer   
16A6   CD 5A 0E               CALL   printStr   
16A9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16B6   E1                     POP   hl   
16B7   E5                     PUSH   hl   
16B8   E5                     PUSH   hl   
16B9   CD 5F 0F               CALL   run   
16BC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
16CB   CD C5 0D               CALL   flushBuffer   
16CE   76                     HALT      
16CF                EXPECTM_3048S54:      
16CF   E1                     POP   HL   
16D0                          ;*Macro unroll:  test "-1 2 +",1
16D0   31 00 50               LD   SP,STACK   
16D3   CD 8E 0E               CALL   coldInit   
16D6   CD A1 4E               CALL   execStr   
16D9   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
16E0   CD C5 0D               CALL   flushBuffer   
16E3   E1                     POP   HL   
16E4   E5                     PUSH   HL   
16E5   11 01 00               LD   DE,1   
16E8   B7                     OR   A   
16E9   ED 52                  SBC   HL,DE   
16EB   7D                     LD   A,L   
16EC   B4                     OR   H   
16ED   CA 4E 17               JP   Z,expectM_3049S55   
16F0   CD 5A 0E               CALL   printStr   
16F3   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1700   CD 5A 0E               CALL   printStr   
1703   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1712   21 01 00               LD   hl,1   
1715   E5                     PUSH   hl   
1716   E5                     PUSH   hl   
1717   CD 5F 0F               CALL   run   
171A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1722   CD C5 0D               CALL   flushBuffer   
1725   CD 5A 0E               CALL   printStr   
1728   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1735   E1                     POP   hl   
1736   E5                     PUSH   hl   
1737   E5                     PUSH   hl   
1738   CD 5F 0F               CALL   run   
173B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
174A   CD C5 0D               CALL   flushBuffer   
174D   76                     HALT      
174E                EXPECTM_3049S55:      
174E   E1                     POP   HL   
174F                          ;*Macro unroll:  test "-1 1 +",0
174F   31 00 50               LD   SP,STACK   
1752   CD 8E 0E               CALL   coldInit   
1755   CD A1 4E               CALL   execStr   
1758   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
175F   CD C5 0D               CALL   flushBuffer   
1762   E1                     POP   HL   
1763   E5                     PUSH   HL   
1764   11 00 00               LD   DE,0   
1767   B7                     OR   A   
1768   ED 52                  SBC   HL,DE   
176A   7D                     LD   A,L   
176B   B4                     OR   H   
176C   CA CD 17               JP   Z,expectM_3050S56   
176F   CD 5A 0E               CALL   printStr   
1772   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
177F   CD 5A 0E               CALL   printStr   
1782   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1791   21 00 00               LD   hl,0   
1794   E5                     PUSH   hl   
1795   E5                     PUSH   hl   
1796   CD 5F 0F               CALL   run   
1799   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
17A1   CD C5 0D               CALL   flushBuffer   
17A4   CD 5A 0E               CALL   printStr   
17A7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17B4   E1                     POP   hl   
17B5   E5                     PUSH   hl   
17B6   E5                     PUSH   hl   
17B7   CD 5F 0F               CALL   run   
17BA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
17C9   CD C5 0D               CALL   flushBuffer   
17CC   76                     HALT      
17CD                EXPECTM_3050S56:      
17CD   E1                     POP   HL   
17CE                          ;*Macro unroll:  test "1 2 +", 3
17CE   31 00 50               LD   SP,STACK   
17D1   CD 8E 0E               CALL   coldInit   
17D4   CD A1 4E               CALL   execStr   
17D7   31 20 32 20 2B 00      DB   "1 2 +",0   
17DD   CD C5 0D               CALL   flushBuffer   
17E0   E1                     POP   HL   
17E1   E5                     PUSH   HL   
17E2   11 03 00               LD   DE,3   
17E5   B7                     OR   A   
17E6   ED 52                  SBC   HL,DE   
17E8   7D                     LD   A,L   
17E9   B4                     OR   H   
17EA   CA 4A 18               JP   Z,expectM_3051S57   
17ED   CD 5A 0E               CALL   printStr   
17F0   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
17FC   CD 5A 0E               CALL   printStr   
17FF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
180E   21 03 00               LD   hl,3   
1811   E5                     PUSH   hl   
1812   E5                     PUSH   hl   
1813   CD 5F 0F               CALL   run   
1816   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
181E   CD C5 0D               CALL   flushBuffer   
1821   CD 5A 0E               CALL   printStr   
1824   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1831   E1                     POP   hl   
1832   E5                     PUSH   hl   
1833   E5                     PUSH   hl   
1834   CD 5F 0F               CALL   run   
1837   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1846   CD C5 0D               CALL   flushBuffer   
1849   76                     HALT      
184A                EXPECTM_3051S57:      
184A   E1                     POP   HL   
184B                          ;*Macro unroll:  test "4 1 2 +", 3
184B   31 00 50               LD   SP,STACK   
184E   CD 8E 0E               CALL   coldInit   
1851   CD A1 4E               CALL   execStr   
1854   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
185C   CD C5 0D               CALL   flushBuffer   
185F   E1                     POP   HL   
1860   E5                     PUSH   HL   
1861   11 03 00               LD   DE,3   
1864   B7                     OR   A   
1865   ED 52                  SBC   HL,DE   
1867   7D                     LD   A,L   
1868   B4                     OR   H   
1869   CA CB 18               JP   Z,expectM_3052S58   
186C   CD 5A 0E               CALL   printStr   
186F   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
187D   CD 5A 0E               CALL   printStr   
1880   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
188F   21 03 00               LD   hl,3   
1892   E5                     PUSH   hl   
1893   E5                     PUSH   hl   
1894   CD 5F 0F               CALL   run   
1897   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
189F   CD C5 0D               CALL   flushBuffer   
18A2   CD 5A 0E               CALL   printStr   
18A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18B2   E1                     POP   hl   
18B3   E5                     PUSH   hl   
18B4   E5                     PUSH   hl   
18B5   CD 5F 0F               CALL   run   
18B8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
18C7   CD C5 0D               CALL   flushBuffer   
18CA   76                     HALT      
18CB                EXPECTM_3052S58:      
18CB   E1                     POP   HL   
18CC                          ;*Macro unroll:  test "123 456 +", 123+456
18CC   31 00 50               LD   SP,STACK   
18CF   CD 8E 0E               CALL   coldInit   
18D2   CD A1 4E               CALL   execStr   
18D5   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
18DF   CD C5 0D               CALL   flushBuffer   
18E2   E1                     POP   HL   
18E3   E5                     PUSH   HL   
18E4   11 43 02               LD   DE,123+456   
18E7   B7                     OR   A   
18E8   ED 52                  SBC   HL,DE   
18EA   7D                     LD   A,L   
18EB   B4                     OR   H   
18EC   CA 50 19               JP   Z,expectM_3053S59   
18EF   CD 5A 0E               CALL   printStr   
18F2   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1902   CD 5A 0E               CALL   printStr   
1905   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1914   21 43 02               LD   hl,123+456   
1917   E5                     PUSH   hl   
1918   E5                     PUSH   hl   
1919   CD 5F 0F               CALL   run   
191C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1924   CD C5 0D               CALL   flushBuffer   
1927   CD 5A 0E               CALL   printStr   
192A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1937   E1                     POP   hl   
1938   E5                     PUSH   hl   
1939   E5                     PUSH   hl   
193A   CD 5F 0F               CALL   run   
193D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
194C   CD C5 0D               CALL   flushBuffer   
194F   76                     HALT      
1950                EXPECTM_3053S59:      
1950   E1                     POP   HL   
1951                          ;*Macro unroll:  test "64 128 +", 64+128
1951   31 00 50               LD   SP,STACK   
1954   CD 8E 0E               CALL   coldInit   
1957   CD A1 4E               CALL   execStr   
195A   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
1963   CD C5 0D               CALL   flushBuffer   
1966   E1                     POP   HL   
1967   E5                     PUSH   HL   
1968   11 C0 00               LD   DE,64+128   
196B   B7                     OR   A   
196C   ED 52                  SBC   HL,DE   
196E   7D                     LD   A,L   
196F   B4                     OR   H   
1970   CA D3 19               JP   Z,expectM_3054S60   
1973   CD 5A 0E               CALL   printStr   
1976   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1985   CD 5A 0E               CALL   printStr   
1988   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1997   21 C0 00               LD   hl,64+128   
199A   E5                     PUSH   hl   
199B   E5                     PUSH   hl   
199C   CD 5F 0F               CALL   run   
199F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
19A7   CD C5 0D               CALL   flushBuffer   
19AA   CD 5A 0E               CALL   printStr   
19AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19BA   E1                     POP   hl   
19BB   E5                     PUSH   hl   
19BC   E5                     PUSH   hl   
19BD   CD 5F 0F               CALL   run   
19C0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
19CF   CD C5 0D               CALL   flushBuffer   
19D2   76                     HALT      
19D3                EXPECTM_3054S60:      
19D3   E1                     POP   HL   
19D4                          ;*Macro unroll:  test "1 2 +", 3
19D4   31 00 50               LD   SP,STACK   
19D7   CD 8E 0E               CALL   coldInit   
19DA   CD A1 4E               CALL   execStr   
19DD   31 20 32 20 2B 00      DB   "1 2 +",0   
19E3   CD C5 0D               CALL   flushBuffer   
19E6   E1                     POP   HL   
19E7   E5                     PUSH   HL   
19E8   11 03 00               LD   DE,3   
19EB   B7                     OR   A   
19EC   ED 52                  SBC   HL,DE   
19EE   7D                     LD   A,L   
19EF   B4                     OR   H   
19F0   CA 50 1A               JP   Z,expectM_3055S61   
19F3   CD 5A 0E               CALL   printStr   
19F6   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1A02   CD 5A 0E               CALL   printStr   
1A05   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A14   21 03 00               LD   hl,3   
1A17   E5                     PUSH   hl   
1A18   E5                     PUSH   hl   
1A19   CD 5F 0F               CALL   run   
1A1C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A24   CD C5 0D               CALL   flushBuffer   
1A27   CD 5A 0E               CALL   printStr   
1A2A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A37   E1                     POP   hl   
1A38   E5                     PUSH   hl   
1A39   E5                     PUSH   hl   
1A3A   CD 5F 0F               CALL   run   
1A3D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A4C   CD C5 0D               CALL   flushBuffer   
1A4F   76                     HALT      
1A50                EXPECTM_3055S61:      
1A50   E1                     POP   HL   
1A51                          ;*Macro unroll:  test "1a= a++ a",2
1A51   31 00 50               LD   SP,STACK   
1A54   CD 8E 0E               CALL   coldInit   
1A57   CD A1 4E               CALL   execStr   
1A5A   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1A64   CD C5 0D               CALL   flushBuffer   
1A67   E1                     POP   HL   
1A68   E5                     PUSH   HL   
1A69   11 02 00               LD   DE,2   
1A6C   B7                     OR   A   
1A6D   ED 52                  SBC   HL,DE   
1A6F   7D                     LD   A,L   
1A70   B4                     OR   H   
1A71   CA D5 1A               JP   Z,expectM_3056S62   
1A74   CD 5A 0E               CALL   printStr   
1A77   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1A87   CD 5A 0E               CALL   printStr   
1A8A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A99   21 02 00               LD   hl,2   
1A9C   E5                     PUSH   hl   
1A9D   E5                     PUSH   hl   
1A9E   CD 5F 0F               CALL   run   
1AA1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1AA9   CD C5 0D               CALL   flushBuffer   
1AAC   CD 5A 0E               CALL   printStr   
1AAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1ABC   E1                     POP   hl   
1ABD   E5                     PUSH   hl   
1ABE   E5                     PUSH   hl   
1ABF   CD 5F 0F               CALL   run   
1AC2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1AD1   CD C5 0D               CALL   flushBuffer   
1AD4   76                     HALT      
1AD5                EXPECTM_3056S62:      
1AD5   E1                     POP   HL   
1AD6                          ;*Macro unroll:  test "-1 -1 -",0
1AD6   31 00 50               LD   SP,STACK   
1AD9   CD 8E 0E               CALL   coldInit   
1ADC   CD A1 4E               CALL   execStr   
1ADF   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1AE7   CD C5 0D               CALL   flushBuffer   
1AEA   E1                     POP   HL   
1AEB   E5                     PUSH   HL   
1AEC   11 00 00               LD   DE,0   
1AEF   B7                     OR   A   
1AF0   ED 52                  SBC   HL,DE   
1AF2   7D                     LD   A,L   
1AF3   B4                     OR   H   
1AF4   CA 56 1B               JP   Z,expectM_3057S63   
1AF7   CD 5A 0E               CALL   printStr   
1AFA   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1B08   CD 5A 0E               CALL   printStr   
1B0B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B1A   21 00 00               LD   hl,0   
1B1D   E5                     PUSH   hl   
1B1E   E5                     PUSH   hl   
1B1F   CD 5F 0F               CALL   run   
1B22   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B2A   CD C5 0D               CALL   flushBuffer   
1B2D   CD 5A 0E               CALL   printStr   
1B30   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B3D   E1                     POP   hl   
1B3E   E5                     PUSH   hl   
1B3F   E5                     PUSH   hl   
1B40   CD 5F 0F               CALL   run   
1B43   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B52   CD C5 0D               CALL   flushBuffer   
1B55   76                     HALT      
1B56                EXPECTM_3057S63:      
1B56   E1                     POP   HL   
1B57                          ;*Macro unroll:  test "5 3 -", 2
1B57   31 00 50               LD   SP,STACK   
1B5A   CD 8E 0E               CALL   coldInit   
1B5D   CD A1 4E               CALL   execStr   
1B60   35 20 33 20 2D 00      DB   "5 3 -",0   
1B66   CD C5 0D               CALL   flushBuffer   
1B69   E1                     POP   HL   
1B6A   E5                     PUSH   HL   
1B6B   11 02 00               LD   DE,2   
1B6E   B7                     OR   A   
1B6F   ED 52                  SBC   HL,DE   
1B71   7D                     LD   A,L   
1B72   B4                     OR   H   
1B73   CA D3 1B               JP   Z,expectM_3058S64   
1B76   CD 5A 0E               CALL   printStr   
1B79   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1B85   CD 5A 0E               CALL   printStr   
1B88   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B97   21 02 00               LD   hl,2   
1B9A   E5                     PUSH   hl   
1B9B   E5                     PUSH   hl   
1B9C   CD 5F 0F               CALL   run   
1B9F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1BA7   CD C5 0D               CALL   flushBuffer   
1BAA   CD 5A 0E               CALL   printStr   
1BAD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BBA   E1                     POP   hl   
1BBB   E5                     PUSH   hl   
1BBC   E5                     PUSH   hl   
1BBD   CD 5F 0F               CALL   run   
1BC0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1BCF   CD C5 0D               CALL   flushBuffer   
1BD2   76                     HALT      
1BD3                EXPECTM_3058S64:      
1BD3   E1                     POP   HL   
1BD4                          ;*Macro unroll:  test "2 1 -",1
1BD4   31 00 50               LD   SP,STACK   
1BD7   CD 8E 0E               CALL   coldInit   
1BDA   CD A1 4E               CALL   execStr   
1BDD   32 20 31 20 2D 00      DB   "2 1 -",0   
1BE3   CD C5 0D               CALL   flushBuffer   
1BE6   E1                     POP   HL   
1BE7   E5                     PUSH   HL   
1BE8   11 01 00               LD   DE,1   
1BEB   B7                     OR   A   
1BEC   ED 52                  SBC   HL,DE   
1BEE   7D                     LD   A,L   
1BEF   B4                     OR   H   
1BF0   CA 50 1C               JP   Z,expectM_3059S65   
1BF3   CD 5A 0E               CALL   printStr   
1BF6   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1C02   CD 5A 0E               CALL   printStr   
1C05   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C14   21 01 00               LD   hl,1   
1C17   E5                     PUSH   hl   
1C18   E5                     PUSH   hl   
1C19   CD 5F 0F               CALL   run   
1C1C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C24   CD C5 0D               CALL   flushBuffer   
1C27   CD 5A 0E               CALL   printStr   
1C2A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C37   E1                     POP   hl   
1C38   E5                     PUSH   hl   
1C39   E5                     PUSH   hl   
1C3A   CD 5F 0F               CALL   run   
1C3D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C4C   CD C5 0D               CALL   flushBuffer   
1C4F   76                     HALT      
1C50                EXPECTM_3059S65:      
1C50   E1                     POP   HL   
1C51                          ;*Macro unroll:  test "3a= a-- a",2
1C51   31 00 50               LD   SP,STACK   
1C54   CD 8E 0E               CALL   coldInit   
1C57   CD A1 4E               CALL   execStr   
1C5A   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1C64   CD C5 0D               CALL   flushBuffer   
1C67   E1                     POP   HL   
1C68   E5                     PUSH   HL   
1C69   11 02 00               LD   DE,2   
1C6C   B7                     OR   A   
1C6D   ED 52                  SBC   HL,DE   
1C6F   7D                     LD   A,L   
1C70   B4                     OR   H   
1C71   CA D5 1C               JP   Z,expectM_3060S66   
1C74   CD 5A 0E               CALL   printStr   
1C77   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1C87   CD 5A 0E               CALL   printStr   
1C8A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C99   21 02 00               LD   hl,2   
1C9C   E5                     PUSH   hl   
1C9D   E5                     PUSH   hl   
1C9E   CD 5F 0F               CALL   run   
1CA1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1CA9   CD C5 0D               CALL   flushBuffer   
1CAC   CD 5A 0E               CALL   printStr   
1CAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CBC   E1                     POP   hl   
1CBD   E5                     PUSH   hl   
1CBE   E5                     PUSH   hl   
1CBF   CD 5F 0F               CALL   run   
1CC2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1CD1   CD C5 0D               CALL   flushBuffer   
1CD4   76                     HALT      
1CD5                EXPECTM_3060S66:      
1CD5   E1                     POP   HL   
1CD6                          ;*Macro unroll:  test "3 5 &", 1
1CD6   31 00 50               LD   SP,STACK   
1CD9   CD 8E 0E               CALL   coldInit   
1CDC   CD A1 4E               CALL   execStr   
1CDF   33 20 35 20 26 00      DB   "3 5 &",0   
1CE5   CD C5 0D               CALL   flushBuffer   
1CE8   E1                     POP   HL   
1CE9   E5                     PUSH   HL   
1CEA   11 01 00               LD   DE,1   
1CED   B7                     OR   A   
1CEE   ED 52                  SBC   HL,DE   
1CF0   7D                     LD   A,L   
1CF1   B4                     OR   H   
1CF2   CA 52 1D               JP   Z,expectM_3061S67   
1CF5   CD 5A 0E               CALL   printStr   
1CF8   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1D04   CD 5A 0E               CALL   printStr   
1D07   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D16   21 01 00               LD   hl,1   
1D19   E5                     PUSH   hl   
1D1A   E5                     PUSH   hl   
1D1B   CD 5F 0F               CALL   run   
1D1E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D26   CD C5 0D               CALL   flushBuffer   
1D29   CD 5A 0E               CALL   printStr   
1D2C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D39   E1                     POP   hl   
1D3A   E5                     PUSH   hl   
1D3B   E5                     PUSH   hl   
1D3C   CD 5F 0F               CALL   run   
1D3F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D4E   CD C5 0D               CALL   flushBuffer   
1D51   76                     HALT      
1D52                EXPECTM_3061S67:      
1D52   E1                     POP   HL   
1D53                          ;*Macro unroll:  test "3 5 |", 7
1D53   31 00 50               LD   SP,STACK   
1D56   CD 8E 0E               CALL   coldInit   
1D59   CD A1 4E               CALL   execStr   
1D5C   33 20 35 20 7C 00      DB   "3 5 |",0   
1D62   CD C5 0D               CALL   flushBuffer   
1D65   E1                     POP   HL   
1D66   E5                     PUSH   HL   
1D67   11 07 00               LD   DE,7   
1D6A   B7                     OR   A   
1D6B   ED 52                  SBC   HL,DE   
1D6D   7D                     LD   A,L   
1D6E   B4                     OR   H   
1D6F   CA CF 1D               JP   Z,expectM_3062S68   
1D72   CD 5A 0E               CALL   printStr   
1D75   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1D81   CD 5A 0E               CALL   printStr   
1D84   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D93   21 07 00               LD   hl,7   
1D96   E5                     PUSH   hl   
1D97   E5                     PUSH   hl   
1D98   CD 5F 0F               CALL   run   
1D9B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1DA3   CD C5 0D               CALL   flushBuffer   
1DA6   CD 5A 0E               CALL   printStr   
1DA9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DB6   E1                     POP   hl   
1DB7   E5                     PUSH   hl   
1DB8   E5                     PUSH   hl   
1DB9   CD 5F 0F               CALL   run   
1DBC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1DCB   CD C5 0D               CALL   flushBuffer   
1DCE   76                     HALT      
1DCF                EXPECTM_3062S68:      
1DCF   E1                     POP   HL   
1DD0                          ;*Macro unroll:  test "3 5 /x", 6
1DD0   31 00 50               LD   SP,STACK   
1DD3   CD 8E 0E               CALL   coldInit   
1DD6   CD A1 4E               CALL   execStr   
1DD9   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1DE0   CD C5 0D               CALL   flushBuffer   
1DE3   E1                     POP   HL   
1DE4   E5                     PUSH   HL   
1DE5   11 06 00               LD   DE,6   
1DE8   B7                     OR   A   
1DE9   ED 52                  SBC   HL,DE   
1DEB   7D                     LD   A,L   
1DEC   B4                     OR   H   
1DED   CA 4E 1E               JP   Z,expectM_3063S69   
1DF0   CD 5A 0E               CALL   printStr   
1DF3   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1E00   CD 5A 0E               CALL   printStr   
1E03   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E12   21 06 00               LD   hl,6   
1E15   E5                     PUSH   hl   
1E16   E5                     PUSH   hl   
1E17   CD 5F 0F               CALL   run   
1E1A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E22   CD C5 0D               CALL   flushBuffer   
1E25   CD 5A 0E               CALL   printStr   
1E28   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E35   E1                     POP   hl   
1E36   E5                     PUSH   hl   
1E37   E5                     PUSH   hl   
1E38   CD 5F 0F               CALL   run   
1E3B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E4A   CD C5 0D               CALL   flushBuffer   
1E4D   76                     HALT      
1E4E                EXPECTM_3063S69:      
1E4E   E1                     POP   HL   
1E4F                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1E4F   31 00 50               LD   SP,STACK   
1E52   CD 8E 0E               CALL   coldInit   
1E55   CD A1 4E               CALL   execStr   
1E58   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1E67   CD C5 0D               CALL   flushBuffer   
1E6A   E1                     POP   HL   
1E6B   E5                     PUSH   HL   
1E6C   11 06 00               LD   DE,6   
1E6F   B7                     OR   A   
1E70   ED 52                  SBC   HL,DE   
1E72   7D                     LD   A,L   
1E73   B4                     OR   H   
1E74   CA DD 1E               JP   Z,expectM_3064S70   
1E77   CD 5A 0E               CALL   printStr   
1E7A   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1E8F   CD 5A 0E               CALL   printStr   
1E92   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EA1   21 06 00               LD   hl,6   
1EA4   E5                     PUSH   hl   
1EA5   E5                     PUSH   hl   
1EA6   CD 5F 0F               CALL   run   
1EA9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1EB1   CD C5 0D               CALL   flushBuffer   
1EB4   CD 5A 0E               CALL   printStr   
1EB7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EC4   E1                     POP   hl   
1EC5   E5                     PUSH   hl   
1EC6   E5                     PUSH   hl   
1EC7   CD 5F 0F               CALL   run   
1ECA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1ED9   CD C5 0D               CALL   flushBuffer   
1EDC   76                     HALT      
1EDD                EXPECTM_3064S70:      
1EDD   E1                     POP   HL   
1EDE                          ;*Macro unroll:  test "2 3 *", 6
1EDE   31 00 50               LD   SP,STACK   
1EE1   CD 8E 0E               CALL   coldInit   
1EE4   CD A1 4E               CALL   execStr   
1EE7   32 20 33 20 2A 00      DB   "2 3 *",0   
1EED   CD C5 0D               CALL   flushBuffer   
1EF0   E1                     POP   HL   
1EF1   E5                     PUSH   HL   
1EF2   11 06 00               LD   DE,6   
1EF5   B7                     OR   A   
1EF6   ED 52                  SBC   HL,DE   
1EF8   7D                     LD   A,L   
1EF9   B4                     OR   H   
1EFA   CA 5A 1F               JP   Z,expectM_3065S71   
1EFD   CD 5A 0E               CALL   printStr   
1F00   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1F0C   CD 5A 0E               CALL   printStr   
1F0F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F1E   21 06 00               LD   hl,6   
1F21   E5                     PUSH   hl   
1F22   E5                     PUSH   hl   
1F23   CD 5F 0F               CALL   run   
1F26   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F2E   CD C5 0D               CALL   flushBuffer   
1F31   CD 5A 0E               CALL   printStr   
1F34   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F41   E1                     POP   hl   
1F42   E5                     PUSH   hl   
1F43   E5                     PUSH   hl   
1F44   CD 5F 0F               CALL   run   
1F47   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F56   CD C5 0D               CALL   flushBuffer   
1F59   76                     HALT      
1F5A                EXPECTM_3065S71:      
1F5A   E1                     POP   HL   
1F5B                          ;*Macro unroll:  test "1 2 3 + *", 5
1F5B   31 00 50               LD   SP,STACK   
1F5E   CD 8E 0E               CALL   coldInit   
1F61   CD A1 4E               CALL   execStr   
1F64   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1F6E   CD C5 0D               CALL   flushBuffer   
1F71   E1                     POP   HL   
1F72   E5                     PUSH   HL   
1F73   11 05 00               LD   DE,5   
1F76   B7                     OR   A   
1F77   ED 52                  SBC   HL,DE   
1F79   7D                     LD   A,L   
1F7A   B4                     OR   H   
1F7B   CA DF 1F               JP   Z,expectM_3066S72   
1F7E   CD 5A 0E               CALL   printStr   
1F81   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1F91   CD 5A 0E               CALL   printStr   
1F94   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FA3   21 05 00               LD   hl,5   
1FA6   E5                     PUSH   hl   
1FA7   E5                     PUSH   hl   
1FA8   CD 5F 0F               CALL   run   
1FAB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1FB3   CD C5 0D               CALL   flushBuffer   
1FB6   CD 5A 0E               CALL   printStr   
1FB9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FC6   E1                     POP   hl   
1FC7   E5                     PUSH   hl   
1FC8   E5                     PUSH   hl   
1FC9   CD 5F 0F               CALL   run   
1FCC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1FDB   CD C5 0D               CALL   flushBuffer   
1FDE   76                     HALT      
1FDF                EXPECTM_3066S72:      
1FDF   E1                     POP   HL   
1FE0                          ;*Macro unroll:  test "7 3 /", 2
1FE0   31 00 50               LD   SP,STACK   
1FE3   CD 8E 0E               CALL   coldInit   
1FE6   CD A1 4E               CALL   execStr   
1FE9   37 20 33 20 2F 00      DB   "7 3 /",0   
1FEF   CD C5 0D               CALL   flushBuffer   
1FF2   E1                     POP   HL   
1FF3   E5                     PUSH   HL   
1FF4   11 02 00               LD   DE,2   
1FF7   B7                     OR   A   
1FF8   ED 52                  SBC   HL,DE   
1FFA   7D                     LD   A,L   
1FFB   B4                     OR   H   
1FFC   CA 5C 20               JP   Z,expectM_3067S73   
1FFF   CD 5A 0E               CALL   printStr   
2002   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
200E   CD 5A 0E               CALL   printStr   
2011   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2020   21 02 00               LD   hl,2   
2023   E5                     PUSH   hl   
2024   E5                     PUSH   hl   
2025   CD 5F 0F               CALL   run   
2028   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2030   CD C5 0D               CALL   flushBuffer   
2033   CD 5A 0E               CALL   printStr   
2036   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2043   E1                     POP   hl   
2044   E5                     PUSH   hl   
2045   E5                     PUSH   hl   
2046   CD 5F 0F               CALL   run   
2049   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2058   CD C5 0D               CALL   flushBuffer   
205B   76                     HALT      
205C                EXPECTM_3067S73:      
205C   E1                     POP   HL   
205D                          ;*Macro unroll:  test "100a= 1a+= a", 101
205D   31 00 50               LD   SP,STACK   
2060   CD 8E 0E               CALL   coldInit   
2063   CD A1 4E               CALL   execStr   
2066   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
2073   CD C5 0D               CALL   flushBuffer   
2076   E1                     POP   HL   
2077   E5                     PUSH   HL   
2078   11 65 00               LD   DE,101   
207B   B7                     OR   A   
207C   ED 52                  SBC   HL,DE   
207E   7D                     LD   A,L   
207F   B4                     OR   H   
2080   CA E7 20               JP   Z,expectM_3068S74   
2083   CD 5A 0E               CALL   printStr   
2086   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
2099   CD 5A 0E               CALL   printStr   
209C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20AB   21 65 00               LD   hl,101   
20AE   E5                     PUSH   hl   
20AF   E5                     PUSH   hl   
20B0   CD 5F 0F               CALL   run   
20B3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
20BB   CD C5 0D               CALL   flushBuffer   
20BE   CD 5A 0E               CALL   printStr   
20C1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20CE   E1                     POP   hl   
20CF   E5                     PUSH   hl   
20D0   E5                     PUSH   hl   
20D1   CD 5F 0F               CALL   run   
20D4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
20E3   CD C5 0D               CALL   flushBuffer   
20E6   76                     HALT      
20E7                EXPECTM_3068S74:      
20E7   E1                     POP   HL   
20E8                          ;*Macro unroll:  test "100a= a1-= a", 99
20E8   31 00 50               LD   SP,STACK   
20EB   CD 8E 0E               CALL   coldInit   
20EE   CD A1 4E               CALL   execStr   
20F1   31 30 30 61 3D 20 61 31 2D 3D 20 61 00 DB   "100a= a1-= a",0   
20FE   CD C5 0D               CALL   flushBuffer   
2101   E1                     POP   HL   
2102   E5                     PUSH   HL   
2103   11 63 00               LD   DE,99   
2106   B7                     OR   A   
2107   ED 52                  SBC   HL,DE   
2109   7D                     LD   A,L   
210A   B4                     OR   H   
210B   CA 72 21               JP   Z,expectM_3069S75   
210E   CD 5A 0E               CALL   printStr   
2111   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 31 2D 3D 20 61 00 .CSTR   "Code: ","100a= a1-= a"   
2124   CD 5A 0E               CALL   printStr   
2127   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2136   21 63 00               LD   hl,99   
2139   E5                     PUSH   hl   
213A   E5                     PUSH   hl   
213B   CD 5F 0F               CALL   run   
213E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2146   CD C5 0D               CALL   flushBuffer   
2149   CD 5A 0E               CALL   printStr   
214C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2159   E1                     POP   hl   
215A   E5                     PUSH   hl   
215B   E5                     PUSH   hl   
215C   CD 5F 0F               CALL   run   
215F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
216E   CD C5 0D               CALL   flushBuffer   
2171   76                     HALT      
2172                EXPECTM_3069S75:      
2172   E1                     POP   HL   
2173                          ;*Macro unroll:  test "100a= a2*= a", 200
2173   31 00 50               LD   SP,STACK   
2176   CD 8E 0E               CALL   coldInit   
2179   CD A1 4E               CALL   execStr   
217C   31 30 30 61 3D 20 61 32 2A 3D 20 61 00 DB   "100a= a2*= a",0   
2189   CD C5 0D               CALL   flushBuffer   
218C   E1                     POP   HL   
218D   E5                     PUSH   HL   
218E   11 C8 00               LD   DE,200   
2191   B7                     OR   A   
2192   ED 52                  SBC   HL,DE   
2194   7D                     LD   A,L   
2195   B4                     OR   H   
2196   CA FD 21               JP   Z,expectM_3070S76   
2199   CD 5A 0E               CALL   printStr   
219C   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2A 3D 20 61 00 .CSTR   "Code: ","100a= a2*= a"   
21AF   CD 5A 0E               CALL   printStr   
21B2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21C1   21 C8 00               LD   hl,200   
21C4   E5                     PUSH   hl   
21C5   E5                     PUSH   hl   
21C6   CD 5F 0F               CALL   run   
21C9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
21D1   CD C5 0D               CALL   flushBuffer   
21D4   CD 5A 0E               CALL   printStr   
21D7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21E4   E1                     POP   hl   
21E5   E5                     PUSH   hl   
21E6   E5                     PUSH   hl   
21E7   CD 5F 0F               CALL   run   
21EA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
21F9   CD C5 0D               CALL   flushBuffer   
21FC   76                     HALT      
21FD                EXPECTM_3070S76:      
21FD   E1                     POP   HL   
21FE                          ;*Macro unroll:  test "100a= a2/= a", 50
21FE   31 00 50               LD   SP,STACK   
2201   CD 8E 0E               CALL   coldInit   
2204   CD A1 4E               CALL   execStr   
2207   31 30 30 61 3D 20 61 32 2F 3D 20 61 00 DB   "100a= a2/= a",0   
2214   CD C5 0D               CALL   flushBuffer   
2217   E1                     POP   HL   
2218   E5                     PUSH   HL   
2219   11 32 00               LD   DE,50   
221C   B7                     OR   A   
221D   ED 52                  SBC   HL,DE   
221F   7D                     LD   A,L   
2220   B4                     OR   H   
2221   CA 88 22               JP   Z,expectM_3071S77   
2224   CD 5A 0E               CALL   printStr   
2227   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2F 3D 20 61 00 .CSTR   "Code: ","100a= a2/= a"   
223A   CD 5A 0E               CALL   printStr   
223D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
224C   21 32 00               LD   hl,50   
224F   E5                     PUSH   hl   
2250   E5                     PUSH   hl   
2251   CD 5F 0F               CALL   run   
2254   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
225C   CD C5 0D               CALL   flushBuffer   
225F   CD 5A 0E               CALL   printStr   
2262   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
226F   E1                     POP   hl   
2270   E5                     PUSH   hl   
2271   E5                     PUSH   hl   
2272   CD 5F 0F               CALL   run   
2275   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2284   CD C5 0D               CALL   flushBuffer   
2287   76                     HALT      
2288                EXPECTM_3071S77:      
2288   E1                     POP   HL   
2289                          ;*Macro unroll:  test "7 3 / /re", 1
2289   31 00 50               LD   SP,STACK   
228C   CD 8E 0E               CALL   coldInit   
228F   CD A1 4E               CALL   execStr   
2292   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
229C   CD C5 0D               CALL   flushBuffer   
229F   E1                     POP   HL   
22A0   E5                     PUSH   HL   
22A1   11 01 00               LD   DE,1   
22A4   B7                     OR   A   
22A5   ED 52                  SBC   HL,DE   
22A7   7D                     LD   A,L   
22A8   B4                     OR   H   
22A9   CA 0D 23               JP   Z,expectM_3072S78   
22AC   CD 5A 0E               CALL   printStr   
22AF   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
22BF   CD 5A 0E               CALL   printStr   
22C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22D1   21 01 00               LD   hl,1   
22D4   E5                     PUSH   hl   
22D5   E5                     PUSH   hl   
22D6   CD 5F 0F               CALL   run   
22D9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
22E1   CD C5 0D               CALL   flushBuffer   
22E4   CD 5A 0E               CALL   printStr   
22E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22F4   E1                     POP   hl   
22F5   E5                     PUSH   hl   
22F6   E5                     PUSH   hl   
22F7   CD 5F 0F               CALL   run   
22FA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2309   CD C5 0D               CALL   flushBuffer   
230C   76                     HALT      
230D                EXPECTM_3072S78:      
230D   E1                     POP   HL   
230E                          ;*Macro unroll:  test "7 3 /", 2
230E   31 00 50               LD   SP,STACK   
2311   CD 8E 0E               CALL   coldInit   
2314   CD A1 4E               CALL   execStr   
2317   37 20 33 20 2F 00      DB   "7 3 /",0   
231D   CD C5 0D               CALL   flushBuffer   
2320   E1                     POP   HL   
2321   E5                     PUSH   HL   
2322   11 02 00               LD   DE,2   
2325   B7                     OR   A   
2326   ED 52                  SBC   HL,DE   
2328   7D                     LD   A,L   
2329   B4                     OR   H   
232A   CA 8A 23               JP   Z,expectM_3073S79   
232D   CD 5A 0E               CALL   printStr   
2330   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
233C   CD 5A 0E               CALL   printStr   
233F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
234E   21 02 00               LD   hl,2   
2351   E5                     PUSH   hl   
2352   E5                     PUSH   hl   
2353   CD 5F 0F               CALL   run   
2356   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
235E   CD C5 0D               CALL   flushBuffer   
2361   CD 5A 0E               CALL   printStr   
2364   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2371   E1                     POP   hl   
2372   E5                     PUSH   hl   
2373   E5                     PUSH   hl   
2374   CD 5F 0F               CALL   run   
2377   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2386   CD C5 0D               CALL   flushBuffer   
2389   76                     HALT      
238A                EXPECTM_3073S79:      
238A   E1                     POP   HL   
238B                          ;*Macro unroll:  test "2 3 ==", FALSE
238B   31 00 50               LD   SP,STACK   
238E   CD 8E 0E               CALL   coldInit   
2391   CD A1 4E               CALL   execStr   
2394   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
239B   CD C5 0D               CALL   flushBuffer   
239E   E1                     POP   HL   
239F   E5                     PUSH   HL   
23A0   11 00 00               LD   DE,FALSE   
23A3   B7                     OR   A   
23A4   ED 52                  SBC   HL,DE   
23A6   7D                     LD   A,L   
23A7   B4                     OR   H   
23A8   CA 09 24               JP   Z,expectM_3074S80   
23AB   CD 5A 0E               CALL   printStr   
23AE   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
23BB   CD 5A 0E               CALL   printStr   
23BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23CD   21 00 00               LD   hl,FALSE   
23D0   E5                     PUSH   hl   
23D1   E5                     PUSH   hl   
23D2   CD 5F 0F               CALL   run   
23D5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
23DD   CD C5 0D               CALL   flushBuffer   
23E0   CD 5A 0E               CALL   printStr   
23E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23F0   E1                     POP   hl   
23F1   E5                     PUSH   hl   
23F2   E5                     PUSH   hl   
23F3   CD 5F 0F               CALL   run   
23F6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2405   CD C5 0D               CALL   flushBuffer   
2408   76                     HALT      
2409                EXPECTM_3074S80:      
2409   E1                     POP   HL   
240A                          ;*Macro unroll:  test "3 3 ==", TRUE
240A   31 00 50               LD   SP,STACK   
240D   CD 8E 0E               CALL   coldInit   
2410   CD A1 4E               CALL   execStr   
2413   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
241A   CD C5 0D               CALL   flushBuffer   
241D   E1                     POP   HL   
241E   E5                     PUSH   HL   
241F   11 FF FF               LD   DE,TRUE   
2422   B7                     OR   A   
2423   ED 52                  SBC   HL,DE   
2425   7D                     LD   A,L   
2426   B4                     OR   H   
2427   CA 88 24               JP   Z,expectM_3075S81   
242A   CD 5A 0E               CALL   printStr   
242D   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
243A   CD 5A 0E               CALL   printStr   
243D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
244C   21 FF FF               LD   hl,TRUE   
244F   E5                     PUSH   hl   
2450   E5                     PUSH   hl   
2451   CD 5F 0F               CALL   run   
2454   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
245C   CD C5 0D               CALL   flushBuffer   
245F   CD 5A 0E               CALL   printStr   
2462   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
246F   E1                     POP   hl   
2470   E5                     PUSH   hl   
2471   E5                     PUSH   hl   
2472   CD 5F 0F               CALL   run   
2475   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2484   CD C5 0D               CALL   flushBuffer   
2487   76                     HALT      
2488                EXPECTM_3075S81:      
2488   E1                     POP   HL   
2489                          ;*Macro unroll:  test "1 2 <", TRUE
2489   31 00 50               LD   SP,STACK   
248C   CD 8E 0E               CALL   coldInit   
248F   CD A1 4E               CALL   execStr   
2492   31 20 32 20 3C 00      DB   "1 2 <",0   
2498   CD C5 0D               CALL   flushBuffer   
249B   E1                     POP   HL   
249C   E5                     PUSH   HL   
249D   11 FF FF               LD   DE,TRUE   
24A0   B7                     OR   A   
24A1   ED 52                  SBC   HL,DE   
24A3   7D                     LD   A,L   
24A4   B4                     OR   H   
24A5   CA 05 25               JP   Z,expectM_3076S82   
24A8   CD 5A 0E               CALL   printStr   
24AB   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
24B7   CD 5A 0E               CALL   printStr   
24BA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24C9   21 FF FF               LD   hl,TRUE   
24CC   E5                     PUSH   hl   
24CD   E5                     PUSH   hl   
24CE   CD 5F 0F               CALL   run   
24D1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
24D9   CD C5 0D               CALL   flushBuffer   
24DC   CD 5A 0E               CALL   printStr   
24DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24EC   E1                     POP   hl   
24ED   E5                     PUSH   hl   
24EE   E5                     PUSH   hl   
24EF   CD 5F 0F               CALL   run   
24F2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2501   CD C5 0D               CALL   flushBuffer   
2504   76                     HALT      
2505                EXPECTM_3076S82:      
2505   E1                     POP   HL   
2506                          ;*Macro unroll:  test "2 1 <", FALSE
2506   31 00 50               LD   SP,STACK   
2509   CD 8E 0E               CALL   coldInit   
250C   CD A1 4E               CALL   execStr   
250F   32 20 31 20 3C 00      DB   "2 1 <",0   
2515   CD C5 0D               CALL   flushBuffer   
2518   E1                     POP   HL   
2519   E5                     PUSH   HL   
251A   11 00 00               LD   DE,FALSE   
251D   B7                     OR   A   
251E   ED 52                  SBC   HL,DE   
2520   7D                     LD   A,L   
2521   B4                     OR   H   
2522   CA 82 25               JP   Z,expectM_3077S83   
2525   CD 5A 0E               CALL   printStr   
2528   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
2534   CD 5A 0E               CALL   printStr   
2537   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2546   21 00 00               LD   hl,FALSE   
2549   E5                     PUSH   hl   
254A   E5                     PUSH   hl   
254B   CD 5F 0F               CALL   run   
254E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2556   CD C5 0D               CALL   flushBuffer   
2559   CD 5A 0E               CALL   printStr   
255C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2569   E1                     POP   hl   
256A   E5                     PUSH   hl   
256B   E5                     PUSH   hl   
256C   CD 5F 0F               CALL   run   
256F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
257E   CD C5 0D               CALL   flushBuffer   
2581   76                     HALT      
2582                EXPECTM_3077S83:      
2582   E1                     POP   HL   
2583                          ;*Macro unroll:  test "2 3 <", TRUE
2583   31 00 50               LD   SP,STACK   
2586   CD 8E 0E               CALL   coldInit   
2589   CD A1 4E               CALL   execStr   
258C   32 20 33 20 3C 00      DB   "2 3 <",0   
2592   CD C5 0D               CALL   flushBuffer   
2595   E1                     POP   HL   
2596   E5                     PUSH   HL   
2597   11 FF FF               LD   DE,TRUE   
259A   B7                     OR   A   
259B   ED 52                  SBC   HL,DE   
259D   7D                     LD   A,L   
259E   B4                     OR   H   
259F   CA FF 25               JP   Z,expectM_3078S84   
25A2   CD 5A 0E               CALL   printStr   
25A5   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
25B1   CD 5A 0E               CALL   printStr   
25B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25C3   21 FF FF               LD   hl,TRUE   
25C6   E5                     PUSH   hl   
25C7   E5                     PUSH   hl   
25C8   CD 5F 0F               CALL   run   
25CB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25D3   CD C5 0D               CALL   flushBuffer   
25D6   CD 5A 0E               CALL   printStr   
25D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25E6   E1                     POP   hl   
25E7   E5                     PUSH   hl   
25E8   E5                     PUSH   hl   
25E9   CD 5F 0F               CALL   run   
25EC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
25FB   CD C5 0D               CALL   flushBuffer   
25FE   76                     HALT      
25FF                EXPECTM_3078S84:      
25FF   E1                     POP   HL   
2600                          ;*Macro unroll:  test "3 3 <", FALSE
2600   31 00 50               LD   SP,STACK   
2603   CD 8E 0E               CALL   coldInit   
2606   CD A1 4E               CALL   execStr   
2609   33 20 33 20 3C 00      DB   "3 3 <",0   
260F   CD C5 0D               CALL   flushBuffer   
2612   E1                     POP   HL   
2613   E5                     PUSH   HL   
2614   11 00 00               LD   DE,FALSE   
2617   B7                     OR   A   
2618   ED 52                  SBC   HL,DE   
261A   7D                     LD   A,L   
261B   B4                     OR   H   
261C   CA 7C 26               JP   Z,expectM_3079S85   
261F   CD 5A 0E               CALL   printStr   
2622   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
262E   CD 5A 0E               CALL   printStr   
2631   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2640   21 00 00               LD   hl,FALSE   
2643   E5                     PUSH   hl   
2644   E5                     PUSH   hl   
2645   CD 5F 0F               CALL   run   
2648   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2650   CD C5 0D               CALL   flushBuffer   
2653   CD 5A 0E               CALL   printStr   
2656   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2663   E1                     POP   hl   
2664   E5                     PUSH   hl   
2665   E5                     PUSH   hl   
2666   CD 5F 0F               CALL   run   
2669   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2678   CD C5 0D               CALL   flushBuffer   
267B   76                     HALT      
267C                EXPECTM_3079S85:      
267C   E1                     POP   HL   
267D                          ;*Macro unroll:  test "1 2 >", FALSE
267D   31 00 50               LD   SP,STACK   
2680   CD 8E 0E               CALL   coldInit   
2683   CD A1 4E               CALL   execStr   
2686   31 20 32 20 3E 00      DB   "1 2 >",0   
268C   CD C5 0D               CALL   flushBuffer   
268F   E1                     POP   HL   
2690   E5                     PUSH   HL   
2691   11 00 00               LD   DE,FALSE   
2694   B7                     OR   A   
2695   ED 52                  SBC   HL,DE   
2697   7D                     LD   A,L   
2698   B4                     OR   H   
2699   CA F9 26               JP   Z,expectM_3080S86   
269C   CD 5A 0E               CALL   printStr   
269F   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
26AB   CD 5A 0E               CALL   printStr   
26AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26BD   21 00 00               LD   hl,FALSE   
26C0   E5                     PUSH   hl   
26C1   E5                     PUSH   hl   
26C2   CD 5F 0F               CALL   run   
26C5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26CD   CD C5 0D               CALL   flushBuffer   
26D0   CD 5A 0E               CALL   printStr   
26D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26E0   E1                     POP   hl   
26E1   E5                     PUSH   hl   
26E2   E5                     PUSH   hl   
26E3   CD 5F 0F               CALL   run   
26E6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
26F5   CD C5 0D               CALL   flushBuffer   
26F8   76                     HALT      
26F9                EXPECTM_3080S86:      
26F9   E1                     POP   HL   
26FA                          ;*Macro unroll:  test "2 1 >", TRUE
26FA   31 00 50               LD   SP,STACK   
26FD   CD 8E 0E               CALL   coldInit   
2700   CD A1 4E               CALL   execStr   
2703   32 20 31 20 3E 00      DB   "2 1 >",0   
2709   CD C5 0D               CALL   flushBuffer   
270C   E1                     POP   HL   
270D   E5                     PUSH   HL   
270E   11 FF FF               LD   DE,TRUE   
2711   B7                     OR   A   
2712   ED 52                  SBC   HL,DE   
2714   7D                     LD   A,L   
2715   B4                     OR   H   
2716   CA 76 27               JP   Z,expectM_3081S87   
2719   CD 5A 0E               CALL   printStr   
271C   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
2728   CD 5A 0E               CALL   printStr   
272B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
273A   21 FF FF               LD   hl,TRUE   
273D   E5                     PUSH   hl   
273E   E5                     PUSH   hl   
273F   CD 5F 0F               CALL   run   
2742   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
274A   CD C5 0D               CALL   flushBuffer   
274D   CD 5A 0E               CALL   printStr   
2750   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
275D   E1                     POP   hl   
275E   E5                     PUSH   hl   
275F   E5                     PUSH   hl   
2760   CD 5F 0F               CALL   run   
2763   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2772   CD C5 0D               CALL   flushBuffer   
2775   76                     HALT      
2776                EXPECTM_3081S87:      
2776   E1                     POP   HL   
2777                          ;*Macro unroll:  test "3 3 >", FALSE
2777   31 00 50               LD   SP,STACK   
277A   CD 8E 0E               CALL   coldInit   
277D   CD A1 4E               CALL   execStr   
2780   33 20 33 20 3E 00      DB   "3 3 >",0   
2786   CD C5 0D               CALL   flushBuffer   
2789   E1                     POP   HL   
278A   E5                     PUSH   HL   
278B   11 00 00               LD   DE,FALSE   
278E   B7                     OR   A   
278F   ED 52                  SBC   HL,DE   
2791   7D                     LD   A,L   
2792   B4                     OR   H   
2793   CA F3 27               JP   Z,expectM_3082S88   
2796   CD 5A 0E               CALL   printStr   
2799   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
27A5   CD 5A 0E               CALL   printStr   
27A8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27B7   21 00 00               LD   hl,FALSE   
27BA   E5                     PUSH   hl   
27BB   E5                     PUSH   hl   
27BC   CD 5F 0F               CALL   run   
27BF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27C7   CD C5 0D               CALL   flushBuffer   
27CA   CD 5A 0E               CALL   printStr   
27CD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27DA   E1                     POP   hl   
27DB   E5                     PUSH   hl   
27DC   E5                     PUSH   hl   
27DD   CD 5F 0F               CALL   run   
27E0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
27EF   CD C5 0D               CALL   flushBuffer   
27F2   76                     HALT      
27F3                EXPECTM_3082S88:      
27F3   E1                     POP   HL   
27F4                          ;*Macro unroll:  test "4 3 >", TRUE
27F4   31 00 50               LD   SP,STACK   
27F7   CD 8E 0E               CALL   coldInit   
27FA   CD A1 4E               CALL   execStr   
27FD   34 20 33 20 3E 00      DB   "4 3 >",0   
2803   CD C5 0D               CALL   flushBuffer   
2806   E1                     POP   HL   
2807   E5                     PUSH   HL   
2808   11 FF FF               LD   DE,TRUE   
280B   B7                     OR   A   
280C   ED 52                  SBC   HL,DE   
280E   7D                     LD   A,L   
280F   B4                     OR   H   
2810   CA 70 28               JP   Z,expectM_3083S89   
2813   CD 5A 0E               CALL   printStr   
2816   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2822   CD 5A 0E               CALL   printStr   
2825   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2834   21 FF FF               LD   hl,TRUE   
2837   E5                     PUSH   hl   
2838   E5                     PUSH   hl   
2839   CD 5F 0F               CALL   run   
283C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2844   CD C5 0D               CALL   flushBuffer   
2847   CD 5A 0E               CALL   printStr   
284A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2857   E1                     POP   hl   
2858   E5                     PUSH   hl   
2859   E5                     PUSH   hl   
285A   CD 5F 0F               CALL   run   
285D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
286C   CD C5 0D               CALL   flushBuffer   
286F   76                     HALT      
2870                EXPECTM_3083S89:      
2870   E1                     POP   HL   
2871                          ;*Macro unroll:  test "2 2 <=", TRUE
2871   31 00 50               LD   SP,STACK   
2874   CD 8E 0E               CALL   coldInit   
2877   CD A1 4E               CALL   execStr   
287A   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
2881   CD C5 0D               CALL   flushBuffer   
2884   E1                     POP   HL   
2885   E5                     PUSH   HL   
2886   11 FF FF               LD   DE,TRUE   
2889   B7                     OR   A   
288A   ED 52                  SBC   HL,DE   
288C   7D                     LD   A,L   
288D   B4                     OR   H   
288E   CA EF 28               JP   Z,expectM_3084S90   
2891   CD 5A 0E               CALL   printStr   
2894   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
28A1   CD 5A 0E               CALL   printStr   
28A4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28B3   21 FF FF               LD   hl,TRUE   
28B6   E5                     PUSH   hl   
28B7   E5                     PUSH   hl   
28B8   CD 5F 0F               CALL   run   
28BB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28C3   CD C5 0D               CALL   flushBuffer   
28C6   CD 5A 0E               CALL   printStr   
28C9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28D6   E1                     POP   hl   
28D7   E5                     PUSH   hl   
28D8   E5                     PUSH   hl   
28D9   CD 5F 0F               CALL   run   
28DC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
28EB   CD C5 0D               CALL   flushBuffer   
28EE   76                     HALT      
28EF                EXPECTM_3084S90:      
28EF   E1                     POP   HL   
28F0                          ;*Macro unroll:  test "2 2 >=", TRUE
28F0   31 00 50               LD   SP,STACK   
28F3   CD 8E 0E               CALL   coldInit   
28F6   CD A1 4E               CALL   execStr   
28F9   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
2900   CD C5 0D               CALL   flushBuffer   
2903   E1                     POP   HL   
2904   E5                     PUSH   HL   
2905   11 FF FF               LD   DE,TRUE   
2908   B7                     OR   A   
2909   ED 52                  SBC   HL,DE   
290B   7D                     LD   A,L   
290C   B4                     OR   H   
290D   CA 6E 29               JP   Z,expectM_3085S91   
2910   CD 5A 0E               CALL   printStr   
2913   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2920   CD 5A 0E               CALL   printStr   
2923   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2932   21 FF FF               LD   hl,TRUE   
2935   E5                     PUSH   hl   
2936   E5                     PUSH   hl   
2937   CD 5F 0F               CALL   run   
293A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2942   CD C5 0D               CALL   flushBuffer   
2945   CD 5A 0E               CALL   printStr   
2948   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2955   E1                     POP   hl   
2956   E5                     PUSH   hl   
2957   E5                     PUSH   hl   
2958   CD 5F 0F               CALL   run   
295B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
296A   CD C5 0D               CALL   flushBuffer   
296D   76                     HALT      
296E                EXPECTM_3085S91:      
296E   E1                     POP   HL   
296F                          ;*Macro unroll:  test "3 1 <<", 6
296F   31 00 50               LD   SP,STACK   
2972   CD 8E 0E               CALL   coldInit   
2975   CD A1 4E               CALL   execStr   
2978   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
297F   CD C5 0D               CALL   flushBuffer   
2982   E1                     POP   HL   
2983   E5                     PUSH   HL   
2984   11 06 00               LD   DE,6   
2987   B7                     OR   A   
2988   ED 52                  SBC   HL,DE   
298A   7D                     LD   A,L   
298B   B4                     OR   H   
298C   CA ED 29               JP   Z,expectM_3086S92   
298F   CD 5A 0E               CALL   printStr   
2992   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
299F   CD 5A 0E               CALL   printStr   
29A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29B1   21 06 00               LD   hl,6   
29B4   E5                     PUSH   hl   
29B5   E5                     PUSH   hl   
29B6   CD 5F 0F               CALL   run   
29B9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
29C1   CD C5 0D               CALL   flushBuffer   
29C4   CD 5A 0E               CALL   printStr   
29C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29D4   E1                     POP   hl   
29D5   E5                     PUSH   hl   
29D6   E5                     PUSH   hl   
29D7   CD 5F 0F               CALL   run   
29DA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
29E9   CD C5 0D               CALL   flushBuffer   
29EC   76                     HALT      
29ED                EXPECTM_3086S92:      
29ED   E1                     POP   HL   
29EE                          ;*Macro unroll:  test "10 1 >>", 5
29EE   31 00 50               LD   SP,STACK   
29F1   CD 8E 0E               CALL   coldInit   
29F4   CD A1 4E               CALL   execStr   
29F7   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
29FF   CD C5 0D               CALL   flushBuffer   
2A02   E1                     POP   HL   
2A03   E5                     PUSH   HL   
2A04   11 05 00               LD   DE,5   
2A07   B7                     OR   A   
2A08   ED 52                  SBC   HL,DE   
2A0A   7D                     LD   A,L   
2A0B   B4                     OR   H   
2A0C   CA 6E 2A               JP   Z,expectM_3087S93   
2A0F   CD 5A 0E               CALL   printStr   
2A12   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2A20   CD 5A 0E               CALL   printStr   
2A23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A32   21 05 00               LD   hl,5   
2A35   E5                     PUSH   hl   
2A36   E5                     PUSH   hl   
2A37   CD 5F 0F               CALL   run   
2A3A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A42   CD C5 0D               CALL   flushBuffer   
2A45   CD 5A 0E               CALL   printStr   
2A48   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A55   E1                     POP   hl   
2A56   E5                     PUSH   hl   
2A57   E5                     PUSH   hl   
2A58   CD 5F 0F               CALL   run   
2A5B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A6A   CD C5 0D               CALL   flushBuffer   
2A6D   76                     HALT      
2A6E                EXPECTM_3087S93:      
2A6E   E1                     POP   HL   
2A6F                          ;*Macro unroll:  test "1 x = x", 1
2A6F   31 00 50               LD   SP,STACK   
2A72   CD 8E 0E               CALL   coldInit   
2A75   CD A1 4E               CALL   execStr   
2A78   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
2A80   CD C5 0D               CALL   flushBuffer   
2A83   E1                     POP   HL   
2A84   E5                     PUSH   HL   
2A85   11 01 00               LD   DE,1   
2A88   B7                     OR   A   
2A89   ED 52                  SBC   HL,DE   
2A8B   7D                     LD   A,L   
2A8C   B4                     OR   H   
2A8D   CA EF 2A               JP   Z,expectM_3088S94   
2A90   CD 5A 0E               CALL   printStr   
2A93   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2AA1   CD 5A 0E               CALL   printStr   
2AA4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AB3   21 01 00               LD   hl,1   
2AB6   E5                     PUSH   hl   
2AB7   E5                     PUSH   hl   
2AB8   CD 5F 0F               CALL   run   
2ABB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2AC3   CD C5 0D               CALL   flushBuffer   
2AC6   CD 5A 0E               CALL   printStr   
2AC9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AD6   E1                     POP   hl   
2AD7   E5                     PUSH   hl   
2AD8   E5                     PUSH   hl   
2AD9   CD 5F 0F               CALL   run   
2ADC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2AEB   CD C5 0D               CALL   flushBuffer   
2AEE   76                     HALT      
2AEF                EXPECTM_3088S94:      
2AEF   E1                     POP   HL   
2AF0                          ;*Macro unroll:  test "1{}^", 1
2AF0   31 00 50               LD   SP,STACK   
2AF3   CD 8E 0E               CALL   coldInit   
2AF6   CD A1 4E               CALL   execStr   
2AF9   31 7B 7D 5E 00         DB   "1{}^",0   
2AFE   CD C5 0D               CALL   flushBuffer   
2B01   E1                     POP   HL   
2B02   E5                     PUSH   HL   
2B03   11 01 00               LD   DE,1   
2B06   B7                     OR   A   
2B07   ED 52                  SBC   HL,DE   
2B09   7D                     LD   A,L   
2B0A   B4                     OR   H   
2B0B   CA 6A 2B               JP   Z,expectM_3089S95   
2B0E   CD 5A 0E               CALL   printStr   
2B11   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2B1C   CD 5A 0E               CALL   printStr   
2B1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B2E   21 01 00               LD   hl,1   
2B31   E5                     PUSH   hl   
2B32   E5                     PUSH   hl   
2B33   CD 5F 0F               CALL   run   
2B36   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B3E   CD C5 0D               CALL   flushBuffer   
2B41   CD 5A 0E               CALL   printStr   
2B44   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B51   E1                     POP   hl   
2B52   E5                     PUSH   hl   
2B53   E5                     PUSH   hl   
2B54   CD 5F 0F               CALL   run   
2B57   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B66   CD C5 0D               CALL   flushBuffer   
2B69   76                     HALT      
2B6A                EXPECTM_3089S95:      
2B6A   E1                     POP   HL   
2B6B                          ;*Macro unroll:  test "{1}^", 1
2B6B   31 00 50               LD   SP,STACK   
2B6E   CD 8E 0E               CALL   coldInit   
2B71   CD A1 4E               CALL   execStr   
2B74   7B 31 7D 5E 00         DB   "{1}^",0   
2B79   CD C5 0D               CALL   flushBuffer   
2B7C   E1                     POP   HL   
2B7D   E5                     PUSH   HL   
2B7E   11 01 00               LD   DE,1   
2B81   B7                     OR   A   
2B82   ED 52                  SBC   HL,DE   
2B84   7D                     LD   A,L   
2B85   B4                     OR   H   
2B86   CA E5 2B               JP   Z,expectM_3090S96   
2B89   CD 5A 0E               CALL   printStr   
2B8C   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2B97   CD 5A 0E               CALL   printStr   
2B9A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BA9   21 01 00               LD   hl,1   
2BAC   E5                     PUSH   hl   
2BAD   E5                     PUSH   hl   
2BAE   CD 5F 0F               CALL   run   
2BB1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2BB9   CD C5 0D               CALL   flushBuffer   
2BBC   CD 5A 0E               CALL   printStr   
2BBF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BCC   E1                     POP   hl   
2BCD   E5                     PUSH   hl   
2BCE   E5                     PUSH   hl   
2BCF   CD 5F 0F               CALL   run   
2BD2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BE1   CD C5 0D               CALL   flushBuffer   
2BE4   76                     HALT      
2BE5                EXPECTM_3090S96:      
2BE5   E1                     POP   HL   
2BE6                          ;*Macro unroll:  test "{{1}^}^", 1
2BE6   31 00 50               LD   SP,STACK   
2BE9   CD 8E 0E               CALL   coldInit   
2BEC   CD A1 4E               CALL   execStr   
2BEF   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
2BF7   CD C5 0D               CALL   flushBuffer   
2BFA   E1                     POP   HL   
2BFB   E5                     PUSH   HL   
2BFC   11 01 00               LD   DE,1   
2BFF   B7                     OR   A   
2C00   ED 52                  SBC   HL,DE   
2C02   7D                     LD   A,L   
2C03   B4                     OR   H   
2C04   CA 66 2C               JP   Z,expectM_3091S97   
2C07   CD 5A 0E               CALL   printStr   
2C0A   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2C18   CD 5A 0E               CALL   printStr   
2C1B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C2A   21 01 00               LD   hl,1   
2C2D   E5                     PUSH   hl   
2C2E   E5                     PUSH   hl   
2C2F   CD 5F 0F               CALL   run   
2C32   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C3A   CD C5 0D               CALL   flushBuffer   
2C3D   CD 5A 0E               CALL   printStr   
2C40   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C4D   E1                     POP   hl   
2C4E   E5                     PUSH   hl   
2C4F   E5                     PUSH   hl   
2C50   CD 5F 0F               CALL   run   
2C53   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C62   CD C5 0D               CALL   flushBuffer   
2C65   76                     HALT      
2C66                EXPECTM_3091S97:      
2C66   E1                     POP   HL   
2C67                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2C67   31 00 50               LD   SP,STACK   
2C6A   CD 8E 0E               CALL   coldInit   
2C6D   CD A1 4E               CALL   execStr   
2C70   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2C7B   CD C5 0D               CALL   flushBuffer   
2C7E   E1                     POP   HL   
2C7F   E5                     PUSH   HL   
2C80   11 01 00               LD   DE,1   
2C83   B7                     OR   A   
2C84   ED 52                  SBC   HL,DE   
2C86   7D                     LD   A,L   
2C87   B4                     OR   H   
2C88   CA ED 2C               JP   Z,expectM_3092S98   
2C8B   CD 5A 0E               CALL   printStr   
2C8E   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2C9F   CD 5A 0E               CALL   printStr   
2CA2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CB1   21 01 00               LD   hl,1   
2CB4   E5                     PUSH   hl   
2CB5   E5                     PUSH   hl   
2CB6   CD 5F 0F               CALL   run   
2CB9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2CC1   CD C5 0D               CALL   flushBuffer   
2CC4   CD 5A 0E               CALL   printStr   
2CC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CD4   E1                     POP   hl   
2CD5   E5                     PUSH   hl   
2CD6   E5                     PUSH   hl   
2CD7   CD 5F 0F               CALL   run   
2CDA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CE9   CD C5 0D               CALL   flushBuffer   
2CEC   76                     HALT      
2CED                EXPECTM_3092S98:      
2CED   E1                     POP   HL   
2CEE                          ;*Macro unroll:  test "5 /f{10} ?", 5
2CEE   31 00 50               LD   SP,STACK   
2CF1   CD 8E 0E               CALL   coldInit   
2CF4   CD A1 4E               CALL   execStr   
2CF7   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2D02   CD C5 0D               CALL   flushBuffer   
2D05   E1                     POP   HL   
2D06   E5                     PUSH   HL   
2D07   11 05 00               LD   DE,5   
2D0A   B7                     OR   A   
2D0B   ED 52                  SBC   HL,DE   
2D0D   7D                     LD   A,L   
2D0E   B4                     OR   H   
2D0F   CA 74 2D               JP   Z,expectM_3093S99   
2D12   CD 5A 0E               CALL   printStr   
2D15   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2D26   CD 5A 0E               CALL   printStr   
2D29   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D38   21 05 00               LD   hl,5   
2D3B   E5                     PUSH   hl   
2D3C   E5                     PUSH   hl   
2D3D   CD 5F 0F               CALL   run   
2D40   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D48   CD C5 0D               CALL   flushBuffer   
2D4B   CD 5A 0E               CALL   printStr   
2D4E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D5B   E1                     POP   hl   
2D5C   E5                     PUSH   hl   
2D5D   E5                     PUSH   hl   
2D5E   CD 5F 0F               CALL   run   
2D61   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D70   CD C5 0D               CALL   flushBuffer   
2D73   76                     HALT      
2D74                EXPECTM_3093S99:      
2D74   E1                     POP   HL   
2D75                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2D75   31 00 50               LD   SP,STACK   
2D78   CD 8E 0E               CALL   coldInit   
2D7B   CD A1 4E               CALL   execStr   
2D7E   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2D8B   CD C5 0D               CALL   flushBuffer   
2D8E   E1                     POP   HL   
2D8F   E5                     PUSH   HL   
2D90   11 0F 00               LD   DE,15   
2D93   B7                     OR   A   
2D94   ED 52                  SBC   HL,DE   
2D96   7D                     LD   A,L   
2D97   B4                     OR   H   
2D98   CA FF 2D               JP   Z,expectM_3094S100   
2D9B   CD 5A 0E               CALL   printStr   
2D9E   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2DB1   CD 5A 0E               CALL   printStr   
2DB4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DC3   21 0F 00               LD   hl,15   
2DC6   E5                     PUSH   hl   
2DC7   E5                     PUSH   hl   
2DC8   CD 5F 0F               CALL   run   
2DCB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2DD3   CD C5 0D               CALL   flushBuffer   
2DD6   CD 5A 0E               CALL   printStr   
2DD9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DE6   E1                     POP   hl   
2DE7   E5                     PUSH   hl   
2DE8   E5                     PUSH   hl   
2DE9   CD 5F 0F               CALL   run   
2DEC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DFB   CD C5 0D               CALL   flushBuffer   
2DFE   76                     HALT      
2DFF                EXPECTM_3094S100:      
2DFF   E1                     POP   HL   
2E00                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2E00   31 00 50               LD   SP,STACK   
2E03   CD 8E 0E               CALL   coldInit   
2E06   CD A1 4E               CALL   execStr   
2E09   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2E1B   CD C5 0D               CALL   flushBuffer   
2E1E   E1                     POP   HL   
2E1F   E5                     PUSH   HL   
2E20   11 15 00               LD   DE,21   
2E23   B7                     OR   A   
2E24   ED 52                  SBC   HL,DE   
2E26   7D                     LD   A,L   
2E27   B4                     OR   H   
2E28   CA 94 2E               JP   Z,expectM_3095S101   
2E2B   CD 5A 0E               CALL   printStr   
2E2E   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2E46   CD 5A 0E               CALL   printStr   
2E49   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E58   21 15 00               LD   hl,21   
2E5B   E5                     PUSH   hl   
2E5C   E5                     PUSH   hl   
2E5D   CD 5F 0F               CALL   run   
2E60   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E68   CD C5 0D               CALL   flushBuffer   
2E6B   CD 5A 0E               CALL   printStr   
2E6E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E7B   E1                     POP   hl   
2E7C   E5                     PUSH   hl   
2E7D   E5                     PUSH   hl   
2E7E   CD 5F 0F               CALL   run   
2E81   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E90   CD C5 0D               CALL   flushBuffer   
2E93   76                     HALT      
2E94                EXPECTM_3095S101:      
2E94   E1                     POP   HL   
2E95                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2E95   31 00 50               LD   SP,STACK   
2E98   CD 8E 0E               CALL   coldInit   
2E9B   CD A1 4E               CALL   execStr   
2E9E   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
2EB0   CD C5 0D               CALL   flushBuffer   
2EB3   E1                     POP   HL   
2EB4   E5                     PUSH   HL   
2EB5   11 0B 00               LD   DE,11   
2EB8   B7                     OR   A   
2EB9   ED 52                  SBC   HL,DE   
2EBB   7D                     LD   A,L   
2EBC   B4                     OR   H   
2EBD   CA 29 2F               JP   Z,expectM_3096S102   
2EC0   CD 5A 0E               CALL   printStr   
2EC3   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2EDB   CD 5A 0E               CALL   printStr   
2EDE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EED   21 0B 00               LD   hl,11   
2EF0   E5                     PUSH   hl   
2EF1   E5                     PUSH   hl   
2EF2   CD 5F 0F               CALL   run   
2EF5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2EFD   CD C5 0D               CALL   flushBuffer   
2F00   CD 5A 0E               CALL   printStr   
2F03   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F10   E1                     POP   hl   
2F11   E5                     PUSH   hl   
2F12   E5                     PUSH   hl   
2F13   CD 5F 0F               CALL   run   
2F16   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F25   CD C5 0D               CALL   flushBuffer   
2F28   76                     HALT      
2F29                EXPECTM_3096S102:      
2F29   E1                     POP   HL   
2F2A                          ;*Macro unroll:  test "\\{2}^", 2
2F2A   31 00 50               LD   SP,STACK   
2F2D   CD 8E 0E               CALL   coldInit   
2F30   CD A1 4E               CALL   execStr   
2F33   5C 7B 32 7D 5E 00      DB   "\\{2}^",0   
2F39   CD C5 0D               CALL   flushBuffer   
2F3C   E1                     POP   HL   
2F3D   E5                     PUSH   HL   
2F3E   11 02 00               LD   DE,2   
2F41   B7                     OR   A   
2F42   ED 52                  SBC   HL,DE   
2F44   7D                     LD   A,L   
2F45   B4                     OR   H   
2F46   CA A6 2F               JP   Z,expectM_3097S103   
2F49   CD 5A 0E               CALL   printStr   
2F4C   43 6F 64 65 3A 20 5C 7B 32 7D 5E 00 .CSTR   "Code: ","\\{2}^"   
2F58   CD 5A 0E               CALL   printStr   
2F5B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F6A   21 02 00               LD   hl,2   
2F6D   E5                     PUSH   hl   
2F6E   E5                     PUSH   hl   
2F6F   CD 5F 0F               CALL   run   
2F72   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F7A   CD C5 0D               CALL   flushBuffer   
2F7D   CD 5A 0E               CALL   printStr   
2F80   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F8D   E1                     POP   hl   
2F8E   E5                     PUSH   hl   
2F8F   E5                     PUSH   hl   
2F90   CD 5F 0F               CALL   run   
2F93   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2FA2   CD C5 0D               CALL   flushBuffer   
2FA5   76                     HALT      
2FA6                EXPECTM_3097S103:      
2FA6   E1                     POP   HL   
2FA7                          ;*Macro unroll:  test "\\a{2}^", 2
2FA7   31 00 50               LD   SP,STACK   
2FAA   CD 8E 0E               CALL   coldInit   
2FAD   CD A1 4E               CALL   execStr   
2FB0   5C 61 7B 32 7D 5E 00   DB   "\\a{2}^",0   
2FB7   CD C5 0D               CALL   flushBuffer   
2FBA   E1                     POP   HL   
2FBB   E5                     PUSH   HL   
2FBC   11 02 00               LD   DE,2   
2FBF   B7                     OR   A   
2FC0   ED 52                  SBC   HL,DE   
2FC2   7D                     LD   A,L   
2FC3   B4                     OR   H   
2FC4   CA 25 30               JP   Z,expectM_3098S104   
2FC7   CD 5A 0E               CALL   printStr   
2FCA   43 6F 64 65 3A 20 5C 61 7B 32 7D 5E 00 .CSTR   "Code: ","\\a{2}^"   
2FD7   CD 5A 0E               CALL   printStr   
2FDA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FE9   21 02 00               LD   hl,2   
2FEC   E5                     PUSH   hl   
2FED   E5                     PUSH   hl   
2FEE   CD 5F 0F               CALL   run   
2FF1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2FF9   CD C5 0D               CALL   flushBuffer   
2FFC   CD 5A 0E               CALL   printStr   
2FFF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
300C   E1                     POP   hl   
300D   E5                     PUSH   hl   
300E   E5                     PUSH   hl   
300F   CD 5F 0F               CALL   run   
3012   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3021   CD C5 0D               CALL   flushBuffer   
3024   76                     HALT      
3025                EXPECTM_3098S104:      
3025   E1                     POP   HL   
3026                          ;*Macro unroll:  test "5 \\a{%a}^", 5
3026   31 00 50               LD   SP,STACK   
3029   CD 8E 0E               CALL   coldInit   
302C   CD A1 4E               CALL   execStr   
302F   35 20 5C 61 7B 25 61 7D 5E 00 DB   "5 \\a{%a}^",0   
3039   CD C5 0D               CALL   flushBuffer   
303C   E1                     POP   HL   
303D   E5                     PUSH   HL   
303E   11 05 00               LD   DE,5   
3041   B7                     OR   A   
3042   ED 52                  SBC   HL,DE   
3044   7D                     LD   A,L   
3045   B4                     OR   H   
3046   CA AA 30               JP   Z,expectM_3099S105   
3049   CD 5A 0E               CALL   printStr   
304C   43 6F 64 65 3A 20 35 20 5C 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a{%a}^"   
305C   CD 5A 0E               CALL   printStr   
305F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
306E   21 05 00               LD   hl,5   
3071   E5                     PUSH   hl   
3072   E5                     PUSH   hl   
3073   CD 5F 0F               CALL   run   
3076   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
307E   CD C5 0D               CALL   flushBuffer   
3081   CD 5A 0E               CALL   printStr   
3084   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3091   E1                     POP   hl   
3092   E5                     PUSH   hl   
3093   E5                     PUSH   hl   
3094   CD 5F 0F               CALL   run   
3097   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
30A6   CD C5 0D               CALL   flushBuffer   
30A9   76                     HALT      
30AA                EXPECTM_3099S105:      
30AA   E1                     POP   HL   
30AB                          ;*Macro unroll:  test "5 \\a:b{%a}^", 5
30AB   31 00 50               LD   SP,STACK   
30AE   CD 8E 0E               CALL   coldInit   
30B1   CD A1 4E               CALL   execStr   
30B4   35 20 5C 61 3A 62 7B 25 61 7D 5E 00 DB   "5 \\a:b{%a}^",0   
30C0   CD C5 0D               CALL   flushBuffer   
30C3   E1                     POP   HL   
30C4   E5                     PUSH   HL   
30C5   11 05 00               LD   DE,5   
30C8   B7                     OR   A   
30C9   ED 52                  SBC   HL,DE   
30CB   7D                     LD   A,L   
30CC   B4                     OR   H   
30CD   CA 33 31               JP   Z,expectM_3100S106   
30D0   CD 5A 0E               CALL   printStr   
30D3   43 6F 64 65 3A 20 35 20 5C 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a:b{%a}^"   
30E5   CD 5A 0E               CALL   printStr   
30E8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30F7   21 05 00               LD   hl,5   
30FA   E5                     PUSH   hl   
30FB   E5                     PUSH   hl   
30FC   CD 5F 0F               CALL   run   
30FF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3107   CD C5 0D               CALL   flushBuffer   
310A   CD 5A 0E               CALL   printStr   
310D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
311A   E1                     POP   hl   
311B   E5                     PUSH   hl   
311C   E5                     PUSH   hl   
311D   CD 5F 0F               CALL   run   
3120   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
312F   CD C5 0D               CALL   flushBuffer   
3132   76                     HALT      
3133                EXPECTM_3100S106:      
3133   E1                     POP   HL   
3134                          ;*Macro unroll:  test "\\a{{2}^}^", 2
3134   31 00 50               LD   SP,STACK   
3137   CD 8E 0E               CALL   coldInit   
313A   CD A1 4E               CALL   execStr   
313D   5C 61 7B 7B 32 7D 5E 7D 5E 00 DB   "\\a{{2}^}^",0   
3147   CD C5 0D               CALL   flushBuffer   
314A   E1                     POP   HL   
314B   E5                     PUSH   HL   
314C   11 02 00               LD   DE,2   
314F   B7                     OR   A   
3150   ED 52                  SBC   HL,DE   
3152   7D                     LD   A,L   
3153   B4                     OR   H   
3154   CA B8 31               JP   Z,expectM_3101S107   
3157   CD 5A 0E               CALL   printStr   
315A   43 6F 64 65 3A 20 5C 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ","\\a{{2}^}^"   
316A   CD 5A 0E               CALL   printStr   
316D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
317C   21 02 00               LD   hl,2   
317F   E5                     PUSH   hl   
3180   E5                     PUSH   hl   
3181   CD 5F 0F               CALL   run   
3184   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
318C   CD C5 0D               CALL   flushBuffer   
318F   CD 5A 0E               CALL   printStr   
3192   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
319F   E1                     POP   hl   
31A0   E5                     PUSH   hl   
31A1   E5                     PUSH   hl   
31A2   CD 5F 0F               CALL   run   
31A5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
31B4   CD C5 0D               CALL   flushBuffer   
31B7   76                     HALT      
31B8                EXPECTM_3101S107:      
31B8   E1                     POP   HL   
31B9                          ;*Macro unroll:  test "1 5 \\a{{%a}^}^", 5
31B9   31 00 50               LD   SP,STACK   
31BC   CD 8E 0E               CALL   coldInit   
31BF   CD A1 4E               CALL   execStr   
31C2   31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a}^}^",0   
31D1   CD C5 0D               CALL   flushBuffer   
31D4   E1                     POP   HL   
31D5   E5                     PUSH   HL   
31D6   11 05 00               LD   DE,5   
31D9   B7                     OR   A   
31DA   ED 52                  SBC   HL,DE   
31DC   7D                     LD   A,L   
31DD   B4                     OR   H   
31DE   CA 47 32               JP   Z,expectM_3102S108   
31E1   CD 5A 0E               CALL   printStr   
31E4   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a}^}^"   
31F9   CD 5A 0E               CALL   printStr   
31FC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
320B   21 05 00               LD   hl,5   
320E   E5                     PUSH   hl   
320F   E5                     PUSH   hl   
3210   CD 5F 0F               CALL   run   
3213   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
321B   CD C5 0D               CALL   flushBuffer   
321E   CD 5A 0E               CALL   printStr   
3221   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
322E   E1                     POP   hl   
322F   E5                     PUSH   hl   
3230   E5                     PUSH   hl   
3231   CD 5F 0F               CALL   run   
3234   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3243   CD C5 0D               CALL   flushBuffer   
3246   76                     HALT      
3247                EXPECTM_3102S108:      
3247   E1                     POP   HL   
3248                          ;*Macro unroll:  test "1 5 \\ab{{%a}^}^", 1
3248   31 00 50               LD   SP,STACK   
324B   CD 8E 0E               CALL   coldInit   
324E   CD A1 4E               CALL   execStr   
3251   31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a}^}^",0   
3261   CD C5 0D               CALL   flushBuffer   
3264   E1                     POP   HL   
3265   E5                     PUSH   HL   
3266   11 01 00               LD   DE,1   
3269   B7                     OR   A   
326A   ED 52                  SBC   HL,DE   
326C   7D                     LD   A,L   
326D   B4                     OR   H   
326E   CA D8 32               JP   Z,expectM_3103S109   
3271   CD 5A 0E               CALL   printStr   
3274   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a}^}^"   
328A   CD 5A 0E               CALL   printStr   
328D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
329C   21 01 00               LD   hl,1   
329F   E5                     PUSH   hl   
32A0   E5                     PUSH   hl   
32A1   CD 5F 0F               CALL   run   
32A4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
32AC   CD C5 0D               CALL   flushBuffer   
32AF   CD 5A 0E               CALL   printStr   
32B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32BF   E1                     POP   hl   
32C0   E5                     PUSH   hl   
32C1   E5                     PUSH   hl   
32C2   CD 5F 0F               CALL   run   
32C5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
32D4   CD C5 0D               CALL   flushBuffer   
32D7   76                     HALT      
32D8                EXPECTM_3103S109:      
32D8   E1                     POP   HL   
32D9                          ;*Macro unroll:  test "1 5 \\a{{%a 2 +}^}^", 7
32D9   31 00 50               LD   SP,STACK   
32DC   CD 8E 0E               CALL   coldInit   
32DF   CD A1 4E               CALL   execStr   
32E2   31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a 2 +}^}^",0   
32F5   CD C5 0D               CALL   flushBuffer   
32F8   E1                     POP   HL   
32F9   E5                     PUSH   HL   
32FA   11 07 00               LD   DE,7   
32FD   B7                     OR   A   
32FE   ED 52                  SBC   HL,DE   
3300   7D                     LD   A,L   
3301   B4                     OR   H   
3302   CA 6F 33               JP   Z,expectM_3104S110   
3305   CD 5A 0E               CALL   printStr   
3308   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a 2 +}^}^"   
3321   CD 5A 0E               CALL   printStr   
3324   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3333   21 07 00               LD   hl,7   
3336   E5                     PUSH   hl   
3337   E5                     PUSH   hl   
3338   CD 5F 0F               CALL   run   
333B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3343   CD C5 0D               CALL   flushBuffer   
3346   CD 5A 0E               CALL   printStr   
3349   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3356   E1                     POP   hl   
3357   E5                     PUSH   hl   
3358   E5                     PUSH   hl   
3359   CD 5F 0F               CALL   run   
335C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
336B   CD C5 0D               CALL   flushBuffer   
336E   76                     HALT      
336F                EXPECTM_3104S110:      
336F   E1                     POP   HL   
3370                          ;*Macro unroll:  test "1 5 \\ab{{%a %b +}^}^", 6
3370   31 00 50               LD   SP,STACK   
3373   CD 8E 0E               CALL   coldInit   
3376   CD A1 4E               CALL   execStr   
3379   31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a %b +}^}^",0   
338E   CD C5 0D               CALL   flushBuffer   
3391   E1                     POP   HL   
3392   E5                     PUSH   HL   
3393   11 06 00               LD   DE,6   
3396   B7                     OR   A   
3397   ED 52                  SBC   HL,DE   
3399   7D                     LD   A,L   
339A   B4                     OR   H   
339B   CA 0A 34               JP   Z,expectM_3105S111   
339E   CD 5A 0E               CALL   printStr   
33A1   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a %b +}^}^"   
33BC   CD 5A 0E               CALL   printStr   
33BF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33CE   21 06 00               LD   hl,6   
33D1   E5                     PUSH   hl   
33D2   E5                     PUSH   hl   
33D3   CD 5F 0F               CALL   run   
33D6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
33DE   CD C5 0D               CALL   flushBuffer   
33E1   CD 5A 0E               CALL   printStr   
33E4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33F1   E1                     POP   hl   
33F2   E5                     PUSH   hl   
33F3   E5                     PUSH   hl   
33F4   CD 5F 0F               CALL   run   
33F7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3406   CD C5 0D               CALL   flushBuffer   
3409   76                     HALT      
340A                EXPECTM_3105S111:      
340A   E1                     POP   HL   
340B                          ;*Macro unroll:  test "\\a{2} x= 1 x^", 2
340B   31 00 50               LD   SP,STACK   
340E   CD 8E 0E               CALL   coldInit   
3411   CD A1 4E               CALL   execStr   
3414   5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a{2} x= 1 x^",0   
3422   CD C5 0D               CALL   flushBuffer   
3425   E1                     POP   HL   
3426   E5                     PUSH   HL   
3427   11 02 00               LD   DE,2   
342A   B7                     OR   A   
342B   ED 52                  SBC   HL,DE   
342D   7D                     LD   A,L   
342E   B4                     OR   H   
342F   CA 97 34               JP   Z,expectM_3106S112   
3432   CD 5A 0E               CALL   printStr   
3435   43 6F 64 65 3A 20 5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{2} x= 1 x^"   
3449   CD 5A 0E               CALL   printStr   
344C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
345B   21 02 00               LD   hl,2   
345E   E5                     PUSH   hl   
345F   E5                     PUSH   hl   
3460   CD 5F 0F               CALL   run   
3463   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
346B   CD C5 0D               CALL   flushBuffer   
346E   CD 5A 0E               CALL   printStr   
3471   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
347E   E1                     POP   hl   
347F   E5                     PUSH   hl   
3480   E5                     PUSH   hl   
3481   CD 5F 0F               CALL   run   
3484   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3493   CD C5 0D               CALL   flushBuffer   
3496   76                     HALT      
3497                EXPECTM_3106S112:      
3497   E1                     POP   HL   
3498                          ;*Macro unroll:  test "\\a{%a} x= 0 1 x^", 1
3498   31 00 50               LD   SP,STACK   
349B   CD 8E 0E               CALL   coldInit   
349E   CD A1 4E               CALL   execStr   
34A1   5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   "\\a{%a} x= 0 1 x^",0   
34B2   CD C5 0D               CALL   flushBuffer   
34B5   E1                     POP   HL   
34B6   E5                     PUSH   HL   
34B7   11 01 00               LD   DE,1   
34BA   B7                     OR   A   
34BB   ED 52                  SBC   HL,DE   
34BD   7D                     LD   A,L   
34BE   B4                     OR   H   
34BF   CA 2A 35               JP   Z,expectM_3107S113   
34C2   CD 5A 0E               CALL   printStr   
34C5   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{%a} x= 0 1 x^"   
34DC   CD 5A 0E               CALL   printStr   
34DF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34EE   21 01 00               LD   hl,1   
34F1   E5                     PUSH   hl   
34F2   E5                     PUSH   hl   
34F3   CD 5F 0F               CALL   run   
34F6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
34FE   CD C5 0D               CALL   flushBuffer   
3501   CD 5A 0E               CALL   printStr   
3504   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3511   E1                     POP   hl   
3512   E5                     PUSH   hl   
3513   E5                     PUSH   hl   
3514   CD 5F 0F               CALL   run   
3517   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3526   CD C5 0D               CALL   flushBuffer   
3529   76                     HALT      
352A                EXPECTM_3107S113:      
352A   E1                     POP   HL   
352B                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
352B   31 00 50               LD   SP,STACK   
352E   CD 8E 0E               CALL   coldInit   
3531   CD A1 4E               CALL   execStr   
3534   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3546   CD C5 0D               CALL   flushBuffer   
3549   E1                     POP   HL   
354A   E5                     PUSH   HL   
354B   11 02 00               LD   DE,2   
354E   B7                     OR   A   
354F   ED 52                  SBC   HL,DE   
3551   7D                     LD   A,L   
3552   B4                     OR   H   
3553   CA BF 35               JP   Z,expectM_3108S114   
3556   CD 5A 0E               CALL   printStr   
3559   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
3571   CD 5A 0E               CALL   printStr   
3574   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3583   21 02 00               LD   hl,2   
3586   E5                     PUSH   hl   
3587   E5                     PUSH   hl   
3588   CD 5F 0F               CALL   run   
358B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3593   CD C5 0D               CALL   flushBuffer   
3596   CD 5A 0E               CALL   printStr   
3599   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35A6   E1                     POP   hl   
35A7   E5                     PUSH   hl   
35A8   E5                     PUSH   hl   
35A9   CD 5F 0F               CALL   run   
35AC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
35BB   CD C5 0D               CALL   flushBuffer   
35BE   76                     HALT      
35BF                EXPECTM_3108S114:      
35BF   E1                     POP   HL   
35C0                          ;*Macro unroll:  test "\\a:b{%a} x= 1 2 x^", 2
35C0   31 00 50               LD   SP,STACK   
35C3   CD 8E 0E               CALL   coldInit   
35C6   CD A1 4E               CALL   execStr   
35C9   5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\a:b{%a} x= 1 2 x^",0   
35DC   CD C5 0D               CALL   flushBuffer   
35DF   E1                     POP   HL   
35E0   E5                     PUSH   HL   
35E1   11 02 00               LD   DE,2   
35E4   B7                     OR   A   
35E5   ED 52                  SBC   HL,DE   
35E7   7D                     LD   A,L   
35E8   B4                     OR   H   
35E9   CA 56 36               JP   Z,expectM_3109S115   
35EC   CD 5A 0E               CALL   printStr   
35EF   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a} x= 1 2 x^"   
3608   CD 5A 0E               CALL   printStr   
360B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
361A   21 02 00               LD   hl,2   
361D   E5                     PUSH   hl   
361E   E5                     PUSH   hl   
361F   CD 5F 0F               CALL   run   
3622   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
362A   CD C5 0D               CALL   flushBuffer   
362D   CD 5A 0E               CALL   printStr   
3630   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
363D   E1                     POP   hl   
363E   E5                     PUSH   hl   
363F   E5                     PUSH   hl   
3640   CD 5F 0F               CALL   run   
3643   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3652   CD C5 0D               CALL   flushBuffer   
3655   76                     HALT      
3656                EXPECTM_3109S115:      
3656   E1                     POP   HL   
3657                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3657   31 00 50               LD   SP,STACK   
365A   CD 8E 0E               CALL   coldInit   
365D   CD A1 4E               CALL   execStr   
3660   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3672   CD C5 0D               CALL   flushBuffer   
3675   E1                     POP   HL   
3676   E5                     PUSH   HL   
3677   11 02 00               LD   DE,2   
367A   B7                     OR   A   
367B   ED 52                  SBC   HL,DE   
367D   7D                     LD   A,L   
367E   B4                     OR   H   
367F   CA EB 36               JP   Z,expectM_3110S116   
3682   CD 5A 0E               CALL   printStr   
3685   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
369D   CD 5A 0E               CALL   printStr   
36A0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36AF   21 02 00               LD   hl,2   
36B2   E5                     PUSH   hl   
36B3   E5                     PUSH   hl   
36B4   CD 5F 0F               CALL   run   
36B7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
36BF   CD C5 0D               CALL   flushBuffer   
36C2   CD 5A 0E               CALL   printStr   
36C5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36D2   E1                     POP   hl   
36D3   E5                     PUSH   hl   
36D4   E5                     PUSH   hl   
36D5   CD 5F 0F               CALL   run   
36D8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
36E7   CD C5 0D               CALL   flushBuffer   
36EA   76                     HALT      
36EB                EXPECTM_3110S116:      
36EB   E1                     POP   HL   
36EC                          ;*Macro unroll:  test "\\ab{%b %a} x= 10 15 x^ -", 5
36EC   31 00 50               LD   SP,STACK   
36EF   CD 8E 0E               CALL   coldInit   
36F2   CD A1 4E               CALL   execStr   
36F5   5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   "\\ab{%b %a} x= 10 15 x^ -",0   
370E   CD C5 0D               CALL   flushBuffer   
3711   E1                     POP   HL   
3712   E5                     PUSH   HL   
3713   11 05 00               LD   DE,5   
3716   B7                     OR   A   
3717   ED 52                  SBC   HL,DE   
3719   7D                     LD   A,L   
371A   B4                     OR   H   
371B   CA 8E 37               JP   Z,expectM_3111S117   
371E   CD 5A 0E               CALL   printStr   
3721   43 6F 64 65 3A 20 5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","\\ab{%b %a} x= 10 15 x^ -"   
3740   CD 5A 0E               CALL   printStr   
3743   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3752   21 05 00               LD   hl,5   
3755   E5                     PUSH   hl   
3756   E5                     PUSH   hl   
3757   CD 5F 0F               CALL   run   
375A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3762   CD C5 0D               CALL   flushBuffer   
3765   CD 5A 0E               CALL   printStr   
3768   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3775   E1                     POP   hl   
3776   E5                     PUSH   hl   
3777   E5                     PUSH   hl   
3778   CD 5F 0F               CALL   run   
377B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
378A   CD C5 0D               CALL   flushBuffer   
378D   76                     HALT      
378E                EXPECTM_3111S117:      
378E   E1                     POP   HL   
378F                          ;*Macro unroll:  test "\\a:b{2} x= 1 x^", 2
378F   31 00 50               LD   SP,STACK   
3792   CD 8E 0E               CALL   coldInit   
3795   CD A1 4E               CALL   execStr   
3798   5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a:b{2} x= 1 x^",0   
37A8   CD C5 0D               CALL   flushBuffer   
37AB   E1                     POP   HL   
37AC   E5                     PUSH   HL   
37AD   11 02 00               LD   DE,2   
37B0   B7                     OR   A   
37B1   ED 52                  SBC   HL,DE   
37B3   7D                     LD   A,L   
37B4   B4                     OR   H   
37B5   CA 1F 38               JP   Z,expectM_3112S118   
37B8   CD 5A 0E               CALL   printStr   
37BB   43 6F 64 65 3A 20 5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a:b{2} x= 1 x^"   
37D1   CD 5A 0E               CALL   printStr   
37D4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37E3   21 02 00               LD   hl,2   
37E6   E5                     PUSH   hl   
37E7   E5                     PUSH   hl   
37E8   CD 5F 0F               CALL   run   
37EB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
37F3   CD C5 0D               CALL   flushBuffer   
37F6   CD 5A 0E               CALL   printStr   
37F9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3806   E1                     POP   hl   
3807   E5                     PUSH   hl   
3808   E5                     PUSH   hl   
3809   CD 5F 0F               CALL   run   
380C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
381B   CD C5 0D               CALL   flushBuffer   
381E   76                     HALT      
381F                EXPECTM_3112S118:      
381F   E1                     POP   HL   
3820                          ;*Macro unroll:  test "\\:b{100 %b = %b} x= x^", 100
3820   31 00 50               LD   SP,STACK   
3823   CD 8E 0E               CALL   coldInit   
3826   CD A1 4E               CALL   execStr   
3829   5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "\\:b{100 %b = %b} x= x^",0   
3840   CD C5 0D               CALL   flushBuffer   
3843   E1                     POP   HL   
3844   E5                     PUSH   HL   
3845   11 64 00               LD   DE,100   
3848   B7                     OR   A   
3849   ED 52                  SBC   HL,DE   
384B   7D                     LD   A,L   
384C   B4                     OR   H   
384D   CA BE 38               JP   Z,expectM_3113S119   
3850   CD 5A 0E               CALL   printStr   
3853   43 6F 64 65 3A 20 5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","\\:b{100 %b = %b} x= x^"   
3870   CD 5A 0E               CALL   printStr   
3873   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3882   21 64 00               LD   hl,100   
3885   E5                     PUSH   hl   
3886   E5                     PUSH   hl   
3887   CD 5F 0F               CALL   run   
388A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3892   CD C5 0D               CALL   flushBuffer   
3895   CD 5A 0E               CALL   printStr   
3898   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38A5   E1                     POP   hl   
38A6   E5                     PUSH   hl   
38A7   E5                     PUSH   hl   
38A8   CD 5F 0F               CALL   run   
38AB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
38BA   CD C5 0D               CALL   flushBuffer   
38BD   76                     HALT      
38BE                EXPECTM_3113S119:      
38BE   E1                     POP   HL   
38BF                          ;*Macro unroll:  test "\\a:b{1 %b = %b} x= 2 x^", 1
38BF   31 00 50               LD   SP,STACK   
38C2   CD 8E 0E               CALL   coldInit   
38C5   CD A1 4E               CALL   execStr   
38C8   5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{1 %b = %b} x= 2 x^",0   
38E0   CD C5 0D               CALL   flushBuffer   
38E3   E1                     POP   HL   
38E4   E5                     PUSH   HL   
38E5   11 01 00               LD   DE,1   
38E8   B7                     OR   A   
38E9   ED 52                  SBC   HL,DE   
38EB   7D                     LD   A,L   
38EC   B4                     OR   H   
38ED   CA 5F 39               JP   Z,expectM_3114S120   
38F0   CD 5A 0E               CALL   printStr   
38F3   43 6F 64 65 3A 20 5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{1 %b = %b} x= 2 x^"   
3911   CD 5A 0E               CALL   printStr   
3914   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3923   21 01 00               LD   hl,1   
3926   E5                     PUSH   hl   
3927   E5                     PUSH   hl   
3928   CD 5F 0F               CALL   run   
392B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3933   CD C5 0D               CALL   flushBuffer   
3936   CD 5A 0E               CALL   printStr   
3939   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3946   E1                     POP   hl   
3947   E5                     PUSH   hl   
3948   E5                     PUSH   hl   
3949   CD 5F 0F               CALL   run   
394C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
395B   CD C5 0D               CALL   flushBuffer   
395E   76                     HALT      
395F                EXPECTM_3114S120:      
395F   E1                     POP   HL   
3960                          ;*Macro unroll:  test "\\a:b{%a %b = %b} x= 2 x^", 2
3960   31 00 50               LD   SP,STACK   
3963   CD 8E 0E               CALL   coldInit   
3966   CD A1 4E               CALL   execStr   
3969   5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{%a %b = %b} x= 2 x^",0   
3982   CD C5 0D               CALL   flushBuffer   
3985   E1                     POP   HL   
3986   E5                     PUSH   HL   
3987   11 02 00               LD   DE,2   
398A   B7                     OR   A   
398B   ED 52                  SBC   HL,DE   
398D   7D                     LD   A,L   
398E   B4                     OR   H   
398F   CA 02 3A               JP   Z,expectM_3115S121   
3992   CD 5A 0E               CALL   printStr   
3995   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a %b = %b} x= 2 x^"   
39B4   CD 5A 0E               CALL   printStr   
39B7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39C6   21 02 00               LD   hl,2   
39C9   E5                     PUSH   hl   
39CA   E5                     PUSH   hl   
39CB   CD 5F 0F               CALL   run   
39CE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
39D6   CD C5 0D               CALL   flushBuffer   
39D9   CD 5A 0E               CALL   printStr   
39DC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39E9   E1                     POP   hl   
39EA   E5                     PUSH   hl   
39EB   E5                     PUSH   hl   
39EC   CD 5F 0F               CALL   run   
39EF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
39FE   CD C5 0D               CALL   flushBuffer   
3A01   76                     HALT      
3A02                EXPECTM_3115S121:      
3A02   E1                     POP   HL   
3A03                          ;*Macro unroll:  test "1 10 20 \\ab{/t{%a}{%b} ??}^ +", 11
3A03   31 00 50               LD   SP,STACK   
3A06   CD 8E 0E               CALL   coldInit   
3A09   CD A1 4E               CALL   execStr   
3A0C   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/t{%a}{%b} ??}^ +",0   
3A2A   CD C5 0D               CALL   flushBuffer   
3A2D   E1                     POP   HL   
3A2E   E5                     PUSH   HL   
3A2F   11 0B 00               LD   DE,11   
3A32   B7                     OR   A   
3A33   ED 52                  SBC   HL,DE   
3A35   7D                     LD   A,L   
3A36   B4                     OR   H   
3A37   CA AF 3A               JP   Z,expectM_3116S122   
3A3A   CD 5A 0E               CALL   printStr   
3A3D   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/t{%a}{%b} ??}^ +"   
3A61   CD 5A 0E               CALL   printStr   
3A64   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A73   21 0B 00               LD   hl,11   
3A76   E5                     PUSH   hl   
3A77   E5                     PUSH   hl   
3A78   CD 5F 0F               CALL   run   
3A7B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A83   CD C5 0D               CALL   flushBuffer   
3A86   CD 5A 0E               CALL   printStr   
3A89   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A96   E1                     POP   hl   
3A97   E5                     PUSH   hl   
3A98   E5                     PUSH   hl   
3A99   CD 5F 0F               CALL   run   
3A9C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3AAB   CD C5 0D               CALL   flushBuffer   
3AAE   76                     HALT      
3AAF                EXPECTM_3116S122:      
3AAF   E1                     POP   HL   
3AB0                          ;*Macro unroll:  test "1 10 20 \\ab{/f{%a}{%b} ??}^ +", 21
3AB0   31 00 50               LD   SP,STACK   
3AB3   CD 8E 0E               CALL   coldInit   
3AB6   CD A1 4E               CALL   execStr   
3AB9   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/f{%a}{%b} ??}^ +",0   
3AD7   CD C5 0D               CALL   flushBuffer   
3ADA   E1                     POP   HL   
3ADB   E5                     PUSH   HL   
3ADC   11 15 00               LD   DE,21   
3ADF   B7                     OR   A   
3AE0   ED 52                  SBC   HL,DE   
3AE2   7D                     LD   A,L   
3AE3   B4                     OR   H   
3AE4   CA 5C 3B               JP   Z,expectM_3117S123   
3AE7   CD 5A 0E               CALL   printStr   
3AEA   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/f{%a}{%b} ??}^ +"   
3B0E   CD 5A 0E               CALL   printStr   
3B11   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B20   21 15 00               LD   hl,21   
3B23   E5                     PUSH   hl   
3B24   E5                     PUSH   hl   
3B25   CD 5F 0F               CALL   run   
3B28   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B30   CD C5 0D               CALL   flushBuffer   
3B33   CD 5A 0E               CALL   printStr   
3B36   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B43   E1                     POP   hl   
3B44   E5                     PUSH   hl   
3B45   E5                     PUSH   hl   
3B46   CD 5F 0F               CALL   run   
3B49   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B58   CD C5 0D               CALL   flushBuffer   
3B5B   76                     HALT      
3B5C                EXPECTM_3117S123:      
3B5C   E1                     POP   HL   
3B5D                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3B5D   31 00 50               LD   SP,STACK   
3B60   CD 8E 0E               CALL   coldInit   
3B63   CD A1 4E               CALL   execStr   
3B66   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
3B74   CD C5 0D               CALL   flushBuffer   
3B77   E1                     POP   HL   
3B78   E5                     PUSH   HL   
3B79   11 14 00               LD   DE,20   
3B7C   B7                     OR   A   
3B7D   ED 52                  SBC   HL,DE   
3B7F   7D                     LD   A,L   
3B80   B4                     OR   H   
3B81   CA E9 3B               JP   Z,expectM_3118S124   
3B84   CD 5A 0E               CALL   printStr   
3B87   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
3B9B   CD 5A 0E               CALL   printStr   
3B9E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BAD   21 14 00               LD   hl,20   
3BB0   E5                     PUSH   hl   
3BB1   E5                     PUSH   hl   
3BB2   CD 5F 0F               CALL   run   
3BB5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3BBD   CD C5 0D               CALL   flushBuffer   
3BC0   CD 5A 0E               CALL   printStr   
3BC3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BD0   E1                     POP   hl   
3BD1   E5                     PUSH   hl   
3BD2   E5                     PUSH   hl   
3BD3   CD 5F 0F               CALL   run   
3BD6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3BE5   CD C5 0D               CALL   flushBuffer   
3BE8   76                     HALT      
3BE9                EXPECTM_3118S124:      
3BE9   E1                     POP   HL   
3BEA                          ;*Macro unroll:  test "[10 20 30 40] /as", 4
3BEA   31 00 50               LD   SP,STACK   
3BED   CD 8E 0E               CALL   coldInit   
3BF0   CD A1 4E               CALL   execStr   
3BF3   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 DB   "[10 20 30 40] /as",0   
3C05   CD C5 0D               CALL   flushBuffer   
3C08   E1                     POP   HL   
3C09   E5                     PUSH   HL   
3C0A   11 04 00               LD   DE,4   
3C0D   B7                     OR   A   
3C0E   ED 52                  SBC   HL,DE   
3C10   7D                     LD   A,L   
3C11   B4                     OR   H   
3C12   CA 7E 3C               JP   Z,expectM_3119S125   
3C15   CD 5A 0E               CALL   printStr   
3C18   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 .CSTR   "Code: ","[10 20 30 40] /as"   
3C30   CD 5A 0E               CALL   printStr   
3C33   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C42   21 04 00               LD   hl,4   
3C45   E5                     PUSH   hl   
3C46   E5                     PUSH   hl   
3C47   CD 5F 0F               CALL   run   
3C4A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C52   CD C5 0D               CALL   flushBuffer   
3C55   CD 5A 0E               CALL   printStr   
3C58   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C65   E1                     POP   hl   
3C66   E5                     PUSH   hl   
3C67   E5                     PUSH   hl   
3C68   CD 5F 0F               CALL   run   
3C6B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C7A   CD C5 0D               CALL   flushBuffer   
3C7D   76                     HALT      
3C7E                EXPECTM_3119S125:      
3C7E   E1                     POP   HL   
3C7F                          ;*Macro unroll:  test "/b [1 2 3] 1#", 2
3C7F   31 00 50               LD   SP,STACK   
3C82   CD 8E 0E               CALL   coldInit   
3C85   CD A1 4E               CALL   execStr   
3C88   2F 62 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/b [1 2 3] 1#",0   
3C96   CD C5 0D               CALL   flushBuffer   
3C99   E1                     POP   HL   
3C9A   E5                     PUSH   HL   
3C9B   11 02 00               LD   DE,2   
3C9E   B7                     OR   A   
3C9F   ED 52                  SBC   HL,DE   
3CA1   7D                     LD   A,L   
3CA2   B4                     OR   H   
3CA3   CA 0B 3D               JP   Z,expectM_3120S126   
3CA6   CD 5A 0E               CALL   printStr   
3CA9   43 6F 64 65 3A 20 2F 62 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/b [1 2 3] 1#"   
3CBD   CD 5A 0E               CALL   printStr   
3CC0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CCF   21 02 00               LD   hl,2   
3CD2   E5                     PUSH   hl   
3CD3   E5                     PUSH   hl   
3CD4   CD 5F 0F               CALL   run   
3CD7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3CDF   CD C5 0D               CALL   flushBuffer   
3CE2   CD 5A 0E               CALL   printStr   
3CE5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CF2   E1                     POP   hl   
3CF3   E5                     PUSH   hl   
3CF4   E5                     PUSH   hl   
3CF5   CD 5F 0F               CALL   run   
3CF8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D07   CD C5 0D               CALL   flushBuffer   
3D0A   76                     HALT      
3D0B                EXPECTM_3120S126:      
3D0B   E1                     POP   HL   
3D0C                          ;*Macro unroll:  test "/b [~A ~B ~C] 1#", 66
3D0C   31 00 50               LD   SP,STACK   
3D0F   CD 8E 0E               CALL   coldInit   
3D12   CD A1 4E               CALL   execStr   
3D15   2F 62 20 5B 7E 41 20 7E 42 20 7E 43 5D 20 31 23 00 DB   "/b [~A ~B ~C] 1#",0   
3D26   CD C5 0D               CALL   flushBuffer   
3D29   E1                     POP   HL   
3D2A   E5                     PUSH   HL   
3D2B   11 42 00               LD   DE,66   
3D2E   B7                     OR   A   
3D2F   ED 52                  SBC   HL,DE   
3D31   7D                     LD   A,L   
3D32   B4                     OR   H   
3D33   CA 9E 3D               JP   Z,expectM_3121S127   
3D36   CD 5A 0E               CALL   printStr   
3D39   43 6F 64 65 3A 20 2F 62 20 5B 7E 41 20 7E 42 20 7E 43 5D 20 31 23 00 .CSTR   "Code: ","/b [~A ~B ~C] 1#"   
3D50   CD 5A 0E               CALL   printStr   
3D53   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D62   21 42 00               LD   hl,66   
3D65   E5                     PUSH   hl   
3D66   E5                     PUSH   hl   
3D67   CD 5F 0F               CALL   run   
3D6A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D72   CD C5 0D               CALL   flushBuffer   
3D75   CD 5A 0E               CALL   printStr   
3D78   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D85   E1                     POP   hl   
3D86   E5                     PUSH   hl   
3D87   E5                     PUSH   hl   
3D88   CD 5F 0F               CALL   run   
3D8B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D9A   CD C5 0D               CALL   flushBuffer   
3D9D   76                     HALT      
3D9E                EXPECTM_3121S127:      
3D9E   E1                     POP   HL   
3D9F                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3D9F   31 00 50               LD   SP,STACK   
3DA2   CD 8E 0E               CALL   coldInit   
3DA5   CD A1 4E               CALL   execStr   
3DA8   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
3DBC   CD C5 0D               CALL   flushBuffer   
3DBF   E1                     POP   HL   
3DC0   E5                     PUSH   HL   
3DC1   11 0A 00               LD   DE,10   
3DC4   B7                     OR   A   
3DC5   ED 52                  SBC   HL,DE   
3DC7   7D                     LD   A,L   
3DC8   B4                     OR   H   
3DC9   CA 37 3E               JP   Z,expectM_3122S128   
3DCC   CD 5A 0E               CALL   printStr   
3DCF   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
3DE9   CD 5A 0E               CALL   printStr   
3DEC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DFB   21 0A 00               LD   hl,10   
3DFE   E5                     PUSH   hl   
3DFF   E5                     PUSH   hl   
3E00   CD 5F 0F               CALL   run   
3E03   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E0B   CD C5 0D               CALL   flushBuffer   
3E0E   CD 5A 0E               CALL   printStr   
3E11   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E1E   E1                     POP   hl   
3E1F   E5                     PUSH   hl   
3E20   E5                     PUSH   hl   
3E21   CD 5F 0F               CALL   run   
3E24   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E33   CD C5 0D               CALL   flushBuffer   
3E36   76                     HALT      
3E37                EXPECTM_3122S128:      
3E37   E1                     POP   HL   
3E38                          ;*Macro unroll:  test "10 20 \\ab{[{%a}{%b}] 0#^}^", 10
3E38   31 00 50               LD   SP,STACK   
3E3B   CD 8E 0E               CALL   coldInit   
3E3E   CD A1 4E               CALL   execStr   
3E41   31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 DB   "10 20 \\ab{[{%a}{%b}] 0#^}^",0   
3E5C   CD C5 0D               CALL   flushBuffer   
3E5F   E1                     POP   HL   
3E60   E5                     PUSH   HL   
3E61   11 0A 00               LD   DE,10   
3E64   B7                     OR   A   
3E65   ED 52                  SBC   HL,DE   
3E67   7D                     LD   A,L   
3E68   B4                     OR   H   
3E69   CA DE 3E               JP   Z,expectM_3123S129   
3E6C   CD 5A 0E               CALL   printStr   
3E6F   43 6F 64 65 3A 20 31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 .CSTR   "Code: ","10 20 \\ab{[{%a}{%b}] 0#^}^"   
3E90   CD 5A 0E               CALL   printStr   
3E93   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3EA2   21 0A 00               LD   hl,10   
3EA5   E5                     PUSH   hl   
3EA6   E5                     PUSH   hl   
3EA7   CD 5F 0F               CALL   run   
3EAA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3EB2   CD C5 0D               CALL   flushBuffer   
3EB5   CD 5A 0E               CALL   printStr   
3EB8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3EC5   E1                     POP   hl   
3EC6   E5                     PUSH   hl   
3EC7   E5                     PUSH   hl   
3EC8   CD 5F 0F               CALL   run   
3ECB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3EDA   CD C5 0D               CALL   flushBuffer   
3EDD   76                     HALT      
3EDE                EXPECTM_3123S129:      
3EDE   E1                     POP   HL   
3EDF                          ;*Macro unroll:  test "0 10 20 \\iab{[{%a}{%b}] %i#^}^", 10
3EDF   31 00 50               LD   SP,STACK   
3EE2   CD 8E 0E               CALL   coldInit   
3EE5   CD A1 4E               CALL   execStr   
3EE8   30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "0 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
3F07   CD C5 0D               CALL   flushBuffer   
3F0A   E1                     POP   HL   
3F0B   E5                     PUSH   HL   
3F0C   11 0A 00               LD   DE,10   
3F0F   B7                     OR   A   
3F10   ED 52                  SBC   HL,DE   
3F12   7D                     LD   A,L   
3F13   B4                     OR   H   
3F14   CA 8D 3F               JP   Z,expectM_3124S130   
3F17   CD 5A 0E               CALL   printStr   
3F1A   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 \\iab{[{%a}{%b}] %i#^}^"   
3F3F   CD 5A 0E               CALL   printStr   
3F42   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F51   21 0A 00               LD   hl,10   
3F54   E5                     PUSH   hl   
3F55   E5                     PUSH   hl   
3F56   CD 5F 0F               CALL   run   
3F59   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F61   CD C5 0D               CALL   flushBuffer   
3F64   CD 5A 0E               CALL   printStr   
3F67   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F74   E1                     POP   hl   
3F75   E5                     PUSH   hl   
3F76   E5                     PUSH   hl   
3F77   CD 5F 0F               CALL   run   
3F7A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F89   CD C5 0D               CALL   flushBuffer   
3F8C   76                     HALT      
3F8D                EXPECTM_3124S130:      
3F8D   E1                     POP   HL   
3F8E                          ;*Macro unroll:  test "1 10 20 \\iab{[{%a}{%b}] %i#^}^", 20
3F8E   31 00 50               LD   SP,STACK   
3F91   CD 8E 0E               CALL   coldInit   
3F94   CD A1 4E               CALL   execStr   
3F97   31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "1 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
3FB6   CD C5 0D               CALL   flushBuffer   
3FB9   E1                     POP   HL   
3FBA   E5                     PUSH   HL   
3FBB   11 14 00               LD   DE,20   
3FBE   B7                     OR   A   
3FBF   ED 52                  SBC   HL,DE   
3FC1   7D                     LD   A,L   
3FC2   B4                     OR   H   
3FC3   CA 3C 40               JP   Z,expectM_3125S131   
3FC6   CD 5A 0E               CALL   printStr   
3FC9   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 \\iab{[{%a}{%b}] %i#^}^"   
3FEE   CD 5A 0E               CALL   printStr   
3FF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4000   21 14 00               LD   hl,20   
4003   E5                     PUSH   hl   
4004   E5                     PUSH   hl   
4005   CD 5F 0F               CALL   run   
4008   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4010   CD C5 0D               CALL   flushBuffer   
4013   CD 5A 0E               CALL   printStr   
4016   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4023   E1                     POP   hl   
4024   E5                     PUSH   hl   
4025   E5                     PUSH   hl   
4026   CD 5F 0F               CALL   run   
4029   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4038   CD C5 0D               CALL   flushBuffer   
403B   76                     HALT      
403C                EXPECTM_3125S131:      
403C   E1                     POP   HL   
403D                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
403D   31 00 50               LD   SP,STACK   
4040   CD 8E 0E               CALL   coldInit   
4043   CD A1 4E               CALL   execStr   
4046   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
405E   CD C5 0D               CALL   flushBuffer   
4061   E1                     POP   HL   
4062   E5                     PUSH   HL   
4063   11 06 00               LD   DE,6   
4066   B7                     OR   A   
4067   ED 52                  SBC   HL,DE   
4069   7D                     LD   A,L   
406A   B4                     OR   H   
406B   CA DD 40               JP   Z,expectM_3126S132   
406E   CD 5A 0E               CALL   printStr   
4071   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
408F   CD 5A 0E               CALL   printStr   
4092   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40A1   21 06 00               LD   hl,6   
40A4   E5                     PUSH   hl   
40A5   E5                     PUSH   hl   
40A6   CD 5F 0F               CALL   run   
40A9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
40B1   CD C5 0D               CALL   flushBuffer   
40B4   CD 5A 0E               CALL   printStr   
40B7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40C4   E1                     POP   hl   
40C5   E5                     PUSH   hl   
40C6   E5                     PUSH   hl   
40C7   CD 5F 0F               CALL   run   
40CA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
40D9   CD C5 0D               CALL   flushBuffer   
40DC   76                     HALT      
40DD                EXPECTM_3126S132:      
40DD   E1                     POP   HL   
40DE                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
40DE   31 00 50               LD   SP,STACK   
40E1   CD 8E 0E               CALL   coldInit   
40E4   CD A1 4E               CALL   execStr   
40E7   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
4102   CD C5 0D               CALL   flushBuffer   
4105   E1                     POP   HL   
4106   E5                     PUSH   HL   
4107   11 02 00               LD   DE,2   
410A   B7                     OR   A   
410B   ED 52                  SBC   HL,DE   
410D   7D                     LD   A,L   
410E   B4                     OR   H   
410F   CA 84 41               JP   Z,expectM_3127S133   
4112   CD 5A 0E               CALL   printStr   
4115   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
4136   CD 5A 0E               CALL   printStr   
4139   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4148   21 02 00               LD   hl,2   
414B   E5                     PUSH   hl   
414C   E5                     PUSH   hl   
414D   CD 5F 0F               CALL   run   
4150   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4158   CD C5 0D               CALL   flushBuffer   
415B   CD 5A 0E               CALL   printStr   
415E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
416B   E1                     POP   hl   
416C   E5                     PUSH   hl   
416D   E5                     PUSH   hl   
416E   CD 5F 0F               CALL   run   
4171   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4180   CD C5 0D               CALL   flushBuffer   
4183   76                     HALT      
4184                EXPECTM_3127S133:      
4184   E1                     POP   HL   
4185                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
4185   31 00 50               LD   SP,STACK   
4188   CD 8E 0E               CALL   coldInit   
418B   CD A1 4E               CALL   execStr   
418E   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
41B4   CD C5 0D               CALL   flushBuffer   
41B7   E1                     POP   HL   
41B8   E5                     PUSH   HL   
41B9   11 0A 00               LD   DE,10   
41BC   B7                     OR   A   
41BD   ED 52                  SBC   HL,DE   
41BF   7D                     LD   A,L   
41C0   B4                     OR   H   
41C1   CA 41 42               JP   Z,expectM_3128S134   
41C4   CD 5A 0E               CALL   printStr   
41C7   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
41F3   CD 5A 0E               CALL   printStr   
41F6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4205   21 0A 00               LD   hl,10   
4208   E5                     PUSH   hl   
4209   E5                     PUSH   hl   
420A   CD 5F 0F               CALL   run   
420D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4215   CD C5 0D               CALL   flushBuffer   
4218   CD 5A 0E               CALL   printStr   
421B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4228   E1                     POP   hl   
4229   E5                     PUSH   hl   
422A   E5                     PUSH   hl   
422B   CD 5F 0F               CALL   run   
422E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
423D   CD C5 0D               CALL   flushBuffer   
4240   76                     HALT      
4241                EXPECTM_3128S134:      
4241   E1                     POP   HL   
4242                          ;*Macro unroll:  test "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^", 6
4242   31 00 50               LD   SP,STACK   
4245   CD 8E 0E               CALL   coldInit   
4248   CD A1 4E               CALL   execStr   
424B   33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^",0   
4276   CD C5 0D               CALL   flushBuffer   
4279   E1                     POP   HL   
427A   E5                     PUSH   HL   
427B   11 06 00               LD   DE,6   
427E   B7                     OR   A   
427F   ED 52                  SBC   HL,DE   
4281   7D                     LD   A,L   
4282   B4                     OR   H   
4283   CA 08 43               JP   Z,expectM_3129S135   
4286   CD 5A 0E               CALL   printStr   
4289   43 6F 64 65 3A 20 33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^"   
42BA   CD 5A 0E               CALL   printStr   
42BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42CC   21 06 00               LD   hl,6   
42CF   E5                     PUSH   hl   
42D0   E5                     PUSH   hl   
42D1   CD 5F 0F               CALL   run   
42D4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
42DC   CD C5 0D               CALL   flushBuffer   
42DF   CD 5A 0E               CALL   printStr   
42E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42EF   E1                     POP   hl   
42F0   E5                     PUSH   hl   
42F1   E5                     PUSH   hl   
42F2   CD 5F 0F               CALL   run   
42F5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4304   CD C5 0D               CALL   flushBuffer   
4307   76                     HALT      
4308                EXPECTM_3129S135:      
4308   E1                     POP   HL   
4309                          ;*Macro unroll:  test "/t \\f{1 %f/br 2 +}^",3
4309   31 00 50               LD   SP,STACK   
430C   CD 8E 0E               CALL   coldInit   
430F   CD A1 4E               CALL   execStr   
4312   2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/t \\f{1 %f/br 2 +}^",0   
4326   CD C5 0D               CALL   flushBuffer   
4329   E1                     POP   HL   
432A   E5                     PUSH   HL   
432B   11 03 00               LD   DE,3   
432E   B7                     OR   A   
432F   ED 52                  SBC   HL,DE   
4331   7D                     LD   A,L   
4332   B4                     OR   H   
4333   CA A1 43               JP   Z,expectM_3130S136   
4336   CD 5A 0E               CALL   printStr   
4339   43 6F 64 65 3A 20 2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/t \\f{1 %f/br 2 +}^"   
4353   CD 5A 0E               CALL   printStr   
4356   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4365   21 03 00               LD   hl,3   
4368   E5                     PUSH   hl   
4369   E5                     PUSH   hl   
436A   CD 5F 0F               CALL   run   
436D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4375   CD C5 0D               CALL   flushBuffer   
4378   CD 5A 0E               CALL   printStr   
437B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4388   E1                     POP   hl   
4389   E5                     PUSH   hl   
438A   E5                     PUSH   hl   
438B   CD 5F 0F               CALL   run   
438E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
439D   CD C5 0D               CALL   flushBuffer   
43A0   76                     HALT      
43A1                EXPECTM_3130S136:      
43A1   E1                     POP   HL   
43A2                          ;*Macro unroll:  test "/f \\f{1 %f/br 2 +}^",1
43A2   31 00 50               LD   SP,STACK   
43A5   CD 8E 0E               CALL   coldInit   
43A8   CD A1 4E               CALL   execStr   
43AB   2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/f \\f{1 %f/br 2 +}^",0   
43BF   CD C5 0D               CALL   flushBuffer   
43C2   E1                     POP   HL   
43C3   E5                     PUSH   HL   
43C4   11 01 00               LD   DE,1   
43C7   B7                     OR   A   
43C8   ED 52                  SBC   HL,DE   
43CA   7D                     LD   A,L   
43CB   B4                     OR   H   
43CC   CA 3A 44               JP   Z,expectM_3131S137   
43CF   CD 5A 0E               CALL   printStr   
43D2   43 6F 64 65 3A 20 2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/f \\f{1 %f/br 2 +}^"   
43EC   CD 5A 0E               CALL   printStr   
43EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43FE   21 01 00               LD   hl,1   
4401   E5                     PUSH   hl   
4402   E5                     PUSH   hl   
4403   CD 5F 0F               CALL   run   
4406   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
440E   CD C5 0D               CALL   flushBuffer   
4411   CD 5A 0E               CALL   printStr   
4414   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4421   E1                     POP   hl   
4422   E5                     PUSH   hl   
4423   E5                     PUSH   hl   
4424   CD 5F 0F               CALL   run   
4427   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4436   CD C5 0D               CALL   flushBuffer   
4439   76                     HALT      
443A                EXPECTM_3131S137:      
443A   E1                     POP   HL   
443B                          ;*Macro unroll:  test "~A 1 - /ad", NUL
443B   31 00 50               LD   SP,STACK   
443E   CD 8E 0E               CALL   coldInit   
4441   CD A1 4E               CALL   execStr   
4444   7E 41 20 31 20 2D 20 2F 61 64 00 DB   "~A 1 - /ad",0   
444F   CD C5 0D               CALL   flushBuffer   
4452   E1                     POP   HL   
4453   E5                     PUSH   HL   
4454   11 00 00               LD   DE,NUL   
4457   B7                     OR   A   
4458   ED 52                  SBC   HL,DE   
445A   7D                     LD   A,L   
445B   B4                     OR   H   
445C   CA C1 44               JP   Z,expectM_3132S138   
445F   CD 5A 0E               CALL   printStr   
4462   43 6F 64 65 3A 20 7E 41 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","~A 1 - /ad"   
4473   CD 5A 0E               CALL   printStr   
4476   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4485   21 00 00               LD   hl,NUL   
4488   E5                     PUSH   hl   
4489   E5                     PUSH   hl   
448A   CD 5F 0F               CALL   run   
448D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4495   CD C5 0D               CALL   flushBuffer   
4498   CD 5A 0E               CALL   printStr   
449B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44A8   E1                     POP   hl   
44A9   E5                     PUSH   hl   
44AA   E5                     PUSH   hl   
44AB   CD 5F 0F               CALL   run   
44AE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
44BD   CD C5 0D               CALL   flushBuffer   
44C0   76                     HALT      
44C1                EXPECTM_3132S138:      
44C1   E1                     POP   HL   
44C2                          ;*Macro unroll:  test "~Z 1 + /ad", NUL
44C2   31 00 50               LD   SP,STACK   
44C5   CD 8E 0E               CALL   coldInit   
44C8   CD A1 4E               CALL   execStr   
44CB   7E 5A 20 31 20 2B 20 2F 61 64 00 DB   "~Z 1 + /ad",0   
44D6   CD C5 0D               CALL   flushBuffer   
44D9   E1                     POP   HL   
44DA   E5                     PUSH   HL   
44DB   11 00 00               LD   DE,NUL   
44DE   B7                     OR   A   
44DF   ED 52                  SBC   HL,DE   
44E1   7D                     LD   A,L   
44E2   B4                     OR   H   
44E3   CA 48 45               JP   Z,expectM_3133S139   
44E6   CD 5A 0E               CALL   printStr   
44E9   43 6F 64 65 3A 20 7E 5A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","~Z 1 + /ad"   
44FA   CD 5A 0E               CALL   printStr   
44FD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
450C   21 00 00               LD   hl,NUL   
450F   E5                     PUSH   hl   
4510   E5                     PUSH   hl   
4511   CD 5F 0F               CALL   run   
4514   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
451C   CD C5 0D               CALL   flushBuffer   
451F   CD 5A 0E               CALL   printStr   
4522   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
452F   E1                     POP   hl   
4530   E5                     PUSH   hl   
4531   E5                     PUSH   hl   
4532   CD 5F 0F               CALL   run   
4535   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4544   CD C5 0D               CALL   flushBuffer   
4547   76                     HALT      
4548                EXPECTM_3133S139:      
4548   E1                     POP   HL   
4549                          ;*Macro unroll:  test "~a 1 - /ad", NUL
4549   31 00 50               LD   SP,STACK   
454C   CD 8E 0E               CALL   coldInit   
454F   CD A1 4E               CALL   execStr   
4552   7E 61 20 31 20 2D 20 2F 61 64 00 DB   "~a 1 - /ad",0   
455D   CD C5 0D               CALL   flushBuffer   
4560   E1                     POP   HL   
4561   E5                     PUSH   HL   
4562   11 00 00               LD   DE,NUL   
4565   B7                     OR   A   
4566   ED 52                  SBC   HL,DE   
4568   7D                     LD   A,L   
4569   B4                     OR   H   
456A   CA CF 45               JP   Z,expectM_3134S140   
456D   CD 5A 0E               CALL   printStr   
4570   43 6F 64 65 3A 20 7E 61 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","~a 1 - /ad"   
4581   CD 5A 0E               CALL   printStr   
4584   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4593   21 00 00               LD   hl,NUL   
4596   E5                     PUSH   hl   
4597   E5                     PUSH   hl   
4598   CD 5F 0F               CALL   run   
459B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
45A3   CD C5 0D               CALL   flushBuffer   
45A6   CD 5A 0E               CALL   printStr   
45A9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45B6   E1                     POP   hl   
45B7   E5                     PUSH   hl   
45B8   E5                     PUSH   hl   
45B9   CD 5F 0F               CALL   run   
45BC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
45CB   CD C5 0D               CALL   flushBuffer   
45CE   76                     HALT      
45CF                EXPECTM_3134S140:      
45CF   E1                     POP   HL   
45D0                          ;*Macro unroll:  test "~z 1 + /ad", NUL
45D0   31 00 50               LD   SP,STACK   
45D3   CD 8E 0E               CALL   coldInit   
45D6   CD A1 4E               CALL   execStr   
45D9   7E 7A 20 31 20 2B 20 2F 61 64 00 DB   "~z 1 + /ad",0   
45E4   CD C5 0D               CALL   flushBuffer   
45E7   E1                     POP   HL   
45E8   E5                     PUSH   HL   
45E9   11 00 00               LD   DE,NUL   
45EC   B7                     OR   A   
45ED   ED 52                  SBC   HL,DE   
45EF   7D                     LD   A,L   
45F0   B4                     OR   H   
45F1   CA 56 46               JP   Z,expectM_3135S141   
45F4   CD 5A 0E               CALL   printStr   
45F7   43 6F 64 65 3A 20 7E 7A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","~z 1 + /ad"   
4608   CD 5A 0E               CALL   printStr   
460B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
461A   21 00 00               LD   hl,NUL   
461D   E5                     PUSH   hl   
461E   E5                     PUSH   hl   
461F   CD 5F 0F               CALL   run   
4622   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
462A   CD C5 0D               CALL   flushBuffer   
462D   CD 5A 0E               CALL   printStr   
4630   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
463D   E1                     POP   hl   
463E   E5                     PUSH   hl   
463F   E5                     PUSH   hl   
4640   CD 5F 0F               CALL   run   
4643   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4652   CD C5 0D               CALL   flushBuffer   
4655   76                     HALT      
4656                EXPECTM_3135S141:      
4656   E1                     POP   HL   
4657                          ;*Macro unroll:  test "~z /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
4657   31 00 50               LD   SP,STACK   
465A   CD 8E 0E               CALL   coldInit   
465D   CD A1 4E               CALL   execStr   
4660   7E 7A 20 2F 61 64 00   DB   "~z /ad",0   
4667   CD C5 0D               CALL   flushBuffer   
466A   E1                     POP   HL   
466B   E5                     PUSH   HL   
466C   11 66 52               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
466F   B7                     OR   A   
4670   ED 52                  SBC   HL,DE   
4672   7D                     LD   A,L   
4673   B4                     OR   H   
4674   CA D5 46               JP   Z,expectM_3136S142   
4677   CD 5A 0E               CALL   printStr   
467A   43 6F 64 65 3A 20 7E 7A 20 2F 61 64 00 .CSTR   "Code: ","~z /ad"   
4687   CD 5A 0E               CALL   printStr   
468A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4699   21 66 52               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
469C   E5                     PUSH   hl   
469D   E5                     PUSH   hl   
469E   CD 5F 0F               CALL   run   
46A1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
46A9   CD C5 0D               CALL   flushBuffer   
46AC   CD 5A 0E               CALL   printStr   
46AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46BC   E1                     POP   hl   
46BD   E5                     PUSH   hl   
46BE   E5                     PUSH   hl   
46BF   CD 5F 0F               CALL   run   
46C2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
46D1   CD C5 0D               CALL   flushBuffer   
46D4   76                     HALT      
46D5                EXPECTM_3136S142:      
46D5   E1                     POP   HL   
46D6                          ;*Macro unroll:  test "~a /ad", VARS + ("Z"-"A"+1)*2
46D6   31 00 50               LD   SP,STACK   
46D9   CD 8E 0E               CALL   coldInit   
46DC   CD A1 4E               CALL   execStr   
46DF   7E 61 20 2F 61 64 00   DB   "~a /ad",0   
46E6   CD C5 0D               CALL   flushBuffer   
46E9   E1                     POP   HL   
46EA   E5                     PUSH   HL   
46EB   11 34 52               LD   DE,VARS + ("Z"-"A"+1)*2   
46EE   B7                     OR   A   
46EF   ED 52                  SBC   HL,DE   
46F1   7D                     LD   A,L   
46F2   B4                     OR   H   
46F3   CA 54 47               JP   Z,expectM_3137S143   
46F6   CD 5A 0E               CALL   printStr   
46F9   43 6F 64 65 3A 20 7E 61 20 2F 61 64 00 .CSTR   "Code: ","~a /ad"   
4706   CD 5A 0E               CALL   printStr   
4709   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4718   21 34 52               LD   hl,VARS + ("Z"-"A"+1)*2   
471B   E5                     PUSH   hl   
471C   E5                     PUSH   hl   
471D   CD 5F 0F               CALL   run   
4720   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4728   CD C5 0D               CALL   flushBuffer   
472B   CD 5A 0E               CALL   printStr   
472E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
473B   E1                     POP   hl   
473C   E5                     PUSH   hl   
473D   E5                     PUSH   hl   
473E   CD 5F 0F               CALL   run   
4741   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4750   CD C5 0D               CALL   flushBuffer   
4753   76                     HALT      
4754                EXPECTM_3137S143:      
4754   E1                     POP   HL   
4755                          ;*Macro unroll:  test "~Z /ad", VARS + ("Z"-"A")*2
4755   31 00 50               LD   SP,STACK   
4758   CD 8E 0E               CALL   coldInit   
475B   CD A1 4E               CALL   execStr   
475E   7E 5A 20 2F 61 64 00   DB   "~Z /ad",0   
4765   CD C5 0D               CALL   flushBuffer   
4768   E1                     POP   HL   
4769   E5                     PUSH   HL   
476A   11 32 52               LD   DE,VARS + ("Z"-"A")*2   
476D   B7                     OR   A   
476E   ED 52                  SBC   HL,DE   
4770   7D                     LD   A,L   
4771   B4                     OR   H   
4772   CA D3 47               JP   Z,expectM_3138S144   
4775   CD 5A 0E               CALL   printStr   
4778   43 6F 64 65 3A 20 7E 5A 20 2F 61 64 00 .CSTR   "Code: ","~Z /ad"   
4785   CD 5A 0E               CALL   printStr   
4788   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4797   21 32 52               LD   hl,VARS + ("Z"-"A")*2   
479A   E5                     PUSH   hl   
479B   E5                     PUSH   hl   
479C   CD 5F 0F               CALL   run   
479F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
47A7   CD C5 0D               CALL   flushBuffer   
47AA   CD 5A 0E               CALL   printStr   
47AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47BA   E1                     POP   hl   
47BB   E5                     PUSH   hl   
47BC   E5                     PUSH   hl   
47BD   CD 5F 0F               CALL   run   
47C0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
47CF   CD C5 0D               CALL   flushBuffer   
47D2   76                     HALT      
47D3                EXPECTM_3138S144:      
47D3   E1                     POP   HL   
47D4                          ;*Macro unroll:  test "~A /ad", VARS
47D4   31 00 50               LD   SP,STACK   
47D7   CD 8E 0E               CALL   coldInit   
47DA   CD A1 4E               CALL   execStr   
47DD   7E 41 20 2F 61 64 00   DB   "~A /ad",0   
47E4   CD C5 0D               CALL   flushBuffer   
47E7   E1                     POP   HL   
47E8   E5                     PUSH   HL   
47E9   11 00 52               LD   DE,VARS   
47EC   B7                     OR   A   
47ED   ED 52                  SBC   HL,DE   
47EF   7D                     LD   A,L   
47F0   B4                     OR   H   
47F1   CA 52 48               JP   Z,expectM_3139S145   
47F4   CD 5A 0E               CALL   printStr   
47F7   43 6F 64 65 3A 20 7E 41 20 2F 61 64 00 .CSTR   "Code: ","~A /ad"   
4804   CD 5A 0E               CALL   printStr   
4807   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4816   21 00 52               LD   hl,VARS   
4819   E5                     PUSH   hl   
481A   E5                     PUSH   hl   
481B   CD 5F 0F               CALL   run   
481E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4826   CD C5 0D               CALL   flushBuffer   
4829   CD 5A 0E               CALL   printStr   
482C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4839   E1                     POP   hl   
483A   E5                     PUSH   hl   
483B   E5                     PUSH   hl   
483C   CD 5F 0F               CALL   run   
483F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
484E   CD C5 0D               CALL   flushBuffer   
4851   76                     HALT      
4852                EXPECTM_3139S145:      
4852   E1                     POP   HL   
4853                          ;*Macro unroll:  test "-1. /b/vB 0#", $2D
4853   31 00 50               LD   SP,STACK   
4856   CD 8E 0E               CALL   coldInit   
4859   CD A1 4E               CALL   execStr   
485C   2D 31 2E 20 2F 62 2F 76 42 20 30 23 00 DB   "-1. /b/vB 0#",0   
4869   CD C5 0D               CALL   flushBuffer   
486C   E1                     POP   HL   
486D   E5                     PUSH   HL   
486E   11 2D 00               LD   DE,$2D   
4871   B7                     OR   A   
4872   ED 52                  SBC   HL,DE   
4874   7D                     LD   A,L   
4875   B4                     OR   H   
4876   CA DD 48               JP   Z,expectM_3140S146   
4879   CD 5A 0E               CALL   printStr   
487C   43 6F 64 65 3A 20 2D 31 2E 20 2F 62 2F 76 42 20 30 23 00 .CSTR   "Code: ","-1. /b/vB 0#"   
488F   CD 5A 0E               CALL   printStr   
4892   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48A1   21 2D 00               LD   hl,$2D   
48A4   E5                     PUSH   hl   
48A5   E5                     PUSH   hl   
48A6   CD 5F 0F               CALL   run   
48A9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
48B1   CD C5 0D               CALL   flushBuffer   
48B4   CD 5A 0E               CALL   printStr   
48B7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48C4   E1                     POP   hl   
48C5   E5                     PUSH   hl   
48C6   E5                     PUSH   hl   
48C7   CD 5F 0F               CALL   run   
48CA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
48D9   CD C5 0D               CALL   flushBuffer   
48DC   76                     HALT      
48DD                EXPECTM_3140S146:      
48DD   E1                     POP   HL   
48DE                          ;*Macro unroll:  test {DQ,"A",DQ,".s /b/vB 0#"}, 65
48DE   31 00 50               LD   SP,STACK   
48E1   CD 8E 0E               CALL   coldInit   
48E4   CD A1 4E               CALL   execStr   
48E7   22 41 22 2E 73 20 2F 62 2F 76 42 20 30 23 00 DB   DQ,"A",DQ,".s /b/vB 0#",0   
48F6   CD C5 0D               CALL   flushBuffer   
48F9   E1                     POP   HL   
48FA   E5                     PUSH   HL   
48FB   11 41 00               LD   DE,65   
48FE   B7                     OR   A   
48FF   ED 52                  SBC   HL,DE   
4901   7D                     LD   A,L   
4902   B4                     OR   H   
4903   CA 6C 49               JP   Z,expectM_3141S147   
4906   CD 5A 0E               CALL   printStr   
4909   43 6F 64 65 3A 20 22 41 22 2E 73 20 2F 62 2F 76 42 20 30 23 00 .CSTR   "Code: ",DQ,"A",DQ,".s /b/vB 0#"   
491E   CD 5A 0E               CALL   printStr   
4921   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4930   21 41 00               LD   hl,65   
4933   E5                     PUSH   hl   
4934   E5                     PUSH   hl   
4935   CD 5F 0F               CALL   run   
4938   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4940   CD C5 0D               CALL   flushBuffer   
4943   CD 5A 0E               CALL   printStr   
4946   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4953   E1                     POP   hl   
4954   E5                     PUSH   hl   
4955   E5                     PUSH   hl   
4956   CD 5F 0F               CALL   run   
4959   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4968   CD C5 0D               CALL   flushBuffer   
496B   76                     HALT      
496C                EXPECTM_3141S147:      
496C   E1                     POP   HL   
496D                          ;*Macro unroll:  test "123. /b/vB 1#", $32
496D   31 00 50               LD   SP,STACK   
4970   CD 8E 0E               CALL   coldInit   
4973   CD A1 4E               CALL   execStr   
4976   31 32 33 2E 20 2F 62 2F 76 42 20 31 23 00 DB   "123. /b/vB 1#",0   
4984   CD C5 0D               CALL   flushBuffer   
4987   E1                     POP   HL   
4988   E5                     PUSH   HL   
4989   11 32 00               LD   DE,$32   
498C   B7                     OR   A   
498D   ED 52                  SBC   HL,DE   
498F   7D                     LD   A,L   
4990   B4                     OR   H   
4991   CA F9 49               JP   Z,expectM_3142S148   
4994   CD 5A 0E               CALL   printStr   
4997   43 6F 64 65 3A 20 31 32 33 2E 20 2F 62 2F 76 42 20 31 23 00 .CSTR   "Code: ","123. /b/vB 1#"   
49AB   CD 5A 0E               CALL   printStr   
49AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49BD   21 32 00               LD   hl,$32   
49C0   E5                     PUSH   hl   
49C1   E5                     PUSH   hl   
49C2   CD 5F 0F               CALL   run   
49C5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
49CD   CD C5 0D               CALL   flushBuffer   
49D0   CD 5A 0E               CALL   printStr   
49D3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49E0   E1                     POP   hl   
49E1   E5                     PUSH   hl   
49E2   E5                     PUSH   hl   
49E3   CD 5F 0F               CALL   run   
49E6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
49F5   CD C5 0D               CALL   flushBuffer   
49F8   76                     HALT      
49F9                EXPECTM_3142S148:      
49F9   E1                     POP   HL   
49FA                          ;*Macro unroll:  test "\\a{%a} F=1F^", 1
49FA   31 00 50               LD   SP,STACK   
49FD   CD 8E 0E               CALL   coldInit   
4A00   CD A1 4E               CALL   execStr   
4A03   5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   "\\a{%a} F=1F^",0   
4A10   CD C5 0D               CALL   flushBuffer   
4A13   E1                     POP   HL   
4A14   E5                     PUSH   HL   
4A15   11 01 00               LD   DE,1   
4A18   B7                     OR   A   
4A19   ED 52                  SBC   HL,DE   
4A1B   7D                     LD   A,L   
4A1C   B4                     OR   H   
4A1D   CA 84 4A               JP   Z,expectM_3143S149   
4A20   CD 5A 0E               CALL   printStr   
4A23   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ","\\a{%a} F=1F^"   
4A36   CD 5A 0E               CALL   printStr   
4A39   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A48   21 01 00               LD   hl,1   
4A4B   E5                     PUSH   hl   
4A4C   E5                     PUSH   hl   
4A4D   CD 5F 0F               CALL   run   
4A50   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4A58   CD C5 0D               CALL   flushBuffer   
4A5B   CD 5A 0E               CALL   printStr   
4A5E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A6B   E1                     POP   hl   
4A6C   E5                     PUSH   hl   
4A6D   E5                     PUSH   hl   
4A6E   CD 5F 0F               CALL   run   
4A71   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4A80   CD C5 0D               CALL   flushBuffer   
4A83   76                     HALT      
4A84                EXPECTM_3143S149:      
4A84   E1                     POP   HL   
4A85                          ;*Macro unroll:  test "1 \\b{\\a{%a}}^F= 3F^",3
4A85   31 00 50               LD   SP,STACK   
4A88   CD 8E 0E               CALL   coldInit   
4A8B   CD A1 4E               CALL   execStr   
4A8E   31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a}}^F= 3F^",0   
4AA2   CD C5 0D               CALL   flushBuffer   
4AA5   E1                     POP   HL   
4AA6   E5                     PUSH   HL   
4AA7   11 03 00               LD   DE,3   
4AAA   B7                     OR   A   
4AAB   ED 52                  SBC   HL,DE   
4AAD   7D                     LD   A,L   
4AAE   B4                     OR   H   
4AAF   CA 1D 4B               JP   Z,expectM_3144S150   
4AB2   CD 5A 0E               CALL   printStr   
4AB5   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a}}^F= 3F^"   
4ACF   CD 5A 0E               CALL   printStr   
4AD2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4AE1   21 03 00               LD   hl,3   
4AE4   E5                     PUSH   hl   
4AE5   E5                     PUSH   hl   
4AE6   CD 5F 0F               CALL   run   
4AE9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4AF1   CD C5 0D               CALL   flushBuffer   
4AF4   CD 5A 0E               CALL   printStr   
4AF7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B04   E1                     POP   hl   
4B05   E5                     PUSH   hl   
4B06   E5                     PUSH   hl   
4B07   CD 5F 0F               CALL   run   
4B0A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4B19   CD C5 0D               CALL   flushBuffer   
4B1C   76                     HALT      
4B1D                EXPECTM_3144S150:      
4B1D   E1                     POP   HL   
4B1E                          ;*Macro unroll:  test "1 \\b{\\a{%a%b-}}^F= 3F^",2
4B1E   31 00 50               LD   SP,STACK   
4B21   CD 8E 0E               CALL   coldInit   
4B24   CD A1 4E               CALL   execStr   
4B27   31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a%b-}}^F= 3F^",0   
4B3E   CD C5 0D               CALL   flushBuffer   
4B41   E1                     POP   HL   
4B42   E5                     PUSH   HL   
4B43   11 02 00               LD   DE,2   
4B46   B7                     OR   A   
4B47   ED 52                  SBC   HL,DE   
4B49   7D                     LD   A,L   
4B4A   B4                     OR   H   
4B4B   CA BC 4B               JP   Z,expectM_3145S151   
4B4E   CD 5A 0E               CALL   printStr   
4B51   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a%b-}}^F= 3F^"   
4B6E   CD 5A 0E               CALL   printStr   
4B71   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B80   21 02 00               LD   hl,2   
4B83   E5                     PUSH   hl   
4B84   E5                     PUSH   hl   
4B85   CD 5F 0F               CALL   run   
4B88   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4B90   CD C5 0D               CALL   flushBuffer   
4B93   CD 5A 0E               CALL   printStr   
4B96   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BA3   E1                     POP   hl   
4BA4   E5                     PUSH   hl   
4BA5   E5                     PUSH   hl   
4BA6   CD 5F 0F               CALL   run   
4BA9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4BB8   CD C5 0D               CALL   flushBuffer   
4BBB   76                     HALT      
4BBC                EXPECTM_3145S151:      
4BBC   E1                     POP   HL   
4BBD                          ;*Macro unroll:  test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
4BBD   31 00 50               LD   SP,STACK   
4BC0   CD 8E 0E               CALL   coldInit   
4BC3   CD A1 4E               CALL   execStr   
4BC6   31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
4BE9   CD C5 0D               CALL   flushBuffer   
4BEC   E1                     POP   HL   
4BED   E5                     PUSH   HL   
4BEE   11 01 00               LD   DE,1   
4BF1   B7                     OR   A   
4BF2   ED 52                  SBC   HL,DE   
4BF4   7D                     LD   A,L   
4BF5   B4                     OR   H   
4BF6   CA 73 4C               JP   Z,expectM_3146S152   
4BF9   CD 5A 0E               CALL   printStr   
4BFC   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^"   
4C25   CD 5A 0E               CALL   printStr   
4C28   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C37   21 01 00               LD   hl,1   
4C3A   E5                     PUSH   hl   
4C3B   E5                     PUSH   hl   
4C3C   CD 5F 0F               CALL   run   
4C3F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4C47   CD C5 0D               CALL   flushBuffer   
4C4A   CD 5A 0E               CALL   printStr   
4C4D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C5A   E1                     POP   hl   
4C5B   E5                     PUSH   hl   
4C5C   E5                     PUSH   hl   
4C5D   CD 5F 0F               CALL   run   
4C60   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4C6F   CD C5 0D               CALL   flushBuffer   
4C72   76                     HALT      
4C73                EXPECTM_3146S152:      
4C73   E1                     POP   HL   
4C74                          ;*Macro unroll:  test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
4C74   31 00 50               LD   SP,STACK   
4C77   CD 8E 0E               CALL   coldInit   
4C7A   CD A1 4E               CALL   execStr   
4C7D   31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",0   
4CA0   CD C5 0D               CALL   flushBuffer   
4CA3   E1                     POP   HL   
4CA4   E5                     PUSH   HL   
4CA5   11 01 00               LD   DE,1   
4CA8   B7                     OR   A   
4CA9   ED 52                  SBC   HL,DE   
4CAB   7D                     LD   A,L   
4CAC   B4                     OR   H   
4CAD   CA 2A 4D               JP   Z,expectM_3147S153   
4CB0   CD 5A 0E               CALL   printStr   
4CB3   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^"   
4CDC   CD 5A 0E               CALL   printStr   
4CDF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CEE   21 01 00               LD   hl,1   
4CF1   E5                     PUSH   hl   
4CF2   E5                     PUSH   hl   
4CF3   CD 5F 0F               CALL   run   
4CF6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4CFE   CD C5 0D               CALL   flushBuffer   
4D01   CD 5A 0E               CALL   printStr   
4D04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D11   E1                     POP   hl   
4D12   E5                     PUSH   hl   
4D13   E5                     PUSH   hl   
4D14   CD 5F 0F               CALL   run   
4D17   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4D26   CD C5 0D               CALL   flushBuffer   
4D29   76                     HALT      
4D2A                EXPECTM_3147S153:      
4D2A   E1                     POP   HL   
4D2B                          ;*Macro unroll:  test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
4D2B   31 00 50               LD   SP,STACK   
4D2E   CD 8E 0E               CALL   coldInit   
4D31   CD A1 4E               CALL   execStr   
4D34   31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
4D64   CD C5 0D               CALL   flushBuffer   
4D67   E1                     POP   HL   
4D68   E5                     PUSH   HL   
4D69   11 02 00               LD   DE,2   
4D6C   B7                     OR   A   
4D6D   ED 52                  SBC   HL,DE   
4D6F   7D                     LD   A,L   
4D70   B4                     OR   H   
4D71   CA FB 4D               JP   Z,expectM_3148S154   
4D74   CD 5A 0E               CALL   printStr   
4D77   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
4DAD   CD 5A 0E               CALL   printStr   
4DB0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4DBF   21 02 00               LD   hl,2   
4DC2   E5                     PUSH   hl   
4DC3   E5                     PUSH   hl   
4DC4   CD 5F 0F               CALL   run   
4DC7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4DCF   CD C5 0D               CALL   flushBuffer   
4DD2   CD 5A 0E               CALL   printStr   
4DD5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DE2   E1                     POP   hl   
4DE3   E5                     PUSH   hl   
4DE4   E5                     PUSH   hl   
4DE5   CD 5F 0F               CALL   run   
4DE8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4DF7   CD C5 0D               CALL   flushBuffer   
4DFA   76                     HALT      
4DFB                EXPECTM_3148S154:      
4DFB   E1                     POP   HL   
4DFC                          ;*Macro unroll:  test "F := \\a{%a 1+} ; 1F^", 2
4DFC   31 00 50               LD   SP,STACK   
4DFF   CD 8E 0E               CALL   coldInit   
4E02   CD A1 4E               CALL   execStr   
4E05   46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 DB   "F := \\a{%a 1+} ; 1F^",0   
4E1A   CD C5 0D               CALL   flushBuffer   
4E1D   E1                     POP   HL   
4E1E   E5                     PUSH   HL   
4E1F   11 02 00               LD   DE,2   
4E22   B7                     OR   A   
4E23   ED 52                  SBC   HL,DE   
4E25   7D                     LD   A,L   
4E26   B4                     OR   H   
4E27   CA 96 4E               JP   Z,expectM_3149S155   
4E2A   CD 5A 0E               CALL   printStr   
4E2D   43 6F 64 65 3A 20 46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 .CSTR   "Code: ","F := \\a{%a 1+} ; 1F^"   
4E48   CD 5A 0E               CALL   printStr   
4E4B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E5A   21 02 00               LD   hl,2   
4E5D   E5                     PUSH   hl   
4E5E   E5                     PUSH   hl   
4E5F   CD 5F 0F               CALL   run   
4E62   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4E6A   CD C5 0D               CALL   flushBuffer   
4E6D   CD 5A 0E               CALL   printStr   
4E70   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E7D   E1                     POP   hl   
4E7E   E5                     PUSH   hl   
4E7F   E5                     PUSH   hl   
4E80   CD 5F 0F               CALL   run   
4E83   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4E92   CD C5 0D               CALL   flushBuffer   
4E95   76                     HALT      
4E96                EXPECTM_3149S155:      
4E96   E1                     POP   HL   
4E97                             ; test "$1000 0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", $1000
4E97                             ; 
4E97   CD 5A 0E               CALL   printStr   
4E9A   44 6F 6E 65 21 00      .CSTR   "Done!"   
4EA0   76                     HALT      
4EA1                             ; executes a null teminated string (null executes exit_)
4EA1                             ; the string should be immedaitely following the call
4EA1                EXECSTR:      ; create a root stack frame
4EA1   C1                     POP   bc   ; bc = code*
4EA2   0B                     DEC   bc   ; dec to prepare for next routine
4EA3   11 00 00               LD   de,0   
4EA6   D5                     PUSH   de   ; push fake IP
4EA7   D5                     PUSH   de   ; push null arg_list*
4EA8   D5                     PUSH   de   ; push null first_arg*
4EA9   D5                     PUSH   de   ; push fake BP
4EAA   DD E9                  JP   (ix)   
4EAC                STKSIZE:   EQU   $100   ; Stack size
4EAC                TIBSIZE:   EQU   $100   ; 256 bytes
4EAC                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
4EAC                          ALIGN   $100   
4F00                          DS   STKSIZE   
5000                STACK:       
5000                          ALIGN   $100   
5000                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
5100                          ALIGN   $100   
5100                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5200                          ALIGN   $100   
5200                VARS:        
5200                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
52D0                RESTARTS:      
52D0                RST08:    DS   2   
52D2                RST10:    DS   2   
52D4                RST18:    DS   2   
52D6                RST20:    DS   2   
52D8                RST28:    DS   2   
52DA                RST30:    DS   2   ; 
52DC                BAUD:     DS   2   ; 
52DE                INTVEC:   DS   2   ; 
52E0                NMIVEC:   DS   2   ; 
52E2                GETCVEC:   DS   2   ; 
52E4                PUTCVEC:   DS   2   ; 
52E6                SYSVARS:      
52E6                             ; initialised sys variables (preserved)
52E6                VDATAWIDTH:   DS   2   ; 
52E8                VNUMBASE:   DS   2   ; 
52EA                VTIBPTR:   DS   2   ; 
52EC                VBUFPTR:   DS   2   ; 
52EE                VNEXT:    DS   2   ; 
52F0                VHEAPPTR:   DS   2   ; 
52F2                VRECUR:   DS   2   ; 
52F4                VDEFINE:   DS   2   ; 
52F6                             ; uninitialised sys variables (preserved)
52F6                VPOINTER:   DS   2   ; 
52F8                VREMAIN:   DS   2   ; 
52FA                VSAVEDIP:   DS   2   ; 
52FC                VSAVEDSP:   DS   2   ; 
52FE                VSAVEDNEXT:   DS   2   ; 
5300                VSAVEDBP:   DS   2   ; 
5302                             ; uninitialised sys variables (unpreserved)
5302                VTEMP1:   DS   2   ; 
5304                VTEMP2:   DS   2   ; 
5306                VTEMP3:   DS   2   ; 
5308                VLASTDEF:   DS   2   ; 
530A                TBPTR:    DS   2   ; reserved for tests
530C                TITLEBUF:   DS   20   
5320                HEAP:        
5320                             ; FUNC rangeSrc, 1, "besL"            ; range source (begin end step)
5320                             ; db "{"
5320                             ; db    "[%b /t] %L="                 ; init mutable L [index active]
5320                             ; db    "\\kt{"
5320                             ; db      "0%t!=/qt"                  ; break if type != 0
5320                             ; db      "\\dt:a{"                   ; return talkback to receive data
5320                             ; db        "%L1#!/qt"                ; if not active don't send
5320                             ; db        "%L0# %a="                ; store current index in A
5320                             ; db        "%s %L0# +="              ; inc value of index by step
5320                             ; db        "1%t!=/qt"                ; break if type != 0
5320                             ; db        "%a %e <"                 ; ifte: in range?
5320                             ; db          "{%a 1}{/f %L1#= 0 2}"  ; ifte: 1: send index, 2: active = false, send quit
5320                             ; db          "?? %k/rc"              ; ifte: call sink note: /rc recur
5320                             ; db      "} 0 %k^"                   ; init sink
5320                             ; db    "}"
5320                             ; db "}"
5320                             ; db 0
5320                             ; FUNC map, 0, "sf"                   ; map
5320                             ; db "{"
5320                             ; db    "\\kt{"
5320                             ; db      "0%t!=/qt"                  ; break if type != 0
5320                             ; db      "\\dt{"                     ; call source with tb
5320                             ; db        "1%t=="                   ; ifte: type == 1 ?
5320                             ; db        "{%d %f^}{%d}"            ; ifte: func(data) or data
5320                             ; db        "?? %t %k^"               ; ifte: send to sink
5320                             ; db      "} 0 %s^"
5320                             ; db    "}"
5320                             ; db "}"
5320                             ; db 0
5320                             ; ; /ft filter
5320                             ; ; src pred -- src1
5320                             ; FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
5320                             ; db "{"
5320                             ; db    "[0]%T="
5320                             ; db    "\\kt{"                       ; return talkback to receive data
5320                             ; db      "\\dt{"                     ; call source with tb
5320                             ; db        "["
5320                             ; db          "{%d %T0#= /t}"         ; case 0: store talkback in T[0], return true
5320                             ; db          "{%d %p^}"              ; case 1: return boolean based on predicate
5320                             ; db          "{/t}"                  ; case 2: return true
5320                             ; db        "]%t#^"                   ; select on %t
5320                             ; db        "{%d %t %k^}{0 1 %T0#^}"  ; ifte: true send d to sink, false send 1 to talkback
5320                             ; db        "??"
5320                             ; db      "} 0 %s^"
5320                             ; db    "}"
5320                             ; db "}"
5320                             ; db 0
5320                             ; FUNC forEach, 1, "spT"
5320                             ; db "{"
5320                             ; db    "[0]%T="
5320                             ; db    "\\dt{"                       ; return talkback to receive data ; $56AA
5320                             ; db      "2%t==/qt"                    ; if type == 2 skip
5320                             ; db      "0%t=="                   ; ifte: type = 0 ?
5320                             ; db      "{%d %T0#=}{%d %p^}"      ; ifte: 0: store talkback, 1: send data
5320                             ; db      "??"                      ; ifte:
5320                             ; db      "0 1 %T0#^"               ; 0 or 1: get next src data item
5320                             ; db    "} 0 %s^"
5320                             ; db "}"
5320                             ; db 0
5320                             ; FUNC fold, 1, "sirA"                       ; src, init, reducer
5320                             ; db "{"                                  ; reducer: \\da00bbLi4u
5320                             ; db    "[%i]%A="
5320                             ; db    "\\kt{"                         ; return talkback to receive data
5320                             ; db      "\\dt{"                         ; call source with tb
5320                             ; db        "1%t=="                       ; ifte: type == 1 ?
5320                             ; db        "{ %d %A0# %r^ %A0#= %A0#}{%d}"      ; ifte: reduce -> acc, acc or data
5320                             ; db        "?? %t %k^"                    ; ifte: send to sink
5320                             ; db      "} 0 %s^"
5320                             ; db    "}"
5320                             ; db "}"
5320                             ; db 0


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1335 IN MAIN.asm
                    > USED AT LINE 2406 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 2188 IN MAIN.asm
                    > USED AT LINE 2243 IN MAIN.asm
                    > USED AT LINE 2390 IN MAIN.asm
                    > USED AT LINE 2452 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 287 IN MAIN.asm
                    > USED AT LINE 533 IN MAIN.asm
                    > USED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 884 IN MAIN.asm
                    > USED AT LINE 1102 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
                    > USED AT LINE 1138 IN MAIN.asm
                    > USED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 1284 IN MAIN.asm
                    > USED AT LINE 1372 IN MAIN.asm
                    > USED AT LINE 1412 IN MAIN.asm
                    > USED AT LINE 1426 IN MAIN.asm
                    > USED AT LINE 1443 IN MAIN.asm
                    > USED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 2409 IN MAIN.asm
                    > USED AT LINE 2497 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 2262 IN MAIN.asm
                    > USED AT LINE 8
                    > USED AT LINE 20
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2415 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2417 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2419 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2343 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2318 IN MAIN.asm
                    > USED AT LINE 2337 IN MAIN.asm
AT_:                0204 DEFINED AT LINE 176 IN MAIN.asm
ADDR:               0204 DEFINED AT LINE 177 IN MAIN.asm
BACKSLASH_:         020E DEFINED AT LINE 182 IN MAIN.asm
NUM_:               0211 DEFINED AT LINE 185 IN MAIN.asm
NOP_:               0214 DEFINED AT LINE 188 IN MAIN.asm
RBRACK_:            0216 DEFINED AT LINE 190 IN MAIN.asm
PERCENT_:           0219 DEFINED AT LINE 192 IN MAIN.asm
RBRACE_:            021C DEFINED AT LINE 194 IN MAIN.asm
QUOTE_:             021F DEFINED AT LINE 196 IN MAIN.asm
DOT_:               0222 DEFINED AT LINE 198 IN MAIN.asm
CARET_:             0225 DEFINED AT LINE 200 IN MAIN.asm
COMMA_:             0228 DEFINED AT LINE 202 IN MAIN.asm
DQUOTE_:            022B DEFINED AT LINE 204 IN MAIN.asm
GRAVE_:             022E DEFINED AT LINE 206 IN MAIN.asm
UNDERSCORE_:        0231 DEFINED AT LINE 209 IN MAIN.asm
SLASH_:             0234 DEFINED AT LINE 212 IN MAIN.asm
DOLLAR_:            0237 DEFINED AT LINE 215 IN MAIN.asm
QUESTION_:          023A DEFINED AT LINE 218 IN MAIN.asm
RPAREN_:            023D DEFINED AT LINE 225 IN MAIN.asm
RPAREN:             023D DEFINED AT LINE 226 IN MAIN.asm
LPAREN_:            0245 DEFINED AT LINE 237 IN MAIN.asm
LBRACE_:            0245 DEFINED AT LINE 238 IN MAIN.asm
LBRACE:             0245 DEFINED AT LINE 239 IN MAIN.asm
TILDE_:             024A DEFINED AT LINE 248 IN MAIN.asm
TILDE:              024A DEFINED AT LINE 249 IN MAIN.asm
CHAR:               024A DEFINED AT LINE 250 IN MAIN.asm
PIPE_:              0252 DEFINED AT LINE 260 IN MAIN.asm
PIPE:               0252 DEFINED AT LINE 261 IN MAIN.asm
OR:                 0252 DEFINED AT LINE 262 IN MAIN.asm
SEMICOLON_:         025B DEFINED AT LINE 280 IN MAIN.asm
SEMICOLON:          025B DEFINED AT LINE 281 IN MAIN.asm
DEFINEEND:          025B DEFINED AT LINE 282 IN MAIN.asm
DEFINEEND1:         026D DEFINED AT LINE 291 IN MAIN.asm
                    > USED AT LINE 286 IN MAIN.asm
COLON_:             026F DEFINED AT LINE 302 IN MAIN.asm
COLON:              026F DEFINED AT LINE 303 IN MAIN.asm
DEFINESTART:        027C DEFINED AT LINE 311 IN MAIN.asm
                    > USED AT LINE 307 IN MAIN.asm
LBRACK_:            0285 DEFINED AT LINE 322 IN MAIN.asm
LBRACK:             0285 DEFINED AT LINE 323 IN MAIN.asm
ARRAYSTART:         0285 DEFINED AT LINE 324 IN MAIN.asm
AMPER_:             02A1 DEFINED AT LINE 344 IN MAIN.asm
AMPER:              02A1 DEFINED AT LINE 345 IN MAIN.asm
AND:                02A1 DEFINED AT LINE 346 IN MAIN.asm
AND1:               02A8 DEFINED AT LINE 354 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
UPCASE_:            02AC DEFINED AT LINE 360 IN MAIN.asm
UPCASE:             02AC DEFINED AT LINE 361 IN MAIN.asm
LOWCASE_:           02B1 DEFINED AT LINE 365 IN MAIN.asm
LOWCASE:            02B1 DEFINED AT LINE 366 IN MAIN.asm
IDENT1:             02B6 DEFINED AT LINE 370 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
HASH_:              02C3 DEFINED AT LINE 385 IN MAIN.asm
HASH:               02C3 DEFINED AT LINE 386 IN MAIN.asm
ARRAYINDEX:         02C3 DEFINED AT LINE 387 IN MAIN.asm
ARRAYINDEX0:        02CB DEFINED AT LINE 393 IN MAIN.asm
ARRAYINDEX1:        02CC DEFINED AT LINE 395 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
ARRAYINDEX2:        02D8 DEFINED AT LINE 404 IN MAIN.asm
                    > USED AT LINE 401 IN MAIN.asm
PLUS_:              02DB DEFINED AT LINE 408 IN MAIN.asm
PLUS:               02DB DEFINED AT LINE 411 IN MAIN.asm
ADD:                02DB DEFINED AT LINE 412 IN MAIN.asm
ADD1:               02E5 DEFINED AT LINE 420 IN MAIN.asm
                    > USED AT LINE 416 IN MAIN.asm
ADD3:               02E9 DEFINED AT LINE 425 IN MAIN.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 498 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
ADD4:               02F3 DEFINED AT LINE 433 IN MAIN.asm
                    > USED AT LINE 429 IN MAIN.asm
STAR_:              02F5 DEFINED AT LINE 436 IN MAIN.asm
MINUS_:             02F7 DEFINED AT LINE 438 IN MAIN.asm
BANG_:              02F9 DEFINED AT LINE 440 IN MAIN.asm
EQ_:                02FB DEFINED AT LINE 442 IN MAIN.asm
GT_:                02FD DEFINED AT LINE 444 IN MAIN.asm
LT_:                02FF DEFINED AT LINE 446 IN MAIN.asm
STAR:               0301 DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 437 IN MAIN.asm
MUL:                0301 DEFINED AT LINE 454 IN MAIN.asm
MUL2:               0303 DEFINED AT LINE 457 IN MAIN.asm
MUL3:               030B DEFINED AT LINE 462 IN MAIN.asm
                    > USED AT LINE 471 IN MAIN.asm
MINUS:              031D DEFINED AT LINE 477 IN MAIN.asm
                    > USED AT LINE 439 IN MAIN.asm
SUB:                0329 DEFINED AT LINE 485 IN MAIN.asm
                    > USED AT LINE 482 IN MAIN.asm
SUB1:               0332 DEFINED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 488 IN MAIN.asm
ASSIGN:             033A DEFINED AT LINE 501 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
ASSIGN0:            033C DEFINED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 434 IN MAIN.asm
                    > USED AT LINE 491 IN MAIN.asm
ASSIGN1:            0340 DEFINED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 290 IN MAIN.asm
ASSIGN2:            0349 DEFINED AT LINE 514 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
BANG:               034B DEFINED AT LINE 517 IN MAIN.asm
                    > USED AT LINE 441 IN MAIN.asm
NOT:                0355 DEFINED AT LINE 525 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
EQ:                 035B DEFINED AT LINE 529 IN MAIN.asm
                    > USED AT LINE 443 IN MAIN.asm
EQ0_:               0364 DEFINED AT LINE 536 IN MAIN.asm
EQ1:                0365 DEFINED AT LINE 538 IN MAIN.asm
                    > USED AT LINE 528 IN MAIN.asm
GT:                 0368 DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 445 IN MAIN.asm
LT:                 0372 DEFINED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
LT1:                037A DEFINED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
EQUALS:             0381 DEFINED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
NOTEQUALS:          0388 DEFINED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 524 IN MAIN.asm
LESSTHANEQ:         038F DEFINED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
LESSTHAN:           0394 DEFINED AT LINE 586 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
LESSTHAN1:          0399 DEFINED AT LINE 591 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
TRUE1:              039C DEFINED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 568 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
                    > USED AT LINE 1161 IN MAIN.asm
NULL1:              03A2 DEFINED AT LINE 598 IN MAIN.asm
FALSE1:             03A2 DEFINED AT LINE 599 IN MAIN.asm
                    > USED AT LINE 569 IN MAIN.asm
                    > USED AT LINE 575 IN MAIN.asm
                    > USED AT LINE 589 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 1406 IN MAIN.asm
SHIFTLEFT:          03A8 DEFINED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 554 IN MAIN.asm
SHIFTLEFT1:         03B0 DEFINED AT LINE 613 IN MAIN.asm
                    > USED AT LINE 616 IN MAIN.asm
SHIFTLEFT2:         03B1 DEFINED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
SHIFTRIGHT:         03B8 DEFINED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 546 IN MAIN.asm
SHIFTRIGHT1:        03C0 DEFINED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 634 IN MAIN.asm
SHIFTRIGHT2:        03C4 DEFINED AT LINE 633 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
DOLLAR:             03CB DEFINED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
HEXNUM:             03CB DEFINED AT LINE 641 IN MAIN.asm
HEXNUM1:            03CE DEFINED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 660 IN MAIN.asm
HEXNUM2:            03D6 DEFINED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 647 IN MAIN.asm
QUESTION:           03E8 DEFINED AT LINE 664 IN MAIN.asm
                    > USED AT LINE 219 IN MAIN.asm
IF:                 03E8 DEFINED AT LINE 665 IN MAIN.asm
IFTE:               03F4 DEFINED AT LINE 675 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
IFTE1:              03F5 DEFINED AT LINE 677 IN MAIN.asm
                    > USED AT LINE 672 IN MAIN.asm
BACKSLASH:          0401 DEFINED AT LINE 688 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
LAMBDA:             0401 DEFINED AT LINE 689 IN MAIN.asm
LAMBDA1:            0406 DEFINED AT LINE 692 IN MAIN.asm
                    > USED AT LINE 696 IN MAIN.asm
LAMBDA2:            0416 DEFINED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
DIV:                0422 DEFINED AT LINE 710 IN MAIN.asm
                    > USED AT LINE 1139 IN MAIN.asm
DIVIDE:             0433 DEFINED AT LINE 724 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
DIVIDE1:            0438 DEFINED AT LINE 727 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
DIVIDE2:            0445 DEFINED AT LINE 735 IN MAIN.asm
                    > USED AT LINE 732 IN MAIN.asm
DIVIDE3:            0446 DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
NUM:                044C DEFINED AT LINE 745 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
NUM0:               0455 DEFINED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
NUM1:               0456 DEFINED AT LINE 753 IN MAIN.asm
                    > USED AT LINE 770 IN MAIN.asm
NUM2:               046E DEFINED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
                    > USED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
NUM3:               0479 DEFINED AT LINE 779 IN MAIN.asm
                    > USED AT LINE 774 IN MAIN.asm
GRAVE:              047C DEFINED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
QUOTE:              047C DEFINED AT LINE 786 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
DQUOTE:             047C DEFINED AT LINE 787 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
STRING:             047C DEFINED AT LINE 788 IN MAIN.asm
STRING1:            0487 DEFINED AT LINE 797 IN MAIN.asm
                    > USED AT LINE 805 IN MAIN.asm
STRING2:            048A DEFINED AT LINE 801 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
STRING3:            0490 DEFINED AT LINE 806 IN MAIN.asm
                    > USED AT LINE 804 IN MAIN.asm
PERCENT:            04A3 DEFINED AT LINE 826 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
ARG:                04A3 DEFINED AT LINE 827 IN MAIN.asm
ARG0:               04BF DEFINED AT LINE 846 IN MAIN.asm
                    > USED AT LINE 852 IN MAIN.asm
ARG0A:              04C8 DEFINED AT LINE 854 IN MAIN.asm
                    > USED AT LINE 833 IN MAIN.asm
                    > USED AT LINE 838 IN MAIN.asm
ARG1:               04CD DEFINED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
ARG1A:              04D5 DEFINED AT LINE 864 IN MAIN.asm
                    > USED AT LINE 856 IN MAIN.asm
DOT:                0500 DEFINED AT LINE 874 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
DOTNUMBER_:         050F DEFINED AT LINE 889 IN MAIN.asm
                    > USED AT LINE 885 IN MAIN.asm
DOTDEC:             051A DEFINED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
DOTDEC0:            0534 DEFINED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
DOTDEC1:            0544 DEFINED AT LINE 927 IN MAIN.asm
                    > USED AT LINE 915 IN MAIN.asm
DOTDEC2:            0564 DEFINED AT LINE 941 IN MAIN.asm
                    > USED AT LINE 930 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
                    > USED AT LINE 936 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
DOTDEC3:            0566 DEFINED AT LINE 943 IN MAIN.asm
                    > USED AT LINE 946 IN MAIN.asm
DOTDEC4:            0576 DEFINED AT LINE 955 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
DOTDEC5:            0577 DEFINED AT LINE 957 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
DOTHEX:             0580 DEFINED AT LINE 968 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
DOTHEX1:            05A1 DEFINED AT LINE 986 IN MAIN.asm
                    > USED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 978 IN MAIN.asm
DOTHEX2:            05AA DEFINED AT LINE 994 IN MAIN.asm
                    > USED AT LINE 992 IN MAIN.asm
DOTSTRING_:         05B8 DEFINED AT LINE 1007 IN MAIN.asm
DOTSTRING0:         05BF DEFINED AT LINE 1011 IN MAIN.asm
                    > USED AT LINE 1019 IN MAIN.asm
DOTSTRING1:         05C5 DEFINED AT LINE 1016 IN MAIN.asm
                    > USED AT LINE 1010 IN MAIN.asm
DOTCHAR_:           05D2 DEFINED AT LINE 1026 IN MAIN.asm
DOTXCHARS_:         05D7 DEFINED AT LINE 1032 IN MAIN.asm
DOTXCHARS0:         05D8 DEFINED AT LINE 1034 IN MAIN.asm
                    > USED AT LINE 1028 IN MAIN.asm
DOTXCHARS1:         05E1 DEFINED AT LINE 1040 IN MAIN.asm
                    > USED AT LINE 1050 IN MAIN.asm
DOTXCHARS2:         05E9 DEFINED AT LINE 1047 IN MAIN.asm
                    > USED AT LINE 1039 IN MAIN.asm
SLASH:              0600 DEFINED AT LINE 1059 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
COMMAND:            0600 DEFINED AT LINE 1060 IN MAIN.asm
COMMAND_M_:         0626 DEFINED AT LINE 1096 IN MAIN.asm
COMMAND_P_:         0629 DEFINED AT LINE 1100 IN MAIN.asm
COMMAND_Q_:         0630 DEFINED AT LINE 1106 IN MAIN.asm
COMMAND_R_:         0639 DEFINED AT LINE 1114 IN MAIN.asm
COMMAND_S_:         063C DEFINED AT LINE 1118 IN MAIN.asm
COMMAND_V_:         063F DEFINED AT LINE 1122 IN MAIN.asm
COMMAND_NOP_:       0642 DEFINED AT LINE 1126 IN MAIN.asm
DECIMAL_:           0644 DEFINED AT LINE 1130 IN MAIN.asm
DECIMAL1:           0647 DEFINED AT LINE 1132 IN MAIN.asm
                    > USED AT LINE 1149 IN MAIN.asm
DIV_:               064C DEFINED AT LINE 1137 IN MAIN.asm
ERROR1_:            0650 DEFINED AT LINE 1142 IN MAIN.asm
                    > USED AT LINE 1103 IN MAIN.asm
                    > USED AT LINE 1111 IN MAIN.asm
                    > USED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 1413 IN MAIN.asm
                    > USED AT LINE 1427 IN MAIN.asm
                    > USED AT LINE 1444 IN MAIN.asm
                    > USED AT LINE 1467 IN MAIN.asm
HEXADECIMAL_:       0656 DEFINED AT LINE 1147 IN MAIN.asm
KEY_:               065C DEFINED AT LINE 1152 IN MAIN.asm
OUTPUT_:            065F DEFINED AT LINE 1156 IN MAIN.asm
TRUE_:              0662 DEFINED AT LINE 1160 IN MAIN.asm
WORDS_:             0665 DEFINED AT LINE 1164 IN MAIN.asm
ADDROF_:            0668 DEFINED AT LINE 1168 IN MAIN.asm
ARRAYITER_:         066B DEFINED AT LINE 1172 IN MAIN.asm
COLDSTART_:         066E DEFINED AT LINE 1177 IN MAIN.asm
WORDS:              0671 DEFINED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 1165 IN MAIN.asm
BYTES_:             0677 DEFINED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 1210 IN MAIN.asm
BYTES1:             067A DEFINED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
COMMAND_I_:         067F DEFINED AT LINE 1195 IN MAIN.asm
COMMAND_B_:         0688 DEFINED AT LINE 1203 IN MAIN.asm
COMMENT:            0693 DEFINED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1064 IN MAIN.asm
                    > USED AT LINE 1218 IN MAIN.asm
QUIT_:              069C DEFINED AT LINE 1225 IN MAIN.asm
QUIT1:              06A3 DEFINED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
INPUT_:             06A6 DEFINED AT LINE 1237 IN MAIN.asm
ARRAYSIZE_:         06B1 DEFINED AT LINE 1250 IN MAIN.asm
XOR_:               06B9 DEFINED AT LINE 1260 IN MAIN.asm
XOR1:               06BA DEFINED AT LINE 1262 IN MAIN.asm
COMMAND_A_:         06C4 DEFINED AT LINE 1274 IN MAIN.asm
BREAK_:             06D3 DEFINED AT LINE 1290 IN MAIN.asm
BREAK:              06D3 DEFINED AT LINE 1291 IN MAIN.asm
BREAK1:             06DA DEFINED AT LINE 1297 IN MAIN.asm
                    > USED AT LINE 1295 IN MAIN.asm
ABSOLUTE_:          06ED DEFINED AT LINE 1311 IN MAIN.asm
COMMAND_F_:         06FA DEFINED AT LINE 1325 IN MAIN.asm
KEY:                0700 DEFINED AT LINE 1334 IN MAIN.asm
                    > USED AT LINE 1153 IN MAIN.asm
OUTPUT:             0709 DEFINED AT LINE 1343 IN MAIN.asm
                    > USED AT LINE 1157 IN MAIN.asm
COMMAND_F:          0712 DEFINED AT LINE 1352 IN MAIN.asm
                    > USED AT LINE 1326 IN MAIN.asm
FOREACH_:           072B DEFINED AT LINE 1375 IN MAIN.asm
FLUSH_:             072E DEFINED AT LINE 1380 IN MAIN.asm
FILTER_:            0733 DEFINED AT LINE 1384 IN MAIN.asm
FOLD_:              0736 DEFINED AT LINE 1387 IN MAIN.asm
FUNCSRC_:           0739 DEFINED AT LINE 1390 IN MAIN.asm
F1_:                073C DEFINED AT LINE 1393 IN MAIN.asm
F2_:                073F DEFINED AT LINE 1396 IN MAIN.asm
F3_:                0742 DEFINED AT LINE 1399 IN MAIN.asm
F4_:                0745 DEFINED AT LINE 1402 IN MAIN.asm
FALSE_:             0748 DEFINED AT LINE 1405 IN MAIN.asm
                    > USED AT LINE 1373 IN MAIN.asm
COMMAND_M:          074B DEFINED AT LINE 1408 IN MAIN.asm
                    > USED AT LINE 1097 IN MAIN.asm
MAP_:               0754 DEFINED AT LINE 1415 IN MAIN.asm
COMMAND_R:          0757 DEFINED AT LINE 1418 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
RECUR_:             0764 DEFINED AT LINE 1429 IN MAIN.asm
REMAIN_:            076A DEFINED AT LINE 1434 IN MAIN.asm
COMMAND_S:          0770 DEFINED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 1119 IN MAIN.asm
STRINGITER_:        0779 DEFINED AT LINE 1446 IN MAIN.asm
RANGESRC_:          077C DEFINED AT LINE 1449 IN MAIN.asm
COMMAND_V:          077F DEFINED AT LINE 1452 IN MAIN.asm
                    > USED AT LINE 1123 IN MAIN.asm
CONSTBUFSTART_:     0792 DEFINED AT LINE 1469 IN MAIN.asm
CONSTHEAPSTART_:    0797 DEFINED AT LINE 1473 IN MAIN.asm
CONSTTIBSTART_:     079C DEFINED AT LINE 1477 IN MAIN.asm
VARBUFPTR_:         07A1 DEFINED AT LINE 1481 IN MAIN.asm
VARHEAPPTR_:        07AA DEFINED AT LINE 1486 IN MAIN.asm
VARTIBPTR_:         07B3 DEFINED AT LINE 1491 IN MAIN.asm
VARIABLE:           07BC DEFINED AT LINE 1496 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
                    > USED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 1489 IN MAIN.asm
                    > USED AT LINE 1494 IN MAIN.asm
CONSTANT:           07BF DEFINED AT LINE 1498 IN MAIN.asm
                    > USED AT LINE 1471 IN MAIN.asm
                    > USED AT LINE 1475 IN MAIN.asm
                    > USED AT LINE 1479 IN MAIN.asm
RANGESRC:           07C2 DEFINED AT LINE 32
                    > USED AT LINE 1450 IN MAIN.asm
RANGESRCM_1910S1511: 07D1 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          083E DEFINED AT LINE 32
                    > USED AT LINE 1173 IN MAIN.asm
ARRAYITERM_1929S1531: 084B DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         08BF DEFINED AT LINE 32
                    > USED AT LINE 1447 IN MAIN.asm
STRINGITERM_1948S1551: 08CC DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                0945 DEFINED AT LINE 32
                    > USED AT LINE 1416 IN MAIN.asm
MAPM_1968S1573:     0952 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             0987 DEFINED AT LINE 32
                    > USED AT LINE 1385 IN MAIN.asm
FILTERM_1982S1588:  0995 DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               09E5 DEFINED AT LINE 32
                    > USED AT LINE 1388 IN MAIN.asm
FOLDM_2001S1608:    09F4 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            0A37 DEFINED AT LINE 32
                    > USED AT LINE 1376 IN MAIN.asm
FOREACHM_2015S1623: 0A45 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0A83 DEFINED AT LINE 32
                    > USED AT LINE 1391 IN MAIN.asm
FUNCSRCM_2029S1638: 0A8F DEFINED AT LINE 39
                    > USED AT LINE 35
DOTARRAY:           0ABC DEFINED AT LINE 32
DOTARRAYM_2039S1649: 0ACA DEFINED AT LINE 39
                    > USED AT LINE 35
UNDERSCORE:         0B04 DEFINED AT LINE 1659 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
COMMA:              0B04 DEFINED AT LINE 1660 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
ADDROF:             0B06 DEFINED AT LINE 1669 IN MAIN.asm
                    > USED AT LINE 1169 IN MAIN.asm
ADDROF1:            0B1A DEFINED AT LINE 1681 IN MAIN.asm
                    > USED AT LINE 1677 IN MAIN.asm
ADDROF2:            0B25 DEFINED AT LINE 1690 IN MAIN.asm
                    > USED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 1675 IN MAIN.asm
                    > USED AT LINE 1680 IN MAIN.asm
RBRACK:             0B27 DEFINED AT LINE 1694 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
ARRAYEND:           0B27 DEFINED AT LINE 1695 IN MAIN.asm
ARRAYEND1:          0B43 DEFINED AT LINE 1712 IN MAIN.asm
                    > USED AT LINE 1729 IN MAIN.asm
ARRAYEND2:          0B53 DEFINED AT LINE 1722 IN MAIN.asm
                    > USED AT LINE 1718 IN MAIN.asm
ARRAYEND3:          0B58 DEFINED AT LINE 1726 IN MAIN.asm
                    > USED AT LINE 1711 IN MAIN.asm
RBRACE:             0B77 DEFINED AT LINE 1748 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
BLOCKEND:           0B77 DEFINED AT LINE 1749 IN MAIN.asm
                    > USED AT LINE 1232 IN MAIN.asm
                    > USED AT LINE 1306 IN MAIN.asm
BLOCKEND1:          0BA9 DEFINED AT LINE 1771 IN MAIN.asm
                    > USED AT LINE 1764 IN MAIN.asm
BLOCKEND2:          0BB5 DEFINED AT LINE 1778 IN MAIN.asm
                    > USED AT LINE 1770 IN MAIN.asm
BLOCKEND3:          0BC7 DEFINED AT LINE 1792 IN MAIN.asm
                    > USED AT LINE 1784 IN MAIN.asm
BLOCKEND4:          0BDB DEFINED AT LINE 1802 IN MAIN.asm
                    > USED AT LINE 1800 IN MAIN.asm
CARET:              0BE4 DEFINED AT LINE 1810 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
GO:                 0BE4 DEFINED AT LINE 1811 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0BE5 DEFINED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
                    > USED AT LINE 1805 IN MAIN.asm
GO2:                0BEB DEFINED AT LINE 1818 IN MAIN.asm
                    > USED AT LINE 1816 IN MAIN.asm
GOBLOCK:            0BF6 DEFINED AT LINE 1825 IN MAIN.asm
                    > USED AT LINE 1821 IN MAIN.asm
GOBLOCK2:           0C1B DEFINED AT LINE 1842 IN MAIN.asm
                    > USED AT LINE 1923 IN MAIN.asm
GOBLOCK3:           0C25 DEFINED AT LINE 1848 IN MAIN.asm
GOFUNC:             0C29 DEFINED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 1823 IN MAIN.asm
GOFUNC1:            0C42 DEFINED AT LINE 1871 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
GOFUNC2:            0C48 DEFINED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 1870 IN MAIN.asm
GOFUNC3:            0C53 DEFINED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1860 IN MAIN.asm
GOFUNC4:            0C6B DEFINED AT LINE 1901 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
GOFUNC5:            0C6E DEFINED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
GOFUNC6:            0C71 DEFINED AT LINE 1908 IN MAIN.asm
                    > USED AT LINE 1903 IN MAIN.asm
GOFUNC7:            0C74 DEFINED AT LINE 1911 IN MAIN.asm
GOFUNC8:            0C78 DEFINED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 1836 IN MAIN.asm
                    > USED AT LINE 1900 IN MAIN.asm
PARSEARGS:          0C83 DEFINED AT LINE 1933 IN MAIN.asm
                    > USED AT LINE 691 IN MAIN.asm
PARSEARGS1:         0C8D DEFINED AT LINE 1940 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
PARSEARGS1A:        0C95 DEFINED AT LINE 1946 IN MAIN.asm
                    > USED AT LINE 1943 IN MAIN.asm
PARSEARGS2:         0C9D DEFINED AT LINE 1951 IN MAIN.asm
PARSEARGS3:         0CA5 DEFINED AT LINE 1959 IN MAIN.asm
                    > USED AT LINE 1945 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
PARSEARGS4:         0CA8 DEFINED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
                    > USED AT LINE 1950 IN MAIN.asm
PARSEARGS5:         0CAE DEFINED AT LINE 1968 IN MAIN.asm
                    > USED AT LINE 1966 IN MAIN.asm
PARSEBLOCK:         0CB9 DEFINED AT LINE 1981 IN MAIN.asm
                    > USED AT LINE 240 IN MAIN.asm
                    > USED AT LINE 702 IN MAIN.asm
PARSEBLOCK1:        0CBD DEFINED AT LINE 1985 IN MAIN.asm
                    > USED AT LINE 1989 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
                    > USED AT LINE 2014 IN MAIN.asm
                    > USED AT LINE 2019 IN MAIN.asm
                    > USED AT LINE 2023 IN MAIN.asm
PARSEBLOCK2:        0CE9 DEFINED AT LINE 2012 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
                    > USED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 2003 IN MAIN.asm
PARSEBLOCK3:        0CEC DEFINED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 2006 IN MAIN.asm
                    > USED AT LINE 2008 IN MAIN.asm
                    > USED AT LINE 2010 IN MAIN.asm
PARSEBLOCK4:        0CF4 DEFINED AT LINE 2021 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
PARSEBLOCK5:        0CF7 DEFINED AT LINE 2024 IN MAIN.asm
                    > USED AT LINE 2020 IN MAIN.asm
PARSEBLOCK6:        0D1F DEFINED AT LINE 2043 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
CREATEFUNC:         0D23 DEFINED AT LINE 2051 IN MAIN.asm
                    > USED AT LINE 703 IN MAIN.asm
CREATEFUNC0:        0D42 DEFINED AT LINE 2065 IN MAIN.asm
                    > USED AT LINE 2061 IN MAIN.asm
CREATEFUNC1:        0D5A DEFINED AT LINE 2084 IN MAIN.asm
                    > USED AT LINE 2080 IN MAIN.asm
CREATEFUNC2:        0D6D DEFINED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2093 IN MAIN.asm
CREATEFUNC2A:       0D8C DEFINED AT LINE 2123 IN MAIN.asm
                    > USED AT LINE 2110 IN MAIN.asm
CREATEFUNC3:        0D9B DEFINED AT LINE 2135 IN MAIN.asm
                    > USED AT LINE 2145 IN MAIN.asm
CREATEFUNC4:        0DA6 DEFINED AT LINE 2146 IN MAIN.asm
CREATEFUNC5:        0DA7 DEFINED AT LINE 2148 IN MAIN.asm
                    > USED AT LINE 2064 IN MAIN.asm
FLUSHBUFFER:        0DC5 DEFINED AT LINE 2172 IN MAIN.asm
                    > USED AT LINE 905 IN MAIN.asm
                    > USED AT LINE 962 IN MAIN.asm
                    > USED AT LINE 974 IN MAIN.asm
                    > USED AT LINE 982 IN MAIN.asm
                    > USED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 1014 IN MAIN.asm
                    > USED AT LINE 1045 IN MAIN.asm
                    > USED AT LINE 1381 IN MAIN.asm
                    > USED AT LINE 2373 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
PRINTCHARS1:        0DDC DEFINED AT LINE 2186 IN MAIN.asm
                    > USED AT LINE 2195 IN MAIN.asm
PRINTCHARS2:        0DE2 DEFINED AT LINE 2191 IN MAIN.asm
                    > USED AT LINE 2181 IN MAIN.asm
COMMANDTABLE:       0DE7 DEFINED AT LINE 2198 IN MAIN.asm
                    > USED AT LINE 1066 IN MAIN.asm
COMMANDTABLE1:      0DF1 DEFINED AT LINE 2205 IN MAIN.asm
                    > USED AT LINE 2214 IN MAIN.asm
COMMANDTABLE2:      0DF6 DEFINED AT LINE 2211 IN MAIN.asm
                    > USED AT LINE 2202 IN MAIN.asm
                    > USED AT LINE 2204 IN MAIN.asm
JUMPTABLE:          0DFB DEFINED AT LINE 2220 IN MAIN.asm
                    > USED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
                    > USED AT LINE 1353 IN MAIN.asm
                    > USED AT LINE 1409 IN MAIN.asm
                    > USED AT LINE 1419 IN MAIN.asm
                    > USED AT LINE 1440 IN MAIN.asm
                    > USED AT LINE 1453 IN MAIN.asm
JUMPTABLE0:         0DFD DEFINED AT LINE 2223 IN MAIN.asm
                    > USED AT LINE 2232 IN MAIN.asm
JUMPTABLE1:         0E09 DEFINED AT LINE 2233 IN MAIN.asm
                    > USED AT LINE 2229 IN MAIN.asm
JUMPTABLE2:         0E0C DEFINED AT LINE 2237 IN MAIN.asm
                    > USED AT LINE 2226 IN MAIN.asm
PRTSTR0:            0E0F DEFINED AT LINE 2242 IN MAIN.asm
                    > USED AT LINE 2248 IN MAIN.asm
PRTSTR:             0E13 DEFINED AT LINE 2245 IN MAIN.asm
                    > USED AT LINE 2312 IN MAIN.asm
                    > USED AT LINE 2369 IN MAIN.asm
NESTING:            0E18 DEFINED AT LINE 2261 IN MAIN.asm
                    > USED AT LINE 2395 IN MAIN.asm
                    > USED AT LINE 2453 IN MAIN.asm
NESTING0:           0E22 DEFINED AT LINE 2267 IN MAIN.asm
                    > USED AT LINE 2263 IN MAIN.asm
                    > USED AT LINE 2265 IN MAIN.asm
NESTING1A:          0E29 DEFINED AT LINE 2272 IN MAIN.asm
                    > USED AT LINE 2269 IN MAIN.asm
NESTING1:           0E2C DEFINED AT LINE 2275 IN MAIN.asm
                    > USED AT LINE 2266 IN MAIN.asm
NESTING2:           0E3B DEFINED AT LINE 2284 IN MAIN.asm
                    > USED AT LINE 2279 IN MAIN.asm
                    > USED AT LINE 2281 IN MAIN.asm
NESTING3:           0E3D DEFINED AT LINE 2287 IN MAIN.asm
                    > USED AT LINE 2283 IN MAIN.asm
NESTING4:           0E48 DEFINED AT LINE 2294 IN MAIN.asm
                    > USED AT LINE 2289 IN MAIN.asm
                    > USED AT LINE 2291 IN MAIN.asm
PROMPT:             0E4A DEFINED AT LINE 2298 IN MAIN.asm
                    > USED AT LINE 2374 IN MAIN.asm
CRLF:               0E53 DEFINED AT LINE 2303 IN MAIN.asm
                    > USED AT LINE 2466 IN MAIN.asm
PRINTSTR:           0E5A DEFINED AT LINE 2310 IN MAIN.asm
                    > USED AT LINE 2299 IN MAIN.asm
                    > USED AT LINE 2304 IN MAIN.asm
                    > USED AT LINE 2523 IN MAIN.asm
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 36
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 160
INIT:               0E61 DEFINED AT LINE 2317 IN MAIN.asm
                    > USED AT LINE 2366 IN MAIN.asm
INIT1:              0E69 DEFINED AT LINE 2321 IN MAIN.asm
                    > USED AT LINE 2327 IN MAIN.asm
WARMINIT:           0E71 DEFINED AT LINE 2329 IN MAIN.asm
COLDBOOT0:          0E84 DEFINED AT LINE 2336 IN MAIN.asm
                    > USED AT LINE 2324 IN MAIN.asm
                    > USED AT LINE 2362 IN MAIN.asm
COLDINIT:           0E8E DEFINED AT LINE 2342 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0E9F DEFINED AT LINE 2351 IN MAIN.asm
                    > USED AT LINE 2354 IN MAIN.asm
COLDSTART:          0EAC DEFINED AT LINE 2360 IN MAIN.asm
                    > USED AT LINE 1178 IN MAIN.asm
START:              0EB5 DEFINED AT LINE 2364 IN MAIN.asm
START1:             0EBB DEFINED AT LINE 2367 IN MAIN.asm
                    > USED AT LINE 2334 IN MAIN.asm
                    > USED AT LINE 2363 IN MAIN.asm
INTERPRET:          0EC1 DEFINED AT LINE 2371 IN MAIN.asm
                    > USED AT LINE 2499 IN MAIN.asm
                    > USED AT LINE 2514 IN MAIN.asm
                    > USED AT LINE 2531 IN MAIN.asm
                    > USED AT LINE 2534 IN MAIN.asm
                    > USED AT LINE 2539 IN MAIN.asm
INTERPRET2:         0ED0 DEFINED AT LINE 2380 IN MAIN.asm
                    > USED AT LINE 2444 IN MAIN.asm
                    > USED AT LINE 2521 IN MAIN.asm
                    > USED AT LINE 2525 IN MAIN.asm
INTERPRET3:         0ED8 DEFINED AT LINE 2388 IN MAIN.asm
                    > USED AT LINE 2401 IN MAIN.asm
INTERPRET4:         0EE3 DEFINED AT LINE 2397 IN MAIN.asm
                    > USED AT LINE 2386 IN MAIN.asm
INTERPRET5:         0EE8 DEFINED AT LINE 2404 IN MAIN.asm
                    > USED AT LINE 2454 IN MAIN.asm
                    > USED AT LINE 2469 IN MAIN.asm
INTERPRET5A:        0F06 DEFINED AT LINE 2441 IN MAIN.asm
INTERPRET6:         0F08 DEFINED AT LINE 2446 IN MAIN.asm
                    > USED AT LINE 2408 IN MAIN.asm
INTERPRET7:         0F16 DEFINED AT LINE 2456 IN MAIN.asm
                    > USED AT LINE 2413 IN MAIN.asm
INTERPRET8:         0F29 DEFINED AT LINE 2471 IN MAIN.asm
                    > USED AT LINE 2411 IN MAIN.asm
NEXT:               0F44 DEFINED AT LINE 2484 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2488 IN MAIN.asm
NEXT1:              0F54 DEFINED AT LINE 2496 IN MAIN.asm
                    > USED AT LINE 2489 IN MAIN.asm
EXIT:               0F5B DEFINED AT LINE 2501 IN MAIN.asm
                    > USED AT LINE 2498 IN MAIN.asm
RUN:                0F5F DEFINED AT LINE 2505 IN MAIN.asm
                    > USED AT LINE 2512 IN MAIN.asm
                    > USED AT LINE 2529 IN MAIN.asm
                    > USED AT LINE 2537 IN MAIN.asm
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
ERROR:              0F63 DEFINED AT LINE 2510 IN MAIN.asm
                    > USED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 700 IN MAIN.asm
                    > USED AT LINE 1144 IN MAIN.asm
BACKSPACE_:         0F77 DEFINED AT LINE 2518 IN MAIN.asm
                    > USED AT LINE 2418 IN MAIN.asm
EDIT_:              0F87 DEFINED AT LINE 2528 IN MAIN.asm
                    > USED AT LINE 2416 IN MAIN.asm
REEDIT_:            0F9F DEFINED AT LINE 2533 IN MAIN.asm
                    > USED AT LINE 2420 IN MAIN.asm
PRINTSTACK_:        0FA2 DEFINED AT LINE 2536 IN MAIN.asm
F1:                 0FAC DEFINED AT LINE 32
                    > USED AT LINE 1394 IN MAIN.asm
F1M_3014S12:        0FB9 DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 0FBA DEFINED AT LINE 32
                    > USED AT LINE 1397 IN MAIN.asm
F2M_3016S15:        0FC5 DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 0FC6 DEFINED AT LINE 32
                    > USED AT LINE 1400 IN MAIN.asm
F3M_3018S18:        0FD1 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 0FD2 DEFINED AT LINE 32
                    > USED AT LINE 1403 IN MAIN.asm
F4M_3020S21:        0FDD DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         1000 DEFINED AT LINE 25
                    > USED AT LINE 8
EXPECTM_3031S34:    10BC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3036S42:    113D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3037S43:    11B4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3038S44:    1229 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3039S45:    129E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3040S46:    1313 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3041S47:    1388 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3042S48:    13FF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3043S49:    1478 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3044S50:    14EF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3045S51:    1566 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3046S52:    15DD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3047S53:    1656 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3048S54:    16CF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3049S55:    174E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3050S56:    17CD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3051S57:    184A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3052S58:    18CB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3053S59:    1950 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3054S60:    19D3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3055S61:    1A50 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3056S62:    1AD5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3057S63:    1B56 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3058S64:    1BD3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3059S65:    1C50 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3060S66:    1CD5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3061S67:    1D52 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3062S68:    1DCF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3063S69:    1E4E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3064S70:    1EDD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3065S71:    1F5A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3066S72:    1FDF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3067S73:    205C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3068S74:    20E7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3069S75:    2172 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3070S76:    21FD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3071S77:    2288 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3072S78:    230D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3073S79:    238A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3074S80:    2409 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3075S81:    2488 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3076S82:    2505 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3077S83:    2582 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3078S84:    25FF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3079S85:    267C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3080S86:    26F9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3081S87:    2776 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3082S88:    27F3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3083S89:    2870 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3084S90:    28EF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3085S91:    296E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3086S92:    29ED DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3087S93:    2A6E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3088S94:    2AEF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3089S95:    2B6A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3090S96:    2BE5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3091S97:    2C66 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3092S98:    2CED DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3093S99:    2D74 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3094S100:   2DFF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3095S101:   2E94 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3096S102:   2F29 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3097S103:   2FA6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3098S104:   3025 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3099S105:   30AA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3100S106:   3133 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3101S107:   31B8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3102S108:   3247 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3103S109:   32D8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3104S110:   336F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3105S111:   340A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3106S112:   3497 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3107S113:   352A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3108S114:   35BF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3109S115:   3656 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3110S116:   36EB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3111S117:   378E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3112S118:   381F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3113S119:   38BE DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3114S120:   395F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3115S121:   3A02 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3116S122:   3AAF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3117S123:   3B5C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3118S124:   3BE9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3119S125:   3C7E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3120S126:   3D0B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3121S127:   3D9E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3122S128:   3E37 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3123S129:   3EDE DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3124S130:   3F8D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3125S131:   403C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3126S132:   40DD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3127S133:   4184 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3128S134:   4241 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3129S135:   4308 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3130S136:   43A1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3131S137:   443A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3132S138:   44C1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3133S139:   4548 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3134S140:   45CF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3135S141:   4656 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3136S142:   46D5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3137S143:   4754 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3138S144:   47D3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3139S145:   4852 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3140S146:   48DD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3141S147:   496C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3142S148:   49F9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3143S149:   4A84 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3144S150:   4B1D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3145S151:   4BBC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3146S152:   4C73 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3147S153:   4D2A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3148S154:   4DFB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_3149S155:   4E96 DEFINED AT LINE 40
                    > USED AT LINE 17
EXECSTR:            4EA1 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              5000 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1827 IN MAIN.asm
                    > USED AT LINE 2357 IN MAIN.asm
                    > USED AT LINE 2361 IN MAIN.asm
                    > USED AT LINE 2365 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                5000 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
                    > USED AT LINE 2377 IN MAIN.asm
                    > USED AT LINE 2385 IN MAIN.asm
                    > USED AT LINE 2448 IN MAIN.asm
                    > USED AT LINE 2458 IN MAIN.asm
                    > USED AT LINE 2473 IN MAIN.asm
                    > USED AT LINE 2476 IN MAIN.asm
BUF:                5100 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 1470 IN MAIN.asm
                    > USED AT LINE 2177 IN MAIN.asm
VARS:               5200 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1683 IN MAIN.asm
                    > USED AT LINE 2348 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
RESTARTS:           52D0 DEFINED AT LINE 18 IN ram.asm
RST08:              52D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              52D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              52D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              52D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              52D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              52DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               52DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             52DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             52E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            52E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            52E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            52E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2344 IN MAIN.asm
VDATAWIDTH:         52E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 390 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 1191 IN MAIN.asm
                    > USED AT LINE 1716 IN MAIN.asm
VNUMBASE:           52E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 1133 IN MAIN.asm
VTIBPTR:            52EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1492 IN MAIN.asm
                    > USED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 2378 IN MAIN.asm
                    > USED AT LINE 2475 IN MAIN.asm
VBUFPTR:            52EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 897 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
                    > USED AT LINE 983 IN MAIN.asm
                    > USED AT LINE 1009 IN MAIN.asm
                    > USED AT LINE 1020 IN MAIN.asm
                    > USED AT LINE 1021 IN MAIN.asm
                    > USED AT LINE 1038 IN MAIN.asm
                    > USED AT LINE 1051 IN MAIN.asm
                    > USED AT LINE 1482 IN MAIN.asm
                    > USED AT LINE 1483 IN MAIN.asm
                    > USED AT LINE 2176 IN MAIN.asm
                    > USED AT LINE 2178 IN MAIN.asm
VNEXT:              52EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2356 IN MAIN.asm
VHEAPPTR:           52F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 810 IN MAIN.asm
                    > USED AT LINE 1487 IN MAIN.asm
                    > USED AT LINE 1488 IN MAIN.asm
                    > USED AT LINE 1705 IN MAIN.asm
                    > USED AT LINE 1739 IN MAIN.asm
                    > USED AT LINE 1743 IN MAIN.asm
                    > USED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 1970 IN MAIN.asm
                    > USED AT LINE 2038 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
                    > USED AT LINE 2063 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
                    > USED AT LINE 2099 IN MAIN.asm
                    > USED AT LINE 2165 IN MAIN.asm
VRECUR:             52F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1431 IN MAIN.asm
                    > USED AT LINE 1797 IN MAIN.asm
                    > USED AT LINE 1804 IN MAIN.asm
VDEFINE:            52F4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 283 IN MAIN.asm
                    > USED AT LINE 288 IN MAIN.asm
                    > USED AT LINE 314 IN MAIN.asm
VPOINTER:           52F6 DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 178 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
                    > USED AT LINE 397 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 860 IN MAIN.asm
                    > USED AT LINE 1497 IN MAIN.asm
VREMAIN:            52F8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 717 IN MAIN.asm
                    > USED AT LINE 1435 IN MAIN.asm
VSAVEDIP:           52FA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 2330 IN MAIN.asm
                    > USED AT LINE 2478 IN MAIN.asm
VSAVEDSP:           52FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2331 IN MAIN.asm
                    > USED AT LINE 2479 IN MAIN.asm
VSAVEDNEXT:         52FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2332 IN MAIN.asm
                    > USED AT LINE 2480 IN MAIN.asm
VSAVEDBP:           5300 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2333 IN MAIN.asm
                    > USED AT LINE 2481 IN MAIN.asm
VTEMP1:             5302 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 1698 IN MAIN.asm
                    > USED AT LINE 1744 IN MAIN.asm
                    > USED AT LINE 1752 IN MAIN.asm
                    > USED AT LINE 1796 IN MAIN.asm
                    > USED AT LINE 1826 IN MAIN.asm
                    > USED AT LINE 1832 IN MAIN.asm
                    > USED AT LINE 1861 IN MAIN.asm
                    > USED AT LINE 1882 IN MAIN.asm
                    > USED AT LINE 1889 IN MAIN.asm
                    > USED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 2033 IN MAIN.asm
                    > USED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 2166 IN MAIN.asm
VTEMP2:             5304 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 1755 IN MAIN.asm
                    > USED AT LINE 1795 IN MAIN.asm
                    > USED AT LINE 1862 IN MAIN.asm
                    > USED AT LINE 1883 IN MAIN.asm
                    > USED AT LINE 2056 IN MAIN.asm
                    > USED AT LINE 2156 IN MAIN.asm
VTEMP3:             5306 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 2053 IN MAIN.asm
                    > USED AT LINE 2167 IN MAIN.asm
VLASTDEF:           5308 DEFINED AT LINE 60 IN ram.asm
TBPTR:              530A DEFINED AT LINE 61 IN ram.asm
TITLEBUF:           530C DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 2319 IN MAIN.asm
                    > USED AT LINE 2338 IN MAIN.asm
                    > USED AT LINE 2368 IN MAIN.asm
HEAP:               5320 DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 2026 IN MAIN.asm
