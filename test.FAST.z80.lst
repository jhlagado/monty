0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 3D               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 3D               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 3D               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 3D               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 3D               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 3D               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 3D               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 3D               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 3D               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 3D               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 3C               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 3D               LD   (RST08),HL   
0094   22 D2 3D               LD   (RST10),HL   
0097   22 D4 3D               LD   (RST18),HL   
009A   22 D6 3D               LD   (RST20),HL   
009D   22 D8 3D               LD   (RST28),HL   
00A0   22 DA 3D               LD   (RST30),HL   
00A3   22 DE 3D               LD   (INTVEC),HL   
00A6   22 E0 3D               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 3D               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 3D               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 3C               LD   SP,STACK   
00C6   CD 95 09               CALL   init   
00C9   C3 00 0B               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; ?
00CC                DC2:      EQU   18   ; ?
00CC                DC3:      EQU   19   ; ?
00CC                ESC:      EQU   27   ; ?
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; first_arg*                        -- first_arg*
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0184   20 0A                  DW   next   ; g nNext
0186   00 41                  DW   heap   ; h vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available ~ `
0220   85                     DB   lsb(nop_)   ; SP
0221   39                     DB   lsb(bang_)   ; !
0222   4D                     DB   lsb(dblquote_)   ; "
0223   41                     DB   lsb(hash_)   ; #
0224   09                     DB   lsb(dollar_)   ; $
0225   12                     DB   lsb(percent_)   ; %
0226   06                     DB   lsb(amper_)   ; &
0227   1E                     DB   lsb(tick_)   ; '
0228   6D                     DB   lsb(lparen_)   ; (
0229   87                     DB   lsb(rparen_)   ; )
022A   36                     DB   lsb(star_)   ; *
022B   00                     DB   lsb(plus_)   ; +
022C   4A                     DB   lsb(comma_)   ; ,
022D   50                     DB   lsb(minus_)   ; -
022E   24                     DB   lsb(dot_)   ; .
022F   82                     DB   lsb(slash_)   ; /	
0230   3E                     DB   lsb(num_)   ; 0
0231   3E                     DB   lsb(num_)   ; 1
0232   3E                     DB   lsb(num_)   ; 2
0233   3E                     DB   lsb(num_)   ; 3
0234   3E                     DB   lsb(num_)   ; 4
0235   3E                     DB   lsb(num_)   ; 5
0236   3E                     DB   lsb(num_)   ; 6
0237   3E                     DB   lsb(num_)   ; 7
0238   3E                     DB   lsb(num_)   ; 8
0239   3E                     DB   lsb(num_)   ; 9
023A   2A                     DB   lsb(colon_)   ; :
023B   21                     DB   lsb(semicolon_)   ; ;
023C   70                     DB   lsb(lt_)   ; <
023D   53                     DB   lsb(eq_)   ; =
023E   62                     DB   lsb(gt_)   ; >
023F   33                     DB   lsb(question_)   ; ?
0240   03                     DB   lsb(at_)   ; @
0241   2D                     DB   lsb(upcase_)   ; A
0242   2D                     DB   lsb(upcase_)   ; B
0243   2D                     DB   lsb(upcase_)   ; C
0244   2D                     DB   lsb(upcase_)   ; D
0245   2D                     DB   lsb(upcase_)   ; E
0246   2D                     DB   lsb(upcase_)   ; F
0247   2D                     DB   lsb(upcase_)   ; G
0248   2D                     DB   lsb(upcase_)   ; h
0249   2D                     DB   lsb(upcase_)   ; I
024A   2D                     DB   lsb(upcase_)   ; J
024B   2D                     DB   lsb(upcase_)   ; K
024C   2D                     DB   lsb(upcase_)   ; L
024D   2D                     DB   lsb(upcase_)   ; M
024E   2D                     DB   lsb(upcase_)   ; N
024F   2D                     DB   lsb(upcase_)   ; O
0250   2D                     DB   lsb(upcase_)   ; p
0251   2D                     DB   lsb(upcase_)   ; Q
0252   2D                     DB   lsb(upcase_)   ; R
0253   2D                     DB   lsb(upcase_)   ; S
0254   2D                     DB   lsb(upcase_)   ; T
0255   2D                     DB   lsb(upcase_)   ; U
0256   2D                     DB   lsb(upcase_)   ; V
0257   2D                     DB   lsb(upcase_)   ; W
0258   2D                     DB   lsb(upcase_)   ; X
0259   2D                     DB   lsb(upcase_)   ; Y
025A   2D                     DB   lsb(upcase_)   ; Z
025B   0C                     DB   lsb(lbrack_)   ; [
025C   15                     DB   lsb(backslash_)   ; \
025D   0F                     DB   lsb(rbrack_)   ; ]
025E   47                     DB   lsb(caret_)   ; ^
025F   27                     DB   lsb(underscore_)   ; _
0260   85                     DB   lsb(nop_)   ; `     used for testing string   	
0261   30                     DB   lsb(lowcase_)   ; a
0262   30                     DB   lsb(lowcase_)   ; b
0263   30                     DB   lsb(lowcase_)   ; c
0264   30                     DB   lsb(lowcase_)   ; d
0265   30                     DB   lsb(lowcase_)   ; e
0266   30                     DB   lsb(lowcase_)   ; f
0267   30                     DB   lsb(lowcase_)   ; g
0268   30                     DB   lsb(lowcase_)   ; h
0269   30                     DB   lsb(lowcase_)   ; i
026A   30                     DB   lsb(lowcase_)   ; j
026B   30                     DB   lsb(lowcase_)   ; k
026C   30                     DB   lsb(lowcase_)   ; l
026D   30                     DB   lsb(lowcase_)   ; m
026E   30                     DB   lsb(lowcase_)   ; n
026F   30                     DB   lsb(lowcase_)   ; o
0270   30                     DB   lsb(lowcase_)   ; p
0271   30                     DB   lsb(lowcase_)   ; q
0272   30                     DB   lsb(lowcase_)   ; r
0273   30                     DB   lsb(lowcase_)   ; s
0274   30                     DB   lsb(lowcase_)   ; t
0275   30                     DB   lsb(lowcase_)   ; u
0276   30                     DB   lsb(lowcase_)   ; v
0277   30                     DB   lsb(lowcase_)   ; w
0278   30                     DB   lsb(lowcase_)   ; x
0279   30                     DB   lsb(lowcase_)   ; y
027A   30                     DB   lsb(lowcase_)   ; z
027B   18                     DB   lsb(lbrace_)   ; {
027C   44                     DB   lsb(pipe_)   ; |
027D   1B                     DB   lsb(rbrace_)   ; }
027E   85                     DB   lsb(nop_)   ; ~
027F   85                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 8A 03               JP   plus   
0303                AT_:         
0303   C3 A4 03               JP   at   
0306                AMPER_:      
0306   C3 B0 03               JP   amper   
0309                DOLLAR_:      
0309   C3 D4 03               JP   dollar   
030C                LBRACK_:      
030C   C3 0B 04               JP   lbrack   
030F                RBRACK_:      
030F   C3 27 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 75 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 A7 05               JP   backslash   
0318                LBRACE_:      
0318   C3 D4 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 3D 05               JP   rbrace   
031E                TICK_:       
031E   C3 92 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 86 07               JP   semicolon   
0324                DOT_:        
0324   C3 D6 05               JP   dot   
0327                UNDERSCORE_:      
0327   C3 78 07               JP   underscore   
032A                COLON_:      
032A   C3 9E 04               JP   colon   
032D                UPCASE_:      
032D   C3 FC 06               JP   upcase   
0330                LOWCASE_:      
0330   C3 01 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 13 07               JP   question   
0336                STAR_:       
0336   C3 2C 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 48 07               JP   num   
0341                HASH_:       
0341   C3 DF 06               JP   hash   
0344                PIPE_:       
0344   C3 BB 03               JP   pipe   
0347                CARET_:      
0347   C3 3D 06               JP   caret   
034A                COMMA_:      
034A   C3 A9 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 C5 07               JP   dblquote   
0350                MINUS_:      
0350   C3 ED 07               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 8D 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 19 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA B2 07               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 0C                  JR   lt1   
036D                LPAREN_:      
036D   C3 3A 06               JP   lparen   
0370                LT_:         
0370   03                     INC   bc   
0371   0A                     LD   a,(bc)   
0372   FE 3C                  CP   "<"   
0374   CA A2 07               JP   z,shiftLeft   
0377   E1                     POP   hl   
0378   D1                     POP   de   
0379                LT1:         
0379   FE 3D                  CP   "="   
037B   CA 21 06               JP   z,lessthaneq   
037E   0B                     DEC   bc   
037F   C3 26 06               JP   lessthan   
0382                SLASH_:      
0382   C3 B8 05               JP   slash   
0385                NOP_:        
0385   DD E9                  JP   (ix)   
0387                RPAREN_:      
0387   C3 7E 07               JP   rparen   
038A                             ;*******************************************************************
038A                             ; word operators
038A                             ;*******************************************************************
038A                PLUS:        
038A                ADD:         
038A   03                     INC   bc   
038B   0A                     LD   a,(bc)   
038C   FE 2B                  CP   "+"   ; ++ increment variable
038E   20 05                  JR   nz,add1   
0390   E1                     POP   hl   
0391   23                     INC   hl   
0392   C3 8F 04               JP   assign0   
0395                ADD1:        
0395   0B                     DEC   bc   
0396   D1                     POP   de   ; second term
0397   E1                     POP   hl   ; first term
0398   19                     ADD   hl,de   
0399                ADD3:        
0399   03                     INC   bc   
039A   0A                     LD   a,(bc)   
039B   FE 3D                  CP   "="   ; += add to variable
039D   CA 8F 04               JP   z,assign0   
03A0   E5                     PUSH   hl   
03A1   0B                     DEC   bc   
03A2   DD E9                  JP   (ix)   
03A4                             ; @ addr
03A4                             ; -- ptr
03A4                AT:          
03A4                ADDR:        
03A4   2A EE 3D               LD   hl,(vPointer)   
03A7   E5                     PUSH   hl   
03A8   21 EE 3D               LD   hl,vPointer   
03AB   22 EE 3D               LD   (vPointer),hl   
03AE   DD E9                  JP   (ix)   
03B0                AMPER:       
03B0                AND:         
03B0   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B1   E1                     POP   hl   
03B2   7B                     LD   a,e   
03B3   A5                     AND   l   
03B4   6F                     LD   l,a   
03B5   7A                     LD   a,d   
03B6   A4                     AND   h   
03B7                AND1:        
03B7   67                     LD   h,a   
03B8   C3 99 03               JP   add3   
03BB                PIPE:        
03BB                OR:          
03BB   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03BC   E1                     POP   hl   
03BD   7B                     LD   a,e   
03BE   B5                     OR   l   
03BF   6F                     LD   l,a   
03C0   7A                     LD   a,d   
03C1   B4                     OR   h   
03C2   18 F3                  JR   and1   
03C4                XOR:         
03C4   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03C5                XOR1:        
03C5   E1                     POP   hl   
03C6   7B                     LD   a,e   
03C7   AD                     XOR   l   
03C8   6F                     LD   l,a   
03C9   7A                     LD   a,d   
03CA   AC                     XOR   h   
03CB   67                     LD   h,a   
03CC   E5                     PUSH   hl   
03CD   DD E9                  JP   (ix)   
03CF                INVERT:      ; Bitwise INVert the top member of the stack
03CF   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03D2   18 F1                  JR   xor1   
03D4                             ; $a .. $z
03D4                             ; -- value
03D4                             ; returns value of arg
03D4                DOLLAR:      
03D4                ARG:         
03D4   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03D7   FD 56 05               LD   d,(iy+5)   
03DA   EB                     EX   de,hl   
03DB   7D                     LD   a,l   ; arg_list* == null, skip
03DC   B4                     OR   h   
03DD   28 1C                  JR   z,arg0a   
03DF   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03E0   2B                     DEC   hl   
03E1   7E                     LD   a,(hl)   
03E2   23                     INC   hl   
03E3   23                     INC   hl   
03E4   B7                     OR   a   
03E5   28 14                  JR   z,arg0a   ; num_args == 0, skip
03E7   5F                     LD   e,a   ; e = a = num_args
03E8   03                     INC   bc   ; a = next char = dollar_name
03E9   0A                     LD   a,(bc)   
03EA   C5                     PUSH   bc   ; save IP
03EB   43                     LD   b,e   ; b = e = num_args
03EC   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03EF   FD 56 03               LD   d,(iy+3)   
03F2                ARG0:        
03F2   1B                     DEC   de   ; a = dollar_name, de = next arg*
03F3   1B                     DEC   de   
03F4   BE                     CP   (hl)   
03F5   28 09                  JR   z,arg1   
03F7   23                     INC   hl   ; hl = next arg_list*
03F8   10 F8                  DJNZ   arg0   
03FA   C1                     POP   bc   ; no match, restore IP
03FB                ARG0A:       
03FB   11 00 00               LD   de,0   ; return 0
03FE   18 08                  JR   arg1a   
0400                ARG1:        
0400   C1                     POP   bc   ; restore IP
0401   EB                     EX   de,hl   ; hl = arg*
0402   22 EE 3D               LD   (vPointer),hl   ; store arg* in setter
0405   5E                     LD   e,(hl)   
0406   23                     INC   hl   
0407   56                     LD   d,(hl)   ; de = arg
0408                ARG1A:       
0408   D5                     PUSH   de   ; push arg
0409   DD E9                  JP   (ix)   
040B                LBRACK:      
040B                ARRBEGIN:      
040B   11 00 00               LD   de,0   ; create stack frame
040E   D5                     PUSH   de   ; push null for IP
040F   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0412   FD 56 05               LD   d,(iy+5)   ; 
0415   D5                     PUSH   de   ; 
0416   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0419   FD 56 03               LD   d,(iy+3)   ; 
041C   D5                     PUSH   de   ; 
041D   FD E5                  PUSH   iy   ; push BP
041F   FD 21 00 00            LD   iy,0   ; BP = SP
0423   FD 39                  ADD   iy,sp   
0425   DD E9                  JP   (ix)   
0427                RBRACK:      
0427                ARREND:      
0427   FD 54                  LD   d,iyh   ; de = BP
0429   FD 5D                  LD   e,iyl   
042B   ED 43 FA 3D            LD   (vTemp1),bc   ; save IP
042F   62 6B                  LD   hl,de   ; hl = de = BP
0431   B7                     OR   a   
0432   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0434   CB 3C                  SRL   h   ; 
0436   CB 1D                  RR   l   
0438   44 4D                  LD   bc,hl   ; bc = count
043A   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = array[-2]
043D   71                     LD   (hl),c   ; write num items in length word
043E   23                     INC   hl   
043F   70                     LD   (hl),b   
0440   23                     INC   hl   ; hl = array[0], bc = count
0441                             ; de = BP, hl = array[0], bc = count
0441                ARREND1:      
0441   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0444   77                     LD   (hl),a   ; write lsb of array item
0445   23                     INC   hl   ; move to msb of array item
0446   3A E6 3D               LD   a,(vDataWidth)   ; vDataWidth=1?
0449   3D                     DEC   a   
044A   28 05                  JR   z,arrEnd2   
044C   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
044F   77                     LD   (hl),a   ; write msb of array item
0450   23                     INC   hl   ; move to next word in array
0451                ARREND2:      
0451   FD 2B                  DEC   iy   ; move to next word on stack
0453   FD 2B                  DEC   iy   
0455   0B                     DEC   bc   ; dec items count
0456   79                     LD   a,c   ; if not zero loop
0457   B0                     OR   b   
0458   20 E7                  JR   nz,arrEnd1   
045A   EB                     EX   de,hl   ; de = end of array, hl = BP
045B   F9                     LD   sp,hl   ; sp = BP
045C   E1                     POP   hl   ; de = end of array, hl = old BP
045D   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
045E   FD 62                  LD   iyh,d   
0460   FD 6B                  LD   iyl,e   
0462   D1                     POP   de   ; pop arg_list (discard)
0463   D1                     POP   de   ; pop first_arg* (discard)
0464   D1                     POP   de   ; pop IP (discard)
0465   ED 5B EC 3D            LD   de,(vHeapPtr)   ; de = array[-2]
0469   22 EC 3D               LD   (vHeapPtr),hl   ; move heap* to end of array
046C   ED 4B FA 3D            LD   bc,(vTemp1)   ; restore IP
0470   13                     INC   de   ; de = array[0]
0471   13                     INC   de   
0472   D5                     PUSH   de   ; return array[0]
0473   DD E9                  JP   (ix)   
0475                             ; index of an array, based on vDataWidth
0475                             ; array num -- value    ; also sets vPointer to address
0475                ARRINDEX:      
0475   E1                     POP   hl   ; hl = index
0476   D1                     POP   de   ; de = array
0477   3A E6 3D               LD   a,(vDataWidth)   ; a = data width
047A   3D                     DEC   a   
047B   28 01                  JR   z,arrIndex1   
047D                ARRINDEX0:      
047D   29                     ADD   hl,hl   ; if data width = 2 then double
047E                ARRINDEX1:      
047E   19                     ADD   hl,de   ; add addr
047F   22 EE 3D               LD   (vPointer),hl   ; store address in setter
0482   16 00                  LD   d,0   
0484   5E                     LD   e,(hl)   
0485   B7                     OR   a   ; check data width again
0486   28 02                  JR   z,arrIndex2   
0488   23                     INC   hl   
0489   56                     LD   d,(hl)   
048A                ARRINDEX2:      
048A   D5                     PUSH   de   
048B   DD E9                  JP   (ix)   
048D                             ; value _oldValue --            ; uses address in vPointer
048D                ASSIGN:      
048D   E1                     POP   hl   ; discard last accessed value
048E   E1                     POP   hl   ; hl = new value
048F                ASSIGN0:      
048F   EB                     EX   de,hl   ; de = new value
0490                ASSIGNX:      
0490   2A EE 3D               LD   hl,(vPointer)   
0493   73                     LD   (hl),e   
0494   3A E6 3D               LD   a,(vDataWidth)   
0497   3D                     DEC   a   ; is it byte?
0498   28 02                  JR   z,assign1   
049A   23                     INC   hl   
049B   72                     LD   (hl),d   
049C                ASSIGN1:      
049C   DD E9                  JP   (ix)   
049E                             ; arg_list - parses input (ab:c)
049E                             ; names after the : represent uninitialised locals
049E                             ; return values are the state of the stack after the block ends
049E                COLON:       
049E                ARGLIST:      
049E   11 00 00               LD   de,0   ; d = count locals, e = count args ()
04A1   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = heap*
04A4   23                     INC   hl   ; skip length field to start
04A5   23                     INC   hl   
04A6   E5                     PUSH   hl   ; save start of arg_list
04A7   03                     INC   bc   ; point to next char
04A8                ARGLIST1:      
04A8   0A                     LD   a,(bc)   
04A9   FE 3A                  CP   ":"   ; ":" switches from args to locals
04AB   20 03                  JR   nz,arglist1a   
04AD   14                     INC   d   ; non zero value local count acts as flag
04AE   18 10                  JR   arglist3   
04B0                ARGLIST1A:      
04B0   FE 41                  CP   "A"   ; < "A" terminates arg_list
04B2   38 0F                  JR   c,arglist4   
04B4   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B6   30 0B                  JR   nc,arglist4   
04B8                ARGLIST2:      
04B8   77                     LD   (hl),a   
04B9   23                     INC   hl   
04BA   1C                     INC   e   ; increase arg count
04BB   AF                     XOR   a   
04BC   B2                     OR   d   
04BD   28 01                  JR   z,arglist3   
04BF   14                     INC   d   ; if d > 0 increase local count
04C0                ARGLIST3:      
04C0   03                     INC   bc   ; point to next char
04C1   18 E5                  JR   arglist1   
04C3                ARGLIST4:      
04C3   AF                     XOR   a   
04C4   B2                     OR   d   
04C5   28 01                  JR   z,arglist5   
04C7   15                     DEC   d   ; remove initial inc
04C8                ARGLIST5:      
04C8   23                     INC   hl   
04C9   22 EC 3D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04CC   E1                     POP   hl   ; hl = start of arg_list
04CD   E5                     PUSH   hl   ; return start of arg_list
04CE   2B                     DEC   hl   ; write number of locals at start - 1
04CF   72                     LD   (hl),d   
04D0   2B                     DEC   hl   ; write number of args + locals at start - 2
04D1   73                     LD   (hl),e   
04D2   DD E9                  JP   (ix)   
04D4                LBRACE:      
04D4                BLOCK:       
04D4   C5                     PUSH   bc   ; return pointer to first { of block
04D5   03                     INC   bc   
04D6   16 01                  LD   d,1   ; nesting: count first parenthesis
04D8                BLOCK1:      ; Skip to end of definition
04D8   0A                     LD   a,(bc)   ; Get the next character
04D9   03                     INC   bc   ; Point to next character
04DA   FE 21                  CP   " " + 1   ; ignore whitespace
04DC   38 FA                  JR   c,block1   
04DE   FE 29                  CP   ")"   
04E0   28 2D                  JR   z,block4   
04E2   FE 7D                  CP   "}"   
04E4   28 29                  JR   z,block4   
04E6   FE 5D                  CP   "]"   
04E8   28 25                  JR   z,block4   
04EA   FE 28                  CP   "("   
04EC   28 16                  JR   z,block2   
04EE   FE 7B                  CP   "{"   
04F0   28 12                  JR   z,block2   
04F2   FE 5B                  CP   "["   
04F4   28 0E                  JR   z,block2   
04F6   FE 27                  CP   "'"   
04F8   28 0D                  JR   z,block3   
04FA   FE 60                  CP   "`"   
04FC   28 09                  JR   z,block3   
04FE   FE 22                  CP   $22   
0500   28 05                  JR   z,block3   
0502   18 D4                  JR   block1   
0504                BLOCK2:      
0504   14                     INC   d   
0505   18 D1                  JR   block1   
0507                BLOCK3:      
0507   3E 80                  LD   a,$80   
0509   AA                     XOR   d   
050A   47                     LD   b,a   
050B   20 CB                  JR   nz,block1   
050D   18 03                  JR   block5   
050F                BLOCK4:      
050F   15                     DEC   d   
0510   20 C6                  JR   nz,block1   ; get the next element
0512                BLOCK5:      
0512   60 69                  LD   hl,bc   ; hl = IP
0514   11 00 41               LD   de,HEAP   ; is IP pointing to object in heap
0517   B7                     OR   a   ; IP - HEAP
0518   ED 52                  SBC   hl,de   
051A   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
051C   28 1C                  JR   z,block6   
051E   60 69                  LD   hl,bc   ; hl = IP
0520   D1                     POP   de   ; de = block*
0521   ED 43 FA 3D            LD   (vTemp1),bc   ; save IP
0525   B7                     OR   a   ; bc = size
0526   ED 52                  SBC   hl,de   
0528   44 4D                  LD   bc,hl   
052A   EB                     EX   de,hl   ; hl = block* de = heap*
052B   ED 5B EC 3D            LD   de,(vHeapPtr)   
052F   D5                     PUSH   de   ; return hblock*
0530   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0532   ED 53 EC 3D            LD   (vHeapPtr),de   ; heap* += size
0536   ED 4B FA 3D            LD   bc,(vTemp1)   ; restore IP
053A                BLOCK6:      
053A   0B                     DEC   bc   ; balanced, exit
053B   DD E9                  JP   (ix)   
053D                RBRACE:      
053D                BLOCKEND:      
053D   D9                     EXX      ; de" = oldBP bc" = oldIP
053E   FD 5E 00               LD   e,(iy+0)   
0541   FD 56 01               LD   d,(iy+1)   
0544   FD 4E 06               LD   c,(iy+6)   
0547   FD 46 07               LD   b,(iy+7)   
054A   D9                     EXX      
054B   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
054E   FD 56 03               LD   d,(iy+3)   
0551   EB                     EX   de,hl   
0552   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0555   FD 56 01               LD   d,(iy+1)   
0558   13                     INC   de   ; for carry flag <=
0559   B7                     OR   a   
055A   ED 52                  SBC   hl,de   
055C   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
055E   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0560   FD 5D                  LD   e,iyl   
0562   21 08 00               LD   hl,8   
0565   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0566   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0567   18 0C                  JR   blockEnd2   
0569                BLOCKEND1:      ; same scope
0569   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
056C   FD 56 03               LD   d,(iy+3)   
056F   EB                     EX   de,hl   
0570   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0572   FD 5D                  LD   e,iyl   
0574   EB                     EX   de,hl   
0575                BLOCKEND2:      
0575   44 4D                  LD   bc,hl   ; bc = hl = BP
0577   B7                     OR   a   ; hl = BP - SP = count
0578   ED 72                  SBC   hl,sp   
057A   7D                     LD   a,l   
057B   B4                     OR   h   
057C   28 09                  JR   z,blockEnd3   
057E   C5                     PUSH   bc   ; bc = count, hl = BP
057F   44 4D                  LD   bc,hl   
0581   E1                     POP   hl   
0582   2B                     DEC   hl   ; hl = BP-1
0583   1B                     DEC   de   ; de = args*-1
0584   ED B8                  LDDR      
0586   13                     INC   de   
0587                BLOCKEND3:      
0587   EB                     EX   de,hl   ; hl = new tos
0588   F9                     LD   sp,hl   ; sp = new tos
0589   D9                     EXX      ; bc = IP, iy = oldBP
058A   D5                     PUSH   de   
058B   C5                     PUSH   bc   
058C   D9                     EXX      
058D   C1                     POP   bc   
058E   FD E1                  POP   iy   
0590   DD E9                  JP   (ix)   
0592                TICK:        
0592                CHAR:        
0592   21 00 00               LD   hl,0   ; if "" is empty or null
0595                CHAR1:       
0595   03                     INC   bc   ; point to next char
0596   0A                     LD   a,(bc)   
0597   FE 27                  CP   "'"   ; ' is the terminator
0599   28 09                  JR   z,char3   
059B   FE 5C                  CP   $5c   ; \ is the escape
059D   20 02                  JR   nz,char2   
059F   03                     INC   bc   
05A0   0A                     LD   a,(bc)   
05A1                CHAR2:       
05A1   6F                     LD   l,a   
05A2   18 F1                  JR   char1   
05A4                CHAR3:       
05A4   E5                     PUSH   hl   
05A5   DD E9                  JP   (ix)   
05A7                BACKSLASH:      
05A7   DD E9                  JP   (ix)   
05A9                             ; , discard stack item
05A9                             ; x y -- x
05A9                COMMA:       
05A9                DISCARD:      
05A9   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05AB   FD 5D                  LD   e,iyl   
05AD   EB                     EX   de,hl   
05AE   B7                     OR   a   
05AF   ED 72                  SBC   hl,sp   
05B1   CB 7C                  BIT   7,h   
05B3   20 01                  JR   nz,discard1   
05B5   E1                     POP   hl   
05B6                DISCARD1:      
05B6   DD E9                  JP   (ix)   
05B8                SLASH:       
05B8   03                     INC   bc   
05B9   0A                     LD   a,(bc)   
05BA   FE 5C                  CP   $5C   
05BC   CA 80 08               JP   z,comment   
05BF   FE 41                  CP   "A"   
05C1   D2 0C 08               JP   nc,command   
05C4   0B                     DEC   bc   
05C5   D1                     POP   de   
05C6   E1                     POP   hl   
05C7   C5                     PUSH   bc   ; preserve the IP
05C8   44 4D                  LD   bc,hl   
05CA   CD 00 06               CALL   divide   
05CD   EB                     EX   de,hl   
05CE   ED 53 F0 3D            LD   (vRemain),de   
05D2   C1                     POP   bc   
05D3   C3 99 03               JP   add3   
05D6                DOT:         
05D6   E1                     POP   hl   
05D7   03                     INC   bc   
05D8   0A                     LD   a,(bc)   
05D9   FE 68                  CP   "h"   
05DB   20 05                  JR   nz,dot1   
05DD   CD 24 09               CALL   prthex   
05E0   18 17                  JR   dot4   
05E2                DOT1:        
05E2   FE 73                  CP   "s"   
05E4   20 05                  JR   nz,dot2   
05E6   CD 47 09               CALL   prtstr   
05E9   18 0E                  JR   dot4   
05EB                DOT2:        
05EB   FE 63                  CP   "c"   
05ED   20 06                  JR   nz,dot3   
05EF   7D                     LD   a,l   
05F0   CD 85 00               CALL   putchar   
05F3   18 04                  JR   dot4   
05F5                DOT3:        
05F5   0B                     DEC   bc   
05F6   CD DC 08               CALL   prtdec   
05F9                DOT4:        
05F9   3E 20                  LD   a," "   
05FB   CD 85 00               CALL   putchar   
05FE   DD E9                  JP   (ix)   
0600                             ; division subroutine.
0600                             ; bc: divisor, de: dividend, hl: remainder
0600                DIVIDE:      
0600   21 00 00               LD   hl,0   ; zero the remainder
0603   3E 10                  LD   a,16   ; loop counter
0605                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0605   CB 21                  SLA   c   
0607   CB 10                  RL   b   
0609   ED 6A                  ADC   hl,hl   
060B   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
060D   38 03                  JR   c,divide2   
060F   0C                     INC   c   
0610   18 01                  JR   divide3   
0612                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0612   19                     ADD   hl,de   
0613                DIVIDE3:      
0613   3D                     DEC   a   
0614   20 EF                  JR   nz,divide1   
0616   50 59                  LD   de,bc   ; result from bc to de
0618   C9                     RET      
0619                             ; hl = value1, de = value2
0619                             ; hl = result
0619                EQUALS:      
0619   B7                     OR   a   ; reset the carry flag
061A   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
061C   28 10                  JR   z,true1   
061E   C3 34 06               JP   false1   
0621                             ; hl = value1 de = value2
0621                             ; hl = result
0621                LESSTHANEQ:      
0621   B7                     OR   a   
0622   ED 52                  SBC   hl,de   
0624   18 05                  JR   lessthan1   
0626                             ; hl = value1 de = value2
0626                             ; hl = result
0626                LESSTHAN:      
0626   B7                     OR   a   
0627   ED 52                  SBC   hl,de   
0629   28 09                  JR   z,false1   
062B                LESSTHAN1:      
062B   FA 34 06               JP   m,false1   
062E                TRUE1:       
062E   21 FF FF               LD   hl,TRUE   
0631   E5                     PUSH   hl   
0632   DD E9                  JP   (ix)   
0634                NULL1:       
0634                FALSE1:      
0634   21 00 00               LD   hl,FALSE   
0637   E5                     PUSH   hl   
0638   DD E9                  JP   (ix)   
063A                LPAREN:      
063A   C3 D4 04               JP   block   
063D                             ; execute a block of code which ends with }
063D                             ; creates a root scope if BP == stack
063D                             ; else uses outer scope
063D                CARET:       
063D                GO:          
063D   D1                     POP   de   ; de = block*
063E                GO1:         
063E   7B                     LD   a,e   ; if block* == null, exit
063F   B2                     OR   d   
0640   20 02                  JR   nz,go2   
0642   DD E9                  JP   (ix)   
0644                GO2:         
0644   1A                     LD   a,(de)   
0645   FE 7B                  CP   "{"   
0647   28 07                  JR   z,goBlock1   
0649   FE 28                  CP   "("   
064B   C2 83 06               JP   nz,goFunc   
064E   13                     INC   de   ; de is the address to jump back to
064F   D5                     PUSH   de   ; push de just before stack frame
0650                GOBLOCK:      
0650                GOBLOCK1:      
0650   ED 53 FA 3D            LD   (vTemp1),de   ; save de
0654   21 80 3C               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0657   FD 54                  LD   d,iyh   
0659   FD 5D                  LD   e,iyl   
065B   B7                     OR   a   ; if stack* == BP then this is the root_scope
065C   ED 52                  SBC   hl,de   
065E   ED 5B FA 3D            LD   de,(vTemp1)   ; restore de
0662   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0663   B4                     OR   h   
0664   3E 00                  LD   a,0   
0666   28 6C                  JR   z,goFunc8   
0668   C5                     PUSH   bc   ; push IP
0669   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
066C   FD 46 05               LD   b,(iy+5)   
066F   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0672   FD 66 03               LD   h,(iy+3)   
0675                GOBLOCK2:      
0675   C5                     PUSH   bc   ; arg_list*
0676   E5                     PUSH   hl   ; first_arg*
0677   FD E5                  PUSH   iy   ; push BP
0679   FD 21 00 00            LD   iy,0   ; BP = SP
067D   FD 39                  ADD   iy,sp   
067F   42 4B                  LD   bc,de   ; bc = de = block*-1
0681   DD E9                  JP   (ix)   
0683                GOFUNC:      ; execute function
0683   EB                     EX   de,hl   ; hl = func*
0684   5E                     LD   e,(hl)   ; de = partial_array*
0685   23                     INC   hl   
0686   56                     LD   d,(hl)   
0687   23                     INC   hl   
0688   7B                     LD   a,e   ; if partial_array* == null skip
0689   B2                     OR   d   
068A   28 21                  JR   z,goFunc3   
068C   ED 43 FA 3D            LD   (vTemp1),bc   
0690   22 FC 3D               LD   (vTemp2),hl   ; save bc,hl
0693   EB                     EX   de,hl   ; hl = partial_array*
0694   2B                     DEC   hl   ; bc = count
0695   46                     LD   b,(hl)   
0696   2B                     DEC   hl   
0697   4E                     LD   c,(hl)   
0698   23                     INC   hl   ; push each item on stack
0699   23                     INC   hl   
069A   18 06                  JR   goFunc2   
069C                GOFUNC1:      
069C   5E                     LD   e,(hl)   ; de = partial item
069D   23                     INC   hl   
069E   56                     LD   d,(hl)   
069F   23                     INC   hl   
06A0   D5                     PUSH   de   ; push on stack
06A1   0B                     DEC   bc   
06A2                GOFUNC2:      
06A2   79                     LD   a,c   ; if count != 0 then loop
06A3   B0                     OR   b   
06A4   20 F6                  JR   nz,goFunc1   
06A6   ED 4B FA 3D            LD   bc,(vTemp1)   ; restore bc
06AA   2A FC 3D               LD   hl,(vTemp2)   ; restore hl
06AD                GOFUNC3:      
06AD   5E                     LD   e,(hl)   ; de = block*
06AE   23                     INC   hl   
06AF   56                     LD   d,(hl)   
06B0   23                     INC   hl   
06B1   ED 53 FA 3D            LD   (vTemp1),de   ; save block*
06B5   5E                     LD   e,(hl)   ; de = arg_list*
06B6   23                     INC   hl   
06B7   56                     LD   d,(hl)   
06B8   23                     INC   hl   
06B9   EB                     EX   de,hl   ; hl = arg_list*
06BA   ED 5B FA 3D            LD   de,(vTemp1)   ; restore de = block*
06BE   7D                     LD   a,l   ; if arg_list* == null a = 0
06BF   B4                     OR   h   
06C0   20 03                  JR   nz,goFunc4   
06C2   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06C3   18 0F                  JR   goFunc8   
06C5                GOFUNC4:      ; allocate locals
06C5   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
06C6   7E                     LD   a,(hl)   
06C7   18 03                  JR   goFunc6   
06C9                GOFUNC5:      ; loop
06C9   3B                     DEC   sp   
06CA   3B                     DEC   sp   
06CB   3D                     DEC   a   
06CC                GOFUNC6:      
06CC   B7                     OR   a   
06CD   20 FA                  JR   nz,goFunc5   ; end loop
06CF                GOFUNC7:      
06CF   2B                     DEC   hl   ; a = num_args* x 2
06D0   7E                     LD   a,(hl)   
06D1   23                     INC   hl   
06D2   23                     INC   hl   
06D3   87                     ADD   a,a   ; a *= 2
06D4                GOFUNC8:      
06D4   C5                     PUSH   bc   ; push IP
06D5   44 4D                  LD   bc,hl   
06D7   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06DA   85                     ADD   a,l   
06DB   6F                     LD   l,a   
06DC   39                     ADD   hl,sp   
06DD   18 96                  JR   goBlock2   
06DF                HASH:        
06DF                HEXNUM:      
06DF   21 00 00               LD   hl,0   ; Clear hl to accept the number
06E2                HEXNUM1:      
06E2   03                     INC   bc   
06E3   0A                     LD   a,(bc)   ; Get the character which is a numeral
06E4   CB 77                  BIT   6,a   ; is it uppercase alpha?
06E6   28 02                  JR   z,hexnum2   ; no a decimal
06E8   D6 07                  SUB   7   ; sub 7  to make $a - $F
06EA                HEXNUM2:      
06EA   D6 30                  SUB   $30   ; form decimal digit
06EC   DA 6A 07               JP   c,num2   
06EF   FE 10                  CP   $0F+1   
06F1   D2 6A 07               JP   nc,num2   
06F4   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06F5   29                     ADD   hl,hl   ; 4X
06F6   29                     ADD   hl,hl   ; 8X
06F7   29                     ADD   hl,hl   ; 16X
06F8   85                     ADD   a,l   ; add into bottom of hl
06F9   6F                     LD   l,a   
06FA   18 E6                  JR   hexnum1   
06FC                UPCASE:      
06FC   0A                     LD   a,(bc)   ; a = identifier char
06FD   D6 41                  SUB   "A"   ; "A" = 0
06FF   18 05                  JR   ident1   
0701                LOWCASE:      
0701   0A                     LD   a,(bc)   
0702   D6 61                  SUB   "a"   
0704   C6 1A                  ADD   a,26   
0706                IDENT1:      
0706   87                     ADD   a,a   ; l = a * 2
0707   6F                     LD   l,a   
0708   26 3D                  LD   h,msb(vars)   
070A   22 EE 3D               LD   (vPointer),hl   ; store address in setter
070D   5E                     LD   e,(hl)   
070E   23                     INC   hl   
070F   56                     LD   d,(hl)   
0710   D5                     PUSH   de   
0711   DD E9                  JP   (ix)   
0713                             ; if
0713                             ; condition then -- value
0713                QUESTION:      
0713                IF:          
0713   03                     INC   bc   
0714   0A                     LD   a,(bc)   
0715   FE 3F                  CP   "?"   
0717   28 06                  JR   z,ifte   
0719   0B                     DEC   bc   
071A   11 00 00               LD   de,0   ; NUL pointer for else
071D   18 01                  JR   ifte1   
071F                             ; ifte
071F                             ; condition then else -- value
071F                IFTE:        
071F   D1                     POP   de   ; de = else
0720                IFTE1:       
0720   E1                     POP   hl   ; hl = then
0721   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0722   7C                     LD   a,h   
0723   B5                     OR   l   
0724   E1                     POP   hl   ; hl = then
0725   CA 3E 06               JP   z,go1   ; if z de = else
0728   EB                     EX   de,hl   ; condition = false, de = then
0729   C3 3E 06               JP   go1   
072C                STAR:        
072C                MUL:         
072C   D1                     POP   de   ; get first value
072D   E1                     POP   hl   
072E                MUL2:        
072E   C5                     PUSH   bc   ; Preserve the IP
072F   44 4D                  LD   bc,hl   ; bc = 2nd value
0731   21 00 00               LD   hl,0   
0734   3E 10                  LD   a,16   
0736                MUL3:        
0736   29                     ADD   hl,hl   
0737   CB 13                  RL   e   
0739   CB 12                  RL   d   
073B   30 04                  JR   nc,$+6   
073D   09                     ADD   hl,bc   
073E   30 01                  JR   nc,$+3   
0740   13                     INC   de   
0741   3D                     DEC   a   
0742   20 F2                  JR   nz,mul3   
0744   C1                     POP   bc   ; Restore the IP
0745   C3 99 03               JP   add3   
0748                NUM:         
0748   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
074B   0A                     LD   a,(bc)   ; Get numeral or -
074C   FE 2D                  CP   "-"   
074E   20 01                  JR   nz,num0   
0750   03                     INC   bc   ; move to next char, no flags affected
0751                NUM0:        
0751   08                     EX   af,af'   ; save zero flag = 0 for later
0752                NUM1:        
0752   0A                     LD   a,(bc)   ; read digit
0753   D6 30                  SUB   "0"   ; less than 0?
0755   38 13                  JR   c,num2   ; not a digit, exit loop
0757   FE 0A                  CP   10   ; greater that 9?
0759   30 0F                  JR   nc,num2   ; not a digit, exit loop
075B   03                     INC   bc   ; inc IP
075C   54 5D                  LD   de,hl   ; multiply hl * 10
075E   29                     ADD   hl,hl   
075F   29                     ADD   hl,hl   
0760   19                     ADD   hl,de   
0761   29                     ADD   hl,hl   
0762   85                     ADD   a,l   ; add digit in a to hl
0763   6F                     LD   l,a   
0764   3E 00                  LD   a,0   
0766   8C                     ADC   a,h   
0767   67                     LD   h,a   
0768   18 E8                  JR   num1   
076A                NUM2:        
076A   0B                     DEC   bc   
076B   08                     EX   af,af'   ; restore zero flag
076C   20 07                  JR   nz,num3   
076E   EB                     EX   de,hl   ; negate the value of hl
076F   21 00 00               LD   hl,0   
0772   B7                     OR   a   ; jump to sub2
0773   ED 52                  SBC   hl,de   
0775                NUM3:        
0775   E5                     PUSH   hl   ; Put the number on the stack
0776   DD E9                  JP   (ix)   ; and process the next character
0778                UNDERSCORE:      
0778                REMAIN:      
0778   2A F0 3D               LD   hl,(vRemain)   
077B   E5                     PUSH   hl   
077C   DD E9                  JP   (ix)   
077E                RPAREN:      
077E   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0781   FD 46 09               LD   b,(iy+9)   
0784   DD E9                  JP   (ix)   
0786                             ; arg_list* block* -- ptr
0786                SEMICOLON:      
0786   D1                     POP   de   ; de = block* hl = heap*
0787   2A EC 3D               LD   hl,(vHeapPtr)   
078A   AF                     XOR   a   
078B   77                     LD   (hl),a   ; compile null partial_array*
078C   23                     INC   hl   
078D   77                     LD   (hl),a   
078E   23                     INC   hl   
078F   73                     LD   (hl),e   ; compile block*
0790   23                     INC   hl   
0791   72                     LD   (hl),d   
0792   23                     INC   hl   
0793   D1                     POP   de   ; de = block*
0794   73                     LD   (hl),e   ; compile arg_list*
0795   23                     INC   hl   
0796   72                     LD   (hl),d   
0797   23                     INC   hl   
0798   ED 5B EC 3D            LD   de,(vHeapPtr)   ; return func*
079C   D5                     PUSH   de   
079D   22 EC 3D               LD   (vHeapPtr),hl   ; heap* += 4
07A0   DD E9                  JP   (ix)   
07A2                             ; shiftLeft
07A2                             ; value count -- value2          shift left count places
07A2                SHIFTLEFT:      
07A2   50 59                  LD   de,bc   ; save IP
07A4   C1                     POP   bc   ; bc = count
07A5   41                     LD   b,c   ; b = loop counter
07A6   E1                     POP   hl   
07A7   04                     INC   b   ; test for counter=0 case
07A8   18 01                  JR   shiftLeft2   
07AA                SHIFTLEFT1:      
07AA   29                     ADD   hl,hl   ; left shift hl
07AB                SHIFTLEFT2:      
07AB   10 FD                  DJNZ   shiftLeft1   
07AD   E5                     PUSH   hl   
07AE   42 4B                  LD   bc,de   ; restore IP
07B0   DD E9                  JP   (ix)   
07B2                             ; shiftRight
07B2                             ; value count -- value2          shift left count places
07B2                SHIFTRIGHT:      
07B2   50 59                  LD   de,bc   ; save IP
07B4   C1                     POP   bc   ; bc = count
07B5   41                     LD   b,c   ; b = loop counter
07B6   E1                     POP   hl   
07B7   04                     INC   b   ; test for counter=0 case
07B8   18 04                  JR   shiftRight2   
07BA                SHIFTRIGHT1:      
07BA   CB 3C                  SRL   h   ; right shift hl
07BC   CB 1D                  RR   l   
07BE                SHIFTRIGHT2:      
07BE   10 FA                  DJNZ   shiftRight1   
07C0   E5                     PUSH   hl   
07C1   42 4B                  LD   bc,de   ; restore IP
07C3   DD E9                  JP   (ix)   
07C5                             ; string
07C5                             ; -- ptr                        ; points to start of string chars,
07C5                             ; length is stored at start - 2 bytes
07C5                DBLQUOTE:      
07C5                STRING:      
07C5   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = heap*
07C8   23                     INC   hl   ; skip length field to start
07C9   23                     INC   hl   
07CA   E5                     PUSH   hl   ; save start of string
07CB   03                     INC   bc   ; point to next char
07CC   18 03                  JR   string2   
07CE                STRING1:      
07CE   77                     LD   (hl),a   
07CF   23                     INC   hl   ; increase count
07D0   03                     INC   bc   ; point to next char
07D1                STRING2:      
07D1   0A                     LD   a,(bc)   
07D2   FE 22                  CP   DQUOTE   ; " is the string terminator
07D4   20 F8                  JR   nz,string1   
07D6   FE 60                  CP   "`"   ; ` is the string terminator used in testing
07D8   20 F4                  JR   nz,string1   
07DA   AF                     XOR   a   ; write NUL to terminate string
07DB   77                     LD   (hl),a   ; hl = end of string
07DC   23                     INC   hl   
07DD   22 EC 3D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
07E0   2B                     DEC   hl   ; hl = end of string without terminator
07E1   D1                     POP   de   ; de = start of string
07E2   D5                     PUSH   de   ; return start of string
07E3   B7                     OR   a   ; hl = length bytes, de = start of string
07E4   ED 52                  SBC   hl,de   
07E6   EB                     EX   de,hl   
07E7   2B                     DEC   hl   ; write length bytes to length field at start - 2
07E8   72                     LD   (hl),d   
07E9   2B                     DEC   hl   
07EA   73                     LD   (hl),e   
07EB   DD E9                  JP   (ix)   
07ED                MINUS:       ; negative sign or subtract
07ED   03                     INC   bc   ; check if sign of a number
07EE   0A                     LD   a,(bc)   
07EF   0B                     DEC   bc   
07F0   FE 30                  CP   "0"   
07F2   38 05                  JR   c,sub   
07F4   FE 3A                  CP   "9"+1   
07F6   DA 3E 03               JP   c,num_   
07F9                SUB:         ; Subtract the value 2nd on stack from top of stack
07F9   03                     INC   bc   
07FA   FE 2D                  CP   "-"   
07FC   20 05                  JR   nz,sub1   
07FE   E1                     POP   hl   
07FF   2B                     DEC   hl   
0800   C3 8F 04               JP   assign0   
0803                SUB1:        
0803   0B                     DEC   bc   
0804   D1                     POP   de   
0805   E1                     POP   hl   
0806   B7                     OR   a   
0807   ED 52                  SBC   hl,de   
0809   C3 99 03               JP   add3   
080C                             ;*******************************************************************
080C                             ; commands
080C                             ; a contains command letter
080C                             ; bc points to command letter
080C                             ;*******************************************************************
080C                COMMAND:      
080C   FE 61                  CP   "a"   ; \a absolute
080E   CA 53 08               JP   z,abs1   
0811   FE 62                  CP   "b"   ; \x break
0813   CA 89 08               JP   z,break   
0816   FE 63                  CP   "c"   ; \c chars
0818   CA A3 08               JP   z,chars   
081B   FE 70                  CP   "p"   ; \p partial
081D   CA 60 08               JP   z,partial   
0820   FE 66                  CP   "f"   ; \f false
0822   CA 34 06               JP   z,false1   
0825   FE 68                  CP   "h"   ; \h heap pointer
0827   CA AB 08               JP   z,heapPtr   
082A   FE 69                  CP   "i"   ; \i input
082C   CA B7 08               JP   z,input   
082F   FE 6B                  CP   "k"   ; \k key
0831   CA C2 08               JP   z,key   
0834   FE 6E                  CP   "n"   ; \n numbers
0836   CA D4 08               JP   z,numbers   
0839   FE 6F                  CP   "o"   ; \o output
083B   CA CB 08               JP   z,output   
083E   FE 74                  CP   "t"   ; \t true
0840   CA 2E 06               JP   z,true1   
0843   FE 76                  CP   "v"   ; \v invert
0845   CA CF 03               JP   z,invert   
0848   FE 78                  CP   "x"   ; \x xor
084A   CA C4 03               JP   z,xor   
084D                ERROR1:      
084D   21 01 00               LD   hl,1   ; error 1: unknown command
0850   C3 39 0A               JP   error   
0853                ABS1:        
0853   E1                     POP   hl   
0854   CB 7C                  BIT   7,h   
0856   C8                     RET   z   
0857   AF                     XOR   a   
0858   95                     SUB   l   
0859   6F                     LD   l,a   
085A   9F                     SBC   a,a   
085B   94                     SUB   h   
085C   67                     LD   h,a   
085D   E5                     PUSH   hl   
085E   DD E9                  JP   (ix)   
0860                             ; partial
0860                             ; array* func* -- func1*
0860                PARTIAL:      
0860   E1                     POP   hl   ; h1 = func*
0861   ED 5B EC 3D            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
0865   ED 43 FA 3D            LD   (vTemp1),bc   ; save IP
0869   01 06 00               LD   bc,6   ; bc = count
086C   ED B0                  LDIR      ; clone func
086E   ED 4B FA 3D            LD   bc,(vTemp1)   ; restore IP
0872   2A EC 3D               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
0875   ED 53 EC 3D            LD   (vHeapPtr),de   ; heap* += 6
0879   D1                     POP   de   ; de = array*
087A   E5                     PUSH   hl   ; return partial_array*
087B   73                     LD   (hl),e   ; compile array*
087C   23                     INC   hl   
087D   72                     LD   (hl),d   
087E   DD E9                  JP   (ix)   
0880                COMMENT:      
0880   03                     INC   bc   ; point to next char
0881   0A                     LD   a,(bc)   
0882   FE 20                  CP   " "   ; terminate on any char less than SP
0884   30 FA                  JR   nc,comment   
0886   0B                     DEC   bc   
0887   DD E9                  JP   (ix)   
0889                BREAK:       
0889   E1                     POP   hl   
088A   7D                     LD   a,l   
088B   B4                     OR   h   
088C   28 02                  JR   z,break1   
088E   DD E9                  JP   (ix)   
0890                BREAK1:      
0890   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0892   FD 54                  LD   d,iyh   
0894   21 08 00               LD   hl,8   
0897   19                     ADD   hl,de   
0898   23                     INC   hl   
0899   23                     INC   hl   
089A   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
089D   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
08A0   C3 3D 05               JP   blockEnd   
08A3                CHARS:       
08A3   21 01 00               LD   hl,1   
08A6                CHARS1:      
08A6   22 E6 3D               LD   (vDataWidth),hl   
08A9   DD E9                  JP   (ix)   
08AB                HEAPPTR:      
08AB   2A EC 3D               LD   hl,(vHeapPtr)   
08AE   E5                     PUSH   hl   
08AF   21 EC 3D               LD   hl,vHeapPtr   
08B2   22 EE 3D               LD   (vPointer),hl   
08B5   DD E9                  JP   (ix)   
08B7                             ; Z80 port input
08B7                             ; port -- value
08B7                INPUT:       
08B7   E1                     POP   hl   
08B8   59                     LD   e,c   ; save IP
08B9   4D                     LD   c,l   
08BA   ED 68                  IN   l,(c)   
08BC   26 00                  LD   h,0   
08BE   4B                     LD   c,e   ; restore IP
08BF   E5                     PUSH   hl   
08C0   DD E9                  JP   (ix)   
08C2                KEY:         
08C2   CD 81 00               CALL   getchar   
08C5   26 00                  LD   h,0   
08C7   6F                     LD   l,a   
08C8   E5                     PUSH   hl   
08C9   DD E9                  JP   (ix)   
08CB                             ; Z80 port output
08CB                             ; value port --
08CB                OUTPUT:      
08CB   E1                     POP   hl   
08CC   59                     LD   e,c   ; save IP
08CD   4D                     LD   c,l   
08CE   E1                     POP   hl   
08CF   ED 69                  OUT   (c),l   
08D1   4B                     LD   c,e   ; restore IP
08D2   DD E9                  JP   (ix)   
08D4                NUMBERS:      
08D4   21 02 00               LD   hl,2   
08D7   C3 A6 08               JP   chars1   
08DA                             ; 
08DA                             ; 
08DA                             ; 
08DA                             ; 
08DA                FILTER:      
08DA                MAP:         
08DA                SCAN:        
08DA   DD E9                  JP   (ix)   
08DC                             ; print decimal
08DC                             ; hl = value
08DC                PRTDEC:      
08DC   CB 7C                  BIT   7,h   
08DE   28 0B                  JR   z,prtdec0   
08E0   3E 2D                  LD   a,"-"   
08E2   CD 85 00               CALL   putchar   
08E5   AF                     XOR   a   
08E6   95                     SUB   l   
08E7   6F                     LD   l,a   
08E8   9F                     SBC   a,a   
08E9   94                     SUB   h   
08EA   67                     LD   h,a   
08EB                PRTDEC0:      
08EB   C5                     PUSH   bc   
08EC   0E 00                  LD   c,0   ; leading zeros flag = false
08EE   11 F0 D8               LD   de,-10000   
08F1   CD 0D 09               CALL   prtdec1   
08F4   11 18 FC               LD   de,-1000   
08F7   CD 0D 09               CALL   prtdec1   
08FA   11 9C FF               LD   de,-100   
08FD   CD 0D 09               CALL   prtdec1   
0900   1E F6                  LD   e,-10   
0902   CD 0D 09               CALL   prtdec1   
0905   0C                     INC   c   ; flag = true for at least digit
0906   1E FF                  LD   e,-1   
0908   CD 0D 09               CALL   prtdec1   
090B   C1                     POP   bc   
090C   C9                     RET      
090D                PRTDEC1:      
090D   06 2F                  LD   b,"0"-1   
090F                PRTDEC2:      
090F   04                     INC   b   
0910   19                     ADD   hl,de   
0911   38 FC                  JR   c,prtdec2   
0913   ED 52                  SBC   hl,de   
0915   3E 30                  LD   a,"0"   
0917   B8                     CP   b   
0918   20 05                  JR   nz,prtdec3   
091A   AF                     XOR   a   
091B   B1                     OR   c   
091C   C8                     RET   z   
091D   18 01                  JR   prtdec4   
091F                PRTDEC3:      
091F   0C                     INC   c   
0920                PRTDEC4:      
0920   78                     LD   a,b   
0921   C3 85 00               JP   putchar   
0924                PRTHEX:      ; display hl as a 16-bit number in hex.
0924   C5                     PUSH   bc   ; preserve the IP
0925   7C                     LD   a,h   
0926   CD 2F 09               CALL   prthex2   
0929   7D                     LD   a,l   
092A   CD 2F 09               CALL   prthex2   
092D   C1                     POP   bc   
092E   C9                     RET      
092F                PRTHEX2:      
092F   4F                     LD   c,a   
0930   1F                     RRA      
0931   1F                     RRA      
0932   1F                     RRA      
0933   1F                     RRA      
0934   CD 38 09               CALL   prthex3   
0937   79                     LD   a,c   
0938                PRTHEX3:      
0938   E6 0F                  AND   0x0F   
093A   C6 90                  ADD   a,0x90   
093C   27                     DAA      
093D   CE 40                  ADC   a,0x40   
093F   27                     DAA      
0940   C3 85 00               JP   putchar   
0943                PRTSTR0:      
0943   CD 85 00               CALL   putchar   
0946   23                     INC   hl   
0947                PRTSTR:      
0947   7E                     LD   a,(hl)   
0948   B7                     OR   a   
0949   20 F8                  JR   nz,prtstr0   
094B   C9                     RET      
094C                             ; **************************************************************************
094C                             ; calculate nesting value
094C                             ; a is char to be tested,
094C                             ; e is the nesting value (initially 0)
094C                             ; e is increased by ( and [
094C                             ; e is decreased by ) and ]
094C                             ; e has its bit 7 toggled by `
094C                             ; limited to 127 levels
094C                             ; **************************************************************************
094C                NESTING:      
094C   FE 22                  CP   DQUOTE   ; quote char
094E   28 06                  JR   z,nesting0   
0950   FE 60                  CP   "`"   ; quote char
0952   28 02                  JR   z,nesting0   
0954   18 0A                  JR   nesting1   
0956                NESTING0:      
0956   CB 7B                  BIT   7,e   
0958   28 03                  JR   z,nesting1a   
095A   CB BB                  RES   7,e   
095C   C9                     RET      
095D                NESTING1A:      
095D   CB FB                  SET   7,e   
095F   C9                     RET      
0960                NESTING1:      
0960   CB 7B                  BIT   7,e   
0962   C0                     RET   nz   
0963   FE 7B                  CP   "{"   
0965   28 08                  JR   z,nesting2   
0967   FE 5B                  CP   "["   
0969   28 04                  JR   z,nesting2   
096B   FE 28                  CP   "("   
096D   20 02                  JR   nz,nesting3   
096F                NESTING2:      
096F   1C                     INC   e   
0970   C9                     RET      
0971                NESTING3:      
0971   FE 7D                  CP   "}"   
0973   28 07                  JR   z,nesting4   
0975   FE 5D                  CP   "]"   
0977   28 03                  JR   z,nesting4   
0979   FE 29                  CP   ")"   
097B   C0                     RET   nz   
097C                NESTING4:      
097C   1D                     DEC   e   
097D   C9                     RET      
097E                PROMPT:      
097E   CD 8E 09               CALL   printStr   
0981   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0986   C9                     RET      
0987                CRLF:        
0987   CD 8E 09               CALL   printStr   
098A   0D 0A 00               .CSTR   "\r\n"   
098D   C9                     RET      
098E                             ; prints a null teminated string
098E                             ; the string should be immedaitely following the call
098E                PRINTSTR:      
098E   E3                     EX   (sp),hl   ; swap			
098F   CD 47 09               CALL   prtstr   
0992   23                     INC   hl   ; inc past NUL
0993   E3                     EX   (sp),hl   ; put it back	
0994   C9                     RET      
0995                INIT:        
0995   DD 2A EA 3D            LD   ix,(vNext)   
0999   FD 21 80 3C            LD   iy,STACK   
099D   21 80 01               LD   hl,isysVars   
09A0   11 E6 3D               LD   de,sysVars   
09A3   01 10 00               LD   bc,8 * 2   
09A6   ED B0                  LDIR      
09A8   21 00 3D               LD   hl,vars   ; 52 vars LO HI
09AB   06 34                  LD   b,26*2   
09AD   AF                     XOR   a   
09AE                INIT0:       
09AE   77                     LD   (hl),a   
09AF   23                     INC   hl   
09B0   10 FC                  DJNZ   init0   
09B2   C9                     RET      
09B3                START:       
09B3   31 80 3C               LD   sp,STACK   ; start of monty
09B6   CD 95 09               CALL   init   ; setups
09B9   CD 8E 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
09BC   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
09C9                INTERPRET:      
09C9   CD 7E 09               CALL   prompt   
09CC   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
09CF   ED 43 E8 3D            LD   (vTIBPtr),bc   
09D3                INTERPRET2:      ; calc nesting (a macro might have changed it)
09D3   1E 00                  LD   e,0   ; initilize nesting value
09D5   C5                     PUSH   bc   ; save offset into TIB,
09D6                             ; bc is also the count of chars in TIB
09D6   21 00 3F               LD   hl,TIB   ; hl is start of TIB
09D9   18 06                  JR   interpret4   
09DB                INTERPRET3:      
09DB   7E                     LD   a,(hl)   ; a = char in TIB
09DC   23                     INC   hl   ; inc pointer into TIB
09DD   0B                     DEC   bc   ; dec count of chars in TIB
09DE   CD 4C 09               CALL   nesting   ; update nesting value
09E1                INTERPRET4:      
09E1   79                     LD   a,c   ; is count zero?
09E2   B0                     OR   b   
09E3   20 F6                  JR   nz,interpret3   ; if not loop
09E5   C1                     POP   bc   ; restore offset into TIB
09E6                INTERPRET5:      
09E6   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
09E9   FE 20                  CP   $20   ; compare to space
09EB   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
09ED   FE 00                  CP   $0   ; is it end of string? NUL end of string
09EF                             ; ???? NEEDED?
09EF   28 27                  JR   z,interpret8   
09F1   FE 0D                  CP   "\r"   ; carriage return? ascii 13
09F3   28 10                  JR   z,interpret7   ; if anything else its macro/control
09F5                             ; macro
09F5                             ;  ld (vTIBPtr),bc
09F5                             ;  ld hl,ctrlCodes
09F5                             ;  add a,l			            ; look up key of macros
09F5                             ;  ld l,a
09F5                             ;  ld e,(hl)
09F5                             ;  ld a,e
09F5                             ;  or a
09F5                             ;  jr z,macro1
09F5                             ;  ld d,msb(macros)
09F5                             ;  push de
09F5                             ;  call call		            ; monty exec_ operation and jump to it
09F5                             ;  db DC1,0
09F5                             ; macro1:
09F5                             ;  ld bc,(vTIBPtr)
09F5   18 DC                  JR   interpret2   
09F7                INTERPRET6:      
09F7   21 00 3F               LD   hl,TIB   
09FA   09                     ADD   hl,bc   
09FB   77                     LD   (hl),a   ; store the character in textbuf
09FC   03                     INC   bc   
09FD   CD 85 00               CALL   putchar   ; echo character to screen
0A00   CD 4C 09               CALL   nesting   
0A03   18 E1                  JR   interpret5   ; wait for next character
0A05                INTERPRET7:      
0A05   21 00 3F               LD   hl,TIB   
0A08   09                     ADD   hl,bc   
0A09   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0A0B   23                     INC   hl   
0A0C   36 0A                  LD   (hl),"\n"   
0A0E   23                     INC   hl   
0A0F   03                     INC   bc   
0A10   03                     INC   bc   
0A11   CD 87 09               CALL   crlf   ; echo character to screen
0A14   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0A15   B7                     OR   a   
0A16   20 CE                  JR   nz,interpret5   
0A18                INTERPRET8:      
0A18   ED 43 E8 3D            LD   (vTIBPtr),bc   
0A1C   01 00 3F               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0A1F                             ; we pressed enter
0A1F   0B                     DEC   bc   
0A20                NEXT:        
0A20   03                     INC   bc   ; Increment the IP
0A21   0A                     LD   a,(bc)   ; Get the next character and dispatch
0A22   FE 20                  CP   " "   ; whitespace?
0A24   28 FA                  JR   z,next   ; space? ignore
0A26   38 07                  JR   c,next1   
0A28   6F                     LD   l,a   ; index into table
0A29   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0A2B   6E                     LD   l,(hl)   ; get low jump address
0A2C   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0A2E   E9                     JP   (hl)   ; Jump to routine
0A2F                NEXT1:       
0A2F   FE 00                  CP   NUL   ; end of input string?
0A31   28 03                  JR   z,exit_   
0A33   C3 C9 09               JP   interpret   ; no, other whitespace, macros?
0A36                EXIT_:       
0A36   60 69                  LD   hl,bc   
0A38   E9                     JP   (hl)   
0A39                ERROR:       
0A39   CD 8E 09               CALL   printStr   
0A3C   45 72 72 6F 72 20 00   .CSTR   "Error "   
0A43   CD DC 08               CALL   prtdec   
0A46   C3 C9 09               JP   interpret   
0A49                          ALIGN   $100   
0B00                TESTSSTART:      
0B00                             ; call printStr
0B00                             ; .cstr "Done!"
0B00                             ; HALT
0B00                             ; 
0B00                          ;*Macro unroll:  test "/f", false
0B00   31 80 3C               LD   SP,STACK   
0B03   CD 95 09               CALL   init   
0B06   CD FC 3A               CALL   execStr   
0B09   2F 66 00               .CSTR   "/f"   
0B0C                          ;*Macro unroll:  expect "/f",false
0B0C   E1                     POP   HL   
0B0D   E5                     PUSH   HL   
0B0E   11 00 00               LD   DE,false   
0B11   B7                     OR   A   
0B12   ED 52                  SBC   HL,DE   
0B14   7D                     LD   A,L   
0B15   B4                     OR   H   
0B16   28 4D                  JR   Z,expectM_0_2141S43   
0B18   CD 8E 09               CALL   printStr   
0B1B   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0B24   CD 8E 09               CALL   printStr   
0B27   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B36   21 00 00               LD   HL,false   
0B39   CD DC 08               CALL   prtdec   
0B3C   CD 8E 09               CALL   printStr   
0B3F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0B4C   E1                     POP   hl   
0B4D   E5                     PUSH   hl   
0B4E   CD DC 08               CALL   prtdec   
0B51   E1                     POP   hl   
0B52   CD 8E 09               CALL   printStr   
0B55   20 28 23 00            .CSTR   " (#"   
0B59   CD 24 09               CALL   prthex   
0B5C   CD 8E 09               CALL   printStr   
0B5F   29 0D 0A 00            .CSTR   ")\r\n"   
0B63   76                     HALT      
0B64   00                     .CSTR      
0B65                EXPECTM_0_2141S43:      
0B65   E1                     POP   HL   
0B66                          ;*Macro unroll:  test "/t", true
0B66   31 80 3C               LD   SP,STACK   
0B69   CD 95 09               CALL   init   
0B6C   CD FC 3A               CALL   execStr   
0B6F   2F 74 00               .CSTR   "/t"   
0B72                          ;*Macro unroll:  expect "/t",true
0B72   E1                     POP   HL   
0B73   E5                     PUSH   HL   
0B74   11 FF FF               LD   DE,true   
0B77   B7                     OR   A   
0B78   ED 52                  SBC   HL,DE   
0B7A   7D                     LD   A,L   
0B7B   B4                     OR   H   
0B7C   28 4D                  JR   Z,expectM_0_2142S43   
0B7E   CD 8E 09               CALL   printStr   
0B81   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0B8A   CD 8E 09               CALL   printStr   
0B8D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0B9C   21 FF FF               LD   HL,true   
0B9F   CD DC 08               CALL   prtdec   
0BA2   CD 8E 09               CALL   printStr   
0BA5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0BB2   E1                     POP   hl   
0BB3   E5                     PUSH   hl   
0BB4   CD DC 08               CALL   prtdec   
0BB7   E1                     POP   hl   
0BB8   CD 8E 09               CALL   printStr   
0BBB   20 28 23 00            .CSTR   " (#"   
0BBF   CD 24 09               CALL   prthex   
0BC2   CD 8E 09               CALL   printStr   
0BC5   29 0D 0A 00            .CSTR   ")\r\n"   
0BC9   76                     HALT      
0BCA   00                     .CSTR      
0BCB                EXPECTM_0_2142S43:      
0BCB   E1                     POP   HL   
0BCC                          ;*Macro unroll:  test "1", 1
0BCC   31 80 3C               LD   SP,STACK   
0BCF   CD 95 09               CALL   init   
0BD2   CD FC 3A               CALL   execStr   
0BD5   31 00                  .CSTR   "1"   
0BD7                          ;*Macro unroll:  expect "1",1
0BD7   E1                     POP   HL   
0BD8   E5                     PUSH   HL   
0BD9   11 01 00               LD   DE,1   
0BDC   B7                     OR   A   
0BDD   ED 52                  SBC   HL,DE   
0BDF   7D                     LD   A,L   
0BE0   B4                     OR   H   
0BE1   28 4C                  JR   Z,expectM_0_2143S43   
0BE3   CD 8E 09               CALL   printStr   
0BE6   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0BEE   CD 8E 09               CALL   printStr   
0BF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C00   21 01 00               LD   HL,1   
0C03   CD DC 08               CALL   prtdec   
0C06   CD 8E 09               CALL   printStr   
0C09   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0C16   E1                     POP   hl   
0C17   E5                     PUSH   hl   
0C18   CD DC 08               CALL   prtdec   
0C1B   E1                     POP   hl   
0C1C   CD 8E 09               CALL   printStr   
0C1F   20 28 23 00            .CSTR   " (#"   
0C23   CD 24 09               CALL   prthex   
0C26   CD 8E 09               CALL   printStr   
0C29   29 0D 0A 00            .CSTR   ")\r\n"   
0C2D   76                     HALT      
0C2E   00                     .CSTR      
0C2F                EXPECTM_0_2143S43:      
0C2F   E1                     POP   HL   
0C30                          ;*Macro unroll:  test "2", 2
0C30   31 80 3C               LD   SP,STACK   
0C33   CD 95 09               CALL   init   
0C36   CD FC 3A               CALL   execStr   
0C39   32 00                  .CSTR   "2"   
0C3B                          ;*Macro unroll:  expect "2",2
0C3B   E1                     POP   HL   
0C3C   E5                     PUSH   HL   
0C3D   11 02 00               LD   DE,2   
0C40   B7                     OR   A   
0C41   ED 52                  SBC   HL,DE   
0C43   7D                     LD   A,L   
0C44   B4                     OR   H   
0C45   28 4C                  JR   Z,expectM_0_2144S43   
0C47   CD 8E 09               CALL   printStr   
0C4A   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0C52   CD 8E 09               CALL   printStr   
0C55   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0C64   21 02 00               LD   HL,2   
0C67   CD DC 08               CALL   prtdec   
0C6A   CD 8E 09               CALL   printStr   
0C6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0C7A   E1                     POP   hl   
0C7B   E5                     PUSH   hl   
0C7C   CD DC 08               CALL   prtdec   
0C7F   E1                     POP   hl   
0C80   CD 8E 09               CALL   printStr   
0C83   20 28 23 00            .CSTR   " (#"   
0C87   CD 24 09               CALL   prthex   
0C8A   CD 8E 09               CALL   printStr   
0C8D   29 0D 0A 00            .CSTR   ")\r\n"   
0C91   76                     HALT      
0C92   00                     .CSTR      
0C93                EXPECTM_0_2144S43:      
0C93   E1                     POP   HL   
0C94                          ;*Macro unroll:  test "1", 1
0C94   31 80 3C               LD   SP,STACK   
0C97   CD 95 09               CALL   init   
0C9A   CD FC 3A               CALL   execStr   
0C9D   31 00                  .CSTR   "1"   
0C9F                          ;*Macro unroll:  expect "1",1
0C9F   E1                     POP   HL   
0CA0   E5                     PUSH   HL   
0CA1   11 01 00               LD   DE,1   
0CA4   B7                     OR   A   
0CA5   ED 52                  SBC   HL,DE   
0CA7   7D                     LD   A,L   
0CA8   B4                     OR   H   
0CA9   28 4C                  JR   Z,expectM_0_2145S43   
0CAB   CD 8E 09               CALL   printStr   
0CAE   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0CB6   CD 8E 09               CALL   printStr   
0CB9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0CC8   21 01 00               LD   HL,1   
0CCB   CD DC 08               CALL   prtdec   
0CCE   CD 8E 09               CALL   printStr   
0CD1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0CDE   E1                     POP   hl   
0CDF   E5                     PUSH   hl   
0CE0   CD DC 08               CALL   prtdec   
0CE3   E1                     POP   hl   
0CE4   CD 8E 09               CALL   printStr   
0CE7   20 28 23 00            .CSTR   " (#"   
0CEB   CD 24 09               CALL   prthex   
0CEE   CD 8E 09               CALL   printStr   
0CF1   29 0D 0A 00            .CSTR   ")\r\n"   
0CF5   76                     HALT      
0CF6   00                     .CSTR      
0CF7                EXPECTM_0_2145S43:      
0CF7   E1                     POP   HL   
0CF8                          ;*Macro unroll:  test "0", 0
0CF8   31 80 3C               LD   SP,STACK   
0CFB   CD 95 09               CALL   init   
0CFE   CD FC 3A               CALL   execStr   
0D01   30 00                  .CSTR   "0"   
0D03                          ;*Macro unroll:  expect "0",0
0D03   E1                     POP   HL   
0D04   E5                     PUSH   HL   
0D05   11 00 00               LD   DE,0   
0D08   B7                     OR   A   
0D09   ED 52                  SBC   HL,DE   
0D0B   7D                     LD   A,L   
0D0C   B4                     OR   H   
0D0D   28 4C                  JR   Z,expectM_0_2146S43   
0D0F   CD 8E 09               CALL   printStr   
0D12   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0D1A   CD 8E 09               CALL   printStr   
0D1D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D2C   21 00 00               LD   HL,0   
0D2F   CD DC 08               CALL   prtdec   
0D32   CD 8E 09               CALL   printStr   
0D35   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D42   E1                     POP   hl   
0D43   E5                     PUSH   hl   
0D44   CD DC 08               CALL   prtdec   
0D47   E1                     POP   hl   
0D48   CD 8E 09               CALL   printStr   
0D4B   20 28 23 00            .CSTR   " (#"   
0D4F   CD 24 09               CALL   prthex   
0D52   CD 8E 09               CALL   printStr   
0D55   29 0D 0A 00            .CSTR   ")\r\n"   
0D59   76                     HALT      
0D5A   00                     .CSTR      
0D5B                EXPECTM_0_2146S43:      
0D5B   E1                     POP   HL   
0D5C                          ;*Macro unroll:  test "10", 10
0D5C   31 80 3C               LD   SP,STACK   
0D5F   CD 95 09               CALL   init   
0D62   CD FC 3A               CALL   execStr   
0D65   31 30 00               .CSTR   "10"   
0D68                          ;*Macro unroll:  expect "10",10
0D68   E1                     POP   HL   
0D69   E5                     PUSH   HL   
0D6A   11 0A 00               LD   DE,10   
0D6D   B7                     OR   A   
0D6E   ED 52                  SBC   HL,DE   
0D70   7D                     LD   A,L   
0D71   B4                     OR   H   
0D72   28 4D                  JR   Z,expectM_0_2147S43   
0D74   CD 8E 09               CALL   printStr   
0D77   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
0D80   CD 8E 09               CALL   printStr   
0D83   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D92   21 0A 00               LD   HL,10   
0D95   CD DC 08               CALL   prtdec   
0D98   CD 8E 09               CALL   printStr   
0D9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DA8   E1                     POP   hl   
0DA9   E5                     PUSH   hl   
0DAA   CD DC 08               CALL   prtdec   
0DAD   E1                     POP   hl   
0DAE   CD 8E 09               CALL   printStr   
0DB1   20 28 23 00            .CSTR   " (#"   
0DB5   CD 24 09               CALL   prthex   
0DB8   CD 8E 09               CALL   printStr   
0DBB   29 0D 0A 00            .CSTR   ")\r\n"   
0DBF   76                     HALT      
0DC0   00                     .CSTR      
0DC1                EXPECTM_0_2147S43:      
0DC1   E1                     POP   HL   
0DC2                          ;*Macro unroll:  test "123", 123
0DC2   31 80 3C               LD   SP,STACK   
0DC5   CD 95 09               CALL   init   
0DC8   CD FC 3A               CALL   execStr   
0DCB   31 32 33 00            .CSTR   "123"   
0DCF                          ;*Macro unroll:  expect "123",123
0DCF   E1                     POP   HL   
0DD0   E5                     PUSH   HL   
0DD1   11 7B 00               LD   DE,123   
0DD4   B7                     OR   A   
0DD5   ED 52                  SBC   HL,DE   
0DD7   7D                     LD   A,L   
0DD8   B4                     OR   H   
0DD9   28 4E                  JR   Z,expectM_0_2148S43   
0DDB   CD 8E 09               CALL   printStr   
0DDE   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
0DE8   CD 8E 09               CALL   printStr   
0DEB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DFA   21 7B 00               LD   HL,123   
0DFD   CD DC 08               CALL   prtdec   
0E00   CD 8E 09               CALL   printStr   
0E03   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E10   E1                     POP   hl   
0E11   E5                     PUSH   hl   
0E12   CD DC 08               CALL   prtdec   
0E15   E1                     POP   hl   
0E16   CD 8E 09               CALL   printStr   
0E19   20 28 23 00            .CSTR   " (#"   
0E1D   CD 24 09               CALL   prthex   
0E20   CD 8E 09               CALL   printStr   
0E23   29 0D 0A 00            .CSTR   ")\r\n"   
0E27   76                     HALT      
0E28   00                     .CSTR      
0E29                EXPECTM_0_2148S43:      
0E29   E1                     POP   HL   
0E2A                          ;*Macro unroll:  test "-1",-1
0E2A   31 80 3C               LD   SP,STACK   
0E2D   CD 95 09               CALL   init   
0E30   CD FC 3A               CALL   execStr   
0E33   2D 31 00               .CSTR   "-1"   
0E36                          ;*Macro unroll:  expect "-1",-1
0E36   E1                     POP   HL   
0E37   E5                     PUSH   HL   
0E38   11 FF FF               LD   DE,-1   
0E3B   B7                     OR   A   
0E3C   ED 52                  SBC   HL,DE   
0E3E   7D                     LD   A,L   
0E3F   B4                     OR   H   
0E40   28 4D                  JR   Z,expectM_0_2149S43   
0E42   CD 8E 09               CALL   printStr   
0E45   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
0E4E   CD 8E 09               CALL   printStr   
0E51   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E60   21 FF FF               LD   HL,-1   
0E63   CD DC 08               CALL   prtdec   
0E66   CD 8E 09               CALL   printStr   
0E69   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E76   E1                     POP   hl   
0E77   E5                     PUSH   hl   
0E78   CD DC 08               CALL   prtdec   
0E7B   E1                     POP   hl   
0E7C   CD 8E 09               CALL   printStr   
0E7F   20 28 23 00            .CSTR   " (#"   
0E83   CD 24 09               CALL   prthex   
0E86   CD 8E 09               CALL   printStr   
0E89   29 0D 0A 00            .CSTR   ")\r\n"   
0E8D   76                     HALT      
0E8E   00                     .CSTR      
0E8F                EXPECTM_0_2149S43:      
0E8F   E1                     POP   HL   
0E90                          ;*Macro unroll:  test "''", 0
0E90   31 80 3C               LD   SP,STACK   
0E93   CD 95 09               CALL   init   
0E96   CD FC 3A               CALL   execStr   
0E99   27 27 00               .CSTR   "''"   
0E9C                          ;*Macro unroll:  expect "''",0
0E9C   E1                     POP   HL   
0E9D   E5                     PUSH   HL   
0E9E   11 00 00               LD   DE,0   
0EA1   B7                     OR   A   
0EA2   ED 52                  SBC   HL,DE   
0EA4   7D                     LD   A,L   
0EA5   B4                     OR   H   
0EA6   28 4D                  JR   Z,expectM_0_2150S43   
0EA8   CD 8E 09               CALL   printStr   
0EAB   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
0EB4   CD 8E 09               CALL   printStr   
0EB7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EC6   21 00 00               LD   HL,0   
0EC9   CD DC 08               CALL   prtdec   
0ECC   CD 8E 09               CALL   printStr   
0ECF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EDC   E1                     POP   hl   
0EDD   E5                     PUSH   hl   
0EDE   CD DC 08               CALL   prtdec   
0EE1   E1                     POP   hl   
0EE2   CD 8E 09               CALL   printStr   
0EE5   20 28 23 00            .CSTR   " (#"   
0EE9   CD 24 09               CALL   prthex   
0EEC   CD 8E 09               CALL   printStr   
0EEF   29 0D 0A 00            .CSTR   ")\r\n"   
0EF3   76                     HALT      
0EF4   00                     .CSTR      
0EF5                EXPECTM_0_2150S43:      
0EF5   E1                     POP   HL   
0EF6                          ;*Macro unroll:  test "'a'", $61
0EF6   31 80 3C               LD   SP,STACK   
0EF9   CD 95 09               CALL   init   
0EFC   CD FC 3A               CALL   execStr   
0EFF   27 61 27 00            .CSTR   "'a'"   
0F03                          ;*Macro unroll:  expect "'a'",$61
0F03   E1                     POP   HL   
0F04   E5                     PUSH   HL   
0F05   11 61 00               LD   DE,$61   
0F08   B7                     OR   A   
0F09   ED 52                  SBC   HL,DE   
0F0B   7D                     LD   A,L   
0F0C   B4                     OR   H   
0F0D   28 4E                  JR   Z,expectM_0_2151S43   
0F0F   CD 8E 09               CALL   printStr   
0F12   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
0F1C   CD 8E 09               CALL   printStr   
0F1F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F2E   21 61 00               LD   HL,$61   
0F31   CD DC 08               CALL   prtdec   
0F34   CD 8E 09               CALL   printStr   
0F37   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F44   E1                     POP   hl   
0F45   E5                     PUSH   hl   
0F46   CD DC 08               CALL   prtdec   
0F49   E1                     POP   hl   
0F4A   CD 8E 09               CALL   printStr   
0F4D   20 28 23 00            .CSTR   " (#"   
0F51   CD 24 09               CALL   prthex   
0F54   CD 8E 09               CALL   printStr   
0F57   29 0D 0A 00            .CSTR   ")\r\n"   
0F5B   76                     HALT      
0F5C   00                     .CSTR      
0F5D                EXPECTM_0_2151S43:      
0F5D   E1                     POP   HL   
0F5E                          ;*Macro unroll:  test "'\\''", $27
0F5E   31 80 3C               LD   SP,STACK   
0F61   CD 95 09               CALL   init   
0F64   CD FC 3A               CALL   execStr   
0F67   27 5C 27 27 00         .CSTR   "'\\''"   
0F6C                          ;*Macro unroll:  expect "'\\''",$27
0F6C   E1                     POP   HL   
0F6D   E5                     PUSH   HL   
0F6E   11 27 00               LD   DE,$27   
0F71   B7                     OR   A   
0F72   ED 52                  SBC   HL,DE   
0F74   7D                     LD   A,L   
0F75   B4                     OR   H   
0F76   28 4F                  JR   Z,expectM_0_2152S43   
0F78   CD 8E 09               CALL   printStr   
0F7B   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
0F86   CD 8E 09               CALL   printStr   
0F89   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F98   21 27 00               LD   HL,$27   
0F9B   CD DC 08               CALL   prtdec   
0F9E   CD 8E 09               CALL   printStr   
0FA1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FAE   E1                     POP   hl   
0FAF   E5                     PUSH   hl   
0FB0   CD DC 08               CALL   prtdec   
0FB3   E1                     POP   hl   
0FB4   CD 8E 09               CALL   printStr   
0FB7   20 28 23 00            .CSTR   " (#"   
0FBB   CD 24 09               CALL   prthex   
0FBE   CD 8E 09               CALL   printStr   
0FC1   29 0D 0A 00            .CSTR   ")\r\n"   
0FC5   76                     HALT      
0FC6   00                     .CSTR      
0FC7                EXPECTM_0_2152S43:      
0FC7   E1                     POP   HL   
0FC8                          ;*Macro unroll:  test "#10", $10
0FC8   31 80 3C               LD   SP,STACK   
0FCB   CD 95 09               CALL   init   
0FCE   CD FC 3A               CALL   execStr   
0FD1   23 31 30 00            .CSTR   "#10"   
0FD5                          ;*Macro unroll:  expect "#10",$10
0FD5   E1                     POP   HL   
0FD6   E5                     PUSH   HL   
0FD7   11 10 00               LD   DE,$10   
0FDA   B7                     OR   A   
0FDB   ED 52                  SBC   HL,DE   
0FDD   7D                     LD   A,L   
0FDE   B4                     OR   H   
0FDF   28 4E                  JR   Z,expectM_0_2153S43   
0FE1   CD 8E 09               CALL   printStr   
0FE4   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
0FEE   CD 8E 09               CALL   printStr   
0FF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1000   21 10 00               LD   HL,$10   
1003   CD DC 08               CALL   prtdec   
1006   CD 8E 09               CALL   printStr   
1009   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1016   E1                     POP   hl   
1017   E5                     PUSH   hl   
1018   CD DC 08               CALL   prtdec   
101B   E1                     POP   hl   
101C   CD 8E 09               CALL   printStr   
101F   20 28 23 00            .CSTR   " (#"   
1023   CD 24 09               CALL   prthex   
1026   CD 8E 09               CALL   printStr   
1029   29 0D 0A 00            .CSTR   ")\r\n"   
102D   76                     HALT      
102E   00                     .CSTR      
102F                EXPECTM_0_2153S43:      
102F   E1                     POP   HL   
1030                          ;*Macro unroll:  test "#FF", $FF
1030   31 80 3C               LD   SP,STACK   
1033   CD 95 09               CALL   init   
1036   CD FC 3A               CALL   execStr   
1039   23 46 46 00            .CSTR   "#FF"   
103D                          ;*Macro unroll:  expect "#FF",$FF
103D   E1                     POP   HL   
103E   E5                     PUSH   HL   
103F   11 FF 00               LD   DE,$FF   
1042   B7                     OR   A   
1043   ED 52                  SBC   HL,DE   
1045   7D                     LD   A,L   
1046   B4                     OR   H   
1047   28 4E                  JR   Z,expectM_0_2154S43   
1049   CD 8E 09               CALL   printStr   
104C   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
1056   CD 8E 09               CALL   printStr   
1059   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1068   21 FF 00               LD   HL,$FF   
106B   CD DC 08               CALL   prtdec   
106E   CD 8E 09               CALL   printStr   
1071   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
107E   E1                     POP   hl   
107F   E5                     PUSH   hl   
1080   CD DC 08               CALL   prtdec   
1083   E1                     POP   hl   
1084   CD 8E 09               CALL   printStr   
1087   20 28 23 00            .CSTR   " (#"   
108B   CD 24 09               CALL   prthex   
108E   CD 8E 09               CALL   printStr   
1091   29 0D 0A 00            .CSTR   ")\r\n"   
1095   76                     HALT      
1096   00                     .CSTR      
1097                EXPECTM_0_2154S43:      
1097   E1                     POP   HL   
1098                          ;*Macro unroll:  test "-1 2 +",1
1098   31 80 3C               LD   SP,STACK   
109B   CD 95 09               CALL   init   
109E   CD FC 3A               CALL   execStr   
10A1   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
10A8                          ;*Macro unroll:  expect "-1 2 +",1
10A8   E1                     POP   HL   
10A9   E5                     PUSH   HL   
10AA   11 01 00               LD   DE,1   
10AD   B7                     OR   A   
10AE   ED 52                  SBC   HL,DE   
10B0   7D                     LD   A,L   
10B1   B4                     OR   H   
10B2   28 51                  JR   Z,expectM_0_2155S43   
10B4   CD 8E 09               CALL   printStr   
10B7   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
10C4   CD 8E 09               CALL   printStr   
10C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10D6   21 01 00               LD   HL,1   
10D9   CD DC 08               CALL   prtdec   
10DC   CD 8E 09               CALL   printStr   
10DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10EC   E1                     POP   hl   
10ED   E5                     PUSH   hl   
10EE   CD DC 08               CALL   prtdec   
10F1   E1                     POP   hl   
10F2   CD 8E 09               CALL   printStr   
10F5   20 28 23 00            .CSTR   " (#"   
10F9   CD 24 09               CALL   prthex   
10FC   CD 8E 09               CALL   printStr   
10FF   29 0D 0A 00            .CSTR   ")\r\n"   
1103   76                     HALT      
1104   00                     .CSTR      
1105                EXPECTM_0_2155S43:      
1105   E1                     POP   HL   
1106                          ;*Macro unroll:  test "-1 1 +",0
1106   31 80 3C               LD   SP,STACK   
1109   CD 95 09               CALL   init   
110C   CD FC 3A               CALL   execStr   
110F   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
1116                          ;*Macro unroll:  expect "-1 1 +",0
1116   E1                     POP   HL   
1117   E5                     PUSH   HL   
1118   11 00 00               LD   DE,0   
111B   B7                     OR   A   
111C   ED 52                  SBC   HL,DE   
111E   7D                     LD   A,L   
111F   B4                     OR   H   
1120   28 51                  JR   Z,expectM_0_2156S43   
1122   CD 8E 09               CALL   printStr   
1125   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1132   CD 8E 09               CALL   printStr   
1135   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1144   21 00 00               LD   HL,0   
1147   CD DC 08               CALL   prtdec   
114A   CD 8E 09               CALL   printStr   
114D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
115A   E1                     POP   hl   
115B   E5                     PUSH   hl   
115C   CD DC 08               CALL   prtdec   
115F   E1                     POP   hl   
1160   CD 8E 09               CALL   printStr   
1163   20 28 23 00            .CSTR   " (#"   
1167   CD 24 09               CALL   prthex   
116A   CD 8E 09               CALL   printStr   
116D   29 0D 0A 00            .CSTR   ")\r\n"   
1171   76                     HALT      
1172   00                     .CSTR      
1173                EXPECTM_0_2156S43:      
1173   E1                     POP   HL   
1174                          ;*Macro unroll:  test "1 2 +", 3
1174   31 80 3C               LD   SP,STACK   
1177   CD 95 09               CALL   init   
117A   CD FC 3A               CALL   execStr   
117D   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1183                          ;*Macro unroll:  expect "1 2 +",3
1183   E1                     POP   HL   
1184   E5                     PUSH   HL   
1185   11 03 00               LD   DE,3   
1188   B7                     OR   A   
1189   ED 52                  SBC   HL,DE   
118B   7D                     LD   A,L   
118C   B4                     OR   H   
118D   28 50                  JR   Z,expectM_0_2157S43   
118F   CD 8E 09               CALL   printStr   
1192   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
119E   CD 8E 09               CALL   printStr   
11A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11B0   21 03 00               LD   HL,3   
11B3   CD DC 08               CALL   prtdec   
11B6   CD 8E 09               CALL   printStr   
11B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11C6   E1                     POP   hl   
11C7   E5                     PUSH   hl   
11C8   CD DC 08               CALL   prtdec   
11CB   E1                     POP   hl   
11CC   CD 8E 09               CALL   printStr   
11CF   20 28 23 00            .CSTR   " (#"   
11D3   CD 24 09               CALL   prthex   
11D6   CD 8E 09               CALL   printStr   
11D9   29 0D 0A 00            .CSTR   ")\r\n"   
11DD   76                     HALT      
11DE   00                     .CSTR      
11DF                EXPECTM_0_2157S43:      
11DF   E1                     POP   HL   
11E0                          ;*Macro unroll:  test "4 1 2 +", 3
11E0   31 80 3C               LD   SP,STACK   
11E3   CD 95 09               CALL   init   
11E6   CD FC 3A               CALL   execStr   
11E9   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
11F1                          ;*Macro unroll:  expect "4 1 2 +",3
11F1   E1                     POP   HL   
11F2   E5                     PUSH   HL   
11F3   11 03 00               LD   DE,3   
11F6   B7                     OR   A   
11F7   ED 52                  SBC   HL,DE   
11F9   7D                     LD   A,L   
11FA   B4                     OR   H   
11FB   28 52                  JR   Z,expectM_0_2158S43   
11FD   CD 8E 09               CALL   printStr   
1200   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
120E   CD 8E 09               CALL   printStr   
1211   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1220   21 03 00               LD   HL,3   
1223   CD DC 08               CALL   prtdec   
1226   CD 8E 09               CALL   printStr   
1229   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1236   E1                     POP   hl   
1237   E5                     PUSH   hl   
1238   CD DC 08               CALL   prtdec   
123B   E1                     POP   hl   
123C   CD 8E 09               CALL   printStr   
123F   20 28 23 00            .CSTR   " (#"   
1243   CD 24 09               CALL   prthex   
1246   CD 8E 09               CALL   printStr   
1249   29 0D 0A 00            .CSTR   ")\r\n"   
124D   76                     HALT      
124E   00                     .CSTR      
124F                EXPECTM_0_2158S43:      
124F   E1                     POP   HL   
1250                          ;*Macro unroll:  test "123 456 +", 123+456
1250   31 80 3C               LD   SP,STACK   
1253   CD 95 09               CALL   init   
1256   CD FC 3A               CALL   execStr   
1259   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
1263                          ;*Macro unroll:  expect "123 456 +",123+456
1263   E1                     POP   HL   
1264   E5                     PUSH   HL   
1265   11 43 02               LD   DE,123+456   
1268   B7                     OR   A   
1269   ED 52                  SBC   HL,DE   
126B   7D                     LD   A,L   
126C   B4                     OR   H   
126D   28 54                  JR   Z,expectM_0_2159S43   
126F   CD 8E 09               CALL   printStr   
1272   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1282   CD 8E 09               CALL   printStr   
1285   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1294   21 43 02               LD   HL,123+456   
1297   CD DC 08               CALL   prtdec   
129A   CD 8E 09               CALL   printStr   
129D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12AA   E1                     POP   hl   
12AB   E5                     PUSH   hl   
12AC   CD DC 08               CALL   prtdec   
12AF   E1                     POP   hl   
12B0   CD 8E 09               CALL   printStr   
12B3   20 28 23 00            .CSTR   " (#"   
12B7   CD 24 09               CALL   prthex   
12BA   CD 8E 09               CALL   printStr   
12BD   29 0D 0A 00            .CSTR   ")\r\n"   
12C1   76                     HALT      
12C2   00                     .CSTR      
12C3                EXPECTM_0_2159S43:      
12C3   E1                     POP   HL   
12C4                          ;*Macro unroll:  test "64 128 +", 64+128
12C4   31 80 3C               LD   SP,STACK   
12C7   CD 95 09               CALL   init   
12CA   CD FC 3A               CALL   execStr   
12CD   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
12D6                          ;*Macro unroll:  expect "64 128 +",64+128
12D6   E1                     POP   HL   
12D7   E5                     PUSH   HL   
12D8   11 C0 00               LD   DE,64+128   
12DB   B7                     OR   A   
12DC   ED 52                  SBC   HL,DE   
12DE   7D                     LD   A,L   
12DF   B4                     OR   H   
12E0   28 53                  JR   Z,expectM_0_2160S43   
12E2   CD 8E 09               CALL   printStr   
12E5   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
12F4   CD 8E 09               CALL   printStr   
12F7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1306   21 C0 00               LD   HL,64+128   
1309   CD DC 08               CALL   prtdec   
130C   CD 8E 09               CALL   printStr   
130F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
131C   E1                     POP   hl   
131D   E5                     PUSH   hl   
131E   CD DC 08               CALL   prtdec   
1321   E1                     POP   hl   
1322   CD 8E 09               CALL   printStr   
1325   20 28 23 00            .CSTR   " (#"   
1329   CD 24 09               CALL   prthex   
132C   CD 8E 09               CALL   printStr   
132F   29 0D 0A 00            .CSTR   ")\r\n"   
1333   76                     HALT      
1334   00                     .CSTR      
1335                EXPECTM_0_2160S43:      
1335   E1                     POP   HL   
1336                          ;*Macro unroll:  test "1 2 +", 3
1336   31 80 3C               LD   SP,STACK   
1339   CD 95 09               CALL   init   
133C   CD FC 3A               CALL   execStr   
133F   31 20 32 20 2B 00      .CSTR   "1 2 +"   
1345                          ;*Macro unroll:  expect "1 2 +",3
1345   E1                     POP   HL   
1346   E5                     PUSH   HL   
1347   11 03 00               LD   DE,3   
134A   B7                     OR   A   
134B   ED 52                  SBC   HL,DE   
134D   7D                     LD   A,L   
134E   B4                     OR   H   
134F   28 50                  JR   Z,expectM_0_2161S43   
1351   CD 8E 09               CALL   printStr   
1354   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1360   CD 8E 09               CALL   printStr   
1363   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1372   21 03 00               LD   HL,3   
1375   CD DC 08               CALL   prtdec   
1378   CD 8E 09               CALL   printStr   
137B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1388   E1                     POP   hl   
1389   E5                     PUSH   hl   
138A   CD DC 08               CALL   prtdec   
138D   E1                     POP   hl   
138E   CD 8E 09               CALL   printStr   
1391   20 28 23 00            .CSTR   " (#"   
1395   CD 24 09               CALL   prthex   
1398   CD 8E 09               CALL   printStr   
139B   29 0D 0A 00            .CSTR   ")\r\n"   
139F   76                     HALT      
13A0   00                     .CSTR      
13A1                EXPECTM_0_2161S43:      
13A1   E1                     POP   HL   
13A2                          ;*Macro unroll:  test "1a= a++ a",2
13A2   31 80 3C               LD   SP,STACK   
13A5   CD 95 09               CALL   init   
13A8   CD FC 3A               CALL   execStr   
13AB   31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1a= a++ a"   
13B5                          ;*Macro unroll:  expect "1a= a++ a",2
13B5   E1                     POP   HL   
13B6   E5                     PUSH   HL   
13B7   11 02 00               LD   DE,2   
13BA   B7                     OR   A   
13BB   ED 52                  SBC   HL,DE   
13BD   7D                     LD   A,L   
13BE   B4                     OR   H   
13BF   28 54                  JR   Z,expectM_0_2162S43   
13C1   CD 8E 09               CALL   printStr   
13C4   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
13D4   CD 8E 09               CALL   printStr   
13D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13E6   21 02 00               LD   HL,2   
13E9   CD DC 08               CALL   prtdec   
13EC   CD 8E 09               CALL   printStr   
13EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13FC   E1                     POP   hl   
13FD   E5                     PUSH   hl   
13FE   CD DC 08               CALL   prtdec   
1401   E1                     POP   hl   
1402   CD 8E 09               CALL   printStr   
1405   20 28 23 00            .CSTR   " (#"   
1409   CD 24 09               CALL   prthex   
140C   CD 8E 09               CALL   printStr   
140F   29 0D 0A 00            .CSTR   ")\r\n"   
1413   76                     HALT      
1414   00                     .CSTR      
1415                EXPECTM_0_2162S43:      
1415   E1                     POP   HL   
1416                          ;*Macro unroll:  test "1a= 2 a+= a",3
1416   31 80 3C               LD   SP,STACK   
1419   CD 95 09               CALL   init   
141C   CD FC 3A               CALL   execStr   
141F   31 61 3D 20 32 20 61 2B 3D 20 61 00 .CSTR   "1a= 2 a+= a"   
142B                          ;*Macro unroll:  expect "1a= 2 a+= a",3
142B   E1                     POP   HL   
142C   E5                     PUSH   HL   
142D   11 03 00               LD   DE,3   
1430   B7                     OR   A   
1431   ED 52                  SBC   HL,DE   
1433   7D                     LD   A,L   
1434   B4                     OR   H   
1435   28 56                  JR   Z,expectM_0_2163S43   
1437   CD 8E 09               CALL   printStr   
143A   43 6F 64 65 3A 20 31 61 3D 20 32 20 61 2B 3D 20 61 00 .CSTR   "Code: ","1a= 2 a+= a"   
144C   CD 8E 09               CALL   printStr   
144F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
145E   21 03 00               LD   HL,3   
1461   CD DC 08               CALL   prtdec   
1464   CD 8E 09               CALL   printStr   
1467   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1474   E1                     POP   hl   
1475   E5                     PUSH   hl   
1476   CD DC 08               CALL   prtdec   
1479   E1                     POP   hl   
147A   CD 8E 09               CALL   printStr   
147D   20 28 23 00            .CSTR   " (#"   
1481   CD 24 09               CALL   prthex   
1484   CD 8E 09               CALL   printStr   
1487   29 0D 0A 00            .CSTR   ")\r\n"   
148B   76                     HALT      
148C   00                     .CSTR      
148D                EXPECTM_0_2163S43:      
148D   E1                     POP   HL   
148E                          ;*Macro unroll:  test "-1 -1 -",0
148E   31 80 3C               LD   SP,STACK   
1491   CD 95 09               CALL   init   
1494   CD FC 3A               CALL   execStr   
1497   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
149F                          ;*Macro unroll:  expect "-1 -1 -",0
149F   E1                     POP   HL   
14A0   E5                     PUSH   HL   
14A1   11 00 00               LD   DE,0   
14A4   B7                     OR   A   
14A5   ED 52                  SBC   HL,DE   
14A7   7D                     LD   A,L   
14A8   B4                     OR   H   
14A9   28 52                  JR   Z,expectM_0_2164S43   
14AB   CD 8E 09               CALL   printStr   
14AE   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
14BC   CD 8E 09               CALL   printStr   
14BF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14CE   21 00 00               LD   HL,0   
14D1   CD DC 08               CALL   prtdec   
14D4   CD 8E 09               CALL   printStr   
14D7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14E4   E1                     POP   hl   
14E5   E5                     PUSH   hl   
14E6   CD DC 08               CALL   prtdec   
14E9   E1                     POP   hl   
14EA   CD 8E 09               CALL   printStr   
14ED   20 28 23 00            .CSTR   " (#"   
14F1   CD 24 09               CALL   prthex   
14F4   CD 8E 09               CALL   printStr   
14F7   29 0D 0A 00            .CSTR   ")\r\n"   
14FB   76                     HALT      
14FC   00                     .CSTR      
14FD                EXPECTM_0_2164S43:      
14FD   E1                     POP   HL   
14FE                          ;*Macro unroll:  test "5 3 -", 2
14FE   31 80 3C               LD   SP,STACK   
1501   CD 95 09               CALL   init   
1504   CD FC 3A               CALL   execStr   
1507   35 20 33 20 2D 00      .CSTR   "5 3 -"   
150D                          ;*Macro unroll:  expect "5 3 -",2
150D   E1                     POP   HL   
150E   E5                     PUSH   HL   
150F   11 02 00               LD   DE,2   
1512   B7                     OR   A   
1513   ED 52                  SBC   HL,DE   
1515   7D                     LD   A,L   
1516   B4                     OR   H   
1517   28 50                  JR   Z,expectM_0_2165S43   
1519   CD 8E 09               CALL   printStr   
151C   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1528   CD 8E 09               CALL   printStr   
152B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
153A   21 02 00               LD   HL,2   
153D   CD DC 08               CALL   prtdec   
1540   CD 8E 09               CALL   printStr   
1543   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1550   E1                     POP   hl   
1551   E5                     PUSH   hl   
1552   CD DC 08               CALL   prtdec   
1555   E1                     POP   hl   
1556   CD 8E 09               CALL   printStr   
1559   20 28 23 00            .CSTR   " (#"   
155D   CD 24 09               CALL   prthex   
1560   CD 8E 09               CALL   printStr   
1563   29 0D 0A 00            .CSTR   ")\r\n"   
1567   76                     HALT      
1568   00                     .CSTR      
1569                EXPECTM_0_2165S43:      
1569   E1                     POP   HL   
156A                          ;*Macro unroll:  test "2 1 -",1
156A   31 80 3C               LD   SP,STACK   
156D   CD 95 09               CALL   init   
1570   CD FC 3A               CALL   execStr   
1573   32 20 31 20 2D 00      .CSTR   "2 1 -"   
1579                          ;*Macro unroll:  expect "2 1 -",1
1579   E1                     POP   HL   
157A   E5                     PUSH   HL   
157B   11 01 00               LD   DE,1   
157E   B7                     OR   A   
157F   ED 52                  SBC   HL,DE   
1581   7D                     LD   A,L   
1582   B4                     OR   H   
1583   28 50                  JR   Z,expectM_0_2166S43   
1585   CD 8E 09               CALL   printStr   
1588   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1594   CD 8E 09               CALL   printStr   
1597   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15A6   21 01 00               LD   HL,1   
15A9   CD DC 08               CALL   prtdec   
15AC   CD 8E 09               CALL   printStr   
15AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15BC   E1                     POP   hl   
15BD   E5                     PUSH   hl   
15BE   CD DC 08               CALL   prtdec   
15C1   E1                     POP   hl   
15C2   CD 8E 09               CALL   printStr   
15C5   20 28 23 00            .CSTR   " (#"   
15C9   CD 24 09               CALL   prthex   
15CC   CD 8E 09               CALL   printStr   
15CF   29 0D 0A 00            .CSTR   ")\r\n"   
15D3   76                     HALT      
15D4   00                     .CSTR      
15D5                EXPECTM_0_2166S43:      
15D5   E1                     POP   HL   
15D6                          ;*Macro unroll:  test "3a= a-- a",2
15D6   31 80 3C               LD   SP,STACK   
15D9   CD 95 09               CALL   init   
15DC   CD FC 3A               CALL   execStr   
15DF   33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3a= a-- a"   
15E9                          ;*Macro unroll:  expect "3a= a-- a",2
15E9   E1                     POP   HL   
15EA   E5                     PUSH   HL   
15EB   11 02 00               LD   DE,2   
15EE   B7                     OR   A   
15EF   ED 52                  SBC   HL,DE   
15F1   7D                     LD   A,L   
15F2   B4                     OR   H   
15F3   28 54                  JR   Z,expectM_0_2167S43   
15F5   CD 8E 09               CALL   printStr   
15F8   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1608   CD 8E 09               CALL   printStr   
160B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
161A   21 02 00               LD   HL,2   
161D   CD DC 08               CALL   prtdec   
1620   CD 8E 09               CALL   printStr   
1623   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1630   E1                     POP   hl   
1631   E5                     PUSH   hl   
1632   CD DC 08               CALL   prtdec   
1635   E1                     POP   hl   
1636   CD 8E 09               CALL   printStr   
1639   20 28 23 00            .CSTR   " (#"   
163D   CD 24 09               CALL   prthex   
1640   CD 8E 09               CALL   printStr   
1643   29 0D 0A 00            .CSTR   ")\r\n"   
1647   76                     HALT      
1648   00                     .CSTR      
1649                EXPECTM_0_2167S43:      
1649   E1                     POP   HL   
164A                          ;*Macro unroll:  test "4a= a 2 -= a",2
164A   31 80 3C               LD   SP,STACK   
164D   CD 95 09               CALL   init   
1650   CD FC 3A               CALL   execStr   
1653   34 61 3D 20 61 20 32 20 2D 3D 20 61 00 .CSTR   "4a= a 2 -= a"   
1660                          ;*Macro unroll:  expect "4a= a 2 -= a",2
1660   E1                     POP   HL   
1661   E5                     PUSH   HL   
1662   11 02 00               LD   DE,2   
1665   B7                     OR   A   
1666   ED 52                  SBC   HL,DE   
1668   7D                     LD   A,L   
1669   B4                     OR   H   
166A   28 57                  JR   Z,expectM_0_2168S43   
166C   CD 8E 09               CALL   printStr   
166F   43 6F 64 65 3A 20 34 61 3D 20 61 20 32 20 2D 3D 20 61 00 .CSTR   "Code: ","4a= a 2 -= a"   
1682   CD 8E 09               CALL   printStr   
1685   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1694   21 02 00               LD   HL,2   
1697   CD DC 08               CALL   prtdec   
169A   CD 8E 09               CALL   printStr   
169D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16AA   E1                     POP   hl   
16AB   E5                     PUSH   hl   
16AC   CD DC 08               CALL   prtdec   
16AF   E1                     POP   hl   
16B0   CD 8E 09               CALL   printStr   
16B3   20 28 23 00            .CSTR   " (#"   
16B7   CD 24 09               CALL   prthex   
16BA   CD 8E 09               CALL   printStr   
16BD   29 0D 0A 00            .CSTR   ")\r\n"   
16C1   76                     HALT      
16C2   00                     .CSTR      
16C3                EXPECTM_0_2168S43:      
16C3   E1                     POP   HL   
16C4                          ;*Macro unroll:  test "3 5 &", 1
16C4   31 80 3C               LD   SP,STACK   
16C7   CD 95 09               CALL   init   
16CA   CD FC 3A               CALL   execStr   
16CD   33 20 35 20 26 00      .CSTR   "3 5 &"   
16D3                          ;*Macro unroll:  expect "3 5 &",1
16D3   E1                     POP   HL   
16D4   E5                     PUSH   HL   
16D5   11 01 00               LD   DE,1   
16D8   B7                     OR   A   
16D9   ED 52                  SBC   HL,DE   
16DB   7D                     LD   A,L   
16DC   B4                     OR   H   
16DD   28 50                  JR   Z,expectM_0_2169S43   
16DF   CD 8E 09               CALL   printStr   
16E2   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
16EE   CD 8E 09               CALL   printStr   
16F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1700   21 01 00               LD   HL,1   
1703   CD DC 08               CALL   prtdec   
1706   CD 8E 09               CALL   printStr   
1709   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1716   E1                     POP   hl   
1717   E5                     PUSH   hl   
1718   CD DC 08               CALL   prtdec   
171B   E1                     POP   hl   
171C   CD 8E 09               CALL   printStr   
171F   20 28 23 00            .CSTR   " (#"   
1723   CD 24 09               CALL   prthex   
1726   CD 8E 09               CALL   printStr   
1729   29 0D 0A 00            .CSTR   ")\r\n"   
172D   76                     HALT      
172E   00                     .CSTR      
172F                EXPECTM_0_2169S43:      
172F   E1                     POP   HL   
1730                          ;*Macro unroll:  test "3a= 5 a &= a",1
1730   31 80 3C               LD   SP,STACK   
1733   CD 95 09               CALL   init   
1736   CD FC 3A               CALL   execStr   
1739   33 61 3D 20 35 20 61 20 26 3D 20 61 00 .CSTR   "3a= 5 a &= a"   
1746                          ;*Macro unroll:  expect "3a= 5 a &= a",1
1746   E1                     POP   HL   
1747   E5                     PUSH   HL   
1748   11 01 00               LD   DE,1   
174B   B7                     OR   A   
174C   ED 52                  SBC   HL,DE   
174E   7D                     LD   A,L   
174F   B4                     OR   H   
1750   28 57                  JR   Z,expectM_0_2170S43   
1752   CD 8E 09               CALL   printStr   
1755   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 20 26 3D 20 61 00 .CSTR   "Code: ","3a= 5 a &= a"   
1768   CD 8E 09               CALL   printStr   
176B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
177A   21 01 00               LD   HL,1   
177D   CD DC 08               CALL   prtdec   
1780   CD 8E 09               CALL   printStr   
1783   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1790   E1                     POP   hl   
1791   E5                     PUSH   hl   
1792   CD DC 08               CALL   prtdec   
1795   E1                     POP   hl   
1796   CD 8E 09               CALL   printStr   
1799   20 28 23 00            .CSTR   " (#"   
179D   CD 24 09               CALL   prthex   
17A0   CD 8E 09               CALL   printStr   
17A3   29 0D 0A 00            .CSTR   ")\r\n"   
17A7   76                     HALT      
17A8   00                     .CSTR      
17A9                EXPECTM_0_2170S43:      
17A9   E1                     POP   HL   
17AA                          ;*Macro unroll:  test "3 5 |", 7
17AA   31 80 3C               LD   SP,STACK   
17AD   CD 95 09               CALL   init   
17B0   CD FC 3A               CALL   execStr   
17B3   33 20 35 20 7C 00      .CSTR   "3 5 |"   
17B9                          ;*Macro unroll:  expect "3 5 |",7
17B9   E1                     POP   HL   
17BA   E5                     PUSH   HL   
17BB   11 07 00               LD   DE,7   
17BE   B7                     OR   A   
17BF   ED 52                  SBC   HL,DE   
17C1   7D                     LD   A,L   
17C2   B4                     OR   H   
17C3   28 50                  JR   Z,expectM_0_2171S43   
17C5   CD 8E 09               CALL   printStr   
17C8   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
17D4   CD 8E 09               CALL   printStr   
17D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17E6   21 07 00               LD   HL,7   
17E9   CD DC 08               CALL   prtdec   
17EC   CD 8E 09               CALL   printStr   
17EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17FC   E1                     POP   hl   
17FD   E5                     PUSH   hl   
17FE   CD DC 08               CALL   prtdec   
1801   E1                     POP   hl   
1802   CD 8E 09               CALL   printStr   
1805   20 28 23 00            .CSTR   " (#"   
1809   CD 24 09               CALL   prthex   
180C   CD 8E 09               CALL   printStr   
180F   29 0D 0A 00            .CSTR   ")\r\n"   
1813   76                     HALT      
1814   00                     .CSTR      
1815                EXPECTM_0_2171S43:      
1815   E1                     POP   HL   
1816                          ;*Macro unroll:  test "3a= 5 a |= a",7
1816   31 80 3C               LD   SP,STACK   
1819   CD 95 09               CALL   init   
181C   CD FC 3A               CALL   execStr   
181F   33 61 3D 20 35 20 61 20 7C 3D 20 61 00 .CSTR   "3a= 5 a |= a"   
182C                          ;*Macro unroll:  expect "3a= 5 a |= a",7
182C   E1                     POP   HL   
182D   E5                     PUSH   HL   
182E   11 07 00               LD   DE,7   
1831   B7                     OR   A   
1832   ED 52                  SBC   HL,DE   
1834   7D                     LD   A,L   
1835   B4                     OR   H   
1836   28 57                  JR   Z,expectM_0_2172S43   
1838   CD 8E 09               CALL   printStr   
183B   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 20 7C 3D 20 61 00 .CSTR   "Code: ","3a= 5 a |= a"   
184E   CD 8E 09               CALL   printStr   
1851   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1860   21 07 00               LD   HL,7   
1863   CD DC 08               CALL   prtdec   
1866   CD 8E 09               CALL   printStr   
1869   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1876   E1                     POP   hl   
1877   E5                     PUSH   hl   
1878   CD DC 08               CALL   prtdec   
187B   E1                     POP   hl   
187C   CD 8E 09               CALL   printStr   
187F   20 28 23 00            .CSTR   " (#"   
1883   CD 24 09               CALL   prthex   
1886   CD 8E 09               CALL   printStr   
1889   29 0D 0A 00            .CSTR   ")\r\n"   
188D   76                     HALT      
188E   00                     .CSTR      
188F                EXPECTM_0_2172S43:      
188F   E1                     POP   HL   
1890                          ;*Macro unroll:  test "3 5/x", 6
1890   31 80 3C               LD   SP,STACK   
1893   CD 95 09               CALL   init   
1896   CD FC 3A               CALL   execStr   
1899   33 20 35 2F 78 00      .CSTR   "3 5/x"   
189F                          ;*Macro unroll:  expect "3 5/x",6
189F   E1                     POP   HL   
18A0   E5                     PUSH   HL   
18A1   11 06 00               LD   DE,6   
18A4   B7                     OR   A   
18A5   ED 52                  SBC   HL,DE   
18A7   7D                     LD   A,L   
18A8   B4                     OR   H   
18A9   28 50                  JR   Z,expectM_0_2173S43   
18AB   CD 8E 09               CALL   printStr   
18AE   43 6F 64 65 3A 20 33 20 35 2F 78 00 .CSTR   "Code: ","3 5/x"   
18BA   CD 8E 09               CALL   printStr   
18BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18CC   21 06 00               LD   HL,6   
18CF   CD DC 08               CALL   prtdec   
18D2   CD 8E 09               CALL   printStr   
18D5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18E2   E1                     POP   hl   
18E3   E5                     PUSH   hl   
18E4   CD DC 08               CALL   prtdec   
18E7   E1                     POP   hl   
18E8   CD 8E 09               CALL   printStr   
18EB   20 28 23 00            .CSTR   " (#"   
18EF   CD 24 09               CALL   prthex   
18F2   CD 8E 09               CALL   printStr   
18F5   29 0D 0A 00            .CSTR   ")\r\n"   
18F9   76                     HALT      
18FA   00                     .CSTR      
18FB                EXPECTM_0_2173S43:      
18FB   E1                     POP   HL   
18FC                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
18FC   31 80 3C               LD   SP,STACK   
18FF   CD 95 09               CALL   init   
1902   CD FC 3A               CALL   execStr   
1905   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "3a= 5 a/x a= a"   
1914                          ;*Macro unroll:  expect "3a= 5 a/x a= a",6
1914   E1                     POP   HL   
1915   E5                     PUSH   HL   
1916   11 06 00               LD   DE,6   
1919   B7                     OR   A   
191A   ED 52                  SBC   HL,DE   
191C   7D                     LD   A,L   
191D   B4                     OR   H   
191E   28 59                  JR   Z,expectM_0_2174S43   
1920   CD 8E 09               CALL   printStr   
1923   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1938   CD 8E 09               CALL   printStr   
193B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
194A   21 06 00               LD   HL,6   
194D   CD DC 08               CALL   prtdec   
1950   CD 8E 09               CALL   printStr   
1953   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1960   E1                     POP   hl   
1961   E5                     PUSH   hl   
1962   CD DC 08               CALL   prtdec   
1965   E1                     POP   hl   
1966   CD 8E 09               CALL   printStr   
1969   20 28 23 00            .CSTR   " (#"   
196D   CD 24 09               CALL   prthex   
1970   CD 8E 09               CALL   printStr   
1973   29 0D 0A 00            .CSTR   ")\r\n"   
1977   76                     HALT      
1978   00                     .CSTR      
1979                EXPECTM_0_2174S43:      
1979   E1                     POP   HL   
197A                          ;*Macro unroll:  test "2 3 *", 6
197A   31 80 3C               LD   SP,STACK   
197D   CD 95 09               CALL   init   
1980   CD FC 3A               CALL   execStr   
1983   32 20 33 20 2A 00      .CSTR   "2 3 *"   
1989                          ;*Macro unroll:  expect "2 3 *",6
1989   E1                     POP   HL   
198A   E5                     PUSH   HL   
198B   11 06 00               LD   DE,6   
198E   B7                     OR   A   
198F   ED 52                  SBC   HL,DE   
1991   7D                     LD   A,L   
1992   B4                     OR   H   
1993   28 50                  JR   Z,expectM_0_2175S43   
1995   CD 8E 09               CALL   printStr   
1998   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
19A4   CD 8E 09               CALL   printStr   
19A7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19B6   21 06 00               LD   HL,6   
19B9   CD DC 08               CALL   prtdec   
19BC   CD 8E 09               CALL   printStr   
19BF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19CC   E1                     POP   hl   
19CD   E5                     PUSH   hl   
19CE   CD DC 08               CALL   prtdec   
19D1   E1                     POP   hl   
19D2   CD 8E 09               CALL   printStr   
19D5   20 28 23 00            .CSTR   " (#"   
19D9   CD 24 09               CALL   prthex   
19DC   CD 8E 09               CALL   printStr   
19DF   29 0D 0A 00            .CSTR   ")\r\n"   
19E3   76                     HALT      
19E4   00                     .CSTR      
19E5                EXPECTM_0_2175S43:      
19E5   E1                     POP   HL   
19E6                          ;*Macro unroll:  test "3 x= 2 x *= x",6
19E6   31 80 3C               LD   SP,STACK   
19E9   CD 95 09               CALL   init   
19EC   CD FC 3A               CALL   execStr   
19EF   33 20 78 3D 20 32 20 78 20 2A 3D 20 78 00 .CSTR   "3 x= 2 x *= x"   
19FD                          ;*Macro unroll:  expect "3 x= 2 x *= x",6
19FD   E1                     POP   HL   
19FE   E5                     PUSH   HL   
19FF   11 06 00               LD   DE,6   
1A02   B7                     OR   A   
1A03   ED 52                  SBC   HL,DE   
1A05   7D                     LD   A,L   
1A06   B4                     OR   H   
1A07   28 58                  JR   Z,expectM_0_2176S43   
1A09   CD 8E 09               CALL   printStr   
1A0C   43 6F 64 65 3A 20 33 20 78 3D 20 32 20 78 20 2A 3D 20 78 00 .CSTR   "Code: ","3 x= 2 x *= x"   
1A20   CD 8E 09               CALL   printStr   
1A23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A32   21 06 00               LD   HL,6   
1A35   CD DC 08               CALL   prtdec   
1A38   CD 8E 09               CALL   printStr   
1A3B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A48   E1                     POP   hl   
1A49   E5                     PUSH   hl   
1A4A   CD DC 08               CALL   prtdec   
1A4D   E1                     POP   hl   
1A4E   CD 8E 09               CALL   printStr   
1A51   20 28 23 00            .CSTR   " (#"   
1A55   CD 24 09               CALL   prthex   
1A58   CD 8E 09               CALL   printStr   
1A5B   29 0D 0A 00            .CSTR   ")\r\n"   
1A5F   76                     HALT      
1A60   00                     .CSTR      
1A61                EXPECTM_0_2176S43:      
1A61   E1                     POP   HL   
1A62                          ;*Macro unroll:  test "1 2 3 + *", 5
1A62   31 80 3C               LD   SP,STACK   
1A65   CD 95 09               CALL   init   
1A68   CD FC 3A               CALL   execStr   
1A6B   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
1A75                          ;*Macro unroll:  expect "1 2 3 + *",5
1A75   E1                     POP   HL   
1A76   E5                     PUSH   HL   
1A77   11 05 00               LD   DE,5   
1A7A   B7                     OR   A   
1A7B   ED 52                  SBC   HL,DE   
1A7D   7D                     LD   A,L   
1A7E   B4                     OR   H   
1A7F   28 54                  JR   Z,expectM_0_2177S43   
1A81   CD 8E 09               CALL   printStr   
1A84   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1A94   CD 8E 09               CALL   printStr   
1A97   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AA6   21 05 00               LD   HL,5   
1AA9   CD DC 08               CALL   prtdec   
1AAC   CD 8E 09               CALL   printStr   
1AAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1ABC   E1                     POP   hl   
1ABD   E5                     PUSH   hl   
1ABE   CD DC 08               CALL   prtdec   
1AC1   E1                     POP   hl   
1AC2   CD 8E 09               CALL   printStr   
1AC5   20 28 23 00            .CSTR   " (#"   
1AC9   CD 24 09               CALL   prthex   
1ACC   CD 8E 09               CALL   printStr   
1ACF   29 0D 0A 00            .CSTR   ")\r\n"   
1AD3   76                     HALT      
1AD4   00                     .CSTR      
1AD5                EXPECTM_0_2177S43:      
1AD5   E1                     POP   HL   
1AD6                          ;*Macro unroll:  test "7 3 /", 2
1AD6   31 80 3C               LD   SP,STACK   
1AD9   CD 95 09               CALL   init   
1ADC   CD FC 3A               CALL   execStr   
1ADF   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1AE5                          ;*Macro unroll:  expect "7 3 /",2
1AE5   E1                     POP   HL   
1AE6   E5                     PUSH   HL   
1AE7   11 02 00               LD   DE,2   
1AEA   B7                     OR   A   
1AEB   ED 52                  SBC   HL,DE   
1AED   7D                     LD   A,L   
1AEE   B4                     OR   H   
1AEF   28 50                  JR   Z,expectM_0_2178S43   
1AF1   CD 8E 09               CALL   printStr   
1AF4   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1B00   CD 8E 09               CALL   printStr   
1B03   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B12   21 02 00               LD   HL,2   
1B15   CD DC 08               CALL   prtdec   
1B18   CD 8E 09               CALL   printStr   
1B1B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B28   E1                     POP   hl   
1B29   E5                     PUSH   hl   
1B2A   CD DC 08               CALL   prtdec   
1B2D   E1                     POP   hl   
1B2E   CD 8E 09               CALL   printStr   
1B31   20 28 23 00            .CSTR   " (#"   
1B35   CD 24 09               CALL   prthex   
1B38   CD 8E 09               CALL   printStr   
1B3B   29 0D 0A 00            .CSTR   ")\r\n"   
1B3F   76                     HALT      
1B40   00                     .CSTR      
1B41                EXPECTM_0_2178S43:      
1B41   E1                     POP   HL   
1B42                          ;*Macro unroll:  test "7 x= x 3 /= x", 2
1B42   31 80 3C               LD   SP,STACK   
1B45   CD 95 09               CALL   init   
1B48   CD FC 3A               CALL   execStr   
1B4B   37 20 78 3D 20 78 20 33 20 2F 3D 20 78 00 .CSTR   "7 x= x 3 /= x"   
1B59                          ;*Macro unroll:  expect "7 x= x 3 /= x",2
1B59   E1                     POP   HL   
1B5A   E5                     PUSH   HL   
1B5B   11 02 00               LD   DE,2   
1B5E   B7                     OR   A   
1B5F   ED 52                  SBC   HL,DE   
1B61   7D                     LD   A,L   
1B62   B4                     OR   H   
1B63   28 58                  JR   Z,expectM_0_2179S43   
1B65   CD 8E 09               CALL   printStr   
1B68   43 6F 64 65 3A 20 37 20 78 3D 20 78 20 33 20 2F 3D 20 78 00 .CSTR   "Code: ","7 x= x 3 /= x"   
1B7C   CD 8E 09               CALL   printStr   
1B7F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B8E   21 02 00               LD   HL,2   
1B91   CD DC 08               CALL   prtdec   
1B94   CD 8E 09               CALL   printStr   
1B97   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BA4   E1                     POP   hl   
1BA5   E5                     PUSH   hl   
1BA6   CD DC 08               CALL   prtdec   
1BA9   E1                     POP   hl   
1BAA   CD 8E 09               CALL   printStr   
1BAD   20 28 23 00            .CSTR   " (#"   
1BB1   CD 24 09               CALL   prthex   
1BB4   CD 8E 09               CALL   printStr   
1BB7   29 0D 0A 00            .CSTR   ")\r\n"   
1BBB   76                     HALT      
1BBC   00                     .CSTR      
1BBD                EXPECTM_0_2179S43:      
1BBD   E1                     POP   HL   
1BBE                          ;*Macro unroll:  test "7 3 / _", 1
1BBE   31 80 3C               LD   SP,STACK   
1BC1   CD 95 09               CALL   init   
1BC4   CD FC 3A               CALL   execStr   
1BC7   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
1BCF                          ;*Macro unroll:  expect "7 3 / _",1
1BCF   E1                     POP   HL   
1BD0   E5                     PUSH   HL   
1BD1   11 01 00               LD   DE,1   
1BD4   B7                     OR   A   
1BD5   ED 52                  SBC   HL,DE   
1BD7   7D                     LD   A,L   
1BD8   B4                     OR   H   
1BD9   28 52                  JR   Z,expectM_0_2180S43   
1BDB   CD 8E 09               CALL   printStr   
1BDE   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
1BEC   CD 8E 09               CALL   printStr   
1BEF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BFE   21 01 00               LD   HL,1   
1C01   CD DC 08               CALL   prtdec   
1C04   CD 8E 09               CALL   printStr   
1C07   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C14   E1                     POP   hl   
1C15   E5                     PUSH   hl   
1C16   CD DC 08               CALL   prtdec   
1C19   E1                     POP   hl   
1C1A   CD 8E 09               CALL   printStr   
1C1D   20 28 23 00            .CSTR   " (#"   
1C21   CD 24 09               CALL   prthex   
1C24   CD 8E 09               CALL   printStr   
1C27   29 0D 0A 00            .CSTR   ")\r\n"   
1C2B   76                     HALT      
1C2C   00                     .CSTR      
1C2D                EXPECTM_0_2180S43:      
1C2D   E1                     POP   HL   
1C2E                          ;*Macro unroll:  test "7 3 /", 2
1C2E   31 80 3C               LD   SP,STACK   
1C31   CD 95 09               CALL   init   
1C34   CD FC 3A               CALL   execStr   
1C37   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1C3D                          ;*Macro unroll:  expect "7 3 /",2
1C3D   E1                     POP   HL   
1C3E   E5                     PUSH   HL   
1C3F   11 02 00               LD   DE,2   
1C42   B7                     OR   A   
1C43   ED 52                  SBC   HL,DE   
1C45   7D                     LD   A,L   
1C46   B4                     OR   H   
1C47   28 50                  JR   Z,expectM_0_2181S43   
1C49   CD 8E 09               CALL   printStr   
1C4C   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1C58   CD 8E 09               CALL   printStr   
1C5B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C6A   21 02 00               LD   HL,2   
1C6D   CD DC 08               CALL   prtdec   
1C70   CD 8E 09               CALL   printStr   
1C73   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C80   E1                     POP   hl   
1C81   E5                     PUSH   hl   
1C82   CD DC 08               CALL   prtdec   
1C85   E1                     POP   hl   
1C86   CD 8E 09               CALL   printStr   
1C89   20 28 23 00            .CSTR   " (#"   
1C8D   CD 24 09               CALL   prthex   
1C90   CD 8E 09               CALL   printStr   
1C93   29 0D 0A 00            .CSTR   ")\r\n"   
1C97   76                     HALT      
1C98   00                     .CSTR      
1C99                EXPECTM_0_2181S43:      
1C99   E1                     POP   HL   
1C9A                          ;*Macro unroll:  test "2 3 ==", FALSE
1C9A   31 80 3C               LD   SP,STACK   
1C9D   CD 95 09               CALL   init   
1CA0   CD FC 3A               CALL   execStr   
1CA3   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1CAA                          ;*Macro unroll:  expect "2 3 ==",FALSE
1CAA   E1                     POP   HL   
1CAB   E5                     PUSH   HL   
1CAC   11 00 00               LD   DE,FALSE   
1CAF   B7                     OR   A   
1CB0   ED 52                  SBC   HL,DE   
1CB2   7D                     LD   A,L   
1CB3   B4                     OR   H   
1CB4   28 51                  JR   Z,expectM_0_2182S43   
1CB6   CD 8E 09               CALL   printStr   
1CB9   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1CC6   CD 8E 09               CALL   printStr   
1CC9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CD8   21 00 00               LD   HL,FALSE   
1CDB   CD DC 08               CALL   prtdec   
1CDE   CD 8E 09               CALL   printStr   
1CE1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CEE   E1                     POP   hl   
1CEF   E5                     PUSH   hl   
1CF0   CD DC 08               CALL   prtdec   
1CF3   E1                     POP   hl   
1CF4   CD 8E 09               CALL   printStr   
1CF7   20 28 23 00            .CSTR   " (#"   
1CFB   CD 24 09               CALL   prthex   
1CFE   CD 8E 09               CALL   printStr   
1D01   29 0D 0A 00            .CSTR   ")\r\n"   
1D05   76                     HALT      
1D06   00                     .CSTR      
1D07                EXPECTM_0_2182S43:      
1D07   E1                     POP   HL   
1D08                          ;*Macro unroll:  test "3 3 ==", TRUE
1D08   31 80 3C               LD   SP,STACK   
1D0B   CD 95 09               CALL   init   
1D0E   CD FC 3A               CALL   execStr   
1D11   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1D18                          ;*Macro unroll:  expect "3 3 ==",TRUE
1D18   E1                     POP   HL   
1D19   E5                     PUSH   HL   
1D1A   11 FF FF               LD   DE,TRUE   
1D1D   B7                     OR   A   
1D1E   ED 52                  SBC   HL,DE   
1D20   7D                     LD   A,L   
1D21   B4                     OR   H   
1D22   28 51                  JR   Z,expectM_0_2183S43   
1D24   CD 8E 09               CALL   printStr   
1D27   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1D34   CD 8E 09               CALL   printStr   
1D37   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D46   21 FF FF               LD   HL,TRUE   
1D49   CD DC 08               CALL   prtdec   
1D4C   CD 8E 09               CALL   printStr   
1D4F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D5C   E1                     POP   hl   
1D5D   E5                     PUSH   hl   
1D5E   CD DC 08               CALL   prtdec   
1D61   E1                     POP   hl   
1D62   CD 8E 09               CALL   printStr   
1D65   20 28 23 00            .CSTR   " (#"   
1D69   CD 24 09               CALL   prthex   
1D6C   CD 8E 09               CALL   printStr   
1D6F   29 0D 0A 00            .CSTR   ")\r\n"   
1D73   76                     HALT      
1D74   00                     .CSTR      
1D75                EXPECTM_0_2183S43:      
1D75   E1                     POP   HL   
1D76                          ;*Macro unroll:  test "1 2 <", TRUE
1D76   31 80 3C               LD   SP,STACK   
1D79   CD 95 09               CALL   init   
1D7C   CD FC 3A               CALL   execStr   
1D7F   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1D85                          ;*Macro unroll:  expect "1 2 <",TRUE
1D85   E1                     POP   HL   
1D86   E5                     PUSH   HL   
1D87   11 FF FF               LD   DE,TRUE   
1D8A   B7                     OR   A   
1D8B   ED 52                  SBC   HL,DE   
1D8D   7D                     LD   A,L   
1D8E   B4                     OR   H   
1D8F   28 50                  JR   Z,expectM_0_2184S43   
1D91   CD 8E 09               CALL   printStr   
1D94   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1DA0   CD 8E 09               CALL   printStr   
1DA3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DB2   21 FF FF               LD   HL,TRUE   
1DB5   CD DC 08               CALL   prtdec   
1DB8   CD 8E 09               CALL   printStr   
1DBB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DC8   E1                     POP   hl   
1DC9   E5                     PUSH   hl   
1DCA   CD DC 08               CALL   prtdec   
1DCD   E1                     POP   hl   
1DCE   CD 8E 09               CALL   printStr   
1DD1   20 28 23 00            .CSTR   " (#"   
1DD5   CD 24 09               CALL   prthex   
1DD8   CD 8E 09               CALL   printStr   
1DDB   29 0D 0A 00            .CSTR   ")\r\n"   
1DDF   76                     HALT      
1DE0   00                     .CSTR      
1DE1                EXPECTM_0_2184S43:      
1DE1   E1                     POP   HL   
1DE2                          ;*Macro unroll:  test "2 1 <", FALSE
1DE2   31 80 3C               LD   SP,STACK   
1DE5   CD 95 09               CALL   init   
1DE8   CD FC 3A               CALL   execStr   
1DEB   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1DF1                          ;*Macro unroll:  expect "2 1 <",FALSE
1DF1   E1                     POP   HL   
1DF2   E5                     PUSH   HL   
1DF3   11 00 00               LD   DE,FALSE   
1DF6   B7                     OR   A   
1DF7   ED 52                  SBC   HL,DE   
1DF9   7D                     LD   A,L   
1DFA   B4                     OR   H   
1DFB   28 50                  JR   Z,expectM_0_2185S43   
1DFD   CD 8E 09               CALL   printStr   
1E00   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1E0C   CD 8E 09               CALL   printStr   
1E0F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E1E   21 00 00               LD   HL,FALSE   
1E21   CD DC 08               CALL   prtdec   
1E24   CD 8E 09               CALL   printStr   
1E27   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E34   E1                     POP   hl   
1E35   E5                     PUSH   hl   
1E36   CD DC 08               CALL   prtdec   
1E39   E1                     POP   hl   
1E3A   CD 8E 09               CALL   printStr   
1E3D   20 28 23 00            .CSTR   " (#"   
1E41   CD 24 09               CALL   prthex   
1E44   CD 8E 09               CALL   printStr   
1E47   29 0D 0A 00            .CSTR   ")\r\n"   
1E4B   76                     HALT      
1E4C   00                     .CSTR      
1E4D                EXPECTM_0_2185S43:      
1E4D   E1                     POP   HL   
1E4E                          ;*Macro unroll:  test "2 3 <", TRUE
1E4E   31 80 3C               LD   SP,STACK   
1E51   CD 95 09               CALL   init   
1E54   CD FC 3A               CALL   execStr   
1E57   32 20 33 20 3C 00      .CSTR   "2 3 <"   
1E5D                          ;*Macro unroll:  expect "2 3 <",TRUE
1E5D   E1                     POP   HL   
1E5E   E5                     PUSH   HL   
1E5F   11 FF FF               LD   DE,TRUE   
1E62   B7                     OR   A   
1E63   ED 52                  SBC   HL,DE   
1E65   7D                     LD   A,L   
1E66   B4                     OR   H   
1E67   28 50                  JR   Z,expectM_0_2186S43   
1E69   CD 8E 09               CALL   printStr   
1E6C   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
1E78   CD 8E 09               CALL   printStr   
1E7B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E8A   21 FF FF               LD   HL,TRUE   
1E8D   CD DC 08               CALL   prtdec   
1E90   CD 8E 09               CALL   printStr   
1E93   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EA0   E1                     POP   hl   
1EA1   E5                     PUSH   hl   
1EA2   CD DC 08               CALL   prtdec   
1EA5   E1                     POP   hl   
1EA6   CD 8E 09               CALL   printStr   
1EA9   20 28 23 00            .CSTR   " (#"   
1EAD   CD 24 09               CALL   prthex   
1EB0   CD 8E 09               CALL   printStr   
1EB3   29 0D 0A 00            .CSTR   ")\r\n"   
1EB7   76                     HALT      
1EB8   00                     .CSTR      
1EB9                EXPECTM_0_2186S43:      
1EB9   E1                     POP   HL   
1EBA                          ;*Macro unroll:  test "3 3 <", FALSE
1EBA   31 80 3C               LD   SP,STACK   
1EBD   CD 95 09               CALL   init   
1EC0   CD FC 3A               CALL   execStr   
1EC3   33 20 33 20 3C 00      .CSTR   "3 3 <"   
1EC9                          ;*Macro unroll:  expect "3 3 <",FALSE
1EC9   E1                     POP   HL   
1ECA   E5                     PUSH   HL   
1ECB   11 00 00               LD   DE,FALSE   
1ECE   B7                     OR   A   
1ECF   ED 52                  SBC   HL,DE   
1ED1   7D                     LD   A,L   
1ED2   B4                     OR   H   
1ED3   28 50                  JR   Z,expectM_0_2187S43   
1ED5   CD 8E 09               CALL   printStr   
1ED8   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
1EE4   CD 8E 09               CALL   printStr   
1EE7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EF6   21 00 00               LD   HL,FALSE   
1EF9   CD DC 08               CALL   prtdec   
1EFC   CD 8E 09               CALL   printStr   
1EFF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F0C   E1                     POP   hl   
1F0D   E5                     PUSH   hl   
1F0E   CD DC 08               CALL   prtdec   
1F11   E1                     POP   hl   
1F12   CD 8E 09               CALL   printStr   
1F15   20 28 23 00            .CSTR   " (#"   
1F19   CD 24 09               CALL   prthex   
1F1C   CD 8E 09               CALL   printStr   
1F1F   29 0D 0A 00            .CSTR   ")\r\n"   
1F23   76                     HALT      
1F24   00                     .CSTR      
1F25                EXPECTM_0_2187S43:      
1F25   E1                     POP   HL   
1F26                          ;*Macro unroll:  test "1 2 >", FALSE
1F26   31 80 3C               LD   SP,STACK   
1F29   CD 95 09               CALL   init   
1F2C   CD FC 3A               CALL   execStr   
1F2F   31 20 32 20 3E 00      .CSTR   "1 2 >"   
1F35                          ;*Macro unroll:  expect "1 2 >",FALSE
1F35   E1                     POP   HL   
1F36   E5                     PUSH   HL   
1F37   11 00 00               LD   DE,FALSE   
1F3A   B7                     OR   A   
1F3B   ED 52                  SBC   HL,DE   
1F3D   7D                     LD   A,L   
1F3E   B4                     OR   H   
1F3F   28 50                  JR   Z,expectM_0_2188S43   
1F41   CD 8E 09               CALL   printStr   
1F44   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
1F50   CD 8E 09               CALL   printStr   
1F53   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F62   21 00 00               LD   HL,FALSE   
1F65   CD DC 08               CALL   prtdec   
1F68   CD 8E 09               CALL   printStr   
1F6B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F78   E1                     POP   hl   
1F79   E5                     PUSH   hl   
1F7A   CD DC 08               CALL   prtdec   
1F7D   E1                     POP   hl   
1F7E   CD 8E 09               CALL   printStr   
1F81   20 28 23 00            .CSTR   " (#"   
1F85   CD 24 09               CALL   prthex   
1F88   CD 8E 09               CALL   printStr   
1F8B   29 0D 0A 00            .CSTR   ")\r\n"   
1F8F   76                     HALT      
1F90   00                     .CSTR      
1F91                EXPECTM_0_2188S43:      
1F91   E1                     POP   HL   
1F92                          ;*Macro unroll:  test "2 1 >", TRUE
1F92   31 80 3C               LD   SP,STACK   
1F95   CD 95 09               CALL   init   
1F98   CD FC 3A               CALL   execStr   
1F9B   32 20 31 20 3E 00      .CSTR   "2 1 >"   
1FA1                          ;*Macro unroll:  expect "2 1 >",TRUE
1FA1   E1                     POP   HL   
1FA2   E5                     PUSH   HL   
1FA3   11 FF FF               LD   DE,TRUE   
1FA6   B7                     OR   A   
1FA7   ED 52                  SBC   HL,DE   
1FA9   7D                     LD   A,L   
1FAA   B4                     OR   H   
1FAB   28 50                  JR   Z,expectM_0_2189S43   
1FAD   CD 8E 09               CALL   printStr   
1FB0   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
1FBC   CD 8E 09               CALL   printStr   
1FBF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FCE   21 FF FF               LD   HL,TRUE   
1FD1   CD DC 08               CALL   prtdec   
1FD4   CD 8E 09               CALL   printStr   
1FD7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FE4   E1                     POP   hl   
1FE5   E5                     PUSH   hl   
1FE6   CD DC 08               CALL   prtdec   
1FE9   E1                     POP   hl   
1FEA   CD 8E 09               CALL   printStr   
1FED   20 28 23 00            .CSTR   " (#"   
1FF1   CD 24 09               CALL   prthex   
1FF4   CD 8E 09               CALL   printStr   
1FF7   29 0D 0A 00            .CSTR   ")\r\n"   
1FFB   76                     HALT      
1FFC   00                     .CSTR      
1FFD                EXPECTM_0_2189S43:      
1FFD   E1                     POP   HL   
1FFE                          ;*Macro unroll:  test "3 3 >", FALSE
1FFE   31 80 3C               LD   SP,STACK   
2001   CD 95 09               CALL   init   
2004   CD FC 3A               CALL   execStr   
2007   33 20 33 20 3E 00      .CSTR   "3 3 >"   
200D                          ;*Macro unroll:  expect "3 3 >",FALSE
200D   E1                     POP   HL   
200E   E5                     PUSH   HL   
200F   11 00 00               LD   DE,FALSE   
2012   B7                     OR   A   
2013   ED 52                  SBC   HL,DE   
2015   7D                     LD   A,L   
2016   B4                     OR   H   
2017   28 50                  JR   Z,expectM_0_2190S43   
2019   CD 8E 09               CALL   printStr   
201C   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
2028   CD 8E 09               CALL   printStr   
202B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
203A   21 00 00               LD   HL,FALSE   
203D   CD DC 08               CALL   prtdec   
2040   CD 8E 09               CALL   printStr   
2043   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2050   E1                     POP   hl   
2051   E5                     PUSH   hl   
2052   CD DC 08               CALL   prtdec   
2055   E1                     POP   hl   
2056   CD 8E 09               CALL   printStr   
2059   20 28 23 00            .CSTR   " (#"   
205D   CD 24 09               CALL   prthex   
2060   CD 8E 09               CALL   printStr   
2063   29 0D 0A 00            .CSTR   ")\r\n"   
2067   76                     HALT      
2068   00                     .CSTR      
2069                EXPECTM_0_2190S43:      
2069   E1                     POP   HL   
206A                          ;*Macro unroll:  test "4 3 >", TRUE
206A   31 80 3C               LD   SP,STACK   
206D   CD 95 09               CALL   init   
2070   CD FC 3A               CALL   execStr   
2073   34 20 33 20 3E 00      .CSTR   "4 3 >"   
2079                          ;*Macro unroll:  expect "4 3 >",TRUE
2079   E1                     POP   HL   
207A   E5                     PUSH   HL   
207B   11 FF FF               LD   DE,TRUE   
207E   B7                     OR   A   
207F   ED 52                  SBC   HL,DE   
2081   7D                     LD   A,L   
2082   B4                     OR   H   
2083   28 50                  JR   Z,expectM_0_2191S43   
2085   CD 8E 09               CALL   printStr   
2088   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2094   CD 8E 09               CALL   printStr   
2097   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20A6   21 FF FF               LD   HL,TRUE   
20A9   CD DC 08               CALL   prtdec   
20AC   CD 8E 09               CALL   printStr   
20AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20BC   E1                     POP   hl   
20BD   E5                     PUSH   hl   
20BE   CD DC 08               CALL   prtdec   
20C1   E1                     POP   hl   
20C2   CD 8E 09               CALL   printStr   
20C5   20 28 23 00            .CSTR   " (#"   
20C9   CD 24 09               CALL   prthex   
20CC   CD 8E 09               CALL   printStr   
20CF   29 0D 0A 00            .CSTR   ")\r\n"   
20D3   76                     HALT      
20D4   00                     .CSTR      
20D5                EXPECTM_0_2191S43:      
20D5   E1                     POP   HL   
20D6                          ;*Macro unroll:  test "2 2 <=", TRUE
20D6   31 80 3C               LD   SP,STACK   
20D9   CD 95 09               CALL   init   
20DC   CD FC 3A               CALL   execStr   
20DF   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
20E6                          ;*Macro unroll:  expect "2 2 <=",TRUE
20E6   E1                     POP   HL   
20E7   E5                     PUSH   HL   
20E8   11 FF FF               LD   DE,TRUE   
20EB   B7                     OR   A   
20EC   ED 52                  SBC   HL,DE   
20EE   7D                     LD   A,L   
20EF   B4                     OR   H   
20F0   28 51                  JR   Z,expectM_0_2192S43   
20F2   CD 8E 09               CALL   printStr   
20F5   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2102   CD 8E 09               CALL   printStr   
2105   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2114   21 FF FF               LD   HL,TRUE   
2117   CD DC 08               CALL   prtdec   
211A   CD 8E 09               CALL   printStr   
211D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
212A   E1                     POP   hl   
212B   E5                     PUSH   hl   
212C   CD DC 08               CALL   prtdec   
212F   E1                     POP   hl   
2130   CD 8E 09               CALL   printStr   
2133   20 28 23 00            .CSTR   " (#"   
2137   CD 24 09               CALL   prthex   
213A   CD 8E 09               CALL   printStr   
213D   29 0D 0A 00            .CSTR   ")\r\n"   
2141   76                     HALT      
2142   00                     .CSTR      
2143                EXPECTM_0_2192S43:      
2143   E1                     POP   HL   
2144                          ;*Macro unroll:  test "2 2 >=", TRUE
2144   31 80 3C               LD   SP,STACK   
2147   CD 95 09               CALL   init   
214A   CD FC 3A               CALL   execStr   
214D   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
2154                          ;*Macro unroll:  expect "2 2 >=",TRUE
2154   E1                     POP   HL   
2155   E5                     PUSH   HL   
2156   11 FF FF               LD   DE,TRUE   
2159   B7                     OR   A   
215A   ED 52                  SBC   HL,DE   
215C   7D                     LD   A,L   
215D   B4                     OR   H   
215E   28 51                  JR   Z,expectM_0_2193S43   
2160   CD 8E 09               CALL   printStr   
2163   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2170   CD 8E 09               CALL   printStr   
2173   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2182   21 FF FF               LD   HL,TRUE   
2185   CD DC 08               CALL   prtdec   
2188   CD 8E 09               CALL   printStr   
218B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2198   E1                     POP   hl   
2199   E5                     PUSH   hl   
219A   CD DC 08               CALL   prtdec   
219D   E1                     POP   hl   
219E   CD 8E 09               CALL   printStr   
21A1   20 28 23 00            .CSTR   " (#"   
21A5   CD 24 09               CALL   prthex   
21A8   CD 8E 09               CALL   printStr   
21AB   29 0D 0A 00            .CSTR   ")\r\n"   
21AF   76                     HALT      
21B0   00                     .CSTR      
21B1                EXPECTM_0_2193S43:      
21B1   E1                     POP   HL   
21B2                          ;*Macro unroll:  test "3 1 <<", 6
21B2   31 80 3C               LD   SP,STACK   
21B5   CD 95 09               CALL   init   
21B8   CD FC 3A               CALL   execStr   
21BB   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
21C2                          ;*Macro unroll:  expect "3 1 <<",6
21C2   E1                     POP   HL   
21C3   E5                     PUSH   HL   
21C4   11 06 00               LD   DE,6   
21C7   B7                     OR   A   
21C8   ED 52                  SBC   HL,DE   
21CA   7D                     LD   A,L   
21CB   B4                     OR   H   
21CC   28 51                  JR   Z,expectM_0_2194S43   
21CE   CD 8E 09               CALL   printStr   
21D1   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
21DE   CD 8E 09               CALL   printStr   
21E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21F0   21 06 00               LD   HL,6   
21F3   CD DC 08               CALL   prtdec   
21F6   CD 8E 09               CALL   printStr   
21F9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2206   E1                     POP   hl   
2207   E5                     PUSH   hl   
2208   CD DC 08               CALL   prtdec   
220B   E1                     POP   hl   
220C   CD 8E 09               CALL   printStr   
220F   20 28 23 00            .CSTR   " (#"   
2213   CD 24 09               CALL   prthex   
2216   CD 8E 09               CALL   printStr   
2219   29 0D 0A 00            .CSTR   ")\r\n"   
221D   76                     HALT      
221E   00                     .CSTR      
221F                EXPECTM_0_2194S43:      
221F   E1                     POP   HL   
2220                          ;*Macro unroll:  test "10 1 >>", 5
2220   31 80 3C               LD   SP,STACK   
2223   CD 95 09               CALL   init   
2226   CD FC 3A               CALL   execStr   
2229   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
2231                          ;*Macro unroll:  expect "10 1 >>",5
2231   E1                     POP   HL   
2232   E5                     PUSH   HL   
2233   11 05 00               LD   DE,5   
2236   B7                     OR   A   
2237   ED 52                  SBC   HL,DE   
2239   7D                     LD   A,L   
223A   B4                     OR   H   
223B   28 52                  JR   Z,expectM_0_2195S43   
223D   CD 8E 09               CALL   printStr   
2240   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
224E   CD 8E 09               CALL   printStr   
2251   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2260   21 05 00               LD   HL,5   
2263   CD DC 08               CALL   prtdec   
2266   CD 8E 09               CALL   printStr   
2269   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2276   E1                     POP   hl   
2277   E5                     PUSH   hl   
2278   CD DC 08               CALL   prtdec   
227B   E1                     POP   hl   
227C   CD 8E 09               CALL   printStr   
227F   20 28 23 00            .CSTR   " (#"   
2283   CD 24 09               CALL   prthex   
2286   CD 8E 09               CALL   printStr   
2289   29 0D 0A 00            .CSTR   ")\r\n"   
228D   76                     HALT      
228E   00                     .CSTR      
228F                EXPECTM_0_2195S43:      
228F   E1                     POP   HL   
2290                          ;*Macro unroll:  test "1 x = x", 1
2290   31 80 3C               LD   SP,STACK   
2293   CD 95 09               CALL   init   
2296   CD FC 3A               CALL   execStr   
2299   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
22A1                          ;*Macro unroll:  expect "1 x = x",1
22A1   E1                     POP   HL   
22A2   E5                     PUSH   HL   
22A3   11 01 00               LD   DE,1   
22A6   B7                     OR   A   
22A7   ED 52                  SBC   HL,DE   
22A9   7D                     LD   A,L   
22AA   B4                     OR   H   
22AB   28 52                  JR   Z,expectM_0_2196S43   
22AD   CD 8E 09               CALL   printStr   
22B0   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
22BE   CD 8E 09               CALL   printStr   
22C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22D0   21 01 00               LD   HL,1   
22D3   CD DC 08               CALL   prtdec   
22D6   CD 8E 09               CALL   printStr   
22D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22E6   E1                     POP   hl   
22E7   E5                     PUSH   hl   
22E8   CD DC 08               CALL   prtdec   
22EB   E1                     POP   hl   
22EC   CD 8E 09               CALL   printStr   
22EF   20 28 23 00            .CSTR   " (#"   
22F3   CD 24 09               CALL   prthex   
22F6   CD 8E 09               CALL   printStr   
22F9   29 0D 0A 00            .CSTR   ")\r\n"   
22FD   76                     HALT      
22FE   00                     .CSTR      
22FF                EXPECTM_0_2196S43:      
22FF   E1                     POP   HL   
2300                          ;*Macro unroll:  test "1{}^", 1
2300   31 80 3C               LD   SP,STACK   
2303   CD 95 09               CALL   init   
2306   CD FC 3A               CALL   execStr   
2309   31 7B 7D 5E 00         .CSTR   "1{}^"   
230E                          ;*Macro unroll:  expect "1{}^",1
230E   E1                     POP   HL   
230F   E5                     PUSH   HL   
2310   11 01 00               LD   DE,1   
2313   B7                     OR   A   
2314   ED 52                  SBC   HL,DE   
2316   7D                     LD   A,L   
2317   B4                     OR   H   
2318   28 4F                  JR   Z,expectM_0_2197S43   
231A   CD 8E 09               CALL   printStr   
231D   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2328   CD 8E 09               CALL   printStr   
232B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
233A   21 01 00               LD   HL,1   
233D   CD DC 08               CALL   prtdec   
2340   CD 8E 09               CALL   printStr   
2343   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2350   E1                     POP   hl   
2351   E5                     PUSH   hl   
2352   CD DC 08               CALL   prtdec   
2355   E1                     POP   hl   
2356   CD 8E 09               CALL   printStr   
2359   20 28 23 00            .CSTR   " (#"   
235D   CD 24 09               CALL   prthex   
2360   CD 8E 09               CALL   printStr   
2363   29 0D 0A 00            .CSTR   ")\r\n"   
2367   76                     HALT      
2368   00                     .CSTR      
2369                EXPECTM_0_2197S43:      
2369   E1                     POP   HL   
236A                          ;*Macro unroll:  test "{1}^", 1
236A   31 80 3C               LD   SP,STACK   
236D   CD 95 09               CALL   init   
2370   CD FC 3A               CALL   execStr   
2373   7B 31 7D 5E 00         .CSTR   "{1}^"   
2378                          ;*Macro unroll:  expect "{1}^",1
2378   E1                     POP   HL   
2379   E5                     PUSH   HL   
237A   11 01 00               LD   DE,1   
237D   B7                     OR   A   
237E   ED 52                  SBC   HL,DE   
2380   7D                     LD   A,L   
2381   B4                     OR   H   
2382   28 4F                  JR   Z,expectM_0_2198S43   
2384   CD 8E 09               CALL   printStr   
2387   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2392   CD 8E 09               CALL   printStr   
2395   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23A4   21 01 00               LD   HL,1   
23A7   CD DC 08               CALL   prtdec   
23AA   CD 8E 09               CALL   printStr   
23AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23BA   E1                     POP   hl   
23BB   E5                     PUSH   hl   
23BC   CD DC 08               CALL   prtdec   
23BF   E1                     POP   hl   
23C0   CD 8E 09               CALL   printStr   
23C3   20 28 23 00            .CSTR   " (#"   
23C7   CD 24 09               CALL   prthex   
23CA   CD 8E 09               CALL   printStr   
23CD   29 0D 0A 00            .CSTR   ")\r\n"   
23D1   76                     HALT      
23D2   00                     .CSTR      
23D3                EXPECTM_0_2198S43:      
23D3   E1                     POP   HL   
23D4                          ;*Macro unroll:  test "{{1}^}^", 1
23D4   31 80 3C               LD   SP,STACK   
23D7   CD 95 09               CALL   init   
23DA   CD FC 3A               CALL   execStr   
23DD   7B 7B 31 7D 5E 7D 5E 00 .CSTR   "{{1}^}^"   
23E5                          ;*Macro unroll:  expect "{{1}^}^",1
23E5   E1                     POP   HL   
23E6   E5                     PUSH   HL   
23E7   11 01 00               LD   DE,1   
23EA   B7                     OR   A   
23EB   ED 52                  SBC   HL,DE   
23ED   7D                     LD   A,L   
23EE   B4                     OR   H   
23EF   28 52                  JR   Z,expectM_0_2199S43   
23F1   CD 8E 09               CALL   printStr   
23F4   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2402   CD 8E 09               CALL   printStr   
2405   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2414   21 01 00               LD   HL,1   
2417   CD DC 08               CALL   prtdec   
241A   CD 8E 09               CALL   printStr   
241D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
242A   E1                     POP   hl   
242B   E5                     PUSH   hl   
242C   CD DC 08               CALL   prtdec   
242F   E1                     POP   hl   
2430   CD 8E 09               CALL   printStr   
2433   20 28 23 00            .CSTR   " (#"   
2437   CD 24 09               CALL   prthex   
243A   CD 8E 09               CALL   printStr   
243D   29 0D 0A 00            .CSTR   ")\r\n"   
2441   76                     HALT      
2442   00                     .CSTR      
2443                EXPECTM_0_2199S43:      
2443   E1                     POP   HL   
2444                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2444   31 80 3C               LD   SP,STACK   
2447   CD 95 09               CALL   init   
244A   CD FC 3A               CALL   execStr   
244D   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "{{{1}^}^}^"   
2458                          ;*Macro unroll:  expect "{{{1}^}^}^",1
2458   E1                     POP   HL   
2459   E5                     PUSH   HL   
245A   11 01 00               LD   DE,1   
245D   B7                     OR   A   
245E   ED 52                  SBC   HL,DE   
2460   7D                     LD   A,L   
2461   B4                     OR   H   
2462   28 55                  JR   Z,expectM_0_2200S43   
2464   CD 8E 09               CALL   printStr   
2467   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2478   CD 8E 09               CALL   printStr   
247B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
248A   21 01 00               LD   HL,1   
248D   CD DC 08               CALL   prtdec   
2490   CD 8E 09               CALL   printStr   
2493   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24A0   E1                     POP   hl   
24A1   E5                     PUSH   hl   
24A2   CD DC 08               CALL   prtdec   
24A5   E1                     POP   hl   
24A6   CD 8E 09               CALL   printStr   
24A9   20 28 23 00            .CSTR   " (#"   
24AD   CD 24 09               CALL   prthex   
24B0   CD 8E 09               CALL   printStr   
24B3   29 0D 0A 00            .CSTR   ")\r\n"   
24B7   76                     HALT      
24B8   00                     .CSTR      
24B9                EXPECTM_0_2200S43:      
24B9   E1                     POP   HL   
24BA                          ;*Macro unroll:  test "5 /f {10} ?", 5
24BA   31 80 3C               LD   SP,STACK   
24BD   CD 95 09               CALL   init   
24C0   CD FC 3A               CALL   execStr   
24C3   35 20 2F 66 20 7B 31 30 7D 20 3F 00 .CSTR   "5 /f {10} ?"   
24CF                          ;*Macro unroll:  expect "5 /f {10} ?",5
24CF   E1                     POP   HL   
24D0   E5                     PUSH   HL   
24D1   11 05 00               LD   DE,5   
24D4   B7                     OR   A   
24D5   ED 52                  SBC   HL,DE   
24D7   7D                     LD   A,L   
24D8   B4                     OR   H   
24D9   28 56                  JR   Z,expectM_0_2201S43   
24DB   CD 8E 09               CALL   printStr   
24DE   43 6F 64 65 3A 20 35 20 2F 66 20 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f {10} ?"   
24F0   CD 8E 09               CALL   printStr   
24F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2502   21 05 00               LD   HL,5   
2505   CD DC 08               CALL   prtdec   
2508   CD 8E 09               CALL   printStr   
250B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2518   E1                     POP   hl   
2519   E5                     PUSH   hl   
251A   CD DC 08               CALL   prtdec   
251D   E1                     POP   hl   
251E   CD 8E 09               CALL   printStr   
2521   20 28 23 00            .CSTR   " (#"   
2525   CD 24 09               CALL   prthex   
2528   CD 8E 09               CALL   printStr   
252B   29 0D 0A 00            .CSTR   ")\r\n"   
252F   76                     HALT      
2530   00                     .CSTR      
2531                EXPECTM_0_2201S43:      
2531   E1                     POP   HL   
2532                          ;*Macro unroll:  test "5 /t {10} ? +", 15
2532   31 80 3C               LD   SP,STACK   
2535   CD 95 09               CALL   init   
2538   CD FC 3A               CALL   execStr   
253B   35 20 2F 74 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 /t {10} ? +"   
2549                          ;*Macro unroll:  expect "5 /t {10} ? +",15
2549   E1                     POP   HL   
254A   E5                     PUSH   HL   
254B   11 0F 00               LD   DE,15   
254E   B7                     OR   A   
254F   ED 52                  SBC   HL,DE   
2551   7D                     LD   A,L   
2552   B4                     OR   H   
2553   28 58                  JR   Z,expectM_0_2202S43   
2555   CD 8E 09               CALL   printStr   
2558   43 6F 64 65 3A 20 35 20 2F 74 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t {10} ? +"   
256C   CD 8E 09               CALL   printStr   
256F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
257E   21 0F 00               LD   HL,15   
2581   CD DC 08               CALL   prtdec   
2584   CD 8E 09               CALL   printStr   
2587   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2594   E1                     POP   hl   
2595   E5                     PUSH   hl   
2596   CD DC 08               CALL   prtdec   
2599   E1                     POP   hl   
259A   CD 8E 09               CALL   printStr   
259D   20 28 23 00            .CSTR   " (#"   
25A1   CD 24 09               CALL   prthex   
25A4   CD 8E 09               CALL   printStr   
25A7   29 0D 0A 00            .CSTR   ")\r\n"   
25AB   76                     HALT      
25AC   00                     .CSTR      
25AD                EXPECTM_0_2202S43:      
25AD   E1                     POP   HL   
25AE                          ;*Macro unroll:  test "1 /f {10} {20} ?? +", 21
25AE   31 80 3C               LD   SP,STACK   
25B1   CD 95 09               CALL   init   
25B4   CD FC 3A               CALL   execStr   
25B7   31 20 2F 66 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /f {10} {20} ?? +"   
25CB                          ;*Macro unroll:  expect "1 /f {10} {20} ?? +",21
25CB   E1                     POP   HL   
25CC   E5                     PUSH   HL   
25CD   11 15 00               LD   DE,21   
25D0   B7                     OR   A   
25D1   ED 52                  SBC   HL,DE   
25D3   7D                     LD   A,L   
25D4   B4                     OR   H   
25D5   28 5E                  JR   Z,expectM_0_2203S43   
25D7   CD 8E 09               CALL   printStr   
25DA   43 6F 64 65 3A 20 31 20 2F 66 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f {10} {20} ?? +"   
25F4   CD 8E 09               CALL   printStr   
25F7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2606   21 15 00               LD   HL,21   
2609   CD DC 08               CALL   prtdec   
260C   CD 8E 09               CALL   printStr   
260F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
261C   E1                     POP   hl   
261D   E5                     PUSH   hl   
261E   CD DC 08               CALL   prtdec   
2621   E1                     POP   hl   
2622   CD 8E 09               CALL   printStr   
2625   20 28 23 00            .CSTR   " (#"   
2629   CD 24 09               CALL   prthex   
262C   CD 8E 09               CALL   printStr   
262F   29 0D 0A 00            .CSTR   ")\r\n"   
2633   76                     HALT      
2634   00                     .CSTR      
2635                EXPECTM_0_2203S43:      
2635   E1                     POP   HL   
2636                          ;*Macro unroll:  test "1 /t {10} {20} ?? +", 11
2636   31 80 3C               LD   SP,STACK   
2639   CD 95 09               CALL   init   
263C   CD FC 3A               CALL   execStr   
263F   31 20 2F 74 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /t {10} {20} ?? +"   
2653                          ;*Macro unroll:  expect "1 /t {10} {20} ?? +",11
2653   E1                     POP   HL   
2654   E5                     PUSH   HL   
2655   11 0B 00               LD   DE,11   
2658   B7                     OR   A   
2659   ED 52                  SBC   HL,DE   
265B   7D                     LD   A,L   
265C   B4                     OR   H   
265D   28 5E                  JR   Z,expectM_0_2204S43   
265F   CD 8E 09               CALL   printStr   
2662   43 6F 64 65 3A 20 31 20 2F 74 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t {10} {20} ?? +"   
267C   CD 8E 09               CALL   printStr   
267F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
268E   21 0B 00               LD   HL,11   
2691   CD DC 08               CALL   prtdec   
2694   CD 8E 09               CALL   printStr   
2697   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26A4   E1                     POP   hl   
26A5   E5                     PUSH   hl   
26A6   CD DC 08               CALL   prtdec   
26A9   E1                     POP   hl   
26AA   CD 8E 09               CALL   printStr   
26AD   20 28 23 00            .CSTR   " (#"   
26B1   CD 24 09               CALL   prthex   
26B4   CD 8E 09               CALL   printStr   
26B7   29 0D 0A 00            .CSTR   ")\r\n"   
26BB   76                     HALT      
26BC   00                     .CSTR      
26BD                EXPECTM_0_2204S43:      
26BD   E1                     POP   HL   
26BE                          ;*Macro unroll:  test ": -2%", $0000
26BE   31 80 3C               LD   SP,STACK   
26C1   CD 95 09               CALL   init   
26C4   CD FC 3A               CALL   execStr   
26C7   3A 20 2D 32 25 00      .CSTR   ": -2%"   
26CD                          ;*Macro unroll:  expect ": -2%",$0000
26CD   E1                     POP   HL   
26CE   E5                     PUSH   HL   
26CF   11 00 00               LD   DE,$0000   
26D2   B7                     OR   A   
26D3   ED 52                  SBC   HL,DE   
26D5   7D                     LD   A,L   
26D6   B4                     OR   H   
26D7   28 50                  JR   Z,expectM_0_2205S43   
26D9   CD 8E 09               CALL   printStr   
26DC   43 6F 64 65 3A 20 3A 20 2D 32 25 00 .CSTR   "Code: ",": -2%"   
26E8   CD 8E 09               CALL   printStr   
26EB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26FA   21 00 00               LD   HL,$0000   
26FD   CD DC 08               CALL   prtdec   
2700   CD 8E 09               CALL   printStr   
2703   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2710   E1                     POP   hl   
2711   E5                     PUSH   hl   
2712   CD DC 08               CALL   prtdec   
2715   E1                     POP   hl   
2716   CD 8E 09               CALL   printStr   
2719   20 28 23 00            .CSTR   " (#"   
271D   CD 24 09               CALL   prthex   
2720   CD 8E 09               CALL   printStr   
2723   29 0D 0A 00            .CSTR   ")\r\n"   
2727   76                     HALT      
2728   00                     .CSTR      
2729                EXPECTM_0_2205S43:      
2729   E1                     POP   HL   
272A                          ;*Macro unroll:  test ":a -1%", $0001
272A   31 80 3C               LD   SP,STACK   
272D   CD 95 09               CALL   init   
2730   CD FC 3A               CALL   execStr   
2733   3A 61 20 2D 31 25 00   .CSTR   ":a -1%"   
273A                          ;*Macro unroll:  expect ":a -1%",$0001
273A   E1                     POP   HL   
273B   E5                     PUSH   HL   
273C   11 01 00               LD   DE,$0001   
273F   B7                     OR   A   
2740   ED 52                  SBC   HL,DE   
2742   7D                     LD   A,L   
2743   B4                     OR   H   
2744   28 51                  JR   Z,expectM_0_2206S43   
2746   CD 8E 09               CALL   printStr   
2749   43 6F 64 65 3A 20 3A 61 20 2D 31 25 00 .CSTR   "Code: ",":a -1%"   
2756   CD 8E 09               CALL   printStr   
2759   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2768   21 01 00               LD   HL,$0001   
276B   CD DC 08               CALL   prtdec   
276E   CD 8E 09               CALL   printStr   
2771   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
277E   E1                     POP   hl   
277F   E5                     PUSH   hl   
2780   CD DC 08               CALL   prtdec   
2783   E1                     POP   hl   
2784   CD 8E 09               CALL   printStr   
2787   20 28 23 00            .CSTR   " (#"   
278B   CD 24 09               CALL   prthex   
278E   CD 8E 09               CALL   printStr   
2791   29 0D 0A 00            .CSTR   ")\r\n"   
2795   76                     HALT      
2796   00                     .CSTR      
2797                EXPECTM_0_2206S43:      
2797   E1                     POP   HL   
2798                          ;*Macro unroll:  test ":a: -1%", $0001
2798   31 80 3C               LD   SP,STACK   
279B   CD 95 09               CALL   init   
279E   CD FC 3A               CALL   execStr   
27A1   3A 61 3A 20 2D 31 25 00 .CSTR   ":a: -1%"   
27A9                          ;*Macro unroll:  expect ":a: -1%",$0001
27A9   E1                     POP   HL   
27AA   E5                     PUSH   HL   
27AB   11 01 00               LD   DE,$0001   
27AE   B7                     OR   A   
27AF   ED 52                  SBC   HL,DE   
27B1   7D                     LD   A,L   
27B2   B4                     OR   H   
27B3   28 52                  JR   Z,expectM_0_2207S43   
27B5   CD 8E 09               CALL   printStr   
27B8   43 6F 64 65 3A 20 3A 61 3A 20 2D 31 25 00 .CSTR   "Code: ",":a: -1%"   
27C6   CD 8E 09               CALL   printStr   
27C9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27D8   21 01 00               LD   HL,$0001   
27DB   CD DC 08               CALL   prtdec   
27DE   CD 8E 09               CALL   printStr   
27E1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27EE   E1                     POP   hl   
27EF   E5                     PUSH   hl   
27F0   CD DC 08               CALL   prtdec   
27F3   E1                     POP   hl   
27F4   CD 8E 09               CALL   printStr   
27F7   20 28 23 00            .CSTR   " (#"   
27FB   CD 24 09               CALL   prthex   
27FE   CD 8E 09               CALL   printStr   
2801   29 0D 0A 00            .CSTR   ")\r\n"   
2805   76                     HALT      
2806   00                     .CSTR      
2807                EXPECTM_0_2207S43:      
2807   E1                     POP   HL   
2808                          ;*Macro unroll:  test ":a:b -1%", $0102
2808   31 80 3C               LD   SP,STACK   
280B   CD 95 09               CALL   init   
280E   CD FC 3A               CALL   execStr   
2811   3A 61 3A 62 20 2D 31 25 00 .CSTR   ":a:b -1%"   
281A                          ;*Macro unroll:  expect ":a:b -1%",$0102
281A   E1                     POP   HL   
281B   E5                     PUSH   HL   
281C   11 02 01               LD   DE,$0102   
281F   B7                     OR   A   
2820   ED 52                  SBC   HL,DE   
2822   7D                     LD   A,L   
2823   B4                     OR   H   
2824   28 53                  JR   Z,expectM_0_2208S43   
2826   CD 8E 09               CALL   printStr   
2829   43 6F 64 65 3A 20 3A 61 3A 62 20 2D 31 25 00 .CSTR   "Code: ",":a:b -1%"   
2838   CD 8E 09               CALL   printStr   
283B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
284A   21 02 01               LD   HL,$0102   
284D   CD DC 08               CALL   prtdec   
2850   CD 8E 09               CALL   printStr   
2853   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2860   E1                     POP   hl   
2861   E5                     PUSH   hl   
2862   CD DC 08               CALL   prtdec   
2865   E1                     POP   hl   
2866   CD 8E 09               CALL   printStr   
2869   20 28 23 00            .CSTR   " (#"   
286D   CD 24 09               CALL   prthex   
2870   CD 8E 09               CALL   printStr   
2873   29 0D 0A 00            .CSTR   ")\r\n"   
2877   76                     HALT      
2878   00                     .CSTR      
2879                EXPECTM_0_2208S43:      
2879   E1                     POP   HL   
287A                          ;*Macro unroll:  test "::b -1%", $0101
287A   31 80 3C               LD   SP,STACK   
287D   CD 95 09               CALL   init   
2880   CD FC 3A               CALL   execStr   
2883   3A 3A 62 20 2D 31 25 00 .CSTR   "::b -1%"   
288B                          ;*Macro unroll:  expect "::b -1%",$0101
288B   E1                     POP   HL   
288C   E5                     PUSH   HL   
288D   11 01 01               LD   DE,$0101   
2890   B7                     OR   A   
2891   ED 52                  SBC   HL,DE   
2893   7D                     LD   A,L   
2894   B4                     OR   H   
2895   28 52                  JR   Z,expectM_0_2209S43   
2897   CD 8E 09               CALL   printStr   
289A   43 6F 64 65 3A 20 3A 3A 62 20 2D 31 25 00 .CSTR   "Code: ","::b -1%"   
28A8   CD 8E 09               CALL   printStr   
28AB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28BA   21 01 01               LD   HL,$0101   
28BD   CD DC 08               CALL   prtdec   
28C0   CD 8E 09               CALL   printStr   
28C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28D0   E1                     POP   hl   
28D1   E5                     PUSH   hl   
28D2   CD DC 08               CALL   prtdec   
28D5   E1                     POP   hl   
28D6   CD 8E 09               CALL   printStr   
28D9   20 28 23 00            .CSTR   " (#"   
28DD   CD 24 09               CALL   prthex   
28E0   CD 8E 09               CALL   printStr   
28E3   29 0D 0A 00            .CSTR   ")\r\n"   
28E7   76                     HALT      
28E8   00                     .CSTR      
28E9                EXPECTM_0_2209S43:      
28E9   E1                     POP   HL   
28EA                          ;*Macro unroll:  test ": {2};^", 2
28EA   31 80 3C               LD   SP,STACK   
28ED   CD 95 09               CALL   init   
28F0   CD FC 3A               CALL   execStr   
28F3   3A 20 7B 32 7D 3B 5E 00 .CSTR   ": {2};^"   
28FB                          ;*Macro unroll:  expect ": {2};^",2
28FB   E1                     POP   HL   
28FC   E5                     PUSH   HL   
28FD   11 02 00               LD   DE,2   
2900   B7                     OR   A   
2901   ED 52                  SBC   HL,DE   
2903   7D                     LD   A,L   
2904   B4                     OR   H   
2905   28 52                  JR   Z,expectM_0_2210S43   
2907   CD 8E 09               CALL   printStr   
290A   43 6F 64 65 3A 20 3A 20 7B 32 7D 3B 5E 00 .CSTR   "Code: ",": {2};^"   
2918   CD 8E 09               CALL   printStr   
291B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
292A   21 02 00               LD   HL,2   
292D   CD DC 08               CALL   prtdec   
2930   CD 8E 09               CALL   printStr   
2933   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2940   E1                     POP   hl   
2941   E5                     PUSH   hl   
2942   CD DC 08               CALL   prtdec   
2945   E1                     POP   hl   
2946   CD 8E 09               CALL   printStr   
2949   20 28 23 00            .CSTR   " (#"   
294D   CD 24 09               CALL   prthex   
2950   CD 8E 09               CALL   printStr   
2953   29 0D 0A 00            .CSTR   ")\r\n"   
2957   76                     HALT      
2958   00                     .CSTR      
2959                EXPECTM_0_2210S43:      
2959   E1                     POP   HL   
295A                          ;*Macro unroll:  test ":a {2};^", 2
295A   31 80 3C               LD   SP,STACK   
295D   CD 95 09               CALL   init   
2960   CD FC 3A               CALL   execStr   
2963   3A 61 20 7B 32 7D 3B 5E 00 .CSTR   ":a {2};^"   
296C                          ;*Macro unroll:  expect ":a {2};^",2
296C   E1                     POP   HL   
296D   E5                     PUSH   HL   
296E   11 02 00               LD   DE,2   
2971   B7                     OR   A   
2972   ED 52                  SBC   HL,DE   
2974   7D                     LD   A,L   
2975   B4                     OR   H   
2976   28 53                  JR   Z,expectM_0_2211S43   
2978   CD 8E 09               CALL   printStr   
297B   43 6F 64 65 3A 20 3A 61 20 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a {2};^"   
298A   CD 8E 09               CALL   printStr   
298D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
299C   21 02 00               LD   HL,2   
299F   CD DC 08               CALL   prtdec   
29A2   CD 8E 09               CALL   printStr   
29A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29B2   E1                     POP   hl   
29B3   E5                     PUSH   hl   
29B4   CD DC 08               CALL   prtdec   
29B7   E1                     POP   hl   
29B8   CD 8E 09               CALL   printStr   
29BB   20 28 23 00            .CSTR   " (#"   
29BF   CD 24 09               CALL   prthex   
29C2   CD 8E 09               CALL   printStr   
29C5   29 0D 0A 00            .CSTR   ")\r\n"   
29C9   76                     HALT      
29CA   00                     .CSTR      
29CB                EXPECTM_0_2211S43:      
29CB   E1                     POP   HL   
29CC                          ;*Macro unroll:  test "5 :a {$a};^", 5
29CC   31 80 3C               LD   SP,STACK   
29CF   CD 95 09               CALL   init   
29D2   CD FC 3A               CALL   execStr   
29D5   35 20 3A 61 20 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a {$a};^"   
29E1                          ;*Macro unroll:  expect "5 :a {$a};^",5
29E1   E1                     POP   HL   
29E2   E5                     PUSH   HL   
29E3   11 05 00               LD   DE,5   
29E6   B7                     OR   A   
29E7   ED 52                  SBC   HL,DE   
29E9   7D                     LD   A,L   
29EA   B4                     OR   H   
29EB   28 56                  JR   Z,expectM_0_2212S43   
29ED   CD 8E 09               CALL   printStr   
29F0   43 6F 64 65 3A 20 35 20 3A 61 20 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a {$a};^"   
2A02   CD 8E 09               CALL   printStr   
2A05   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A14   21 05 00               LD   HL,5   
2A17   CD DC 08               CALL   prtdec   
2A1A   CD 8E 09               CALL   printStr   
2A1D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A2A   E1                     POP   hl   
2A2B   E5                     PUSH   hl   
2A2C   CD DC 08               CALL   prtdec   
2A2F   E1                     POP   hl   
2A30   CD 8E 09               CALL   printStr   
2A33   20 28 23 00            .CSTR   " (#"   
2A37   CD 24 09               CALL   prthex   
2A3A   CD 8E 09               CALL   printStr   
2A3D   29 0D 0A 00            .CSTR   ")\r\n"   
2A41   76                     HALT      
2A42   00                     .CSTR      
2A43                EXPECTM_0_2212S43:      
2A43   E1                     POP   HL   
2A44                          ;*Macro unroll:  test "5 :a:b {$a};^", 5
2A44   31 80 3C               LD   SP,STACK   
2A47   CD 95 09               CALL   init   
2A4A   CD FC 3A               CALL   execStr   
2A4D   35 20 3A 61 3A 62 20 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a:b {$a};^"   
2A5B                          ;*Macro unroll:  expect "5 :a:b {$a};^",5
2A5B   E1                     POP   HL   
2A5C   E5                     PUSH   HL   
2A5D   11 05 00               LD   DE,5   
2A60   B7                     OR   A   
2A61   ED 52                  SBC   HL,DE   
2A63   7D                     LD   A,L   
2A64   B4                     OR   H   
2A65   28 58                  JR   Z,expectM_0_2213S43   
2A67   CD 8E 09               CALL   printStr   
2A6A   43 6F 64 65 3A 20 35 20 3A 61 3A 62 20 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b {$a};^"   
2A7E   CD 8E 09               CALL   printStr   
2A81   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A90   21 05 00               LD   HL,5   
2A93   CD DC 08               CALL   prtdec   
2A96   CD 8E 09               CALL   printStr   
2A99   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AA6   E1                     POP   hl   
2AA7   E5                     PUSH   hl   
2AA8   CD DC 08               CALL   prtdec   
2AAB   E1                     POP   hl   
2AAC   CD 8E 09               CALL   printStr   
2AAF   20 28 23 00            .CSTR   " (#"   
2AB3   CD 24 09               CALL   prthex   
2AB6   CD 8E 09               CALL   printStr   
2AB9   29 0D 0A 00            .CSTR   ")\r\n"   
2ABD   76                     HALT      
2ABE   00                     .CSTR      
2ABF                EXPECTM_0_2213S43:      
2ABF   E1                     POP   HL   
2AC0                          ;*Macro unroll:  test ":a {{2}^};^", 2
2AC0   31 80 3C               LD   SP,STACK   
2AC3   CD 95 09               CALL   init   
2AC6   CD FC 3A               CALL   execStr   
2AC9   3A 61 20 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   ":a {{2}^};^"   
2AD5                          ;*Macro unroll:  expect ":a {{2}^};^",2
2AD5   E1                     POP   HL   
2AD6   E5                     PUSH   HL   
2AD7   11 02 00               LD   DE,2   
2ADA   B7                     OR   A   
2ADB   ED 52                  SBC   HL,DE   
2ADD   7D                     LD   A,L   
2ADE   B4                     OR   H   
2ADF   28 56                  JR   Z,expectM_0_2214S43   
2AE1   CD 8E 09               CALL   printStr   
2AE4   43 6F 64 65 3A 20 3A 61 20 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a {{2}^};^"   
2AF6   CD 8E 09               CALL   printStr   
2AF9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B08   21 02 00               LD   HL,2   
2B0B   CD DC 08               CALL   prtdec   
2B0E   CD 8E 09               CALL   printStr   
2B11   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B1E   E1                     POP   hl   
2B1F   E5                     PUSH   hl   
2B20   CD DC 08               CALL   prtdec   
2B23   E1                     POP   hl   
2B24   CD 8E 09               CALL   printStr   
2B27   20 28 23 00            .CSTR   " (#"   
2B2B   CD 24 09               CALL   prthex   
2B2E   CD 8E 09               CALL   printStr   
2B31   29 0D 0A 00            .CSTR   ")\r\n"   
2B35   76                     HALT      
2B36   00                     .CSTR      
2B37                EXPECTM_0_2214S43:      
2B37   E1                     POP   HL   
2B38                          ;*Macro unroll:  test "1 5 :a {{$a}^};^", 5
2B38   31 80 3C               LD   SP,STACK   
2B3B   CD 95 09               CALL   init   
2B3E   CD FC 3A               CALL   execStr   
2B41   31 20 35 20 3A 61 20 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a {{$a}^};^"   
2B52                          ;*Macro unroll:  expect "1 5 :a {{$a}^};^",5
2B52   E1                     POP   HL   
2B53   E5                     PUSH   HL   
2B54   11 05 00               LD   DE,5   
2B57   B7                     OR   A   
2B58   ED 52                  SBC   HL,DE   
2B5A   7D                     LD   A,L   
2B5B   B4                     OR   H   
2B5C   28 5B                  JR   Z,expectM_0_2215S43   
2B5E   CD 8E 09               CALL   printStr   
2B61   43 6F 64 65 3A 20 31 20 35 20 3A 61 20 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a {{$a}^};^"   
2B78   CD 8E 09               CALL   printStr   
2B7B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B8A   21 05 00               LD   HL,5   
2B8D   CD DC 08               CALL   prtdec   
2B90   CD 8E 09               CALL   printStr   
2B93   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BA0   E1                     POP   hl   
2BA1   E5                     PUSH   hl   
2BA2   CD DC 08               CALL   prtdec   
2BA5   E1                     POP   hl   
2BA6   CD 8E 09               CALL   printStr   
2BA9   20 28 23 00            .CSTR   " (#"   
2BAD   CD 24 09               CALL   prthex   
2BB0   CD 8E 09               CALL   printStr   
2BB3   29 0D 0A 00            .CSTR   ")\r\n"   
2BB7   76                     HALT      
2BB8   00                     .CSTR      
2BB9                EXPECTM_0_2215S43:      
2BB9   E1                     POP   HL   
2BBA                          ;*Macro unroll:  test "1 5 :ab {{$a}^};^", 1
2BBA   31 80 3C               LD   SP,STACK   
2BBD   CD 95 09               CALL   init   
2BC0   CD FC 3A               CALL   execStr   
2BC3   31 20 35 20 3A 61 62 20 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab {{$a}^};^"   
2BD5                          ;*Macro unroll:  expect "1 5 :ab {{$a}^};^",1
2BD5   E1                     POP   HL   
2BD6   E5                     PUSH   HL   
2BD7   11 01 00               LD   DE,1   
2BDA   B7                     OR   A   
2BDB   ED 52                  SBC   HL,DE   
2BDD   7D                     LD   A,L   
2BDE   B4                     OR   H   
2BDF   28 5C                  JR   Z,expectM_0_2216S43   
2BE1   CD 8E 09               CALL   printStr   
2BE4   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 20 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab {{$a}^};^"   
2BFC   CD 8E 09               CALL   printStr   
2BFF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C0E   21 01 00               LD   HL,1   
2C11   CD DC 08               CALL   prtdec   
2C14   CD 8E 09               CALL   printStr   
2C17   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C24   E1                     POP   hl   
2C25   E5                     PUSH   hl   
2C26   CD DC 08               CALL   prtdec   
2C29   E1                     POP   hl   
2C2A   CD 8E 09               CALL   printStr   
2C2D   20 28 23 00            .CSTR   " (#"   
2C31   CD 24 09               CALL   prthex   
2C34   CD 8E 09               CALL   printStr   
2C37   29 0D 0A 00            .CSTR   ")\r\n"   
2C3B   76                     HALT      
2C3C   00                     .CSTR      
2C3D                EXPECTM_0_2216S43:      
2C3D   E1                     POP   HL   
2C3E                          ;*Macro unroll:  test "1 5 :a {{$a 2 +}^};^", 7
2C3E   31 80 3C               LD   SP,STACK   
2C41   CD 95 09               CALL   init   
2C44   CD FC 3A               CALL   execStr   
2C47   31 20 35 20 3A 61 20 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a {{$a 2 +}^};^"   
2C5C                          ;*Macro unroll:  expect "1 5 :a {{$a 2 +}^};^",7
2C5C   E1                     POP   HL   
2C5D   E5                     PUSH   HL   
2C5E   11 07 00               LD   DE,7   
2C61   B7                     OR   A   
2C62   ED 52                  SBC   HL,DE   
2C64   7D                     LD   A,L   
2C65   B4                     OR   H   
2C66   28 5F                  JR   Z,expectM_0_2217S43   
2C68   CD 8E 09               CALL   printStr   
2C6B   43 6F 64 65 3A 20 31 20 35 20 3A 61 20 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a {{$a 2 +}^};^"   
2C86   CD 8E 09               CALL   printStr   
2C89   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C98   21 07 00               LD   HL,7   
2C9B   CD DC 08               CALL   prtdec   
2C9E   CD 8E 09               CALL   printStr   
2CA1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CAE   E1                     POP   hl   
2CAF   E5                     PUSH   hl   
2CB0   CD DC 08               CALL   prtdec   
2CB3   E1                     POP   hl   
2CB4   CD 8E 09               CALL   printStr   
2CB7   20 28 23 00            .CSTR   " (#"   
2CBB   CD 24 09               CALL   prthex   
2CBE   CD 8E 09               CALL   printStr   
2CC1   29 0D 0A 00            .CSTR   ")\r\n"   
2CC5   76                     HALT      
2CC6   00                     .CSTR      
2CC7                EXPECTM_0_2217S43:      
2CC7   E1                     POP   HL   
2CC8                          ;*Macro unroll:  test "1 5 :ab {{$a $b +}^};^", 6
2CC8   31 80 3C               LD   SP,STACK   
2CCB   CD 95 09               CALL   init   
2CCE   CD FC 3A               CALL   execStr   
2CD1   31 20 35 20 3A 61 62 20 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab {{$a $b +}^};^"   
2CE8                          ;*Macro unroll:  expect "1 5 :ab {{$a $b +}^};^",6
2CE8   E1                     POP   HL   
2CE9   E5                     PUSH   HL   
2CEA   11 06 00               LD   DE,6   
2CED   B7                     OR   A   
2CEE   ED 52                  SBC   HL,DE   
2CF0   7D                     LD   A,L   
2CF1   B4                     OR   H   
2CF2   28 61                  JR   Z,expectM_0_2218S43   
2CF4   CD 8E 09               CALL   printStr   
2CF7   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 20 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab {{$a $b +}^};^"   
2D14   CD 8E 09               CALL   printStr   
2D17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D26   21 06 00               LD   HL,6   
2D29   CD DC 08               CALL   prtdec   
2D2C   CD 8E 09               CALL   printStr   
2D2F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D3C   E1                     POP   hl   
2D3D   E5                     PUSH   hl   
2D3E   CD DC 08               CALL   prtdec   
2D41   E1                     POP   hl   
2D42   CD 8E 09               CALL   printStr   
2D45   20 28 23 00            .CSTR   " (#"   
2D49   CD 24 09               CALL   prthex   
2D4C   CD 8E 09               CALL   printStr   
2D4F   29 0D 0A 00            .CSTR   ")\r\n"   
2D53   76                     HALT      
2D54   00                     .CSTR      
2D55                EXPECTM_0_2218S43:      
2D55   E1                     POP   HL   
2D56                          ;*Macro unroll:  test ":a {2}; x= 1 x^", 2
2D56   31 80 3C               LD   SP,STACK   
2D59   CD 95 09               CALL   init   
2D5C   CD FC 3A               CALL   execStr   
2D5F   3A 61 20 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a {2}; x= 1 x^"   
2D6F                          ;*Macro unroll:  expect ":a {2}; x= 1 x^",2
2D6F   E1                     POP   HL   
2D70   E5                     PUSH   HL   
2D71   11 02 00               LD   DE,2   
2D74   B7                     OR   A   
2D75   ED 52                  SBC   HL,DE   
2D77   7D                     LD   A,L   
2D78   B4                     OR   H   
2D79   28 5A                  JR   Z,expectM_0_2219S43   
2D7B   CD 8E 09               CALL   printStr   
2D7E   43 6F 64 65 3A 20 3A 61 20 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a {2}; x= 1 x^"   
2D94   CD 8E 09               CALL   printStr   
2D97   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DA6   21 02 00               LD   HL,2   
2DA9   CD DC 08               CALL   prtdec   
2DAC   CD 8E 09               CALL   printStr   
2DAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DBC   E1                     POP   hl   
2DBD   E5                     PUSH   hl   
2DBE   CD DC 08               CALL   prtdec   
2DC1   E1                     POP   hl   
2DC2   CD 8E 09               CALL   printStr   
2DC5   20 28 23 00            .CSTR   " (#"   
2DC9   CD 24 09               CALL   prthex   
2DCC   CD 8E 09               CALL   printStr   
2DCF   29 0D 0A 00            .CSTR   ")\r\n"   
2DD3   76                     HALT      
2DD4   00                     .CSTR      
2DD5                EXPECTM_0_2219S43:      
2DD5   E1                     POP   HL   
2DD6                          ;*Macro unroll:  test ":a {$a}; x= 0 1 x^", 1
2DD6   31 80 3C               LD   SP,STACK   
2DD9   CD 95 09               CALL   init   
2DDC   CD FC 3A               CALL   execStr   
2DDF   3A 61 20 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   ":a {$a}; x= 0 1 x^"   
2DF2                          ;*Macro unroll:  expect ":a {$a}; x= 0 1 x^",1
2DF2   E1                     POP   HL   
2DF3   E5                     PUSH   HL   
2DF4   11 01 00               LD   DE,1   
2DF7   B7                     OR   A   
2DF8   ED 52                  SBC   HL,DE   
2DFA   7D                     LD   A,L   
2DFB   B4                     OR   H   
2DFC   28 5D                  JR   Z,expectM_0_2220S43   
2DFE   CD 8E 09               CALL   printStr   
2E01   43 6F 64 65 3A 20 3A 61 20 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a {$a}; x= 0 1 x^"   
2E1A   CD 8E 09               CALL   printStr   
2E1D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E2C   21 01 00               LD   HL,1   
2E2F   CD DC 08               CALL   prtdec   
2E32   CD 8E 09               CALL   printStr   
2E35   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E42   E1                     POP   hl   
2E43   E5                     PUSH   hl   
2E44   CD DC 08               CALL   prtdec   
2E47   E1                     POP   hl   
2E48   CD 8E 09               CALL   printStr   
2E4B   20 28 23 00            .CSTR   " (#"   
2E4F   CD 24 09               CALL   prthex   
2E52   CD 8E 09               CALL   printStr   
2E55   29 0D 0A 00            .CSTR   ")\r\n"   
2E59   76                     HALT      
2E5A   00                     .CSTR      
2E5B                EXPECTM_0_2220S43:      
2E5B   E1                     POP   HL   
2E5C                          ;*Macro unroll:  test ":ab {$b}; x= 1 2 x^", 2
2E5C   31 80 3C               LD   SP,STACK   
2E5F   CD 95 09               CALL   init   
2E62   CD FC 3A               CALL   execStr   
2E65   3A 61 62 20 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab {$b}; x= 1 2 x^"   
2E79                          ;*Macro unroll:  expect ":ab {$b}; x= 1 2 x^",2
2E79   E1                     POP   HL   
2E7A   E5                     PUSH   HL   
2E7B   11 02 00               LD   DE,2   
2E7E   B7                     OR   A   
2E7F   ED 52                  SBC   HL,DE   
2E81   7D                     LD   A,L   
2E82   B4                     OR   H   
2E83   28 5E                  JR   Z,expectM_0_2221S43   
2E85   CD 8E 09               CALL   printStr   
2E88   43 6F 64 65 3A 20 3A 61 62 20 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab {$b}; x= 1 2 x^"   
2EA2   CD 8E 09               CALL   printStr   
2EA5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EB4   21 02 00               LD   HL,2   
2EB7   CD DC 08               CALL   prtdec   
2EBA   CD 8E 09               CALL   printStr   
2EBD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2ECA   E1                     POP   hl   
2ECB   E5                     PUSH   hl   
2ECC   CD DC 08               CALL   prtdec   
2ECF   E1                     POP   hl   
2ED0   CD 8E 09               CALL   printStr   
2ED3   20 28 23 00            .CSTR   " (#"   
2ED7   CD 24 09               CALL   prthex   
2EDA   CD 8E 09               CALL   printStr   
2EDD   29 0D 0A 00            .CSTR   ")\r\n"   
2EE1   76                     HALT      
2EE2   00                     .CSTR      
2EE3                EXPECTM_0_2221S43:      
2EE3   E1                     POP   HL   
2EE4                          ;*Macro unroll:  test ":a:b {$a}; x= 1 2 x^", 2
2EE4   31 80 3C               LD   SP,STACK   
2EE7   CD 95 09               CALL   init   
2EEA   CD FC 3A               CALL   execStr   
2EED   3A 61 3A 62 20 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":a:b {$a}; x= 1 2 x^"   
2F02                          ;*Macro unroll:  expect ":a:b {$a}; x= 1 2 x^",2
2F02   E1                     POP   HL   
2F03   E5                     PUSH   HL   
2F04   11 02 00               LD   DE,2   
2F07   B7                     OR   A   
2F08   ED 52                  SBC   HL,DE   
2F0A   7D                     LD   A,L   
2F0B   B4                     OR   H   
2F0C   28 5F                  JR   Z,expectM_0_2222S43   
2F0E   CD 8E 09               CALL   printStr   
2F11   43 6F 64 65 3A 20 3A 61 3A 62 20 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b {$a}; x= 1 2 x^"   
2F2C   CD 8E 09               CALL   printStr   
2F2F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F3E   21 02 00               LD   HL,2   
2F41   CD DC 08               CALL   prtdec   
2F44   CD 8E 09               CALL   printStr   
2F47   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F54   E1                     POP   hl   
2F55   E5                     PUSH   hl   
2F56   CD DC 08               CALL   prtdec   
2F59   E1                     POP   hl   
2F5A   CD 8E 09               CALL   printStr   
2F5D   20 28 23 00            .CSTR   " (#"   
2F61   CD 24 09               CALL   prthex   
2F64   CD 8E 09               CALL   printStr   
2F67   29 0D 0A 00            .CSTR   ")\r\n"   
2F6B   76                     HALT      
2F6C   00                     .CSTR      
2F6D                EXPECTM_0_2222S43:      
2F6D   E1                     POP   HL   
2F6E                          ;*Macro unroll:  test ":ab {$b}; x= 1 2 x^", 2
2F6E   31 80 3C               LD   SP,STACK   
2F71   CD 95 09               CALL   init   
2F74   CD FC 3A               CALL   execStr   
2F77   3A 61 62 20 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab {$b}; x= 1 2 x^"   
2F8B                          ;*Macro unroll:  expect ":ab {$b}; x= 1 2 x^",2
2F8B   E1                     POP   HL   
2F8C   E5                     PUSH   HL   
2F8D   11 02 00               LD   DE,2   
2F90   B7                     OR   A   
2F91   ED 52                  SBC   HL,DE   
2F93   7D                     LD   A,L   
2F94   B4                     OR   H   
2F95   28 5E                  JR   Z,expectM_0_2223S43   
2F97   CD 8E 09               CALL   printStr   
2F9A   43 6F 64 65 3A 20 3A 61 62 20 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab {$b}; x= 1 2 x^"   
2FB4   CD 8E 09               CALL   printStr   
2FB7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FC6   21 02 00               LD   HL,2   
2FC9   CD DC 08               CALL   prtdec   
2FCC   CD 8E 09               CALL   printStr   
2FCF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FDC   E1                     POP   hl   
2FDD   E5                     PUSH   hl   
2FDE   CD DC 08               CALL   prtdec   
2FE1   E1                     POP   hl   
2FE2   CD 8E 09               CALL   printStr   
2FE5   20 28 23 00            .CSTR   " (#"   
2FE9   CD 24 09               CALL   prthex   
2FEC   CD 8E 09               CALL   printStr   
2FEF   29 0D 0A 00            .CSTR   ")\r\n"   
2FF3   76                     HALT      
2FF4   00                     .CSTR      
2FF5                EXPECTM_0_2223S43:      
2FF5   E1                     POP   HL   
2FF6                          ;*Macro unroll:  test ":ab {$b $a}; x= 10 15 x^ -", 5
2FF6   31 80 3C               LD   SP,STACK   
2FF9   CD 95 09               CALL   init   
2FFC   CD FC 3A               CALL   execStr   
2FFF   3A 61 62 20 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   ":ab {$b $a}; x= 10 15 x^ -"   
301A                          ;*Macro unroll:  expect ":ab {$b $a}; x= 10 15 x^ -",5
301A   E1                     POP   HL   
301B   E5                     PUSH   HL   
301C   11 05 00               LD   DE,5   
301F   B7                     OR   A   
3020   ED 52                  SBC   HL,DE   
3022   7D                     LD   A,L   
3023   B4                     OR   H   
3024   28 65                  JR   Z,expectM_0_2224S43   
3026   CD 8E 09               CALL   printStr   
3029   43 6F 64 65 3A 20 3A 61 62 20 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab {$b $a}; x= 10 15 x^ -"   
304A   CD 8E 09               CALL   printStr   
304D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
305C   21 05 00               LD   HL,5   
305F   CD DC 08               CALL   prtdec   
3062   CD 8E 09               CALL   printStr   
3065   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3072   E1                     POP   hl   
3073   E5                     PUSH   hl   
3074   CD DC 08               CALL   prtdec   
3077   E1                     POP   hl   
3078   CD 8E 09               CALL   printStr   
307B   20 28 23 00            .CSTR   " (#"   
307F   CD 24 09               CALL   prthex   
3082   CD 8E 09               CALL   printStr   
3085   29 0D 0A 00            .CSTR   ")\r\n"   
3089   76                     HALT      
308A   00                     .CSTR      
308B                EXPECTM_0_2224S43:      
308B   E1                     POP   HL   
308C                          ;*Macro unroll:  test ":a:b {2}; x= 1 x^", 2
308C   31 80 3C               LD   SP,STACK   
308F   CD 95 09               CALL   init   
3092   CD FC 3A               CALL   execStr   
3095   3A 61 3A 62 20 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a:b {2}; x= 1 x^"   
30A7                          ;*Macro unroll:  expect ":a:b {2}; x= 1 x^",2
30A7   E1                     POP   HL   
30A8   E5                     PUSH   HL   
30A9   11 02 00               LD   DE,2   
30AC   B7                     OR   A   
30AD   ED 52                  SBC   HL,DE   
30AF   7D                     LD   A,L   
30B0   B4                     OR   H   
30B1   28 5C                  JR   Z,expectM_0_2225S43   
30B3   CD 8E 09               CALL   printStr   
30B6   43 6F 64 65 3A 20 3A 61 3A 62 20 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b {2}; x= 1 x^"   
30CE   CD 8E 09               CALL   printStr   
30D1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30E0   21 02 00               LD   HL,2   
30E3   CD DC 08               CALL   prtdec   
30E6   CD 8E 09               CALL   printStr   
30E9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30F6   E1                     POP   hl   
30F7   E5                     PUSH   hl   
30F8   CD DC 08               CALL   prtdec   
30FB   E1                     POP   hl   
30FC   CD 8E 09               CALL   printStr   
30FF   20 28 23 00            .CSTR   " (#"   
3103   CD 24 09               CALL   prthex   
3106   CD 8E 09               CALL   printStr   
3109   29 0D 0A 00            .CSTR   ")\r\n"   
310D   76                     HALT      
310E   00                     .CSTR      
310F                EXPECTM_0_2225S43:      
310F   E1                     POP   HL   
3110                          ;*Macro unroll:  test "::b {100 $b= $b}; x= x^", 100
3110   31 80 3C               LD   SP,STACK   
3113   CD 95 09               CALL   init   
3116   CD FC 3A               CALL   execStr   
3119   3A 3A 62 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "::b {100 $b= $b}; x= x^"   
3131                          ;*Macro unroll:  expect "::b {100 $b= $b}; x= x^",100
3131   E1                     POP   HL   
3132   E5                     PUSH   HL   
3133   11 64 00               LD   DE,100   
3136   B7                     OR   A   
3137   ED 52                  SBC   HL,DE   
3139   7D                     LD   A,L   
313A   B4                     OR   H   
313B   28 62                  JR   Z,expectM_0_2226S43   
313D   CD 8E 09               CALL   printStr   
3140   43 6F 64 65 3A 20 3A 3A 62 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b {100 $b= $b}; x= x^"   
315E   CD 8E 09               CALL   printStr   
3161   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3170   21 64 00               LD   HL,100   
3173   CD DC 08               CALL   prtdec   
3176   CD 8E 09               CALL   printStr   
3179   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3186   E1                     POP   hl   
3187   E5                     PUSH   hl   
3188   CD DC 08               CALL   prtdec   
318B   E1                     POP   hl   
318C   CD 8E 09               CALL   printStr   
318F   20 28 23 00            .CSTR   " (#"   
3193   CD 24 09               CALL   prthex   
3196   CD 8E 09               CALL   printStr   
3199   29 0D 0A 00            .CSTR   ")\r\n"   
319D   76                     HALT      
319E   00                     .CSTR      
319F                EXPECTM_0_2226S43:      
319F   E1                     POP   HL   
31A0                          ;*Macro unroll:  test ":a:b {1 $b= $b}; x= 2 x^", 1
31A0   31 80 3C               LD   SP,STACK   
31A3   CD 95 09               CALL   init   
31A6   CD FC 3A               CALL   execStr   
31A9   3A 61 3A 62 20 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b {1 $b= $b}; x= 2 x^"   
31C2                          ;*Macro unroll:  expect ":a:b {1 $b= $b}; x= 2 x^",1
31C2   E1                     POP   HL   
31C3   E5                     PUSH   HL   
31C4   11 01 00               LD   DE,1   
31C7   B7                     OR   A   
31C8   ED 52                  SBC   HL,DE   
31CA   7D                     LD   A,L   
31CB   B4                     OR   H   
31CC   28 63                  JR   Z,expectM_0_2227S43   
31CE   CD 8E 09               CALL   printStr   
31D1   43 6F 64 65 3A 20 3A 61 3A 62 20 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b {1 $b= $b}; x= 2 x^"   
31F0   CD 8E 09               CALL   printStr   
31F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3202   21 01 00               LD   HL,1   
3205   CD DC 08               CALL   prtdec   
3208   CD 8E 09               CALL   printStr   
320B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3218   E1                     POP   hl   
3219   E5                     PUSH   hl   
321A   CD DC 08               CALL   prtdec   
321D   E1                     POP   hl   
321E   CD 8E 09               CALL   printStr   
3221   20 28 23 00            .CSTR   " (#"   
3225   CD 24 09               CALL   prthex   
3228   CD 8E 09               CALL   printStr   
322B   29 0D 0A 00            .CSTR   ")\r\n"   
322F   76                     HALT      
3230   00                     .CSTR      
3231                EXPECTM_0_2227S43:      
3231   E1                     POP   HL   
3232                          ;*Macro unroll:  test ":a:b {$a $b= $b}; x= 2 x^", 2
3232   31 80 3C               LD   SP,STACK   
3235   CD 95 09               CALL   init   
3238   CD FC 3A               CALL   execStr   
323B   3A 61 3A 62 20 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b {$a $b= $b}; x= 2 x^"   
3255                          ;*Macro unroll:  expect ":a:b {$a $b= $b}; x= 2 x^",2
3255   E1                     POP   HL   
3256   E5                     PUSH   HL   
3257   11 02 00               LD   DE,2   
325A   B7                     OR   A   
325B   ED 52                  SBC   HL,DE   
325D   7D                     LD   A,L   
325E   B4                     OR   H   
325F   28 64                  JR   Z,expectM_0_2228S43   
3261   CD 8E 09               CALL   printStr   
3264   43 6F 64 65 3A 20 3A 61 3A 62 20 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b {$a $b= $b}; x= 2 x^"   
3284   CD 8E 09               CALL   printStr   
3287   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3296   21 02 00               LD   HL,2   
3299   CD DC 08               CALL   prtdec   
329C   CD 8E 09               CALL   printStr   
329F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32AC   E1                     POP   hl   
32AD   E5                     PUSH   hl   
32AE   CD DC 08               CALL   prtdec   
32B1   E1                     POP   hl   
32B2   CD 8E 09               CALL   printStr   
32B5   20 28 23 00            .CSTR   " (#"   
32B9   CD 24 09               CALL   prthex   
32BC   CD 8E 09               CALL   printStr   
32BF   29 0D 0A 00            .CSTR   ")\r\n"   
32C3   76                     HALT      
32C4   00                     .CSTR      
32C5                EXPECTM_0_2228S43:      
32C5   E1                     POP   HL   
32C6                          ;*Macro unroll:  test "1 10 20 :ab {/t {$a} {$b} ??};^ +", 11
32C6   31 80 3C               LD   SP,STACK   
32C9   CD 95 09               CALL   init   
32CC   CD FC 3A               CALL   execStr   
32CF   31 20 31 30 20 32 30 20 3A 61 62 20 7B 2F 74 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab {/t {$a} {$b} ??};^ +"   
32F1                          ;*Macro unroll:  expect "1 10 20 :ab {/t {$a} {$b} ??};^ +",11
32F1   E1                     POP   HL   
32F2   E5                     PUSH   HL   
32F3   11 0B 00               LD   DE,11   
32F6   B7                     OR   A   
32F7   ED 52                  SBC   HL,DE   
32F9   7D                     LD   A,L   
32FA   B4                     OR   H   
32FB   28 6C                  JR   Z,expectM_0_2229S43   
32FD   CD 8E 09               CALL   printStr   
3300   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 20 7B 2F 74 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab {/t {$a} {$b} ??};^ +"   
3328   CD 8E 09               CALL   printStr   
332B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
333A   21 0B 00               LD   HL,11   
333D   CD DC 08               CALL   prtdec   
3340   CD 8E 09               CALL   printStr   
3343   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3350   E1                     POP   hl   
3351   E5                     PUSH   hl   
3352   CD DC 08               CALL   prtdec   
3355   E1                     POP   hl   
3356   CD 8E 09               CALL   printStr   
3359   20 28 23 00            .CSTR   " (#"   
335D   CD 24 09               CALL   prthex   
3360   CD 8E 09               CALL   printStr   
3363   29 0D 0A 00            .CSTR   ")\r\n"   
3367   76                     HALT      
3368   00                     .CSTR      
3369                EXPECTM_0_2229S43:      
3369   E1                     POP   HL   
336A                          ;*Macro unroll:  test "1 10 20 :ab {/f {$a} {$b} ??};^ +", 21
336A   31 80 3C               LD   SP,STACK   
336D   CD 95 09               CALL   init   
3370   CD FC 3A               CALL   execStr   
3373   31 20 31 30 20 32 30 20 3A 61 62 20 7B 2F 66 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab {/f {$a} {$b} ??};^ +"   
3395                          ;*Macro unroll:  expect "1 10 20 :ab {/f {$a} {$b} ??};^ +",21
3395   E1                     POP   HL   
3396   E5                     PUSH   HL   
3397   11 15 00               LD   DE,21   
339A   B7                     OR   A   
339B   ED 52                  SBC   HL,DE   
339D   7D                     LD   A,L   
339E   B4                     OR   H   
339F   28 6C                  JR   Z,expectM_0_2230S43   
33A1   CD 8E 09               CALL   printStr   
33A4   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 20 7B 2F 66 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab {/f {$a} {$b} ??};^ +"   
33CC   CD 8E 09               CALL   printStr   
33CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33DE   21 15 00               LD   HL,21   
33E1   CD DC 08               CALL   prtdec   
33E4   CD 8E 09               CALL   printStr   
33E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33F4   E1                     POP   hl   
33F5   E5                     PUSH   hl   
33F6   CD DC 08               CALL   prtdec   
33F9   E1                     POP   hl   
33FA   CD 8E 09               CALL   printStr   
33FD   20 28 23 00            .CSTR   " (#"   
3401   CD 24 09               CALL   prthex   
3404   CD 8E 09               CALL   printStr   
3407   29 0D 0A 00            .CSTR   ")\r\n"   
340B   76                     HALT      
340C   00                     .CSTR      
340D                EXPECTM_0_2230S43:      
340D   E1                     POP   HL   
340E                          ;*Macro unroll:  test "[10 20 30] 1%", 20
340E   31 80 3C               LD   SP,STACK   
3411   CD 95 09               CALL   init   
3414   CD FC 3A               CALL   execStr   
3417   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
3425                          ;*Macro unroll:  expect "[10 20 30] 1%",20
3425   E1                     POP   HL   
3426   E5                     PUSH   HL   
3427   11 14 00               LD   DE,20   
342A   B7                     OR   A   
342B   ED 52                  SBC   HL,DE   
342D   7D                     LD   A,L   
342E   B4                     OR   H   
342F   28 58                  JR   Z,expectM_0_2231S43   
3431   CD 8E 09               CALL   printStr   
3434   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
3448   CD 8E 09               CALL   printStr   
344B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
345A   21 14 00               LD   HL,20   
345D   CD DC 08               CALL   prtdec   
3460   CD 8E 09               CALL   printStr   
3463   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3470   E1                     POP   hl   
3471   E5                     PUSH   hl   
3472   CD DC 08               CALL   prtdec   
3475   E1                     POP   hl   
3476   CD 8E 09               CALL   printStr   
3479   20 28 23 00            .CSTR   " (#"   
347D   CD 24 09               CALL   prthex   
3480   CD 8E 09               CALL   printStr   
3483   29 0D 0A 00            .CSTR   ")\r\n"   
3487   76                     HALT      
3488   00                     .CSTR      
3489                EXPECTM_0_2231S43:      
3489   E1                     POP   HL   
348A                          ;*Macro unroll:  test "/c [1 2 3] 1%", 2
348A   31 80 3C               LD   SP,STACK   
348D   CD 95 09               CALL   init   
3490   CD FC 3A               CALL   execStr   
3493   2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "/c [1 2 3] 1%"   
34A1                          ;*Macro unroll:  expect "/c [1 2 3] 1%",2
34A1   E1                     POP   HL   
34A2   E5                     PUSH   HL   
34A3   11 02 00               LD   DE,2   
34A6   B7                     OR   A   
34A7   ED 52                  SBC   HL,DE   
34A9   7D                     LD   A,L   
34AA   B4                     OR   H   
34AB   28 58                  JR   Z,expectM_0_2232S43   
34AD   CD 8E 09               CALL   printStr   
34B0   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","/c [1 2 3] 1%"   
34C4   CD 8E 09               CALL   printStr   
34C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34D6   21 02 00               LD   HL,2   
34D9   CD DC 08               CALL   prtdec   
34DC   CD 8E 09               CALL   printStr   
34DF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34EC   E1                     POP   hl   
34ED   E5                     PUSH   hl   
34EE   CD DC 08               CALL   prtdec   
34F1   E1                     POP   hl   
34F2   CD 8E 09               CALL   printStr   
34F5   20 28 23 00            .CSTR   " (#"   
34F9   CD 24 09               CALL   prthex   
34FC   CD 8E 09               CALL   printStr   
34FF   29 0D 0A 00            .CSTR   ")\r\n"   
3503   76                     HALT      
3504   00                     .CSTR      
3505                EXPECTM_0_2232S43:      
3505   E1                     POP   HL   
3506                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1%", 66
3506   31 80 3C               LD   SP,STACK   
3509   CD 95 09               CALL   init   
350C   CD FC 3A               CALL   execStr   
350F   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "/c ['A' 'B' 'C'] 1%"   
3523                          ;*Macro unroll:  expect "/c ['A' 'B' 'C'] 1%",66
3523   E1                     POP   HL   
3524   E5                     PUSH   HL   
3525   11 42 00               LD   DE,66   
3528   B7                     OR   A   
3529   ED 52                  SBC   HL,DE   
352B   7D                     LD   A,L   
352C   B4                     OR   H   
352D   28 5E                  JR   Z,expectM_0_2233S43   
352F   CD 8E 09               CALL   printStr   
3532   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1%"   
354C   CD 8E 09               CALL   printStr   
354F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
355E   21 42 00               LD   HL,66   
3561   CD DC 08               CALL   prtdec   
3564   CD 8E 09               CALL   printStr   
3567   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3574   E1                     POP   hl   
3575   E5                     PUSH   hl   
3576   CD DC 08               CALL   prtdec   
3579   E1                     POP   hl   
357A   CD 8E 09               CALL   printStr   
357D   20 28 23 00            .CSTR   " (#"   
3581   CD 24 09               CALL   prthex   
3584   CD 8E 09               CALL   printStr   
3587   29 0D 0A 00            .CSTR   ")\r\n"   
358B   76                     HALT      
358C   00                     .CSTR      
358D                EXPECTM_0_2233S43:      
358D   E1                     POP   HL   
358E                          ;*Macro unroll:  test "[{10} {20} {30}] 0%^ ", 10
358E   31 80 3C               LD   SP,STACK   
3591   CD 95 09               CALL   init   
3594   CD FC 3A               CALL   execStr   
3597   5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "[{10} {20} {30}] 0%^ "   
35AD                          ;*Macro unroll:  expect "[{10} {20} {30}] 0%^ ",10
35AD   E1                     POP   HL   
35AE   E5                     PUSH   HL   
35AF   11 0A 00               LD   DE,10   
35B2   B7                     OR   A   
35B3   ED 52                  SBC   HL,DE   
35B5   7D                     LD   A,L   
35B6   B4                     OR   H   
35B7   28 60                  JR   Z,expectM_0_2234S43   
35B9   CD 8E 09               CALL   printStr   
35BC   43 6F 64 65 3A 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "Code: ","[{10} {20} {30}] 0%^ "   
35D8   CD 8E 09               CALL   printStr   
35DB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35EA   21 0A 00               LD   HL,10   
35ED   CD DC 08               CALL   prtdec   
35F0   CD 8E 09               CALL   printStr   
35F3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3600   E1                     POP   hl   
3601   E5                     PUSH   hl   
3602   CD DC 08               CALL   prtdec   
3605   E1                     POP   hl   
3606   CD 8E 09               CALL   printStr   
3609   20 28 23 00            .CSTR   " (#"   
360D   CD 24 09               CALL   prthex   
3610   CD 8E 09               CALL   printStr   
3613   29 0D 0A 00            .CSTR   ")\r\n"   
3617   76                     HALT      
3618   00                     .CSTR      
3619                EXPECTM_0_2234S43:      
3619   E1                     POP   HL   
361A                          ;*Macro unroll:  test "10 20 :ab { [{$a} {$b}] 0%^ };^", 10
361A   31 80 3C               LD   SP,STACK   
361D   CD 95 09               CALL   init   
3620   CD FC 3A               CALL   execStr   
3623   31 30 20 32 30 20 3A 61 62 20 7B 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 30 25 5E 20 7D 3B 5E 00 .CSTR   "10 20 :ab { [{$a} {$b}] 0%^ };^"   
3643                          ;*Macro unroll:  expect "10 20 :ab { [{$a} {$b}] 0%^ };^",10
3643   E1                     POP   HL   
3644   E5                     PUSH   HL   
3645   11 0A 00               LD   DE,10   
3648   B7                     OR   A   
3649   ED 52                  SBC   HL,DE   
364B   7D                     LD   A,L   
364C   B4                     OR   H   
364D   28 6A                  JR   Z,expectM_0_2235S43   
364F   CD 8E 09               CALL   printStr   
3652   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 20 7B 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 30 25 5E 20 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab { [{$a} {$b}] 0%^ };^"   
3678   CD 8E 09               CALL   printStr   
367B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
368A   21 0A 00               LD   HL,10   
368D   CD DC 08               CALL   prtdec   
3690   CD 8E 09               CALL   printStr   
3693   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36A0   E1                     POP   hl   
36A1   E5                     PUSH   hl   
36A2   CD DC 08               CALL   prtdec   
36A5   E1                     POP   hl   
36A6   CD 8E 09               CALL   printStr   
36A9   20 28 23 00            .CSTR   " (#"   
36AD   CD 24 09               CALL   prthex   
36B0   CD 8E 09               CALL   printStr   
36B3   29 0D 0A 00            .CSTR   ")\r\n"   
36B7   76                     HALT      
36B8   00                     .CSTR      
36B9                EXPECTM_0_2235S43:      
36B9   E1                     POP   HL   
36BA                          ;*Macro unroll:  test "0 10 20 :iab { [{$a} {$b}] $i%^ };^", 10
36BA   31 80 3C               LD   SP,STACK   
36BD   CD 95 09               CALL   init   
36C0   CD FC 3A               CALL   execStr   
36C3   30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 24 69 25 5E 20 7D 3B 5E 00 .CSTR   "0 10 20 :iab { [{$a} {$b}] $i%^ };^"   
36E7                          ;*Macro unroll:  expect "0 10 20 :iab { [{$a} {$b}] $i%^ };^",10
36E7   E1                     POP   HL   
36E8   E5                     PUSH   HL   
36E9   11 0A 00               LD   DE,10   
36EC   B7                     OR   A   
36ED   ED 52                  SBC   HL,DE   
36EF   7D                     LD   A,L   
36F0   B4                     OR   H   
36F1   28 6E                  JR   Z,expectM_0_2236S43   
36F3   CD 8E 09               CALL   printStr   
36F6   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 24 69 25 5E 20 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab { [{$a} {$b}] $i%^ };^"   
3720   CD 8E 09               CALL   printStr   
3723   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3732   21 0A 00               LD   HL,10   
3735   CD DC 08               CALL   prtdec   
3738   CD 8E 09               CALL   printStr   
373B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3748   E1                     POP   hl   
3749   E5                     PUSH   hl   
374A   CD DC 08               CALL   prtdec   
374D   E1                     POP   hl   
374E   CD 8E 09               CALL   printStr   
3751   20 28 23 00            .CSTR   " (#"   
3755   CD 24 09               CALL   prthex   
3758   CD 8E 09               CALL   printStr   
375B   29 0D 0A 00            .CSTR   ")\r\n"   
375F   76                     HALT      
3760   00                     .CSTR      
3761                EXPECTM_0_2236S43:      
3761   E1                     POP   HL   
3762                          ;*Macro unroll:  test "1 10 20 :iab { [{$a} {$b}] $i%^ };^", 20
3762   31 80 3C               LD   SP,STACK   
3765   CD 95 09               CALL   init   
3768   CD FC 3A               CALL   execStr   
376B   31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 24 69 25 5E 20 7D 3B 5E 00 .CSTR   "1 10 20 :iab { [{$a} {$b}] $i%^ };^"   
378F                          ;*Macro unroll:  expect "1 10 20 :iab { [{$a} {$b}] $i%^ };^",20
378F   E1                     POP   HL   
3790   E5                     PUSH   HL   
3791   11 14 00               LD   DE,20   
3794   B7                     OR   A   
3795   ED 52                  SBC   HL,DE   
3797   7D                     LD   A,L   
3798   B4                     OR   H   
3799   28 6E                  JR   Z,expectM_0_2237S43   
379B   CD 8E 09               CALL   printStr   
379E   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 24 69 25 5E 20 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab { [{$a} {$b}] $i%^ };^"   
37C8   CD 8E 09               CALL   printStr   
37CB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37DA   21 14 00               LD   HL,20   
37DD   CD DC 08               CALL   prtdec   
37E0   CD 8E 09               CALL   printStr   
37E3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37F0   E1                     POP   hl   
37F1   E5                     PUSH   hl   
37F2   CD DC 08               CALL   prtdec   
37F5   E1                     POP   hl   
37F6   CD 8E 09               CALL   printStr   
37F9   20 28 23 00            .CSTR   " (#"   
37FD   CD 24 09               CALL   prthex   
3800   CD 8E 09               CALL   printStr   
3803   29 0D 0A 00            .CSTR   ")\r\n"   
3807   76                     HALT      
3808   00                     .CSTR      
3809                EXPECTM_0_2237S43:      
3809   E1                     POP   HL   
380A                          ;*Macro unroll:  test "5 [4] :a {$a}; /p ^", 4
380A   31 80 3C               LD   SP,STACK   
380D   CD 95 09               CALL   init   
3810   CD FC 3A               CALL   execStr   
3813   35 20 5B 34 5D 20 3A 61 20 7B 24 61 7D 3B 20 2F 70 20 5E 00 .CSTR   "5 [4] :a {$a}; /p ^"   
3827                          ;*Macro unroll:  expect "5 [4] :a {$a}; /p ^",4
3827   E1                     POP   HL   
3828   E5                     PUSH   HL   
3829   11 04 00               LD   DE,4   
382C   B7                     OR   A   
382D   ED 52                  SBC   HL,DE   
382F   7D                     LD   A,L   
3830   B4                     OR   H   
3831   28 5E                  JR   Z,expectM_0_2238S43   
3833   CD 8E 09               CALL   printStr   
3836   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 20 7B 24 61 7D 3B 20 2F 70 20 5E 00 .CSTR   "Code: ","5 [4] :a {$a}; /p ^"   
3850   CD 8E 09               CALL   printStr   
3853   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3862   21 04 00               LD   HL,4   
3865   CD DC 08               CALL   prtdec   
3868   CD 8E 09               CALL   printStr   
386B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3878   E1                     POP   hl   
3879   E5                     PUSH   hl   
387A   CD DC 08               CALL   prtdec   
387D   E1                     POP   hl   
387E   CD 8E 09               CALL   printStr   
3881   20 28 23 00            .CSTR   " (#"   
3885   CD 24 09               CALL   prthex   
3888   CD 8E 09               CALL   printStr   
388B   29 0D 0A 00            .CSTR   ")\r\n"   
388F   76                     HALT      
3890   00                     .CSTR      
3891                EXPECTM_0_2238S43:      
3891   E1                     POP   HL   
3892                          ;*Macro unroll:  test "5 [4] :ab {$a $b +}; /p ^", 9
3892   31 80 3C               LD   SP,STACK   
3895   CD 95 09               CALL   init   
3898   CD FC 3A               CALL   execStr   
389B   35 20 5B 34 5D 20 3A 61 62 20 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 20 5E 00 .CSTR   "5 [4] :ab {$a $b +}; /p ^"   
38B5                          ;*Macro unroll:  expect "5 [4] :ab {$a $b +}; /p ^",9
38B5   E1                     POP   HL   
38B6   E5                     PUSH   HL   
38B7   11 09 00               LD   DE,9   
38BA   B7                     OR   A   
38BB   ED 52                  SBC   HL,DE   
38BD   7D                     LD   A,L   
38BE   B4                     OR   H   
38BF   28 64                  JR   Z,expectM_0_2239S43   
38C1   CD 8E 09               CALL   printStr   
38C4   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 20 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 20 5E 00 .CSTR   "Code: ","5 [4] :ab {$a $b +}; /p ^"   
38E4   CD 8E 09               CALL   printStr   
38E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38F6   21 09 00               LD   HL,9   
38F9   CD DC 08               CALL   prtdec   
38FC   CD 8E 09               CALL   printStr   
38FF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
390C   E1                     POP   hl   
390D   E5                     PUSH   hl   
390E   CD DC 08               CALL   prtdec   
3911   E1                     POP   hl   
3912   CD 8E 09               CALL   printStr   
3915   20 28 23 00            .CSTR   " (#"   
3919   CD 24 09               CALL   prthex   
391C   CD 8E 09               CALL   printStr   
391F   29 0D 0A 00            .CSTR   ")\r\n"   
3923   76                     HALT      
3924   00                     .CSTR      
3925                EXPECTM_0_2239S43:      
3925   E1                     POP   HL   
3926                          ;*Macro unroll:  test "3i= ( i i-- i/b )^ + +", 6
3926   31 80 3C               LD   SP,STACK   
3929   CD 95 09               CALL   init   
392C   CD FC 3A               CALL   execStr   
392F   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 20 29 5E 20 2B 20 2B 00 .CSTR   "3i= ( i i-- i/b )^ + +"   
3946                          ;*Macro unroll:  expect "3i= ( i i-- i/b )^ + +",6
3946   E1                     POP   HL   
3947   E5                     PUSH   HL   
3948   11 06 00               LD   DE,6   
394B   B7                     OR   A   
394C   ED 52                  SBC   HL,DE   
394E   7D                     LD   A,L   
394F   B4                     OR   H   
3950   28 61                  JR   Z,expectM_0_2240S43   
3952   CD 8E 09               CALL   printStr   
3955   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/b )^ + +"   
3972   CD 8E 09               CALL   printStr   
3975   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3984   21 06 00               LD   HL,6   
3987   CD DC 08               CALL   prtdec   
398A   CD 8E 09               CALL   printStr   
398D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
399A   E1                     POP   hl   
399B   E5                     PUSH   hl   
399C   CD DC 08               CALL   prtdec   
399F   E1                     POP   hl   
39A0   CD 8E 09               CALL   printStr   
39A3   20 28 23 00            .CSTR   " (#"   
39A7   CD 24 09               CALL   prthex   
39AA   CD 8E 09               CALL   printStr   
39AD   29 0D 0A 00            .CSTR   ")\r\n"   
39B1   76                     HALT      
39B2   00                     .CSTR      
39B3                EXPECTM_0_2240S43:      
39B3   E1                     POP   HL   
39B4                          ;*Macro unroll:  test "3i= [ ( i i-- i/b )^ ] 1%", 2
39B4   31 80 3C               LD   SP,STACK   
39B7   CD 95 09               CALL   init   
39BA   CD FC 3A               CALL   execStr   
39BD   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 20 29 5E 20 5D 20 31 25 00 .CSTR   "3i= [ ( i i-- i/b )^ ] 1%"   
39D7                          ;*Macro unroll:  expect "3i= [ ( i i-- i/b )^ ] 1%",2
39D7   E1                     POP   HL   
39D8   E5                     PUSH   HL   
39D9   11 02 00               LD   DE,2   
39DC   B7                     OR   A   
39DD   ED 52                  SBC   HL,DE   
39DF   7D                     LD   A,L   
39E0   B4                     OR   H   
39E1   28 64                  JR   Z,expectM_0_2241S43   
39E3   CD 8E 09               CALL   printStr   
39E6   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 20 29 5E 20 5D 20 31 25 00 .CSTR   "Code: ","3i= [ ( i i-- i/b )^ ] 1%"   
3A06   CD 8E 09               CALL   printStr   
3A09   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A18   21 02 00               LD   HL,2   
3A1B   CD DC 08               CALL   prtdec   
3A1E   CD 8E 09               CALL   printStr   
3A21   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A2E   E1                     POP   hl   
3A2F   E5                     PUSH   hl   
3A30   CD DC 08               CALL   prtdec   
3A33   E1                     POP   hl   
3A34   CD 8E 09               CALL   printStr   
3A37   20 28 23 00            .CSTR   " (#"   
3A3B   CD 24 09               CALL   prthex   
3A3E   CD 8E 09               CALL   printStr   
3A41   29 0D 0A 00            .CSTR   ")\r\n"   
3A45   76                     HALT      
3A46   00                     .CSTR      
3A47                EXPECTM_0_2241S43:      
3A47   E1                     POP   HL   
3A48                          ;*Macro unroll:  test "0 j= 4 i= ( i j+= i i-- i/b )^ j ", 10
3A48   31 80 3C               LD   SP,STACK   
3A4B   CD 95 09               CALL   init   
3A4E   CD FC 3A               CALL   execStr   
3A51   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 2B 3D 20 69 20 69 2D 2D 20 69 2F 62 20 29 5E 20 6A 20 00 .CSTR   "0 j= 4 i= ( i j+= i i-- i/b )^ j "   
3A73                          ;*Macro unroll:  expect "0 j= 4 i= ( i j+= i i-- i/b )^ j ",10
3A73   E1                     POP   HL   
3A74   E5                     PUSH   HL   
3A75   11 0A 00               LD   DE,10   
3A78   B7                     OR   A   
3A79   ED 52                  SBC   HL,DE   
3A7B   7D                     LD   A,L   
3A7C   B4                     OR   H   
3A7D   28 6C                  JR   Z,expectM_0_2242S43   
3A7F   CD 8E 09               CALL   printStr   
3A82   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 2B 3D 20 69 20 69 2D 2D 20 69 2F 62 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j+= i i-- i/b )^ j "   
3AAA   CD 8E 09               CALL   printStr   
3AAD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3ABC   21 0A 00               LD   HL,10   
3ABF   CD DC 08               CALL   prtdec   
3AC2   CD 8E 09               CALL   printStr   
3AC5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AD2   E1                     POP   hl   
3AD3   E5                     PUSH   hl   
3AD4   CD DC 08               CALL   prtdec   
3AD7   E1                     POP   hl   
3AD8   CD 8E 09               CALL   printStr   
3ADB   20 28 23 00            .CSTR   " (#"   
3ADF   CD 24 09               CALL   prthex   
3AE2   CD 8E 09               CALL   printStr   
3AE5   29 0D 0A 00            .CSTR   ")\r\n"   
3AE9   76                     HALT      
3AEA   00                     .CSTR      
3AEB                EXPECTM_0_2242S43:      
3AEB   E1                     POP   HL   
3AEC                             ; 
3AEC   CD 8E 09               CALL   printStr   
3AEF   44 6F 6E 65 21 00      .CSTR   "Done!"   
3AF5   76                     HALT      
3AF6                          ALIGN   2   
3AF6                PRINTER:      
3AF6   E1                     POP   hl   
3AF7   CD DC 08               CALL   prtdec   
3AFA   DD E9                  JP   (ix)   
3AFC                             ; executes a null teminated string (null executes exit_)
3AFC                             ; the string should be immedaitely following the call
3AFC                EXECSTR:      ; create a root stack frame
3AFC   C1                     POP   bc   ; bc = code*
3AFD   0B                     DEC   bc   ; dec to prepare for next routine
3AFE   11 00 00               LD   de,0   
3B01   D5                     PUSH   de   ; push fake IP
3B02   D5                     PUSH   de   ; push null arg_list*
3B03   D5                     PUSH   de   ; push null first_arg*
3B04   D5                     PUSH   de   ; push fake BP
3B05   DD E9                  JP   (ix)   
3B07                          ALIGN   $100   
3C00                             ; .org RAMSTART
3C00                          DS   DSIZE   
3C80                STACK:       
3C80                          ALIGN   $100   
3D00                VARS:        
3D00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
3DD0                RESTARTS:      
3DD0                RST08:    DS   2   
3DD2                RST10:    DS   2   
3DD4                RST18:    DS   2   
3DD6                RST20:    DS   2   
3DD8                RST28:    DS   2   
3DDA                RST30:    DS   2   ; 
3DDC                BAUD:     DS   2   ; 
3DDE                INTVEC:   DS   2   ; 
3DE0                NMIVEC:   DS   2   ; 
3DE2                GETCVEC:   DS   2   ; 
3DE4                PUTCVEC:   DS   2   ; 
3DE6                SYSVARS:      
3DE6                             ; initialised sys variables (preserved)
3DE6                VDATAWIDTH:   DS   2   ; 
3DE8                VTIBPTR:   DS   2   ; 
3DEA                VNEXT:    DS   2   ; 
3DEC                VHEAPPTR:   DS   2   ; 
3DEE                             ; uninitialised sys variables (preserved)
3DEE                VPOINTER:   DS   2   ; 
3DF0                VREMAIN:   DS   2   ; 
3DF2                VSAVEDIP:   DS   2   ; 
3DF4                VSAVEDSP:   DS   2   ; 
3DF6                VSAVEDBP:   DS   2   ; 
3DF8                VCHECKSUM:   DS   2   ; 
3DFA                             ; uninitialised sys variables (unpreserved)
3DFA                VTEMP1:   DS   2   ; 
3DFC                VTEMP2:   DS   2   ; 
3DFE                VLASTDEF:   DS   2   ; 
3E00                VHASHSTR:   DS   2   ; 
3E02                TBPTR:    DS   2   ; reserved for tests
3E04                          ALIGN   $100   
3F00                TIB:      DS   TIBSIZE   
4000                          ALIGN   $100   
4000                PAD:      DS   $100   
4100                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 56 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               08DA DEFINED AT LINE 1378 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1350 IN monty.asm
                    > USED AT LINE 1579 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 787 IN monty.asm
                    > USED AT LINE 794 IN monty.asm
                    > USED AT LINE 1389 IN monty.asm
                    > USED AT LINE 1430 IN monty.asm
                    > USED AT LINE 1454 IN monty.asm
                    > USED AT LINE 1457 IN monty.asm
                    > USED AT LINE 1610 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 53 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 845 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 850 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1646 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
DQUOTE:             0022 DEFINED AT LINE 27 IN monty.asm
                    > USED AT LINE 1189 IN monty.asm
                    > USED AT LINE 1476 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 29 IN monty.asm
MACROS:             0180 DEFINED AT LINE 61 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 66 IN monty.asm
                    > USED AT LINE 1534 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 74 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 76 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 110 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 213 IN monty.asm
PLUS_:              0300 DEFINED AT LINE 215 IN monty.asm
AT_:                0303 DEFINED AT LINE 217 IN monty.asm
AMPER_:             0306 DEFINED AT LINE 219 IN monty.asm
DOLLAR_:            0309 DEFINED AT LINE 221 IN monty.asm
LBRACK_:            030C DEFINED AT LINE 223 IN monty.asm
RBRACK_:            030F DEFINED AT LINE 225 IN monty.asm
PERCENT_:           0312 DEFINED AT LINE 227 IN monty.asm
BACKSLASH_:         0315 DEFINED AT LINE 229 IN monty.asm
LBRACE_:            0318 DEFINED AT LINE 231 IN monty.asm
RBRACE_:            031B DEFINED AT LINE 233 IN monty.asm
TICK_:              031E DEFINED AT LINE 235 IN monty.asm
SEMICOLON_:         0321 DEFINED AT LINE 237 IN monty.asm
DOT_:               0324 DEFINED AT LINE 239 IN monty.asm
UNDERSCORE_:        0327 DEFINED AT LINE 241 IN monty.asm
COLON_:             032A DEFINED AT LINE 243 IN monty.asm
UPCASE_:            032D DEFINED AT LINE 245 IN monty.asm
LOWCASE_:           0330 DEFINED AT LINE 247 IN monty.asm
QUESTION_:          0333 DEFINED AT LINE 249 IN monty.asm
STAR_:              0336 DEFINED AT LINE 251 IN monty.asm
BANG_:              0339 DEFINED AT LINE 253 IN monty.asm
NUM_:               033E DEFINED AT LINE 256 IN monty.asm
                    > USED AT LINE 1216 IN monty.asm
HASH_:              0341 DEFINED AT LINE 258 IN monty.asm
PIPE_:              0344 DEFINED AT LINE 260 IN monty.asm
CARET_:             0347 DEFINED AT LINE 262 IN monty.asm
COMMA_:             034A DEFINED AT LINE 264 IN monty.asm
DBLQUOTE_:          034D DEFINED AT LINE 266 IN monty.asm
MINUS_:             0350 DEFINED AT LINE 268 IN monty.asm
EQ_:                0353 DEFINED AT LINE 270 IN monty.asm
EQ0:                035D DEFINED AT LINE 277 IN monty.asm
                    > USED AT LINE 274 IN monty.asm
EQ1:                035E DEFINED AT LINE 279 IN monty.asm
                    > USED AT LINE 255 IN monty.asm
GT_:                0362 DEFINED AT LINE 283 IN monty.asm
LPAREN_:            036D DEFINED AT LINE 291 IN monty.asm
LT_:                0370 DEFINED AT LINE 293 IN monty.asm
LT1:                0379 DEFINED AT LINE 300 IN monty.asm
                    > USED AT LINE 290 IN monty.asm
SLASH_:             0382 DEFINED AT LINE 305 IN monty.asm
NOP_:               0385 DEFINED AT LINE 307 IN monty.asm
RPAREN_:            0387 DEFINED AT LINE 309 IN monty.asm
PLUS:               038A DEFINED AT LINE 316 IN monty.asm
                    > USED AT LINE 216 IN monty.asm
ADD:                038A DEFINED AT LINE 317 IN monty.asm
ADD1:               0395 DEFINED AT LINE 325 IN monty.asm
                    > USED AT LINE 321 IN monty.asm
ADD3:               0399 DEFINED AT LINE 330 IN monty.asm
                    > USED AT LINE 360 IN monty.asm
                    > USED AT LINE 768 IN monty.asm
                    > USED AT LINE 1063 IN monty.asm
                    > USED AT LINE 1230 IN monty.asm
AT:                 03A4 DEFINED AT LINE 341 IN monty.asm
                    > USED AT LINE 218 IN monty.asm
ADDR:               03A4 DEFINED AT LINE 342 IN monty.asm
AMPER:              03B0 DEFINED AT LINE 349 IN monty.asm
                    > USED AT LINE 220 IN monty.asm
AND:                03B0 DEFINED AT LINE 350 IN monty.asm
AND1:               03B7 DEFINED AT LINE 358 IN monty.asm
                    > USED AT LINE 371 IN monty.asm
PIPE:               03BB DEFINED AT LINE 362 IN monty.asm
                    > USED AT LINE 261 IN monty.asm
OR:                 03BB DEFINED AT LINE 363 IN monty.asm
XOR:                03C4 DEFINED AT LINE 373 IN monty.asm
                    > USED AT LINE 1263 IN monty.asm
XOR1:               03C5 DEFINED AT LINE 375 IN monty.asm
                    > USED AT LINE 387 IN monty.asm
INVERT:             03CF DEFINED AT LINE 385 IN monty.asm
                    > USED AT LINE 1261 IN monty.asm
DOLLAR:             03D4 DEFINED AT LINE 392 IN monty.asm
                    > USED AT LINE 222 IN monty.asm
ARG:                03D4 DEFINED AT LINE 393 IN monty.asm
ARG0:               03F2 DEFINED AT LINE 414 IN monty.asm
                    > USED AT LINE 420 IN monty.asm
ARG0A:              03FB DEFINED AT LINE 422 IN monty.asm
                    > USED AT LINE 399 IN monty.asm
                    > USED AT LINE 406 IN monty.asm
ARG1:               0400 DEFINED AT LINE 425 IN monty.asm
                    > USED AT LINE 418 IN monty.asm
ARG1A:              0408 DEFINED AT LINE 432 IN monty.asm
                    > USED AT LINE 424 IN monty.asm
LBRACK:             040B DEFINED AT LINE 436 IN monty.asm
                    > USED AT LINE 224 IN monty.asm
ARRBEGIN:           040B DEFINED AT LINE 437 IN monty.asm
RBRACK:             0427 DEFINED AT LINE 451 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
ARREND:             0427 DEFINED AT LINE 452 IN monty.asm
ARREND1:            0441 DEFINED AT LINE 468 IN monty.asm
                    > USED AT LINE 484 IN monty.asm
ARREND2:            0451 DEFINED AT LINE 478 IN monty.asm
                    > USED AT LINE 474 IN monty.asm
ARRINDEX:           0475 DEFINED AT LINE 505 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
ARRINDEX0:          047D DEFINED AT LINE 511 IN monty.asm
ARRINDEX1:          047E DEFINED AT LINE 513 IN monty.asm
                    > USED AT LINE 510 IN monty.asm
ARRINDEX2:          048A DEFINED AT LINE 522 IN monty.asm
                    > USED AT LINE 519 IN monty.asm
ASSIGN:             048D DEFINED AT LINE 527 IN monty.asm
                    > USED AT LINE 276 IN monty.asm
ASSIGN0:            048F DEFINED AT LINE 530 IN monty.asm
                    > USED AT LINE 324 IN monty.asm
                    > USED AT LINE 334 IN monty.asm
                    > USED AT LINE 1223 IN monty.asm
ASSIGNX:            0490 DEFINED AT LINE 532 IN monty.asm
ASSIGN1:            049C DEFINED AT LINE 540 IN monty.asm
                    > USED AT LINE 537 IN monty.asm
COLON:              049E DEFINED AT LINE 547 IN monty.asm
                    > USED AT LINE 244 IN monty.asm
ARGLIST:            049E DEFINED AT LINE 548 IN monty.asm
ARGLIST1:           04A8 DEFINED AT LINE 555 IN monty.asm
                    > USED AT LINE 576 IN monty.asm
ARGLIST1A:          04B0 DEFINED AT LINE 561 IN monty.asm
                    > USED AT LINE 558 IN monty.asm
ARGLIST2:           04B8 DEFINED AT LINE 566 IN monty.asm
ARGLIST3:           04C0 DEFINED AT LINE 574 IN monty.asm
                    > USED AT LINE 560 IN monty.asm
                    > USED AT LINE 572 IN monty.asm
ARGLIST4:           04C3 DEFINED AT LINE 577 IN monty.asm
                    > USED AT LINE 563 IN monty.asm
                    > USED AT LINE 565 IN monty.asm
ARGLIST5:           04C8 DEFINED AT LINE 582 IN monty.asm
                    > USED AT LINE 580 IN monty.asm
LBRACE:             04D4 DEFINED AT LINE 593 IN monty.asm
                    > USED AT LINE 232 IN monty.asm
BLOCK:              04D4 DEFINED AT LINE 594 IN monty.asm
                    > USED AT LINE 855 IN monty.asm
BLOCK1:             04D8 DEFINED AT LINE 598 IN monty.asm
                    > USED AT LINE 602 IN monty.asm
                    > USED AT LINE 624 IN monty.asm
                    > USED AT LINE 627 IN monty.asm
                    > USED AT LINE 632 IN monty.asm
                    > USED AT LINE 636 IN monty.asm
BLOCK2:             0504 DEFINED AT LINE 625 IN monty.asm
                    > USED AT LINE 612 IN monty.asm
                    > USED AT LINE 614 IN monty.asm
                    > USED AT LINE 616 IN monty.asm
BLOCK3:             0507 DEFINED AT LINE 628 IN monty.asm
                    > USED AT LINE 619 IN monty.asm
                    > USED AT LINE 621 IN monty.asm
                    > USED AT LINE 623 IN monty.asm
BLOCK4:             050F DEFINED AT LINE 634 IN monty.asm
                    > USED AT LINE 605 IN monty.asm
                    > USED AT LINE 607 IN monty.asm
                    > USED AT LINE 609 IN monty.asm
BLOCK5:             0512 DEFINED AT LINE 637 IN monty.asm
                    > USED AT LINE 633 IN monty.asm
BLOCK6:             053A DEFINED AT LINE 656 IN monty.asm
                    > USED AT LINE 643 IN monty.asm
RBRACE:             053D DEFINED AT LINE 660 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
BLOCKEND:           053D DEFINED AT LINE 661 IN monty.asm
                    > USED AT LINE 1322 IN monty.asm
BLOCKEND1:          0569 DEFINED AT LINE 683 IN monty.asm
                    > USED AT LINE 676 IN monty.asm
BLOCKEND2:          0575 DEFINED AT LINE 690 IN monty.asm
                    > USED AT LINE 682 IN monty.asm
BLOCKEND3:          0587 DEFINED AT LINE 704 IN monty.asm
                    > USED AT LINE 696 IN monty.asm
TICK:               0592 DEFINED AT LINE 715 IN monty.asm
                    > USED AT LINE 236 IN monty.asm
CHAR:               0592 DEFINED AT LINE 716 IN monty.asm
CHAR1:              0595 DEFINED AT LINE 718 IN monty.asm
                    > USED AT LINE 729 IN monty.asm
CHAR2:              05A1 DEFINED AT LINE 727 IN monty.asm
                    > USED AT LINE 724 IN monty.asm
CHAR3:              05A4 DEFINED AT LINE 730 IN monty.asm
                    > USED AT LINE 722 IN monty.asm
BACKSLASH:          05A7 DEFINED AT LINE 734 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
COMMA:              05A9 DEFINED AT LINE 739 IN monty.asm
                    > USED AT LINE 265 IN monty.asm
DISCARD:            05A9 DEFINED AT LINE 740 IN monty.asm
DISCARD1:           05B6 DEFINED AT LINE 749 IN monty.asm
                    > USED AT LINE 747 IN monty.asm
SLASH:              05B8 DEFINED AT LINE 752 IN monty.asm
                    > USED AT LINE 306 IN monty.asm
DOT:                05D6 DEFINED AT LINE 770 IN monty.asm
                    > USED AT LINE 240 IN monty.asm
DOT1:               05E2 DEFINED AT LINE 778 IN monty.asm
                    > USED AT LINE 775 IN monty.asm
DOT2:               05EB DEFINED AT LINE 783 IN monty.asm
                    > USED AT LINE 780 IN monty.asm
DOT3:               05F5 DEFINED AT LINE 789 IN monty.asm
                    > USED AT LINE 785 IN monty.asm
DOT4:               05F9 DEFINED AT LINE 792 IN monty.asm
                    > USED AT LINE 777 IN monty.asm
                    > USED AT LINE 782 IN monty.asm
                    > USED AT LINE 788 IN monty.asm
DIVIDE:             0600 DEFINED AT LINE 800 IN monty.asm
                    > USED AT LINE 764 IN monty.asm
DIVIDE1:            0605 DEFINED AT LINE 803 IN monty.asm
                    > USED AT LINE 815 IN monty.asm
DIVIDE2:            0612 DEFINED AT LINE 811 IN monty.asm
                    > USED AT LINE 808 IN monty.asm
DIVIDE3:            0613 DEFINED AT LINE 813 IN monty.asm
                    > USED AT LINE 810 IN monty.asm
EQUALS:             0619 DEFINED AT LINE 821 IN monty.asm
                    > USED AT LINE 281 IN monty.asm
LESSTHANEQ:         0621 DEFINED AT LINE 829 IN monty.asm
                    > USED AT LINE 302 IN monty.asm
LESSTHAN:           0626 DEFINED AT LINE 836 IN monty.asm
                    > USED AT LINE 304 IN monty.asm
LESSTHAN1:          062B DEFINED AT LINE 841 IN monty.asm
                    > USED AT LINE 832 IN monty.asm
TRUE1:              062E DEFINED AT LINE 844 IN monty.asm
                    > USED AT LINE 824 IN monty.asm
                    > USED AT LINE 1259 IN monty.asm
NULL1:              0634 DEFINED AT LINE 848 IN monty.asm
FALSE1:             0634 DEFINED AT LINE 849 IN monty.asm
                    > USED AT LINE 825 IN monty.asm
                    > USED AT LINE 839 IN monty.asm
                    > USED AT LINE 842 IN monty.asm
                    > USED AT LINE 1247 IN monty.asm
LPAREN:             063A DEFINED AT LINE 854 IN monty.asm
                    > USED AT LINE 292 IN monty.asm
CARET:              063D DEFINED AT LINE 860 IN monty.asm
                    > USED AT LINE 263 IN monty.asm
GO:                 063D DEFINED AT LINE 861 IN monty.asm
GO1:                063E DEFINED AT LINE 863 IN monty.asm
                    > USED AT LINE 1039 IN monty.asm
                    > USED AT LINE 1041 IN monty.asm
GO2:                0644 DEFINED AT LINE 868 IN monty.asm
                    > USED AT LINE 866 IN monty.asm
GOBLOCK:            0650 DEFINED AT LINE 876 IN monty.asm
GOBLOCK1:           0650 DEFINED AT LINE 877 IN monty.asm
                    > USED AT LINE 871 IN monty.asm
GOBLOCK2:           0675 DEFINED AT LINE 894 IN monty.asm
                    > USED AT LINE 976 IN monty.asm
GOFUNC:             0683 DEFINED AT LINE 903 IN monty.asm
                    > USED AT LINE 873 IN monty.asm
GOFUNC1:            069C DEFINED AT LINE 922 IN monty.asm
                    > USED AT LINE 932 IN monty.asm
GOFUNC2:            06A2 DEFINED AT LINE 929 IN monty.asm
                    > USED AT LINE 921 IN monty.asm
GOFUNC3:            06AD DEFINED AT LINE 935 IN monty.asm
                    > USED AT LINE 911 IN monty.asm
GOFUNC4:            06C5 DEFINED AT LINE 952 IN monty.asm
                    > USED AT LINE 949 IN monty.asm
GOFUNC5:            06C9 DEFINED AT LINE 956 IN monty.asm
                    > USED AT LINE 962 IN monty.asm
GOFUNC6:            06CC DEFINED AT LINE 960 IN monty.asm
                    > USED AT LINE 955 IN monty.asm
GOFUNC7:            06CF DEFINED AT LINE 963 IN monty.asm
GOFUNC8:            06D4 DEFINED AT LINE 969 IN monty.asm
                    > USED AT LINE 888 IN monty.asm
                    > USED AT LINE 951 IN monty.asm
HASH:               06DF DEFINED AT LINE 978 IN monty.asm
                    > USED AT LINE 259 IN monty.asm
HEXNUM:             06DF DEFINED AT LINE 979 IN monty.asm
HEXNUM1:            06E2 DEFINED AT LINE 981 IN monty.asm
                    > USED AT LINE 998 IN monty.asm
HEXNUM2:            06EA DEFINED AT LINE 987 IN monty.asm
                    > USED AT LINE 985 IN monty.asm
UPCASE:             06FC DEFINED AT LINE 999 IN monty.asm
                    > USED AT LINE 246 IN monty.asm
LOWCASE:            0701 DEFINED AT LINE 1003 IN monty.asm
                    > USED AT LINE 248 IN monty.asm
IDENT1:             0706 DEFINED AT LINE 1007 IN monty.asm
                    > USED AT LINE 1002 IN monty.asm
QUESTION:           0713 DEFINED AT LINE 1020 IN monty.asm
                    > USED AT LINE 250 IN monty.asm
IF:                 0713 DEFINED AT LINE 1021 IN monty.asm
IFTE:               071F DEFINED AT LINE 1031 IN monty.asm
                    > USED AT LINE 1025 IN monty.asm
IFTE1:              0720 DEFINED AT LINE 1033 IN monty.asm
                    > USED AT LINE 1028 IN monty.asm
STAR:               072C DEFINED AT LINE 1043 IN monty.asm
                    > USED AT LINE 252 IN monty.asm
MUL:                072C DEFINED AT LINE 1044 IN monty.asm
MUL2:               072E DEFINED AT LINE 1047 IN monty.asm
MUL3:               0736 DEFINED AT LINE 1052 IN monty.asm
                    > USED AT LINE 1061 IN monty.asm
NUM:                0748 DEFINED AT LINE 1065 IN monty.asm
                    > USED AT LINE 257 IN monty.asm
NUM0:               0751 DEFINED AT LINE 1071 IN monty.asm
                    > USED AT LINE 1069 IN monty.asm
NUM1:               0752 DEFINED AT LINE 1073 IN monty.asm
                    > USED AT LINE 1090 IN monty.asm
NUM2:               076A DEFINED AT LINE 1091 IN monty.asm
                    > USED AT LINE 989 IN monty.asm
                    > USED AT LINE 991 IN monty.asm
                    > USED AT LINE 1076 IN monty.asm
                    > USED AT LINE 1078 IN monty.asm
NUM3:               0775 DEFINED AT LINE 1099 IN monty.asm
                    > USED AT LINE 1094 IN monty.asm
UNDERSCORE:         0778 DEFINED AT LINE 1103 IN monty.asm
                    > USED AT LINE 242 IN monty.asm
REMAIN:             0778 DEFINED AT LINE 1104 IN monty.asm
RPAREN:             077E DEFINED AT LINE 1109 IN monty.asm
                    > USED AT LINE 310 IN monty.asm
SEMICOLON:          0786 DEFINED AT LINE 1115 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
SHIFTLEFT:          07A2 DEFINED AT LINE 1139 IN monty.asm
                    > USED AT LINE 297 IN monty.asm
SHIFTLEFT1:         07AA DEFINED AT LINE 1146 IN monty.asm
                    > USED AT LINE 1149 IN monty.asm
SHIFTLEFT2:         07AB DEFINED AT LINE 1148 IN monty.asm
                    > USED AT LINE 1145 IN monty.asm
SHIFTRIGHT:         07B2 DEFINED AT LINE 1156 IN monty.asm
                    > USED AT LINE 287 IN monty.asm
SHIFTRIGHT1:        07BA DEFINED AT LINE 1163 IN monty.asm
                    > USED AT LINE 1167 IN monty.asm
SHIFTRIGHT2:        07BE DEFINED AT LINE 1166 IN monty.asm
                    > USED AT LINE 1162 IN monty.asm
DBLQUOTE:           07C5 DEFINED AT LINE 1175 IN monty.asm
                    > USED AT LINE 267 IN monty.asm
STRING:             07C5 DEFINED AT LINE 1176 IN monty.asm
STRING1:            07CE DEFINED AT LINE 1183 IN monty.asm
                    > USED AT LINE 1190 IN monty.asm
                    > USED AT LINE 1192 IN monty.asm
STRING2:            07D1 DEFINED AT LINE 1187 IN monty.asm
                    > USED AT LINE 1182 IN monty.asm
MINUS:              07ED DEFINED AT LINE 1209 IN monty.asm
                    > USED AT LINE 269 IN monty.asm
SUB:                07F9 DEFINED AT LINE 1217 IN monty.asm
                    > USED AT LINE 1214 IN monty.asm
SUB1:               0803 DEFINED AT LINE 1224 IN monty.asm
                    > USED AT LINE 1220 IN monty.asm
COMMAND:            080C DEFINED AT LINE 1237 IN monty.asm
                    > USED AT LINE 758 IN monty.asm
ERROR1:             084D DEFINED AT LINE 1264 IN monty.asm
ABS1:               0853 DEFINED AT LINE 1268 IN monty.asm
                    > USED AT LINE 1239 IN monty.asm
PARTIAL:            0860 DEFINED AT LINE 1283 IN monty.asm
                    > USED AT LINE 1245 IN monty.asm
COMMENT:            0880 DEFINED AT LINE 1299 IN monty.asm
                    > USED AT LINE 756 IN monty.asm
                    > USED AT LINE 1303 IN monty.asm
BREAK:              0889 DEFINED AT LINE 1307 IN monty.asm
                    > USED AT LINE 1241 IN monty.asm
BREAK1:             0890 DEFINED AT LINE 1313 IN monty.asm
                    > USED AT LINE 1311 IN monty.asm
CHARS:              08A3 DEFINED AT LINE 1324 IN monty.asm
                    > USED AT LINE 1243 IN monty.asm
CHARS1:             08A6 DEFINED AT LINE 1326 IN monty.asm
                    > USED AT LINE 1369 IN monty.asm
HEAPPTR:            08AB DEFINED AT LINE 1330 IN monty.asm
                    > USED AT LINE 1249 IN monty.asm
INPUT:              08B7 DEFINED AT LINE 1339 IN monty.asm
                    > USED AT LINE 1251 IN monty.asm
KEY:                08C2 DEFINED AT LINE 1349 IN monty.asm
                    > USED AT LINE 1253 IN monty.asm
OUTPUT:             08CB DEFINED AT LINE 1358 IN monty.asm
                    > USED AT LINE 1257 IN monty.asm
NUMBERS:            08D4 DEFINED AT LINE 1367 IN monty.asm
                    > USED AT LINE 1255 IN monty.asm
FILTER:             08DA DEFINED AT LINE 1376 IN monty.asm
MAP:                08DA DEFINED AT LINE 1377 IN monty.asm
PRTDEC:             08DC DEFINED AT LINE 1385 IN monty.asm
                    > USED AT LINE 791 IN monty.asm
                    > USED AT LINE 1656 IN monty.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 135
PRTDEC0:            08EB DEFINED AT LINE 1396 IN monty.asm
                    > USED AT LINE 1387 IN monty.asm
PRTDEC1:            090D DEFINED AT LINE 1412 IN monty.asm
                    > USED AT LINE 1400 IN monty.asm
                    > USED AT LINE 1402 IN monty.asm
                    > USED AT LINE 1404 IN monty.asm
                    > USED AT LINE 1406 IN monty.asm
                    > USED AT LINE 1409 IN monty.asm
PRTDEC2:            090F DEFINED AT LINE 1414 IN monty.asm
                    > USED AT LINE 1417 IN monty.asm
PRTDEC3:            091F DEFINED AT LINE 1426 IN monty.asm
                    > USED AT LINE 1421 IN monty.asm
PRTDEC4:            0920 DEFINED AT LINE 1428 IN monty.asm
                    > USED AT LINE 1425 IN monty.asm
PRTHEX:             0924 DEFINED AT LINE 1432 IN monty.asm
                    > USED AT LINE 776 IN monty.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            092F DEFINED AT LINE 1440 IN monty.asm
                    > USED AT LINE 1435 IN monty.asm
                    > USED AT LINE 1437 IN monty.asm
PRTHEX3:            0938 DEFINED AT LINE 1448 IN monty.asm
                    > USED AT LINE 1446 IN monty.asm
PRTSTR0:            0943 DEFINED AT LINE 1456 IN monty.asm
                    > USED AT LINE 1462 IN monty.asm
PRTSTR:             0947 DEFINED AT LINE 1459 IN monty.asm
                    > USED AT LINE 781 IN monty.asm
                    > USED AT LINE 1526 IN monty.asm
NESTING:            094C DEFINED AT LINE 1475 IN monty.asm
                    > USED AT LINE 1570 IN monty.asm
                    > USED AT LINE 1611 IN monty.asm
NESTING0:           0956 DEFINED AT LINE 1481 IN monty.asm
                    > USED AT LINE 1477 IN monty.asm
                    > USED AT LINE 1479 IN monty.asm
NESTING1A:          095D DEFINED AT LINE 1486 IN monty.asm
                    > USED AT LINE 1483 IN monty.asm
NESTING1:           0960 DEFINED AT LINE 1489 IN monty.asm
                    > USED AT LINE 1480 IN monty.asm
NESTING2:           096F DEFINED AT LINE 1498 IN monty.asm
                    > USED AT LINE 1493 IN monty.asm
                    > USED AT LINE 1495 IN monty.asm
NESTING3:           0971 DEFINED AT LINE 1501 IN monty.asm
                    > USED AT LINE 1497 IN monty.asm
NESTING4:           097C DEFINED AT LINE 1508 IN monty.asm
                    > USED AT LINE 1503 IN monty.asm
                    > USED AT LINE 1505 IN monty.asm
PROMPT:             097E DEFINED AT LINE 1512 IN monty.asm
                    > USED AT LINE 1554 IN monty.asm
CRLF:               0987 DEFINED AT LINE 1517 IN monty.asm
                    > USED AT LINE 1623 IN monty.asm
PRINTSTR:           098E DEFINED AT LINE 1524 IN monty.asm
                    > USED AT LINE 1513 IN monty.asm
                    > USED AT LINE 1518 IN monty.asm
                    > USED AT LINE 1550 IN monty.asm
                    > USED AT LINE 1654 IN monty.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 128
INIT:               0995 DEFINED AT LINE 1531 IN monty.asm
                    > USED AT LINE 9
                    > USED AT LINE 1549 IN monty.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT0:              09AE DEFINED AT LINE 1541 IN monty.asm
                    > USED AT LINE 1544 IN monty.asm
START:              09B3 DEFINED AT LINE 1547 IN monty.asm
INTERPRET:          09C9 DEFINED AT LINE 1553 IN monty.asm
                    > USED AT LINE 1648 IN monty.asm
                    > USED AT LINE 1657 IN monty.asm
INTERPRET2:         09D3 DEFINED AT LINE 1559 IN monty.asm
                    > USED AT LINE 1603 IN monty.asm
INTERPRET3:         09DB DEFINED AT LINE 1566 IN monty.asm
                    > USED AT LINE 1575 IN monty.asm
INTERPRET4:         09E1 DEFINED AT LINE 1572 IN monty.asm
                    > USED AT LINE 1564 IN monty.asm
INTERPRET5:         09E6 DEFINED AT LINE 1578 IN monty.asm
                    > USED AT LINE 1612 IN monty.asm
                    > USED AT LINE 1626 IN monty.asm
INTERPRET6:         09F7 DEFINED AT LINE 1605 IN monty.asm
                    > USED AT LINE 1581 IN monty.asm
INTERPRET7:         0A05 DEFINED AT LINE 1614 IN monty.asm
                    > USED AT LINE 1586 IN monty.asm
INTERPRET8:         0A18 DEFINED AT LINE 1628 IN monty.asm
                    > USED AT LINE 1584 IN monty.asm
NEXT:               0A20 DEFINED AT LINE 1634 IN monty.asm
                    > USED AT LINE 69 IN monty.asm
                    > USED AT LINE 1638 IN monty.asm
NEXT1:              0A2F DEFINED AT LINE 1645 IN monty.asm
                    > USED AT LINE 1639 IN monty.asm
EXIT_:              0A36 DEFINED AT LINE 1649 IN monty.asm
                    > USED AT LINE 1647 IN monty.asm
ERROR:              0A39 DEFINED AT LINE 1653 IN monty.asm
                    > USED AT LINE 1266 IN monty.asm
TESTSSTART:         0B00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2141S43:  0B65 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2142S43:  0BCB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2143S43:  0C2F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2144S43:  0C93 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2145S43:  0CF7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2146S43:  0D5B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2147S43:  0DC1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2148S43:  0E29 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2149S43:  0E8F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2150S43:  0EF5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2151S43:  0F5D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2152S43:  0FC7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2153S43:  102F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2154S43:  1097 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2155S43:  1105 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2156S43:  1173 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2157S43:  11DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2158S43:  124F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2159S43:  12C3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2160S43:  1335 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2161S43:  13A1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2162S43:  1415 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2163S43:  148D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2164S43:  14FD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2165S43:  1569 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2166S43:  15D5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2167S43:  1649 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2168S43:  16C3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2169S43:  172F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2170S43:  17A9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2171S43:  1815 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2172S43:  188F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2173S43:  18FB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2174S43:  1979 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2175S43:  19E5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2176S43:  1A61 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2177S43:  1AD5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2178S43:  1B41 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2179S43:  1BBD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2180S43:  1C2D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2181S43:  1C99 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2182S43:  1D07 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2183S43:  1D75 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2184S43:  1DE1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2185S43:  1E4D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2186S43:  1EB9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2187S43:  1F25 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2188S43:  1F91 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2189S43:  1FFD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2190S43:  2069 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2191S43:  20D5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2192S43:  2143 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2193S43:  21B1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2194S43:  221F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2195S43:  228F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2196S43:  22FF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2197S43:  2369 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2198S43:  23D3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2199S43:  2443 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2200S43:  24B9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2201S43:  2531 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2202S43:  25AD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2203S43:  2635 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2204S43:  26BD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2205S43:  2729 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2206S43:  2797 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2207S43:  2807 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2208S43:  2879 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2209S43:  28E9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2210S43:  2959 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2211S43:  29CB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2212S43:  2A43 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2213S43:  2ABF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2214S43:  2B37 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2215S43:  2BB9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2216S43:  2C3D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2217S43:  2CC7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2218S43:  2D55 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2219S43:  2DD5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2220S43:  2E5B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2221S43:  2EE3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2222S43:  2F6D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2223S43:  2FF5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2224S43:  308B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2225S43:  310F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2226S43:  319F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2227S43:  3231 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2228S43:  32C5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2229S43:  3369 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2230S43:  340D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2231S43:  3489 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2232S43:  3505 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2233S43:  358D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2234S43:  3619 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2235S43:  36B9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2236S43:  3761 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2237S43:  3809 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2238S43:  3891 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2239S43:  3925 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2240S43:  39B3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2241S43:  3A47 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2242S43:  3AEB DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            3AF6 DEFINED AT LINE 133
EXECSTR:            3AFC DEFINED AT LINE 140
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
STACK:              3C80 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 879 IN monty.asm
                    > USED AT LINE 1533 IN monty.asm
                    > USED AT LINE 1548 IN monty.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
VARS:               3D00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1538 IN monty.asm
RESTARTS:           3DD0 DEFINED AT LINE 11 IN ram.asm
RST08:              3DD0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              3DD2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              3DD4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              3DD6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              3DD8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              3DDA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               3DDC DEFINED AT LINE 19 IN ram.asm
INTVEC:             3DDE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             3DE0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            3DE2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            3DE4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            3DE6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1535 IN monty.asm
VDATAWIDTH:         3DE6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 472 IN monty.asm
                    > USED AT LINE 508 IN monty.asm
                    > USED AT LINE 535 IN monty.asm
                    > USED AT LINE 1327 IN monty.asm
VTIBPTR:            3DE8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1557 IN monty.asm
                    > USED AT LINE 1629 IN monty.asm
VNEXT:              3DEA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1532 IN monty.asm
VHEAPPTR:           3DEC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 462 IN monty.asm
                    > USED AT LINE 494 IN monty.asm
                    > USED AT LINE 495 IN monty.asm
                    > USED AT LINE 550 IN monty.asm
                    > USED AT LINE 584 IN monty.asm
                    > USED AT LINE 651 IN monty.asm
                    > USED AT LINE 654 IN monty.asm
                    > USED AT LINE 1117 IN monty.asm
                    > USED AT LINE 1132 IN monty.asm
                    > USED AT LINE 1134 IN monty.asm
                    > USED AT LINE 1177 IN monty.asm
                    > USED AT LINE 1196 IN monty.asm
                    > USED AT LINE 1285 IN monty.asm
                    > USED AT LINE 1290 IN monty.asm
                    > USED AT LINE 1291 IN monty.asm
                    > USED AT LINE 1331 IN monty.asm
                    > USED AT LINE 1333 IN monty.asm
VPOINTER:           3DEE DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 343 IN monty.asm
                    > USED AT LINE 345 IN monty.asm
                    > USED AT LINE 346 IN monty.asm
                    > USED AT LINE 428 IN monty.asm
                    > USED AT LINE 515 IN monty.asm
                    > USED AT LINE 533 IN monty.asm
                    > USED AT LINE 1011 IN monty.asm
                    > USED AT LINE 1334 IN monty.asm
VREMAIN:            3DF0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 766 IN monty.asm
                    > USED AT LINE 1105 IN monty.asm
VSAVEDIP:           3DF2 DEFINED AT LINE 39 IN ram.asm
VSAVEDSP:           3DF4 DEFINED AT LINE 40 IN ram.asm
VSAVEDBP:           3DF6 DEFINED AT LINE 41 IN ram.asm
VCHECKSUM:          3DF8 DEFINED AT LINE 42 IN ram.asm
VTEMP1:             3DFA DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 455 IN monty.asm
                    > USED AT LINE 496 IN monty.asm
                    > USED AT LINE 646 IN monty.asm
                    > USED AT LINE 655 IN monty.asm
                    > USED AT LINE 878 IN monty.asm
                    > USED AT LINE 884 IN monty.asm
                    > USED AT LINE 912 IN monty.asm
                    > USED AT LINE 933 IN monty.asm
                    > USED AT LINE 940 IN monty.asm
                    > USED AT LINE 946 IN monty.asm
                    > USED AT LINE 1286 IN monty.asm
                    > USED AT LINE 1289 IN monty.asm
VTEMP2:             3DFC DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 913 IN monty.asm
                    > USED AT LINE 934 IN monty.asm
VLASTDEF:           3DFE DEFINED AT LINE 48 IN ram.asm
VHASHSTR:           3E00 DEFINED AT LINE 49 IN ram.asm
TBPTR:              3E02 DEFINED AT LINE 50 IN ram.asm
TIB:                3F00 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 1563 IN monty.asm
                    > USED AT LINE 1606 IN monty.asm
                    > USED AT LINE 1615 IN monty.asm
                    > USED AT LINE 1630 IN monty.asm
PAD:                4000 DEFINED AT LINE 56 IN ram.asm
HEAP:               4100 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 70 IN monty.asm
                    > USED AT LINE 639 IN monty.asm
