0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ".`$`.h"
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ".`$`.h`\r\n`"
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 4F               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 4F               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 4F               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 4F               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 4F               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 4F               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 4F               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 4F               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 4F               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 4F               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 4D               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 4F               LD   (RST08),HL   
0094   22 D2 4F               LD   (RST10),HL   
0097   22 D4 4F               LD   (RST18),HL   
009A   22 D6 4F               LD   (RST20),HL   
009D   22 D8 4F               LD   (RST28),HL   
00A0   22 DA 4F               LD   (RST30),HL   
00A3   22 DE 4F               LD   (INTVEC),HL   
00A6   22 E0 4F               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 4F               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 4F               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 11               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   21                     DB   lsb(bang_)   ; !     1
0181   04                     DB   lsb(dquote_)   ; "     2
0182   5E                     DB   lsb(hash_)   ; #     1
0183   06                     DB   lsb(dollar_)   ; $     1
0184   09                     DB   lsb(percent_)   ; %     1
0185   7E                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   0F                     DB   lsb(lparen_)   ; (     1
0188   76                     DB   lsb(rparen_)   ; )     1
0189   A6                     DB   lsb(star_)   ; *     1
018A   C2                     DB   lsb(plus_)   ; +     1
018B   04                     DB   lsb(comma_)   ; ,     2
018C   88                     DB   lsb(minus_)   ; -     1
018D   12                     DB   lsb(dot_)   ; .     2
018E   15                     DB   lsb(slash_)   ; /	    1
018F   18                     DB   lsb(num_)   ; 0     1
0190   18                     DB   lsb(num_)   ; 1
0191   18                     DB   lsb(num_)   ; 2
0192   18                     DB   lsb(num_)   ; 3
0193   18                     DB   lsb(num_)   ; 4
0194   18                     DB   lsb(num_)   ; 5
0195   18                     DB   lsb(num_)   ; 6
0196   18                     DB   lsb(num_)   ; 7
0197   18                     DB   lsb(num_)   ; 8
0198   18                     DB   lsb(num_)   ; 9
0199   DE                     DB   lsb(colon_)   ; :     2
019A   1B                     DB   lsb(semicolon_)   ; ;     2
019B   4C                     DB   lsb(lt_)   ; <     1
019C   32                     DB   lsb(eq_)   ; =     1
019D   41                     DB   lsb(gt_)   ; >     1
019E   1E                     DB   lsb(question_)   ; ?     1
019F   F6                     DB   lsb(at_)   ; @     2
01A0   F4                     DB   lsb(upcase_)   ; A     1
01A1   F4                     DB   lsb(upcase_)   ; B
01A2   F4                     DB   lsb(upcase_)   ; C
01A3   F4                     DB   lsb(upcase_)   ; D
01A4   F4                     DB   lsb(upcase_)   ; E
01A5   F4                     DB   lsb(upcase_)   ; F
01A6   F4                     DB   lsb(upcase_)   ; G
01A7   F4                     DB   lsb(upcase_)   ; h
01A8   F4                     DB   lsb(upcase_)   ; I
01A9   F4                     DB   lsb(upcase_)   ; J
01AA   F4                     DB   lsb(upcase_)   ; K
01AB   F4                     DB   lsb(upcase_)   ; L
01AC   F4                     DB   lsb(upcase_)   ; M
01AD   F4                     DB   lsb(upcase_)   ; N
01AE   F4                     DB   lsb(upcase_)   ; O
01AF   F4                     DB   lsb(upcase_)   ; p
01B0   F4                     DB   lsb(upcase_)   ; Q
01B1   F4                     DB   lsb(upcase_)   ; R
01B2   F4                     DB   lsb(upcase_)   ; S
01B3   F4                     DB   lsb(upcase_)   ; T
01B4   F4                     DB   lsb(upcase_)   ; U
01B5   F4                     DB   lsb(upcase_)   ; V
01B6   F4                     DB   lsb(upcase_)   ; W
01B7   F4                     DB   lsb(upcase_)   ; X
01B8   F4                     DB   lsb(upcase_)   ; Y
01B9   F4                     DB   lsb(upcase_)   ; Z
01BA   1F                     DB   lsb(lbrack_)   ; [     2
01BB   3B                     DB   lsb(backslash_)   ; \     2
01BC   5C                     DB   lsb(rbrack_)   ; ]     2
01BD   AC                     DB   lsb(caret_)   ; ^     1
01BE   EE                     DB   lsb(underscore_)   ; _     2
01BF   C2                     DB   lsb(grave_)   ; `     2   	
01C0   0D                     DB   lsb(lowcase_)   ; a     1
01C1   0D                     DB   lsb(lowcase_)   ; b
01C2   0D                     DB   lsb(lowcase_)   ; c
01C3   0D                     DB   lsb(lowcase_)   ; d
01C4   0D                     DB   lsb(lowcase_)   ; e
01C5   0D                     DB   lsb(lowcase_)   ; f
01C6   0D                     DB   lsb(lowcase_)   ; g
01C7   0D                     DB   lsb(lowcase_)   ; h
01C8   0D                     DB   lsb(lowcase_)   ; i
01C9   0D                     DB   lsb(lowcase_)   ; j
01CA   0D                     DB   lsb(lowcase_)   ; k
01CB   0D                     DB   lsb(lowcase_)   ; l
01CC   0D                     DB   lsb(lowcase_)   ; m
01CD   0D                     DB   lsb(lowcase_)   ; n
01CE   0D                     DB   lsb(lowcase_)   ; o
01CF   0D                     DB   lsb(lowcase_)   ; p
01D0   0D                     DB   lsb(lowcase_)   ; q
01D1   0D                     DB   lsb(lowcase_)   ; r
01D2   0D                     DB   lsb(lowcase_)   ; s
01D3   0D                     DB   lsb(lowcase_)   ; t
01D4   0D                     DB   lsb(lowcase_)   ; u
01D5   0D                     DB   lsb(lowcase_)   ; v
01D6   0D                     DB   lsb(lowcase_)   ; w
01D7   0D                     DB   lsb(lowcase_)   ; x
01D8   0D                     DB   lsb(lowcase_)   ; y
01D9   0D                     DB   lsb(lowcase_)   ; z
01DA   D8                     DB   lsb(lbrace_)   ; {     1
01DB   DD                     DB   lsb(pipe_)   ; |     1
01DC   E8                     DB   lsb(rbrace_)   ; }     1
01DD   EB                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 4D                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 4E                  DW   BUFFER   ; vBufPtr pointer into BUF
01E6   92 0F                  DW   next   ; nNext
01E8   22 50                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; vStrMode
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                DQUOTE_:      
0204                COMMA_:      
0204   DD E9                  JP   (ix)   
0206                DOLLAR_:      
0206   C3 B3 0A               JP   dollar   
0209                PERCENT_:      
0209   C3 03 0B               JP   percent   
020C                QUOTE_:      
020C   C3 E9 0A               JP   quote   
020F                LPAREN_:      
020F   C3 D8 03               JP   lbrace   
0212                DOT_:        
0212   C3 00 04               JP   dot   
0215                SLASH_:      
0215   C3 00 05               JP   slash   
0218                NUM_:        
0218   C3 38 0B               JP   num   
021B                SEMICOLON_:      
021B   C3 F9 02               JP   semicolon   
021E                QUESTION_:      
021E   C3 D0 0A               JP   question   
0221                BANG_:       
0221                BANG:        ; logical invert, any non zero value
0221   03                     INC   bc   
0222   0A                     LD   a,(bc)   
0223   FE 3D                  CP   "="   
0225   20 05                  JR   nz,not   
0227   E1                     POP   hl   
0228   D1                     POP   de   
0229   C3 7A 0C               JP   notequals   
022C                NOT:         
022C   0B                     DEC   bc   
022D   21 00 00               LD   hl,0   ; is considered true
0230   18 0B                  JR   eq1   
0232                EQ_:         
0232                EQ:          
0232   03                     INC   bc   
0233   0A                     LD   a,(bc)   
0234   FE 3D                  CP   "="   
0236   28 04                  JR   z,eq0   
0238   0B                     DEC   bc   
0239   C3 62 0C               JP   assign   
023C                EQ0:         
023C   E1                     POP   hl   
023D                EQ1:         
023D   D1                     POP   de   
023E   C3 73 0C               JP   equals   
0241                GT_:         
0241                GT:          
0241   03                     INC   bc   
0242   0A                     LD   a,(bc)   
0243   FE 3E                  CP   ">"   
0245   CA AA 0C               JP   z,shiftRight   
0248   D1                     POP   de   
0249   E1                     POP   hl   
024A   18 09                  JR   lt1   
024C                LT_:         
024C                LT:          
024C   03                     INC   bc   
024D   0A                     LD   a,(bc)   
024E   FE 3C                  CP   "<"   
0250   CA 9A 0C               JP   z,shiftLeft   
0253   E1                     POP   hl   
0254   D1                     POP   de   
0255                LT1:         
0255   FE 3D                  CP   "="   
0257   CA 81 0C               JP   z,lessthaneq   
025A   0B                     DEC   bc   
025B   C3 86 0C               JP   lessthan   
025E                             ; index of an array, based on vDataWidth 22
025E                             ; array* num -- value    ; also sets vPointer to address
025E                HASH_:       
025E                HASH:        
025E                ARRAYINDEX:      
025E   E1                     POP   hl   ; hl = index
025F   D1                     POP   de   ; de = array
0260   3A E6 4F               LD   a,(vDataWidth)   ; a = data width
0263   3D                     DEC   a   
0264   28 01                  JR   z,arrayIndex1   
0266                ARRAYINDEX0:      
0266   29                     ADD   hl,hl   ; if data width = 2 then double
0267                ARRAYINDEX1:      
0267   19                     ADD   hl,de   ; add addr
0268   22 F8 4F               LD   (vPointer),hl   ; store address in setter
026B   16 00                  LD   d,0   
026D   5E                     LD   e,(hl)   
026E   B7                     OR   a   ; check data width again
026F   28 02                  JR   z,arrayIndex2   
0271   23                     INC   hl   
0272   56                     LD   d,(hl)   
0273                ARRAYINDEX2:      
0273   D5                     PUSH   de   
0274   DD E9                  JP   (ix)   
0276                             ;                               4
0276                RPAREN_:      
0276                RPAREN:      
0276   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0279   FD 46 09               LD   b,(iy+9)   
027C   DD E9                  JP   (ix)   
027E                             ; & and                          14
027E                             ; a b -- c
027E                AMPER_:      
027E                AMPER:       
027E                AND:         
027E   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
027F   E1                     POP   hl   
0280   7B                     LD   a,e   
0281   A5                     AND   l   
0282   6F                     LD   l,a   
0283   7A                     LD   a,d   
0284   A4                     AND   h   
0285   67                     LD   h,a   
0286   18 49                  JR   add3   
0288                             ; - sub                          23
0288                             ; a b -- c
0288                MINUS_:      
0288                MINUS:       
0288   03                     INC   bc   ; check if sign of a number
0289   0A                     LD   a,(bc)   
028A   0B                     DEC   bc   
028B   FE 30                  CP   "0"   
028D   38 05                  JR   c,sub   
028F   FE 3A                  CP   "9"+1   
0291   DA 38 0B               JP   c,num   
0294                SUB:         ; Subtract the value 2nd on stack from top of stack
0294   03                     INC   bc   
0295   FE 2D                  CP   "-"   
0297   20 05                  JR   nz,sub1   
0299   E1                     POP   hl   
029A   2B                     DEC   hl   
029B   C3 64 0C               JP   assign0   
029E                SUB1:        
029E   0B                     DEC   bc   
029F   D1                     POP   de   
02A0   E1                     POP   hl   
02A1   B7                     OR   a   
02A2   ED 52                  SBC   hl,de   
02A4   18 2B                  JR   add3   
02A6                STAR_:       ; 21
02A6                STAR:        
02A6                MUL:         
02A6   D1                     POP   de   ; get first value
02A7   E1                     POP   hl   
02A8                MUL2:        
02A8   C5                     PUSH   bc   ; Preserve the IP
02A9   44 4D                  LD   bc,hl   ; bc = 2nd value
02AB   21 00 00               LD   hl,0   
02AE   3E 10                  LD   a,16   
02B0                MUL3:        
02B0   29                     ADD   hl,hl   
02B1   CB 13                  RL   e   
02B3   CB 12                  RL   d   
02B5   30 04                  JR   nc,$+6   
02B7   09                     ADD   hl,bc   
02B8   30 01                  JR   nc,$+3   
02BA   13                     INC   de   
02BB   3D                     DEC   a   
02BC   20 F2                  JR   nz,mul3   
02BE   C1                     POP   bc   ; Restore the IP
02BF   C3 D1 02               JP   add3   
02C2                             ; + add                         25
02C2                             ; a b -- c
02C2                PLUS_:       
02C2                PLUS:        
02C2                ADD:         
02C2   03                     INC   bc   
02C3   0A                     LD   a,(bc)   
02C4   FE 2B                  CP   "+"   ; ++ increment variable
02C6   20 05                  JR   nz,add1   
02C8   E1                     POP   hl   
02C9   23                     INC   hl   
02CA   C3 64 0C               JP   assign0   
02CD                ADD1:        
02CD   0B                     DEC   bc   
02CE   D1                     POP   de   ; second term
02CF   E1                     POP   hl   ; first term
02D0   19                     ADD   hl,de   
02D1                ADD3:        
02D1   03                     INC   bc   
02D2   0A                     LD   a,(bc)   
02D3   FE 3D                  CP   "="   
02D5   28 04                  JR   z,add4   
02D7   0B                     DEC   bc   
02D8   E5                     PUSH   hl   
02D9   DD E9                  JP   (ix)   
02DB                ADD4:        
02DB   C3 64 0C               JP   assign0   
02DE                COLON_:      
02DE                COLON:       
02DE   03                     INC   bc   ; arg_list must ve immediately followed by {
02DF   0A                     LD   a,(bc)   
02E0   FE 3D                  CP   "="   ; := definition
02E2   28 07                  JR   z,defineStart   
02E4   0B                     DEC   bc   
02E5   21 01 00               LD   hl,1   
02E8   C3 B6 0F               JP   error   
02EB                DEFINESTART:      
02EB   E1                     POP   hl   ; discard variable value
02EC   2A F8 4F               LD   hl,(vPointer)   ; vDefine = vPointer
02EF   22 F4 4F               LD   (vDefine),hl   
02F2   DD E9                  JP   (ix)   
02F4                             ;                               18
02F4                UPCASE_:      
02F4                UPCASE:      
02F4   0A                     LD   a,(bc)   ; a = identifier char
02F5   D6 41                  SUB   "A"   ; "A" = 0
02F7   18 19                  JR   ident1   
02F9                             ; ;
02F9                SEMICOLON:      
02F9                DEFINEEND:      
02F9   2A F4 4F               LD   hl,(vDefine)   ; hl = define*
02FC   7D                     LD   a,l   
02FD   B4                     OR   h   
02FE   28 0B                  JR   z,defineEnd1   
0300   11 00 00               LD   de,NUL   ; set vDefine=NUL
0303   ED 53 F4 4F            LD   (vDefine),de   
0307   D1                     POP   de   ; de = value
0308   C3 68 0C               JP   assign1   
030B                DEFINEEND1:      
030B   DD E9                  JP   (ix)   
030D                             ;********************** PAGE 2 END *********************************************
030D                             ; .align $100
030D                             ;********************** PAGE 3 BEGIN *********************************************
030D                LOWCASE_:      
030D                LOWCASE:      
030D   0A                     LD   a,(bc)   
030E   D6 61                  SUB   "a"   
0310   C6 1A                  ADD   a,26   
0312                IDENT1:      
0312   87                     ADD   a,a   ; l = a * 2
0313   6F                     LD   l,a   
0314   26 4F                  LD   h,msb(vars)   
0316   22 F8 4F               LD   (vPointer),hl   ; store address in setter
0319   5E                     LD   e,(hl)   
031A   23                     INC   hl   
031B   56                     LD   d,(hl)   
031C   D5                     PUSH   de   
031D   DD E9                  JP   (ix)   
031F                             ; [                             14
031F                LBRACK_:      
031F                LBRACK:      
031F                ARRAYSTART:      
031F   11 00 00               LD   de,0   ; create stack frame
0322   D5                     PUSH   de   ; push null for IP
0323   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0326   FD 56 05               LD   d,(iy+5)   ; 
0329   D5                     PUSH   de   ; 
032A   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
032D   FD 56 03               LD   d,(iy+3)   ; 
0330   D5                     PUSH   de   ; 
0331   FD E5                  PUSH   iy   ; push BP
0333   FD 21 00 00            LD   iy,0   ; BP = SP
0337   FD 39                  ADD   iy,sp   
0339   DD E9                  JP   (ix)   
033B                             ; \                             19
033B                BACKSLASH_:      
033B                BACKSLASH:      
033B                LAMBDA:      
033B   DD E5                  PUSH   ix   
033D   CD F0 0C               CALL   parseArgs   
0340                LAMBDA1:      
0340   03                     INC   bc   ; arg_list must ve immediately followed by {
0341   0A                     LD   a,(bc)   
0342   FE 21                  CP   " "+1   ; skip white space
0344   38 FA                  JR   c,lambda1   
0346   FE 7B                  CP   "{"   
0348   28 06                  JR   z,lambda2   
034A   21 02 00               LD   hl,2   ; error 2: parse error
034D   C3 B6 0F               JP   error   
0350                LAMBDA2:      
0350   CD 26 0D               CALL   parseBlock   
0353   CD 90 0D               CALL   createFunc   
0356   E1                     POP   hl   
0357   DD E1                  POP   ix   
0359   E5                     PUSH   hl   
035A   DD E9                  JP   (ix)   
035C                RBRACK_:      
035C                RBRACK:      
035C                ARRAYEND:      ; 53
035C   FD 54                  LD   d,iyh   ; de = BP
035E   FD 5D                  LD   e,iyl   
0360   ED 43 04 50            LD   (vTemp1),bc   ; save IP
0364   62 6B                  LD   hl,de   ; hl = de = BP
0366   B7                     OR   a   
0367   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0369   CB 3C                  SRL   h   ; 
036B   CB 1D                  RR   l   
036D   44 4D                  LD   bc,hl   ; bc = count
036F   2A F0 4F               LD   hl,(vHeapPtr)   ; hl = array[-4]
0372   71                     LD   (hl),c   ; write num items in length word
0373   23                     INC   hl   
0374   70                     LD   (hl),b   
0375   23                     INC   hl   ; hl = array[0], bc = count
0376                             ; de = BP, hl = array[0], bc = count
0376   18 15                  JR   arrayEnd3   
0378                ARRAYEND1:      
0378   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
037B   77                     LD   (hl),a   ; write lsb of array item
037C   23                     INC   hl   ; move to msb of array item
037D   3A E6 4F               LD   a,(vDataWidth)   ; vDataWidth=1?
0380   3D                     DEC   a   
0381   28 05                  JR   z,arrayEnd2   
0383   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0386   77                     LD   (hl),a   ; write msb of array item
0387   23                     INC   hl   ; move to next word in array
0388                ARRAYEND2:      
0388   FD 2B                  DEC   iy   ; move to next word on stack
038A   FD 2B                  DEC   iy   
038C   0B                     DEC   bc   ; dec items count
038D                ARRAYEND3:      
038D   79                     LD   a,c   ; if not zero loop
038E   B0                     OR   b   
038F   20 E7                  JR   nz,arrayEnd1   
0391   EB                     EX   de,hl   ; de = end of array, hl = BP
0392   F9                     LD   sp,hl   ; sp = BP
0393   E1                     POP   hl   ; de = end of array, hl = old BP
0394   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0395   FD 62                  LD   iyh,d   
0397   FD 6B                  LD   iyl,e   
0399   D1                     POP   de   ; pop arg_list (discard)
039A   D1                     POP   de   ; pop first_arg* (discard)
039B   D1                     POP   de   ; pop IP (discard)
039C   ED 5B F0 4F            LD   de,(vHeapPtr)   ; de = array[-2]
03A0   13                     INC   de   
03A1   13                     INC   de   
03A2   D5                     PUSH   de   ; return array[0]
03A3   22 F0 4F               LD   (vHeapPtr),hl   ; move heap* to end of array
03A6   ED 4B 04 50            LD   bc,(vTemp1)   ; restore IP
03AA   DD E9                  JP   (ix)   
03AC                CARET_:      
03AC                             ; execute a block of code which ends with } 116
03AC                             ; creates a root scope if BP == stack
03AC                             ; else uses outer scope
03AC                CARET:       
03AC                GO:          
03AC   D1                     POP   de   ; de = block*
03AD                GO1:         
03AD   7B                     LD   a,e   ; if block* == null, exit
03AE   B2                     OR   d   
03AF   20 02                  JR   nz,go2   
03B1   DD E9                  JP   (ix)   
03B3                GO2:         
03B3   1A                     LD   a,(de)   
03B4   FE 7B                  CP   "{"   
03B6   CA D5 0B               JP   z,goBlock   
03B9   FE 28                  CP   "("   
03BB   C2 08 0C               JP   nz,goFunc   
03BE   D5                     PUSH   de   ; push de just before stack frame
03BF   CA D5 0B               JP   z,goBlock   
03C2                GRAVE_:      
03C2                GRAVE:       
03C2                PRINTLITERAL:      
03C2   03                     INC   bc   ; move to first char
03C3   ED 5B EC 4F            LD   de,(vBufPtr)   ; de = buffer*
03C7   18 03                  JR   printLiteral1   
03C9                PRINTLITERAL0:      
03C9   12                     LD   (de),a   ; a -> buffer*
03CA   13                     INC   de   ; string*++,
03CB   03                     INC   bc   
03CC                PRINTLITERAL1:      
03CC   0A                     LD   a,(bc)   ; a <- string*
03CD   FE 60                  CP   "`"   ; if ` exit loop
03CF   20 F8                  JR   nz,printLiteral0   
03D1   ED 53 EC 4F            LD   (vBufPtr),de   ; save buffer*' in pointer
03D5   C3 D6 0C               JP   dotNext   
03D8                LBRACE_:      
03D8                LBRACE:      
03D8   CD 26 0D               CALL   parseBlock   
03DB   DD E9                  JP   (ix)   
03DD                             ; | or                          11
03DD                             ; a b -- c
03DD                PIPE_:       
03DD                PIPE:        
03DD                OR:          
03DD   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03DE   E1                     POP   hl   
03DF   7B                     LD   a,e   
03E0   B5                     OR   l   
03E1   6F                     LD   l,a   
03E2   7A                     LD   a,d   
03E3   B4                     OR   h   
03E4   67                     LD   h,a   
03E5   C3 D1 02               JP   add3   
03E8                RBRACE_:      
03E8   C3 68 0B               JP   rbrace   
03EB                             ; ~ char                        8
03EB                TILDE_:      
03EB   C3 A9 0A               JP   tilde   
03EE                UNDERSCORE_:      
03EE                CHAR:        
03EE   03                     INC   bc   ; point to next char
03EF   0A                     LD   a,(bc)   
03F0   6F                     LD   l,a   
03F1   26 00                  LD   h,0   
03F3   E5                     PUSH   hl   
03F4   DD E9                  JP   (ix)   
03F6                AT_:         
03F6                AT:          
03F6                ADDR:        
03F6   ED 5B F8 4F            LD   de,(vPointer)   
03FA   21 F8 4F               LD   hl,vPointer   
03FD   C3 36 07               JP   variable   
0400                             ;********************** PAGE 3 END *********************************************
0400                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   CD 48 0E               CALL   commandTable   
0403   61                     DB   "a"   ; .a print array
0404   61 0A                  DW   printArray   
0406   63                     DB   "c"   ; .c print char
0407   12 04                  DW   printChar   
0409   68                     DB   "h"   ; .h print hex without $ prefix
040A   A7 04                  DW   printHex0   
040C   73                     DB   "s"   ; .s print string
040D   21 04                  DW   printString   
040F   00                     DB   NUL   ; .  print number, fall through
0410   36 04                  DW   printNumber   
0412                             ; .c print char
0412                             ; char --
0412                PRINTCHAR:      
0412   E1                     POP   hl   ; a = char
0413   7D                     LD   a,l   
0414   ED 5B EC 4F            LD   de,(vBufPtr)   ; de = buffer*
0418   12                     LD   (de),a   
0419   13                     INC   de   
041A   ED 53 EC 4F            LD   (vBufPtr),de   ; save buffer*'
041E   C3 D6 0C               JP   dotNext   
0421                             ; .s print string
0421                             ; string* --
0421                PRINTSTRING:      
0421   E1                     POP   hl   ; hl = string*
0422   ED 5B EC 4F            LD   de,(vBufPtr)   ; de = buffer*
0426   18 03                  JR   printString1   
0428                PRINTSTRING0:      
0428   12                     LD   (de),a   ; a -> buffer*
0429   13                     INC   de   ; string*++,
042A   23                     INC   hl   
042B                PRINTSTRING1:      
042B   7E                     LD   a,(hl)   ; a <- string*
042C   B7                     OR   a   ; if NUL exit loop
042D   20 F9                  JR   nz,printString0   
042F   ED 53 EC 4F            LD   (vBufPtr),de   ; save buffer*' in pointer
0433   C3 D6 0C               JP   dotNext   
0436                             ; . print decimal
0436                             ; value --
0436                PRINTNUMBER:      
0436   3A E8 4F               LD   a,(vNumBase)   
0439   FE 10                  CP   16   
043B   CA AD 04               JP   z,printHex   ; else falls through
043E   C3 41 04               JP   printDec   
0441                             ; print decimal                 ; 70
0441                             ; value --
0441                PRINTDEC:      
0441   ED 5B EC 4F            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0445   D9                     EXX      
0446   E1                     POP   hl   ; hl = value
0447   3A E6 4F               LD   a,(vDataWidth)   
044A   3D                     DEC   a   
044B   20 02                  JR   nz,printDec1   
044D   26 00                  LD   h,0   
044F                PRINTDEC1:      
044F   CD 5E 04               CALL   printDec2   
0452   D9                     EXX      ; de = buffer*' bc = IP
0453   3E 20                  LD   a," "   ; append space to buffer
0455   12                     LD   (de),a   
0456   13                     INC   de   ; string*++,
0457   ED 53 EC 4F            LD   (vBufPtr),de   ; update buffer* with buffer*'
045B   C3 D6 0C               JP   dotNext   
045E                             ; hl = value
045E                             ; de' = buffer*
045E                             ; a, bc, de, hl destroyed
045E                PRINTDEC2:      
045E   CB 7C                  BIT   7,h   
0460   28 0C                  JR   z,printDec3   
0462   D9                     EXX      
0463   3E 2D                  LD   a,"-"   
0465   12                     LD   (de),a   
0466   13                     INC   de   
0467   D9                     EXX      
0468   AF                     XOR   a   
0469   95                     SUB   l   
046A   6F                     LD   l,a   
046B   9F                     SBC   a,a   
046C   94                     SUB   h   
046D   67                     LD   h,a   
046E                PRINTDEC3:      
046E   0E 00                  LD   c,0   ; leading zeros flag = false
0470   11 F0 D8               LD   de,-10000   
0473   CD 8E 04               CALL   printDec4   
0476   11 18 FC               LD   de,-1000   
0479   CD 8E 04               CALL   printDec4   
047C   11 9C FF               LD   de,-100   
047F   CD 8E 04               CALL   printDec4   
0482   1E F6                  LD   e,-10   
0484   CD 8E 04               CALL   printDec4   
0487   0C                     INC   c   ; flag = true for at least digit
0488   1E FF                  LD   e,-1   
048A   CD 8E 04               CALL   printDec4   
048D   C9                     RET      
048E                PRINTDEC4:      
048E   06 2F                  LD   b,"0"-1   
0490                PRINTDEC5:      
0490   04                     INC   b   
0491   19                     ADD   hl,de   
0492   38 FC                  JR   c,printDec5   
0494   ED 52                  SBC   hl,de   
0496   3E 30                  LD   a,"0"   
0498   B8                     CP   b   
0499   20 05                  JR   nz,printDec6   
049B   AF                     XOR   a   
049C   B1                     OR   c   
049D   C8                     RET   z   
049E   18 01                  JR   printDec7   
04A0                PRINTDEC6:      
04A0   0C                     INC   c   
04A1                PRINTDEC7:      
04A1   78                     LD   a,b   
04A2   D9                     EXX      
04A3   12                     LD   (de),a   
04A4   13                     INC   de   
04A5   D9                     EXX      
04A6   C9                     RET      
04A7                             ; buffer hex                    37
04A7                             ; value --
04A7                PRINTHEX0:      
04A7   ED 5B EC 4F            LD   de,(vBufPtr)   
04AB   18 08                  JR   printHex1   
04AD                PRINTHEX:      
04AD   ED 5B EC 4F            LD   de,(vBufPtr)   
04B1   3E 24                  LD   a,"$"   ; # prefix
04B3   12                     LD   (de),a   
04B4   13                     INC   de   ; string*++,
04B5                PRINTHEX1:      
04B5   E1                     POP   hl   ; hl = value
04B6   3A E6 4F               LD   a,(vDataWidth)   
04B9   3D                     DEC   a   
04BA   28 04                  JR   z,printHex2   
04BC   7C                     LD   a,h   
04BD   CD CF 04               CALL   printHex3   
04C0                PRINTHEX2:      
04C0   7D                     LD   a,l   
04C1   CD CF 04               CALL   printHex3   
04C4   3E 20                  LD   a," "   ; append space to buffer
04C6   12                     LD   (de),a   
04C7   13                     INC   de   ; string*++,
04C8   ED 53 EC 4F            LD   (vBufPtr),de   
04CC   C3 D6 0C               JP   dotNext   
04CF                PRINTHEX3:      
04CF   F5                     PUSH   af   
04D0   1F                     RRA      
04D1   1F                     RRA      
04D2   1F                     RRA      
04D3   1F                     RRA      
04D4   CD D8 04               CALL   printHex4   
04D7   F1                     POP   af   
04D8                PRINTHEX4:      
04D8   E6 0F                  AND   0x0F   
04DA   C6 90                  ADD   a,0x90   
04DC   27                     DAA      
04DD   CE 40                  ADC   a,0x40   
04DF   27                     DAA      
04E0   12                     LD   (de),a   
04E1   13                     INC   de   ; string*++,
04E2   C9                     RET      
04E3                             ; unused
04E3                DQUOTE:      
04E3                UNDERSCORE:      
04E3                COMMA:       
04E3   DD E9                  JP   (ix)   
04E5                             ;********************** PAGE 4 END *********************************************
04E5                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA 4F 06               JP   z,comment   
0507   0B                     DEC   bc   
0508   CD 32 0E               CALL   lowerCaseTable   
050B   26                     DB   lsb(command_a_)   
050C   38                     DB   lsb(command_b_)   
050D   C8                     DB   lsb(command_nop_)   
050E   44                     DB   lsb(command_d_)   
050F   C8                     DB   lsb(command_nop_)   
0510   4A                     DB   lsb(command_f_)   
0511   C8                     DB   lsb(command_nop_)   
0512   65                     DB   lsb(command_h_)   
0513   6B                     DB   lsb(command_i_)   
0514   C8                     DB   lsb(command_nop_)   
0515   71                     DB   lsb(key_)   
0516   C8                     DB   lsb(command_nop_)   
0517   74                     DB   lsb(command_m_)   
0518   C8                     DB   lsb(command_nop_)   
0519   7A                     DB   lsb(output_)   
051A   7D                     DB   lsb(command_p_)   
051B   80                     DB   lsb(command_q_)   
051C   86                     DB   lsb(command_r_)   
051D   92                     DB   lsb(command_s_)   
051E   A7                     DB   lsb(true_)   
051F   C8                     DB   lsb(command_nop_)   
0520   AA                     DB   lsb(command_v_)   
0521   BF                     DB   lsb(command_w_)   
0522   C5                     DB   lsb(xor_)   
0523   C8                     DB   lsb(command_nop_)   
0524   C8                     DB   lsb(command_nop_)   
0525   CB                     DB   lsb(command_default_)   
0526                             ; 12
0526                COMMAND_A_:      
0526   62                     DB   "b"   ; /ab absolute
0527   E1 05                  DW   absolute   
0529   64                     DB   "d"   ; /ad address of
052A   EF 05                  DW   addrOf   
052C   69                     DB   "i"   ; /ad address of
052D   E1 07                  DW   arrayIter   
052F   6C                     DB   "l"   ; /al array length
0530   10 06                  DW   arrayLength   
0532   73                     DB   "s"   ; /as array size
0533   19 06                  DW   arraySize   
0535   00                     DB   NUL   
0536   72 06                  DW   error1   
0538                COMMAND_B_:      
0538   62                     DB   "b"   ; /bb bye bye cold boot
0539   FD 0E                  DW   coldStart   
053B   6D                     DB   "m"   ; /bm byte mode
053C   47 06                  DW   byteMode   
053E   72                     DB   "r"   ; /br break from loop
053F   2D 06                  DW   break   
0541   00                     DB   NUL   
0542   72 06                  DW   error1   
0544                COMMAND_D_:      
0544   62                     DB   "b"   ; /db decimal base
0545   6A 06                  DW   decBase   
0547   00                     DB   NUL   
0548   6A 06                  DW   decBase   ; /d decimal
054A                COMMAND_F_:      
054A   64                     DB   "d"   ; /fd fold
054B   8A 09                  DW   fold   
054D   65                     DB   "e"   ; /fe forEach
054E   DC 09                  DW   forEach   
0550   73                     DB   "s"   ; /fs funcSrc
0551   28 0A                  DW   funcSrc   
0553   74                     DB   "t"   ; /ft filter
0554   2C 09                  DW   filter   
0556   31                     DB   "1"   
0557   DE 0F                  DW   f1   
0559   32                     DB   "2"   
055A   EA 0F                  DW   f2   
055C   33                     DB   "3"   
055D   F6 0F                  DW   f3   
055F   34                     DB   "4"   
0560   02 10                  DW   f4   
0562   00                     DB   NUL   
0563   94 0C                  DW   false1   
0565                COMMAND_H_:      
0565   62                     DB   "b"   ; /hb hex base
0566   78 06                  DW   hexBase   
0568   00                     DB   NUL   
0569   72 06                  DW   error1   
056B                             ; 6
056B                COMMAND_I_:      
056B   6E                     DB   "n"   ; /in input
056C   7E 06                  DW   input   
056E   00                     DB   NUL   
056F   72 06                  DW   error1   
0571                KEY_:        
0571   00                     DB   NUL   
0572   89 06                  DW   key   
0574                COMMAND_M_:      
0574   70                     DB   "p"   ; /mp map
0575   EA 08                  DW   map   
0577   00                     DB   NUL   
0578   72 06                  DW   error1   
057A                OUTPUT_:      
057A   00                     DB   NUL   
057B   92 06                  DW   output   
057D                             ; 4
057D                COMMAND_P_:      
057D   00                     DB   NUL   
057E   72 06                  DW   error1   
0580                             ; 6
0580                COMMAND_Q_:      
0580   74                     DB   "t"   ; /qt quit
0581   9B 06                  DW   quit   
0583   00                     DB   NUL   
0584   72 06                  DW   error1   
0586                COMMAND_R_:      
0586   63                     DB   "c"   ; /rc tail call optimisation
0587   A5 06                  DW   recur   
0589   65                     DB   "e"   ; /re remainder
058A   AB 06                  DW   remain   
058C   67                     DB   "g"   ; /rg range src
058D   4D 07                  DW   rangeSrc   
058F   00                     DB   NUL   
0590   72 06                  DW   error1   
0592                COMMAND_S_:      
0592   62                     DB   "b"   
0593   B1 06                  DW   stringBegin   
0595   63                     DB   "c"   
0596   03 07                  DW   stringCompare   
0598   65                     DB   "e"   
0599   B9 06                  DW   stringEnd   
059B   69                     DB   "i"   
059C   62 08                  DW   stringIter   
059E   6C                     DB   "l"   
059F   E8 06                  DW   stringLength   
05A1   73                     DB   "s"   
05A2   F7 06                  DW   stringSize   
05A4   00                     DB   NUL   
05A5   72 06                  DW   error1   
05A7                TRUE_:       
05A7   00                     DB   NUL   
05A8   8E 0C                  DW   true1   
05AA                COMMAND_V_:      
05AA   62                     DB   "b"   
05AB   1B 07                  DW   varBufPtr   
05AD   68                     DB   "h"   
05AE   24 07                  DW   varHeapPtr   
05B0   74                     DB   "t"   
05B1   2D 07                  DW   varTIBPtr   
05B3   42                     DB   "B"   
05B4   64 06                  DW   constBufStart   
05B6   48                     DB   "H"   
05B7   58 06                  DW   constHeapStart   
05B9   54                     DB   "T"   
05BA   5E 06                  DW   constTIBStart   
05BC   00                     DB   NUL   
05BD   72 06                  DW   error1   
05BF                COMMAND_W_:      
05BF   6D                     DB   "m"   ; /wm word mode
05C0   3C 07                  DW   wordMode   
05C2   00                     DB   NUL   
05C3   72 06                  DW   error1   
05C5                XOR_:        
05C5   00                     DB   NUL   
05C6   42 07                  DW   xor   
05C8                             ; 2
05C8                COMMAND_NOP_:      
05C8   00                     DB   NUL   
05C9   CE 05                  DW   nop   
05CB                             ; 3
05CB                COMMAND_DEFAULT_:      
05CB   00                     DB   NUL   
05CC   D0 05                  DW   div   
05CE                             ;********************** PAGE 5 END *********************************************
05CE                NOP:         
05CE   DD E9                  JP   (ix)   
05D0                             ;                               32
05D0                DIV:         
05D0   D1                     POP   de   
05D1   E1                     POP   hl   
05D2   C5                     PUSH   bc   ; preserve the IP
05D3   44 4D                  LD   bc,hl   
05D5   CD BD 0C               CALL   divide   
05D8   EB                     EX   de,hl   
05D9   ED 53 FA 4F            LD   (vRemain),de   
05DD   C1                     POP   bc   
05DE   C3 D1 02               JP   add3   
05E1                             ; /ab absolute
05E1                             ; num -- num
05E1                ABSOLUTE:      
05E1   E1                     POP   hl   
05E2   CB 7C                  BIT   7,h   
05E4   28 06                  JR   z,absolute1   
05E6   AF                     XOR   a   
05E7   95                     SUB   l   
05E8   6F                     LD   l,a   
05E9   9F                     SBC   a,a   
05EA   94                     SUB   h   
05EB   67                     LD   h,a   
05EC                ABSOLUTE1:      
05EC   E5                     PUSH   hl   
05ED   DD E9                  JP   (ix)   
05EF                             ; /ad addrOf                    24
05EF                             ; char -- addr
05EF                ADDROF:      
05EF   E1                     POP   hl   ; a = char
05F0   7D                     LD   a,l   
05F1   FE 7B                  CP   "z"+1   ; if a > z then exit
05F3   30 19                  JR   nc,addrOf2   
05F5   D6 41                  SUB   "A"   ; a - 65
05F7   38 15                  JR   c,addrOf2   ; if < A then exit
05F9   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
05FB   38 06                  JR   c,addrOf1   
05FD   D6 06                  SUB   "a"-("Z"+1)   
05FF   FE 1A                  CP   "Z"-"A"+1   
0601   38 0B                  JR   c,addrOf2   ; if < a then exit
0603                ADDROF1:      
0603   87                     ADD   a,a   ; double a
0604   21 00 4F               LD   hl,VARS   ; hl = VARS + a
0607   85                     ADD   a,l   
0608   6F                     LD   l,a   
0609   3E 00                  LD   a,0   
060B   8C                     ADC   a,h   
060C   67                     LD   h,a   
060D   E5                     PUSH   hl   
060E                ADDROF2:      
060E   DD E9                  JP   (ix)   
0610                             ; /al length of an array, num elements
0610                             ; array* -- num
0610                ARRAYLENGTH:      
0610   E1                     POP   hl   
0611   2B                     DEC   hl   ; msb size
0612   56                     LD   d,(hl)   
0613   2B                     DEC   hl   ; lsb size
0614   5E                     LD   e,(hl)   
0615   EB                     EX   de,hl   
0616                ARRAYLENGTH1:      
0616   E5                     PUSH   hl   
0617   DD E9                  JP   (ix)   
0619                             ; /as size in bytes of an array, based on current data width
0619                             ; array* -- num
0619                ARRAYSIZE:      
0619                          ;*Macro unroll:  PERFORM arrayLength
0619   DD 21 20 06            LD   ix,performM_1542S1063   
061D   C3 10 06               JP   arrayLength   
0620                PERFORMM_1542S1063:      
0620   E1                     POP   hl   
0621   3A E6 4F               LD   a,(vDataWidth)   
0624   3D                     DEC   a   
0625   28 EF                  JR   z,arrayLength1   
0627   CB 3C                  SRL   h   
0629   CB 1D                  RR   l   
062B   18 E9                  JR   arrayLength1   
062D                             ; 13
062D                             ; /br break from loop
062D                             ; --
062D                BREAK:       
062D   E1                     POP   hl   ; hl = condition, break if false
062E   7D                     LD   a,l   
062F   B4                     OR   h   
0630   28 02                  JR   z,break1   
0632   DD E9                  JP   (ix)   
0634                BREAK1:      
0634   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0636   FD 54                  LD   d,iyh   
0638   21 08 00               LD   hl,8   
063B   19                     ADD   hl,de   
063C   23                     INC   hl   
063D   23                     INC   hl   
063E   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0641   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0644   C3 68 0B               JP   blockEnd   
0647                             ; /b
0647                BYTEMODE:      
0647   21 01 00               LD   hl,1   
064A                BYTEMODE1:      
064A   22 E6 4F               LD   (vDataWidth),hl   
064D   DD E9                  JP   (ix)   
064F                             ; //
064F                COMMENT:      
064F   03                     INC   bc   ; point to next char
0650   0A                     LD   a,(bc)   
0651   FE 20                  CP   " "   ; terminate on any char less than SP
0653   30 FA                  JR   nc,comment   
0655   0B                     DEC   bc   
0656   DD E9                  JP   (ix)   
0658                CONSTHEAPSTART:      
0658   11 22 50               LD   de,HEAP   
065B   C3 39 07               JP   constant   
065E                CONSTTIBSTART:      
065E   11 00 4D               LD   de,TIB   
0661   C3 39 07               JP   constant   
0664                CONSTBUFSTART:      
0664   11 00 4E               LD   de,BUFFER   
0667   C3 39 07               JP   constant   
066A                DECBASE:      
066A   21 0A 00               LD   hl,10   
066D                DECBASE1:      
066D   22 E8 4F               LD   (vNumBase),hl   
0670   DD E9                  JP   (ix)   
0672                ERROR1:      
0672   21 01 00               LD   hl,1   ; error 1: unknown command
0675   C3 B6 0F               JP   error   
0678                HEXBASE:      
0678   21 10 00               LD   hl,16   
067B   C3 6D 06               JP   decBase1   
067E                             ; Z80 port input
067E                             ; port -- value
067E                INPUT:       
067E   E1                     POP   hl   
067F   59                     LD   e,c   ; save IP
0680   4D                     LD   c,l   
0681   ED 68                  IN   l,(c)   
0683   26 00                  LD   h,0   
0685   4B                     LD   c,e   ; restore IP
0686   E5                     PUSH   hl   
0687   DD E9                  JP   (ix)   
0689                             ; /k                              6
0689                KEY:         
0689   CD 81 00               CALL   getchar   
068C   26 00                  LD   h,0   
068E   6F                     LD   l,a   
068F   E5                     PUSH   hl   
0690   DD E9                  JP   (ix)   
0692                             ; /o Z80 port output
0692                             ; value port --
0692                OUTPUT:      
0692   E1                     POP   hl   
0693   59                     LD   e,c   ; save IP
0694   4D                     LD   c,l   
0695   E1                     POP   hl   
0696   ED 69                  OUT   (c),l   
0698   4B                     LD   c,e   ; restore IP
0699   DD E9                  JP   (ix)   
069B                             ; /qt
069B                             ; bool --
069B                QUIT:        
069B   E1                     POP   hl   ; hl = condition, exit if true
069C   7D                     LD   a,l   
069D   B4                     OR   h   
069E   20 02                  JR   nz,quit1   
06A0   DD E9                  JP   (ix)   
06A2                QUIT1:       
06A2   C3 68 0B               JP   blockEnd   
06A5                RECUR:       
06A5   E1                     POP   hl   
06A6   22 F2 4F               LD   (vRecur),hl   
06A9   DD E9                  JP   (ix)   
06AB                REMAIN:      
06AB   2A FA 4F               LD   hl,(vRemain)   
06AE   E5                     PUSH   hl   
06AF   DD E9                  JP   (ix)   
06B1                STRINGBEGIN:      
06B1   21 FF FF               LD   hl,TRUE   ; string mode = true
06B4   22 F6 4F               LD   (vStrMode),hl   
06B7   18 27                  JR   stringEnd1   ; save hl in vBufPtr
06B9                STRINGEND:      
06B9   21 00 00               LD   hl,FALSE   ; string mode = false
06BC   22 F6 4F               LD   (vStrMode),hl   
06BF   2A EC 4F               LD   hl,(vBufPtr)   ; append NUL to string
06C2   AF                     XOR   a   
06C3   77                     LD   (hl),a   
06C4   23                     INC   hl   ; hl = string_end*
06C5   ED 43 04 50            LD   (vTemp1),bc   ; save IP
06C9   11 00 4E               LD   de,BUFFER   ; de = string*
06CC   B7                     OR   a   ; bc = size
06CD   ED 52                  SBC   hl,de   
06CF   44 4D                  LD   bc,hl   
06D1   2A F0 4F               LD   hl,(vHeapPtr)   ; hl = hstring*
06D4   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
06D5   D5                     PUSH   de   ; return hstring*
06D6   ED B0                  LDIR      ; copy size bytes from string* to hstring*
06D8   ED 53 F0 4F            LD   (vHeapPtr),de   ; bump heap to hstring* += size
06DC   ED 4B 04 50            LD   bc,(vTemp1)   ; restore IP
06E0                STRINGEND1:      
06E0   21 00 4E               LD   hl,BUFFER   ; reset vBufPtr
06E3   22 EC 4F               LD   (vBufPtr),hl   
06E6   DD E9                  JP   (ix)   
06E8                STRINGLENGTH:      
06E8   D1                     POP   de   
06E9   21 00 00               LD   hl,0   
06EC   18 02                  JR   stringLength2   
06EE                STRINGLENGTH1:      
06EE   13                     INC   de   
06EF   23                     INC   hl   
06F0                STRINGLENGTH2:      
06F0   1A                     LD   a,(de)   
06F1   B7                     OR   a   
06F2   20 FA                  JR   nz,stringLength1   
06F4                STRINGLENGTH3:      
06F4   E5                     PUSH   hl   
06F5   DD E9                  JP   (ix)   
06F7                STRINGSIZE:      
06F7                          ;*Macro unroll:  PERFORM stringLength
06F7   DD 21 FE 06            LD   ix,performM_1690S1231   
06FB   C3 E8 06               JP   stringLength   
06FE                PERFORMM_1690S1231:      
06FE   E1                     POP   hl   
06FF   23                     INC   hl   
0700   C3 F4 06               JP   stringLength3   
0703                             ; /sc string compare
0703                             ; string1* string2* -- bool
0703                             ; Compares two null terminated strings.
0703                STRINGCOMPARE:      
0703   D1                     POP   de   
0704   E1                     POP   hl   
0705                STRINGCOMPARE1:      
0705   1A                     LD   a,(de)   
0706   BE                     CP   (hl)   
0707   20 07                  JR   nz,stringCompare2   
0709   B7                     OR   a   
070A   28 09                  JR   z,stringCompare3   
070C   13                     INC   de   
070D   23                     INC   hl   
070E   18 F5                  JR   stringCompare1   
0710                STRINGCOMPARE2:      
0710   21 00 00               LD   hl,FALSE   
0713   18 03                  JR   stringCompare4   
0715                STRINGCOMPARE3:      
0715   21 FF FF               LD   hl,TRUE   
0718                STRINGCOMPARE4:      
0718   E5                     PUSH   hl   
0719   DD E9                  JP   (ix)   
071B                VARBUFPTR:      
071B   ED 5B EC 4F            LD   de,(vBufPtr)   
071F   21 EC 4F               LD   hl,vBufPtr   
0722   18 12                  JR   variable   
0724                VARHEAPPTR:      
0724   ED 5B F0 4F            LD   de,(vHeapPtr)   
0728   21 F0 4F               LD   hl,vHeapPtr   
072B   18 09                  JR   variable   
072D                VARTIBPTR:      
072D   ED 5B EA 4F            LD   de,(vTIBPtr)   
0731   21 EA 4F               LD   hl,vTIBPtr   
0734   18 00                  JR   variable   
0736                VARIABLE:      
0736   22 F8 4F               LD   (vPointer),hl   
0739                CONSTANT:      
0739   D5                     PUSH   de   
073A   DD E9                  JP   (ix)   
073C                             ; /wm
073C                WORDMODE:      
073C   21 02 00               LD   hl,2   
073F   C3 4A 06               JP   byteMode1   
0742                             ; /x
0742                XOR:         
0742   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0743                XOR1:        
0743   E1                     POP   hl   
0744   7B                     LD   a,e   
0745   AD                     XOR   l   
0746   6F                     LD   l,a   
0747   7A                     LD   a,d   
0748   AC                     XOR   h   
0749   67                     LD   h,a   
074A   C3 D1 02               JP   add3   
074D                             ;*******************************************************************
074D                             ; Monty implementations
074D                             ;*******************************************************************
074D                             ; /rg rangeSrc
074D                             ; begin end step -- src
074D                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
074D                RANGESRC:      ; range source: begin, end, step, local: L
074D   CD AC 03               CALL   go   
0750   00 00                  DW   NUL   
0752   5C 07                  DW   rangeSrcM_1755S1305   
0754   56 07                  DW   $+2   
0756   01                     DB   1   
0757   04 62 65 73 4C         .PSTR   "besL"   
075C                RANGESRCM_1755S1305:      
075C   7B                     DB   "{"   ; init mutable L [index active inrange_test]
075D   5B 25 62 20 2F 74 20 25 73 30 3E 7B 7B 25 61 25 65 3C 7D 7D 7B 7B 25 61 25 65 3E 7D 7D 3F 3F 5D 20 25 4C 3D 20 DB   "[%b /t %s0>{{%a%e<}}{{%a%e>}}??] %L= "   
0782   5C 6B 74 7B            DB   "\\kt{"   
0786   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
078E   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
0794   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
079C   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
07A4   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
07AE   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
07B6   25 4C 32 23 5E         DB   "%L2#^"   ; ifte: inrange_test?
07BB   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
07CF   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
07D7   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
07DE   7D                     DB   "}"   
07DF   7D                     DB   "}"   
07E0   00                     DB   0   
07E1                             ; /ai arrayIter
07E1                             ; array* -- src
07E1                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
07E1                ARRAYITER:      
07E1   CD AC 03               CALL   go   
07E4   00 00                  DW   NUL   
07E6   EE 07                  DW   arrayIterM_1774S1325   
07E8   EA 07                  DW   $+2   
07EA   01                     DB   1   
07EB   02 61 4C               .PSTR   "aL"   
07EE                ARRAYITERM_1774S1325:      
07EE   7B                     DB   "{"   
07EF   5B 30 20 2F 74 20 25 61 2F 61 6C 5D 20 25 4C 3D DB   "[0 /t %a/al] %L="   ; init mutable L [index active size]
07FF   5C 6B 74 7B            DB   "\\kt{"   
0803   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
080B   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
0811   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0819   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
0821   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
0828   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0830   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
0839   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
0850   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
0858   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
085F   7D                     DB   "}"   
0860   7D                     DB   "}"   
0861   00                     DB   0   
0862                             ; /si stringIter
0862                             ; string* -- src
0862                          ;*Macro unroll: FUNC stringIter, 1, "sL"
0862                STRINGITER:      
0862   CD AC 03               CALL   go   
0865   00 00                  DW   NUL   
0867   6F 08                  DW   stringIterM_1793S1345   
0869   6B 08                  DW   $+2   
086B   01                     DB   1   
086C   02 73 4C               .PSTR   "sL"   
086F                STRINGITERM_1793S1345:      
086F   7B                     DB   "{"   
0870   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
087A   5C 6B 74 7B            DB   "\\kt{"   
087E   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0886   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
088D   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0895   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
089D   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
08A4   2F 62 6D 20 25 73 25 69 23 20 2F 77 6D 20 25 63 3D DB   "/bm %s%i# /wm %c="   ; read byte at i, store in c as word
08B5   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
08BD   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
08C4   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
08D8   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
08E0   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08E7   7D                     DB   "}"   
08E8   7D                     DB   "}"   
08E9   00                     DB   0   
08EA                             ; /mp map
08EA                             ; src func -- src1
08EA                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
08EA                MAP:         ; map: source, function
08EA   CD AC 03               CALL   go   
08ED   00 00                  DW   NUL   
08EF   F7 08                  DW   mapM_1813S1367   
08F1   F3 08                  DW   $+2   
08F3   00                     DB   0   
08F4   02 73 66               .PSTR   "sf"   
08F7                MAPM_1813S1367:      
08F7   7B                     DB   "{"   
08F8   5C 6B 74 7B            DB   "\\kt{"   
08FC   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0904   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0908   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
090D   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
0919   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0922   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0929   7D                     DB   "}"   
092A   7D                     DB   "}"   
092B   00                     DB   0   
092C                             ; /ft filter
092C                             ; src pred -- src1
092C                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
092C                FILTER:      ; filter: source, predicate, local: T
092C   CD AC 03               CALL   go   
092F   00 00                  DW   NUL   
0931   3A 09                  DW   filterM_1827S1382   
0933   35 09                  DW   $+2   
0935   01                     DB   1   
0936   03 73 70 54            .PSTR   "spT"   
093A                FILTERM_1827S1382:      
093A   7B                     DB   "{"   
093B   5B 30 5D 25 54 3D      DB   "[0]%T="   
0941   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0945   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0949   5B                     DB   "["   
094A   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
0957   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
095F   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
0963   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
0968   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
097E   3F 3F                  DB   "??"   
0980   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0987   7D                     DB   "}"   
0988   7D                     DB   "}"   
0989   00                     DB   0   
098A                             ; /fd fold
098A                             ; reducer is a function like: \\da00bbLi4u
098A                             ; src init reducer -- src1
098A                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
098A                FOLD:        ; src, init, reducer
098A   CD AC 03               CALL   go   
098D   00 00                  DW   NUL   
098F   99 09                  DW   foldM_1846S1402   
0991   93 09                  DW   $+2   
0993   01                     DB   1   
0994   04 73 69 72 41         .PSTR   "sirA"   
0999                FOLDM_1846S1402:      
0999   7B                     DB   "{"   ; reducer: \\da00bbLi4u
099A   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
09A1   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09A5   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09A9   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
09AE   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
09C9   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
09D2   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09D9   7D                     DB   "}"   
09DA   7D                     DB   "}"   
09DB   00                     DB   0   
09DC                             ; /fe forEach
09DC                             ; src proc --
09DC                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
09DC                FOREACH:      ; forEach: source, procedure, local: T
09DC   CD AC 03               CALL   go   
09DF   00 00                  DW   NUL   
09E1   EA 09                  DW   forEachM_1860S1417   
09E3   E5 09                  DW   $+2   
09E5   01                     DB   1   
09E6   03 73 70 54            .PSTR   "spT"   
09EA                FOREACHM_1860S1417:      
09EA   7B                     DB   "{"   
09EB   5B 30 5D 25 54 3D      DB   "[0]%T="   
09F1   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
09F5   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
09FD   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0A02   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0A14   3F 3F                  DB   "??"   ; ifte:
0A16   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0A1F   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A26   7D                     DB   "}"   
0A27   00                     DB   0   
0A28                             ; ; /fs funcSrc
0A28                             ; ; func -- src
0A28                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0A28                FUNCSRC:      ; :f func or block
0A28   CD AC 03               CALL   go   
0A2B   00 00                  DW   NUL   
0A2D   34 0A                  DW   funcSrcM_1874S1432   
0A2F   31 0A                  DW   $+2   
0A31   00                     DB   0   
0A32   01 66                  .PSTR   "f"   
0A34                FUNCSRCM_1874S1432:      
0A34   7B                     DB   "{"   
0A35   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0A39   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0A41   5C 64 74 7B            DB   "\\dt{"   
0A45   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0A57   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0A5E   7D                     DB   "}"   
0A5F   7D                     DB   "}"   
0A60   00                     DB   0   
0A61                          ;*Macro unroll: FUNC printArray, 2, "abc"
0A61                PRINTARRAY:      
0A61   CD AC 03               CALL   go   
0A64   00 00                  DW   NUL   
0A66   6F 0A                  DW   printArrayM_1884S1443   
0A68   6A 0A                  DW   $+2   
0A6A   02                     DB   2   
0A6B   03 61 62 63            .PSTR   "abc"   
0A6F                PRINTARRAYM_1884S1443:      
0A6F   7B                     DB   "{"   
0A70   27 5B 20 27 2E 73 20 25 61 2F 61 6C 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/al%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0AA7   7D                     DB   "}"   
0AA8   00                     DB   0   
0AA9                             ;*******************************************************************
0AA9                             ; implementations continued
0AA9                             ;*******************************************************************
0AA9                             ; ~ bitwise invert
0AA9                TILDE:       
0AA9                INVERT:      
0AA9   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
0AAA   7D                     LD   a,l   
0AAB   2F                     CPL      
0AAC   6F                     LD   l,a   
0AAD   7C                     LD   a,h   
0AAE   2F                     CPL      
0AAF   67                     LD   h,a   
0AB0   C3 D1 02               JP   add3   
0AB3                             ; $ hex                         ; 22
0AB3                DOLLAR:      
0AB3                HEXNUM:      
0AB3   21 00 00               LD   hl,0   ; Clear hl to accept the number
0AB6                HEXNUM1:      
0AB6   03                     INC   bc   
0AB7   0A                     LD   a,(bc)   ; Get the character which is a numeral
0AB8   CB 77                  BIT   6,a   ; is it uppercase alpha?
0ABA   28 02                  JR   z,hexnum2   ; no a decimal
0ABC   D6 07                  SUB   7   ; sub 7  to make $a - $F
0ABE                HEXNUM2:      
0ABE   D6 30                  SUB   $30   ; form decimal digit
0AC0   DA 5A 0B               JP   c,num2   
0AC3   FE 10                  CP   $0F+1   
0AC5   D2 5A 0B               JP   nc,num2   
0AC8   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0AC9   29                     ADD   hl,hl   ; 4X
0ACA   29                     ADD   hl,hl   ; 8X
0ACB   29                     ADD   hl,hl   ; 16X
0ACC   85                     ADD   a,l   ; add into bottom of hl
0ACD   6F                     LD   l,a   
0ACE   18 E6                  JR   hexnum1   
0AD0                             ; ? if                            23
0AD0                             ; condition then -- value
0AD0                QUESTION:      
0AD0                IF:          
0AD0   03                     INC   bc   
0AD1   0A                     LD   a,(bc)   
0AD2   FE 3F                  CP   "?"   
0AD4   28 06                  JR   z,ifte   
0AD6   0B                     DEC   bc   
0AD7   11 00 00               LD   de,NUL   ; NUL pointer for else
0ADA   18 01                  JR   ifte1   
0ADC                             ; ?? ifte
0ADC                             ; condition then else -- value
0ADC                IFTE:        
0ADC   D1                     POP   de   ; de = else
0ADD                IFTE1:       
0ADD   E1                     POP   hl   ; hl = then
0ADE   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0ADF   7C                     LD   a,h   
0AE0   B5                     OR   l   
0AE1   E1                     POP   hl   ; hl = then
0AE2   CA AD 03               JP   z,go1   ; if z de = else
0AE5   EB                     EX   de,hl   ; condition = false, de = then
0AE6   C3 AD 03               JP   go1   
0AE9                             ; string                        ;38
0AE9                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0AE9                QUOTE:       
0AE9                STRING:      
0AE9   2A F0 4F               LD   hl,(vHeapPtr)   ; hl = heap*
0AEC   E5                     PUSH   hl   ; save start of string
0AED   0A                     LD   a,(bc)   
0AEE   5F                     LD   e,a   ; e = matching terminator
0AEF   03                     INC   bc   ; point to next char
0AF0   18 03                  JR   string2   
0AF2                STRING1:      
0AF2   77                     LD   (hl),a   
0AF3   23                     INC   hl   ; increase count
0AF4   03                     INC   bc   ; point to next char
0AF5                STRING2:      
0AF5   0A                     LD   a,(bc)   
0AF6   BB                     CP   e   ; is it the string terminator
0AF7   28 02                  JR   z,string3   
0AF9   18 F7                  JR   string1   
0AFB                STRING3:      
0AFB   AF                     XOR   a   ; write NUL to terminate string
0AFC   77                     LD   (hl),a   ; hl = end of string
0AFD   23                     INC   hl   
0AFE   22 F0 4F               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0B01   DD E9                  JP   (ix)   
0B03                             ; %a .. %z                      43
0B03                             ; -- value
0B03                             ; returns value of arg
0B03                PERCENT:      
0B03                ARG:         
0B03   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0B06   FD 56 05               LD   d,(iy+5)   
0B09   EB                     EX   de,hl   
0B0A   7D                     LD   a,l   ; arg_list* == null, skip
0B0B   B4                     OR   h   
0B0C   28 1A                  JR   z,arg0a   
0B0E   23                     INC   hl   ; a = num_args, hl = arg_list*
0B0F   7E                     LD   a,(hl)   
0B10   23                     INC   hl   
0B11   B7                     OR   a   
0B12   28 14                  JR   z,arg0a   ; num_args == 0, skip
0B14   5F                     LD   e,a   ; e = a = num_args
0B15   03                     INC   bc   ; a = next char = dollar_name
0B16   0A                     LD   a,(bc)   
0B17   C5                     PUSH   bc   ; save IP
0B18   43                     LD   b,e   ; b = e = num_args
0B19   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0B1C   FD 56 03               LD   d,(iy+3)   
0B1F                ARG0:        
0B1F   1B                     DEC   de   ; a = dollar_name, de = next arg*
0B20   1B                     DEC   de   
0B21   BE                     CP   (hl)   
0B22   28 09                  JR   z,arg1   
0B24   23                     INC   hl   ; hl = next arg_list*
0B25   10 F8                  DJNZ   arg0   
0B27   C1                     POP   bc   ; no match, restore IP
0B28                ARG0A:       
0B28   11 00 00               LD   de,0   ; return 0
0B2B   18 08                  JR   arg1a   
0B2D                ARG1:        
0B2D   C1                     POP   bc   ; restore IP
0B2E   EB                     EX   de,hl   ; hl = arg*
0B2F   22 F8 4F               LD   (vPointer),hl   ; store arg* in setter
0B32   5E                     LD   e,(hl)   
0B33   23                     INC   hl   
0B34   56                     LD   d,(hl)   ; de = arg
0B35                ARG1A:       
0B35   D5                     PUSH   de   ; push arg
0B36   DD E9                  JP   (ix)   
0B38                             ; 0..9 number                   37
0B38                NUM:         
0B38   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B3B   0A                     LD   a,(bc)   ; Get numeral or -
0B3C   FE 2D                  CP   "-"   
0B3E   20 01                  JR   nz,num0   
0B40   03                     INC   bc   ; move to next char, no flags affected
0B41                NUM0:        
0B41   08                     EX   af,af'   ; save zero flag = 0 for later
0B42                NUM1:        
0B42   0A                     LD   a,(bc)   ; read digit
0B43   D6 30                  SUB   "0"   ; less than 0?
0B45   38 13                  JR   c,num2   ; not a digit, exit loop
0B47   FE 0A                  CP   10   ; greater that 9?
0B49   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B4B   03                     INC   bc   ; inc IP
0B4C   54 5D                  LD   de,hl   ; multiply hl * 10
0B4E   29                     ADD   hl,hl   
0B4F   29                     ADD   hl,hl   
0B50   19                     ADD   hl,de   
0B51   29                     ADD   hl,hl   
0B52   85                     ADD   a,l   ; add digit in a to hl
0B53   6F                     LD   l,a   
0B54   3E 00                  LD   a,0   
0B56   8C                     ADC   a,h   
0B57   67                     LD   h,a   
0B58   18 E8                  JR   num1   
0B5A                NUM2:        
0B5A   0B                     DEC   bc   
0B5B   08                     EX   af,af'   ; restore zero flag
0B5C   20 07                  JR   nz,num3   
0B5E   EB                     EX   de,hl   ; negate the value of hl
0B5F   21 00 00               LD   hl,0   
0B62   B7                     OR   a   ; jump to sub2
0B63   ED 52                  SBC   hl,de   
0B65                NUM3:        
0B65   E5                     PUSH   hl   ; Put the number on the stack
0B66   DD E9                  JP   (ix)   ; and process the next character
0B68                             ; }                               58
0B68                RBRACE:      
0B68                BLOCKEND:      
0B68   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0B6B   FD 56 01               LD   d,(iy+1)   
0B6E   ED 53 04 50            LD   (vTemp1),de   
0B72   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0B75   FD 56 07               LD   d,(iy+7)   
0B78   ED 53 06 50            LD   (vTemp2),de   
0B7C   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0B7F   FD 56 03               LD   d,(iy+3)   
0B82   EB                     EX   de,hl   
0B83   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0B86   FD 56 01               LD   d,(iy+1)   
0B89   13                     INC   de   ; for carry flag <=
0B8A   B7                     OR   a   
0B8B   ED 52                  SBC   hl,de   
0B8D   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0B8F   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0B91   FD 5D                  LD   e,iyl   
0B93   21 08 00               LD   hl,8   
0B96   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0B97   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0B98   18 0C                  JR   blockEnd2   
0B9A                BLOCKEND1:      ; same scope
0B9A   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0B9D   FD 56 03               LD   d,(iy+3)   
0BA0   EB                     EX   de,hl   
0BA1   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0BA3   FD 5D                  LD   e,iyl   
0BA5   EB                     EX   de,hl   
0BA6                BLOCKEND2:      
0BA6   44 4D                  LD   bc,hl   ; bc = hl = BP
0BA8   B7                     OR   a   ; hl = BP - SP = count
0BA9   ED 72                  SBC   hl,sp   
0BAB   7D                     LD   a,l   
0BAC   B4                     OR   h   
0BAD   28 09                  JR   z,blockEnd3   
0BAF   C5                     PUSH   bc   ; bc = count, hl = BP
0BB0   44 4D                  LD   bc,hl   
0BB2   E1                     POP   hl   
0BB3   2B                     DEC   hl   ; hl = BP-1
0BB4   1B                     DEC   de   ; de = args*-1
0BB5   ED B8                  LDDR      
0BB7   13                     INC   de   
0BB8                BLOCKEND3:      
0BB8   EB                     EX   de,hl   ; sp = de = new tos*
0BB9   F9                     LD   sp,hl   
0BBA   ED 4B 06 50            LD   bc,(vTemp2)   
0BBE   FD 2A 04 50            LD   iy,(vTemp1)   
0BC2   ED 5B F2 4F            LD   de,(vRecur)   ; de = recur vector
0BC6   7B                     LD   a,e   ; check for NUL
0BC7   B2                     OR   d   
0BC8   20 02                  JR   nz,blockEnd4   
0BCA   DD E9                  JP   (ix)   
0BCC                BLOCKEND4:      
0BCC   21 00 00               LD   hl,0   ; clear recur vector
0BCF   22 F2 4F               LD   (vRecur),hl   
0BD2   C3 AD 03               JP   go1   ; execute de
0BD5                GOBLOCK:      
0BD5   ED 53 04 50            LD   (vTemp1),de   ; save de
0BD9   21 00 4D               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0BDC   FD 54                  LD   d,iyh   
0BDE   FD 5D                  LD   e,iyl   
0BE0   B7                     OR   a   ; if stack* == BP then this is the root_scope
0BE1   ED 52                  SBC   hl,de   
0BE3   ED 5B 04 50            LD   de,(vTemp1)   ; restore de
0BE7   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0BE8   B4                     OR   h   
0BE9   3E 00                  LD   a,0   
0BEB   28 6A                  JR   z,goFunc8   
0BED   C5                     PUSH   bc   ; push IP
0BEE   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0BF1   FD 46 05               LD   b,(iy+5)   
0BF4   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0BF7   FD 66 03               LD   h,(iy+3)   
0BFA                GOBLOCK2:      
0BFA   C5                     PUSH   bc   ; arg_list*
0BFB   E5                     PUSH   hl   ; first_arg*
0BFC   FD E5                  PUSH   iy   ; push BP
0BFE   FD 21 00 00            LD   iy,0   ; BP = SP
0C02   FD 39                  ADD   iy,sp   
0C04                GOBLOCK3:      
0C04   42 4B                  LD   bc,de   ; bc = de = block*-1
0C06   DD E9                  JP   (ix)   
0C08                GOFUNC:      ; execute func
0C08   EB                     EX   de,hl   ; hl = func*
0C09   5E                     LD   e,(hl)   ; de = partial_array*
0C0A   23                     INC   hl   
0C0B   56                     LD   d,(hl)   
0C0C   23                     INC   hl   
0C0D   7B                     LD   a,e   ; if partial_array* == null skip
0C0E   B2                     OR   d   
0C0F   28 21                  JR   z,goFunc3   
0C11   ED 43 04 50            LD   (vTemp1),bc   
0C15   22 06 50               LD   (vTemp2),hl   ; save bc,hl
0C18   EB                     EX   de,hl   ; hl = partial_array*
0C19   2B                     DEC   hl   ; bc = count
0C1A   46                     LD   b,(hl)   
0C1B   2B                     DEC   hl   
0C1C   4E                     LD   c,(hl)   
0C1D   23                     INC   hl   ; hl = array data*
0C1E   23                     INC   hl   
0C1F   18 06                  JR   goFunc2   ; push each item on stack
0C21                GOFUNC1:      
0C21   5E                     LD   e,(hl)   ; de = partial item
0C22   23                     INC   hl   
0C23   56                     LD   d,(hl)   
0C24   23                     INC   hl   
0C25   D5                     PUSH   de   ; push on stack
0C26   0B                     DEC   bc   
0C27                GOFUNC2:      
0C27   79                     LD   a,c   ; if count != 0 then loop
0C28   B0                     OR   b   
0C29   20 F6                  JR   nz,goFunc1   
0C2B   ED 4B 04 50            LD   bc,(vTemp1)   ; restore bc
0C2F   2A 06 50               LD   hl,(vTemp2)   ; restore hl
0C32                GOFUNC3:      
0C32   5E                     LD   e,(hl)   ; de = block*
0C33   23                     INC   hl   
0C34   56                     LD   d,(hl)   
0C35   23                     INC   hl   
0C36   ED 53 04 50            LD   (vTemp1),de   ; save block*
0C3A   5E                     LD   e,(hl)   ; de = arg_list*
0C3B   23                     INC   hl   
0C3C   56                     LD   d,(hl)   
0C3D   23                     INC   hl   
0C3E   EB                     EX   de,hl   ; hl = arg_list*
0C3F   ED 5B 04 50            LD   de,(vTemp1)   ; restore de = block*
0C43   7D                     LD   a,l   ; if arg_list* == null a = 0
0C44   B4                     OR   h   
0C45   20 03                  JR   nz,goFunc4   
0C47   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0C48   18 0D                  JR   goFunc8   
0C4A                GOFUNC4:      ; allocate locals
0C4A   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0C4B   18 03                  JR   goFunc6   
0C4D                GOFUNC5:      ; loop
0C4D   3B                     DEC   sp   
0C4E   3B                     DEC   sp   
0C4F   3D                     DEC   a   
0C50                GOFUNC6:      
0C50   B7                     OR   a   
0C51   20 FA                  JR   nz,goFunc5   ; end loop
0C53                GOFUNC7:      
0C53   23                     INC   hl   ; a = num_args* x 2
0C54   7E                     LD   a,(hl)   
0C55   2B                     DEC   hl   
0C56   87                     ADD   a,a   ; a *= 2
0C57                GOFUNC8:      
0C57   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0C58   44 4D                  LD   bc,hl   
0C5A   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0C5D   85                     ADD   a,l   
0C5E   6F                     LD   l,a   
0C5F   39                     ADD   hl,sp   
0C60   18 98                  JR   goBlock2   
0C62                             ; =                              21
0C62                             ; value _oldValue --            ; uses address in vPointer 15
0C62                ASSIGN:      
0C62   E1                     POP   hl   ; discard last accessed value
0C63   E1                     POP   hl   ; hl = new value
0C64                ASSIGN0:      
0C64   EB                     EX   de,hl   ; de = new value
0C65   2A F8 4F               LD   hl,(vPointer)   
0C68                ASSIGN1:      ; entry point from defineEnd
0C68   73                     LD   (hl),e   
0C69   3A E6 4F               LD   a,(vDataWidth)   
0C6C   3D                     DEC   a   ; is it byte?
0C6D   28 02                  JR   z,assign2   
0C6F   23                     INC   hl   
0C70   72                     LD   (hl),d   
0C71                ASSIGN2:      
0C71   DD E9                  JP   (ix)   
0C73                             ; hl = value1, de = value2
0C73                             ; hl = result
0C73                EQUALS:      
0C73   B7                     OR   a   ; reset the carry flag
0C74   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0C76   28 16                  JR   z,true1   
0C78   18 1A                  JR   false1   
0C7A                NOTEQUALS:      
0C7A   B7                     OR   a   ; reset the carry flag
0C7B   ED 52                  SBC   hl,de   
0C7D   20 0F                  JR   nz,true1   
0C7F   18 13                  JR   false1   
0C81                             ; hl = value1 de = value2
0C81                             ; hl = result
0C81                LESSTHANEQ:      
0C81   B7                     OR   a   
0C82   ED 52                  SBC   hl,de   
0C84   18 05                  JR   lessthan1   
0C86                             ; hl = value1 de = value2
0C86                             ; hl = result
0C86                LESSTHAN:      
0C86   B7                     OR   a   
0C87   ED 52                  SBC   hl,de   
0C89   28 09                  JR   z,false1   
0C8B                LESSTHAN1:      
0C8B   FA 94 0C               JP   m,false1   
0C8E                TRUE1:       
0C8E   21 FF FF               LD   hl,TRUE   
0C91   E5                     PUSH   hl   
0C92   DD E9                  JP   (ix)   
0C94                NULL1:       
0C94                FALSE1:      
0C94   21 00 00               LD   hl,FALSE   
0C97   E5                     PUSH   hl   
0C98   DD E9                  JP   (ix)   
0C9A                             ; shiftLeft                     15
0C9A                             ; value count -- value2          shift left count places
0C9A                SHIFTLEFT:      
0C9A   50 59                  LD   de,bc   ; save IP
0C9C   C1                     POP   bc   ; bc = count
0C9D   41                     LD   b,c   ; b = loop counter
0C9E   E1                     POP   hl   
0C9F   04                     INC   b   ; test for counter=0 case
0CA0   18 01                  JR   shiftLeft2   
0CA2                SHIFTLEFT1:      
0CA2   29                     ADD   hl,hl   ; left shift hl
0CA3                SHIFTLEFT2:      
0CA3   10 FD                  DJNZ   shiftLeft1   
0CA5   E5                     PUSH   hl   
0CA6   42 4B                  LD   bc,de   ; restore IP
0CA8   DD E9                  JP   (ix)   
0CAA                             ; shiftRight                    16
0CAA                             ; value count -- value2          shift left count places
0CAA                SHIFTRIGHT:      
0CAA   50 59                  LD   de,bc   ; save IP
0CAC   C1                     POP   bc   ; bc = count
0CAD   41                     LD   b,c   ; b = loop counter
0CAE   E1                     POP   hl   
0CAF   04                     INC   b   ; test for counter=0 case
0CB0   18 04                  JR   shiftRight2   
0CB2                SHIFTRIGHT1:      
0CB2   CB 3C                  SRL   h   ; right shift hl
0CB4   CB 1D                  RR   l   
0CB6                SHIFTRIGHT2:      
0CB6   10 FA                  DJNZ   shiftRight1   
0CB8   E5                     PUSH   hl   
0CB9   42 4B                  LD   bc,de   ; restore IP
0CBB   DD E9                  JP   (ix)   
0CBD                             ; division subroutine.
0CBD                             ; bc: divisor, de: dividend, hl: remainder
0CBD                DIVIDE:      
0CBD   21 00 00               LD   hl,0   ; zero the remainder
0CC0   3E 10                  LD   a,16   ; loop counter
0CC2                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0CC2   CB 21                  SLA   c   
0CC4   CB 10                  RL   b   
0CC6   ED 6A                  ADC   hl,hl   
0CC8   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0CCA   38 03                  JR   c,divide2   
0CCC   0C                     INC   c   
0CCD   18 01                  JR   divide3   
0CCF                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0CCF   19                     ADD   hl,de   
0CD0                DIVIDE3:      
0CD0   3D                     DEC   a   
0CD1   20 EF                  JR   nz,divide1   
0CD3   50 59                  LD   de,bc   ; result from bc to de
0CD5   C9                     RET      
0CD6                DOTNEXT:      
0CD6   3A F6 4F               LD   a,(vStrMode)   ; if string mode then exit
0CD9   3C                     INC   a   
0CDA   20 02                  JR   nz,dotNext1   
0CDC   DD E9                  JP   (ix)   
0CDE                DOTNEXT1:      
0CDE   11 00 4E               LD   de,BUFFER   
0CE1   2A EC 4F               LD   hl,(vBufPtr)   
0CE4   36 00                  LD   (hl),0   ; store NUL at end of string
0CE6   ED 53 EC 4F            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0CEA   EB                     EX   de,hl   ; hl = BUFFER
0CEB   CD 64 0E               CALL   putstr   
0CEE   DD E9                  JP   (ix)   
0CF0                             ; arg_list - parses arg_list e.g. ab:c
0CF0                             ; -- arg_list*
0CF0                PARSEARGS:      
0CF0   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0CF3   2A F0 4F               LD   hl,(vHeapPtr)   ; hl = heap*
0CF6   E5                     PUSH   hl   ; save start of arg_list
0CF7   23                     INC   hl   ; skip length fields to start of string
0CF8   23                     INC   hl   
0CF9   03                     INC   bc   ; point to next char
0CFA                PARSEARGS1:      
0CFA   0A                     LD   a,(bc)   
0CFB   FE 3A                  CP   ":"   ; ":" switches from args to locals
0CFD   20 03                  JR   nz,parseArgs1a   
0CFF   14                     INC   d   ; non zero value local count acts as flag
0D00   18 10                  JR   parseArgs3   
0D02                PARSEARGS1A:      
0D02   FE 61                  CP   "a"   ; < "a" terminates arg_list
0D04   38 0F                  JR   c,parseArgs4   
0D06   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0D08   30 0B                  JR   nc,parseArgs4   
0D0A                PARSEARGS2:      
0D0A   77                     LD   (hl),a   
0D0B   23                     INC   hl   
0D0C   1C                     INC   e   ; increase arg count
0D0D   AF                     XOR   a   
0D0E   B2                     OR   d   
0D0F   28 01                  JR   z,parseArgs3   
0D11   14                     INC   d   ; if d > 0 increase local count
0D12                PARSEARGS3:      
0D12   03                     INC   bc   ; point to next char
0D13   18 E5                  JR   parseArgs1   
0D15                PARSEARGS4:      
0D15   0B                     DEC   bc   
0D16   AF                     XOR   a   
0D17   B2                     OR   d   
0D18   28 01                  JR   z,parseArgs5   
0D1A   15                     DEC   d   ; remove initial inc
0D1B                PARSEARGS5:      
0D1B   23                     INC   hl   
0D1C   22 F0 4F               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0D1F   E1                     POP   hl   ; hl = start of arg_list
0D20   72                     LD   (hl),d   ; write number of locals at start - 1
0D21   23                     INC   hl   
0D22   73                     LD   (hl),e   ; write number of args + locals at start - 2
0D23   2B                     DEC   hl   
0D24   E3                     EX   (sp),hl   
0D25   E9                     JP   (hl)   
0D26                             ; create block: parses block e.g. 00bbIC4uLi4g
0D26                             ; -- block*
0D26                PARSEBLOCK:      
0D26   C5                     PUSH   bc   ; return pointer to first { of block
0D27   03                     INC   bc   
0D28   16 01                  LD   d,1   ; nesting: count first parenthesis
0D2A                PARSEBLOCK1:      ; Skip to end of definition
0D2A   0A                     LD   a,(bc)   ; Get the next character
0D2B   03                     INC   bc   ; Point to next character
0D2C   FE 21                  CP   " " + 1   ; ignore whitespace
0D2E   38 FA                  JR   c,parseBlock1   
0D30   FE 29                  CP   ")"   
0D32   28 2D                  JR   z,parseBlock4   
0D34   FE 7D                  CP   "}"   
0D36   28 29                  JR   z,parseBlock4   
0D38   FE 5D                  CP   "]"   
0D3A   28 25                  JR   z,parseBlock4   
0D3C   FE 28                  CP   "("   
0D3E   28 16                  JR   z,parseBlock2   
0D40   FE 7B                  CP   "{"   
0D42   28 12                  JR   z,parseBlock2   
0D44   FE 5B                  CP   "["   
0D46   28 0E                  JR   z,parseBlock2   
0D48   FE 27                  CP   "'"   
0D4A   28 0D                  JR   z,parseBlock3   
0D4C   FE 60                  CP   "`"   
0D4E   28 09                  JR   z,parseBlock3   
0D50   FE 22                  CP   DQ   
0D52   28 05                  JR   z,parseBlock3   
0D54   18 D4                  JR   parseBlock1   
0D56                PARSEBLOCK2:      
0D56   14                     INC   d   
0D57   18 D1                  JR   parseBlock1   
0D59                PARSEBLOCK3:      
0D59   3E 80                  LD   a,$80   
0D5B   AA                     XOR   d   
0D5C   57                     LD   d,a   
0D5D   20 CB                  JR   nz,parseBlock1   
0D5F   18 03                  JR   parseBlock5   
0D61                PARSEBLOCK4:      
0D61   15                     DEC   d   
0D62   20 C6                  JR   nz,parseBlock1   ; get the next element
0D64                PARSEBLOCK5:      
0D64   60 69                  LD   hl,bc   ; hl = IP
0D66   11 22 50               LD   de,HEAP   ; is IP pointing to object in heap
0D69   B7                     OR   a   ; IP - HEAP
0D6A   ED 52                  SBC   hl,de   
0D6C   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0D6E   28 1C                  JR   z,parseBlock6   
0D70   60 69                  LD   hl,bc   ; hl = IP
0D72   D1                     POP   de   ; de = block*
0D73   ED 43 04 50            LD   (vTemp1),bc   ; save IP
0D77   B7                     OR   a   ; bc = size
0D78   ED 52                  SBC   hl,de   
0D7A   44 4D                  LD   bc,hl   
0D7C   EB                     EX   de,hl   ; hl = block* de = heap*
0D7D   ED 5B F0 4F            LD   de,(vHeapPtr)   
0D81   D5                     PUSH   de   ; return hblock*
0D82   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0D84   ED 53 F0 4F            LD   (vHeapPtr),de   ; heap* += size
0D88   ED 4B 04 50            LD   bc,(vTemp1)   ; restore IP
0D8C                PARSEBLOCK6:      
0D8C   0B                     DEC   bc   ; balanced, exit
0D8D   E1                     POP   hl   ; hl = block*
0D8E   E3                     EX   (sp),hl   ; return to caller
0D8F   E9                     JP   (hl)   
0D90                             ; create function
0D90                             ; arg_list* block* -- func*
0D90                CREATEFUNC:      
0D90   E1                     POP   hl   ; save retrn address
0D91   22 08 50               LD   (vTemp3),hl   
0D94   ED 43 04 50            LD   (vTemp1),bc   ; save IP
0D98   E1                     POP   hl   ; hl = block*
0D99   22 06 50               LD   (vTemp2),hl   ; save block*
0D9C   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0D9F   FD 56 05               LD   d,(iy+5)   
0DA2   7B                     LD   a,e   ; if arg_list == null then make a func
0DA3   B2                     OR   d   
0DA4   20 09                  JR   nz,createFunc0   
0DA6   21 00 00               LD   hl,0   ; partial_array = null
0DA9   ED 5B F0 4F            LD   de,(vHeapPtr)   ; de = compile*
0DAD   18 65                  JR   createFunc5   
0DAF                CREATEFUNC0:      
0DAF   E1                     POP   hl   ; hl = inner_arg_list*
0DB0   E5                     PUSH   hl   ; save inner_arg_list
0DB1   ED 5B F0 4F            LD   de,(vHeapPtr)   ; de = compile*
0DB5   7E                     LD   a,(hl)   ; compile inner_num_locals
0DB6   4F                     LD   c,a   ; b = inner_num_locals
0DB7   12                     LD   (de),a   
0DB8   23                     INC   hl   
0DB9   13                     INC   de   
0DBA   7E                     LD   a,(hl)   ; compile inner_length
0DBB   12                     LD   (de),a   
0DBC   91                     SUB   c   ; a = inner_num args
0DBD   23                     INC   hl   
0DBE   13                     INC   de   
0DBF   B7                     OR   a   ; compile args if inner_length > 0
0DC0   28 05                  JR   z,createFunc1   
0DC2   4F                     LD   c,a   ; bc = a
0DC3   06 00                  LD   b,0   
0DC5   ED B0                  LDIR      
0DC7                CREATEFUNC1:      
0DC7   EB                     EX   de,hl   ; hl = outer_arg_list
0DC8   FD 5E 04               LD   e,(iy+4)   
0DCB   FD 56 05               LD   d,(iy+5)   
0DCE   EB                     EX   de,hl   
0DCF   23                     INC   hl   ; a = outer_length
0DD0   7E                     LD   a,(hl)   
0DD1   23                     INC   hl   
0DD2   B7                     OR   a   
0DD3   28 05                  JR   z,createFunc2   
0DD5   4F                     LD   c,a   
0DD6   06 00                  LD   b,0   
0DD8   ED B0                  LDIR      ; append outer_args
0DDA                CREATEFUNC2:      ; a = outer_length
0DDA   47                     LD   b,a   ; b = a = outer_length
0DDB   2A F0 4F               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0DDE   23                     INC   hl   
0DDF   7E                     LD   a,(hl)   ; add outer_length to new length
0DE0   80                     ADD   a,b   
0DE1   77                     LD   (hl),a   
0DE2   2B                     DEC   hl   
0DE3   78                     LD   a,b   ; save outer_length in a'
0DE4   08                     EX   af,af'   
0DE5   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0DE6   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0DE7   B7                     OR   a   
0DE8   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0DEA   4F                     LD   c,a   ; c = inner_num_locals
0DEB   06 00                  LD   b,0   ; bc = inner_num_locals
0DED   23                     INC   hl   ; a = inner_length
0DEE   7E                     LD   a,(hl)   
0DEF   91                     SUB   c   ; a = inner_num_args
0DF0   23                     INC   hl   ; hl = inner_arg_chars
0DF1   85                     ADD   a,l   ; hl += a
0DF2   6F                     LD   l,a   
0DF3   3E 00                  LD   a,0   
0DF5   84                     ADD   a,h   
0DF6   67                     LD   h,a   
0DF7   ED B0                  LDIR      ; append inner_locals
0DF9                CREATEFUNC2A:      
0DF9   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0DFA   12                     LD   (de),a   ; compile partial_array length field
0DFB   13                     INC   de   
0DFC   AF                     XOR   a   
0DFD   12                     LD   (de),a   
0DFE   13                     INC   de   
0DFF   D5                     PUSH   de   ; push partial_array*
0E00   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0E01   FD 5E 02               LD   e,(iy+2)   
0E04   FD 56 03               LD   d,(iy+3)   
0E07   EB                     EX   de,hl   
0E08                CREATEFUNC3:      
0E08   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0E09   4E                     LD   c,(hl)   
0E0A   2B                     DEC   hl   
0E0B   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0E0C   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0E0D   13                     INC   de   
0E0E   79                     LD   a,c   
0E0F   12                     LD   (de),a   
0E10   13                     INC   de   
0E11   10 F5                  DJNZ   createFunc3   ; b = outer_length
0E13                CREATEFUNC4:      
0E13   E1                     POP   hl   ; hl = partial_array*
0E14                CREATEFUNC5:      
0E14   C1                     POP   bc   ; bc = new_arg_list*
0E15   D5                     PUSH   de   ; return new func*
0E16   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0E17   73                     LD   (hl),e   ; compile partial_array* to func
0E18   23                     INC   hl   
0E19   72                     LD   (hl),d   
0E1A   23                     INC   hl   
0E1B   ED 5B 06 50            LD   de,(vTemp2)   ; de = block*
0E1F   73                     LD   (hl),e   ; compile block* to func
0E20   23                     INC   hl   
0E21   72                     LD   (hl),d   
0E22   23                     INC   hl   
0E23   71                     LD   (hl),c   ; compile new_arg_list* to func
0E24   23                     INC   hl   
0E25   70                     LD   (hl),b   
0E26   23                     INC   hl   
0E27   22 F0 4F               LD   (vHeapPtr),hl   ; bump heap ptr
0E2A   ED 4B 04 50            LD   bc,(vTemp1)   ; restore IP
0E2E   2A 08 50               LD   hl,(vTemp3)   ; jump to return address
0E31   E9                     JP   (hl)   
0E32                             ;*******************************************************************
0E32                             ; general routines
0E32                             ;*******************************************************************
0E32                             ; followed by a table
0E32                             ; indexed on the 0-25 lowercase letter
0E32                             ; db lsb(addr)
0E32                             ; the final item index 26 matches any other char
0E32                LOWERCASETABLE:      
0E32   03                     INC   bc   
0E33   0A                     LD   a,(bc)   
0E34   FE 7B                  CP   "z"+1   
0E36   30 0B                  JR   nc,lowerCaseTable2   
0E38   D6 61                  SUB   "a"   
0E3A   38 07                  JR   c,lowerCaseTable2   
0E3C                LOWERCASETABLE1:      
0E3C   E1                     POP   hl   
0E3D   85                     ADD   a,l   
0E3E   6F                     LD   l,a   
0E3F   6E                     LD   l,(hl)   ; must have the same msb as the table
0E40   C3 49 0E               JP   commandTable1   
0E43                LOWERCASETABLE2:      
0E43   3E 1A                  LD   a,26   
0E45   0B                     DEC   bc   
0E46   18 F4                  JR   lowerCaseTable1   
0E48                             ; followed by a table
0E48                             ; db char
0E48                             ; dw addr
0E48                             ; the final item must have char == NUL
0E48                COMMANDTABLE:      
0E48   E1                     POP   hl   
0E49                COMMANDTABLE1:      
0E49   03                     INC   bc   
0E4A                COMMANDTABLE2:      
0E4A   AF                     XOR   a   
0E4B   BE                     CP   (hl)   
0E4C   20 03                  JR   nz,commandTable3   
0E4E   0B                     DEC   bc   
0E4F   18 09                  JR   commandTable4   
0E51                COMMANDTABLE3:      
0E51   0A                     LD   a,(bc)   
0E52   BE                     CP   (hl)   
0E53   28 05                  JR   z,commandTable4   
0E55   23                     INC   hl   
0E56   23                     INC   hl   
0E57   23                     INC   hl   
0E58   18 F0                  JR   commandTable2   
0E5A                COMMANDTABLE4:      
0E5A   23                     INC   hl   
0E5B   5E                     LD   e,(hl)   
0E5C   23                     INC   hl   
0E5D   56                     LD   d,(hl)   
0E5E   EB                     EX   de,hl   
0E5F   E9                     JP   (hl)   
0E60                PUTSTR0:      
0E60   CD 85 00               CALL   putchar   
0E63   23                     INC   hl   
0E64                PUTSTR:      
0E64   7E                     LD   a,(hl)   
0E65   B7                     OR   a   
0E66   20 F8                  JR   nz,putstr0   
0E68   C9                     RET      
0E69                             ; **************************************************************************
0E69                             ; calculate nesting value
0E69                             ; a is char to be tested,
0E69                             ; e is the nesting value (initially 0)
0E69                             ; e is increased by ( and [
0E69                             ; e is decreased by ) and ]
0E69                             ; e has its bit 7 toggled by `
0E69                             ; limited to 127 levels
0E69                             ; **************************************************************************
0E69                NESTING:      
0E69   FE 22                  CP   DQ   ; quote char
0E6B   28 06                  JR   z,nesting0   
0E6D   FE 60                  CP   "`"   ; quote char
0E6F   28 02                  JR   z,nesting0   
0E71   18 0A                  JR   nesting1   
0E73                NESTING0:      
0E73   CB 7B                  BIT   7,e   
0E75   28 03                  JR   z,nesting1a   
0E77   CB BB                  RES   7,e   
0E79   C9                     RET      
0E7A                NESTING1A:      
0E7A   CB FB                  SET   7,e   
0E7C   C9                     RET      
0E7D                NESTING1:      
0E7D   CB 7B                  BIT   7,e   
0E7F   C0                     RET   nz   
0E80   FE 7B                  CP   "{"   
0E82   28 08                  JR   z,nesting2   
0E84   FE 5B                  CP   "["   
0E86   28 04                  JR   z,nesting2   
0E88   FE 28                  CP   "("   
0E8A   20 02                  JR   nz,nesting3   
0E8C                NESTING2:      
0E8C   1C                     INC   e   
0E8D   C9                     RET      
0E8E                NESTING3:      
0E8E   FE 7D                  CP   "}"   
0E90   28 07                  JR   z,nesting4   
0E92   FE 5D                  CP   "]"   
0E94   28 03                  JR   z,nesting4   
0E96   FE 29                  CP   ")"   
0E98   C0                     RET   nz   
0E99                NESTING4:      
0E99   1D                     DEC   e   
0E9A   C9                     RET      
0E9B                PROMPT:      
0E9B   CD AB 0E               CALL   printStr   
0E9E   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0EA3   C9                     RET      
0EA4                CRLF:        
0EA4   CD AB 0E               CALL   printStr   
0EA7   0D 0A 00               .CSTR   "\r\n"   
0EAA   C9                     RET      
0EAB                             ; prints a null teminated string
0EAB                             ; the string should be immediately following the call
0EAB                PRINTSTR:      
0EAB   E3                     EX   (sp),hl   ; swap			
0EAC   CD 64 0E               CALL   putstr   
0EAF   23                     INC   hl   ; inc past NUL
0EB0   E3                     EX   (sp),hl   ; put it back	
0EB1   C9                     RET      
0EB2                INIT:        
0EB2   21 F0 01               LD   hl,titleStr   
0EB5   11 0E 50               LD   de,titleBuf   
0EB8   06 14                  LD   b,20   
0EBA                INIT1:       
0EBA   1A                     LD   a,(de)   
0EBB   BE                     CP   (hl)   
0EBC   20 17                  JR   nz,coldBoot0   
0EBE   13                     INC   de   
0EBF   23                     INC   hl   
0EC0   10 F8                  DJNZ   init1   
0EC2                WARMINIT:      
0EC2   ED 4B FC 4F            LD   bc,(vSavedIP)   ; restore IP
0EC6   ED 7B FE 4F            LD   sp,(vSavedSP)   ; restore SP
0ECA   DD 2A 00 50            LD   ix,(vSavedNext)   ; restore Next
0ECE   FD 2A 02 50            LD   iy,(vSavedBP)   ; restore BP
0ED2   C3 0C 0F               JP   start1   
0ED5                COLDBOOT0:      
0ED5   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0ED8   11 0E 50               LD   de,titleBuf   
0EDB   06 14                  LD   b,20   
0EDD   ED B0                  LDIR      
0EDF                COLDINIT:      
0EDF   21 DE 01               LD   hl,isysVars   
0EE2   11 E6 4F               LD   de,sysVars   
0EE5   01 12 00               LD   bc,9 * 2   
0EE8   ED B0                  LDIR      
0EEA   21 00 4F               LD   hl,vars   ; 52 vars LO HI
0EED   06 34                  LD   b,26*2   
0EEF   AF                     XOR   a   
0EF0                COLDBOOT1:      
0EF0   77                     LD   (hl),a   
0EF1   23                     INC   hl   
0EF2   10 FC                  DJNZ   coldBoot1   
0EF4   DD 2A EE 4F            LD   ix,(vNext)   
0EF8   FD 21 00 4D            LD   iy,STACK   
0EFC   C9                     RET      
0EFD                COLDSTART:      
0EFD   31 00 4D               LD   sp,STACK   
0F00   CD D5 0E               CALL   coldBoot0   
0F03   C3 0C 0F               JP   start1   
0F06                START:       
0F06   31 00 4D               LD   sp,STACK   ; start Monty
0F09   CD B2 0E               CALL   init   ; setups
0F0C                START1:      
0F0C   21 0E 50               LD   hl,titleBuf   
0F0F   CD 64 0E               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
0F12                INTERPRET:      
0F12   CD 9B 0E               CALL   prompt   
0F15   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0F18   21 00 4D               LD   hl,TIB   
0F1B   22 EA 4F               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0F1E                INTERPRET2:      ; calculate nesting
0F1E   1E 00                  LD   e,0   ; initilize nesting value
0F20   C5                     PUSH   bc   ; save offset into TIB,
0F21                             ; bc is also the count of chars in TIB
0F21   21 00 4D               LD   hl,TIB   ; hl is start of TIB
0F24   18 0B                  JR   interpret4   
0F26                INTERPRET3:      
0F26   3E 33                  LD   a,"3"   
0F28   CD 85 00               CALL   putchar   
0F2B   7E                     LD   a,(hl)   ; a = char in TIB
0F2C   23                     INC   hl   ; inc pointer into TIB
0F2D   0B                     DEC   bc   ; dec count of chars in TIB
0F2E   CD 69 0E               CALL   nesting   ; update nesting value
0F31                INTERPRET4:      
0F31   79                     LD   a,c   ; is count zero?
0F32   B0                     OR   b   
0F33   20 F1                  JR   nz,interpret3   ; if not loop
0F35   C1                     POP   bc   ; restore offset into TIB
0F36                INTERPRET5:      
0F36   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0F39   FE 20                  CP   $20   ; compare to space
0F3B   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0F3D   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0F3F                             ; ???? NEEDED?
0F3F   28 36                  JR   z,interpret8   
0F41   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0F43   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0F45   FE 05                  CP   CTRL_E   
0F47   CA D8 0F               JP   z,edit_   
0F4A   FE 08                  CP   CTRL_H   
0F4C   CA C8 0F               JP   z,backSpace_   
0F4F   FE 0A                  CP   CTRL_J   
0F51   CA DB 0F               JP   z,reEdit_   
0F54                             ; cp CTRL_S
0F54                             ; jp z,printStack_
0F54                             ; DB     lsb(edit_)       ; ENQ ^E  5
0F54                             ; DB     lsb(reedit_)     ; LF  ^J 10
0F54                             ; DB     lsb(list_)       ; FF  ^L 12
0F54                             ; DB     lsb(printStack_) ; DLE ^P 16
0F54                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0F54                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0F54                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0F54                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0F54                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0F54                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0F54                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0F54                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0F54                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0F54                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0F54                INTERPRET5A:      
0F54                             ; ld (vTIBPtr),bc
0F54                             ; ld bc,(vTIBPtr)
0F54   18 C8                  JR   interpret2   
0F56                INTERPRET6:      
0F56   21 00 4D               LD   hl,TIB   
0F59   09                     ADD   hl,bc   
0F5A   77                     LD   (hl),a   ; store the character in textbuf
0F5B   03                     INC   bc   
0F5C   CD 85 00               CALL   putchar   ; echo character to screen
0F5F   CD 69 0E               CALL   nesting   
0F62   18 D2                  JR   interpret5   ; wait for next character
0F64                INTERPRET7:      
0F64   21 00 4D               LD   hl,TIB   
0F67   09                     ADD   hl,bc   
0F68   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0F6A   23                     INC   hl   
0F6B   36 0A                  LD   (hl),"\n"   
0F6D   23                     INC   hl   
0F6E   03                     INC   bc   
0F6F   03                     INC   bc   
0F70   CD A4 0E               CALL   crlf   ; echo character to screen
0F73   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0F74   B7                     OR   a   
0F75   20 BF                  JR   nz,interpret5   
0F77                INTERPRET8:      
0F77   21 00 4D               LD   hl,TIB   
0F7A   09                     ADD   hl,bc   
0F7B   22 EA 4F               LD   (vTIBPtr),hl   
0F7E   01 00 4D               LD   bc,TIB   
0F81   ED 43 FC 4F            LD   (vSavedIP),bc   ; save IP
0F85   ED 73 FE 4F            LD   (vSavedSP),sp   ; save SP
0F89   DD 22 00 50            LD   (vSavedNext),ix   ; save Next
0F8D   FD 22 02 50            LD   (vSavedBP),iy   ; save BP
0F91   0B                     DEC   bc   
0F92                NEXT:        
0F92   03                     INC   bc   ; Increment the IP
0F93   0A                     LD   a,(bc)   ; Get the next character and dispatch
0F94   FE 20                  CP   " "   ; whitespace?
0F96   28 FA                  JR   z,next   ; space? ignore
0F98   38 0D                  JR   c,next1   
0F9A   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0F9C   6F                     LD   l,a   ; index into table
0F9D   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0F9F   6E                     LD   l,(hl)   ; get low jump address
0FA0   24                     INC   h   ; page 2
0FA1   FE BA                  CP   "Z" - "!" + 1 + $80   
0FA3   38 01                  JR   c,next0   
0FA5   24                     INC   h   ; page 3
0FA6                NEXT0:       
0FA6   E9                     JP   (hl)   ; Jump to routine
0FA7                NEXT1:       
0FA7   FE 00                  CP   NUL   ; end of input string?
0FA9   28 03                  JR   z,exit   
0FAB   C3 12 0F               JP   interpret   ; no, other whitespace, macros?
0FAE                EXIT:        
0FAE   03                     INC   bc   
0FAF   60 69                  LD   hl,bc   
0FB1   E9                     JP   (hl)   
0FB2                RUN:         
0FB2   C1                     POP   bc   
0FB3   0B                     DEC   bc   
0FB4   DD E9                  JP   (ix)   
0FB6                ERROR:       
0FB6   E5                     PUSH   hl   
0FB7   CD B2 0F               CALL   run   
0FBA   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
0FC5   C3 12 0F               JP   interpret   
0FC8                BACKSPACE_:      
0FC8   79                     LD   a,c   
0FC9   B0                     OR   b   
0FCA   CA 1E 0F               JP   z,interpret2   
0FCD   0B                     DEC   bc   
0FCE   CD AB 0E               CALL   printStr   
0FD1   08 20 08 00            .CSTR   "\b \b"   
0FD5   C3 1E 0F               JP   interpret2   
0FD8                             ; edit
0FD8                EDIT_:       
0FD8   C3 12 0F               JP   interpret   
0FDB                REEDIT_:      
0FDB   C3 12 0F               JP   interpret   
0FDE                             ; editDef:
0FDE                             ;     pop hl                      ; pop ret address
0FDE                             ;     ex (sp),hl                  ; swap with TOS
0FDE                             ;     push hl                     ; dup TOS
0FDE                             ;     ld a,l                      ; a = ident
0FDE                             ;     ld de,TIB                   ; de = start of TIB
0FDE                             ;     ld (vTIBPtr),de             ; update TIB*
0FDE                             ;     push ix                     ; save NEXT
0FDE                             ;     ld ix,editDef0              ; NEXT = editDef0
0FDE                             ;     jp lookupRef                ; convert letter into address
0FDE                             ; editDef0:
0FDE                             ;     ld e,(hl)                   ; de = (hl++)
0FDE                             ;     inc hl
0FDE                             ;     ld d,(hl)
0FDE                             ;     ld a,d                      ; de == 0 ?
0FDE                             ;     or e
0FDE                             ;     jr z,editDef4
0FDE                             ;     ld ix,editDef3              ; NEXT = editDef3
0FDE                             ;     ex de,hl
0FDE                             ;     ld a,(hl)
0FDE                             ;     cp "{"
0FDE                             ;     jr nz,editDef1
0FDE                             ;     jp editBlock0               ; convert letter into address
0FDE                             ; editDef1:
0FDE                             ;     cp "("
0FDE                             ;     jr nz,editDef2
0FDE                             ;     jp editBlock0               ; convert letter into address
0FDE                             ; editDef2:
0FDE                             ;     jp editFunc
0FDE                             ; editDef3:
0FDE                             ;     ld a," "                    ; write assign
0FDE                             ;     call writeChar
0FDE                             ;     pop hl                      ; a = ident
0FDE                             ;     ld a,l
0FDE                             ;     call writeChar
0FDE                             ;     ld a,"="                    ; write assign
0FDE                             ;     call writeChar
0FDE                             ;     ld ix,editDef4              ; NEXT = editDef4
0FDE                             ;     jp printTIB
0FDE                             ; editDef4:
0FDE                             ;     pop ix                      ; restore NEXT
0FDE                             ;     jp (ix)
0FDE                             ; writeChar:
0FDE                             ;     ld de,(vTIBPtr)             ; de = TIB*
0FDE                             ;     ld (de),a                   ; write ident
0FDE                             ;     inc de
0FDE                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0FDE                             ;     ret
0FDE                             ; ; printTIB
0FDE                             ; printTIB:
0FDE                             ;     ld hl,(vTIBPtr)
0FDE                             ;     ld de,TIB
0FDE                             ;     or a
0FDE                             ;     sbc hl,de
0FDE                             ;     jp printTIB2
0FDE                             ; printTIB1:
0FDE                             ;     ld a,(de)
0FDE                             ;     call putchar
0FDE                             ; printTIB2:
0FDE                             ;     ld a,l
0FDE                             ;     or h
0FDE                             ;     jr nz,printTIB1
0FDE                             ;     jp (ix)
0FDE                             ; editBlock:
0FDE                             ;     pop hl                      ; hl = block*
0FDE                             ; editBlock0:
0FDE                             ;     push ix                     ; save next
0FDE                             ;     push hl                     ; push block*
0FDE                             ;     push hl                     ; push block*
0FDE                             ;     ld ix,(editBlock2)
0FDE                             ;     jp blockLength
0FDE                             ; editBlock1:
0FDE                             ;     pop hl                      ; bc = length, (sp) = IP
0FDE                             ;     pop de                      ; de = block*
0FDE                             ;     ld a,l
0FDE                             ;     or h
0FDE                             ;     jr z,editBlock2
0FDE                             ;     push bc
0FDE                             ;     ld bc,hl
0FDE                             ;     ex de,hl                    ; hl = block*
0FDE                             ;     ld de,(vTIBPtr)              ; de = TIB*
0FDE                             ;     ldir                        ; copy block to TIB
0FDE                             ;     ld (vTIBPtr),de              ; save TIB*
0FDE                             ;     pop bc
0FDE                             ; editBlock2:
0FDE                             ;     pop ix                      ; restore next
0FDE                             ;     jp (ix)
0FDE                             ; editFunc:
0FDE                             ;     jp (ix)
0FDE                             ; editArray:
0FDE                             ;     jp (ix)
0FDE                             ; editparseArgs:
0FDE                             ;     jp (ix)
0FDE                             ; ; blockLength
0FDE                             ; ; addr1 -- length
0FDE                             ; blockLength:
0FDE                             ;     pop hl                      ; block*
0FDE                             ;     push hl                     ; save block*
0FDE                             ;     inc hl                      ; skip first char
0FDE                             ;     ld d,1                      ; increase nesting
0FDE                             ; blockLength1:                   ; Skip to end of definition
0FDE                             ;     ld a,(hl)                   ; Get the next character
0FDE                             ;     inc hl                      ; Point to next character
0FDE                             ;     cp " " + 1                  ; ignore whitespace
0FDE                             ;     jr c,blockLength1
0FDE                             ;     cp ")"
0FDE                             ;     jr z,blockLength4
0FDE                             ;     cp "}"
0FDE                             ;     jr z,blockLength4
0FDE                             ;     cp "]"
0FDE                             ;     jr z,blockLength4
0FDE                             ;     cp "("
0FDE                             ;     jr z,blockLength2
0FDE                             ;     cp "{"
0FDE                             ;     jr z,blockLength2
0FDE                             ;     cp "["
0FDE                             ;     jr z,blockLength2
0FDE                             ;     cp "'"
0FDE                             ;     jr z,blockLength3
0FDE                             ;     cp "`"
0FDE                             ;     jr z,blockLength3
0FDE                             ;     cp DQ
0FDE                             ;     jr z,blockLength3
0FDE                             ;     jr blockLength1
0FDE                             ; blockLength2:
0FDE                             ;     inc d
0FDE                             ;     jr blockLength1
0FDE                             ; blockLength4:
0FDE                             ;     dec d
0FDE                             ;     jr nz, blockLength1         ; get the next element
0FDE                             ; blockLength3:
0FDE                             ;     ld a,$80
0FDE                             ;     xor d
0FDE                             ;     ld d,a
0FDE                             ;     jr nz, blockLength1
0FDE                             ;     pop hl                      ; hl = block*
0FDE                             ;     or a
0FDE                             ;     sbc hl,de
0FDE                             ;     push hl
0FDE                             ;     jp (ix)
0FDE                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0FDE                             ; \a start of stack \#3 depth \b base \$ prompt
0FDE                             ; DW dStack               ; a vS0 start of datastack			
0FDE                             ; DW FALSE                ; b vBase16
0FDE                             ; DW 0                    ; c vTIBPtr an offset to the tib
0FDE                             ; DW 0                    ; d
0FDE                             ; DW 65                   ; e vLastDef "A" last command u defined
0FDE                             ; DW 0                    ; f
0FDE                             ; DW page6                ; g 256 bytes limits
0FDE                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0FDE                          ;*Macro unroll: FUNC f1, 0, ""
0FDE                F1:          
0FDE   CD AC 03               CALL   go   
0FE1   00 00                  DW   NUL   
0FE3   E9 0F                  DW   f1M_3018S12   
0FE5   E7 0F                  DW   $+2   
0FE7   00                     DB   0   
0FE8   00                     .PSTR   ""   
0FE9                F1M_3018S12:      
0FE9   00                     DB   0   
0FEA                          ;*Macro unroll: FUNC f2, 0, ""
0FEA                F2:          
0FEA   CD AC 03               CALL   go   
0FED   00 00                  DW   NUL   
0FEF   F5 0F                  DW   f2M_3020S15   
0FF1   F3 0F                  DW   $+2   
0FF3   00                     DB   0   
0FF4   00                     .PSTR   ""   
0FF5                F2M_3020S15:      
0FF5   00                     DB   0   
0FF6                          ;*Macro unroll: FUNC f3, 0, ""
0FF6                F3:          
0FF6   CD AC 03               CALL   go   
0FF9   00 00                  DW   NUL   
0FFB   01 10                  DW   f3M_3022S18   
0FFD   FF 0F                  DW   $+2   
0FFF   00                     DB   0   
1000   00                     .PSTR   ""   
1001                F3M_3022S18:      
1001   00                     DB   0   
1002                          ;*Macro unroll: FUNC f4, 0, ""
1002                F4:          
1002   CD AC 03               CALL   go   
1005   00 00                  DW   NUL   
1007   0D 10                  DW   f4M_3024S21   
1009   0B 10                  DW   $+2   
100B   00                     DB   0   
100C   00                     .PSTR   ""   
100D                F4M_3024S21:      
100D   00                     DB   0   
100E                          ALIGN   $100   
1100                TESTSSTART:      
1100                             ; test "0 10 1 /rg \\a{%a.} /fe", 0
1100                             ; test "0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", 0
1100                             ; test "0 10 1 /rg \\a{%a 3<}/ft \\a{%a.} /fe", 0
1100                             ; test "0 10 1 /rg  0 \\da{%d%a+}/fd \\a{%a 24<}/ft \\a{%a.} /fe", 0
1100                             ; test "[10 20 30] /ai \\a{%a.} /fe", 0
1100                             ; test "[1 2 3].a", 0
1100                             ; test "/sb `hello:` 65.c 1. 2. 3. /se .s", FALSE
1100                             ; test "`hello:` 65.c 1. 2. 3.", FALSE
1100                             ; test "/hb/bm$1234.",0
1100                             ; test "/bm257.",0
1100                             ; test "$1000 'hello there!' /si \\a{%a.c} /fe", $1000
1100                             ; test "10 0 -1 /rg \\a{%a.} /fe", 0
1100                             ; test "0 10 1 /f1 \\a{%a.} /fe", 0
1100                          ;*Macro unroll:  test "'hello' 'hell' /sc", false
1100   31 00 4D               LD   SP,STACK   
1103   CD DF 0E               CALL   coldInit   
1106   CD A2 4B               CALL   execStr   
1109   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 00 DB   "'hello' 'hell' /sc",0   
111C   E1                     POP   HL   
111D   E5                     PUSH   HL   
111E   11 00 00               LD   DE,false   
1121   B7                     OR   A   
1122   ED 52                  SBC   HL,DE   
1124   7D                     LD   A,L   
1125   B4                     OR   H   
1126   CA 88 11               JP   Z,expectM_3041S43   
1129   CD AB 0E               CALL   printStr   
112C   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 00 .CSTR   "Code: ","'hello' 'hell' /sc"   
1145   CD AB 0E               CALL   printStr   
1148   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1157   21 00 00               LD   hl,false   
115A   E5                     PUSH   hl   
115B   E5                     PUSH   hl   
115C   CD B2 0F               CALL   run   
115F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1166   CD AB 0E               CALL   printStr   
1169   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1176   E1                     POP   hl   
1177   E5                     PUSH   hl   
1178   E5                     PUSH   hl   
1179   CD B2 0F               CALL   run   
117C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1187   76                     HALT      
1188                EXPECTM_3041S43:      
1188   E1                     POP   HL   
1189                          ;*Macro unroll:  test "'hello' 'hello' /sc", true
1189   31 00 4D               LD   SP,STACK   
118C   CD DF 0E               CALL   coldInit   
118F   CD A2 4B               CALL   execStr   
1192   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 00 DB   "'hello' 'hello' /sc",0   
11A6   E1                     POP   HL   
11A7   E5                     PUSH   HL   
11A8   11 FF FF               LD   DE,true   
11AB   B7                     OR   A   
11AC   ED 52                  SBC   HL,DE   
11AE   7D                     LD   A,L   
11AF   B4                     OR   H   
11B0   CA 13 12               JP   Z,expectM_3042S44   
11B3   CD AB 0E               CALL   printStr   
11B6   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 00 .CSTR   "Code: ","'hello' 'hello' /sc"   
11D0   CD AB 0E               CALL   printStr   
11D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11E2   21 FF FF               LD   hl,true   
11E5   E5                     PUSH   hl   
11E6   E5                     PUSH   hl   
11E7   CD B2 0F               CALL   run   
11EA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
11F1   CD AB 0E               CALL   printStr   
11F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1201   E1                     POP   hl   
1202   E5                     PUSH   hl   
1203   E5                     PUSH   hl   
1204   CD B2 0F               CALL   run   
1207   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1212   76                     HALT      
1213                EXPECTM_3042S44:      
1213   E1                     POP   HL   
1214   CD AB 0E               CALL   printStr   
1217   44 6F 6E 65 21 00      .CSTR   "Done!"   
121D   76                     HALT      
121E                          ;*Macro unroll:  test "/f", false
121E   31 00 4D               LD   SP,STACK   
1221   CD DF 0E               CALL   coldInit   
1224   CD A2 4B               CALL   execStr   
1227   2F 66 00               DB   "/f",0   
122A   E1                     POP   HL   
122B   E5                     PUSH   HL   
122C   11 00 00               LD   DE,false   
122F   B7                     OR   A   
1230   ED 52                  SBC   HL,DE   
1232   7D                     LD   A,L   
1233   B4                     OR   H   
1234   CA 86 12               JP   Z,expectM_3046S49   
1237   CD AB 0E               CALL   printStr   
123A   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
1243   CD AB 0E               CALL   printStr   
1246   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1255   21 00 00               LD   hl,false   
1258   E5                     PUSH   hl   
1259   E5                     PUSH   hl   
125A   CD B2 0F               CALL   run   
125D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1264   CD AB 0E               CALL   printStr   
1267   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1274   E1                     POP   hl   
1275   E5                     PUSH   hl   
1276   E5                     PUSH   hl   
1277   CD B2 0F               CALL   run   
127A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1285   76                     HALT      
1286                EXPECTM_3046S49:      
1286   E1                     POP   HL   
1287                          ;*Macro unroll:  test "/t", true
1287   31 00 4D               LD   SP,STACK   
128A   CD DF 0E               CALL   coldInit   
128D   CD A2 4B               CALL   execStr   
1290   2F 74 00               DB   "/t",0   
1293   E1                     POP   HL   
1294   E5                     PUSH   HL   
1295   11 FF FF               LD   DE,true   
1298   B7                     OR   A   
1299   ED 52                  SBC   HL,DE   
129B   7D                     LD   A,L   
129C   B4                     OR   H   
129D   CA EF 12               JP   Z,expectM_3047S50   
12A0   CD AB 0E               CALL   printStr   
12A3   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
12AC   CD AB 0E               CALL   printStr   
12AF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12BE   21 FF FF               LD   hl,true   
12C1   E5                     PUSH   hl   
12C2   E5                     PUSH   hl   
12C3   CD B2 0F               CALL   run   
12C6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
12CD   CD AB 0E               CALL   printStr   
12D0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12DD   E1                     POP   hl   
12DE   E5                     PUSH   hl   
12DF   E5                     PUSH   hl   
12E0   CD B2 0F               CALL   run   
12E3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
12EE   76                     HALT      
12EF                EXPECTM_3047S50:      
12EF   E1                     POP   HL   
12F0                          ;*Macro unroll:  test "1", 1
12F0   31 00 4D               LD   SP,STACK   
12F3   CD DF 0E               CALL   coldInit   
12F6   CD A2 4B               CALL   execStr   
12F9   31 00                  DB   "1",0   
12FB   E1                     POP   HL   
12FC   E5                     PUSH   HL   
12FD   11 01 00               LD   DE,1   
1300   B7                     OR   A   
1301   ED 52                  SBC   HL,DE   
1303   7D                     LD   A,L   
1304   B4                     OR   H   
1305   CA 56 13               JP   Z,expectM_3048S51   
1308   CD AB 0E               CALL   printStr   
130B   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
1313   CD AB 0E               CALL   printStr   
1316   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1325   21 01 00               LD   hl,1   
1328   E5                     PUSH   hl   
1329   E5                     PUSH   hl   
132A   CD B2 0F               CALL   run   
132D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1334   CD AB 0E               CALL   printStr   
1337   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1344   E1                     POP   hl   
1345   E5                     PUSH   hl   
1346   E5                     PUSH   hl   
1347   CD B2 0F               CALL   run   
134A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1355   76                     HALT      
1356                EXPECTM_3048S51:      
1356   E1                     POP   HL   
1357                          ;*Macro unroll:  test "2", 2
1357   31 00 4D               LD   SP,STACK   
135A   CD DF 0E               CALL   coldInit   
135D   CD A2 4B               CALL   execStr   
1360   32 00                  DB   "2",0   
1362   E1                     POP   HL   
1363   E5                     PUSH   HL   
1364   11 02 00               LD   DE,2   
1367   B7                     OR   A   
1368   ED 52                  SBC   HL,DE   
136A   7D                     LD   A,L   
136B   B4                     OR   H   
136C   CA BD 13               JP   Z,expectM_3049S52   
136F   CD AB 0E               CALL   printStr   
1372   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
137A   CD AB 0E               CALL   printStr   
137D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
138C   21 02 00               LD   hl,2   
138F   E5                     PUSH   hl   
1390   E5                     PUSH   hl   
1391   CD B2 0F               CALL   run   
1394   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
139B   CD AB 0E               CALL   printStr   
139E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13AB   E1                     POP   hl   
13AC   E5                     PUSH   hl   
13AD   E5                     PUSH   hl   
13AE   CD B2 0F               CALL   run   
13B1   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
13BC   76                     HALT      
13BD                EXPECTM_3049S52:      
13BD   E1                     POP   HL   
13BE                          ;*Macro unroll:  test "1", 1
13BE   31 00 4D               LD   SP,STACK   
13C1   CD DF 0E               CALL   coldInit   
13C4   CD A2 4B               CALL   execStr   
13C7   31 00                  DB   "1",0   
13C9   E1                     POP   HL   
13CA   E5                     PUSH   HL   
13CB   11 01 00               LD   DE,1   
13CE   B7                     OR   A   
13CF   ED 52                  SBC   HL,DE   
13D1   7D                     LD   A,L   
13D2   B4                     OR   H   
13D3   CA 24 14               JP   Z,expectM_3050S53   
13D6   CD AB 0E               CALL   printStr   
13D9   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
13E1   CD AB 0E               CALL   printStr   
13E4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13F3   21 01 00               LD   hl,1   
13F6   E5                     PUSH   hl   
13F7   E5                     PUSH   hl   
13F8   CD B2 0F               CALL   run   
13FB   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1402   CD AB 0E               CALL   printStr   
1405   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1412   E1                     POP   hl   
1413   E5                     PUSH   hl   
1414   E5                     PUSH   hl   
1415   CD B2 0F               CALL   run   
1418   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1423   76                     HALT      
1424                EXPECTM_3050S53:      
1424   E1                     POP   HL   
1425                          ;*Macro unroll:  test "0", 0
1425   31 00 4D               LD   SP,STACK   
1428   CD DF 0E               CALL   coldInit   
142B   CD A2 4B               CALL   execStr   
142E   30 00                  DB   "0",0   
1430   E1                     POP   HL   
1431   E5                     PUSH   HL   
1432   11 00 00               LD   DE,0   
1435   B7                     OR   A   
1436   ED 52                  SBC   HL,DE   
1438   7D                     LD   A,L   
1439   B4                     OR   H   
143A   CA 8B 14               JP   Z,expectM_3051S54   
143D   CD AB 0E               CALL   printStr   
1440   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
1448   CD AB 0E               CALL   printStr   
144B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
145A   21 00 00               LD   hl,0   
145D   E5                     PUSH   hl   
145E   E5                     PUSH   hl   
145F   CD B2 0F               CALL   run   
1462   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1469   CD AB 0E               CALL   printStr   
146C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1479   E1                     POP   hl   
147A   E5                     PUSH   hl   
147B   E5                     PUSH   hl   
147C   CD B2 0F               CALL   run   
147F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
148A   76                     HALT      
148B                EXPECTM_3051S54:      
148B   E1                     POP   HL   
148C                          ;*Macro unroll:  test "10", 10
148C   31 00 4D               LD   SP,STACK   
148F   CD DF 0E               CALL   coldInit   
1492   CD A2 4B               CALL   execStr   
1495   31 30 00               DB   "10",0   
1498   E1                     POP   HL   
1499   E5                     PUSH   HL   
149A   11 0A 00               LD   DE,10   
149D   B7                     OR   A   
149E   ED 52                  SBC   HL,DE   
14A0   7D                     LD   A,L   
14A1   B4                     OR   H   
14A2   CA F4 14               JP   Z,expectM_3052S55   
14A5   CD AB 0E               CALL   printStr   
14A8   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
14B1   CD AB 0E               CALL   printStr   
14B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14C3   21 0A 00               LD   hl,10   
14C6   E5                     PUSH   hl   
14C7   E5                     PUSH   hl   
14C8   CD B2 0F               CALL   run   
14CB   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
14D2   CD AB 0E               CALL   printStr   
14D5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14E2   E1                     POP   hl   
14E3   E5                     PUSH   hl   
14E4   E5                     PUSH   hl   
14E5   CD B2 0F               CALL   run   
14E8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
14F3   76                     HALT      
14F4                EXPECTM_3052S55:      
14F4   E1                     POP   HL   
14F5                          ;*Macro unroll:  test "123", 123
14F5   31 00 4D               LD   SP,STACK   
14F8   CD DF 0E               CALL   coldInit   
14FB   CD A2 4B               CALL   execStr   
14FE   31 32 33 00            DB   "123",0   
1502   E1                     POP   HL   
1503   E5                     PUSH   HL   
1504   11 7B 00               LD   DE,123   
1507   B7                     OR   A   
1508   ED 52                  SBC   HL,DE   
150A   7D                     LD   A,L   
150B   B4                     OR   H   
150C   CA 5F 15               JP   Z,expectM_3053S56   
150F   CD AB 0E               CALL   printStr   
1512   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
151C   CD AB 0E               CALL   printStr   
151F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
152E   21 7B 00               LD   hl,123   
1531   E5                     PUSH   hl   
1532   E5                     PUSH   hl   
1533   CD B2 0F               CALL   run   
1536   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
153D   CD AB 0E               CALL   printStr   
1540   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
154D   E1                     POP   hl   
154E   E5                     PUSH   hl   
154F   E5                     PUSH   hl   
1550   CD B2 0F               CALL   run   
1553   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
155E   76                     HALT      
155F                EXPECTM_3053S56:      
155F   E1                     POP   HL   
1560                          ;*Macro unroll:  test "-1",-1
1560   31 00 4D               LD   SP,STACK   
1563   CD DF 0E               CALL   coldInit   
1566   CD A2 4B               CALL   execStr   
1569   2D 31 00               DB   "-1",0   
156C   E1                     POP   HL   
156D   E5                     PUSH   HL   
156E   11 FF FF               LD   DE,-1   
1571   B7                     OR   A   
1572   ED 52                  SBC   HL,DE   
1574   7D                     LD   A,L   
1575   B4                     OR   H   
1576   CA C8 15               JP   Z,expectM_3054S57   
1579   CD AB 0E               CALL   printStr   
157C   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1585   CD AB 0E               CALL   printStr   
1588   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1597   21 FF FF               LD   hl,-1   
159A   E5                     PUSH   hl   
159B   E5                     PUSH   hl   
159C   CD B2 0F               CALL   run   
159F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
15A6   CD AB 0E               CALL   printStr   
15A9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15B6   E1                     POP   hl   
15B7   E5                     PUSH   hl   
15B8   E5                     PUSH   hl   
15B9   CD B2 0F               CALL   run   
15BC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
15C7   76                     HALT      
15C8                EXPECTM_3054S57:      
15C8   E1                     POP   HL   
15C9                          ;*Macro unroll:  test "_a", $61
15C9   31 00 4D               LD   SP,STACK   
15CC   CD DF 0E               CALL   coldInit   
15CF   CD A2 4B               CALL   execStr   
15D2   5F 61 00               DB   "_a",0   
15D5   E1                     POP   HL   
15D6   E5                     PUSH   HL   
15D7   11 61 00               LD   DE,$61   
15DA   B7                     OR   A   
15DB   ED 52                  SBC   HL,DE   
15DD   7D                     LD   A,L   
15DE   B4                     OR   H   
15DF   CA 31 16               JP   Z,expectM_3055S58   
15E2   CD AB 0E               CALL   printStr   
15E5   43 6F 64 65 3A 20 5F 61 00 .CSTR   "Code: ","_a"   
15EE   CD AB 0E               CALL   printStr   
15F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1600   21 61 00               LD   hl,$61   
1603   E5                     PUSH   hl   
1604   E5                     PUSH   hl   
1605   CD B2 0F               CALL   run   
1608   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
160F   CD AB 0E               CALL   printStr   
1612   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
161F   E1                     POP   hl   
1620   E5                     PUSH   hl   
1621   E5                     PUSH   hl   
1622   CD B2 0F               CALL   run   
1625   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1630   76                     HALT      
1631                EXPECTM_3055S58:      
1631   E1                     POP   HL   
1632                          ;*Macro unroll:  test "__", $5F
1632   31 00 4D               LD   SP,STACK   
1635   CD DF 0E               CALL   coldInit   
1638   CD A2 4B               CALL   execStr   
163B   5F 5F 00               DB   "__",0   
163E   E1                     POP   HL   
163F   E5                     PUSH   HL   
1640   11 5F 00               LD   DE,$5F   
1643   B7                     OR   A   
1644   ED 52                  SBC   HL,DE   
1646   7D                     LD   A,L   
1647   B4                     OR   H   
1648   CA 9A 16               JP   Z,expectM_3056S59   
164B   CD AB 0E               CALL   printStr   
164E   43 6F 64 65 3A 20 5F 5F 00 .CSTR   "Code: ","__"   
1657   CD AB 0E               CALL   printStr   
165A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1669   21 5F 00               LD   hl,$5F   
166C   E5                     PUSH   hl   
166D   E5                     PUSH   hl   
166E   CD B2 0F               CALL   run   
1671   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1678   CD AB 0E               CALL   printStr   
167B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1688   E1                     POP   hl   
1689   E5                     PUSH   hl   
168A   E5                     PUSH   hl   
168B   CD B2 0F               CALL   run   
168E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1699   76                     HALT      
169A                EXPECTM_3056S59:      
169A   E1                     POP   HL   
169B                          ;*Macro unroll:  test "$10", $10
169B   31 00 4D               LD   SP,STACK   
169E   CD DF 0E               CALL   coldInit   
16A1   CD A2 4B               CALL   execStr   
16A4   24 31 30 00            DB   "$10",0   
16A8   E1                     POP   HL   
16A9   E5                     PUSH   HL   
16AA   11 10 00               LD   DE,$10   
16AD   B7                     OR   A   
16AE   ED 52                  SBC   HL,DE   
16B0   7D                     LD   A,L   
16B1   B4                     OR   H   
16B2   CA 05 17               JP   Z,expectM_3057S60   
16B5   CD AB 0E               CALL   printStr   
16B8   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
16C2   CD AB 0E               CALL   printStr   
16C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16D4   21 10 00               LD   hl,$10   
16D7   E5                     PUSH   hl   
16D8   E5                     PUSH   hl   
16D9   CD B2 0F               CALL   run   
16DC   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
16E3   CD AB 0E               CALL   printStr   
16E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16F3   E1                     POP   hl   
16F4   E5                     PUSH   hl   
16F5   E5                     PUSH   hl   
16F6   CD B2 0F               CALL   run   
16F9   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1704   76                     HALT      
1705                EXPECTM_3057S60:      
1705   E1                     POP   HL   
1706                          ;*Macro unroll:  test "$FF", $FF
1706   31 00 4D               LD   SP,STACK   
1709   CD DF 0E               CALL   coldInit   
170C   CD A2 4B               CALL   execStr   
170F   24 46 46 00            DB   "$FF",0   
1713   E1                     POP   HL   
1714   E5                     PUSH   HL   
1715   11 FF 00               LD   DE,$FF   
1718   B7                     OR   A   
1719   ED 52                  SBC   HL,DE   
171B   7D                     LD   A,L   
171C   B4                     OR   H   
171D   CA 70 17               JP   Z,expectM_3058S61   
1720   CD AB 0E               CALL   printStr   
1723   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
172D   CD AB 0E               CALL   printStr   
1730   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
173F   21 FF 00               LD   hl,$FF   
1742   E5                     PUSH   hl   
1743   E5                     PUSH   hl   
1744   CD B2 0F               CALL   run   
1747   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
174E   CD AB 0E               CALL   printStr   
1751   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
175E   E1                     POP   hl   
175F   E5                     PUSH   hl   
1760   E5                     PUSH   hl   
1761   CD B2 0F               CALL   run   
1764   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
176F   76                     HALT      
1770                EXPECTM_3058S61:      
1770   E1                     POP   HL   
1771                          ;*Macro unroll:  test "-1 2 +",1
1771   31 00 4D               LD   SP,STACK   
1774   CD DF 0E               CALL   coldInit   
1777   CD A2 4B               CALL   execStr   
177A   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
1781   E1                     POP   HL   
1782   E5                     PUSH   HL   
1783   11 01 00               LD   DE,1   
1786   B7                     OR   A   
1787   ED 52                  SBC   HL,DE   
1789   7D                     LD   A,L   
178A   B4                     OR   H   
178B   CA E1 17               JP   Z,expectM_3059S62   
178E   CD AB 0E               CALL   printStr   
1791   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
179E   CD AB 0E               CALL   printStr   
17A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17B0   21 01 00               LD   hl,1   
17B3   E5                     PUSH   hl   
17B4   E5                     PUSH   hl   
17B5   CD B2 0F               CALL   run   
17B8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
17BF   CD AB 0E               CALL   printStr   
17C2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17CF   E1                     POP   hl   
17D0   E5                     PUSH   hl   
17D1   E5                     PUSH   hl   
17D2   CD B2 0F               CALL   run   
17D5   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
17E0   76                     HALT      
17E1                EXPECTM_3059S62:      
17E1   E1                     POP   HL   
17E2                          ;*Macro unroll:  test "-1 1 +",0
17E2   31 00 4D               LD   SP,STACK   
17E5   CD DF 0E               CALL   coldInit   
17E8   CD A2 4B               CALL   execStr   
17EB   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
17F2   E1                     POP   HL   
17F3   E5                     PUSH   HL   
17F4   11 00 00               LD   DE,0   
17F7   B7                     OR   A   
17F8   ED 52                  SBC   HL,DE   
17FA   7D                     LD   A,L   
17FB   B4                     OR   H   
17FC   CA 52 18               JP   Z,expectM_3060S63   
17FF   CD AB 0E               CALL   printStr   
1802   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
180F   CD AB 0E               CALL   printStr   
1812   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1821   21 00 00               LD   hl,0   
1824   E5                     PUSH   hl   
1825   E5                     PUSH   hl   
1826   CD B2 0F               CALL   run   
1829   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1830   CD AB 0E               CALL   printStr   
1833   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1840   E1                     POP   hl   
1841   E5                     PUSH   hl   
1842   E5                     PUSH   hl   
1843   CD B2 0F               CALL   run   
1846   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1851   76                     HALT      
1852                EXPECTM_3060S63:      
1852   E1                     POP   HL   
1853                          ;*Macro unroll:  test "1 2 +", 3
1853   31 00 4D               LD   SP,STACK   
1856   CD DF 0E               CALL   coldInit   
1859   CD A2 4B               CALL   execStr   
185C   31 20 32 20 2B 00      DB   "1 2 +",0   
1862   E1                     POP   HL   
1863   E5                     PUSH   HL   
1864   11 03 00               LD   DE,3   
1867   B7                     OR   A   
1868   ED 52                  SBC   HL,DE   
186A   7D                     LD   A,L   
186B   B4                     OR   H   
186C   CA C1 18               JP   Z,expectM_3061S64   
186F   CD AB 0E               CALL   printStr   
1872   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
187E   CD AB 0E               CALL   printStr   
1881   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1890   21 03 00               LD   hl,3   
1893   E5                     PUSH   hl   
1894   E5                     PUSH   hl   
1895   CD B2 0F               CALL   run   
1898   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
189F   CD AB 0E               CALL   printStr   
18A2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18AF   E1                     POP   hl   
18B0   E5                     PUSH   hl   
18B1   E5                     PUSH   hl   
18B2   CD B2 0F               CALL   run   
18B5   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
18C0   76                     HALT      
18C1                EXPECTM_3061S64:      
18C1   E1                     POP   HL   
18C2                          ;*Macro unroll:  test "4 1 2 +", 3
18C2   31 00 4D               LD   SP,STACK   
18C5   CD DF 0E               CALL   coldInit   
18C8   CD A2 4B               CALL   execStr   
18CB   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
18D3   E1                     POP   HL   
18D4   E5                     PUSH   HL   
18D5   11 03 00               LD   DE,3   
18D8   B7                     OR   A   
18D9   ED 52                  SBC   HL,DE   
18DB   7D                     LD   A,L   
18DC   B4                     OR   H   
18DD   CA 34 19               JP   Z,expectM_3062S65   
18E0   CD AB 0E               CALL   printStr   
18E3   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
18F1   CD AB 0E               CALL   printStr   
18F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1903   21 03 00               LD   hl,3   
1906   E5                     PUSH   hl   
1907   E5                     PUSH   hl   
1908   CD B2 0F               CALL   run   
190B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1912   CD AB 0E               CALL   printStr   
1915   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1922   E1                     POP   hl   
1923   E5                     PUSH   hl   
1924   E5                     PUSH   hl   
1925   CD B2 0F               CALL   run   
1928   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1933   76                     HALT      
1934                EXPECTM_3062S65:      
1934   E1                     POP   HL   
1935                          ;*Macro unroll:  test "123 456 +", 123+456
1935   31 00 4D               LD   SP,STACK   
1938   CD DF 0E               CALL   coldInit   
193B   CD A2 4B               CALL   execStr   
193E   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1948   E1                     POP   HL   
1949   E5                     PUSH   HL   
194A   11 43 02               LD   DE,123+456   
194D   B7                     OR   A   
194E   ED 52                  SBC   HL,DE   
1950   7D                     LD   A,L   
1951   B4                     OR   H   
1952   CA AB 19               JP   Z,expectM_3063S66   
1955   CD AB 0E               CALL   printStr   
1958   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1968   CD AB 0E               CALL   printStr   
196B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
197A   21 43 02               LD   hl,123+456   
197D   E5                     PUSH   hl   
197E   E5                     PUSH   hl   
197F   CD B2 0F               CALL   run   
1982   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1989   CD AB 0E               CALL   printStr   
198C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1999   E1                     POP   hl   
199A   E5                     PUSH   hl   
199B   E5                     PUSH   hl   
199C   CD B2 0F               CALL   run   
199F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
19AA   76                     HALT      
19AB                EXPECTM_3063S66:      
19AB   E1                     POP   HL   
19AC                          ;*Macro unroll:  test "64 128 +", 64+128
19AC   31 00 4D               LD   SP,STACK   
19AF   CD DF 0E               CALL   coldInit   
19B2   CD A2 4B               CALL   execStr   
19B5   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
19BE   E1                     POP   HL   
19BF   E5                     PUSH   HL   
19C0   11 C0 00               LD   DE,64+128   
19C3   B7                     OR   A   
19C4   ED 52                  SBC   HL,DE   
19C6   7D                     LD   A,L   
19C7   B4                     OR   H   
19C8   CA 20 1A               JP   Z,expectM_3064S67   
19CB   CD AB 0E               CALL   printStr   
19CE   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
19DD   CD AB 0E               CALL   printStr   
19E0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19EF   21 C0 00               LD   hl,64+128   
19F2   E5                     PUSH   hl   
19F3   E5                     PUSH   hl   
19F4   CD B2 0F               CALL   run   
19F7   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
19FE   CD AB 0E               CALL   printStr   
1A01   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A0E   E1                     POP   hl   
1A0F   E5                     PUSH   hl   
1A10   E5                     PUSH   hl   
1A11   CD B2 0F               CALL   run   
1A14   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1A1F   76                     HALT      
1A20                EXPECTM_3064S67:      
1A20   E1                     POP   HL   
1A21                          ;*Macro unroll:  test "1 2 +", 3
1A21   31 00 4D               LD   SP,STACK   
1A24   CD DF 0E               CALL   coldInit   
1A27   CD A2 4B               CALL   execStr   
1A2A   31 20 32 20 2B 00      DB   "1 2 +",0   
1A30   E1                     POP   HL   
1A31   E5                     PUSH   HL   
1A32   11 03 00               LD   DE,3   
1A35   B7                     OR   A   
1A36   ED 52                  SBC   HL,DE   
1A38   7D                     LD   A,L   
1A39   B4                     OR   H   
1A3A   CA 8F 1A               JP   Z,expectM_3065S68   
1A3D   CD AB 0E               CALL   printStr   
1A40   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1A4C   CD AB 0E               CALL   printStr   
1A4F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A5E   21 03 00               LD   hl,3   
1A61   E5                     PUSH   hl   
1A62   E5                     PUSH   hl   
1A63   CD B2 0F               CALL   run   
1A66   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1A6D   CD AB 0E               CALL   printStr   
1A70   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A7D   E1                     POP   hl   
1A7E   E5                     PUSH   hl   
1A7F   E5                     PUSH   hl   
1A80   CD B2 0F               CALL   run   
1A83   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1A8E   76                     HALT      
1A8F                EXPECTM_3065S68:      
1A8F   E1                     POP   HL   
1A90                          ;*Macro unroll:  test "1a= a++ a",2
1A90   31 00 4D               LD   SP,STACK   
1A93   CD DF 0E               CALL   coldInit   
1A96   CD A2 4B               CALL   execStr   
1A99   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1AA3   E1                     POP   HL   
1AA4   E5                     PUSH   HL   
1AA5   11 02 00               LD   DE,2   
1AA8   B7                     OR   A   
1AA9   ED 52                  SBC   HL,DE   
1AAB   7D                     LD   A,L   
1AAC   B4                     OR   H   
1AAD   CA 06 1B               JP   Z,expectM_3066S69   
1AB0   CD AB 0E               CALL   printStr   
1AB3   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1AC3   CD AB 0E               CALL   printStr   
1AC6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AD5   21 02 00               LD   hl,2   
1AD8   E5                     PUSH   hl   
1AD9   E5                     PUSH   hl   
1ADA   CD B2 0F               CALL   run   
1ADD   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1AE4   CD AB 0E               CALL   printStr   
1AE7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AF4   E1                     POP   hl   
1AF5   E5                     PUSH   hl   
1AF6   E5                     PUSH   hl   
1AF7   CD B2 0F               CALL   run   
1AFA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1B05   76                     HALT      
1B06                EXPECTM_3066S69:      
1B06   E1                     POP   HL   
1B07                          ;*Macro unroll:  test "-1 -1 -",0
1B07   31 00 4D               LD   SP,STACK   
1B0A   CD DF 0E               CALL   coldInit   
1B0D   CD A2 4B               CALL   execStr   
1B10   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1B18   E1                     POP   HL   
1B19   E5                     PUSH   HL   
1B1A   11 00 00               LD   DE,0   
1B1D   B7                     OR   A   
1B1E   ED 52                  SBC   HL,DE   
1B20   7D                     LD   A,L   
1B21   B4                     OR   H   
1B22   CA 79 1B               JP   Z,expectM_3067S70   
1B25   CD AB 0E               CALL   printStr   
1B28   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1B36   CD AB 0E               CALL   printStr   
1B39   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B48   21 00 00               LD   hl,0   
1B4B   E5                     PUSH   hl   
1B4C   E5                     PUSH   hl   
1B4D   CD B2 0F               CALL   run   
1B50   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1B57   CD AB 0E               CALL   printStr   
1B5A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B67   E1                     POP   hl   
1B68   E5                     PUSH   hl   
1B69   E5                     PUSH   hl   
1B6A   CD B2 0F               CALL   run   
1B6D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1B78   76                     HALT      
1B79                EXPECTM_3067S70:      
1B79   E1                     POP   HL   
1B7A                          ;*Macro unroll:  test "5 3 -", 2
1B7A   31 00 4D               LD   SP,STACK   
1B7D   CD DF 0E               CALL   coldInit   
1B80   CD A2 4B               CALL   execStr   
1B83   35 20 33 20 2D 00      DB   "5 3 -",0   
1B89   E1                     POP   HL   
1B8A   E5                     PUSH   HL   
1B8B   11 02 00               LD   DE,2   
1B8E   B7                     OR   A   
1B8F   ED 52                  SBC   HL,DE   
1B91   7D                     LD   A,L   
1B92   B4                     OR   H   
1B93   CA E8 1B               JP   Z,expectM_3068S71   
1B96   CD AB 0E               CALL   printStr   
1B99   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1BA5   CD AB 0E               CALL   printStr   
1BA8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BB7   21 02 00               LD   hl,2   
1BBA   E5                     PUSH   hl   
1BBB   E5                     PUSH   hl   
1BBC   CD B2 0F               CALL   run   
1BBF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1BC6   CD AB 0E               CALL   printStr   
1BC9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BD6   E1                     POP   hl   
1BD7   E5                     PUSH   hl   
1BD8   E5                     PUSH   hl   
1BD9   CD B2 0F               CALL   run   
1BDC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1BE7   76                     HALT      
1BE8                EXPECTM_3068S71:      
1BE8   E1                     POP   HL   
1BE9                          ;*Macro unroll:  test "2 1 -",1
1BE9   31 00 4D               LD   SP,STACK   
1BEC   CD DF 0E               CALL   coldInit   
1BEF   CD A2 4B               CALL   execStr   
1BF2   32 20 31 20 2D 00      DB   "2 1 -",0   
1BF8   E1                     POP   HL   
1BF9   E5                     PUSH   HL   
1BFA   11 01 00               LD   DE,1   
1BFD   B7                     OR   A   
1BFE   ED 52                  SBC   HL,DE   
1C00   7D                     LD   A,L   
1C01   B4                     OR   H   
1C02   CA 57 1C               JP   Z,expectM_3069S72   
1C05   CD AB 0E               CALL   printStr   
1C08   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1C14   CD AB 0E               CALL   printStr   
1C17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C26   21 01 00               LD   hl,1   
1C29   E5                     PUSH   hl   
1C2A   E5                     PUSH   hl   
1C2B   CD B2 0F               CALL   run   
1C2E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1C35   CD AB 0E               CALL   printStr   
1C38   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C45   E1                     POP   hl   
1C46   E5                     PUSH   hl   
1C47   E5                     PUSH   hl   
1C48   CD B2 0F               CALL   run   
1C4B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1C56   76                     HALT      
1C57                EXPECTM_3069S72:      
1C57   E1                     POP   HL   
1C58                          ;*Macro unroll:  test "3a= a-- a",2
1C58   31 00 4D               LD   SP,STACK   
1C5B   CD DF 0E               CALL   coldInit   
1C5E   CD A2 4B               CALL   execStr   
1C61   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1C6B   E1                     POP   HL   
1C6C   E5                     PUSH   HL   
1C6D   11 02 00               LD   DE,2   
1C70   B7                     OR   A   
1C71   ED 52                  SBC   HL,DE   
1C73   7D                     LD   A,L   
1C74   B4                     OR   H   
1C75   CA CE 1C               JP   Z,expectM_3070S73   
1C78   CD AB 0E               CALL   printStr   
1C7B   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1C8B   CD AB 0E               CALL   printStr   
1C8E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C9D   21 02 00               LD   hl,2   
1CA0   E5                     PUSH   hl   
1CA1   E5                     PUSH   hl   
1CA2   CD B2 0F               CALL   run   
1CA5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1CAC   CD AB 0E               CALL   printStr   
1CAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CBC   E1                     POP   hl   
1CBD   E5                     PUSH   hl   
1CBE   E5                     PUSH   hl   
1CBF   CD B2 0F               CALL   run   
1CC2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1CCD   76                     HALT      
1CCE                EXPECTM_3070S73:      
1CCE   E1                     POP   HL   
1CCF                          ;*Macro unroll:  test "3 5 &", 1
1CCF   31 00 4D               LD   SP,STACK   
1CD2   CD DF 0E               CALL   coldInit   
1CD5   CD A2 4B               CALL   execStr   
1CD8   33 20 35 20 26 00      DB   "3 5 &",0   
1CDE   E1                     POP   HL   
1CDF   E5                     PUSH   HL   
1CE0   11 01 00               LD   DE,1   
1CE3   B7                     OR   A   
1CE4   ED 52                  SBC   HL,DE   
1CE6   7D                     LD   A,L   
1CE7   B4                     OR   H   
1CE8   CA 3D 1D               JP   Z,expectM_3071S74   
1CEB   CD AB 0E               CALL   printStr   
1CEE   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1CFA   CD AB 0E               CALL   printStr   
1CFD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D0C   21 01 00               LD   hl,1   
1D0F   E5                     PUSH   hl   
1D10   E5                     PUSH   hl   
1D11   CD B2 0F               CALL   run   
1D14   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1D1B   CD AB 0E               CALL   printStr   
1D1E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D2B   E1                     POP   hl   
1D2C   E5                     PUSH   hl   
1D2D   E5                     PUSH   hl   
1D2E   CD B2 0F               CALL   run   
1D31   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1D3C   76                     HALT      
1D3D                EXPECTM_3071S74:      
1D3D   E1                     POP   HL   
1D3E                          ;*Macro unroll:  test "3 5 |", 7
1D3E   31 00 4D               LD   SP,STACK   
1D41   CD DF 0E               CALL   coldInit   
1D44   CD A2 4B               CALL   execStr   
1D47   33 20 35 20 7C 00      DB   "3 5 |",0   
1D4D   E1                     POP   HL   
1D4E   E5                     PUSH   HL   
1D4F   11 07 00               LD   DE,7   
1D52   B7                     OR   A   
1D53   ED 52                  SBC   HL,DE   
1D55   7D                     LD   A,L   
1D56   B4                     OR   H   
1D57   CA AC 1D               JP   Z,expectM_3072S75   
1D5A   CD AB 0E               CALL   printStr   
1D5D   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1D69   CD AB 0E               CALL   printStr   
1D6C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D7B   21 07 00               LD   hl,7   
1D7E   E5                     PUSH   hl   
1D7F   E5                     PUSH   hl   
1D80   CD B2 0F               CALL   run   
1D83   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1D8A   CD AB 0E               CALL   printStr   
1D8D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D9A   E1                     POP   hl   
1D9B   E5                     PUSH   hl   
1D9C   E5                     PUSH   hl   
1D9D   CD B2 0F               CALL   run   
1DA0   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1DAB   76                     HALT      
1DAC                EXPECTM_3072S75:      
1DAC   E1                     POP   HL   
1DAD                          ;*Macro unroll:  test "3 5 /x", 6
1DAD   31 00 4D               LD   SP,STACK   
1DB0   CD DF 0E               CALL   coldInit   
1DB3   CD A2 4B               CALL   execStr   
1DB6   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1DBD   E1                     POP   HL   
1DBE   E5                     PUSH   HL   
1DBF   11 06 00               LD   DE,6   
1DC2   B7                     OR   A   
1DC3   ED 52                  SBC   HL,DE   
1DC5   7D                     LD   A,L   
1DC6   B4                     OR   H   
1DC7   CA 1D 1E               JP   Z,expectM_3073S76   
1DCA   CD AB 0E               CALL   printStr   
1DCD   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1DDA   CD AB 0E               CALL   printStr   
1DDD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DEC   21 06 00               LD   hl,6   
1DEF   E5                     PUSH   hl   
1DF0   E5                     PUSH   hl   
1DF1   CD B2 0F               CALL   run   
1DF4   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1DFB   CD AB 0E               CALL   printStr   
1DFE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E0B   E1                     POP   hl   
1E0C   E5                     PUSH   hl   
1E0D   E5                     PUSH   hl   
1E0E   CD B2 0F               CALL   run   
1E11   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1E1C   76                     HALT      
1E1D                EXPECTM_3073S76:      
1E1D   E1                     POP   HL   
1E1E                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1E1E   31 00 4D               LD   SP,STACK   
1E21   CD DF 0E               CALL   coldInit   
1E24   CD A2 4B               CALL   execStr   
1E27   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1E36   E1                     POP   HL   
1E37   E5                     PUSH   HL   
1E38   11 06 00               LD   DE,6   
1E3B   B7                     OR   A   
1E3C   ED 52                  SBC   HL,DE   
1E3E   7D                     LD   A,L   
1E3F   B4                     OR   H   
1E40   CA 9E 1E               JP   Z,expectM_3074S77   
1E43   CD AB 0E               CALL   printStr   
1E46   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1E5B   CD AB 0E               CALL   printStr   
1E5E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E6D   21 06 00               LD   hl,6   
1E70   E5                     PUSH   hl   
1E71   E5                     PUSH   hl   
1E72   CD B2 0F               CALL   run   
1E75   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1E7C   CD AB 0E               CALL   printStr   
1E7F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E8C   E1                     POP   hl   
1E8D   E5                     PUSH   hl   
1E8E   E5                     PUSH   hl   
1E8F   CD B2 0F               CALL   run   
1E92   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1E9D   76                     HALT      
1E9E                EXPECTM_3074S77:      
1E9E   E1                     POP   HL   
1E9F                          ;*Macro unroll:  test "2 3 *", 6
1E9F   31 00 4D               LD   SP,STACK   
1EA2   CD DF 0E               CALL   coldInit   
1EA5   CD A2 4B               CALL   execStr   
1EA8   32 20 33 20 2A 00      DB   "2 3 *",0   
1EAE   E1                     POP   HL   
1EAF   E5                     PUSH   HL   
1EB0   11 06 00               LD   DE,6   
1EB3   B7                     OR   A   
1EB4   ED 52                  SBC   HL,DE   
1EB6   7D                     LD   A,L   
1EB7   B4                     OR   H   
1EB8   CA 0D 1F               JP   Z,expectM_3075S78   
1EBB   CD AB 0E               CALL   printStr   
1EBE   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1ECA   CD AB 0E               CALL   printStr   
1ECD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EDC   21 06 00               LD   hl,6   
1EDF   E5                     PUSH   hl   
1EE0   E5                     PUSH   hl   
1EE1   CD B2 0F               CALL   run   
1EE4   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1EEB   CD AB 0E               CALL   printStr   
1EEE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EFB   E1                     POP   hl   
1EFC   E5                     PUSH   hl   
1EFD   E5                     PUSH   hl   
1EFE   CD B2 0F               CALL   run   
1F01   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1F0C   76                     HALT      
1F0D                EXPECTM_3075S78:      
1F0D   E1                     POP   HL   
1F0E                          ;*Macro unroll:  test "1 2 3 + *", 5
1F0E   31 00 4D               LD   SP,STACK   
1F11   CD DF 0E               CALL   coldInit   
1F14   CD A2 4B               CALL   execStr   
1F17   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1F21   E1                     POP   HL   
1F22   E5                     PUSH   HL   
1F23   11 05 00               LD   DE,5   
1F26   B7                     OR   A   
1F27   ED 52                  SBC   HL,DE   
1F29   7D                     LD   A,L   
1F2A   B4                     OR   H   
1F2B   CA 84 1F               JP   Z,expectM_3076S79   
1F2E   CD AB 0E               CALL   printStr   
1F31   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1F41   CD AB 0E               CALL   printStr   
1F44   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F53   21 05 00               LD   hl,5   
1F56   E5                     PUSH   hl   
1F57   E5                     PUSH   hl   
1F58   CD B2 0F               CALL   run   
1F5B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1F62   CD AB 0E               CALL   printStr   
1F65   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F72   E1                     POP   hl   
1F73   E5                     PUSH   hl   
1F74   E5                     PUSH   hl   
1F75   CD B2 0F               CALL   run   
1F78   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1F83   76                     HALT      
1F84                EXPECTM_3076S79:      
1F84   E1                     POP   HL   
1F85                          ;*Macro unroll:  test "7 3 /", 2
1F85   31 00 4D               LD   SP,STACK   
1F88   CD DF 0E               CALL   coldInit   
1F8B   CD A2 4B               CALL   execStr   
1F8E   37 20 33 20 2F 00      DB   "7 3 /",0   
1F94   E1                     POP   HL   
1F95   E5                     PUSH   HL   
1F96   11 02 00               LD   DE,2   
1F99   B7                     OR   A   
1F9A   ED 52                  SBC   HL,DE   
1F9C   7D                     LD   A,L   
1F9D   B4                     OR   H   
1F9E   CA F3 1F               JP   Z,expectM_3077S80   
1FA1   CD AB 0E               CALL   printStr   
1FA4   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1FB0   CD AB 0E               CALL   printStr   
1FB3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FC2   21 02 00               LD   hl,2   
1FC5   E5                     PUSH   hl   
1FC6   E5                     PUSH   hl   
1FC7   CD B2 0F               CALL   run   
1FCA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1FD1   CD AB 0E               CALL   printStr   
1FD4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FE1   E1                     POP   hl   
1FE2   E5                     PUSH   hl   
1FE3   E5                     PUSH   hl   
1FE4   CD B2 0F               CALL   run   
1FE7   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1FF2   76                     HALT      
1FF3                EXPECTM_3077S80:      
1FF3   E1                     POP   HL   
1FF4                          ;*Macro unroll:  test "100a= 1a+= a", 101
1FF4   31 00 4D               LD   SP,STACK   
1FF7   CD DF 0E               CALL   coldInit   
1FFA   CD A2 4B               CALL   execStr   
1FFD   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
200A   E1                     POP   HL   
200B   E5                     PUSH   HL   
200C   11 65 00               LD   DE,101   
200F   B7                     OR   A   
2010   ED 52                  SBC   HL,DE   
2012   7D                     LD   A,L   
2013   B4                     OR   H   
2014   CA 70 20               JP   Z,expectM_3078S81   
2017   CD AB 0E               CALL   printStr   
201A   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
202D   CD AB 0E               CALL   printStr   
2030   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
203F   21 65 00               LD   hl,101   
2042   E5                     PUSH   hl   
2043   E5                     PUSH   hl   
2044   CD B2 0F               CALL   run   
2047   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
204E   CD AB 0E               CALL   printStr   
2051   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
205E   E1                     POP   hl   
205F   E5                     PUSH   hl   
2060   E5                     PUSH   hl   
2061   CD B2 0F               CALL   run   
2064   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
206F   76                     HALT      
2070                EXPECTM_3078S81:      
2070   E1                     POP   HL   
2071                          ;*Macro unroll:  test "100a= a1-= a", 99
2071   31 00 4D               LD   SP,STACK   
2074   CD DF 0E               CALL   coldInit   
2077   CD A2 4B               CALL   execStr   
207A   31 30 30 61 3D 20 61 31 2D 3D 20 61 00 DB   "100a= a1-= a",0   
2087   E1                     POP   HL   
2088   E5                     PUSH   HL   
2089   11 63 00               LD   DE,99   
208C   B7                     OR   A   
208D   ED 52                  SBC   HL,DE   
208F   7D                     LD   A,L   
2090   B4                     OR   H   
2091   CA ED 20               JP   Z,expectM_3079S82   
2094   CD AB 0E               CALL   printStr   
2097   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 31 2D 3D 20 61 00 .CSTR   "Code: ","100a= a1-= a"   
20AA   CD AB 0E               CALL   printStr   
20AD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20BC   21 63 00               LD   hl,99   
20BF   E5                     PUSH   hl   
20C0   E5                     PUSH   hl   
20C1   CD B2 0F               CALL   run   
20C4   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
20CB   CD AB 0E               CALL   printStr   
20CE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20DB   E1                     POP   hl   
20DC   E5                     PUSH   hl   
20DD   E5                     PUSH   hl   
20DE   CD B2 0F               CALL   run   
20E1   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
20EC   76                     HALT      
20ED                EXPECTM_3079S82:      
20ED   E1                     POP   HL   
20EE                          ;*Macro unroll:  test "100a= a2*= a", 200
20EE   31 00 4D               LD   SP,STACK   
20F1   CD DF 0E               CALL   coldInit   
20F4   CD A2 4B               CALL   execStr   
20F7   31 30 30 61 3D 20 61 32 2A 3D 20 61 00 DB   "100a= a2*= a",0   
2104   E1                     POP   HL   
2105   E5                     PUSH   HL   
2106   11 C8 00               LD   DE,200   
2109   B7                     OR   A   
210A   ED 52                  SBC   HL,DE   
210C   7D                     LD   A,L   
210D   B4                     OR   H   
210E   CA 6A 21               JP   Z,expectM_3080S83   
2111   CD AB 0E               CALL   printStr   
2114   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2A 3D 20 61 00 .CSTR   "Code: ","100a= a2*= a"   
2127   CD AB 0E               CALL   printStr   
212A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2139   21 C8 00               LD   hl,200   
213C   E5                     PUSH   hl   
213D   E5                     PUSH   hl   
213E   CD B2 0F               CALL   run   
2141   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2148   CD AB 0E               CALL   printStr   
214B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2158   E1                     POP   hl   
2159   E5                     PUSH   hl   
215A   E5                     PUSH   hl   
215B   CD B2 0F               CALL   run   
215E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2169   76                     HALT      
216A                EXPECTM_3080S83:      
216A   E1                     POP   HL   
216B                          ;*Macro unroll:  test "100a= a2/= a", 50
216B   31 00 4D               LD   SP,STACK   
216E   CD DF 0E               CALL   coldInit   
2171   CD A2 4B               CALL   execStr   
2174   31 30 30 61 3D 20 61 32 2F 3D 20 61 00 DB   "100a= a2/= a",0   
2181   E1                     POP   HL   
2182   E5                     PUSH   HL   
2183   11 32 00               LD   DE,50   
2186   B7                     OR   A   
2187   ED 52                  SBC   HL,DE   
2189   7D                     LD   A,L   
218A   B4                     OR   H   
218B   CA E7 21               JP   Z,expectM_3081S84   
218E   CD AB 0E               CALL   printStr   
2191   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2F 3D 20 61 00 .CSTR   "Code: ","100a= a2/= a"   
21A4   CD AB 0E               CALL   printStr   
21A7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21B6   21 32 00               LD   hl,50   
21B9   E5                     PUSH   hl   
21BA   E5                     PUSH   hl   
21BB   CD B2 0F               CALL   run   
21BE   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
21C5   CD AB 0E               CALL   printStr   
21C8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21D5   E1                     POP   hl   
21D6   E5                     PUSH   hl   
21D7   E5                     PUSH   hl   
21D8   CD B2 0F               CALL   run   
21DB   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
21E6   76                     HALT      
21E7                EXPECTM_3081S84:      
21E7   E1                     POP   HL   
21E8                          ;*Macro unroll:  test "$55a= $AAa&= a",0
21E8   31 00 4D               LD   SP,STACK   
21EB   CD DF 0E               CALL   coldInit   
21EE   CD A2 4B               CALL   execStr   
21F1   24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 DB   "$55a= $AAa&= a",0   
2200   E1                     POP   HL   
2201   E5                     PUSH   HL   
2202   11 00 00               LD   DE,0   
2205   B7                     OR   A   
2206   ED 52                  SBC   HL,DE   
2208   7D                     LD   A,L   
2209   B4                     OR   H   
220A   CA 68 22               JP   Z,expectM_3082S85   
220D   CD AB 0E               CALL   printStr   
2210   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa&= a"   
2225   CD AB 0E               CALL   printStr   
2228   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2237   21 00 00               LD   hl,0   
223A   E5                     PUSH   hl   
223B   E5                     PUSH   hl   
223C   CD B2 0F               CALL   run   
223F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2246   CD AB 0E               CALL   printStr   
2249   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2256   E1                     POP   hl   
2257   E5                     PUSH   hl   
2258   E5                     PUSH   hl   
2259   CD B2 0F               CALL   run   
225C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2267   76                     HALT      
2268                EXPECTM_3082S85:      
2268   E1                     POP   HL   
2269                          ;*Macro unroll:  test "$55a= $AAa|= a",$FF
2269   31 00 4D               LD   SP,STACK   
226C   CD DF 0E               CALL   coldInit   
226F   CD A2 4B               CALL   execStr   
2272   24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 DB   "$55a= $AAa|= a",0   
2281   E1                     POP   HL   
2282   E5                     PUSH   HL   
2283   11 FF 00               LD   DE,$FF   
2286   B7                     OR   A   
2287   ED 52                  SBC   HL,DE   
2289   7D                     LD   A,L   
228A   B4                     OR   H   
228B   CA E9 22               JP   Z,expectM_3083S86   
228E   CD AB 0E               CALL   printStr   
2291   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa|= a"   
22A6   CD AB 0E               CALL   printStr   
22A9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22B8   21 FF 00               LD   hl,$FF   
22BB   E5                     PUSH   hl   
22BC   E5                     PUSH   hl   
22BD   CD B2 0F               CALL   run   
22C0   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
22C7   CD AB 0E               CALL   printStr   
22CA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22D7   E1                     POP   hl   
22D8   E5                     PUSH   hl   
22D9   E5                     PUSH   hl   
22DA   CD B2 0F               CALL   run   
22DD   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
22E8   76                     HALT      
22E9                EXPECTM_3083S86:      
22E9   E1                     POP   HL   
22EA                          ;*Macro unroll:  test "$A5a= $AAa /x= a",$0F
22EA   31 00 4D               LD   SP,STACK   
22ED   CD DF 0E               CALL   coldInit   
22F0   CD A2 4B               CALL   execStr   
22F3   24 41 35 61 3D 20 24 41 41 61 20 2F 78 3D 20 61 00 DB   "$A5a= $AAa /x= a",0   
2304   E1                     POP   HL   
2305   E5                     PUSH   HL   
2306   11 0F 00               LD   DE,$0F   
2309   B7                     OR   A   
230A   ED 52                  SBC   HL,DE   
230C   7D                     LD   A,L   
230D   B4                     OR   H   
230E   CA 6E 23               JP   Z,expectM_3084S87   
2311   CD AB 0E               CALL   printStr   
2314   43 6F 64 65 3A 20 24 41 35 61 3D 20 24 41 41 61 20 2F 78 3D 20 61 00 .CSTR   "Code: ","$A5a= $AAa /x= a"   
232B   CD AB 0E               CALL   printStr   
232E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
233D   21 0F 00               LD   hl,$0F   
2340   E5                     PUSH   hl   
2341   E5                     PUSH   hl   
2342   CD B2 0F               CALL   run   
2345   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
234C   CD AB 0E               CALL   printStr   
234F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
235C   E1                     POP   hl   
235D   E5                     PUSH   hl   
235E   E5                     PUSH   hl   
235F   CD B2 0F               CALL   run   
2362   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
236D   76                     HALT      
236E                EXPECTM_3084S87:      
236E   E1                     POP   HL   
236F                          ;*Macro unroll:  test "$00AA~",$FF55
236F   31 00 4D               LD   SP,STACK   
2372   CD DF 0E               CALL   coldInit   
2375   CD A2 4B               CALL   execStr   
2378   24 30 30 41 41 7E 00   DB   "$00AA~",0   
237F   E1                     POP   HL   
2380   E5                     PUSH   HL   
2381   11 55 FF               LD   DE,$FF55   
2384   B7                     OR   A   
2385   ED 52                  SBC   HL,DE   
2387   7D                     LD   A,L   
2388   B4                     OR   H   
2389   CA DF 23               JP   Z,expectM_3085S88   
238C   CD AB 0E               CALL   printStr   
238F   43 6F 64 65 3A 20 24 30 30 41 41 7E 00 .CSTR   "Code: ","$00AA~"   
239C   CD AB 0E               CALL   printStr   
239F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23AE   21 55 FF               LD   hl,$FF55   
23B1   E5                     PUSH   hl   
23B2   E5                     PUSH   hl   
23B3   CD B2 0F               CALL   run   
23B6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
23BD   CD AB 0E               CALL   printStr   
23C0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23CD   E1                     POP   hl   
23CE   E5                     PUSH   hl   
23CF   E5                     PUSH   hl   
23D0   CD B2 0F               CALL   run   
23D3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
23DE   76                     HALT      
23DF                EXPECTM_3085S88:      
23DF   E1                     POP   HL   
23E0                          ;*Macro unroll:  test "$AAAAa= a~= a",$5555
23E0   31 00 4D               LD   SP,STACK   
23E3   CD DF 0E               CALL   coldInit   
23E6   CD A2 4B               CALL   execStr   
23E9   24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 DB   "$AAAAa= a~= a",0   
23F7   E1                     POP   HL   
23F8   E5                     PUSH   HL   
23F9   11 55 55               LD   DE,$5555   
23FC   B7                     OR   A   
23FD   ED 52                  SBC   HL,DE   
23FF   7D                     LD   A,L   
2400   B4                     OR   H   
2401   CA 5E 24               JP   Z,expectM_3086S89   
2404   CD AB 0E               CALL   printStr   
2407   43 6F 64 65 3A 20 24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 .CSTR   "Code: ","$AAAAa= a~= a"   
241B   CD AB 0E               CALL   printStr   
241E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
242D   21 55 55               LD   hl,$5555   
2430   E5                     PUSH   hl   
2431   E5                     PUSH   hl   
2432   CD B2 0F               CALL   run   
2435   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
243C   CD AB 0E               CALL   printStr   
243F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
244C   E1                     POP   hl   
244D   E5                     PUSH   hl   
244E   E5                     PUSH   hl   
244F   CD B2 0F               CALL   run   
2452   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
245D   76                     HALT      
245E                EXPECTM_3086S89:      
245E   E1                     POP   HL   
245F                          ;*Macro unroll:  test "7 3 / /re", 1
245F   31 00 4D               LD   SP,STACK   
2462   CD DF 0E               CALL   coldInit   
2465   CD A2 4B               CALL   execStr   
2468   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
2472   E1                     POP   HL   
2473   E5                     PUSH   HL   
2474   11 01 00               LD   DE,1   
2477   B7                     OR   A   
2478   ED 52                  SBC   HL,DE   
247A   7D                     LD   A,L   
247B   B4                     OR   H   
247C   CA D5 24               JP   Z,expectM_3087S90   
247F   CD AB 0E               CALL   printStr   
2482   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
2492   CD AB 0E               CALL   printStr   
2495   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24A4   21 01 00               LD   hl,1   
24A7   E5                     PUSH   hl   
24A8   E5                     PUSH   hl   
24A9   CD B2 0F               CALL   run   
24AC   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
24B3   CD AB 0E               CALL   printStr   
24B6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24C3   E1                     POP   hl   
24C4   E5                     PUSH   hl   
24C5   E5                     PUSH   hl   
24C6   CD B2 0F               CALL   run   
24C9   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
24D4   76                     HALT      
24D5                EXPECTM_3087S90:      
24D5   E1                     POP   HL   
24D6                          ;*Macro unroll:  test "7 3 /", 2
24D6   31 00 4D               LD   SP,STACK   
24D9   CD DF 0E               CALL   coldInit   
24DC   CD A2 4B               CALL   execStr   
24DF   37 20 33 20 2F 00      DB   "7 3 /",0   
24E5   E1                     POP   HL   
24E6   E5                     PUSH   HL   
24E7   11 02 00               LD   DE,2   
24EA   B7                     OR   A   
24EB   ED 52                  SBC   HL,DE   
24ED   7D                     LD   A,L   
24EE   B4                     OR   H   
24EF   CA 44 25               JP   Z,expectM_3088S91   
24F2   CD AB 0E               CALL   printStr   
24F5   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
2501   CD AB 0E               CALL   printStr   
2504   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2513   21 02 00               LD   hl,2   
2516   E5                     PUSH   hl   
2517   E5                     PUSH   hl   
2518   CD B2 0F               CALL   run   
251B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2522   CD AB 0E               CALL   printStr   
2525   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2532   E1                     POP   hl   
2533   E5                     PUSH   hl   
2534   E5                     PUSH   hl   
2535   CD B2 0F               CALL   run   
2538   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2543   76                     HALT      
2544                EXPECTM_3088S91:      
2544   E1                     POP   HL   
2545                          ;*Macro unroll:  test "2 3 ==", FALSE
2545   31 00 4D               LD   SP,STACK   
2548   CD DF 0E               CALL   coldInit   
254B   CD A2 4B               CALL   execStr   
254E   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
2555   E1                     POP   HL   
2556   E5                     PUSH   HL   
2557   11 00 00               LD   DE,FALSE   
255A   B7                     OR   A   
255B   ED 52                  SBC   HL,DE   
255D   7D                     LD   A,L   
255E   B4                     OR   H   
255F   CA B5 25               JP   Z,expectM_3089S92   
2562   CD AB 0E               CALL   printStr   
2565   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2572   CD AB 0E               CALL   printStr   
2575   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2584   21 00 00               LD   hl,FALSE   
2587   E5                     PUSH   hl   
2588   E5                     PUSH   hl   
2589   CD B2 0F               CALL   run   
258C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2593   CD AB 0E               CALL   printStr   
2596   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25A3   E1                     POP   hl   
25A4   E5                     PUSH   hl   
25A5   E5                     PUSH   hl   
25A6   CD B2 0F               CALL   run   
25A9   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
25B4   76                     HALT      
25B5                EXPECTM_3089S92:      
25B5   E1                     POP   HL   
25B6                          ;*Macro unroll:  test "3 3 ==", TRUE
25B6   31 00 4D               LD   SP,STACK   
25B9   CD DF 0E               CALL   coldInit   
25BC   CD A2 4B               CALL   execStr   
25BF   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
25C6   E1                     POP   HL   
25C7   E5                     PUSH   HL   
25C8   11 FF FF               LD   DE,TRUE   
25CB   B7                     OR   A   
25CC   ED 52                  SBC   HL,DE   
25CE   7D                     LD   A,L   
25CF   B4                     OR   H   
25D0   CA 26 26               JP   Z,expectM_3090S93   
25D3   CD AB 0E               CALL   printStr   
25D6   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
25E3   CD AB 0E               CALL   printStr   
25E6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25F5   21 FF FF               LD   hl,TRUE   
25F8   E5                     PUSH   hl   
25F9   E5                     PUSH   hl   
25FA   CD B2 0F               CALL   run   
25FD   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2604   CD AB 0E               CALL   printStr   
2607   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2614   E1                     POP   hl   
2615   E5                     PUSH   hl   
2616   E5                     PUSH   hl   
2617   CD B2 0F               CALL   run   
261A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2625   76                     HALT      
2626                EXPECTM_3090S93:      
2626   E1                     POP   HL   
2627                          ;*Macro unroll:  test "1 2 <", TRUE
2627   31 00 4D               LD   SP,STACK   
262A   CD DF 0E               CALL   coldInit   
262D   CD A2 4B               CALL   execStr   
2630   31 20 32 20 3C 00      DB   "1 2 <",0   
2636   E1                     POP   HL   
2637   E5                     PUSH   HL   
2638   11 FF FF               LD   DE,TRUE   
263B   B7                     OR   A   
263C   ED 52                  SBC   HL,DE   
263E   7D                     LD   A,L   
263F   B4                     OR   H   
2640   CA 95 26               JP   Z,expectM_3091S94   
2643   CD AB 0E               CALL   printStr   
2646   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2652   CD AB 0E               CALL   printStr   
2655   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2664   21 FF FF               LD   hl,TRUE   
2667   E5                     PUSH   hl   
2668   E5                     PUSH   hl   
2669   CD B2 0F               CALL   run   
266C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2673   CD AB 0E               CALL   printStr   
2676   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2683   E1                     POP   hl   
2684   E5                     PUSH   hl   
2685   E5                     PUSH   hl   
2686   CD B2 0F               CALL   run   
2689   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2694   76                     HALT      
2695                EXPECTM_3091S94:      
2695   E1                     POP   HL   
2696                          ;*Macro unroll:  test "2 1 <", FALSE
2696   31 00 4D               LD   SP,STACK   
2699   CD DF 0E               CALL   coldInit   
269C   CD A2 4B               CALL   execStr   
269F   32 20 31 20 3C 00      DB   "2 1 <",0   
26A5   E1                     POP   HL   
26A6   E5                     PUSH   HL   
26A7   11 00 00               LD   DE,FALSE   
26AA   B7                     OR   A   
26AB   ED 52                  SBC   HL,DE   
26AD   7D                     LD   A,L   
26AE   B4                     OR   H   
26AF   CA 04 27               JP   Z,expectM_3092S95   
26B2   CD AB 0E               CALL   printStr   
26B5   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
26C1   CD AB 0E               CALL   printStr   
26C4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26D3   21 00 00               LD   hl,FALSE   
26D6   E5                     PUSH   hl   
26D7   E5                     PUSH   hl   
26D8   CD B2 0F               CALL   run   
26DB   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
26E2   CD AB 0E               CALL   printStr   
26E5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26F2   E1                     POP   hl   
26F3   E5                     PUSH   hl   
26F4   E5                     PUSH   hl   
26F5   CD B2 0F               CALL   run   
26F8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2703   76                     HALT      
2704                EXPECTM_3092S95:      
2704   E1                     POP   HL   
2705                          ;*Macro unroll:  test "2 3 <", TRUE
2705   31 00 4D               LD   SP,STACK   
2708   CD DF 0E               CALL   coldInit   
270B   CD A2 4B               CALL   execStr   
270E   32 20 33 20 3C 00      DB   "2 3 <",0   
2714   E1                     POP   HL   
2715   E5                     PUSH   HL   
2716   11 FF FF               LD   DE,TRUE   
2719   B7                     OR   A   
271A   ED 52                  SBC   HL,DE   
271C   7D                     LD   A,L   
271D   B4                     OR   H   
271E   CA 73 27               JP   Z,expectM_3093S96   
2721   CD AB 0E               CALL   printStr   
2724   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2730   CD AB 0E               CALL   printStr   
2733   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2742   21 FF FF               LD   hl,TRUE   
2745   E5                     PUSH   hl   
2746   E5                     PUSH   hl   
2747   CD B2 0F               CALL   run   
274A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2751   CD AB 0E               CALL   printStr   
2754   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2761   E1                     POP   hl   
2762   E5                     PUSH   hl   
2763   E5                     PUSH   hl   
2764   CD B2 0F               CALL   run   
2767   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2772   76                     HALT      
2773                EXPECTM_3093S96:      
2773   E1                     POP   HL   
2774                          ;*Macro unroll:  test "3 3 <", FALSE
2774   31 00 4D               LD   SP,STACK   
2777   CD DF 0E               CALL   coldInit   
277A   CD A2 4B               CALL   execStr   
277D   33 20 33 20 3C 00      DB   "3 3 <",0   
2783   E1                     POP   HL   
2784   E5                     PUSH   HL   
2785   11 00 00               LD   DE,FALSE   
2788   B7                     OR   A   
2789   ED 52                  SBC   HL,DE   
278B   7D                     LD   A,L   
278C   B4                     OR   H   
278D   CA E2 27               JP   Z,expectM_3094S97   
2790   CD AB 0E               CALL   printStr   
2793   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
279F   CD AB 0E               CALL   printStr   
27A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27B1   21 00 00               LD   hl,FALSE   
27B4   E5                     PUSH   hl   
27B5   E5                     PUSH   hl   
27B6   CD B2 0F               CALL   run   
27B9   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
27C0   CD AB 0E               CALL   printStr   
27C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27D0   E1                     POP   hl   
27D1   E5                     PUSH   hl   
27D2   E5                     PUSH   hl   
27D3   CD B2 0F               CALL   run   
27D6   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
27E1   76                     HALT      
27E2                EXPECTM_3094S97:      
27E2   E1                     POP   HL   
27E3                          ;*Macro unroll:  test "1 2 >", FALSE
27E3   31 00 4D               LD   SP,STACK   
27E6   CD DF 0E               CALL   coldInit   
27E9   CD A2 4B               CALL   execStr   
27EC   31 20 32 20 3E 00      DB   "1 2 >",0   
27F2   E1                     POP   HL   
27F3   E5                     PUSH   HL   
27F4   11 00 00               LD   DE,FALSE   
27F7   B7                     OR   A   
27F8   ED 52                  SBC   HL,DE   
27FA   7D                     LD   A,L   
27FB   B4                     OR   H   
27FC   CA 51 28               JP   Z,expectM_3095S98   
27FF   CD AB 0E               CALL   printStr   
2802   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
280E   CD AB 0E               CALL   printStr   
2811   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2820   21 00 00               LD   hl,FALSE   
2823   E5                     PUSH   hl   
2824   E5                     PUSH   hl   
2825   CD B2 0F               CALL   run   
2828   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
282F   CD AB 0E               CALL   printStr   
2832   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
283F   E1                     POP   hl   
2840   E5                     PUSH   hl   
2841   E5                     PUSH   hl   
2842   CD B2 0F               CALL   run   
2845   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2850   76                     HALT      
2851                EXPECTM_3095S98:      
2851   E1                     POP   HL   
2852                          ;*Macro unroll:  test "2 1 >", TRUE
2852   31 00 4D               LD   SP,STACK   
2855   CD DF 0E               CALL   coldInit   
2858   CD A2 4B               CALL   execStr   
285B   32 20 31 20 3E 00      DB   "2 1 >",0   
2861   E1                     POP   HL   
2862   E5                     PUSH   HL   
2863   11 FF FF               LD   DE,TRUE   
2866   B7                     OR   A   
2867   ED 52                  SBC   HL,DE   
2869   7D                     LD   A,L   
286A   B4                     OR   H   
286B   CA C0 28               JP   Z,expectM_3096S99   
286E   CD AB 0E               CALL   printStr   
2871   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
287D   CD AB 0E               CALL   printStr   
2880   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
288F   21 FF FF               LD   hl,TRUE   
2892   E5                     PUSH   hl   
2893   E5                     PUSH   hl   
2894   CD B2 0F               CALL   run   
2897   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
289E   CD AB 0E               CALL   printStr   
28A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28AE   E1                     POP   hl   
28AF   E5                     PUSH   hl   
28B0   E5                     PUSH   hl   
28B1   CD B2 0F               CALL   run   
28B4   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
28BF   76                     HALT      
28C0                EXPECTM_3096S99:      
28C0   E1                     POP   HL   
28C1                          ;*Macro unroll:  test "3 3 >", FALSE
28C1   31 00 4D               LD   SP,STACK   
28C4   CD DF 0E               CALL   coldInit   
28C7   CD A2 4B               CALL   execStr   
28CA   33 20 33 20 3E 00      DB   "3 3 >",0   
28D0   E1                     POP   HL   
28D1   E5                     PUSH   HL   
28D2   11 00 00               LD   DE,FALSE   
28D5   B7                     OR   A   
28D6   ED 52                  SBC   HL,DE   
28D8   7D                     LD   A,L   
28D9   B4                     OR   H   
28DA   CA 2F 29               JP   Z,expectM_3097S100   
28DD   CD AB 0E               CALL   printStr   
28E0   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
28EC   CD AB 0E               CALL   printStr   
28EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28FE   21 00 00               LD   hl,FALSE   
2901   E5                     PUSH   hl   
2902   E5                     PUSH   hl   
2903   CD B2 0F               CALL   run   
2906   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
290D   CD AB 0E               CALL   printStr   
2910   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
291D   E1                     POP   hl   
291E   E5                     PUSH   hl   
291F   E5                     PUSH   hl   
2920   CD B2 0F               CALL   run   
2923   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
292E   76                     HALT      
292F                EXPECTM_3097S100:      
292F   E1                     POP   HL   
2930                          ;*Macro unroll:  test "4 3 >", TRUE
2930   31 00 4D               LD   SP,STACK   
2933   CD DF 0E               CALL   coldInit   
2936   CD A2 4B               CALL   execStr   
2939   34 20 33 20 3E 00      DB   "4 3 >",0   
293F   E1                     POP   HL   
2940   E5                     PUSH   HL   
2941   11 FF FF               LD   DE,TRUE   
2944   B7                     OR   A   
2945   ED 52                  SBC   HL,DE   
2947   7D                     LD   A,L   
2948   B4                     OR   H   
2949   CA 9E 29               JP   Z,expectM_3098S101   
294C   CD AB 0E               CALL   printStr   
294F   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
295B   CD AB 0E               CALL   printStr   
295E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
296D   21 FF FF               LD   hl,TRUE   
2970   E5                     PUSH   hl   
2971   E5                     PUSH   hl   
2972   CD B2 0F               CALL   run   
2975   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
297C   CD AB 0E               CALL   printStr   
297F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
298C   E1                     POP   hl   
298D   E5                     PUSH   hl   
298E   E5                     PUSH   hl   
298F   CD B2 0F               CALL   run   
2992   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
299D   76                     HALT      
299E                EXPECTM_3098S101:      
299E   E1                     POP   HL   
299F                          ;*Macro unroll:  test "2 2 <=", TRUE
299F   31 00 4D               LD   SP,STACK   
29A2   CD DF 0E               CALL   coldInit   
29A5   CD A2 4B               CALL   execStr   
29A8   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
29AF   E1                     POP   HL   
29B0   E5                     PUSH   HL   
29B1   11 FF FF               LD   DE,TRUE   
29B4   B7                     OR   A   
29B5   ED 52                  SBC   HL,DE   
29B7   7D                     LD   A,L   
29B8   B4                     OR   H   
29B9   CA 0F 2A               JP   Z,expectM_3099S102   
29BC   CD AB 0E               CALL   printStr   
29BF   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
29CC   CD AB 0E               CALL   printStr   
29CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29DE   21 FF FF               LD   hl,TRUE   
29E1   E5                     PUSH   hl   
29E2   E5                     PUSH   hl   
29E3   CD B2 0F               CALL   run   
29E6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
29ED   CD AB 0E               CALL   printStr   
29F0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29FD   E1                     POP   hl   
29FE   E5                     PUSH   hl   
29FF   E5                     PUSH   hl   
2A00   CD B2 0F               CALL   run   
2A03   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2A0E   76                     HALT      
2A0F                EXPECTM_3099S102:      
2A0F   E1                     POP   HL   
2A10                          ;*Macro unroll:  test "2 2 >=", TRUE
2A10   31 00 4D               LD   SP,STACK   
2A13   CD DF 0E               CALL   coldInit   
2A16   CD A2 4B               CALL   execStr   
2A19   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
2A20   E1                     POP   HL   
2A21   E5                     PUSH   HL   
2A22   11 FF FF               LD   DE,TRUE   
2A25   B7                     OR   A   
2A26   ED 52                  SBC   HL,DE   
2A28   7D                     LD   A,L   
2A29   B4                     OR   H   
2A2A   CA 80 2A               JP   Z,expectM_3100S103   
2A2D   CD AB 0E               CALL   printStr   
2A30   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2A3D   CD AB 0E               CALL   printStr   
2A40   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A4F   21 FF FF               LD   hl,TRUE   
2A52   E5                     PUSH   hl   
2A53   E5                     PUSH   hl   
2A54   CD B2 0F               CALL   run   
2A57   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2A5E   CD AB 0E               CALL   printStr   
2A61   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A6E   E1                     POP   hl   
2A6F   E5                     PUSH   hl   
2A70   E5                     PUSH   hl   
2A71   CD B2 0F               CALL   run   
2A74   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2A7F   76                     HALT      
2A80                EXPECTM_3100S103:      
2A80   E1                     POP   HL   
2A81                          ;*Macro unroll:  test "3 1 <<", 6
2A81   31 00 4D               LD   SP,STACK   
2A84   CD DF 0E               CALL   coldInit   
2A87   CD A2 4B               CALL   execStr   
2A8A   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
2A91   E1                     POP   HL   
2A92   E5                     PUSH   HL   
2A93   11 06 00               LD   DE,6   
2A96   B7                     OR   A   
2A97   ED 52                  SBC   HL,DE   
2A99   7D                     LD   A,L   
2A9A   B4                     OR   H   
2A9B   CA F1 2A               JP   Z,expectM_3101S104   
2A9E   CD AB 0E               CALL   printStr   
2AA1   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2AAE   CD AB 0E               CALL   printStr   
2AB1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AC0   21 06 00               LD   hl,6   
2AC3   E5                     PUSH   hl   
2AC4   E5                     PUSH   hl   
2AC5   CD B2 0F               CALL   run   
2AC8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2ACF   CD AB 0E               CALL   printStr   
2AD2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2ADF   E1                     POP   hl   
2AE0   E5                     PUSH   hl   
2AE1   E5                     PUSH   hl   
2AE2   CD B2 0F               CALL   run   
2AE5   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2AF0   76                     HALT      
2AF1                EXPECTM_3101S104:      
2AF1   E1                     POP   HL   
2AF2                          ;*Macro unroll:  test "10 1 >>", 5
2AF2   31 00 4D               LD   SP,STACK   
2AF5   CD DF 0E               CALL   coldInit   
2AF8   CD A2 4B               CALL   execStr   
2AFB   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
2B03   E1                     POP   HL   
2B04   E5                     PUSH   HL   
2B05   11 05 00               LD   DE,5   
2B08   B7                     OR   A   
2B09   ED 52                  SBC   HL,DE   
2B0B   7D                     LD   A,L   
2B0C   B4                     OR   H   
2B0D   CA 64 2B               JP   Z,expectM_3102S105   
2B10   CD AB 0E               CALL   printStr   
2B13   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2B21   CD AB 0E               CALL   printStr   
2B24   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B33   21 05 00               LD   hl,5   
2B36   E5                     PUSH   hl   
2B37   E5                     PUSH   hl   
2B38   CD B2 0F               CALL   run   
2B3B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2B42   CD AB 0E               CALL   printStr   
2B45   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B52   E1                     POP   hl   
2B53   E5                     PUSH   hl   
2B54   E5                     PUSH   hl   
2B55   CD B2 0F               CALL   run   
2B58   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2B63   76                     HALT      
2B64                EXPECTM_3102S105:      
2B64   E1                     POP   HL   
2B65                          ;*Macro unroll:  test "1 x = x", 1
2B65   31 00 4D               LD   SP,STACK   
2B68   CD DF 0E               CALL   coldInit   
2B6B   CD A2 4B               CALL   execStr   
2B6E   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
2B76   E1                     POP   HL   
2B77   E5                     PUSH   HL   
2B78   11 01 00               LD   DE,1   
2B7B   B7                     OR   A   
2B7C   ED 52                  SBC   HL,DE   
2B7E   7D                     LD   A,L   
2B7F   B4                     OR   H   
2B80   CA D7 2B               JP   Z,expectM_3103S106   
2B83   CD AB 0E               CALL   printStr   
2B86   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2B94   CD AB 0E               CALL   printStr   
2B97   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BA6   21 01 00               LD   hl,1   
2BA9   E5                     PUSH   hl   
2BAA   E5                     PUSH   hl   
2BAB   CD B2 0F               CALL   run   
2BAE   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2BB5   CD AB 0E               CALL   printStr   
2BB8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BC5   E1                     POP   hl   
2BC6   E5                     PUSH   hl   
2BC7   E5                     PUSH   hl   
2BC8   CD B2 0F               CALL   run   
2BCB   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2BD6   76                     HALT      
2BD7                EXPECTM_3103S106:      
2BD7   E1                     POP   HL   
2BD8                          ;*Macro unroll:  test "1{}^", 1
2BD8   31 00 4D               LD   SP,STACK   
2BDB   CD DF 0E               CALL   coldInit   
2BDE   CD A2 4B               CALL   execStr   
2BE1   31 7B 7D 5E 00         DB   "1{}^",0   
2BE6   E1                     POP   HL   
2BE7   E5                     PUSH   HL   
2BE8   11 01 00               LD   DE,1   
2BEB   B7                     OR   A   
2BEC   ED 52                  SBC   HL,DE   
2BEE   7D                     LD   A,L   
2BEF   B4                     OR   H   
2BF0   CA 44 2C               JP   Z,expectM_3104S107   
2BF3   CD AB 0E               CALL   printStr   
2BF6   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2C01   CD AB 0E               CALL   printStr   
2C04   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C13   21 01 00               LD   hl,1   
2C16   E5                     PUSH   hl   
2C17   E5                     PUSH   hl   
2C18   CD B2 0F               CALL   run   
2C1B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2C22   CD AB 0E               CALL   printStr   
2C25   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C32   E1                     POP   hl   
2C33   E5                     PUSH   hl   
2C34   E5                     PUSH   hl   
2C35   CD B2 0F               CALL   run   
2C38   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2C43   76                     HALT      
2C44                EXPECTM_3104S107:      
2C44   E1                     POP   HL   
2C45                          ;*Macro unroll:  test "{1}^", 1
2C45   31 00 4D               LD   SP,STACK   
2C48   CD DF 0E               CALL   coldInit   
2C4B   CD A2 4B               CALL   execStr   
2C4E   7B 31 7D 5E 00         DB   "{1}^",0   
2C53   E1                     POP   HL   
2C54   E5                     PUSH   HL   
2C55   11 01 00               LD   DE,1   
2C58   B7                     OR   A   
2C59   ED 52                  SBC   HL,DE   
2C5B   7D                     LD   A,L   
2C5C   B4                     OR   H   
2C5D   CA B1 2C               JP   Z,expectM_3105S108   
2C60   CD AB 0E               CALL   printStr   
2C63   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2C6E   CD AB 0E               CALL   printStr   
2C71   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C80   21 01 00               LD   hl,1   
2C83   E5                     PUSH   hl   
2C84   E5                     PUSH   hl   
2C85   CD B2 0F               CALL   run   
2C88   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2C8F   CD AB 0E               CALL   printStr   
2C92   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C9F   E1                     POP   hl   
2CA0   E5                     PUSH   hl   
2CA1   E5                     PUSH   hl   
2CA2   CD B2 0F               CALL   run   
2CA5   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2CB0   76                     HALT      
2CB1                EXPECTM_3105S108:      
2CB1   E1                     POP   HL   
2CB2                          ;*Macro unroll:  test "{{1}^}^", 1
2CB2   31 00 4D               LD   SP,STACK   
2CB5   CD DF 0E               CALL   coldInit   
2CB8   CD A2 4B               CALL   execStr   
2CBB   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
2CC3   E1                     POP   HL   
2CC4   E5                     PUSH   HL   
2CC5   11 01 00               LD   DE,1   
2CC8   B7                     OR   A   
2CC9   ED 52                  SBC   HL,DE   
2CCB   7D                     LD   A,L   
2CCC   B4                     OR   H   
2CCD   CA 24 2D               JP   Z,expectM_3106S109   
2CD0   CD AB 0E               CALL   printStr   
2CD3   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2CE1   CD AB 0E               CALL   printStr   
2CE4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CF3   21 01 00               LD   hl,1   
2CF6   E5                     PUSH   hl   
2CF7   E5                     PUSH   hl   
2CF8   CD B2 0F               CALL   run   
2CFB   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2D02   CD AB 0E               CALL   printStr   
2D05   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D12   E1                     POP   hl   
2D13   E5                     PUSH   hl   
2D14   E5                     PUSH   hl   
2D15   CD B2 0F               CALL   run   
2D18   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2D23   76                     HALT      
2D24                EXPECTM_3106S109:      
2D24   E1                     POP   HL   
2D25                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2D25   31 00 4D               LD   SP,STACK   
2D28   CD DF 0E               CALL   coldInit   
2D2B   CD A2 4B               CALL   execStr   
2D2E   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2D39   E1                     POP   HL   
2D3A   E5                     PUSH   HL   
2D3B   11 01 00               LD   DE,1   
2D3E   B7                     OR   A   
2D3F   ED 52                  SBC   HL,DE   
2D41   7D                     LD   A,L   
2D42   B4                     OR   H   
2D43   CA 9D 2D               JP   Z,expectM_3107S110   
2D46   CD AB 0E               CALL   printStr   
2D49   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2D5A   CD AB 0E               CALL   printStr   
2D5D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D6C   21 01 00               LD   hl,1   
2D6F   E5                     PUSH   hl   
2D70   E5                     PUSH   hl   
2D71   CD B2 0F               CALL   run   
2D74   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2D7B   CD AB 0E               CALL   printStr   
2D7E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D8B   E1                     POP   hl   
2D8C   E5                     PUSH   hl   
2D8D   E5                     PUSH   hl   
2D8E   CD B2 0F               CALL   run   
2D91   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2D9C   76                     HALT      
2D9D                EXPECTM_3107S110:      
2D9D   E1                     POP   HL   
2D9E                          ;*Macro unroll:  test "5 /f{10} ?", 5
2D9E   31 00 4D               LD   SP,STACK   
2DA1   CD DF 0E               CALL   coldInit   
2DA4   CD A2 4B               CALL   execStr   
2DA7   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2DB2   E1                     POP   HL   
2DB3   E5                     PUSH   HL   
2DB4   11 05 00               LD   DE,5   
2DB7   B7                     OR   A   
2DB8   ED 52                  SBC   HL,DE   
2DBA   7D                     LD   A,L   
2DBB   B4                     OR   H   
2DBC   CA 16 2E               JP   Z,expectM_3108S111   
2DBF   CD AB 0E               CALL   printStr   
2DC2   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2DD3   CD AB 0E               CALL   printStr   
2DD6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DE5   21 05 00               LD   hl,5   
2DE8   E5                     PUSH   hl   
2DE9   E5                     PUSH   hl   
2DEA   CD B2 0F               CALL   run   
2DED   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2DF4   CD AB 0E               CALL   printStr   
2DF7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E04   E1                     POP   hl   
2E05   E5                     PUSH   hl   
2E06   E5                     PUSH   hl   
2E07   CD B2 0F               CALL   run   
2E0A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2E15   76                     HALT      
2E16                EXPECTM_3108S111:      
2E16   E1                     POP   HL   
2E17                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2E17   31 00 4D               LD   SP,STACK   
2E1A   CD DF 0E               CALL   coldInit   
2E1D   CD A2 4B               CALL   execStr   
2E20   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2E2D   E1                     POP   HL   
2E2E   E5                     PUSH   HL   
2E2F   11 0F 00               LD   DE,15   
2E32   B7                     OR   A   
2E33   ED 52                  SBC   HL,DE   
2E35   7D                     LD   A,L   
2E36   B4                     OR   H   
2E37   CA 93 2E               JP   Z,expectM_3109S112   
2E3A   CD AB 0E               CALL   printStr   
2E3D   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2E50   CD AB 0E               CALL   printStr   
2E53   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E62   21 0F 00               LD   hl,15   
2E65   E5                     PUSH   hl   
2E66   E5                     PUSH   hl   
2E67   CD B2 0F               CALL   run   
2E6A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2E71   CD AB 0E               CALL   printStr   
2E74   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E81   E1                     POP   hl   
2E82   E5                     PUSH   hl   
2E83   E5                     PUSH   hl   
2E84   CD B2 0F               CALL   run   
2E87   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2E92   76                     HALT      
2E93                EXPECTM_3109S112:      
2E93   E1                     POP   HL   
2E94                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2E94   31 00 4D               LD   SP,STACK   
2E97   CD DF 0E               CALL   coldInit   
2E9A   CD A2 4B               CALL   execStr   
2E9D   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2EAF   E1                     POP   HL   
2EB0   E5                     PUSH   HL   
2EB1   11 15 00               LD   DE,21   
2EB4   B7                     OR   A   
2EB5   ED 52                  SBC   HL,DE   
2EB7   7D                     LD   A,L   
2EB8   B4                     OR   H   
2EB9   CA 1A 2F               JP   Z,expectM_3110S113   
2EBC   CD AB 0E               CALL   printStr   
2EBF   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2ED7   CD AB 0E               CALL   printStr   
2EDA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EE9   21 15 00               LD   hl,21   
2EEC   E5                     PUSH   hl   
2EED   E5                     PUSH   hl   
2EEE   CD B2 0F               CALL   run   
2EF1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2EF8   CD AB 0E               CALL   printStr   
2EFB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F08   E1                     POP   hl   
2F09   E5                     PUSH   hl   
2F0A   E5                     PUSH   hl   
2F0B   CD B2 0F               CALL   run   
2F0E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2F19   76                     HALT      
2F1A                EXPECTM_3110S113:      
2F1A   E1                     POP   HL   
2F1B                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2F1B   31 00 4D               LD   SP,STACK   
2F1E   CD DF 0E               CALL   coldInit   
2F21   CD A2 4B               CALL   execStr   
2F24   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
2F36   E1                     POP   HL   
2F37   E5                     PUSH   HL   
2F38   11 0B 00               LD   DE,11   
2F3B   B7                     OR   A   
2F3C   ED 52                  SBC   HL,DE   
2F3E   7D                     LD   A,L   
2F3F   B4                     OR   H   
2F40   CA A1 2F               JP   Z,expectM_3111S114   
2F43   CD AB 0E               CALL   printStr   
2F46   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2F5E   CD AB 0E               CALL   printStr   
2F61   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F70   21 0B 00               LD   hl,11   
2F73   E5                     PUSH   hl   
2F74   E5                     PUSH   hl   
2F75   CD B2 0F               CALL   run   
2F78   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2F7F   CD AB 0E               CALL   printStr   
2F82   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F8F   E1                     POP   hl   
2F90   E5                     PUSH   hl   
2F91   E5                     PUSH   hl   
2F92   CD B2 0F               CALL   run   
2F95   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2FA0   76                     HALT      
2FA1                EXPECTM_3111S114:      
2FA1   E1                     POP   HL   
2FA2                          ;*Macro unroll:  test "\\{2}^", 2
2FA2   31 00 4D               LD   SP,STACK   
2FA5   CD DF 0E               CALL   coldInit   
2FA8   CD A2 4B               CALL   execStr   
2FAB   5C 7B 32 7D 5E 00      DB   "\\{2}^",0   
2FB1   E1                     POP   HL   
2FB2   E5                     PUSH   HL   
2FB3   11 02 00               LD   DE,2   
2FB6   B7                     OR   A   
2FB7   ED 52                  SBC   HL,DE   
2FB9   7D                     LD   A,L   
2FBA   B4                     OR   H   
2FBB   CA 10 30               JP   Z,expectM_3112S115   
2FBE   CD AB 0E               CALL   printStr   
2FC1   43 6F 64 65 3A 20 5C 7B 32 7D 5E 00 .CSTR   "Code: ","\\{2}^"   
2FCD   CD AB 0E               CALL   printStr   
2FD0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FDF   21 02 00               LD   hl,2   
2FE2   E5                     PUSH   hl   
2FE3   E5                     PUSH   hl   
2FE4   CD B2 0F               CALL   run   
2FE7   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2FEE   CD AB 0E               CALL   printStr   
2FF1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FFE   E1                     POP   hl   
2FFF   E5                     PUSH   hl   
3000   E5                     PUSH   hl   
3001   CD B2 0F               CALL   run   
3004   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
300F   76                     HALT      
3010                EXPECTM_3112S115:      
3010   E1                     POP   HL   
3011                          ;*Macro unroll:  test "\\a{2}^", 2
3011   31 00 4D               LD   SP,STACK   
3014   CD DF 0E               CALL   coldInit   
3017   CD A2 4B               CALL   execStr   
301A   5C 61 7B 32 7D 5E 00   DB   "\\a{2}^",0   
3021   E1                     POP   HL   
3022   E5                     PUSH   HL   
3023   11 02 00               LD   DE,2   
3026   B7                     OR   A   
3027   ED 52                  SBC   HL,DE   
3029   7D                     LD   A,L   
302A   B4                     OR   H   
302B   CA 81 30               JP   Z,expectM_3113S116   
302E   CD AB 0E               CALL   printStr   
3031   43 6F 64 65 3A 20 5C 61 7B 32 7D 5E 00 .CSTR   "Code: ","\\a{2}^"   
303E   CD AB 0E               CALL   printStr   
3041   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3050   21 02 00               LD   hl,2   
3053   E5                     PUSH   hl   
3054   E5                     PUSH   hl   
3055   CD B2 0F               CALL   run   
3058   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
305F   CD AB 0E               CALL   printStr   
3062   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
306F   E1                     POP   hl   
3070   E5                     PUSH   hl   
3071   E5                     PUSH   hl   
3072   CD B2 0F               CALL   run   
3075   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3080   76                     HALT      
3081                EXPECTM_3113S116:      
3081   E1                     POP   HL   
3082                          ;*Macro unroll:  test "5 \\a{%a}^", 5
3082   31 00 4D               LD   SP,STACK   
3085   CD DF 0E               CALL   coldInit   
3088   CD A2 4B               CALL   execStr   
308B   35 20 5C 61 7B 25 61 7D 5E 00 DB   "5 \\a{%a}^",0   
3095   E1                     POP   HL   
3096   E5                     PUSH   HL   
3097   11 05 00               LD   DE,5   
309A   B7                     OR   A   
309B   ED 52                  SBC   HL,DE   
309D   7D                     LD   A,L   
309E   B4                     OR   H   
309F   CA F8 30               JP   Z,expectM_3114S117   
30A2   CD AB 0E               CALL   printStr   
30A5   43 6F 64 65 3A 20 35 20 5C 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a{%a}^"   
30B5   CD AB 0E               CALL   printStr   
30B8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30C7   21 05 00               LD   hl,5   
30CA   E5                     PUSH   hl   
30CB   E5                     PUSH   hl   
30CC   CD B2 0F               CALL   run   
30CF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
30D6   CD AB 0E               CALL   printStr   
30D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30E6   E1                     POP   hl   
30E7   E5                     PUSH   hl   
30E8   E5                     PUSH   hl   
30E9   CD B2 0F               CALL   run   
30EC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
30F7   76                     HALT      
30F8                EXPECTM_3114S117:      
30F8   E1                     POP   HL   
30F9                          ;*Macro unroll:  test "5 \\a:b{%a}^", 5
30F9   31 00 4D               LD   SP,STACK   
30FC   CD DF 0E               CALL   coldInit   
30FF   CD A2 4B               CALL   execStr   
3102   35 20 5C 61 3A 62 7B 25 61 7D 5E 00 DB   "5 \\a:b{%a}^",0   
310E   E1                     POP   HL   
310F   E5                     PUSH   HL   
3110   11 05 00               LD   DE,5   
3113   B7                     OR   A   
3114   ED 52                  SBC   HL,DE   
3116   7D                     LD   A,L   
3117   B4                     OR   H   
3118   CA 73 31               JP   Z,expectM_3115S118   
311B   CD AB 0E               CALL   printStr   
311E   43 6F 64 65 3A 20 35 20 5C 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a:b{%a}^"   
3130   CD AB 0E               CALL   printStr   
3133   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3142   21 05 00               LD   hl,5   
3145   E5                     PUSH   hl   
3146   E5                     PUSH   hl   
3147   CD B2 0F               CALL   run   
314A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3151   CD AB 0E               CALL   printStr   
3154   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3161   E1                     POP   hl   
3162   E5                     PUSH   hl   
3163   E5                     PUSH   hl   
3164   CD B2 0F               CALL   run   
3167   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3172   76                     HALT      
3173                EXPECTM_3115S118:      
3173   E1                     POP   HL   
3174                          ;*Macro unroll:  test "\\a{{2}^}^", 2
3174   31 00 4D               LD   SP,STACK   
3177   CD DF 0E               CALL   coldInit   
317A   CD A2 4B               CALL   execStr   
317D   5C 61 7B 7B 32 7D 5E 7D 5E 00 DB   "\\a{{2}^}^",0   
3187   E1                     POP   HL   
3188   E5                     PUSH   HL   
3189   11 02 00               LD   DE,2   
318C   B7                     OR   A   
318D   ED 52                  SBC   HL,DE   
318F   7D                     LD   A,L   
3190   B4                     OR   H   
3191   CA EA 31               JP   Z,expectM_3116S119   
3194   CD AB 0E               CALL   printStr   
3197   43 6F 64 65 3A 20 5C 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ","\\a{{2}^}^"   
31A7   CD AB 0E               CALL   printStr   
31AA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31B9   21 02 00               LD   hl,2   
31BC   E5                     PUSH   hl   
31BD   E5                     PUSH   hl   
31BE   CD B2 0F               CALL   run   
31C1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
31C8   CD AB 0E               CALL   printStr   
31CB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31D8   E1                     POP   hl   
31D9   E5                     PUSH   hl   
31DA   E5                     PUSH   hl   
31DB   CD B2 0F               CALL   run   
31DE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
31E9   76                     HALT      
31EA                EXPECTM_3116S119:      
31EA   E1                     POP   HL   
31EB                          ;*Macro unroll:  test "1 5 \\a{{%a}^}^", 5
31EB   31 00 4D               LD   SP,STACK   
31EE   CD DF 0E               CALL   coldInit   
31F1   CD A2 4B               CALL   execStr   
31F4   31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a}^}^",0   
3203   E1                     POP   HL   
3204   E5                     PUSH   HL   
3205   11 05 00               LD   DE,5   
3208   B7                     OR   A   
3209   ED 52                  SBC   HL,DE   
320B   7D                     LD   A,L   
320C   B4                     OR   H   
320D   CA 6B 32               JP   Z,expectM_3117S120   
3210   CD AB 0E               CALL   printStr   
3213   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a}^}^"   
3228   CD AB 0E               CALL   printStr   
322B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
323A   21 05 00               LD   hl,5   
323D   E5                     PUSH   hl   
323E   E5                     PUSH   hl   
323F   CD B2 0F               CALL   run   
3242   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3249   CD AB 0E               CALL   printStr   
324C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3259   E1                     POP   hl   
325A   E5                     PUSH   hl   
325B   E5                     PUSH   hl   
325C   CD B2 0F               CALL   run   
325F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
326A   76                     HALT      
326B                EXPECTM_3117S120:      
326B   E1                     POP   HL   
326C                          ;*Macro unroll:  test "1 5 \\ab{{%a}^}^", 1
326C   31 00 4D               LD   SP,STACK   
326F   CD DF 0E               CALL   coldInit   
3272   CD A2 4B               CALL   execStr   
3275   31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a}^}^",0   
3285   E1                     POP   HL   
3286   E5                     PUSH   HL   
3287   11 01 00               LD   DE,1   
328A   B7                     OR   A   
328B   ED 52                  SBC   HL,DE   
328D   7D                     LD   A,L   
328E   B4                     OR   H   
328F   CA EE 32               JP   Z,expectM_3118S121   
3292   CD AB 0E               CALL   printStr   
3295   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a}^}^"   
32AB   CD AB 0E               CALL   printStr   
32AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32BD   21 01 00               LD   hl,1   
32C0   E5                     PUSH   hl   
32C1   E5                     PUSH   hl   
32C2   CD B2 0F               CALL   run   
32C5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
32CC   CD AB 0E               CALL   printStr   
32CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32DC   E1                     POP   hl   
32DD   E5                     PUSH   hl   
32DE   E5                     PUSH   hl   
32DF   CD B2 0F               CALL   run   
32E2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
32ED   76                     HALT      
32EE                EXPECTM_3118S121:      
32EE   E1                     POP   HL   
32EF                          ;*Macro unroll:  test "1 5 \\a{{%a 2 +}^}^", 7
32EF   31 00 4D               LD   SP,STACK   
32F2   CD DF 0E               CALL   coldInit   
32F5   CD A2 4B               CALL   execStr   
32F8   31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a 2 +}^}^",0   
330B   E1                     POP   HL   
330C   E5                     PUSH   HL   
330D   11 07 00               LD   DE,7   
3310   B7                     OR   A   
3311   ED 52                  SBC   HL,DE   
3313   7D                     LD   A,L   
3314   B4                     OR   H   
3315   CA 77 33               JP   Z,expectM_3119S122   
3318   CD AB 0E               CALL   printStr   
331B   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a 2 +}^}^"   
3334   CD AB 0E               CALL   printStr   
3337   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3346   21 07 00               LD   hl,7   
3349   E5                     PUSH   hl   
334A   E5                     PUSH   hl   
334B   CD B2 0F               CALL   run   
334E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3355   CD AB 0E               CALL   printStr   
3358   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3365   E1                     POP   hl   
3366   E5                     PUSH   hl   
3367   E5                     PUSH   hl   
3368   CD B2 0F               CALL   run   
336B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3376   76                     HALT      
3377                EXPECTM_3119S122:      
3377   E1                     POP   HL   
3378                          ;*Macro unroll:  test "1 5 \\ab{{%a %b +}^}^", 6
3378   31 00 4D               LD   SP,STACK   
337B   CD DF 0E               CALL   coldInit   
337E   CD A2 4B               CALL   execStr   
3381   31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a %b +}^}^",0   
3396   E1                     POP   HL   
3397   E5                     PUSH   HL   
3398   11 06 00               LD   DE,6   
339B   B7                     OR   A   
339C   ED 52                  SBC   HL,DE   
339E   7D                     LD   A,L   
339F   B4                     OR   H   
33A0   CA 04 34               JP   Z,expectM_3120S123   
33A3   CD AB 0E               CALL   printStr   
33A6   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a %b +}^}^"   
33C1   CD AB 0E               CALL   printStr   
33C4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33D3   21 06 00               LD   hl,6   
33D6   E5                     PUSH   hl   
33D7   E5                     PUSH   hl   
33D8   CD B2 0F               CALL   run   
33DB   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
33E2   CD AB 0E               CALL   printStr   
33E5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33F2   E1                     POP   hl   
33F3   E5                     PUSH   hl   
33F4   E5                     PUSH   hl   
33F5   CD B2 0F               CALL   run   
33F8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3403   76                     HALT      
3404                EXPECTM_3120S123:      
3404   E1                     POP   HL   
3405                          ;*Macro unroll:  test "\\a{2} x= 1 x^", 2
3405   31 00 4D               LD   SP,STACK   
3408   CD DF 0E               CALL   coldInit   
340B   CD A2 4B               CALL   execStr   
340E   5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a{2} x= 1 x^",0   
341C   E1                     POP   HL   
341D   E5                     PUSH   HL   
341E   11 02 00               LD   DE,2   
3421   B7                     OR   A   
3422   ED 52                  SBC   HL,DE   
3424   7D                     LD   A,L   
3425   B4                     OR   H   
3426   CA 83 34               JP   Z,expectM_3121S124   
3429   CD AB 0E               CALL   printStr   
342C   43 6F 64 65 3A 20 5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{2} x= 1 x^"   
3440   CD AB 0E               CALL   printStr   
3443   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3452   21 02 00               LD   hl,2   
3455   E5                     PUSH   hl   
3456   E5                     PUSH   hl   
3457   CD B2 0F               CALL   run   
345A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3461   CD AB 0E               CALL   printStr   
3464   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3471   E1                     POP   hl   
3472   E5                     PUSH   hl   
3473   E5                     PUSH   hl   
3474   CD B2 0F               CALL   run   
3477   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3482   76                     HALT      
3483                EXPECTM_3121S124:      
3483   E1                     POP   HL   
3484                          ;*Macro unroll:  test "\\a{%a} x= 0 1 x^", 1
3484   31 00 4D               LD   SP,STACK   
3487   CD DF 0E               CALL   coldInit   
348A   CD A2 4B               CALL   execStr   
348D   5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   "\\a{%a} x= 0 1 x^",0   
349E   E1                     POP   HL   
349F   E5                     PUSH   HL   
34A0   11 01 00               LD   DE,1   
34A3   B7                     OR   A   
34A4   ED 52                  SBC   HL,DE   
34A6   7D                     LD   A,L   
34A7   B4                     OR   H   
34A8   CA 08 35               JP   Z,expectM_3122S125   
34AB   CD AB 0E               CALL   printStr   
34AE   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{%a} x= 0 1 x^"   
34C5   CD AB 0E               CALL   printStr   
34C8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34D7   21 01 00               LD   hl,1   
34DA   E5                     PUSH   hl   
34DB   E5                     PUSH   hl   
34DC   CD B2 0F               CALL   run   
34DF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
34E6   CD AB 0E               CALL   printStr   
34E9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34F6   E1                     POP   hl   
34F7   E5                     PUSH   hl   
34F8   E5                     PUSH   hl   
34F9   CD B2 0F               CALL   run   
34FC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3507   76                     HALT      
3508                EXPECTM_3122S125:      
3508   E1                     POP   HL   
3509                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3509   31 00 4D               LD   SP,STACK   
350C   CD DF 0E               CALL   coldInit   
350F   CD A2 4B               CALL   execStr   
3512   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3524   E1                     POP   HL   
3525   E5                     PUSH   HL   
3526   11 02 00               LD   DE,2   
3529   B7                     OR   A   
352A   ED 52                  SBC   HL,DE   
352C   7D                     LD   A,L   
352D   B4                     OR   H   
352E   CA 8F 35               JP   Z,expectM_3123S126   
3531   CD AB 0E               CALL   printStr   
3534   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
354C   CD AB 0E               CALL   printStr   
354F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
355E   21 02 00               LD   hl,2   
3561   E5                     PUSH   hl   
3562   E5                     PUSH   hl   
3563   CD B2 0F               CALL   run   
3566   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
356D   CD AB 0E               CALL   printStr   
3570   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
357D   E1                     POP   hl   
357E   E5                     PUSH   hl   
357F   E5                     PUSH   hl   
3580   CD B2 0F               CALL   run   
3583   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
358E   76                     HALT      
358F                EXPECTM_3123S126:      
358F   E1                     POP   HL   
3590                          ;*Macro unroll:  test "\\a:b{%a} x= 1 2 x^", 2
3590   31 00 4D               LD   SP,STACK   
3593   CD DF 0E               CALL   coldInit   
3596   CD A2 4B               CALL   execStr   
3599   5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\a:b{%a} x= 1 2 x^",0   
35AC   E1                     POP   HL   
35AD   E5                     PUSH   HL   
35AE   11 02 00               LD   DE,2   
35B1   B7                     OR   A   
35B2   ED 52                  SBC   HL,DE   
35B4   7D                     LD   A,L   
35B5   B4                     OR   H   
35B6   CA 18 36               JP   Z,expectM_3124S127   
35B9   CD AB 0E               CALL   printStr   
35BC   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a} x= 1 2 x^"   
35D5   CD AB 0E               CALL   printStr   
35D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35E7   21 02 00               LD   hl,2   
35EA   E5                     PUSH   hl   
35EB   E5                     PUSH   hl   
35EC   CD B2 0F               CALL   run   
35EF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
35F6   CD AB 0E               CALL   printStr   
35F9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3606   E1                     POP   hl   
3607   E5                     PUSH   hl   
3608   E5                     PUSH   hl   
3609   CD B2 0F               CALL   run   
360C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3617   76                     HALT      
3618                EXPECTM_3124S127:      
3618   E1                     POP   HL   
3619                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3619   31 00 4D               LD   SP,STACK   
361C   CD DF 0E               CALL   coldInit   
361F   CD A2 4B               CALL   execStr   
3622   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3634   E1                     POP   HL   
3635   E5                     PUSH   HL   
3636   11 02 00               LD   DE,2   
3639   B7                     OR   A   
363A   ED 52                  SBC   HL,DE   
363C   7D                     LD   A,L   
363D   B4                     OR   H   
363E   CA 9F 36               JP   Z,expectM_3125S128   
3641   CD AB 0E               CALL   printStr   
3644   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
365C   CD AB 0E               CALL   printStr   
365F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
366E   21 02 00               LD   hl,2   
3671   E5                     PUSH   hl   
3672   E5                     PUSH   hl   
3673   CD B2 0F               CALL   run   
3676   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
367D   CD AB 0E               CALL   printStr   
3680   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
368D   E1                     POP   hl   
368E   E5                     PUSH   hl   
368F   E5                     PUSH   hl   
3690   CD B2 0F               CALL   run   
3693   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
369E   76                     HALT      
369F                EXPECTM_3125S128:      
369F   E1                     POP   HL   
36A0                          ;*Macro unroll:  test "\\ab{%b %a} x= 10 15 x^ -", 5
36A0   31 00 4D               LD   SP,STACK   
36A3   CD DF 0E               CALL   coldInit   
36A6   CD A2 4B               CALL   execStr   
36A9   5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   "\\ab{%b %a} x= 10 15 x^ -",0   
36C2   E1                     POP   HL   
36C3   E5                     PUSH   HL   
36C4   11 05 00               LD   DE,5   
36C7   B7                     OR   A   
36C8   ED 52                  SBC   HL,DE   
36CA   7D                     LD   A,L   
36CB   B4                     OR   H   
36CC   CA 34 37               JP   Z,expectM_3126S129   
36CF   CD AB 0E               CALL   printStr   
36D2   43 6F 64 65 3A 20 5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","\\ab{%b %a} x= 10 15 x^ -"   
36F1   CD AB 0E               CALL   printStr   
36F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3703   21 05 00               LD   hl,5   
3706   E5                     PUSH   hl   
3707   E5                     PUSH   hl   
3708   CD B2 0F               CALL   run   
370B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3712   CD AB 0E               CALL   printStr   
3715   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3722   E1                     POP   hl   
3723   E5                     PUSH   hl   
3724   E5                     PUSH   hl   
3725   CD B2 0F               CALL   run   
3728   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3733   76                     HALT      
3734                EXPECTM_3126S129:      
3734   E1                     POP   HL   
3735                          ;*Macro unroll:  test "\\a:b{2} x= 1 x^", 2
3735   31 00 4D               LD   SP,STACK   
3738   CD DF 0E               CALL   coldInit   
373B   CD A2 4B               CALL   execStr   
373E   5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a:b{2} x= 1 x^",0   
374E   E1                     POP   HL   
374F   E5                     PUSH   HL   
3750   11 02 00               LD   DE,2   
3753   B7                     OR   A   
3754   ED 52                  SBC   HL,DE   
3756   7D                     LD   A,L   
3757   B4                     OR   H   
3758   CA B7 37               JP   Z,expectM_3127S130   
375B   CD AB 0E               CALL   printStr   
375E   43 6F 64 65 3A 20 5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a:b{2} x= 1 x^"   
3774   CD AB 0E               CALL   printStr   
3777   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3786   21 02 00               LD   hl,2   
3789   E5                     PUSH   hl   
378A   E5                     PUSH   hl   
378B   CD B2 0F               CALL   run   
378E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3795   CD AB 0E               CALL   printStr   
3798   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37A5   E1                     POP   hl   
37A6   E5                     PUSH   hl   
37A7   E5                     PUSH   hl   
37A8   CD B2 0F               CALL   run   
37AB   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
37B6   76                     HALT      
37B7                EXPECTM_3127S130:      
37B7   E1                     POP   HL   
37B8                          ;*Macro unroll:  test "\\:b{100 %b = %b} x= x^", 100
37B8   31 00 4D               LD   SP,STACK   
37BB   CD DF 0E               CALL   coldInit   
37BE   CD A2 4B               CALL   execStr   
37C1   5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "\\:b{100 %b = %b} x= x^",0   
37D8   E1                     POP   HL   
37D9   E5                     PUSH   HL   
37DA   11 64 00               LD   DE,100   
37DD   B7                     OR   A   
37DE   ED 52                  SBC   HL,DE   
37E0   7D                     LD   A,L   
37E1   B4                     OR   H   
37E2   CA 48 38               JP   Z,expectM_3128S131   
37E5   CD AB 0E               CALL   printStr   
37E8   43 6F 64 65 3A 20 5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","\\:b{100 %b = %b} x= x^"   
3805   CD AB 0E               CALL   printStr   
3808   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3817   21 64 00               LD   hl,100   
381A   E5                     PUSH   hl   
381B   E5                     PUSH   hl   
381C   CD B2 0F               CALL   run   
381F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3826   CD AB 0E               CALL   printStr   
3829   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3836   E1                     POP   hl   
3837   E5                     PUSH   hl   
3838   E5                     PUSH   hl   
3839   CD B2 0F               CALL   run   
383C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3847   76                     HALT      
3848                EXPECTM_3128S131:      
3848   E1                     POP   HL   
3849                          ;*Macro unroll:  test "\\a:b{1 %b = %b} x= 2 x^", 1
3849   31 00 4D               LD   SP,STACK   
384C   CD DF 0E               CALL   coldInit   
384F   CD A2 4B               CALL   execStr   
3852   5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{1 %b = %b} x= 2 x^",0   
386A   E1                     POP   HL   
386B   E5                     PUSH   HL   
386C   11 01 00               LD   DE,1   
386F   B7                     OR   A   
3870   ED 52                  SBC   HL,DE   
3872   7D                     LD   A,L   
3873   B4                     OR   H   
3874   CA DB 38               JP   Z,expectM_3129S132   
3877   CD AB 0E               CALL   printStr   
387A   43 6F 64 65 3A 20 5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{1 %b = %b} x= 2 x^"   
3898   CD AB 0E               CALL   printStr   
389B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38AA   21 01 00               LD   hl,1   
38AD   E5                     PUSH   hl   
38AE   E5                     PUSH   hl   
38AF   CD B2 0F               CALL   run   
38B2   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
38B9   CD AB 0E               CALL   printStr   
38BC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38C9   E1                     POP   hl   
38CA   E5                     PUSH   hl   
38CB   E5                     PUSH   hl   
38CC   CD B2 0F               CALL   run   
38CF   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
38DA   76                     HALT      
38DB                EXPECTM_3129S132:      
38DB   E1                     POP   HL   
38DC                          ;*Macro unroll:  test "\\a:b{%a %b = %b} x= 2 x^", 2
38DC   31 00 4D               LD   SP,STACK   
38DF   CD DF 0E               CALL   coldInit   
38E2   CD A2 4B               CALL   execStr   
38E5   5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{%a %b = %b} x= 2 x^",0   
38FE   E1                     POP   HL   
38FF   E5                     PUSH   HL   
3900   11 02 00               LD   DE,2   
3903   B7                     OR   A   
3904   ED 52                  SBC   HL,DE   
3906   7D                     LD   A,L   
3907   B4                     OR   H   
3908   CA 70 39               JP   Z,expectM_3130S133   
390B   CD AB 0E               CALL   printStr   
390E   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a %b = %b} x= 2 x^"   
392D   CD AB 0E               CALL   printStr   
3930   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
393F   21 02 00               LD   hl,2   
3942   E5                     PUSH   hl   
3943   E5                     PUSH   hl   
3944   CD B2 0F               CALL   run   
3947   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
394E   CD AB 0E               CALL   printStr   
3951   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
395E   E1                     POP   hl   
395F   E5                     PUSH   hl   
3960   E5                     PUSH   hl   
3961   CD B2 0F               CALL   run   
3964   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
396F   76                     HALT      
3970                EXPECTM_3130S133:      
3970   E1                     POP   HL   
3971                          ;*Macro unroll:  test "1 10 20 \\ab{/t{%a}{%b} ??}^ +", 11
3971   31 00 4D               LD   SP,STACK   
3974   CD DF 0E               CALL   coldInit   
3977   CD A2 4B               CALL   execStr   
397A   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/t{%a}{%b} ??}^ +",0   
3998   E1                     POP   HL   
3999   E5                     PUSH   HL   
399A   11 0B 00               LD   DE,11   
399D   B7                     OR   A   
399E   ED 52                  SBC   HL,DE   
39A0   7D                     LD   A,L   
39A1   B4                     OR   H   
39A2   CA 0F 3A               JP   Z,expectM_3131S134   
39A5   CD AB 0E               CALL   printStr   
39A8   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/t{%a}{%b} ??}^ +"   
39CC   CD AB 0E               CALL   printStr   
39CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39DE   21 0B 00               LD   hl,11   
39E1   E5                     PUSH   hl   
39E2   E5                     PUSH   hl   
39E3   CD B2 0F               CALL   run   
39E6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
39ED   CD AB 0E               CALL   printStr   
39F0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39FD   E1                     POP   hl   
39FE   E5                     PUSH   hl   
39FF   E5                     PUSH   hl   
3A00   CD B2 0F               CALL   run   
3A03   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3A0E   76                     HALT      
3A0F                EXPECTM_3131S134:      
3A0F   E1                     POP   HL   
3A10                          ;*Macro unroll:  test "1 10 20 \\ab{/f{%a}{%b} ??}^ +", 21
3A10   31 00 4D               LD   SP,STACK   
3A13   CD DF 0E               CALL   coldInit   
3A16   CD A2 4B               CALL   execStr   
3A19   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/f{%a}{%b} ??}^ +",0   
3A37   E1                     POP   HL   
3A38   E5                     PUSH   HL   
3A39   11 15 00               LD   DE,21   
3A3C   B7                     OR   A   
3A3D   ED 52                  SBC   HL,DE   
3A3F   7D                     LD   A,L   
3A40   B4                     OR   H   
3A41   CA AE 3A               JP   Z,expectM_3132S135   
3A44   CD AB 0E               CALL   printStr   
3A47   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/f{%a}{%b} ??}^ +"   
3A6B   CD AB 0E               CALL   printStr   
3A6E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A7D   21 15 00               LD   hl,21   
3A80   E5                     PUSH   hl   
3A81   E5                     PUSH   hl   
3A82   CD B2 0F               CALL   run   
3A85   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3A8C   CD AB 0E               CALL   printStr   
3A8F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A9C   E1                     POP   hl   
3A9D   E5                     PUSH   hl   
3A9E   E5                     PUSH   hl   
3A9F   CD B2 0F               CALL   run   
3AA2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3AAD   76                     HALT      
3AAE                EXPECTM_3132S135:      
3AAE   E1                     POP   HL   
3AAF                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3AAF   31 00 4D               LD   SP,STACK   
3AB2   CD DF 0E               CALL   coldInit   
3AB5   CD A2 4B               CALL   execStr   
3AB8   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
3AC6   E1                     POP   HL   
3AC7   E5                     PUSH   HL   
3AC8   11 14 00               LD   DE,20   
3ACB   B7                     OR   A   
3ACC   ED 52                  SBC   HL,DE   
3ACE   7D                     LD   A,L   
3ACF   B4                     OR   H   
3AD0   CA 2D 3B               JP   Z,expectM_3133S136   
3AD3   CD AB 0E               CALL   printStr   
3AD6   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
3AEA   CD AB 0E               CALL   printStr   
3AED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AFC   21 14 00               LD   hl,20   
3AFF   E5                     PUSH   hl   
3B00   E5                     PUSH   hl   
3B01   CD B2 0F               CALL   run   
3B04   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3B0B   CD AB 0E               CALL   printStr   
3B0E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B1B   E1                     POP   hl   
3B1C   E5                     PUSH   hl   
3B1D   E5                     PUSH   hl   
3B1E   CD B2 0F               CALL   run   
3B21   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3B2C   76                     HALT      
3B2D                EXPECTM_3133S136:      
3B2D   E1                     POP   HL   
3B2E                          ;*Macro unroll:  test "[10 20 30 40] /al", 4
3B2E   31 00 4D               LD   SP,STACK   
3B31   CD DF 0E               CALL   coldInit   
3B34   CD A2 4B               CALL   execStr   
3B37   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 00 DB   "[10 20 30 40] /al",0   
3B49   E1                     POP   HL   
3B4A   E5                     PUSH   HL   
3B4B   11 04 00               LD   DE,4   
3B4E   B7                     OR   A   
3B4F   ED 52                  SBC   HL,DE   
3B51   7D                     LD   A,L   
3B52   B4                     OR   H   
3B53   CA B4 3B               JP   Z,expectM_3134S137   
3B56   CD AB 0E               CALL   printStr   
3B59   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 00 .CSTR   "Code: ","[10 20 30 40] /al"   
3B71   CD AB 0E               CALL   printStr   
3B74   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B83   21 04 00               LD   hl,4   
3B86   E5                     PUSH   hl   
3B87   E5                     PUSH   hl   
3B88   CD B2 0F               CALL   run   
3B8B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3B92   CD AB 0E               CALL   printStr   
3B95   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BA2   E1                     POP   hl   
3BA3   E5                     PUSH   hl   
3BA4   E5                     PUSH   hl   
3BA5   CD B2 0F               CALL   run   
3BA8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3BB3   76                     HALT      
3BB4                EXPECTM_3134S137:      
3BB4   E1                     POP   HL   
3BB5                          ;*Macro unroll:  test "/bm [1 2 3] 1#", 2
3BB5   31 00 4D               LD   SP,STACK   
3BB8   CD DF 0E               CALL   coldInit   
3BBB   CD A2 4B               CALL   execStr   
3BBE   2F 62 6D 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/bm [1 2 3] 1#",0   
3BCD   E1                     POP   HL   
3BCE   E5                     PUSH   HL   
3BCF   11 02 00               LD   DE,2   
3BD2   B7                     OR   A   
3BD3   ED 52                  SBC   HL,DE   
3BD5   7D                     LD   A,L   
3BD6   B4                     OR   H   
3BD7   CA 35 3C               JP   Z,expectM_3135S138   
3BDA   CD AB 0E               CALL   printStr   
3BDD   43 6F 64 65 3A 20 2F 62 6D 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/bm [1 2 3] 1#"   
3BF2   CD AB 0E               CALL   printStr   
3BF5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C04   21 02 00               LD   hl,2   
3C07   E5                     PUSH   hl   
3C08   E5                     PUSH   hl   
3C09   CD B2 0F               CALL   run   
3C0C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3C13   CD AB 0E               CALL   printStr   
3C16   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C23   E1                     POP   hl   
3C24   E5                     PUSH   hl   
3C25   E5                     PUSH   hl   
3C26   CD B2 0F               CALL   run   
3C29   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3C34   76                     HALT      
3C35                EXPECTM_3135S138:      
3C35   E1                     POP   HL   
3C36                          ;*Macro unroll:  test "/bm [_A _B _C] 1#", 66
3C36   31 00 4D               LD   SP,STACK   
3C39   CD DF 0E               CALL   coldInit   
3C3C   CD A2 4B               CALL   execStr   
3C3F   2F 62 6D 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 23 00 DB   "/bm [_A _B _C] 1#",0   
3C51   E1                     POP   HL   
3C52   E5                     PUSH   HL   
3C53   11 42 00               LD   DE,66   
3C56   B7                     OR   A   
3C57   ED 52                  SBC   HL,DE   
3C59   7D                     LD   A,L   
3C5A   B4                     OR   H   
3C5B   CA BC 3C               JP   Z,expectM_3136S139   
3C5E   CD AB 0E               CALL   printStr   
3C61   43 6F 64 65 3A 20 2F 62 6D 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 23 00 .CSTR   "Code: ","/bm [_A _B _C] 1#"   
3C79   CD AB 0E               CALL   printStr   
3C7C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C8B   21 42 00               LD   hl,66   
3C8E   E5                     PUSH   hl   
3C8F   E5                     PUSH   hl   
3C90   CD B2 0F               CALL   run   
3C93   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3C9A   CD AB 0E               CALL   printStr   
3C9D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CAA   E1                     POP   hl   
3CAB   E5                     PUSH   hl   
3CAC   E5                     PUSH   hl   
3CAD   CD B2 0F               CALL   run   
3CB0   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3CBB   76                     HALT      
3CBC                EXPECTM_3136S139:      
3CBC   E1                     POP   HL   
3CBD                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3CBD   31 00 4D               LD   SP,STACK   
3CC0   CD DF 0E               CALL   coldInit   
3CC3   CD A2 4B               CALL   execStr   
3CC6   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
3CDA   E1                     POP   HL   
3CDB   E5                     PUSH   HL   
3CDC   11 0A 00               LD   DE,10   
3CDF   B7                     OR   A   
3CE0   ED 52                  SBC   HL,DE   
3CE2   7D                     LD   A,L   
3CE3   B4                     OR   H   
3CE4   CA 47 3D               JP   Z,expectM_3137S140   
3CE7   CD AB 0E               CALL   printStr   
3CEA   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
3D04   CD AB 0E               CALL   printStr   
3D07   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D16   21 0A 00               LD   hl,10   
3D19   E5                     PUSH   hl   
3D1A   E5                     PUSH   hl   
3D1B   CD B2 0F               CALL   run   
3D1E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3D25   CD AB 0E               CALL   printStr   
3D28   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D35   E1                     POP   hl   
3D36   E5                     PUSH   hl   
3D37   E5                     PUSH   hl   
3D38   CD B2 0F               CALL   run   
3D3B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3D46   76                     HALT      
3D47                EXPECTM_3137S140:      
3D47   E1                     POP   HL   
3D48                          ;*Macro unroll:  test "10 20 \\ab{[{%a}{%b}] 0#^}^", 10
3D48   31 00 4D               LD   SP,STACK   
3D4B   CD DF 0E               CALL   coldInit   
3D4E   CD A2 4B               CALL   execStr   
3D51   31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 DB   "10 20 \\ab{[{%a}{%b}] 0#^}^",0   
3D6C   E1                     POP   HL   
3D6D   E5                     PUSH   HL   
3D6E   11 0A 00               LD   DE,10   
3D71   B7                     OR   A   
3D72   ED 52                  SBC   HL,DE   
3D74   7D                     LD   A,L   
3D75   B4                     OR   H   
3D76   CA E0 3D               JP   Z,expectM_3138S141   
3D79   CD AB 0E               CALL   printStr   
3D7C   43 6F 64 65 3A 20 31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 .CSTR   "Code: ","10 20 \\ab{[{%a}{%b}] 0#^}^"   
3D9D   CD AB 0E               CALL   printStr   
3DA0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DAF   21 0A 00               LD   hl,10   
3DB2   E5                     PUSH   hl   
3DB3   E5                     PUSH   hl   
3DB4   CD B2 0F               CALL   run   
3DB7   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3DBE   CD AB 0E               CALL   printStr   
3DC1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DCE   E1                     POP   hl   
3DCF   E5                     PUSH   hl   
3DD0   E5                     PUSH   hl   
3DD1   CD B2 0F               CALL   run   
3DD4   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3DDF   76                     HALT      
3DE0                EXPECTM_3138S141:      
3DE0   E1                     POP   HL   
3DE1                          ;*Macro unroll:  test "0 10 20 \\iab{[{%a}{%b}] %i#^}^", 10
3DE1   31 00 4D               LD   SP,STACK   
3DE4   CD DF 0E               CALL   coldInit   
3DE7   CD A2 4B               CALL   execStr   
3DEA   30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "0 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
3E09   E1                     POP   HL   
3E0A   E5                     PUSH   HL   
3E0B   11 0A 00               LD   DE,10   
3E0E   B7                     OR   A   
3E0F   ED 52                  SBC   HL,DE   
3E11   7D                     LD   A,L   
3E12   B4                     OR   H   
3E13   CA 81 3E               JP   Z,expectM_3139S142   
3E16   CD AB 0E               CALL   printStr   
3E19   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 \\iab{[{%a}{%b}] %i#^}^"   
3E3E   CD AB 0E               CALL   printStr   
3E41   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E50   21 0A 00               LD   hl,10   
3E53   E5                     PUSH   hl   
3E54   E5                     PUSH   hl   
3E55   CD B2 0F               CALL   run   
3E58   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3E5F   CD AB 0E               CALL   printStr   
3E62   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E6F   E1                     POP   hl   
3E70   E5                     PUSH   hl   
3E71   E5                     PUSH   hl   
3E72   CD B2 0F               CALL   run   
3E75   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3E80   76                     HALT      
3E81                EXPECTM_3139S142:      
3E81   E1                     POP   HL   
3E82                          ;*Macro unroll:  test "1 10 20 \\iab{[{%a}{%b}] %i#^}^", 20
3E82   31 00 4D               LD   SP,STACK   
3E85   CD DF 0E               CALL   coldInit   
3E88   CD A2 4B               CALL   execStr   
3E8B   31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "1 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
3EAA   E1                     POP   HL   
3EAB   E5                     PUSH   HL   
3EAC   11 14 00               LD   DE,20   
3EAF   B7                     OR   A   
3EB0   ED 52                  SBC   HL,DE   
3EB2   7D                     LD   A,L   
3EB3   B4                     OR   H   
3EB4   CA 22 3F               JP   Z,expectM_3140S143   
3EB7   CD AB 0E               CALL   printStr   
3EBA   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 \\iab{[{%a}{%b}] %i#^}^"   
3EDF   CD AB 0E               CALL   printStr   
3EE2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3EF1   21 14 00               LD   hl,20   
3EF4   E5                     PUSH   hl   
3EF5   E5                     PUSH   hl   
3EF6   CD B2 0F               CALL   run   
3EF9   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3F00   CD AB 0E               CALL   printStr   
3F03   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F10   E1                     POP   hl   
3F11   E5                     PUSH   hl   
3F12   E5                     PUSH   hl   
3F13   CD B2 0F               CALL   run   
3F16   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3F21   76                     HALT      
3F22                EXPECTM_3140S143:      
3F22   E1                     POP   HL   
3F23                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3F23   31 00 4D               LD   SP,STACK   
3F26   CD DF 0E               CALL   coldInit   
3F29   CD A2 4B               CALL   execStr   
3F2C   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
3F44   E1                     POP   HL   
3F45   E5                     PUSH   HL   
3F46   11 06 00               LD   DE,6   
3F49   B7                     OR   A   
3F4A   ED 52                  SBC   HL,DE   
3F4C   7D                     LD   A,L   
3F4D   B4                     OR   H   
3F4E   CA B5 3F               JP   Z,expectM_3141S144   
3F51   CD AB 0E               CALL   printStr   
3F54   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3F72   CD AB 0E               CALL   printStr   
3F75   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F84   21 06 00               LD   hl,6   
3F87   E5                     PUSH   hl   
3F88   E5                     PUSH   hl   
3F89   CD B2 0F               CALL   run   
3F8C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3F93   CD AB 0E               CALL   printStr   
3F96   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FA3   E1                     POP   hl   
3FA4   E5                     PUSH   hl   
3FA5   E5                     PUSH   hl   
3FA6   CD B2 0F               CALL   run   
3FA9   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3FB4   76                     HALT      
3FB5                EXPECTM_3141S144:      
3FB5   E1                     POP   HL   
3FB6                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
3FB6   31 00 4D               LD   SP,STACK   
3FB9   CD DF 0E               CALL   coldInit   
3FBC   CD A2 4B               CALL   execStr   
3FBF   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
3FDA   E1                     POP   HL   
3FDB   E5                     PUSH   HL   
3FDC   11 02 00               LD   DE,2   
3FDF   B7                     OR   A   
3FE0   ED 52                  SBC   HL,DE   
3FE2   7D                     LD   A,L   
3FE3   B4                     OR   H   
3FE4   CA 4E 40               JP   Z,expectM_3142S145   
3FE7   CD AB 0E               CALL   printStr   
3FEA   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
400B   CD AB 0E               CALL   printStr   
400E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
401D   21 02 00               LD   hl,2   
4020   E5                     PUSH   hl   
4021   E5                     PUSH   hl   
4022   CD B2 0F               CALL   run   
4025   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
402C   CD AB 0E               CALL   printStr   
402F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
403C   E1                     POP   hl   
403D   E5                     PUSH   hl   
403E   E5                     PUSH   hl   
403F   CD B2 0F               CALL   run   
4042   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
404D   76                     HALT      
404E                EXPECTM_3142S145:      
404E   E1                     POP   HL   
404F                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
404F   31 00 4D               LD   SP,STACK   
4052   CD DF 0E               CALL   coldInit   
4055   CD A2 4B               CALL   execStr   
4058   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
407E   E1                     POP   HL   
407F   E5                     PUSH   HL   
4080   11 0A 00               LD   DE,10   
4083   B7                     OR   A   
4084   ED 52                  SBC   HL,DE   
4086   7D                     LD   A,L   
4087   B4                     OR   H   
4088   CA FD 40               JP   Z,expectM_3143S146   
408B   CD AB 0E               CALL   printStr   
408E   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
40BA   CD AB 0E               CALL   printStr   
40BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40CC   21 0A 00               LD   hl,10   
40CF   E5                     PUSH   hl   
40D0   E5                     PUSH   hl   
40D1   CD B2 0F               CALL   run   
40D4   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
40DB   CD AB 0E               CALL   printStr   
40DE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40EB   E1                     POP   hl   
40EC   E5                     PUSH   hl   
40ED   E5                     PUSH   hl   
40EE   CD B2 0F               CALL   run   
40F1   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
40FC   76                     HALT      
40FD                EXPECTM_3143S146:      
40FD   E1                     POP   HL   
40FE                          ;*Macro unroll:  test "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^", 6
40FE   31 00 4D               LD   SP,STACK   
4101   CD DF 0E               CALL   coldInit   
4104   CD A2 4B               CALL   execStr   
4107   33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^",0   
4132   E1                     POP   HL   
4133   E5                     PUSH   HL   
4134   11 06 00               LD   DE,6   
4137   B7                     OR   A   
4138   ED 52                  SBC   HL,DE   
413A   7D                     LD   A,L   
413B   B4                     OR   H   
413C   CA B6 41               JP   Z,expectM_3144S147   
413F   CD AB 0E               CALL   printStr   
4142   43 6F 64 65 3A 20 33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^"   
4173   CD AB 0E               CALL   printStr   
4176   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4185   21 06 00               LD   hl,6   
4188   E5                     PUSH   hl   
4189   E5                     PUSH   hl   
418A   CD B2 0F               CALL   run   
418D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4194   CD AB 0E               CALL   printStr   
4197   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41A4   E1                     POP   hl   
41A5   E5                     PUSH   hl   
41A6   E5                     PUSH   hl   
41A7   CD B2 0F               CALL   run   
41AA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
41B5   76                     HALT      
41B6                EXPECTM_3144S147:      
41B6   E1                     POP   HL   
41B7                          ;*Macro unroll:  test "/t \\f{1 %f/br 2 +}^",3
41B7   31 00 4D               LD   SP,STACK   
41BA   CD DF 0E               CALL   coldInit   
41BD   CD A2 4B               CALL   execStr   
41C0   2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/t \\f{1 %f/br 2 +}^",0   
41D4   E1                     POP   HL   
41D5   E5                     PUSH   HL   
41D6   11 03 00               LD   DE,3   
41D9   B7                     OR   A   
41DA   ED 52                  SBC   HL,DE   
41DC   7D                     LD   A,L   
41DD   B4                     OR   H   
41DE   CA 41 42               JP   Z,expectM_3145S148   
41E1   CD AB 0E               CALL   printStr   
41E4   43 6F 64 65 3A 20 2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/t \\f{1 %f/br 2 +}^"   
41FE   CD AB 0E               CALL   printStr   
4201   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4210   21 03 00               LD   hl,3   
4213   E5                     PUSH   hl   
4214   E5                     PUSH   hl   
4215   CD B2 0F               CALL   run   
4218   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
421F   CD AB 0E               CALL   printStr   
4222   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
422F   E1                     POP   hl   
4230   E5                     PUSH   hl   
4231   E5                     PUSH   hl   
4232   CD B2 0F               CALL   run   
4235   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4240   76                     HALT      
4241                EXPECTM_3145S148:      
4241   E1                     POP   HL   
4242                          ;*Macro unroll:  test "/f \\f{1 %f/br 2 +}^",1
4242   31 00 4D               LD   SP,STACK   
4245   CD DF 0E               CALL   coldInit   
4248   CD A2 4B               CALL   execStr   
424B   2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/f \\f{1 %f/br 2 +}^",0   
425F   E1                     POP   HL   
4260   E5                     PUSH   HL   
4261   11 01 00               LD   DE,1   
4264   B7                     OR   A   
4265   ED 52                  SBC   HL,DE   
4267   7D                     LD   A,L   
4268   B4                     OR   H   
4269   CA CC 42               JP   Z,expectM_3146S149   
426C   CD AB 0E               CALL   printStr   
426F   43 6F 64 65 3A 20 2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/f \\f{1 %f/br 2 +}^"   
4289   CD AB 0E               CALL   printStr   
428C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
429B   21 01 00               LD   hl,1   
429E   E5                     PUSH   hl   
429F   E5                     PUSH   hl   
42A0   CD B2 0F               CALL   run   
42A3   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
42AA   CD AB 0E               CALL   printStr   
42AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42BA   E1                     POP   hl   
42BB   E5                     PUSH   hl   
42BC   E5                     PUSH   hl   
42BD   CD B2 0F               CALL   run   
42C0   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
42CB   76                     HALT      
42CC                EXPECTM_3146S149:      
42CC   E1                     POP   HL   
42CD                          ;*Macro unroll:  test "_A 1 - /ad", NUL
42CD   31 00 4D               LD   SP,STACK   
42D0   CD DF 0E               CALL   coldInit   
42D3   CD A2 4B               CALL   execStr   
42D6   5F 41 20 31 20 2D 20 2F 61 64 00 DB   "_A 1 - /ad",0   
42E1   E1                     POP   HL   
42E2   E5                     PUSH   HL   
42E3   11 00 00               LD   DE,NUL   
42E6   B7                     OR   A   
42E7   ED 52                  SBC   HL,DE   
42E9   7D                     LD   A,L   
42EA   B4                     OR   H   
42EB   CA 45 43               JP   Z,expectM_3147S150   
42EE   CD AB 0E               CALL   printStr   
42F1   43 6F 64 65 3A 20 5F 41 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","_A 1 - /ad"   
4302   CD AB 0E               CALL   printStr   
4305   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4314   21 00 00               LD   hl,NUL   
4317   E5                     PUSH   hl   
4318   E5                     PUSH   hl   
4319   CD B2 0F               CALL   run   
431C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4323   CD AB 0E               CALL   printStr   
4326   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4333   E1                     POP   hl   
4334   E5                     PUSH   hl   
4335   E5                     PUSH   hl   
4336   CD B2 0F               CALL   run   
4339   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4344   76                     HALT      
4345                EXPECTM_3147S150:      
4345   E1                     POP   HL   
4346                          ;*Macro unroll:  test "_Z 1 + /ad", NUL
4346   31 00 4D               LD   SP,STACK   
4349   CD DF 0E               CALL   coldInit   
434C   CD A2 4B               CALL   execStr   
434F   5F 5A 20 31 20 2B 20 2F 61 64 00 DB   "_Z 1 + /ad",0   
435A   E1                     POP   HL   
435B   E5                     PUSH   HL   
435C   11 00 00               LD   DE,NUL   
435F   B7                     OR   A   
4360   ED 52                  SBC   HL,DE   
4362   7D                     LD   A,L   
4363   B4                     OR   H   
4364   CA BE 43               JP   Z,expectM_3148S151   
4367   CD AB 0E               CALL   printStr   
436A   43 6F 64 65 3A 20 5F 5A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","_Z 1 + /ad"   
437B   CD AB 0E               CALL   printStr   
437E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
438D   21 00 00               LD   hl,NUL   
4390   E5                     PUSH   hl   
4391   E5                     PUSH   hl   
4392   CD B2 0F               CALL   run   
4395   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
439C   CD AB 0E               CALL   printStr   
439F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43AC   E1                     POP   hl   
43AD   E5                     PUSH   hl   
43AE   E5                     PUSH   hl   
43AF   CD B2 0F               CALL   run   
43B2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
43BD   76                     HALT      
43BE                EXPECTM_3148S151:      
43BE   E1                     POP   HL   
43BF                          ;*Macro unroll:  test "_a 1 - /ad", NUL
43BF   31 00 4D               LD   SP,STACK   
43C2   CD DF 0E               CALL   coldInit   
43C5   CD A2 4B               CALL   execStr   
43C8   5F 61 20 31 20 2D 20 2F 61 64 00 DB   "_a 1 - /ad",0   
43D3   E1                     POP   HL   
43D4   E5                     PUSH   HL   
43D5   11 00 00               LD   DE,NUL   
43D8   B7                     OR   A   
43D9   ED 52                  SBC   HL,DE   
43DB   7D                     LD   A,L   
43DC   B4                     OR   H   
43DD   CA 37 44               JP   Z,expectM_3149S152   
43E0   CD AB 0E               CALL   printStr   
43E3   43 6F 64 65 3A 20 5F 61 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","_a 1 - /ad"   
43F4   CD AB 0E               CALL   printStr   
43F7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4406   21 00 00               LD   hl,NUL   
4409   E5                     PUSH   hl   
440A   E5                     PUSH   hl   
440B   CD B2 0F               CALL   run   
440E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4415   CD AB 0E               CALL   printStr   
4418   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4425   E1                     POP   hl   
4426   E5                     PUSH   hl   
4427   E5                     PUSH   hl   
4428   CD B2 0F               CALL   run   
442B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4436   76                     HALT      
4437                EXPECTM_3149S152:      
4437   E1                     POP   HL   
4438                          ;*Macro unroll:  test "_z 1 + /ad", NUL
4438   31 00 4D               LD   SP,STACK   
443B   CD DF 0E               CALL   coldInit   
443E   CD A2 4B               CALL   execStr   
4441   5F 7A 20 31 20 2B 20 2F 61 64 00 DB   "_z 1 + /ad",0   
444C   E1                     POP   HL   
444D   E5                     PUSH   HL   
444E   11 00 00               LD   DE,NUL   
4451   B7                     OR   A   
4452   ED 52                  SBC   HL,DE   
4454   7D                     LD   A,L   
4455   B4                     OR   H   
4456   CA B0 44               JP   Z,expectM_3150S153   
4459   CD AB 0E               CALL   printStr   
445C   43 6F 64 65 3A 20 5F 7A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","_z 1 + /ad"   
446D   CD AB 0E               CALL   printStr   
4470   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
447F   21 00 00               LD   hl,NUL   
4482   E5                     PUSH   hl   
4483   E5                     PUSH   hl   
4484   CD B2 0F               CALL   run   
4487   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
448E   CD AB 0E               CALL   printStr   
4491   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
449E   E1                     POP   hl   
449F   E5                     PUSH   hl   
44A0   E5                     PUSH   hl   
44A1   CD B2 0F               CALL   run   
44A4   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
44AF   76                     HALT      
44B0                EXPECTM_3150S153:      
44B0   E1                     POP   HL   
44B1                          ;*Macro unroll:  test "_z /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
44B1   31 00 4D               LD   SP,STACK   
44B4   CD DF 0E               CALL   coldInit   
44B7   CD A2 4B               CALL   execStr   
44BA   5F 7A 20 2F 61 64 00   DB   "_z /ad",0   
44C1   E1                     POP   HL   
44C2   E5                     PUSH   HL   
44C3   11 66 4F               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
44C6   B7                     OR   A   
44C7   ED 52                  SBC   HL,DE   
44C9   7D                     LD   A,L   
44CA   B4                     OR   H   
44CB   CA 21 45               JP   Z,expectM_3151S154   
44CE   CD AB 0E               CALL   printStr   
44D1   43 6F 64 65 3A 20 5F 7A 20 2F 61 64 00 .CSTR   "Code: ","_z /ad"   
44DE   CD AB 0E               CALL   printStr   
44E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44F0   21 66 4F               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
44F3   E5                     PUSH   hl   
44F4   E5                     PUSH   hl   
44F5   CD B2 0F               CALL   run   
44F8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
44FF   CD AB 0E               CALL   printStr   
4502   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
450F   E1                     POP   hl   
4510   E5                     PUSH   hl   
4511   E5                     PUSH   hl   
4512   CD B2 0F               CALL   run   
4515   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4520   76                     HALT      
4521                EXPECTM_3151S154:      
4521   E1                     POP   HL   
4522                          ;*Macro unroll:  test "_a /ad", VARS + ("Z"-"A"+1)*2
4522   31 00 4D               LD   SP,STACK   
4525   CD DF 0E               CALL   coldInit   
4528   CD A2 4B               CALL   execStr   
452B   5F 61 20 2F 61 64 00   DB   "_a /ad",0   
4532   E1                     POP   HL   
4533   E5                     PUSH   HL   
4534   11 34 4F               LD   DE,VARS + ("Z"-"A"+1)*2   
4537   B7                     OR   A   
4538   ED 52                  SBC   HL,DE   
453A   7D                     LD   A,L   
453B   B4                     OR   H   
453C   CA 92 45               JP   Z,expectM_3152S155   
453F   CD AB 0E               CALL   printStr   
4542   43 6F 64 65 3A 20 5F 61 20 2F 61 64 00 .CSTR   "Code: ","_a /ad"   
454F   CD AB 0E               CALL   printStr   
4552   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4561   21 34 4F               LD   hl,VARS + ("Z"-"A"+1)*2   
4564   E5                     PUSH   hl   
4565   E5                     PUSH   hl   
4566   CD B2 0F               CALL   run   
4569   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4570   CD AB 0E               CALL   printStr   
4573   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4580   E1                     POP   hl   
4581   E5                     PUSH   hl   
4582   E5                     PUSH   hl   
4583   CD B2 0F               CALL   run   
4586   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4591   76                     HALT      
4592                EXPECTM_3152S155:      
4592   E1                     POP   HL   
4593                          ;*Macro unroll:  test "_Z /ad", VARS + ("Z"-"A")*2
4593   31 00 4D               LD   SP,STACK   
4596   CD DF 0E               CALL   coldInit   
4599   CD A2 4B               CALL   execStr   
459C   5F 5A 20 2F 61 64 00   DB   "_Z /ad",0   
45A3   E1                     POP   HL   
45A4   E5                     PUSH   HL   
45A5   11 32 4F               LD   DE,VARS + ("Z"-"A")*2   
45A8   B7                     OR   A   
45A9   ED 52                  SBC   HL,DE   
45AB   7D                     LD   A,L   
45AC   B4                     OR   H   
45AD   CA 03 46               JP   Z,expectM_3153S156   
45B0   CD AB 0E               CALL   printStr   
45B3   43 6F 64 65 3A 20 5F 5A 20 2F 61 64 00 .CSTR   "Code: ","_Z /ad"   
45C0   CD AB 0E               CALL   printStr   
45C3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45D2   21 32 4F               LD   hl,VARS + ("Z"-"A")*2   
45D5   E5                     PUSH   hl   
45D6   E5                     PUSH   hl   
45D7   CD B2 0F               CALL   run   
45DA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
45E1   CD AB 0E               CALL   printStr   
45E4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45F1   E1                     POP   hl   
45F2   E5                     PUSH   hl   
45F3   E5                     PUSH   hl   
45F4   CD B2 0F               CALL   run   
45F7   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4602   76                     HALT      
4603                EXPECTM_3153S156:      
4603   E1                     POP   HL   
4604                          ;*Macro unroll:  test "_A /ad", VARS
4604   31 00 4D               LD   SP,STACK   
4607   CD DF 0E               CALL   coldInit   
460A   CD A2 4B               CALL   execStr   
460D   5F 41 20 2F 61 64 00   DB   "_A /ad",0   
4614   E1                     POP   HL   
4615   E5                     PUSH   HL   
4616   11 00 4F               LD   DE,VARS   
4619   B7                     OR   A   
461A   ED 52                  SBC   HL,DE   
461C   7D                     LD   A,L   
461D   B4                     OR   H   
461E   CA 74 46               JP   Z,expectM_3154S157   
4621   CD AB 0E               CALL   printStr   
4624   43 6F 64 65 3A 20 5F 41 20 2F 61 64 00 .CSTR   "Code: ","_A /ad"   
4631   CD AB 0E               CALL   printStr   
4634   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4643   21 00 4F               LD   hl,VARS   
4646   E5                     PUSH   hl   
4647   E5                     PUSH   hl   
4648   CD B2 0F               CALL   run   
464B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4652   CD AB 0E               CALL   printStr   
4655   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4662   E1                     POP   hl   
4663   E5                     PUSH   hl   
4664   E5                     PUSH   hl   
4665   CD B2 0F               CALL   run   
4668   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4673   76                     HALT      
4674                EXPECTM_3154S157:      
4674   E1                     POP   HL   
4675                          ;*Macro unroll:  test "\\a{%a} F=1F^", 1
4675   31 00 4D               LD   SP,STACK   
4678   CD DF 0E               CALL   coldInit   
467B   CD A2 4B               CALL   execStr   
467E   5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   "\\a{%a} F=1F^",0   
468B   E1                     POP   HL   
468C   E5                     PUSH   HL   
468D   11 01 00               LD   DE,1   
4690   B7                     OR   A   
4691   ED 52                  SBC   HL,DE   
4693   7D                     LD   A,L   
4694   B4                     OR   H   
4695   CA F1 46               JP   Z,expectM_3155S158   
4698   CD AB 0E               CALL   printStr   
469B   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ","\\a{%a} F=1F^"   
46AE   CD AB 0E               CALL   printStr   
46B1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46C0   21 01 00               LD   hl,1   
46C3   E5                     PUSH   hl   
46C4   E5                     PUSH   hl   
46C5   CD B2 0F               CALL   run   
46C8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
46CF   CD AB 0E               CALL   printStr   
46D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46DF   E1                     POP   hl   
46E0   E5                     PUSH   hl   
46E1   E5                     PUSH   hl   
46E2   CD B2 0F               CALL   run   
46E5   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
46F0   76                     HALT      
46F1                EXPECTM_3155S158:      
46F1   E1                     POP   HL   
46F2                          ;*Macro unroll:  test "1 \\b{\\a{%a}}^F= 3F^",3
46F2   31 00 4D               LD   SP,STACK   
46F5   CD DF 0E               CALL   coldInit   
46F8   CD A2 4B               CALL   execStr   
46FB   31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a}}^F= 3F^",0   
470F   E1                     POP   HL   
4710   E5                     PUSH   HL   
4711   11 03 00               LD   DE,3   
4714   B7                     OR   A   
4715   ED 52                  SBC   HL,DE   
4717   7D                     LD   A,L   
4718   B4                     OR   H   
4719   CA 7C 47               JP   Z,expectM_3156S159   
471C   CD AB 0E               CALL   printStr   
471F   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a}}^F= 3F^"   
4739   CD AB 0E               CALL   printStr   
473C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
474B   21 03 00               LD   hl,3   
474E   E5                     PUSH   hl   
474F   E5                     PUSH   hl   
4750   CD B2 0F               CALL   run   
4753   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
475A   CD AB 0E               CALL   printStr   
475D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
476A   E1                     POP   hl   
476B   E5                     PUSH   hl   
476C   E5                     PUSH   hl   
476D   CD B2 0F               CALL   run   
4770   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
477B   76                     HALT      
477C                EXPECTM_3156S159:      
477C   E1                     POP   HL   
477D                          ;*Macro unroll:  test "1 \\b{\\a{%a%b-}}^F= 3F^",2
477D   31 00 4D               LD   SP,STACK   
4780   CD DF 0E               CALL   coldInit   
4783   CD A2 4B               CALL   execStr   
4786   31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a%b-}}^F= 3F^",0   
479D   E1                     POP   HL   
479E   E5                     PUSH   HL   
479F   11 02 00               LD   DE,2   
47A2   B7                     OR   A   
47A3   ED 52                  SBC   HL,DE   
47A5   7D                     LD   A,L   
47A6   B4                     OR   H   
47A7   CA 0D 48               JP   Z,expectM_3157S160   
47AA   CD AB 0E               CALL   printStr   
47AD   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a%b-}}^F= 3F^"   
47CA   CD AB 0E               CALL   printStr   
47CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47DC   21 02 00               LD   hl,2   
47DF   E5                     PUSH   hl   
47E0   E5                     PUSH   hl   
47E1   CD B2 0F               CALL   run   
47E4   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
47EB   CD AB 0E               CALL   printStr   
47EE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47FB   E1                     POP   hl   
47FC   E5                     PUSH   hl   
47FD   E5                     PUSH   hl   
47FE   CD B2 0F               CALL   run   
4801   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
480C   76                     HALT      
480D                EXPECTM_3157S160:      
480D   E1                     POP   HL   
480E                          ;*Macro unroll:  test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
480E   31 00 4D               LD   SP,STACK   
4811   CD DF 0E               CALL   coldInit   
4814   CD A2 4B               CALL   execStr   
4817   31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
483A   E1                     POP   HL   
483B   E5                     PUSH   HL   
483C   11 01 00               LD   DE,1   
483F   B7                     OR   A   
4840   ED 52                  SBC   HL,DE   
4842   7D                     LD   A,L   
4843   B4                     OR   H   
4844   CA B6 48               JP   Z,expectM_3158S161   
4847   CD AB 0E               CALL   printStr   
484A   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^"   
4873   CD AB 0E               CALL   printStr   
4876   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4885   21 01 00               LD   hl,1   
4888   E5                     PUSH   hl   
4889   E5                     PUSH   hl   
488A   CD B2 0F               CALL   run   
488D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4894   CD AB 0E               CALL   printStr   
4897   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48A4   E1                     POP   hl   
48A5   E5                     PUSH   hl   
48A6   E5                     PUSH   hl   
48A7   CD B2 0F               CALL   run   
48AA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
48B5   76                     HALT      
48B6                EXPECTM_3158S161:      
48B6   E1                     POP   HL   
48B7                          ;*Macro unroll:  test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
48B7   31 00 4D               LD   SP,STACK   
48BA   CD DF 0E               CALL   coldInit   
48BD   CD A2 4B               CALL   execStr   
48C0   31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",0   
48E3   E1                     POP   HL   
48E4   E5                     PUSH   HL   
48E5   11 01 00               LD   DE,1   
48E8   B7                     OR   A   
48E9   ED 52                  SBC   HL,DE   
48EB   7D                     LD   A,L   
48EC   B4                     OR   H   
48ED   CA 5F 49               JP   Z,expectM_3159S162   
48F0   CD AB 0E               CALL   printStr   
48F3   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^"   
491C   CD AB 0E               CALL   printStr   
491F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
492E   21 01 00               LD   hl,1   
4931   E5                     PUSH   hl   
4932   E5                     PUSH   hl   
4933   CD B2 0F               CALL   run   
4936   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
493D   CD AB 0E               CALL   printStr   
4940   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
494D   E1                     POP   hl   
494E   E5                     PUSH   hl   
494F   E5                     PUSH   hl   
4950   CD B2 0F               CALL   run   
4953   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
495E   76                     HALT      
495F                EXPECTM_3159S162:      
495F   E1                     POP   HL   
4960                          ;*Macro unroll:  test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
4960   31 00 4D               LD   SP,STACK   
4963   CD DF 0E               CALL   coldInit   
4966   CD A2 4B               CALL   execStr   
4969   31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
4999   E1                     POP   HL   
499A   E5                     PUSH   HL   
499B   11 02 00               LD   DE,2   
499E   B7                     OR   A   
499F   ED 52                  SBC   HL,DE   
49A1   7D                     LD   A,L   
49A2   B4                     OR   H   
49A3   CA 22 4A               JP   Z,expectM_3160S163   
49A6   CD AB 0E               CALL   printStr   
49A9   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
49DF   CD AB 0E               CALL   printStr   
49E2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49F1   21 02 00               LD   hl,2   
49F4   E5                     PUSH   hl   
49F5   E5                     PUSH   hl   
49F6   CD B2 0F               CALL   run   
49F9   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4A00   CD AB 0E               CALL   printStr   
4A03   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A10   E1                     POP   hl   
4A11   E5                     PUSH   hl   
4A12   E5                     PUSH   hl   
4A13   CD B2 0F               CALL   run   
4A16   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4A21   76                     HALT      
4A22                EXPECTM_3160S163:      
4A22   E1                     POP   HL   
4A23                          ;*Macro unroll:  test "F := \\a{%a 1+} ; 1F^", 2
4A23   31 00 4D               LD   SP,STACK   
4A26   CD DF 0E               CALL   coldInit   
4A29   CD A2 4B               CALL   execStr   
4A2C   46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 DB   "F := \\a{%a 1+} ; 1F^",0   
4A41   E1                     POP   HL   
4A42   E5                     PUSH   HL   
4A43   11 02 00               LD   DE,2   
4A46   B7                     OR   A   
4A47   ED 52                  SBC   HL,DE   
4A49   7D                     LD   A,L   
4A4A   B4                     OR   H   
4A4B   CA AF 4A               JP   Z,expectM_3161S164   
4A4E   CD AB 0E               CALL   printStr   
4A51   43 6F 64 65 3A 20 46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 .CSTR   "Code: ","F := \\a{%a 1+} ; 1F^"   
4A6C   CD AB 0E               CALL   printStr   
4A6F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A7E   21 02 00               LD   hl,2   
4A81   E5                     PUSH   hl   
4A82   E5                     PUSH   hl   
4A83   CD B2 0F               CALL   run   
4A86   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4A8D   CD AB 0E               CALL   printStr   
4A90   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A9D   E1                     POP   hl   
4A9E   E5                     PUSH   hl   
4A9F   E5                     PUSH   hl   
4AA0   CD B2 0F               CALL   run   
4AA3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4AAE   76                     HALT      
4AAF                EXPECTM_3161S164:      
4AAF   E1                     POP   HL   
4AB0                          ;*Macro unroll:  test "'hello'/sl",5
4AB0   31 00 4D               LD   SP,STACK   
4AB3   CD DF 0E               CALL   coldInit   
4AB6   CD A2 4B               CALL   execStr   
4AB9   27 68 65 6C 6C 6F 27 2F 73 6C 00 DB   "'hello'/sl",0   
4AC4   E1                     POP   HL   
4AC5   E5                     PUSH   HL   
4AC6   11 05 00               LD   DE,5   
4AC9   B7                     OR   A   
4ACA   ED 52                  SBC   HL,DE   
4ACC   7D                     LD   A,L   
4ACD   B4                     OR   H   
4ACE   CA 28 4B               JP   Z,expectM_3162S165   
4AD1   CD AB 0E               CALL   printStr   
4AD4   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 2F 73 6C 00 .CSTR   "Code: ","'hello'/sl"   
4AE5   CD AB 0E               CALL   printStr   
4AE8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4AF7   21 05 00               LD   hl,5   
4AFA   E5                     PUSH   hl   
4AFB   E5                     PUSH   hl   
4AFC   CD B2 0F               CALL   run   
4AFF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4B06   CD AB 0E               CALL   printStr   
4B09   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B16   E1                     POP   hl   
4B17   E5                     PUSH   hl   
4B18   E5                     PUSH   hl   
4B19   CD B2 0F               CALL   run   
4B1C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4B27   76                     HALT      
4B28                EXPECTM_3162S165:      
4B28   E1                     POP   HL   
4B29                          ;*Macro unroll:  test "-1/ab", 1
4B29   31 00 4D               LD   SP,STACK   
4B2C   CD DF 0E               CALL   coldInit   
4B2F   CD A2 4B               CALL   execStr   
4B32   2D 31 2F 61 62 00      DB   "-1/ab",0   
4B38   E1                     POP   HL   
4B39   E5                     PUSH   HL   
4B3A   11 01 00               LD   DE,1   
4B3D   B7                     OR   A   
4B3E   ED 52                  SBC   HL,DE   
4B40   7D                     LD   A,L   
4B41   B4                     OR   H   
4B42   CA 97 4B               JP   Z,expectM_3163S166   
4B45   CD AB 0E               CALL   printStr   
4B48   43 6F 64 65 3A 20 2D 31 2F 61 62 00 .CSTR   "Code: ","-1/ab"   
4B54   CD AB 0E               CALL   printStr   
4B57   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B66   21 01 00               LD   hl,1   
4B69   E5                     PUSH   hl   
4B6A   E5                     PUSH   hl   
4B6B   CD B2 0F               CALL   run   
4B6E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4B75   CD AB 0E               CALL   printStr   
4B78   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B85   E1                     POP   hl   
4B86   E5                     PUSH   hl   
4B87   E5                     PUSH   hl   
4B88   CD B2 0F               CALL   run   
4B8B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4B96   76                     HALT      
4B97                EXPECTM_3163S166:      
4B97   E1                     POP   HL   
4B98                             ; ; test "$1000 0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", $1000
4B98                             ; 
4B98   CD AB 0E               CALL   printStr   
4B9B   44 6F 6E 65 21 00      .CSTR   "Done!"   
4BA1   76                     HALT      
4BA2                             ; executes a null teminated string (null executes exit_)
4BA2                             ; the string should be immedaitely following the call
4BA2                EXECSTR:      ; create a root stack frame
4BA2   C1                     POP   bc   ; bc = code*
4BA3   0B                     DEC   bc   ; dec to prepare for next routine
4BA4   11 00 00               LD   de,0   
4BA7   D5                     PUSH   de   ; push fake IP
4BA8   D5                     PUSH   de   ; push null arg_list*
4BA9   D5                     PUSH   de   ; push null first_arg*
4BAA   D5                     PUSH   de   ; push fake BP
4BAB   DD E9                  JP   (ix)   
4BAD                STKSIZE:   EQU   $100   ; Stack size
4BAD                TIBSIZE:   EQU   $100   ; 256 bytes
4BAD                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
4BAD                          ALIGN   $100   
4C00                          DS   STKSIZE   
4D00                STACK:       
4D00                          ALIGN   $100   
4D00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
4E00                          ALIGN   $100   
4E00                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
4F00                          ALIGN   $100   
4F00                VARS:        
4F00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
4FD0                RESTARTS:      
4FD0                RST08:    DS   2   
4FD2                RST10:    DS   2   
4FD4                RST18:    DS   2   
4FD6                RST20:    DS   2   
4FD8                RST28:    DS   2   
4FDA                RST30:    DS   2   ; 
4FDC                BAUD:     DS   2   ; 
4FDE                INTVEC:   DS   2   ; 
4FE0                NMIVEC:   DS   2   ; 
4FE2                GETCVEC:   DS   2   ; 
4FE4                PUTCVEC:   DS   2   ; 
4FE6                SYSVARS:      
4FE6                             ; initialised sys variables (preserved)
4FE6                VDATAWIDTH:   DS   2   ; 
4FE8                VNUMBASE:   DS   2   ; 
4FEA                VTIBPTR:   DS   2   ; 
4FEC                VBUFPTR:   DS   2   ; 
4FEE                VNEXT:    DS   2   ; 
4FF0                VHEAPPTR:   DS   2   ; 
4FF2                VRECUR:   DS   2   ; 
4FF4                VDEFINE:   DS   2   ; 
4FF6                VSTRMODE:   DS   2   ; 
4FF8                             ; uninitialised sys variables (preserved)
4FF8                VPOINTER:   DS   2   ; 
4FFA                VREMAIN:   DS   2   ; 
4FFC                VSAVEDIP:   DS   2   ; 
4FFE                VSAVEDSP:   DS   2   ; 
5000                VSAVEDNEXT:   DS   2   ; 
5002                VSAVEDBP:   DS   2   ; 
5004                             ; uninitialised sys variables (unpreserved)
5004                VTEMP1:   DS   2   ; 
5006                VTEMP2:   DS   2   ; 
5008                VTEMP3:   DS   2   ; 
500A                VLASTDEF:   DS   2   ; 
500C                TBPTR:    DS   2   ; reserved for tests
500E                TITLEBUF:   DS   20   
5022                HEAP:        
5022                             ; FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
5022                             ; db "{"
5022                             ; db    "[%b /t] %L="                 ; init mutable L [index active]
5022                             ; db    "\\kt{"
5022                             ; db      "0%t!=/qt"                  ; break if type != 0
5022                             ; db      "\\dt:a{"                   ; return talkback to receive data
5022                             ; db        "%L1#!/qt"                ; if not active don't send
5022                             ; db        "%L0# %a="                ; store current index in A
5022                             ; db        "%s %L0# +="              ; inc value of index by step
5022                             ; db        "1%t!=/qt"                ; break if type != 0
5022                             ; db        "%a %e <"                 ; ifte: in range?
5022                             ; db          "{%a 1}{/f %L1#= 0 2}"  ; ifte: /t index, /f active = false, quit
5022                             ; db          "?? %k/rc"              ; ifte: send to sink note: /rc recur
5022                             ; db      "} 0 %k^"                   ; init sink
5022                             ; db    "}"
5022                             ; db "}"
5022                             ; db 0
5022                             ; FUNC map, 0, "sf"                   ; map
5022                             ; db "{"
5022                             ; db    "\\kt{"
5022                             ; db      "0%t!=/qt"                  ; break if type != 0
5022                             ; db      "\\dt{"                     ; call source with tb
5022                             ; db        "1%t=="                   ; ifte: type == 1 ?
5022                             ; db        "{%d %f^}{%d}"            ; ifte: func(data) or data
5022                             ; db        "?? %t %k^"               ; ifte: send to sink
5022                             ; db      "} 0 %s^"
5022                             ; db    "}"
5022                             ; db "}"
5022                             ; db 0
5022                             ; ; /ft filter
5022                             ; ; src pred -- src1
5022                             ; FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
5022                             ; db "{"
5022                             ; db    "[0]%T="
5022                             ; db    "\\kt{"                       ; return talkback to receive data
5022                             ; db      "\\dt{"                     ; call source with tb
5022                             ; db        "["
5022                             ; db          "{%d %T0#= /t}"         ; case 0: store talkback in T[0], return true
5022                             ; db          "{%d %p^}"              ; case 1: return boolean based on predicate
5022                             ; db          "{/t}"                  ; case 2: return true
5022                             ; db        "]%t#^"                   ; select on %t
5022                             ; db        "{%d %t %k^}{0 1 %T0#^}"  ; ifte: true send d to sink, false send 1 to talkback
5022                             ; db        "??"
5022                             ; db      "} 0 %s^"
5022                             ; db    "}"
5022                             ; db "}"
5022                             ; db 0
5022                             ; FUNC forEach, 1, "spT"
5022                             ; db "{"
5022                             ; db    "[0]%T="
5022                             ; db    "\\dt{"                       ; return talkback to receive data ; $56AA
5022                             ; db      "2%t==/qt"                    ; if type == 2 skip
5022                             ; db      "0%t=="                   ; ifte: type = 0 ?
5022                             ; db      "{%d %T0#=}{%d %p^}"      ; ifte: 0: store talkback, 1: send data
5022                             ; db      "??"                      ; ifte:
5022                             ; db      "0 1 %T0#^"               ; 0 or 1: get next src data item
5022                             ; db    "} 0 %s^"
5022                             ; db "}"
5022                             ; db 0
5022                             ; FUNC fold, 1, "sirA"                       ; src, init, reducer
5022                             ; db "{"                                  ; reducer: \\da00bbLi4u
5022                             ; db    "[%i]%A="
5022                             ; db    "\\kt{"                         ; return talkback to receive data
5022                             ; db      "\\dt{"                         ; call source with tb
5022                             ; db        "1%t=="                       ; ifte: type == 1 ?
5022                             ; db        "{ %d %A0# %r^ %A0#= %A0#}{%d}"      ; ifte: reduce -> acc, acc or data
5022                             ; db        "?? %t %k^"                    ; ifte: send to sink
5022                             ; db      "} 0 %s^"
5022                             ; db    "}"
5022                             ; db "}"
5022                             ; db 0
5022                             ; 


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1148 IN MAIN.asm
                    > USED AT LINE 2372 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 2210 IN MAIN.asm
                    > USED AT LINE 2356 IN MAIN.asm
                    > USED AT LINE 2418 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 1834 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
                    > USED AT LINE 1839 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 407 IN MAIN.asm
                    > USED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 861 IN MAIN.asm
                    > USED AT LINE 881 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 908 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
                    > USED AT LINE 929 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
                    > USED AT LINE 965 IN MAIN.asm
                    > USED AT LINE 971 IN MAIN.asm
                    > USED AT LINE 975 IN MAIN.asm
                    > USED AT LINE 980 IN MAIN.asm
                    > USED AT LINE 985 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1497 IN MAIN.asm
                    > USED AT LINE 2375 IN MAIN.asm
                    > USED AT LINE 2467 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 2229 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2381 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2383 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2385 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2310 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2285 IN MAIN.asm
                    > USED AT LINE 2304 IN MAIN.asm
DQUOTE_:            0204 DEFINED AT LINE 173 IN MAIN.asm
COMMA_:             0204 DEFINED AT LINE 174 IN MAIN.asm
DOLLAR_:            0206 DEFINED AT LINE 177 IN MAIN.asm
PERCENT_:           0209 DEFINED AT LINE 180 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 183 IN MAIN.asm
LPAREN_:            020F DEFINED AT LINE 186 IN MAIN.asm
DOT_:               0212 DEFINED AT LINE 189 IN MAIN.asm
SLASH_:             0215 DEFINED AT LINE 192 IN MAIN.asm
NUM_:               0218 DEFINED AT LINE 195 IN MAIN.asm
SEMICOLON_:         021B DEFINED AT LINE 198 IN MAIN.asm
QUESTION_:          021E DEFINED AT LINE 201 IN MAIN.asm
BANG_:              0221 DEFINED AT LINE 204 IN MAIN.asm
BANG:               0221 DEFINED AT LINE 205 IN MAIN.asm
NOT:                022C DEFINED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
EQ_:                0232 DEFINED AT LINE 217 IN MAIN.asm
EQ:                 0232 DEFINED AT LINE 218 IN MAIN.asm
EQ0:                023C DEFINED AT LINE 225 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
EQ1:                023D DEFINED AT LINE 227 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
GT_:                0241 DEFINED AT LINE 231 IN MAIN.asm
GT:                 0241 DEFINED AT LINE 232 IN MAIN.asm
LT_:                024C DEFINED AT LINE 240 IN MAIN.asm
LT:                 024C DEFINED AT LINE 241 IN MAIN.asm
LT1:                0255 DEFINED AT LINE 248 IN MAIN.asm
                    > USED AT LINE 239 IN MAIN.asm
HASH_:              025E DEFINED AT LINE 256 IN MAIN.asm
HASH:               025E DEFINED AT LINE 257 IN MAIN.asm
ARRAYINDEX:         025E DEFINED AT LINE 258 IN MAIN.asm
ARRAYINDEX0:        0266 DEFINED AT LINE 264 IN MAIN.asm
ARRAYINDEX1:        0267 DEFINED AT LINE 266 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
ARRAYINDEX2:        0273 DEFINED AT LINE 275 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
RPAREN_:            0276 DEFINED AT LINE 280 IN MAIN.asm
RPAREN:             0276 DEFINED AT LINE 281 IN MAIN.asm
AMPER_:             027E DEFINED AT LINE 288 IN MAIN.asm
AMPER:              027E DEFINED AT LINE 289 IN MAIN.asm
AND:                027E DEFINED AT LINE 290 IN MAIN.asm
MINUS_:             0288 DEFINED AT LINE 303 IN MAIN.asm
MINUS:              0288 DEFINED AT LINE 304 IN MAIN.asm
SUB:                0294 DEFINED AT LINE 312 IN MAIN.asm
                    > USED AT LINE 309 IN MAIN.asm
SUB1:               029E DEFINED AT LINE 319 IN MAIN.asm
                    > USED AT LINE 315 IN MAIN.asm
STAR_:              02A6 DEFINED AT LINE 327 IN MAIN.asm
STAR:               02A6 DEFINED AT LINE 328 IN MAIN.asm
MUL:                02A6 DEFINED AT LINE 329 IN MAIN.asm
MUL2:               02A8 DEFINED AT LINE 332 IN MAIN.asm
MUL3:               02B0 DEFINED AT LINE 337 IN MAIN.asm
                    > USED AT LINE 346 IN MAIN.asm
PLUS_:              02C2 DEFINED AT LINE 352 IN MAIN.asm
PLUS:               02C2 DEFINED AT LINE 353 IN MAIN.asm
ADD:                02C2 DEFINED AT LINE 354 IN MAIN.asm
ADD1:               02CD DEFINED AT LINE 362 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
ADD3:               02D1 DEFINED AT LINE 367 IN MAIN.asm
                    > USED AT LINE 299 IN MAIN.asm
                    > USED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 348 IN MAIN.asm
                    > USED AT LINE 585 IN MAIN.asm
                    > USED AT LINE 1003 IN MAIN.asm
                    > USED AT LINE 1297 IN MAIN.asm
                    > USED AT LINE 1463 IN MAIN.asm
ADD4:               02DB DEFINED AT LINE 375 IN MAIN.asm
                    > USED AT LINE 371 IN MAIN.asm
COLON_:             02DE DEFINED AT LINE 378 IN MAIN.asm
COLON:              02DE DEFINED AT LINE 379 IN MAIN.asm
DEFINESTART:        02EB DEFINED AT LINE 387 IN MAIN.asm
                    > USED AT LINE 383 IN MAIN.asm
UPCASE_:            02F4 DEFINED AT LINE 394 IN MAIN.asm
UPCASE:             02F4 DEFINED AT LINE 395 IN MAIN.asm
SEMICOLON:          02F9 DEFINED AT LINE 401 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
DEFINEEND:          02F9 DEFINED AT LINE 402 IN MAIN.asm
DEFINEEND1:         030B DEFINED AT LINE 411 IN MAIN.asm
                    > USED AT LINE 406 IN MAIN.asm
LOWCASE_:           030D DEFINED AT LINE 419 IN MAIN.asm
LOWCASE:            030D DEFINED AT LINE 420 IN MAIN.asm
IDENT1:             0312 DEFINED AT LINE 424 IN MAIN.asm
                    > USED AT LINE 398 IN MAIN.asm
LBRACK_:            031F DEFINED AT LINE 436 IN MAIN.asm
LBRACK:             031F DEFINED AT LINE 437 IN MAIN.asm
ARRAYSTART:         031F DEFINED AT LINE 438 IN MAIN.asm
BACKSLASH_:         033B DEFINED AT LINE 453 IN MAIN.asm
BACKSLASH:          033B DEFINED AT LINE 454 IN MAIN.asm
LAMBDA:             033B DEFINED AT LINE 455 IN MAIN.asm
LAMBDA1:            0340 DEFINED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 462 IN MAIN.asm
LAMBDA2:            0350 DEFINED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
RBRACK_:            035C DEFINED AT LINE 475 IN MAIN.asm
RBRACK:             035C DEFINED AT LINE 476 IN MAIN.asm
ARRAYEND:           035C DEFINED AT LINE 477 IN MAIN.asm
ARRAYEND1:          0378 DEFINED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
ARRAYEND2:          0388 DEFINED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 500 IN MAIN.asm
ARRAYEND3:          038D DEFINED AT LINE 508 IN MAIN.asm
                    > USED AT LINE 493 IN MAIN.asm
CARET_:             03AC DEFINED AT LINE 529 IN MAIN.asm
CARET:              03AC DEFINED AT LINE 533 IN MAIN.asm
GO:                 03AC DEFINED AT LINE 534 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03AD DEFINED AT LINE 536 IN MAIN.asm
                    > USED AT LINE 1510 IN MAIN.asm
                    > USED AT LINE 1512 IN MAIN.asm
                    > USED AT LINE 1682 IN MAIN.asm
GO2:                03B3 DEFINED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 539 IN MAIN.asm
GRAVE_:             03C2 DEFINED AT LINE 550 IN MAIN.asm
GRAVE:              03C2 DEFINED AT LINE 551 IN MAIN.asm
PRINTLITERAL:       03C2 DEFINED AT LINE 552 IN MAIN.asm
PRINTLITERAL0:      03C9 DEFINED AT LINE 556 IN MAIN.asm
                    > USED AT LINE 563 IN MAIN.asm
PRINTLITERAL1:      03CC DEFINED AT LINE 560 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
LBRACE_:            03D8 DEFINED AT LINE 567 IN MAIN.asm
LBRACE:             03D8 DEFINED AT LINE 568 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
PIPE_:              03DD DEFINED AT LINE 574 IN MAIN.asm
PIPE:               03DD DEFINED AT LINE 575 IN MAIN.asm
OR:                 03DD DEFINED AT LINE 576 IN MAIN.asm
RBRACE_:            03E8 DEFINED AT LINE 587 IN MAIN.asm
TILDE_:             03EB DEFINED AT LINE 591 IN MAIN.asm
UNDERSCORE_:        03EE DEFINED AT LINE 594 IN MAIN.asm
CHAR:               03EE DEFINED AT LINE 595 IN MAIN.asm
AT_:                03F6 DEFINED AT LINE 603 IN MAIN.asm
AT:                 03F6 DEFINED AT LINE 604 IN MAIN.asm
ADDR:               03F6 DEFINED AT LINE 605 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 617 IN MAIN.asm
PRINTCHAR:          0412 DEFINED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
PRINTSTRING:        0421 DEFINED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
PRINTSTRING0:       0428 DEFINED AT LINE 647 IN MAIN.asm
                    > USED AT LINE 654 IN MAIN.asm
PRINTSTRING1:       042B DEFINED AT LINE 651 IN MAIN.asm
                    > USED AT LINE 646 IN MAIN.asm
PRINTNUMBER:        0436 DEFINED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
PRINTDEC:           0441 DEFINED AT LINE 668 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
PRINTDEC1:          044F DEFINED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 674 IN MAIN.asm
PRINTDEC2:          045E DEFINED AT LINE 688 IN MAIN.asm
                    > USED AT LINE 677 IN MAIN.asm
PRINTDEC3:          046E DEFINED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 690 IN MAIN.asm
PRINTDEC4:          048E DEFINED AT LINE 716 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 707 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
                    > USED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 714 IN MAIN.asm
PRINTDEC5:          0490 DEFINED AT LINE 718 IN MAIN.asm
                    > USED AT LINE 721 IN MAIN.asm
PRINTDEC6:          04A0 DEFINED AT LINE 730 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
PRINTDEC7:          04A1 DEFINED AT LINE 732 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
PRINTHEX0:          04A7 DEFINED AT LINE 743 IN MAIN.asm
                    > USED AT LINE 624 IN MAIN.asm
PRINTHEX:           04AD DEFINED AT LINE 746 IN MAIN.asm
                    > USED AT LINE 663 IN MAIN.asm
PRINTHEX1:          04B5 DEFINED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 745 IN MAIN.asm
PRINTHEX2:          04C0 DEFINED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
PRINTHEX3:          04CF DEFINED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
                    > USED AT LINE 760 IN MAIN.asm
PRINTHEX4:          04D8 DEFINED AT LINE 775 IN MAIN.asm
                    > USED AT LINE 773 IN MAIN.asm
DQUOTE:             04E3 DEFINED AT LINE 787 IN MAIN.asm
UNDERSCORE:         04E3 DEFINED AT LINE 788 IN MAIN.asm
COMMA:              04E3 DEFINED AT LINE 789 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 797 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 798 IN MAIN.asm
COMMAND_A_:         0526 DEFINED AT LINE 834 IN MAIN.asm
COMMAND_B_:         0538 DEFINED AT LINE 848 IN MAIN.asm
COMMAND_D_:         0544 DEFINED AT LINE 858 IN MAIN.asm
COMMAND_F_:         054A DEFINED AT LINE 864 IN MAIN.asm
COMMAND_H_:         0565 DEFINED AT LINE 884 IN MAIN.asm
COMMAND_I_:         056B DEFINED AT LINE 891 IN MAIN.asm
KEY_:               0571 DEFINED AT LINE 897 IN MAIN.asm
COMMAND_M_:         0574 DEFINED AT LINE 901 IN MAIN.asm
OUTPUT_:            057A DEFINED AT LINE 907 IN MAIN.asm
COMMAND_P_:         057D DEFINED AT LINE 911 IN MAIN.asm
COMMAND_Q_:         0580 DEFINED AT LINE 916 IN MAIN.asm
COMMAND_R_:         0586 DEFINED AT LINE 922 IN MAIN.asm
COMMAND_S_:         0592 DEFINED AT LINE 932 IN MAIN.asm
TRUE_:              05A7 DEFINED AT LINE 948 IN MAIN.asm
COMMAND_V_:         05AA DEFINED AT LINE 952 IN MAIN.asm
COMMAND_W_:         05BF DEFINED AT LINE 968 IN MAIN.asm
XOR_:               05C5 DEFINED AT LINE 974 IN MAIN.asm
COMMAND_NOP_:       05C8 DEFINED AT LINE 979 IN MAIN.asm
COMMAND_DEFAULT_:   05CB DEFINED AT LINE 984 IN MAIN.asm
NOP:                05CE DEFINED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 981 IN MAIN.asm
DIV:                05D0 DEFINED AT LINE 994 IN MAIN.asm
                    > USED AT LINE 986 IN MAIN.asm
ABSOLUTE:           05E1 DEFINED AT LINE 1007 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
ABSOLUTE1:          05EC DEFINED AT LINE 1017 IN MAIN.asm
                    > USED AT LINE 1010 IN MAIN.asm
ADDROF:             05EF DEFINED AT LINE 1023 IN MAIN.asm
                    > USED AT LINE 838 IN MAIN.asm
ADDROF1:            0603 DEFINED AT LINE 1035 IN MAIN.asm
                    > USED AT LINE 1031 IN MAIN.asm
ADDROF2:            060E DEFINED AT LINE 1044 IN MAIN.asm
                    > USED AT LINE 1027 IN MAIN.asm
                    > USED AT LINE 1029 IN MAIN.asm
                    > USED AT LINE 1034 IN MAIN.asm
ARRAYLENGTH:        0610 DEFINED AT LINE 1049 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
                    > USED AT LINE 44
ARRAYLENGTH1:       0616 DEFINED AT LINE 1056 IN MAIN.asm
                    > USED AT LINE 1067 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
ARRAYSIZE:          0619 DEFINED AT LINE 1062 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
PERFORMM_1542S1063: 0620 DEFINED AT LINE 45
                    > USED AT LINE 43
BREAK:              062D DEFINED AT LINE 1075 IN MAIN.asm
                    > USED AT LINE 854 IN MAIN.asm
BREAK1:             0634 DEFINED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 1079 IN MAIN.asm
BYTEMODE:           0647 DEFINED AT LINE 1093 IN MAIN.asm
                    > USED AT LINE 852 IN MAIN.asm
BYTEMODE1:          064A DEFINED AT LINE 1095 IN MAIN.asm
                    > USED AT LINE 1284 IN MAIN.asm
COMMENT:            064F DEFINED AT LINE 1100 IN MAIN.asm
                    > USED AT LINE 802 IN MAIN.asm
                    > USED AT LINE 1104 IN MAIN.asm
CONSTHEAPSTART:     0658 DEFINED AT LINE 1108 IN MAIN.asm
                    > USED AT LINE 962 IN MAIN.asm
CONSTTIBSTART:      065E DEFINED AT LINE 1112 IN MAIN.asm
                    > USED AT LINE 964 IN MAIN.asm
CONSTBUFSTART:      0664 DEFINED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
DECBASE:            066A DEFINED AT LINE 1120 IN MAIN.asm
                    > USED AT LINE 860 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
DECBASE1:           066D DEFINED AT LINE 1122 IN MAIN.asm
                    > USED AT LINE 1132 IN MAIN.asm
ERROR1:             0672 DEFINED AT LINE 1126 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
                    > USED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 888 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 905 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
                    > USED AT LINE 930 IN MAIN.asm
                    > USED AT LINE 946 IN MAIN.asm
                    > USED AT LINE 966 IN MAIN.asm
                    > USED AT LINE 972 IN MAIN.asm
HEXBASE:            0678 DEFINED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 886 IN MAIN.asm
INPUT:              067E DEFINED AT LINE 1136 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
KEY:                0689 DEFINED AT LINE 1147 IN MAIN.asm
                    > USED AT LINE 899 IN MAIN.asm
OUTPUT:             0692 DEFINED AT LINE 1157 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
QUIT:               069B DEFINED AT LINE 1168 IN MAIN.asm
                    > USED AT LINE 918 IN MAIN.asm
QUIT1:              06A2 DEFINED AT LINE 1174 IN MAIN.asm
                    > USED AT LINE 1172 IN MAIN.asm
RECUR:              06A5 DEFINED AT LINE 1177 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
REMAIN:             06AB DEFINED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 926 IN MAIN.asm
STRINGBEGIN:        06B1 DEFINED AT LINE 1187 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
STRINGEND:          06B9 DEFINED AT LINE 1192 IN MAIN.asm
                    > USED AT LINE 938 IN MAIN.asm
STRINGEND1:         06E0 DEFINED AT LINE 1210 IN MAIN.asm
                    > USED AT LINE 1190 IN MAIN.asm
STRINGLENGTH:       06E8 DEFINED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 942 IN MAIN.asm
                    > USED AT LINE 44
STRINGLENGTH1:      06EE DEFINED AT LINE 1219 IN MAIN.asm
                    > USED AT LINE 1225 IN MAIN.asm
STRINGLENGTH2:      06F0 DEFINED AT LINE 1222 IN MAIN.asm
                    > USED AT LINE 1218 IN MAIN.asm
STRINGLENGTH3:      06F4 DEFINED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 1234 IN MAIN.asm
STRINGSIZE:         06F7 DEFINED AT LINE 1230 IN MAIN.asm
                    > USED AT LINE 944 IN MAIN.asm
PERFORMM_1690S1231: 06FE DEFINED AT LINE 45
                    > USED AT LINE 43
STRINGCOMPARE:      0703 DEFINED AT LINE 1239 IN MAIN.asm
                    > USED AT LINE 936 IN MAIN.asm
STRINGCOMPARE1:     0705 DEFINED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
STRINGCOMPARE2:     0710 DEFINED AT LINE 1251 IN MAIN.asm
                    > USED AT LINE 1245 IN MAIN.asm
STRINGCOMPARE3:     0715 DEFINED AT LINE 1254 IN MAIN.asm
                    > USED AT LINE 1247 IN MAIN.asm
STRINGCOMPARE4:     0718 DEFINED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1253 IN MAIN.asm
VARBUFPTR:          071B DEFINED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
VARHEAPPTR:         0724 DEFINED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 956 IN MAIN.asm
VARTIBPTR:          072D DEFINED AT LINE 1270 IN MAIN.asm
                    > USED AT LINE 958 IN MAIN.asm
VARIABLE:           0736 DEFINED AT LINE 1275 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
                    > USED AT LINE 1263 IN MAIN.asm
                    > USED AT LINE 1268 IN MAIN.asm
                    > USED AT LINE 1273 IN MAIN.asm
CONSTANT:           0739 DEFINED AT LINE 1277 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
                    > USED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
WORDMODE:           073C DEFINED AT LINE 1282 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
XOR:                0742 DEFINED AT LINE 1287 IN MAIN.asm
                    > USED AT LINE 976 IN MAIN.asm
XOR1:               0743 DEFINED AT LINE 1289 IN MAIN.asm
RANGESRC:           074D DEFINED AT LINE 32
                    > USED AT LINE 928 IN MAIN.asm
RANGESRCM_1755S1305: 075C DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          07E1 DEFINED AT LINE 32
                    > USED AT LINE 840 IN MAIN.asm
ARRAYITERM_1774S1325: 07EE DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         0862 DEFINED AT LINE 32
                    > USED AT LINE 940 IN MAIN.asm
STRINGITERM_1793S1345: 086F DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                08EA DEFINED AT LINE 32
                    > USED AT LINE 903 IN MAIN.asm
MAPM_1813S1367:     08F7 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             092C DEFINED AT LINE 32
                    > USED AT LINE 872 IN MAIN.asm
FILTERM_1827S1382:  093A DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               098A DEFINED AT LINE 32
                    > USED AT LINE 866 IN MAIN.asm
FOLDM_1846S1402:    0999 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            09DC DEFINED AT LINE 32
                    > USED AT LINE 868 IN MAIN.asm
FOREACHM_1860S1417: 09EA DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0A28 DEFINED AT LINE 32
                    > USED AT LINE 870 IN MAIN.asm
FUNCSRCM_1874S1432: 0A34 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0A61 DEFINED AT LINE 32
                    > USED AT LINE 620 IN MAIN.asm
PRINTARRAYM_1884S1443: 0A6F DEFINED AT LINE 39
                    > USED AT LINE 35
TILDE:              0AA9 DEFINED AT LINE 1454 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
INVERT:             0AA9 DEFINED AT LINE 1455 IN MAIN.asm
DOLLAR:             0AB3 DEFINED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
HEXNUM:             0AB3 DEFINED AT LINE 1467 IN MAIN.asm
HEXNUM1:            0AB6 DEFINED AT LINE 1469 IN MAIN.asm
                    > USED AT LINE 1486 IN MAIN.asm
HEXNUM2:            0ABE DEFINED AT LINE 1475 IN MAIN.asm
                    > USED AT LINE 1473 IN MAIN.asm
QUESTION:           0AD0 DEFINED AT LINE 1490 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
IF:                 0AD0 DEFINED AT LINE 1491 IN MAIN.asm
IFTE:               0ADC DEFINED AT LINE 1502 IN MAIN.asm
                    > USED AT LINE 1495 IN MAIN.asm
IFTE1:              0ADD DEFINED AT LINE 1504 IN MAIN.asm
                    > USED AT LINE 1498 IN MAIN.asm
QUOTE:              0AE9 DEFINED AT LINE 1516 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
STRING:             0AE9 DEFINED AT LINE 1517 IN MAIN.asm
STRING1:            0AF2 DEFINED AT LINE 1524 IN MAIN.asm
                    > USED AT LINE 1532 IN MAIN.asm
STRING2:            0AF5 DEFINED AT LINE 1528 IN MAIN.asm
                    > USED AT LINE 1523 IN MAIN.asm
STRING3:            0AFB DEFINED AT LINE 1533 IN MAIN.asm
                    > USED AT LINE 1531 IN MAIN.asm
PERCENT:            0B03 DEFINED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
ARG:                0B03 DEFINED AT LINE 1544 IN MAIN.asm
ARG0:               0B1F DEFINED AT LINE 1563 IN MAIN.asm
                    > USED AT LINE 1569 IN MAIN.asm
ARG0A:              0B28 DEFINED AT LINE 1571 IN MAIN.asm
                    > USED AT LINE 1550 IN MAIN.asm
                    > USED AT LINE 1555 IN MAIN.asm
ARG1:               0B2D DEFINED AT LINE 1574 IN MAIN.asm
                    > USED AT LINE 1567 IN MAIN.asm
ARG1A:              0B35 DEFINED AT LINE 1581 IN MAIN.asm
                    > USED AT LINE 1573 IN MAIN.asm
NUM:                0B38 DEFINED AT LINE 1586 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
                    > USED AT LINE 311 IN MAIN.asm
NUM0:               0B41 DEFINED AT LINE 1592 IN MAIN.asm
                    > USED AT LINE 1590 IN MAIN.asm
NUM1:               0B42 DEFINED AT LINE 1594 IN MAIN.asm
                    > USED AT LINE 1611 IN MAIN.asm
NUM2:               0B5A DEFINED AT LINE 1612 IN MAIN.asm
                    > USED AT LINE 1477 IN MAIN.asm
                    > USED AT LINE 1479 IN MAIN.asm
                    > USED AT LINE 1597 IN MAIN.asm
                    > USED AT LINE 1599 IN MAIN.asm
NUM3:               0B65 DEFINED AT LINE 1620 IN MAIN.asm
                    > USED AT LINE 1615 IN MAIN.asm
RBRACE:             0B68 DEFINED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
BLOCKEND:           0B68 DEFINED AT LINE 1626 IN MAIN.asm
                    > USED AT LINE 1090 IN MAIN.asm
                    > USED AT LINE 1175 IN MAIN.asm
BLOCKEND1:          0B9A DEFINED AT LINE 1648 IN MAIN.asm
                    > USED AT LINE 1641 IN MAIN.asm
BLOCKEND2:          0BA6 DEFINED AT LINE 1655 IN MAIN.asm
                    > USED AT LINE 1647 IN MAIN.asm
BLOCKEND3:          0BB8 DEFINED AT LINE 1669 IN MAIN.asm
                    > USED AT LINE 1661 IN MAIN.asm
BLOCKEND4:          0BCC DEFINED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 1677 IN MAIN.asm
GOBLOCK:            0BD5 DEFINED AT LINE 1684 IN MAIN.asm
                    > USED AT LINE 544 IN MAIN.asm
                    > USED AT LINE 548 IN MAIN.asm
GOBLOCK2:           0BFA DEFINED AT LINE 1701 IN MAIN.asm
                    > USED AT LINE 1782 IN MAIN.asm
GOBLOCK3:           0C04 DEFINED AT LINE 1707 IN MAIN.asm
GOFUNC:             0C08 DEFINED AT LINE 1711 IN MAIN.asm
                    > USED AT LINE 546 IN MAIN.asm
GOFUNC1:            0C21 DEFINED AT LINE 1730 IN MAIN.asm
                    > USED AT LINE 1740 IN MAIN.asm
GOFUNC2:            0C27 DEFINED AT LINE 1737 IN MAIN.asm
                    > USED AT LINE 1729 IN MAIN.asm
GOFUNC3:            0C32 DEFINED AT LINE 1743 IN MAIN.asm
                    > USED AT LINE 1719 IN MAIN.asm
GOFUNC4:            0C4A DEFINED AT LINE 1760 IN MAIN.asm
                    > USED AT LINE 1757 IN MAIN.asm
GOFUNC5:            0C4D DEFINED AT LINE 1763 IN MAIN.asm
                    > USED AT LINE 1769 IN MAIN.asm
GOFUNC6:            0C50 DEFINED AT LINE 1767 IN MAIN.asm
                    > USED AT LINE 1762 IN MAIN.asm
GOFUNC7:            0C53 DEFINED AT LINE 1770 IN MAIN.asm
GOFUNC8:            0C57 DEFINED AT LINE 1775 IN MAIN.asm
                    > USED AT LINE 1695 IN MAIN.asm
                    > USED AT LINE 1759 IN MAIN.asm
ASSIGN:             0C62 DEFINED AT LINE 1786 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
ASSIGN0:            0C64 DEFINED AT LINE 1789 IN MAIN.asm
                    > USED AT LINE 318 IN MAIN.asm
                    > USED AT LINE 361 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
ASSIGN1:            0C68 DEFINED AT LINE 1792 IN MAIN.asm
                    > USED AT LINE 410 IN MAIN.asm
ASSIGN2:            0C71 DEFINED AT LINE 1799 IN MAIN.asm
                    > USED AT LINE 1796 IN MAIN.asm
EQUALS:             0C73 DEFINED AT LINE 1804 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
NOTEQUALS:          0C7A DEFINED AT LINE 1810 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
LESSTHANEQ:         0C81 DEFINED AT LINE 1818 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
LESSTHAN:           0C86 DEFINED AT LINE 1825 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
LESSTHAN1:          0C8B DEFINED AT LINE 1830 IN MAIN.asm
                    > USED AT LINE 1821 IN MAIN.asm
TRUE1:              0C8E DEFINED AT LINE 1833 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
                    > USED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 1813 IN MAIN.asm
NULL1:              0C94 DEFINED AT LINE 1837 IN MAIN.asm
FALSE1:             0C94 DEFINED AT LINE 1838 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 1808 IN MAIN.asm
                    > USED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 1828 IN MAIN.asm
                    > USED AT LINE 1831 IN MAIN.asm
SHIFTLEFT:          0C9A DEFINED AT LINE 1845 IN MAIN.asm
                    > USED AT LINE 245 IN MAIN.asm
SHIFTLEFT1:         0CA2 DEFINED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 1855 IN MAIN.asm
SHIFTLEFT2:         0CA3 DEFINED AT LINE 1854 IN MAIN.asm
                    > USED AT LINE 1851 IN MAIN.asm
SHIFTRIGHT:         0CAA DEFINED AT LINE 1862 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
SHIFTRIGHT1:        0CB2 DEFINED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 1873 IN MAIN.asm
SHIFTRIGHT2:        0CB6 DEFINED AT LINE 1872 IN MAIN.asm
                    > USED AT LINE 1868 IN MAIN.asm
DIVIDE:             0CBD DEFINED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 999 IN MAIN.asm
DIVIDE1:            0CC2 DEFINED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1896 IN MAIN.asm
DIVIDE2:            0CCF DEFINED AT LINE 1892 IN MAIN.asm
                    > USED AT LINE 1889 IN MAIN.asm
DIVIDE3:            0CD0 DEFINED AT LINE 1894 IN MAIN.asm
                    > USED AT LINE 1891 IN MAIN.asm
DOTNEXT:            0CD6 DEFINED AT LINE 1900 IN MAIN.asm
                    > USED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
DOTNEXT1:           0CDE DEFINED AT LINE 1905 IN MAIN.asm
                    > USED AT LINE 1903 IN MAIN.asm
PARSEARGS:          0CF0 DEFINED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
PARSEARGS1:         0CFA DEFINED AT LINE 1923 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
PARSEARGS1A:        0D02 DEFINED AT LINE 1929 IN MAIN.asm
                    > USED AT LINE 1926 IN MAIN.asm
PARSEARGS2:         0D0A DEFINED AT LINE 1934 IN MAIN.asm
PARSEARGS3:         0D12 DEFINED AT LINE 1942 IN MAIN.asm
                    > USED AT LINE 1928 IN MAIN.asm
                    > USED AT LINE 1940 IN MAIN.asm
PARSEARGS4:         0D15 DEFINED AT LINE 1945 IN MAIN.asm
                    > USED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 1933 IN MAIN.asm
PARSEARGS5:         0D1B DEFINED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1949 IN MAIN.asm
PARSEBLOCK:         0D26 DEFINED AT LINE 1964 IN MAIN.asm
                    > USED AT LINE 468 IN MAIN.asm
                    > USED AT LINE 569 IN MAIN.asm
PARSEBLOCK1:        0D2A DEFINED AT LINE 1968 IN MAIN.asm
                    > USED AT LINE 1972 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
                    > USED AT LINE 1997 IN MAIN.asm
                    > USED AT LINE 2002 IN MAIN.asm
                    > USED AT LINE 2006 IN MAIN.asm
PARSEBLOCK2:        0D56 DEFINED AT LINE 1995 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 1986 IN MAIN.asm
PARSEBLOCK3:        0D59 DEFINED AT LINE 1998 IN MAIN.asm
                    > USED AT LINE 1989 IN MAIN.asm
                    > USED AT LINE 1991 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
PARSEBLOCK4:        0D61 DEFINED AT LINE 2004 IN MAIN.asm
                    > USED AT LINE 1975 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
PARSEBLOCK5:        0D64 DEFINED AT LINE 2007 IN MAIN.asm
                    > USED AT LINE 2003 IN MAIN.asm
PARSEBLOCK6:        0D8C DEFINED AT LINE 2026 IN MAIN.asm
                    > USED AT LINE 2013 IN MAIN.asm
CREATEFUNC:         0D90 DEFINED AT LINE 2034 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
CREATEFUNC0:        0DAF DEFINED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2044 IN MAIN.asm
CREATEFUNC1:        0DC7 DEFINED AT LINE 2067 IN MAIN.asm
                    > USED AT LINE 2063 IN MAIN.asm
CREATEFUNC2:        0DDA DEFINED AT LINE 2080 IN MAIN.asm
                    > USED AT LINE 2076 IN MAIN.asm
CREATEFUNC2A:       0DF9 DEFINED AT LINE 2106 IN MAIN.asm
                    > USED AT LINE 2093 IN MAIN.asm
CREATEFUNC3:        0E08 DEFINED AT LINE 2118 IN MAIN.asm
                    > USED AT LINE 2128 IN MAIN.asm
CREATEFUNC4:        0E13 DEFINED AT LINE 2129 IN MAIN.asm
CREATEFUNC5:        0E14 DEFINED AT LINE 2131 IN MAIN.asm
                    > USED AT LINE 2047 IN MAIN.asm
LOWERCASETABLE:     0E32 DEFINED AT LINE 2161 IN MAIN.asm
                    > USED AT LINE 804 IN MAIN.asm
LOWERCASETABLE1:    0E3C DEFINED AT LINE 2168 IN MAIN.asm
                    > USED AT LINE 2177 IN MAIN.asm
LOWERCASETABLE2:    0E43 DEFINED AT LINE 2174 IN MAIN.asm
                    > USED AT LINE 2165 IN MAIN.asm
                    > USED AT LINE 2167 IN MAIN.asm
COMMANDTABLE:       0E48 DEFINED AT LINE 2183 IN MAIN.asm
                    > USED AT LINE 618 IN MAIN.asm
COMMANDTABLE1:      0E49 DEFINED AT LINE 2185 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
COMMANDTABLE2:      0E4A DEFINED AT LINE 2187 IN MAIN.asm
                    > USED AT LINE 2200 IN MAIN.asm
COMMANDTABLE3:      0E51 DEFINED AT LINE 2193 IN MAIN.asm
                    > USED AT LINE 2190 IN MAIN.asm
COMMANDTABLE4:      0E5A DEFINED AT LINE 2201 IN MAIN.asm
                    > USED AT LINE 2192 IN MAIN.asm
                    > USED AT LINE 2196 IN MAIN.asm
PUTSTR0:            0E60 DEFINED AT LINE 2209 IN MAIN.asm
                    > USED AT LINE 2215 IN MAIN.asm
PUTSTR:             0E64 DEFINED AT LINE 2212 IN MAIN.asm
                    > USED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 2279 IN MAIN.asm
                    > USED AT LINE 2336 IN MAIN.asm
NESTING:            0E69 DEFINED AT LINE 2228 IN MAIN.asm
                    > USED AT LINE 2361 IN MAIN.asm
                    > USED AT LINE 2419 IN MAIN.asm
NESTING0:           0E73 DEFINED AT LINE 2234 IN MAIN.asm
                    > USED AT LINE 2230 IN MAIN.asm
                    > USED AT LINE 2232 IN MAIN.asm
NESTING1A:          0E7A DEFINED AT LINE 2239 IN MAIN.asm
                    > USED AT LINE 2236 IN MAIN.asm
NESTING1:           0E7D DEFINED AT LINE 2242 IN MAIN.asm
                    > USED AT LINE 2233 IN MAIN.asm
NESTING2:           0E8C DEFINED AT LINE 2251 IN MAIN.asm
                    > USED AT LINE 2246 IN MAIN.asm
                    > USED AT LINE 2248 IN MAIN.asm
NESTING3:           0E8E DEFINED AT LINE 2254 IN MAIN.asm
                    > USED AT LINE 2250 IN MAIN.asm
NESTING4:           0E99 DEFINED AT LINE 2261 IN MAIN.asm
                    > USED AT LINE 2256 IN MAIN.asm
                    > USED AT LINE 2258 IN MAIN.asm
PROMPT:             0E9B DEFINED AT LINE 2265 IN MAIN.asm
                    > USED AT LINE 2340 IN MAIN.asm
CRLF:               0EA4 DEFINED AT LINE 2270 IN MAIN.asm
                    > USED AT LINE 2432 IN MAIN.asm
PRINTSTR:           0EAB DEFINED AT LINE 2277 IN MAIN.asm
                    > USED AT LINE 2266 IN MAIN.asm
                    > USED AT LINE 2271 IN MAIN.asm
                    > USED AT LINE 2492 IN MAIN.asm
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 45
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 172
INIT:               0EB2 DEFINED AT LINE 2284 IN MAIN.asm
                    > USED AT LINE 2333 IN MAIN.asm
INIT1:              0EBA DEFINED AT LINE 2288 IN MAIN.asm
                    > USED AT LINE 2294 IN MAIN.asm
WARMINIT:           0EC2 DEFINED AT LINE 2296 IN MAIN.asm
COLDBOOT0:          0ED5 DEFINED AT LINE 2303 IN MAIN.asm
                    > USED AT LINE 2291 IN MAIN.asm
                    > USED AT LINE 2329 IN MAIN.asm
COLDINIT:           0EDF DEFINED AT LINE 2309 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0EF0 DEFINED AT LINE 2318 IN MAIN.asm
                    > USED AT LINE 2321 IN MAIN.asm
COLDSTART:          0EFD DEFINED AT LINE 2327 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
START:              0F06 DEFINED AT LINE 2331 IN MAIN.asm
START1:             0F0C DEFINED AT LINE 2334 IN MAIN.asm
                    > USED AT LINE 2301 IN MAIN.asm
                    > USED AT LINE 2330 IN MAIN.asm
INTERPRET:          0F12 DEFINED AT LINE 2338 IN MAIN.asm
                    > USED AT LINE 2469 IN MAIN.asm
                    > USED AT LINE 2485 IN MAIN.asm
                    > USED AT LINE 2498 IN MAIN.asm
                    > USED AT LINE 2501 IN MAIN.asm
INTERPRET2:         0F1E DEFINED AT LINE 2346 IN MAIN.asm
                    > USED AT LINE 2410 IN MAIN.asm
                    > USED AT LINE 2490 IN MAIN.asm
                    > USED AT LINE 2494 IN MAIN.asm
INTERPRET3:         0F26 DEFINED AT LINE 2354 IN MAIN.asm
                    > USED AT LINE 2367 IN MAIN.asm
INTERPRET4:         0F31 DEFINED AT LINE 2363 IN MAIN.asm
                    > USED AT LINE 2352 IN MAIN.asm
INTERPRET5:         0F36 DEFINED AT LINE 2370 IN MAIN.asm
                    > USED AT LINE 2420 IN MAIN.asm
                    > USED AT LINE 2435 IN MAIN.asm
INTERPRET5A:        0F54 DEFINED AT LINE 2407 IN MAIN.asm
INTERPRET6:         0F56 DEFINED AT LINE 2412 IN MAIN.asm
                    > USED AT LINE 2374 IN MAIN.asm
INTERPRET7:         0F64 DEFINED AT LINE 2422 IN MAIN.asm
                    > USED AT LINE 2379 IN MAIN.asm
INTERPRET8:         0F77 DEFINED AT LINE 2437 IN MAIN.asm
                    > USED AT LINE 2377 IN MAIN.asm
NEXT:               0F92 DEFINED AT LINE 2450 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2454 IN MAIN.asm
NEXT0:              0FA6 DEFINED AT LINE 2464 IN MAIN.asm
                    > USED AT LINE 2462 IN MAIN.asm
NEXT1:              0FA7 DEFINED AT LINE 2466 IN MAIN.asm
                    > USED AT LINE 2455 IN MAIN.asm
EXIT:               0FAE DEFINED AT LINE 2471 IN MAIN.asm
                    > USED AT LINE 2468 IN MAIN.asm
RUN:                0FB2 DEFINED AT LINE 2476 IN MAIN.asm
                    > USED AT LINE 2483 IN MAIN.asm
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
ERROR:              0FB6 DEFINED AT LINE 2481 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
                    > USED AT LINE 466 IN MAIN.asm
                    > USED AT LINE 1128 IN MAIN.asm
BACKSPACE_:         0FC8 DEFINED AT LINE 2487 IN MAIN.asm
                    > USED AT LINE 2384 IN MAIN.asm
EDIT_:              0FD8 DEFINED AT LINE 2497 IN MAIN.asm
                    > USED AT LINE 2382 IN MAIN.asm
REEDIT_:            0FDB DEFINED AT LINE 2500 IN MAIN.asm
                    > USED AT LINE 2386 IN MAIN.asm
F1:                 0FDE DEFINED AT LINE 32
                    > USED AT LINE 874 IN MAIN.asm
F1M_3018S12:        0FE9 DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 0FEA DEFINED AT LINE 32
                    > USED AT LINE 876 IN MAIN.asm
F2M_3020S15:        0FF5 DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 0FF6 DEFINED AT LINE 32
                    > USED AT LINE 878 IN MAIN.asm
F3M_3022S18:        1001 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 1002 DEFINED AT LINE 32
                    > USED AT LINE 880 IN MAIN.asm
F4M_3024S21:        100D DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         1100 DEFINED AT LINE 25
                    > USED AT LINE 8
EXPECTM_3041S43:    1188 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3042S44:    1213 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3046S49:    1286 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3047S50:    12EF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3048S51:    1356 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3049S52:    13BD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3050S53:    1424 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3051S54:    148B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3052S55:    14F4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3053S56:    155F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3054S57:    15C8 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3055S58:    1631 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3056S59:    169A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3057S60:    1705 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3058S61:    1770 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3059S62:    17E1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3060S63:    1852 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3061S64:    18C1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3062S65:    1934 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3063S66:    19AB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3064S67:    1A20 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3065S68:    1A8F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3066S69:    1B06 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3067S70:    1B79 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3068S71:    1BE8 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3069S72:    1C57 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3070S73:    1CCE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3071S74:    1D3D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3072S75:    1DAC DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3073S76:    1E1D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3074S77:    1E9E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3075S78:    1F0D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3076S79:    1F84 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3077S80:    1FF3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3078S81:    2070 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3079S82:    20ED DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3080S83:    216A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3081S84:    21E7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3082S85:    2268 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3083S86:    22E9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3084S87:    236E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3085S88:    23DF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3086S89:    245E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3087S90:    24D5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3088S91:    2544 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3089S92:    25B5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3090S93:    2626 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3091S94:    2695 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3092S95:    2704 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3093S96:    2773 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3094S97:    27E2 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3095S98:    2851 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3096S99:    28C0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3097S100:   292F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3098S101:   299E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3099S102:   2A0F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3100S103:   2A80 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3101S104:   2AF1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3102S105:   2B64 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3103S106:   2BD7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3104S107:   2C44 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3105S108:   2CB1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3106S109:   2D24 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3107S110:   2D9D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3108S111:   2E16 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3109S112:   2E93 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3110S113:   2F1A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3111S114:   2FA1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3112S115:   3010 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3113S116:   3081 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3114S117:   30F8 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3115S118:   3173 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3116S119:   31EA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3117S120:   326B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3118S121:   32EE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3119S122:   3377 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3120S123:   3404 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3121S124:   3483 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3122S125:   3508 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3123S126:   358F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3124S127:   3618 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3125S128:   369F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3126S129:   3734 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3127S130:   37B7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3128S131:   3848 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3129S132:   38DB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3130S133:   3970 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3131S134:   3A0F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3132S135:   3AAE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3133S136:   3B2D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3134S137:   3BB4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3135S138:   3C35 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3136S139:   3CBC DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3137S140:   3D47 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3138S141:   3DE0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3139S142:   3E81 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3140S143:   3F22 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3141S144:   3FB5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3142S145:   404E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3143S146:   40FD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3144S147:   41B6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3145S148:   4241 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3146S149:   42CC DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3147S150:   4345 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3148S151:   43BE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3149S152:   4437 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3150S153:   44B0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3151S154:   4521 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3152S155:   4592 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3153S156:   4603 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3154S157:   4674 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3155S158:   46F1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3156S159:   477C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3157S160:   480D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3158S161:   48B6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3159S162:   495F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3160S163:   4A22 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3161S164:   4AAF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3162S165:   4B28 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3163S166:   4B97 DEFINED AT LINE 37
                    > USED AT LINE 16
EXECSTR:            4BA2 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              4D00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1686 IN MAIN.asm
                    > USED AT LINE 2324 IN MAIN.asm
                    > USED AT LINE 2328 IN MAIN.asm
                    > USED AT LINE 2332 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                4D00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1113 IN MAIN.asm
                    > USED AT LINE 2343 IN MAIN.asm
                    > USED AT LINE 2351 IN MAIN.asm
                    > USED AT LINE 2414 IN MAIN.asm
                    > USED AT LINE 2424 IN MAIN.asm
                    > USED AT LINE 2439 IN MAIN.asm
                    > USED AT LINE 2442 IN MAIN.asm
BUFFER:             4E00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 1906 IN MAIN.asm
VARS:               4F00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1037 IN MAIN.asm
                    > USED AT LINE 2315 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
RESTARTS:           4FD0 DEFINED AT LINE 18 IN ram.asm
RST08:              4FD0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              4FD2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              4FD4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              4FD6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              4FD8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              4FDA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               4FDC DEFINED AT LINE 26 IN ram.asm
INTVEC:             4FDE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             4FE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            4FE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            4FE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            4FE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2311 IN MAIN.asm
VDATAWIDTH:         4FE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 261 IN MAIN.asm
                    > USED AT LINE 498 IN MAIN.asm
                    > USED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
                    > USED AT LINE 1065 IN MAIN.asm
                    > USED AT LINE 1096 IN MAIN.asm
                    > USED AT LINE 1794 IN MAIN.asm
VNUMBASE:           4FE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 661 IN MAIN.asm
                    > USED AT LINE 1123 IN MAIN.asm
VTIBPTR:            4FEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1271 IN MAIN.asm
                    > USED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 2344 IN MAIN.asm
                    > USED AT LINE 2441 IN MAIN.asm
VBUFPTR:            4FEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
                    > USED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 655 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
                    > USED AT LINE 682 IN MAIN.asm
                    > USED AT LINE 744 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 1261 IN MAIN.asm
                    > USED AT LINE 1262 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 1909 IN MAIN.asm
VNEXT:              4FEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2323 IN MAIN.asm
VHEAPPTR:           4FF0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 487 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 1208 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 1518 IN MAIN.asm
                    > USED AT LINE 1537 IN MAIN.asm
                    > USED AT LINE 1918 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
                    > USED AT LINE 2024 IN MAIN.asm
                    > USED AT LINE 2046 IN MAIN.asm
                    > USED AT LINE 2051 IN MAIN.asm
                    > USED AT LINE 2082 IN MAIN.asm
                    > USED AT LINE 2148 IN MAIN.asm
VRECUR:             4FF2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 1674 IN MAIN.asm
                    > USED AT LINE 1681 IN MAIN.asm
VDEFINE:            4FF4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 390 IN MAIN.asm
                    > USED AT LINE 403 IN MAIN.asm
                    > USED AT LINE 408 IN MAIN.asm
VSTRMODE:           4FF6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1189 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
                    > USED AT LINE 1901 IN MAIN.asm
VPOINTER:           4FF8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 389 IN MAIN.asm
                    > USED AT LINE 428 IN MAIN.asm
                    > USED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 607 IN MAIN.asm
                    > USED AT LINE 1276 IN MAIN.asm
                    > USED AT LINE 1577 IN MAIN.asm
                    > USED AT LINE 1791 IN MAIN.asm
VREMAIN:            4FFA DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1001 IN MAIN.asm
                    > USED AT LINE 1183 IN MAIN.asm
VSAVEDIP:           4FFC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2297 IN MAIN.asm
                    > USED AT LINE 2444 IN MAIN.asm
VSAVEDSP:           4FFE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2298 IN MAIN.asm
                    > USED AT LINE 2445 IN MAIN.asm
VSAVEDNEXT:         5000 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2299 IN MAIN.asm
                    > USED AT LINE 2446 IN MAIN.asm
VSAVEDBP:           5002 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 2300 IN MAIN.asm
                    > USED AT LINE 2447 IN MAIN.asm
VTEMP1:             5004 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 526 IN MAIN.asm
                    > USED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 1685 IN MAIN.asm
                    > USED AT LINE 1691 IN MAIN.asm
                    > USED AT LINE 1720 IN MAIN.asm
                    > USED AT LINE 1741 IN MAIN.asm
                    > USED AT LINE 1748 IN MAIN.asm
                    > USED AT LINE 1754 IN MAIN.asm
                    > USED AT LINE 2016 IN MAIN.asm
                    > USED AT LINE 2025 IN MAIN.asm
                    > USED AT LINE 2037 IN MAIN.asm
                    > USED AT LINE 2149 IN MAIN.asm
VTEMP2:             5006 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 1632 IN MAIN.asm
                    > USED AT LINE 1672 IN MAIN.asm
                    > USED AT LINE 1721 IN MAIN.asm
                    > USED AT LINE 1742 IN MAIN.asm
                    > USED AT LINE 2039 IN MAIN.asm
                    > USED AT LINE 2139 IN MAIN.asm
VTEMP3:             5008 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 2036 IN MAIN.asm
                    > USED AT LINE 2150 IN MAIN.asm
VLASTDEF:           500A DEFINED AT LINE 61 IN ram.asm
TBPTR:              500C DEFINED AT LINE 62 IN ram.asm
TITLEBUF:           500E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 2286 IN MAIN.asm
                    > USED AT LINE 2305 IN MAIN.asm
                    > USED AT LINE 2335 IN MAIN.asm
HEAP:               5022 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
