0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 4D               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 4D               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 4D               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 4D               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 4D               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 4D               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 4D               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 4D               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 4D               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 4D               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 4B               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 4D               LD   (RST08),HL   
0094   22 D2 4D               LD   (RST10),HL   
0097   22 D4 4D               LD   (RST18),HL   
009A   22 D6 4D               LD   (RST20),HL   
009D   22 D8 4D               LD   (RST28),HL   
00A0   22 DA 4D               LD   (RST30),HL   
00A3   22 DE 4D               LD   (INTVEC),HL   
00A6   22 E0 4D               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 4D               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 4D               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 11               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   F9                     DB   lsb(bang_)   ; !
0181   2B                     DB   lsb(dquote_)   ; "
0182   C3                     DB   lsb(hash_)   ; #
0183   37                     DB   lsb(dollar_)   ; $
0184   19                     DB   lsb(percent_)   ; %
0185   A1                     DB   lsb(amper_)   ; &
0186   1F                     DB   lsb(quote_)   ; '
0187   45                     DB   lsb(lparen_)   ; (
0188   3D                     DB   lsb(rparen_)   ; )
0189   F5                     DB   lsb(star_)   ; *
018A   DB                     DB   lsb(plus_)   ; +
018B   28                     DB   lsb(comma_)   ; ,
018C   F7                     DB   lsb(minus_)   ; -
018D   22                     DB   lsb(dot_)   ; .
018E   34                     DB   lsb(slash_)   ; /	
018F   11                     DB   lsb(num_)   ; 0
0190   11                     DB   lsb(num_)   ; 1
0191   11                     DB   lsb(num_)   ; 2
0192   11                     DB   lsb(num_)   ; 3
0193   11                     DB   lsb(num_)   ; 4
0194   11                     DB   lsb(num_)   ; 5
0195   11                     DB   lsb(num_)   ; 6
0196   11                     DB   lsb(num_)   ; 7
0197   11                     DB   lsb(num_)   ; 8
0198   11                     DB   lsb(num_)   ; 9
0199   6F                     DB   lsb(colon_)   ; :
019A   5B                     DB   lsb(semicolon_)   ; ;
019B   FF                     DB   lsb(lt_)   ; <
019C   FB                     DB   lsb(eq_)   ; =
019D   FD                     DB   lsb(gt_)   ; >
019E   3A                     DB   lsb(question_)   ; ?
019F   04                     DB   lsb(at_)   ; @
01A0   AC                     DB   lsb(upcase_)   ; A
01A1   AC                     DB   lsb(upcase_)   ; B
01A2   AC                     DB   lsb(upcase_)   ; C
01A3   AC                     DB   lsb(upcase_)   ; D
01A4   AC                     DB   lsb(upcase_)   ; E
01A5   AC                     DB   lsb(upcase_)   ; F
01A6   AC                     DB   lsb(upcase_)   ; G
01A7   AC                     DB   lsb(upcase_)   ; h
01A8   AC                     DB   lsb(upcase_)   ; I
01A9   AC                     DB   lsb(upcase_)   ; J
01AA   AC                     DB   lsb(upcase_)   ; K
01AB   AC                     DB   lsb(upcase_)   ; L
01AC   AC                     DB   lsb(upcase_)   ; M
01AD   AC                     DB   lsb(upcase_)   ; N
01AE   AC                     DB   lsb(upcase_)   ; O
01AF   AC                     DB   lsb(upcase_)   ; p
01B0   AC                     DB   lsb(upcase_)   ; Q
01B1   AC                     DB   lsb(upcase_)   ; R
01B2   AC                     DB   lsb(upcase_)   ; S
01B3   AC                     DB   lsb(upcase_)   ; T
01B4   AC                     DB   lsb(upcase_)   ; U
01B5   AC                     DB   lsb(upcase_)   ; V
01B6   AC                     DB   lsb(upcase_)   ; W
01B7   AC                     DB   lsb(upcase_)   ; X
01B8   AC                     DB   lsb(upcase_)   ; Y
01B9   AC                     DB   lsb(upcase_)   ; Z
01BA   85                     DB   lsb(lbrack_)   ; [
01BB   0E                     DB   lsb(backslash_)   ; \
01BC   16                     DB   lsb(rbrack_)   ; ]
01BD   25                     DB   lsb(caret_)   ; ^
01BE   31                     DB   lsb(underscore_)   ; _
01BF   2E                     DB   lsb(grave_)   ; `     used for testing string   	
01C0   B1                     DB   lsb(lowcase_)   ; a
01C1   B1                     DB   lsb(lowcase_)   ; b
01C2   B1                     DB   lsb(lowcase_)   ; c
01C3   B1                     DB   lsb(lowcase_)   ; d
01C4   B1                     DB   lsb(lowcase_)   ; e
01C5   B1                     DB   lsb(lowcase_)   ; f
01C6   B1                     DB   lsb(lowcase_)   ; g
01C7   B1                     DB   lsb(lowcase_)   ; h
01C8   B1                     DB   lsb(lowcase_)   ; i
01C9   B1                     DB   lsb(lowcase_)   ; j
01CA   B1                     DB   lsb(lowcase_)   ; k
01CB   B1                     DB   lsb(lowcase_)   ; l
01CC   B1                     DB   lsb(lowcase_)   ; m
01CD   B1                     DB   lsb(lowcase_)   ; n
01CE   B1                     DB   lsb(lowcase_)   ; o
01CF   B1                     DB   lsb(lowcase_)   ; p
01D0   B1                     DB   lsb(lowcase_)   ; q
01D1   B1                     DB   lsb(lowcase_)   ; r
01D2   B1                     DB   lsb(lowcase_)   ; s
01D3   B1                     DB   lsb(lowcase_)   ; t
01D4   B1                     DB   lsb(lowcase_)   ; u
01D5   B1                     DB   lsb(lowcase_)   ; v
01D6   B1                     DB   lsb(lowcase_)   ; w
01D7   B1                     DB   lsb(lowcase_)   ; x
01D8   B1                     DB   lsb(lowcase_)   ; y
01D9   B1                     DB   lsb(lowcase_)   ; z
01DA   45                     DB   lsb(lbrace_)   ; {
01DB   52                     DB   lsb(pipe_)   ; |
01DC   1C                     DB   lsb(rbrace_)   ; }
01DD   4A                     DB   lsb(tilde_)   ; ~
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 4B                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 4C                  DW   BUFFER   ; vBufPtr pointer into BUF
01E6   9C 0F                  DW   next   ; nNext
01E8   22 4E                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; vStrMode
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                             ; @ addr
0204                             ; -- ptr
0204                AT_:         
0204                ADDR:        
0204   ED 5B F8 4D            LD   de,(vPointer)   
0208   21 F8 4D               LD   hl,vPointer   
020B   C3 F1 07               JP   variable   
020E                BACKSLASH_:      
020E   C3 01 04               JP   backslash   
0211                NUM_:        
0211   C3 22 04               JP   num   
0214                NOP_:        
0214   DD E9                  JP   (ix)   
0216                RBRACK_:      
0216   C3 74 0B               JP   rbrack   
0219                PERCENT_:      
0219   C3 82 04               JP   percent   
021C                RBRACE_:      
021C   C3 C4 0B               JP   rbrace   
021F                QUOTE_:      
021F   C3 68 04               JP   quote   
0222                DOT_:        
0222   C3 00 05               JP   dot   
0225                CARET_:      
0225   C3 31 0C               JP   caret   
0228                COMMA_:      
0228   C3 72 0B               JP   comma   
022B                DQUOTE_:      
022B   C3 68 04               JP   dquote   
022E                GRAVE_:      
022E   C3 52 04               JP   grave   
0231                UNDERSCORE_:      
0231   C3 72 0B               JP   underscore   
0234                SLASH_:      
0234   C3 00 06               JP   slash   
0237                DOLLAR_:      
0237   C3 CB 03               JP   dollar   
023A                QUESTION_:      
023A   C3 E8 03               JP   question   
023D                             ;                               4
023D                RPAREN_:      
023D                RPAREN:      
023D   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0240   FD 46 09               LD   b,(iy+9)   
0243   DD E9                  JP   (ix)   
0245                             ; { block start                 ; 4
0245                             ; -- block*
0245                LPAREN_:      
0245                LBRACE_:      
0245                LBRACE:      
0245   CD 30 0D               CALL   parseBlock   
0248   DD E9                  JP   (ix)   
024A                             ; ~ char                        8
024A                TILDE_:      
024A                TILDE:       
024A                CHAR:        
024A   03                     INC   bc   ; point to next char
024B   0A                     LD   a,(bc)   
024C   6F                     LD   l,a   
024D   26 00                  LD   h,0   
024F   E5                     PUSH   hl   
0250   DD E9                  JP   (ix)   
0252                             ; & and                          11
0252                             ; a b -- c
0252                PIPE_:       
0252                PIPE:        
0252                OR:          
0252   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0253   E1                     POP   hl   
0254   7B                     LD   a,e   
0255   B5                     OR   l   
0256   6F                     LD   l,a   
0257   7A                     LD   a,d   
0258   B4                     OR   h   
0259   18 4D                  JR   and1   
025B                             ; := define                     12
025B                SEMICOLON_:      
025B                SEMICOLON:      
025B                DEFINEEND:      
025B   2A F4 4D               LD   hl,(vDefine)   ; hl = define*
025E   7D                     LD   a,l   
025F   B4                     OR   h   
0260   28 0B                  JR   z,defineEnd1   
0262   11 00 00               LD   de,NUL   ; set vDefine=NUL
0265   ED 53 F4 4D            LD   (vDefine),de   
0269   D1                     POP   de   ; de = value
026A   C3 40 03               JP   assign1   
026D                DEFINEEND1:      
026D   DD E9                  JP   (ix)   
026F                             ; _ func                        14
026F                             ; -- func*
026F                COLON_:      
026F                COLON:       
026F   03                     INC   bc   ; arg_list must ve immediately followed by {
0270   0A                     LD   a,(bc)   
0271   FE 3D                  CP   "="   ; := definition
0273   28 07                  JR   z,defineStart   
0275   0B                     DEC   bc   
0276   21 01 00               LD   hl,1   
0279   C3 BB 0F               JP   error   
027C                DEFINESTART:      
027C   E1                     POP   hl   ; discard variable value
027D   2A F8 4D               LD   hl,(vPointer)   ; vDefine = vPointer
0280   22 F4 4D               LD   (vDefine),hl   
0283   DD E9                  JP   (ix)   
0285                             ; [                             14
0285                LBRACK_:      
0285                LBRACK:      
0285                ARRAYSTART:      
0285   11 00 00               LD   de,0   ; create stack frame
0288   D5                     PUSH   de   ; push null for IP
0289   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
028C   FD 56 05               LD   d,(iy+5)   ; 
028F   D5                     PUSH   de   ; 
0290   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0293   FD 56 03               LD   d,(iy+3)   ; 
0296   D5                     PUSH   de   ; 
0297   FD E5                  PUSH   iy   ; push BP
0299   FD 21 00 00            LD   iy,0   ; BP = SP
029D   FD 39                  ADD   iy,sp   
029F   DD E9                  JP   (ix)   
02A1                             ; & and                          14
02A1                             ; a b -- c
02A1                AMPER_:      
02A1                AMPER:       
02A1                AND:         
02A1   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
02A2   E1                     POP   hl   
02A3   7B                     LD   a,e   
02A4   A5                     AND   l   
02A5   6F                     LD   l,a   
02A6   7A                     LD   a,d   
02A7   A4                     AND   h   
02A8                AND1:        
02A8   67                     LD   h,a   
02A9   E5                     PUSH   hl   
02AA   DD E9                  JP   (ix)   
02AC                             ;                               18
02AC                UPCASE_:      
02AC                UPCASE:      
02AC   0A                     LD   a,(bc)   ; a = identifier char
02AD   D6 41                  SUB   "A"   ; "A" = 0
02AF   18 05                  JR   ident1   
02B1                LOWCASE_:      
02B1                LOWCASE:      
02B1   0A                     LD   a,(bc)   
02B2   D6 61                  SUB   "a"   
02B4   C6 1A                  ADD   a,26   
02B6                IDENT1:      
02B6   87                     ADD   a,a   ; l = a * 2
02B7   6F                     LD   l,a   
02B8   26 4D                  LD   h,msb(vars)   
02BA   22 F8 4D               LD   (vPointer),hl   ; store address in setter
02BD   5E                     LD   e,(hl)   
02BE   23                     INC   hl   
02BF   56                     LD   d,(hl)   
02C0   D5                     PUSH   de   
02C1   DD E9                  JP   (ix)   
02C3                             ; index of an array, based on vDataWidth 22
02C3                             ; array* num -- value    ; also sets vPointer to address
02C3                HASH_:       
02C3                HASH:        
02C3                ARRAYINDEX:      
02C3   E1                     POP   hl   ; hl = index
02C4   D1                     POP   de   ; de = array
02C5   3A E6 4D               LD   a,(vDataWidth)   ; a = data width
02C8   3D                     DEC   a   
02C9   28 01                  JR   z,arrayIndex1   
02CB                ARRAYINDEX0:      
02CB   29                     ADD   hl,hl   ; if data width = 2 then double
02CC                ARRAYINDEX1:      
02CC   19                     ADD   hl,de   ; add addr
02CD   22 F8 4D               LD   (vPointer),hl   ; store address in setter
02D0   16 00                  LD   d,0   
02D2   5E                     LD   e,(hl)   
02D3   B7                     OR   a   ; check data width again
02D4   28 02                  JR   z,arrayIndex2   
02D6   23                     INC   hl   
02D7   56                     LD   d,(hl)   
02D8                ARRAYINDEX2:      
02D8   D5                     PUSH   de   
02D9   DD E9                  JP   (ix)   
02DB                PLUS_:       
02DB                             ; + add                         25
02DB                             ; a b -- c
02DB                PLUS:        
02DB                ADD:         
02DB   03                     INC   bc   
02DC   0A                     LD   a,(bc)   
02DD   FE 2B                  CP   "+"   ; ++ increment variable
02DF   20 04                  JR   nz,add1   
02E1   E1                     POP   hl   
02E2   23                     INC   hl   
02E3   18 57                  JR   assign0   
02E5                ADD1:        
02E5   0B                     DEC   bc   
02E6   D1                     POP   de   ; second term
02E7   E1                     POP   hl   ; first term
02E8   19                     ADD   hl,de   
02E9                ADD3:        
02E9   03                     INC   bc   
02EA   0A                     LD   a,(bc)   
02EB   FE 3D                  CP   "="   
02ED   28 04                  JR   z,add4   
02EF   0B                     DEC   bc   
02F0   E5                     PUSH   hl   
02F1   DD E9                  JP   (ix)   
02F3                ADD4:        
02F3   18 47                  JR   assign0   
02F5                STAR_:       
02F5   18 0A                  JR   star   
02F7                MINUS_:      
02F7   18 24                  JR   minus   
02F9                BANG_:       
02F9   18 50                  JR   bang   
02FB                EQ_:         
02FB   18 5E                  JR   eq   
02FD                GT_:         
02FD   18 69                  JR   gt   
02FF                LT_:         
02FF   18 71                  JR   lt   
0301                             ;********************** PAGE 2 END *********************************************
0301                             ;********************** PAGE 3,4 BEGIN (shorter ops) *****************************
0301                             ;                               21
0301                STAR:        
0301                MUL:         
0301   D1                     POP   de   ; get first value
0302   E1                     POP   hl   
0303                MUL2:        
0303   C5                     PUSH   bc   ; Preserve the IP
0304   44 4D                  LD   bc,hl   ; bc = 2nd value
0306   21 00 00               LD   hl,0   
0309   3E 10                  LD   a,16   
030B                MUL3:        
030B   29                     ADD   hl,hl   
030C   CB 13                  RL   e   
030E   CB 12                  RL   d   
0310   30 04                  JR   nc,$+6   
0312   09                     ADD   hl,bc   
0313   30 01                  JR   nc,$+3   
0315   13                     INC   de   
0316   3D                     DEC   a   
0317   20 F2                  JR   nz,mul3   
0319   C1                     POP   bc   ; Restore the IP
031A   C3 E9 02               JP   add3   
031D                             ; - sub                          23
031D                             ; a b -- c
031D                MINUS:       
031D   03                     INC   bc   ; check if sign of a number
031E   0A                     LD   a,(bc)   
031F   0B                     DEC   bc   
0320   FE 30                  CP   "0"   
0322   38 05                  JR   c,sub   
0324   FE 3A                  CP   "9"+1   
0326   DA 22 04               JP   c,num   
0329                SUB:         ; Subtract the value 2nd on stack from top of stack
0329   03                     INC   bc   
032A   FE 2D                  CP   "-"   
032C   20 04                  JR   nz,sub1   
032E   E1                     POP   hl   
032F   2B                     DEC   hl   
0330   18 0A                  JR   assign0   
0332                SUB1:        
0332   0B                     DEC   bc   
0333   D1                     POP   de   
0334   E1                     POP   hl   
0335   B7                     OR   a   
0336   ED 52                  SBC   hl,de   
0338   18 AF                  JR   add3   
033A                             ; value _oldValue --            ; uses address in vPointer 15
033A                ASSIGN:      
033A   E1                     POP   hl   ; discard last accessed value
033B   E1                     POP   hl   ; hl = new value
033C                ASSIGN0:      
033C   EB                     EX   de,hl   ; de = new value
033D   2A F8 4D               LD   hl,(vPointer)   
0340                ASSIGN1:      ; entry point from defineEnd
0340   73                     LD   (hl),e   
0341   3A E6 4D               LD   a,(vDataWidth)   
0344   3D                     DEC   a   ; is it byte?
0345   28 02                  JR   z,assign2   
0347   23                     INC   hl   
0348   72                     LD   (hl),d   
0349                ASSIGN2:      
0349   DD E9                  JP   (ix)   
034B                BANG:        ; logical invert, any non zero value
034B   03                     INC   bc   
034C   0A                     LD   a,(bc)   
034D   FE 3D                  CP   "="   
034F   20 04                  JR   nz,not   
0351   E1                     POP   hl   
0352   D1                     POP   de   
0353   18 33                  JR   notequals   
0355                NOT:         
0355   0B                     DEC   bc   
0356   21 00 00               LD   hl,0   ; is considered true
0359   18 0A                  JR   eq1   
035B                EQ:          
035B   03                     INC   bc   
035C   0A                     LD   a,(bc)   
035D   FE 3D                  CP   "="   
035F   28 03                  JR   z,eq0   
0361   0B                     DEC   bc   
0362   18 D6                  JR   assign   
0364                EQ0:         
0364   E1                     POP   hl   
0365                EQ1:         
0365   D1                     POP   de   
0366   18 19                  JR   equals   
0368                GT:          
0368   03                     INC   bc   
0369   0A                     LD   a,(bc)   
036A   FE 3E                  CP   ">"   
036C   28 4A                  JR   z,shiftRight   
036E   D1                     POP   de   
036F   E1                     POP   hl   
0370   18 08                  JR   lt1   
0372                LT:          
0372   03                     INC   bc   
0373   0A                     LD   a,(bc)   
0374   FE 3C                  CP   "<"   
0376   28 30                  JR   z,shiftLeft   
0378   E1                     POP   hl   
0379   D1                     POP   de   
037A                LT1:         
037A   FE 3D                  CP   "="   
037C   28 11                  JR   z,lessthaneq   
037E   0B                     DEC   bc   
037F   18 13                  JR   lessthan   
0381                             ; hl = value1, de = value2
0381                             ; hl = result
0381                EQUALS:      
0381   B7                     OR   a   ; reset the carry flag
0382   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0384   28 16                  JR   z,true1   
0386   18 1A                  JR   false1   
0388                NOTEQUALS:      
0388   B7                     OR   a   ; reset the carry flag
0389   ED 52                  SBC   hl,de   
038B   20 0F                  JR   nz,true1   
038D   18 13                  JR   false1   
038F                             ; hl = value1 de = value2
038F                             ; hl = result
038F                LESSTHANEQ:      
038F   B7                     OR   a   
0390   ED 52                  SBC   hl,de   
0392   18 05                  JR   lessthan1   
0394                             ; hl = value1 de = value2
0394                             ; hl = result
0394                LESSTHAN:      
0394   B7                     OR   a   
0395   ED 52                  SBC   hl,de   
0397   28 09                  JR   z,false1   
0399                LESSTHAN1:      
0399   FA A2 03               JP   m,false1   
039C                TRUE1:       
039C   21 FF FF               LD   hl,TRUE   
039F   E5                     PUSH   hl   
03A0   DD E9                  JP   (ix)   
03A2                NULL1:       
03A2                FALSE1:      
03A2   21 00 00               LD   hl,FALSE   
03A5   E5                     PUSH   hl   
03A6   DD E9                  JP   (ix)   
03A8                             ; shiftLeft                     15
03A8                             ; value count -- value2          shift left count places
03A8                SHIFTLEFT:      
03A8   50 59                  LD   de,bc   ; save IP
03AA   C1                     POP   bc   ; bc = count
03AB   41                     LD   b,c   ; b = loop counter
03AC   E1                     POP   hl   
03AD   04                     INC   b   ; test for counter=0 case
03AE   18 01                  JR   shiftLeft2   
03B0                SHIFTLEFT1:      
03B0   29                     ADD   hl,hl   ; left shift hl
03B1                SHIFTLEFT2:      
03B1   10 FD                  DJNZ   shiftLeft1   
03B3   E5                     PUSH   hl   
03B4   42 4B                  LD   bc,de   ; restore IP
03B6   DD E9                  JP   (ix)   
03B8                             ; shiftRight                    16
03B8                             ; value count -- value2          shift left count places
03B8                SHIFTRIGHT:      
03B8   50 59                  LD   de,bc   ; save IP
03BA   C1                     POP   bc   ; bc = count
03BB   41                     LD   b,c   ; b = loop counter
03BC   E1                     POP   hl   
03BD   04                     INC   b   ; test for counter=0 case
03BE   18 04                  JR   shiftRight2   
03C0                SHIFTRIGHT1:      
03C0   CB 3C                  SRL   h   ; right shift hl
03C2   CB 1D                  RR   l   
03C4                SHIFTRIGHT2:      
03C4   10 FA                  DJNZ   shiftRight1   
03C6   E5                     PUSH   hl   
03C7   42 4B                  LD   bc,de   ; restore IP
03C9   DD E9                  JP   (ix)   
03CB                             ; $ hex                         ; 22
03CB                DOLLAR:      
03CB                HEXNUM:      
03CB   21 00 00               LD   hl,0   ; Clear hl to accept the number
03CE                HEXNUM1:      
03CE   03                     INC   bc   
03CF   0A                     LD   a,(bc)   ; Get the character which is a numeral
03D0   CB 77                  BIT   6,a   ; is it uppercase alpha?
03D2   28 02                  JR   z,hexnum2   ; no a decimal
03D4   D6 07                  SUB   7   ; sub 7  to make $a - $F
03D6                HEXNUM2:      
03D6   D6 30                  SUB   $30   ; form decimal digit
03D8   DA 44 04               JP   c,num2   
03DB   FE 10                  CP   $0F+1   
03DD   D2 44 04               JP   nc,num2   
03E0   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
03E1   29                     ADD   hl,hl   ; 4X
03E2   29                     ADD   hl,hl   ; 8X
03E3   29                     ADD   hl,hl   ; 16X
03E4   85                     ADD   a,l   ; add into bottom of hl
03E5   6F                     LD   l,a   
03E6   18 E6                  JR   hexnum1   
03E8                             ; if                            23
03E8                             ; condition then -- value
03E8                QUESTION:      
03E8                IF:          
03E8   03                     INC   bc   
03E9   0A                     LD   a,(bc)   
03EA   FE 3F                  CP   "?"   
03EC   28 06                  JR   z,ifte   
03EE   0B                     DEC   bc   
03EF   11 00 00               LD   de,NUL   ; NUL pointer for else
03F2   18 01                  JR   ifte1   
03F4                             ; ifte
03F4                             ; condition then else -- value
03F4                IFTE:        
03F4   D1                     POP   de   ; de = else
03F5                IFTE1:       
03F5   E1                     POP   hl   ; hl = then
03F6   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
03F7   7C                     LD   a,h   
03F8   B5                     OR   l   
03F9   E1                     POP   hl   ; hl = then
03FA   CA 32 0C               JP   z,go1   ; if z de = else
03FD   EB                     EX   de,hl   ; condition = false, de = then
03FE   C3 32 0C               JP   go1   
0401                             ; \                             19
0401                BACKSLASH:      
0401                LAMBDA:      
0401   DD E5                  PUSH   ix   
0403   CD FA 0C               CALL   parseArgs   
0406                LAMBDA1:      
0406   03                     INC   bc   ; arg_list must ve immediately followed by {
0407   0A                     LD   a,(bc)   
0408   FE 21                  CP   " "+1   ; skip white space
040A   38 FA                  JR   c,lambda1   
040C   FE 7B                  CP   "{"   
040E   28 06                  JR   z,lambda2   
0410   21 02 00               LD   hl,2   ; error 2: parse error
0413   C3 BB 0F               JP   error   
0416                LAMBDA2:      
0416   CD 30 0D               CALL   parseBlock   
0419   CD 9A 0D               CALL   createFunc   
041C   E1                     POP   hl   
041D   DD E1                  POP   ix   
041F   E5                     PUSH   hl   
0420   DD E9                  JP   (ix)   
0422                             ; 0..9 number                   37
0422                NUM:         
0422   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0425   0A                     LD   a,(bc)   ; Get numeral or -
0426   FE 2D                  CP   "-"   
0428   20 01                  JR   nz,num0   
042A   03                     INC   bc   ; move to next char, no flags affected
042B                NUM0:        
042B   08                     EX   af,af'   ; save zero flag = 0 for later
042C                NUM1:        
042C   0A                     LD   a,(bc)   ; read digit
042D   D6 30                  SUB   "0"   ; less than 0?
042F   38 13                  JR   c,num2   ; not a digit, exit loop
0431   FE 0A                  CP   10   ; greater that 9?
0433   30 0F                  JR   nc,num2   ; not a digit, exit loop
0435   03                     INC   bc   ; inc IP
0436   54 5D                  LD   de,hl   ; multiply hl * 10
0438   29                     ADD   hl,hl   
0439   29                     ADD   hl,hl   
043A   19                     ADD   hl,de   
043B   29                     ADD   hl,hl   
043C   85                     ADD   a,l   ; add digit in a to hl
043D   6F                     LD   l,a   
043E   3E 00                  LD   a,0   
0440   8C                     ADC   a,h   
0441   67                     LD   h,a   
0442   18 E8                  JR   num1   
0444                NUM2:        
0444   0B                     DEC   bc   
0445   08                     EX   af,af'   ; restore zero flag
0446   20 07                  JR   nz,num3   
0448   EB                     EX   de,hl   ; negate the value of hl
0449   21 00 00               LD   hl,0   
044C   B7                     OR   a   ; jump to sub2
044D   ED 52                  SBC   hl,de   
044F                NUM3:        
044F   E5                     PUSH   hl   ; Put the number on the stack
0450   DD E9                  JP   (ix)   ; and process the next character
0452                GRAVE:       
0452                PRINTLITERAL:      
0452   03                     INC   bc   ; move to first char
0453   ED 5B EC 4D            LD   de,(vBufPtr)   ; de = buffer*
0457   18 03                  JR   printLiteral1   
0459                PRINTLITERAL0:      
0459   12                     LD   (de),a   ; a -> buffer*
045A   13                     INC   de   ; string*++,
045B   03                     INC   bc   
045C                PRINTLITERAL1:      
045C   0A                     LD   a,(bc)   ; a <- string*
045D   FE 60                  CP   "`"   ; if ` exit loop
045F   20 F8                  JR   nz,printLiteral0   
0461   ED 53 EC 4D            LD   (vBufPtr),de   ; save buffer*' in pointer
0465   C3 4C 0B               JP   dotNext   
0468                             ; string                        ;38
0468                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0468                QUOTE:       
0468                DQUOTE:      
0468                STRING:      
0468   2A F0 4D               LD   hl,(vHeapPtr)   ; hl = heap*
046B   E5                     PUSH   hl   ; save start of string
046C   0A                     LD   a,(bc)   
046D   5F                     LD   e,a   ; e = matching terminator
046E   03                     INC   bc   ; point to next char
046F   18 03                  JR   string2   
0471                STRING1:      
0471   77                     LD   (hl),a   
0472   23                     INC   hl   ; increase count
0473   03                     INC   bc   ; point to next char
0474                STRING2:      
0474   0A                     LD   a,(bc)   
0475   BB                     CP   e   ; is it the string terminator
0476   28 02                  JR   z,string3   
0478   18 F7                  JR   string1   
047A                STRING3:      
047A   AF                     XOR   a   ; write NUL to terminate string
047B   77                     LD   (hl),a   ; hl = end of string
047C   23                     INC   hl   
047D   22 F0 4D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0480   DD E9                  JP   (ix)   
0482                             ; %a .. %z                      43
0482                             ; -- value
0482                             ; returns value of arg
0482                PERCENT:      
0482                ARG:         
0482   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0485   FD 56 05               LD   d,(iy+5)   
0488   EB                     EX   de,hl   
0489   7D                     LD   a,l   ; arg_list* == null, skip
048A   B4                     OR   h   
048B   28 1A                  JR   z,arg0a   
048D   23                     INC   hl   ; a = num_args, hl = arg_list*
048E   7E                     LD   a,(hl)   
048F   23                     INC   hl   
0490   B7                     OR   a   
0491   28 14                  JR   z,arg0a   ; num_args == 0, skip
0493   5F                     LD   e,a   ; e = a = num_args
0494   03                     INC   bc   ; a = next char = dollar_name
0495   0A                     LD   a,(bc)   
0496   C5                     PUSH   bc   ; save IP
0497   43                     LD   b,e   ; b = e = num_args
0498   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
049B   FD 56 03               LD   d,(iy+3)   
049E                ARG0:        
049E   1B                     DEC   de   ; a = dollar_name, de = next arg*
049F   1B                     DEC   de   
04A0   BE                     CP   (hl)   
04A1   28 09                  JR   z,arg1   
04A3   23                     INC   hl   ; hl = next arg_list*
04A4   10 F8                  DJNZ   arg0   
04A6   C1                     POP   bc   ; no match, restore IP
04A7                ARG0A:       
04A7   11 00 00               LD   de,0   ; return 0
04AA   18 08                  JR   arg1a   
04AC                ARG1:        
04AC   C1                     POP   bc   ; restore IP
04AD   EB                     EX   de,hl   ; hl = arg*
04AE   22 F8 4D               LD   (vPointer),hl   ; store arg* in setter
04B1   5E                     LD   e,(hl)   
04B2   23                     INC   hl   
04B3   56                     LD   d,(hl)   ; de = arg
04B4                ARG1A:       
04B4   D5                     PUSH   de   ; push arg
04B5   DD E9                  JP   (ix)   
04B7                             ;********************** PAGE 3,4 END *********************************************
04B7                          ALIGN   $100   
0500                             ;********************** PAGE 5X BEGIN *********************************************
0500                             ;                               67
0500                DOT:         
0500                PRINT:       
0500   CD 52 0E               CALL   jumpTable   
0503   61                     DB   "a"   ; .a print array
0504   04 0B                  DW   printArray   
0506   63                     DB   "c"   ; .c print char
0507   0F 05                  DW   printChar   
0509   73                     DB   "s"   ; .s print string
050A   1E 05                  DW   printString   
050C   00                     DB   NUL   ; .  print number, fall through
050D   33 05                  DW   printNumber   
050F                             ; .c print char
050F                             ; char --
050F                PRINTCHAR:      
050F   E1                     POP   hl   ; a = char
0510   7D                     LD   a,l   
0511   ED 5B EC 4D            LD   de,(vBufPtr)   ; de = buffer*
0515   12                     LD   (de),a   
0516   13                     INC   de   
0517   ED 53 EC 4D            LD   (vBufPtr),de   ; save buffer*'
051B   C3 4C 0B               JP   dotNext   
051E                             ; .s print string
051E                             ; string* --
051E                PRINTSTRING:      
051E   E1                     POP   hl   ; hl = string*
051F   ED 5B EC 4D            LD   de,(vBufPtr)   ; de = buffer*
0523   18 03                  JR   dotString1   
0525                DOTSTRING0:      
0525   12                     LD   (de),a   ; a -> buffer*
0526   13                     INC   de   ; string*++,
0527   23                     INC   hl   
0528                DOTSTRING1:      
0528   7E                     LD   a,(hl)   ; a <- string*
0529   B7                     OR   a   ; if NUL exit loop
052A   20 F9                  JR   nz,dotString0   
052C   ED 53 EC 4D            LD   (vBufPtr),de   ; save buffer*' in pointer
0530   C3 4C 0B               JP   dotNext   
0533                             ; . print decimal
0533                             ; value --
0533                PRINTNUMBER:      
0533   3A E8 4D               LD   a,(vNumBase)   
0536   FE 10                  CP   16   
0538   CA A4 05               JP   z,dotHex   ; else falls through
053B   C3 3E 05               JP   dotDec   
053E                             ; print decimal                 ; 70
053E                             ; value --
053E                DOTDEC:      
053E   ED 5B EC 4D            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0542   D9                     EXX      
0543   E1                     POP   hl   ; hl = value
0544   3A E6 4D               LD   a,(vDataWidth)   
0547   3D                     DEC   a   
0548   20 02                  JR   nz,dotDecX   
054A   26 00                  LD   h,0   
054C                DOTDECX:      
054C   CD 5B 05               CALL   dotDec0   
054F   D9                     EXX      ; de = buffer*' bc = IP
0550   3E 20                  LD   a," "   ; append space to buffer
0552   12                     LD   (de),a   
0553   13                     INC   de   ; string*++,
0554   ED 53 EC 4D            LD   (vBufPtr),de   ; update buffer* with buffer*'
0558   C3 4C 0B               JP   dotNext   
055B                             ; hl = value
055B                             ; de' = buffer*
055B                             ; a, bc, de, hl destroyed
055B                DOTDEC0:      
055B   CB 7C                  BIT   7,h   
055D   28 0C                  JR   z,dotDec1   
055F   D9                     EXX      
0560   3E 2D                  LD   a,"-"   
0562   12                     LD   (de),a   
0563   13                     INC   de   
0564   D9                     EXX      
0565   AF                     XOR   a   
0566   95                     SUB   l   
0567   6F                     LD   l,a   
0568   9F                     SBC   a,a   
0569   94                     SUB   h   
056A   67                     LD   h,a   
056B                DOTDEC1:      
056B   0E 00                  LD   c,0   ; leading zeros flag = false
056D   11 F0 D8               LD   de,-10000   
0570   CD 8B 05               CALL   dotDec2   
0573   11 18 FC               LD   de,-1000   
0576   CD 8B 05               CALL   dotDec2   
0579   11 9C FF               LD   de,-100   
057C   CD 8B 05               CALL   dotDec2   
057F   1E F6                  LD   e,-10   
0581   CD 8B 05               CALL   dotDec2   
0584   0C                     INC   c   ; flag = true for at least digit
0585   1E FF                  LD   e,-1   
0587   CD 8B 05               CALL   dotDec2   
058A   C9                     RET      
058B                DOTDEC2:      
058B   06 2F                  LD   b,"0"-1   
058D                DOTDEC3:      
058D   04                     INC   b   
058E   19                     ADD   hl,de   
058F   38 FC                  JR   c,dotDec3   
0591   ED 52                  SBC   hl,de   
0593   3E 30                  LD   a,"0"   
0595   B8                     CP   b   
0596   20 05                  JR   nz,dotDec4   
0598   AF                     XOR   a   
0599   B1                     OR   c   
059A   C8                     RET   z   
059B   18 01                  JR   dotDec5   
059D                DOTDEC4:      
059D   0C                     INC   c   
059E                DOTDEC5:      
059E   78                     LD   a,b   
059F   D9                     EXX      
05A0   12                     LD   (de),a   
05A1   13                     INC   de   
05A2   D9                     EXX      
05A3   C9                     RET      
05A4                             ; buffer hex                    37
05A4                             ; value --
05A4                DOTHEX:      
05A4   E1                     POP   hl   ; hl = value
05A5   ED 5B EC 4D            LD   de,(vBufPtr)   
05A9   3E 24                  LD   a,"$"   ; # prefix
05AB   12                     LD   (de),a   
05AC   13                     INC   de   ; string*++,
05AD   3A E6 4D               LD   a,(vDataWidth)   
05B0   3D                     DEC   a   
05B1   28 04                  JR   z,dotHex0   
05B3   7C                     LD   a,h   
05B4   CD C6 05               CALL   dotHex1   
05B7                DOTHEX0:      
05B7   7D                     LD   a,l   
05B8   CD C6 05               CALL   dotHex1   
05BB   3E 20                  LD   a," "   ; append space to buffer
05BD   12                     LD   (de),a   
05BE   13                     INC   de   ; string*++,
05BF   ED 53 EC 4D            LD   (vBufPtr),de   
05C3   C3 4C 0B               JP   dotNext   
05C6                DOTHEX1:      
05C6   F5                     PUSH   af   
05C7   1F                     RRA      
05C8   1F                     RRA      
05C9   1F                     RRA      
05CA   1F                     RRA      
05CB   CD CF 05               CALL   dotHex2   
05CE   F1                     POP   af   
05CF                DOTHEX2:      
05CF   E6 0F                  AND   0x0F   
05D1   C6 90                  ADD   a,0x90   
05D3   27                     DAA      
05D4   CE 40                  ADC   a,0x40   
05D6   27                     DAA      
05D7   12                     LD   (de),a   
05D8   13                     INC   de   ; string*++,
05D9   C9                     RET      
05DA                             ;********************** PAGE 5 END *********************************************
05DA                          ALIGN   $100   
0600                             ;********************** PAGE 6 BEGIN *********************************************
0600                SLASH:       
0600                COMMAND:      
0600   03                     INC   bc   
0601   0A                     LD   a,(bc)   
0602   FE 2F                  CP   "/"   ; // comment
0604   CA 32 07               JP   z,comment   
0607   0B                     DEC   bc   
0608   CD 3C 0E               CALL   commandTable   
060B   26                     DB   lsb(command_a_)   
060C   38                     DB   lsb(command_b_)   
060D   BF                     DB   lsb(command_nop_)   
060E   44                     DB   lsb(command_d_)   
060F   BF                     DB   lsb(command_nop_)   
0610   4A                     DB   lsb(command_f_)   
0611   BF                     DB   lsb(command_nop_)   
0612   65                     DB   lsb(command_h_)   
0613   6B                     DB   lsb(command_i_)   
0614   BF                     DB   lsb(command_nop_)   
0615   71                     DB   lsb(key_)   
0616   BF                     DB   lsb(command_nop_)   
0617   74                     DB   lsb(command_m_)   
0618   BF                     DB   lsb(command_nop_)   
0619   7A                     DB   lsb(output_)   
061A   7D                     DB   lsb(command_p_)   
061B   80                     DB   lsb(command_q_)   
061C   86                     DB   lsb(command_r_)   
061D   92                     DB   lsb(command_s_)   
061E   A4                     DB   lsb(true_)   
061F   BF                     DB   lsb(command_nop_)   
0620   A7                     DB   lsb(command_v_)   
0621   B6                     DB   lsb(command_w_)   
0622   BC                     DB   lsb(xor_)   
0623   BF                     DB   lsb(command_nop_)   
0624   BF                     DB   lsb(command_nop_)   
0625   C2                     DB   lsb(command_default_)   
0626                             ; 12
0626                COMMAND_A_:      
0626   62                     DB   "b"   ; /ab absolute
0627   C5 06                  DW   absolute   
0629   64                     DB   "d"   ; /ad address of
062A   D2 06                  DW   addrOf   
062C   69                     DB   "i"   ; /ad address of
062D   84 08                  DW   arrayIter   
062F   6C                     DB   "l"   ; /al array length
0630   F3 06                  DW   arrayLength   
0632   73                     DB   "s"   ; /as array size
0633   FC 06                  DW   arraySize   
0635   00                     DB   NUL   
0636   4F 07                  DW   error1   
0638                COMMAND_B_:      
0638   62                     DB   "b"   ; /bb bye bye cold boot
0639   07 0F                  DW   coldStart   
063B   6D                     DB   "m"   ; /bm byte mode
063C   2A 07                  DW   byteMode   
063E   72                     DB   "r"   ; /br break from loop
063F   10 07                  DW   break   
0641   00                     DB   NUL   
0642   4F 07                  DW   error1   
0644                COMMAND_D_:      
0644   62                     DB   "b"   ; /db decimal base
0645   47 07                  DW   decBase   
0647   00                     DB   NUL   
0648   47 07                  DW   decBase   ; /d decimal
064A                COMMAND_F_:      
064A   64                     DB   "d"   ; /fd fold
064B   2D 0A                  DW   fold   
064D   65                     DB   "e"   ; /fe forEach
064E   7F 0A                  DW   forEach   
0650   73                     DB   "s"   ; /fs funcSrc
0651   CB 0A                  DW   funcSrc   
0653   74                     DB   "t"   ; /ft filter
0654   CF 09                  DW   filter   
0656   31                     DB   "1"   
0657   00 10                  DW   f1   
0659   32                     DB   "2"   
065A   0C 10                  DW   f2   
065C   33                     DB   "3"   
065D   18 10                  DW   f3   
065F   34                     DB   "4"   
0660   24 10                  DW   f4   
0662   00                     DB   NUL   
0663   A2 03                  DW   false1   
0665                COMMAND_H_:      
0665   62                     DB   "b"   ; /hb hex base
0666   55 07                  DW   hexBase   
0668   00                     DB   NUL   
0669   4F 07                  DW   error1   
066B                             ; 6
066B                COMMAND_I_:      
066B   6E                     DB   "n"   ; /in input
066C   5B 07                  DW   input   
066E   00                     DB   NUL   
066F   4F 07                  DW   error1   
0671                KEY_:        
0671   00                     DB   NUL   
0672   66 07                  DW   key   
0674                COMMAND_M_:      
0674   70                     DB   "p"   ; /mp map
0675   8D 09                  DW   map   
0677   00                     DB   NUL   
0678   4F 07                  DW   error1   
067A                OUTPUT_:      
067A   00                     DB   NUL   
067B   6F 07                  DW   output   
067D                             ; 4
067D                COMMAND_P_:      
067D   00                     DB   NUL   
067E   4F 07                  DW   error1   
0680                             ; 6
0680                COMMAND_Q_:      
0680   74                     DB   "t"   ; /qt quit
0681   78 07                  DW   quit   
0683   00                     DB   NUL   
0684   4F 07                  DW   error1   
0686                COMMAND_R_:      
0686   63                     DB   "c"   ; /rc tail call optimisation
0687   82 07                  DW   recur   
0689   65                     DB   "e"   ; /re remainder
068A   88 07                  DW   remain   
068C   67                     DB   "g"   ; /rg range src
068D   08 08                  DW   rangeSrc   
068F   00                     DB   NUL   
0690   4F 07                  DW   error1   
0692                COMMAND_S_:      
0692   62                     DB   "b"   
0693   8E 07                  DW   stringBegin   
0695   65                     DB   "e"   
0696   96 07                  DW   stringEnd   
0698   69                     DB   "i"   
0699   05 09                  DW   stringIter   
069B   6C                     DB   "l"   
069C   C5 07                  DW   stringLength   
069E   73                     DB   "s"   
069F   D3 07                  DW   stringSize   
06A1   00                     DB   NUL   
06A2   4F 07                  DW   error1   
06A4                TRUE_:       
06A4   00                     DB   NUL   
06A5   9C 03                  DW   true1   
06A7                COMMAND_V_:      
06A7   68                     DB   "h"   
06A8   DF 07                  DW   varHeapPtr   
06AA   74                     DB   "t"   
06AB   E8 07                  DW   varTIBPtr   
06AD   48                     DB   "H"   
06AE   3B 07                  DW   constHeapStart   
06B0   54                     DB   "T"   
06B1   41 07                  DW   constTIBStart   
06B3   00                     DB   NUL   
06B4   4F 07                  DW   error1   
06B6                COMMAND_W_:      
06B6   6D                     DB   "m"   ; /wm word mode
06B7   F7 07                  DW   wordMode   
06B9   00                     DB   NUL   
06BA   4F 07                  DW   error1   
06BC                XOR_:        
06BC   00                     DB   NUL   
06BD   FD 07                  DW   xor   
06BF                             ; 2
06BF                COMMAND_NOP_:      
06BF   00                     DB   NUL   
06C0   14 02                  DW   nop_   
06C2                             ; 3
06C2                COMMAND_DEFAULT_:      
06C2   00                     DB   NUL   
06C3   D0 0C                  DW   div   
06C5                             ;********************** PAGE 6 END *********************************************
06C5                             ; /ab absolute
06C5                             ; num -- num
06C5                ABSOLUTE:      
06C5   E1                     POP   hl   
06C6   CB 7C                  BIT   7,h   
06C8   C8                     RET   z   
06C9   AF                     XOR   a   
06CA   95                     SUB   l   
06CB   6F                     LD   l,a   
06CC   9F                     SBC   a,a   
06CD   94                     SUB   h   
06CE   67                     LD   h,a   
06CF   E5                     PUSH   hl   
06D0   DD E9                  JP   (ix)   
06D2                             ; /ad addrOf                    24
06D2                             ; char -- addr
06D2                ADDROF:      
06D2   E1                     POP   hl   ; a = char
06D3   7D                     LD   a,l   
06D4   FE 7B                  CP   "z"+1   ; if a > z then exit
06D6   30 19                  JR   nc,addrOf2   
06D8   D6 41                  SUB   "A"   ; a - 65
06DA   38 15                  JR   c,addrOf2   ; if < A then exit
06DC   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
06DE   38 06                  JR   c,addrOf1   
06E0   D6 06                  SUB   "a"-("Z"+1)   
06E2   FE 1A                  CP   "Z"-"A"+1   
06E4   38 0B                  JR   c,addrOf2   ; if < a then exit
06E6                ADDROF1:      
06E6   87                     ADD   a,a   ; double a
06E7   21 00 4D               LD   hl,VARS   ; hl = VARS + a
06EA   85                     ADD   a,l   
06EB   6F                     LD   l,a   
06EC   3E 00                  LD   a,0   
06EE   8C                     ADC   a,h   
06EF   67                     LD   h,a   
06F0   E5                     PUSH   hl   
06F1                ADDROF2:      
06F1   DD E9                  JP   (ix)   
06F3                             ; /al length of an array, num elements
06F3                             ; array* -- num
06F3                ARRAYLENGTH:      
06F3   E1                     POP   hl   
06F4   2B                     DEC   hl   ; msb size
06F5   56                     LD   d,(hl)   
06F6   2B                     DEC   hl   ; lsb size
06F7   5E                     LD   e,(hl)   
06F8   EB                     EX   de,hl   
06F9                ARRAYLENGTH1:      
06F9   E5                     PUSH   hl   
06FA   DD E9                  JP   (ix)   
06FC                             ; /as size in bytes of an array, based on current data width
06FC                             ; array* -- num
06FC                ARRAYSIZE:      
06FC                          ;*Macro unroll:  PERFORM arrayLength
06FC   DD 21 03 07            LD   ix,performM_1696S1219   
0700   C3 F3 06               JP   arrayLength   
0703                PERFORMM_1696S1219:      
0703   E1                     POP   hl   
0704   3A E6 4D               LD   a,(vDataWidth)   
0707   3D                     DEC   a   
0708   28 EF                  JR   z,arrayLength1   
070A   CB 3C                  SRL   h   
070C   CB 1D                  RR   l   
070E   18 E9                  JR   arrayLength1   
0710                             ; 13
0710                             ; /br break from loop
0710                             ; --
0710                BREAK:       
0710   E1                     POP   hl   ; hl = condition, break if false
0711   7D                     LD   a,l   
0712   B4                     OR   h   
0713   28 02                  JR   z,break1   
0715   DD E9                  JP   (ix)   
0717                BREAK1:      
0717   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0719   FD 54                  LD   d,iyh   
071B   21 08 00               LD   hl,8   
071E   19                     ADD   hl,de   
071F   23                     INC   hl   
0720   23                     INC   hl   
0721   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0724   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0727   C3 C4 0B               JP   blockEnd   
072A                             ; /b
072A                BYTEMODE:      
072A   21 01 00               LD   hl,1   
072D                BYTEMODE1:      
072D   22 E6 4D               LD   (vDataWidth),hl   
0730   DD E9                  JP   (ix)   
0732                             ; //
0732                COMMENT:      
0732   03                     INC   bc   ; point to next char
0733   0A                     LD   a,(bc)   
0734   FE 20                  CP   " "   ; terminate on any char less than SP
0736   30 FA                  JR   nc,comment   
0738   0B                     DEC   bc   
0739   DD E9                  JP   (ix)   
073B                CONSTHEAPSTART:      
073B   11 22 4E               LD   de,HEAP   
073E   C3 F4 07               JP   constant   
0741                CONSTTIBSTART:      
0741   11 00 4B               LD   de,TIB   
0744   C3 F4 07               JP   constant   
0747                DECBASE:      
0747   21 0A 00               LD   hl,10   
074A                DECBASE1:      
074A   22 E8 4D               LD   (vNumBase),hl   
074D   DD E9                  JP   (ix)   
074F                ERROR1:      
074F   21 01 00               LD   hl,1   ; error 1: unknown command
0752   C3 BB 0F               JP   error   
0755                HEXBASE:      
0755   21 10 00               LD   hl,16   
0758   C3 4A 07               JP   decBase1   
075B                             ; Z80 port input
075B                             ; port -- value
075B                INPUT:       
075B   E1                     POP   hl   
075C   59                     LD   e,c   ; save IP
075D   4D                     LD   c,l   
075E   ED 68                  IN   l,(c)   
0760   26 00                  LD   h,0   
0762   4B                     LD   c,e   ; restore IP
0763   E5                     PUSH   hl   
0764   DD E9                  JP   (ix)   
0766                             ; /k                              6
0766                KEY:         
0766   CD 81 00               CALL   getchar   
0769   26 00                  LD   h,0   
076B   6F                     LD   l,a   
076C   E5                     PUSH   hl   
076D   DD E9                  JP   (ix)   
076F                             ; /o Z80 port output
076F                             ; value port --
076F                OUTPUT:      
076F   E1                     POP   hl   
0770   59                     LD   e,c   ; save IP
0771   4D                     LD   c,l   
0772   E1                     POP   hl   
0773   ED 69                  OUT   (c),l   
0775   4B                     LD   c,e   ; restore IP
0776   DD E9                  JP   (ix)   
0778                             ; /qt
0778                             ; bool --
0778                QUIT:        
0778   E1                     POP   hl   ; hl = condition, exit if true
0779   7D                     LD   a,l   
077A   B4                     OR   h   
077B   20 02                  JR   nz,quit1   
077D   DD E9                  JP   (ix)   
077F                QUIT1:       
077F   C3 C4 0B               JP   blockEnd   
0782                RECUR:       
0782   E1                     POP   hl   
0783   22 F2 4D               LD   (vRecur),hl   
0786   DD E9                  JP   (ix)   
0788                REMAIN:      
0788   2A FA 4D               LD   hl,(vRemain)   
078B   E5                     PUSH   hl   
078C   DD E9                  JP   (ix)   
078E                STRINGBEGIN:      
078E   21 FF FF               LD   hl,TRUE   ; string mode = true
0791   22 F6 4D               LD   (vStrMode),hl   
0794   18 27                  JR   stringEnd1   ; save hl in vBufPtr
0796                STRINGEND:      
0796   21 00 00               LD   hl,FALSE   ; string mode = false
0799   22 F6 4D               LD   (vStrMode),hl   
079C   2A EC 4D               LD   hl,(vBufPtr)   ; append NUL to string
079F   AF                     XOR   a   
07A0   77                     LD   (hl),a   
07A1   23                     INC   hl   ; hl = string_end*
07A2   ED 43 04 4E            LD   (vTemp1),bc   ; save IP
07A6   11 00 4C               LD   de,BUFFER   ; de = string*
07A9   B7                     OR   a   ; bc = size
07AA   ED 52                  SBC   hl,de   
07AC   44 4D                  LD   bc,hl   
07AE   2A F0 4D               LD   hl,(vHeapPtr)   ; hl = hstring*
07B1   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
07B2   D5                     PUSH   de   ; return hstring*
07B3   ED B0                  LDIR      ; copy size bytes from string* to hstring*
07B5   ED 53 F0 4D            LD   (vHeapPtr),de   ; bump heap to hstring* += size
07B9   ED 4B 04 4E            LD   bc,(vTemp1)   ; restore IP
07BD                STRINGEND1:      
07BD   21 00 4C               LD   hl,BUFFER   ; reset vBufPtr
07C0   22 EC 4D               LD   (vBufPtr),hl   
07C3   DD E9                  JP   (ix)   
07C5                STRINGLENGTH:      
07C5   D1                     POP   de   
07C6   21 00 00               LD   hl,0   
07C9   18 01                  JR   stringLength2   
07CB                STRINGLENGTH1:      
07CB   23                     INC   hl   
07CC                STRINGLENGTH2:      
07CC   1A                     LD   a,(de)   
07CD   B7                     OR   a   
07CE   20 FB                  JR   nz,stringLength1   
07D0                STRINGLENGTH3:      
07D0   E5                     PUSH   hl   
07D1   DD E9                  JP   (ix)   
07D3                STRINGSIZE:      
07D3                          ;*Macro unroll:  PERFORM stringLength
07D3   DD 21 DA 07            LD   ix,performM_1840S1382   
07D7   C3 C5 07               JP   stringLength   
07DA                PERFORMM_1840S1382:      
07DA   E1                     POP   hl   
07DB   23                     INC   hl   
07DC   C3 D0 07               JP   stringLength3   
07DF                VARHEAPPTR:      
07DF   ED 5B F0 4D            LD   de,(vHeapPtr)   
07E3   21 F0 4D               LD   hl,vHeapPtr   
07E6   18 09                  JR   variable   
07E8                VARTIBPTR:      
07E8   ED 5B EA 4D            LD   de,(vTIBPtr)   
07EC   21 EA 4D               LD   hl,vTIBPtr   
07EF   18 00                  JR   variable   
07F1                VARIABLE:      
07F1   22 F8 4D               LD   (vPointer),hl   
07F4                CONSTANT:      
07F4   D5                     PUSH   de   
07F5   DD E9                  JP   (ix)   
07F7                             ; /wm
07F7                WORDMODE:      
07F7   21 02 00               LD   hl,2   
07FA   C3 2D 07               JP   byteMode1   
07FD                XOR:         
07FD   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
07FE                XOR1:        
07FE   E1                     POP   hl   
07FF   7B                     LD   a,e   
0800   AD                     XOR   l   
0801   6F                     LD   l,a   
0802   7A                     LD   a,d   
0803   AC                     XOR   h   
0804   67                     LD   h,a   
0805   E5                     PUSH   hl   
0806   DD E9                  JP   (ix)   
0808                             ;*******************************************************************
0808                             ; Monty implementations
0808                             ;*******************************************************************
0808                             ; /rg rangeSrc
0808                             ; begin end step -- src
0808                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
0808                RANGESRC:      ; range source: begin, end, step, local: L
0808   CD 31 0C               CALL   go   
080B   00 00                  DW   NUL   
080D   17 08                  DW   rangeSrcM_1878S1427   
080F   11 08                  DW   $+2   
0811   01                     DB   1   
0812   04 62 65 73 4C         .PSTR   "besL"   
0817                RANGESRCM_1878S1427:      
0817   7B                     DB   "{"   
0818   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
0823   5C 6B 74 7B            DB   "\\kt{"   
0827   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
082F   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
0835   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
083D   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
0845   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
084F   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0857   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
085E   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
0872   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
087A   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0881   7D                     DB   "}"   
0882   7D                     DB   "}"   
0883   00                     DB   0   
0884                             ; /ai arrayIter
0884                             ; array* -- src
0884                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
0884                ARRAYITER:      
0884   CD 31 0C               CALL   go   
0887   00 00                  DW   NUL   
0889   91 08                  DW   arrayIterM_1897S1447   
088B   8D 08                  DW   $+2   
088D   01                     DB   1   
088E   02 61 4C               .PSTR   "aL"   
0891                ARRAYITERM_1897S1447:      
0891   7B                     DB   "{"   
0892   5B 30 20 2F 74 20 25 61 2F 61 6C 5D 20 25 4C 3D DB   "[0 /t %a/al] %L="   ; init mutable L [index active size]
08A2   5C 6B 74 7B            DB   "\\kt{"   
08A6   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
08AE   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
08B4   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
08BC   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
08C4   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
08CB   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
08D3   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
08DC   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
08F3   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
08FB   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0902   7D                     DB   "}"   
0903   7D                     DB   "}"   
0904   00                     DB   0   
0905                             ; /si stringIter
0905                             ; string* -- src
0905                          ;*Macro unroll: FUNC stringIter, 1, "sL"
0905                STRINGITER:      
0905   CD 31 0C               CALL   go   
0908   00 00                  DW   NUL   
090A   12 09                  DW   stringIterM_1916S1467   
090C   0E 09                  DW   $+2   
090E   01                     DB   1   
090F   02 73 4C               .PSTR   "sL"   
0912                STRINGITERM_1916S1467:      
0912   7B                     DB   "{"   
0913   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
091D   5C 6B 74 7B            DB   "\\kt{"   
0921   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0929   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
0930   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0938   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
0940   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
0947   2F 62 6D 20 25 73 25 69 23 20 2F 77 6D 20 25 63 3D DB   "/bm %s%i# /wm %c="   ; read byte at i, store in c as word
0958   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0960   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
0967   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
097B   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
0983   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
098A   7D                     DB   "}"   
098B   7D                     DB   "}"   
098C   00                     DB   0   
098D                             ; /mp map
098D                             ; src func -- src1
098D                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
098D                MAP:         ; map: source, function
098D   CD 31 0C               CALL   go   
0990   00 00                  DW   NUL   
0992   9A 09                  DW   mapM_1936S1489   
0994   96 09                  DW   $+2   
0996   00                     DB   0   
0997   02 73 66               .PSTR   "sf"   
099A                MAPM_1936S1489:      
099A   7B                     DB   "{"   
099B   5C 6B 74 7B            DB   "\\kt{"   
099F   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
09A7   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09AB   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
09B0   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
09BC   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
09C5   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09CC   7D                     DB   "}"   
09CD   7D                     DB   "}"   
09CE   00                     DB   0   
09CF                             ; /ft filter
09CF                             ; src pred -- src1
09CF                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
09CF                FILTER:      ; filter: source, predicate, local: T
09CF   CD 31 0C               CALL   go   
09D2   00 00                  DW   NUL   
09D4   DD 09                  DW   filterM_1950S1504   
09D6   D8 09                  DW   $+2   
09D8   01                     DB   1   
09D9   03 73 70 54            .PSTR   "spT"   
09DD                FILTERM_1950S1504:      
09DD   7B                     DB   "{"   
09DE   5B 30 5D 25 54 3D      DB   "[0]%T="   
09E4   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09E8   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09EC   5B                     DB   "["   
09ED   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
09FA   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
0A02   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
0A06   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
0A0B   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
0A21   3F 3F                  DB   "??"   
0A23   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A2A   7D                     DB   "}"   
0A2B   7D                     DB   "}"   
0A2C   00                     DB   0   
0A2D                             ; /fd fold
0A2D                             ; reducer is a function like: \\da00bbLi4u
0A2D                             ; src init reducer -- src1
0A2D                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
0A2D                FOLD:        ; src, init, reducer
0A2D   CD 31 0C               CALL   go   
0A30   00 00                  DW   NUL   
0A32   3C 0A                  DW   foldM_1969S1524   
0A34   36 0A                  DW   $+2   
0A36   01                     DB   1   
0A37   04 73 69 72 41         .PSTR   "sirA"   
0A3C                FOLDM_1969S1524:      
0A3C   7B                     DB   "{"   ; reducer: \\da00bbLi4u
0A3D   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
0A44   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0A48   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0A4C   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0A51   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
0A6C   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0A75   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A7C   7D                     DB   "}"   
0A7D   7D                     DB   "}"   
0A7E   00                     DB   0   
0A7F                             ; /fe forEach
0A7F                             ; src proc --
0A7F                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
0A7F                FOREACH:      ; forEach: source, procedure, local: T
0A7F   CD 31 0C               CALL   go   
0A82   00 00                  DW   NUL   
0A84   8D 0A                  DW   forEachM_1983S1539   
0A86   88 0A                  DW   $+2   
0A88   01                     DB   1   
0A89   03 73 70 54            .PSTR   "spT"   
0A8D                FOREACHM_1983S1539:      
0A8D   7B                     DB   "{"   
0A8E   5B 30 5D 25 54 3D      DB   "[0]%T="   
0A94   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
0A98   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
0AA0   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0AA5   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0AB7   3F 3F                  DB   "??"   ; ifte:
0AB9   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0AC2   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0AC9   7D                     DB   "}"   
0ACA   00                     DB   0   
0ACB                             ; ; /fs funcSrc
0ACB                             ; ; func -- src
0ACB                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0ACB                FUNCSRC:      ; :f func or block
0ACB   CD 31 0C               CALL   go   
0ACE   00 00                  DW   NUL   
0AD0   D7 0A                  DW   funcSrcM_1997S1554   
0AD2   D4 0A                  DW   $+2   
0AD4   00                     DB   0   
0AD5   01 66                  .PSTR   "f"   
0AD7                FUNCSRCM_1997S1554:      
0AD7   7B                     DB   "{"   
0AD8   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0ADC   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0AE4   5C 64 74 7B            DB   "\\dt{"   
0AE8   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0AFA   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0B01   7D                     DB   "}"   
0B02   7D                     DB   "}"   
0B03   00                     DB   0   
0B04                          ;*Macro unroll: FUNC printArray, 2, "abc"
0B04                PRINTARRAY:      
0B04   CD 31 0C               CALL   go   
0B07   00 00                  DW   NUL   
0B09   12 0B                  DW   printArrayM_2007S1565   
0B0B   0D 0B                  DW   $+2   
0B0D   02                     DB   2   
0B0E   03 61 62 63            .PSTR   "abc"   
0B12                PRINTARRAYM_2007S1565:      
0B12   7B                     DB   "{"   
0B13   27 5B 20 27 2E 73 20 25 61 2F 61 6C 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/al%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0B4A   7D                     DB   "}"   
0B4B   00                     DB   0   
0B4C                DOTNEXT:      
0B4C   3A F6 4D               LD   a,(vStrMode)   ; if string mode then exit
0B4F   3C                     INC   a   
0B50   20 02                  JR   nz,dotNext1   
0B52   DD E9                  JP   (ix)   
0B54                DOTNEXT1:      
0B54   11 00 4C               LD   de,BUFFER   
0B57   2A EC 4D               LD   hl,(vBufPtr)   
0B5A   B7                     OR   a   ; hl = count, de = vHeapPtr
0B5B   ED 52                  SBC   hl,de   
0B5D   C3 66 0B               JP   dotNext3   
0B60                DOTNEXT2:      
0B60   1A                     LD   a,(de)   ; print char at char*
0B61   CD 85 00               CALL   putchar   
0B64   13                     INC   de   ; char*++
0B65   2B                     DEC   hl   ; count--
0B66                DOTNEXT3:      
0B66   7D                     LD   a,l   ; count == 0?
0B67   B4                     OR   h   
0B68   20 F6                  JR   nz,dotNext2   ; if not loop
0B6A   21 00 4C               LD   hl,BUFFER   ; reset vBufPtr to vHeapPtr
0B6D   22 EC 4D               LD   (vBufPtr),hl   
0B70   DD E9                  JP   (ix)   
0B72                             ;*******************************************************************
0B72                             ; unused opcodes (reserved)
0B72                             ;*******************************************************************
0B72                UNDERSCORE:      
0B72                COMMA:       
0B72   DD E9                  JP   (ix)   
0B74                             ;*******************************************************************
0B74                             ; opcodes continued
0B74                             ;*******************************************************************
0B74                RBRACK:      
0B74                ARRAYEND:      
0B74   FD 54                  LD   d,iyh   ; de = BP
0B76   FD 5D                  LD   e,iyl   
0B78   ED 43 04 4E            LD   (vTemp1),bc   ; save IP
0B7C   62 6B                  LD   hl,de   ; hl = de = BP
0B7E   B7                     OR   a   
0B7F   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0B81   CB 3C                  SRL   h   ; 
0B83   CB 1D                  RR   l   
0B85   44 4D                  LD   bc,hl   ; bc = count
0B87   2A F0 4D               LD   hl,(vHeapPtr)   ; hl = array[-4]
0B8A   71                     LD   (hl),c   ; write num items in length word
0B8B   23                     INC   hl   
0B8C   70                     LD   (hl),b   
0B8D   23                     INC   hl   ; hl = array[0], bc = count
0B8E                             ; de = BP, hl = array[0], bc = count
0B8E   18 15                  JR   arrayEnd3   
0B90                ARRAYEND1:      
0B90   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0B93   77                     LD   (hl),a   ; write lsb of array item
0B94   23                     INC   hl   ; move to msb of array item
0B95   3A E6 4D               LD   a,(vDataWidth)   ; vDataWidth=1?
0B98   3D                     DEC   a   
0B99   28 05                  JR   z,arrayEnd2   
0B9B   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0B9E   77                     LD   (hl),a   ; write msb of array item
0B9F   23                     INC   hl   ; move to next word in array
0BA0                ARRAYEND2:      
0BA0   FD 2B                  DEC   iy   ; move to next word on stack
0BA2   FD 2B                  DEC   iy   
0BA4   0B                     DEC   bc   ; dec items count
0BA5                ARRAYEND3:      
0BA5   79                     LD   a,c   ; if not zero loop
0BA6   B0                     OR   b   
0BA7   20 E7                  JR   nz,arrayEnd1   
0BA9   EB                     EX   de,hl   ; de = end of array, hl = BP
0BAA   F9                     LD   sp,hl   ; sp = BP
0BAB   E1                     POP   hl   ; de = end of array, hl = old BP
0BAC   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0BAD   FD 62                  LD   iyh,d   
0BAF   FD 6B                  LD   iyl,e   
0BB1   D1                     POP   de   ; pop arg_list (discard)
0BB2   D1                     POP   de   ; pop first_arg* (discard)
0BB3   D1                     POP   de   ; pop IP (discard)
0BB4   ED 5B F0 4D            LD   de,(vHeapPtr)   ; de = array[-2]
0BB8   13                     INC   de   
0BB9   13                     INC   de   
0BBA   D5                     PUSH   de   ; return array[0]
0BBB   22 F0 4D               LD   (vHeapPtr),hl   ; move heap* to end of array
0BBE   ED 4B 04 4E            LD   bc,(vTemp1)   ; restore IP
0BC2   DD E9                  JP   (ix)   
0BC4                             ;                               58
0BC4                RBRACE:      
0BC4                BLOCKEND:      
0BC4   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0BC7   FD 56 01               LD   d,(iy+1)   
0BCA   ED 53 04 4E            LD   (vTemp1),de   
0BCE   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0BD1   FD 56 07               LD   d,(iy+7)   
0BD4   ED 53 06 4E            LD   (vTemp2),de   
0BD8   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0BDB   FD 56 03               LD   d,(iy+3)   
0BDE   EB                     EX   de,hl   
0BDF   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0BE2   FD 56 01               LD   d,(iy+1)   
0BE5   13                     INC   de   ; for carry flag <=
0BE6   B7                     OR   a   
0BE7   ED 52                  SBC   hl,de   
0BE9   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0BEB   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0BED   FD 5D                  LD   e,iyl   
0BEF   21 08 00               LD   hl,8   
0BF2   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0BF3   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0BF4   18 0C                  JR   blockEnd2   
0BF6                BLOCKEND1:      ; same scope
0BF6   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0BF9   FD 56 03               LD   d,(iy+3)   
0BFC   EB                     EX   de,hl   
0BFD   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0BFF   FD 5D                  LD   e,iyl   
0C01   EB                     EX   de,hl   
0C02                BLOCKEND2:      
0C02   44 4D                  LD   bc,hl   ; bc = hl = BP
0C04   B7                     OR   a   ; hl = BP - SP = count
0C05   ED 72                  SBC   hl,sp   
0C07   7D                     LD   a,l   
0C08   B4                     OR   h   
0C09   28 09                  JR   z,blockEnd3   
0C0B   C5                     PUSH   bc   ; bc = count, hl = BP
0C0C   44 4D                  LD   bc,hl   
0C0E   E1                     POP   hl   
0C0F   2B                     DEC   hl   ; hl = BP-1
0C10   1B                     DEC   de   ; de = args*-1
0C11   ED B8                  LDDR      
0C13   13                     INC   de   
0C14                BLOCKEND3:      
0C14   EB                     EX   de,hl   ; sp = de = new tos*
0C15   F9                     LD   sp,hl   
0C16   ED 4B 06 4E            LD   bc,(vTemp2)   
0C1A   FD 2A 04 4E            LD   iy,(vTemp1)   
0C1E   ED 5B F2 4D            LD   de,(vRecur)   ; de = recur vector
0C22   7B                     LD   a,e   ; check for NUL
0C23   B2                     OR   d   
0C24   20 02                  JR   nz,blockEnd4   
0C26   DD E9                  JP   (ix)   
0C28                BLOCKEND4:      
0C28   21 00 00               LD   hl,0   ; clear recur vector
0C2B   22 F2 4D               LD   (vRecur),hl   
0C2E   C3 32 0C               JP   go1   ; execute de
0C31                             ; execute a block of code which ends with } 116
0C31                             ; creates a root scope if BP == stack
0C31                             ; else uses outer scope
0C31                CARET:       
0C31                GO:          
0C31   D1                     POP   de   ; de = block*
0C32                GO1:         
0C32   7B                     LD   a,e   ; if block* == null, exit
0C33   B2                     OR   d   
0C34   20 02                  JR   nz,go2   
0C36   DD E9                  JP   (ix)   
0C38                GO2:         
0C38   1A                     LD   a,(de)   
0C39   FE 7B                  CP   "{"   
0C3B   28 06                  JR   z,goBlock   
0C3D   FE 28                  CP   "("   
0C3F   C2 76 0C               JP   nz,goFunc   
0C42   D5                     PUSH   de   ; push de just before stack frame
0C43                GOBLOCK:      
0C43   ED 53 04 4E            LD   (vTemp1),de   ; save de
0C47   21 00 4B               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0C4A   FD 54                  LD   d,iyh   
0C4C   FD 5D                  LD   e,iyl   
0C4E   B7                     OR   a   ; if stack* == BP then this is the root_scope
0C4F   ED 52                  SBC   hl,de   
0C51   ED 5B 04 4E            LD   de,(vTemp1)   ; restore de
0C55   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0C56   B4                     OR   h   
0C57   3E 00                  LD   a,0   
0C59   28 6A                  JR   z,goFunc8   
0C5B   C5                     PUSH   bc   ; push IP
0C5C   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0C5F   FD 46 05               LD   b,(iy+5)   
0C62   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0C65   FD 66 03               LD   h,(iy+3)   
0C68                GOBLOCK2:      
0C68   C5                     PUSH   bc   ; arg_list*
0C69   E5                     PUSH   hl   ; first_arg*
0C6A   FD E5                  PUSH   iy   ; push BP
0C6C   FD 21 00 00            LD   iy,0   ; BP = SP
0C70   FD 39                  ADD   iy,sp   
0C72                GOBLOCK3:      
0C72   42 4B                  LD   bc,de   ; bc = de = block*-1
0C74   DD E9                  JP   (ix)   
0C76                GOFUNC:      ; execute func
0C76   EB                     EX   de,hl   ; hl = func*
0C77   5E                     LD   e,(hl)   ; de = partial_array*
0C78   23                     INC   hl   
0C79   56                     LD   d,(hl)   
0C7A   23                     INC   hl   
0C7B   7B                     LD   a,e   ; if partial_array* == null skip
0C7C   B2                     OR   d   
0C7D   28 21                  JR   z,goFunc3   
0C7F   ED 43 04 4E            LD   (vTemp1),bc   
0C83   22 06 4E               LD   (vTemp2),hl   ; save bc,hl
0C86   EB                     EX   de,hl   ; hl = partial_array*
0C87   2B                     DEC   hl   ; bc = count
0C88   46                     LD   b,(hl)   
0C89   2B                     DEC   hl   
0C8A   4E                     LD   c,(hl)   
0C8B   23                     INC   hl   ; hl = array data*
0C8C   23                     INC   hl   
0C8D   18 06                  JR   goFunc2   ; push each item on stack
0C8F                GOFUNC1:      
0C8F   5E                     LD   e,(hl)   ; de = partial item
0C90   23                     INC   hl   
0C91   56                     LD   d,(hl)   
0C92   23                     INC   hl   
0C93   D5                     PUSH   de   ; push on stack
0C94   0B                     DEC   bc   
0C95                GOFUNC2:      
0C95   79                     LD   a,c   ; if count != 0 then loop
0C96   B0                     OR   b   
0C97   20 F6                  JR   nz,goFunc1   
0C99   ED 4B 04 4E            LD   bc,(vTemp1)   ; restore bc
0C9D   2A 06 4E               LD   hl,(vTemp2)   ; restore hl
0CA0                GOFUNC3:      
0CA0   5E                     LD   e,(hl)   ; de = block*
0CA1   23                     INC   hl   
0CA2   56                     LD   d,(hl)   
0CA3   23                     INC   hl   
0CA4   ED 53 04 4E            LD   (vTemp1),de   ; save block*
0CA8   5E                     LD   e,(hl)   ; de = arg_list*
0CA9   23                     INC   hl   
0CAA   56                     LD   d,(hl)   
0CAB   23                     INC   hl   
0CAC   EB                     EX   de,hl   ; hl = arg_list*
0CAD   ED 5B 04 4E            LD   de,(vTemp1)   ; restore de = block*
0CB1   7D                     LD   a,l   ; if arg_list* == null a = 0
0CB2   B4                     OR   h   
0CB3   20 03                  JR   nz,goFunc4   
0CB5   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0CB6   18 0D                  JR   goFunc8   
0CB8                GOFUNC4:      ; allocate locals
0CB8   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0CB9   18 03                  JR   goFunc6   
0CBB                GOFUNC5:      ; loop
0CBB   3B                     DEC   sp   
0CBC   3B                     DEC   sp   
0CBD   3D                     DEC   a   
0CBE                GOFUNC6:      
0CBE   B7                     OR   a   
0CBF   20 FA                  JR   nz,goFunc5   ; end loop
0CC1                GOFUNC7:      
0CC1   23                     INC   hl   ; a = num_args* x 2
0CC2   7E                     LD   a,(hl)   
0CC3   2B                     DEC   hl   
0CC4   87                     ADD   a,a   ; a *= 2
0CC5                GOFUNC8:      
0CC5   C5                     PUSH   bc   ; push IP
0CC6   44 4D                  LD   bc,hl   
0CC8   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0CCB   85                     ADD   a,l   
0CCC   6F                     LD   l,a   
0CCD   39                     ADD   hl,sp   
0CCE   18 98                  JR   goBlock2   
0CD0                             ;                               32
0CD0                DIV:         
0CD0   D1                     POP   de   
0CD1   E1                     POP   hl   
0CD2   C5                     PUSH   bc   ; preserve the IP
0CD3   44 4D                  LD   bc,hl   
0CD5   CD E1 0C               CALL   divide   
0CD8   EB                     EX   de,hl   
0CD9   ED 53 FA 4D            LD   (vRemain),de   
0CDD   C1                     POP   bc   
0CDE   C3 E9 02               JP   add3   
0CE1                             ; division subroutine.
0CE1                             ; bc: divisor, de: dividend, hl: remainder
0CE1                DIVIDE:      
0CE1   21 00 00               LD   hl,0   ; zero the remainder
0CE4   3E 10                  LD   a,16   ; loop counter
0CE6                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0CE6   CB 21                  SLA   c   
0CE8   CB 10                  RL   b   
0CEA   ED 6A                  ADC   hl,hl   
0CEC   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0CEE   38 03                  JR   c,divide2   
0CF0   0C                     INC   c   
0CF1   18 01                  JR   divide3   
0CF3                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0CF3   19                     ADD   hl,de   
0CF4                DIVIDE3:      
0CF4   3D                     DEC   a   
0CF5   20 EF                  JR   nz,divide1   
0CF7   50 59                  LD   de,bc   ; result from bc to de
0CF9   C9                     RET      
0CFA                             ; arg_list - parses arg_list e.g. ab:c
0CFA                             ; -- arg_list*
0CFA                PARSEARGS:      
0CFA   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0CFD   2A F0 4D               LD   hl,(vHeapPtr)   ; hl = heap*
0D00   E5                     PUSH   hl   ; save start of arg_list
0D01   23                     INC   hl   ; skip length fields to start of string
0D02   23                     INC   hl   
0D03   03                     INC   bc   ; point to next char
0D04                PARSEARGS1:      
0D04   0A                     LD   a,(bc)   
0D05   FE 3A                  CP   ":"   ; ":" switches from args to locals
0D07   20 03                  JR   nz,parseArgs1a   
0D09   14                     INC   d   ; non zero value local count acts as flag
0D0A   18 10                  JR   parseArgs3   
0D0C                PARSEARGS1A:      
0D0C   FE 61                  CP   "a"   ; < "a" terminates arg_list
0D0E   38 0F                  JR   c,parseArgs4   
0D10   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0D12   30 0B                  JR   nc,parseArgs4   
0D14                PARSEARGS2:      
0D14   77                     LD   (hl),a   
0D15   23                     INC   hl   
0D16   1C                     INC   e   ; increase arg count
0D17   AF                     XOR   a   
0D18   B2                     OR   d   
0D19   28 01                  JR   z,parseArgs3   
0D1B   14                     INC   d   ; if d > 0 increase local count
0D1C                PARSEARGS3:      
0D1C   03                     INC   bc   ; point to next char
0D1D   18 E5                  JR   parseArgs1   
0D1F                PARSEARGS4:      
0D1F   0B                     DEC   bc   
0D20   AF                     XOR   a   
0D21   B2                     OR   d   
0D22   28 01                  JR   z,parseArgs5   
0D24   15                     DEC   d   ; remove initial inc
0D25                PARSEARGS5:      
0D25   23                     INC   hl   
0D26   22 F0 4D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0D29   E1                     POP   hl   ; hl = start of arg_list
0D2A   72                     LD   (hl),d   ; write number of locals at start - 1
0D2B   23                     INC   hl   
0D2C   73                     LD   (hl),e   ; write number of args + locals at start - 2
0D2D   2B                     DEC   hl   
0D2E   E3                     EX   (sp),hl   
0D2F   E9                     JP   (hl)   
0D30                             ; create block: parses block e.g. 00bbIC4uLi4g
0D30                             ; -- block*
0D30                PARSEBLOCK:      
0D30   C5                     PUSH   bc   ; return pointer to first { of block
0D31   03                     INC   bc   
0D32   16 01                  LD   d,1   ; nesting: count first parenthesis
0D34                PARSEBLOCK1:      ; Skip to end of definition
0D34   0A                     LD   a,(bc)   ; Get the next character
0D35   03                     INC   bc   ; Point to next character
0D36   FE 21                  CP   " " + 1   ; ignore whitespace
0D38   38 FA                  JR   c,parseBlock1   
0D3A   FE 29                  CP   ")"   
0D3C   28 2D                  JR   z,parseBlock4   
0D3E   FE 7D                  CP   "}"   
0D40   28 29                  JR   z,parseBlock4   
0D42   FE 5D                  CP   "]"   
0D44   28 25                  JR   z,parseBlock4   
0D46   FE 28                  CP   "("   
0D48   28 16                  JR   z,parseBlock2   
0D4A   FE 7B                  CP   "{"   
0D4C   28 12                  JR   z,parseBlock2   
0D4E   FE 5B                  CP   "["   
0D50   28 0E                  JR   z,parseBlock2   
0D52   FE 27                  CP   "'"   
0D54   28 0D                  JR   z,parseBlock3   
0D56   FE 60                  CP   "`"   
0D58   28 09                  JR   z,parseBlock3   
0D5A   FE 22                  CP   DQ   
0D5C   28 05                  JR   z,parseBlock3   
0D5E   18 D4                  JR   parseBlock1   
0D60                PARSEBLOCK2:      
0D60   14                     INC   d   
0D61   18 D1                  JR   parseBlock1   
0D63                PARSEBLOCK3:      
0D63   3E 80                  LD   a,$80   
0D65   AA                     XOR   d   
0D66   57                     LD   d,a   
0D67   20 CB                  JR   nz,parseBlock1   
0D69   18 03                  JR   parseBlock5   
0D6B                PARSEBLOCK4:      
0D6B   15                     DEC   d   
0D6C   20 C6                  JR   nz,parseBlock1   ; get the next element
0D6E                PARSEBLOCK5:      
0D6E   60 69                  LD   hl,bc   ; hl = IP
0D70   11 22 4E               LD   de,HEAP   ; is IP pointing to object in heap
0D73   B7                     OR   a   ; IP - HEAP
0D74   ED 52                  SBC   hl,de   
0D76   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0D78   28 1C                  JR   z,parseBlock6   
0D7A   60 69                  LD   hl,bc   ; hl = IP
0D7C   D1                     POP   de   ; de = block*
0D7D   ED 43 04 4E            LD   (vTemp1),bc   ; save IP
0D81   B7                     OR   a   ; bc = size
0D82   ED 52                  SBC   hl,de   
0D84   44 4D                  LD   bc,hl   
0D86   EB                     EX   de,hl   ; hl = block* de = heap*
0D87   ED 5B F0 4D            LD   de,(vHeapPtr)   
0D8B   D5                     PUSH   de   ; return hblock*
0D8C   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0D8E   ED 53 F0 4D            LD   (vHeapPtr),de   ; heap* += size
0D92   ED 4B 04 4E            LD   bc,(vTemp1)   ; restore IP
0D96                PARSEBLOCK6:      
0D96   0B                     DEC   bc   ; balanced, exit
0D97   E1                     POP   hl   ; hl = block*
0D98   E3                     EX   (sp),hl   ; return to caller
0D99   E9                     JP   (hl)   
0D9A                             ; create function
0D9A                             ; arg_list* block* -- func*
0D9A                CREATEFUNC:      
0D9A   E1                     POP   hl   ; save retrn address
0D9B   22 08 4E               LD   (vTemp3),hl   
0D9E   ED 43 04 4E            LD   (vTemp1),bc   ; save IP
0DA2   E1                     POP   hl   ; hl = block*
0DA3   22 06 4E               LD   (vTemp2),hl   ; save block*
0DA6   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0DA9   FD 56 05               LD   d,(iy+5)   
0DAC   7B                     LD   a,e   ; if arg_list == null then make a func
0DAD   B2                     OR   d   
0DAE   20 09                  JR   nz,createFunc0   
0DB0   21 00 00               LD   hl,0   ; partial_array = null
0DB3   ED 5B F0 4D            LD   de,(vHeapPtr)   ; de = compile*
0DB7   18 65                  JR   createFunc5   
0DB9                CREATEFUNC0:      
0DB9   E1                     POP   hl   ; hl = inner_arg_list*
0DBA   E5                     PUSH   hl   ; save inner_arg_list
0DBB   ED 5B F0 4D            LD   de,(vHeapPtr)   ; de = compile*
0DBF   7E                     LD   a,(hl)   ; compile inner_num_locals
0DC0   4F                     LD   c,a   ; b = inner_num_locals
0DC1   12                     LD   (de),a   
0DC2   23                     INC   hl   
0DC3   13                     INC   de   
0DC4   7E                     LD   a,(hl)   ; compile inner_length
0DC5   12                     LD   (de),a   
0DC6   91                     SUB   c   ; a = inner_num args
0DC7   23                     INC   hl   
0DC8   13                     INC   de   
0DC9   B7                     OR   a   ; compile args if inner_length > 0
0DCA   28 05                  JR   z,createFunc1   
0DCC   4F                     LD   c,a   ; bc = a
0DCD   06 00                  LD   b,0   
0DCF   ED B0                  LDIR      
0DD1                CREATEFUNC1:      
0DD1   EB                     EX   de,hl   ; hl = outer_arg_list
0DD2   FD 5E 04               LD   e,(iy+4)   
0DD5   FD 56 05               LD   d,(iy+5)   
0DD8   EB                     EX   de,hl   
0DD9   23                     INC   hl   ; a = outer_length
0DDA   7E                     LD   a,(hl)   
0DDB   23                     INC   hl   
0DDC   B7                     OR   a   
0DDD   28 05                  JR   z,createFunc2   
0DDF   4F                     LD   c,a   
0DE0   06 00                  LD   b,0   
0DE2   ED B0                  LDIR      ; append outer_args
0DE4                CREATEFUNC2:      ; a = outer_length
0DE4   47                     LD   b,a   ; b = a = outer_length
0DE5   2A F0 4D               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0DE8   23                     INC   hl   
0DE9   7E                     LD   a,(hl)   ; add outer_length to new length
0DEA   80                     ADD   a,b   
0DEB   77                     LD   (hl),a   
0DEC   2B                     DEC   hl   
0DED   78                     LD   a,b   ; save outer_length in a'
0DEE   08                     EX   af,af'   
0DEF   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0DF0   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0DF1   B7                     OR   a   
0DF2   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0DF4   4F                     LD   c,a   ; c = inner_num_locals
0DF5   06 00                  LD   b,0   ; bc = inner_num_locals
0DF7   23                     INC   hl   ; a = inner_length
0DF8   7E                     LD   a,(hl)   
0DF9   91                     SUB   c   ; a = inner_num_args
0DFA   23                     INC   hl   ; hl = inner_arg_chars
0DFB   85                     ADD   a,l   ; hl += a
0DFC   6F                     LD   l,a   
0DFD   3E 00                  LD   a,0   
0DFF   84                     ADD   a,h   
0E00   67                     LD   h,a   
0E01   ED B0                  LDIR      ; append inner_locals
0E03                CREATEFUNC2A:      
0E03   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0E04   12                     LD   (de),a   ; compile partial_array length field
0E05   13                     INC   de   
0E06   AF                     XOR   a   
0E07   12                     LD   (de),a   
0E08   13                     INC   de   
0E09   D5                     PUSH   de   ; push partial_array*
0E0A   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0E0B   FD 5E 02               LD   e,(iy+2)   
0E0E   FD 56 03               LD   d,(iy+3)   
0E11   EB                     EX   de,hl   
0E12                CREATEFUNC3:      
0E12   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0E13   4E                     LD   c,(hl)   
0E14   2B                     DEC   hl   
0E15   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0E16   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0E17   13                     INC   de   
0E18   79                     LD   a,c   
0E19   12                     LD   (de),a   
0E1A   13                     INC   de   
0E1B   10 F5                  DJNZ   createFunc3   ; b = outer_length
0E1D                CREATEFUNC4:      
0E1D   E1                     POP   hl   ; hl = partial_array*
0E1E                CREATEFUNC5:      
0E1E   C1                     POP   bc   ; bc = new_arg_list*
0E1F   D5                     PUSH   de   ; return new func*
0E20   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0E21   73                     LD   (hl),e   ; compile partial_array* to func
0E22   23                     INC   hl   
0E23   72                     LD   (hl),d   
0E24   23                     INC   hl   
0E25   ED 5B 06 4E            LD   de,(vTemp2)   ; de = block*
0E29   73                     LD   (hl),e   ; compile block* to func
0E2A   23                     INC   hl   
0E2B   72                     LD   (hl),d   
0E2C   23                     INC   hl   
0E2D   71                     LD   (hl),c   ; compile new_arg_list* to func
0E2E   23                     INC   hl   
0E2F   70                     LD   (hl),b   
0E30   23                     INC   hl   
0E31   22 F0 4D               LD   (vHeapPtr),hl   ; bump heap ptr
0E34   ED 4B 04 4E            LD   bc,(vTemp1)   ; restore IP
0E38   2A 08 4E               LD   hl,(vTemp3)   ; jump to return address
0E3B   E9                     JP   (hl)   
0E3C                             ;*******************************************************************
0E3C                             ; general routines
0E3C                             ;*******************************************************************
0E3C                             ; followed by a table
0E3C                             ; indexed on the 0-25 lowercase letter
0E3C                             ; db lsb(addr)
0E3C                             ; the final item index 26 matches any other char
0E3C                COMMANDTABLE:      
0E3C   03                     INC   bc   
0E3D   0A                     LD   a,(bc)   
0E3E   FE 7B                  CP   "z"+1   
0E40   30 0B                  JR   nc,commandTable2   
0E42   D6 61                  SUB   "a"   
0E44   38 07                  JR   c,commandTable2   
0E46                COMMANDTABLE1:      
0E46   E1                     POP   hl   
0E47   85                     ADD   a,l   
0E48   6F                     LD   l,a   
0E49   6E                     LD   l,(hl)   ; must have the same msb as the table
0E4A   C3 53 0E               JP   jumpTable1   
0E4D                COMMANDTABLE2:      
0E4D   3E 1A                  LD   a,26   
0E4F   0B                     DEC   bc   
0E50   18 F4                  JR   commandTable1   
0E52                             ; followed by a table
0E52                             ; db char
0E52                             ; dw addr
0E52                             ; the final item must have char == NUL
0E52                JUMPTABLE:      
0E52   E1                     POP   hl   
0E53                JUMPTABLE1:      
0E53   03                     INC   bc   
0E54                JUMPTABLE2:      
0E54   AF                     XOR   a   
0E55   BE                     CP   (hl)   
0E56   20 03                  JR   nz,jumpTable3   
0E58   0B                     DEC   bc   
0E59   18 09                  JR   jumpTable4   
0E5B                JUMPTABLE3:      
0E5B   0A                     LD   a,(bc)   
0E5C   BE                     CP   (hl)   
0E5D   28 05                  JR   z,jumpTable4   
0E5F   23                     INC   hl   
0E60   23                     INC   hl   
0E61   23                     INC   hl   
0E62   18 F0                  JR   jumpTable2   
0E64                JUMPTABLE4:      
0E64   23                     INC   hl   
0E65   5E                     LD   e,(hl)   
0E66   23                     INC   hl   
0E67   56                     LD   d,(hl)   
0E68   EB                     EX   de,hl   
0E69   E9                     JP   (hl)   
0E6A                PRTSTR0:      
0E6A   CD 85 00               CALL   putchar   
0E6D   23                     INC   hl   
0E6E                PRTSTR:      
0E6E   7E                     LD   a,(hl)   
0E6F   B7                     OR   a   
0E70   20 F8                  JR   nz,prtstr0   
0E72   C9                     RET      
0E73                             ; **************************************************************************
0E73                             ; calculate nesting value
0E73                             ; a is char to be tested,
0E73                             ; e is the nesting value (initially 0)
0E73                             ; e is increased by ( and [
0E73                             ; e is decreased by ) and ]
0E73                             ; e has its bit 7 toggled by `
0E73                             ; limited to 127 levels
0E73                             ; **************************************************************************
0E73                NESTING:      
0E73   FE 22                  CP   DQ   ; quote char
0E75   28 06                  JR   z,nesting0   
0E77   FE 60                  CP   "`"   ; quote char
0E79   28 02                  JR   z,nesting0   
0E7B   18 0A                  JR   nesting1   
0E7D                NESTING0:      
0E7D   CB 7B                  BIT   7,e   
0E7F   28 03                  JR   z,nesting1a   
0E81   CB BB                  RES   7,e   
0E83   C9                     RET      
0E84                NESTING1A:      
0E84   CB FB                  SET   7,e   
0E86   C9                     RET      
0E87                NESTING1:      
0E87   CB 7B                  BIT   7,e   
0E89   C0                     RET   nz   
0E8A   FE 7B                  CP   "{"   
0E8C   28 08                  JR   z,nesting2   
0E8E   FE 5B                  CP   "["   
0E90   28 04                  JR   z,nesting2   
0E92   FE 28                  CP   "("   
0E94   20 02                  JR   nz,nesting3   
0E96                NESTING2:      
0E96   1C                     INC   e   
0E97   C9                     RET      
0E98                NESTING3:      
0E98   FE 7D                  CP   "}"   
0E9A   28 07                  JR   z,nesting4   
0E9C   FE 5D                  CP   "]"   
0E9E   28 03                  JR   z,nesting4   
0EA0   FE 29                  CP   ")"   
0EA2   C0                     RET   nz   
0EA3                NESTING4:      
0EA3   1D                     DEC   e   
0EA4   C9                     RET      
0EA5                PROMPT:      
0EA5   CD B5 0E               CALL   printStr   
0EA8   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0EAD   C9                     RET      
0EAE                CRLF:        
0EAE   CD B5 0E               CALL   printStr   
0EB1   0D 0A 00               .CSTR   "\r\n"   
0EB4   C9                     RET      
0EB5                             ; prints a null teminated string
0EB5                             ; the string should be immediately following the call
0EB5                PRINTSTR:      
0EB5   E3                     EX   (sp),hl   ; swap			
0EB6   CD 6E 0E               CALL   prtstr   
0EB9   23                     INC   hl   ; inc past NUL
0EBA   E3                     EX   (sp),hl   ; put it back	
0EBB   C9                     RET      
0EBC                INIT:        
0EBC   21 F0 01               LD   hl,titleStr   
0EBF   11 0E 4E               LD   de,titleBuf   
0EC2   06 14                  LD   b,20   
0EC4                INIT1:       
0EC4   1A                     LD   a,(de)   
0EC5   BE                     CP   (hl)   
0EC6   20 17                  JR   nz,coldBoot0   
0EC8   13                     INC   de   
0EC9   23                     INC   hl   
0ECA   10 F8                  DJNZ   init1   
0ECC                WARMINIT:      
0ECC   ED 4B FC 4D            LD   bc,(vSavedIP)   ; restore IP
0ED0   ED 7B FE 4D            LD   sp,(vSavedSP)   ; restore SP
0ED4   DD 2A 00 4E            LD   ix,(vSavedNext)   ; restore Next
0ED8   FD 2A 02 4E            LD   iy,(vSavedBP)   ; restore BP
0EDC   C3 16 0F               JP   start1   
0EDF                COLDBOOT0:      
0EDF   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0EE2   11 0E 4E               LD   de,titleBuf   
0EE5   06 14                  LD   b,20   
0EE7   ED B0                  LDIR      
0EE9                COLDINIT:      
0EE9   21 DE 01               LD   hl,isysVars   
0EEC   11 E6 4D               LD   de,sysVars   
0EEF   01 12 00               LD   bc,9 * 2   
0EF2   ED B0                  LDIR      
0EF4   21 00 4D               LD   hl,vars   ; 52 vars LO HI
0EF7   06 34                  LD   b,26*2   
0EF9   AF                     XOR   a   
0EFA                COLDBOOT1:      
0EFA   77                     LD   (hl),a   
0EFB   23                     INC   hl   
0EFC   10 FC                  DJNZ   coldBoot1   
0EFE   DD 2A EE 4D            LD   ix,(vNext)   
0F02   FD 21 00 4B            LD   iy,STACK   
0F06   C9                     RET      
0F07                COLDSTART:      
0F07   31 00 4B               LD   sp,STACK   
0F0A   CD DF 0E               CALL   coldBoot0   
0F0D   C3 16 0F               JP   start1   
0F10                START:       
0F10   31 00 4B               LD   sp,STACK   ; start Monty
0F13   CD BC 0E               CALL   init   ; setups
0F16                START1:      
0F16   21 0E 4E               LD   hl,titleBuf   
0F19   CD 6E 0E               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0F1C                INTERPRET:      
0F1C   CD A5 0E               CALL   prompt   
0F1F   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0F22   21 00 4B               LD   hl,TIB   
0F25   22 EA 4D               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0F28                INTERPRET2:      ; calculate nesting
0F28   1E 00                  LD   e,0   ; initilize nesting value
0F2A   C5                     PUSH   bc   ; save offset into TIB,
0F2B                             ; bc is also the count of chars in TIB
0F2B   21 00 4B               LD   hl,TIB   ; hl is start of TIB
0F2E   18 0B                  JR   interpret4   
0F30                INTERPRET3:      
0F30   3E 33                  LD   a,"3"   
0F32   CD 85 00               CALL   putchar   
0F35   7E                     LD   a,(hl)   ; a = char in TIB
0F36   23                     INC   hl   ; inc pointer into TIB
0F37   0B                     DEC   bc   ; dec count of chars in TIB
0F38   CD 73 0E               CALL   nesting   ; update nesting value
0F3B                INTERPRET4:      
0F3B   79                     LD   a,c   ; is count zero?
0F3C   B0                     OR   b   
0F3D   20 F1                  JR   nz,interpret3   ; if not loop
0F3F   C1                     POP   bc   ; restore offset into TIB
0F40                INTERPRET5:      
0F40   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0F43   FE 20                  CP   $20   ; compare to space
0F45   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0F47   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0F49                             ; ???? NEEDED?
0F49   28 36                  JR   z,interpret8   
0F4B   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0F4D   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0F4F   FE 05                  CP   CTRL_E   
0F51   CA DD 0F               JP   z,edit_   
0F54   FE 08                  CP   CTRL_H   
0F56   CA CD 0F               JP   z,backSpace_   
0F59   FE 0A                  CP   CTRL_J   
0F5B   CA F3 0F               JP   z,reEdit_   
0F5E                             ; cp CTRL_S
0F5E                             ; jp z,printStack_
0F5E                             ; DB     lsb(edit_)       ; ENQ ^E  5
0F5E                             ; DB     lsb(reedit_)     ; LF  ^J 10
0F5E                             ; DB     lsb(list_)       ; FF  ^L 12
0F5E                             ; DB     lsb(printStack_) ; DLE ^P 16
0F5E                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0F5E                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0F5E                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0F5E                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0F5E                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0F5E                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0F5E                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0F5E                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0F5E                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0F5E                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0F5E                INTERPRET5A:      
0F5E                             ; ld (vTIBPtr),bc
0F5E                             ; ld bc,(vTIBPtr)
0F5E   18 C8                  JR   interpret2   
0F60                INTERPRET6:      
0F60   21 00 4B               LD   hl,TIB   
0F63   09                     ADD   hl,bc   
0F64   77                     LD   (hl),a   ; store the character in textbuf
0F65   03                     INC   bc   
0F66   CD 85 00               CALL   putchar   ; echo character to screen
0F69   CD 73 0E               CALL   nesting   
0F6C   18 D2                  JR   interpret5   ; wait for next character
0F6E                INTERPRET7:      
0F6E   21 00 4B               LD   hl,TIB   
0F71   09                     ADD   hl,bc   
0F72   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0F74   23                     INC   hl   
0F75   36 0A                  LD   (hl),"\n"   
0F77   23                     INC   hl   
0F78   03                     INC   bc   
0F79   03                     INC   bc   
0F7A   CD AE 0E               CALL   crlf   ; echo character to screen
0F7D   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0F7E   B7                     OR   a   
0F7F   20 BF                  JR   nz,interpret5   
0F81                INTERPRET8:      
0F81   21 00 4B               LD   hl,TIB   
0F84   09                     ADD   hl,bc   
0F85   22 EA 4D               LD   (vTIBPtr),hl   
0F88   01 00 4B               LD   bc,TIB   
0F8B   ED 43 FC 4D            LD   (vSavedIP),bc   ; save IP
0F8F   ED 73 FE 4D            LD   (vSavedSP),sp   ; save SP
0F93   DD 22 00 4E            LD   (vSavedNext),ix   ; save Next
0F97   FD 22 02 4E            LD   (vSavedBP),iy   ; save BP
0F9B   0B                     DEC   bc   
0F9C                NEXT:        
0F9C   03                     INC   bc   ; Increment the IP
0F9D   0A                     LD   a,(bc)   ; Get the next character and dispatch
0F9E   FE 20                  CP   " "   ; whitespace?
0FA0   28 FA                  JR   z,next   ; space? ignore
0FA2   38 08                  JR   c,next1   
0FA4   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0FA6   6F                     LD   l,a   ; index into table
0FA7   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0FA9   6E                     LD   l,(hl)   ; get low jump address
0FAA   24                     INC   h   ; Load h with page after opcodes
0FAB   E9                     JP   (hl)   ; Jump to routine
0FAC                NEXT1:       
0FAC   FE 00                  CP   NUL   ; end of input string?
0FAE   28 03                  JR   z,exit   
0FB0   C3 1C 0F               JP   interpret   ; no, other whitespace, macros?
0FB3                EXIT:        
0FB3   03                     INC   bc   
0FB4   60 69                  LD   hl,bc   
0FB6   E9                     JP   (hl)   
0FB7                RUN:         
0FB7   C1                     POP   bc   
0FB8   0B                     DEC   bc   
0FB9   DD E9                  JP   (ix)   
0FBB                ERROR:       
0FBB   E5                     PUSH   hl   
0FBC   CD B7 0F               CALL   run   
0FBF   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
0FCA   C3 1C 0F               JP   interpret   
0FCD                BACKSPACE_:      
0FCD   79                     LD   a,c   
0FCE   B0                     OR   b   
0FCF   CA 28 0F               JP   z,interpret2   
0FD2   0B                     DEC   bc   
0FD3   CD B5 0E               CALL   printStr   
0FD6   08 20 08 00            .CSTR   "\b \b"   
0FDA   C3 28 0F               JP   interpret2   
0FDD                             ; edit
0FDD                EDIT_:       
0FDD   CD B7 0F               CALL   run   
0FE0   60 76 61 72 3F 60 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?` /k/ad .h",0   
0FF0   C3 1C 0F               JP   interpret   
0FF3                REEDIT_:      
0FF3   C3 1C 0F               JP   interpret   
0FF6                PRINTSTACK_:      
0FF6   CD B7 0F               CALL   run   
0FF9   2F 70 6B 00            .CSTR   "/pk"   
0FFD   C3 1C 0F               JP   interpret   
1000                             ; editDef:
1000                             ;     pop hl                      ; pop ret address
1000                             ;     ex (sp),hl                  ; swap with TOS
1000                             ;     push hl                     ; dup TOS
1000                             ;     ld a,l                      ; a = ident
1000                             ;     ld de,TIB                   ; de = start of TIB
1000                             ;     ld (vTIBPtr),de             ; update TIB*
1000                             ;     push ix                     ; save NEXT
1000                             ;     ld ix,editDef0              ; NEXT = editDef0
1000                             ;     jp lookupRef                ; convert letter into address
1000                             ; editDef0:
1000                             ;     ld e,(hl)                   ; de = (hl++)
1000                             ;     inc hl
1000                             ;     ld d,(hl)
1000                             ;     ld a,d                      ; de == 0 ?
1000                             ;     or e
1000                             ;     jr z,editDef4
1000                             ;     ld ix,editDef3              ; NEXT = editDef3
1000                             ;     ex de,hl
1000                             ;     ld a,(hl)
1000                             ;     cp "{"
1000                             ;     jr nz,editDef1
1000                             ;     jp editBlock0               ; convert letter into address
1000                             ; editDef1:
1000                             ;     cp "("
1000                             ;     jr nz,editDef2
1000                             ;     jp editBlock0               ; convert letter into address
1000                             ; editDef2:
1000                             ;     jp editFunc
1000                             ; editDef3:
1000                             ;     ld a," "                    ; write assign
1000                             ;     call writeChar
1000                             ;     pop hl                      ; a = ident
1000                             ;     ld a,l
1000                             ;     call writeChar
1000                             ;     ld a,"="                    ; write assign
1000                             ;     call writeChar
1000                             ;     ld ix,editDef4              ; NEXT = editDef4
1000                             ;     jp printTIB
1000                             ; editDef4:
1000                             ;     pop ix                      ; restore NEXT
1000                             ;     jp (ix)
1000                             ; writeChar:
1000                             ;     ld de,(vTIBPtr)             ; de = TIB*
1000                             ;     ld (de),a                   ; write ident
1000                             ;     inc de
1000                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
1000                             ;     ret
1000                             ; ; printTIB
1000                             ; printTIB:
1000                             ;     ld hl,(vTIBPtr)
1000                             ;     ld de,TIB
1000                             ;     or a
1000                             ;     sbc hl,de
1000                             ;     jp printTIB2
1000                             ; printTIB1:
1000                             ;     ld a,(de)
1000                             ;     call putchar
1000                             ; printTIB2:
1000                             ;     ld a,l
1000                             ;     or h
1000                             ;     jr nz,printTIB1
1000                             ;     jp (ix)
1000                             ; editBlock:
1000                             ;     pop hl                      ; hl = block*
1000                             ; editBlock0:
1000                             ;     push ix                     ; save next
1000                             ;     push hl                     ; push block*
1000                             ;     push hl                     ; push block*
1000                             ;     ld ix,(editBlock2)
1000                             ;     jp blockLength
1000                             ; editBlock1:
1000                             ;     pop hl                      ; bc = length, (sp) = IP
1000                             ;     pop de                      ; de = block*
1000                             ;     ld a,l
1000                             ;     or h
1000                             ;     jr z,editBlock2
1000                             ;     push bc
1000                             ;     ld bc,hl
1000                             ;     ex de,hl                    ; hl = block*
1000                             ;     ld de,(vTIBPtr)              ; de = TIB*
1000                             ;     ldir                        ; copy block to TIB
1000                             ;     ld (vTIBPtr),de              ; save TIB*
1000                             ;     pop bc
1000                             ; editBlock2:
1000                             ;     pop ix                      ; restore next
1000                             ;     jp (ix)
1000                             ; editFunc:
1000                             ;     jp (ix)
1000                             ; editArray:
1000                             ;     jp (ix)
1000                             ; editparseArgs:
1000                             ;     jp (ix)
1000                             ; ; blockLength
1000                             ; ; addr1 -- length
1000                             ; blockLength:
1000                             ;     pop hl                      ; block*
1000                             ;     push hl                     ; save block*
1000                             ;     inc hl                      ; skip first char
1000                             ;     ld d,1                      ; increase nesting
1000                             ; blockLength1:                   ; Skip to end of definition
1000                             ;     ld a,(hl)                   ; Get the next character
1000                             ;     inc hl                      ; Point to next character
1000                             ;     cp " " + 1                  ; ignore whitespace
1000                             ;     jr c,blockLength1
1000                             ;     cp ")"
1000                             ;     jr z,blockLength4
1000                             ;     cp "}"
1000                             ;     jr z,blockLength4
1000                             ;     cp "]"
1000                             ;     jr z,blockLength4
1000                             ;     cp "("
1000                             ;     jr z,blockLength2
1000                             ;     cp "{"
1000                             ;     jr z,blockLength2
1000                             ;     cp "["
1000                             ;     jr z,blockLength2
1000                             ;     cp "'"
1000                             ;     jr z,blockLength3
1000                             ;     cp "`"
1000                             ;     jr z,blockLength3
1000                             ;     cp DQ
1000                             ;     jr z,blockLength3
1000                             ;     jr blockLength1
1000                             ; blockLength2:
1000                             ;     inc d
1000                             ;     jr blockLength1
1000                             ; blockLength4:
1000                             ;     dec d
1000                             ;     jr nz, blockLength1         ; get the next element
1000                             ; blockLength3:
1000                             ;     ld a,$80
1000                             ;     xor d
1000                             ;     ld d,a
1000                             ;     jr nz, blockLength1
1000                             ;     pop hl                      ; hl = block*
1000                             ;     or a
1000                             ;     sbc hl,de
1000                             ;     push hl
1000                             ;     jp (ix)
1000                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
1000                             ; \a start of stack \#3 depth \b base \$ prompt
1000                             ; DW dStack               ; a vS0 start of datastack			
1000                             ; DW FALSE                ; b vBase16
1000                             ; DW 0                    ; c vTIBPtr an offset to the tib
1000                             ; DW 0                    ; d
1000                             ; DW 65                   ; e vLastDef "A" last command u defined
1000                             ; DW 0                    ; f
1000                             ; DW page6                ; g 256 bytes limits
1000                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
1000                          ;*Macro unroll: FUNC f1, 2, ""
1000                F1:          
1000   CD 31 0C               CALL   go   
1003   00 00                  DW   NUL   
1005   0B 10                  DW   f1M_2991S12   
1007   09 10                  DW   $+2   
1009   02                     DB   2   
100A   00                     .PSTR   ""   
100B                F1M_2991S12:      
100B   00                     DB   0   
100C                          ;*Macro unroll: FUNC f2, 0, ""
100C                F2:          
100C   CD 31 0C               CALL   go   
100F   00 00                  DW   NUL   
1011   17 10                  DW   f2M_2993S15   
1013   15 10                  DW   $+2   
1015   00                     DB   0   
1016   00                     .PSTR   ""   
1017                F2M_2993S15:      
1017   00                     DB   0   
1018                          ;*Macro unroll: FUNC f3, 0, ""
1018                F3:          
1018   CD 31 0C               CALL   go   
101B   00 00                  DW   NUL   
101D   23 10                  DW   f3M_2995S18   
101F   21 10                  DW   $+2   
1021   00                     DB   0   
1022   00                     .PSTR   ""   
1023                F3M_2995S18:      
1023   00                     DB   0   
1024                          ;*Macro unroll: FUNC f4, 0, ""
1024                F4:          
1024   CD 31 0C               CALL   go   
1027   00 00                  DW   NUL   
1029   2F 10                  DW   f4M_2997S21   
102B   2D 10                  DW   $+2   
102D   00                     DB   0   
102E   00                     .PSTR   ""   
102F                F4M_2997S21:      
102F   00                     DB   0   
1030                          ALIGN   $100   
1100                TESTSSTART:      
1100                             ; test "0 10 1 /rg \\a{%a.} /fe", 0
1100                             ; test "$1000 0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", $1000
1100                             ; test "$1000 0 10 1 /rg \\a{%a.} /fe", $1000
1100                             ; test "$1000 0 10 1 /rg \\a{%a 3<}/ft \\a{%a.} /fe", $1000
1100                             ; test "$1000 0 10 1 /rg  0 \\da{%d%a+}/fd \\a{%a 24<}/ft \\a{%a.} /fe", $1000
1100                             ; test "$1000 [10 20 30] /ai \\a{%a.} /fe", $1000
1100                             ; test "[1 2 3].a", 0
1100                             ; test "/sb `hello:` 65.c 1. 2. 3. /se .s", FALSE
1100                             ; test "`hello:` 65.c 1. 2. 3.", FALSE
1100                             ; test "$1000 'hello there!' /si \\a{%a.c} /fe", $1000
1100                             ; test "/hb/bm$1234.",0
1100                             ; test "/bm257.",0
1100                             ; call printStr
1100                             ; .cstr "Done!"
1100                             ; HALT
1100                          ;*Macro unroll:  test "/f", false
1100   31 00 4B               LD   SP,STACK   
1103   CD E9 0E               CALL   coldInit   
1106   CD 50 49               CALL   execStr   
1109   2F 66 00               DB   "/f",0   
110C   E1                     POP   HL   
110D   E5                     PUSH   HL   
110E   11 00 00               LD   DE,false   
1111   B7                     OR   A   
1112   ED 52                  SBC   HL,DE   
1114   7D                     LD   A,L   
1115   B4                     OR   H   
1116   CA 6D 11               JP   Z,expectM_3016S44   
1119   CD B5 0E               CALL   printStr   
111C   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
1125   CD B5 0E               CALL   printStr   
1128   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1137   21 00 00               LD   hl,false   
113A   E5                     PUSH   hl   
113B   E5                     PUSH   hl   
113C   CD B7 0F               CALL   run   
113F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1147   CD B5 0E               CALL   printStr   
114A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1157   E1                     POP   hl   
1158   E5                     PUSH   hl   
1159   E5                     PUSH   hl   
115A   CD B7 0F               CALL   run   
115D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
116C   76                     HALT      
116D                EXPECTM_3016S44:      
116D   E1                     POP   HL   
116E                          ;*Macro unroll:  test "/t", true
116E   31 00 4B               LD   SP,STACK   
1171   CD E9 0E               CALL   coldInit   
1174   CD 50 49               CALL   execStr   
1177   2F 74 00               DB   "/t",0   
117A   E1                     POP   HL   
117B   E5                     PUSH   HL   
117C   11 FF FF               LD   DE,true   
117F   B7                     OR   A   
1180   ED 52                  SBC   HL,DE   
1182   7D                     LD   A,L   
1183   B4                     OR   H   
1184   CA DB 11               JP   Z,expectM_3017S45   
1187   CD B5 0E               CALL   printStr   
118A   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
1193   CD B5 0E               CALL   printStr   
1196   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11A5   21 FF FF               LD   hl,true   
11A8   E5                     PUSH   hl   
11A9   E5                     PUSH   hl   
11AA   CD B7 0F               CALL   run   
11AD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
11B5   CD B5 0E               CALL   printStr   
11B8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11C5   E1                     POP   hl   
11C6   E5                     PUSH   hl   
11C7   E5                     PUSH   hl   
11C8   CD B7 0F               CALL   run   
11CB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
11DA   76                     HALT      
11DB                EXPECTM_3017S45:      
11DB   E1                     POP   HL   
11DC                          ;*Macro unroll:  test "1", 1
11DC   31 00 4B               LD   SP,STACK   
11DF   CD E9 0E               CALL   coldInit   
11E2   CD 50 49               CALL   execStr   
11E5   31 00                  DB   "1",0   
11E7   E1                     POP   HL   
11E8   E5                     PUSH   HL   
11E9   11 01 00               LD   DE,1   
11EC   B7                     OR   A   
11ED   ED 52                  SBC   HL,DE   
11EF   7D                     LD   A,L   
11F0   B4                     OR   H   
11F1   CA 47 12               JP   Z,expectM_3018S46   
11F4   CD B5 0E               CALL   printStr   
11F7   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
11FF   CD B5 0E               CALL   printStr   
1202   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1211   21 01 00               LD   hl,1   
1214   E5                     PUSH   hl   
1215   E5                     PUSH   hl   
1216   CD B7 0F               CALL   run   
1219   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1221   CD B5 0E               CALL   printStr   
1224   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1231   E1                     POP   hl   
1232   E5                     PUSH   hl   
1233   E5                     PUSH   hl   
1234   CD B7 0F               CALL   run   
1237   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1246   76                     HALT      
1247                EXPECTM_3018S46:      
1247   E1                     POP   HL   
1248                          ;*Macro unroll:  test "2", 2
1248   31 00 4B               LD   SP,STACK   
124B   CD E9 0E               CALL   coldInit   
124E   CD 50 49               CALL   execStr   
1251   32 00                  DB   "2",0   
1253   E1                     POP   HL   
1254   E5                     PUSH   HL   
1255   11 02 00               LD   DE,2   
1258   B7                     OR   A   
1259   ED 52                  SBC   HL,DE   
125B   7D                     LD   A,L   
125C   B4                     OR   H   
125D   CA B3 12               JP   Z,expectM_3019S47   
1260   CD B5 0E               CALL   printStr   
1263   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
126B   CD B5 0E               CALL   printStr   
126E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
127D   21 02 00               LD   hl,2   
1280   E5                     PUSH   hl   
1281   E5                     PUSH   hl   
1282   CD B7 0F               CALL   run   
1285   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
128D   CD B5 0E               CALL   printStr   
1290   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
129D   E1                     POP   hl   
129E   E5                     PUSH   hl   
129F   E5                     PUSH   hl   
12A0   CD B7 0F               CALL   run   
12A3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
12B2   76                     HALT      
12B3                EXPECTM_3019S47:      
12B3   E1                     POP   HL   
12B4                          ;*Macro unroll:  test "1", 1
12B4   31 00 4B               LD   SP,STACK   
12B7   CD E9 0E               CALL   coldInit   
12BA   CD 50 49               CALL   execStr   
12BD   31 00                  DB   "1",0   
12BF   E1                     POP   HL   
12C0   E5                     PUSH   HL   
12C1   11 01 00               LD   DE,1   
12C4   B7                     OR   A   
12C5   ED 52                  SBC   HL,DE   
12C7   7D                     LD   A,L   
12C8   B4                     OR   H   
12C9   CA 1F 13               JP   Z,expectM_3020S48   
12CC   CD B5 0E               CALL   printStr   
12CF   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
12D7   CD B5 0E               CALL   printStr   
12DA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12E9   21 01 00               LD   hl,1   
12EC   E5                     PUSH   hl   
12ED   E5                     PUSH   hl   
12EE   CD B7 0F               CALL   run   
12F1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12F9   CD B5 0E               CALL   printStr   
12FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1309   E1                     POP   hl   
130A   E5                     PUSH   hl   
130B   E5                     PUSH   hl   
130C   CD B7 0F               CALL   run   
130F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
131E   76                     HALT      
131F                EXPECTM_3020S48:      
131F   E1                     POP   HL   
1320                          ;*Macro unroll:  test "0", 0
1320   31 00 4B               LD   SP,STACK   
1323   CD E9 0E               CALL   coldInit   
1326   CD 50 49               CALL   execStr   
1329   30 00                  DB   "0",0   
132B   E1                     POP   HL   
132C   E5                     PUSH   HL   
132D   11 00 00               LD   DE,0   
1330   B7                     OR   A   
1331   ED 52                  SBC   HL,DE   
1333   7D                     LD   A,L   
1334   B4                     OR   H   
1335   CA 8B 13               JP   Z,expectM_3021S49   
1338   CD B5 0E               CALL   printStr   
133B   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
1343   CD B5 0E               CALL   printStr   
1346   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1355   21 00 00               LD   hl,0   
1358   E5                     PUSH   hl   
1359   E5                     PUSH   hl   
135A   CD B7 0F               CALL   run   
135D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1365   CD B5 0E               CALL   printStr   
1368   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1375   E1                     POP   hl   
1376   E5                     PUSH   hl   
1377   E5                     PUSH   hl   
1378   CD B7 0F               CALL   run   
137B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
138A   76                     HALT      
138B                EXPECTM_3021S49:      
138B   E1                     POP   HL   
138C                          ;*Macro unroll:  test "10", 10
138C   31 00 4B               LD   SP,STACK   
138F   CD E9 0E               CALL   coldInit   
1392   CD 50 49               CALL   execStr   
1395   31 30 00               DB   "10",0   
1398   E1                     POP   HL   
1399   E5                     PUSH   HL   
139A   11 0A 00               LD   DE,10   
139D   B7                     OR   A   
139E   ED 52                  SBC   HL,DE   
13A0   7D                     LD   A,L   
13A1   B4                     OR   H   
13A2   CA F9 13               JP   Z,expectM_3022S50   
13A5   CD B5 0E               CALL   printStr   
13A8   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
13B1   CD B5 0E               CALL   printStr   
13B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13C3   21 0A 00               LD   hl,10   
13C6   E5                     PUSH   hl   
13C7   E5                     PUSH   hl   
13C8   CD B7 0F               CALL   run   
13CB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
13D3   CD B5 0E               CALL   printStr   
13D6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13E3   E1                     POP   hl   
13E4   E5                     PUSH   hl   
13E5   E5                     PUSH   hl   
13E6   CD B7 0F               CALL   run   
13E9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
13F8   76                     HALT      
13F9                EXPECTM_3022S50:      
13F9   E1                     POP   HL   
13FA                          ;*Macro unroll:  test "123", 123
13FA   31 00 4B               LD   SP,STACK   
13FD   CD E9 0E               CALL   coldInit   
1400   CD 50 49               CALL   execStr   
1403   31 32 33 00            DB   "123",0   
1407   E1                     POP   HL   
1408   E5                     PUSH   HL   
1409   11 7B 00               LD   DE,123   
140C   B7                     OR   A   
140D   ED 52                  SBC   HL,DE   
140F   7D                     LD   A,L   
1410   B4                     OR   H   
1411   CA 69 14               JP   Z,expectM_3023S51   
1414   CD B5 0E               CALL   printStr   
1417   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
1421   CD B5 0E               CALL   printStr   
1424   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1433   21 7B 00               LD   hl,123   
1436   E5                     PUSH   hl   
1437   E5                     PUSH   hl   
1438   CD B7 0F               CALL   run   
143B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1443   CD B5 0E               CALL   printStr   
1446   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1453   E1                     POP   hl   
1454   E5                     PUSH   hl   
1455   E5                     PUSH   hl   
1456   CD B7 0F               CALL   run   
1459   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1468   76                     HALT      
1469                EXPECTM_3023S51:      
1469   E1                     POP   HL   
146A                          ;*Macro unroll:  test "-1",-1
146A   31 00 4B               LD   SP,STACK   
146D   CD E9 0E               CALL   coldInit   
1470   CD 50 49               CALL   execStr   
1473   2D 31 00               DB   "-1",0   
1476   E1                     POP   HL   
1477   E5                     PUSH   HL   
1478   11 FF FF               LD   DE,-1   
147B   B7                     OR   A   
147C   ED 52                  SBC   HL,DE   
147E   7D                     LD   A,L   
147F   B4                     OR   H   
1480   CA D7 14               JP   Z,expectM_3024S52   
1483   CD B5 0E               CALL   printStr   
1486   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
148F   CD B5 0E               CALL   printStr   
1492   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14A1   21 FF FF               LD   hl,-1   
14A4   E5                     PUSH   hl   
14A5   E5                     PUSH   hl   
14A6   CD B7 0F               CALL   run   
14A9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14B1   CD B5 0E               CALL   printStr   
14B4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14C1   E1                     POP   hl   
14C2   E5                     PUSH   hl   
14C3   E5                     PUSH   hl   
14C4   CD B7 0F               CALL   run   
14C7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
14D6   76                     HALT      
14D7                EXPECTM_3024S52:      
14D7   E1                     POP   HL   
14D8                          ;*Macro unroll:  test "~a", $61
14D8   31 00 4B               LD   SP,STACK   
14DB   CD E9 0E               CALL   coldInit   
14DE   CD 50 49               CALL   execStr   
14E1   7E 61 00               DB   "~a",0   
14E4   E1                     POP   HL   
14E5   E5                     PUSH   HL   
14E6   11 61 00               LD   DE,$61   
14E9   B7                     OR   A   
14EA   ED 52                  SBC   HL,DE   
14EC   7D                     LD   A,L   
14ED   B4                     OR   H   
14EE   CA 45 15               JP   Z,expectM_3025S53   
14F1   CD B5 0E               CALL   printStr   
14F4   43 6F 64 65 3A 20 7E 61 00 .CSTR   "Code: ","~a"   
14FD   CD B5 0E               CALL   printStr   
1500   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
150F   21 61 00               LD   hl,$61   
1512   E5                     PUSH   hl   
1513   E5                     PUSH   hl   
1514   CD B7 0F               CALL   run   
1517   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
151F   CD B5 0E               CALL   printStr   
1522   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
152F   E1                     POP   hl   
1530   E5                     PUSH   hl   
1531   E5                     PUSH   hl   
1532   CD B7 0F               CALL   run   
1535   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1544   76                     HALT      
1545                EXPECTM_3025S53:      
1545   E1                     POP   HL   
1546                          ;*Macro unroll:  test "~~", $7e
1546   31 00 4B               LD   SP,STACK   
1549   CD E9 0E               CALL   coldInit   
154C   CD 50 49               CALL   execStr   
154F   7E 7E 00               DB   "~~",0   
1552   E1                     POP   HL   
1553   E5                     PUSH   HL   
1554   11 7E 00               LD   DE,$7e   
1557   B7                     OR   A   
1558   ED 52                  SBC   HL,DE   
155A   7D                     LD   A,L   
155B   B4                     OR   H   
155C   CA B3 15               JP   Z,expectM_3026S54   
155F   CD B5 0E               CALL   printStr   
1562   43 6F 64 65 3A 20 7E 7E 00 .CSTR   "Code: ","~~"   
156B   CD B5 0E               CALL   printStr   
156E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
157D   21 7E 00               LD   hl,$7e   
1580   E5                     PUSH   hl   
1581   E5                     PUSH   hl   
1582   CD B7 0F               CALL   run   
1585   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
158D   CD B5 0E               CALL   printStr   
1590   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
159D   E1                     POP   hl   
159E   E5                     PUSH   hl   
159F   E5                     PUSH   hl   
15A0   CD B7 0F               CALL   run   
15A3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
15B2   76                     HALT      
15B3                EXPECTM_3026S54:      
15B3   E1                     POP   HL   
15B4                          ;*Macro unroll:  test "$10", $10
15B4   31 00 4B               LD   SP,STACK   
15B7   CD E9 0E               CALL   coldInit   
15BA   CD 50 49               CALL   execStr   
15BD   24 31 30 00            DB   "$10",0   
15C1   E1                     POP   HL   
15C2   E5                     PUSH   HL   
15C3   11 10 00               LD   DE,$10   
15C6   B7                     OR   A   
15C7   ED 52                  SBC   HL,DE   
15C9   7D                     LD   A,L   
15CA   B4                     OR   H   
15CB   CA 23 16               JP   Z,expectM_3027S55   
15CE   CD B5 0E               CALL   printStr   
15D1   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
15DB   CD B5 0E               CALL   printStr   
15DE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15ED   21 10 00               LD   hl,$10   
15F0   E5                     PUSH   hl   
15F1   E5                     PUSH   hl   
15F2   CD B7 0F               CALL   run   
15F5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15FD   CD B5 0E               CALL   printStr   
1600   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
160D   E1                     POP   hl   
160E   E5                     PUSH   hl   
160F   E5                     PUSH   hl   
1610   CD B7 0F               CALL   run   
1613   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1622   76                     HALT      
1623                EXPECTM_3027S55:      
1623   E1                     POP   HL   
1624                          ;*Macro unroll:  test "$FF", $FF
1624   31 00 4B               LD   SP,STACK   
1627   CD E9 0E               CALL   coldInit   
162A   CD 50 49               CALL   execStr   
162D   24 46 46 00            DB   "$FF",0   
1631   E1                     POP   HL   
1632   E5                     PUSH   HL   
1633   11 FF 00               LD   DE,$FF   
1636   B7                     OR   A   
1637   ED 52                  SBC   HL,DE   
1639   7D                     LD   A,L   
163A   B4                     OR   H   
163B   CA 93 16               JP   Z,expectM_3028S56   
163E   CD B5 0E               CALL   printStr   
1641   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
164B   CD B5 0E               CALL   printStr   
164E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
165D   21 FF 00               LD   hl,$FF   
1660   E5                     PUSH   hl   
1661   E5                     PUSH   hl   
1662   CD B7 0F               CALL   run   
1665   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
166D   CD B5 0E               CALL   printStr   
1670   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
167D   E1                     POP   hl   
167E   E5                     PUSH   hl   
167F   E5                     PUSH   hl   
1680   CD B7 0F               CALL   run   
1683   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1692   76                     HALT      
1693                EXPECTM_3028S56:      
1693   E1                     POP   HL   
1694                          ;*Macro unroll:  test "-1 2 +",1
1694   31 00 4B               LD   SP,STACK   
1697   CD E9 0E               CALL   coldInit   
169A   CD 50 49               CALL   execStr   
169D   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
16A4   E1                     POP   HL   
16A5   E5                     PUSH   HL   
16A6   11 01 00               LD   DE,1   
16A9   B7                     OR   A   
16AA   ED 52                  SBC   HL,DE   
16AC   7D                     LD   A,L   
16AD   B4                     OR   H   
16AE   CA 09 17               JP   Z,expectM_3029S57   
16B1   CD B5 0E               CALL   printStr   
16B4   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
16C1   CD B5 0E               CALL   printStr   
16C4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16D3   21 01 00               LD   hl,1   
16D6   E5                     PUSH   hl   
16D7   E5                     PUSH   hl   
16D8   CD B7 0F               CALL   run   
16DB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16E3   CD B5 0E               CALL   printStr   
16E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16F3   E1                     POP   hl   
16F4   E5                     PUSH   hl   
16F5   E5                     PUSH   hl   
16F6   CD B7 0F               CALL   run   
16F9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1708   76                     HALT      
1709                EXPECTM_3029S57:      
1709   E1                     POP   HL   
170A                          ;*Macro unroll:  test "-1 1 +",0
170A   31 00 4B               LD   SP,STACK   
170D   CD E9 0E               CALL   coldInit   
1710   CD 50 49               CALL   execStr   
1713   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
171A   E1                     POP   HL   
171B   E5                     PUSH   HL   
171C   11 00 00               LD   DE,0   
171F   B7                     OR   A   
1720   ED 52                  SBC   HL,DE   
1722   7D                     LD   A,L   
1723   B4                     OR   H   
1724   CA 7F 17               JP   Z,expectM_3030S58   
1727   CD B5 0E               CALL   printStr   
172A   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1737   CD B5 0E               CALL   printStr   
173A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1749   21 00 00               LD   hl,0   
174C   E5                     PUSH   hl   
174D   E5                     PUSH   hl   
174E   CD B7 0F               CALL   run   
1751   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1759   CD B5 0E               CALL   printStr   
175C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1769   E1                     POP   hl   
176A   E5                     PUSH   hl   
176B   E5                     PUSH   hl   
176C   CD B7 0F               CALL   run   
176F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
177E   76                     HALT      
177F                EXPECTM_3030S58:      
177F   E1                     POP   HL   
1780                          ;*Macro unroll:  test "1 2 +", 3
1780   31 00 4B               LD   SP,STACK   
1783   CD E9 0E               CALL   coldInit   
1786   CD 50 49               CALL   execStr   
1789   31 20 32 20 2B 00      DB   "1 2 +",0   
178F   E1                     POP   HL   
1790   E5                     PUSH   HL   
1791   11 03 00               LD   DE,3   
1794   B7                     OR   A   
1795   ED 52                  SBC   HL,DE   
1797   7D                     LD   A,L   
1798   B4                     OR   H   
1799   CA F3 17               JP   Z,expectM_3031S59   
179C   CD B5 0E               CALL   printStr   
179F   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
17AB   CD B5 0E               CALL   printStr   
17AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17BD   21 03 00               LD   hl,3   
17C0   E5                     PUSH   hl   
17C1   E5                     PUSH   hl   
17C2   CD B7 0F               CALL   run   
17C5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
17CD   CD B5 0E               CALL   printStr   
17D0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17DD   E1                     POP   hl   
17DE   E5                     PUSH   hl   
17DF   E5                     PUSH   hl   
17E0   CD B7 0F               CALL   run   
17E3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
17F2   76                     HALT      
17F3                EXPECTM_3031S59:      
17F3   E1                     POP   HL   
17F4                          ;*Macro unroll:  test "4 1 2 +", 3
17F4   31 00 4B               LD   SP,STACK   
17F7   CD E9 0E               CALL   coldInit   
17FA   CD 50 49               CALL   execStr   
17FD   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
1805   E1                     POP   HL   
1806   E5                     PUSH   HL   
1807   11 03 00               LD   DE,3   
180A   B7                     OR   A   
180B   ED 52                  SBC   HL,DE   
180D   7D                     LD   A,L   
180E   B4                     OR   H   
180F   CA 6B 18               JP   Z,expectM_3032S60   
1812   CD B5 0E               CALL   printStr   
1815   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1823   CD B5 0E               CALL   printStr   
1826   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1835   21 03 00               LD   hl,3   
1838   E5                     PUSH   hl   
1839   E5                     PUSH   hl   
183A   CD B7 0F               CALL   run   
183D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1845   CD B5 0E               CALL   printStr   
1848   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1855   E1                     POP   hl   
1856   E5                     PUSH   hl   
1857   E5                     PUSH   hl   
1858   CD B7 0F               CALL   run   
185B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
186A   76                     HALT      
186B                EXPECTM_3032S60:      
186B   E1                     POP   HL   
186C                          ;*Macro unroll:  test "123 456 +", 123+456
186C   31 00 4B               LD   SP,STACK   
186F   CD E9 0E               CALL   coldInit   
1872   CD 50 49               CALL   execStr   
1875   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
187F   E1                     POP   HL   
1880   E5                     PUSH   HL   
1881   11 43 02               LD   DE,123+456   
1884   B7                     OR   A   
1885   ED 52                  SBC   HL,DE   
1887   7D                     LD   A,L   
1888   B4                     OR   H   
1889   CA E7 18               JP   Z,expectM_3033S61   
188C   CD B5 0E               CALL   printStr   
188F   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
189F   CD B5 0E               CALL   printStr   
18A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18B1   21 43 02               LD   hl,123+456   
18B4   E5                     PUSH   hl   
18B5   E5                     PUSH   hl   
18B6   CD B7 0F               CALL   run   
18B9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
18C1   CD B5 0E               CALL   printStr   
18C4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18D1   E1                     POP   hl   
18D2   E5                     PUSH   hl   
18D3   E5                     PUSH   hl   
18D4   CD B7 0F               CALL   run   
18D7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
18E6   76                     HALT      
18E7                EXPECTM_3033S61:      
18E7   E1                     POP   HL   
18E8                          ;*Macro unroll:  test "64 128 +", 64+128
18E8   31 00 4B               LD   SP,STACK   
18EB   CD E9 0E               CALL   coldInit   
18EE   CD 50 49               CALL   execStr   
18F1   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
18FA   E1                     POP   HL   
18FB   E5                     PUSH   HL   
18FC   11 C0 00               LD   DE,64+128   
18FF   B7                     OR   A   
1900   ED 52                  SBC   HL,DE   
1902   7D                     LD   A,L   
1903   B4                     OR   H   
1904   CA 61 19               JP   Z,expectM_3034S62   
1907   CD B5 0E               CALL   printStr   
190A   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1919   CD B5 0E               CALL   printStr   
191C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
192B   21 C0 00               LD   hl,64+128   
192E   E5                     PUSH   hl   
192F   E5                     PUSH   hl   
1930   CD B7 0F               CALL   run   
1933   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
193B   CD B5 0E               CALL   printStr   
193E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
194B   E1                     POP   hl   
194C   E5                     PUSH   hl   
194D   E5                     PUSH   hl   
194E   CD B7 0F               CALL   run   
1951   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1960   76                     HALT      
1961                EXPECTM_3034S62:      
1961   E1                     POP   HL   
1962                          ;*Macro unroll:  test "1 2 +", 3
1962   31 00 4B               LD   SP,STACK   
1965   CD E9 0E               CALL   coldInit   
1968   CD 50 49               CALL   execStr   
196B   31 20 32 20 2B 00      DB   "1 2 +",0   
1971   E1                     POP   HL   
1972   E5                     PUSH   HL   
1973   11 03 00               LD   DE,3   
1976   B7                     OR   A   
1977   ED 52                  SBC   HL,DE   
1979   7D                     LD   A,L   
197A   B4                     OR   H   
197B   CA D5 19               JP   Z,expectM_3035S63   
197E   CD B5 0E               CALL   printStr   
1981   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
198D   CD B5 0E               CALL   printStr   
1990   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
199F   21 03 00               LD   hl,3   
19A2   E5                     PUSH   hl   
19A3   E5                     PUSH   hl   
19A4   CD B7 0F               CALL   run   
19A7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
19AF   CD B5 0E               CALL   printStr   
19B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19BF   E1                     POP   hl   
19C0   E5                     PUSH   hl   
19C1   E5                     PUSH   hl   
19C2   CD B7 0F               CALL   run   
19C5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
19D4   76                     HALT      
19D5                EXPECTM_3035S63:      
19D5   E1                     POP   HL   
19D6                          ;*Macro unroll:  test "1a= a++ a",2
19D6   31 00 4B               LD   SP,STACK   
19D9   CD E9 0E               CALL   coldInit   
19DC   CD 50 49               CALL   execStr   
19DF   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
19E9   E1                     POP   HL   
19EA   E5                     PUSH   HL   
19EB   11 02 00               LD   DE,2   
19EE   B7                     OR   A   
19EF   ED 52                  SBC   HL,DE   
19F1   7D                     LD   A,L   
19F2   B4                     OR   H   
19F3   CA 51 1A               JP   Z,expectM_3036S64   
19F6   CD B5 0E               CALL   printStr   
19F9   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1A09   CD B5 0E               CALL   printStr   
1A0C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A1B   21 02 00               LD   hl,2   
1A1E   E5                     PUSH   hl   
1A1F   E5                     PUSH   hl   
1A20   CD B7 0F               CALL   run   
1A23   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A2B   CD B5 0E               CALL   printStr   
1A2E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A3B   E1                     POP   hl   
1A3C   E5                     PUSH   hl   
1A3D   E5                     PUSH   hl   
1A3E   CD B7 0F               CALL   run   
1A41   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A50   76                     HALT      
1A51                EXPECTM_3036S64:      
1A51   E1                     POP   HL   
1A52                          ;*Macro unroll:  test "-1 -1 -",0
1A52   31 00 4B               LD   SP,STACK   
1A55   CD E9 0E               CALL   coldInit   
1A58   CD 50 49               CALL   execStr   
1A5B   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1A63   E1                     POP   HL   
1A64   E5                     PUSH   HL   
1A65   11 00 00               LD   DE,0   
1A68   B7                     OR   A   
1A69   ED 52                  SBC   HL,DE   
1A6B   7D                     LD   A,L   
1A6C   B4                     OR   H   
1A6D   CA C9 1A               JP   Z,expectM_3037S65   
1A70   CD B5 0E               CALL   printStr   
1A73   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1A81   CD B5 0E               CALL   printStr   
1A84   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A93   21 00 00               LD   hl,0   
1A96   E5                     PUSH   hl   
1A97   E5                     PUSH   hl   
1A98   CD B7 0F               CALL   run   
1A9B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1AA3   CD B5 0E               CALL   printStr   
1AA6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AB3   E1                     POP   hl   
1AB4   E5                     PUSH   hl   
1AB5   E5                     PUSH   hl   
1AB6   CD B7 0F               CALL   run   
1AB9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1AC8   76                     HALT      
1AC9                EXPECTM_3037S65:      
1AC9   E1                     POP   HL   
1ACA                          ;*Macro unroll:  test "5 3 -", 2
1ACA   31 00 4B               LD   SP,STACK   
1ACD   CD E9 0E               CALL   coldInit   
1AD0   CD 50 49               CALL   execStr   
1AD3   35 20 33 20 2D 00      DB   "5 3 -",0   
1AD9   E1                     POP   HL   
1ADA   E5                     PUSH   HL   
1ADB   11 02 00               LD   DE,2   
1ADE   B7                     OR   A   
1ADF   ED 52                  SBC   HL,DE   
1AE1   7D                     LD   A,L   
1AE2   B4                     OR   H   
1AE3   CA 3D 1B               JP   Z,expectM_3038S66   
1AE6   CD B5 0E               CALL   printStr   
1AE9   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1AF5   CD B5 0E               CALL   printStr   
1AF8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B07   21 02 00               LD   hl,2   
1B0A   E5                     PUSH   hl   
1B0B   E5                     PUSH   hl   
1B0C   CD B7 0F               CALL   run   
1B0F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B17   CD B5 0E               CALL   printStr   
1B1A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B27   E1                     POP   hl   
1B28   E5                     PUSH   hl   
1B29   E5                     PUSH   hl   
1B2A   CD B7 0F               CALL   run   
1B2D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B3C   76                     HALT      
1B3D                EXPECTM_3038S66:      
1B3D   E1                     POP   HL   
1B3E                          ;*Macro unroll:  test "2 1 -",1
1B3E   31 00 4B               LD   SP,STACK   
1B41   CD E9 0E               CALL   coldInit   
1B44   CD 50 49               CALL   execStr   
1B47   32 20 31 20 2D 00      DB   "2 1 -",0   
1B4D   E1                     POP   HL   
1B4E   E5                     PUSH   HL   
1B4F   11 01 00               LD   DE,1   
1B52   B7                     OR   A   
1B53   ED 52                  SBC   HL,DE   
1B55   7D                     LD   A,L   
1B56   B4                     OR   H   
1B57   CA B1 1B               JP   Z,expectM_3039S67   
1B5A   CD B5 0E               CALL   printStr   
1B5D   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1B69   CD B5 0E               CALL   printStr   
1B6C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B7B   21 01 00               LD   hl,1   
1B7E   E5                     PUSH   hl   
1B7F   E5                     PUSH   hl   
1B80   CD B7 0F               CALL   run   
1B83   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B8B   CD B5 0E               CALL   printStr   
1B8E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B9B   E1                     POP   hl   
1B9C   E5                     PUSH   hl   
1B9D   E5                     PUSH   hl   
1B9E   CD B7 0F               CALL   run   
1BA1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1BB0   76                     HALT      
1BB1                EXPECTM_3039S67:      
1BB1   E1                     POP   HL   
1BB2                          ;*Macro unroll:  test "3a= a-- a",2
1BB2   31 00 4B               LD   SP,STACK   
1BB5   CD E9 0E               CALL   coldInit   
1BB8   CD 50 49               CALL   execStr   
1BBB   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1BC5   E1                     POP   HL   
1BC6   E5                     PUSH   HL   
1BC7   11 02 00               LD   DE,2   
1BCA   B7                     OR   A   
1BCB   ED 52                  SBC   HL,DE   
1BCD   7D                     LD   A,L   
1BCE   B4                     OR   H   
1BCF   CA 2D 1C               JP   Z,expectM_3040S68   
1BD2   CD B5 0E               CALL   printStr   
1BD5   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1BE5   CD B5 0E               CALL   printStr   
1BE8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BF7   21 02 00               LD   hl,2   
1BFA   E5                     PUSH   hl   
1BFB   E5                     PUSH   hl   
1BFC   CD B7 0F               CALL   run   
1BFF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C07   CD B5 0E               CALL   printStr   
1C0A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C17   E1                     POP   hl   
1C18   E5                     PUSH   hl   
1C19   E5                     PUSH   hl   
1C1A   CD B7 0F               CALL   run   
1C1D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C2C   76                     HALT      
1C2D                EXPECTM_3040S68:      
1C2D   E1                     POP   HL   
1C2E                          ;*Macro unroll:  test "3 5 &", 1
1C2E   31 00 4B               LD   SP,STACK   
1C31   CD E9 0E               CALL   coldInit   
1C34   CD 50 49               CALL   execStr   
1C37   33 20 35 20 26 00      DB   "3 5 &",0   
1C3D   E1                     POP   HL   
1C3E   E5                     PUSH   HL   
1C3F   11 01 00               LD   DE,1   
1C42   B7                     OR   A   
1C43   ED 52                  SBC   HL,DE   
1C45   7D                     LD   A,L   
1C46   B4                     OR   H   
1C47   CA A1 1C               JP   Z,expectM_3041S69   
1C4A   CD B5 0E               CALL   printStr   
1C4D   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1C59   CD B5 0E               CALL   printStr   
1C5C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C6B   21 01 00               LD   hl,1   
1C6E   E5                     PUSH   hl   
1C6F   E5                     PUSH   hl   
1C70   CD B7 0F               CALL   run   
1C73   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C7B   CD B5 0E               CALL   printStr   
1C7E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C8B   E1                     POP   hl   
1C8C   E5                     PUSH   hl   
1C8D   E5                     PUSH   hl   
1C8E   CD B7 0F               CALL   run   
1C91   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1CA0   76                     HALT      
1CA1                EXPECTM_3041S69:      
1CA1   E1                     POP   HL   
1CA2                          ;*Macro unroll:  test "3 5 |", 7
1CA2   31 00 4B               LD   SP,STACK   
1CA5   CD E9 0E               CALL   coldInit   
1CA8   CD 50 49               CALL   execStr   
1CAB   33 20 35 20 7C 00      DB   "3 5 |",0   
1CB1   E1                     POP   HL   
1CB2   E5                     PUSH   HL   
1CB3   11 07 00               LD   DE,7   
1CB6   B7                     OR   A   
1CB7   ED 52                  SBC   HL,DE   
1CB9   7D                     LD   A,L   
1CBA   B4                     OR   H   
1CBB   CA 15 1D               JP   Z,expectM_3042S70   
1CBE   CD B5 0E               CALL   printStr   
1CC1   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1CCD   CD B5 0E               CALL   printStr   
1CD0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CDF   21 07 00               LD   hl,7   
1CE2   E5                     PUSH   hl   
1CE3   E5                     PUSH   hl   
1CE4   CD B7 0F               CALL   run   
1CE7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1CEF   CD B5 0E               CALL   printStr   
1CF2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CFF   E1                     POP   hl   
1D00   E5                     PUSH   hl   
1D01   E5                     PUSH   hl   
1D02   CD B7 0F               CALL   run   
1D05   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D14   76                     HALT      
1D15                EXPECTM_3042S70:      
1D15   E1                     POP   HL   
1D16                          ;*Macro unroll:  test "3 5 /x", 6
1D16   31 00 4B               LD   SP,STACK   
1D19   CD E9 0E               CALL   coldInit   
1D1C   CD 50 49               CALL   execStr   
1D1F   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1D26   E1                     POP   HL   
1D27   E5                     PUSH   HL   
1D28   11 06 00               LD   DE,6   
1D2B   B7                     OR   A   
1D2C   ED 52                  SBC   HL,DE   
1D2E   7D                     LD   A,L   
1D2F   B4                     OR   H   
1D30   CA 8B 1D               JP   Z,expectM_3043S71   
1D33   CD B5 0E               CALL   printStr   
1D36   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1D43   CD B5 0E               CALL   printStr   
1D46   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D55   21 06 00               LD   hl,6   
1D58   E5                     PUSH   hl   
1D59   E5                     PUSH   hl   
1D5A   CD B7 0F               CALL   run   
1D5D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D65   CD B5 0E               CALL   printStr   
1D68   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D75   E1                     POP   hl   
1D76   E5                     PUSH   hl   
1D77   E5                     PUSH   hl   
1D78   CD B7 0F               CALL   run   
1D7B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D8A   76                     HALT      
1D8B                EXPECTM_3043S71:      
1D8B   E1                     POP   HL   
1D8C                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1D8C   31 00 4B               LD   SP,STACK   
1D8F   CD E9 0E               CALL   coldInit   
1D92   CD 50 49               CALL   execStr   
1D95   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1DA4   E1                     POP   HL   
1DA5   E5                     PUSH   HL   
1DA6   11 06 00               LD   DE,6   
1DA9   B7                     OR   A   
1DAA   ED 52                  SBC   HL,DE   
1DAC   7D                     LD   A,L   
1DAD   B4                     OR   H   
1DAE   CA 11 1E               JP   Z,expectM_3044S72   
1DB1   CD B5 0E               CALL   printStr   
1DB4   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1DC9   CD B5 0E               CALL   printStr   
1DCC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DDB   21 06 00               LD   hl,6   
1DDE   E5                     PUSH   hl   
1DDF   E5                     PUSH   hl   
1DE0   CD B7 0F               CALL   run   
1DE3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1DEB   CD B5 0E               CALL   printStr   
1DEE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DFB   E1                     POP   hl   
1DFC   E5                     PUSH   hl   
1DFD   E5                     PUSH   hl   
1DFE   CD B7 0F               CALL   run   
1E01   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E10   76                     HALT      
1E11                EXPECTM_3044S72:      
1E11   E1                     POP   HL   
1E12                          ;*Macro unroll:  test "2 3 *", 6
1E12   31 00 4B               LD   SP,STACK   
1E15   CD E9 0E               CALL   coldInit   
1E18   CD 50 49               CALL   execStr   
1E1B   32 20 33 20 2A 00      DB   "2 3 *",0   
1E21   E1                     POP   HL   
1E22   E5                     PUSH   HL   
1E23   11 06 00               LD   DE,6   
1E26   B7                     OR   A   
1E27   ED 52                  SBC   HL,DE   
1E29   7D                     LD   A,L   
1E2A   B4                     OR   H   
1E2B   CA 85 1E               JP   Z,expectM_3045S73   
1E2E   CD B5 0E               CALL   printStr   
1E31   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1E3D   CD B5 0E               CALL   printStr   
1E40   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E4F   21 06 00               LD   hl,6   
1E52   E5                     PUSH   hl   
1E53   E5                     PUSH   hl   
1E54   CD B7 0F               CALL   run   
1E57   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E5F   CD B5 0E               CALL   printStr   
1E62   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E6F   E1                     POP   hl   
1E70   E5                     PUSH   hl   
1E71   E5                     PUSH   hl   
1E72   CD B7 0F               CALL   run   
1E75   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E84   76                     HALT      
1E85                EXPECTM_3045S73:      
1E85   E1                     POP   HL   
1E86                          ;*Macro unroll:  test "1 2 3 + *", 5
1E86   31 00 4B               LD   SP,STACK   
1E89   CD E9 0E               CALL   coldInit   
1E8C   CD 50 49               CALL   execStr   
1E8F   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1E99   E1                     POP   HL   
1E9A   E5                     PUSH   HL   
1E9B   11 05 00               LD   DE,5   
1E9E   B7                     OR   A   
1E9F   ED 52                  SBC   HL,DE   
1EA1   7D                     LD   A,L   
1EA2   B4                     OR   H   
1EA3   CA 01 1F               JP   Z,expectM_3046S74   
1EA6   CD B5 0E               CALL   printStr   
1EA9   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1EB9   CD B5 0E               CALL   printStr   
1EBC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ECB   21 05 00               LD   hl,5   
1ECE   E5                     PUSH   hl   
1ECF   E5                     PUSH   hl   
1ED0   CD B7 0F               CALL   run   
1ED3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1EDB   CD B5 0E               CALL   printStr   
1EDE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EEB   E1                     POP   hl   
1EEC   E5                     PUSH   hl   
1EED   E5                     PUSH   hl   
1EEE   CD B7 0F               CALL   run   
1EF1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F00   76                     HALT      
1F01                EXPECTM_3046S74:      
1F01   E1                     POP   HL   
1F02                          ;*Macro unroll:  test "7 3 /", 2
1F02   31 00 4B               LD   SP,STACK   
1F05   CD E9 0E               CALL   coldInit   
1F08   CD 50 49               CALL   execStr   
1F0B   37 20 33 20 2F 00      DB   "7 3 /",0   
1F11   E1                     POP   HL   
1F12   E5                     PUSH   HL   
1F13   11 02 00               LD   DE,2   
1F16   B7                     OR   A   
1F17   ED 52                  SBC   HL,DE   
1F19   7D                     LD   A,L   
1F1A   B4                     OR   H   
1F1B   CA 75 1F               JP   Z,expectM_3047S75   
1F1E   CD B5 0E               CALL   printStr   
1F21   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1F2D   CD B5 0E               CALL   printStr   
1F30   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F3F   21 02 00               LD   hl,2   
1F42   E5                     PUSH   hl   
1F43   E5                     PUSH   hl   
1F44   CD B7 0F               CALL   run   
1F47   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F4F   CD B5 0E               CALL   printStr   
1F52   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F5F   E1                     POP   hl   
1F60   E5                     PUSH   hl   
1F61   E5                     PUSH   hl   
1F62   CD B7 0F               CALL   run   
1F65   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F74   76                     HALT      
1F75                EXPECTM_3047S75:      
1F75   E1                     POP   HL   
1F76                          ;*Macro unroll:  test "100a= 1a+= a", 101
1F76   31 00 4B               LD   SP,STACK   
1F79   CD E9 0E               CALL   coldInit   
1F7C   CD 50 49               CALL   execStr   
1F7F   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
1F8C   E1                     POP   HL   
1F8D   E5                     PUSH   HL   
1F8E   11 65 00               LD   DE,101   
1F91   B7                     OR   A   
1F92   ED 52                  SBC   HL,DE   
1F94   7D                     LD   A,L   
1F95   B4                     OR   H   
1F96   CA F7 1F               JP   Z,expectM_3048S76   
1F99   CD B5 0E               CALL   printStr   
1F9C   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
1FAF   CD B5 0E               CALL   printStr   
1FB2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FC1   21 65 00               LD   hl,101   
1FC4   E5                     PUSH   hl   
1FC5   E5                     PUSH   hl   
1FC6   CD B7 0F               CALL   run   
1FC9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1FD1   CD B5 0E               CALL   printStr   
1FD4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FE1   E1                     POP   hl   
1FE2   E5                     PUSH   hl   
1FE3   E5                     PUSH   hl   
1FE4   CD B7 0F               CALL   run   
1FE7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1FF6   76                     HALT      
1FF7                EXPECTM_3048S76:      
1FF7   E1                     POP   HL   
1FF8                          ;*Macro unroll:  test "100a= a1-= a", 99
1FF8   31 00 4B               LD   SP,STACK   
1FFB   CD E9 0E               CALL   coldInit   
1FFE   CD 50 49               CALL   execStr   
2001   31 30 30 61 3D 20 61 31 2D 3D 20 61 00 DB   "100a= a1-= a",0   
200E   E1                     POP   HL   
200F   E5                     PUSH   HL   
2010   11 63 00               LD   DE,99   
2013   B7                     OR   A   
2014   ED 52                  SBC   HL,DE   
2016   7D                     LD   A,L   
2017   B4                     OR   H   
2018   CA 79 20               JP   Z,expectM_3049S77   
201B   CD B5 0E               CALL   printStr   
201E   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 31 2D 3D 20 61 00 .CSTR   "Code: ","100a= a1-= a"   
2031   CD B5 0E               CALL   printStr   
2034   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2043   21 63 00               LD   hl,99   
2046   E5                     PUSH   hl   
2047   E5                     PUSH   hl   
2048   CD B7 0F               CALL   run   
204B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2053   CD B5 0E               CALL   printStr   
2056   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2063   E1                     POP   hl   
2064   E5                     PUSH   hl   
2065   E5                     PUSH   hl   
2066   CD B7 0F               CALL   run   
2069   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2078   76                     HALT      
2079                EXPECTM_3049S77:      
2079   E1                     POP   HL   
207A                          ;*Macro unroll:  test "100a= a2*= a", 200
207A   31 00 4B               LD   SP,STACK   
207D   CD E9 0E               CALL   coldInit   
2080   CD 50 49               CALL   execStr   
2083   31 30 30 61 3D 20 61 32 2A 3D 20 61 00 DB   "100a= a2*= a",0   
2090   E1                     POP   HL   
2091   E5                     PUSH   HL   
2092   11 C8 00               LD   DE,200   
2095   B7                     OR   A   
2096   ED 52                  SBC   HL,DE   
2098   7D                     LD   A,L   
2099   B4                     OR   H   
209A   CA FB 20               JP   Z,expectM_3050S78   
209D   CD B5 0E               CALL   printStr   
20A0   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2A 3D 20 61 00 .CSTR   "Code: ","100a= a2*= a"   
20B3   CD B5 0E               CALL   printStr   
20B6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20C5   21 C8 00               LD   hl,200   
20C8   E5                     PUSH   hl   
20C9   E5                     PUSH   hl   
20CA   CD B7 0F               CALL   run   
20CD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
20D5   CD B5 0E               CALL   printStr   
20D8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20E5   E1                     POP   hl   
20E6   E5                     PUSH   hl   
20E7   E5                     PUSH   hl   
20E8   CD B7 0F               CALL   run   
20EB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
20FA   76                     HALT      
20FB                EXPECTM_3050S78:      
20FB   E1                     POP   HL   
20FC                          ;*Macro unroll:  test "100a= a2/= a", 50
20FC   31 00 4B               LD   SP,STACK   
20FF   CD E9 0E               CALL   coldInit   
2102   CD 50 49               CALL   execStr   
2105   31 30 30 61 3D 20 61 32 2F 3D 20 61 00 DB   "100a= a2/= a",0   
2112   E1                     POP   HL   
2113   E5                     PUSH   HL   
2114   11 32 00               LD   DE,50   
2117   B7                     OR   A   
2118   ED 52                  SBC   HL,DE   
211A   7D                     LD   A,L   
211B   B4                     OR   H   
211C   CA 7D 21               JP   Z,expectM_3051S79   
211F   CD B5 0E               CALL   printStr   
2122   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2F 3D 20 61 00 .CSTR   "Code: ","100a= a2/= a"   
2135   CD B5 0E               CALL   printStr   
2138   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2147   21 32 00               LD   hl,50   
214A   E5                     PUSH   hl   
214B   E5                     PUSH   hl   
214C   CD B7 0F               CALL   run   
214F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2157   CD B5 0E               CALL   printStr   
215A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2167   E1                     POP   hl   
2168   E5                     PUSH   hl   
2169   E5                     PUSH   hl   
216A   CD B7 0F               CALL   run   
216D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
217C   76                     HALT      
217D                EXPECTM_3051S79:      
217D   E1                     POP   HL   
217E                          ;*Macro unroll:  test "7 3 / /re", 1
217E   31 00 4B               LD   SP,STACK   
2181   CD E9 0E               CALL   coldInit   
2184   CD 50 49               CALL   execStr   
2187   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
2191   E1                     POP   HL   
2192   E5                     PUSH   HL   
2193   11 01 00               LD   DE,1   
2196   B7                     OR   A   
2197   ED 52                  SBC   HL,DE   
2199   7D                     LD   A,L   
219A   B4                     OR   H   
219B   CA F9 21               JP   Z,expectM_3052S80   
219E   CD B5 0E               CALL   printStr   
21A1   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
21B1   CD B5 0E               CALL   printStr   
21B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21C3   21 01 00               LD   hl,1   
21C6   E5                     PUSH   hl   
21C7   E5                     PUSH   hl   
21C8   CD B7 0F               CALL   run   
21CB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
21D3   CD B5 0E               CALL   printStr   
21D6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21E3   E1                     POP   hl   
21E4   E5                     PUSH   hl   
21E5   E5                     PUSH   hl   
21E6   CD B7 0F               CALL   run   
21E9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
21F8   76                     HALT      
21F9                EXPECTM_3052S80:      
21F9   E1                     POP   HL   
21FA                          ;*Macro unroll:  test "7 3 /", 2
21FA   31 00 4B               LD   SP,STACK   
21FD   CD E9 0E               CALL   coldInit   
2200   CD 50 49               CALL   execStr   
2203   37 20 33 20 2F 00      DB   "7 3 /",0   
2209   E1                     POP   HL   
220A   E5                     PUSH   HL   
220B   11 02 00               LD   DE,2   
220E   B7                     OR   A   
220F   ED 52                  SBC   HL,DE   
2211   7D                     LD   A,L   
2212   B4                     OR   H   
2213   CA 6D 22               JP   Z,expectM_3053S81   
2216   CD B5 0E               CALL   printStr   
2219   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
2225   CD B5 0E               CALL   printStr   
2228   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2237   21 02 00               LD   hl,2   
223A   E5                     PUSH   hl   
223B   E5                     PUSH   hl   
223C   CD B7 0F               CALL   run   
223F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2247   CD B5 0E               CALL   printStr   
224A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2257   E1                     POP   hl   
2258   E5                     PUSH   hl   
2259   E5                     PUSH   hl   
225A   CD B7 0F               CALL   run   
225D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
226C   76                     HALT      
226D                EXPECTM_3053S81:      
226D   E1                     POP   HL   
226E                          ;*Macro unroll:  test "2 3 ==", FALSE
226E   31 00 4B               LD   SP,STACK   
2271   CD E9 0E               CALL   coldInit   
2274   CD 50 49               CALL   execStr   
2277   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
227E   E1                     POP   HL   
227F   E5                     PUSH   HL   
2280   11 00 00               LD   DE,FALSE   
2283   B7                     OR   A   
2284   ED 52                  SBC   HL,DE   
2286   7D                     LD   A,L   
2287   B4                     OR   H   
2288   CA E3 22               JP   Z,expectM_3054S82   
228B   CD B5 0E               CALL   printStr   
228E   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
229B   CD B5 0E               CALL   printStr   
229E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22AD   21 00 00               LD   hl,FALSE   
22B0   E5                     PUSH   hl   
22B1   E5                     PUSH   hl   
22B2   CD B7 0F               CALL   run   
22B5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
22BD   CD B5 0E               CALL   printStr   
22C0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22CD   E1                     POP   hl   
22CE   E5                     PUSH   hl   
22CF   E5                     PUSH   hl   
22D0   CD B7 0F               CALL   run   
22D3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
22E2   76                     HALT      
22E3                EXPECTM_3054S82:      
22E3   E1                     POP   HL   
22E4                          ;*Macro unroll:  test "3 3 ==", TRUE
22E4   31 00 4B               LD   SP,STACK   
22E7   CD E9 0E               CALL   coldInit   
22EA   CD 50 49               CALL   execStr   
22ED   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
22F4   E1                     POP   HL   
22F5   E5                     PUSH   HL   
22F6   11 FF FF               LD   DE,TRUE   
22F9   B7                     OR   A   
22FA   ED 52                  SBC   HL,DE   
22FC   7D                     LD   A,L   
22FD   B4                     OR   H   
22FE   CA 59 23               JP   Z,expectM_3055S83   
2301   CD B5 0E               CALL   printStr   
2304   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
2311   CD B5 0E               CALL   printStr   
2314   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2323   21 FF FF               LD   hl,TRUE   
2326   E5                     PUSH   hl   
2327   E5                     PUSH   hl   
2328   CD B7 0F               CALL   run   
232B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2333   CD B5 0E               CALL   printStr   
2336   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2343   E1                     POP   hl   
2344   E5                     PUSH   hl   
2345   E5                     PUSH   hl   
2346   CD B7 0F               CALL   run   
2349   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2358   76                     HALT      
2359                EXPECTM_3055S83:      
2359   E1                     POP   HL   
235A                          ;*Macro unroll:  test "1 2 <", TRUE
235A   31 00 4B               LD   SP,STACK   
235D   CD E9 0E               CALL   coldInit   
2360   CD 50 49               CALL   execStr   
2363   31 20 32 20 3C 00      DB   "1 2 <",0   
2369   E1                     POP   HL   
236A   E5                     PUSH   HL   
236B   11 FF FF               LD   DE,TRUE   
236E   B7                     OR   A   
236F   ED 52                  SBC   HL,DE   
2371   7D                     LD   A,L   
2372   B4                     OR   H   
2373   CA CD 23               JP   Z,expectM_3056S84   
2376   CD B5 0E               CALL   printStr   
2379   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2385   CD B5 0E               CALL   printStr   
2388   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2397   21 FF FF               LD   hl,TRUE   
239A   E5                     PUSH   hl   
239B   E5                     PUSH   hl   
239C   CD B7 0F               CALL   run   
239F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
23A7   CD B5 0E               CALL   printStr   
23AA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23B7   E1                     POP   hl   
23B8   E5                     PUSH   hl   
23B9   E5                     PUSH   hl   
23BA   CD B7 0F               CALL   run   
23BD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
23CC   76                     HALT      
23CD                EXPECTM_3056S84:      
23CD   E1                     POP   HL   
23CE                          ;*Macro unroll:  test "2 1 <", FALSE
23CE   31 00 4B               LD   SP,STACK   
23D1   CD E9 0E               CALL   coldInit   
23D4   CD 50 49               CALL   execStr   
23D7   32 20 31 20 3C 00      DB   "2 1 <",0   
23DD   E1                     POP   HL   
23DE   E5                     PUSH   HL   
23DF   11 00 00               LD   DE,FALSE   
23E2   B7                     OR   A   
23E3   ED 52                  SBC   HL,DE   
23E5   7D                     LD   A,L   
23E6   B4                     OR   H   
23E7   CA 41 24               JP   Z,expectM_3057S85   
23EA   CD B5 0E               CALL   printStr   
23ED   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
23F9   CD B5 0E               CALL   printStr   
23FC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
240B   21 00 00               LD   hl,FALSE   
240E   E5                     PUSH   hl   
240F   E5                     PUSH   hl   
2410   CD B7 0F               CALL   run   
2413   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
241B   CD B5 0E               CALL   printStr   
241E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
242B   E1                     POP   hl   
242C   E5                     PUSH   hl   
242D   E5                     PUSH   hl   
242E   CD B7 0F               CALL   run   
2431   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2440   76                     HALT      
2441                EXPECTM_3057S85:      
2441   E1                     POP   HL   
2442                          ;*Macro unroll:  test "2 3 <", TRUE
2442   31 00 4B               LD   SP,STACK   
2445   CD E9 0E               CALL   coldInit   
2448   CD 50 49               CALL   execStr   
244B   32 20 33 20 3C 00      DB   "2 3 <",0   
2451   E1                     POP   HL   
2452   E5                     PUSH   HL   
2453   11 FF FF               LD   DE,TRUE   
2456   B7                     OR   A   
2457   ED 52                  SBC   HL,DE   
2459   7D                     LD   A,L   
245A   B4                     OR   H   
245B   CA B5 24               JP   Z,expectM_3058S86   
245E   CD B5 0E               CALL   printStr   
2461   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
246D   CD B5 0E               CALL   printStr   
2470   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
247F   21 FF FF               LD   hl,TRUE   
2482   E5                     PUSH   hl   
2483   E5                     PUSH   hl   
2484   CD B7 0F               CALL   run   
2487   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
248F   CD B5 0E               CALL   printStr   
2492   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
249F   E1                     POP   hl   
24A0   E5                     PUSH   hl   
24A1   E5                     PUSH   hl   
24A2   CD B7 0F               CALL   run   
24A5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
24B4   76                     HALT      
24B5                EXPECTM_3058S86:      
24B5   E1                     POP   HL   
24B6                          ;*Macro unroll:  test "3 3 <", FALSE
24B6   31 00 4B               LD   SP,STACK   
24B9   CD E9 0E               CALL   coldInit   
24BC   CD 50 49               CALL   execStr   
24BF   33 20 33 20 3C 00      DB   "3 3 <",0   
24C5   E1                     POP   HL   
24C6   E5                     PUSH   HL   
24C7   11 00 00               LD   DE,FALSE   
24CA   B7                     OR   A   
24CB   ED 52                  SBC   HL,DE   
24CD   7D                     LD   A,L   
24CE   B4                     OR   H   
24CF   CA 29 25               JP   Z,expectM_3059S87   
24D2   CD B5 0E               CALL   printStr   
24D5   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
24E1   CD B5 0E               CALL   printStr   
24E4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24F3   21 00 00               LD   hl,FALSE   
24F6   E5                     PUSH   hl   
24F7   E5                     PUSH   hl   
24F8   CD B7 0F               CALL   run   
24FB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2503   CD B5 0E               CALL   printStr   
2506   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2513   E1                     POP   hl   
2514   E5                     PUSH   hl   
2515   E5                     PUSH   hl   
2516   CD B7 0F               CALL   run   
2519   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2528   76                     HALT      
2529                EXPECTM_3059S87:      
2529   E1                     POP   HL   
252A                          ;*Macro unroll:  test "1 2 >", FALSE
252A   31 00 4B               LD   SP,STACK   
252D   CD E9 0E               CALL   coldInit   
2530   CD 50 49               CALL   execStr   
2533   31 20 32 20 3E 00      DB   "1 2 >",0   
2539   E1                     POP   HL   
253A   E5                     PUSH   HL   
253B   11 00 00               LD   DE,FALSE   
253E   B7                     OR   A   
253F   ED 52                  SBC   HL,DE   
2541   7D                     LD   A,L   
2542   B4                     OR   H   
2543   CA 9D 25               JP   Z,expectM_3060S88   
2546   CD B5 0E               CALL   printStr   
2549   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2555   CD B5 0E               CALL   printStr   
2558   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2567   21 00 00               LD   hl,FALSE   
256A   E5                     PUSH   hl   
256B   E5                     PUSH   hl   
256C   CD B7 0F               CALL   run   
256F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2577   CD B5 0E               CALL   printStr   
257A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2587   E1                     POP   hl   
2588   E5                     PUSH   hl   
2589   E5                     PUSH   hl   
258A   CD B7 0F               CALL   run   
258D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
259C   76                     HALT      
259D                EXPECTM_3060S88:      
259D   E1                     POP   HL   
259E                          ;*Macro unroll:  test "2 1 >", TRUE
259E   31 00 4B               LD   SP,STACK   
25A1   CD E9 0E               CALL   coldInit   
25A4   CD 50 49               CALL   execStr   
25A7   32 20 31 20 3E 00      DB   "2 1 >",0   
25AD   E1                     POP   HL   
25AE   E5                     PUSH   HL   
25AF   11 FF FF               LD   DE,TRUE   
25B2   B7                     OR   A   
25B3   ED 52                  SBC   HL,DE   
25B5   7D                     LD   A,L   
25B6   B4                     OR   H   
25B7   CA 11 26               JP   Z,expectM_3061S89   
25BA   CD B5 0E               CALL   printStr   
25BD   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
25C9   CD B5 0E               CALL   printStr   
25CC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25DB   21 FF FF               LD   hl,TRUE   
25DE   E5                     PUSH   hl   
25DF   E5                     PUSH   hl   
25E0   CD B7 0F               CALL   run   
25E3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25EB   CD B5 0E               CALL   printStr   
25EE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25FB   E1                     POP   hl   
25FC   E5                     PUSH   hl   
25FD   E5                     PUSH   hl   
25FE   CD B7 0F               CALL   run   
2601   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2610   76                     HALT      
2611                EXPECTM_3061S89:      
2611   E1                     POP   HL   
2612                          ;*Macro unroll:  test "3 3 >", FALSE
2612   31 00 4B               LD   SP,STACK   
2615   CD E9 0E               CALL   coldInit   
2618   CD 50 49               CALL   execStr   
261B   33 20 33 20 3E 00      DB   "3 3 >",0   
2621   E1                     POP   HL   
2622   E5                     PUSH   HL   
2623   11 00 00               LD   DE,FALSE   
2626   B7                     OR   A   
2627   ED 52                  SBC   HL,DE   
2629   7D                     LD   A,L   
262A   B4                     OR   H   
262B   CA 85 26               JP   Z,expectM_3062S90   
262E   CD B5 0E               CALL   printStr   
2631   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
263D   CD B5 0E               CALL   printStr   
2640   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
264F   21 00 00               LD   hl,FALSE   
2652   E5                     PUSH   hl   
2653   E5                     PUSH   hl   
2654   CD B7 0F               CALL   run   
2657   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
265F   CD B5 0E               CALL   printStr   
2662   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
266F   E1                     POP   hl   
2670   E5                     PUSH   hl   
2671   E5                     PUSH   hl   
2672   CD B7 0F               CALL   run   
2675   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2684   76                     HALT      
2685                EXPECTM_3062S90:      
2685   E1                     POP   HL   
2686                          ;*Macro unroll:  test "4 3 >", TRUE
2686   31 00 4B               LD   SP,STACK   
2689   CD E9 0E               CALL   coldInit   
268C   CD 50 49               CALL   execStr   
268F   34 20 33 20 3E 00      DB   "4 3 >",0   
2695   E1                     POP   HL   
2696   E5                     PUSH   HL   
2697   11 FF FF               LD   DE,TRUE   
269A   B7                     OR   A   
269B   ED 52                  SBC   HL,DE   
269D   7D                     LD   A,L   
269E   B4                     OR   H   
269F   CA F9 26               JP   Z,expectM_3063S91   
26A2   CD B5 0E               CALL   printStr   
26A5   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
26B1   CD B5 0E               CALL   printStr   
26B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26C3   21 FF FF               LD   hl,TRUE   
26C6   E5                     PUSH   hl   
26C7   E5                     PUSH   hl   
26C8   CD B7 0F               CALL   run   
26CB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26D3   CD B5 0E               CALL   printStr   
26D6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26E3   E1                     POP   hl   
26E4   E5                     PUSH   hl   
26E5   E5                     PUSH   hl   
26E6   CD B7 0F               CALL   run   
26E9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
26F8   76                     HALT      
26F9                EXPECTM_3063S91:      
26F9   E1                     POP   HL   
26FA                          ;*Macro unroll:  test "2 2 <=", TRUE
26FA   31 00 4B               LD   SP,STACK   
26FD   CD E9 0E               CALL   coldInit   
2700   CD 50 49               CALL   execStr   
2703   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
270A   E1                     POP   HL   
270B   E5                     PUSH   HL   
270C   11 FF FF               LD   DE,TRUE   
270F   B7                     OR   A   
2710   ED 52                  SBC   HL,DE   
2712   7D                     LD   A,L   
2713   B4                     OR   H   
2714   CA 6F 27               JP   Z,expectM_3064S92   
2717   CD B5 0E               CALL   printStr   
271A   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2727   CD B5 0E               CALL   printStr   
272A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2739   21 FF FF               LD   hl,TRUE   
273C   E5                     PUSH   hl   
273D   E5                     PUSH   hl   
273E   CD B7 0F               CALL   run   
2741   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2749   CD B5 0E               CALL   printStr   
274C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2759   E1                     POP   hl   
275A   E5                     PUSH   hl   
275B   E5                     PUSH   hl   
275C   CD B7 0F               CALL   run   
275F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
276E   76                     HALT      
276F                EXPECTM_3064S92:      
276F   E1                     POP   HL   
2770                          ;*Macro unroll:  test "2 2 >=", TRUE
2770   31 00 4B               LD   SP,STACK   
2773   CD E9 0E               CALL   coldInit   
2776   CD 50 49               CALL   execStr   
2779   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
2780   E1                     POP   HL   
2781   E5                     PUSH   HL   
2782   11 FF FF               LD   DE,TRUE   
2785   B7                     OR   A   
2786   ED 52                  SBC   HL,DE   
2788   7D                     LD   A,L   
2789   B4                     OR   H   
278A   CA E5 27               JP   Z,expectM_3065S93   
278D   CD B5 0E               CALL   printStr   
2790   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
279D   CD B5 0E               CALL   printStr   
27A0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27AF   21 FF FF               LD   hl,TRUE   
27B2   E5                     PUSH   hl   
27B3   E5                     PUSH   hl   
27B4   CD B7 0F               CALL   run   
27B7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27BF   CD B5 0E               CALL   printStr   
27C2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27CF   E1                     POP   hl   
27D0   E5                     PUSH   hl   
27D1   E5                     PUSH   hl   
27D2   CD B7 0F               CALL   run   
27D5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
27E4   76                     HALT      
27E5                EXPECTM_3065S93:      
27E5   E1                     POP   HL   
27E6                          ;*Macro unroll:  test "3 1 <<", 6
27E6   31 00 4B               LD   SP,STACK   
27E9   CD E9 0E               CALL   coldInit   
27EC   CD 50 49               CALL   execStr   
27EF   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
27F6   E1                     POP   HL   
27F7   E5                     PUSH   HL   
27F8   11 06 00               LD   DE,6   
27FB   B7                     OR   A   
27FC   ED 52                  SBC   HL,DE   
27FE   7D                     LD   A,L   
27FF   B4                     OR   H   
2800   CA 5B 28               JP   Z,expectM_3066S94   
2803   CD B5 0E               CALL   printStr   
2806   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2813   CD B5 0E               CALL   printStr   
2816   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2825   21 06 00               LD   hl,6   
2828   E5                     PUSH   hl   
2829   E5                     PUSH   hl   
282A   CD B7 0F               CALL   run   
282D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2835   CD B5 0E               CALL   printStr   
2838   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2845   E1                     POP   hl   
2846   E5                     PUSH   hl   
2847   E5                     PUSH   hl   
2848   CD B7 0F               CALL   run   
284B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
285A   76                     HALT      
285B                EXPECTM_3066S94:      
285B   E1                     POP   HL   
285C                          ;*Macro unroll:  test "10 1 >>", 5
285C   31 00 4B               LD   SP,STACK   
285F   CD E9 0E               CALL   coldInit   
2862   CD 50 49               CALL   execStr   
2865   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
286D   E1                     POP   HL   
286E   E5                     PUSH   HL   
286F   11 05 00               LD   DE,5   
2872   B7                     OR   A   
2873   ED 52                  SBC   HL,DE   
2875   7D                     LD   A,L   
2876   B4                     OR   H   
2877   CA D3 28               JP   Z,expectM_3067S95   
287A   CD B5 0E               CALL   printStr   
287D   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
288B   CD B5 0E               CALL   printStr   
288E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
289D   21 05 00               LD   hl,5   
28A0   E5                     PUSH   hl   
28A1   E5                     PUSH   hl   
28A2   CD B7 0F               CALL   run   
28A5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28AD   CD B5 0E               CALL   printStr   
28B0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28BD   E1                     POP   hl   
28BE   E5                     PUSH   hl   
28BF   E5                     PUSH   hl   
28C0   CD B7 0F               CALL   run   
28C3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
28D2   76                     HALT      
28D3                EXPECTM_3067S95:      
28D3   E1                     POP   HL   
28D4                          ;*Macro unroll:  test "1 x = x", 1
28D4   31 00 4B               LD   SP,STACK   
28D7   CD E9 0E               CALL   coldInit   
28DA   CD 50 49               CALL   execStr   
28DD   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
28E5   E1                     POP   HL   
28E6   E5                     PUSH   HL   
28E7   11 01 00               LD   DE,1   
28EA   B7                     OR   A   
28EB   ED 52                  SBC   HL,DE   
28ED   7D                     LD   A,L   
28EE   B4                     OR   H   
28EF   CA 4B 29               JP   Z,expectM_3068S96   
28F2   CD B5 0E               CALL   printStr   
28F5   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2903   CD B5 0E               CALL   printStr   
2906   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2915   21 01 00               LD   hl,1   
2918   E5                     PUSH   hl   
2919   E5                     PUSH   hl   
291A   CD B7 0F               CALL   run   
291D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2925   CD B5 0E               CALL   printStr   
2928   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2935   E1                     POP   hl   
2936   E5                     PUSH   hl   
2937   E5                     PUSH   hl   
2938   CD B7 0F               CALL   run   
293B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
294A   76                     HALT      
294B                EXPECTM_3068S96:      
294B   E1                     POP   HL   
294C                          ;*Macro unroll:  test "1{}^", 1
294C   31 00 4B               LD   SP,STACK   
294F   CD E9 0E               CALL   coldInit   
2952   CD 50 49               CALL   execStr   
2955   31 7B 7D 5E 00         DB   "1{}^",0   
295A   E1                     POP   HL   
295B   E5                     PUSH   HL   
295C   11 01 00               LD   DE,1   
295F   B7                     OR   A   
2960   ED 52                  SBC   HL,DE   
2962   7D                     LD   A,L   
2963   B4                     OR   H   
2964   CA BD 29               JP   Z,expectM_3069S97   
2967   CD B5 0E               CALL   printStr   
296A   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2975   CD B5 0E               CALL   printStr   
2978   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2987   21 01 00               LD   hl,1   
298A   E5                     PUSH   hl   
298B   E5                     PUSH   hl   
298C   CD B7 0F               CALL   run   
298F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2997   CD B5 0E               CALL   printStr   
299A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29A7   E1                     POP   hl   
29A8   E5                     PUSH   hl   
29A9   E5                     PUSH   hl   
29AA   CD B7 0F               CALL   run   
29AD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
29BC   76                     HALT      
29BD                EXPECTM_3069S97:      
29BD   E1                     POP   HL   
29BE                          ;*Macro unroll:  test "{1}^", 1
29BE   31 00 4B               LD   SP,STACK   
29C1   CD E9 0E               CALL   coldInit   
29C4   CD 50 49               CALL   execStr   
29C7   7B 31 7D 5E 00         DB   "{1}^",0   
29CC   E1                     POP   HL   
29CD   E5                     PUSH   HL   
29CE   11 01 00               LD   DE,1   
29D1   B7                     OR   A   
29D2   ED 52                  SBC   HL,DE   
29D4   7D                     LD   A,L   
29D5   B4                     OR   H   
29D6   CA 2F 2A               JP   Z,expectM_3070S98   
29D9   CD B5 0E               CALL   printStr   
29DC   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
29E7   CD B5 0E               CALL   printStr   
29EA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29F9   21 01 00               LD   hl,1   
29FC   E5                     PUSH   hl   
29FD   E5                     PUSH   hl   
29FE   CD B7 0F               CALL   run   
2A01   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A09   CD B5 0E               CALL   printStr   
2A0C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A19   E1                     POP   hl   
2A1A   E5                     PUSH   hl   
2A1B   E5                     PUSH   hl   
2A1C   CD B7 0F               CALL   run   
2A1F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A2E   76                     HALT      
2A2F                EXPECTM_3070S98:      
2A2F   E1                     POP   HL   
2A30                          ;*Macro unroll:  test "{{1}^}^", 1
2A30   31 00 4B               LD   SP,STACK   
2A33   CD E9 0E               CALL   coldInit   
2A36   CD 50 49               CALL   execStr   
2A39   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
2A41   E1                     POP   HL   
2A42   E5                     PUSH   HL   
2A43   11 01 00               LD   DE,1   
2A46   B7                     OR   A   
2A47   ED 52                  SBC   HL,DE   
2A49   7D                     LD   A,L   
2A4A   B4                     OR   H   
2A4B   CA A7 2A               JP   Z,expectM_3071S99   
2A4E   CD B5 0E               CALL   printStr   
2A51   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2A5F   CD B5 0E               CALL   printStr   
2A62   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A71   21 01 00               LD   hl,1   
2A74   E5                     PUSH   hl   
2A75   E5                     PUSH   hl   
2A76   CD B7 0F               CALL   run   
2A79   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A81   CD B5 0E               CALL   printStr   
2A84   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A91   E1                     POP   hl   
2A92   E5                     PUSH   hl   
2A93   E5                     PUSH   hl   
2A94   CD B7 0F               CALL   run   
2A97   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2AA6   76                     HALT      
2AA7                EXPECTM_3071S99:      
2AA7   E1                     POP   HL   
2AA8                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2AA8   31 00 4B               LD   SP,STACK   
2AAB   CD E9 0E               CALL   coldInit   
2AAE   CD 50 49               CALL   execStr   
2AB1   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2ABC   E1                     POP   HL   
2ABD   E5                     PUSH   HL   
2ABE   11 01 00               LD   DE,1   
2AC1   B7                     OR   A   
2AC2   ED 52                  SBC   HL,DE   
2AC4   7D                     LD   A,L   
2AC5   B4                     OR   H   
2AC6   CA 25 2B               JP   Z,expectM_3072S100   
2AC9   CD B5 0E               CALL   printStr   
2ACC   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2ADD   CD B5 0E               CALL   printStr   
2AE0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AEF   21 01 00               LD   hl,1   
2AF2   E5                     PUSH   hl   
2AF3   E5                     PUSH   hl   
2AF4   CD B7 0F               CALL   run   
2AF7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2AFF   CD B5 0E               CALL   printStr   
2B02   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B0F   E1                     POP   hl   
2B10   E5                     PUSH   hl   
2B11   E5                     PUSH   hl   
2B12   CD B7 0F               CALL   run   
2B15   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B24   76                     HALT      
2B25                EXPECTM_3072S100:      
2B25   E1                     POP   HL   
2B26                          ;*Macro unroll:  test "5 /f{10} ?", 5
2B26   31 00 4B               LD   SP,STACK   
2B29   CD E9 0E               CALL   coldInit   
2B2C   CD 50 49               CALL   execStr   
2B2F   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2B3A   E1                     POP   HL   
2B3B   E5                     PUSH   HL   
2B3C   11 05 00               LD   DE,5   
2B3F   B7                     OR   A   
2B40   ED 52                  SBC   HL,DE   
2B42   7D                     LD   A,L   
2B43   B4                     OR   H   
2B44   CA A3 2B               JP   Z,expectM_3073S101   
2B47   CD B5 0E               CALL   printStr   
2B4A   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2B5B   CD B5 0E               CALL   printStr   
2B5E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B6D   21 05 00               LD   hl,5   
2B70   E5                     PUSH   hl   
2B71   E5                     PUSH   hl   
2B72   CD B7 0F               CALL   run   
2B75   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B7D   CD B5 0E               CALL   printStr   
2B80   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B8D   E1                     POP   hl   
2B8E   E5                     PUSH   hl   
2B8F   E5                     PUSH   hl   
2B90   CD B7 0F               CALL   run   
2B93   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BA2   76                     HALT      
2BA3                EXPECTM_3073S101:      
2BA3   E1                     POP   HL   
2BA4                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2BA4   31 00 4B               LD   SP,STACK   
2BA7   CD E9 0E               CALL   coldInit   
2BAA   CD 50 49               CALL   execStr   
2BAD   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2BBA   E1                     POP   HL   
2BBB   E5                     PUSH   HL   
2BBC   11 0F 00               LD   DE,15   
2BBF   B7                     OR   A   
2BC0   ED 52                  SBC   HL,DE   
2BC2   7D                     LD   A,L   
2BC3   B4                     OR   H   
2BC4   CA 25 2C               JP   Z,expectM_3074S102   
2BC7   CD B5 0E               CALL   printStr   
2BCA   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2BDD   CD B5 0E               CALL   printStr   
2BE0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BEF   21 0F 00               LD   hl,15   
2BF2   E5                     PUSH   hl   
2BF3   E5                     PUSH   hl   
2BF4   CD B7 0F               CALL   run   
2BF7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2BFF   CD B5 0E               CALL   printStr   
2C02   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C0F   E1                     POP   hl   
2C10   E5                     PUSH   hl   
2C11   E5                     PUSH   hl   
2C12   CD B7 0F               CALL   run   
2C15   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C24   76                     HALT      
2C25                EXPECTM_3074S102:      
2C25   E1                     POP   HL   
2C26                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2C26   31 00 4B               LD   SP,STACK   
2C29   CD E9 0E               CALL   coldInit   
2C2C   CD 50 49               CALL   execStr   
2C2F   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2C41   E1                     POP   HL   
2C42   E5                     PUSH   HL   
2C43   11 15 00               LD   DE,21   
2C46   B7                     OR   A   
2C47   ED 52                  SBC   HL,DE   
2C49   7D                     LD   A,L   
2C4A   B4                     OR   H   
2C4B   CA B1 2C               JP   Z,expectM_3075S103   
2C4E   CD B5 0E               CALL   printStr   
2C51   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2C69   CD B5 0E               CALL   printStr   
2C6C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C7B   21 15 00               LD   hl,21   
2C7E   E5                     PUSH   hl   
2C7F   E5                     PUSH   hl   
2C80   CD B7 0F               CALL   run   
2C83   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C8B   CD B5 0E               CALL   printStr   
2C8E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C9B   E1                     POP   hl   
2C9C   E5                     PUSH   hl   
2C9D   E5                     PUSH   hl   
2C9E   CD B7 0F               CALL   run   
2CA1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CB0   76                     HALT      
2CB1                EXPECTM_3075S103:      
2CB1   E1                     POP   HL   
2CB2                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2CB2   31 00 4B               LD   SP,STACK   
2CB5   CD E9 0E               CALL   coldInit   
2CB8   CD 50 49               CALL   execStr   
2CBB   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
2CCD   E1                     POP   HL   
2CCE   E5                     PUSH   HL   
2CCF   11 0B 00               LD   DE,11   
2CD2   B7                     OR   A   
2CD3   ED 52                  SBC   HL,DE   
2CD5   7D                     LD   A,L   
2CD6   B4                     OR   H   
2CD7   CA 3D 2D               JP   Z,expectM_3076S104   
2CDA   CD B5 0E               CALL   printStr   
2CDD   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2CF5   CD B5 0E               CALL   printStr   
2CF8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D07   21 0B 00               LD   hl,11   
2D0A   E5                     PUSH   hl   
2D0B   E5                     PUSH   hl   
2D0C   CD B7 0F               CALL   run   
2D0F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D17   CD B5 0E               CALL   printStr   
2D1A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D27   E1                     POP   hl   
2D28   E5                     PUSH   hl   
2D29   E5                     PUSH   hl   
2D2A   CD B7 0F               CALL   run   
2D2D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D3C   76                     HALT      
2D3D                EXPECTM_3076S104:      
2D3D   E1                     POP   HL   
2D3E                          ;*Macro unroll:  test "\\{2}^", 2
2D3E   31 00 4B               LD   SP,STACK   
2D41   CD E9 0E               CALL   coldInit   
2D44   CD 50 49               CALL   execStr   
2D47   5C 7B 32 7D 5E 00      DB   "\\{2}^",0   
2D4D   E1                     POP   HL   
2D4E   E5                     PUSH   HL   
2D4F   11 02 00               LD   DE,2   
2D52   B7                     OR   A   
2D53   ED 52                  SBC   HL,DE   
2D55   7D                     LD   A,L   
2D56   B4                     OR   H   
2D57   CA B1 2D               JP   Z,expectM_3077S105   
2D5A   CD B5 0E               CALL   printStr   
2D5D   43 6F 64 65 3A 20 5C 7B 32 7D 5E 00 .CSTR   "Code: ","\\{2}^"   
2D69   CD B5 0E               CALL   printStr   
2D6C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D7B   21 02 00               LD   hl,2   
2D7E   E5                     PUSH   hl   
2D7F   E5                     PUSH   hl   
2D80   CD B7 0F               CALL   run   
2D83   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D8B   CD B5 0E               CALL   printStr   
2D8E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D9B   E1                     POP   hl   
2D9C   E5                     PUSH   hl   
2D9D   E5                     PUSH   hl   
2D9E   CD B7 0F               CALL   run   
2DA1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DB0   76                     HALT      
2DB1                EXPECTM_3077S105:      
2DB1   E1                     POP   HL   
2DB2                          ;*Macro unroll:  test "\\a{2}^", 2
2DB2   31 00 4B               LD   SP,STACK   
2DB5   CD E9 0E               CALL   coldInit   
2DB8   CD 50 49               CALL   execStr   
2DBB   5C 61 7B 32 7D 5E 00   DB   "\\a{2}^",0   
2DC2   E1                     POP   HL   
2DC3   E5                     PUSH   HL   
2DC4   11 02 00               LD   DE,2   
2DC7   B7                     OR   A   
2DC8   ED 52                  SBC   HL,DE   
2DCA   7D                     LD   A,L   
2DCB   B4                     OR   H   
2DCC   CA 27 2E               JP   Z,expectM_3078S106   
2DCF   CD B5 0E               CALL   printStr   
2DD2   43 6F 64 65 3A 20 5C 61 7B 32 7D 5E 00 .CSTR   "Code: ","\\a{2}^"   
2DDF   CD B5 0E               CALL   printStr   
2DE2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DF1   21 02 00               LD   hl,2   
2DF4   E5                     PUSH   hl   
2DF5   E5                     PUSH   hl   
2DF6   CD B7 0F               CALL   run   
2DF9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E01   CD B5 0E               CALL   printStr   
2E04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E11   E1                     POP   hl   
2E12   E5                     PUSH   hl   
2E13   E5                     PUSH   hl   
2E14   CD B7 0F               CALL   run   
2E17   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E26   76                     HALT      
2E27                EXPECTM_3078S106:      
2E27   E1                     POP   HL   
2E28                          ;*Macro unroll:  test "5 \\a{%a}^", 5
2E28   31 00 4B               LD   SP,STACK   
2E2B   CD E9 0E               CALL   coldInit   
2E2E   CD 50 49               CALL   execStr   
2E31   35 20 5C 61 7B 25 61 7D 5E 00 DB   "5 \\a{%a}^",0   
2E3B   E1                     POP   HL   
2E3C   E5                     PUSH   HL   
2E3D   11 05 00               LD   DE,5   
2E40   B7                     OR   A   
2E41   ED 52                  SBC   HL,DE   
2E43   7D                     LD   A,L   
2E44   B4                     OR   H   
2E45   CA A3 2E               JP   Z,expectM_3079S107   
2E48   CD B5 0E               CALL   printStr   
2E4B   43 6F 64 65 3A 20 35 20 5C 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a{%a}^"   
2E5B   CD B5 0E               CALL   printStr   
2E5E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E6D   21 05 00               LD   hl,5   
2E70   E5                     PUSH   hl   
2E71   E5                     PUSH   hl   
2E72   CD B7 0F               CALL   run   
2E75   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E7D   CD B5 0E               CALL   printStr   
2E80   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E8D   E1                     POP   hl   
2E8E   E5                     PUSH   hl   
2E8F   E5                     PUSH   hl   
2E90   CD B7 0F               CALL   run   
2E93   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2EA2   76                     HALT      
2EA3                EXPECTM_3079S107:      
2EA3   E1                     POP   HL   
2EA4                          ;*Macro unroll:  test "5 \\a:b{%a}^", 5
2EA4   31 00 4B               LD   SP,STACK   
2EA7   CD E9 0E               CALL   coldInit   
2EAA   CD 50 49               CALL   execStr   
2EAD   35 20 5C 61 3A 62 7B 25 61 7D 5E 00 DB   "5 \\a:b{%a}^",0   
2EB9   E1                     POP   HL   
2EBA   E5                     PUSH   HL   
2EBB   11 05 00               LD   DE,5   
2EBE   B7                     OR   A   
2EBF   ED 52                  SBC   HL,DE   
2EC1   7D                     LD   A,L   
2EC2   B4                     OR   H   
2EC3   CA 23 2F               JP   Z,expectM_3080S108   
2EC6   CD B5 0E               CALL   printStr   
2EC9   43 6F 64 65 3A 20 35 20 5C 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a:b{%a}^"   
2EDB   CD B5 0E               CALL   printStr   
2EDE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EED   21 05 00               LD   hl,5   
2EF0   E5                     PUSH   hl   
2EF1   E5                     PUSH   hl   
2EF2   CD B7 0F               CALL   run   
2EF5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2EFD   CD B5 0E               CALL   printStr   
2F00   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F0D   E1                     POP   hl   
2F0E   E5                     PUSH   hl   
2F0F   E5                     PUSH   hl   
2F10   CD B7 0F               CALL   run   
2F13   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F22   76                     HALT      
2F23                EXPECTM_3080S108:      
2F23   E1                     POP   HL   
2F24                          ;*Macro unroll:  test "\\a{{2}^}^", 2
2F24   31 00 4B               LD   SP,STACK   
2F27   CD E9 0E               CALL   coldInit   
2F2A   CD 50 49               CALL   execStr   
2F2D   5C 61 7B 7B 32 7D 5E 7D 5E 00 DB   "\\a{{2}^}^",0   
2F37   E1                     POP   HL   
2F38   E5                     PUSH   HL   
2F39   11 02 00               LD   DE,2   
2F3C   B7                     OR   A   
2F3D   ED 52                  SBC   HL,DE   
2F3F   7D                     LD   A,L   
2F40   B4                     OR   H   
2F41   CA 9F 2F               JP   Z,expectM_3081S109   
2F44   CD B5 0E               CALL   printStr   
2F47   43 6F 64 65 3A 20 5C 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ","\\a{{2}^}^"   
2F57   CD B5 0E               CALL   printStr   
2F5A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F69   21 02 00               LD   hl,2   
2F6C   E5                     PUSH   hl   
2F6D   E5                     PUSH   hl   
2F6E   CD B7 0F               CALL   run   
2F71   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F79   CD B5 0E               CALL   printStr   
2F7C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F89   E1                     POP   hl   
2F8A   E5                     PUSH   hl   
2F8B   E5                     PUSH   hl   
2F8C   CD B7 0F               CALL   run   
2F8F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F9E   76                     HALT      
2F9F                EXPECTM_3081S109:      
2F9F   E1                     POP   HL   
2FA0                          ;*Macro unroll:  test "1 5 \\a{{%a}^}^", 5
2FA0   31 00 4B               LD   SP,STACK   
2FA3   CD E9 0E               CALL   coldInit   
2FA6   CD 50 49               CALL   execStr   
2FA9   31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a}^}^",0   
2FB8   E1                     POP   HL   
2FB9   E5                     PUSH   HL   
2FBA   11 05 00               LD   DE,5   
2FBD   B7                     OR   A   
2FBE   ED 52                  SBC   HL,DE   
2FC0   7D                     LD   A,L   
2FC1   B4                     OR   H   
2FC2   CA 25 30               JP   Z,expectM_3082S110   
2FC5   CD B5 0E               CALL   printStr   
2FC8   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a}^}^"   
2FDD   CD B5 0E               CALL   printStr   
2FE0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FEF   21 05 00               LD   hl,5   
2FF2   E5                     PUSH   hl   
2FF3   E5                     PUSH   hl   
2FF4   CD B7 0F               CALL   run   
2FF7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2FFF   CD B5 0E               CALL   printStr   
3002   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
300F   E1                     POP   hl   
3010   E5                     PUSH   hl   
3011   E5                     PUSH   hl   
3012   CD B7 0F               CALL   run   
3015   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3024   76                     HALT      
3025                EXPECTM_3082S110:      
3025   E1                     POP   HL   
3026                          ;*Macro unroll:  test "1 5 \\ab{{%a}^}^", 1
3026   31 00 4B               LD   SP,STACK   
3029   CD E9 0E               CALL   coldInit   
302C   CD 50 49               CALL   execStr   
302F   31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a}^}^",0   
303F   E1                     POP   HL   
3040   E5                     PUSH   HL   
3041   11 01 00               LD   DE,1   
3044   B7                     OR   A   
3045   ED 52                  SBC   HL,DE   
3047   7D                     LD   A,L   
3048   B4                     OR   H   
3049   CA AD 30               JP   Z,expectM_3083S111   
304C   CD B5 0E               CALL   printStr   
304F   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a}^}^"   
3065   CD B5 0E               CALL   printStr   
3068   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3077   21 01 00               LD   hl,1   
307A   E5                     PUSH   hl   
307B   E5                     PUSH   hl   
307C   CD B7 0F               CALL   run   
307F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3087   CD B5 0E               CALL   printStr   
308A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3097   E1                     POP   hl   
3098   E5                     PUSH   hl   
3099   E5                     PUSH   hl   
309A   CD B7 0F               CALL   run   
309D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
30AC   76                     HALT      
30AD                EXPECTM_3083S111:      
30AD   E1                     POP   HL   
30AE                          ;*Macro unroll:  test "1 5 \\a{{%a 2 +}^}^", 7
30AE   31 00 4B               LD   SP,STACK   
30B1   CD E9 0E               CALL   coldInit   
30B4   CD 50 49               CALL   execStr   
30B7   31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a 2 +}^}^",0   
30CA   E1                     POP   HL   
30CB   E5                     PUSH   HL   
30CC   11 07 00               LD   DE,7   
30CF   B7                     OR   A   
30D0   ED 52                  SBC   HL,DE   
30D2   7D                     LD   A,L   
30D3   B4                     OR   H   
30D4   CA 3B 31               JP   Z,expectM_3084S112   
30D7   CD B5 0E               CALL   printStr   
30DA   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a 2 +}^}^"   
30F3   CD B5 0E               CALL   printStr   
30F6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3105   21 07 00               LD   hl,7   
3108   E5                     PUSH   hl   
3109   E5                     PUSH   hl   
310A   CD B7 0F               CALL   run   
310D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3115   CD B5 0E               CALL   printStr   
3118   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3125   E1                     POP   hl   
3126   E5                     PUSH   hl   
3127   E5                     PUSH   hl   
3128   CD B7 0F               CALL   run   
312B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
313A   76                     HALT      
313B                EXPECTM_3084S112:      
313B   E1                     POP   HL   
313C                          ;*Macro unroll:  test "1 5 \\ab{{%a %b +}^}^", 6
313C   31 00 4B               LD   SP,STACK   
313F   CD E9 0E               CALL   coldInit   
3142   CD 50 49               CALL   execStr   
3145   31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a %b +}^}^",0   
315A   E1                     POP   HL   
315B   E5                     PUSH   HL   
315C   11 06 00               LD   DE,6   
315F   B7                     OR   A   
3160   ED 52                  SBC   HL,DE   
3162   7D                     LD   A,L   
3163   B4                     OR   H   
3164   CA CD 31               JP   Z,expectM_3085S113   
3167   CD B5 0E               CALL   printStr   
316A   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a %b +}^}^"   
3185   CD B5 0E               CALL   printStr   
3188   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3197   21 06 00               LD   hl,6   
319A   E5                     PUSH   hl   
319B   E5                     PUSH   hl   
319C   CD B7 0F               CALL   run   
319F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
31A7   CD B5 0E               CALL   printStr   
31AA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31B7   E1                     POP   hl   
31B8   E5                     PUSH   hl   
31B9   E5                     PUSH   hl   
31BA   CD B7 0F               CALL   run   
31BD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
31CC   76                     HALT      
31CD                EXPECTM_3085S113:      
31CD   E1                     POP   HL   
31CE                          ;*Macro unroll:  test "\\a{2} x= 1 x^", 2
31CE   31 00 4B               LD   SP,STACK   
31D1   CD E9 0E               CALL   coldInit   
31D4   CD 50 49               CALL   execStr   
31D7   5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a{2} x= 1 x^",0   
31E5   E1                     POP   HL   
31E6   E5                     PUSH   HL   
31E7   11 02 00               LD   DE,2   
31EA   B7                     OR   A   
31EB   ED 52                  SBC   HL,DE   
31ED   7D                     LD   A,L   
31EE   B4                     OR   H   
31EF   CA 51 32               JP   Z,expectM_3086S114   
31F2   CD B5 0E               CALL   printStr   
31F5   43 6F 64 65 3A 20 5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{2} x= 1 x^"   
3209   CD B5 0E               CALL   printStr   
320C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
321B   21 02 00               LD   hl,2   
321E   E5                     PUSH   hl   
321F   E5                     PUSH   hl   
3220   CD B7 0F               CALL   run   
3223   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
322B   CD B5 0E               CALL   printStr   
322E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
323B   E1                     POP   hl   
323C   E5                     PUSH   hl   
323D   E5                     PUSH   hl   
323E   CD B7 0F               CALL   run   
3241   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3250   76                     HALT      
3251                EXPECTM_3086S114:      
3251   E1                     POP   HL   
3252                          ;*Macro unroll:  test "\\a{%a} x= 0 1 x^", 1
3252   31 00 4B               LD   SP,STACK   
3255   CD E9 0E               CALL   coldInit   
3258   CD 50 49               CALL   execStr   
325B   5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   "\\a{%a} x= 0 1 x^",0   
326C   E1                     POP   HL   
326D   E5                     PUSH   HL   
326E   11 01 00               LD   DE,1   
3271   B7                     OR   A   
3272   ED 52                  SBC   HL,DE   
3274   7D                     LD   A,L   
3275   B4                     OR   H   
3276   CA DB 32               JP   Z,expectM_3087S115   
3279   CD B5 0E               CALL   printStr   
327C   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{%a} x= 0 1 x^"   
3293   CD B5 0E               CALL   printStr   
3296   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32A5   21 01 00               LD   hl,1   
32A8   E5                     PUSH   hl   
32A9   E5                     PUSH   hl   
32AA   CD B7 0F               CALL   run   
32AD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
32B5   CD B5 0E               CALL   printStr   
32B8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32C5   E1                     POP   hl   
32C6   E5                     PUSH   hl   
32C7   E5                     PUSH   hl   
32C8   CD B7 0F               CALL   run   
32CB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
32DA   76                     HALT      
32DB                EXPECTM_3087S115:      
32DB   E1                     POP   HL   
32DC                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
32DC   31 00 4B               LD   SP,STACK   
32DF   CD E9 0E               CALL   coldInit   
32E2   CD 50 49               CALL   execStr   
32E5   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
32F7   E1                     POP   HL   
32F8   E5                     PUSH   HL   
32F9   11 02 00               LD   DE,2   
32FC   B7                     OR   A   
32FD   ED 52                  SBC   HL,DE   
32FF   7D                     LD   A,L   
3300   B4                     OR   H   
3301   CA 67 33               JP   Z,expectM_3088S116   
3304   CD B5 0E               CALL   printStr   
3307   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
331F   CD B5 0E               CALL   printStr   
3322   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3331   21 02 00               LD   hl,2   
3334   E5                     PUSH   hl   
3335   E5                     PUSH   hl   
3336   CD B7 0F               CALL   run   
3339   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3341   CD B5 0E               CALL   printStr   
3344   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3351   E1                     POP   hl   
3352   E5                     PUSH   hl   
3353   E5                     PUSH   hl   
3354   CD B7 0F               CALL   run   
3357   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3366   76                     HALT      
3367                EXPECTM_3088S116:      
3367   E1                     POP   HL   
3368                          ;*Macro unroll:  test "\\a:b{%a} x= 1 2 x^", 2
3368   31 00 4B               LD   SP,STACK   
336B   CD E9 0E               CALL   coldInit   
336E   CD 50 49               CALL   execStr   
3371   5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\a:b{%a} x= 1 2 x^",0   
3384   E1                     POP   HL   
3385   E5                     PUSH   HL   
3386   11 02 00               LD   DE,2   
3389   B7                     OR   A   
338A   ED 52                  SBC   HL,DE   
338C   7D                     LD   A,L   
338D   B4                     OR   H   
338E   CA F5 33               JP   Z,expectM_3089S117   
3391   CD B5 0E               CALL   printStr   
3394   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a} x= 1 2 x^"   
33AD   CD B5 0E               CALL   printStr   
33B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33BF   21 02 00               LD   hl,2   
33C2   E5                     PUSH   hl   
33C3   E5                     PUSH   hl   
33C4   CD B7 0F               CALL   run   
33C7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
33CF   CD B5 0E               CALL   printStr   
33D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33DF   E1                     POP   hl   
33E0   E5                     PUSH   hl   
33E1   E5                     PUSH   hl   
33E2   CD B7 0F               CALL   run   
33E5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
33F4   76                     HALT      
33F5                EXPECTM_3089S117:      
33F5   E1                     POP   HL   
33F6                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
33F6   31 00 4B               LD   SP,STACK   
33F9   CD E9 0E               CALL   coldInit   
33FC   CD 50 49               CALL   execStr   
33FF   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3411   E1                     POP   HL   
3412   E5                     PUSH   HL   
3413   11 02 00               LD   DE,2   
3416   B7                     OR   A   
3417   ED 52                  SBC   HL,DE   
3419   7D                     LD   A,L   
341A   B4                     OR   H   
341B   CA 81 34               JP   Z,expectM_3090S118   
341E   CD B5 0E               CALL   printStr   
3421   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
3439   CD B5 0E               CALL   printStr   
343C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
344B   21 02 00               LD   hl,2   
344E   E5                     PUSH   hl   
344F   E5                     PUSH   hl   
3450   CD B7 0F               CALL   run   
3453   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
345B   CD B5 0E               CALL   printStr   
345E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
346B   E1                     POP   hl   
346C   E5                     PUSH   hl   
346D   E5                     PUSH   hl   
346E   CD B7 0F               CALL   run   
3471   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3480   76                     HALT      
3481                EXPECTM_3090S118:      
3481   E1                     POP   HL   
3482                          ;*Macro unroll:  test "\\ab{%b %a} x= 10 15 x^ -", 5
3482   31 00 4B               LD   SP,STACK   
3485   CD E9 0E               CALL   coldInit   
3488   CD 50 49               CALL   execStr   
348B   5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   "\\ab{%b %a} x= 10 15 x^ -",0   
34A4   E1                     POP   HL   
34A5   E5                     PUSH   HL   
34A6   11 05 00               LD   DE,5   
34A9   B7                     OR   A   
34AA   ED 52                  SBC   HL,DE   
34AC   7D                     LD   A,L   
34AD   B4                     OR   H   
34AE   CA 1B 35               JP   Z,expectM_3091S119   
34B1   CD B5 0E               CALL   printStr   
34B4   43 6F 64 65 3A 20 5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","\\ab{%b %a} x= 10 15 x^ -"   
34D3   CD B5 0E               CALL   printStr   
34D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34E5   21 05 00               LD   hl,5   
34E8   E5                     PUSH   hl   
34E9   E5                     PUSH   hl   
34EA   CD B7 0F               CALL   run   
34ED   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
34F5   CD B5 0E               CALL   printStr   
34F8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3505   E1                     POP   hl   
3506   E5                     PUSH   hl   
3507   E5                     PUSH   hl   
3508   CD B7 0F               CALL   run   
350B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
351A   76                     HALT      
351B                EXPECTM_3091S119:      
351B   E1                     POP   HL   
351C                          ;*Macro unroll:  test "\\a:b{2} x= 1 x^", 2
351C   31 00 4B               LD   SP,STACK   
351F   CD E9 0E               CALL   coldInit   
3522   CD 50 49               CALL   execStr   
3525   5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a:b{2} x= 1 x^",0   
3535   E1                     POP   HL   
3536   E5                     PUSH   HL   
3537   11 02 00               LD   DE,2   
353A   B7                     OR   A   
353B   ED 52                  SBC   HL,DE   
353D   7D                     LD   A,L   
353E   B4                     OR   H   
353F   CA A3 35               JP   Z,expectM_3092S120   
3542   CD B5 0E               CALL   printStr   
3545   43 6F 64 65 3A 20 5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a:b{2} x= 1 x^"   
355B   CD B5 0E               CALL   printStr   
355E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
356D   21 02 00               LD   hl,2   
3570   E5                     PUSH   hl   
3571   E5                     PUSH   hl   
3572   CD B7 0F               CALL   run   
3575   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
357D   CD B5 0E               CALL   printStr   
3580   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
358D   E1                     POP   hl   
358E   E5                     PUSH   hl   
358F   E5                     PUSH   hl   
3590   CD B7 0F               CALL   run   
3593   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
35A2   76                     HALT      
35A3                EXPECTM_3092S120:      
35A3   E1                     POP   HL   
35A4                          ;*Macro unroll:  test "\\:b{100 %b = %b} x= x^", 100
35A4   31 00 4B               LD   SP,STACK   
35A7   CD E9 0E               CALL   coldInit   
35AA   CD 50 49               CALL   execStr   
35AD   5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "\\:b{100 %b = %b} x= x^",0   
35C4   E1                     POP   HL   
35C5   E5                     PUSH   HL   
35C6   11 64 00               LD   DE,100   
35C9   B7                     OR   A   
35CA   ED 52                  SBC   HL,DE   
35CC   7D                     LD   A,L   
35CD   B4                     OR   H   
35CE   CA 39 36               JP   Z,expectM_3093S121   
35D1   CD B5 0E               CALL   printStr   
35D4   43 6F 64 65 3A 20 5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","\\:b{100 %b = %b} x= x^"   
35F1   CD B5 0E               CALL   printStr   
35F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3603   21 64 00               LD   hl,100   
3606   E5                     PUSH   hl   
3607   E5                     PUSH   hl   
3608   CD B7 0F               CALL   run   
360B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3613   CD B5 0E               CALL   printStr   
3616   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3623   E1                     POP   hl   
3624   E5                     PUSH   hl   
3625   E5                     PUSH   hl   
3626   CD B7 0F               CALL   run   
3629   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3638   76                     HALT      
3639                EXPECTM_3093S121:      
3639   E1                     POP   HL   
363A                          ;*Macro unroll:  test "\\a:b{1 %b = %b} x= 2 x^", 1
363A   31 00 4B               LD   SP,STACK   
363D   CD E9 0E               CALL   coldInit   
3640   CD 50 49               CALL   execStr   
3643   5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{1 %b = %b} x= 2 x^",0   
365B   E1                     POP   HL   
365C   E5                     PUSH   HL   
365D   11 01 00               LD   DE,1   
3660   B7                     OR   A   
3661   ED 52                  SBC   HL,DE   
3663   7D                     LD   A,L   
3664   B4                     OR   H   
3665   CA D1 36               JP   Z,expectM_3094S122   
3668   CD B5 0E               CALL   printStr   
366B   43 6F 64 65 3A 20 5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{1 %b = %b} x= 2 x^"   
3689   CD B5 0E               CALL   printStr   
368C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
369B   21 01 00               LD   hl,1   
369E   E5                     PUSH   hl   
369F   E5                     PUSH   hl   
36A0   CD B7 0F               CALL   run   
36A3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
36AB   CD B5 0E               CALL   printStr   
36AE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36BB   E1                     POP   hl   
36BC   E5                     PUSH   hl   
36BD   E5                     PUSH   hl   
36BE   CD B7 0F               CALL   run   
36C1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
36D0   76                     HALT      
36D1                EXPECTM_3094S122:      
36D1   E1                     POP   HL   
36D2                          ;*Macro unroll:  test "\\a:b{%a %b = %b} x= 2 x^", 2
36D2   31 00 4B               LD   SP,STACK   
36D5   CD E9 0E               CALL   coldInit   
36D8   CD 50 49               CALL   execStr   
36DB   5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{%a %b = %b} x= 2 x^",0   
36F4   E1                     POP   HL   
36F5   E5                     PUSH   HL   
36F6   11 02 00               LD   DE,2   
36F9   B7                     OR   A   
36FA   ED 52                  SBC   HL,DE   
36FC   7D                     LD   A,L   
36FD   B4                     OR   H   
36FE   CA 6B 37               JP   Z,expectM_3095S123   
3701   CD B5 0E               CALL   printStr   
3704   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a %b = %b} x= 2 x^"   
3723   CD B5 0E               CALL   printStr   
3726   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3735   21 02 00               LD   hl,2   
3738   E5                     PUSH   hl   
3739   E5                     PUSH   hl   
373A   CD B7 0F               CALL   run   
373D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3745   CD B5 0E               CALL   printStr   
3748   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3755   E1                     POP   hl   
3756   E5                     PUSH   hl   
3757   E5                     PUSH   hl   
3758   CD B7 0F               CALL   run   
375B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
376A   76                     HALT      
376B                EXPECTM_3095S123:      
376B   E1                     POP   HL   
376C                          ;*Macro unroll:  test "1 10 20 \\ab{/t{%a}{%b} ??}^ +", 11
376C   31 00 4B               LD   SP,STACK   
376F   CD E9 0E               CALL   coldInit   
3772   CD 50 49               CALL   execStr   
3775   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/t{%a}{%b} ??}^ +",0   
3793   E1                     POP   HL   
3794   E5                     PUSH   HL   
3795   11 0B 00               LD   DE,11   
3798   B7                     OR   A   
3799   ED 52                  SBC   HL,DE   
379B   7D                     LD   A,L   
379C   B4                     OR   H   
379D   CA 0F 38               JP   Z,expectM_3096S124   
37A0   CD B5 0E               CALL   printStr   
37A3   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/t{%a}{%b} ??}^ +"   
37C7   CD B5 0E               CALL   printStr   
37CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37D9   21 0B 00               LD   hl,11   
37DC   E5                     PUSH   hl   
37DD   E5                     PUSH   hl   
37DE   CD B7 0F               CALL   run   
37E1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
37E9   CD B5 0E               CALL   printStr   
37EC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37F9   E1                     POP   hl   
37FA   E5                     PUSH   hl   
37FB   E5                     PUSH   hl   
37FC   CD B7 0F               CALL   run   
37FF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
380E   76                     HALT      
380F                EXPECTM_3096S124:      
380F   E1                     POP   HL   
3810                          ;*Macro unroll:  test "1 10 20 \\ab{/f{%a}{%b} ??}^ +", 21
3810   31 00 4B               LD   SP,STACK   
3813   CD E9 0E               CALL   coldInit   
3816   CD 50 49               CALL   execStr   
3819   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/f{%a}{%b} ??}^ +",0   
3837   E1                     POP   HL   
3838   E5                     PUSH   HL   
3839   11 15 00               LD   DE,21   
383C   B7                     OR   A   
383D   ED 52                  SBC   HL,DE   
383F   7D                     LD   A,L   
3840   B4                     OR   H   
3841   CA B3 38               JP   Z,expectM_3097S125   
3844   CD B5 0E               CALL   printStr   
3847   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/f{%a}{%b} ??}^ +"   
386B   CD B5 0E               CALL   printStr   
386E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
387D   21 15 00               LD   hl,21   
3880   E5                     PUSH   hl   
3881   E5                     PUSH   hl   
3882   CD B7 0F               CALL   run   
3885   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
388D   CD B5 0E               CALL   printStr   
3890   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
389D   E1                     POP   hl   
389E   E5                     PUSH   hl   
389F   E5                     PUSH   hl   
38A0   CD B7 0F               CALL   run   
38A3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
38B2   76                     HALT      
38B3                EXPECTM_3097S125:      
38B3   E1                     POP   HL   
38B4                          ;*Macro unroll:  test "[10 20 30] 1#", 20
38B4   31 00 4B               LD   SP,STACK   
38B7   CD E9 0E               CALL   coldInit   
38BA   CD 50 49               CALL   execStr   
38BD   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
38CB   E1                     POP   HL   
38CC   E5                     PUSH   HL   
38CD   11 14 00               LD   DE,20   
38D0   B7                     OR   A   
38D1   ED 52                  SBC   HL,DE   
38D3   7D                     LD   A,L   
38D4   B4                     OR   H   
38D5   CA 37 39               JP   Z,expectM_3098S126   
38D8   CD B5 0E               CALL   printStr   
38DB   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
38EF   CD B5 0E               CALL   printStr   
38F2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3901   21 14 00               LD   hl,20   
3904   E5                     PUSH   hl   
3905   E5                     PUSH   hl   
3906   CD B7 0F               CALL   run   
3909   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3911   CD B5 0E               CALL   printStr   
3914   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3921   E1                     POP   hl   
3922   E5                     PUSH   hl   
3923   E5                     PUSH   hl   
3924   CD B7 0F               CALL   run   
3927   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3936   76                     HALT      
3937                EXPECTM_3098S126:      
3937   E1                     POP   HL   
3938                          ;*Macro unroll:  test "[10 20 30 40] /al", 4
3938   31 00 4B               LD   SP,STACK   
393B   CD E9 0E               CALL   coldInit   
393E   CD 50 49               CALL   execStr   
3941   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 00 DB   "[10 20 30 40] /al",0   
3953   E1                     POP   HL   
3954   E5                     PUSH   HL   
3955   11 04 00               LD   DE,4   
3958   B7                     OR   A   
3959   ED 52                  SBC   HL,DE   
395B   7D                     LD   A,L   
395C   B4                     OR   H   
395D   CA C3 39               JP   Z,expectM_3099S127   
3960   CD B5 0E               CALL   printStr   
3963   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 00 .CSTR   "Code: ","[10 20 30 40] /al"   
397B   CD B5 0E               CALL   printStr   
397E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
398D   21 04 00               LD   hl,4   
3990   E5                     PUSH   hl   
3991   E5                     PUSH   hl   
3992   CD B7 0F               CALL   run   
3995   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
399D   CD B5 0E               CALL   printStr   
39A0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39AD   E1                     POP   hl   
39AE   E5                     PUSH   hl   
39AF   E5                     PUSH   hl   
39B0   CD B7 0F               CALL   run   
39B3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
39C2   76                     HALT      
39C3                EXPECTM_3099S127:      
39C3   E1                     POP   HL   
39C4                          ;*Macro unroll:  test "/bm [1 2 3] 1#", 2
39C4   31 00 4B               LD   SP,STACK   
39C7   CD E9 0E               CALL   coldInit   
39CA   CD 50 49               CALL   execStr   
39CD   2F 62 6D 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/bm [1 2 3] 1#",0   
39DC   E1                     POP   HL   
39DD   E5                     PUSH   HL   
39DE   11 02 00               LD   DE,2   
39E1   B7                     OR   A   
39E2   ED 52                  SBC   HL,DE   
39E4   7D                     LD   A,L   
39E5   B4                     OR   H   
39E6   CA 49 3A               JP   Z,expectM_3100S128   
39E9   CD B5 0E               CALL   printStr   
39EC   43 6F 64 65 3A 20 2F 62 6D 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/bm [1 2 3] 1#"   
3A01   CD B5 0E               CALL   printStr   
3A04   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A13   21 02 00               LD   hl,2   
3A16   E5                     PUSH   hl   
3A17   E5                     PUSH   hl   
3A18   CD B7 0F               CALL   run   
3A1B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A23   CD B5 0E               CALL   printStr   
3A26   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A33   E1                     POP   hl   
3A34   E5                     PUSH   hl   
3A35   E5                     PUSH   hl   
3A36   CD B7 0F               CALL   run   
3A39   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A48   76                     HALT      
3A49                EXPECTM_3100S128:      
3A49   E1                     POP   HL   
3A4A                          ;*Macro unroll:  test "/bm [~A ~B ~C] 1#", 66
3A4A   31 00 4B               LD   SP,STACK   
3A4D   CD E9 0E               CALL   coldInit   
3A50   CD 50 49               CALL   execStr   
3A53   2F 62 6D 20 5B 7E 41 20 7E 42 20 7E 43 5D 20 31 23 00 DB   "/bm [~A ~B ~C] 1#",0   
3A65   E1                     POP   HL   
3A66   E5                     PUSH   HL   
3A67   11 42 00               LD   DE,66   
3A6A   B7                     OR   A   
3A6B   ED 52                  SBC   HL,DE   
3A6D   7D                     LD   A,L   
3A6E   B4                     OR   H   
3A6F   CA D5 3A               JP   Z,expectM_3101S129   
3A72   CD B5 0E               CALL   printStr   
3A75   43 6F 64 65 3A 20 2F 62 6D 20 5B 7E 41 20 7E 42 20 7E 43 5D 20 31 23 00 .CSTR   "Code: ","/bm [~A ~B ~C] 1#"   
3A8D   CD B5 0E               CALL   printStr   
3A90   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A9F   21 42 00               LD   hl,66   
3AA2   E5                     PUSH   hl   
3AA3   E5                     PUSH   hl   
3AA4   CD B7 0F               CALL   run   
3AA7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3AAF   CD B5 0E               CALL   printStr   
3AB2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3ABF   E1                     POP   hl   
3AC0   E5                     PUSH   hl   
3AC1   E5                     PUSH   hl   
3AC2   CD B7 0F               CALL   run   
3AC5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3AD4   76                     HALT      
3AD5                EXPECTM_3101S129:      
3AD5   E1                     POP   HL   
3AD6                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3AD6   31 00 4B               LD   SP,STACK   
3AD9   CD E9 0E               CALL   coldInit   
3ADC   CD 50 49               CALL   execStr   
3ADF   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
3AF3   E1                     POP   HL   
3AF4   E5                     PUSH   HL   
3AF5   11 0A 00               LD   DE,10   
3AF8   B7                     OR   A   
3AF9   ED 52                  SBC   HL,DE   
3AFB   7D                     LD   A,L   
3AFC   B4                     OR   H   
3AFD   CA 65 3B               JP   Z,expectM_3102S130   
3B00   CD B5 0E               CALL   printStr   
3B03   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
3B1D   CD B5 0E               CALL   printStr   
3B20   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B2F   21 0A 00               LD   hl,10   
3B32   E5                     PUSH   hl   
3B33   E5                     PUSH   hl   
3B34   CD B7 0F               CALL   run   
3B37   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B3F   CD B5 0E               CALL   printStr   
3B42   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B4F   E1                     POP   hl   
3B50   E5                     PUSH   hl   
3B51   E5                     PUSH   hl   
3B52   CD B7 0F               CALL   run   
3B55   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B64   76                     HALT      
3B65                EXPECTM_3102S130:      
3B65   E1                     POP   HL   
3B66                          ;*Macro unroll:  test "10 20 \\ab{[{%a}{%b}] 0#^}^", 10
3B66   31 00 4B               LD   SP,STACK   
3B69   CD E9 0E               CALL   coldInit   
3B6C   CD 50 49               CALL   execStr   
3B6F   31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 DB   "10 20 \\ab{[{%a}{%b}] 0#^}^",0   
3B8A   E1                     POP   HL   
3B8B   E5                     PUSH   HL   
3B8C   11 0A 00               LD   DE,10   
3B8F   B7                     OR   A   
3B90   ED 52                  SBC   HL,DE   
3B92   7D                     LD   A,L   
3B93   B4                     OR   H   
3B94   CA 03 3C               JP   Z,expectM_3103S131   
3B97   CD B5 0E               CALL   printStr   
3B9A   43 6F 64 65 3A 20 31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 .CSTR   "Code: ","10 20 \\ab{[{%a}{%b}] 0#^}^"   
3BBB   CD B5 0E               CALL   printStr   
3BBE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BCD   21 0A 00               LD   hl,10   
3BD0   E5                     PUSH   hl   
3BD1   E5                     PUSH   hl   
3BD2   CD B7 0F               CALL   run   
3BD5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3BDD   CD B5 0E               CALL   printStr   
3BE0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BED   E1                     POP   hl   
3BEE   E5                     PUSH   hl   
3BEF   E5                     PUSH   hl   
3BF0   CD B7 0F               CALL   run   
3BF3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C02   76                     HALT      
3C03                EXPECTM_3103S131:      
3C03   E1                     POP   HL   
3C04                          ;*Macro unroll:  test "0 10 20 \\iab{[{%a}{%b}] %i#^}^", 10
3C04   31 00 4B               LD   SP,STACK   
3C07   CD E9 0E               CALL   coldInit   
3C0A   CD 50 49               CALL   execStr   
3C0D   30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "0 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
3C2C   E1                     POP   HL   
3C2D   E5                     PUSH   HL   
3C2E   11 0A 00               LD   DE,10   
3C31   B7                     OR   A   
3C32   ED 52                  SBC   HL,DE   
3C34   7D                     LD   A,L   
3C35   B4                     OR   H   
3C36   CA A9 3C               JP   Z,expectM_3104S132   
3C39   CD B5 0E               CALL   printStr   
3C3C   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 \\iab{[{%a}{%b}] %i#^}^"   
3C61   CD B5 0E               CALL   printStr   
3C64   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C73   21 0A 00               LD   hl,10   
3C76   E5                     PUSH   hl   
3C77   E5                     PUSH   hl   
3C78   CD B7 0F               CALL   run   
3C7B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C83   CD B5 0E               CALL   printStr   
3C86   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C93   E1                     POP   hl   
3C94   E5                     PUSH   hl   
3C95   E5                     PUSH   hl   
3C96   CD B7 0F               CALL   run   
3C99   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3CA8   76                     HALT      
3CA9                EXPECTM_3104S132:      
3CA9   E1                     POP   HL   
3CAA                          ;*Macro unroll:  test "1 10 20 \\iab{[{%a}{%b}] %i#^}^", 20
3CAA   31 00 4B               LD   SP,STACK   
3CAD   CD E9 0E               CALL   coldInit   
3CB0   CD 50 49               CALL   execStr   
3CB3   31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "1 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
3CD2   E1                     POP   HL   
3CD3   E5                     PUSH   HL   
3CD4   11 14 00               LD   DE,20   
3CD7   B7                     OR   A   
3CD8   ED 52                  SBC   HL,DE   
3CDA   7D                     LD   A,L   
3CDB   B4                     OR   H   
3CDC   CA 4F 3D               JP   Z,expectM_3105S133   
3CDF   CD B5 0E               CALL   printStr   
3CE2   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 \\iab{[{%a}{%b}] %i#^}^"   
3D07   CD B5 0E               CALL   printStr   
3D0A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D19   21 14 00               LD   hl,20   
3D1C   E5                     PUSH   hl   
3D1D   E5                     PUSH   hl   
3D1E   CD B7 0F               CALL   run   
3D21   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D29   CD B5 0E               CALL   printStr   
3D2C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D39   E1                     POP   hl   
3D3A   E5                     PUSH   hl   
3D3B   E5                     PUSH   hl   
3D3C   CD B7 0F               CALL   run   
3D3F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D4E   76                     HALT      
3D4F                EXPECTM_3105S133:      
3D4F   E1                     POP   HL   
3D50                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3D50   31 00 4B               LD   SP,STACK   
3D53   CD E9 0E               CALL   coldInit   
3D56   CD 50 49               CALL   execStr   
3D59   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
3D71   E1                     POP   HL   
3D72   E5                     PUSH   HL   
3D73   11 06 00               LD   DE,6   
3D76   B7                     OR   A   
3D77   ED 52                  SBC   HL,DE   
3D79   7D                     LD   A,L   
3D7A   B4                     OR   H   
3D7B   CA E7 3D               JP   Z,expectM_3106S134   
3D7E   CD B5 0E               CALL   printStr   
3D81   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3D9F   CD B5 0E               CALL   printStr   
3DA2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DB1   21 06 00               LD   hl,6   
3DB4   E5                     PUSH   hl   
3DB5   E5                     PUSH   hl   
3DB6   CD B7 0F               CALL   run   
3DB9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3DC1   CD B5 0E               CALL   printStr   
3DC4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DD1   E1                     POP   hl   
3DD2   E5                     PUSH   hl   
3DD3   E5                     PUSH   hl   
3DD4   CD B7 0F               CALL   run   
3DD7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3DE6   76                     HALT      
3DE7                EXPECTM_3106S134:      
3DE7   E1                     POP   HL   
3DE8                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
3DE8   31 00 4B               LD   SP,STACK   
3DEB   CD E9 0E               CALL   coldInit   
3DEE   CD 50 49               CALL   execStr   
3DF1   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
3E0C   E1                     POP   HL   
3E0D   E5                     PUSH   HL   
3E0E   11 02 00               LD   DE,2   
3E11   B7                     OR   A   
3E12   ED 52                  SBC   HL,DE   
3E14   7D                     LD   A,L   
3E15   B4                     OR   H   
3E16   CA 85 3E               JP   Z,expectM_3107S135   
3E19   CD B5 0E               CALL   printStr   
3E1C   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
3E3D   CD B5 0E               CALL   printStr   
3E40   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E4F   21 02 00               LD   hl,2   
3E52   E5                     PUSH   hl   
3E53   E5                     PUSH   hl   
3E54   CD B7 0F               CALL   run   
3E57   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E5F   CD B5 0E               CALL   printStr   
3E62   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E6F   E1                     POP   hl   
3E70   E5                     PUSH   hl   
3E71   E5                     PUSH   hl   
3E72   CD B7 0F               CALL   run   
3E75   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E84   76                     HALT      
3E85                EXPECTM_3107S135:      
3E85   E1                     POP   HL   
3E86                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
3E86   31 00 4B               LD   SP,STACK   
3E89   CD E9 0E               CALL   coldInit   
3E8C   CD 50 49               CALL   execStr   
3E8F   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
3EB5   E1                     POP   HL   
3EB6   E5                     PUSH   HL   
3EB7   11 0A 00               LD   DE,10   
3EBA   B7                     OR   A   
3EBB   ED 52                  SBC   HL,DE   
3EBD   7D                     LD   A,L   
3EBE   B4                     OR   H   
3EBF   CA 39 3F               JP   Z,expectM_3108S136   
3EC2   CD B5 0E               CALL   printStr   
3EC5   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3EF1   CD B5 0E               CALL   printStr   
3EF4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F03   21 0A 00               LD   hl,10   
3F06   E5                     PUSH   hl   
3F07   E5                     PUSH   hl   
3F08   CD B7 0F               CALL   run   
3F0B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F13   CD B5 0E               CALL   printStr   
3F16   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F23   E1                     POP   hl   
3F24   E5                     PUSH   hl   
3F25   E5                     PUSH   hl   
3F26   CD B7 0F               CALL   run   
3F29   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F38   76                     HALT      
3F39                EXPECTM_3108S136:      
3F39   E1                     POP   HL   
3F3A                          ;*Macro unroll:  test "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^", 6
3F3A   31 00 4B               LD   SP,STACK   
3F3D   CD E9 0E               CALL   coldInit   
3F40   CD 50 49               CALL   execStr   
3F43   33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^",0   
3F6E   E1                     POP   HL   
3F6F   E5                     PUSH   HL   
3F70   11 06 00               LD   DE,6   
3F73   B7                     OR   A   
3F74   ED 52                  SBC   HL,DE   
3F76   7D                     LD   A,L   
3F77   B4                     OR   H   
3F78   CA F7 3F               JP   Z,expectM_3109S137   
3F7B   CD B5 0E               CALL   printStr   
3F7E   43 6F 64 65 3A 20 33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^"   
3FAF   CD B5 0E               CALL   printStr   
3FB2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FC1   21 06 00               LD   hl,6   
3FC4   E5                     PUSH   hl   
3FC5   E5                     PUSH   hl   
3FC6   CD B7 0F               CALL   run   
3FC9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3FD1   CD B5 0E               CALL   printStr   
3FD4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FE1   E1                     POP   hl   
3FE2   E5                     PUSH   hl   
3FE3   E5                     PUSH   hl   
3FE4   CD B7 0F               CALL   run   
3FE7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3FF6   76                     HALT      
3FF7                EXPECTM_3109S137:      
3FF7   E1                     POP   HL   
3FF8                          ;*Macro unroll:  test "/t \\f{1 %f/br 2 +}^",3
3FF8   31 00 4B               LD   SP,STACK   
3FFB   CD E9 0E               CALL   coldInit   
3FFE   CD 50 49               CALL   execStr   
4001   2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/t \\f{1 %f/br 2 +}^",0   
4015   E1                     POP   HL   
4016   E5                     PUSH   HL   
4017   11 03 00               LD   DE,3   
401A   B7                     OR   A   
401B   ED 52                  SBC   HL,DE   
401D   7D                     LD   A,L   
401E   B4                     OR   H   
401F   CA 87 40               JP   Z,expectM_3110S138   
4022   CD B5 0E               CALL   printStr   
4025   43 6F 64 65 3A 20 2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/t \\f{1 %f/br 2 +}^"   
403F   CD B5 0E               CALL   printStr   
4042   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4051   21 03 00               LD   hl,3   
4054   E5                     PUSH   hl   
4055   E5                     PUSH   hl   
4056   CD B7 0F               CALL   run   
4059   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4061   CD B5 0E               CALL   printStr   
4064   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4071   E1                     POP   hl   
4072   E5                     PUSH   hl   
4073   E5                     PUSH   hl   
4074   CD B7 0F               CALL   run   
4077   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4086   76                     HALT      
4087                EXPECTM_3110S138:      
4087   E1                     POP   HL   
4088                          ;*Macro unroll:  test "/f \\f{1 %f/br 2 +}^",1
4088   31 00 4B               LD   SP,STACK   
408B   CD E9 0E               CALL   coldInit   
408E   CD 50 49               CALL   execStr   
4091   2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/f \\f{1 %f/br 2 +}^",0   
40A5   E1                     POP   HL   
40A6   E5                     PUSH   HL   
40A7   11 01 00               LD   DE,1   
40AA   B7                     OR   A   
40AB   ED 52                  SBC   HL,DE   
40AD   7D                     LD   A,L   
40AE   B4                     OR   H   
40AF   CA 17 41               JP   Z,expectM_3111S139   
40B2   CD B5 0E               CALL   printStr   
40B5   43 6F 64 65 3A 20 2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/f \\f{1 %f/br 2 +}^"   
40CF   CD B5 0E               CALL   printStr   
40D2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40E1   21 01 00               LD   hl,1   
40E4   E5                     PUSH   hl   
40E5   E5                     PUSH   hl   
40E6   CD B7 0F               CALL   run   
40E9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
40F1   CD B5 0E               CALL   printStr   
40F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4101   E1                     POP   hl   
4102   E5                     PUSH   hl   
4103   E5                     PUSH   hl   
4104   CD B7 0F               CALL   run   
4107   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4116   76                     HALT      
4117                EXPECTM_3111S139:      
4117   E1                     POP   HL   
4118                          ;*Macro unroll:  test "~A 1 - /ad", NUL
4118   31 00 4B               LD   SP,STACK   
411B   CD E9 0E               CALL   coldInit   
411E   CD 50 49               CALL   execStr   
4121   7E 41 20 31 20 2D 20 2F 61 64 00 DB   "~A 1 - /ad",0   
412C   E1                     POP   HL   
412D   E5                     PUSH   HL   
412E   11 00 00               LD   DE,NUL   
4131   B7                     OR   A   
4132   ED 52                  SBC   HL,DE   
4134   7D                     LD   A,L   
4135   B4                     OR   H   
4136   CA 95 41               JP   Z,expectM_3112S140   
4139   CD B5 0E               CALL   printStr   
413C   43 6F 64 65 3A 20 7E 41 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","~A 1 - /ad"   
414D   CD B5 0E               CALL   printStr   
4150   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
415F   21 00 00               LD   hl,NUL   
4162   E5                     PUSH   hl   
4163   E5                     PUSH   hl   
4164   CD B7 0F               CALL   run   
4167   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
416F   CD B5 0E               CALL   printStr   
4172   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
417F   E1                     POP   hl   
4180   E5                     PUSH   hl   
4181   E5                     PUSH   hl   
4182   CD B7 0F               CALL   run   
4185   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4194   76                     HALT      
4195                EXPECTM_3112S140:      
4195   E1                     POP   HL   
4196                          ;*Macro unroll:  test "~Z 1 + /ad", NUL
4196   31 00 4B               LD   SP,STACK   
4199   CD E9 0E               CALL   coldInit   
419C   CD 50 49               CALL   execStr   
419F   7E 5A 20 31 20 2B 20 2F 61 64 00 DB   "~Z 1 + /ad",0   
41AA   E1                     POP   HL   
41AB   E5                     PUSH   HL   
41AC   11 00 00               LD   DE,NUL   
41AF   B7                     OR   A   
41B0   ED 52                  SBC   HL,DE   
41B2   7D                     LD   A,L   
41B3   B4                     OR   H   
41B4   CA 13 42               JP   Z,expectM_3113S141   
41B7   CD B5 0E               CALL   printStr   
41BA   43 6F 64 65 3A 20 7E 5A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","~Z 1 + /ad"   
41CB   CD B5 0E               CALL   printStr   
41CE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41DD   21 00 00               LD   hl,NUL   
41E0   E5                     PUSH   hl   
41E1   E5                     PUSH   hl   
41E2   CD B7 0F               CALL   run   
41E5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
41ED   CD B5 0E               CALL   printStr   
41F0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41FD   E1                     POP   hl   
41FE   E5                     PUSH   hl   
41FF   E5                     PUSH   hl   
4200   CD B7 0F               CALL   run   
4203   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4212   76                     HALT      
4213                EXPECTM_3113S141:      
4213   E1                     POP   HL   
4214                          ;*Macro unroll:  test "~a 1 - /ad", NUL
4214   31 00 4B               LD   SP,STACK   
4217   CD E9 0E               CALL   coldInit   
421A   CD 50 49               CALL   execStr   
421D   7E 61 20 31 20 2D 20 2F 61 64 00 DB   "~a 1 - /ad",0   
4228   E1                     POP   HL   
4229   E5                     PUSH   HL   
422A   11 00 00               LD   DE,NUL   
422D   B7                     OR   A   
422E   ED 52                  SBC   HL,DE   
4230   7D                     LD   A,L   
4231   B4                     OR   H   
4232   CA 91 42               JP   Z,expectM_3114S142   
4235   CD B5 0E               CALL   printStr   
4238   43 6F 64 65 3A 20 7E 61 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","~a 1 - /ad"   
4249   CD B5 0E               CALL   printStr   
424C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
425B   21 00 00               LD   hl,NUL   
425E   E5                     PUSH   hl   
425F   E5                     PUSH   hl   
4260   CD B7 0F               CALL   run   
4263   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
426B   CD B5 0E               CALL   printStr   
426E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
427B   E1                     POP   hl   
427C   E5                     PUSH   hl   
427D   E5                     PUSH   hl   
427E   CD B7 0F               CALL   run   
4281   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4290   76                     HALT      
4291                EXPECTM_3114S142:      
4291   E1                     POP   HL   
4292                          ;*Macro unroll:  test "~z 1 + /ad", NUL
4292   31 00 4B               LD   SP,STACK   
4295   CD E9 0E               CALL   coldInit   
4298   CD 50 49               CALL   execStr   
429B   7E 7A 20 31 20 2B 20 2F 61 64 00 DB   "~z 1 + /ad",0   
42A6   E1                     POP   HL   
42A7   E5                     PUSH   HL   
42A8   11 00 00               LD   DE,NUL   
42AB   B7                     OR   A   
42AC   ED 52                  SBC   HL,DE   
42AE   7D                     LD   A,L   
42AF   B4                     OR   H   
42B0   CA 0F 43               JP   Z,expectM_3115S143   
42B3   CD B5 0E               CALL   printStr   
42B6   43 6F 64 65 3A 20 7E 7A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","~z 1 + /ad"   
42C7   CD B5 0E               CALL   printStr   
42CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42D9   21 00 00               LD   hl,NUL   
42DC   E5                     PUSH   hl   
42DD   E5                     PUSH   hl   
42DE   CD B7 0F               CALL   run   
42E1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
42E9   CD B5 0E               CALL   printStr   
42EC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42F9   E1                     POP   hl   
42FA   E5                     PUSH   hl   
42FB   E5                     PUSH   hl   
42FC   CD B7 0F               CALL   run   
42FF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
430E   76                     HALT      
430F                EXPECTM_3115S143:      
430F   E1                     POP   HL   
4310                          ;*Macro unroll:  test "~z /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
4310   31 00 4B               LD   SP,STACK   
4313   CD E9 0E               CALL   coldInit   
4316   CD 50 49               CALL   execStr   
4319   7E 7A 20 2F 61 64 00   DB   "~z /ad",0   
4320   E1                     POP   HL   
4321   E5                     PUSH   HL   
4322   11 66 4D               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4325   B7                     OR   A   
4326   ED 52                  SBC   HL,DE   
4328   7D                     LD   A,L   
4329   B4                     OR   H   
432A   CA 85 43               JP   Z,expectM_3116S144   
432D   CD B5 0E               CALL   printStr   
4330   43 6F 64 65 3A 20 7E 7A 20 2F 61 64 00 .CSTR   "Code: ","~z /ad"   
433D   CD B5 0E               CALL   printStr   
4340   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
434F   21 66 4D               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4352   E5                     PUSH   hl   
4353   E5                     PUSH   hl   
4354   CD B7 0F               CALL   run   
4357   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
435F   CD B5 0E               CALL   printStr   
4362   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
436F   E1                     POP   hl   
4370   E5                     PUSH   hl   
4371   E5                     PUSH   hl   
4372   CD B7 0F               CALL   run   
4375   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4384   76                     HALT      
4385                EXPECTM_3116S144:      
4385   E1                     POP   HL   
4386                          ;*Macro unroll:  test "~a /ad", VARS + ("Z"-"A"+1)*2
4386   31 00 4B               LD   SP,STACK   
4389   CD E9 0E               CALL   coldInit   
438C   CD 50 49               CALL   execStr   
438F   7E 61 20 2F 61 64 00   DB   "~a /ad",0   
4396   E1                     POP   HL   
4397   E5                     PUSH   HL   
4398   11 34 4D               LD   DE,VARS + ("Z"-"A"+1)*2   
439B   B7                     OR   A   
439C   ED 52                  SBC   HL,DE   
439E   7D                     LD   A,L   
439F   B4                     OR   H   
43A0   CA FB 43               JP   Z,expectM_3117S145   
43A3   CD B5 0E               CALL   printStr   
43A6   43 6F 64 65 3A 20 7E 61 20 2F 61 64 00 .CSTR   "Code: ","~a /ad"   
43B3   CD B5 0E               CALL   printStr   
43B6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43C5   21 34 4D               LD   hl,VARS + ("Z"-"A"+1)*2   
43C8   E5                     PUSH   hl   
43C9   E5                     PUSH   hl   
43CA   CD B7 0F               CALL   run   
43CD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
43D5   CD B5 0E               CALL   printStr   
43D8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43E5   E1                     POP   hl   
43E6   E5                     PUSH   hl   
43E7   E5                     PUSH   hl   
43E8   CD B7 0F               CALL   run   
43EB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
43FA   76                     HALT      
43FB                EXPECTM_3117S145:      
43FB   E1                     POP   HL   
43FC                          ;*Macro unroll:  test "~Z /ad", VARS + ("Z"-"A")*2
43FC   31 00 4B               LD   SP,STACK   
43FF   CD E9 0E               CALL   coldInit   
4402   CD 50 49               CALL   execStr   
4405   7E 5A 20 2F 61 64 00   DB   "~Z /ad",0   
440C   E1                     POP   HL   
440D   E5                     PUSH   HL   
440E   11 32 4D               LD   DE,VARS + ("Z"-"A")*2   
4411   B7                     OR   A   
4412   ED 52                  SBC   HL,DE   
4414   7D                     LD   A,L   
4415   B4                     OR   H   
4416   CA 71 44               JP   Z,expectM_3118S146   
4419   CD B5 0E               CALL   printStr   
441C   43 6F 64 65 3A 20 7E 5A 20 2F 61 64 00 .CSTR   "Code: ","~Z /ad"   
4429   CD B5 0E               CALL   printStr   
442C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
443B   21 32 4D               LD   hl,VARS + ("Z"-"A")*2   
443E   E5                     PUSH   hl   
443F   E5                     PUSH   hl   
4440   CD B7 0F               CALL   run   
4443   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
444B   CD B5 0E               CALL   printStr   
444E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
445B   E1                     POP   hl   
445C   E5                     PUSH   hl   
445D   E5                     PUSH   hl   
445E   CD B7 0F               CALL   run   
4461   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4470   76                     HALT      
4471                EXPECTM_3118S146:      
4471   E1                     POP   HL   
4472                          ;*Macro unroll:  test "~A /ad", VARS
4472   31 00 4B               LD   SP,STACK   
4475   CD E9 0E               CALL   coldInit   
4478   CD 50 49               CALL   execStr   
447B   7E 41 20 2F 61 64 00   DB   "~A /ad",0   
4482   E1                     POP   HL   
4483   E5                     PUSH   HL   
4484   11 00 4D               LD   DE,VARS   
4487   B7                     OR   A   
4488   ED 52                  SBC   HL,DE   
448A   7D                     LD   A,L   
448B   B4                     OR   H   
448C   CA E7 44               JP   Z,expectM_3119S147   
448F   CD B5 0E               CALL   printStr   
4492   43 6F 64 65 3A 20 7E 41 20 2F 61 64 00 .CSTR   "Code: ","~A /ad"   
449F   CD B5 0E               CALL   printStr   
44A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44B1   21 00 4D               LD   hl,VARS   
44B4   E5                     PUSH   hl   
44B5   E5                     PUSH   hl   
44B6   CD B7 0F               CALL   run   
44B9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
44C1   CD B5 0E               CALL   printStr   
44C4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44D1   E1                     POP   hl   
44D2   E5                     PUSH   hl   
44D3   E5                     PUSH   hl   
44D4   CD B7 0F               CALL   run   
44D7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
44E6   76                     HALT      
44E7                EXPECTM_3119S147:      
44E7   E1                     POP   HL   
44E8                          ;*Macro unroll:  test "\\a{%a} F=1F^", 1
44E8   31 00 4B               LD   SP,STACK   
44EB   CD E9 0E               CALL   coldInit   
44EE   CD 50 49               CALL   execStr   
44F1   5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   "\\a{%a} F=1F^",0   
44FE   E1                     POP   HL   
44FF   E5                     PUSH   HL   
4500   11 01 00               LD   DE,1   
4503   B7                     OR   A   
4504   ED 52                  SBC   HL,DE   
4506   7D                     LD   A,L   
4507   B4                     OR   H   
4508   CA 69 45               JP   Z,expectM_3120S148   
450B   CD B5 0E               CALL   printStr   
450E   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ","\\a{%a} F=1F^"   
4521   CD B5 0E               CALL   printStr   
4524   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4533   21 01 00               LD   hl,1   
4536   E5                     PUSH   hl   
4537   E5                     PUSH   hl   
4538   CD B7 0F               CALL   run   
453B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4543   CD B5 0E               CALL   printStr   
4546   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4553   E1                     POP   hl   
4554   E5                     PUSH   hl   
4555   E5                     PUSH   hl   
4556   CD B7 0F               CALL   run   
4559   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4568   76                     HALT      
4569                EXPECTM_3120S148:      
4569   E1                     POP   HL   
456A                          ;*Macro unroll:  test "1 \\b{\\a{%a}}^F= 3F^",3
456A   31 00 4B               LD   SP,STACK   
456D   CD E9 0E               CALL   coldInit   
4570   CD 50 49               CALL   execStr   
4573   31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a}}^F= 3F^",0   
4587   E1                     POP   HL   
4588   E5                     PUSH   HL   
4589   11 03 00               LD   DE,3   
458C   B7                     OR   A   
458D   ED 52                  SBC   HL,DE   
458F   7D                     LD   A,L   
4590   B4                     OR   H   
4591   CA F9 45               JP   Z,expectM_3121S149   
4594   CD B5 0E               CALL   printStr   
4597   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a}}^F= 3F^"   
45B1   CD B5 0E               CALL   printStr   
45B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45C3   21 03 00               LD   hl,3   
45C6   E5                     PUSH   hl   
45C7   E5                     PUSH   hl   
45C8   CD B7 0F               CALL   run   
45CB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
45D3   CD B5 0E               CALL   printStr   
45D6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45E3   E1                     POP   hl   
45E4   E5                     PUSH   hl   
45E5   E5                     PUSH   hl   
45E6   CD B7 0F               CALL   run   
45E9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
45F8   76                     HALT      
45F9                EXPECTM_3121S149:      
45F9   E1                     POP   HL   
45FA                          ;*Macro unroll:  test "1 \\b{\\a{%a%b-}}^F= 3F^",2
45FA   31 00 4B               LD   SP,STACK   
45FD   CD E9 0E               CALL   coldInit   
4600   CD 50 49               CALL   execStr   
4603   31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a%b-}}^F= 3F^",0   
461A   E1                     POP   HL   
461B   E5                     PUSH   HL   
461C   11 02 00               LD   DE,2   
461F   B7                     OR   A   
4620   ED 52                  SBC   HL,DE   
4622   7D                     LD   A,L   
4623   B4                     OR   H   
4624   CA 8F 46               JP   Z,expectM_3122S150   
4627   CD B5 0E               CALL   printStr   
462A   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a%b-}}^F= 3F^"   
4647   CD B5 0E               CALL   printStr   
464A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4659   21 02 00               LD   hl,2   
465C   E5                     PUSH   hl   
465D   E5                     PUSH   hl   
465E   CD B7 0F               CALL   run   
4661   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4669   CD B5 0E               CALL   printStr   
466C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4679   E1                     POP   hl   
467A   E5                     PUSH   hl   
467B   E5                     PUSH   hl   
467C   CD B7 0F               CALL   run   
467F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
468E   76                     HALT      
468F                EXPECTM_3122S150:      
468F   E1                     POP   HL   
4690                          ;*Macro unroll:  test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
4690   31 00 4B               LD   SP,STACK   
4693   CD E9 0E               CALL   coldInit   
4696   CD 50 49               CALL   execStr   
4699   31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
46BC   E1                     POP   HL   
46BD   E5                     PUSH   HL   
46BE   11 01 00               LD   DE,1   
46C1   B7                     OR   A   
46C2   ED 52                  SBC   HL,DE   
46C4   7D                     LD   A,L   
46C5   B4                     OR   H   
46C6   CA 3D 47               JP   Z,expectM_3123S151   
46C9   CD B5 0E               CALL   printStr   
46CC   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^"   
46F5   CD B5 0E               CALL   printStr   
46F8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4707   21 01 00               LD   hl,1   
470A   E5                     PUSH   hl   
470B   E5                     PUSH   hl   
470C   CD B7 0F               CALL   run   
470F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4717   CD B5 0E               CALL   printStr   
471A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4727   E1                     POP   hl   
4728   E5                     PUSH   hl   
4729   E5                     PUSH   hl   
472A   CD B7 0F               CALL   run   
472D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
473C   76                     HALT      
473D                EXPECTM_3123S151:      
473D   E1                     POP   HL   
473E                          ;*Macro unroll:  test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
473E   31 00 4B               LD   SP,STACK   
4741   CD E9 0E               CALL   coldInit   
4744   CD 50 49               CALL   execStr   
4747   31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",0   
476A   E1                     POP   HL   
476B   E5                     PUSH   HL   
476C   11 01 00               LD   DE,1   
476F   B7                     OR   A   
4770   ED 52                  SBC   HL,DE   
4772   7D                     LD   A,L   
4773   B4                     OR   H   
4774   CA EB 47               JP   Z,expectM_3124S152   
4777   CD B5 0E               CALL   printStr   
477A   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^"   
47A3   CD B5 0E               CALL   printStr   
47A6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47B5   21 01 00               LD   hl,1   
47B8   E5                     PUSH   hl   
47B9   E5                     PUSH   hl   
47BA   CD B7 0F               CALL   run   
47BD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
47C5   CD B5 0E               CALL   printStr   
47C8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47D5   E1                     POP   hl   
47D6   E5                     PUSH   hl   
47D7   E5                     PUSH   hl   
47D8   CD B7 0F               CALL   run   
47DB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
47EA   76                     HALT      
47EB                EXPECTM_3124S152:      
47EB   E1                     POP   HL   
47EC                          ;*Macro unroll:  test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
47EC   31 00 4B               LD   SP,STACK   
47EF   CD E9 0E               CALL   coldInit   
47F2   CD 50 49               CALL   execStr   
47F5   31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
4825   E1                     POP   HL   
4826   E5                     PUSH   HL   
4827   11 02 00               LD   DE,2   
482A   B7                     OR   A   
482B   ED 52                  SBC   HL,DE   
482D   7D                     LD   A,L   
482E   B4                     OR   H   
482F   CA B3 48               JP   Z,expectM_3125S153   
4832   CD B5 0E               CALL   printStr   
4835   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
486B   CD B5 0E               CALL   printStr   
486E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
487D   21 02 00               LD   hl,2   
4880   E5                     PUSH   hl   
4881   E5                     PUSH   hl   
4882   CD B7 0F               CALL   run   
4885   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
488D   CD B5 0E               CALL   printStr   
4890   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
489D   E1                     POP   hl   
489E   E5                     PUSH   hl   
489F   E5                     PUSH   hl   
48A0   CD B7 0F               CALL   run   
48A3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
48B2   76                     HALT      
48B3                EXPECTM_3125S153:      
48B3   E1                     POP   HL   
48B4                          ;*Macro unroll:  test "F := \\a{%a 1+} ; 1F^", 2
48B4   31 00 4B               LD   SP,STACK   
48B7   CD E9 0E               CALL   coldInit   
48BA   CD 50 49               CALL   execStr   
48BD   46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 DB   "F := \\a{%a 1+} ; 1F^",0   
48D2   E1                     POP   HL   
48D3   E5                     PUSH   HL   
48D4   11 02 00               LD   DE,2   
48D7   B7                     OR   A   
48D8   ED 52                  SBC   HL,DE   
48DA   7D                     LD   A,L   
48DB   B4                     OR   H   
48DC   CA 45 49               JP   Z,expectM_3126S154   
48DF   CD B5 0E               CALL   printStr   
48E2   43 6F 64 65 3A 20 46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 .CSTR   "Code: ","F := \\a{%a 1+} ; 1F^"   
48FD   CD B5 0E               CALL   printStr   
4900   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
490F   21 02 00               LD   hl,2   
4912   E5                     PUSH   hl   
4913   E5                     PUSH   hl   
4914   CD B7 0F               CALL   run   
4917   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
491F   CD B5 0E               CALL   printStr   
4922   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
492F   E1                     POP   hl   
4930   E5                     PUSH   hl   
4931   E5                     PUSH   hl   
4932   CD B7 0F               CALL   run   
4935   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4944   76                     HALT      
4945                EXPECTM_3126S154:      
4945   E1                     POP   HL   
4946                             ; ; test "$1000 0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", $1000
4946                             ; 
4946   CD B5 0E               CALL   printStr   
4949   44 6F 6E 65 21 00      .CSTR   "Done!"   
494F   76                     HALT      
4950                             ; executes a null teminated string (null executes exit_)
4950                             ; the string should be immedaitely following the call
4950                EXECSTR:      ; create a root stack frame
4950   C1                     POP   bc   ; bc = code*
4951   0B                     DEC   bc   ; dec to prepare for next routine
4952   11 00 00               LD   de,0   
4955   D5                     PUSH   de   ; push fake IP
4956   D5                     PUSH   de   ; push null arg_list*
4957   D5                     PUSH   de   ; push null first_arg*
4958   D5                     PUSH   de   ; push fake BP
4959   DD E9                  JP   (ix)   
495B                STKSIZE:   EQU   $100   ; Stack size
495B                TIBSIZE:   EQU   $100   ; 256 bytes
495B                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
495B                          ALIGN   $100   
4A00                          DS   STKSIZE   
4B00                STACK:       
4B00                          ALIGN   $100   
4B00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
4C00                          ALIGN   $100   
4C00                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
4D00                          ALIGN   $100   
4D00                VARS:        
4D00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
4DD0                RESTARTS:      
4DD0                RST08:    DS   2   
4DD2                RST10:    DS   2   
4DD4                RST18:    DS   2   
4DD6                RST20:    DS   2   
4DD8                RST28:    DS   2   
4DDA                RST30:    DS   2   ; 
4DDC                BAUD:     DS   2   ; 
4DDE                INTVEC:   DS   2   ; 
4DE0                NMIVEC:   DS   2   ; 
4DE2                GETCVEC:   DS   2   ; 
4DE4                PUTCVEC:   DS   2   ; 
4DE6                SYSVARS:      
4DE6                             ; initialised sys variables (preserved)
4DE6                VDATAWIDTH:   DS   2   ; 
4DE8                VNUMBASE:   DS   2   ; 
4DEA                VTIBPTR:   DS   2   ; 
4DEC                VBUFPTR:   DS   2   ; 
4DEE                VNEXT:    DS   2   ; 
4DF0                VHEAPPTR:   DS   2   ; 
4DF2                VRECUR:   DS   2   ; 
4DF4                VDEFINE:   DS   2   ; 
4DF6                VSTRMODE:   DS   2   ; 
4DF8                             ; uninitialised sys variables (preserved)
4DF8                VPOINTER:   DS   2   ; 
4DFA                VREMAIN:   DS   2   ; 
4DFC                VSAVEDIP:   DS   2   ; 
4DFE                VSAVEDSP:   DS   2   ; 
4E00                VSAVEDNEXT:   DS   2   ; 
4E02                VSAVEDBP:   DS   2   ; 
4E04                             ; uninitialised sys variables (unpreserved)
4E04                VTEMP1:   DS   2   ; 
4E06                VTEMP2:   DS   2   ; 
4E08                VTEMP3:   DS   2   ; 
4E0A                VLASTDEF:   DS   2   ; 
4E0C                TBPTR:    DS   2   ; reserved for tests
4E0E                TITLEBUF:   DS   20   
4E22                HEAP:        
4E22                             ; FUNC rangeSrc, 1, "besL"            ; range source (begin end step)
4E22                             ; db "{"
4E22                             ; db    "[%b /t] %L="                 ; init mutable L [index active]
4E22                             ; db    "\\kt{"
4E22                             ; db      "0%t!=/qt"                  ; break if type != 0
4E22                             ; db      "\\dt:a{"                   ; return talkback to receive data
4E22                             ; db        "%L1#!/qt"                ; if not active don't send
4E22                             ; db        "%L0# %a="                ; store current index in A
4E22                             ; db        "%s %L0# +="              ; inc value of index by step
4E22                             ; db        "1%t!=/qt"                ; break if type != 0
4E22                             ; db        "%a %e <"                 ; ifte: in range?
4E22                             ; db          "{%a 1}{/f %L1#= 0 2}"  ; ifte: 1: send index, 2: active = false, send quit
4E22                             ; db          "?? %k/rc"              ; ifte: call sink note: /rc recur
4E22                             ; db      "} 0 %k^"                   ; init sink
4E22                             ; db    "}"
4E22                             ; db "}"
4E22                             ; db 0
4E22                             ; FUNC map, 0, "sf"                   ; map
4E22                             ; db "{"
4E22                             ; db    "\\kt{"
4E22                             ; db      "0%t!=/qt"                  ; break if type != 0
4E22                             ; db      "\\dt{"                     ; call source with tb
4E22                             ; db        "1%t=="                   ; ifte: type == 1 ?
4E22                             ; db        "{%d %f^}{%d}"            ; ifte: func(data) or data
4E22                             ; db        "?? %t %k^"               ; ifte: send to sink
4E22                             ; db      "} 0 %s^"
4E22                             ; db    "}"
4E22                             ; db "}"
4E22                             ; db 0
4E22                             ; ; /ft filter
4E22                             ; ; src pred -- src1
4E22                             ; FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
4E22                             ; db "{"
4E22                             ; db    "[0]%T="
4E22                             ; db    "\\kt{"                       ; return talkback to receive data
4E22                             ; db      "\\dt{"                     ; call source with tb
4E22                             ; db        "["
4E22                             ; db          "{%d %T0#= /t}"         ; case 0: store talkback in T[0], return true
4E22                             ; db          "{%d %p^}"              ; case 1: return boolean based on predicate
4E22                             ; db          "{/t}"                  ; case 2: return true
4E22                             ; db        "]%t#^"                   ; select on %t
4E22                             ; db        "{%d %t %k^}{0 1 %T0#^}"  ; ifte: true send d to sink, false send 1 to talkback
4E22                             ; db        "??"
4E22                             ; db      "} 0 %s^"
4E22                             ; db    "}"
4E22                             ; db "}"
4E22                             ; db 0
4E22                             ; FUNC forEach, 1, "spT"
4E22                             ; db "{"
4E22                             ; db    "[0]%T="
4E22                             ; db    "\\dt{"                       ; return talkback to receive data ; $56AA
4E22                             ; db      "2%t==/qt"                    ; if type == 2 skip
4E22                             ; db      "0%t=="                   ; ifte: type = 0 ?
4E22                             ; db      "{%d %T0#=}{%d %p^}"      ; ifte: 0: store talkback, 1: send data
4E22                             ; db      "??"                      ; ifte:
4E22                             ; db      "0 1 %T0#^"               ; 0 or 1: get next src data item
4E22                             ; db    "} 0 %s^"
4E22                             ; db "}"
4E22                             ; db 0
4E22                             ; FUNC fold, 1, "sirA"                       ; src, init, reducer
4E22                             ; db "{"                                  ; reducer: \\da00bbLi4u
4E22                             ; db    "[%i]%A="
4E22                             ; db    "\\kt{"                         ; return talkback to receive data
4E22                             ; db      "\\dt{"                         ; call source with tb
4E22                             ; db        "1%t=="                       ; ifte: type == 1 ?
4E22                             ; db        "{ %d %A0# %r^ %A0#= %A0#}{%d}"      ; ifte: reduce -> acc, acc or data
4E22                             ; db        "?? %t %k^"                    ; ifte: send to sink
4E22                             ; db      "} 0 %s^"
4E22                             ; db    "}"
4E22                             ; db "}"
4E22                             ; db 0
4E22                             ; 


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1300 IN MAIN.asm
                    > USED AT LINE 2330 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1584 IN MAIN.asm
                    > USED AT LINE 2168 IN MAIN.asm
                    > USED AT LINE 2314 IN MAIN.asm
                    > USED AT LINE 2376 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 1340 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
                    > USED AT LINE 1345 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
                    > USED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 817 IN MAIN.asm
                    > USED AT LINE 1023 IN MAIN.asm
                    > USED AT LINE 1033 IN MAIN.asm
                    > USED AT LINE 1039 IN MAIN.asm
                    > USED AT LINE 1059 IN MAIN.asm
                    > USED AT LINE 1065 IN MAIN.asm
                    > USED AT LINE 1072 IN MAIN.asm
                    > USED AT LINE 1076 IN MAIN.asm
                    > USED AT LINE 1082 IN MAIN.asm
                    > USED AT LINE 1086 IN MAIN.asm
                    > USED AT LINE 1090 IN MAIN.asm
                    > USED AT LINE 1097 IN MAIN.asm
                    > USED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 1121 IN MAIN.asm
                    > USED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 1137 IN MAIN.asm
                    > USED AT LINE 1143 IN MAIN.asm
                    > USED AT LINE 1147 IN MAIN.asm
                    > USED AT LINE 1152 IN MAIN.asm
                    > USED AT LINE 1157 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 2333 IN MAIN.asm
                    > USED AT LINE 2421 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1950 IN MAIN.asm
                    > USED AT LINE 2187 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2339 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2341 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2343 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2268 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2243 IN MAIN.asm
                    > USED AT LINE 2262 IN MAIN.asm
AT_:                0204 DEFINED AT LINE 176 IN MAIN.asm
ADDR:               0204 DEFINED AT LINE 177 IN MAIN.asm
BACKSLASH_:         020E DEFINED AT LINE 182 IN MAIN.asm
NUM_:               0211 DEFINED AT LINE 185 IN MAIN.asm
NOP_:               0214 DEFINED AT LINE 188 IN MAIN.asm
                    > USED AT LINE 1153 IN MAIN.asm
RBRACK_:            0216 DEFINED AT LINE 190 IN MAIN.asm
PERCENT_:           0219 DEFINED AT LINE 192 IN MAIN.asm
RBRACE_:            021C DEFINED AT LINE 194 IN MAIN.asm
QUOTE_:             021F DEFINED AT LINE 196 IN MAIN.asm
DOT_:               0222 DEFINED AT LINE 198 IN MAIN.asm
CARET_:             0225 DEFINED AT LINE 200 IN MAIN.asm
COMMA_:             0228 DEFINED AT LINE 202 IN MAIN.asm
DQUOTE_:            022B DEFINED AT LINE 204 IN MAIN.asm
GRAVE_:             022E DEFINED AT LINE 206 IN MAIN.asm
UNDERSCORE_:        0231 DEFINED AT LINE 209 IN MAIN.asm
SLASH_:             0234 DEFINED AT LINE 212 IN MAIN.asm
DOLLAR_:            0237 DEFINED AT LINE 215 IN MAIN.asm
QUESTION_:          023A DEFINED AT LINE 218 IN MAIN.asm
RPAREN_:            023D DEFINED AT LINE 222 IN MAIN.asm
RPAREN:             023D DEFINED AT LINE 223 IN MAIN.asm
LPAREN_:            0245 DEFINED AT LINE 230 IN MAIN.asm
LBRACE_:            0245 DEFINED AT LINE 231 IN MAIN.asm
LBRACE:             0245 DEFINED AT LINE 232 IN MAIN.asm
TILDE_:             024A DEFINED AT LINE 237 IN MAIN.asm
TILDE:              024A DEFINED AT LINE 238 IN MAIN.asm
CHAR:               024A DEFINED AT LINE 239 IN MAIN.asm
PIPE_:              0252 DEFINED AT LINE 249 IN MAIN.asm
PIPE:               0252 DEFINED AT LINE 250 IN MAIN.asm
OR:                 0252 DEFINED AT LINE 251 IN MAIN.asm
SEMICOLON_:         025B DEFINED AT LINE 262 IN MAIN.asm
SEMICOLON:          025B DEFINED AT LINE 263 IN MAIN.asm
DEFINEEND:          025B DEFINED AT LINE 264 IN MAIN.asm
DEFINEEND1:         026D DEFINED AT LINE 273 IN MAIN.asm
                    > USED AT LINE 268 IN MAIN.asm
COLON_:             026F DEFINED AT LINE 278 IN MAIN.asm
COLON:              026F DEFINED AT LINE 279 IN MAIN.asm
DEFINESTART:        027C DEFINED AT LINE 287 IN MAIN.asm
                    > USED AT LINE 283 IN MAIN.asm
LBRACK_:            0285 DEFINED AT LINE 294 IN MAIN.asm
LBRACK:             0285 DEFINED AT LINE 295 IN MAIN.asm
ARRAYSTART:         0285 DEFINED AT LINE 296 IN MAIN.asm
AMPER_:             02A1 DEFINED AT LINE 312 IN MAIN.asm
AMPER:              02A1 DEFINED AT LINE 313 IN MAIN.asm
AND:                02A1 DEFINED AT LINE 314 IN MAIN.asm
AND1:               02A8 DEFINED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
UPCASE_:            02AC DEFINED AT LINE 328 IN MAIN.asm
UPCASE:             02AC DEFINED AT LINE 329 IN MAIN.asm
LOWCASE_:           02B1 DEFINED AT LINE 333 IN MAIN.asm
LOWCASE:            02B1 DEFINED AT LINE 334 IN MAIN.asm
IDENT1:             02B6 DEFINED AT LINE 338 IN MAIN.asm
                    > USED AT LINE 332 IN MAIN.asm
HASH_:              02C3 DEFINED AT LINE 351 IN MAIN.asm
HASH:               02C3 DEFINED AT LINE 352 IN MAIN.asm
ARRAYINDEX:         02C3 DEFINED AT LINE 353 IN MAIN.asm
ARRAYINDEX0:        02CB DEFINED AT LINE 359 IN MAIN.asm
ARRAYINDEX1:        02CC DEFINED AT LINE 361 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
ARRAYINDEX2:        02D8 DEFINED AT LINE 370 IN MAIN.asm
                    > USED AT LINE 367 IN MAIN.asm
PLUS_:              02DB DEFINED AT LINE 374 IN MAIN.asm
PLUS:               02DB DEFINED AT LINE 377 IN MAIN.asm
ADD:                02DB DEFINED AT LINE 378 IN MAIN.asm
ADD1:               02E5 DEFINED AT LINE 386 IN MAIN.asm
                    > USED AT LINE 382 IN MAIN.asm
ADD3:               02E9 DEFINED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 439 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 1848 IN MAIN.asm
ADD4:               02F3 DEFINED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 395 IN MAIN.asm
STAR_:              02F5 DEFINED AT LINE 402 IN MAIN.asm
MINUS_:             02F7 DEFINED AT LINE 404 IN MAIN.asm
BANG_:              02F9 DEFINED AT LINE 406 IN MAIN.asm
EQ_:                02FB DEFINED AT LINE 408 IN MAIN.asm
GT_:                02FD DEFINED AT LINE 410 IN MAIN.asm
LT_:                02FF DEFINED AT LINE 412 IN MAIN.asm
STAR:               0301 DEFINED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 403 IN MAIN.asm
MUL:                0301 DEFINED AT LINE 420 IN MAIN.asm
MUL2:               0303 DEFINED AT LINE 423 IN MAIN.asm
MUL3:               030B DEFINED AT LINE 428 IN MAIN.asm
                    > USED AT LINE 437 IN MAIN.asm
MINUS:              031D DEFINED AT LINE 443 IN MAIN.asm
                    > USED AT LINE 405 IN MAIN.asm
SUB:                0329 DEFINED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
SUB1:               0332 DEFINED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
ASSIGN:             033A DEFINED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 501 IN MAIN.asm
ASSIGN0:            033C DEFINED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 385 IN MAIN.asm
                    > USED AT LINE 400 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
ASSIGN1:            0340 DEFINED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
ASSIGN2:            0349 DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 477 IN MAIN.asm
BANG:               034B DEFINED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 407 IN MAIN.asm
NOT:                0355 DEFINED AT LINE 491 IN MAIN.asm
                    > USED AT LINE 487 IN MAIN.asm
EQ:                 035B DEFINED AT LINE 495 IN MAIN.asm
                    > USED AT LINE 409 IN MAIN.asm
EQ0:                0364 DEFINED AT LINE 502 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
EQ1:                0365 DEFINED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
GT:                 0368 DEFINED AT LINE 508 IN MAIN.asm
                    > USED AT LINE 411 IN MAIN.asm
LT:                 0372 DEFINED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 413 IN MAIN.asm
LT1:                037A DEFINED AT LINE 523 IN MAIN.asm
                    > USED AT LINE 515 IN MAIN.asm
EQUALS:             0381 DEFINED AT LINE 531 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
NOTEQUALS:          0388 DEFINED AT LINE 537 IN MAIN.asm
                    > USED AT LINE 490 IN MAIN.asm
LESSTHANEQ:         038F DEFINED AT LINE 545 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
LESSTHAN:           0394 DEFINED AT LINE 552 IN MAIN.asm
                    > USED AT LINE 527 IN MAIN.asm
LESSTHAN1:          0399 DEFINED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 548 IN MAIN.asm
TRUE1:              039C DEFINED AT LINE 560 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 1126 IN MAIN.asm
NULL1:              03A2 DEFINED AT LINE 564 IN MAIN.asm
FALSE1:             03A2 DEFINED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 1060 IN MAIN.asm
SHIFTLEFT:          03A8 DEFINED AT LINE 572 IN MAIN.asm
                    > USED AT LINE 520 IN MAIN.asm
SHIFTLEFT1:         03B0 DEFINED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
SHIFTLEFT2:         03B1 DEFINED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
SHIFTRIGHT:         03B8 DEFINED AT LINE 589 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
SHIFTRIGHT1:        03C0 DEFINED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
SHIFTRIGHT2:        03C4 DEFINED AT LINE 599 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
DOLLAR:             03CB DEFINED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
HEXNUM:             03CB DEFINED AT LINE 607 IN MAIN.asm
HEXNUM1:            03CE DEFINED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
HEXNUM2:            03D6 DEFINED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
QUESTION:           03E8 DEFINED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 219 IN MAIN.asm
IF:                 03E8 DEFINED AT LINE 631 IN MAIN.asm
IFTE:               03F4 DEFINED AT LINE 641 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
IFTE1:              03F5 DEFINED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
BACKSLASH:          0401 DEFINED AT LINE 654 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
LAMBDA:             0401 DEFINED AT LINE 655 IN MAIN.asm
LAMBDA1:            0406 DEFINED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
LAMBDA2:            0416 DEFINED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
NUM:                0422 DEFINED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
NUM0:               042B DEFINED AT LINE 682 IN MAIN.asm
                    > USED AT LINE 680 IN MAIN.asm
NUM1:               042C DEFINED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 701 IN MAIN.asm
NUM2:               0444 DEFINED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 687 IN MAIN.asm
                    > USED AT LINE 689 IN MAIN.asm
NUM3:               044F DEFINED AT LINE 710 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
GRAVE:              0452 DEFINED AT LINE 714 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
PRINTLITERAL:       0452 DEFINED AT LINE 715 IN MAIN.asm
PRINTLITERAL0:      0459 DEFINED AT LINE 719 IN MAIN.asm
                    > USED AT LINE 726 IN MAIN.asm
PRINTLITERAL1:      045C DEFINED AT LINE 723 IN MAIN.asm
                    > USED AT LINE 718 IN MAIN.asm
QUOTE:              0468 DEFINED AT LINE 732 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
DQUOTE:             0468 DEFINED AT LINE 733 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
STRING:             0468 DEFINED AT LINE 734 IN MAIN.asm
STRING1:            0471 DEFINED AT LINE 741 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
STRING2:            0474 DEFINED AT LINE 745 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
STRING3:            047A DEFINED AT LINE 750 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
PERCENT:            0482 DEFINED AT LINE 760 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
ARG:                0482 DEFINED AT LINE 761 IN MAIN.asm
ARG0:               049E DEFINED AT LINE 780 IN MAIN.asm
                    > USED AT LINE 786 IN MAIN.asm
ARG0A:              04A7 DEFINED AT LINE 788 IN MAIN.asm
                    > USED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 772 IN MAIN.asm
ARG1:               04AC DEFINED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
ARG1A:              04B4 DEFINED AT LINE 798 IN MAIN.asm
                    > USED AT LINE 790 IN MAIN.asm
DOT:                0500 DEFINED AT LINE 808 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
PRINT:              0500 DEFINED AT LINE 809 IN MAIN.asm
PRINTCHAR:          050F DEFINED AT LINE 822 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
PRINTSTRING:        051E DEFINED AT LINE 833 IN MAIN.asm
                    > USED AT LINE 816 IN MAIN.asm
DOTSTRING0:         0525 DEFINED AT LINE 837 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
DOTSTRING1:         0528 DEFINED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
PRINTNUMBER:        0533 DEFINED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 818 IN MAIN.asm
DOTDEC:             053E DEFINED AT LINE 858 IN MAIN.asm
                    > USED AT LINE 854 IN MAIN.asm
DOTDECX:            054C DEFINED AT LINE 866 IN MAIN.asm
                    > USED AT LINE 864 IN MAIN.asm
DOTDEC0:            055B DEFINED AT LINE 878 IN MAIN.asm
                    > USED AT LINE 867 IN MAIN.asm
DOTDEC1:            056B DEFINED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
DOTDEC2:            058B DEFINED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 897 IN MAIN.asm
                    > USED AT LINE 899 IN MAIN.asm
                    > USED AT LINE 901 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
DOTDEC3:            058D DEFINED AT LINE 908 IN MAIN.asm
                    > USED AT LINE 911 IN MAIN.asm
DOTDEC4:            059D DEFINED AT LINE 920 IN MAIN.asm
                    > USED AT LINE 915 IN MAIN.asm
DOTDEC5:            059E DEFINED AT LINE 922 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
DOTHEX:             05A4 DEFINED AT LINE 932 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
DOTHEX0:            05B7 DEFINED AT LINE 943 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
DOTHEX1:            05C6 DEFINED AT LINE 952 IN MAIN.asm
                    > USED AT LINE 942 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
DOTHEX2:            05CF DEFINED AT LINE 960 IN MAIN.asm
                    > USED AT LINE 958 IN MAIN.asm
SLASH:              0600 DEFINED AT LINE 975 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
COMMAND:            0600 DEFINED AT LINE 976 IN MAIN.asm
COMMAND_A_:         0626 DEFINED AT LINE 1012 IN MAIN.asm
COMMAND_B_:         0638 DEFINED AT LINE 1026 IN MAIN.asm
COMMAND_D_:         0644 DEFINED AT LINE 1036 IN MAIN.asm
COMMAND_F_:         064A DEFINED AT LINE 1042 IN MAIN.asm
COMMAND_H_:         0665 DEFINED AT LINE 1062 IN MAIN.asm
COMMAND_I_:         066B DEFINED AT LINE 1069 IN MAIN.asm
KEY_:               0671 DEFINED AT LINE 1075 IN MAIN.asm
COMMAND_M_:         0674 DEFINED AT LINE 1079 IN MAIN.asm
OUTPUT_:            067A DEFINED AT LINE 1085 IN MAIN.asm
COMMAND_P_:         067D DEFINED AT LINE 1089 IN MAIN.asm
COMMAND_Q_:         0680 DEFINED AT LINE 1094 IN MAIN.asm
COMMAND_R_:         0686 DEFINED AT LINE 1100 IN MAIN.asm
COMMAND_S_:         0692 DEFINED AT LINE 1110 IN MAIN.asm
TRUE_:              06A4 DEFINED AT LINE 1124 IN MAIN.asm
COMMAND_V_:         06A7 DEFINED AT LINE 1128 IN MAIN.asm
COMMAND_W_:         06B6 DEFINED AT LINE 1140 IN MAIN.asm
XOR_:               06BC DEFINED AT LINE 1146 IN MAIN.asm
COMMAND_NOP_:       06BF DEFINED AT LINE 1151 IN MAIN.asm
COMMAND_DEFAULT_:   06C2 DEFINED AT LINE 1156 IN MAIN.asm
ABSOLUTE:           06C5 DEFINED AT LINE 1164 IN MAIN.asm
                    > USED AT LINE 1014 IN MAIN.asm
ADDROF:             06D2 DEFINED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 1016 IN MAIN.asm
ADDROF1:            06E6 DEFINED AT LINE 1191 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
ADDROF2:            06F1 DEFINED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 1183 IN MAIN.asm
                    > USED AT LINE 1185 IN MAIN.asm
                    > USED AT LINE 1190 IN MAIN.asm
ARRAYLENGTH:        06F3 DEFINED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1020 IN MAIN.asm
                    > USED AT LINE 44
ARRAYLENGTH1:       06F9 DEFINED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 1226 IN MAIN.asm
ARRAYSIZE:          06FC DEFINED AT LINE 1218 IN MAIN.asm
                    > USED AT LINE 1022 IN MAIN.asm
PERFORMM_1696S1219: 0703 DEFINED AT LINE 45
                    > USED AT LINE 43
BREAK:              0710 DEFINED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1032 IN MAIN.asm
BREAK1:             0717 DEFINED AT LINE 1237 IN MAIN.asm
                    > USED AT LINE 1235 IN MAIN.asm
BYTEMODE:           072A DEFINED AT LINE 1249 IN MAIN.asm
                    > USED AT LINE 1030 IN MAIN.asm
BYTEMODE1:          072D DEFINED AT LINE 1251 IN MAIN.asm
                    > USED AT LINE 1406 IN MAIN.asm
COMMENT:            0732 DEFINED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 980 IN MAIN.asm
                    > USED AT LINE 1260 IN MAIN.asm
CONSTHEAPSTART:     073B DEFINED AT LINE 1264 IN MAIN.asm
                    > USED AT LINE 1134 IN MAIN.asm
CONSTTIBSTART:      0741 DEFINED AT LINE 1268 IN MAIN.asm
                    > USED AT LINE 1136 IN MAIN.asm
DECBASE:            0747 DEFINED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 1038 IN MAIN.asm
                    > USED AT LINE 1040 IN MAIN.asm
DECBASE1:           074A DEFINED AT LINE 1274 IN MAIN.asm
                    > USED AT LINE 1284 IN MAIN.asm
ERROR1:             074F DEFINED AT LINE 1278 IN MAIN.asm
                    > USED AT LINE 1024 IN MAIN.asm
                    > USED AT LINE 1034 IN MAIN.asm
                    > USED AT LINE 1066 IN MAIN.asm
                    > USED AT LINE 1073 IN MAIN.asm
                    > USED AT LINE 1083 IN MAIN.asm
                    > USED AT LINE 1091 IN MAIN.asm
                    > USED AT LINE 1098 IN MAIN.asm
                    > USED AT LINE 1108 IN MAIN.asm
                    > USED AT LINE 1122 IN MAIN.asm
                    > USED AT LINE 1138 IN MAIN.asm
                    > USED AT LINE 1144 IN MAIN.asm
HEXBASE:            0755 DEFINED AT LINE 1282 IN MAIN.asm
                    > USED AT LINE 1064 IN MAIN.asm
INPUT:              075B DEFINED AT LINE 1288 IN MAIN.asm
                    > USED AT LINE 1071 IN MAIN.asm
KEY:                0766 DEFINED AT LINE 1299 IN MAIN.asm
                    > USED AT LINE 1077 IN MAIN.asm
OUTPUT:             076F DEFINED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 1087 IN MAIN.asm
QUIT:               0778 DEFINED AT LINE 1320 IN MAIN.asm
                    > USED AT LINE 1096 IN MAIN.asm
QUIT1:              077F DEFINED AT LINE 1326 IN MAIN.asm
                    > USED AT LINE 1324 IN MAIN.asm
RECUR:              0782 DEFINED AT LINE 1329 IN MAIN.asm
                    > USED AT LINE 1102 IN MAIN.asm
REMAIN:             0788 DEFINED AT LINE 1334 IN MAIN.asm
                    > USED AT LINE 1104 IN MAIN.asm
STRINGBEGIN:        078E DEFINED AT LINE 1339 IN MAIN.asm
                    > USED AT LINE 1112 IN MAIN.asm
STRINGEND:          0796 DEFINED AT LINE 1344 IN MAIN.asm
                    > USED AT LINE 1114 IN MAIN.asm
STRINGEND1:         07BD DEFINED AT LINE 1362 IN MAIN.asm
                    > USED AT LINE 1342 IN MAIN.asm
STRINGLENGTH:       07C5 DEFINED AT LINE 1367 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 44
STRINGLENGTH1:      07CB DEFINED AT LINE 1371 IN MAIN.asm
                    > USED AT LINE 1376 IN MAIN.asm
STRINGLENGTH2:      07CC DEFINED AT LINE 1373 IN MAIN.asm
                    > USED AT LINE 1370 IN MAIN.asm
STRINGLENGTH3:      07D0 DEFINED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 1385 IN MAIN.asm
STRINGSIZE:         07D3 DEFINED AT LINE 1381 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
PERFORMM_1840S1382: 07DA DEFINED AT LINE 45
                    > USED AT LINE 43
VARHEAPPTR:         07DF DEFINED AT LINE 1387 IN MAIN.asm
                    > USED AT LINE 1130 IN MAIN.asm
VARTIBPTR:          07E8 DEFINED AT LINE 1392 IN MAIN.asm
                    > USED AT LINE 1132 IN MAIN.asm
VARIABLE:           07F1 DEFINED AT LINE 1397 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
                    > USED AT LINE 1390 IN MAIN.asm
                    > USED AT LINE 1395 IN MAIN.asm
CONSTANT:           07F4 DEFINED AT LINE 1399 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
                    > USED AT LINE 1270 IN MAIN.asm
WORDMODE:           07F7 DEFINED AT LINE 1404 IN MAIN.asm
                    > USED AT LINE 1142 IN MAIN.asm
XOR:                07FD DEFINED AT LINE 1408 IN MAIN.asm
                    > USED AT LINE 1148 IN MAIN.asm
XOR1:               07FE DEFINED AT LINE 1410 IN MAIN.asm
RANGESRC:           0808 DEFINED AT LINE 32
                    > USED AT LINE 1106 IN MAIN.asm
RANGESRCM_1878S1427: 0817 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          0884 DEFINED AT LINE 32
                    > USED AT LINE 1018 IN MAIN.asm
ARRAYITERM_1897S1447: 0891 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         0905 DEFINED AT LINE 32
                    > USED AT LINE 1116 IN MAIN.asm
STRINGITERM_1916S1467: 0912 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                098D DEFINED AT LINE 32
                    > USED AT LINE 1081 IN MAIN.asm
MAPM_1936S1489:     099A DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             09CF DEFINED AT LINE 32
                    > USED AT LINE 1050 IN MAIN.asm
FILTERM_1950S1504:  09DD DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               0A2D DEFINED AT LINE 32
                    > USED AT LINE 1044 IN MAIN.asm
FOLDM_1969S1524:    0A3C DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            0A7F DEFINED AT LINE 32
                    > USED AT LINE 1046 IN MAIN.asm
FOREACHM_1983S1539: 0A8D DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0ACB DEFINED AT LINE 32
                    > USED AT LINE 1048 IN MAIN.asm
FUNCSRCM_1997S1554: 0AD7 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0B04 DEFINED AT LINE 32
                    > USED AT LINE 812 IN MAIN.asm
PRINTARRAYM_2007S1565: 0B12 DEFINED AT LINE 39
                    > USED AT LINE 35
DOTNEXT:            0B4C DEFINED AT LINE 1571 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
                    > USED AT LINE 873 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
DOTNEXT1:           0B54 DEFINED AT LINE 1576 IN MAIN.asm
                    > USED AT LINE 1574 IN MAIN.asm
DOTNEXT2:           0B60 DEFINED AT LINE 1582 IN MAIN.asm
                    > USED AT LINE 1590 IN MAIN.asm
DOTNEXT3:           0B66 DEFINED AT LINE 1587 IN MAIN.asm
                    > USED AT LINE 1581 IN MAIN.asm
UNDERSCORE:         0B72 DEFINED AT LINE 1599 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
COMMA:              0B72 DEFINED AT LINE 1600 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
RBRACK:             0B74 DEFINED AT LINE 1606 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
ARRAYEND:           0B74 DEFINED AT LINE 1607 IN MAIN.asm
ARRAYEND1:          0B90 DEFINED AT LINE 1624 IN MAIN.asm
                    > USED AT LINE 1641 IN MAIN.asm
ARRAYEND2:          0BA0 DEFINED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 1630 IN MAIN.asm
ARRAYEND3:          0BA5 DEFINED AT LINE 1638 IN MAIN.asm
                    > USED AT LINE 1623 IN MAIN.asm
RBRACE:             0BC4 DEFINED AT LINE 1660 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
BLOCKEND:           0BC4 DEFINED AT LINE 1661 IN MAIN.asm
                    > USED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 1327 IN MAIN.asm
BLOCKEND1:          0BF6 DEFINED AT LINE 1683 IN MAIN.asm
                    > USED AT LINE 1676 IN MAIN.asm
BLOCKEND2:          0C02 DEFINED AT LINE 1690 IN MAIN.asm
                    > USED AT LINE 1682 IN MAIN.asm
BLOCKEND3:          0C14 DEFINED AT LINE 1704 IN MAIN.asm
                    > USED AT LINE 1696 IN MAIN.asm
BLOCKEND4:          0C28 DEFINED AT LINE 1714 IN MAIN.asm
                    > USED AT LINE 1712 IN MAIN.asm
CARET:              0C31 DEFINED AT LINE 1722 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
GO:                 0C31 DEFINED AT LINE 1723 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0C32 DEFINED AT LINE 1725 IN MAIN.asm
                    > USED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
                    > USED AT LINE 1717 IN MAIN.asm
GO2:                0C38 DEFINED AT LINE 1730 IN MAIN.asm
                    > USED AT LINE 1728 IN MAIN.asm
GOBLOCK:            0C43 DEFINED AT LINE 1737 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
GOBLOCK2:           0C68 DEFINED AT LINE 1754 IN MAIN.asm
                    > USED AT LINE 1835 IN MAIN.asm
GOBLOCK3:           0C72 DEFINED AT LINE 1760 IN MAIN.asm
GOFUNC:             0C76 DEFINED AT LINE 1764 IN MAIN.asm
                    > USED AT LINE 1735 IN MAIN.asm
GOFUNC1:            0C8F DEFINED AT LINE 1783 IN MAIN.asm
                    > USED AT LINE 1793 IN MAIN.asm
GOFUNC2:            0C95 DEFINED AT LINE 1790 IN MAIN.asm
                    > USED AT LINE 1782 IN MAIN.asm
GOFUNC3:            0CA0 DEFINED AT LINE 1796 IN MAIN.asm
                    > USED AT LINE 1772 IN MAIN.asm
GOFUNC4:            0CB8 DEFINED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 1810 IN MAIN.asm
GOFUNC5:            0CBB DEFINED AT LINE 1816 IN MAIN.asm
                    > USED AT LINE 1822 IN MAIN.asm
GOFUNC6:            0CBE DEFINED AT LINE 1820 IN MAIN.asm
                    > USED AT LINE 1815 IN MAIN.asm
GOFUNC7:            0CC1 DEFINED AT LINE 1823 IN MAIN.asm
GOFUNC8:            0CC5 DEFINED AT LINE 1828 IN MAIN.asm
                    > USED AT LINE 1748 IN MAIN.asm
                    > USED AT LINE 1812 IN MAIN.asm
DIV:                0CD0 DEFINED AT LINE 1839 IN MAIN.asm
                    > USED AT LINE 1158 IN MAIN.asm
DIVIDE:             0CE1 DEFINED AT LINE 1853 IN MAIN.asm
                    > USED AT LINE 1844 IN MAIN.asm
DIVIDE1:            0CE6 DEFINED AT LINE 1856 IN MAIN.asm
                    > USED AT LINE 1868 IN MAIN.asm
DIVIDE2:            0CF3 DEFINED AT LINE 1864 IN MAIN.asm
                    > USED AT LINE 1861 IN MAIN.asm
DIVIDE3:            0CF4 DEFINED AT LINE 1866 IN MAIN.asm
                    > USED AT LINE 1863 IN MAIN.asm
PARSEARGS:          0CFA DEFINED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
PARSEARGS1:         0D04 DEFINED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 1902 IN MAIN.asm
PARSEARGS1A:        0D0C DEFINED AT LINE 1887 IN MAIN.asm
                    > USED AT LINE 1884 IN MAIN.asm
PARSEARGS2:         0D14 DEFINED AT LINE 1892 IN MAIN.asm
PARSEARGS3:         0D1C DEFINED AT LINE 1900 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
PARSEARGS4:         0D1F DEFINED AT LINE 1903 IN MAIN.asm
                    > USED AT LINE 1889 IN MAIN.asm
                    > USED AT LINE 1891 IN MAIN.asm
PARSEARGS5:         0D25 DEFINED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
PARSEBLOCK:         0D30 DEFINED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
PARSEBLOCK1:        0D34 DEFINED AT LINE 1926 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
                    > USED AT LINE 1955 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
                    > USED AT LINE 1964 IN MAIN.asm
PARSEBLOCK2:        0D60 DEFINED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 1940 IN MAIN.asm
                    > USED AT LINE 1942 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
PARSEBLOCK3:        0D63 DEFINED AT LINE 1956 IN MAIN.asm
                    > USED AT LINE 1947 IN MAIN.asm
                    > USED AT LINE 1949 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
PARSEBLOCK4:        0D6B DEFINED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 1933 IN MAIN.asm
                    > USED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 1937 IN MAIN.asm
PARSEBLOCK5:        0D6E DEFINED AT LINE 1965 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
PARSEBLOCK6:        0D96 DEFINED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 1971 IN MAIN.asm
CREATEFUNC:         0D9A DEFINED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
CREATEFUNC0:        0DB9 DEFINED AT LINE 2006 IN MAIN.asm
                    > USED AT LINE 2002 IN MAIN.asm
CREATEFUNC1:        0DD1 DEFINED AT LINE 2025 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
CREATEFUNC2:        0DE4 DEFINED AT LINE 2038 IN MAIN.asm
                    > USED AT LINE 2034 IN MAIN.asm
CREATEFUNC2A:       0E03 DEFINED AT LINE 2064 IN MAIN.asm
                    > USED AT LINE 2051 IN MAIN.asm
CREATEFUNC3:        0E12 DEFINED AT LINE 2076 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
CREATEFUNC4:        0E1D DEFINED AT LINE 2087 IN MAIN.asm
CREATEFUNC5:        0E1E DEFINED AT LINE 2089 IN MAIN.asm
                    > USED AT LINE 2005 IN MAIN.asm
COMMANDTABLE:       0E3C DEFINED AT LINE 2119 IN MAIN.asm
                    > USED AT LINE 982 IN MAIN.asm
COMMANDTABLE1:      0E46 DEFINED AT LINE 2126 IN MAIN.asm
                    > USED AT LINE 2135 IN MAIN.asm
COMMANDTABLE2:      0E4D DEFINED AT LINE 2132 IN MAIN.asm
                    > USED AT LINE 2123 IN MAIN.asm
                    > USED AT LINE 2125 IN MAIN.asm
JUMPTABLE:          0E52 DEFINED AT LINE 2141 IN MAIN.asm
                    > USED AT LINE 810 IN MAIN.asm
JUMPTABLE1:         0E53 DEFINED AT LINE 2143 IN MAIN.asm
                    > USED AT LINE 2131 IN MAIN.asm
JUMPTABLE2:         0E54 DEFINED AT LINE 2145 IN MAIN.asm
                    > USED AT LINE 2158 IN MAIN.asm
JUMPTABLE3:         0E5B DEFINED AT LINE 2151 IN MAIN.asm
                    > USED AT LINE 2148 IN MAIN.asm
JUMPTABLE4:         0E64 DEFINED AT LINE 2159 IN MAIN.asm
                    > USED AT LINE 2150 IN MAIN.asm
                    > USED AT LINE 2154 IN MAIN.asm
PRTSTR0:            0E6A DEFINED AT LINE 2167 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
PRTSTR:             0E6E DEFINED AT LINE 2170 IN MAIN.asm
                    > USED AT LINE 2237 IN MAIN.asm
                    > USED AT LINE 2294 IN MAIN.asm
NESTING:            0E73 DEFINED AT LINE 2186 IN MAIN.asm
                    > USED AT LINE 2319 IN MAIN.asm
                    > USED AT LINE 2377 IN MAIN.asm
NESTING0:           0E7D DEFINED AT LINE 2192 IN MAIN.asm
                    > USED AT LINE 2188 IN MAIN.asm
                    > USED AT LINE 2190 IN MAIN.asm
NESTING1A:          0E84 DEFINED AT LINE 2197 IN MAIN.asm
                    > USED AT LINE 2194 IN MAIN.asm
NESTING1:           0E87 DEFINED AT LINE 2200 IN MAIN.asm
                    > USED AT LINE 2191 IN MAIN.asm
NESTING2:           0E96 DEFINED AT LINE 2209 IN MAIN.asm
                    > USED AT LINE 2204 IN MAIN.asm
                    > USED AT LINE 2206 IN MAIN.asm
NESTING3:           0E98 DEFINED AT LINE 2212 IN MAIN.asm
                    > USED AT LINE 2208 IN MAIN.asm
NESTING4:           0EA3 DEFINED AT LINE 2219 IN MAIN.asm
                    > USED AT LINE 2214 IN MAIN.asm
                    > USED AT LINE 2216 IN MAIN.asm
PROMPT:             0EA5 DEFINED AT LINE 2223 IN MAIN.asm
                    > USED AT LINE 2298 IN MAIN.asm
CRLF:               0EAE DEFINED AT LINE 2228 IN MAIN.asm
                    > USED AT LINE 2390 IN MAIN.asm
PRINTSTR:           0EB5 DEFINED AT LINE 2235 IN MAIN.asm
                    > USED AT LINE 2224 IN MAIN.asm
                    > USED AT LINE 2229 IN MAIN.asm
                    > USED AT LINE 2447 IN MAIN.asm
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 159
INIT:               0EBC DEFINED AT LINE 2242 IN MAIN.asm
                    > USED AT LINE 2291 IN MAIN.asm
INIT1:              0EC4 DEFINED AT LINE 2246 IN MAIN.asm
                    > USED AT LINE 2252 IN MAIN.asm
WARMINIT:           0ECC DEFINED AT LINE 2254 IN MAIN.asm
COLDBOOT0:          0EDF DEFINED AT LINE 2261 IN MAIN.asm
                    > USED AT LINE 2249 IN MAIN.asm
                    > USED AT LINE 2287 IN MAIN.asm
COLDINIT:           0EE9 DEFINED AT LINE 2267 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0EFA DEFINED AT LINE 2276 IN MAIN.asm
                    > USED AT LINE 2279 IN MAIN.asm
COLDSTART:          0F07 DEFINED AT LINE 2285 IN MAIN.asm
                    > USED AT LINE 1028 IN MAIN.asm
START:              0F10 DEFINED AT LINE 2289 IN MAIN.asm
START1:             0F16 DEFINED AT LINE 2292 IN MAIN.asm
                    > USED AT LINE 2259 IN MAIN.asm
                    > USED AT LINE 2288 IN MAIN.asm
INTERPRET:          0F1C DEFINED AT LINE 2296 IN MAIN.asm
                    > USED AT LINE 2423 IN MAIN.asm
                    > USED AT LINE 2438 IN MAIN.asm
                    > USED AT LINE 2455 IN MAIN.asm
                    > USED AT LINE 2458 IN MAIN.asm
                    > USED AT LINE 2463 IN MAIN.asm
INTERPRET2:         0F28 DEFINED AT LINE 2304 IN MAIN.asm
                    > USED AT LINE 2368 IN MAIN.asm
                    > USED AT LINE 2445 IN MAIN.asm
                    > USED AT LINE 2449 IN MAIN.asm
INTERPRET3:         0F30 DEFINED AT LINE 2312 IN MAIN.asm
                    > USED AT LINE 2325 IN MAIN.asm
INTERPRET4:         0F3B DEFINED AT LINE 2321 IN MAIN.asm
                    > USED AT LINE 2310 IN MAIN.asm
INTERPRET5:         0F40 DEFINED AT LINE 2328 IN MAIN.asm
                    > USED AT LINE 2378 IN MAIN.asm
                    > USED AT LINE 2393 IN MAIN.asm
INTERPRET5A:        0F5E DEFINED AT LINE 2365 IN MAIN.asm
INTERPRET6:         0F60 DEFINED AT LINE 2370 IN MAIN.asm
                    > USED AT LINE 2332 IN MAIN.asm
INTERPRET7:         0F6E DEFINED AT LINE 2380 IN MAIN.asm
                    > USED AT LINE 2337 IN MAIN.asm
INTERPRET8:         0F81 DEFINED AT LINE 2395 IN MAIN.asm
                    > USED AT LINE 2335 IN MAIN.asm
NEXT:               0F9C DEFINED AT LINE 2408 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2412 IN MAIN.asm
NEXT1:              0FAC DEFINED AT LINE 2420 IN MAIN.asm
                    > USED AT LINE 2413 IN MAIN.asm
EXIT:               0FB3 DEFINED AT LINE 2425 IN MAIN.asm
                    > USED AT LINE 2422 IN MAIN.asm
RUN:                0FB7 DEFINED AT LINE 2429 IN MAIN.asm
                    > USED AT LINE 2436 IN MAIN.asm
                    > USED AT LINE 2453 IN MAIN.asm
                    > USED AT LINE 2461 IN MAIN.asm
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
ERROR:              0FBB DEFINED AT LINE 2434 IN MAIN.asm
                    > USED AT LINE 286 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
BACKSPACE_:         0FCD DEFINED AT LINE 2442 IN MAIN.asm
                    > USED AT LINE 2342 IN MAIN.asm
EDIT_:              0FDD DEFINED AT LINE 2452 IN MAIN.asm
                    > USED AT LINE 2340 IN MAIN.asm
REEDIT_:            0FF3 DEFINED AT LINE 2457 IN MAIN.asm
                    > USED AT LINE 2344 IN MAIN.asm
PRINTSTACK_:        0FF6 DEFINED AT LINE 2460 IN MAIN.asm
F1:                 1000 DEFINED AT LINE 32
                    > USED AT LINE 1052 IN MAIN.asm
F1M_2991S12:        100B DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 100C DEFINED AT LINE 32
                    > USED AT LINE 1054 IN MAIN.asm
F2M_2993S15:        1017 DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 1018 DEFINED AT LINE 32
                    > USED AT LINE 1056 IN MAIN.asm
F3M_2995S18:        1023 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 1024 DEFINED AT LINE 32
                    > USED AT LINE 1058 IN MAIN.asm
F4M_2997S21:        102F DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         1100 DEFINED AT LINE 25
                    > USED AT LINE 8
EXPECTM_3016S44:    116D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3017S45:    11DB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3018S46:    1247 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3019S47:    12B3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3020S48:    131F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3021S49:    138B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3022S50:    13F9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3023S51:    1469 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3024S52:    14D7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3025S53:    1545 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3026S54:    15B3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3027S55:    1623 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3028S56:    1693 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3029S57:    1709 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3030S58:    177F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3031S59:    17F3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3032S60:    186B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3033S61:    18E7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3034S62:    1961 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3035S63:    19D5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3036S64:    1A51 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3037S65:    1AC9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3038S66:    1B3D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3039S67:    1BB1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3040S68:    1C2D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3041S69:    1CA1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3042S70:    1D15 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3043S71:    1D8B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3044S72:    1E11 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3045S73:    1E85 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3046S74:    1F01 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3047S75:    1F75 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3048S76:    1FF7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3049S77:    2079 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3050S78:    20FB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3051S79:    217D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3052S80:    21F9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3053S81:    226D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3054S82:    22E3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3055S83:    2359 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3056S84:    23CD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3057S85:    2441 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3058S86:    24B5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3059S87:    2529 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3060S88:    259D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3061S89:    2611 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3062S90:    2685 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3063S91:    26F9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3064S92:    276F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3065S93:    27E5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3066S94:    285B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3067S95:    28D3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3068S96:    294B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3069S97:    29BD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3070S98:    2A2F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3071S99:    2AA7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3072S100:   2B25 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3073S101:   2BA3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3074S102:   2C25 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3075S103:   2CB1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3076S104:   2D3D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3077S105:   2DB1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3078S106:   2E27 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3079S107:   2EA3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3080S108:   2F23 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3081S109:   2F9F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3082S110:   3025 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3083S111:   30AD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3084S112:   313B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3085S113:   31CD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3086S114:   3251 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3087S115:   32DB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3088S116:   3367 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3089S117:   33F5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3090S118:   3481 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3091S119:   351B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3092S120:   35A3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3093S121:   3639 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3094S122:   36D1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3095S123:   376B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3096S124:   380F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3097S125:   38B3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3098S126:   3937 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3099S127:   39C3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3100S128:   3A49 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3101S129:   3AD5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3102S130:   3B65 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3103S131:   3C03 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3104S132:   3CA9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3105S133:   3D4F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3106S134:   3DE7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3107S135:   3E85 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3108S136:   3F39 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3109S137:   3FF7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3110S138:   4087 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3111S139:   4117 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3112S140:   4195 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3113S141:   4213 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3114S142:   4291 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3115S143:   430F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3116S144:   4385 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3117S145:   43FB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3118S146:   4471 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3119S147:   44E7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3120S148:   4569 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3121S149:   45F9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3122S150:   468F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3123S151:   473D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3124S152:   47EB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3125S153:   48B3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3126S154:   4945 DEFINED AT LINE 37
                    > USED AT LINE 16
EXECSTR:            4950 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              4B00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1739 IN MAIN.asm
                    > USED AT LINE 2282 IN MAIN.asm
                    > USED AT LINE 2286 IN MAIN.asm
                    > USED AT LINE 2290 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                4B00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
                    > USED AT LINE 2301 IN MAIN.asm
                    > USED AT LINE 2309 IN MAIN.asm
                    > USED AT LINE 2372 IN MAIN.asm
                    > USED AT LINE 2382 IN MAIN.asm
                    > USED AT LINE 2397 IN MAIN.asm
                    > USED AT LINE 2400 IN MAIN.asm
BUFFER:             4C00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 1352 IN MAIN.asm
                    > USED AT LINE 1363 IN MAIN.asm
                    > USED AT LINE 1577 IN MAIN.asm
                    > USED AT LINE 1591 IN MAIN.asm
VARS:               4D00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 2273 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
RESTARTS:           4DD0 DEFINED AT LINE 18 IN ram.asm
RST08:              4DD0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              4DD2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              4DD4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              4DD6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              4DD8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              4DDA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               4DDC DEFINED AT LINE 26 IN ram.asm
INTVEC:             4DDE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             4DE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            4DE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            4DE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            4DE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2269 IN MAIN.asm
VDATAWIDTH:         4DE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 356 IN MAIN.asm
                    > USED AT LINE 475 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
                    > USED AT LINE 938 IN MAIN.asm
                    > USED AT LINE 1221 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
                    > USED AT LINE 1628 IN MAIN.asm
VNUMBASE:           4DE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 851 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
VTIBPTR:            4DEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1393 IN MAIN.asm
                    > USED AT LINE 1394 IN MAIN.asm
                    > USED AT LINE 2302 IN MAIN.asm
                    > USED AT LINE 2399 IN MAIN.asm
VBUFPTR:            4DEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 717 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
                    > USED AT LINE 825 IN MAIN.asm
                    > USED AT LINE 828 IN MAIN.asm
                    > USED AT LINE 835 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 859 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
                    > USED AT LINE 1347 IN MAIN.asm
                    > USED AT LINE 1364 IN MAIN.asm
                    > USED AT LINE 1578 IN MAIN.asm
                    > USED AT LINE 1592 IN MAIN.asm
VNEXT:              4DEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2281 IN MAIN.asm
VHEAPPTR:           4DF0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 735 IN MAIN.asm
                    > USED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 1356 IN MAIN.asm
                    > USED AT LINE 1360 IN MAIN.asm
                    > USED AT LINE 1388 IN MAIN.asm
                    > USED AT LINE 1389 IN MAIN.asm
                    > USED AT LINE 1617 IN MAIN.asm
                    > USED AT LINE 1651 IN MAIN.asm
                    > USED AT LINE 1655 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 2040 IN MAIN.asm
                    > USED AT LINE 2106 IN MAIN.asm
VRECUR:             4DF2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1331 IN MAIN.asm
                    > USED AT LINE 1709 IN MAIN.asm
                    > USED AT LINE 1716 IN MAIN.asm
VDEFINE:            4DF4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 265 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 290 IN MAIN.asm
VSTRMODE:           4DF6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1341 IN MAIN.asm
                    > USED AT LINE 1346 IN MAIN.asm
                    > USED AT LINE 1572 IN MAIN.asm
VPOINTER:           4DF8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 178 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
                    > USED AT LINE 289 IN MAIN.asm
                    > USED AT LINE 342 IN MAIN.asm
                    > USED AT LINE 363 IN MAIN.asm
                    > USED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 794 IN MAIN.asm
                    > USED AT LINE 1398 IN MAIN.asm
VREMAIN:            4DFA DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1335 IN MAIN.asm
                    > USED AT LINE 1846 IN MAIN.asm
VSAVEDIP:           4DFC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2255 IN MAIN.asm
                    > USED AT LINE 2402 IN MAIN.asm
VSAVEDSP:           4DFE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2256 IN MAIN.asm
                    > USED AT LINE 2403 IN MAIN.asm
VSAVEDNEXT:         4E00 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2257 IN MAIN.asm
                    > USED AT LINE 2404 IN MAIN.asm
VSAVEDBP:           4E02 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 2258 IN MAIN.asm
                    > USED AT LINE 2405 IN MAIN.asm
VTEMP1:             4E04 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 1351 IN MAIN.asm
                    > USED AT LINE 1361 IN MAIN.asm
                    > USED AT LINE 1610 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 1664 IN MAIN.asm
                    > USED AT LINE 1708 IN MAIN.asm
                    > USED AT LINE 1738 IN MAIN.asm
                    > USED AT LINE 1744 IN MAIN.asm
                    > USED AT LINE 1773 IN MAIN.asm
                    > USED AT LINE 1794 IN MAIN.asm
                    > USED AT LINE 1801 IN MAIN.asm
                    > USED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 1974 IN MAIN.asm
                    > USED AT LINE 1983 IN MAIN.asm
                    > USED AT LINE 1995 IN MAIN.asm
                    > USED AT LINE 2107 IN MAIN.asm
VTEMP2:             4E06 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 1667 IN MAIN.asm
                    > USED AT LINE 1707 IN MAIN.asm
                    > USED AT LINE 1774 IN MAIN.asm
                    > USED AT LINE 1795 IN MAIN.asm
                    > USED AT LINE 1997 IN MAIN.asm
                    > USED AT LINE 2097 IN MAIN.asm
VTEMP3:             4E08 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 1994 IN MAIN.asm
                    > USED AT LINE 2108 IN MAIN.asm
VLASTDEF:           4E0A DEFINED AT LINE 61 IN ram.asm
TBPTR:              4E0C DEFINED AT LINE 62 IN ram.asm
TITLEBUF:           4E0E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 2244 IN MAIN.asm
                    > USED AT LINE 2263 IN MAIN.asm
                    > USED AT LINE 2293 IN MAIN.asm
HEAP:               4E22 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 1967 IN MAIN.asm
