0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 call flushBuffer
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call flushBuffer
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 4F               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 4F               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 4F               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 4F               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 4F               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 4F               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 4F               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 4F               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 4F               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 4F               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 4D               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 4F               LD   (RST08),HL   
0094   22 D2 4F               LD   (RST10),HL   
0097   22 D4 4F               LD   (RST18),HL   
009A   22 D6 4F               LD   (RST20),HL   
009D   22 D8 4F               LD   (RST28),HL   
00A0   22 DA 4F               LD   (RST30),HL   
00A3   22 DE 4F               LD   (INTVEC),HL   
00A6   22 E0 4F               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 4F               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 4F               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 0E               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   3E                     DB   lsb(bang_)   ; !
0181   F3                     DB   lsb(dquote_)   ; "
0182   EA                     DB   lsb(hash_)   ; #
0183   C0                     DB   lsb(dollar_)   ; $
0184   C9                     DB   lsb(percent_)   ; %
0185   20                     DB   lsb(amper_)   ; &
0186   D2                     DB   lsb(tick_)   ; '
0187   CC                     DB   lsb(lparen_)   ; (
0188   BD                     DB   lsb(rparen_)   ; )
0189   E7                     DB   lsb(star_)   ; *
018A   04                     DB   lsb(plus_)   ; +
018B   F0                     DB   lsb(comma_)   ; ,
018C   4E                     DB   lsb(minus_)   ; -
018D   D8                     DB   lsb(dot_)   ; .
018E   FF                     DB   lsb(slash_)   ; /	
018F   6B                     DB   lsb(num_)   ; 0
0190   6B                     DB   lsb(num_)   ; 1
0191   6B                     DB   lsb(num_)   ; 2
0192   6B                     DB   lsb(num_)   ; 3
0193   6B                     DB   lsb(num_)   ; 4
0194   6B                     DB   lsb(num_)   ; 5
0195   6B                     DB   lsb(num_)   ; 6
0196   6B                     DB   lsb(num_)   ; 7
0197   6B                     DB   lsb(num_)   ; 8
0198   6B                     DB   lsb(num_)   ; 9
0199   DB                     DB   lsb(colon_)   ; :
019A   D5                     DB   lsb(semicolon_)   ; ;
019B   86                     DB   lsb(lt_)   ; <
019C   6E                     DB   lsb(eq_)   ; =
019D   7B                     DB   lsb(gt_)   ; >
019E   E4                     DB   lsb(question_)   ; ?
019F   34                     DB   lsb(at_)   ; @
01A0   DE                     DB   lsb(upcase_)   ; A
01A1   DE                     DB   lsb(upcase_)   ; B
01A2   DE                     DB   lsb(upcase_)   ; C
01A3   DE                     DB   lsb(upcase_)   ; D
01A4   DE                     DB   lsb(upcase_)   ; E
01A5   DE                     DB   lsb(upcase_)   ; F
01A6   DE                     DB   lsb(upcase_)   ; G
01A7   DE                     DB   lsb(upcase_)   ; h
01A8   DE                     DB   lsb(upcase_)   ; I
01A9   DE                     DB   lsb(upcase_)   ; J
01AA   DE                     DB   lsb(upcase_)   ; K
01AB   DE                     DB   lsb(upcase_)   ; L
01AC   DE                     DB   lsb(upcase_)   ; M
01AD   DE                     DB   lsb(upcase_)   ; N
01AE   DE                     DB   lsb(upcase_)   ; O
01AF   DE                     DB   lsb(upcase_)   ; p
01B0   DE                     DB   lsb(upcase_)   ; Q
01B1   DE                     DB   lsb(upcase_)   ; R
01B2   DE                     DB   lsb(upcase_)   ; S
01B3   DE                     DB   lsb(upcase_)   ; T
01B4   DE                     DB   lsb(upcase_)   ; U
01B5   DE                     DB   lsb(upcase_)   ; V
01B6   DE                     DB   lsb(upcase_)   ; W
01B7   DE                     DB   lsb(upcase_)   ; X
01B8   DE                     DB   lsb(upcase_)   ; Y
01B9   DE                     DB   lsb(upcase_)   ; Z
01BA   C3                     DB   lsb(lbrack_)   ; [
01BB   F6                     DB   lsb(backslash_)   ; \
01BC   C6                     DB   lsb(rbrack_)   ; ]
01BD   ED                     DB   lsb(caret_)   ; ^
01BE   F9                     DB   lsb(underscore_)   ; _
01BF   F3                     DB   lsb(dquote_)   ; `     used for testing string   	
01C0   E1                     DB   lsb(lowcase_)   ; a
01C1   E1                     DB   lsb(lowcase_)   ; b
01C2   E1                     DB   lsb(lowcase_)   ; c
01C3   E1                     DB   lsb(lowcase_)   ; d
01C4   E1                     DB   lsb(lowcase_)   ; e
01C5   E1                     DB   lsb(lowcase_)   ; f
01C6   E1                     DB   lsb(lowcase_)   ; g
01C7   E1                     DB   lsb(lowcase_)   ; h
01C8   E1                     DB   lsb(lowcase_)   ; i
01C9   E1                     DB   lsb(lowcase_)   ; j
01CA   E1                     DB   lsb(lowcase_)   ; k
01CB   E1                     DB   lsb(lowcase_)   ; l
01CC   E1                     DB   lsb(lowcase_)   ; m
01CD   E1                     DB   lsb(lowcase_)   ; n
01CE   E1                     DB   lsb(lowcase_)   ; o
01CF   E1                     DB   lsb(lowcase_)   ; p
01D0   E1                     DB   lsb(lowcase_)   ; q
01D1   E1                     DB   lsb(lowcase_)   ; r
01D2   E1                     DB   lsb(lowcase_)   ; s
01D3   E1                     DB   lsb(lowcase_)   ; t
01D4   E1                     DB   lsb(lowcase_)   ; u
01D5   E1                     DB   lsb(lowcase_)   ; v
01D6   E1                     DB   lsb(lowcase_)   ; w
01D7   E1                     DB   lsb(lowcase_)   ; x
01D8   E1                     DB   lsb(lowcase_)   ; y
01D9   E1                     DB   lsb(lowcase_)   ; z
01DA   CC                     DB   lsb(lbrace_)   ; {
01DB   2B                     DB   lsb(pipe_)   ; |
01DC   CF                     DB   lsb(rbrace_)   ; }
01DD   FC                     DB   lsb(tilde_)   ; ~
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 4D                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 4E                  DW   BUF   ; vBUFPtr pointer into BUF
01E6   41 0D                  DW   next   ; nNext
01E8   1C 50                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; unused
01EE   00 00                  DW   0   ; unused
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN *********************************************
0204                PLUS_:       ; add the top 2 members of the stack
0204                ADD:         
0204   03                     INC   bc   
0205   0A                     LD   a,(bc)   
0206   FE 2B                  CP   "+"   ; ++ increment variable
0208   20 05                  JR   nz,add1   
020A   E1                     POP   hl   
020B   23                     INC   hl   
020C   C3 9E 07               JP   assign0   
020F                ADD1:        
020F   0B                     DEC   bc   
0210   D1                     POP   de   ; second term
0211   E1                     POP   hl   ; first term
0212   19                     ADD   hl,de   
0213                ADD3:        
0213   03                     INC   bc   
0214   0A                     LD   a,(bc)   
0215   FE 3D                  CP   "="   
0217   28 04                  JR   z,add4   
0219   0B                     DEC   bc   
021A   E5                     PUSH   hl   
021B   DD E9                  JP   (ix)   
021D                ADD4:        
021D   C3 9E 07               JP   assign0   
0220                AMPER_:      
0220                AND:         
0220   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0221   E1                     POP   hl   
0222   7B                     LD   a,e   
0223   A5                     AND   l   
0224   6F                     LD   l,a   
0225   7A                     LD   a,d   
0226   A4                     AND   h   
0227                AND1:        
0227   67                     LD   h,a   
0228   E5                     PUSH   hl   
0229   DD E9                  JP   (ix)   
022B                PIPE_:       
022B                OR:          
022B   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
022C   E1                     POP   hl   
022D   7B                     LD   a,e   
022E   B5                     OR   l   
022F   6F                     LD   l,a   
0230   7A                     LD   a,d   
0231   B4                     OR   h   
0232   18 F3                  JR   and1   
0234                             ; @ addr
0234                             ; -- ptr
0234                AT_:         
0234                ADDR:        
0234   ED 5B F4 4F            LD   de,(vPointer)   
0238   21 F4 4F               LD   hl,vPointer   
023B   C3 9C 04               JP   variable   
023E                BANG_:       ; logical invert, any non zero value
023E   03                     INC   bc   
023F   0A                     LD   a,(bc)   
0240   FE 3D                  CP   "="   
0242   20 04                  JR   nz,not   
0244   E1                     POP   hl   
0245   D1                     POP   de   
0246   18 55                  JR   notequals   
0248                NOT:         
0248   0B                     DEC   bc   
0249   21 00 00               LD   hl,0   ; is considered true
024C   18 2A                  JR   eq1   
024E                MINUS_:      
024E   03                     INC   bc   ; check if sign of a number
024F   0A                     LD   a,(bc)   
0250   0B                     DEC   bc   
0251   FE 30                  CP   "0"   
0253   38 04                  JR   c,sub   
0255   FE 3A                  CP   "9"+1   
0257   38 12                  JR   c,num_   
0259                SUB:         ; Subtract the value 2nd on stack from top of stack
0259   03                     INC   bc   
025A   FE 2D                  CP   "-"   
025C   20 05                  JR   nz,sub1   
025E   E1                     POP   hl   
025F   2B                     DEC   hl   
0260   C3 9E 07               JP   assign0   
0263                SUB1:        
0263   0B                     DEC   bc   
0264   D1                     POP   de   
0265   E1                     POP   hl   
0266   B7                     OR   a   
0267   ED 52                  SBC   hl,de   
0269   18 A8                  JR   add3   
026B                NUM_:        
026B   C3 3D 0B               JP   num   
026E                EQ_:         
026E   CD F8 0B               CALL   jumpTable   
0271   3D                     DB   "="   
0272   77                     DB   lsb(eq0_)   
0273   00                     DB   NUL   
0274   C3 9C 07               JP   assign   
0277                EQ0_:        
0277   E1                     POP   hl   
0278                EQ1:         
0278   D1                     POP   de   
0279   18 1B                  JR   equals   
027B                GT_:         
027B   03                     INC   bc   
027C   0A                     LD   a,(bc)   
027D   FE 3E                  CP   ">"   
027F   CA 85 0B               JP   z,shiftRight   
0282   D1                     POP   de   
0283   E1                     POP   hl   
0284   18 09                  JR   lt1   
0286                LT_:         
0286   03                     INC   bc   
0287   0A                     LD   a,(bc)   
0288   FE 3C                  CP   "<"   
028A   CA 75 0B               JP   z,shiftLeft   
028D   E1                     POP   hl   
028E   D1                     POP   de   
028F                LT1:         
028F   FE 3D                  CP   "="   
0291   28 11                  JR   z,lessthaneq   
0293   0B                     DEC   bc   
0294   18 13                  JR   lessthan   
0296                             ; hl = value1, de = value2
0296                             ; hl = result
0296                EQUALS:      
0296   B7                     OR   a   ; reset the carry flag
0297   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0299   28 16                  JR   z,true1   
029B   18 1A                  JR   false1   
029D                NOTEQUALS:      
029D   B7                     OR   a   ; reset the carry flag
029E   ED 52                  SBC   hl,de   
02A0   20 0F                  JR   nz,true1   
02A2   18 13                  JR   false1   
02A4                             ; hl = value1 de = value2
02A4                             ; hl = result
02A4                LESSTHANEQ:      
02A4   B7                     OR   a   
02A5   ED 52                  SBC   hl,de   
02A7   18 05                  JR   lessthan1   
02A9                             ; hl = value1 de = value2
02A9                             ; hl = result
02A9                LESSTHAN:      
02A9   B7                     OR   a   
02AA   ED 52                  SBC   hl,de   
02AC   28 09                  JR   z,false1   
02AE                LESSTHAN1:      
02AE   FA B7 02               JP   m,false1   
02B1                TRUE1:       
02B1   21 FF FF               LD   hl,TRUE   
02B4   E5                     PUSH   hl   
02B5   DD E9                  JP   (ix)   
02B7                NULL1:       
02B7                FALSE1:      
02B7   21 00 00               LD   hl,FALSE   
02BA   E5                     PUSH   hl   
02BB                NOP_:        
02BB   DD E9                  JP   (ix)   
02BD                RPAREN_:      
02BD   C3 6D 0B               JP   rparen   
02C0                DOLLAR_:      
02C0   C3 C2 0A               JP   dollar   
02C3                LBRACK_:      
02C3   C3 E2 06               JP   lbrack   
02C6                RBRACK_:      
02C6   C3 FE 06               JP   rbrack   
02C9                PERCENT_:      
02C9   C3 AD 06               JP   percent   
02CC                LPAREN_:      
02CC                LBRACE_:      
02CC   C3 AD 07               JP   lbrace   
02CF                RBRACE_:      
02CF   C3 16 08               JP   rbrace   
02D2                TICK_:       
02D2   C3 9D 08               JP   tick   
02D5                SEMICOLON_:      
02D5   C3 8D 06               JP   semicolon   
02D8                DOT_:        
02D8   C3 A2 04               JP   dot   
02DB                COLON_:      
02DB   C3 8F 06               JP   colon   
02DE                UPCASE_:      
02DE   C3 DF 0A               JP   upcase   
02E1                LOWCASE_:      
02E1   C3 E4 0A               JP   lowcase   
02E4                QUESTION_:      
02E4   C3 F6 0A               JP   question   
02E7                STAR_:       
02E7   C3 21 0B               JP   star   
02EA                HASH_:       
02EA   C3 4E 07               JP   hash   
02ED                CARET_:      
02ED   C3 23 0A               JP   caret   
02F0                COMMA_:      
02F0   C3 8D 06               JP   comma   
02F3                DQUOTE_:      
02F3   C3 98 0B               JP   dquote   
02F6                BACKSLASH_:      
02F6   C3 8D 06               JP   backslash   
02F9                UNDERSCORE_:      
02F9   C3 8D 06               JP   underscore   
02FC                TILDE_:      
02FC   C3 8D 06               JP   tilde   
02FF                SLASH_:      
02FF   18 00                  JR   slash   
0301                             ;********************** PAGE 2 END *********************************************
0301                             ;********************** PAGE 3 BEGIN *********************************************
0301                SLASH:       
0301                COMMAND:      
0301   03                     INC   bc   
0302   0A                     LD   a,(bc)   
0303   FE 2F                  CP   "/"   ; // comment
0305   CA FA 03               JP   z,comment   
0308   0B                     DEC   bc   
0309   CD E4 0B               CALL   commandTable   
030C   27                     DB   lsb(command_a_)   
030D   34                     DB   lsb(command_b_)   
030E   66                     DB   lsb(command_nop_)   
030F   68                     DB   lsb(decimal_)   
0310   66                     DB   lsb(command_nop_)   
0311   3F                     DB   lsb(command_f_)   
0312   66                     DB   lsb(command_nop_)   
0313   77                     DB   lsb(hexadecimal_)   
0314   42                     DB   lsb(command_i_)   
0315   66                     DB   lsb(command_nop_)   
0316   7D                     DB   lsb(key_)   
0317   66                     DB   lsb(command_nop_)   
0318   4B                     DB   lsb(command_m_)   
0319   66                     DB   lsb(command_nop_)   
031A   80                     DB   lsb(output_)   
031B   4E                     DB   lsb(command_p_)   
031C   57                     DB   lsb(command_q_)   
031D   60                     DB   lsb(command_r_)   
031E   66                     DB   lsb(command_nop_)   
031F   83                     DB   lsb(true_)   
0320   66                     DB   lsb(command_nop_)   
0321   63                     DB   lsb(command_v_)   
0322   86                     DB   lsb(words_)   
0323   89                     DB   lsb(xor_)   
0324   66                     DB   lsb(command_nop_)   
0325   66                     DB   lsb(command_nop_)   
0326   70                     DB   lsb(div_)   
0327                COMMAND_A_:      
0327   CD F8 0B               CALL   jumpTable   
032A   62                     DB   "b"   ; /ab absolute
032B   94                     DB   lsb(absolute_)   
032C   64                     DB   "d"   ; /ad address of
032D   A1                     DB   lsb(addrOf_)   
032E   73                     DB   "s"   ; /as array size
032F   C2                     DB   lsb(arraySize_)   
0330   00                     DB   NUL   
0331   C3 74 03               JP   error1_   
0334                COMMAND_B_:      
0334   CD F8 0B               CALL   jumpTable   
0337   72                     DB   "r"   ; /br break
0338   CA                     DB   lsb(break_)   
0339   79                     DB   "y"   ; /by cold boot
033A   CD                     DB   lsb(coldStart_)   
033B   00                     DB   NUL   
033C   C3 D0 03               JP   bytes_   ; /b bytes
033F                COMMAND_F_:      
033F   C3 03 04               JP   command_f   
0342                COMMAND_I_:      
0342   CD F8 0B               CALL   jumpTable   
0345   6E                     DB   "n"   ; /in input
0346   D8                     DB   lsb(input_)   
0347   00                     DB   NUL   
0348   C3 74 03               JP   error1_   
034B                COMMAND_M_:      
034B   C3 37 04               JP   command_m   
034E                COMMAND_P_:      
034E   CD F8 0B               CALL   jumpTable   
0351   63                     DB   "c"   ; /pc print chars
0352   E3                     DB   lsb(printChars_)   
0353   00                     DB   NUL   
0354   C3 74 03               JP   error1_   
0357                COMMAND_Q_:      
0357   CD F8 0B               CALL   jumpTable   
035A   74                     DB   "t"   ; /qt quit
035B   EA                     DB   lsb(quit_)   
035C   00                     DB   NUL   
035D   C3 74 03               JP   error1_   
0360                COMMAND_R_:      
0360   C3 43 04               JP   command_r   
0363                COMMAND_V_:      
0363   C3 5F 04               JP   command_v   
0366                COMMAND_NOP_:      
0366   DD E9                  JP   (ix)   
0368                DECIMAL_:      
0368   21 0A 00               LD   hl,10   
036B                DECIMAL1:      
036B   22 E8 4F               LD   (vNumBase),hl   
036E   DD E9                  JP   (ix)   
0370                DIV_:        
0370   00                     DB   NUL   
0371   C3 4E 09               JP   div   
0374                ERROR1_:      
0374   C3 60 0D               JP   error1   
0377                HEXADECIMAL_:      
0377   21 10 00               LD   hl,16   
037A   C3 6B 03               JP   decimal1   
037D                KEY_:        
037D   C3 7D 03               JP   key_   
0380                OUTPUT_:      
0380   C3 18 0B               JP   output   
0383                TRUE_:       
0383   C3 B1 02               JP   true1   
0386                WORDS_:      
0386   C3 F4 03               JP   words   
0389                XOR_:        
0389   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
038A                XOR1:        
038A   E1                     POP   hl   
038B   7B                     LD   a,e   
038C   AD                     XOR   l   
038D   6F                     LD   l,a   
038E   7A                     LD   a,d   
038F   AC                     XOR   h   
0390   67                     LD   h,a   
0391   E5                     PUSH   hl   
0392   DD E9                  JP   (ix)   
0394                             ; /ab absolute
0394                             ; num -- num
0394                ABSOLUTE_:      
0394   E1                     POP   hl   
0395   CB 7C                  BIT   7,h   
0397   C8                     RET   z   
0398   AF                     XOR   a   
0399   95                     SUB   l   
039A   6F                     LD   l,a   
039B   9F                     SBC   a,a   
039C   94                     SUB   h   
039D   67                     LD   h,a   
039E   E5                     PUSH   hl   
039F   DD E9                  JP   (ix)   
03A1                             ; /ad addrOf
03A1                             ; char -- addr
03A1                ADDROF_:      
03A1   E1                     POP   hl   ; a = char
03A2   7D                     LD   a,l   
03A3   FE 7B                  CP   "z"+1   ; if a > z then exit
03A5   30 19                  JR   nc,addrOf2   
03A7   D6 41                  SUB   "A"   ; a - 65
03A9   38 15                  JR   c,addrOf2   ; if < A then exit
03AB   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
03AD   38 06                  JR   c,addrOf1   
03AF   D6 06                  SUB   "a"-("Z"+1)   
03B1   FE 1A                  CP   "Z"-"A"+1   
03B3   38 0B                  JR   c,addrOf2   ; if < a then exit
03B5                ADDROF1:      
03B5   87                     ADD   a,a   ; double a
03B6   21 00 4F               LD   hl,VARS   ; hl = VARS + a
03B9   85                     ADD   a,l   
03BA   6F                     LD   l,a   
03BB   3E 00                  LD   a,0   
03BD   8C                     ADC   a,h   
03BE   67                     LD   h,a   
03BF   E5                     PUSH   hl   
03C0                ADDROF2:      
03C0   DD E9                  JP   (ix)   
03C2                             ; /as size of an array, num elements, ignores vDataWidth :-/
03C2                             ; array* -- num
03C2                ARRAYSIZE_:      
03C2   E1                     POP   hl   
03C3   2B                     DEC   hl   ; msb size
03C4   56                     LD   d,(hl)   
03C5   2B                     DEC   hl   ; lsb size
03C6   5E                     LD   e,(hl)   
03C7   D5                     PUSH   de   
03C8   DD E9                  JP   (ix)   
03CA                             ; /br
03CA                BREAK_:      
03CA   C3 83 08               JP   break   
03CD                             ; /by
03CD                COLDSTART_:      
03CD   C3 A9 0C               JP   coldStart   
03D0                             ; /b
03D0                BYTES_:      
03D0   21 01 00               LD   hl,1   
03D3                BYTES1:      
03D3   22 E6 4F               LD   (vDataWidth),hl   
03D6   DD E9                  JP   (ix)   
03D8                             ; Z80 port input
03D8                             ; port -- value
03D8                INPUT_:      
03D8   E1                     POP   hl   
03D9   59                     LD   e,c   ; save IP
03DA   4D                     LD   c,l   
03DB   ED 68                  IN   l,(c)   
03DD   26 00                  LD   h,0   
03DF   4B                     LD   c,e   ; restore IP
03E0   E5                     PUSH   hl   
03E1   DD E9                  JP   (ix)   
03E3                             ; /pc printChars
03E3                             ; char* len --
03E3                PRINTCHARS_:      
03E3   E1                     POP   hl   ; hl = count
03E4   D1                     POP   de   ; de = char*
03E5   CD C6 0B               CALL   printChars2   
03E8   DD E9                  JP   (ix)   
03EA                             ; /qt
03EA                QUIT_:       
03EA   E1                     POP   hl   ; hl = condition, exit if true
03EB   7D                     LD   a,l   
03EC   B4                     OR   h   
03ED   20 02                  JR   nz,quit1   
03EF   DD E9                  JP   (ix)   
03F1                QUIT1:       
03F1   C3 16 08               JP   blockEnd   
03F4                             ; /w
03F4                WORDS:       
03F4   21 02 00               LD   hl,2   
03F7   C3 D3 03               JP   bytes1   
03FA                             ; //
03FA                COMMENT:      
03FA   03                     INC   bc   ; point to next char
03FB   0A                     LD   a,(bc)   
03FC   FE 20                  CP   " "   ; terminate on any char less than SP
03FE   30 FA                  JR   nc,comment   
0400   0B                     DEC   bc   
0401   DD E9                  JP   (ix)   
0403                             ;********************** PAGE 3 END *********************************************
0403                             ;********************** PAGE 4 BEGIN *********************************************
0403                COMMAND_F:      
0403   CD F8 0B               CALL   jumpTable   
0406   65                     DB   "e"   ; /fe forEach
0407   1A                     DB   lsb(forEach_)   
0408   6C                     DB   "l"   ; /fl flush output buffer
0409   1D                     DB   lsb(flush_)   
040A   73                     DB   "s"   ; /fs funcSrc
040B   22                     DB   lsb(funcSrc_)   
040C   31                     DB   "1"   
040D   25                     DB   lsb(f1_)   
040E   32                     DB   "2"   
040F   28                     DB   lsb(f2_)   
0410   33                     DB   "3"   
0411   2B                     DB   lsb(f3_)   
0412   34                     DB   "4"   
0413   2E                     DB   lsb(f4_)   
0414   7A                     DB   "z"   
0415   31                     DB   lsb(fz_)   
0416   00                     DB   NUL   
0417   C3 34 04               JP   false_   
041A                FOREACH_:      
041A   C3 F7 04               JP   forEach   
041D                             ; /fl flush
041D                             ; --
041D                FLUSH_:      
041D   CD CD 0B               CALL   flushBuffer   
0420   DD E9                  JP   (ix)   
0422                FUNCSRC_:      
0422   C3 44 05               JP   funcSrc   
0425                F1_:         
0425   C3 AC 0D               JP   f1   
0428                F2_:         
0428   C3 B8 0D               JP   f2   
042B                F3_:         
042B   C3 C4 0D               JP   f3   
042E                F4_:         
042E   C3 D0 0D               JP   f4   
0431                FZ_:         
0431   C3 16 0A               JP   fz   
0434                FALSE_:      
0434   C3 B7 02               JP   false1   
0437                COMMAND_M:      
0437   CD F8 0B               CALL   jumpTable   
043A   70                     DB   "p"   ; /mp map
043B   40                     DB   lsb(map_)   
043C   00                     DB   NUL   
043D   C3 74 03               JP   error1_   
0440                MAP_:        
0440   C3 C7 05               JP   map   
0443                COMMAND_R:      
0443   CD F8 0B               CALL   jumpTable   
0446   63                     DB   "c"   ; /rc tail call optimisation
0447   50                     DB   lsb(recur_)   
0448   65                     DB   "e"   ; /re remainder
0449   56                     DB   lsb(remain_)   
044A   67                     DB   "g"   ; /rg range src
044B   5C                     DB   lsb(rangeSrc_)   
044C   00                     DB   NUL   
044D   C3 74 03               JP   error1_   
0450                RECUR_:      
0450   E1                     POP   hl   
0451   22 F2 4F               LD   (vRecur),hl   
0454   DD E9                  JP   (ix)   
0456                REMAIN_:      
0456   2A F6 4F               LD   hl,(vRemain)   
0459   E5                     PUSH   hl   
045A   DD E9                  JP   (ix)   
045C                RANGESRC_:      
045C   C3 0B 06               JP   rangeSrc   
045F                COMMAND_V:      
045F   CD F8 0B               CALL   jumpTable   
0462   62                     DB   "b"   
0463   81                     DB   lsb(varBufPtr_)   
0464   68                     DB   "h"   
0465   8A                     DB   lsb(varHeapPtr_)   
0466   74                     DB   "t"   
0467   93                     DB   lsb(varTIBPtr_)   
0468   42                     DB   "B"   
0469   72                     DB   lsb(constBufStart_)   
046A   48                     DB   "H"   
046B   77                     DB   lsb(constHeapStart_)   
046C   54                     DB   "T"   
046D   7C                     DB   lsb(constTIBStart_)   
046E   00                     DB   NUL   
046F   C3 74 03               JP   error1_   
0472                CONSTBUFSTART_:      
0472   11 00 4E               LD   de,BUF   
0475   18 28                  JR   constant   
0477                CONSTHEAPSTART_:      
0477   11 1C 50               LD   de,HEAP   
047A   18 23                  JR   constant   
047C                CONSTTIBSTART_:      
047C   11 00 4D               LD   de,TIB   
047F   18 1E                  JR   constant   
0481                VARBUFPTR_:      
0481   ED 5B EC 4F            LD   de,(vBufPtr)   
0485   21 EC 4F               LD   hl,vBufPtr   
0488   18 12                  JR   variable   
048A                VARHEAPPTR_:      
048A   ED 5B F0 4F            LD   de,(vHeapPtr)   
048E   21 F0 4F               LD   hl,vHeapPtr   
0491   18 09                  JR   variable   
0493                VARTIBPTR_:      
0493   ED 5B EA 4F            LD   de,(vTIBPtr)   
0497   21 EA 4F               LD   hl,vTIBPtr   
049A   18 00                  JR   variable   
049C                VARIABLE:      
049C   22 F4 4F               LD   (vPointer),hl   
049F                CONSTANT:      
049F   D5                     PUSH   de   
04A0   DD E9                  JP   (ix)   
04A2                DOT:         
04A2   CD F8 0B               CALL   jumpTable   
04A5   61                     DB   "a"   ; .a print array
04A6   7F                     DB   lsb(dotArray)   
04A7   63                     DB   "c"   ; .c print char
04A8   D6                     DB   lsb(dotChar_)   
04A9   73                     DB   "s"   ; .s print string
04AA   BC                     DB   lsb(dotString_)   
04AB   78                     DB   "x"   ; .x print x chars
04AC   DB                     DB   lsb(dotXChars_)   
04AD   00                     DB   NUL   ; .  print number
04AE   C3 B1 04               JP   dotNumber_   
04B1                             ; /bd buffer decimal
04B1                             ; value --
04B1                DOTNUMBER_:      
04B1   3A E8 4F               LD   a,(vNumBase)   
04B4   FE 10                  CP   16   
04B6   CA C5 09               JP   z,bufferHex   ; else falls through
04B9   C3 5F 09               JP   bufferDec   
04BC                             ; /bs buffered string
04BC                             ; string* --
04BC                DOTSTRING_:      
04BC   E1                     POP   hl   ; hl = string*
04BD   ED 5B EC 4F            LD   de,(vBufPtr)   ; de = buffer*
04C1   18 06                  JR   dotString1   
04C3                DOTSTRING0:      
04C3   12                     LD   (de),a   ; a -> buffer*
04C4   1C                     INC   e   ; buffer*++, wraparound
04C5   CC CD 0B               CALL   z,flushBuffer   
04C8   23                     INC   hl   
04C9                DOTSTRING1:      
04C9   7E                     LD   a,(hl)   ; a <- string*
04CA   B7                     OR   a   ; if NUL exit loop
04CB   20 F6                  JR   nz,dotString0   
04CD   2A EC 4F               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
04D0   ED 53 EC 4F            LD   (vBufPtr),de   ; save buffer*' in pointer
04D4   DD E9                  JP   (ix)   
04D6                             ; /bc buffer char
04D6                             ; char --
04D6                DOTCHAR_:      
04D6   21 01 00               LD   hl,1   
04D9   18 01                  JR   dotXChars0   
04DB                             ; /bx buffered x chars
04DB                             ; char length --
04DB                DOTXCHARS_:      
04DB   E1                     POP   hl   ; hl = length
04DC                DOTXCHARS0:      
04DC   D1                     POP   de   ; a' = char
04DD   7B                     LD   a,e   
04DE   08                     EX   af,af'   
04DF   ED 5B EC 4F            LD   de,(vBufPtr)   ; de = buffer*
04E3   18 08                  JR   dotXChars2   
04E5                DOTXCHARS1:      
04E5   08                     EX   af,af'   
04E6   12                     LD   (de),a   
04E7   08                     EX   af,af'   
04E8   1C                     INC   e   ; buffer*++, wraparound
04E9   CC CD 0B               CALL   z,flushBuffer   
04EC   2B                     DEC   hl   
04ED                DOTXCHARS2:      
04ED   7D                     LD   a,l   
04EE   B4                     OR   h   
04EF   20 F4                  JR   nz,dotXChars1   
04F1   ED 53 EC 4F            LD   (vBufPtr),de   ; save buffer*'
04F5   DD E9                  JP   (ix)   
04F7                             ;********************** PAGE 4 END *********************************************
04F7                             ;*******************************************************************
04F7                             ; Monty implementations
04F7                             ;*******************************************************************
04F7                             ; /fe forEach
04F7                             ; src proc --
04F7                          ;*Macro unroll: FUNC forEach, 1, "spT"
04F7                FOREACH:      
04F7   CD 23 0A               CALL   go   
04FA   00 00                  DW   NUL   
04FC   05 05                  DW   forEachM_1327S858   
04FE   00 05                  DW   $+2   
0500   01                     DB   1   
0501   03 73 70 54            .PSTR   "spT"   
0505                FOREACHM_1327S858:      
0505   7B                     DB   "{"   
0506   5B 30 5D 25 54 3D      DB   "[0]%T="   
050C   3A 64 74 7B            DB   ":dt{"   ; return talkback to receive data ; $56AA
0510   32 25 74 21 3D 7B      DB   "2%t!={"   ; if type == 2 skip
0516   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
051B   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
052D   3F 3F                  DB   "??"   ; ifte:
052F   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0538   7D 3F                  DB   "}?"   
053A   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   
0542   7D                     DB   "}"   
0543   00                     DB   0   
0544                             ; ; /fs funcSrc
0544                             ; ; func -- src
0544                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0544                FUNCSRC:      ; :f func or block
0544   CD 23 0A               CALL   go   
0547   00 00                  DW   NUL   
0549   50 05                  DW   funcSrcM_1342S874   
054B   4D 05                  DW   $+2   
054D   00                     DB   0   
054E   01 66                  .PSTR   "f"   
0550                FUNCSRCM_1342S874:      
0550   7B                     DB   "{"   
0551   3A 6B 74 7B            DB   ":kt{"   ; :kt sink, type
0555   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
055D   3A 64 74 7B            DB   ":dt{"   
0561   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0573   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
057B   7D 3B                  DB   "};"   
057D   7D                     DB   "}"   
057E   00                     DB   0   
057F                          ;*Macro unroll: FUNC dotArray, 2, "abc"
057F                DOTARRAY:      
057F   CD 23 0A               CALL   go   
0582   00 00                  DW   NUL   
0584   8D 05                  DW   dotArrayM_1352S885   
0586   88 05                  DW   $+2   
0588   02                     DB   2   
0589   03 61 62 63            .PSTR   "abc"   
058D                DOTARRAYM_1352S885:      
058D   7B                     DB   "{"   
058E   60 5B 20 60 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 60 5D 60 2E 73 DB   "`[ `.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ `]`.s"   
05C5   7D                     DB   "}"   
05C6   00                     DB   0   
05C7                             ; /mp map
05C7                             ; src func -- src1
05C7                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map
05C7                MAP:         ; map
05C7   CD 23 0A               CALL   go   
05CA   00 00                  DW   NUL   
05CC   D4 05                  DW   mapM_1359S893   
05CE   D0 05                  DW   $+2   
05D0   00                     DB   0   
05D1   02 73 66               .PSTR   "sf"   
05D4                MAPM_1359S893:      
05D4   7B                     DB   "{"   
05D5   3A 6B 74 7B            DB   ":kt{"   
05D9   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
05E1   3A 64 74 7B            DB   ":dt{"   ; call source with tb
05E5   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
05EA   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
05F6   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
05FF   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   
0607   7D 3B                  DB   "};"   
0609   7D                     DB   "}"   
060A   00                     DB   0   
060B                             ; /rg rangeSrc
060B                             ; begin end step -- src
060B                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source (begin end step)
060B                RANGESRC:      ; range source (begin end step)
060B   CD 23 0A               CALL   go   
060E   00 00                  DW   NUL   
0610   1A 06                  DW   rangeSrcM_1373S908   
0612   14 06                  DW   $+2   
0614   01                     DB   1   
0615   04 62 65 73 4C         .PSTR   "besL"   
061A                RANGESRCM_1373S908:      
061A   7B                     DB   "{"   
061B   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
0626   3A 6B 74 7B            DB   ":kt{"   
062A   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
0632   3A 64 74 3A 61 7B      DB   ":dt:a{"   ; return talkback to receive data
0638   25 4C 31 23 2F 62 72   DB   "%L1#/br"   ; if not active don't send
063F   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
0647   25 73 20 25 4C 30 23 20 2B 20 25 4C 30 23 3D DB   "%s %L0# + %L0#="   ; inc value of index by step
0656   31 25 74 3D 3D 2F 62 72 DB   "1%t==/br"   ; break if type != 0
065E   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
0665   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: 1: send index, 2: active = false, send quit
0679   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
0681   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
0689   7D 3B                  DB   "};"   
068B   7D                     DB   "}"   
068C   00                     DB   0   
068D                             ;*******************************************************************
068D                             ; unused opcodes (reserved)
068D                             ;*******************************************************************
068D                BACKSLASH:      
068D                UNDERSCORE:      
068D                TILDE:       
068D                COMMA:       
068D                SEMICOLON:      
068D   DD E9                  JP   (ix)   
068F                             ;*******************************************************************
068F                             ; implementations
068F                             ;*******************************************************************
068F                             ; _ func
068F                             ; -- func*
068F                COLON:       
068F                LAMBDA:      
068F   DD E5                  PUSH   ix   
0691   DD 21 98 06            LD   ix,lambda1   
0695   C3 66 07               JP   arglist   
0698                LAMBDA1:      
0698   03                     INC   bc   
0699   DD 21 A0 06            LD   ix,lambda2   
069D   C3 AD 07               JP   blockStart   
06A0                LAMBDA2:      
06A0   DD 21 A7 06            LD   ix,lambda3   
06A4   C3 B2 08               JP   createFunc   
06A7                LAMBDA3:      
06A7   E1                     POP   hl   
06A8   DD E1                  POP   ix   
06AA   E5                     PUSH   hl   
06AB   DD E9                  JP   (ix)   
06AD                             ; %a .. %z
06AD                             ; -- value
06AD                             ; returns value of arg
06AD                PERCENT:      
06AD                ARG:         
06AD   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
06B0   FD 56 05               LD   d,(iy+5)   
06B3   EB                     EX   de,hl   
06B4   7D                     LD   a,l   ; arg_list* == null, skip
06B5   B4                     OR   h   
06B6   28 1A                  JR   z,arg0a   
06B8   23                     INC   hl   ; a = num_args, hl = arg_list*
06B9   7E                     LD   a,(hl)   
06BA   23                     INC   hl   
06BB   B7                     OR   a   
06BC   28 14                  JR   z,arg0a   ; num_args == 0, skip
06BE   5F                     LD   e,a   ; e = a = num_args
06BF   03                     INC   bc   ; a = next char = dollar_name
06C0   0A                     LD   a,(bc)   
06C1   C5                     PUSH   bc   ; save IP
06C2   43                     LD   b,e   ; b = e = num_args
06C3   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
06C6   FD 56 03               LD   d,(iy+3)   
06C9                ARG0:        
06C9   1B                     DEC   de   ; a = dollar_name, de = next arg*
06CA   1B                     DEC   de   
06CB   BE                     CP   (hl)   
06CC   28 09                  JR   z,arg1   
06CE   23                     INC   hl   ; hl = next arg_list*
06CF   10 F8                  DJNZ   arg0   
06D1   C1                     POP   bc   ; no match, restore IP
06D2                ARG0A:       
06D2   11 00 00               LD   de,0   ; return 0
06D5   18 08                  JR   arg1a   
06D7                ARG1:        
06D7   C1                     POP   bc   ; restore IP
06D8   EB                     EX   de,hl   ; hl = arg*
06D9   22 F4 4F               LD   (vPointer),hl   ; store arg* in setter
06DC   5E                     LD   e,(hl)   
06DD   23                     INC   hl   
06DE   56                     LD   d,(hl)   ; de = arg
06DF                ARG1A:       
06DF   D5                     PUSH   de   ; push arg
06E0   DD E9                  JP   (ix)   
06E2                LBRACK:      
06E2                ARRAYSTART:      
06E2   11 00 00               LD   de,0   ; create stack frame
06E5   D5                     PUSH   de   ; push null for IP
06E6   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
06E9   FD 56 05               LD   d,(iy+5)   ; 
06EC   D5                     PUSH   de   ; 
06ED   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
06F0   FD 56 03               LD   d,(iy+3)   ; 
06F3   D5                     PUSH   de   ; 
06F4   FD E5                  PUSH   iy   ; push BP
06F6   FD 21 00 00            LD   iy,0   ; BP = SP
06FA   FD 39                  ADD   iy,sp   
06FC   DD E9                  JP   (ix)   
06FE                RBRACK:      
06FE                ARRAYEND:      
06FE   FD 54                  LD   d,iyh   ; de = BP
0700   FD 5D                  LD   e,iyl   
0702   ED 43 00 50            LD   (vTemp1),bc   ; save IP
0706   62 6B                  LD   hl,de   ; hl = de = BP
0708   B7                     OR   a   
0709   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
070B   CB 3C                  SRL   h   ; 
070D   CB 1D                  RR   l   
070F   44 4D                  LD   bc,hl   ; bc = count
0711   2A F0 4F               LD   hl,(vHeapPtr)   ; hl = array[-4]
0714   71                     LD   (hl),c   ; write num items in length word
0715   23                     INC   hl   
0716   70                     LD   (hl),b   
0717   23                     INC   hl   ; hl = array[0], bc = count
0718                             ; de = BP, hl = array[0], bc = count
0718   18 15                  JR   arrayEnd3   
071A                ARRAYEND1:      
071A   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
071D   77                     LD   (hl),a   ; write lsb of array item
071E   23                     INC   hl   ; move to msb of array item
071F   3A E6 4F               LD   a,(vDataWidth)   ; vDataWidth=1?
0722   3D                     DEC   a   
0723   28 05                  JR   z,arrayEnd2   
0725   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0728   77                     LD   (hl),a   ; write msb of array item
0729   23                     INC   hl   ; move to next word in array
072A                ARRAYEND2:      
072A   FD 2B                  DEC   iy   ; move to next word on stack
072C   FD 2B                  DEC   iy   
072E   0B                     DEC   bc   ; dec items count
072F                ARRAYEND3:      
072F   79                     LD   a,c   ; if not zero loop
0730   B0                     OR   b   
0731   20 E7                  JR   nz,arrayEnd1   
0733   EB                     EX   de,hl   ; de = end of array, hl = BP
0734   F9                     LD   sp,hl   ; sp = BP
0735   E1                     POP   hl   ; de = end of array, hl = old BP
0736   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0737   FD 62                  LD   iyh,d   
0739   FD 6B                  LD   iyl,e   
073B   D1                     POP   de   ; pop arg_list (discard)
073C   D1                     POP   de   ; pop first_arg* (discard)
073D   D1                     POP   de   ; pop IP (discard)
073E   ED 5B F0 4F            LD   de,(vHeapPtr)   ; de = array[-2]
0742   13                     INC   de   
0743   13                     INC   de   
0744   D5                     PUSH   de   ; return array[0]
0745   22 F0 4F               LD   (vHeapPtr),hl   ; move heap* to end of array
0748   ED 4B 00 50            LD   bc,(vTemp1)   ; restore IP
074C   DD E9                  JP   (ix)   
074E                             ; index of an array, based on vDataWidth
074E                             ; array* num -- value    ; also sets vPointer to address
074E                HASH:        
074E                ARRAYINDEX:      
074E   E1                     POP   hl   ; hl = index
074F   D1                     POP   de   ; de = array
0750   3A E6 4F               LD   a,(vDataWidth)   ; a = data width
0753   3D                     DEC   a   
0754   28 01                  JR   z,arrayIndex1   
0756                ARRAYINDEX0:      
0756   29                     ADD   hl,hl   ; if data width = 2 then double
0757                ARRAYINDEX1:      
0757   19                     ADD   hl,de   ; add addr
0758   22 F4 4F               LD   (vPointer),hl   ; store address in setter
075B   16 00                  LD   d,0   
075D   5E                     LD   e,(hl)   
075E   B7                     OR   a   ; check data width again
075F   28 02                  JR   z,arrayIndex2   
0761   23                     INC   hl   
0762   56                     LD   d,(hl)   
0763                ARRAYINDEX2:      
0763   D5                     PUSH   de   
0764   DD E9                  JP   (ix)   
0766                             ; arg_list - parses input (ab:c)
0766                             ; names after the : represent uninitialised locals
0766                             ; return values are the state of the stack after the block ends
0766                             ; format: numLocals totNumArgs argChars...
0766                             ; colon:
0766                ARGLIST:      
0766   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0769   2A F0 4F               LD   hl,(vHeapPtr)   ; hl = heap*
076C   E5                     PUSH   hl   ; save start of arg_list
076D   23                     INC   hl   ; skip length fields to start of string
076E   23                     INC   hl   
076F   03                     INC   bc   ; point to next char
0770                ARGLIST1:      
0770   0A                     LD   a,(bc)   
0771   FE 3A                  CP   ":"   ; ":" switches from args to locals
0773   20 03                  JR   nz,arglist1a   
0775   14                     INC   d   ; non zero value local count acts as flag
0776   18 10                  JR   arglist3   
0778                ARGLIST1A:      
0778   FE 61                  CP   "a"   ; < "a" terminates arg_list
077A   38 0F                  JR   c,arglist4   
077C   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
077E   30 0B                  JR   nc,arglist4   
0780                ARGLIST2:      
0780   77                     LD   (hl),a   
0781   23                     INC   hl   
0782   1C                     INC   e   ; increase arg count
0783   AF                     XOR   a   
0784   B2                     OR   d   
0785   28 01                  JR   z,arglist3   
0787   14                     INC   d   ; if d > 0 increase local count
0788                ARGLIST3:      
0788   03                     INC   bc   ; point to next char
0789   18 E5                  JR   arglist1   
078B                ARGLIST4:      
078B   0B                     DEC   bc   
078C   AF                     XOR   a   
078D   B2                     OR   d   
078E   28 01                  JR   z,arglist5   
0790   15                     DEC   d   ; remove initial inc
0791                ARGLIST5:      
0791   23                     INC   hl   
0792   22 F0 4F               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0795   E1                     POP   hl   ; hl = start of arg_list
0796   E5                     PUSH   hl   ; return start of arg_list
0797   72                     LD   (hl),d   ; write number of locals at start - 1
0798   23                     INC   hl   
0799   73                     LD   (hl),e   ; write number of args + locals at start - 2
079A   DD E9                  JP   (ix)   
079C                             ; value _oldValue --            ; uses address in vPointer
079C                ASSIGN:      
079C   E1                     POP   hl   ; discard last accessed value
079D   E1                     POP   hl   ; hl = new value
079E                ASSIGN0:      
079E   EB                     EX   de,hl   ; de = new value
079F                ASSIGNX:      
079F   2A F4 4F               LD   hl,(vPointer)   
07A2   73                     LD   (hl),e   
07A3   3A E6 4F               LD   a,(vDataWidth)   
07A6   3D                     DEC   a   ; is it byte?
07A7   28 02                  JR   z,assign1   
07A9   23                     INC   hl   
07AA   72                     LD   (hl),d   
07AB                ASSIGN1:      
07AB   DD E9                  JP   (ix)   
07AD                LBRACE:      
07AD                BLOCKSTART:      
07AD   C5                     PUSH   bc   ; return pointer to first { of block
07AE   03                     INC   bc   
07AF   16 01                  LD   d,1   ; nesting: count first parenthesis
07B1                BLOCKSTART1:      ; Skip to end of definition
07B1   0A                     LD   a,(bc)   ; Get the next character
07B2   03                     INC   bc   ; Point to next character
07B3   FE 21                  CP   " " + 1   ; ignore whitespace
07B5   38 FA                  JR   c,blockStart1   
07B7   FE 29                  CP   ")"   
07B9   28 2D                  JR   z,blockStart4   
07BB   FE 7D                  CP   "}"   
07BD   28 29                  JR   z,blockStart4   
07BF   FE 5D                  CP   "]"   
07C1   28 25                  JR   z,blockStart4   
07C3   FE 28                  CP   "("   
07C5   28 16                  JR   z,blockStart2   
07C7   FE 7B                  CP   "{"   
07C9   28 12                  JR   z,blockStart2   
07CB   FE 5B                  CP   "["   
07CD   28 0E                  JR   z,blockStart2   
07CF   FE 27                  CP   "'"   
07D1   28 0D                  JR   z,blockStart3   
07D3   FE 60                  CP   "`"   
07D5   28 09                  JR   z,blockStart3   
07D7   FE 22                  CP   DQ   
07D9   28 05                  JR   z,blockStart3   
07DB   18 D4                  JR   blockStart1   
07DD                BLOCKSTART2:      
07DD   14                     INC   d   
07DE   18 D1                  JR   blockStart1   
07E0                BLOCKSTART3:      
07E0   3E 80                  LD   a,$80   
07E2   AA                     XOR   d   
07E3   57                     LD   d,a   
07E4   20 CB                  JR   nz,blockStart1   
07E6   18 03                  JR   blockStart5   
07E8                BLOCKSTART4:      
07E8   15                     DEC   d   
07E9   20 C6                  JR   nz,blockStart1   ; get the next element
07EB                BLOCKSTART5:      
07EB   60 69                  LD   hl,bc   ; hl = IP
07ED   11 1C 50               LD   de,HEAP   ; is IP pointing to object in heap
07F0   B7                     OR   a   ; IP - HEAP
07F1   ED 52                  SBC   hl,de   
07F3   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
07F5   28 1C                  JR   z,blockStart6   
07F7   60 69                  LD   hl,bc   ; hl = IP
07F9   D1                     POP   de   ; de = block*
07FA   ED 43 00 50            LD   (vTemp1),bc   ; save IP
07FE   B7                     OR   a   ; bc = size
07FF   ED 52                  SBC   hl,de   
0801   44 4D                  LD   bc,hl   
0803   EB                     EX   de,hl   ; hl = block* de = heap*
0804   ED 5B F0 4F            LD   de,(vHeapPtr)   
0808   D5                     PUSH   de   ; return hblock*
0809   ED B0                  LDIR      ; copy size bytes from block* to hblock*
080B   ED 53 F0 4F            LD   (vHeapPtr),de   ; heap* += size
080F   ED 4B 00 50            LD   bc,(vTemp1)   ; restore IP
0813                BLOCKSTART6:      
0813   0B                     DEC   bc   ; balanced, exit
0814   DD E9                  JP   (ix)   
0816                RBRACE:      
0816                BLOCKEND:      
0816   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0819   FD 56 01               LD   d,(iy+1)   
081C   ED 53 00 50            LD   (vTemp1),de   
0820   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0823   FD 56 07               LD   d,(iy+7)   
0826   ED 53 02 50            LD   (vTemp2),de   
082A   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
082D   FD 56 03               LD   d,(iy+3)   
0830   EB                     EX   de,hl   
0831   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0834   FD 56 01               LD   d,(iy+1)   
0837   13                     INC   de   ; for carry flag <=
0838   B7                     OR   a   
0839   ED 52                  SBC   hl,de   
083B   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
083D   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
083F   FD 5D                  LD   e,iyl   
0841   21 08 00               LD   hl,8   
0844   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0845   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0846   18 0C                  JR   blockEnd2   
0848                BLOCKEND1:      ; same scope
0848   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
084B   FD 56 03               LD   d,(iy+3)   
084E   EB                     EX   de,hl   
084F   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0851   FD 5D                  LD   e,iyl   
0853   EB                     EX   de,hl   
0854                BLOCKEND2:      
0854   44 4D                  LD   bc,hl   ; bc = hl = BP
0856   B7                     OR   a   ; hl = BP - SP = count
0857   ED 72                  SBC   hl,sp   
0859   7D                     LD   a,l   
085A   B4                     OR   h   
085B   28 09                  JR   z,blockEnd3   
085D   C5                     PUSH   bc   ; bc = count, hl = BP
085E   44 4D                  LD   bc,hl   
0860   E1                     POP   hl   
0861   2B                     DEC   hl   ; hl = BP-1
0862   1B                     DEC   de   ; de = args*-1
0863   ED B8                  LDDR      
0865   13                     INC   de   
0866                BLOCKEND3:      
0866   EB                     EX   de,hl   ; sp = de = new tos*
0867   F9                     LD   sp,hl   
0868   ED 4B 02 50            LD   bc,(vTemp2)   
086C   FD 2A 00 50            LD   iy,(vTemp1)   
0870   ED 5B F2 4F            LD   de,(vRecur)   ; de = recur vector
0874   7B                     LD   a,e   ; check for NUL
0875   B2                     OR   d   
0876   20 02                  JR   nz,blockEnd4   
0878   DD E9                  JP   (ix)   
087A                BLOCKEND4:      
087A   21 00 00               LD   hl,0   ; clear recur vector
087D   22 F2 4F               LD   (vRecur),hl   
0880   C3 24 0A               JP   go1   ; execute de
0883                             ; /br break from loop
0883                             ; --
0883                BREAK:       
0883   E1                     POP   hl   ; hl = condition, break if false
0884   7D                     LD   a,l   
0885   B4                     OR   h   
0886   28 02                  JR   z,break1   
0888   DD E9                  JP   (ix)   
088A                BREAK1:      
088A   FD 5D                  LD   e,iyl   ; get block* just under stack frame
088C   FD 54                  LD   d,iyh   
088E   21 08 00               LD   hl,8   
0891   19                     ADD   hl,de   
0892   23                     INC   hl   
0893   23                     INC   hl   
0894   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0897   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
089A   C3 16 08               JP   blockEnd   
089D                TICK:        
089D                CHAR:        
089D   21 00 00               LD   hl,0   ; if "" is empty or null
08A0                CHAR1:       
08A0   03                     INC   bc   ; point to next char
08A1   0A                     LD   a,(bc)   
08A2   FE 27                  CP   "'"   ; ' is the terminator
08A4   28 09                  JR   z,char3   
08A6   FE 5C                  CP   $5c   ; \ is the escape
08A8   20 02                  JR   nz,char2   
08AA   03                     INC   bc   
08AB   0A                     LD   a,(bc)   
08AC                CHAR2:       
08AC   6F                     LD   l,a   
08AD   18 F1                  JR   char1   
08AF                CHAR3:       
08AF   E5                     PUSH   hl   
08B0   DD E9                  JP   (ix)   
08B2                             ; ";" createFunc
08B2                             ; arg_list* block* -- func*
08B2                             ; semicolon:
08B2                CREATEFUNC:      
08B2   ED 43 00 50            LD   (vTemp1),bc   ; save IP
08B6   E1                     POP   hl   ; hl = block*
08B7   22 02 50               LD   (vTemp2),hl   ; save block*
08BA   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
08BD   FD 56 05               LD   d,(iy+5)   
08C0   7B                     LD   a,e   ; if arg_list == null then make a func
08C1   B2                     OR   d   
08C2   20 09                  JR   nz,createFunc0   
08C4   21 00 00               LD   hl,0   ; partial_array = null
08C7   ED 5B F0 4F            LD   de,(vHeapPtr)   ; de = compile*
08CB   18 65                  JR   createFunc5   
08CD                CREATEFUNC0:      
08CD   E1                     POP   hl   ; hl = inner_arg_list*
08CE   E5                     PUSH   hl   ; save inner_arg_list
08CF   ED 5B F0 4F            LD   de,(vHeapPtr)   ; de = compile*
08D3   7E                     LD   a,(hl)   ; compile inner_num_locals
08D4   4F                     LD   c,a   ; b = inner_num_locals
08D5   12                     LD   (de),a   
08D6   23                     INC   hl   
08D7   13                     INC   de   
08D8   7E                     LD   a,(hl)   ; compile inner_length
08D9   12                     LD   (de),a   
08DA   91                     SUB   c   ; a = inner_num args
08DB   23                     INC   hl   
08DC   13                     INC   de   
08DD   B7                     OR   a   ; compile args if inner_length > 0
08DE   28 05                  JR   z,createFunc1   
08E0   4F                     LD   c,a   ; bc = a
08E1   06 00                  LD   b,0   
08E3   ED B0                  LDIR      
08E5                CREATEFUNC1:      
08E5   EB                     EX   de,hl   ; hl = outer_arg_list
08E6   FD 5E 04               LD   e,(iy+4)   
08E9   FD 56 05               LD   d,(iy+5)   
08EC   EB                     EX   de,hl   
08ED   23                     INC   hl   ; a = outer_length
08EE   7E                     LD   a,(hl)   
08EF   23                     INC   hl   
08F0   B7                     OR   a   
08F1   28 05                  JR   z,createFunc2   
08F3   4F                     LD   c,a   
08F4   06 00                  LD   b,0   
08F6   ED B0                  LDIR      ; append outer_args
08F8                CREATEFUNC2:      ; a = outer_length
08F8   47                     LD   b,a   ; b = a = outer_length
08F9   2A F0 4F               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
08FC   23                     INC   hl   
08FD   7E                     LD   a,(hl)   ; add outer_length to new length
08FE   80                     ADD   a,b   
08FF   77                     LD   (hl),a   
0900   2B                     DEC   hl   
0901   78                     LD   a,b   ; save outer_length in a'
0902   08                     EX   af,af'   
0903   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0904   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0905   B7                     OR   a   
0906   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0908   4F                     LD   c,a   ; c = inner_num_locals
0909   06 00                  LD   b,0   ; bc = inner_num_locals
090B   23                     INC   hl   ; a = inner_length
090C   7E                     LD   a,(hl)   
090D   91                     SUB   c   ; a = inner_num_args
090E   23                     INC   hl   ; hl = inner_arg_chars
090F   85                     ADD   a,l   ; hl += a
0910   6F                     LD   l,a   
0911   3E 00                  LD   a,0   
0913   84                     ADD   a,h   
0914   67                     LD   h,a   
0915   ED B0                  LDIR      ; append inner_locals
0917                CREATEFUNC2A:      
0917   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0918   12                     LD   (de),a   ; compile partial_array length field
0919   13                     INC   de   
091A   AF                     XOR   a   
091B   12                     LD   (de),a   
091C   13                     INC   de   
091D   D5                     PUSH   de   ; push partial_array*
091E   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
091F   FD 5E 02               LD   e,(iy+2)   
0922   FD 56 03               LD   d,(iy+3)   
0925   EB                     EX   de,hl   
0926                CREATEFUNC3:      
0926   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0927   4E                     LD   c,(hl)   
0928   2B                     DEC   hl   
0929   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
092A   12                     LD   (de),a   ; write LSB and MSB to partial_array*
092B   13                     INC   de   
092C   79                     LD   a,c   
092D   12                     LD   (de),a   
092E   13                     INC   de   
092F   10 F5                  DJNZ   createFunc3   ; b = outer_length
0931                CREATEFUNC4:      
0931   E1                     POP   hl   ; hl = partial_array*
0932                CREATEFUNC5:      
0932   C1                     POP   bc   ; bc = new_arg_list*
0933   D5                     PUSH   de   ; return new func*
0934   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0935   73                     LD   (hl),e   ; compile partial_array* to func
0936   23                     INC   hl   
0937   72                     LD   (hl),d   
0938   23                     INC   hl   
0939   ED 5B 02 50            LD   de,(vTemp2)   ; de = block*
093D   73                     LD   (hl),e   ; compile block* to func
093E   23                     INC   hl   
093F   72                     LD   (hl),d   
0940   23                     INC   hl   
0941   71                     LD   (hl),c   ; compile new_arg_list* to func
0942   23                     INC   hl   
0943   70                     LD   (hl),b   
0944   23                     INC   hl   
0945   22 F0 4F               LD   (vHeapPtr),hl   ; bump heap ptr
0948   ED 4B 00 50            LD   bc,(vTemp1)   ; restore IP
094C   DD E9                  JP   (ix)   
094E                DIV:         
094E   D1                     POP   de   
094F   E1                     POP   hl   
0950   C5                     PUSH   bc   ; preserve the IP
0951   44 4D                  LD   bc,hl   
0953   CD FD 09               CALL   divide   
0956   EB                     EX   de,hl   
0957   ED 53 F6 4F            LD   (vRemain),de   
095B   C1                     POP   bc   
095C   C3 13 02               JP   add3   
095F                             ; /bd buffer decimal
095F                             ; value --
095F                BUFFERDEC:      
095F   ED 5B EC 4F            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0963   D9                     EXX      
0964   E1                     POP   hl   ; hl = value
0965   CD 79 09               CALL   bufferDec0   
0968   D9                     EXX      ; de = buffer*' bc = IP
0969   3E 20                  LD   a," "   ; append space to buffer
096B   12                     LD   (de),a   
096C   1C                     INC   e   ; buffer*++, wraparound
096D   CC CD 0B               CALL   z,flushBuffer   
0970   2A EC 4F               LD   hl,(vBufPtr)   ; hl = buffer*
0973   ED 53 EC 4F            LD   (vBufPtr),de   ; update buffer* with buffer*'
0977   DD E9                  JP   (ix)   
0979                             ; hl = value
0979                             ; de' = buffer*
0979                             ; a, bc, de, hl destroyed
0979                BUFFERDEC0:      
0979   CB 7C                  BIT   7,h   
097B   28 0C                  JR   z,bufferDec1   
097D   D9                     EXX      
097E   3E 2D                  LD   a,"-"   
0980   12                     LD   (de),a   
0981   13                     INC   de   
0982   D9                     EXX      
0983   AF                     XOR   a   
0984   95                     SUB   l   
0985   6F                     LD   l,a   
0986   9F                     SBC   a,a   
0987   94                     SUB   h   
0988   67                     LD   h,a   
0989                BUFFERDEC1:      
0989   0E 00                  LD   c,0   ; leading zeros flag = false
098B   11 F0 D8               LD   de,-10000   
098E   CD A9 09               CALL   bufferDec2   
0991   11 18 FC               LD   de,-1000   
0994   CD A9 09               CALL   bufferDec2   
0997   11 9C FF               LD   de,-100   
099A   CD A9 09               CALL   bufferDec2   
099D   1E F6                  LD   e,-10   
099F   CD A9 09               CALL   bufferDec2   
09A2   0C                     INC   c   ; flag = true for at least digit
09A3   1E FF                  LD   e,-1   
09A5   CD A9 09               CALL   bufferDec2   
09A8   C9                     RET      
09A9                BUFFERDEC2:      
09A9   06 2F                  LD   b,"0"-1   
09AB                BUFFERDEC3:      
09AB   04                     INC   b   
09AC   19                     ADD   hl,de   
09AD   38 FC                  JR   c,bufferDec3   
09AF   ED 52                  SBC   hl,de   
09B1   3E 30                  LD   a,"0"   
09B3   B8                     CP   b   
09B4   20 05                  JR   nz,bufferDec4   
09B6   AF                     XOR   a   
09B7   B1                     OR   c   
09B8   C8                     RET   z   
09B9   18 01                  JR   bufferDec5   
09BB                BUFFERDEC4:      
09BB   0C                     INC   c   
09BC                BUFFERDEC5:      
09BC   78                     LD   a,b   
09BD   D9                     EXX      
09BE   12                     LD   (de),a   
09BF   1C                     INC   e   
09C0   CC CD 0B               CALL   z,flushBuffer   
09C3   D9                     EXX      
09C4   C9                     RET      
09C5                             ; /bh buffer hex
09C5                             ; value --
09C5                BUFFERHEX:      
09C5   E1                     POP   hl   ; hl = value
09C6   ED 5B EC 4F            LD   de,(vBufPtr)   
09CA   3E 24                  LD   a,"$"   ; # prefix
09CC   12                     LD   (de),a   
09CD   1C                     INC   e   ; buffer*++, wraparound
09CE   CC CD 0B               CALL   z,flushBuffer   
09D1   7C                     LD   a,h   
09D2   CD E6 09               CALL   bufferHex1   
09D5   7D                     LD   a,l   
09D6   CD E6 09               CALL   bufferHex1   
09D9   3E 20                  LD   a," "   ; append space to buffer
09DB   12                     LD   (de),a   
09DC   1C                     INC   e   ; buffer*++, wraparound
09DD   CC CD 0B               CALL   z,flushBuffer   
09E0   ED 53 EC 4F            LD   (vBufPtr),de   
09E4   DD E9                  JP   (ix)   
09E6                BUFFERHEX1:      
09E6   F5                     PUSH   af   
09E7   1F                     RRA      
09E8   1F                     RRA      
09E9   1F                     RRA      
09EA   1F                     RRA      
09EB   CD EF 09               CALL   bufferHex2   
09EE   F1                     POP   af   
09EF                BUFFERHEX2:      
09EF   E6 0F                  AND   0x0F   
09F1   C6 90                  ADD   a,0x90   
09F3   27                     DAA      
09F4   CE 40                  ADC   a,0x40   
09F6   27                     DAA      
09F7   12                     LD   (de),a   
09F8   1C                     INC   e   ; buffer*++, wraparound
09F9   CC CD 0B               CALL   z,flushBuffer   
09FC   C9                     RET      
09FD                             ; division subroutine.
09FD                             ; bc: divisor, de: dividend, hl: remainder
09FD                DIVIDE:      
09FD   21 00 00               LD   hl,0   ; zero the remainder
0A00   3E 10                  LD   a,16   ; loop counter
0A02                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0A02   CB 21                  SLA   c   
0A04   CB 10                  RL   b   
0A06   ED 6A                  ADC   hl,hl   
0A08   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0A0A   38 03                  JR   c,divide2   
0A0C   0C                     INC   c   
0A0D   18 01                  JR   divide3   
0A0F                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0A0F   19                     ADD   hl,de   
0A10                DIVIDE3:      
0A10   3D                     DEC   a   
0A11   20 EF                  JR   nz,divide1   
0A13   50 59                  LD   de,bc   ; result from bc to de
0A15   C9                     RET      
0A16                FZ:          
0A16   21 00 4D               LD   hl,STACK   
0A19   ED 72                  SBC   hl,sp   
0A1B   CB 3C                  SRL   h   
0A1D   CB 1D                  RR   l   
0A1F   E5                     PUSH   hl   
0A20   C3 B1 04               JP   dotNumber_   
0A23                             ; execute a block of code which ends with }
0A23                             ; creates a root scope if BP == stack
0A23                             ; else uses outer scope
0A23                CARET:       
0A23                GO:          
0A23   D1                     POP   de   ; de = block*
0A24                GO1:         
0A24   7B                     LD   a,e   ; if block* == null, exit
0A25   B2                     OR   d   
0A26   20 02                  JR   nz,go2   
0A28   DD E9                  JP   (ix)   
0A2A                GO2:         
0A2A   1A                     LD   a,(de)   
0A2B   FE 7B                  CP   "{"   
0A2D   28 06                  JR   z,goBlock   
0A2F   FE 28                  CP   "("   
0A31   C2 68 0A               JP   nz,goFunc   
0A34   D5                     PUSH   de   ; push de just before stack frame
0A35                GOBLOCK:      
0A35   ED 53 00 50            LD   (vTemp1),de   ; save de
0A39   21 00 4D               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0A3C   FD 54                  LD   d,iyh   
0A3E   FD 5D                  LD   e,iyl   
0A40   B7                     OR   a   ; if stack* == BP then this is the root_scope
0A41   ED 52                  SBC   hl,de   
0A43   ED 5B 00 50            LD   de,(vTemp1)   ; restore de
0A47   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0A48   B4                     OR   h   
0A49   3E 00                  LD   a,0   
0A4B   28 6A                  JR   z,goFunc8   
0A4D   C5                     PUSH   bc   ; push IP
0A4E   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0A51   FD 46 05               LD   b,(iy+5)   
0A54   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0A57   FD 66 03               LD   h,(iy+3)   
0A5A                GOBLOCK2:      
0A5A   C5                     PUSH   bc   ; arg_list*
0A5B   E5                     PUSH   hl   ; first_arg*
0A5C   FD E5                  PUSH   iy   ; push BP
0A5E   FD 21 00 00            LD   iy,0   ; BP = SP
0A62   FD 39                  ADD   iy,sp   
0A64                GOBLOCK3:      
0A64   42 4B                  LD   bc,de   ; bc = de = block*-1
0A66   DD E9                  JP   (ix)   
0A68                GOFUNC:      ; execute func
0A68   EB                     EX   de,hl   ; hl = func*
0A69   5E                     LD   e,(hl)   ; de = partial_array*
0A6A   23                     INC   hl   
0A6B   56                     LD   d,(hl)   
0A6C   23                     INC   hl   
0A6D   7B                     LD   a,e   ; if partial_array* == null skip
0A6E   B2                     OR   d   
0A6F   28 21                  JR   z,goFunc3   
0A71   ED 43 00 50            LD   (vTemp1),bc   
0A75   22 02 50               LD   (vTemp2),hl   ; save bc,hl
0A78   EB                     EX   de,hl   ; hl = partial_array*
0A79   2B                     DEC   hl   ; bc = count
0A7A   46                     LD   b,(hl)   
0A7B   2B                     DEC   hl   
0A7C   4E                     LD   c,(hl)   
0A7D   23                     INC   hl   ; hl = array data*
0A7E   23                     INC   hl   
0A7F   18 06                  JR   goFunc2   ; push each item on stack
0A81                GOFUNC1:      
0A81   5E                     LD   e,(hl)   ; de = partial item
0A82   23                     INC   hl   
0A83   56                     LD   d,(hl)   
0A84   23                     INC   hl   
0A85   D5                     PUSH   de   ; push on stack
0A86   0B                     DEC   bc   
0A87                GOFUNC2:      
0A87   79                     LD   a,c   ; if count != 0 then loop
0A88   B0                     OR   b   
0A89   20 F6                  JR   nz,goFunc1   
0A8B   ED 4B 00 50            LD   bc,(vTemp1)   ; restore bc
0A8F   2A 02 50               LD   hl,(vTemp2)   ; restore hl
0A92                GOFUNC3:      
0A92   5E                     LD   e,(hl)   ; de = block*
0A93   23                     INC   hl   
0A94   56                     LD   d,(hl)   
0A95   23                     INC   hl   
0A96   ED 53 00 50            LD   (vTemp1),de   ; save block*
0A9A   5E                     LD   e,(hl)   ; de = arg_list*
0A9B   23                     INC   hl   
0A9C   56                     LD   d,(hl)   
0A9D   23                     INC   hl   
0A9E   EB                     EX   de,hl   ; hl = arg_list*
0A9F   ED 5B 00 50            LD   de,(vTemp1)   ; restore de = block*
0AA3   7D                     LD   a,l   ; if arg_list* == null a = 0
0AA4   B4                     OR   h   
0AA5   20 03                  JR   nz,goFunc4   
0AA7   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0AA8   18 0D                  JR   goFunc8   
0AAA                GOFUNC4:      ; allocate locals
0AAA   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0AAB   18 03                  JR   goFunc6   
0AAD                GOFUNC5:      ; loop
0AAD   3B                     DEC   sp   
0AAE   3B                     DEC   sp   
0AAF   3D                     DEC   a   
0AB0                GOFUNC6:      
0AB0   B7                     OR   a   
0AB1   20 FA                  JR   nz,goFunc5   ; end loop
0AB3                GOFUNC7:      
0AB3   23                     INC   hl   ; a = num_args* x 2
0AB4   7E                     LD   a,(hl)   
0AB5   2B                     DEC   hl   
0AB6   87                     ADD   a,a   ; a *= 2
0AB7                GOFUNC8:      
0AB7   C5                     PUSH   bc   ; push IP
0AB8   44 4D                  LD   bc,hl   
0ABA   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0ABD   85                     ADD   a,l   
0ABE   6F                     LD   l,a   
0ABF   39                     ADD   hl,sp   
0AC0   18 98                  JR   goBlock2   
0AC2                DOLLAR:      
0AC2                HEXNUM:      
0AC2   21 00 00               LD   hl,0   ; Clear hl to accept the number
0AC5                HEXNUM1:      
0AC5   03                     INC   bc   
0AC6   0A                     LD   a,(bc)   ; Get the character which is a numeral
0AC7   CB 77                  BIT   6,a   ; is it uppercase alpha?
0AC9   28 02                  JR   z,hexnum2   ; no a decimal
0ACB   D6 07                  SUB   7   ; sub 7  to make $a - $F
0ACD                HEXNUM2:      
0ACD   D6 30                  SUB   $30   ; form decimal digit
0ACF   DA 5F 0B               JP   c,num2   
0AD2   FE 10                  CP   $0F+1   
0AD4   D2 5F 0B               JP   nc,num2   
0AD7   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0AD8   29                     ADD   hl,hl   ; 4X
0AD9   29                     ADD   hl,hl   ; 8X
0ADA   29                     ADD   hl,hl   ; 16X
0ADB   85                     ADD   a,l   ; add into bottom of hl
0ADC   6F                     LD   l,a   
0ADD   18 E6                  JR   hexnum1   
0ADF                UPCASE:      
0ADF   0A                     LD   a,(bc)   ; a = identifier char
0AE0   D6 41                  SUB   "A"   ; "A" = 0
0AE2   18 05                  JR   ident1   
0AE4                LOWCASE:      
0AE4   0A                     LD   a,(bc)   
0AE5   D6 61                  SUB   "a"   
0AE7   C6 1A                  ADD   a,26   
0AE9                IDENT1:      
0AE9   87                     ADD   a,a   ; l = a * 2
0AEA   6F                     LD   l,a   
0AEB   26 4F                  LD   h,msb(vars)   
0AED   22 F4 4F               LD   (vPointer),hl   ; store address in setter
0AF0   5E                     LD   e,(hl)   
0AF1   23                     INC   hl   
0AF2   56                     LD   d,(hl)   
0AF3   D5                     PUSH   de   
0AF4   DD E9                  JP   (ix)   
0AF6                             ; if
0AF6                             ; condition then -- value
0AF6                QUESTION:      
0AF6                IF:          
0AF6   03                     INC   bc   
0AF7   0A                     LD   a,(bc)   
0AF8   FE 3F                  CP   "?"   
0AFA   28 06                  JR   z,ifte   
0AFC   0B                     DEC   bc   
0AFD   11 00 00               LD   de,NUL   ; NUL pointer for else
0B00   18 01                  JR   ifte1   
0B02                             ; ifte
0B02                             ; condition then else -- value
0B02                IFTE:        
0B02   D1                     POP   de   ; de = else
0B03                IFTE1:       
0B03   E1                     POP   hl   ; hl = then
0B04   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0B05   7C                     LD   a,h   
0B06   B5                     OR   l   
0B07   E1                     POP   hl   ; hl = then
0B08   CA 24 0A               JP   z,go1   ; if z de = else
0B0B   EB                     EX   de,hl   ; condition = false, de = then
0B0C   C3 24 0A               JP   go1   
0B0F                KEY:         
0B0F   CD 81 00               CALL   getchar   
0B12   26 00                  LD   h,0   
0B14   6F                     LD   l,a   
0B15   E5                     PUSH   hl   
0B16   DD E9                  JP   (ix)   
0B18                             ; Z80 port output
0B18                             ; value port --
0B18                OUTPUT:      
0B18   E1                     POP   hl   
0B19   59                     LD   e,c   ; save IP
0B1A   4D                     LD   c,l   
0B1B   E1                     POP   hl   
0B1C   ED 69                  OUT   (c),l   
0B1E   4B                     LD   c,e   ; restore IP
0B1F   DD E9                  JP   (ix)   
0B21                STAR:        
0B21                MUL:         
0B21   D1                     POP   de   ; get first value
0B22   E1                     POP   hl   
0B23                MUL2:        
0B23   C5                     PUSH   bc   ; Preserve the IP
0B24   44 4D                  LD   bc,hl   ; bc = 2nd value
0B26   21 00 00               LD   hl,0   
0B29   3E 10                  LD   a,16   
0B2B                MUL3:        
0B2B   29                     ADD   hl,hl   
0B2C   CB 13                  RL   e   
0B2E   CB 12                  RL   d   
0B30   30 04                  JR   nc,$+6   
0B32   09                     ADD   hl,bc   
0B33   30 01                  JR   nc,$+3   
0B35   13                     INC   de   
0B36   3D                     DEC   a   
0B37   20 F2                  JR   nz,mul3   
0B39   C1                     POP   bc   ; Restore the IP
0B3A   C3 13 02               JP   add3   
0B3D                NUM:         
0B3D   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B40   0A                     LD   a,(bc)   ; Get numeral or -
0B41   FE 2D                  CP   "-"   
0B43   20 01                  JR   nz,num0   
0B45   03                     INC   bc   ; move to next char, no flags affected
0B46                NUM0:        
0B46   08                     EX   af,af'   ; save zero flag = 0 for later
0B47                NUM1:        
0B47   0A                     LD   a,(bc)   ; read digit
0B48   D6 30                  SUB   "0"   ; less than 0?
0B4A   38 13                  JR   c,num2   ; not a digit, exit loop
0B4C   FE 0A                  CP   10   ; greater that 9?
0B4E   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B50   03                     INC   bc   ; inc IP
0B51   54 5D                  LD   de,hl   ; multiply hl * 10
0B53   29                     ADD   hl,hl   
0B54   29                     ADD   hl,hl   
0B55   19                     ADD   hl,de   
0B56   29                     ADD   hl,hl   
0B57   85                     ADD   a,l   ; add digit in a to hl
0B58   6F                     LD   l,a   
0B59   3E 00                  LD   a,0   
0B5B   8C                     ADC   a,h   
0B5C   67                     LD   h,a   
0B5D   18 E8                  JR   num1   
0B5F                NUM2:        
0B5F   0B                     DEC   bc   
0B60   08                     EX   af,af'   ; restore zero flag
0B61   20 07                  JR   nz,num3   
0B63   EB                     EX   de,hl   ; negate the value of hl
0B64   21 00 00               LD   hl,0   
0B67   B7                     OR   a   ; jump to sub2
0B68   ED 52                  SBC   hl,de   
0B6A                NUM3:        
0B6A   E5                     PUSH   hl   ; Put the number on the stack
0B6B   DD E9                  JP   (ix)   ; and process the next character
0B6D                RPAREN:      
0B6D   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0B70   FD 46 09               LD   b,(iy+9)   
0B73   DD E9                  JP   (ix)   
0B75                             ; shiftLeft
0B75                             ; value count -- value2          shift left count places
0B75                SHIFTLEFT:      
0B75   50 59                  LD   de,bc   ; save IP
0B77   C1                     POP   bc   ; bc = count
0B78   41                     LD   b,c   ; b = loop counter
0B79   E1                     POP   hl   
0B7A   04                     INC   b   ; test for counter=0 case
0B7B   18 01                  JR   shiftLeft2   
0B7D                SHIFTLEFT1:      
0B7D   29                     ADD   hl,hl   ; left shift hl
0B7E                SHIFTLEFT2:      
0B7E   10 FD                  DJNZ   shiftLeft1   
0B80   E5                     PUSH   hl   
0B81   42 4B                  LD   bc,de   ; restore IP
0B83   DD E9                  JP   (ix)   
0B85                             ; shiftRight
0B85                             ; value count -- value2          shift left count places
0B85                SHIFTRIGHT:      
0B85   50 59                  LD   de,bc   ; save IP
0B87   C1                     POP   bc   ; bc = count
0B88   41                     LD   b,c   ; b = loop counter
0B89   E1                     POP   hl   
0B8A   04                     INC   b   ; test for counter=0 case
0B8B   18 04                  JR   shiftRight2   
0B8D                SHIFTRIGHT1:      
0B8D   CB 3C                  SRL   h   ; right shift hl
0B8F   CB 1D                  RR   l   
0B91                SHIFTRIGHT2:      
0B91   10 FA                  DJNZ   shiftRight1   
0B93   E5                     PUSH   hl   
0B94   42 4B                  LD   bc,de   ; restore IP
0B96   DD E9                  JP   (ix)   
0B98                             ; string
0B98                             ; -- ptr                        ; points to start of string chars,
0B98                             ; length is stored at start - 2 bytes
0B98                DQUOTE:      
0B98                STRING:      
0B98   2A F0 4F               LD   hl,(vHeapPtr)   ; hl = heap*
0B9B   23                     INC   hl   ; skip length field to start
0B9C   23                     INC   hl   
0B9D   E5                     PUSH   hl   ; save start of string
0B9E   03                     INC   bc   ; point to next char
0B9F   18 03                  JR   string2   
0BA1                STRING1:      
0BA1   77                     LD   (hl),a   
0BA2   23                     INC   hl   ; increase count
0BA3   03                     INC   bc   ; point to next char
0BA4                STRING2:      
0BA4   0A                     LD   a,(bc)   
0BA5   FE 22                  CP   DQ   ; " is the string terminator
0BA7   28 04                  JR   z,string3   
0BA9   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0BAB   20 F4                  JR   nz,string1   
0BAD                STRING3:      
0BAD   AF                     XOR   a   ; write NUL to terminate string
0BAE   77                     LD   (hl),a   ; hl = end of string
0BAF   23                     INC   hl   
0BB0   22 F0 4F               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0BB3   2B                     DEC   hl   ; hl = end of string without terminator
0BB4   D1                     POP   de   ; de = start of string
0BB5   D5                     PUSH   de   ; return start of string
0BB6   B7                     OR   a   ; hl = length bytes, de = start of string
0BB7   ED 52                  SBC   hl,de   
0BB9   EB                     EX   de,hl   
0BBA   2B                     DEC   hl   ; write length bytes to length field at start - 2
0BBB   72                     LD   (hl),d   
0BBC   2B                     DEC   hl   
0BBD   73                     LD   (hl),e   
0BBE   DD E9                  JP   (ix)   
0BC0                PRINTCHARS1:      
0BC0   1A                     LD   a,(de)   ; print char at char*
0BC1   CD 85 00               CALL   putchar   
0BC4   13                     INC   de   ; char*++
0BC5   2B                     DEC   hl   ; count--
0BC6                PRINTCHARS2:      
0BC6   7D                     LD   a,l   ; count == 0?
0BC7   B4                     OR   h   
0BC8   C8                     RET   z   
0BC9   18 F5                  JR   printChars1   ; if not loop
0BCB                             ; 
0BCB                FILTER:      
0BCB                SCAN:        
0BCB   DD E9                  JP   (ix)   
0BCD                             ;*******************************************************************
0BCD                             ; general routines
0BCD                             ;*******************************************************************
0BCD                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0BCD                FLUSHBUFFER:      
0BCD   F5                     PUSH   af   
0BCE   D5                     PUSH   de   
0BCF   E5                     PUSH   hl   
0BD0   2A EC 4F               LD   hl,(vBufPtr)   
0BD3   11 00 4E               LD   de,BUF   
0BD6   ED 53 EC 4F            LD   (vBufPtr),de   
0BDA   B7                     OR   a   
0BDB   ED 52                  SBC   hl,de   
0BDD   CD C6 0B               CALL   printChars2   
0BE0   E1                     POP   hl   
0BE1   D1                     POP   de   
0BE2   F1                     POP   af   
0BE3   C9                     RET      
0BE4                COMMANDTABLE:      
0BE4   03                     INC   bc   
0BE5   0A                     LD   a,(bc)   
0BE6   FE 7B                  CP   "z"+1   
0BE8   30 09                  JR   nc,commandTable2   
0BEA   D6 61                  SUB   "a"   
0BEC   38 05                  JR   c,commandTable2   
0BEE                COMMANDTABLE1:      
0BEE   E1                     POP   hl   
0BEF   85                     ADD   a,l   
0BF0   6F                     LD   l,a   
0BF1   6E                     LD   l,(hl)   ; must have the same msb as the table
0BF2   E9                     JP   (hl)   
0BF3                COMMANDTABLE2:      
0BF3   3E 1A                  LD   a,26   
0BF5   0B                     DEC   bc   
0BF6   18 F6                  JR   commandTable1   
0BF8                             ; followed by a table
0BF8                             ; db char
0BF8                             ; db lsb(addr)
0BF8                             ; the final item must have char == NUL
0BF8                JUMPTABLE:      
0BF8   E1                     POP   hl   
0BF9   03                     INC   bc   
0BFA                JUMPTABLE0:      
0BFA   AF                     XOR   a   
0BFB   BE                     CP   (hl)   
0BFC   28 0B                  JR   z,jumpTable2   
0BFE   0A                     LD   a,(bc)   
0BFF   BE                     CP   (hl)   
0C00   28 04                  JR   z,jumpTable1   
0C02   23                     INC   hl   
0C03   23                     INC   hl   
0C04   18 F4                  JR   jumpTable0   
0C06                JUMPTABLE1:      
0C06   23                     INC   hl   
0C07   6E                     LD   l,(hl)   ; must have the same msb as the table
0C08   E9                     JP   (hl)   
0C09                JUMPTABLE2:      
0C09   0B                     DEC   bc   
0C0A   23                     INC   hl   
0C0B   E9                     JP   (hl)   
0C0C                PRTSTR0:      
0C0C   CD 85 00               CALL   putchar   
0C0F   23                     INC   hl   
0C10                PRTSTR:      
0C10   7E                     LD   a,(hl)   
0C11   B7                     OR   a   
0C12   20 F8                  JR   nz,prtstr0   
0C14   C9                     RET      
0C15                             ; **************************************************************************
0C15                             ; calculate nesting value
0C15                             ; a is char to be tested,
0C15                             ; e is the nesting value (initially 0)
0C15                             ; e is increased by ( and [
0C15                             ; e is decreased by ) and ]
0C15                             ; e has its bit 7 toggled by `
0C15                             ; limited to 127 levels
0C15                             ; **************************************************************************
0C15                NESTING:      
0C15   FE 22                  CP   DQ   ; quote char
0C17   28 06                  JR   z,nesting0   
0C19   FE 60                  CP   "`"   ; quote char
0C1B   28 02                  JR   z,nesting0   
0C1D   18 0A                  JR   nesting1   
0C1F                NESTING0:      
0C1F   CB 7B                  BIT   7,e   
0C21   28 03                  JR   z,nesting1a   
0C23   CB BB                  RES   7,e   
0C25   C9                     RET      
0C26                NESTING1A:      
0C26   CB FB                  SET   7,e   
0C28   C9                     RET      
0C29                NESTING1:      
0C29   CB 7B                  BIT   7,e   
0C2B   C0                     RET   nz   
0C2C   FE 7B                  CP   "{"   
0C2E   28 08                  JR   z,nesting2   
0C30   FE 5B                  CP   "["   
0C32   28 04                  JR   z,nesting2   
0C34   FE 28                  CP   "("   
0C36   20 02                  JR   nz,nesting3   
0C38                NESTING2:      
0C38   1C                     INC   e   
0C39   C9                     RET      
0C3A                NESTING3:      
0C3A   FE 7D                  CP   "}"   
0C3C   28 07                  JR   z,nesting4   
0C3E   FE 5D                  CP   "]"   
0C40   28 03                  JR   z,nesting4   
0C42   FE 29                  CP   ")"   
0C44   C0                     RET   nz   
0C45                NESTING4:      
0C45   1D                     DEC   e   
0C46   C9                     RET      
0C47                PROMPT:      
0C47   CD 57 0C               CALL   printStr   
0C4A   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0C4F   C9                     RET      
0C50                CRLF:        
0C50   CD 57 0C               CALL   printStr   
0C53   0D 0A 00               .CSTR   "\r\n"   
0C56   C9                     RET      
0C57                             ; prints a null teminated string
0C57                             ; the string should be immediately following the call
0C57                PRINTSTR:      
0C57   E3                     EX   (sp),hl   ; swap			
0C58   CD 10 0C               CALL   prtstr   
0C5B   23                     INC   hl   ; inc past NUL
0C5C   E3                     EX   (sp),hl   ; put it back	
0C5D   C9                     RET      
0C5E                INIT:        
0C5E   21 F0 01               LD   hl,titleStr   
0C61   11 08 50               LD   de,titleBuf   
0C64   06 14                  LD   b,20   
0C66                INIT1:       
0C66   1A                     LD   a,(de)   
0C67   BE                     CP   (hl)   
0C68   20 17                  JR   nz,coldBoot0   
0C6A   13                     INC   de   
0C6B   23                     INC   hl   
0C6C   10 F8                  DJNZ   init1   
0C6E                WARMINIT:      
0C6E   ED 4B F8 4F            LD   bc,(vSavedIP)   ; restore IP
0C72   ED 7B FA 4F            LD   sp,(vSavedSP)   ; restore SP
0C76   DD 2A FC 4F            LD   ix,(vSavedNext)   ; restore Next
0C7A   FD 2A FE 4F            LD   iy,(vSavedBP)   ; restore BP
0C7E   C3 B8 0C               JP   start1   
0C81                COLDBOOT0:      
0C81   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0C84   11 08 50               LD   de,titleBuf   
0C87   06 14                  LD   b,20   
0C89   ED B0                  LDIR      
0C8B                COLDINIT:      
0C8B   21 DE 01               LD   hl,isysVars   
0C8E   11 E6 4F               LD   de,sysVars   
0C91   01 10 00               LD   bc,8 * 2   
0C94   ED B0                  LDIR      
0C96   21 00 4F               LD   hl,vars   ; 52 vars LO HI
0C99   06 34                  LD   b,26*2   
0C9B   AF                     XOR   a   
0C9C                COLDBOOT1:      
0C9C   77                     LD   (hl),a   
0C9D   23                     INC   hl   
0C9E   10 FC                  DJNZ   coldBoot1   
0CA0   DD 2A EE 4F            LD   ix,(vNext)   
0CA4   FD 21 00 4D            LD   iy,STACK   
0CA8   C9                     RET      
0CA9                COLDSTART:      
0CA9   31 00 4D               LD   sp,STACK   
0CAC   CD 81 0C               CALL   coldBoot0   
0CAF   C3 B8 0C               JP   start1   
0CB2                START:       
0CB2   31 00 4D               LD   sp,STACK   ; start Monty
0CB5   CD 5E 0C               CALL   init   ; setups
0CB8                START1:      
0CB8   21 08 50               LD   hl,titleBuf   
0CBB   CD 10 0C               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0CBE                INTERPRET:      
0CBE   CD CD 0B               CALL   flushBuffer   
0CC1   CD 47 0C               CALL   prompt   
0CC4   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0CC7   21 00 4D               LD   hl,TIB   
0CCA   22 EA 4F               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0CCD                INTERPRET2:      ; calculate nesting
0CCD   1E 00                  LD   e,0   ; initilize nesting value
0CCF   C5                     PUSH   bc   ; save offset into TIB,
0CD0                             ; bc is also the count of chars in TIB
0CD0   21 00 4D               LD   hl,TIB   ; hl is start of TIB
0CD3   18 0B                  JR   interpret4   
0CD5                INTERPRET3:      
0CD5   3E 33                  LD   a,"3"   
0CD7   CD 85 00               CALL   putchar   
0CDA   7E                     LD   a,(hl)   ; a = char in TIB
0CDB   23                     INC   hl   ; inc pointer into TIB
0CDC   0B                     DEC   bc   ; dec count of chars in TIB
0CDD   CD 15 0C               CALL   nesting   ; update nesting value
0CE0                INTERPRET4:      
0CE0   79                     LD   a,c   ; is count zero?
0CE1   B0                     OR   b   
0CE2   20 F1                  JR   nz,interpret3   ; if not loop
0CE4   C1                     POP   bc   ; restore offset into TIB
0CE5                INTERPRET5:      
0CE5   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0CE8   FE 20                  CP   $20   ; compare to space
0CEA   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0CEC   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0CEE                             ; ???? NEEDED?
0CEE   28 36                  JR   z,interpret8   
0CF0   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0CF2   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0CF4   FE 05                  CP   CTRL_E   
0CF6   CA 87 0D               JP   z,edit_   
0CF9   FE 08                  CP   CTRL_H   
0CFB   CA 77 0D               JP   z,backSpace_   
0CFE   FE 0A                  CP   CTRL_J   
0D00   CA 9F 0D               JP   z,reEdit_   
0D03                             ; cp CTRL_S
0D03                             ; jp z,printStack_
0D03                             ; DB     lsb(edit_)       ; ENQ ^E  5
0D03                             ; DB     lsb(reedit_)     ; LF  ^J 10
0D03                             ; DB     lsb(list_)       ; FF  ^L 12
0D03                             ; DB     lsb(printStack_) ; DLE ^P 16
0D03                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0D03                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0D03                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0D03                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0D03                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0D03                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0D03                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0D03                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0D03                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0D03                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0D03                INTERPRET5A:      
0D03                             ; ld (vTIBPtr),bc
0D03                             ; ld bc,(vTIBPtr)
0D03   18 C8                  JR   interpret2   
0D05                INTERPRET6:      
0D05   21 00 4D               LD   hl,TIB   
0D08   09                     ADD   hl,bc   
0D09   77                     LD   (hl),a   ; store the character in textbuf
0D0A   03                     INC   bc   
0D0B   CD 85 00               CALL   putchar   ; echo character to screen
0D0E   CD 15 0C               CALL   nesting   
0D11   18 D2                  JR   interpret5   ; wait for next character
0D13                INTERPRET7:      
0D13   21 00 4D               LD   hl,TIB   
0D16   09                     ADD   hl,bc   
0D17   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0D19   23                     INC   hl   
0D1A   36 0A                  LD   (hl),"\n"   
0D1C   23                     INC   hl   
0D1D   03                     INC   bc   
0D1E   03                     INC   bc   
0D1F   CD 50 0C               CALL   crlf   ; echo character to screen
0D22   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0D23   B7                     OR   a   
0D24   20 BF                  JR   nz,interpret5   
0D26                INTERPRET8:      
0D26   21 00 4D               LD   hl,TIB   
0D29   09                     ADD   hl,bc   
0D2A   22 EA 4F               LD   (vTIBPtr),hl   
0D2D   01 00 4D               LD   bc,TIB   
0D30   ED 43 F8 4F            LD   (vSavedIP),bc   ; save IP
0D34   ED 73 FA 4F            LD   (vSavedSP),sp   ; save SP
0D38   DD 22 FC 4F            LD   (vSavedNext),ix   ; save Next
0D3C   FD 22 FE 4F            LD   (vSavedBP),iy   ; save BP
0D40   0B                     DEC   bc   
0D41                NEXT:        
0D41   03                     INC   bc   ; Increment the IP
0D42   0A                     LD   a,(bc)   ; Get the next character and dispatch
0D43   FE 20                  CP   " "   ; whitespace?
0D45   28 FA                  JR   z,next   ; space? ignore
0D47   38 08                  JR   c,next1   
0D49   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0D4B   6F                     LD   l,a   ; index into table
0D4C   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0D4E   6E                     LD   l,(hl)   ; get low jump address
0D4F   24                     INC   h   ; Load h with page after opcodes
0D50   E9                     JP   (hl)   ; Jump to routine
0D51                NEXT1:       
0D51   FE 00                  CP   NUL   ; end of input string?
0D53   28 03                  JR   z,exit   
0D55   C3 BE 0C               JP   interpret   ; no, other whitespace, macros?
0D58                EXIT:        
0D58   03                     INC   bc   
0D59   60 69                  LD   hl,bc   
0D5B   E9                     JP   (hl)   
0D5C                RUN:         
0D5C   C1                     POP   bc   
0D5D   0B                     DEC   bc   
0D5E   DD E9                  JP   (ix)   
0D60                ERROR1:      
0D60   21 01 00               LD   hl,1   ; error 1: unknown command
0D63   E5                     PUSH   hl   
0D64                ERROR:       
0D64   CD 5C 0D               CALL   run   
0D67   60 45 72 72 6F 72 20 60 2E 73 20 2E 00 DB   "`Error `.s .",0   
0D74   C3 BE 0C               JP   interpret   
0D77                BACKSPACE_:      
0D77   79                     LD   a,c   
0D78   B0                     OR   b   
0D79   CA CD 0C               JP   z,interpret2   
0D7C   0B                     DEC   bc   
0D7D   CD 57 0C               CALL   printStr   
0D80   08 20 08 00            .CSTR   "\b \b"   
0D84   C3 CD 0C               JP   interpret2   
0D87                             ; edit
0D87                EDIT_:       
0D87   CD 5C 0D               CALL   run   
0D8A   60 76 61 72 3F 60 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?`.s /k/ad .h",0   
0D9C   C3 BE 0C               JP   interpret   
0D9F                REEDIT_:      
0D9F   C3 BE 0C               JP   interpret   
0DA2                PRINTSTACK_:      
0DA2   CD 5C 0D               CALL   run   
0DA5   2F 70 6B 00            .CSTR   "/pk"   
0DA9   C3 BE 0C               JP   interpret   
0DAC                             ; editDef:
0DAC                             ;     pop hl                      ; pop ret address
0DAC                             ;     ex (sp),hl                  ; swap with TOS
0DAC                             ;     push hl                     ; dup TOS
0DAC                             ;     ld a,l                      ; a = ident
0DAC                             ;     ld de,TIB                   ; de = start of TIB
0DAC                             ;     ld (vTIBPtr),de             ; update TIB*
0DAC                             ;     push ix                     ; save NEXT
0DAC                             ;     ld ix,editDef0              ; NEXT = editDef0
0DAC                             ;     jp lookupRef                ; convert letter into address
0DAC                             ; editDef0:
0DAC                             ;     ld e,(hl)                   ; de = (hl++)
0DAC                             ;     inc hl
0DAC                             ;     ld d,(hl)
0DAC                             ;     ld a,d                      ; de == 0 ?
0DAC                             ;     or e
0DAC                             ;     jr z,editDef4
0DAC                             ;     ld ix,editDef3              ; NEXT = editDef3
0DAC                             ;     ex de,hl
0DAC                             ;     ld a,(hl)
0DAC                             ;     cp "{"
0DAC                             ;     jr nz,editDef1
0DAC                             ;     jp editBlock0               ; convert letter into address
0DAC                             ; editDef1:
0DAC                             ;     cp "("
0DAC                             ;     jr nz,editDef2
0DAC                             ;     jp editBlock0               ; convert letter into address
0DAC                             ; editDef2:
0DAC                             ;     jp editFunc
0DAC                             ; editDef3:
0DAC                             ;     ld a," "                    ; write assign
0DAC                             ;     call writeChar
0DAC                             ;     pop hl                      ; a = ident
0DAC                             ;     ld a,l
0DAC                             ;     call writeChar
0DAC                             ;     ld a,"="                    ; write assign
0DAC                             ;     call writeChar
0DAC                             ;     ld ix,editDef4              ; NEXT = editDef4
0DAC                             ;     jp printTIB
0DAC                             ; editDef4:
0DAC                             ;     pop ix                      ; restore NEXT
0DAC                             ;     jp (ix)
0DAC                             ; writeChar:
0DAC                             ;     ld de,(vTIBPtr)             ; de = TIB*
0DAC                             ;     ld (de),a                   ; write ident
0DAC                             ;     inc de
0DAC                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0DAC                             ;     ret
0DAC                             ; ; printTIB
0DAC                             ; printTIB:
0DAC                             ;     ld hl,(vTIBPtr)
0DAC                             ;     ld de,TIB
0DAC                             ;     or a
0DAC                             ;     sbc hl,de
0DAC                             ;     jp printTIB2
0DAC                             ; printTIB1:
0DAC                             ;     ld a,(de)
0DAC                             ;     call putchar
0DAC                             ; printTIB2:
0DAC                             ;     ld a,l
0DAC                             ;     or h
0DAC                             ;     jr nz,printTIB1
0DAC                             ;     jp (ix)
0DAC                             ; editBlock:
0DAC                             ;     pop hl                      ; hl = block*
0DAC                             ; editBlock0:
0DAC                             ;     push ix                     ; save next
0DAC                             ;     push hl                     ; push block*
0DAC                             ;     push hl                     ; push block*
0DAC                             ;     ld ix,(editBlock2)
0DAC                             ;     jp blockLength
0DAC                             ; editBlock1:
0DAC                             ;     pop hl                      ; bc = length, (sp) = IP
0DAC                             ;     pop de                      ; de = block*
0DAC                             ;     ld a,l
0DAC                             ;     or h
0DAC                             ;     jr z,editBlock2
0DAC                             ;     push bc
0DAC                             ;     ld bc,hl
0DAC                             ;     ex de,hl                    ; hl = block*
0DAC                             ;     ld de,(vTIBPtr)              ; de = TIB*
0DAC                             ;     ldir                        ; copy block to TIB
0DAC                             ;     ld (vTIBPtr),de              ; save TIB*
0DAC                             ;     pop bc
0DAC                             ; editBlock2:
0DAC                             ;     pop ix                      ; restore next
0DAC                             ;     jp (ix)
0DAC                             ; editFunc:
0DAC                             ;     jp (ix)
0DAC                             ; editArray:
0DAC                             ;     jp (ix)
0DAC                             ; editArglist:
0DAC                             ;     jp (ix)
0DAC                             ; ; blockLength
0DAC                             ; ; addr1 -- length
0DAC                             ; blockLength:
0DAC                             ;     pop hl                      ; block*
0DAC                             ;     push hl                     ; save block*
0DAC                             ;     inc hl                      ; skip first char
0DAC                             ;     ld d,1                      ; increase nesting
0DAC                             ; blockLength1:                   ; Skip to end of definition
0DAC                             ;     ld a,(hl)                   ; Get the next character
0DAC                             ;     inc hl                      ; Point to next character
0DAC                             ;     cp " " + 1                  ; ignore whitespace
0DAC                             ;     jr c,blockLength1
0DAC                             ;     cp ")"
0DAC                             ;     jr z,blockLength4
0DAC                             ;     cp "}"
0DAC                             ;     jr z,blockLength4
0DAC                             ;     cp "]"
0DAC                             ;     jr z,blockLength4
0DAC                             ;     cp "("
0DAC                             ;     jr z,blockLength2
0DAC                             ;     cp "{"
0DAC                             ;     jr z,blockLength2
0DAC                             ;     cp "["
0DAC                             ;     jr z,blockLength2
0DAC                             ;     cp "'"
0DAC                             ;     jr z,blockLength3
0DAC                             ;     cp "`"
0DAC                             ;     jr z,blockLength3
0DAC                             ;     cp DQ
0DAC                             ;     jr z,blockLength3
0DAC                             ;     jr blockLength1
0DAC                             ; blockLength2:
0DAC                             ;     inc d
0DAC                             ;     jr blockLength1
0DAC                             ; blockLength4:
0DAC                             ;     dec d
0DAC                             ;     jr nz, blockLength1         ; get the next element
0DAC                             ; blockLength3:
0DAC                             ;     ld a,$80
0DAC                             ;     xor d
0DAC                             ;     ld d,a
0DAC                             ;     jr nz, blockLength1
0DAC                             ;     pop hl                      ; hl = block*
0DAC                             ;     or a
0DAC                             ;     sbc hl,de
0DAC                             ;     push hl
0DAC                             ;     jp (ix)
0DAC                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0DAC                             ; \a start of stack \#3 depth \b base \$ prompt
0DAC                             ; DW dStack               ; a vS0 start of datastack			
0DAC                             ; DW FALSE                ; b vBase16
0DAC                             ; DW 0                    ; c vTIBPtr an offset to the tib
0DAC                             ; DW 0                    ; d
0DAC                             ; DW 65                   ; e vLastDef "A" last command u defined
0DAC                             ; DW 0                    ; f
0DAC                             ; DW page6                ; g 256 bytes limits
0DAC                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0DAC                          ;*Macro unroll: FUNC f1, 1, ""
0DAC                F1:          
0DAC   CD 23 0A               CALL   go   
0DAF   00 00                  DW   NUL   
0DB1   B7 0D                  DW   f1M_2845S12   
0DB3   B5 0D                  DW   $+2   
0DB5   01                     DB   1   
0DB6   00                     .PSTR   ""   
0DB7                F1M_2845S12:      
0DB7   00                     DB   0   
0DB8                          ;*Macro unroll: FUNC f2, 1, ""
0DB8                F2:          
0DB8   CD 23 0A               CALL   go   
0DBB   00 00                  DW   NUL   
0DBD   C3 0D                  DW   f2M_2847S15   
0DBF   C1 0D                  DW   $+2   
0DC1   01                     DB   1   
0DC2   00                     .PSTR   ""   
0DC3                F2M_2847S15:      
0DC3   00                     DB   0   
0DC4                          ;*Macro unroll: FUNC f3, 0, ""
0DC4                F3:          
0DC4   CD 23 0A               CALL   go   
0DC7   00 00                  DW   NUL   
0DC9   CF 0D                  DW   f3M_2849S18   
0DCB   CD 0D                  DW   $+2   
0DCD   00                     DB   0   
0DCE   00                     .PSTR   ""   
0DCF                F3M_2849S18:      
0DCF   00                     DB   0   
0DD0                          ;*Macro unroll: FUNC f4, 1, ""
0DD0                F4:          
0DD0   CD 23 0A               CALL   go   
0DD3   00 00                  DW   NUL   
0DD5   DB 0D                  DW   f4M_2851S21   
0DD7   D9 0D                  DW   $+2   
0DD9   01                     DB   1   
0DDA   00                     .PSTR   ""   
0DDB                F4M_2851S21:      
0DDB   00                     DB   0   
0DDC                          ALIGN   $100   
0E00                TESTSSTART:      
0E00                             ; ; test "[1 2 5]/as",3
0E00                             ; ; ; ; test "0 10 1 /rg :a{%a 1 + 10 *} /mp :a{%a.} /fe", 0
0E00                             ; test "$1000 0 10 1 /rg :a{%a 1 + 10 *} /mp :a{%a.} /fe", $1000
0E00                             ; test "5 :a{%a}^", 5
0E00                             ; test ":a{%a} F=1F^", 1
0E00                             ; test "1 :b{:a{%a}}^F= 3F^",3
0E00                             ; test "1 :b{:a{%a%b-}}^F= 3F^",2
0E00                             ; call printStr
0E00                             ; .cstr "Done!"
0E00                             ; HALT
0E00                             ; 
0E00                          ;*Macro unroll:  test "/f", false
0E00   31 00 4D               LD   SP,STACK   
0E03   CD 8B 0C               CALL   coldInit   
0E06   CD D2 4B               CALL   execStr   
0E09   2F 66 00               DB   "/f",0   
0E0C   CD CD 0B               CALL   flushBuffer   
0E0F   E1                     POP   HL   
0E10   E5                     PUSH   HL   
0E11   11 00 00               LD   DE,false   
0E14   B7                     OR   A   
0E15   ED 52                  SBC   HL,DE   
0E17   7D                     LD   A,L   
0E18   B4                     OR   H   
0E19   CA 76 0E               JP   Z,expectM_2866S41   
0E1C   CD 57 0C               CALL   printStr   
0E1F   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0E28   CD 57 0C               CALL   printStr   
0E2B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E3A   21 00 00               LD   hl,false   
0E3D   E5                     PUSH   hl   
0E3E   E5                     PUSH   hl   
0E3F   CD 5C 0D               CALL   run   
0E42   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0E4A   CD CD 0B               CALL   flushBuffer   
0E4D   CD 57 0C               CALL   printStr   
0E50   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E5D   E1                     POP   hl   
0E5E   E5                     PUSH   hl   
0E5F   E5                     PUSH   hl   
0E60   CD 5C 0D               CALL   run   
0E63   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0E72   CD CD 0B               CALL   flushBuffer   
0E75   76                     HALT      
0E76                EXPECTM_2866S41:      
0E76   E1                     POP   HL   
0E77                          ;*Macro unroll:  test "/t", true
0E77   31 00 4D               LD   SP,STACK   
0E7A   CD 8B 0C               CALL   coldInit   
0E7D   CD D2 4B               CALL   execStr   
0E80   2F 74 00               DB   "/t",0   
0E83   CD CD 0B               CALL   flushBuffer   
0E86   E1                     POP   HL   
0E87   E5                     PUSH   HL   
0E88   11 FF FF               LD   DE,true   
0E8B   B7                     OR   A   
0E8C   ED 52                  SBC   HL,DE   
0E8E   7D                     LD   A,L   
0E8F   B4                     OR   H   
0E90   CA ED 0E               JP   Z,expectM_2867S42   
0E93   CD 57 0C               CALL   printStr   
0E96   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0E9F   CD 57 0C               CALL   printStr   
0EA2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EB1   21 FF FF               LD   hl,true   
0EB4   E5                     PUSH   hl   
0EB5   E5                     PUSH   hl   
0EB6   CD 5C 0D               CALL   run   
0EB9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0EC1   CD CD 0B               CALL   flushBuffer   
0EC4   CD 57 0C               CALL   printStr   
0EC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0ED4   E1                     POP   hl   
0ED5   E5                     PUSH   hl   
0ED6   E5                     PUSH   hl   
0ED7   CD 5C 0D               CALL   run   
0EDA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0EE9   CD CD 0B               CALL   flushBuffer   
0EEC   76                     HALT      
0EED                EXPECTM_2867S42:      
0EED   E1                     POP   HL   
0EEE                          ;*Macro unroll:  test "1", 1
0EEE   31 00 4D               LD   SP,STACK   
0EF1   CD 8B 0C               CALL   coldInit   
0EF4   CD D2 4B               CALL   execStr   
0EF7   31 00                  DB   "1",0   
0EF9   CD CD 0B               CALL   flushBuffer   
0EFC   E1                     POP   HL   
0EFD   E5                     PUSH   HL   
0EFE   11 01 00               LD   DE,1   
0F01   B7                     OR   A   
0F02   ED 52                  SBC   HL,DE   
0F04   7D                     LD   A,L   
0F05   B4                     OR   H   
0F06   CA 62 0F               JP   Z,expectM_2868S43   
0F09   CD 57 0C               CALL   printStr   
0F0C   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0F14   CD 57 0C               CALL   printStr   
0F17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F26   21 01 00               LD   hl,1   
0F29   E5                     PUSH   hl   
0F2A   E5                     PUSH   hl   
0F2B   CD 5C 0D               CALL   run   
0F2E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0F36   CD CD 0B               CALL   flushBuffer   
0F39   CD 57 0C               CALL   printStr   
0F3C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F49   E1                     POP   hl   
0F4A   E5                     PUSH   hl   
0F4B   E5                     PUSH   hl   
0F4C   CD 5C 0D               CALL   run   
0F4F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0F5E   CD CD 0B               CALL   flushBuffer   
0F61   76                     HALT      
0F62                EXPECTM_2868S43:      
0F62   E1                     POP   HL   
0F63                          ;*Macro unroll:  test "2", 2
0F63   31 00 4D               LD   SP,STACK   
0F66   CD 8B 0C               CALL   coldInit   
0F69   CD D2 4B               CALL   execStr   
0F6C   32 00                  DB   "2",0   
0F6E   CD CD 0B               CALL   flushBuffer   
0F71   E1                     POP   HL   
0F72   E5                     PUSH   HL   
0F73   11 02 00               LD   DE,2   
0F76   B7                     OR   A   
0F77   ED 52                  SBC   HL,DE   
0F79   7D                     LD   A,L   
0F7A   B4                     OR   H   
0F7B   CA D7 0F               JP   Z,expectM_2869S44   
0F7E   CD 57 0C               CALL   printStr   
0F81   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0F89   CD 57 0C               CALL   printStr   
0F8C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F9B   21 02 00               LD   hl,2   
0F9E   E5                     PUSH   hl   
0F9F   E5                     PUSH   hl   
0FA0   CD 5C 0D               CALL   run   
0FA3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0FAB   CD CD 0B               CALL   flushBuffer   
0FAE   CD 57 0C               CALL   printStr   
0FB1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FBE   E1                     POP   hl   
0FBF   E5                     PUSH   hl   
0FC0   E5                     PUSH   hl   
0FC1   CD 5C 0D               CALL   run   
0FC4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0FD3   CD CD 0B               CALL   flushBuffer   
0FD6   76                     HALT      
0FD7                EXPECTM_2869S44:      
0FD7   E1                     POP   HL   
0FD8                          ;*Macro unroll:  test "1", 1
0FD8   31 00 4D               LD   SP,STACK   
0FDB   CD 8B 0C               CALL   coldInit   
0FDE   CD D2 4B               CALL   execStr   
0FE1   31 00                  DB   "1",0   
0FE3   CD CD 0B               CALL   flushBuffer   
0FE6   E1                     POP   HL   
0FE7   E5                     PUSH   HL   
0FE8   11 01 00               LD   DE,1   
0FEB   B7                     OR   A   
0FEC   ED 52                  SBC   HL,DE   
0FEE   7D                     LD   A,L   
0FEF   B4                     OR   H   
0FF0   CA 4C 10               JP   Z,expectM_2870S45   
0FF3   CD 57 0C               CALL   printStr   
0FF6   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0FFE   CD 57 0C               CALL   printStr   
1001   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1010   21 01 00               LD   hl,1   
1013   E5                     PUSH   hl   
1014   E5                     PUSH   hl   
1015   CD 5C 0D               CALL   run   
1018   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1020   CD CD 0B               CALL   flushBuffer   
1023   CD 57 0C               CALL   printStr   
1026   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1033   E1                     POP   hl   
1034   E5                     PUSH   hl   
1035   E5                     PUSH   hl   
1036   CD 5C 0D               CALL   run   
1039   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1048   CD CD 0B               CALL   flushBuffer   
104B   76                     HALT      
104C                EXPECTM_2870S45:      
104C   E1                     POP   HL   
104D                          ;*Macro unroll:  test "0", 0
104D   31 00 4D               LD   SP,STACK   
1050   CD 8B 0C               CALL   coldInit   
1053   CD D2 4B               CALL   execStr   
1056   30 00                  DB   "0",0   
1058   CD CD 0B               CALL   flushBuffer   
105B   E1                     POP   HL   
105C   E5                     PUSH   HL   
105D   11 00 00               LD   DE,0   
1060   B7                     OR   A   
1061   ED 52                  SBC   HL,DE   
1063   7D                     LD   A,L   
1064   B4                     OR   H   
1065   CA C1 10               JP   Z,expectM_2871S46   
1068   CD 57 0C               CALL   printStr   
106B   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
1073   CD 57 0C               CALL   printStr   
1076   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1085   21 00 00               LD   hl,0   
1088   E5                     PUSH   hl   
1089   E5                     PUSH   hl   
108A   CD 5C 0D               CALL   run   
108D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1095   CD CD 0B               CALL   flushBuffer   
1098   CD 57 0C               CALL   printStr   
109B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10A8   E1                     POP   hl   
10A9   E5                     PUSH   hl   
10AA   E5                     PUSH   hl   
10AB   CD 5C 0D               CALL   run   
10AE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
10BD   CD CD 0B               CALL   flushBuffer   
10C0   76                     HALT      
10C1                EXPECTM_2871S46:      
10C1   E1                     POP   HL   
10C2                          ;*Macro unroll:  test "10", 10
10C2   31 00 4D               LD   SP,STACK   
10C5   CD 8B 0C               CALL   coldInit   
10C8   CD D2 4B               CALL   execStr   
10CB   31 30 00               DB   "10",0   
10CE   CD CD 0B               CALL   flushBuffer   
10D1   E1                     POP   HL   
10D2   E5                     PUSH   HL   
10D3   11 0A 00               LD   DE,10   
10D6   B7                     OR   A   
10D7   ED 52                  SBC   HL,DE   
10D9   7D                     LD   A,L   
10DA   B4                     OR   H   
10DB   CA 38 11               JP   Z,expectM_2872S47   
10DE   CD 57 0C               CALL   printStr   
10E1   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
10EA   CD 57 0C               CALL   printStr   
10ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10FC   21 0A 00               LD   hl,10   
10FF   E5                     PUSH   hl   
1100   E5                     PUSH   hl   
1101   CD 5C 0D               CALL   run   
1104   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
110C   CD CD 0B               CALL   flushBuffer   
110F   CD 57 0C               CALL   printStr   
1112   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
111F   E1                     POP   hl   
1120   E5                     PUSH   hl   
1121   E5                     PUSH   hl   
1122   CD 5C 0D               CALL   run   
1125   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1134   CD CD 0B               CALL   flushBuffer   
1137   76                     HALT      
1138                EXPECTM_2872S47:      
1138   E1                     POP   HL   
1139                          ;*Macro unroll:  test "123", 123
1139   31 00 4D               LD   SP,STACK   
113C   CD 8B 0C               CALL   coldInit   
113F   CD D2 4B               CALL   execStr   
1142   31 32 33 00            DB   "123",0   
1146   CD CD 0B               CALL   flushBuffer   
1149   E1                     POP   HL   
114A   E5                     PUSH   HL   
114B   11 7B 00               LD   DE,123   
114E   B7                     OR   A   
114F   ED 52                  SBC   HL,DE   
1151   7D                     LD   A,L   
1152   B4                     OR   H   
1153   CA B1 11               JP   Z,expectM_2873S48   
1156   CD 57 0C               CALL   printStr   
1159   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
1163   CD 57 0C               CALL   printStr   
1166   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1175   21 7B 00               LD   hl,123   
1178   E5                     PUSH   hl   
1179   E5                     PUSH   hl   
117A   CD 5C 0D               CALL   run   
117D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1185   CD CD 0B               CALL   flushBuffer   
1188   CD 57 0C               CALL   printStr   
118B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1198   E1                     POP   hl   
1199   E5                     PUSH   hl   
119A   E5                     PUSH   hl   
119B   CD 5C 0D               CALL   run   
119E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
11AD   CD CD 0B               CALL   flushBuffer   
11B0   76                     HALT      
11B1                EXPECTM_2873S48:      
11B1   E1                     POP   HL   
11B2                          ;*Macro unroll:  test "-1",-1
11B2   31 00 4D               LD   SP,STACK   
11B5   CD 8B 0C               CALL   coldInit   
11B8   CD D2 4B               CALL   execStr   
11BB   2D 31 00               DB   "-1",0   
11BE   CD CD 0B               CALL   flushBuffer   
11C1   E1                     POP   HL   
11C2   E5                     PUSH   HL   
11C3   11 FF FF               LD   DE,-1   
11C6   B7                     OR   A   
11C7   ED 52                  SBC   HL,DE   
11C9   7D                     LD   A,L   
11CA   B4                     OR   H   
11CB   CA 28 12               JP   Z,expectM_2874S49   
11CE   CD 57 0C               CALL   printStr   
11D1   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
11DA   CD 57 0C               CALL   printStr   
11DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11EC   21 FF FF               LD   hl,-1   
11EF   E5                     PUSH   hl   
11F0   E5                     PUSH   hl   
11F1   CD 5C 0D               CALL   run   
11F4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
11FC   CD CD 0B               CALL   flushBuffer   
11FF   CD 57 0C               CALL   printStr   
1202   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
120F   E1                     POP   hl   
1210   E5                     PUSH   hl   
1211   E5                     PUSH   hl   
1212   CD 5C 0D               CALL   run   
1215   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1224   CD CD 0B               CALL   flushBuffer   
1227   76                     HALT      
1228                EXPECTM_2874S49:      
1228   E1                     POP   HL   
1229                          ;*Macro unroll:  test "''", 0
1229   31 00 4D               LD   SP,STACK   
122C   CD 8B 0C               CALL   coldInit   
122F   CD D2 4B               CALL   execStr   
1232   27 27 00               DB   "''",0   
1235   CD CD 0B               CALL   flushBuffer   
1238   E1                     POP   HL   
1239   E5                     PUSH   HL   
123A   11 00 00               LD   DE,0   
123D   B7                     OR   A   
123E   ED 52                  SBC   HL,DE   
1240   7D                     LD   A,L   
1241   B4                     OR   H   
1242   CA 9F 12               JP   Z,expectM_2875S50   
1245   CD 57 0C               CALL   printStr   
1248   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
1251   CD 57 0C               CALL   printStr   
1254   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1263   21 00 00               LD   hl,0   
1266   E5                     PUSH   hl   
1267   E5                     PUSH   hl   
1268   CD 5C 0D               CALL   run   
126B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1273   CD CD 0B               CALL   flushBuffer   
1276   CD 57 0C               CALL   printStr   
1279   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1286   E1                     POP   hl   
1287   E5                     PUSH   hl   
1288   E5                     PUSH   hl   
1289   CD 5C 0D               CALL   run   
128C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
129B   CD CD 0B               CALL   flushBuffer   
129E   76                     HALT      
129F                EXPECTM_2875S50:      
129F   E1                     POP   HL   
12A0                          ;*Macro unroll:  test "'a'", $61
12A0   31 00 4D               LD   SP,STACK   
12A3   CD 8B 0C               CALL   coldInit   
12A6   CD D2 4B               CALL   execStr   
12A9   27 61 27 00            DB   "'a'",0   
12AD   CD CD 0B               CALL   flushBuffer   
12B0   E1                     POP   HL   
12B1   E5                     PUSH   HL   
12B2   11 61 00               LD   DE,$61   
12B5   B7                     OR   A   
12B6   ED 52                  SBC   HL,DE   
12B8   7D                     LD   A,L   
12B9   B4                     OR   H   
12BA   CA 18 13               JP   Z,expectM_2876S51   
12BD   CD 57 0C               CALL   printStr   
12C0   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
12CA   CD 57 0C               CALL   printStr   
12CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12DC   21 61 00               LD   hl,$61   
12DF   E5                     PUSH   hl   
12E0   E5                     PUSH   hl   
12E1   CD 5C 0D               CALL   run   
12E4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12EC   CD CD 0B               CALL   flushBuffer   
12EF   CD 57 0C               CALL   printStr   
12F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12FF   E1                     POP   hl   
1300   E5                     PUSH   hl   
1301   E5                     PUSH   hl   
1302   CD 5C 0D               CALL   run   
1305   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1314   CD CD 0B               CALL   flushBuffer   
1317   76                     HALT      
1318                EXPECTM_2876S51:      
1318   E1                     POP   HL   
1319                          ;*Macro unroll:  test "'\\''", $27
1319   31 00 4D               LD   SP,STACK   
131C   CD 8B 0C               CALL   coldInit   
131F   CD D2 4B               CALL   execStr   
1322   27 5C 27 27 00         DB   "'\\''",0   
1327   CD CD 0B               CALL   flushBuffer   
132A   E1                     POP   HL   
132B   E5                     PUSH   HL   
132C   11 27 00               LD   DE,$27   
132F   B7                     OR   A   
1330   ED 52                  SBC   HL,DE   
1332   7D                     LD   A,L   
1333   B4                     OR   H   
1334   CA 93 13               JP   Z,expectM_2877S52   
1337   CD 57 0C               CALL   printStr   
133A   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
1345   CD 57 0C               CALL   printStr   
1348   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1357   21 27 00               LD   hl,$27   
135A   E5                     PUSH   hl   
135B   E5                     PUSH   hl   
135C   CD 5C 0D               CALL   run   
135F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1367   CD CD 0B               CALL   flushBuffer   
136A   CD 57 0C               CALL   printStr   
136D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
137A   E1                     POP   hl   
137B   E5                     PUSH   hl   
137C   E5                     PUSH   hl   
137D   CD 5C 0D               CALL   run   
1380   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
138F   CD CD 0B               CALL   flushBuffer   
1392   76                     HALT      
1393                EXPECTM_2877S52:      
1393   E1                     POP   HL   
1394                          ;*Macro unroll:  test "$10", $10
1394   31 00 4D               LD   SP,STACK   
1397   CD 8B 0C               CALL   coldInit   
139A   CD D2 4B               CALL   execStr   
139D   24 31 30 00            DB   "$10",0   
13A1   CD CD 0B               CALL   flushBuffer   
13A4   E1                     POP   HL   
13A5   E5                     PUSH   HL   
13A6   11 10 00               LD   DE,$10   
13A9   B7                     OR   A   
13AA   ED 52                  SBC   HL,DE   
13AC   7D                     LD   A,L   
13AD   B4                     OR   H   
13AE   CA 0C 14               JP   Z,expectM_2878S53   
13B1   CD 57 0C               CALL   printStr   
13B4   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
13BE   CD 57 0C               CALL   printStr   
13C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13D0   21 10 00               LD   hl,$10   
13D3   E5                     PUSH   hl   
13D4   E5                     PUSH   hl   
13D5   CD 5C 0D               CALL   run   
13D8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
13E0   CD CD 0B               CALL   flushBuffer   
13E3   CD 57 0C               CALL   printStr   
13E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13F3   E1                     POP   hl   
13F4   E5                     PUSH   hl   
13F5   E5                     PUSH   hl   
13F6   CD 5C 0D               CALL   run   
13F9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1408   CD CD 0B               CALL   flushBuffer   
140B   76                     HALT      
140C                EXPECTM_2878S53:      
140C   E1                     POP   HL   
140D                          ;*Macro unroll:  test "$FF", $FF
140D   31 00 4D               LD   SP,STACK   
1410   CD 8B 0C               CALL   coldInit   
1413   CD D2 4B               CALL   execStr   
1416   24 46 46 00            DB   "$FF",0   
141A   CD CD 0B               CALL   flushBuffer   
141D   E1                     POP   HL   
141E   E5                     PUSH   HL   
141F   11 FF 00               LD   DE,$FF   
1422   B7                     OR   A   
1423   ED 52                  SBC   HL,DE   
1425   7D                     LD   A,L   
1426   B4                     OR   H   
1427   CA 85 14               JP   Z,expectM_2879S54   
142A   CD 57 0C               CALL   printStr   
142D   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
1437   CD 57 0C               CALL   printStr   
143A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1449   21 FF 00               LD   hl,$FF   
144C   E5                     PUSH   hl   
144D   E5                     PUSH   hl   
144E   CD 5C 0D               CALL   run   
1451   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1459   CD CD 0B               CALL   flushBuffer   
145C   CD 57 0C               CALL   printStr   
145F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
146C   E1                     POP   hl   
146D   E5                     PUSH   hl   
146E   E5                     PUSH   hl   
146F   CD 5C 0D               CALL   run   
1472   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1481   CD CD 0B               CALL   flushBuffer   
1484   76                     HALT      
1485                EXPECTM_2879S54:      
1485   E1                     POP   HL   
1486                          ;*Macro unroll:  test "-1 2 +",1
1486   31 00 4D               LD   SP,STACK   
1489   CD 8B 0C               CALL   coldInit   
148C   CD D2 4B               CALL   execStr   
148F   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
1496   CD CD 0B               CALL   flushBuffer   
1499   E1                     POP   HL   
149A   E5                     PUSH   HL   
149B   11 01 00               LD   DE,1   
149E   B7                     OR   A   
149F   ED 52                  SBC   HL,DE   
14A1   7D                     LD   A,L   
14A2   B4                     OR   H   
14A3   CA 04 15               JP   Z,expectM_2880S55   
14A6   CD 57 0C               CALL   printStr   
14A9   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
14B6   CD 57 0C               CALL   printStr   
14B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14C8   21 01 00               LD   hl,1   
14CB   E5                     PUSH   hl   
14CC   E5                     PUSH   hl   
14CD   CD 5C 0D               CALL   run   
14D0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14D8   CD CD 0B               CALL   flushBuffer   
14DB   CD 57 0C               CALL   printStr   
14DE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14EB   E1                     POP   hl   
14EC   E5                     PUSH   hl   
14ED   E5                     PUSH   hl   
14EE   CD 5C 0D               CALL   run   
14F1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1500   CD CD 0B               CALL   flushBuffer   
1503   76                     HALT      
1504                EXPECTM_2880S55:      
1504   E1                     POP   HL   
1505                          ;*Macro unroll:  test "-1 1 +",0
1505   31 00 4D               LD   SP,STACK   
1508   CD 8B 0C               CALL   coldInit   
150B   CD D2 4B               CALL   execStr   
150E   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
1515   CD CD 0B               CALL   flushBuffer   
1518   E1                     POP   HL   
1519   E5                     PUSH   HL   
151A   11 00 00               LD   DE,0   
151D   B7                     OR   A   
151E   ED 52                  SBC   HL,DE   
1520   7D                     LD   A,L   
1521   B4                     OR   H   
1522   CA 83 15               JP   Z,expectM_2881S56   
1525   CD 57 0C               CALL   printStr   
1528   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1535   CD 57 0C               CALL   printStr   
1538   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1547   21 00 00               LD   hl,0   
154A   E5                     PUSH   hl   
154B   E5                     PUSH   hl   
154C   CD 5C 0D               CALL   run   
154F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1557   CD CD 0B               CALL   flushBuffer   
155A   CD 57 0C               CALL   printStr   
155D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
156A   E1                     POP   hl   
156B   E5                     PUSH   hl   
156C   E5                     PUSH   hl   
156D   CD 5C 0D               CALL   run   
1570   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
157F   CD CD 0B               CALL   flushBuffer   
1582   76                     HALT      
1583                EXPECTM_2881S56:      
1583   E1                     POP   HL   
1584                          ;*Macro unroll:  test "1 2 +", 3
1584   31 00 4D               LD   SP,STACK   
1587   CD 8B 0C               CALL   coldInit   
158A   CD D2 4B               CALL   execStr   
158D   31 20 32 20 2B 00      DB   "1 2 +",0   
1593   CD CD 0B               CALL   flushBuffer   
1596   E1                     POP   HL   
1597   E5                     PUSH   HL   
1598   11 03 00               LD   DE,3   
159B   B7                     OR   A   
159C   ED 52                  SBC   HL,DE   
159E   7D                     LD   A,L   
159F   B4                     OR   H   
15A0   CA 00 16               JP   Z,expectM_2882S57   
15A3   CD 57 0C               CALL   printStr   
15A6   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
15B2   CD 57 0C               CALL   printStr   
15B5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15C4   21 03 00               LD   hl,3   
15C7   E5                     PUSH   hl   
15C8   E5                     PUSH   hl   
15C9   CD 5C 0D               CALL   run   
15CC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15D4   CD CD 0B               CALL   flushBuffer   
15D7   CD 57 0C               CALL   printStr   
15DA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15E7   E1                     POP   hl   
15E8   E5                     PUSH   hl   
15E9   E5                     PUSH   hl   
15EA   CD 5C 0D               CALL   run   
15ED   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
15FC   CD CD 0B               CALL   flushBuffer   
15FF   76                     HALT      
1600                EXPECTM_2882S57:      
1600   E1                     POP   HL   
1601                          ;*Macro unroll:  test "4 1 2 +", 3
1601   31 00 4D               LD   SP,STACK   
1604   CD 8B 0C               CALL   coldInit   
1607   CD D2 4B               CALL   execStr   
160A   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
1612   CD CD 0B               CALL   flushBuffer   
1615   E1                     POP   HL   
1616   E5                     PUSH   HL   
1617   11 03 00               LD   DE,3   
161A   B7                     OR   A   
161B   ED 52                  SBC   HL,DE   
161D   7D                     LD   A,L   
161E   B4                     OR   H   
161F   CA 81 16               JP   Z,expectM_2883S58   
1622   CD 57 0C               CALL   printStr   
1625   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1633   CD 57 0C               CALL   printStr   
1636   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1645   21 03 00               LD   hl,3   
1648   E5                     PUSH   hl   
1649   E5                     PUSH   hl   
164A   CD 5C 0D               CALL   run   
164D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1655   CD CD 0B               CALL   flushBuffer   
1658   CD 57 0C               CALL   printStr   
165B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1668   E1                     POP   hl   
1669   E5                     PUSH   hl   
166A   E5                     PUSH   hl   
166B   CD 5C 0D               CALL   run   
166E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
167D   CD CD 0B               CALL   flushBuffer   
1680   76                     HALT      
1681                EXPECTM_2883S58:      
1681   E1                     POP   HL   
1682                          ;*Macro unroll:  test "123 456 +", 123+456
1682   31 00 4D               LD   SP,STACK   
1685   CD 8B 0C               CALL   coldInit   
1688   CD D2 4B               CALL   execStr   
168B   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1695   CD CD 0B               CALL   flushBuffer   
1698   E1                     POP   HL   
1699   E5                     PUSH   HL   
169A   11 43 02               LD   DE,123+456   
169D   B7                     OR   A   
169E   ED 52                  SBC   HL,DE   
16A0   7D                     LD   A,L   
16A1   B4                     OR   H   
16A2   CA 06 17               JP   Z,expectM_2884S59   
16A5   CD 57 0C               CALL   printStr   
16A8   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
16B8   CD 57 0C               CALL   printStr   
16BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16CA   21 43 02               LD   hl,123+456   
16CD   E5                     PUSH   hl   
16CE   E5                     PUSH   hl   
16CF   CD 5C 0D               CALL   run   
16D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16DA   CD CD 0B               CALL   flushBuffer   
16DD   CD 57 0C               CALL   printStr   
16E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16ED   E1                     POP   hl   
16EE   E5                     PUSH   hl   
16EF   E5                     PUSH   hl   
16F0   CD 5C 0D               CALL   run   
16F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1702   CD CD 0B               CALL   flushBuffer   
1705   76                     HALT      
1706                EXPECTM_2884S59:      
1706   E1                     POP   HL   
1707                          ;*Macro unroll:  test "64 128 +", 64+128
1707   31 00 4D               LD   SP,STACK   
170A   CD 8B 0C               CALL   coldInit   
170D   CD D2 4B               CALL   execStr   
1710   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
1719   CD CD 0B               CALL   flushBuffer   
171C   E1                     POP   HL   
171D   E5                     PUSH   HL   
171E   11 C0 00               LD   DE,64+128   
1721   B7                     OR   A   
1722   ED 52                  SBC   HL,DE   
1724   7D                     LD   A,L   
1725   B4                     OR   H   
1726   CA 89 17               JP   Z,expectM_2885S60   
1729   CD 57 0C               CALL   printStr   
172C   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
173B   CD 57 0C               CALL   printStr   
173E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
174D   21 C0 00               LD   hl,64+128   
1750   E5                     PUSH   hl   
1751   E5                     PUSH   hl   
1752   CD 5C 0D               CALL   run   
1755   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
175D   CD CD 0B               CALL   flushBuffer   
1760   CD 57 0C               CALL   printStr   
1763   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1770   E1                     POP   hl   
1771   E5                     PUSH   hl   
1772   E5                     PUSH   hl   
1773   CD 5C 0D               CALL   run   
1776   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1785   CD CD 0B               CALL   flushBuffer   
1788   76                     HALT      
1789                EXPECTM_2885S60:      
1789   E1                     POP   HL   
178A                          ;*Macro unroll:  test "1 2 +", 3
178A   31 00 4D               LD   SP,STACK   
178D   CD 8B 0C               CALL   coldInit   
1790   CD D2 4B               CALL   execStr   
1793   31 20 32 20 2B 00      DB   "1 2 +",0   
1799   CD CD 0B               CALL   flushBuffer   
179C   E1                     POP   HL   
179D   E5                     PUSH   HL   
179E   11 03 00               LD   DE,3   
17A1   B7                     OR   A   
17A2   ED 52                  SBC   HL,DE   
17A4   7D                     LD   A,L   
17A5   B4                     OR   H   
17A6   CA 06 18               JP   Z,expectM_2886S61   
17A9   CD 57 0C               CALL   printStr   
17AC   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
17B8   CD 57 0C               CALL   printStr   
17BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17CA   21 03 00               LD   hl,3   
17CD   E5                     PUSH   hl   
17CE   E5                     PUSH   hl   
17CF   CD 5C 0D               CALL   run   
17D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
17DA   CD CD 0B               CALL   flushBuffer   
17DD   CD 57 0C               CALL   printStr   
17E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17ED   E1                     POP   hl   
17EE   E5                     PUSH   hl   
17EF   E5                     PUSH   hl   
17F0   CD 5C 0D               CALL   run   
17F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1802   CD CD 0B               CALL   flushBuffer   
1805   76                     HALT      
1806                EXPECTM_2886S61:      
1806   E1                     POP   HL   
1807                          ;*Macro unroll:  test "1a= a++ a",2
1807   31 00 4D               LD   SP,STACK   
180A   CD 8B 0C               CALL   coldInit   
180D   CD D2 4B               CALL   execStr   
1810   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
181A   CD CD 0B               CALL   flushBuffer   
181D   E1                     POP   HL   
181E   E5                     PUSH   HL   
181F   11 02 00               LD   DE,2   
1822   B7                     OR   A   
1823   ED 52                  SBC   HL,DE   
1825   7D                     LD   A,L   
1826   B4                     OR   H   
1827   CA 8B 18               JP   Z,expectM_2887S62   
182A   CD 57 0C               CALL   printStr   
182D   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
183D   CD 57 0C               CALL   printStr   
1840   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
184F   21 02 00               LD   hl,2   
1852   E5                     PUSH   hl   
1853   E5                     PUSH   hl   
1854   CD 5C 0D               CALL   run   
1857   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
185F   CD CD 0B               CALL   flushBuffer   
1862   CD 57 0C               CALL   printStr   
1865   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1872   E1                     POP   hl   
1873   E5                     PUSH   hl   
1874   E5                     PUSH   hl   
1875   CD 5C 0D               CALL   run   
1878   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1887   CD CD 0B               CALL   flushBuffer   
188A   76                     HALT      
188B                EXPECTM_2887S62:      
188B   E1                     POP   HL   
188C                          ;*Macro unroll:  test "-1 -1 -",0
188C   31 00 4D               LD   SP,STACK   
188F   CD 8B 0C               CALL   coldInit   
1892   CD D2 4B               CALL   execStr   
1895   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
189D   CD CD 0B               CALL   flushBuffer   
18A0   E1                     POP   HL   
18A1   E5                     PUSH   HL   
18A2   11 00 00               LD   DE,0   
18A5   B7                     OR   A   
18A6   ED 52                  SBC   HL,DE   
18A8   7D                     LD   A,L   
18A9   B4                     OR   H   
18AA   CA 0C 19               JP   Z,expectM_2888S63   
18AD   CD 57 0C               CALL   printStr   
18B0   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
18BE   CD 57 0C               CALL   printStr   
18C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18D0   21 00 00               LD   hl,0   
18D3   E5                     PUSH   hl   
18D4   E5                     PUSH   hl   
18D5   CD 5C 0D               CALL   run   
18D8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
18E0   CD CD 0B               CALL   flushBuffer   
18E3   CD 57 0C               CALL   printStr   
18E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18F3   E1                     POP   hl   
18F4   E5                     PUSH   hl   
18F5   E5                     PUSH   hl   
18F6   CD 5C 0D               CALL   run   
18F9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1908   CD CD 0B               CALL   flushBuffer   
190B   76                     HALT      
190C                EXPECTM_2888S63:      
190C   E1                     POP   HL   
190D                          ;*Macro unroll:  test "5 3 -", 2
190D   31 00 4D               LD   SP,STACK   
1910   CD 8B 0C               CALL   coldInit   
1913   CD D2 4B               CALL   execStr   
1916   35 20 33 20 2D 00      DB   "5 3 -",0   
191C   CD CD 0B               CALL   flushBuffer   
191F   E1                     POP   HL   
1920   E5                     PUSH   HL   
1921   11 02 00               LD   DE,2   
1924   B7                     OR   A   
1925   ED 52                  SBC   HL,DE   
1927   7D                     LD   A,L   
1928   B4                     OR   H   
1929   CA 89 19               JP   Z,expectM_2889S64   
192C   CD 57 0C               CALL   printStr   
192F   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
193B   CD 57 0C               CALL   printStr   
193E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
194D   21 02 00               LD   hl,2   
1950   E5                     PUSH   hl   
1951   E5                     PUSH   hl   
1952   CD 5C 0D               CALL   run   
1955   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
195D   CD CD 0B               CALL   flushBuffer   
1960   CD 57 0C               CALL   printStr   
1963   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1970   E1                     POP   hl   
1971   E5                     PUSH   hl   
1972   E5                     PUSH   hl   
1973   CD 5C 0D               CALL   run   
1976   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1985   CD CD 0B               CALL   flushBuffer   
1988   76                     HALT      
1989                EXPECTM_2889S64:      
1989   E1                     POP   HL   
198A                          ;*Macro unroll:  test "2 1 -",1
198A   31 00 4D               LD   SP,STACK   
198D   CD 8B 0C               CALL   coldInit   
1990   CD D2 4B               CALL   execStr   
1993   32 20 31 20 2D 00      DB   "2 1 -",0   
1999   CD CD 0B               CALL   flushBuffer   
199C   E1                     POP   HL   
199D   E5                     PUSH   HL   
199E   11 01 00               LD   DE,1   
19A1   B7                     OR   A   
19A2   ED 52                  SBC   HL,DE   
19A4   7D                     LD   A,L   
19A5   B4                     OR   H   
19A6   CA 06 1A               JP   Z,expectM_2890S65   
19A9   CD 57 0C               CALL   printStr   
19AC   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
19B8   CD 57 0C               CALL   printStr   
19BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19CA   21 01 00               LD   hl,1   
19CD   E5                     PUSH   hl   
19CE   E5                     PUSH   hl   
19CF   CD 5C 0D               CALL   run   
19D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
19DA   CD CD 0B               CALL   flushBuffer   
19DD   CD 57 0C               CALL   printStr   
19E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19ED   E1                     POP   hl   
19EE   E5                     PUSH   hl   
19EF   E5                     PUSH   hl   
19F0   CD 5C 0D               CALL   run   
19F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A02   CD CD 0B               CALL   flushBuffer   
1A05   76                     HALT      
1A06                EXPECTM_2890S65:      
1A06   E1                     POP   HL   
1A07                          ;*Macro unroll:  test "3a= a-- a",2
1A07   31 00 4D               LD   SP,STACK   
1A0A   CD 8B 0C               CALL   coldInit   
1A0D   CD D2 4B               CALL   execStr   
1A10   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1A1A   CD CD 0B               CALL   flushBuffer   
1A1D   E1                     POP   HL   
1A1E   E5                     PUSH   HL   
1A1F   11 02 00               LD   DE,2   
1A22   B7                     OR   A   
1A23   ED 52                  SBC   HL,DE   
1A25   7D                     LD   A,L   
1A26   B4                     OR   H   
1A27   CA 8B 1A               JP   Z,expectM_2891S66   
1A2A   CD 57 0C               CALL   printStr   
1A2D   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1A3D   CD 57 0C               CALL   printStr   
1A40   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A4F   21 02 00               LD   hl,2   
1A52   E5                     PUSH   hl   
1A53   E5                     PUSH   hl   
1A54   CD 5C 0D               CALL   run   
1A57   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A5F   CD CD 0B               CALL   flushBuffer   
1A62   CD 57 0C               CALL   printStr   
1A65   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A72   E1                     POP   hl   
1A73   E5                     PUSH   hl   
1A74   E5                     PUSH   hl   
1A75   CD 5C 0D               CALL   run   
1A78   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A87   CD CD 0B               CALL   flushBuffer   
1A8A   76                     HALT      
1A8B                EXPECTM_2891S66:      
1A8B   E1                     POP   HL   
1A8C                          ;*Macro unroll:  test "3 5 &", 1
1A8C   31 00 4D               LD   SP,STACK   
1A8F   CD 8B 0C               CALL   coldInit   
1A92   CD D2 4B               CALL   execStr   
1A95   33 20 35 20 26 00      DB   "3 5 &",0   
1A9B   CD CD 0B               CALL   flushBuffer   
1A9E   E1                     POP   HL   
1A9F   E5                     PUSH   HL   
1AA0   11 01 00               LD   DE,1   
1AA3   B7                     OR   A   
1AA4   ED 52                  SBC   HL,DE   
1AA6   7D                     LD   A,L   
1AA7   B4                     OR   H   
1AA8   CA 08 1B               JP   Z,expectM_2892S67   
1AAB   CD 57 0C               CALL   printStr   
1AAE   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1ABA   CD 57 0C               CALL   printStr   
1ABD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ACC   21 01 00               LD   hl,1   
1ACF   E5                     PUSH   hl   
1AD0   E5                     PUSH   hl   
1AD1   CD 5C 0D               CALL   run   
1AD4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1ADC   CD CD 0B               CALL   flushBuffer   
1ADF   CD 57 0C               CALL   printStr   
1AE2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AEF   E1                     POP   hl   
1AF0   E5                     PUSH   hl   
1AF1   E5                     PUSH   hl   
1AF2   CD 5C 0D               CALL   run   
1AF5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B04   CD CD 0B               CALL   flushBuffer   
1B07   76                     HALT      
1B08                EXPECTM_2892S67:      
1B08   E1                     POP   HL   
1B09                          ;*Macro unroll:  test "3 5 |", 7
1B09   31 00 4D               LD   SP,STACK   
1B0C   CD 8B 0C               CALL   coldInit   
1B0F   CD D2 4B               CALL   execStr   
1B12   33 20 35 20 7C 00      DB   "3 5 |",0   
1B18   CD CD 0B               CALL   flushBuffer   
1B1B   E1                     POP   HL   
1B1C   E5                     PUSH   HL   
1B1D   11 07 00               LD   DE,7   
1B20   B7                     OR   A   
1B21   ED 52                  SBC   HL,DE   
1B23   7D                     LD   A,L   
1B24   B4                     OR   H   
1B25   CA 85 1B               JP   Z,expectM_2893S68   
1B28   CD 57 0C               CALL   printStr   
1B2B   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1B37   CD 57 0C               CALL   printStr   
1B3A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B49   21 07 00               LD   hl,7   
1B4C   E5                     PUSH   hl   
1B4D   E5                     PUSH   hl   
1B4E   CD 5C 0D               CALL   run   
1B51   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B59   CD CD 0B               CALL   flushBuffer   
1B5C   CD 57 0C               CALL   printStr   
1B5F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B6C   E1                     POP   hl   
1B6D   E5                     PUSH   hl   
1B6E   E5                     PUSH   hl   
1B6F   CD 5C 0D               CALL   run   
1B72   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B81   CD CD 0B               CALL   flushBuffer   
1B84   76                     HALT      
1B85                EXPECTM_2893S68:      
1B85   E1                     POP   HL   
1B86                          ;*Macro unroll:  test "3 5 /x", 6
1B86   31 00 4D               LD   SP,STACK   
1B89   CD 8B 0C               CALL   coldInit   
1B8C   CD D2 4B               CALL   execStr   
1B8F   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1B96   CD CD 0B               CALL   flushBuffer   
1B99   E1                     POP   HL   
1B9A   E5                     PUSH   HL   
1B9B   11 06 00               LD   DE,6   
1B9E   B7                     OR   A   
1B9F   ED 52                  SBC   HL,DE   
1BA1   7D                     LD   A,L   
1BA2   B4                     OR   H   
1BA3   CA 04 1C               JP   Z,expectM_2894S69   
1BA6   CD 57 0C               CALL   printStr   
1BA9   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1BB6   CD 57 0C               CALL   printStr   
1BB9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BC8   21 06 00               LD   hl,6   
1BCB   E5                     PUSH   hl   
1BCC   E5                     PUSH   hl   
1BCD   CD 5C 0D               CALL   run   
1BD0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1BD8   CD CD 0B               CALL   flushBuffer   
1BDB   CD 57 0C               CALL   printStr   
1BDE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BEB   E1                     POP   hl   
1BEC   E5                     PUSH   hl   
1BED   E5                     PUSH   hl   
1BEE   CD 5C 0D               CALL   run   
1BF1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C00   CD CD 0B               CALL   flushBuffer   
1C03   76                     HALT      
1C04                EXPECTM_2894S69:      
1C04   E1                     POP   HL   
1C05                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1C05   31 00 4D               LD   SP,STACK   
1C08   CD 8B 0C               CALL   coldInit   
1C0B   CD D2 4B               CALL   execStr   
1C0E   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1C1D   CD CD 0B               CALL   flushBuffer   
1C20   E1                     POP   HL   
1C21   E5                     PUSH   HL   
1C22   11 06 00               LD   DE,6   
1C25   B7                     OR   A   
1C26   ED 52                  SBC   HL,DE   
1C28   7D                     LD   A,L   
1C29   B4                     OR   H   
1C2A   CA 93 1C               JP   Z,expectM_2895S70   
1C2D   CD 57 0C               CALL   printStr   
1C30   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1C45   CD 57 0C               CALL   printStr   
1C48   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C57   21 06 00               LD   hl,6   
1C5A   E5                     PUSH   hl   
1C5B   E5                     PUSH   hl   
1C5C   CD 5C 0D               CALL   run   
1C5F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C67   CD CD 0B               CALL   flushBuffer   
1C6A   CD 57 0C               CALL   printStr   
1C6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C7A   E1                     POP   hl   
1C7B   E5                     PUSH   hl   
1C7C   E5                     PUSH   hl   
1C7D   CD 5C 0D               CALL   run   
1C80   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C8F   CD CD 0B               CALL   flushBuffer   
1C92   76                     HALT      
1C93                EXPECTM_2895S70:      
1C93   E1                     POP   HL   
1C94                          ;*Macro unroll:  test "2 3 *", 6
1C94   31 00 4D               LD   SP,STACK   
1C97   CD 8B 0C               CALL   coldInit   
1C9A   CD D2 4B               CALL   execStr   
1C9D   32 20 33 20 2A 00      DB   "2 3 *",0   
1CA3   CD CD 0B               CALL   flushBuffer   
1CA6   E1                     POP   HL   
1CA7   E5                     PUSH   HL   
1CA8   11 06 00               LD   DE,6   
1CAB   B7                     OR   A   
1CAC   ED 52                  SBC   HL,DE   
1CAE   7D                     LD   A,L   
1CAF   B4                     OR   H   
1CB0   CA 10 1D               JP   Z,expectM_2896S71   
1CB3   CD 57 0C               CALL   printStr   
1CB6   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1CC2   CD 57 0C               CALL   printStr   
1CC5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CD4   21 06 00               LD   hl,6   
1CD7   E5                     PUSH   hl   
1CD8   E5                     PUSH   hl   
1CD9   CD 5C 0D               CALL   run   
1CDC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1CE4   CD CD 0B               CALL   flushBuffer   
1CE7   CD 57 0C               CALL   printStr   
1CEA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CF7   E1                     POP   hl   
1CF8   E5                     PUSH   hl   
1CF9   E5                     PUSH   hl   
1CFA   CD 5C 0D               CALL   run   
1CFD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D0C   CD CD 0B               CALL   flushBuffer   
1D0F   76                     HALT      
1D10                EXPECTM_2896S71:      
1D10   E1                     POP   HL   
1D11                          ;*Macro unroll:  test "1 2 3 + *", 5
1D11   31 00 4D               LD   SP,STACK   
1D14   CD 8B 0C               CALL   coldInit   
1D17   CD D2 4B               CALL   execStr   
1D1A   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1D24   CD CD 0B               CALL   flushBuffer   
1D27   E1                     POP   HL   
1D28   E5                     PUSH   HL   
1D29   11 05 00               LD   DE,5   
1D2C   B7                     OR   A   
1D2D   ED 52                  SBC   HL,DE   
1D2F   7D                     LD   A,L   
1D30   B4                     OR   H   
1D31   CA 95 1D               JP   Z,expectM_2897S72   
1D34   CD 57 0C               CALL   printStr   
1D37   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1D47   CD 57 0C               CALL   printStr   
1D4A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D59   21 05 00               LD   hl,5   
1D5C   E5                     PUSH   hl   
1D5D   E5                     PUSH   hl   
1D5E   CD 5C 0D               CALL   run   
1D61   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D69   CD CD 0B               CALL   flushBuffer   
1D6C   CD 57 0C               CALL   printStr   
1D6F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D7C   E1                     POP   hl   
1D7D   E5                     PUSH   hl   
1D7E   E5                     PUSH   hl   
1D7F   CD 5C 0D               CALL   run   
1D82   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D91   CD CD 0B               CALL   flushBuffer   
1D94   76                     HALT      
1D95                EXPECTM_2897S72:      
1D95   E1                     POP   HL   
1D96                          ;*Macro unroll:  test "7 3 /", 2
1D96   31 00 4D               LD   SP,STACK   
1D99   CD 8B 0C               CALL   coldInit   
1D9C   CD D2 4B               CALL   execStr   
1D9F   37 20 33 20 2F 00      DB   "7 3 /",0   
1DA5   CD CD 0B               CALL   flushBuffer   
1DA8   E1                     POP   HL   
1DA9   E5                     PUSH   HL   
1DAA   11 02 00               LD   DE,2   
1DAD   B7                     OR   A   
1DAE   ED 52                  SBC   HL,DE   
1DB0   7D                     LD   A,L   
1DB1   B4                     OR   H   
1DB2   CA 12 1E               JP   Z,expectM_2898S73   
1DB5   CD 57 0C               CALL   printStr   
1DB8   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1DC4   CD 57 0C               CALL   printStr   
1DC7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DD6   21 02 00               LD   hl,2   
1DD9   E5                     PUSH   hl   
1DDA   E5                     PUSH   hl   
1DDB   CD 5C 0D               CALL   run   
1DDE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1DE6   CD CD 0B               CALL   flushBuffer   
1DE9   CD 57 0C               CALL   printStr   
1DEC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DF9   E1                     POP   hl   
1DFA   E5                     PUSH   hl   
1DFB   E5                     PUSH   hl   
1DFC   CD 5C 0D               CALL   run   
1DFF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E0E   CD CD 0B               CALL   flushBuffer   
1E11   76                     HALT      
1E12                EXPECTM_2898S73:      
1E12   E1                     POP   HL   
1E13                          ;*Macro unroll:  test "100a= 1a+= a", 101
1E13   31 00 4D               LD   SP,STACK   
1E16   CD 8B 0C               CALL   coldInit   
1E19   CD D2 4B               CALL   execStr   
1E1C   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
1E29   CD CD 0B               CALL   flushBuffer   
1E2C   E1                     POP   HL   
1E2D   E5                     PUSH   HL   
1E2E   11 65 00               LD   DE,101   
1E31   B7                     OR   A   
1E32   ED 52                  SBC   HL,DE   
1E34   7D                     LD   A,L   
1E35   B4                     OR   H   
1E36   CA 9D 1E               JP   Z,expectM_2899S74   
1E39   CD 57 0C               CALL   printStr   
1E3C   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
1E4F   CD 57 0C               CALL   printStr   
1E52   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E61   21 65 00               LD   hl,101   
1E64   E5                     PUSH   hl   
1E65   E5                     PUSH   hl   
1E66   CD 5C 0D               CALL   run   
1E69   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E71   CD CD 0B               CALL   flushBuffer   
1E74   CD 57 0C               CALL   printStr   
1E77   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E84   E1                     POP   hl   
1E85   E5                     PUSH   hl   
1E86   E5                     PUSH   hl   
1E87   CD 5C 0D               CALL   run   
1E8A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E99   CD CD 0B               CALL   flushBuffer   
1E9C   76                     HALT      
1E9D                EXPECTM_2899S74:      
1E9D   E1                     POP   HL   
1E9E                          ;*Macro unroll:  test "100a= a1-= a", 99
1E9E   31 00 4D               LD   SP,STACK   
1EA1   CD 8B 0C               CALL   coldInit   
1EA4   CD D2 4B               CALL   execStr   
1EA7   31 30 30 61 3D 20 61 31 2D 3D 20 61 00 DB   "100a= a1-= a",0   
1EB4   CD CD 0B               CALL   flushBuffer   
1EB7   E1                     POP   HL   
1EB8   E5                     PUSH   HL   
1EB9   11 63 00               LD   DE,99   
1EBC   B7                     OR   A   
1EBD   ED 52                  SBC   HL,DE   
1EBF   7D                     LD   A,L   
1EC0   B4                     OR   H   
1EC1   CA 28 1F               JP   Z,expectM_2900S75   
1EC4   CD 57 0C               CALL   printStr   
1EC7   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 31 2D 3D 20 61 00 .CSTR   "Code: ","100a= a1-= a"   
1EDA   CD 57 0C               CALL   printStr   
1EDD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EEC   21 63 00               LD   hl,99   
1EEF   E5                     PUSH   hl   
1EF0   E5                     PUSH   hl   
1EF1   CD 5C 0D               CALL   run   
1EF4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1EFC   CD CD 0B               CALL   flushBuffer   
1EFF   CD 57 0C               CALL   printStr   
1F02   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F0F   E1                     POP   hl   
1F10   E5                     PUSH   hl   
1F11   E5                     PUSH   hl   
1F12   CD 5C 0D               CALL   run   
1F15   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F24   CD CD 0B               CALL   flushBuffer   
1F27   76                     HALT      
1F28                EXPECTM_2900S75:      
1F28   E1                     POP   HL   
1F29                          ;*Macro unroll:  test "100a= a2*= a", 200
1F29   31 00 4D               LD   SP,STACK   
1F2C   CD 8B 0C               CALL   coldInit   
1F2F   CD D2 4B               CALL   execStr   
1F32   31 30 30 61 3D 20 61 32 2A 3D 20 61 00 DB   "100a= a2*= a",0   
1F3F   CD CD 0B               CALL   flushBuffer   
1F42   E1                     POP   HL   
1F43   E5                     PUSH   HL   
1F44   11 C8 00               LD   DE,200   
1F47   B7                     OR   A   
1F48   ED 52                  SBC   HL,DE   
1F4A   7D                     LD   A,L   
1F4B   B4                     OR   H   
1F4C   CA B3 1F               JP   Z,expectM_2901S76   
1F4F   CD 57 0C               CALL   printStr   
1F52   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2A 3D 20 61 00 .CSTR   "Code: ","100a= a2*= a"   
1F65   CD 57 0C               CALL   printStr   
1F68   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F77   21 C8 00               LD   hl,200   
1F7A   E5                     PUSH   hl   
1F7B   E5                     PUSH   hl   
1F7C   CD 5C 0D               CALL   run   
1F7F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F87   CD CD 0B               CALL   flushBuffer   
1F8A   CD 57 0C               CALL   printStr   
1F8D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F9A   E1                     POP   hl   
1F9B   E5                     PUSH   hl   
1F9C   E5                     PUSH   hl   
1F9D   CD 5C 0D               CALL   run   
1FA0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1FAF   CD CD 0B               CALL   flushBuffer   
1FB2   76                     HALT      
1FB3                EXPECTM_2901S76:      
1FB3   E1                     POP   HL   
1FB4                          ;*Macro unroll:  test "100a= a2/= a", 50
1FB4   31 00 4D               LD   SP,STACK   
1FB7   CD 8B 0C               CALL   coldInit   
1FBA   CD D2 4B               CALL   execStr   
1FBD   31 30 30 61 3D 20 61 32 2F 3D 20 61 00 DB   "100a= a2/= a",0   
1FCA   CD CD 0B               CALL   flushBuffer   
1FCD   E1                     POP   HL   
1FCE   E5                     PUSH   HL   
1FCF   11 32 00               LD   DE,50   
1FD2   B7                     OR   A   
1FD3   ED 52                  SBC   HL,DE   
1FD5   7D                     LD   A,L   
1FD6   B4                     OR   H   
1FD7   CA 3E 20               JP   Z,expectM_2902S77   
1FDA   CD 57 0C               CALL   printStr   
1FDD   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2F 3D 20 61 00 .CSTR   "Code: ","100a= a2/= a"   
1FF0   CD 57 0C               CALL   printStr   
1FF3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2002   21 32 00               LD   hl,50   
2005   E5                     PUSH   hl   
2006   E5                     PUSH   hl   
2007   CD 5C 0D               CALL   run   
200A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2012   CD CD 0B               CALL   flushBuffer   
2015   CD 57 0C               CALL   printStr   
2018   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2025   E1                     POP   hl   
2026   E5                     PUSH   hl   
2027   E5                     PUSH   hl   
2028   CD 5C 0D               CALL   run   
202B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
203A   CD CD 0B               CALL   flushBuffer   
203D   76                     HALT      
203E                EXPECTM_2902S77:      
203E   E1                     POP   HL   
203F                          ;*Macro unroll:  test "7 3 / /re", 1
203F   31 00 4D               LD   SP,STACK   
2042   CD 8B 0C               CALL   coldInit   
2045   CD D2 4B               CALL   execStr   
2048   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
2052   CD CD 0B               CALL   flushBuffer   
2055   E1                     POP   HL   
2056   E5                     PUSH   HL   
2057   11 01 00               LD   DE,1   
205A   B7                     OR   A   
205B   ED 52                  SBC   HL,DE   
205D   7D                     LD   A,L   
205E   B4                     OR   H   
205F   CA C3 20               JP   Z,expectM_2903S78   
2062   CD 57 0C               CALL   printStr   
2065   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
2075   CD 57 0C               CALL   printStr   
2078   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2087   21 01 00               LD   hl,1   
208A   E5                     PUSH   hl   
208B   E5                     PUSH   hl   
208C   CD 5C 0D               CALL   run   
208F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2097   CD CD 0B               CALL   flushBuffer   
209A   CD 57 0C               CALL   printStr   
209D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20AA   E1                     POP   hl   
20AB   E5                     PUSH   hl   
20AC   E5                     PUSH   hl   
20AD   CD 5C 0D               CALL   run   
20B0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
20BF   CD CD 0B               CALL   flushBuffer   
20C2   76                     HALT      
20C3                EXPECTM_2903S78:      
20C3   E1                     POP   HL   
20C4                          ;*Macro unroll:  test "7 3 /", 2
20C4   31 00 4D               LD   SP,STACK   
20C7   CD 8B 0C               CALL   coldInit   
20CA   CD D2 4B               CALL   execStr   
20CD   37 20 33 20 2F 00      DB   "7 3 /",0   
20D3   CD CD 0B               CALL   flushBuffer   
20D6   E1                     POP   HL   
20D7   E5                     PUSH   HL   
20D8   11 02 00               LD   DE,2   
20DB   B7                     OR   A   
20DC   ED 52                  SBC   HL,DE   
20DE   7D                     LD   A,L   
20DF   B4                     OR   H   
20E0   CA 40 21               JP   Z,expectM_2904S79   
20E3   CD 57 0C               CALL   printStr   
20E6   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
20F2   CD 57 0C               CALL   printStr   
20F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2104   21 02 00               LD   hl,2   
2107   E5                     PUSH   hl   
2108   E5                     PUSH   hl   
2109   CD 5C 0D               CALL   run   
210C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2114   CD CD 0B               CALL   flushBuffer   
2117   CD 57 0C               CALL   printStr   
211A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2127   E1                     POP   hl   
2128   E5                     PUSH   hl   
2129   E5                     PUSH   hl   
212A   CD 5C 0D               CALL   run   
212D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
213C   CD CD 0B               CALL   flushBuffer   
213F   76                     HALT      
2140                EXPECTM_2904S79:      
2140   E1                     POP   HL   
2141                          ;*Macro unroll:  test "2 3 ==", FALSE
2141   31 00 4D               LD   SP,STACK   
2144   CD 8B 0C               CALL   coldInit   
2147   CD D2 4B               CALL   execStr   
214A   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
2151   CD CD 0B               CALL   flushBuffer   
2154   E1                     POP   HL   
2155   E5                     PUSH   HL   
2156   11 00 00               LD   DE,FALSE   
2159   B7                     OR   A   
215A   ED 52                  SBC   HL,DE   
215C   7D                     LD   A,L   
215D   B4                     OR   H   
215E   CA BF 21               JP   Z,expectM_2905S80   
2161   CD 57 0C               CALL   printStr   
2164   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2171   CD 57 0C               CALL   printStr   
2174   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2183   21 00 00               LD   hl,FALSE   
2186   E5                     PUSH   hl   
2187   E5                     PUSH   hl   
2188   CD 5C 0D               CALL   run   
218B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2193   CD CD 0B               CALL   flushBuffer   
2196   CD 57 0C               CALL   printStr   
2199   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21A6   E1                     POP   hl   
21A7   E5                     PUSH   hl   
21A8   E5                     PUSH   hl   
21A9   CD 5C 0D               CALL   run   
21AC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
21BB   CD CD 0B               CALL   flushBuffer   
21BE   76                     HALT      
21BF                EXPECTM_2905S80:      
21BF   E1                     POP   HL   
21C0                          ;*Macro unroll:  test "3 3 ==", TRUE
21C0   31 00 4D               LD   SP,STACK   
21C3   CD 8B 0C               CALL   coldInit   
21C6   CD D2 4B               CALL   execStr   
21C9   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
21D0   CD CD 0B               CALL   flushBuffer   
21D3   E1                     POP   HL   
21D4   E5                     PUSH   HL   
21D5   11 FF FF               LD   DE,TRUE   
21D8   B7                     OR   A   
21D9   ED 52                  SBC   HL,DE   
21DB   7D                     LD   A,L   
21DC   B4                     OR   H   
21DD   CA 3E 22               JP   Z,expectM_2906S81   
21E0   CD 57 0C               CALL   printStr   
21E3   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
21F0   CD 57 0C               CALL   printStr   
21F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2202   21 FF FF               LD   hl,TRUE   
2205   E5                     PUSH   hl   
2206   E5                     PUSH   hl   
2207   CD 5C 0D               CALL   run   
220A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2212   CD CD 0B               CALL   flushBuffer   
2215   CD 57 0C               CALL   printStr   
2218   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2225   E1                     POP   hl   
2226   E5                     PUSH   hl   
2227   E5                     PUSH   hl   
2228   CD 5C 0D               CALL   run   
222B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
223A   CD CD 0B               CALL   flushBuffer   
223D   76                     HALT      
223E                EXPECTM_2906S81:      
223E   E1                     POP   HL   
223F                          ;*Macro unroll:  test "1 2 <", TRUE
223F   31 00 4D               LD   SP,STACK   
2242   CD 8B 0C               CALL   coldInit   
2245   CD D2 4B               CALL   execStr   
2248   31 20 32 20 3C 00      DB   "1 2 <",0   
224E   CD CD 0B               CALL   flushBuffer   
2251   E1                     POP   HL   
2252   E5                     PUSH   HL   
2253   11 FF FF               LD   DE,TRUE   
2256   B7                     OR   A   
2257   ED 52                  SBC   HL,DE   
2259   7D                     LD   A,L   
225A   B4                     OR   H   
225B   CA BB 22               JP   Z,expectM_2907S82   
225E   CD 57 0C               CALL   printStr   
2261   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
226D   CD 57 0C               CALL   printStr   
2270   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
227F   21 FF FF               LD   hl,TRUE   
2282   E5                     PUSH   hl   
2283   E5                     PUSH   hl   
2284   CD 5C 0D               CALL   run   
2287   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
228F   CD CD 0B               CALL   flushBuffer   
2292   CD 57 0C               CALL   printStr   
2295   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22A2   E1                     POP   hl   
22A3   E5                     PUSH   hl   
22A4   E5                     PUSH   hl   
22A5   CD 5C 0D               CALL   run   
22A8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
22B7   CD CD 0B               CALL   flushBuffer   
22BA   76                     HALT      
22BB                EXPECTM_2907S82:      
22BB   E1                     POP   HL   
22BC                          ;*Macro unroll:  test "2 1 <", FALSE
22BC   31 00 4D               LD   SP,STACK   
22BF   CD 8B 0C               CALL   coldInit   
22C2   CD D2 4B               CALL   execStr   
22C5   32 20 31 20 3C 00      DB   "2 1 <",0   
22CB   CD CD 0B               CALL   flushBuffer   
22CE   E1                     POP   HL   
22CF   E5                     PUSH   HL   
22D0   11 00 00               LD   DE,FALSE   
22D3   B7                     OR   A   
22D4   ED 52                  SBC   HL,DE   
22D6   7D                     LD   A,L   
22D7   B4                     OR   H   
22D8   CA 38 23               JP   Z,expectM_2908S83   
22DB   CD 57 0C               CALL   printStr   
22DE   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
22EA   CD 57 0C               CALL   printStr   
22ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22FC   21 00 00               LD   hl,FALSE   
22FF   E5                     PUSH   hl   
2300   E5                     PUSH   hl   
2301   CD 5C 0D               CALL   run   
2304   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
230C   CD CD 0B               CALL   flushBuffer   
230F   CD 57 0C               CALL   printStr   
2312   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
231F   E1                     POP   hl   
2320   E5                     PUSH   hl   
2321   E5                     PUSH   hl   
2322   CD 5C 0D               CALL   run   
2325   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2334   CD CD 0B               CALL   flushBuffer   
2337   76                     HALT      
2338                EXPECTM_2908S83:      
2338   E1                     POP   HL   
2339                          ;*Macro unroll:  test "2 3 <", TRUE
2339   31 00 4D               LD   SP,STACK   
233C   CD 8B 0C               CALL   coldInit   
233F   CD D2 4B               CALL   execStr   
2342   32 20 33 20 3C 00      DB   "2 3 <",0   
2348   CD CD 0B               CALL   flushBuffer   
234B   E1                     POP   HL   
234C   E5                     PUSH   HL   
234D   11 FF FF               LD   DE,TRUE   
2350   B7                     OR   A   
2351   ED 52                  SBC   HL,DE   
2353   7D                     LD   A,L   
2354   B4                     OR   H   
2355   CA B5 23               JP   Z,expectM_2909S84   
2358   CD 57 0C               CALL   printStr   
235B   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2367   CD 57 0C               CALL   printStr   
236A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2379   21 FF FF               LD   hl,TRUE   
237C   E5                     PUSH   hl   
237D   E5                     PUSH   hl   
237E   CD 5C 0D               CALL   run   
2381   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2389   CD CD 0B               CALL   flushBuffer   
238C   CD 57 0C               CALL   printStr   
238F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
239C   E1                     POP   hl   
239D   E5                     PUSH   hl   
239E   E5                     PUSH   hl   
239F   CD 5C 0D               CALL   run   
23A2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
23B1   CD CD 0B               CALL   flushBuffer   
23B4   76                     HALT      
23B5                EXPECTM_2909S84:      
23B5   E1                     POP   HL   
23B6                          ;*Macro unroll:  test "3 3 <", FALSE
23B6   31 00 4D               LD   SP,STACK   
23B9   CD 8B 0C               CALL   coldInit   
23BC   CD D2 4B               CALL   execStr   
23BF   33 20 33 20 3C 00      DB   "3 3 <",0   
23C5   CD CD 0B               CALL   flushBuffer   
23C8   E1                     POP   HL   
23C9   E5                     PUSH   HL   
23CA   11 00 00               LD   DE,FALSE   
23CD   B7                     OR   A   
23CE   ED 52                  SBC   HL,DE   
23D0   7D                     LD   A,L   
23D1   B4                     OR   H   
23D2   CA 32 24               JP   Z,expectM_2910S85   
23D5   CD 57 0C               CALL   printStr   
23D8   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
23E4   CD 57 0C               CALL   printStr   
23E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23F6   21 00 00               LD   hl,FALSE   
23F9   E5                     PUSH   hl   
23FA   E5                     PUSH   hl   
23FB   CD 5C 0D               CALL   run   
23FE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2406   CD CD 0B               CALL   flushBuffer   
2409   CD 57 0C               CALL   printStr   
240C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2419   E1                     POP   hl   
241A   E5                     PUSH   hl   
241B   E5                     PUSH   hl   
241C   CD 5C 0D               CALL   run   
241F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
242E   CD CD 0B               CALL   flushBuffer   
2431   76                     HALT      
2432                EXPECTM_2910S85:      
2432   E1                     POP   HL   
2433                          ;*Macro unroll:  test "1 2 >", FALSE
2433   31 00 4D               LD   SP,STACK   
2436   CD 8B 0C               CALL   coldInit   
2439   CD D2 4B               CALL   execStr   
243C   31 20 32 20 3E 00      DB   "1 2 >",0   
2442   CD CD 0B               CALL   flushBuffer   
2445   E1                     POP   HL   
2446   E5                     PUSH   HL   
2447   11 00 00               LD   DE,FALSE   
244A   B7                     OR   A   
244B   ED 52                  SBC   HL,DE   
244D   7D                     LD   A,L   
244E   B4                     OR   H   
244F   CA AF 24               JP   Z,expectM_2911S86   
2452   CD 57 0C               CALL   printStr   
2455   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2461   CD 57 0C               CALL   printStr   
2464   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2473   21 00 00               LD   hl,FALSE   
2476   E5                     PUSH   hl   
2477   E5                     PUSH   hl   
2478   CD 5C 0D               CALL   run   
247B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2483   CD CD 0B               CALL   flushBuffer   
2486   CD 57 0C               CALL   printStr   
2489   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2496   E1                     POP   hl   
2497   E5                     PUSH   hl   
2498   E5                     PUSH   hl   
2499   CD 5C 0D               CALL   run   
249C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
24AB   CD CD 0B               CALL   flushBuffer   
24AE   76                     HALT      
24AF                EXPECTM_2911S86:      
24AF   E1                     POP   HL   
24B0                          ;*Macro unroll:  test "2 1 >", TRUE
24B0   31 00 4D               LD   SP,STACK   
24B3   CD 8B 0C               CALL   coldInit   
24B6   CD D2 4B               CALL   execStr   
24B9   32 20 31 20 3E 00      DB   "2 1 >",0   
24BF   CD CD 0B               CALL   flushBuffer   
24C2   E1                     POP   HL   
24C3   E5                     PUSH   HL   
24C4   11 FF FF               LD   DE,TRUE   
24C7   B7                     OR   A   
24C8   ED 52                  SBC   HL,DE   
24CA   7D                     LD   A,L   
24CB   B4                     OR   H   
24CC   CA 2C 25               JP   Z,expectM_2912S87   
24CF   CD 57 0C               CALL   printStr   
24D2   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
24DE   CD 57 0C               CALL   printStr   
24E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24F0   21 FF FF               LD   hl,TRUE   
24F3   E5                     PUSH   hl   
24F4   E5                     PUSH   hl   
24F5   CD 5C 0D               CALL   run   
24F8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2500   CD CD 0B               CALL   flushBuffer   
2503   CD 57 0C               CALL   printStr   
2506   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2513   E1                     POP   hl   
2514   E5                     PUSH   hl   
2515   E5                     PUSH   hl   
2516   CD 5C 0D               CALL   run   
2519   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2528   CD CD 0B               CALL   flushBuffer   
252B   76                     HALT      
252C                EXPECTM_2912S87:      
252C   E1                     POP   HL   
252D                          ;*Macro unroll:  test "3 3 >", FALSE
252D   31 00 4D               LD   SP,STACK   
2530   CD 8B 0C               CALL   coldInit   
2533   CD D2 4B               CALL   execStr   
2536   33 20 33 20 3E 00      DB   "3 3 >",0   
253C   CD CD 0B               CALL   flushBuffer   
253F   E1                     POP   HL   
2540   E5                     PUSH   HL   
2541   11 00 00               LD   DE,FALSE   
2544   B7                     OR   A   
2545   ED 52                  SBC   HL,DE   
2547   7D                     LD   A,L   
2548   B4                     OR   H   
2549   CA A9 25               JP   Z,expectM_2913S88   
254C   CD 57 0C               CALL   printStr   
254F   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
255B   CD 57 0C               CALL   printStr   
255E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
256D   21 00 00               LD   hl,FALSE   
2570   E5                     PUSH   hl   
2571   E5                     PUSH   hl   
2572   CD 5C 0D               CALL   run   
2575   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
257D   CD CD 0B               CALL   flushBuffer   
2580   CD 57 0C               CALL   printStr   
2583   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2590   E1                     POP   hl   
2591   E5                     PUSH   hl   
2592   E5                     PUSH   hl   
2593   CD 5C 0D               CALL   run   
2596   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
25A5   CD CD 0B               CALL   flushBuffer   
25A8   76                     HALT      
25A9                EXPECTM_2913S88:      
25A9   E1                     POP   HL   
25AA                          ;*Macro unroll:  test "4 3 >", TRUE
25AA   31 00 4D               LD   SP,STACK   
25AD   CD 8B 0C               CALL   coldInit   
25B0   CD D2 4B               CALL   execStr   
25B3   34 20 33 20 3E 00      DB   "4 3 >",0   
25B9   CD CD 0B               CALL   flushBuffer   
25BC   E1                     POP   HL   
25BD   E5                     PUSH   HL   
25BE   11 FF FF               LD   DE,TRUE   
25C1   B7                     OR   A   
25C2   ED 52                  SBC   HL,DE   
25C4   7D                     LD   A,L   
25C5   B4                     OR   H   
25C6   CA 26 26               JP   Z,expectM_2914S89   
25C9   CD 57 0C               CALL   printStr   
25CC   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
25D8   CD 57 0C               CALL   printStr   
25DB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25EA   21 FF FF               LD   hl,TRUE   
25ED   E5                     PUSH   hl   
25EE   E5                     PUSH   hl   
25EF   CD 5C 0D               CALL   run   
25F2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25FA   CD CD 0B               CALL   flushBuffer   
25FD   CD 57 0C               CALL   printStr   
2600   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
260D   E1                     POP   hl   
260E   E5                     PUSH   hl   
260F   E5                     PUSH   hl   
2610   CD 5C 0D               CALL   run   
2613   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2622   CD CD 0B               CALL   flushBuffer   
2625   76                     HALT      
2626                EXPECTM_2914S89:      
2626   E1                     POP   HL   
2627                          ;*Macro unroll:  test "2 2 <=", TRUE
2627   31 00 4D               LD   SP,STACK   
262A   CD 8B 0C               CALL   coldInit   
262D   CD D2 4B               CALL   execStr   
2630   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
2637   CD CD 0B               CALL   flushBuffer   
263A   E1                     POP   HL   
263B   E5                     PUSH   HL   
263C   11 FF FF               LD   DE,TRUE   
263F   B7                     OR   A   
2640   ED 52                  SBC   HL,DE   
2642   7D                     LD   A,L   
2643   B4                     OR   H   
2644   CA A5 26               JP   Z,expectM_2915S90   
2647   CD 57 0C               CALL   printStr   
264A   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2657   CD 57 0C               CALL   printStr   
265A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2669   21 FF FF               LD   hl,TRUE   
266C   E5                     PUSH   hl   
266D   E5                     PUSH   hl   
266E   CD 5C 0D               CALL   run   
2671   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2679   CD CD 0B               CALL   flushBuffer   
267C   CD 57 0C               CALL   printStr   
267F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
268C   E1                     POP   hl   
268D   E5                     PUSH   hl   
268E   E5                     PUSH   hl   
268F   CD 5C 0D               CALL   run   
2692   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
26A1   CD CD 0B               CALL   flushBuffer   
26A4   76                     HALT      
26A5                EXPECTM_2915S90:      
26A5   E1                     POP   HL   
26A6                          ;*Macro unroll:  test "2 2 >=", TRUE
26A6   31 00 4D               LD   SP,STACK   
26A9   CD 8B 0C               CALL   coldInit   
26AC   CD D2 4B               CALL   execStr   
26AF   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
26B6   CD CD 0B               CALL   flushBuffer   
26B9   E1                     POP   HL   
26BA   E5                     PUSH   HL   
26BB   11 FF FF               LD   DE,TRUE   
26BE   B7                     OR   A   
26BF   ED 52                  SBC   HL,DE   
26C1   7D                     LD   A,L   
26C2   B4                     OR   H   
26C3   CA 24 27               JP   Z,expectM_2916S91   
26C6   CD 57 0C               CALL   printStr   
26C9   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
26D6   CD 57 0C               CALL   printStr   
26D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26E8   21 FF FF               LD   hl,TRUE   
26EB   E5                     PUSH   hl   
26EC   E5                     PUSH   hl   
26ED   CD 5C 0D               CALL   run   
26F0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26F8   CD CD 0B               CALL   flushBuffer   
26FB   CD 57 0C               CALL   printStr   
26FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
270B   E1                     POP   hl   
270C   E5                     PUSH   hl   
270D   E5                     PUSH   hl   
270E   CD 5C 0D               CALL   run   
2711   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2720   CD CD 0B               CALL   flushBuffer   
2723   76                     HALT      
2724                EXPECTM_2916S91:      
2724   E1                     POP   HL   
2725                          ;*Macro unroll:  test "3 1 <<", 6
2725   31 00 4D               LD   SP,STACK   
2728   CD 8B 0C               CALL   coldInit   
272B   CD D2 4B               CALL   execStr   
272E   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
2735   CD CD 0B               CALL   flushBuffer   
2738   E1                     POP   HL   
2739   E5                     PUSH   HL   
273A   11 06 00               LD   DE,6   
273D   B7                     OR   A   
273E   ED 52                  SBC   HL,DE   
2740   7D                     LD   A,L   
2741   B4                     OR   H   
2742   CA A3 27               JP   Z,expectM_2917S92   
2745   CD 57 0C               CALL   printStr   
2748   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2755   CD 57 0C               CALL   printStr   
2758   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2767   21 06 00               LD   hl,6   
276A   E5                     PUSH   hl   
276B   E5                     PUSH   hl   
276C   CD 5C 0D               CALL   run   
276F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2777   CD CD 0B               CALL   flushBuffer   
277A   CD 57 0C               CALL   printStr   
277D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
278A   E1                     POP   hl   
278B   E5                     PUSH   hl   
278C   E5                     PUSH   hl   
278D   CD 5C 0D               CALL   run   
2790   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
279F   CD CD 0B               CALL   flushBuffer   
27A2   76                     HALT      
27A3                EXPECTM_2917S92:      
27A3   E1                     POP   HL   
27A4                          ;*Macro unroll:  test "10 1 >>", 5
27A4   31 00 4D               LD   SP,STACK   
27A7   CD 8B 0C               CALL   coldInit   
27AA   CD D2 4B               CALL   execStr   
27AD   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
27B5   CD CD 0B               CALL   flushBuffer   
27B8   E1                     POP   HL   
27B9   E5                     PUSH   HL   
27BA   11 05 00               LD   DE,5   
27BD   B7                     OR   A   
27BE   ED 52                  SBC   HL,DE   
27C0   7D                     LD   A,L   
27C1   B4                     OR   H   
27C2   CA 24 28               JP   Z,expectM_2918S93   
27C5   CD 57 0C               CALL   printStr   
27C8   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
27D6   CD 57 0C               CALL   printStr   
27D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27E8   21 05 00               LD   hl,5   
27EB   E5                     PUSH   hl   
27EC   E5                     PUSH   hl   
27ED   CD 5C 0D               CALL   run   
27F0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27F8   CD CD 0B               CALL   flushBuffer   
27FB   CD 57 0C               CALL   printStr   
27FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
280B   E1                     POP   hl   
280C   E5                     PUSH   hl   
280D   E5                     PUSH   hl   
280E   CD 5C 0D               CALL   run   
2811   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2820   CD CD 0B               CALL   flushBuffer   
2823   76                     HALT      
2824                EXPECTM_2918S93:      
2824   E1                     POP   HL   
2825                          ;*Macro unroll:  test "1 x = x", 1
2825   31 00 4D               LD   SP,STACK   
2828   CD 8B 0C               CALL   coldInit   
282B   CD D2 4B               CALL   execStr   
282E   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
2836   CD CD 0B               CALL   flushBuffer   
2839   E1                     POP   HL   
283A   E5                     PUSH   HL   
283B   11 01 00               LD   DE,1   
283E   B7                     OR   A   
283F   ED 52                  SBC   HL,DE   
2841   7D                     LD   A,L   
2842   B4                     OR   H   
2843   CA A5 28               JP   Z,expectM_2919S94   
2846   CD 57 0C               CALL   printStr   
2849   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2857   CD 57 0C               CALL   printStr   
285A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2869   21 01 00               LD   hl,1   
286C   E5                     PUSH   hl   
286D   E5                     PUSH   hl   
286E   CD 5C 0D               CALL   run   
2871   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2879   CD CD 0B               CALL   flushBuffer   
287C   CD 57 0C               CALL   printStr   
287F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
288C   E1                     POP   hl   
288D   E5                     PUSH   hl   
288E   E5                     PUSH   hl   
288F   CD 5C 0D               CALL   run   
2892   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
28A1   CD CD 0B               CALL   flushBuffer   
28A4   76                     HALT      
28A5                EXPECTM_2919S94:      
28A5   E1                     POP   HL   
28A6                          ;*Macro unroll:  test "1{}^", 1
28A6   31 00 4D               LD   SP,STACK   
28A9   CD 8B 0C               CALL   coldInit   
28AC   CD D2 4B               CALL   execStr   
28AF   31 7B 7D 5E 00         DB   "1{}^",0   
28B4   CD CD 0B               CALL   flushBuffer   
28B7   E1                     POP   HL   
28B8   E5                     PUSH   HL   
28B9   11 01 00               LD   DE,1   
28BC   B7                     OR   A   
28BD   ED 52                  SBC   HL,DE   
28BF   7D                     LD   A,L   
28C0   B4                     OR   H   
28C1   CA 20 29               JP   Z,expectM_2920S95   
28C4   CD 57 0C               CALL   printStr   
28C7   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
28D2   CD 57 0C               CALL   printStr   
28D5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28E4   21 01 00               LD   hl,1   
28E7   E5                     PUSH   hl   
28E8   E5                     PUSH   hl   
28E9   CD 5C 0D               CALL   run   
28EC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28F4   CD CD 0B               CALL   flushBuffer   
28F7   CD 57 0C               CALL   printStr   
28FA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2907   E1                     POP   hl   
2908   E5                     PUSH   hl   
2909   E5                     PUSH   hl   
290A   CD 5C 0D               CALL   run   
290D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
291C   CD CD 0B               CALL   flushBuffer   
291F   76                     HALT      
2920                EXPECTM_2920S95:      
2920   E1                     POP   HL   
2921                          ;*Macro unroll:  test "{1}^", 1
2921   31 00 4D               LD   SP,STACK   
2924   CD 8B 0C               CALL   coldInit   
2927   CD D2 4B               CALL   execStr   
292A   7B 31 7D 5E 00         DB   "{1}^",0   
292F   CD CD 0B               CALL   flushBuffer   
2932   E1                     POP   HL   
2933   E5                     PUSH   HL   
2934   11 01 00               LD   DE,1   
2937   B7                     OR   A   
2938   ED 52                  SBC   HL,DE   
293A   7D                     LD   A,L   
293B   B4                     OR   H   
293C   CA 9B 29               JP   Z,expectM_2921S96   
293F   CD 57 0C               CALL   printStr   
2942   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
294D   CD 57 0C               CALL   printStr   
2950   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
295F   21 01 00               LD   hl,1   
2962   E5                     PUSH   hl   
2963   E5                     PUSH   hl   
2964   CD 5C 0D               CALL   run   
2967   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
296F   CD CD 0B               CALL   flushBuffer   
2972   CD 57 0C               CALL   printStr   
2975   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2982   E1                     POP   hl   
2983   E5                     PUSH   hl   
2984   E5                     PUSH   hl   
2985   CD 5C 0D               CALL   run   
2988   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2997   CD CD 0B               CALL   flushBuffer   
299A   76                     HALT      
299B                EXPECTM_2921S96:      
299B   E1                     POP   HL   
299C                          ;*Macro unroll:  test "{{1}^}^", 1
299C   31 00 4D               LD   SP,STACK   
299F   CD 8B 0C               CALL   coldInit   
29A2   CD D2 4B               CALL   execStr   
29A5   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
29AD   CD CD 0B               CALL   flushBuffer   
29B0   E1                     POP   HL   
29B1   E5                     PUSH   HL   
29B2   11 01 00               LD   DE,1   
29B5   B7                     OR   A   
29B6   ED 52                  SBC   HL,DE   
29B8   7D                     LD   A,L   
29B9   B4                     OR   H   
29BA   CA 1C 2A               JP   Z,expectM_2922S97   
29BD   CD 57 0C               CALL   printStr   
29C0   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
29CE   CD 57 0C               CALL   printStr   
29D1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29E0   21 01 00               LD   hl,1   
29E3   E5                     PUSH   hl   
29E4   E5                     PUSH   hl   
29E5   CD 5C 0D               CALL   run   
29E8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
29F0   CD CD 0B               CALL   flushBuffer   
29F3   CD 57 0C               CALL   printStr   
29F6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A03   E1                     POP   hl   
2A04   E5                     PUSH   hl   
2A05   E5                     PUSH   hl   
2A06   CD 5C 0D               CALL   run   
2A09   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A18   CD CD 0B               CALL   flushBuffer   
2A1B   76                     HALT      
2A1C                EXPECTM_2922S97:      
2A1C   E1                     POP   HL   
2A1D                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2A1D   31 00 4D               LD   SP,STACK   
2A20   CD 8B 0C               CALL   coldInit   
2A23   CD D2 4B               CALL   execStr   
2A26   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2A31   CD CD 0B               CALL   flushBuffer   
2A34   E1                     POP   HL   
2A35   E5                     PUSH   HL   
2A36   11 01 00               LD   DE,1   
2A39   B7                     OR   A   
2A3A   ED 52                  SBC   HL,DE   
2A3C   7D                     LD   A,L   
2A3D   B4                     OR   H   
2A3E   CA A3 2A               JP   Z,expectM_2923S98   
2A41   CD 57 0C               CALL   printStr   
2A44   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2A55   CD 57 0C               CALL   printStr   
2A58   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A67   21 01 00               LD   hl,1   
2A6A   E5                     PUSH   hl   
2A6B   E5                     PUSH   hl   
2A6C   CD 5C 0D               CALL   run   
2A6F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A77   CD CD 0B               CALL   flushBuffer   
2A7A   CD 57 0C               CALL   printStr   
2A7D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A8A   E1                     POP   hl   
2A8B   E5                     PUSH   hl   
2A8C   E5                     PUSH   hl   
2A8D   CD 5C 0D               CALL   run   
2A90   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A9F   CD CD 0B               CALL   flushBuffer   
2AA2   76                     HALT      
2AA3                EXPECTM_2923S98:      
2AA3   E1                     POP   HL   
2AA4                          ;*Macro unroll:  test "5 /f{10} ?", 5
2AA4   31 00 4D               LD   SP,STACK   
2AA7   CD 8B 0C               CALL   coldInit   
2AAA   CD D2 4B               CALL   execStr   
2AAD   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2AB8   CD CD 0B               CALL   flushBuffer   
2ABB   E1                     POP   HL   
2ABC   E5                     PUSH   HL   
2ABD   11 05 00               LD   DE,5   
2AC0   B7                     OR   A   
2AC1   ED 52                  SBC   HL,DE   
2AC3   7D                     LD   A,L   
2AC4   B4                     OR   H   
2AC5   CA 2A 2B               JP   Z,expectM_2924S99   
2AC8   CD 57 0C               CALL   printStr   
2ACB   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2ADC   CD 57 0C               CALL   printStr   
2ADF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AEE   21 05 00               LD   hl,5   
2AF1   E5                     PUSH   hl   
2AF2   E5                     PUSH   hl   
2AF3   CD 5C 0D               CALL   run   
2AF6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2AFE   CD CD 0B               CALL   flushBuffer   
2B01   CD 57 0C               CALL   printStr   
2B04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B11   E1                     POP   hl   
2B12   E5                     PUSH   hl   
2B13   E5                     PUSH   hl   
2B14   CD 5C 0D               CALL   run   
2B17   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B26   CD CD 0B               CALL   flushBuffer   
2B29   76                     HALT      
2B2A                EXPECTM_2924S99:      
2B2A   E1                     POP   HL   
2B2B                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2B2B   31 00 4D               LD   SP,STACK   
2B2E   CD 8B 0C               CALL   coldInit   
2B31   CD D2 4B               CALL   execStr   
2B34   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2B41   CD CD 0B               CALL   flushBuffer   
2B44   E1                     POP   HL   
2B45   E5                     PUSH   HL   
2B46   11 0F 00               LD   DE,15   
2B49   B7                     OR   A   
2B4A   ED 52                  SBC   HL,DE   
2B4C   7D                     LD   A,L   
2B4D   B4                     OR   H   
2B4E   CA B5 2B               JP   Z,expectM_2925S100   
2B51   CD 57 0C               CALL   printStr   
2B54   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2B67   CD 57 0C               CALL   printStr   
2B6A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B79   21 0F 00               LD   hl,15   
2B7C   E5                     PUSH   hl   
2B7D   E5                     PUSH   hl   
2B7E   CD 5C 0D               CALL   run   
2B81   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B89   CD CD 0B               CALL   flushBuffer   
2B8C   CD 57 0C               CALL   printStr   
2B8F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B9C   E1                     POP   hl   
2B9D   E5                     PUSH   hl   
2B9E   E5                     PUSH   hl   
2B9F   CD 5C 0D               CALL   run   
2BA2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BB1   CD CD 0B               CALL   flushBuffer   
2BB4   76                     HALT      
2BB5                EXPECTM_2925S100:      
2BB5   E1                     POP   HL   
2BB6                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2BB6   31 00 4D               LD   SP,STACK   
2BB9   CD 8B 0C               CALL   coldInit   
2BBC   CD D2 4B               CALL   execStr   
2BBF   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
2BD1   CD CD 0B               CALL   flushBuffer   
2BD4   E1                     POP   HL   
2BD5   E5                     PUSH   HL   
2BD6   11 15 00               LD   DE,21   
2BD9   B7                     OR   A   
2BDA   ED 52                  SBC   HL,DE   
2BDC   7D                     LD   A,L   
2BDD   B4                     OR   H   
2BDE   CA 4A 2C               JP   Z,expectM_2926S101   
2BE1   CD 57 0C               CALL   printStr   
2BE4   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2BFC   CD 57 0C               CALL   printStr   
2BFF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C0E   21 15 00               LD   hl,21   
2C11   E5                     PUSH   hl   
2C12   E5                     PUSH   hl   
2C13   CD 5C 0D               CALL   run   
2C16   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C1E   CD CD 0B               CALL   flushBuffer   
2C21   CD 57 0C               CALL   printStr   
2C24   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C31   E1                     POP   hl   
2C32   E5                     PUSH   hl   
2C33   E5                     PUSH   hl   
2C34   CD 5C 0D               CALL   run   
2C37   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C46   CD CD 0B               CALL   flushBuffer   
2C49   76                     HALT      
2C4A                EXPECTM_2926S101:      
2C4A   E1                     POP   HL   
2C4B                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2C4B   31 00 4D               LD   SP,STACK   
2C4E   CD 8B 0C               CALL   coldInit   
2C51   CD D2 4B               CALL   execStr   
2C54   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
2C66   CD CD 0B               CALL   flushBuffer   
2C69   E1                     POP   HL   
2C6A   E5                     PUSH   HL   
2C6B   11 0B 00               LD   DE,11   
2C6E   B7                     OR   A   
2C6F   ED 52                  SBC   HL,DE   
2C71   7D                     LD   A,L   
2C72   B4                     OR   H   
2C73   CA DF 2C               JP   Z,expectM_2927S102   
2C76   CD 57 0C               CALL   printStr   
2C79   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2C91   CD 57 0C               CALL   printStr   
2C94   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CA3   21 0B 00               LD   hl,11   
2CA6   E5                     PUSH   hl   
2CA7   E5                     PUSH   hl   
2CA8   CD 5C 0D               CALL   run   
2CAB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2CB3   CD CD 0B               CALL   flushBuffer   
2CB6   CD 57 0C               CALL   printStr   
2CB9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CC6   E1                     POP   hl   
2CC7   E5                     PUSH   hl   
2CC8   E5                     PUSH   hl   
2CC9   CD 5C 0D               CALL   run   
2CCC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CDB   CD CD 0B               CALL   flushBuffer   
2CDE   76                     HALT      
2CDF                EXPECTM_2927S102:      
2CDF   E1                     POP   HL   
2CE0                          ;*Macro unroll:  test ":{2}^", 2
2CE0   31 00 4D               LD   SP,STACK   
2CE3   CD 8B 0C               CALL   coldInit   
2CE6   CD D2 4B               CALL   execStr   
2CE9   3A 7B 32 7D 5E 00      DB   ":{2}^",0   
2CEF   CD CD 0B               CALL   flushBuffer   
2CF2   E1                     POP   HL   
2CF3   E5                     PUSH   HL   
2CF4   11 02 00               LD   DE,2   
2CF7   B7                     OR   A   
2CF8   ED 52                  SBC   HL,DE   
2CFA   7D                     LD   A,L   
2CFB   B4                     OR   H   
2CFC   CA 5C 2D               JP   Z,expectM_2928S103   
2CFF   CD 57 0C               CALL   printStr   
2D02   43 6F 64 65 3A 20 3A 7B 32 7D 5E 00 .CSTR   "Code: ",":{2}^"   
2D0E   CD 57 0C               CALL   printStr   
2D11   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D20   21 02 00               LD   hl,2   
2D23   E5                     PUSH   hl   
2D24   E5                     PUSH   hl   
2D25   CD 5C 0D               CALL   run   
2D28   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D30   CD CD 0B               CALL   flushBuffer   
2D33   CD 57 0C               CALL   printStr   
2D36   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D43   E1                     POP   hl   
2D44   E5                     PUSH   hl   
2D45   E5                     PUSH   hl   
2D46   CD 5C 0D               CALL   run   
2D49   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D58   CD CD 0B               CALL   flushBuffer   
2D5B   76                     HALT      
2D5C                EXPECTM_2928S103:      
2D5C   E1                     POP   HL   
2D5D                          ;*Macro unroll:  test ":a{2}^", 2
2D5D   31 00 4D               LD   SP,STACK   
2D60   CD 8B 0C               CALL   coldInit   
2D63   CD D2 4B               CALL   execStr   
2D66   3A 61 7B 32 7D 5E 00   DB   ":a{2}^",0   
2D6D   CD CD 0B               CALL   flushBuffer   
2D70   E1                     POP   HL   
2D71   E5                     PUSH   HL   
2D72   11 02 00               LD   DE,2   
2D75   B7                     OR   A   
2D76   ED 52                  SBC   HL,DE   
2D78   7D                     LD   A,L   
2D79   B4                     OR   H   
2D7A   CA DB 2D               JP   Z,expectM_2929S104   
2D7D   CD 57 0C               CALL   printStr   
2D80   43 6F 64 65 3A 20 3A 61 7B 32 7D 5E 00 .CSTR   "Code: ",":a{2}^"   
2D8D   CD 57 0C               CALL   printStr   
2D90   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D9F   21 02 00               LD   hl,2   
2DA2   E5                     PUSH   hl   
2DA3   E5                     PUSH   hl   
2DA4   CD 5C 0D               CALL   run   
2DA7   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2DAF   CD CD 0B               CALL   flushBuffer   
2DB2   CD 57 0C               CALL   printStr   
2DB5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DC2   E1                     POP   hl   
2DC3   E5                     PUSH   hl   
2DC4   E5                     PUSH   hl   
2DC5   CD 5C 0D               CALL   run   
2DC8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DD7   CD CD 0B               CALL   flushBuffer   
2DDA   76                     HALT      
2DDB                EXPECTM_2929S104:      
2DDB   E1                     POP   HL   
2DDC                          ;*Macro unroll:  test "5 :a{%a}^", 5
2DDC   31 00 4D               LD   SP,STACK   
2DDF   CD 8B 0C               CALL   coldInit   
2DE2   CD D2 4B               CALL   execStr   
2DE5   35 20 3A 61 7B 25 61 7D 5E 00 DB   "5 :a{%a}^",0   
2DEF   CD CD 0B               CALL   flushBuffer   
2DF2   E1                     POP   HL   
2DF3   E5                     PUSH   HL   
2DF4   11 05 00               LD   DE,5   
2DF7   B7                     OR   A   
2DF8   ED 52                  SBC   HL,DE   
2DFA   7D                     LD   A,L   
2DFB   B4                     OR   H   
2DFC   CA 60 2E               JP   Z,expectM_2930S105   
2DFF   CD 57 0C               CALL   printStr   
2E02   43 6F 64 65 3A 20 35 20 3A 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 :a{%a}^"   
2E12   CD 57 0C               CALL   printStr   
2E15   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E24   21 05 00               LD   hl,5   
2E27   E5                     PUSH   hl   
2E28   E5                     PUSH   hl   
2E29   CD 5C 0D               CALL   run   
2E2C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E34   CD CD 0B               CALL   flushBuffer   
2E37   CD 57 0C               CALL   printStr   
2E3A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E47   E1                     POP   hl   
2E48   E5                     PUSH   hl   
2E49   E5                     PUSH   hl   
2E4A   CD 5C 0D               CALL   run   
2E4D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E5C   CD CD 0B               CALL   flushBuffer   
2E5F   76                     HALT      
2E60                EXPECTM_2930S105:      
2E60   E1                     POP   HL   
2E61                          ;*Macro unroll:  test "5 :a:b{%a}^", 5
2E61   31 00 4D               LD   SP,STACK   
2E64   CD 8B 0C               CALL   coldInit   
2E67   CD D2 4B               CALL   execStr   
2E6A   35 20 3A 61 3A 62 7B 25 61 7D 5E 00 DB   "5 :a:b{%a}^",0   
2E76   CD CD 0B               CALL   flushBuffer   
2E79   E1                     POP   HL   
2E7A   E5                     PUSH   HL   
2E7B   11 05 00               LD   DE,5   
2E7E   B7                     OR   A   
2E7F   ED 52                  SBC   HL,DE   
2E81   7D                     LD   A,L   
2E82   B4                     OR   H   
2E83   CA E9 2E               JP   Z,expectM_2931S106   
2E86   CD 57 0C               CALL   printStr   
2E89   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 :a:b{%a}^"   
2E9B   CD 57 0C               CALL   printStr   
2E9E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2EAD   21 05 00               LD   hl,5   
2EB0   E5                     PUSH   hl   
2EB1   E5                     PUSH   hl   
2EB2   CD 5C 0D               CALL   run   
2EB5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2EBD   CD CD 0B               CALL   flushBuffer   
2EC0   CD 57 0C               CALL   printStr   
2EC3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2ED0   E1                     POP   hl   
2ED1   E5                     PUSH   hl   
2ED2   E5                     PUSH   hl   
2ED3   CD 5C 0D               CALL   run   
2ED6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2EE5   CD CD 0B               CALL   flushBuffer   
2EE8   76                     HALT      
2EE9                EXPECTM_2931S106:      
2EE9   E1                     POP   HL   
2EEA                          ;*Macro unroll:  test ":a{{2}^}^", 2
2EEA   31 00 4D               LD   SP,STACK   
2EED   CD 8B 0C               CALL   coldInit   
2EF0   CD D2 4B               CALL   execStr   
2EF3   3A 61 7B 7B 32 7D 5E 7D 5E 00 DB   ":a{{2}^}^",0   
2EFD   CD CD 0B               CALL   flushBuffer   
2F00   E1                     POP   HL   
2F01   E5                     PUSH   HL   
2F02   11 02 00               LD   DE,2   
2F05   B7                     OR   A   
2F06   ED 52                  SBC   HL,DE   
2F08   7D                     LD   A,L   
2F09   B4                     OR   H   
2F0A   CA 6E 2F               JP   Z,expectM_2932S107   
2F0D   CD 57 0C               CALL   printStr   
2F10   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ",":a{{2}^}^"   
2F20   CD 57 0C               CALL   printStr   
2F23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F32   21 02 00               LD   hl,2   
2F35   E5                     PUSH   hl   
2F36   E5                     PUSH   hl   
2F37   CD 5C 0D               CALL   run   
2F3A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F42   CD CD 0B               CALL   flushBuffer   
2F45   CD 57 0C               CALL   printStr   
2F48   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F55   E1                     POP   hl   
2F56   E5                     PUSH   hl   
2F57   E5                     PUSH   hl   
2F58   CD 5C 0D               CALL   run   
2F5B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F6A   CD CD 0B               CALL   flushBuffer   
2F6D   76                     HALT      
2F6E                EXPECTM_2932S107:      
2F6E   E1                     POP   HL   
2F6F                          ;*Macro unroll:  test "1 5 :a{{%a}^}^", 5
2F6F   31 00 4D               LD   SP,STACK   
2F72   CD 8B 0C               CALL   coldInit   
2F75   CD D2 4B               CALL   execStr   
2F78   31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 :a{{%a}^}^",0   
2F87   CD CD 0B               CALL   flushBuffer   
2F8A   E1                     POP   HL   
2F8B   E5                     PUSH   HL   
2F8C   11 05 00               LD   DE,5   
2F8F   B7                     OR   A   
2F90   ED 52                  SBC   HL,DE   
2F92   7D                     LD   A,L   
2F93   B4                     OR   H   
2F94   CA FD 2F               JP   Z,expectM_2933S108   
2F97   CD 57 0C               CALL   printStr   
2F9A   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 :a{{%a}^}^"   
2FAF   CD 57 0C               CALL   printStr   
2FB2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FC1   21 05 00               LD   hl,5   
2FC4   E5                     PUSH   hl   
2FC5   E5                     PUSH   hl   
2FC6   CD 5C 0D               CALL   run   
2FC9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2FD1   CD CD 0B               CALL   flushBuffer   
2FD4   CD 57 0C               CALL   printStr   
2FD7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FE4   E1                     POP   hl   
2FE5   E5                     PUSH   hl   
2FE6   E5                     PUSH   hl   
2FE7   CD 5C 0D               CALL   run   
2FEA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2FF9   CD CD 0B               CALL   flushBuffer   
2FFC   76                     HALT      
2FFD                EXPECTM_2933S108:      
2FFD   E1                     POP   HL   
2FFE                          ;*Macro unroll:  test "1 5 :ab{{%a}^}^", 1
2FFE   31 00 4D               LD   SP,STACK   
3001   CD 8B 0C               CALL   coldInit   
3004   CD D2 4B               CALL   execStr   
3007   31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 :ab{{%a}^}^",0   
3017   CD CD 0B               CALL   flushBuffer   
301A   E1                     POP   HL   
301B   E5                     PUSH   HL   
301C   11 01 00               LD   DE,1   
301F   B7                     OR   A   
3020   ED 52                  SBC   HL,DE   
3022   7D                     LD   A,L   
3023   B4                     OR   H   
3024   CA 8E 30               JP   Z,expectM_2934S109   
3027   CD 57 0C               CALL   printStr   
302A   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 :ab{{%a}^}^"   
3040   CD 57 0C               CALL   printStr   
3043   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3052   21 01 00               LD   hl,1   
3055   E5                     PUSH   hl   
3056   E5                     PUSH   hl   
3057   CD 5C 0D               CALL   run   
305A   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3062   CD CD 0B               CALL   flushBuffer   
3065   CD 57 0C               CALL   printStr   
3068   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3075   E1                     POP   hl   
3076   E5                     PUSH   hl   
3077   E5                     PUSH   hl   
3078   CD 5C 0D               CALL   run   
307B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
308A   CD CD 0B               CALL   flushBuffer   
308D   76                     HALT      
308E                EXPECTM_2934S109:      
308E   E1                     POP   HL   
308F                          ;*Macro unroll:  test "1 5 :a{{%a 2 +}^}^", 7
308F   31 00 4D               LD   SP,STACK   
3092   CD 8B 0C               CALL   coldInit   
3095   CD D2 4B               CALL   execStr   
3098   31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 :a{{%a 2 +}^}^",0   
30AB   CD CD 0B               CALL   flushBuffer   
30AE   E1                     POP   HL   
30AF   E5                     PUSH   HL   
30B0   11 07 00               LD   DE,7   
30B3   B7                     OR   A   
30B4   ED 52                  SBC   HL,DE   
30B6   7D                     LD   A,L   
30B7   B4                     OR   H   
30B8   CA 25 31               JP   Z,expectM_2935S110   
30BB   CD 57 0C               CALL   printStr   
30BE   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 :a{{%a 2 +}^}^"   
30D7   CD 57 0C               CALL   printStr   
30DA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30E9   21 07 00               LD   hl,7   
30EC   E5                     PUSH   hl   
30ED   E5                     PUSH   hl   
30EE   CD 5C 0D               CALL   run   
30F1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
30F9   CD CD 0B               CALL   flushBuffer   
30FC   CD 57 0C               CALL   printStr   
30FF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
310C   E1                     POP   hl   
310D   E5                     PUSH   hl   
310E   E5                     PUSH   hl   
310F   CD 5C 0D               CALL   run   
3112   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3121   CD CD 0B               CALL   flushBuffer   
3124   76                     HALT      
3125                EXPECTM_2935S110:      
3125   E1                     POP   HL   
3126                          ;*Macro unroll:  test "1 5 :ab{{%a %b +}^}^", 6
3126   31 00 4D               LD   SP,STACK   
3129   CD 8B 0C               CALL   coldInit   
312C   CD D2 4B               CALL   execStr   
312F   31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 :ab{{%a %b +}^}^",0   
3144   CD CD 0B               CALL   flushBuffer   
3147   E1                     POP   HL   
3148   E5                     PUSH   HL   
3149   11 06 00               LD   DE,6   
314C   B7                     OR   A   
314D   ED 52                  SBC   HL,DE   
314F   7D                     LD   A,L   
3150   B4                     OR   H   
3151   CA C0 31               JP   Z,expectM_2936S111   
3154   CD 57 0C               CALL   printStr   
3157   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 :ab{{%a %b +}^}^"   
3172   CD 57 0C               CALL   printStr   
3175   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3184   21 06 00               LD   hl,6   
3187   E5                     PUSH   hl   
3188   E5                     PUSH   hl   
3189   CD 5C 0D               CALL   run   
318C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3194   CD CD 0B               CALL   flushBuffer   
3197   CD 57 0C               CALL   printStr   
319A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31A7   E1                     POP   hl   
31A8   E5                     PUSH   hl   
31A9   E5                     PUSH   hl   
31AA   CD 5C 0D               CALL   run   
31AD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
31BC   CD CD 0B               CALL   flushBuffer   
31BF   76                     HALT      
31C0                EXPECTM_2936S111:      
31C0   E1                     POP   HL   
31C1                          ;*Macro unroll:  test ":a{2} x= 1 x^", 2
31C1   31 00 4D               LD   SP,STACK   
31C4   CD 8B 0C               CALL   coldInit   
31C7   CD D2 4B               CALL   execStr   
31CA   3A 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   ":a{2} x= 1 x^",0   
31D8   CD CD 0B               CALL   flushBuffer   
31DB   E1                     POP   HL   
31DC   E5                     PUSH   HL   
31DD   11 02 00               LD   DE,2   
31E0   B7                     OR   A   
31E1   ED 52                  SBC   HL,DE   
31E3   7D                     LD   A,L   
31E4   B4                     OR   H   
31E5   CA 4D 32               JP   Z,expectM_2937S112   
31E8   CD 57 0C               CALL   printStr   
31EB   43 6F 64 65 3A 20 3A 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2} x= 1 x^"   
31FF   CD 57 0C               CALL   printStr   
3202   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3211   21 02 00               LD   hl,2   
3214   E5                     PUSH   hl   
3215   E5                     PUSH   hl   
3216   CD 5C 0D               CALL   run   
3219   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3221   CD CD 0B               CALL   flushBuffer   
3224   CD 57 0C               CALL   printStr   
3227   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3234   E1                     POP   hl   
3235   E5                     PUSH   hl   
3236   E5                     PUSH   hl   
3237   CD 5C 0D               CALL   run   
323A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3249   CD CD 0B               CALL   flushBuffer   
324C   76                     HALT      
324D                EXPECTM_2937S112:      
324D   E1                     POP   HL   
324E                          ;*Macro unroll:  test ":a{%a} x= 0 1 x^", 1
324E   31 00 4D               LD   SP,STACK   
3251   CD 8B 0C               CALL   coldInit   
3254   CD D2 4B               CALL   execStr   
3257   3A 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   ":a{%a} x= 0 1 x^",0   
3268   CD CD 0B               CALL   flushBuffer   
326B   E1                     POP   HL   
326C   E5                     PUSH   HL   
326D   11 01 00               LD   DE,1   
3270   B7                     OR   A   
3271   ED 52                  SBC   HL,DE   
3273   7D                     LD   A,L   
3274   B4                     OR   H   
3275   CA E0 32               JP   Z,expectM_2938S113   
3278   CD 57 0C               CALL   printStr   
327B   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{%a} x= 0 1 x^"   
3292   CD 57 0C               CALL   printStr   
3295   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32A4   21 01 00               LD   hl,1   
32A7   E5                     PUSH   hl   
32A8   E5                     PUSH   hl   
32A9   CD 5C 0D               CALL   run   
32AC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
32B4   CD CD 0B               CALL   flushBuffer   
32B7   CD 57 0C               CALL   printStr   
32BA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32C7   E1                     POP   hl   
32C8   E5                     PUSH   hl   
32C9   E5                     PUSH   hl   
32CA   CD 5C 0D               CALL   run   
32CD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
32DC   CD CD 0B               CALL   flushBuffer   
32DF   76                     HALT      
32E0                EXPECTM_2938S113:      
32E0   E1                     POP   HL   
32E1                          ;*Macro unroll:  test ":ab{%b} x= 1 2 x^", 2
32E1   31 00 4D               LD   SP,STACK   
32E4   CD 8B 0C               CALL   coldInit   
32E7   CD D2 4B               CALL   execStr   
32EA   3A 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b} x= 1 2 x^",0   
32FC   CD CD 0B               CALL   flushBuffer   
32FF   E1                     POP   HL   
3300   E5                     PUSH   HL   
3301   11 02 00               LD   DE,2   
3304   B7                     OR   A   
3305   ED 52                  SBC   HL,DE   
3307   7D                     LD   A,L   
3308   B4                     OR   H   
3309   CA 75 33               JP   Z,expectM_2939S114   
330C   CD 57 0C               CALL   printStr   
330F   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b} x= 1 2 x^"   
3327   CD 57 0C               CALL   printStr   
332A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3339   21 02 00               LD   hl,2   
333C   E5                     PUSH   hl   
333D   E5                     PUSH   hl   
333E   CD 5C 0D               CALL   run   
3341   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3349   CD CD 0B               CALL   flushBuffer   
334C   CD 57 0C               CALL   printStr   
334F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
335C   E1                     POP   hl   
335D   E5                     PUSH   hl   
335E   E5                     PUSH   hl   
335F   CD 5C 0D               CALL   run   
3362   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3371   CD CD 0B               CALL   flushBuffer   
3374   76                     HALT      
3375                EXPECTM_2939S114:      
3375   E1                     POP   HL   
3376                          ;*Macro unroll:  test ":a:b{%a} x= 1 2 x^", 2
3376   31 00 4D               LD   SP,STACK   
3379   CD 8B 0C               CALL   coldInit   
337C   CD D2 4B               CALL   execStr   
337F   3A 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":a:b{%a} x= 1 2 x^",0   
3392   CD CD 0B               CALL   flushBuffer   
3395   E1                     POP   HL   
3396   E5                     PUSH   HL   
3397   11 02 00               LD   DE,2   
339A   B7                     OR   A   
339B   ED 52                  SBC   HL,DE   
339D   7D                     LD   A,L   
339E   B4                     OR   H   
339F   CA 0C 34               JP   Z,expectM_2940S115   
33A2   CD 57 0C               CALL   printStr   
33A5   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a} x= 1 2 x^"   
33BE   CD 57 0C               CALL   printStr   
33C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33D0   21 02 00               LD   hl,2   
33D3   E5                     PUSH   hl   
33D4   E5                     PUSH   hl   
33D5   CD 5C 0D               CALL   run   
33D8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
33E0   CD CD 0B               CALL   flushBuffer   
33E3   CD 57 0C               CALL   printStr   
33E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33F3   E1                     POP   hl   
33F4   E5                     PUSH   hl   
33F5   E5                     PUSH   hl   
33F6   CD 5C 0D               CALL   run   
33F9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3408   CD CD 0B               CALL   flushBuffer   
340B   76                     HALT      
340C                EXPECTM_2940S115:      
340C   E1                     POP   HL   
340D                          ;*Macro unroll:  test ":ab{%b} x= 1 2 x^", 2
340D   31 00 4D               LD   SP,STACK   
3410   CD 8B 0C               CALL   coldInit   
3413   CD D2 4B               CALL   execStr   
3416   3A 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b} x= 1 2 x^",0   
3428   CD CD 0B               CALL   flushBuffer   
342B   E1                     POP   HL   
342C   E5                     PUSH   HL   
342D   11 02 00               LD   DE,2   
3430   B7                     OR   A   
3431   ED 52                  SBC   HL,DE   
3433   7D                     LD   A,L   
3434   B4                     OR   H   
3435   CA A1 34               JP   Z,expectM_2941S116   
3438   CD 57 0C               CALL   printStr   
343B   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b} x= 1 2 x^"   
3453   CD 57 0C               CALL   printStr   
3456   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3465   21 02 00               LD   hl,2   
3468   E5                     PUSH   hl   
3469   E5                     PUSH   hl   
346A   CD 5C 0D               CALL   run   
346D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3475   CD CD 0B               CALL   flushBuffer   
3478   CD 57 0C               CALL   printStr   
347B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3488   E1                     POP   hl   
3489   E5                     PUSH   hl   
348A   E5                     PUSH   hl   
348B   CD 5C 0D               CALL   run   
348E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
349D   CD CD 0B               CALL   flushBuffer   
34A0   76                     HALT      
34A1                EXPECTM_2941S116:      
34A1   E1                     POP   HL   
34A2                          ;*Macro unroll:  test ":ab{%b %a} x= 10 15 x^ -", 5
34A2   31 00 4D               LD   SP,STACK   
34A5   CD 8B 0C               CALL   coldInit   
34A8   CD D2 4B               CALL   execStr   
34AB   3A 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   ":ab{%b %a} x= 10 15 x^ -",0   
34C4   CD CD 0B               CALL   flushBuffer   
34C7   E1                     POP   HL   
34C8   E5                     PUSH   HL   
34C9   11 05 00               LD   DE,5   
34CC   B7                     OR   A   
34CD   ED 52                  SBC   HL,DE   
34CF   7D                     LD   A,L   
34D0   B4                     OR   H   
34D1   CA 44 35               JP   Z,expectM_2942S117   
34D4   CD 57 0C               CALL   printStr   
34D7   43 6F 64 65 3A 20 3A 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{%b %a} x= 10 15 x^ -"   
34F6   CD 57 0C               CALL   printStr   
34F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3508   21 05 00               LD   hl,5   
350B   E5                     PUSH   hl   
350C   E5                     PUSH   hl   
350D   CD 5C 0D               CALL   run   
3510   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3518   CD CD 0B               CALL   flushBuffer   
351B   CD 57 0C               CALL   printStr   
351E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
352B   E1                     POP   hl   
352C   E5                     PUSH   hl   
352D   E5                     PUSH   hl   
352E   CD 5C 0D               CALL   run   
3531   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3540   CD CD 0B               CALL   flushBuffer   
3543   76                     HALT      
3544                EXPECTM_2942S117:      
3544   E1                     POP   HL   
3545                          ;*Macro unroll:  test ":a:b{2} x= 1 x^", 2
3545   31 00 4D               LD   SP,STACK   
3548   CD 8B 0C               CALL   coldInit   
354B   CD D2 4B               CALL   execStr   
354E   3A 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   ":a:b{2} x= 1 x^",0   
355E   CD CD 0B               CALL   flushBuffer   
3561   E1                     POP   HL   
3562   E5                     PUSH   HL   
3563   11 02 00               LD   DE,2   
3566   B7                     OR   A   
3567   ED 52                  SBC   HL,DE   
3569   7D                     LD   A,L   
356A   B4                     OR   H   
356B   CA D5 35               JP   Z,expectM_2943S118   
356E   CD 57 0C               CALL   printStr   
3571   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2} x= 1 x^"   
3587   CD 57 0C               CALL   printStr   
358A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3599   21 02 00               LD   hl,2   
359C   E5                     PUSH   hl   
359D   E5                     PUSH   hl   
359E   CD 5C 0D               CALL   run   
35A1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
35A9   CD CD 0B               CALL   flushBuffer   
35AC   CD 57 0C               CALL   printStr   
35AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35BC   E1                     POP   hl   
35BD   E5                     PUSH   hl   
35BE   E5                     PUSH   hl   
35BF   CD 5C 0D               CALL   run   
35C2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
35D1   CD CD 0B               CALL   flushBuffer   
35D4   76                     HALT      
35D5                EXPECTM_2943S118:      
35D5   E1                     POP   HL   
35D6                          ;*Macro unroll:  test "::b{100 %b = %b} x= x^", 100
35D6   31 00 4D               LD   SP,STACK   
35D9   CD 8B 0C               CALL   coldInit   
35DC   CD D2 4B               CALL   execStr   
35DF   3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "::b{100 %b = %b} x= x^",0   
35F6   CD CD 0B               CALL   flushBuffer   
35F9   E1                     POP   HL   
35FA   E5                     PUSH   HL   
35FB   11 64 00               LD   DE,100   
35FE   B7                     OR   A   
35FF   ED 52                  SBC   HL,DE   
3601   7D                     LD   A,L   
3602   B4                     OR   H   
3603   CA 74 36               JP   Z,expectM_2944S119   
3606   CD 57 0C               CALL   printStr   
3609   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 %b = %b} x= x^"   
3626   CD 57 0C               CALL   printStr   
3629   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3638   21 64 00               LD   hl,100   
363B   E5                     PUSH   hl   
363C   E5                     PUSH   hl   
363D   CD 5C 0D               CALL   run   
3640   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3648   CD CD 0B               CALL   flushBuffer   
364B   CD 57 0C               CALL   printStr   
364E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
365B   E1                     POP   hl   
365C   E5                     PUSH   hl   
365D   E5                     PUSH   hl   
365E   CD 5C 0D               CALL   run   
3661   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3670   CD CD 0B               CALL   flushBuffer   
3673   76                     HALT      
3674                EXPECTM_2944S119:      
3674   E1                     POP   HL   
3675                          ;*Macro unroll:  test ":a:b{1 %b = %b} x= 2 x^", 1
3675   31 00 4D               LD   SP,STACK   
3678   CD 8B 0C               CALL   coldInit   
367B   CD D2 4B               CALL   execStr   
367E   3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{1 %b = %b} x= 2 x^",0   
3696   CD CD 0B               CALL   flushBuffer   
3699   E1                     POP   HL   
369A   E5                     PUSH   HL   
369B   11 01 00               LD   DE,1   
369E   B7                     OR   A   
369F   ED 52                  SBC   HL,DE   
36A1   7D                     LD   A,L   
36A2   B4                     OR   H   
36A3   CA 15 37               JP   Z,expectM_2945S120   
36A6   CD 57 0C               CALL   printStr   
36A9   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 %b = %b} x= 2 x^"   
36C7   CD 57 0C               CALL   printStr   
36CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36D9   21 01 00               LD   hl,1   
36DC   E5                     PUSH   hl   
36DD   E5                     PUSH   hl   
36DE   CD 5C 0D               CALL   run   
36E1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
36E9   CD CD 0B               CALL   flushBuffer   
36EC   CD 57 0C               CALL   printStr   
36EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36FC   E1                     POP   hl   
36FD   E5                     PUSH   hl   
36FE   E5                     PUSH   hl   
36FF   CD 5C 0D               CALL   run   
3702   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3711   CD CD 0B               CALL   flushBuffer   
3714   76                     HALT      
3715                EXPECTM_2945S120:      
3715   E1                     POP   HL   
3716                          ;*Macro unroll:  test ":a:b{%a %b = %b} x= 2 x^", 2
3716   31 00 4D               LD   SP,STACK   
3719   CD 8B 0C               CALL   coldInit   
371C   CD D2 4B               CALL   execStr   
371F   3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{%a %b = %b} x= 2 x^",0   
3738   CD CD 0B               CALL   flushBuffer   
373B   E1                     POP   HL   
373C   E5                     PUSH   HL   
373D   11 02 00               LD   DE,2   
3740   B7                     OR   A   
3741   ED 52                  SBC   HL,DE   
3743   7D                     LD   A,L   
3744   B4                     OR   H   
3745   CA B8 37               JP   Z,expectM_2946S121   
3748   CD 57 0C               CALL   printStr   
374B   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a %b = %b} x= 2 x^"   
376A   CD 57 0C               CALL   printStr   
376D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
377C   21 02 00               LD   hl,2   
377F   E5                     PUSH   hl   
3780   E5                     PUSH   hl   
3781   CD 5C 0D               CALL   run   
3784   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
378C   CD CD 0B               CALL   flushBuffer   
378F   CD 57 0C               CALL   printStr   
3792   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
379F   E1                     POP   hl   
37A0   E5                     PUSH   hl   
37A1   E5                     PUSH   hl   
37A2   CD 5C 0D               CALL   run   
37A5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
37B4   CD CD 0B               CALL   flushBuffer   
37B7   76                     HALT      
37B8                EXPECTM_2946S121:      
37B8   E1                     POP   HL   
37B9                          ;*Macro unroll:  test "1 10 20 :ab{/t{%a}{%b} ??}^ +", 11
37B9   31 00 4D               LD   SP,STACK   
37BC   CD 8B 0C               CALL   coldInit   
37BF   CD D2 4B               CALL   execStr   
37C2   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 :ab{/t{%a}{%b} ??}^ +",0   
37E0   CD CD 0B               CALL   flushBuffer   
37E3   E1                     POP   HL   
37E4   E5                     PUSH   HL   
37E5   11 0B 00               LD   DE,11   
37E8   B7                     OR   A   
37E9   ED 52                  SBC   HL,DE   
37EB   7D                     LD   A,L   
37EC   B4                     OR   H   
37ED   CA 65 38               JP   Z,expectM_2947S122   
37F0   CD 57 0C               CALL   printStr   
37F3   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{%a}{%b} ??}^ +"   
3817   CD 57 0C               CALL   printStr   
381A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3829   21 0B 00               LD   hl,11   
382C   E5                     PUSH   hl   
382D   E5                     PUSH   hl   
382E   CD 5C 0D               CALL   run   
3831   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3839   CD CD 0B               CALL   flushBuffer   
383C   CD 57 0C               CALL   printStr   
383F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
384C   E1                     POP   hl   
384D   E5                     PUSH   hl   
384E   E5                     PUSH   hl   
384F   CD 5C 0D               CALL   run   
3852   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3861   CD CD 0B               CALL   flushBuffer   
3864   76                     HALT      
3865                EXPECTM_2947S122:      
3865   E1                     POP   HL   
3866                          ;*Macro unroll:  test "1 10 20 :ab{/f{%a}{%b} ??}^ +", 21
3866   31 00 4D               LD   SP,STACK   
3869   CD 8B 0C               CALL   coldInit   
386C   CD D2 4B               CALL   execStr   
386F   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 :ab{/f{%a}{%b} ??}^ +",0   
388D   CD CD 0B               CALL   flushBuffer   
3890   E1                     POP   HL   
3891   E5                     PUSH   HL   
3892   11 15 00               LD   DE,21   
3895   B7                     OR   A   
3896   ED 52                  SBC   HL,DE   
3898   7D                     LD   A,L   
3899   B4                     OR   H   
389A   CA 12 39               JP   Z,expectM_2948S123   
389D   CD 57 0C               CALL   printStr   
38A0   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{%a}{%b} ??}^ +"   
38C4   CD 57 0C               CALL   printStr   
38C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38D6   21 15 00               LD   hl,21   
38D9   E5                     PUSH   hl   
38DA   E5                     PUSH   hl   
38DB   CD 5C 0D               CALL   run   
38DE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
38E6   CD CD 0B               CALL   flushBuffer   
38E9   CD 57 0C               CALL   printStr   
38EC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38F9   E1                     POP   hl   
38FA   E5                     PUSH   hl   
38FB   E5                     PUSH   hl   
38FC   CD 5C 0D               CALL   run   
38FF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
390E   CD CD 0B               CALL   flushBuffer   
3911   76                     HALT      
3912                EXPECTM_2948S123:      
3912   E1                     POP   HL   
3913                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3913   31 00 4D               LD   SP,STACK   
3916   CD 8B 0C               CALL   coldInit   
3919   CD D2 4B               CALL   execStr   
391C   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
392A   CD CD 0B               CALL   flushBuffer   
392D   E1                     POP   HL   
392E   E5                     PUSH   HL   
392F   11 14 00               LD   DE,20   
3932   B7                     OR   A   
3933   ED 52                  SBC   HL,DE   
3935   7D                     LD   A,L   
3936   B4                     OR   H   
3937   CA 9F 39               JP   Z,expectM_2949S124   
393A   CD 57 0C               CALL   printStr   
393D   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
3951   CD 57 0C               CALL   printStr   
3954   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3963   21 14 00               LD   hl,20   
3966   E5                     PUSH   hl   
3967   E5                     PUSH   hl   
3968   CD 5C 0D               CALL   run   
396B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3973   CD CD 0B               CALL   flushBuffer   
3976   CD 57 0C               CALL   printStr   
3979   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3986   E1                     POP   hl   
3987   E5                     PUSH   hl   
3988   E5                     PUSH   hl   
3989   CD 5C 0D               CALL   run   
398C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
399B   CD CD 0B               CALL   flushBuffer   
399E   76                     HALT      
399F                EXPECTM_2949S124:      
399F   E1                     POP   HL   
39A0                          ;*Macro unroll:  test "[10 20 30 40] /as", 4
39A0   31 00 4D               LD   SP,STACK   
39A3   CD 8B 0C               CALL   coldInit   
39A6   CD D2 4B               CALL   execStr   
39A9   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 DB   "[10 20 30 40] /as",0   
39BB   CD CD 0B               CALL   flushBuffer   
39BE   E1                     POP   HL   
39BF   E5                     PUSH   HL   
39C0   11 04 00               LD   DE,4   
39C3   B7                     OR   A   
39C4   ED 52                  SBC   HL,DE   
39C6   7D                     LD   A,L   
39C7   B4                     OR   H   
39C8   CA 34 3A               JP   Z,expectM_2950S125   
39CB   CD 57 0C               CALL   printStr   
39CE   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 73 00 .CSTR   "Code: ","[10 20 30 40] /as"   
39E6   CD 57 0C               CALL   printStr   
39E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39F8   21 04 00               LD   hl,4   
39FB   E5                     PUSH   hl   
39FC   E5                     PUSH   hl   
39FD   CD 5C 0D               CALL   run   
3A00   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A08   CD CD 0B               CALL   flushBuffer   
3A0B   CD 57 0C               CALL   printStr   
3A0E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A1B   E1                     POP   hl   
3A1C   E5                     PUSH   hl   
3A1D   E5                     PUSH   hl   
3A1E   CD 5C 0D               CALL   run   
3A21   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A30   CD CD 0B               CALL   flushBuffer   
3A33   76                     HALT      
3A34                EXPECTM_2950S125:      
3A34   E1                     POP   HL   
3A35                          ;*Macro unroll:  test "/b [1 2 3] 1#", 2
3A35   31 00 4D               LD   SP,STACK   
3A38   CD 8B 0C               CALL   coldInit   
3A3B   CD D2 4B               CALL   execStr   
3A3E   2F 62 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/b [1 2 3] 1#",0   
3A4C   CD CD 0B               CALL   flushBuffer   
3A4F   E1                     POP   HL   
3A50   E5                     PUSH   HL   
3A51   11 02 00               LD   DE,2   
3A54   B7                     OR   A   
3A55   ED 52                  SBC   HL,DE   
3A57   7D                     LD   A,L   
3A58   B4                     OR   H   
3A59   CA C1 3A               JP   Z,expectM_2951S126   
3A5C   CD 57 0C               CALL   printStr   
3A5F   43 6F 64 65 3A 20 2F 62 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/b [1 2 3] 1#"   
3A73   CD 57 0C               CALL   printStr   
3A76   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A85   21 02 00               LD   hl,2   
3A88   E5                     PUSH   hl   
3A89   E5                     PUSH   hl   
3A8A   CD 5C 0D               CALL   run   
3A8D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A95   CD CD 0B               CALL   flushBuffer   
3A98   CD 57 0C               CALL   printStr   
3A9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AA8   E1                     POP   hl   
3AA9   E5                     PUSH   hl   
3AAA   E5                     PUSH   hl   
3AAB   CD 5C 0D               CALL   run   
3AAE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3ABD   CD CD 0B               CALL   flushBuffer   
3AC0   76                     HALT      
3AC1                EXPECTM_2951S126:      
3AC1   E1                     POP   HL   
3AC2                          ;*Macro unroll:  test "/b ['A' 'B' 'C'] 1#", 66
3AC2   31 00 4D               LD   SP,STACK   
3AC5   CD 8B 0C               CALL   coldInit   
3AC8   CD D2 4B               CALL   execStr   
3ACB   2F 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 DB   "/b ['A' 'B' 'C'] 1#",0   
3ADF   CD CD 0B               CALL   flushBuffer   
3AE2   E1                     POP   HL   
3AE3   E5                     PUSH   HL   
3AE4   11 42 00               LD   DE,66   
3AE7   B7                     OR   A   
3AE8   ED 52                  SBC   HL,DE   
3AEA   7D                     LD   A,L   
3AEB   B4                     OR   H   
3AEC   CA 5A 3B               JP   Z,expectM_2952S127   
3AEF   CD 57 0C               CALL   printStr   
3AF2   43 6F 64 65 3A 20 2F 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 .CSTR   "Code: ","/b ['A' 'B' 'C'] 1#"   
3B0C   CD 57 0C               CALL   printStr   
3B0F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B1E   21 42 00               LD   hl,66   
3B21   E5                     PUSH   hl   
3B22   E5                     PUSH   hl   
3B23   CD 5C 0D               CALL   run   
3B26   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B2E   CD CD 0B               CALL   flushBuffer   
3B31   CD 57 0C               CALL   printStr   
3B34   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B41   E1                     POP   hl   
3B42   E5                     PUSH   hl   
3B43   E5                     PUSH   hl   
3B44   CD 5C 0D               CALL   run   
3B47   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B56   CD CD 0B               CALL   flushBuffer   
3B59   76                     HALT      
3B5A                EXPECTM_2952S127:      
3B5A   E1                     POP   HL   
3B5B                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3B5B   31 00 4D               LD   SP,STACK   
3B5E   CD 8B 0C               CALL   coldInit   
3B61   CD D2 4B               CALL   execStr   
3B64   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
3B78   CD CD 0B               CALL   flushBuffer   
3B7B   E1                     POP   HL   
3B7C   E5                     PUSH   HL   
3B7D   11 0A 00               LD   DE,10   
3B80   B7                     OR   A   
3B81   ED 52                  SBC   HL,DE   
3B83   7D                     LD   A,L   
3B84   B4                     OR   H   
3B85   CA F3 3B               JP   Z,expectM_2953S128   
3B88   CD 57 0C               CALL   printStr   
3B8B   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
3BA5   CD 57 0C               CALL   printStr   
3BA8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BB7   21 0A 00               LD   hl,10   
3BBA   E5                     PUSH   hl   
3BBB   E5                     PUSH   hl   
3BBC   CD 5C 0D               CALL   run   
3BBF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3BC7   CD CD 0B               CALL   flushBuffer   
3BCA   CD 57 0C               CALL   printStr   
3BCD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BDA   E1                     POP   hl   
3BDB   E5                     PUSH   hl   
3BDC   E5                     PUSH   hl   
3BDD   CD 5C 0D               CALL   run   
3BE0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3BEF   CD CD 0B               CALL   flushBuffer   
3BF2   76                     HALT      
3BF3                EXPECTM_2953S128:      
3BF3   E1                     POP   HL   
3BF4                          ;*Macro unroll:  test "10 20 :ab{[{%a}{%b}] 0#^}^", 10
3BF4   31 00 4D               LD   SP,STACK   
3BF7   CD 8B 0C               CALL   coldInit   
3BFA   CD D2 4B               CALL   execStr   
3BFD   31 30 20 32 30 20 3A 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 DB   "10 20 :ab{[{%a}{%b}] 0#^}^",0   
3C18   CD CD 0B               CALL   flushBuffer   
3C1B   E1                     POP   HL   
3C1C   E5                     PUSH   HL   
3C1D   11 0A 00               LD   DE,10   
3C20   B7                     OR   A   
3C21   ED 52                  SBC   HL,DE   
3C23   7D                     LD   A,L   
3C24   B4                     OR   H   
3C25   CA 9A 3C               JP   Z,expectM_2954S129   
3C28   CD 57 0C               CALL   printStr   
3C2B   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 .CSTR   "Code: ","10 20 :ab{[{%a}{%b}] 0#^}^"   
3C4C   CD 57 0C               CALL   printStr   
3C4F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C5E   21 0A 00               LD   hl,10   
3C61   E5                     PUSH   hl   
3C62   E5                     PUSH   hl   
3C63   CD 5C 0D               CALL   run   
3C66   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C6E   CD CD 0B               CALL   flushBuffer   
3C71   CD 57 0C               CALL   printStr   
3C74   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C81   E1                     POP   hl   
3C82   E5                     PUSH   hl   
3C83   E5                     PUSH   hl   
3C84   CD 5C 0D               CALL   run   
3C87   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C96   CD CD 0B               CALL   flushBuffer   
3C99   76                     HALT      
3C9A                EXPECTM_2954S129:      
3C9A   E1                     POP   HL   
3C9B                          ;*Macro unroll:  test "0 10 20 :iab{[{%a}{%b}] %i#^}^", 10
3C9B   31 00 4D               LD   SP,STACK   
3C9E   CD 8B 0C               CALL   coldInit   
3CA1   CD D2 4B               CALL   execStr   
3CA4   30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "0 10 20 :iab{[{%a}{%b}] %i#^}^",0   
3CC3   CD CD 0B               CALL   flushBuffer   
3CC6   E1                     POP   HL   
3CC7   E5                     PUSH   HL   
3CC8   11 0A 00               LD   DE,10   
3CCB   B7                     OR   A   
3CCC   ED 52                  SBC   HL,DE   
3CCE   7D                     LD   A,L   
3CCF   B4                     OR   H   
3CD0   CA 49 3D               JP   Z,expectM_2955S130   
3CD3   CD 57 0C               CALL   printStr   
3CD6   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 :iab{[{%a}{%b}] %i#^}^"   
3CFB   CD 57 0C               CALL   printStr   
3CFE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D0D   21 0A 00               LD   hl,10   
3D10   E5                     PUSH   hl   
3D11   E5                     PUSH   hl   
3D12   CD 5C 0D               CALL   run   
3D15   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D1D   CD CD 0B               CALL   flushBuffer   
3D20   CD 57 0C               CALL   printStr   
3D23   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D30   E1                     POP   hl   
3D31   E5                     PUSH   hl   
3D32   E5                     PUSH   hl   
3D33   CD 5C 0D               CALL   run   
3D36   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D45   CD CD 0B               CALL   flushBuffer   
3D48   76                     HALT      
3D49                EXPECTM_2955S130:      
3D49   E1                     POP   HL   
3D4A                          ;*Macro unroll:  test "1 10 20 :iab{[{%a}{%b}] %i#^}^", 20
3D4A   31 00 4D               LD   SP,STACK   
3D4D   CD 8B 0C               CALL   coldInit   
3D50   CD D2 4B               CALL   execStr   
3D53   31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "1 10 20 :iab{[{%a}{%b}] %i#^}^",0   
3D72   CD CD 0B               CALL   flushBuffer   
3D75   E1                     POP   HL   
3D76   E5                     PUSH   HL   
3D77   11 14 00               LD   DE,20   
3D7A   B7                     OR   A   
3D7B   ED 52                  SBC   HL,DE   
3D7D   7D                     LD   A,L   
3D7E   B4                     OR   H   
3D7F   CA F8 3D               JP   Z,expectM_2956S131   
3D82   CD 57 0C               CALL   printStr   
3D85   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 :iab{[{%a}{%b}] %i#^}^"   
3DAA   CD 57 0C               CALL   printStr   
3DAD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DBC   21 14 00               LD   hl,20   
3DBF   E5                     PUSH   hl   
3DC0   E5                     PUSH   hl   
3DC1   CD 5C 0D               CALL   run   
3DC4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3DCC   CD CD 0B               CALL   flushBuffer   
3DCF   CD 57 0C               CALL   printStr   
3DD2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DDF   E1                     POP   hl   
3DE0   E5                     PUSH   hl   
3DE1   E5                     PUSH   hl   
3DE2   CD 5C 0D               CALL   run   
3DE5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3DF4   CD CD 0B               CALL   flushBuffer   
3DF7   76                     HALT      
3DF8                EXPECTM_2956S131:      
3DF8   E1                     POP   HL   
3DF9                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3DF9   31 00 4D               LD   SP,STACK   
3DFC   CD 8B 0C               CALL   coldInit   
3DFF   CD D2 4B               CALL   execStr   
3E02   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
3E1A   CD CD 0B               CALL   flushBuffer   
3E1D   E1                     POP   HL   
3E1E   E5                     PUSH   HL   
3E1F   11 06 00               LD   DE,6   
3E22   B7                     OR   A   
3E23   ED 52                  SBC   HL,DE   
3E25   7D                     LD   A,L   
3E26   B4                     OR   H   
3E27   CA 99 3E               JP   Z,expectM_2957S132   
3E2A   CD 57 0C               CALL   printStr   
3E2D   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3E4B   CD 57 0C               CALL   printStr   
3E4E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E5D   21 06 00               LD   hl,6   
3E60   E5                     PUSH   hl   
3E61   E5                     PUSH   hl   
3E62   CD 5C 0D               CALL   run   
3E65   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E6D   CD CD 0B               CALL   flushBuffer   
3E70   CD 57 0C               CALL   printStr   
3E73   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E80   E1                     POP   hl   
3E81   E5                     PUSH   hl   
3E82   E5                     PUSH   hl   
3E83   CD 5C 0D               CALL   run   
3E86   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E95   CD CD 0B               CALL   flushBuffer   
3E98   76                     HALT      
3E99                EXPECTM_2957S132:      
3E99   E1                     POP   HL   
3E9A                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
3E9A   31 00 4D               LD   SP,STACK   
3E9D   CD 8B 0C               CALL   coldInit   
3EA0   CD D2 4B               CALL   execStr   
3EA3   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
3EBE   CD CD 0B               CALL   flushBuffer   
3EC1   E1                     POP   HL   
3EC2   E5                     PUSH   HL   
3EC3   11 02 00               LD   DE,2   
3EC6   B7                     OR   A   
3EC7   ED 52                  SBC   HL,DE   
3EC9   7D                     LD   A,L   
3ECA   B4                     OR   H   
3ECB   CA 40 3F               JP   Z,expectM_2958S133   
3ECE   CD 57 0C               CALL   printStr   
3ED1   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
3EF2   CD 57 0C               CALL   printStr   
3EF5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F04   21 02 00               LD   hl,2   
3F07   E5                     PUSH   hl   
3F08   E5                     PUSH   hl   
3F09   CD 5C 0D               CALL   run   
3F0C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F14   CD CD 0B               CALL   flushBuffer   
3F17   CD 57 0C               CALL   printStr   
3F1A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F27   E1                     POP   hl   
3F28   E5                     PUSH   hl   
3F29   E5                     PUSH   hl   
3F2A   CD 5C 0D               CALL   run   
3F2D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F3C   CD CD 0B               CALL   flushBuffer   
3F3F   76                     HALT      
3F40                EXPECTM_2958S133:      
3F40   E1                     POP   HL   
3F41                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
3F41   31 00 4D               LD   SP,STACK   
3F44   CD 8B 0C               CALL   coldInit   
3F47   CD D2 4B               CALL   execStr   
3F4A   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
3F70   CD CD 0B               CALL   flushBuffer   
3F73   E1                     POP   HL   
3F74   E5                     PUSH   HL   
3F75   11 0A 00               LD   DE,10   
3F78   B7                     OR   A   
3F79   ED 52                  SBC   HL,DE   
3F7B   7D                     LD   A,L   
3F7C   B4                     OR   H   
3F7D   CA FD 3F               JP   Z,expectM_2959S134   
3F80   CD 57 0C               CALL   printStr   
3F83   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3FAF   CD 57 0C               CALL   printStr   
3FB2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FC1   21 0A 00               LD   hl,10   
3FC4   E5                     PUSH   hl   
3FC5   E5                     PUSH   hl   
3FC6   CD 5C 0D               CALL   run   
3FC9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3FD1   CD CD 0B               CALL   flushBuffer   
3FD4   CD 57 0C               CALL   printStr   
3FD7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FE4   E1                     POP   hl   
3FE5   E5                     PUSH   hl   
3FE6   E5                     PUSH   hl   
3FE7   CD 5C 0D               CALL   run   
3FEA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3FF9   CD CD 0B               CALL   flushBuffer   
3FFC   76                     HALT      
3FFD                EXPECTM_2959S134:      
3FFD   E1                     POP   HL   
3FFE                          ;*Macro unroll:  test "3 :a:bc{%a %c = ( %c %c -- %c /br )^ + +}^", 6
3FFE   31 00 4D               LD   SP,STACK   
4001   CD 8B 0C               CALL   coldInit   
4004   CD D2 4B               CALL   execStr   
4007   33 20 3A 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 :a:bc{%a %c = ( %c %c -- %c /br )^ + +}^",0   
4032   CD CD 0B               CALL   flushBuffer   
4035   E1                     POP   HL   
4036   E5                     PUSH   HL   
4037   11 06 00               LD   DE,6   
403A   B7                     OR   A   
403B   ED 52                  SBC   HL,DE   
403D   7D                     LD   A,L   
403E   B4                     OR   H   
403F   CA C4 40               JP   Z,expectM_2960S135   
4042   CD 57 0C               CALL   printStr   
4045   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 :a:bc{%a %c = ( %c %c -- %c /br )^ + +}^"   
4076   CD 57 0C               CALL   printStr   
4079   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4088   21 06 00               LD   hl,6   
408B   E5                     PUSH   hl   
408C   E5                     PUSH   hl   
408D   CD 5C 0D               CALL   run   
4090   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4098   CD CD 0B               CALL   flushBuffer   
409B   CD 57 0C               CALL   printStr   
409E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40AB   E1                     POP   hl   
40AC   E5                     PUSH   hl   
40AD   E5                     PUSH   hl   
40AE   CD 5C 0D               CALL   run   
40B1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
40C0   CD CD 0B               CALL   flushBuffer   
40C3   76                     HALT      
40C4                EXPECTM_2960S135:      
40C4   E1                     POP   HL   
40C5                          ;*Macro unroll:  test "/t :f{1 %f/br 2 +}^",3
40C5   31 00 4D               LD   SP,STACK   
40C8   CD 8B 0C               CALL   coldInit   
40CB   CD D2 4B               CALL   execStr   
40CE   2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/t :f{1 %f/br 2 +}^",0   
40E2   CD CD 0B               CALL   flushBuffer   
40E5   E1                     POP   HL   
40E6   E5                     PUSH   HL   
40E7   11 03 00               LD   DE,3   
40EA   B7                     OR   A   
40EB   ED 52                  SBC   HL,DE   
40ED   7D                     LD   A,L   
40EE   B4                     OR   H   
40EF   CA 5D 41               JP   Z,expectM_2961S136   
40F2   CD 57 0C               CALL   printStr   
40F5   43 6F 64 65 3A 20 2F 74 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/t :f{1 %f/br 2 +}^"   
410F   CD 57 0C               CALL   printStr   
4112   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4121   21 03 00               LD   hl,3   
4124   E5                     PUSH   hl   
4125   E5                     PUSH   hl   
4126   CD 5C 0D               CALL   run   
4129   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4131   CD CD 0B               CALL   flushBuffer   
4134   CD 57 0C               CALL   printStr   
4137   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4144   E1                     POP   hl   
4145   E5                     PUSH   hl   
4146   E5                     PUSH   hl   
4147   CD 5C 0D               CALL   run   
414A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4159   CD CD 0B               CALL   flushBuffer   
415C   76                     HALT      
415D                EXPECTM_2961S136:      
415D   E1                     POP   HL   
415E                          ;*Macro unroll:  test "/f :f{1 %f/br 2 +}^",1
415E   31 00 4D               LD   SP,STACK   
4161   CD 8B 0C               CALL   coldInit   
4164   CD D2 4B               CALL   execStr   
4167   2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/f :f{1 %f/br 2 +}^",0   
417B   CD CD 0B               CALL   flushBuffer   
417E   E1                     POP   HL   
417F   E5                     PUSH   HL   
4180   11 01 00               LD   DE,1   
4183   B7                     OR   A   
4184   ED 52                  SBC   HL,DE   
4186   7D                     LD   A,L   
4187   B4                     OR   H   
4188   CA F6 41               JP   Z,expectM_2962S137   
418B   CD 57 0C               CALL   printStr   
418E   43 6F 64 65 3A 20 2F 66 20 3A 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/f :f{1 %f/br 2 +}^"   
41A8   CD 57 0C               CALL   printStr   
41AB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41BA   21 01 00               LD   hl,1   
41BD   E5                     PUSH   hl   
41BE   E5                     PUSH   hl   
41BF   CD 5C 0D               CALL   run   
41C2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
41CA   CD CD 0B               CALL   flushBuffer   
41CD   CD 57 0C               CALL   printStr   
41D0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41DD   E1                     POP   hl   
41DE   E5                     PUSH   hl   
41DF   E5                     PUSH   hl   
41E0   CD 5C 0D               CALL   run   
41E3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
41F2   CD CD 0B               CALL   flushBuffer   
41F5   76                     HALT      
41F6                EXPECTM_2962S137:      
41F6   E1                     POP   HL   
41F7                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
41F7   31 00 4D               LD   SP,STACK   
41FA   CD 8B 0C               CALL   coldInit   
41FD   CD D2 4B               CALL   execStr   
4200   27 41 27 20 31 20 2D 20 2F 61 64 00 DB   "'A' 1 - /ad",0   
420C   CD CD 0B               CALL   flushBuffer   
420F   E1                     POP   HL   
4210   E5                     PUSH   HL   
4211   11 00 00               LD   DE,NUL   
4214   B7                     OR   A   
4215   ED 52                  SBC   HL,DE   
4217   7D                     LD   A,L   
4218   B4                     OR   H   
4219   CA 7F 42               JP   Z,expectM_2963S138   
421C   CD 57 0C               CALL   printStr   
421F   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
4231   CD 57 0C               CALL   printStr   
4234   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4243   21 00 00               LD   hl,NUL   
4246   E5                     PUSH   hl   
4247   E5                     PUSH   hl   
4248   CD 5C 0D               CALL   run   
424B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4253   CD CD 0B               CALL   flushBuffer   
4256   CD 57 0C               CALL   printStr   
4259   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4266   E1                     POP   hl   
4267   E5                     PUSH   hl   
4268   E5                     PUSH   hl   
4269   CD 5C 0D               CALL   run   
426C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
427B   CD CD 0B               CALL   flushBuffer   
427E   76                     HALT      
427F                EXPECTM_2963S138:      
427F   E1                     POP   HL   
4280                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
4280   31 00 4D               LD   SP,STACK   
4283   CD 8B 0C               CALL   coldInit   
4286   CD D2 4B               CALL   execStr   
4289   27 5A 27 20 31 20 2B 20 2F 61 64 00 DB   "'Z' 1 + /ad",0   
4295   CD CD 0B               CALL   flushBuffer   
4298   E1                     POP   HL   
4299   E5                     PUSH   HL   
429A   11 00 00               LD   DE,NUL   
429D   B7                     OR   A   
429E   ED 52                  SBC   HL,DE   
42A0   7D                     LD   A,L   
42A1   B4                     OR   H   
42A2   CA 08 43               JP   Z,expectM_2964S139   
42A5   CD 57 0C               CALL   printStr   
42A8   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
42BA   CD 57 0C               CALL   printStr   
42BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42CC   21 00 00               LD   hl,NUL   
42CF   E5                     PUSH   hl   
42D0   E5                     PUSH   hl   
42D1   CD 5C 0D               CALL   run   
42D4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
42DC   CD CD 0B               CALL   flushBuffer   
42DF   CD 57 0C               CALL   printStr   
42E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42EF   E1                     POP   hl   
42F0   E5                     PUSH   hl   
42F1   E5                     PUSH   hl   
42F2   CD 5C 0D               CALL   run   
42F5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4304   CD CD 0B               CALL   flushBuffer   
4307   76                     HALT      
4308                EXPECTM_2964S139:      
4308   E1                     POP   HL   
4309                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
4309   31 00 4D               LD   SP,STACK   
430C   CD 8B 0C               CALL   coldInit   
430F   CD D2 4B               CALL   execStr   
4312   27 61 27 20 31 20 2D 20 2F 61 64 00 DB   "'a' 1 - /ad",0   
431E   CD CD 0B               CALL   flushBuffer   
4321   E1                     POP   HL   
4322   E5                     PUSH   HL   
4323   11 00 00               LD   DE,NUL   
4326   B7                     OR   A   
4327   ED 52                  SBC   HL,DE   
4329   7D                     LD   A,L   
432A   B4                     OR   H   
432B   CA 91 43               JP   Z,expectM_2965S140   
432E   CD 57 0C               CALL   printStr   
4331   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
4343   CD 57 0C               CALL   printStr   
4346   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4355   21 00 00               LD   hl,NUL   
4358   E5                     PUSH   hl   
4359   E5                     PUSH   hl   
435A   CD 5C 0D               CALL   run   
435D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4365   CD CD 0B               CALL   flushBuffer   
4368   CD 57 0C               CALL   printStr   
436B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4378   E1                     POP   hl   
4379   E5                     PUSH   hl   
437A   E5                     PUSH   hl   
437B   CD 5C 0D               CALL   run   
437E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
438D   CD CD 0B               CALL   flushBuffer   
4390   76                     HALT      
4391                EXPECTM_2965S140:      
4391   E1                     POP   HL   
4392                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
4392   31 00 4D               LD   SP,STACK   
4395   CD 8B 0C               CALL   coldInit   
4398   CD D2 4B               CALL   execStr   
439B   27 7A 27 20 31 20 2B 20 2F 61 64 00 DB   "'z' 1 + /ad",0   
43A7   CD CD 0B               CALL   flushBuffer   
43AA   E1                     POP   HL   
43AB   E5                     PUSH   HL   
43AC   11 00 00               LD   DE,NUL   
43AF   B7                     OR   A   
43B0   ED 52                  SBC   HL,DE   
43B2   7D                     LD   A,L   
43B3   B4                     OR   H   
43B4   CA 1A 44               JP   Z,expectM_2966S141   
43B7   CD 57 0C               CALL   printStr   
43BA   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
43CC   CD 57 0C               CALL   printStr   
43CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43DE   21 00 00               LD   hl,NUL   
43E1   E5                     PUSH   hl   
43E2   E5                     PUSH   hl   
43E3   CD 5C 0D               CALL   run   
43E6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
43EE   CD CD 0B               CALL   flushBuffer   
43F1   CD 57 0C               CALL   printStr   
43F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4401   E1                     POP   hl   
4402   E5                     PUSH   hl   
4403   E5                     PUSH   hl   
4404   CD 5C 0D               CALL   run   
4407   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4416   CD CD 0B               CALL   flushBuffer   
4419   76                     HALT      
441A                EXPECTM_2966S141:      
441A   E1                     POP   HL   
441B                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
441B   31 00 4D               LD   SP,STACK   
441E   CD 8B 0C               CALL   coldInit   
4421   CD D2 4B               CALL   execStr   
4424   27 7A 27 20 2F 61 64 00 DB   "'z' /ad",0   
442C   CD CD 0B               CALL   flushBuffer   
442F   E1                     POP   HL   
4430   E5                     PUSH   HL   
4431   11 66 4F               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4434   B7                     OR   A   
4435   ED 52                  SBC   HL,DE   
4437   7D                     LD   A,L   
4438   B4                     OR   H   
4439   CA 9B 44               JP   Z,expectM_2967S142   
443C   CD 57 0C               CALL   printStr   
443F   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
444D   CD 57 0C               CALL   printStr   
4450   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
445F   21 66 4F               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4462   E5                     PUSH   hl   
4463   E5                     PUSH   hl   
4464   CD 5C 0D               CALL   run   
4467   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
446F   CD CD 0B               CALL   flushBuffer   
4472   CD 57 0C               CALL   printStr   
4475   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4482   E1                     POP   hl   
4483   E5                     PUSH   hl   
4484   E5                     PUSH   hl   
4485   CD 5C 0D               CALL   run   
4488   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4497   CD CD 0B               CALL   flushBuffer   
449A   76                     HALT      
449B                EXPECTM_2967S142:      
449B   E1                     POP   HL   
449C                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
449C   31 00 4D               LD   SP,STACK   
449F   CD 8B 0C               CALL   coldInit   
44A2   CD D2 4B               CALL   execStr   
44A5   27 61 27 20 2F 61 64 00 DB   "'a' /ad",0   
44AD   CD CD 0B               CALL   flushBuffer   
44B0   E1                     POP   HL   
44B1   E5                     PUSH   HL   
44B2   11 34 4F               LD   DE,VARS + ("Z"-"A"+1)*2   
44B5   B7                     OR   A   
44B6   ED 52                  SBC   HL,DE   
44B8   7D                     LD   A,L   
44B9   B4                     OR   H   
44BA   CA 1C 45               JP   Z,expectM_2968S143   
44BD   CD 57 0C               CALL   printStr   
44C0   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
44CE   CD 57 0C               CALL   printStr   
44D1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44E0   21 34 4F               LD   hl,VARS + ("Z"-"A"+1)*2   
44E3   E5                     PUSH   hl   
44E4   E5                     PUSH   hl   
44E5   CD 5C 0D               CALL   run   
44E8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
44F0   CD CD 0B               CALL   flushBuffer   
44F3   CD 57 0C               CALL   printStr   
44F6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4503   E1                     POP   hl   
4504   E5                     PUSH   hl   
4505   E5                     PUSH   hl   
4506   CD 5C 0D               CALL   run   
4509   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4518   CD CD 0B               CALL   flushBuffer   
451B   76                     HALT      
451C                EXPECTM_2968S143:      
451C   E1                     POP   HL   
451D                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
451D   31 00 4D               LD   SP,STACK   
4520   CD 8B 0C               CALL   coldInit   
4523   CD D2 4B               CALL   execStr   
4526   27 5A 27 20 2F 61 64 00 DB   "'Z' /ad",0   
452E   CD CD 0B               CALL   flushBuffer   
4531   E1                     POP   HL   
4532   E5                     PUSH   HL   
4533   11 32 4F               LD   DE,VARS + ("Z"-"A")*2   
4536   B7                     OR   A   
4537   ED 52                  SBC   HL,DE   
4539   7D                     LD   A,L   
453A   B4                     OR   H   
453B   CA 9D 45               JP   Z,expectM_2969S144   
453E   CD 57 0C               CALL   printStr   
4541   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
454F   CD 57 0C               CALL   printStr   
4552   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4561   21 32 4F               LD   hl,VARS + ("Z"-"A")*2   
4564   E5                     PUSH   hl   
4565   E5                     PUSH   hl   
4566   CD 5C 0D               CALL   run   
4569   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4571   CD CD 0B               CALL   flushBuffer   
4574   CD 57 0C               CALL   printStr   
4577   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4584   E1                     POP   hl   
4585   E5                     PUSH   hl   
4586   E5                     PUSH   hl   
4587   CD 5C 0D               CALL   run   
458A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4599   CD CD 0B               CALL   flushBuffer   
459C   76                     HALT      
459D                EXPECTM_2969S144:      
459D   E1                     POP   HL   
459E                          ;*Macro unroll:  test "'A' /ad", VARS
459E   31 00 4D               LD   SP,STACK   
45A1   CD 8B 0C               CALL   coldInit   
45A4   CD D2 4B               CALL   execStr   
45A7   27 41 27 20 2F 61 64 00 DB   "'A' /ad",0   
45AF   CD CD 0B               CALL   flushBuffer   
45B2   E1                     POP   HL   
45B3   E5                     PUSH   HL   
45B4   11 00 4F               LD   DE,VARS   
45B7   B7                     OR   A   
45B8   ED 52                  SBC   HL,DE   
45BA   7D                     LD   A,L   
45BB   B4                     OR   H   
45BC   CA 1E 46               JP   Z,expectM_2970S145   
45BF   CD 57 0C               CALL   printStr   
45C2   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
45D0   CD 57 0C               CALL   printStr   
45D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45E2   21 00 4F               LD   hl,VARS   
45E5   E5                     PUSH   hl   
45E6   E5                     PUSH   hl   
45E7   CD 5C 0D               CALL   run   
45EA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
45F2   CD CD 0B               CALL   flushBuffer   
45F5   CD 57 0C               CALL   printStr   
45F8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4605   E1                     POP   hl   
4606   E5                     PUSH   hl   
4607   E5                     PUSH   hl   
4608   CD 5C 0D               CALL   run   
460B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
461A   CD CD 0B               CALL   flushBuffer   
461D   76                     HALT      
461E                EXPECTM_2970S145:      
461E   E1                     POP   HL   
461F                          ;*Macro unroll:  test "-1. /b/vB 0#", $2D
461F   31 00 4D               LD   SP,STACK   
4622   CD 8B 0C               CALL   coldInit   
4625   CD D2 4B               CALL   execStr   
4628   2D 31 2E 20 2F 62 2F 76 42 20 30 23 00 DB   "-1. /b/vB 0#",0   
4635   CD CD 0B               CALL   flushBuffer   
4638   E1                     POP   HL   
4639   E5                     PUSH   HL   
463A   11 2D 00               LD   DE,$2D   
463D   B7                     OR   A   
463E   ED 52                  SBC   HL,DE   
4640   7D                     LD   A,L   
4641   B4                     OR   H   
4642   CA A9 46               JP   Z,expectM_2971S146   
4645   CD 57 0C               CALL   printStr   
4648   43 6F 64 65 3A 20 2D 31 2E 20 2F 62 2F 76 42 20 30 23 00 .CSTR   "Code: ","-1. /b/vB 0#"   
465B   CD 57 0C               CALL   printStr   
465E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
466D   21 2D 00               LD   hl,$2D   
4670   E5                     PUSH   hl   
4671   E5                     PUSH   hl   
4672   CD 5C 0D               CALL   run   
4675   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
467D   CD CD 0B               CALL   flushBuffer   
4680   CD 57 0C               CALL   printStr   
4683   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4690   E1                     POP   hl   
4691   E5                     PUSH   hl   
4692   E5                     PUSH   hl   
4693   CD 5C 0D               CALL   run   
4696   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
46A5   CD CD 0B               CALL   flushBuffer   
46A8   76                     HALT      
46A9                EXPECTM_2971S146:      
46A9   E1                     POP   HL   
46AA                          ;*Macro unroll:  test {DQ,"A",DQ,".s /b/vB 0#"}, 65
46AA   31 00 4D               LD   SP,STACK   
46AD   CD 8B 0C               CALL   coldInit   
46B0   CD D2 4B               CALL   execStr   
46B3   22 41 22 2E 73 20 2F 62 2F 76 42 20 30 23 00 DB   DQ,"A",DQ,".s /b/vB 0#",0   
46C2   CD CD 0B               CALL   flushBuffer   
46C5   E1                     POP   HL   
46C6   E5                     PUSH   HL   
46C7   11 41 00               LD   DE,65   
46CA   B7                     OR   A   
46CB   ED 52                  SBC   HL,DE   
46CD   7D                     LD   A,L   
46CE   B4                     OR   H   
46CF   CA 38 47               JP   Z,expectM_2972S147   
46D2   CD 57 0C               CALL   printStr   
46D5   43 6F 64 65 3A 20 22 41 22 2E 73 20 2F 62 2F 76 42 20 30 23 00 .CSTR   "Code: ",DQ,"A",DQ,".s /b/vB 0#"   
46EA   CD 57 0C               CALL   printStr   
46ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46FC   21 41 00               LD   hl,65   
46FF   E5                     PUSH   hl   
4700   E5                     PUSH   hl   
4701   CD 5C 0D               CALL   run   
4704   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
470C   CD CD 0B               CALL   flushBuffer   
470F   CD 57 0C               CALL   printStr   
4712   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
471F   E1                     POP   hl   
4720   E5                     PUSH   hl   
4721   E5                     PUSH   hl   
4722   CD 5C 0D               CALL   run   
4725   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4734   CD CD 0B               CALL   flushBuffer   
4737   76                     HALT      
4738                EXPECTM_2972S147:      
4738   E1                     POP   HL   
4739                          ;*Macro unroll:  test "123. /b/vB 1#", $32
4739   31 00 4D               LD   SP,STACK   
473C   CD 8B 0C               CALL   coldInit   
473F   CD D2 4B               CALL   execStr   
4742   31 32 33 2E 20 2F 62 2F 76 42 20 31 23 00 DB   "123. /b/vB 1#",0   
4750   CD CD 0B               CALL   flushBuffer   
4753   E1                     POP   HL   
4754   E5                     PUSH   HL   
4755   11 32 00               LD   DE,$32   
4758   B7                     OR   A   
4759   ED 52                  SBC   HL,DE   
475B   7D                     LD   A,L   
475C   B4                     OR   H   
475D   CA C5 47               JP   Z,expectM_2973S148   
4760   CD 57 0C               CALL   printStr   
4763   43 6F 64 65 3A 20 31 32 33 2E 20 2F 62 2F 76 42 20 31 23 00 .CSTR   "Code: ","123. /b/vB 1#"   
4777   CD 57 0C               CALL   printStr   
477A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4789   21 32 00               LD   hl,$32   
478C   E5                     PUSH   hl   
478D   E5                     PUSH   hl   
478E   CD 5C 0D               CALL   run   
4791   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4799   CD CD 0B               CALL   flushBuffer   
479C   CD 57 0C               CALL   printStr   
479F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47AC   E1                     POP   hl   
47AD   E5                     PUSH   hl   
47AE   E5                     PUSH   hl   
47AF   CD 5C 0D               CALL   run   
47B2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
47C1   CD CD 0B               CALL   flushBuffer   
47C4   76                     HALT      
47C5                EXPECTM_2973S148:      
47C5   E1                     POP   HL   
47C6                          ;*Macro unroll:  test ":a{%a} F=1F^", 1
47C6   31 00 4D               LD   SP,STACK   
47C9   CD 8B 0C               CALL   coldInit   
47CC   CD D2 4B               CALL   execStr   
47CF   3A 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   ":a{%a} F=1F^",0   
47DC   CD CD 0B               CALL   flushBuffer   
47DF   E1                     POP   HL   
47E0   E5                     PUSH   HL   
47E1   11 01 00               LD   DE,1   
47E4   B7                     OR   A   
47E5   ED 52                  SBC   HL,DE   
47E7   7D                     LD   A,L   
47E8   B4                     OR   H   
47E9   CA 50 48               JP   Z,expectM_2974S149   
47EC   CD 57 0C               CALL   printStr   
47EF   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ",":a{%a} F=1F^"   
4802   CD 57 0C               CALL   printStr   
4805   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4814   21 01 00               LD   hl,1   
4817   E5                     PUSH   hl   
4818   E5                     PUSH   hl   
4819   CD 5C 0D               CALL   run   
481C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4824   CD CD 0B               CALL   flushBuffer   
4827   CD 57 0C               CALL   printStr   
482A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4837   E1                     POP   hl   
4838   E5                     PUSH   hl   
4839   E5                     PUSH   hl   
483A   CD 5C 0D               CALL   run   
483D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
484C   CD CD 0B               CALL   flushBuffer   
484F   76                     HALT      
4850                EXPECTM_2974S149:      
4850   E1                     POP   HL   
4851                          ;*Macro unroll:  test "1 :b{:a{%a}}^F= 3F^",3
4851   31 00 4D               LD   SP,STACK   
4854   CD 8B 0C               CALL   coldInit   
4857   CD D2 4B               CALL   execStr   
485A   31 20 3A 62 7B 3A 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a}}^F= 3F^",0   
486E   CD CD 0B               CALL   flushBuffer   
4871   E1                     POP   HL   
4872   E5                     PUSH   HL   
4873   11 03 00               LD   DE,3   
4876   B7                     OR   A   
4877   ED 52                  SBC   HL,DE   
4879   7D                     LD   A,L   
487A   B4                     OR   H   
487B   CA E9 48               JP   Z,expectM_2975S150   
487E   CD 57 0C               CALL   printStr   
4881   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a}}^F= 3F^"   
489B   CD 57 0C               CALL   printStr   
489E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48AD   21 03 00               LD   hl,3   
48B0   E5                     PUSH   hl   
48B1   E5                     PUSH   hl   
48B2   CD 5C 0D               CALL   run   
48B5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
48BD   CD CD 0B               CALL   flushBuffer   
48C0   CD 57 0C               CALL   printStr   
48C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48D0   E1                     POP   hl   
48D1   E5                     PUSH   hl   
48D2   E5                     PUSH   hl   
48D3   CD 5C 0D               CALL   run   
48D6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
48E5   CD CD 0B               CALL   flushBuffer   
48E8   76                     HALT      
48E9                EXPECTM_2975S150:      
48E9   E1                     POP   HL   
48EA                          ;*Macro unroll:  test "1 :b{:a{%a%b-}}^F= 3F^",2
48EA   31 00 4D               LD   SP,STACK   
48ED   CD 8B 0C               CALL   coldInit   
48F0   CD D2 4B               CALL   execStr   
48F3   31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a{%a%b-}}^F= 3F^",0   
490A   CD CD 0B               CALL   flushBuffer   
490D   E1                     POP   HL   
490E   E5                     PUSH   HL   
490F   11 02 00               LD   DE,2   
4912   B7                     OR   A   
4913   ED 52                  SBC   HL,DE   
4915   7D                     LD   A,L   
4916   B4                     OR   H   
4917   CA 88 49               JP   Z,expectM_2976S151   
491A   CD 57 0C               CALL   printStr   
491D   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a{%a%b-}}^F= 3F^"   
493A   CD 57 0C               CALL   printStr   
493D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
494C   21 02 00               LD   hl,2   
494F   E5                     PUSH   hl   
4950   E5                     PUSH   hl   
4951   CD 5C 0D               CALL   run   
4954   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
495C   CD CD 0B               CALL   flushBuffer   
495F   CD 57 0C               CALL   printStr   
4962   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
496F   E1                     POP   hl   
4970   E5                     PUSH   hl   
4971   E5                     PUSH   hl   
4972   CD 5C 0D               CALL   run   
4975   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4984   CD CD 0B               CALL   flushBuffer   
4987   76                     HALT      
4988                EXPECTM_2976S151:      
4988   E1                     POP   HL   
4989                          ;*Macro unroll:  test "1 :b{:a:c{%a%b-%c= %c--%c}}^F= 3F^",1
4989   31 00 4D               LD   SP,STACK   
498C   CD 8B 0C               CALL   coldInit   
498F   CD D2 4B               CALL   execStr   
4992   31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 :b{:a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
49B5   CD CD 0B               CALL   flushBuffer   
49B8   E1                     POP   HL   
49B9   E5                     PUSH   HL   
49BA   11 01 00               LD   DE,1   
49BD   B7                     OR   A   
49BE   ED 52                  SBC   HL,DE   
49C0   7D                     LD   A,L   
49C1   B4                     OR   H   
49C2   CA 3F 4A               JP   Z,expectM_2977S152   
49C5   CD 57 0C               CALL   printStr   
49C8   43 6F 64 65 3A 20 31 20 3A 62 7B 3A 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b{:a:c{%a%b-%c= %c--%c}}^F= 3F^"   
49F1   CD 57 0C               CALL   printStr   
49F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A03   21 01 00               LD   hl,1   
4A06   E5                     PUSH   hl   
4A07   E5                     PUSH   hl   
4A08   CD 5C 0D               CALL   run   
4A0B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4A13   CD CD 0B               CALL   flushBuffer   
4A16   CD 57 0C               CALL   printStr   
4A19   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A26   E1                     POP   hl   
4A27   E5                     PUSH   hl   
4A28   E5                     PUSH   hl   
4A29   CD 5C 0D               CALL   run   
4A2C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4A3B   CD CD 0B               CALL   flushBuffer   
4A3E   76                     HALT      
4A3F                EXPECTM_2977S152:      
4A3F   E1                     POP   HL   
4A40                          ;*Macro unroll:  test "1 :b:c{:a{%a%b-%c= %c--%c}}^F= 3F^",1
4A40   31 00 4D               LD   SP,STACK   
4A43   CD 8B 0C               CALL   coldInit   
4A46   CD D2 4B               CALL   execStr   
4A49   31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a{%a%b-%c= %c--%c}}^F= 3F^",0   
4A6C   CD CD 0B               CALL   flushBuffer   
4A6F   E1                     POP   HL   
4A70   E5                     PUSH   HL   
4A71   11 01 00               LD   DE,1   
4A74   B7                     OR   A   
4A75   ED 52                  SBC   HL,DE   
4A77   7D                     LD   A,L   
4A78   B4                     OR   H   
4A79   CA F6 4A               JP   Z,expectM_2978S153   
4A7C   CD 57 0C               CALL   printStr   
4A7F   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a{%a%b-%c= %c--%c}}^F= 3F^"   
4AA8   CD 57 0C               CALL   printStr   
4AAB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4ABA   21 01 00               LD   hl,1   
4ABD   E5                     PUSH   hl   
4ABE   E5                     PUSH   hl   
4ABF   CD 5C 0D               CALL   run   
4AC2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4ACA   CD CD 0B               CALL   flushBuffer   
4ACD   CD 57 0C               CALL   printStr   
4AD0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4ADD   E1                     POP   hl   
4ADE   E5                     PUSH   hl   
4ADF   E5                     PUSH   hl   
4AE0   CD 5C 0D               CALL   run   
4AE3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4AF2   CD CD 0B               CALL   flushBuffer   
4AF5   76                     HALT      
4AF6                EXPECTM_2978S153:      
4AF6   E1                     POP   HL   
4AF7                          ;*Macro unroll:  test "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
4AF7   31 00 4D               LD   SP,STACK   
4AFA   CD 8B 0C               CALL   coldInit   
4AFD   CD D2 4B               CALL   execStr   
4B00   31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
4B30   CD CD 0B               CALL   flushBuffer   
4B33   E1                     POP   HL   
4B34   E5                     PUSH   HL   
4B35   11 02 00               LD   DE,2   
4B38   B7                     OR   A   
4B39   ED 52                  SBC   HL,DE   
4B3B   7D                     LD   A,L   
4B3C   B4                     OR   H   
4B3D   CA C7 4B               JP   Z,expectM_2979S154   
4B40   CD 57 0C               CALL   printStr   
4B43   43 6F 64 65 3A 20 31 20 3A 62 3A 63 7B 3A 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 :b:c{:a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
4B79   CD 57 0C               CALL   printStr   
4B7C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B8B   21 02 00               LD   hl,2   
4B8E   E5                     PUSH   hl   
4B8F   E5                     PUSH   hl   
4B90   CD 5C 0D               CALL   run   
4B93   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4B9B   CD CD 0B               CALL   flushBuffer   
4B9E   CD 57 0C               CALL   printStr   
4BA1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BAE   E1                     POP   hl   
4BAF   E5                     PUSH   hl   
4BB0   E5                     PUSH   hl   
4BB1   CD 5C 0D               CALL   run   
4BB4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4BC3   CD CD 0B               CALL   flushBuffer   
4BC6   76                     HALT      
4BC7                EXPECTM_2979S154:      
4BC7   E1                     POP   HL   
4BC8                             ; test "$1000 0 10 1 /rg :a{%a 1 + 10 *} /mp :a{%a.} /fe", $1000
4BC8                             ; 
4BC8   CD 57 0C               CALL   printStr   
4BCB   44 6F 6E 65 21 00      .CSTR   "Done!"   
4BD1   76                     HALT      
4BD2                             ; executes a null teminated string (null executes exit_)
4BD2                             ; the string should be immedaitely following the call
4BD2                EXECSTR:      ; create a root stack frame
4BD2   C1                     POP   bc   ; bc = code*
4BD3   0B                     DEC   bc   ; dec to prepare for next routine
4BD4   11 00 00               LD   de,0   
4BD7   D5                     PUSH   de   ; push fake IP
4BD8   D5                     PUSH   de   ; push null arg_list*
4BD9   D5                     PUSH   de   ; push null first_arg*
4BDA   D5                     PUSH   de   ; push fake BP
4BDB   DD E9                  JP   (ix)   
4BDD                STKSIZE:   EQU   $100   ; Stack size
4BDD                TIBSIZE:   EQU   $100   ; 256 bytes
4BDD                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
4BDD                          ALIGN   $100   
4C00                          DS   STKSIZE   
4D00                STACK:       
4D00                          ALIGN   $100   
4D00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
4E00                          ALIGN   $100   
4E00                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
4F00                          ALIGN   $100   
4F00                VARS:        
4F00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
4FD0                RESTARTS:      
4FD0                RST08:    DS   2   
4FD2                RST10:    DS   2   
4FD4                RST18:    DS   2   
4FD6                RST20:    DS   2   
4FD8                RST28:    DS   2   
4FDA                RST30:    DS   2   ; 
4FDC                BAUD:     DS   2   ; 
4FDE                INTVEC:   DS   2   ; 
4FE0                NMIVEC:   DS   2   ; 
4FE2                GETCVEC:   DS   2   ; 
4FE4                PUTCVEC:   DS   2   ; 
4FE6                SYSVARS:      
4FE6                             ; initialised sys variables (preserved)
4FE6                VDATAWIDTH:   DS   2   ; 
4FE8                VNUMBASE:   DS   2   ; 
4FEA                VTIBPTR:   DS   2   ; 
4FEC                VBUFPTR:   DS   2   ; 
4FEE                VNEXT:    DS   2   ; 
4FF0                VHEAPPTR:   DS   2   ; 
4FF2                VRECUR:   DS   2   ; 
4FF4                             ; uninitialised sys variables (preserved)
4FF4                VPOINTER:   DS   2   ; 
4FF6                VREMAIN:   DS   2   ; 
4FF8                VSAVEDIP:   DS   2   ; 
4FFA                VSAVEDSP:   DS   2   ; 
4FFC                VSAVEDNEXT:   DS   2   ; 
4FFE                VSAVEDBP:   DS   2   ; 
5000                             ; uninitialised sys variables (unpreserved)
5000                VTEMP1:   DS   2   ; 
5002                VTEMP2:   DS   2   ; 
5004                VLASTDEF:   DS   2   ; 
5006                TBPTR:    DS   2   ; reserved for tests
5008                TITLEBUF:   DS   20   
501C                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 42 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0BCB DEFINED AT LINE 1960 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 163 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1787 IN MAIN.asm
                    > USED AT LINE 2191 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1944 IN MAIN.asm
                    > USED AT LINE 2028 IN MAIN.asm
                    > USED AT LINE 2175 IN MAIN.asm
                    > USED AT LINE 2237 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 336 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
                    > USED AT LINE 437 IN MAIN.asm
                    > USED AT LINE 446 IN MAIN.asm
                    > USED AT LINE 456 IN MAIN.asm
                    > USED AT LINE 466 IN MAIN.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
                    > USED AT LINE 713 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
                    > USED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1770 IN MAIN.asm
                    > USED AT LINE 2194 IN MAIN.asm
                    > USED AT LINE 2282 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
                    > USED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 2047 IN MAIN.asm
                    > USED AT LINE 8
                    > USED AT LINE 20
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2200 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2202 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2204 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 46 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 147 IN MAIN.asm
                    > USED AT LINE 2128 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 162 IN MAIN.asm
                    > USED AT LINE 2103 IN MAIN.asm
                    > USED AT LINE 2122 IN MAIN.asm
PLUS_:              0204 DEFINED AT LINE 167 IN MAIN.asm
ADD:                0204 DEFINED AT LINE 168 IN MAIN.asm
ADD1:               020F DEFINED AT LINE 176 IN MAIN.asm
                    > USED AT LINE 172 IN MAIN.asm
ADD3:               0213 DEFINED AT LINE 181 IN MAIN.asm
                    > USED AT LINE 260 IN MAIN.asm
                    > USED AT LINE 1457 IN MAIN.asm
                    > USED AT LINE 1824 IN MAIN.asm
ADD4:               021D DEFINED AT LINE 189 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
AMPER_:             0220 DEFINED AT LINE 192 IN MAIN.asm
AND:                0220 DEFINED AT LINE 193 IN MAIN.asm
AND1:               0227 DEFINED AT LINE 201 IN MAIN.asm
                    > USED AT LINE 215 IN MAIN.asm
PIPE_:              022B DEFINED AT LINE 206 IN MAIN.asm
OR:                 022B DEFINED AT LINE 207 IN MAIN.asm
AT_:                0234 DEFINED AT LINE 220 IN MAIN.asm
ADDR:               0234 DEFINED AT LINE 221 IN MAIN.asm
BANG_:              023E DEFINED AT LINE 226 IN MAIN.asm
NOT:                0248 DEFINED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
MINUS_:             024E DEFINED AT LINE 239 IN MAIN.asm
SUB:                0259 DEFINED AT LINE 247 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
SUB1:               0263 DEFINED AT LINE 254 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
NUM_:               026B DEFINED AT LINE 262 IN MAIN.asm
                    > USED AT LINE 246 IN MAIN.asm
EQ_:                026E DEFINED AT LINE 265 IN MAIN.asm
EQ0_:               0277 DEFINED AT LINE 272 IN MAIN.asm
EQ1:                0278 DEFINED AT LINE 274 IN MAIN.asm
                    > USED AT LINE 237 IN MAIN.asm
GT_:                027B DEFINED AT LINE 278 IN MAIN.asm
LT_:                0286 DEFINED AT LINE 286 IN MAIN.asm
LT1:                028F DEFINED AT LINE 293 IN MAIN.asm
                    > USED AT LINE 285 IN MAIN.asm
EQUALS:             0296 DEFINED AT LINE 301 IN MAIN.asm
                    > USED AT LINE 276 IN MAIN.asm
NOTEQUALS:          029D DEFINED AT LINE 307 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
LESSTHANEQ:         02A4 DEFINED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 295 IN MAIN.asm
LESSTHAN:           02A9 DEFINED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 297 IN MAIN.asm
LESSTHAN1:          02AE DEFINED AT LINE 327 IN MAIN.asm
                    > USED AT LINE 318 IN MAIN.asm
TRUE1:              02B1 DEFINED AT LINE 330 IN MAIN.asm
                    > USED AT LINE 304 IN MAIN.asm
                    > USED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
NULL1:              02B7 DEFINED AT LINE 334 IN MAIN.asm
FALSE1:             02B7 DEFINED AT LINE 335 IN MAIN.asm
                    > USED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 311 IN MAIN.asm
                    > USED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 328 IN MAIN.asm
                    > USED AT LINE 693 IN MAIN.asm
NOP_:               02BB DEFINED AT LINE 338 IN MAIN.asm
RPAREN_:            02BD DEFINED AT LINE 340 IN MAIN.asm
DOLLAR_:            02C0 DEFINED AT LINE 342 IN MAIN.asm
LBRACK_:            02C3 DEFINED AT LINE 344 IN MAIN.asm
RBRACK_:            02C6 DEFINED AT LINE 346 IN MAIN.asm
PERCENT_:           02C9 DEFINED AT LINE 348 IN MAIN.asm
LPAREN_:            02CC DEFINED AT LINE 350 IN MAIN.asm
LBRACE_:            02CC DEFINED AT LINE 351 IN MAIN.asm
RBRACE_:            02CF DEFINED AT LINE 353 IN MAIN.asm
TICK_:              02D2 DEFINED AT LINE 355 IN MAIN.asm
SEMICOLON_:         02D5 DEFINED AT LINE 357 IN MAIN.asm
DOT_:               02D8 DEFINED AT LINE 359 IN MAIN.asm
COLON_:             02DB DEFINED AT LINE 361 IN MAIN.asm
UPCASE_:            02DE DEFINED AT LINE 363 IN MAIN.asm
LOWCASE_:           02E1 DEFINED AT LINE 365 IN MAIN.asm
QUESTION_:          02E4 DEFINED AT LINE 367 IN MAIN.asm
STAR_:              02E7 DEFINED AT LINE 369 IN MAIN.asm
HASH_:              02EA DEFINED AT LINE 371 IN MAIN.asm
CARET_:             02ED DEFINED AT LINE 373 IN MAIN.asm
COMMA_:             02F0 DEFINED AT LINE 375 IN MAIN.asm
DQUOTE_:            02F3 DEFINED AT LINE 377 IN MAIN.asm
BACKSLASH_:         02F6 DEFINED AT LINE 379 IN MAIN.asm
UNDERSCORE_:        02F9 DEFINED AT LINE 381 IN MAIN.asm
TILDE_:             02FC DEFINED AT LINE 383 IN MAIN.asm
SLASH_:             02FF DEFINED AT LINE 385 IN MAIN.asm
SLASH:              0301 DEFINED AT LINE 393 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
COMMAND:            0301 DEFINED AT LINE 394 IN MAIN.asm
COMMAND_A_:         0327 DEFINED AT LINE 429 IN MAIN.asm
COMMAND_B_:         0334 DEFINED AT LINE 440 IN MAIN.asm
COMMAND_F_:         033F DEFINED AT LINE 449 IN MAIN.asm
COMMAND_I_:         0342 DEFINED AT LINE 452 IN MAIN.asm
COMMAND_M_:         034B DEFINED AT LINE 459 IN MAIN.asm
COMMAND_P_:         034E DEFINED AT LINE 462 IN MAIN.asm
COMMAND_Q_:         0357 DEFINED AT LINE 469 IN MAIN.asm
COMMAND_R_:         0360 DEFINED AT LINE 476 IN MAIN.asm
COMMAND_V_:         0363 DEFINED AT LINE 479 IN MAIN.asm
COMMAND_NOP_:       0366 DEFINED AT LINE 482 IN MAIN.asm
DECIMAL_:           0368 DEFINED AT LINE 485 IN MAIN.asm
DECIMAL1:           036B DEFINED AT LINE 487 IN MAIN.asm
                    > USED AT LINE 500 IN MAIN.asm
DIV_:               0370 DEFINED AT LINE 491 IN MAIN.asm
ERROR1_:            0374 DEFINED AT LINE 495 IN MAIN.asm
                    > USED AT LINE 438 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 700 IN MAIN.asm
                    > USED AT LINE 714 IN MAIN.asm
                    > USED AT LINE 744 IN MAIN.asm
HEXADECIMAL_:       0377 DEFINED AT LINE 498 IN MAIN.asm
KEY_:               037D DEFINED AT LINE 502 IN MAIN.asm
                    > USED AT LINE 503 IN MAIN.asm
OUTPUT_:            0380 DEFINED AT LINE 505 IN MAIN.asm
TRUE_:              0383 DEFINED AT LINE 508 IN MAIN.asm
WORDS_:             0386 DEFINED AT LINE 511 IN MAIN.asm
XOR_:               0389 DEFINED AT LINE 514 IN MAIN.asm
XOR1:               038A DEFINED AT LINE 516 IN MAIN.asm
ABSOLUTE_:          0394 DEFINED AT LINE 529 IN MAIN.asm
ADDROF_:            03A1 DEFINED AT LINE 544 IN MAIN.asm
ADDROF1:            03B5 DEFINED AT LINE 556 IN MAIN.asm
                    > USED AT LINE 552 IN MAIN.asm
ADDROF2:            03C0 DEFINED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 548 IN MAIN.asm
                    > USED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
ARRAYSIZE_:         03C2 DEFINED AT LINE 570 IN MAIN.asm
BREAK_:             03CA DEFINED AT LINE 580 IN MAIN.asm
COLDSTART_:         03CD DEFINED AT LINE 584 IN MAIN.asm
BYTES_:             03D0 DEFINED AT LINE 587 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
BYTES1:             03D3 DEFINED AT LINE 589 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
INPUT_:             03D8 DEFINED AT LINE 596 IN MAIN.asm
PRINTCHARS_:        03E3 DEFINED AT LINE 609 IN MAIN.asm
QUIT_:              03EA DEFINED AT LINE 616 IN MAIN.asm
QUIT1:              03F1 DEFINED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 620 IN MAIN.asm
WORDS:              03F4 DEFINED AT LINE 626 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
COMMENT:            03FA DEFINED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 398 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
COMMAND_F:          0403 DEFINED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
FOREACH_:           041A DEFINED AT LINE 665 IN MAIN.asm
FLUSH_:             041D DEFINED AT LINE 670 IN MAIN.asm
FUNCSRC_:           0422 DEFINED AT LINE 674 IN MAIN.asm
F1_:                0425 DEFINED AT LINE 677 IN MAIN.asm
F2_:                0428 DEFINED AT LINE 680 IN MAIN.asm
F3_:                042B DEFINED AT LINE 683 IN MAIN.asm
F4_:                042E DEFINED AT LINE 686 IN MAIN.asm
FZ_:                0431 DEFINED AT LINE 689 IN MAIN.asm
FALSE_:             0434 DEFINED AT LINE 692 IN MAIN.asm
                    > USED AT LINE 663 IN MAIN.asm
COMMAND_M:          0437 DEFINED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 460 IN MAIN.asm
MAP_:               0440 DEFINED AT LINE 702 IN MAIN.asm
COMMAND_R:          0443 DEFINED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 477 IN MAIN.asm
RECUR_:             0450 DEFINED AT LINE 716 IN MAIN.asm
REMAIN_:            0456 DEFINED AT LINE 721 IN MAIN.asm
RANGESRC_:          045C DEFINED AT LINE 726 IN MAIN.asm
COMMAND_V:          045F DEFINED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 480 IN MAIN.asm
CONSTBUFSTART_:     0472 DEFINED AT LINE 746 IN MAIN.asm
CONSTHEAPSTART_:    0477 DEFINED AT LINE 750 IN MAIN.asm
CONSTTIBSTART_:     047C DEFINED AT LINE 754 IN MAIN.asm
VARBUFPTR_:         0481 DEFINED AT LINE 758 IN MAIN.asm
VARHEAPPTR_:        048A DEFINED AT LINE 763 IN MAIN.asm
VARTIBPTR_:         0493 DEFINED AT LINE 768 IN MAIN.asm
VARIABLE:           049C DEFINED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
                    > USED AT LINE 771 IN MAIN.asm
CONSTANT:           049F DEFINED AT LINE 775 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
DOT:                04A2 DEFINED AT LINE 780 IN MAIN.asm
                    > USED AT LINE 360 IN MAIN.asm
DOTNUMBER_:         04B1 DEFINED AT LINE 795 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 1599 IN MAIN.asm
DOTSTRING_:         04BC DEFINED AT LINE 803 IN MAIN.asm
DOTSTRING0:         04C3 DEFINED AT LINE 807 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
DOTSTRING1:         04C9 DEFINED AT LINE 812 IN MAIN.asm
                    > USED AT LINE 806 IN MAIN.asm
DOTCHAR_:           04D6 DEFINED AT LINE 822 IN MAIN.asm
DOTXCHARS_:         04DB DEFINED AT LINE 828 IN MAIN.asm
DOTXCHARS0:         04DC DEFINED AT LINE 830 IN MAIN.asm
                    > USED AT LINE 824 IN MAIN.asm
DOTXCHARS1:         04E5 DEFINED AT LINE 836 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
DOTXCHARS2:         04ED DEFINED AT LINE 843 IN MAIN.asm
                    > USED AT LINE 835 IN MAIN.asm
FOREACH:            04F7 DEFINED AT LINE 32
                    > USED AT LINE 666 IN MAIN.asm
FOREACHM_1327S858:  0505 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0544 DEFINED AT LINE 32
                    > USED AT LINE 675 IN MAIN.asm
FUNCSRCM_1342S874:  0550 DEFINED AT LINE 39
                    > USED AT LINE 35
DOTARRAY:           057F DEFINED AT LINE 32
DOTARRAYM_1352S885: 058D DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                05C7 DEFINED AT LINE 32
                    > USED AT LINE 703 IN MAIN.asm
MAPM_1359S893:      05D4 DEFINED AT LINE 39
                    > USED AT LINE 35
RANGESRC:           060B DEFINED AT LINE 32
                    > USED AT LINE 727 IN MAIN.asm
RANGESRCM_1373S908: 061A DEFINED AT LINE 39
                    > USED AT LINE 35
BACKSLASH:          068D DEFINED AT LINE 930 IN MAIN.asm
                    > USED AT LINE 380 IN MAIN.asm
UNDERSCORE:         068D DEFINED AT LINE 931 IN MAIN.asm
                    > USED AT LINE 382 IN MAIN.asm
TILDE:              068D DEFINED AT LINE 932 IN MAIN.asm
                    > USED AT LINE 384 IN MAIN.asm
COMMA:              068D DEFINED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
SEMICOLON:          068D DEFINED AT LINE 934 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
COLON:              068F DEFINED AT LINE 943 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
LAMBDA:             068F DEFINED AT LINE 944 IN MAIN.asm
LAMBDA1:            0698 DEFINED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 946 IN MAIN.asm
LAMBDA2:            06A0 DEFINED AT LINE 952 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
LAMBDA3:            06A7 DEFINED AT LINE 955 IN MAIN.asm
                    > USED AT LINE 953 IN MAIN.asm
PERCENT:            06AD DEFINED AT LINE 964 IN MAIN.asm
                    > USED AT LINE 349 IN MAIN.asm
ARG:                06AD DEFINED AT LINE 965 IN MAIN.asm
ARG0:               06C9 DEFINED AT LINE 984 IN MAIN.asm
                    > USED AT LINE 990 IN MAIN.asm
ARG0A:              06D2 DEFINED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 971 IN MAIN.asm
                    > USED AT LINE 976 IN MAIN.asm
ARG1:               06D7 DEFINED AT LINE 995 IN MAIN.asm
                    > USED AT LINE 988 IN MAIN.asm
ARG1A:              06DF DEFINED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 994 IN MAIN.asm
LBRACK:             06E2 DEFINED AT LINE 1006 IN MAIN.asm
                    > USED AT LINE 345 IN MAIN.asm
ARRAYSTART:         06E2 DEFINED AT LINE 1007 IN MAIN.asm
RBRACK:             06FE DEFINED AT LINE 1021 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
ARRAYEND:           06FE DEFINED AT LINE 1022 IN MAIN.asm
ARRAYEND1:          071A DEFINED AT LINE 1039 IN MAIN.asm
                    > USED AT LINE 1056 IN MAIN.asm
ARRAYEND2:          072A DEFINED AT LINE 1049 IN MAIN.asm
                    > USED AT LINE 1045 IN MAIN.asm
ARRAYEND3:          072F DEFINED AT LINE 1053 IN MAIN.asm
                    > USED AT LINE 1038 IN MAIN.asm
HASH:               074E DEFINED AT LINE 1076 IN MAIN.asm
                    > USED AT LINE 372 IN MAIN.asm
ARRAYINDEX:         074E DEFINED AT LINE 1077 IN MAIN.asm
ARRAYINDEX0:        0756 DEFINED AT LINE 1083 IN MAIN.asm
ARRAYINDEX1:        0757 DEFINED AT LINE 1085 IN MAIN.asm
                    > USED AT LINE 1082 IN MAIN.asm
ARRAYINDEX2:        0763 DEFINED AT LINE 1094 IN MAIN.asm
                    > USED AT LINE 1091 IN MAIN.asm
ARGLIST:            0766 DEFINED AT LINE 1103 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
ARGLIST1:           0770 DEFINED AT LINE 1110 IN MAIN.asm
                    > USED AT LINE 1131 IN MAIN.asm
ARGLIST1A:          0778 DEFINED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 1113 IN MAIN.asm
ARGLIST2:           0780 DEFINED AT LINE 1121 IN MAIN.asm
ARGLIST3:           0788 DEFINED AT LINE 1129 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 1127 IN MAIN.asm
ARGLIST4:           078B DEFINED AT LINE 1132 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
ARGLIST5:           0791 DEFINED AT LINE 1138 IN MAIN.asm
                    > USED AT LINE 1136 IN MAIN.asm
ASSIGN:             079C DEFINED AT LINE 1149 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
ASSIGN0:            079E DEFINED AT LINE 1152 IN MAIN.asm
                    > USED AT LINE 175 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
                    > USED AT LINE 253 IN MAIN.asm
ASSIGNX:            079F DEFINED AT LINE 1154 IN MAIN.asm
ASSIGN1:            07AB DEFINED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 1159 IN MAIN.asm
LBRACE:             07AD DEFINED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 352 IN MAIN.asm
BLOCKSTART:         07AD DEFINED AT LINE 1166 IN MAIN.asm
                    > USED AT LINE 951 IN MAIN.asm
BLOCKSTART1:        07B1 DEFINED AT LINE 1170 IN MAIN.asm
                    > USED AT LINE 1174 IN MAIN.asm
                    > USED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 1208 IN MAIN.asm
BLOCKSTART2:        07DD DEFINED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
                    > USED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
BLOCKSTART3:        07E0 DEFINED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 1191 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
BLOCKSTART4:        07E8 DEFINED AT LINE 1206 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
                    > USED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 1181 IN MAIN.asm
BLOCKSTART5:        07EB DEFINED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
BLOCKSTART6:        0813 DEFINED AT LINE 1228 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
RBRACE:             0816 DEFINED AT LINE 1232 IN MAIN.asm
                    > USED AT LINE 354 IN MAIN.asm
BLOCKEND:           0816 DEFINED AT LINE 1233 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 1308 IN MAIN.asm
BLOCKEND1:          0848 DEFINED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
BLOCKEND2:          0854 DEFINED AT LINE 1262 IN MAIN.asm
                    > USED AT LINE 1254 IN MAIN.asm
BLOCKEND3:          0866 DEFINED AT LINE 1276 IN MAIN.asm
                    > USED AT LINE 1268 IN MAIN.asm
BLOCKEND4:          087A DEFINED AT LINE 1286 IN MAIN.asm
                    > USED AT LINE 1284 IN MAIN.asm
BREAK:              0883 DEFINED AT LINE 1293 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
BREAK1:             088A DEFINED AT LINE 1299 IN MAIN.asm
                    > USED AT LINE 1297 IN MAIN.asm
TICK:               089D DEFINED AT LINE 1310 IN MAIN.asm
                    > USED AT LINE 356 IN MAIN.asm
CHAR:               089D DEFINED AT LINE 1311 IN MAIN.asm
CHAR1:              08A0 DEFINED AT LINE 1313 IN MAIN.asm
                    > USED AT LINE 1324 IN MAIN.asm
CHAR2:              08AC DEFINED AT LINE 1322 IN MAIN.asm
                    > USED AT LINE 1319 IN MAIN.asm
CHAR3:              08AF DEFINED AT LINE 1325 IN MAIN.asm
                    > USED AT LINE 1317 IN MAIN.asm
CREATEFUNC:         08B2 DEFINED AT LINE 1332 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
CREATEFUNC0:        08CD DEFINED AT LINE 1344 IN MAIN.asm
                    > USED AT LINE 1340 IN MAIN.asm
CREATEFUNC1:        08E5 DEFINED AT LINE 1363 IN MAIN.asm
                    > USED AT LINE 1359 IN MAIN.asm
CREATEFUNC2:        08F8 DEFINED AT LINE 1376 IN MAIN.asm
                    > USED AT LINE 1372 IN MAIN.asm
CREATEFUNC2A:       0917 DEFINED AT LINE 1402 IN MAIN.asm
                    > USED AT LINE 1389 IN MAIN.asm
CREATEFUNC3:        0926 DEFINED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 1424 IN MAIN.asm
CREATEFUNC4:        0931 DEFINED AT LINE 1425 IN MAIN.asm
CREATEFUNC5:        0932 DEFINED AT LINE 1427 IN MAIN.asm
                    > USED AT LINE 1343 IN MAIN.asm
DIV:                094E DEFINED AT LINE 1448 IN MAIN.asm
                    > USED AT LINE 493 IN MAIN.asm
BUFFERDEC:          095F DEFINED AT LINE 1461 IN MAIN.asm
                    > USED AT LINE 799 IN MAIN.asm
BUFFERDEC0:         0979 DEFINED AT LINE 1478 IN MAIN.asm
                    > USED AT LINE 1465 IN MAIN.asm
BUFFERDEC1:         0989 DEFINED AT LINE 1492 IN MAIN.asm
                    > USED AT LINE 1480 IN MAIN.asm
BUFFERDEC2:         09A9 DEFINED AT LINE 1506 IN MAIN.asm
                    > USED AT LINE 1495 IN MAIN.asm
                    > USED AT LINE 1497 IN MAIN.asm
                    > USED AT LINE 1499 IN MAIN.asm
                    > USED AT LINE 1501 IN MAIN.asm
                    > USED AT LINE 1504 IN MAIN.asm
BUFFERDEC3:         09AB DEFINED AT LINE 1508 IN MAIN.asm
                    > USED AT LINE 1511 IN MAIN.asm
BUFFERDEC4:         09BB DEFINED AT LINE 1520 IN MAIN.asm
                    > USED AT LINE 1515 IN MAIN.asm
BUFFERDEC5:         09BC DEFINED AT LINE 1522 IN MAIN.asm
                    > USED AT LINE 1519 IN MAIN.asm
BUFFERHEX:          09C5 DEFINED AT LINE 1533 IN MAIN.asm
                    > USED AT LINE 798 IN MAIN.asm
BUFFERHEX1:         09E6 DEFINED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 1541 IN MAIN.asm
                    > USED AT LINE 1543 IN MAIN.asm
BUFFERHEX2:         09EF DEFINED AT LINE 1559 IN MAIN.asm
                    > USED AT LINE 1557 IN MAIN.asm
DIVIDE:             09FD DEFINED AT LINE 1573 IN MAIN.asm
                    > USED AT LINE 1453 IN MAIN.asm
DIVIDE1:            0A02 DEFINED AT LINE 1576 IN MAIN.asm
                    > USED AT LINE 1588 IN MAIN.asm
DIVIDE2:            0A0F DEFINED AT LINE 1584 IN MAIN.asm
                    > USED AT LINE 1581 IN MAIN.asm
DIVIDE3:            0A10 DEFINED AT LINE 1586 IN MAIN.asm
                    > USED AT LINE 1583 IN MAIN.asm
FZ:                 0A16 DEFINED AT LINE 1593 IN MAIN.asm
                    > USED AT LINE 690 IN MAIN.asm
CARET:              0A23 DEFINED AT LINE 1604 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
GO:                 0A23 DEFINED AT LINE 1605 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0A24 DEFINED AT LINE 1607 IN MAIN.asm
                    > USED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 1782 IN MAIN.asm
                    > USED AT LINE 1784 IN MAIN.asm
GO2:                0A2A DEFINED AT LINE 1612 IN MAIN.asm
                    > USED AT LINE 1610 IN MAIN.asm
GOBLOCK:            0A35 DEFINED AT LINE 1620 IN MAIN.asm
                    > USED AT LINE 1615 IN MAIN.asm
GOBLOCK2:           0A5A DEFINED AT LINE 1637 IN MAIN.asm
                    > USED AT LINE 1718 IN MAIN.asm
GOBLOCK3:           0A64 DEFINED AT LINE 1643 IN MAIN.asm
GOFUNC:             0A68 DEFINED AT LINE 1647 IN MAIN.asm
                    > USED AT LINE 1617 IN MAIN.asm
GOFUNC1:            0A81 DEFINED AT LINE 1666 IN MAIN.asm
                    > USED AT LINE 1676 IN MAIN.asm
GOFUNC2:            0A87 DEFINED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 1665 IN MAIN.asm
GOFUNC3:            0A92 DEFINED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 1655 IN MAIN.asm
GOFUNC4:            0AAA DEFINED AT LINE 1696 IN MAIN.asm
                    > USED AT LINE 1693 IN MAIN.asm
GOFUNC5:            0AAD DEFINED AT LINE 1699 IN MAIN.asm
                    > USED AT LINE 1705 IN MAIN.asm
GOFUNC6:            0AB0 DEFINED AT LINE 1703 IN MAIN.asm
                    > USED AT LINE 1698 IN MAIN.asm
GOFUNC7:            0AB3 DEFINED AT LINE 1706 IN MAIN.asm
GOFUNC8:            0AB7 DEFINED AT LINE 1711 IN MAIN.asm
                    > USED AT LINE 1631 IN MAIN.asm
                    > USED AT LINE 1695 IN MAIN.asm
DOLLAR:             0AC2 DEFINED AT LINE 1720 IN MAIN.asm
                    > USED AT LINE 343 IN MAIN.asm
HEXNUM:             0AC2 DEFINED AT LINE 1721 IN MAIN.asm
HEXNUM1:            0AC5 DEFINED AT LINE 1723 IN MAIN.asm
                    > USED AT LINE 1740 IN MAIN.asm
HEXNUM2:            0ACD DEFINED AT LINE 1729 IN MAIN.asm
                    > USED AT LINE 1727 IN MAIN.asm
UPCASE:             0ADF DEFINED AT LINE 1742 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
LOWCASE:            0AE4 DEFINED AT LINE 1746 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
IDENT1:             0AE9 DEFINED AT LINE 1750 IN MAIN.asm
                    > USED AT LINE 1745 IN MAIN.asm
QUESTION:           0AF6 DEFINED AT LINE 1763 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
IF:                 0AF6 DEFINED AT LINE 1764 IN MAIN.asm
IFTE:               0B02 DEFINED AT LINE 1774 IN MAIN.asm
                    > USED AT LINE 1768 IN MAIN.asm
IFTE1:              0B03 DEFINED AT LINE 1776 IN MAIN.asm
                    > USED AT LINE 1771 IN MAIN.asm
KEY:                0B0F DEFINED AT LINE 1786 IN MAIN.asm
OUTPUT:             0B18 DEFINED AT LINE 1795 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
STAR:               0B21 DEFINED AT LINE 1804 IN MAIN.asm
                    > USED AT LINE 370 IN MAIN.asm
MUL:                0B21 DEFINED AT LINE 1805 IN MAIN.asm
MUL2:               0B23 DEFINED AT LINE 1808 IN MAIN.asm
MUL3:               0B2B DEFINED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 1822 IN MAIN.asm
NUM:                0B3D DEFINED AT LINE 1826 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
NUM0:               0B46 DEFINED AT LINE 1832 IN MAIN.asm
                    > USED AT LINE 1830 IN MAIN.asm
NUM1:               0B47 DEFINED AT LINE 1834 IN MAIN.asm
                    > USED AT LINE 1851 IN MAIN.asm
NUM2:               0B5F DEFINED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 1731 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
                    > USED AT LINE 1837 IN MAIN.asm
                    > USED AT LINE 1839 IN MAIN.asm
NUM3:               0B6A DEFINED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 1855 IN MAIN.asm
RPAREN:             0B6D DEFINED AT LINE 1864 IN MAIN.asm
                    > USED AT LINE 341 IN MAIN.asm
SHIFTLEFT:          0B75 DEFINED AT LINE 1871 IN MAIN.asm
                    > USED AT LINE 290 IN MAIN.asm
SHIFTLEFT1:         0B7D DEFINED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
SHIFTLEFT2:         0B7E DEFINED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 1877 IN MAIN.asm
SHIFTRIGHT:         0B85 DEFINED AT LINE 1888 IN MAIN.asm
                    > USED AT LINE 282 IN MAIN.asm
SHIFTRIGHT1:        0B8D DEFINED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
SHIFTRIGHT2:        0B91 DEFINED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 1894 IN MAIN.asm
DQUOTE:             0B98 DEFINED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 378 IN MAIN.asm
STRING:             0B98 DEFINED AT LINE 1908 IN MAIN.asm
STRING1:            0BA1 DEFINED AT LINE 1915 IN MAIN.asm
                    > USED AT LINE 1924 IN MAIN.asm
STRING2:            0BA4 DEFINED AT LINE 1919 IN MAIN.asm
                    > USED AT LINE 1914 IN MAIN.asm
STRING3:            0BAD DEFINED AT LINE 1925 IN MAIN.asm
                    > USED AT LINE 1922 IN MAIN.asm
PRINTCHARS1:        0BC0 DEFINED AT LINE 1942 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
PRINTCHARS2:        0BC6 DEFINED AT LINE 1947 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
FILTER:             0BCB DEFINED AT LINE 1959 IN MAIN.asm
FLUSHBUFFER:        0BCD DEFINED AT LINE 1968 IN MAIN.asm
                    > USED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 810 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 1470 IN MAIN.asm
                    > USED AT LINE 1527 IN MAIN.asm
                    > USED AT LINE 1539 IN MAIN.asm
                    > USED AT LINE 1547 IN MAIN.asm
                    > USED AT LINE 1567 IN MAIN.asm
                    > USED AT LINE 2158 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
COMMANDTABLE:       0BE4 DEFINED AT LINE 1983 IN MAIN.asm
                    > USED AT LINE 400 IN MAIN.asm
COMMANDTABLE1:      0BEE DEFINED AT LINE 1990 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
COMMANDTABLE2:      0BF3 DEFINED AT LINE 1996 IN MAIN.asm
                    > USED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 1989 IN MAIN.asm
JUMPTABLE:          0BF8 DEFINED AT LINE 2005 IN MAIN.asm
                    > USED AT LINE 266 IN MAIN.asm
                    > USED AT LINE 430 IN MAIN.asm
                    > USED AT LINE 441 IN MAIN.asm
                    > USED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 463 IN MAIN.asm
                    > USED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 696 IN MAIN.asm
                    > USED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 730 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
JUMPTABLE0:         0BFA DEFINED AT LINE 2008 IN MAIN.asm
                    > USED AT LINE 2017 IN MAIN.asm
JUMPTABLE1:         0C06 DEFINED AT LINE 2018 IN MAIN.asm
                    > USED AT LINE 2014 IN MAIN.asm
JUMPTABLE2:         0C09 DEFINED AT LINE 2022 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
PRTSTR0:            0C0C DEFINED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 2033 IN MAIN.asm
PRTSTR:             0C10 DEFINED AT LINE 2030 IN MAIN.asm
                    > USED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2154 IN MAIN.asm
NESTING:            0C15 DEFINED AT LINE 2046 IN MAIN.asm
                    > USED AT LINE 2180 IN MAIN.asm
                    > USED AT LINE 2238 IN MAIN.asm
NESTING0:           0C1F DEFINED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2050 IN MAIN.asm
NESTING1A:          0C26 DEFINED AT LINE 2057 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
NESTING1:           0C29 DEFINED AT LINE 2060 IN MAIN.asm
                    > USED AT LINE 2051 IN MAIN.asm
NESTING2:           0C38 DEFINED AT LINE 2069 IN MAIN.asm
                    > USED AT LINE 2064 IN MAIN.asm
                    > USED AT LINE 2066 IN MAIN.asm
NESTING3:           0C3A DEFINED AT LINE 2072 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
NESTING4:           0C45 DEFINED AT LINE 2079 IN MAIN.asm
                    > USED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 2076 IN MAIN.asm
PROMPT:             0C47 DEFINED AT LINE 2083 IN MAIN.asm
                    > USED AT LINE 2159 IN MAIN.asm
CRLF:               0C50 DEFINED AT LINE 2088 IN MAIN.asm
                    > USED AT LINE 2251 IN MAIN.asm
PRINTSTR:           0C57 DEFINED AT LINE 2095 IN MAIN.asm
                    > USED AT LINE 2084 IN MAIN.asm
                    > USED AT LINE 2089 IN MAIN.asm
                    > USED AT LINE 2308 IN MAIN.asm
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 159
INIT:               0C5E DEFINED AT LINE 2102 IN MAIN.asm
                    > USED AT LINE 2151 IN MAIN.asm
INIT1:              0C66 DEFINED AT LINE 2106 IN MAIN.asm
                    > USED AT LINE 2112 IN MAIN.asm
WARMINIT:           0C6E DEFINED AT LINE 2114 IN MAIN.asm
COLDBOOT0:          0C81 DEFINED AT LINE 2121 IN MAIN.asm
                    > USED AT LINE 2109 IN MAIN.asm
                    > USED AT LINE 2147 IN MAIN.asm
COLDINIT:           0C8B DEFINED AT LINE 2127 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0C9C DEFINED AT LINE 2136 IN MAIN.asm
                    > USED AT LINE 2139 IN MAIN.asm
COLDSTART:          0CA9 DEFINED AT LINE 2145 IN MAIN.asm
                    > USED AT LINE 585 IN MAIN.asm
START:              0CB2 DEFINED AT LINE 2149 IN MAIN.asm
START1:             0CB8 DEFINED AT LINE 2152 IN MAIN.asm
                    > USED AT LINE 2119 IN MAIN.asm
                    > USED AT LINE 2148 IN MAIN.asm
INTERPRET:          0CBE DEFINED AT LINE 2156 IN MAIN.asm
                    > USED AT LINE 2284 IN MAIN.asm
                    > USED AT LINE 2301 IN MAIN.asm
                    > USED AT LINE 2316 IN MAIN.asm
                    > USED AT LINE 2319 IN MAIN.asm
                    > USED AT LINE 2324 IN MAIN.asm
INTERPRET2:         0CCD DEFINED AT LINE 2165 IN MAIN.asm
                    > USED AT LINE 2229 IN MAIN.asm
                    > USED AT LINE 2306 IN MAIN.asm
                    > USED AT LINE 2310 IN MAIN.asm
INTERPRET3:         0CD5 DEFINED AT LINE 2173 IN MAIN.asm
                    > USED AT LINE 2186 IN MAIN.asm
INTERPRET4:         0CE0 DEFINED AT LINE 2182 IN MAIN.asm
                    > USED AT LINE 2171 IN MAIN.asm
INTERPRET5:         0CE5 DEFINED AT LINE 2189 IN MAIN.asm
                    > USED AT LINE 2239 IN MAIN.asm
                    > USED AT LINE 2254 IN MAIN.asm
INTERPRET5A:        0D03 DEFINED AT LINE 2226 IN MAIN.asm
INTERPRET6:         0D05 DEFINED AT LINE 2231 IN MAIN.asm
                    > USED AT LINE 2193 IN MAIN.asm
INTERPRET7:         0D13 DEFINED AT LINE 2241 IN MAIN.asm
                    > USED AT LINE 2198 IN MAIN.asm
INTERPRET8:         0D26 DEFINED AT LINE 2256 IN MAIN.asm
                    > USED AT LINE 2196 IN MAIN.asm
NEXT:               0D41 DEFINED AT LINE 2269 IN MAIN.asm
                    > USED AT LINE 152 IN MAIN.asm
                    > USED AT LINE 2273 IN MAIN.asm
NEXT1:              0D51 DEFINED AT LINE 2281 IN MAIN.asm
                    > USED AT LINE 2274 IN MAIN.asm
EXIT:               0D58 DEFINED AT LINE 2286 IN MAIN.asm
                    > USED AT LINE 2283 IN MAIN.asm
RUN:                0D5C DEFINED AT LINE 2290 IN MAIN.asm
                    > USED AT LINE 2299 IN MAIN.asm
                    > USED AT LINE 2314 IN MAIN.asm
                    > USED AT LINE 2322 IN MAIN.asm
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
ERROR1:             0D60 DEFINED AT LINE 2295 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
ERROR:              0D64 DEFINED AT LINE 2298 IN MAIN.asm
BACKSPACE_:         0D77 DEFINED AT LINE 2303 IN MAIN.asm
                    > USED AT LINE 2203 IN MAIN.asm
EDIT_:              0D87 DEFINED AT LINE 2313 IN MAIN.asm
                    > USED AT LINE 2201 IN MAIN.asm
REEDIT_:            0D9F DEFINED AT LINE 2318 IN MAIN.asm
                    > USED AT LINE 2205 IN MAIN.asm
PRINTSTACK_:        0DA2 DEFINED AT LINE 2321 IN MAIN.asm
F1:                 0DAC DEFINED AT LINE 32
                    > USED AT LINE 678 IN MAIN.asm
F1M_2845S12:        0DB7 DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 0DB8 DEFINED AT LINE 32
                    > USED AT LINE 681 IN MAIN.asm
F2M_2847S15:        0DC3 DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 0DC4 DEFINED AT LINE 32
                    > USED AT LINE 684 IN MAIN.asm
F3M_2849S18:        0DCF DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 0DD0 DEFINED AT LINE 32
                    > USED AT LINE 687 IN MAIN.asm
F4M_2851S21:        0DDB DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         0E00 DEFINED AT LINE 25
                    > USED AT LINE 8
EXPECTM_2866S41:    0E76 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2867S42:    0EED DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2868S43:    0F62 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2869S44:    0FD7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2870S45:    104C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2871S46:    10C1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2872S47:    1138 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2873S48:    11B1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2874S49:    1228 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2875S50:    129F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2876S51:    1318 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2877S52:    1393 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2878S53:    140C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2879S54:    1485 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2880S55:    1504 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2881S56:    1583 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2882S57:    1600 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2883S58:    1681 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2884S59:    1706 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2885S60:    1789 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2886S61:    1806 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2887S62:    188B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2888S63:    190C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2889S64:    1989 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2890S65:    1A06 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2891S66:    1A8B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2892S67:    1B08 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2893S68:    1B85 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2894S69:    1C04 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2895S70:    1C93 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2896S71:    1D10 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2897S72:    1D95 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2898S73:    1E12 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2899S74:    1E9D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2900S75:    1F28 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2901S76:    1FB3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2902S77:    203E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2903S78:    20C3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2904S79:    2140 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2905S80:    21BF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2906S81:    223E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2907S82:    22BB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2908S83:    2338 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2909S84:    23B5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2910S85:    2432 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2911S86:    24AF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2912S87:    252C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2913S88:    25A9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2914S89:    2626 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2915S90:    26A5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2916S91:    2724 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2917S92:    27A3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2918S93:    2824 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2919S94:    28A5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2920S95:    2920 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2921S96:    299B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2922S97:    2A1C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2923S98:    2AA3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2924S99:    2B2A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2925S100:   2BB5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2926S101:   2C4A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2927S102:   2CDF DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2928S103:   2D5C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2929S104:   2DDB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2930S105:   2E60 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2931S106:   2EE9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2932S107:   2F6E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2933S108:   2FFD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2934S109:   308E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2935S110:   3125 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2936S111:   31C0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2937S112:   324D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2938S113:   32E0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2939S114:   3375 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2940S115:   340C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2941S116:   34A1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2942S117:   3544 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2943S118:   35D5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2944S119:   3674 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2945S120:   3715 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2946S121:   37B8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2947S122:   3865 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2948S123:   3912 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2949S124:   399F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2950S125:   3A34 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2951S126:   3AC1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2952S127:   3B5A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2953S128:   3BF3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2954S129:   3C9A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2955S130:   3D49 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2956S131:   3DF8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2957S132:   3E99 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2958S133:   3F40 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2959S134:   3FFD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2960S135:   40C4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2961S136:   415D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2962S137:   41F6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2963S138:   427F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2964S139:   4308 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2965S140:   4391 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2966S141:   441A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2967S142:   449B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2968S143:   451C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2969S144:   459D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2970S145:   461E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2971S146:   46A9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2972S147:   4738 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2973S148:   47C5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2974S149:   4850 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2975S150:   48E9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2976S151:   4988 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2977S152:   4A3F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2978S153:   4AF6 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2979S154:   4BC7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXECSTR:            4BD2 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              4D00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1594 IN MAIN.asm
                    > USED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 2142 IN MAIN.asm
                    > USED AT LINE 2146 IN MAIN.asm
                    > USED AT LINE 2150 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                4D00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 150 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
                    > USED AT LINE 2162 IN MAIN.asm
                    > USED AT LINE 2170 IN MAIN.asm
                    > USED AT LINE 2233 IN MAIN.asm
                    > USED AT LINE 2243 IN MAIN.asm
                    > USED AT LINE 2258 IN MAIN.asm
                    > USED AT LINE 2261 IN MAIN.asm
BUF:                4E00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 151 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 1973 IN MAIN.asm
VARS:               4F00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 2133 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
RESTARTS:           4FD0 DEFINED AT LINE 18 IN ram.asm
RST08:              4FD0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              4FD2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              4FD4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              4FD6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              4FD8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              4FDA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               4FDC DEFINED AT LINE 26 IN ram.asm
INTVEC:             4FDE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             4FE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            4FE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            4FE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            4FE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2129 IN MAIN.asm
VDATAWIDTH:         4FE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 590 IN MAIN.asm
                    > USED AT LINE 1043 IN MAIN.asm
                    > USED AT LINE 1080 IN MAIN.asm
                    > USED AT LINE 1157 IN MAIN.asm
VNUMBASE:           4FE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 488 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
VTIBPTR:            4FEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 770 IN MAIN.asm
                    > USED AT LINE 2163 IN MAIN.asm
                    > USED AT LINE 2260 IN MAIN.asm
VBUFPTR:            4FEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 759 IN MAIN.asm
                    > USED AT LINE 760 IN MAIN.asm
                    > USED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 816 IN MAIN.asm
                    > USED AT LINE 817 IN MAIN.asm
                    > USED AT LINE 834 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 1462 IN MAIN.asm
                    > USED AT LINE 1471 IN MAIN.asm
                    > USED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 1535 IN MAIN.asm
                    > USED AT LINE 1548 IN MAIN.asm
                    > USED AT LINE 1972 IN MAIN.asm
                    > USED AT LINE 1974 IN MAIN.asm
VNEXT:              4FEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2141 IN MAIN.asm
VHEAPPTR:           4FF0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
                    > USED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1066 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1105 IN MAIN.asm
                    > USED AT LINE 1140 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 1342 IN MAIN.asm
                    > USED AT LINE 1347 IN MAIN.asm
                    > USED AT LINE 1378 IN MAIN.asm
                    > USED AT LINE 1444 IN MAIN.asm
                    > USED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 1929 IN MAIN.asm
VRECUR:             4FF2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 718 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 1288 IN MAIN.asm
VPOINTER:           4FF4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 222 IN MAIN.asm
                    > USED AT LINE 223 IN MAIN.asm
                    > USED AT LINE 774 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
                    > USED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1155 IN MAIN.asm
                    > USED AT LINE 1754 IN MAIN.asm
VREMAIN:            4FF6 DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 722 IN MAIN.asm
                    > USED AT LINE 1455 IN MAIN.asm
VSAVEDIP:           4FF8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 2115 IN MAIN.asm
                    > USED AT LINE 2263 IN MAIN.asm
VSAVEDSP:           4FFA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 2116 IN MAIN.asm
                    > USED AT LINE 2264 IN MAIN.asm
VSAVEDNEXT:         4FFC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2117 IN MAIN.asm
                    > USED AT LINE 2265 IN MAIN.asm
VSAVEDBP:           4FFE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2118 IN MAIN.asm
                    > USED AT LINE 2266 IN MAIN.asm
VTEMP1:             5000 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 1025 IN MAIN.asm
                    > USED AT LINE 1071 IN MAIN.asm
                    > USED AT LINE 1218 IN MAIN.asm
                    > USED AT LINE 1227 IN MAIN.asm
                    > USED AT LINE 1236 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 1333 IN MAIN.asm
                    > USED AT LINE 1445 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 1677 IN MAIN.asm
                    > USED AT LINE 1684 IN MAIN.asm
                    > USED AT LINE 1690 IN MAIN.asm
VTEMP2:             5002 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 1239 IN MAIN.asm
                    > USED AT LINE 1279 IN MAIN.asm
                    > USED AT LINE 1335 IN MAIN.asm
                    > USED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 1657 IN MAIN.asm
                    > USED AT LINE 1678 IN MAIN.asm
VLASTDEF:           5004 DEFINED AT LINE 58 IN ram.asm
TBPTR:              5006 DEFINED AT LINE 59 IN ram.asm
TITLEBUF:           5008 DEFINED AT LINE 61 IN ram.asm
                    > USED AT LINE 2104 IN MAIN.asm
                    > USED AT LINE 2123 IN MAIN.asm
                    > USED AT LINE 2153 IN MAIN.asm
HEAP:               501C DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 1211 IN MAIN.asm
