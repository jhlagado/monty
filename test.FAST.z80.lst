0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 call flushBuffer
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d"
0000                 call flushBuffer
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /h./d `\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; .macro kall,label1
0000                             ;     db msb(label1 / 2) + $80
0000                             ;     db lsb(label1 / 2)
0000                             ; .endm
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 4D               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 4D               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 4D               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 4D               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 4D               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 4D               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 4D               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 4D               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 4D               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 4D               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 4B               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 4D               LD   (RST08),HL   
0094   22 D2 4D               LD   (RST10),HL   
0097   22 D4 4D               LD   (RST18),HL   
009A   22 D6 4D               LD   (RST20),HL   
009D   22 D8 4D               LD   (RST28),HL   
00A0   22 DA 4D               LD   (RST30),HL   
00A3   22 DE 4D               LD   (INTVEC),HL   
00A6   22 E0 4D               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 4D               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 4D               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 0E               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQUOTE:   EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                             ; z80_RST8    equ     $CF
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 4B                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 4C                  DW   BUF   ; vBUFPtr pointer into BUF
0188   B1 0C                  DW   next   ; nNext
018A   1E 4E                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C                          ALIGN   $100   
0200                OPCODES:      ; still available ~ ` _
0200   7F                     DB   lsb(nop_)   ; SP
0201   36                     DB   lsb(bang_)   ; !
0202   4A                     DB   lsb(dblquote_)   ; "
0203   3E                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1E                     DB   lsb(tick_)   ; '
0208   18                     DB   lsb(lparen_)   ; (
0209   81                     DB   lsb(rparen_)   ; )
020A   33                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   47                     DB   lsb(comma_)   ; ,
020D   4D                     DB   lsb(minus_)   ; -
020E   24                     DB   lsb(dot_)   ; .
020F   7C                     DB   lsb(slash_)   ; /	
0210   3B                     DB   lsb(num_)   ; 0
0211   3B                     DB   lsb(num_)   ; 1
0212   3B                     DB   lsb(num_)   ; 2
0213   3B                     DB   lsb(num_)   ; 3
0214   3B                     DB   lsb(num_)   ; 4
0215   3B                     DB   lsb(num_)   ; 5
0216   3B                     DB   lsb(num_)   ; 6
0217   3B                     DB   lsb(num_)   ; 7
0218   3B                     DB   lsb(num_)   ; 8
0219   3B                     DB   lsb(num_)   ; 9
021A   27                     DB   lsb(colon_)   ; :
021B   21                     DB   lsb(semicolon_)   ; ;
021C   6A                     DB   lsb(lt_)   ; <
021D   50                     DB   lsb(eq_)   ; =
021E   5F                     DB   lsb(gt_)   ; >
021F   30                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   2A                     DB   lsb(upcase_)   ; A
0222   2A                     DB   lsb(upcase_)   ; B
0223   2A                     DB   lsb(upcase_)   ; C
0224   2A                     DB   lsb(upcase_)   ; D
0225   2A                     DB   lsb(upcase_)   ; E
0226   2A                     DB   lsb(upcase_)   ; F
0227   2A                     DB   lsb(upcase_)   ; G
0228   2A                     DB   lsb(upcase_)   ; h
0229   2A                     DB   lsb(upcase_)   ; I
022A   2A                     DB   lsb(upcase_)   ; J
022B   2A                     DB   lsb(upcase_)   ; K
022C   2A                     DB   lsb(upcase_)   ; L
022D   2A                     DB   lsb(upcase_)   ; M
022E   2A                     DB   lsb(upcase_)   ; N
022F   2A                     DB   lsb(upcase_)   ; O
0230   2A                     DB   lsb(upcase_)   ; p
0231   2A                     DB   lsb(upcase_)   ; Q
0232   2A                     DB   lsb(upcase_)   ; R
0233   2A                     DB   lsb(upcase_)   ; S
0234   2A                     DB   lsb(upcase_)   ; T
0235   2A                     DB   lsb(upcase_)   ; U
0236   2A                     DB   lsb(upcase_)   ; V
0237   2A                     DB   lsb(upcase_)   ; W
0238   2A                     DB   lsb(upcase_)   ; X
0239   2A                     DB   lsb(upcase_)   ; Y
023A   2A                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   15                     DB   lsb(backslash_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   44                     DB   lsb(caret_)   ; ^
023F   7F                     DB   lsb(nop_)   ; _
0240   7F                     DB   lsb(nop_)   ; `     used for testing string   	
0241   2D                     DB   lsb(lowcase_)   ; a
0242   2D                     DB   lsb(lowcase_)   ; b
0243   2D                     DB   lsb(lowcase_)   ; c
0244   2D                     DB   lsb(lowcase_)   ; d
0245   2D                     DB   lsb(lowcase_)   ; e
0246   2D                     DB   lsb(lowcase_)   ; f
0247   2D                     DB   lsb(lowcase_)   ; g
0248   2D                     DB   lsb(lowcase_)   ; h
0249   2D                     DB   lsb(lowcase_)   ; i
024A   2D                     DB   lsb(lowcase_)   ; j
024B   2D                     DB   lsb(lowcase_)   ; k
024C   2D                     DB   lsb(lowcase_)   ; l
024D   2D                     DB   lsb(lowcase_)   ; m
024E   2D                     DB   lsb(lowcase_)   ; n
024F   2D                     DB   lsb(lowcase_)   ; o
0250   2D                     DB   lsb(lowcase_)   ; p
0251   2D                     DB   lsb(lowcase_)   ; q
0252   2D                     DB   lsb(lowcase_)   ; r
0253   2D                     DB   lsb(lowcase_)   ; s
0254   2D                     DB   lsb(lowcase_)   ; t
0255   2D                     DB   lsb(lowcase_)   ; u
0256   2D                     DB   lsb(lowcase_)   ; v
0257   2D                     DB   lsb(lowcase_)   ; w
0258   2D                     DB   lsb(lowcase_)   ; x
0259   2D                     DB   lsb(lowcase_)   ; y
025A   2D                     DB   lsb(lowcase_)   ; z
025B   18                     DB   lsb(lbrace_)   ; {
025C   41                     DB   lsb(pipe_)   ; |
025D   1B                     DB   lsb(rbrace_)   ; }
025E   7F                     DB   lsb(nop_)   ; ~
025F   7F                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 84 03               JP   plus   
0303                AT_:         
0303   C3 96 03               JP   at   
0306                AMPER_:      
0306   C3 A0 03               JP   amper   
0309                DOLLAR_:      
0309   C3 E4 06               JP   dollar   
030C                LBRACK_:      
030C   C3 F9 03               JP   lbrack   
030F                RBRACK_:      
030F   C3 15 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 C4 03               JP   percent   
0315                BACKSLASH_:      
0315   C3 9E 05               JP   backslash   
0318                LPAREN_:      
0318                LBRACE_:      
0318   C3 C4 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 2D 05               JP   rbrace   
031E                TICK_:       
031E   C3 89 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 85 07               JP   semicolon   
0324                DOT_:        
0324   C3 F9 05               JP   dot   
0327                COLON_:      
0327   C3 8E 04               JP   colon   
032A                UPCASE_:      
032A   C3 01 07               JP   upcase   
032D                LOWCASE_:      
032D   C3 06 07               JP   lowcase   
0330                QUESTION_:      
0330   C3 18 07               JP   question   
0333                STAR_:       
0333   C3 31 07               JP   star   
0336                BANG_:       ; logical invert, any non zero value
0336   21 00 00               LD   hl,0   ; is considered true
0339   18 20                  JR   eq1   
033B                NUM_:        
033B   C3 4D 07               JP   num   
033E                HASH_:       
033E   C3 65 04               JP   hash   
0341                PIPE_:       
0341   C3 AB 03               JP   pipe   
0344                CARET_:      
0344   C3 45 06               JP   caret   
0347                COMMA_:      
0347   C3 A0 05               JP   comma   
034A                DBLQUOTE_:      
034A   C3 C4 07               JP   dblquote   
034D                MINUS_:      
034D   C3 EC 07               JP   minus   
0350                EQ_:         
0350   03                     INC   bc   
0351   0A                     LD   a,(bc)   ; is it == ?
0352   FE 3D                  CP   "="   
0354   28 04                  JR   z,eq0   ; no its equality
0356   0B                     DEC   bc   
0357   C3 7D 04               JP   assign   ; no its assignment
035A                EQ0:         
035A   E1                     POP   hl   
035B                EQ1:         
035B   D1                     POP   de   
035C   C3 24 06               JP   equals   
035F                GT_:         
035F   03                     INC   bc   
0360   0A                     LD   a,(bc)   
0361   FE 3E                  CP   ">"   
0363   CA B1 07               JP   z,shiftRight   
0366   D1                     POP   de   
0367   E1                     POP   hl   
0368   18 09                  JR   lt1   
036A                LT_:         
036A   03                     INC   bc   
036B   0A                     LD   a,(bc)   
036C   FE 3C                  CP   "<"   
036E   CA A1 07               JP   z,shiftLeft   
0371   E1                     POP   hl   
0372   D1                     POP   de   
0373                LT1:         
0373   FE 3D                  CP   "="   
0375   CA 2C 06               JP   z,lessthaneq   
0378   0B                     DEC   bc   
0379   C3 31 06               JP   lessthan   
037C                SLASH_:      
037C   C3 AF 05               JP   slash   
037F                NOP_:        
037F   DD E9                  JP   (ix)   
0381                RPAREN_:      
0381   C3 7D 07               JP   rparen   
0384                             ;*******************************************************************
0384                             ; implementations
0384                             ;*******************************************************************
0384                PLUS:        
0384                ADD:         
0384   03                     INC   bc   
0385   0A                     LD   a,(bc)   
0386   FE 2B                  CP   "+"   ; ++ increment variable
0388   20 05                  JR   nz,add1   
038A   E1                     POP   hl   
038B   23                     INC   hl   
038C   C3 7F 04               JP   assign0   
038F                ADD1:        
038F   0B                     DEC   bc   
0390   D1                     POP   de   ; second term
0391   E1                     POP   hl   ; first term
0392   19                     ADD   hl,de   
0393                ADD3:        
0393   E5                     PUSH   hl   
0394   DD E9                  JP   (ix)   
0396                             ; @ addr
0396                             ; -- ptr
0396                AT:          
0396                ADDR:        
0396   ED 5B F2 4D            LD   de,(vPointer)   
039A   21 F2 4D               LD   hl,vPointer   
039D   C3 ED 0A               JP   variable   
03A0                AMPER:       
03A0                AND:         
03A0   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A1   E1                     POP   hl   
03A2   7B                     LD   a,e   
03A3   A5                     AND   l   
03A4   6F                     LD   l,a   
03A5   7A                     LD   a,d   
03A6   A4                     AND   h   
03A7                AND1:        
03A7   67                     LD   h,a   
03A8   E5                     PUSH   hl   
03A9   DD E9                  JP   (ix)   
03AB                PIPE:        
03AB                OR:          
03AB   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03AC   E1                     POP   hl   
03AD   7B                     LD   a,e   
03AE   B5                     OR   l   
03AF   6F                     LD   l,a   
03B0   7A                     LD   a,d   
03B1   B4                     OR   h   
03B2   18 F3                  JR   and1   
03B4                XOR:         
03B4   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03B5                XOR1:        
03B5   E1                     POP   hl   
03B6   7B                     LD   a,e   
03B7   AD                     XOR   l   
03B8   6F                     LD   l,a   
03B9   7A                     LD   a,d   
03BA   AC                     XOR   h   
03BB   67                     LD   h,a   
03BC   E5                     PUSH   hl   
03BD   DD E9                  JP   (ix)   
03BF                INVERT:      ; Bitwise INVert the top member of the stack
03BF   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C2   18 F1                  JR   xor1   
03C4                             ; %a .. %z
03C4                             ; -- value
03C4                             ; returns value of arg
03C4                PERCENT:      
03C4                ARG:         
03C4   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03C7   FD 56 05               LD   d,(iy+5)   
03CA   EB                     EX   de,hl   
03CB   7D                     LD   a,l   ; arg_list* == null, skip
03CC   B4                     OR   h   
03CD   28 1A                  JR   z,arg0a   
03CF   23                     INC   hl   ; a = num_args, hl = arg_list*
03D0   7E                     LD   a,(hl)   
03D1   23                     INC   hl   
03D2   B7                     OR   a   
03D3   28 14                  JR   z,arg0a   ; num_args == 0, skip
03D5   5F                     LD   e,a   ; e = a = num_args
03D6   03                     INC   bc   ; a = next char = dollar_name
03D7   0A                     LD   a,(bc)   
03D8   C5                     PUSH   bc   ; save IP
03D9   43                     LD   b,e   ; b = e = num_args
03DA   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03DD   FD 56 03               LD   d,(iy+3)   
03E0                ARG0:        
03E0   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E1   1B                     DEC   de   
03E2   BE                     CP   (hl)   
03E3   28 09                  JR   z,arg1   
03E5   23                     INC   hl   ; hl = next arg_list*
03E6   10 F8                  DJNZ   arg0   
03E8   C1                     POP   bc   ; no match, restore IP
03E9                ARG0A:       
03E9   11 00 00               LD   de,0   ; return 0
03EC   18 08                  JR   arg1a   
03EE                ARG1:        
03EE   C1                     POP   bc   ; restore IP
03EF   EB                     EX   de,hl   ; hl = arg*
03F0   22 F2 4D               LD   (vPointer),hl   ; store arg* in setter
03F3   5E                     LD   e,(hl)   
03F4   23                     INC   hl   
03F5   56                     LD   d,(hl)   ; de = arg
03F6                ARG1A:       
03F6   D5                     PUSH   de   ; push arg
03F7   DD E9                  JP   (ix)   
03F9                LBRACK:      
03F9                ARRAYSTART:      
03F9   11 00 00               LD   de,0   ; create stack frame
03FC   D5                     PUSH   de   ; push null for IP
03FD   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0400   FD 56 05               LD   d,(iy+5)   ; 
0403   D5                     PUSH   de   ; 
0404   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0407   FD 56 03               LD   d,(iy+3)   ; 
040A   D5                     PUSH   de   ; 
040B   FD E5                  PUSH   iy   ; push BP
040D   FD 21 00 00            LD   iy,0   ; BP = SP
0411   FD 39                  ADD   iy,sp   
0413   DD E9                  JP   (ix)   
0415                RBRACK:      
0415                ARRAYEND:      
0415   FD 54                  LD   d,iyh   ; de = BP
0417   FD 5D                  LD   e,iyl   
0419   ED 43 00 4E            LD   (vTemp1),bc   ; save IP
041D   62 6B                  LD   hl,de   ; hl = de = BP
041F   B7                     OR   a   
0420   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0422   CB 3C                  SRL   h   ; 
0424   CB 1D                  RR   l   
0426   44 4D                  LD   bc,hl   ; bc = count
0428   2A F0 4D               LD   hl,(vHeapPtr)   ; hl = array[-4]
042B   71                     LD   (hl),c   ; write num items in length word
042C   23                     INC   hl   
042D   70                     LD   (hl),b   
042E   23                     INC   hl   ; hl = array[0], bc = count
042F                             ; de = BP, hl = array[0], bc = count
042F   18 15                  JR   arrayEnd3   
0431                ARRAYEND1:      
0431   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0434   77                     LD   (hl),a   ; write lsb of array item
0435   23                     INC   hl   ; move to msb of array item
0436   3A E6 4D               LD   a,(vDataWidth)   ; vDataWidth=1?
0439   3D                     DEC   a   
043A   28 05                  JR   z,arrayEnd2   
043C   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
043F   77                     LD   (hl),a   ; write msb of array item
0440   23                     INC   hl   ; move to next word in array
0441                ARRAYEND2:      
0441   FD 2B                  DEC   iy   ; move to next word on stack
0443   FD 2B                  DEC   iy   
0445   0B                     DEC   bc   ; dec items count
0446                ARRAYEND3:      
0446   79                     LD   a,c   ; if not zero loop
0447   B0                     OR   b   
0448   20 E7                  JR   nz,arrayEnd1   
044A   EB                     EX   de,hl   ; de = end of array, hl = BP
044B   F9                     LD   sp,hl   ; sp = BP
044C   E1                     POP   hl   ; de = end of array, hl = old BP
044D   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
044E   FD 62                  LD   iyh,d   
0450   FD 6B                  LD   iyl,e   
0452   D1                     POP   de   ; pop arg_list (discard)
0453   D1                     POP   de   ; pop first_arg* (discard)
0454   D1                     POP   de   ; pop IP (discard)
0455   ED 5B F0 4D            LD   de,(vHeapPtr)   ; de = array[-2]
0459   13                     INC   de   
045A   13                     INC   de   
045B   D5                     PUSH   de   ; return array[0]
045C   22 F0 4D               LD   (vHeapPtr),hl   ; move heap* to end of array
045F   ED 4B 00 4E            LD   bc,(vTemp1)   ; restore IP
0463   DD E9                  JP   (ix)   
0465                             ; index of an array, based on vDataWidth
0465                             ; array num -- value    ; also sets vPointer to address
0465                HASH:        
0465                ARRAYINDEX:      
0465   E1                     POP   hl   ; hl = index
0466   D1                     POP   de   ; de = array
0467   3A E6 4D               LD   a,(vDataWidth)   ; a = data width
046A   3D                     DEC   a   
046B   28 01                  JR   z,arrayIndex1   
046D                ARRAYINDEX0:      
046D   29                     ADD   hl,hl   ; if data width = 2 then double
046E                ARRAYINDEX1:      
046E   19                     ADD   hl,de   ; add addr
046F   22 F2 4D               LD   (vPointer),hl   ; store address in setter
0472   16 00                  LD   d,0   
0474   5E                     LD   e,(hl)   
0475   B7                     OR   a   ; check data width again
0476   28 02                  JR   z,arrayIndex2   
0478   23                     INC   hl   
0479   56                     LD   d,(hl)   
047A                ARRAYINDEX2:      
047A   D5                     PUSH   de   
047B   DD E9                  JP   (ix)   
047D                             ; value _oldValue --            ; uses address in vPointer
047D                ASSIGN:      
047D   E1                     POP   hl   ; discard last accessed value
047E   E1                     POP   hl   ; hl = new value
047F                ASSIGN0:      
047F   EB                     EX   de,hl   ; de = new value
0480                ASSIGNX:      
0480   2A F2 4D               LD   hl,(vPointer)   
0483   73                     LD   (hl),e   
0484   3A E6 4D               LD   a,(vDataWidth)   
0487   3D                     DEC   a   ; is it byte?
0488   28 02                  JR   z,assign1   
048A   23                     INC   hl   
048B   72                     LD   (hl),d   
048C                ASSIGN1:      
048C   DD E9                  JP   (ix)   
048E                             ; arg_list - parses input (ab:c)
048E                             ; names after the : represent uninitialised locals
048E                             ; return values are the state of the stack after the block ends
048E                             ; format: numLocals totNumArgs argChars...
048E                COLON:       
048E                ARGLIST:      
048E   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0491   2A F0 4D               LD   hl,(vHeapPtr)   ; hl = heap*
0494   E5                     PUSH   hl   ; save start of arg_list
0495   23                     INC   hl   ; skip length fields to start of string
0496   23                     INC   hl   
0497   03                     INC   bc   ; point to next char
0498                ARGLIST1:      
0498   0A                     LD   a,(bc)   
0499   FE 3A                  CP   ":"   ; ":" switches from args to locals
049B   20 03                  JR   nz,arglist1a   
049D   14                     INC   d   ; non zero value local count acts as flag
049E   18 10                  JR   arglist3   
04A0                ARGLIST1A:      
04A0   FE 61                  CP   "a"   ; < "a" terminates arg_list
04A2   38 0F                  JR   c,arglist4   
04A4   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04A6   30 0B                  JR   nc,arglist4   
04A8                ARGLIST2:      
04A8   77                     LD   (hl),a   
04A9   23                     INC   hl   
04AA   1C                     INC   e   ; increase arg count
04AB   AF                     XOR   a   
04AC   B2                     OR   d   
04AD   28 01                  JR   z,arglist3   
04AF   14                     INC   d   ; if d > 0 increase local count
04B0                ARGLIST3:      
04B0   03                     INC   bc   ; point to next char
04B1   18 E5                  JR   arglist1   
04B3                ARGLIST4:      
04B3   0B                     DEC   bc   
04B4   AF                     XOR   a   
04B5   B2                     OR   d   
04B6   28 01                  JR   z,arglist5   
04B8   15                     DEC   d   ; remove initial inc
04B9                ARGLIST5:      
04B9   23                     INC   hl   
04BA   22 F0 4D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04BD   E1                     POP   hl   ; hl = start of arg_list
04BE   E5                     PUSH   hl   ; return start of arg_list
04BF   72                     LD   (hl),d   ; write number of locals at start - 1
04C0   23                     INC   hl   
04C1   73                     LD   (hl),e   ; write number of args + locals at start - 2
04C2   DD E9                  JP   (ix)   
04C4                LBRACE:      
04C4                BLOCKSTART:      
04C4   C5                     PUSH   bc   ; return pointer to first { of block
04C5   03                     INC   bc   
04C6   16 01                  LD   d,1   ; nesting: count first parenthesis
04C8                BLOCKSTART1:      ; Skip to end of definition
04C8   0A                     LD   a,(bc)   ; Get the next character
04C9   03                     INC   bc   ; Point to next character
04CA   FE 21                  CP   " " + 1   ; ignore whitespace
04CC   38 FA                  JR   c,blockStart1   
04CE   FE 29                  CP   ")"   
04D0   28 2D                  JR   z,blockStart4   
04D2   FE 7D                  CP   "}"   
04D4   28 29                  JR   z,blockStart4   
04D6   FE 5D                  CP   "]"   
04D8   28 25                  JR   z,blockStart4   
04DA   FE 28                  CP   "("   
04DC   28 16                  JR   z,blockStart2   
04DE   FE 7B                  CP   "{"   
04E0   28 12                  JR   z,blockStart2   
04E2   FE 5B                  CP   "["   
04E4   28 0E                  JR   z,blockStart2   
04E6   FE 27                  CP   "'"   
04E8   28 0D                  JR   z,blockStart3   
04EA   FE 60                  CP   "`"   
04EC   28 09                  JR   z,blockStart3   
04EE   FE 22                  CP   DQUOTE   
04F0   28 05                  JR   z,blockStart3   
04F2   18 D4                  JR   blockStart1   
04F4                BLOCKSTART2:      
04F4   14                     INC   d   
04F5   18 D1                  JR   blockStart1   
04F7                BLOCKSTART3:      
04F7   3E 80                  LD   a,$80   
04F9   AA                     XOR   d   
04FA   57                     LD   d,a   
04FB   20 CB                  JR   nz,blockStart1   
04FD   18 03                  JR   blockStart5   
04FF                BLOCKSTART4:      
04FF   15                     DEC   d   
0500   20 C6                  JR   nz,blockStart1   ; get the next element
0502                BLOCKSTART5:      
0502   60 69                  LD   hl,bc   ; hl = IP
0504   11 1E 4E               LD   de,HEAP   ; is IP pointing to object in heap
0507   B7                     OR   a   ; IP - HEAP
0508   ED 52                  SBC   hl,de   
050A   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
050C   28 1C                  JR   z,blockStart6   
050E   60 69                  LD   hl,bc   ; hl = IP
0510   D1                     POP   de   ; de = block*
0511   ED 43 00 4E            LD   (vTemp1),bc   ; save IP
0515   B7                     OR   a   ; bc = size
0516   ED 52                  SBC   hl,de   
0518   44 4D                  LD   bc,hl   
051A   EB                     EX   de,hl   ; hl = block* de = heap*
051B   ED 5B F0 4D            LD   de,(vHeapPtr)   
051F   D5                     PUSH   de   ; return hblock*
0520   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0522   ED 53 F0 4D            LD   (vHeapPtr),de   ; heap* += size
0526   ED 4B 00 4E            LD   bc,(vTemp1)   ; restore IP
052A                BLOCKSTART6:      
052A   0B                     DEC   bc   ; balanced, exit
052B   DD E9                  JP   (ix)   
052D                RBRACE:      
052D                BLOCKEND:      
052D   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0530   FD 56 01               LD   d,(iy+1)   
0533   ED 53 00 4E            LD   (vTemp1),de   
0537   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
053A   FD 56 07               LD   d,(iy+7)   
053D   ED 53 02 4E            LD   (vTemp2),de   
0541   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0544   FD 56 03               LD   d,(iy+3)   
0547   EB                     EX   de,hl   
0548   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
054B   FD 56 01               LD   d,(iy+1)   
054E   13                     INC   de   ; for carry flag <=
054F   B7                     OR   a   
0550   ED 52                  SBC   hl,de   
0552   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0554   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0556   FD 5D                  LD   e,iyl   
0558   21 08 00               LD   hl,8   
055B   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
055C   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
055D   18 0C                  JR   blockEnd2   
055F                BLOCKEND1:      ; same scope
055F   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0562   FD 56 03               LD   d,(iy+3)   
0565   EB                     EX   de,hl   
0566   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0568   FD 5D                  LD   e,iyl   
056A   EB                     EX   de,hl   
056B                BLOCKEND2:      
056B   44 4D                  LD   bc,hl   ; bc = hl = BP
056D   B7                     OR   a   ; hl = BP - SP = count
056E   ED 72                  SBC   hl,sp   
0570   7D                     LD   a,l   
0571   B4                     OR   h   
0572   28 09                  JR   z,blockEnd3   
0574   C5                     PUSH   bc   ; bc = count, hl = BP
0575   44 4D                  LD   bc,hl   
0577   E1                     POP   hl   
0578   2B                     DEC   hl   ; hl = BP-1
0579   1B                     DEC   de   ; de = args*-1
057A   ED B8                  LDDR      
057C   13                     INC   de   
057D                BLOCKEND3:      
057D   EB                     EX   de,hl   ; sp = de = new tos*
057E   F9                     LD   sp,hl   
057F   ED 4B 02 4E            LD   bc,(vTemp2)   
0583   FD 2A 00 4E            LD   iy,(vTemp1)   
0587   DD E9                  JP   (ix)   
0589                TICK:        
0589                CHAR:        
0589   21 00 00               LD   hl,0   ; if "" is empty or null
058C                CHAR1:       
058C   03                     INC   bc   ; point to next char
058D   0A                     LD   a,(bc)   
058E   FE 27                  CP   "'"   ; ' is the terminator
0590   28 09                  JR   z,char3   
0592   FE 5C                  CP   $5c   ; \ is the escape
0594   20 02                  JR   nz,char2   
0596   03                     INC   bc   
0597   0A                     LD   a,(bc)   
0598                CHAR2:       
0598   6F                     LD   l,a   
0599   18 F1                  JR   char1   
059B                CHAR3:       
059B   E5                     PUSH   hl   
059C   DD E9                  JP   (ix)   
059E                BACKSLASH:      
059E   DD E9                  JP   (ix)   
05A0                             ; , discard stack item
05A0                             ; x y -- x
05A0                COMMA:       
05A0                DISCARD:      
05A0   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05A2   FD 5D                  LD   e,iyl   
05A4   EB                     EX   de,hl   
05A5   B7                     OR   a   
05A6   ED 72                  SBC   hl,sp   
05A8   CB 7C                  BIT   7,h   
05AA   20 01                  JR   nz,discard1   
05AC   E1                     POP   hl   
05AD                DISCARD1:      
05AD   DD E9                  JP   (ix)   
05AF                SLASH:       
05AF                COMMAND:      
05AF   CD 4D 0B               CALL   jumpTable   
05B2   2F                     DB   "/"   
05B3   12 08                  DW   comment   
05B5   61                     DB   "a"   
05B6   1B 08                  DW   command_a   
05B8   62                     DB   "b"   
05B9   55 08                  DW   command_b   
05BB   63                     DB   "c"   
05BC   F3 0A                  DW   chars   
05BE   64                     DB   "d"   
05BF   FB 0A                  DW   decimal   
05C1   66                     DB   "f"   
05C2   3F 06                  DW   false1   
05C4   68                     DB   "h"   
05C5   03 0B                  DW   hexadecimal   
05C7   69                     DB   "i"   
05C8   A4 09                  DW   command_i   
05CA   6B                     DB   "k"   
05CB   14 0B                  DW   key   
05CD   6E                     DB   "n"   
05CE   26 0B                  DW   numbers   
05D0   6F                     DB   "o"   
05D1   1D 0B                  DW   output   
05D3   70                     DB   "p"   
05D4   B0 09                  DW   command_p   
05D6   72                     DB   "r"   
05D7   97 0A                  DW   command_r   
05D9   73                     DB   "s"   
05DA   A6 0A                  DW   size   
05DC   74                     DB   "t"   
05DD   39 06                  DW   true1   
05DF   76                     DB   "v"   
05E0   AE 0A                  DW   command_v   
05E2   78                     DB   "x"   
05E3   B4 03                  DW   xor   
05E5   00                     DB   NUL   
05E6   E8 05                  DW   div   
05E8                DIV:         
05E8   D1                     POP   de   
05E9   E1                     POP   hl   
05EA   C5                     PUSH   bc   ; preserve the IP
05EB   44 4D                  LD   bc,hl   
05ED   CD 0B 06               CALL   divide   
05F0   EB                     EX   de,hl   
05F1   ED 53 F4 4D            LD   (vRemain),de   
05F5   C1                     POP   bc   
05F6   C3 93 03               JP   add3   
05F9                DOT:         
05F9   CD 4D 0B               CALL   jumpTable   
05FC   61                     DB   "a"   
05FD   61 08                  DW   bufferArray   
05FF   63                     DB   "c"   
0600   83 09                  DW   bufferChar   
0602   73                     DB   "s"   
0603   69 09                  DW   bufferString   
0605   78                     DB   "x"   
0606   88 09                  DW   bufferXChars   
0608   00                     DB   NUL   
0609   AA 08                  DW   bufferNumber   
060B                             ; division subroutine.
060B                             ; bc: divisor, de: dividend, hl: remainder
060B                DIVIDE:      
060B   21 00 00               LD   hl,0   ; zero the remainder
060E   3E 10                  LD   a,16   ; loop counter
0610                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0610   CB 21                  SLA   c   
0612   CB 10                  RL   b   
0614   ED 6A                  ADC   hl,hl   
0616   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0618   38 03                  JR   c,divide2   
061A   0C                     INC   c   
061B   18 01                  JR   divide3   
061D                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
061D   19                     ADD   hl,de   
061E                DIVIDE3:      
061E   3D                     DEC   a   
061F   20 EF                  JR   nz,divide1   
0621   50 59                  LD   de,bc   ; result from bc to de
0623   C9                     RET      
0624                             ; hl = value1, de = value2
0624                             ; hl = result
0624                EQUALS:      
0624   B7                     OR   a   ; reset the carry flag
0625   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0627   28 10                  JR   z,true1   
0629   C3 3F 06               JP   false1   
062C                             ; hl = value1 de = value2
062C                             ; hl = result
062C                LESSTHANEQ:      
062C   B7                     OR   a   
062D   ED 52                  SBC   hl,de   
062F   18 05                  JR   lessthan1   
0631                             ; hl = value1 de = value2
0631                             ; hl = result
0631                LESSTHAN:      
0631   B7                     OR   a   
0632   ED 52                  SBC   hl,de   
0634   28 09                  JR   z,false1   
0636                LESSTHAN1:      
0636   FA 3F 06               JP   m,false1   
0639                TRUE1:       
0639   21 FF FF               LD   hl,TRUE   
063C   E5                     PUSH   hl   
063D   DD E9                  JP   (ix)   
063F                NULL1:       
063F                FALSE1:      
063F   21 00 00               LD   hl,FALSE   
0642   E5                     PUSH   hl   
0643   DD E9                  JP   (ix)   
0645                             ; execute a block of code which ends with }
0645                             ; creates a root scope if BP == stack
0645                             ; else uses outer scope
0645                CARET:       
0645                GO:          
0645   D1                     POP   de   ; de = block*
0646                GO1:         
0646   7B                     LD   a,e   ; if block* == null, exit
0647   B2                     OR   d   
0648   20 02                  JR   nz,go2   
064A   DD E9                  JP   (ix)   
064C                GO2:         
064C   1A                     LD   a,(de)   
064D   FE 7B                  CP   "{"   
064F   28 06                  JR   z,goBlock1   
0651   FE 28                  CP   "("   
0653   C2 8A 06               JP   nz,goLambda   
0656                             ; inc de                      ; de is the address to jump back to
0656   D5                     PUSH   de   ; push de just before stack frame
0657                GOBLOCK:      
0657                GOBLOCK1:      
0657   ED 53 00 4E            LD   (vTemp1),de   ; save de
065B   21 00 4B               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
065E   FD 54                  LD   d,iyh   
0660   FD 5D                  LD   e,iyl   
0662   B7                     OR   a   ; if stack* == BP then this is the root_scope
0663   ED 52                  SBC   hl,de   
0665   ED 5B 00 4E            LD   de,(vTemp1)   ; restore de
0669   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
066A   B4                     OR   h   
066B   3E 00                  LD   a,0   
066D   28 6A                  JR   z,goLambda8   
066F   C5                     PUSH   bc   ; push IP
0670   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0673   FD 46 05               LD   b,(iy+5)   
0676   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0679   FD 66 03               LD   h,(iy+3)   
067C                GOBLOCK2:      
067C   C5                     PUSH   bc   ; arg_list*
067D   E5                     PUSH   hl   ; first_arg*
067E   FD E5                  PUSH   iy   ; push BP
0680   FD 21 00 00            LD   iy,0   ; BP = SP
0684   FD 39                  ADD   iy,sp   
0686   42 4B                  LD   bc,de   ; bc = de = block*-1
0688   DD E9                  JP   (ix)   
068A                GOLAMBDA:      ; execute lambda
068A   EB                     EX   de,hl   ; hl = lambda*
068B   5E                     LD   e,(hl)   ; de = partial_array*
068C   23                     INC   hl   
068D   56                     LD   d,(hl)   
068E   23                     INC   hl   
068F   7B                     LD   a,e   ; if partial_array* == null skip
0690   B2                     OR   d   
0691   28 21                  JR   z,goLambda3   
0693   ED 43 00 4E            LD   (vTemp1),bc   
0697   22 02 4E               LD   (vTemp2),hl   ; save bc,hl
069A   EB                     EX   de,hl   ; hl = partial_array*
069B   2B                     DEC   hl   ; bc = count
069C   46                     LD   b,(hl)   
069D   2B                     DEC   hl   
069E   4E                     LD   c,(hl)   
069F   23                     INC   hl   ; hl = array data*
06A0   23                     INC   hl   
06A1   18 06                  JR   goLambda2   ; push each item on stack
06A3                GOLAMBDA1:      
06A3   5E                     LD   e,(hl)   ; de = partial item
06A4   23                     INC   hl   
06A5   56                     LD   d,(hl)   
06A6   23                     INC   hl   
06A7   D5                     PUSH   de   ; push on stack
06A8   0B                     DEC   bc   
06A9                GOLAMBDA2:      
06A9   79                     LD   a,c   ; if count != 0 then loop
06AA   B0                     OR   b   
06AB   20 F6                  JR   nz,goLambda1   
06AD   ED 4B 00 4E            LD   bc,(vTemp1)   ; restore bc
06B1   2A 02 4E               LD   hl,(vTemp2)   ; restore hl
06B4                GOLAMBDA3:      
06B4   5E                     LD   e,(hl)   ; de = block*
06B5   23                     INC   hl   
06B6   56                     LD   d,(hl)   
06B7   23                     INC   hl   
06B8   ED 53 00 4E            LD   (vTemp1),de   ; save block*
06BC   5E                     LD   e,(hl)   ; de = arg_list*
06BD   23                     INC   hl   
06BE   56                     LD   d,(hl)   
06BF   23                     INC   hl   
06C0   EB                     EX   de,hl   ; hl = arg_list*
06C1   ED 5B 00 4E            LD   de,(vTemp1)   ; restore de = block*
06C5   7D                     LD   a,l   ; if arg_list* == null a = 0
06C6   B4                     OR   h   
06C7   20 03                  JR   nz,goLambda4   
06C9   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06CA   18 0D                  JR   goLambda8   
06CC                GOLAMBDA4:      ; allocate locals
06CC   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
06CD   18 03                  JR   goLambda6   
06CF                GOLAMBDA5:      ; loop
06CF   3B                     DEC   sp   
06D0   3B                     DEC   sp   
06D1   3D                     DEC   a   
06D2                GOLAMBDA6:      
06D2   B7                     OR   a   
06D3   20 FA                  JR   nz,goLambda5   ; end loop
06D5                GOLAMBDA7:      
06D5   23                     INC   hl   ; a = num_args* x 2
06D6   7E                     LD   a,(hl)   
06D7   2B                     DEC   hl   
06D8   87                     ADD   a,a   ; a *= 2
06D9                GOLAMBDA8:      
06D9   C5                     PUSH   bc   ; push IP
06DA   44 4D                  LD   bc,hl   
06DC   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06DF   85                     ADD   a,l   
06E0   6F                     LD   l,a   
06E1   39                     ADD   hl,sp   
06E2   18 98                  JR   goBlock2   
06E4                DOLLAR:      
06E4                HEXNUM:      
06E4   21 00 00               LD   hl,0   ; Clear hl to accept the number
06E7                HEXNUM1:      
06E7   03                     INC   bc   
06E8   0A                     LD   a,(bc)   ; Get the character which is a numeral
06E9   CB 77                  BIT   6,a   ; is it uppercase alpha?
06EB   28 02                  JR   z,hexnum2   ; no a decimal
06ED   D6 07                  SUB   7   ; sub 7  to make $a - $F
06EF                HEXNUM2:      
06EF   D6 30                  SUB   $30   ; form decimal digit
06F1   DA 6F 07               JP   c,num2   
06F4   FE 10                  CP   $0F+1   
06F6   D2 6F 07               JP   nc,num2   
06F9   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06FA   29                     ADD   hl,hl   ; 4X
06FB   29                     ADD   hl,hl   ; 8X
06FC   29                     ADD   hl,hl   ; 16X
06FD   85                     ADD   a,l   ; add into bottom of hl
06FE   6F                     LD   l,a   
06FF   18 E6                  JR   hexnum1   
0701                UPCASE:      
0701   0A                     LD   a,(bc)   ; a = identifier char
0702   D6 41                  SUB   "A"   ; "A" = 0
0704   18 05                  JR   ident1   
0706                LOWCASE:      
0706   0A                     LD   a,(bc)   
0707   D6 61                  SUB   "a"   
0709   C6 1A                  ADD   a,26   
070B                IDENT1:      
070B   87                     ADD   a,a   ; l = a * 2
070C   6F                     LD   l,a   
070D   26 4D                  LD   h,msb(vars)   
070F   22 F2 4D               LD   (vPointer),hl   ; store address in setter
0712   5E                     LD   e,(hl)   
0713   23                     INC   hl   
0714   56                     LD   d,(hl)   
0715   D5                     PUSH   de   
0716   DD E9                  JP   (ix)   
0718                             ; if
0718                             ; condition then -- value
0718                QUESTION:      
0718                IF:          
0718   03                     INC   bc   
0719   0A                     LD   a,(bc)   
071A   FE 3F                  CP   "?"   
071C   28 06                  JR   z,ifte   
071E   0B                     DEC   bc   
071F   11 00 00               LD   de,NUL   ; NUL pointer for else
0722   18 01                  JR   ifte1   
0724                             ; ifte
0724                             ; condition then else -- value
0724                IFTE:        
0724   D1                     POP   de   ; de = else
0725                IFTE1:       
0725   E1                     POP   hl   ; hl = then
0726   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0727   7C                     LD   a,h   
0728   B5                     OR   l   
0729   E1                     POP   hl   ; hl = then
072A   CA 46 06               JP   z,go1   ; if z de = else
072D   EB                     EX   de,hl   ; condition = false, de = then
072E   C3 46 06               JP   go1   
0731                STAR:        
0731                MUL:         
0731   D1                     POP   de   ; get first value
0732   E1                     POP   hl   
0733                MUL2:        
0733   C5                     PUSH   bc   ; Preserve the IP
0734   44 4D                  LD   bc,hl   ; bc = 2nd value
0736   21 00 00               LD   hl,0   
0739   3E 10                  LD   a,16   
073B                MUL3:        
073B   29                     ADD   hl,hl   
073C   CB 13                  RL   e   
073E   CB 12                  RL   d   
0740   30 04                  JR   nc,$+6   
0742   09                     ADD   hl,bc   
0743   30 01                  JR   nc,$+3   
0745   13                     INC   de   
0746   3D                     DEC   a   
0747   20 F2                  JR   nz,mul3   
0749   C1                     POP   bc   ; Restore the IP
074A   C3 93 03               JP   add3   
074D                NUM:         
074D   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0750   0A                     LD   a,(bc)   ; Get numeral or -
0751   FE 2D                  CP   "-"   
0753   20 01                  JR   nz,num0   
0755   03                     INC   bc   ; move to next char, no flags affected
0756                NUM0:        
0756   08                     EX   af,af'   ; save zero flag = 0 for later
0757                NUM1:        
0757   0A                     LD   a,(bc)   ; read digit
0758   D6 30                  SUB   "0"   ; less than 0?
075A   38 13                  JR   c,num2   ; not a digit, exit loop
075C   FE 0A                  CP   10   ; greater that 9?
075E   30 0F                  JR   nc,num2   ; not a digit, exit loop
0760   03                     INC   bc   ; inc IP
0761   54 5D                  LD   de,hl   ; multiply hl * 10
0763   29                     ADD   hl,hl   
0764   29                     ADD   hl,hl   
0765   19                     ADD   hl,de   
0766   29                     ADD   hl,hl   
0767   85                     ADD   a,l   ; add digit in a to hl
0768   6F                     LD   l,a   
0769   3E 00                  LD   a,0   
076B   8C                     ADC   a,h   
076C   67                     LD   h,a   
076D   18 E8                  JR   num1   
076F                NUM2:        
076F   0B                     DEC   bc   
0770   08                     EX   af,af'   ; restore zero flag
0771   20 07                  JR   nz,num3   
0773   EB                     EX   de,hl   ; negate the value of hl
0774   21 00 00               LD   hl,0   
0777   B7                     OR   a   ; jump to sub2
0778   ED 52                  SBC   hl,de   
077A                NUM3:        
077A   E5                     PUSH   hl   ; Put the number on the stack
077B   DD E9                  JP   (ix)   ; and process the next character
077D                RPAREN:      
077D   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0780   FD 46 09               LD   b,(iy+9)   
0783   DD E9                  JP   (ix)   
0785                             ; arg_list* block* -- ptr
0785                SEMICOLON:      
0785   D1                     POP   de   ; de = block* hl = heap*
0786   2A F0 4D               LD   hl,(vHeapPtr)   
0789   AF                     XOR   a   
078A   77                     LD   (hl),a   ; compile null partial_array*
078B   23                     INC   hl   
078C   77                     LD   (hl),a   
078D   23                     INC   hl   
078E   73                     LD   (hl),e   ; compile block*
078F   23                     INC   hl   
0790   72                     LD   (hl),d   
0791   23                     INC   hl   
0792   D1                     POP   de   ; de = block*
0793   73                     LD   (hl),e   ; compile arg_list*
0794   23                     INC   hl   
0795   72                     LD   (hl),d   
0796   23                     INC   hl   
0797   ED 5B F0 4D            LD   de,(vHeapPtr)   ; return lambda*
079B   D5                     PUSH   de   
079C   22 F0 4D               LD   (vHeapPtr),hl   ; heap* += 4
079F   DD E9                  JP   (ix)   
07A1                             ; shiftLeft
07A1                             ; value count -- value2          shift left count places
07A1                SHIFTLEFT:      
07A1   50 59                  LD   de,bc   ; save IP
07A3   C1                     POP   bc   ; bc = count
07A4   41                     LD   b,c   ; b = loop counter
07A5   E1                     POP   hl   
07A6   04                     INC   b   ; test for counter=0 case
07A7   18 01                  JR   shiftLeft2   
07A9                SHIFTLEFT1:      
07A9   29                     ADD   hl,hl   ; left shift hl
07AA                SHIFTLEFT2:      
07AA   10 FD                  DJNZ   shiftLeft1   
07AC   E5                     PUSH   hl   
07AD   42 4B                  LD   bc,de   ; restore IP
07AF   DD E9                  JP   (ix)   
07B1                             ; shiftRight
07B1                             ; value count -- value2          shift left count places
07B1                SHIFTRIGHT:      
07B1   50 59                  LD   de,bc   ; save IP
07B3   C1                     POP   bc   ; bc = count
07B4   41                     LD   b,c   ; b = loop counter
07B5   E1                     POP   hl   
07B6   04                     INC   b   ; test for counter=0 case
07B7   18 04                  JR   shiftRight2   
07B9                SHIFTRIGHT1:      
07B9   CB 3C                  SRL   h   ; right shift hl
07BB   CB 1D                  RR   l   
07BD                SHIFTRIGHT2:      
07BD   10 FA                  DJNZ   shiftRight1   
07BF   E5                     PUSH   hl   
07C0   42 4B                  LD   bc,de   ; restore IP
07C2   DD E9                  JP   (ix)   
07C4                             ; string
07C4                             ; -- ptr                        ; points to start of string chars,
07C4                             ; length is stored at start - 2 bytes
07C4                DBLQUOTE:      
07C4                STRING:      
07C4   2A F0 4D               LD   hl,(vHeapPtr)   ; hl = heap*
07C7   23                     INC   hl   ; skip length field to start
07C8   23                     INC   hl   
07C9   E5                     PUSH   hl   ; save start of string
07CA   03                     INC   bc   ; point to next char
07CB   18 03                  JR   string2   
07CD                STRING1:      
07CD   77                     LD   (hl),a   
07CE   23                     INC   hl   ; increase count
07CF   03                     INC   bc   ; point to next char
07D0                STRING2:      
07D0   0A                     LD   a,(bc)   
07D1   FE 22                  CP   DQUOTE   ; " is the string terminator
07D3   28 04                  JR   z,string3   
07D5   FE 60                  CP   "`"   ; ` is the string terminator used in testing
07D7   20 F4                  JR   nz,string1   
07D9                STRING3:      
07D9   AF                     XOR   a   ; write NUL to terminate string
07DA   77                     LD   (hl),a   ; hl = end of string
07DB   23                     INC   hl   
07DC   22 F0 4D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
07DF   2B                     DEC   hl   ; hl = end of string without terminator
07E0   D1                     POP   de   ; de = start of string
07E1   D5                     PUSH   de   ; return start of string
07E2   B7                     OR   a   ; hl = length bytes, de = start of string
07E3   ED 52                  SBC   hl,de   
07E5   EB                     EX   de,hl   
07E6   2B                     DEC   hl   ; write length bytes to length field at start - 2
07E7   72                     LD   (hl),d   
07E8   2B                     DEC   hl   
07E9   73                     LD   (hl),e   
07EA   DD E9                  JP   (ix)   
07EC                MINUS:       ; negative sign or subtract
07EC   03                     INC   bc   ; check if sign of a number
07ED   0A                     LD   a,(bc)   
07EE   0B                     DEC   bc   
07EF   FE 30                  CP   "0"   
07F1   38 05                  JR   c,sub   
07F3   FE 3A                  CP   "9"+1   
07F5   DA 3B 03               JP   c,num_   
07F8                SUB:         ; Subtract the value 2nd on stack from top of stack
07F8   03                     INC   bc   
07F9   FE 2D                  CP   "-"   
07FB   20 05                  JR   nz,sub1   
07FD   E1                     POP   hl   
07FE   2B                     DEC   hl   
07FF   C3 7F 04               JP   assign0   
0802                SUB1:        
0802   0B                     DEC   bc   
0803   D1                     POP   de   
0804   E1                     POP   hl   
0805   B7                     OR   a   
0806   ED 52                  SBC   hl,de   
0808   C3 93 03               JP   add3   
080B                ERROR1:      
080B   21 01 00               LD   hl,1   ; error 1: unknown command
080E   E5                     PUSH   hl   
080F   C3 D1 0C               JP   error   
0812                COMMENT:      
0812   03                     INC   bc   ; point to next char
0813   0A                     LD   a,(bc)   
0814   FE 20                  CP   " "   ; terminate on any char less than SP
0816   30 FA                  JR   nc,comment   
0818   0B                     DEC   bc   
0819   DD E9                  JP   (ix)   
081B                COMMAND_A:      
081B   CD 4D 0B               CALL   jumpTable   
081E   62                     DB   "b"   
081F   27 08                  DW   absolute   
0821   64                     DB   "d"   
0822   34 08                  DW   addrOf   
0824   00                     DB   NUL   
0825   0B 08                  DW   error1   
0827                             ; /ab absolute
0827                             ; num -- num
0827                ABSOLUTE:      
0827   E1                     POP   hl   
0828   CB 7C                  BIT   7,h   
082A   C8                     RET   z   
082B   AF                     XOR   a   
082C   95                     SUB   l   
082D   6F                     LD   l,a   
082E   9F                     SBC   a,a   
082F   94                     SUB   h   
0830   67                     LD   h,a   
0831   E5                     PUSH   hl   
0832   DD E9                  JP   (ix)   
0834                             ; /ad addrOf
0834                             ; char -- addr
0834                ADDROF:      
0834   E1                     POP   hl   ; a = char
0835   7D                     LD   a,l   
0836   FE 7B                  CP   "z"+1   ; if a > z then exit
0838   30 19                  JR   nc,addrOf2   
083A   D6 41                  SUB   "A"   ; a - 65
083C   38 15                  JR   c,addrOf2   ; if < A then exit
083E   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0840   38 06                  JR   c,addrOf1   
0842   D6 06                  SUB   "a"-("Z"+1)   
0844   FE 1A                  CP   "Z"-"A"+1   
0846   38 0B                  JR   c,addrOf2   ; if < a then exit
0848                ADDROF1:      
0848   87                     ADD   a,a   ; double a
0849   21 00 4D               LD   hl,VARS   ; hl = VARS + a
084C   85                     ADD   a,l   
084D   6F                     LD   l,a   
084E   3E 00                  LD   a,0   
0850   8C                     ADC   a,h   
0851   67                     LD   h,a   
0852   E5                     PUSH   hl   
0853                ADDROF2:      
0853   DD E9                  JP   (ix)   
0855                COMMAND_B:      
0855   CD 4D 0B               CALL   jumpTable   
0858   72                     DB   "r"   
0859   4F 09                  DW   break   
085B   79                     DB   "y"   
085C   14 0C                  DW   coldStart   
085E   00                     DB   NUL   
085F   0B 08                  DW   error1   
0861                          ;*Macro unroll: FUNC bufferArray, 2, "abc"
0861                BUFFERARRAY:      
0861   CD 45 06               CALL   go   
0864   00 00                  DW   NUL   
0866   6F 08                  DW   bufferArrayM_1767S1258   
0868   6A 08                  DW   $+2   
086A   02                     DB   2   
086B   03 61 62 63            .PSTR   "abc"   
086F                BUFFERARRAYM_1767S1258:      
086F   7B 22 5B 20 22 2E 73 20 25 61 20 2F 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 22 5D 22 2E 73 7D 00 00 .CSTR   "{",DQUOTE,"[ ",DQUOTE,".s %a /s%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ",DQUOTE,"]",DQUOTE,".s}",0   
08AA                             ; .cstr "{$a/s$c= 0$b=( $a$b%/bd $b++ $b $c</br )^}" ; block
08AA                             ; /bd buffer decimal
08AA                             ; value --
08AA                BUFFERNUMBER:      
08AA   3A E8 4D               LD   a,(vNumBase)   
08AD   FE 10                  CP   16   
08AF   28 66                  JR   z,bufferHex   ; else falls through
08B1                             ; /bd buffer decimal
08B1                             ; value --
08B1                BUFFERDEC:      
08B1   ED 5B EC 4D            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
08B5   D9                     EXX      
08B6   E1                     POP   hl   ; hl = value
08B7   CD CB 08               CALL   bufferDec0   
08BA   D9                     EXX      ; de = buffer*' bc = IP
08BB   3E 20                  LD   a," "   ; append space to buffer
08BD   12                     LD   (de),a   
08BE   1C                     INC   e   ; buffer*++, wraparound
08BF   CC 36 0B               CALL   z,flushBuffer   
08C2   2A EC 4D               LD   hl,(vBufPtr)   ; hl = buffer*
08C5   ED 53 EC 4D            LD   (vBufPtr),de   ; update buffer* with buffer*'
08C9   DD E9                  JP   (ix)   
08CB                             ; hl = value
08CB                             ; de' = buffer*
08CB                             ; a, bc, de, hl destroyed
08CB                BUFFERDEC0:      
08CB   CB 7C                  BIT   7,h   
08CD   28 0C                  JR   z,bufferDec1   
08CF   D9                     EXX      
08D0   3E 2D                  LD   a,"-"   
08D2   12                     LD   (de),a   
08D3   13                     INC   de   
08D4   D9                     EXX      
08D5   AF                     XOR   a   
08D6   95                     SUB   l   
08D7   6F                     LD   l,a   
08D8   9F                     SBC   a,a   
08D9   94                     SUB   h   
08DA   67                     LD   h,a   
08DB                BUFFERDEC1:      
08DB   0E 00                  LD   c,0   ; leading zeros flag = false
08DD   11 F0 D8               LD   de,-10000   
08E0   CD FB 08               CALL   bufferDec2   
08E3   11 18 FC               LD   de,-1000   
08E6   CD FB 08               CALL   bufferDec2   
08E9   11 9C FF               LD   de,-100   
08EC   CD FB 08               CALL   bufferDec2   
08EF   1E F6                  LD   e,-10   
08F1   CD FB 08               CALL   bufferDec2   
08F4   0C                     INC   c   ; flag = true for at least digit
08F5   1E FF                  LD   e,-1   
08F7   CD FB 08               CALL   bufferDec2   
08FA   C9                     RET      
08FB                BUFFERDEC2:      
08FB   06 2F                  LD   b,"0"-1   
08FD                BUFFERDEC3:      
08FD   04                     INC   b   
08FE   19                     ADD   hl,de   
08FF   38 FC                  JR   c,bufferDec3   
0901   ED 52                  SBC   hl,de   
0903   3E 30                  LD   a,"0"   
0905   B8                     CP   b   
0906   20 05                  JR   nz,bufferDec4   
0908   AF                     XOR   a   
0909   B1                     OR   c   
090A   C8                     RET   z   
090B   18 01                  JR   bufferDec5   
090D                BUFFERDEC4:      
090D   0C                     INC   c   
090E                BUFFERDEC5:      
090E   78                     LD   a,b   
090F   D9                     EXX      
0910   12                     LD   (de),a   
0911   1C                     INC   e   
0912   CC 36 0B               CALL   z,flushBuffer   
0915   D9                     EXX      
0916   C9                     RET      
0917                             ; /bh buffer hex
0917                             ; value --
0917                BUFFERHEX:      
0917   E1                     POP   hl   ; hl = value
0918   ED 5B EC 4D            LD   de,(vBufPtr)   
091C   3E 24                  LD   a,"$"   ; # prefix
091E   12                     LD   (de),a   
091F   1C                     INC   e   ; buffer*++, wraparound
0920   CC 36 0B               CALL   z,flushBuffer   
0923   7C                     LD   a,h   
0924   CD 38 09               CALL   bufferHex1   
0927   7D                     LD   a,l   
0928   CD 38 09               CALL   bufferHex1   
092B   3E 20                  LD   a," "   ; append space to buffer
092D   12                     LD   (de),a   
092E   1C                     INC   e   ; buffer*++, wraparound
092F   CC 36 0B               CALL   z,flushBuffer   
0932   ED 53 EC 4D            LD   (vBufPtr),de   
0936   DD E9                  JP   (ix)   
0938                BUFFERHEX1:      
0938   F5                     PUSH   af   
0939   1F                     RRA      
093A   1F                     RRA      
093B   1F                     RRA      
093C   1F                     RRA      
093D   CD 41 09               CALL   bufferHex2   
0940   F1                     POP   af   
0941                BUFFERHEX2:      
0941   E6 0F                  AND   0x0F   
0943   C6 90                  ADD   a,0x90   
0945   27                     DAA      
0946   CE 40                  ADC   a,0x40   
0948   27                     DAA      
0949   12                     LD   (de),a   
094A   1C                     INC   e   ; buffer*++, wraparound
094B   CC 36 0B               CALL   z,flushBuffer   
094E   C9                     RET      
094F                             ; /br break from loop
094F                             ; --
094F                BREAK:       
094F   E1                     POP   hl   
0950   7D                     LD   a,l   
0951   B4                     OR   h   
0952   28 02                  JR   z,break1   
0954   DD E9                  JP   (ix)   
0956                BREAK1:      
0956   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0958   FD 54                  LD   d,iyh   
095A   21 08 00               LD   hl,8   
095D   19                     ADD   hl,de   
095E   23                     INC   hl   
095F   23                     INC   hl   
0960   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0963   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0966   C3 2D 05               JP   blockEnd   
0969                             ; /bs buffered string
0969                             ; string* --
0969                BUFFERSTRING:      
0969   E1                     POP   hl   ; hl = string*
096A   ED 5B EC 4D            LD   de,(vBufPtr)   ; de = buffer*
096E   18 06                  JR   bufferString1   
0970                BUFFERSTRING0:      
0970   12                     LD   (de),a   ; a -> buffer*
0971   1C                     INC   e   ; buffer*++, wraparound
0972   CC 36 0B               CALL   z,flushBuffer   
0975   23                     INC   hl   
0976                BUFFERSTRING1:      
0976   7E                     LD   a,(hl)   ; a <- string*
0977   B7                     OR   a   ; if NUL exit loop
0978   20 F6                  JR   nz,bufferString0   
097A   2A EC 4D               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
097D   ED 53 EC 4D            LD   (vBufPtr),de   ; save buffer*' in pointer
0981   DD E9                  JP   (ix)   
0983                             ; /bc buffer char
0983                             ; char --
0983                BUFFERCHAR:      
0983   21 01 00               LD   hl,1   
0986   18 01                  JR   bufferXChars0   
0988                             ; /bx buffered x chars
0988                             ; char length --
0988                BUFFERXCHARS:      
0988   E1                     POP   hl   ; hl = length
0989                BUFFERXCHARS0:      
0989   D1                     POP   de   ; a' = char
098A   7B                     LD   a,e   
098B   08                     EX   af,af'   
098C   ED 5B EC 4D            LD   de,(vBufPtr)   ; de = buffer*
0990   18 08                  JR   bufferXChars2   
0992                BUFFERXCHARS1:      
0992   08                     EX   af,af'   
0993   12                     LD   (de),a   
0994   08                     EX   af,af'   
0995   1C                     INC   e   ; buffer*++, wraparound
0996   CC 36 0B               CALL   z,flushBuffer   
0999   2B                     DEC   hl   
099A                BUFFERXCHARS2:      
099A   7D                     LD   a,l   
099B   B4                     OR   h   
099C   20 F4                  JR   nz,bufferXChars1   
099E   ED 53 EC 4D            LD   (vBufPtr),de   ; save buffer*'
09A2   DD E9                  JP   (ix)   
09A4                COMMAND_I:      
09A4   CD 4D 0B               CALL   jumpTable   
09A7   6E                     DB   "n"   
09A8   09 0B                  DW   input   
09AA   76                     DB   "v"   
09AB   BF 03                  DW   invert   
09AD   00                     DB   NUL   
09AE   0B 08                  DW   error1   
09B0                COMMAND_P:      
09B0   CD 4D 0B               CALL   jumpTable   
09B3   61                     DB   "a"   
09B4   C5 09                  DW   partial   
09B6   62                     DB   "b"   
09B7   5D 0A                  DW   printBuffer   
09B9   63                     DB   "c"   
09BA   83 0A                  DW   printChars   
09BC   6B                     DB   "k"   
09BD   95 0A                  DW   printStack   
09BF   78                     DB   "x"   
09C0   E5 09                  DW   xpartial   
09C2   00                     DB   NUL   
09C3   0B 08                  DW   error1   
09C5                             ; /pa partial
09C5                             ; array* lambda* -- lambda1*
09C5                PARTIAL:      
09C5   E1                     POP   hl   ; h1 = lambda*
09C6   ED 5B F0 4D            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
09CA   ED 43 00 4E            LD   (vTemp1),bc   ; save IP
09CE   01 06 00               LD   bc,6   ; bc = count
09D1   ED B0                  LDIR      ; clone lambda
09D3   ED 4B 00 4E            LD   bc,(vTemp1)   ; restore IP
09D7   2A F0 4D               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
09DA   ED 53 F0 4D            LD   (vHeapPtr),de   ; heap* += 6
09DE   D1                     POP   de   ; de = array*
09DF   E5                     PUSH   hl   ; return partial_array*
09E0   73                     LD   (hl),e   ; compile array*
09E1   23                     INC   hl   
09E2   72                     LD   (hl),d   
09E3   DD E9                  JP   (ix)   
09E5                             ; /px xpartial
09E5                             ; arg_list* block* -- lambda*
09E5                XPARTIAL:      
09E5   ED 43 00 4E            LD   (vTemp1),bc   ; save IP
09E9   E1                     POP   hl   ; hl = block*
09EA   22 02 4E               LD   (vTemp2),hl   ; save block*
09ED   E1                     POP   hl   ; hl = inner arg_list*
09EE   ED 5B F0 4D            LD   de,(vHeapPtr)   ; de = compile*
09F2   D5                     PUSH   de   ; push new arglist*
09F3   7E                     LD   a,(hl)   ; compile inner num locals
09F4   12                     LD   (de),a   
09F5   23                     INC   hl   
09F6   13                     INC   de   
09F7   7E                     LD   a,(hl)   ; compile inner length
09F8   12                     LD   (de),a   
09F9   23                     INC   hl   
09FA   13                     INC   de   
09FB   B7                     OR   a   ; compile args if inner length > 0
09FC   28 05                  JR   z,xpartial1   
09FE   4F                     LD   c,a   
09FF   06 00                  LD   b,0   
0A01   ED B0                  LDIR      
0A03                XPARTIAL1:      
0A03   EB                     EX   de,hl   ; hl = outer arg_list
0A04   FD 5E 04               LD   e,(iy+4)   
0A07   FD 56 05               LD   d,(iy+5)   
0A0A   EB                     EX   de,hl   
0A0B   7D                     LD   a,l   ; skip if outer arg_list == null
0A0C   B4                     OR   h   
0A0D   28 0B                  JR   z,xpartial2   
0A0F   23                     INC   hl   ; a = outer length
0A10   7E                     LD   a,(hl)   
0A11   23                     INC   hl   
0A12   B7                     OR   a   
0A13   28 05                  JR   z,xpartial2   
0A15   4F                     LD   c,a   
0A16   06 00                  LD   b,0   
0A18   ED B0                  LDIR      ; append outer args
0A1A                XPARTIAL2:      ; a = outer length
0A1A                             ; z flag = (a == 0)
0A1A                             ; de = partial_array[-2]
0A1A   47                     LD   b,a   ; b = a = outer length
0A1B   12                     LD   (de),a   ; compile partial_array length field
0A1C   13                     INC   de   
0A1D   AF                     XOR   a   
0A1E   12                     LD   (de),a   
0A1F   13                     INC   de   
0A20   D5                     PUSH   de   ; push partial_array*
0A21   28 1D                  JR   z,xpartial4   ; if (a == 0) skip appending args to partial array
0A23   2A F0 4D               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0A26   7E                     LD   a,(hl)   ; add outer length to new locals
0A27   80                     ADD   a,b   
0A28   77                     LD   (hl),a   
0A29   23                     INC   hl   
0A2A   7E                     LD   a,(hl)   ; add outer length to new length
0A2B   80                     ADD   a,b   
0A2C   77                     LD   (hl),a   
0A2D   EB                     EX   de,hl   ; hl = first_arg
0A2E   FD 5E 02               LD   e,(iy+2)   
0A31   FD 56 03               LD   d,(iy+3)   
0A34   EB                     EX   de,hl   
0A35                XPARTIAL3:      
0A35   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0A36   4E                     LD   c,(hl)   
0A37   2B                     DEC   hl   
0A38   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0A39   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0A3A   13                     INC   de   
0A3B   79                     LD   a,c   
0A3C   12                     LD   (de),a   
0A3D   13                     INC   de   
0A3E   10 F5                  DJNZ   xpartial3   ; b = outer length
0A40                XPARTIAL4:      
0A40   E1                     POP   hl   ; hl = partial_array*
0A41   C1                     POP   bc   ; bc = new arg_list*
0A42   D5                     PUSH   de   ; return new lambda*
0A43   EB                     EX   de,hl   ; hl = new lambda*, de = partial_array*
0A44   73                     LD   (hl),e   ; compile partial_array* to lambda
0A45   23                     INC   hl   
0A46   72                     LD   (hl),d   
0A47   23                     INC   hl   
0A48   ED 5B 02 4E            LD   de,(vTemp2)   ; de = block*
0A4C   73                     LD   (hl),e   ; compile block* to lambda
0A4D   23                     INC   hl   
0A4E   72                     LD   (hl),d   
0A4F   23                     INC   hl   
0A50   71                     LD   (hl),c   ; compile new arg_list* to lambda
0A51   23                     INC   hl   
0A52   70                     LD   (hl),b   
0A53   23                     INC   hl   
0A54   22 F0 4D               LD   (vHeapPtr),hl   ; bump heap ptr
0A57   ED 4B 00 4E            LD   bc,(vTemp1)   ; restore IP
0A5B   DD E9                  JP   (ix)   
0A5D                             ; ; arg_list* block* -- ptr
0A5D                             ; semicolon:
0A5D                             ;     pop de                      ; de = block* hl = heap*
0A5D                             ;     ld hl,(vHeapPtr)
0A5D                             ;     xor a
0A5D                             ;     ld (hl),a                   ; compile null partial_array*
0A5D                             ;     inc hl
0A5D                             ;     ld (hl),a
0A5D                             ;     inc hl
0A5D                             ;     ld (hl),e                   ; compile block*
0A5D                             ;     inc hl
0A5D                             ;     ld (hl),d
0A5D                             ;     inc hl
0A5D                             ;     pop de                      ; de = block*
0A5D                             ;     ld (hl),e                   ; compile arg_list*
0A5D                             ;     inc hl
0A5D                             ;     ld (hl),d
0A5D                             ;     inc hl
0A5D                             ;     ld de,(vHeapPtr)            ; return lambda*
0A5D                             ;     push de
0A5D                             ;     ld (vHeapPtr),hl            ; heap* += 4
0A5D                             ;     jp (ix)
0A5D                             ; arg:
0A5D                             ;     ld e,(iy+4)                 ; hl = arg_list*
0A5D                             ;     ld d,(iy+5)
0A5D                             ;     ex de,hl
0A5D                             ;     ld a,l                      ; arg_list* == null, skip
0A5D                             ;     or h
0A5D                             ;     jr z,arg0a
0A5D                             ;     inc hl                      ; a = num_args, hl = arg_list*
0A5D                             ;     ld a,(hl)
0A5D                             ;     inc hl
0A5D                             ;     or a
0A5D                             ;     jr z,arg0a                  ; num_args == 0, skip
0A5D                             ;     ld e,a                      ; e = a = num_args
0A5D                             ;     inc bc                      ; a = next char = dollar_name
0A5D                             ;     ld a,(bc)
0A5D                             ;     push bc                     ; save IP
0A5D                             ;     ld b,e                      ; b = e = num_args
0A5D                             ;     ld e,(iy+2)                 ; de = first_arg*, hl = argslist*
0A5D                             ;     ld d,(iy+3)
0A5D                             ; arg0:
0A5D                             ;     dec de                      ; a = dollar_name, de = next arg*
0A5D                             ;     dec de
0A5D                             ;     cp (hl)
0A5D                             ;     jr z,arg1
0A5D                             ;     inc hl                      ; hl = next arg_list*
0A5D                             ;     djnz arg0
0A5D                             ;     pop bc                      ; no match, restore IP
0A5D                             ; arg0a:
0A5D                             ;     ld de,0                     ; return 0
0A5D                             ;     jr arg1a
0A5D                             ; arg1:
0A5D                             ;     pop bc                      ; restore IP
0A5D                             ;     ex de,hl                    ; hl = arg*
0A5D                             ;     ld (vPointer),hl            ; store arg* in setter
0A5D                             ;     ld e,(hl)
0A5D                             ;     inc hl
0A5D                             ;     ld d,(hl)                   ; de = arg
0A5D                             ; arg1a:
0A5D                             ;     push de                     ; push arg
0A5D                             ;     jp (ix)
0A5D                             ; /pb printBuffer
0A5D                             ; --
0A5D                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
0A5D                          ;*Macro unroll: FUNC printBuffer, 0, "a"
0A5D                PRINTBUFFER:      
0A5D   CD 45 06               CALL   go   
0A60   00 00                  DW   NUL   
0A62   69 0A                  DW   printBufferM_2144S1655   
0A64   66 0A                  DW   $+2   
0A66   00                     DB   0   
0A67   01 61                  .PSTR   "a"   
0A69                PRINTBUFFERM_2144S1655:      
0A69   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0A83                             ; printChars
0A83                             ; char* len --
0A83                PRINTCHARS:      
0A83   E1                     POP   hl   ; hl = count
0A84   D1                     POP   de   ; de = char*
0A85   CD 90 0A               CALL   printChars2   
0A88   DD E9                  JP   (ix)   
0A8A                PRINTCHARS1:      
0A8A   1A                     LD   a,(de)   ; print char at char*
0A8B   CD 85 00               CALL   putchar   
0A8E   13                     INC   de   ; char*++
0A8F   2B                     DEC   hl   ; count--
0A90                PRINTCHARS2:      
0A90   7D                     LD   a,l   ; count == 0?
0A91   B4                     OR   h   
0A92   C8                     RET   z   
0A93   18 F5                  JR   printChars1   ; if not loop
0A95                             ; /pk print stack
0A95                             ; --
0A95                PRINTSTACK:      
0A95                             ;     ld (vTemp1),bc
0A95                             ;     call printStr
0A95                             ;     .cstr "=> "
0A95                             ;     ld hl,STACK
0A95                             ;     sbc hl,sp
0A95                             ;     srl h
0A95                             ;     rr l
0A95                             ;     ld bc,hl
0A95                             ;     ld hl,STACK
0A95                             ;     jr printStack2
0A95                             ; printStack1:
0A95                             ;     dec bc
0A95                             ;     dec hl
0A95                             ;     ld d,(hl)
0A95                             ;     dec hl
0A95                             ;     ld e,(hl)
0A95                             ;     ex de,hl
0A95                             ;     call prthex
0A95                             ;     ex de,hl
0A95                             ;     ld a," "
0A95                             ;     call putchar
0A95                             ; printStack2:
0A95                             ;     ld a,c
0A95                             ;     or b
0A95                             ;     jr nz,printStack1
0A95                             ;     call prompt
0A95                             ;     ld bc,(vTemp1)
0A95   DD E9                  JP   (ix)   
0A97                COMMAND_R:      
0A97   CD 4D 0B               CALL   jumpTable   
0A9A   65                     DB   "e"   
0A9B   A0 0A                  DW   remain   
0A9D   00                     DB   NUL   
0A9E   0B 08                  DW   error1   
0AA0                REMAIN:      
0AA0   2A F4 4D               LD   hl,(vRemain)   
0AA3   E5                     PUSH   hl   
0AA4   DD E9                  JP   (ix)   
0AA6                SIZE:        
0AA6   E1                     POP   hl   
0AA7   2B                     DEC   hl   ; msb size
0AA8   56                     LD   d,(hl)   
0AA9   2B                     DEC   hl   ; lsb size
0AAA   5E                     LD   e,(hl)   
0AAB   D5                     PUSH   de   
0AAC   DD E9                  JP   (ix)   
0AAE                COMMAND_V:      
0AAE   CD 4D 0B               CALL   jumpTable   
0AB1   62                     DB   "b"   
0AB2   D2 0A                  DW   varBufPtr   
0AB4   68                     DB   "h"   
0AB5   DB 0A                  DW   varHeapPtr   
0AB7   74                     DB   "t"   
0AB8   E4 0A                  DW   varTIBPtr   
0ABA   42                     DB   "B"   
0ABB   C3 0A                  DW   constBufStart   
0ABD   54                     DB   "T"   
0ABE   CD 0A                  DW   constTIBStart   
0AC0   00                     DB   NUL   
0AC1   0B 08                  DW   error1   
0AC3                CONSTBUFSTART:      
0AC3   11 00 4C               LD   de,BUF   
0AC6   18 28                  JR   constant   
0AC8                CONSTHEAPSTART:      
0AC8   11 1E 4E               LD   de,HEAP   
0ACB   18 23                  JR   constant   
0ACD                CONSTTIBSTART:      
0ACD   11 00 4B               LD   de,TIB   
0AD0   18 1E                  JR   constant   
0AD2                VARBUFPTR:      
0AD2   ED 5B EC 4D            LD   de,(vBufPtr)   
0AD6   21 EC 4D               LD   hl,vBufPtr   
0AD9   18 12                  JR   variable   
0ADB                VARHEAPPTR:      
0ADB   ED 5B F0 4D            LD   de,(vHeapPtr)   
0ADF   21 F0 4D               LD   hl,vHeapPtr   
0AE2   18 09                  JR   variable   
0AE4                VARTIBPTR:      
0AE4   ED 5B EA 4D            LD   de,(vTIBPtr)   
0AE8   21 EA 4D               LD   hl,vTIBPtr   
0AEB   18 00                  JR   variable   
0AED                VARIABLE:      
0AED   22 F2 4D               LD   (vPointer),hl   
0AF0                CONSTANT:      
0AF0   D5                     PUSH   de   
0AF1   DD E9                  JP   (ix)   
0AF3                CHARS:       
0AF3   21 01 00               LD   hl,1   
0AF6                CHARS1:      
0AF6   22 E6 4D               LD   (vDataWidth),hl   
0AF9   DD E9                  JP   (ix)   
0AFB                DECIMAL:      
0AFB   21 0A 00               LD   hl,10   
0AFE                DECIMAL1:      
0AFE   22 E8 4D               LD   (vNumBase),hl   
0B01   DD E9                  JP   (ix)   
0B03                HEXADECIMAL:      
0B03   21 10 00               LD   hl,16   
0B06   C3 FE 0A               JP   decimal1   
0B09                             ; Z80 port input
0B09                             ; port -- value
0B09                INPUT:       
0B09   E1                     POP   hl   
0B0A   59                     LD   e,c   ; save IP
0B0B   4D                     LD   c,l   
0B0C   ED 68                  IN   l,(c)   
0B0E   26 00                  LD   h,0   
0B10   4B                     LD   c,e   ; restore IP
0B11   E5                     PUSH   hl   
0B12   DD E9                  JP   (ix)   
0B14                KEY:         
0B14   CD 81 00               CALL   getchar   
0B17   26 00                  LD   h,0   
0B19   6F                     LD   l,a   
0B1A   E5                     PUSH   hl   
0B1B   DD E9                  JP   (ix)   
0B1D                             ; Z80 port output
0B1D                             ; value port --
0B1D                OUTPUT:      
0B1D   E1                     POP   hl   
0B1E   59                     LD   e,c   ; save IP
0B1F   4D                     LD   c,l   
0B20   E1                     POP   hl   
0B21   ED 69                  OUT   (c),l   
0B23   4B                     LD   c,e   ; restore IP
0B24   DD E9                  JP   (ix)   
0B26                NUMBERS:      
0B26   21 02 00               LD   hl,2   
0B29   C3 F6 0A               JP   chars1   
0B2C                             ; 
0B2C                             ; keyIter:
0B2C                             ;     call go
0B2C                             ;     .cstr "{/k /t}"             ; block
0B2C                             ; fromIter:
0B2C                             ;     call go
0B2C                             ;     dw NUL                      ; NUL closure
0B2C                             ;     dw $+4
0B2C                             ;     dw args1A0L
0B2C                             ;     .cstr "{[$a [/f /f /f 0]] fromIter1 /pa}"                  ; block
0B2C                             ; fromIter1:
0B2C                             ;     call go
0B2C                             ;     dw NUL                      ; NUL closure
0B2C                             ;     dw $+4
0B2C                             ;     dw args2A0L
0B2C                             ;     .cstr "{[$a [/f /f /f 0]] fromIter1 /pa}"                  ; block
0B2C                FILTER:      
0B2C                MAP:         
0B2C                SCAN:        
0B2C   DD E9                  JP   (ix)   
0B2E                             ;*******************************************************************
0B2E                             ; reusable arglists
0B2E                             ;*******************************************************************
0B2E                ARGS1A0L:      ; one arg zero locals
0B2E   00                     DB   0   
0B2F   01 61                  .PSTR   "a"   
0B31                ARGS1A2L:      ; one arg two locals
0B31   02                     DB   2   
0B32   03 61 62 63            .PSTR   "abc"   
0B36                             ;*******************************************************************
0B36                             ; general routines
0B36                             ;*******************************************************************
0B36                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0B36                FLUSHBUFFER:      
0B36   F5                     PUSH   af   
0B37   D5                     PUSH   de   
0B38   E5                     PUSH   hl   
0B39   2A EC 4D               LD   hl,(vBufPtr)   
0B3C   11 00 4C               LD   de,BUF   
0B3F   ED 53 EC 4D            LD   (vBufPtr),de   
0B43   B7                     OR   a   
0B44   ED 52                  SBC   hl,de   
0B46   CD 90 0A               CALL   printChars2   
0B49   E1                     POP   hl   
0B4A   D1                     POP   de   
0B4B   F1                     POP   af   
0B4C   C9                     RET      
0B4D                             ; followed by a table
0B4D                             ; db char
0B4D                             ; dw addr
0B4D                             ; the final item must have char == NUL
0B4D                JUMPTABLE:      
0B4D   03                     INC   bc   
0B4E   E1                     POP   hl   
0B4F                JUMPTABLE0:      
0B4F   AF                     XOR   a   
0B50   BE                     CP   (hl)   
0B51   28 09                  JR   z,jumpTable1   
0B53   0A                     LD   a,(bc)   
0B54   BE                     CP   (hl)   
0B55   28 06                  JR   z,jumpTable2   
0B57   23                     INC   hl   
0B58   23                     INC   hl   
0B59   23                     INC   hl   
0B5A   18 F3                  JR   jumpTable0   
0B5C                JUMPTABLE1:      
0B5C   0B                     DEC   bc   
0B5D                JUMPTABLE2:      
0B5D   23                     INC   hl   
0B5E   5E                     LD   e,(hl)   
0B5F   23                     INC   hl   
0B60   56                     LD   d,(hl)   
0B61   EB                     EX   de,hl   
0B62   E9                     JP   (hl)   
0B63                PRTSTR0:      
0B63   CD 85 00               CALL   putchar   
0B66   23                     INC   hl   
0B67                PRTSTR:      
0B67   7E                     LD   a,(hl)   
0B68   B7                     OR   a   
0B69   20 F8                  JR   nz,prtstr0   
0B6B   C9                     RET      
0B6C                             ; **************************************************************************
0B6C                             ; calculate nesting value
0B6C                             ; a is char to be tested,
0B6C                             ; e is the nesting value (initially 0)
0B6C                             ; e is increased by ( and [
0B6C                             ; e is decreased by ) and ]
0B6C                             ; e has its bit 7 toggled by `
0B6C                             ; limited to 127 levels
0B6C                             ; **************************************************************************
0B6C                NESTING:      
0B6C   FE 22                  CP   DQUOTE   ; quote char
0B6E   28 06                  JR   z,nesting0   
0B70   FE 60                  CP   "`"   ; quote char
0B72   28 02                  JR   z,nesting0   
0B74   18 0A                  JR   nesting1   
0B76                NESTING0:      
0B76   CB 7B                  BIT   7,e   
0B78   28 03                  JR   z,nesting1a   
0B7A   CB BB                  RES   7,e   
0B7C   C9                     RET      
0B7D                NESTING1A:      
0B7D   CB FB                  SET   7,e   
0B7F   C9                     RET      
0B80                NESTING1:      
0B80   CB 7B                  BIT   7,e   
0B82   C0                     RET   nz   
0B83   FE 7B                  CP   "{"   
0B85   28 08                  JR   z,nesting2   
0B87   FE 5B                  CP   "["   
0B89   28 04                  JR   z,nesting2   
0B8B   FE 28                  CP   "("   
0B8D   20 02                  JR   nz,nesting3   
0B8F                NESTING2:      
0B8F   1C                     INC   e   
0B90   C9                     RET      
0B91                NESTING3:      
0B91   FE 7D                  CP   "}"   
0B93   28 07                  JR   z,nesting4   
0B95   FE 5D                  CP   "]"   
0B97   28 03                  JR   z,nesting4   
0B99   FE 29                  CP   ")"   
0B9B   C0                     RET   nz   
0B9C                NESTING4:      
0B9C   1D                     DEC   e   
0B9D   C9                     RET      
0B9E                PROMPT:      
0B9E   CD AE 0B               CALL   printStr   
0BA1   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0BA6   C9                     RET      
0BA7                CRLF:        
0BA7   CD AE 0B               CALL   printStr   
0BAA   0D 0A 00               .CSTR   "\r\n"   
0BAD   C9                     RET      
0BAE                             ; prints a null teminated string
0BAE                             ; the string should be immediately following the call
0BAE                PRINTSTR:      
0BAE   E3                     EX   (sp),hl   ; swap			
0BAF   CD 67 0B               CALL   prtstr   
0BB2   23                     INC   hl   ; inc past NUL
0BB3   E3                     EX   (sp),hl   ; put it back	
0BB4   C9                     RET      
0BB5                TITLESTR:      
0BB5   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0BC9                INIT:        
0BC9   21 B5 0B               LD   hl,titleStr   
0BCC   11 0A 4E               LD   de,titleBuf   
0BCF   06 14                  LD   b,20   
0BD1                INIT1:       
0BD1   1A                     LD   a,(de)   
0BD2   BE                     CP   (hl)   
0BD3   20 17                  JR   nz,coldBoot0   
0BD5   13                     INC   de   
0BD6   23                     INC   hl   
0BD7   10 F8                  DJNZ   init1   
0BD9                WARMINIT:      
0BD9   ED 4B F6 4D            LD   bc,(vSavedIP)   ; restore IP
0BDD   ED 7B F8 4D            LD   sp,(vSavedSP)   ; restore SP
0BE1   DD 2A FA 4D            LD   ix,(vSavedNext)   ; restore Next
0BE5   FD 2A FC 4D            LD   iy,(vSavedBP)   ; restore BP
0BE9   C3 23 0C               JP   start1   
0BEC                COLDBOOT0:      
0BEC   21 B5 0B               LD   hl,titleStr   ; copy titleStr to titleBuf
0BEF   11 0A 4E               LD   de,titleBuf   
0BF2   06 14                  LD   b,20   
0BF4   ED B0                  LDIR      
0BF6                COLDINIT:      
0BF6   21 80 01               LD   hl,isysVars   
0BF9   11 E6 4D               LD   de,sysVars   
0BFC   01 10 00               LD   bc,8 * 2   
0BFF   ED B0                  LDIR      
0C01   21 00 4D               LD   hl,vars   ; 52 vars LO HI
0C04   06 34                  LD   b,26*2   
0C06   AF                     XOR   a   
0C07                COLDBOOT1:      
0C07   77                     LD   (hl),a   
0C08   23                     INC   hl   
0C09   10 FC                  DJNZ   coldBoot1   
0C0B   DD 2A EE 4D            LD   ix,(vNext)   
0C0F   FD 21 00 4B            LD   iy,STACK   
0C13   C9                     RET      
0C14                COLDSTART:      
0C14   31 00 4B               LD   sp,STACK   
0C17   CD EC 0B               CALL   coldBoot0   
0C1A   C3 23 0C               JP   start1   
0C1D                START:       
0C1D   31 00 4B               LD   sp,STACK   ; start Monty
0C20   CD C9 0B               CALL   init   ; setups
0C23                START1:      
0C23   21 0A 4E               LD   hl,titleBuf   
0C26   CD 67 0B               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0C29                INTERPRET:      
0C29   CD 36 0B               CALL   flushBuffer   
0C2C   CD 9E 0B               CALL   prompt   
0C2F   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0C32   21 00 4B               LD   hl,TIB   
0C35   22 EA 4D               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0C38                INTERPRET2:      ; calculate nesting
0C38   1E 00                  LD   e,0   ; initilize nesting value
0C3A   C5                     PUSH   bc   ; save offset into TIB,
0C3B                             ; bc is also the count of chars in TIB
0C3B   21 00 4B               LD   hl,TIB   ; hl is start of TIB
0C3E   18 0B                  JR   interpret4   
0C40                INTERPRET3:      
0C40   3E 33                  LD   a,"3"   
0C42   CD 85 00               CALL   putchar   
0C45   7E                     LD   a,(hl)   ; a = char in TIB
0C46   23                     INC   hl   ; inc pointer into TIB
0C47   0B                     DEC   bc   ; dec count of chars in TIB
0C48   CD 6C 0B               CALL   nesting   ; update nesting value
0C4B                INTERPRET4:      
0C4B   79                     LD   a,c   ; is count zero?
0C4C   B0                     OR   b   
0C4D   20 F1                  JR   nz,interpret3   ; if not loop
0C4F   C1                     POP   bc   ; restore offset into TIB
0C50                INTERPRET5:      
0C50   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0C53   FE 20                  CP   $20   ; compare to space
0C55   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0C57   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0C59                             ; ???? NEEDED?
0C59   28 3B                  JR   z,interpret8   
0C5B   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0C5D   28 24                  JR   z,interpret7   ; if anything else its macro/control
0C5F   FE 05                  CP   CTRL_E   
0C61   CA F4 0C               JP   z,edit_   
0C64   FE 08                  CP   CTRL_H   
0C66   CA E4 0C               JP   z,backSpace_   
0C69   FE 0A                  CP   CTRL_J   
0C6B   CA 0C 0D               JP   z,reEdit_   
0C6E   FE 13                  CP   CTRL_S   
0C70   CA 0F 0D               JP   z,printStack_   
0C73                             ; DB     lsb(edit_)       ; ENQ ^E  5
0C73                             ; DB     lsb(reedit_)     ; LF  ^J 10
0C73                             ; DB     lsb(list_)       ; FF  ^L 12
0C73                             ; DB     lsb(printStack_) ; DLE ^P 16
0C73                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0C73                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0C73                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0C73                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0C73                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0C73                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0C73                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0C73                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0C73                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0C73                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0C73                INTERPRET5A:      
0C73                             ; ld (vTIBPtr),bc
0C73                             ; ld bc,(vTIBPtr)
0C73   18 C3                  JR   interpret2   
0C75                INTERPRET6:      
0C75   21 00 4B               LD   hl,TIB   
0C78   09                     ADD   hl,bc   
0C79   77                     LD   (hl),a   ; store the character in textbuf
0C7A   03                     INC   bc   
0C7B   CD 85 00               CALL   putchar   ; echo character to screen
0C7E   CD 6C 0B               CALL   nesting   
0C81   18 CD                  JR   interpret5   ; wait for next character
0C83                INTERPRET7:      
0C83   21 00 4B               LD   hl,TIB   
0C86   09                     ADD   hl,bc   
0C87   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0C89   23                     INC   hl   
0C8A   36 0A                  LD   (hl),"\n"   
0C8C   23                     INC   hl   
0C8D   03                     INC   bc   
0C8E   03                     INC   bc   
0C8F   CD A7 0B               CALL   crlf   ; echo character to screen
0C92   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0C93   B7                     OR   a   
0C94   20 BA                  JR   nz,interpret5   
0C96                INTERPRET8:      
0C96   21 00 4B               LD   hl,TIB   
0C99   09                     ADD   hl,bc   
0C9A   22 EA 4D               LD   (vTIBPtr),hl   
0C9D   01 00 4B               LD   bc,TIB   
0CA0   ED 43 F6 4D            LD   (vSavedIP),bc   ; save IP
0CA4   ED 73 F8 4D            LD   (vSavedSP),sp   ; save SP
0CA8   DD 22 FA 4D            LD   (vSavedNext),ix   ; save Next
0CAC   FD 22 FC 4D            LD   (vSavedBP),iy   ; save BP
0CB0   0B                     DEC   bc   
0CB1                NEXT:        
0CB1   03                     INC   bc   ; Increment the IP
0CB2   0A                     LD   a,(bc)   ; Get the next character and dispatch
0CB3   FE 20                  CP   " "   ; whitespace?
0CB5   28 FA                  JR   z,next   ; space? ignore
0CB7   38 09                  JR   c,next1   
0CB9   D6 20                  SUB   " "   
0CBB   6F                     LD   l,a   ; index into table
0CBC   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0CBE   6E                     LD   l,(hl)   ; get low jump address
0CBF   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0CC1   E9                     JP   (hl)   ; Jump to routine
0CC2                NEXT1:       
0CC2   FE 00                  CP   NUL   ; end of input string?
0CC4   28 03                  JR   z,exit   
0CC6   C3 29 0C               JP   interpret   ; no, other whitespace, macros?
0CC9                EXIT:        
0CC9   03                     INC   bc   
0CCA   60 69                  LD   hl,bc   
0CCC   E9                     JP   (hl)   
0CCD                RUN:         
0CCD   C1                     POP   bc   
0CCE   0B                     DEC   bc   
0CCF   DD E9                  JP   (ix)   
0CD1                ERROR:       
0CD1   CD CD 0C               CALL   run   
0CD4   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQUOTE,"Error ",DQUOTE,".s .",0   
0CE1   C3 29 0C               JP   interpret   
0CE4                BACKSPACE_:      
0CE4   79                     LD   a,c   
0CE5   B0                     OR   b   
0CE6   CA 38 0C               JP   z,interpret2   
0CE9   0B                     DEC   bc   
0CEA   CD AE 0B               CALL   printStr   
0CED   08 20 08 00            .CSTR   "\b \b"   
0CF1   C3 38 0C               JP   interpret2   
0CF4                             ; edit
0CF4                EDIT_:       
0CF4   CD CD 0C               CALL   run   
0CF7   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0D09   C3 29 0C               JP   interpret   
0D0C                REEDIT_:      
0D0C   C3 29 0C               JP   interpret   
0D0F                PRINTSTACK_:      
0D0F   CD CD 0C               CALL   run   
0D12   2F 70 6B 00            .CSTR   "/pk"   
0D16   C3 29 0C               JP   interpret   
0D19                             ; editDef:
0D19                             ;     pop hl                      ; pop ret address
0D19                             ;     ex (sp),hl                  ; swap with TOS
0D19                             ;     push hl                     ; dup TOS
0D19                             ;     ld a,l                      ; a = ident
0D19                             ;     ld de,TIB                   ; de = start of TIB
0D19                             ;     ld (vTIBPtr),de             ; update TIB*
0D19                             ;     push ix                     ; save NEXT
0D19                             ;     ld ix,editDef0              ; NEXT = editDef0
0D19                             ;     jp lookupRef                ; convert letter into address
0D19                             ; editDef0:
0D19                             ;     ld e,(hl)                   ; de = (hl++)
0D19                             ;     inc hl
0D19                             ;     ld d,(hl)
0D19                             ;     ld a,d                      ; de == 0 ?
0D19                             ;     or e
0D19                             ;     jr z,editDef4
0D19                             ;     ld ix,editDef3              ; NEXT = editDef3
0D19                             ;     ex de,hl
0D19                             ;     ld a,(hl)
0D19                             ;     cp "{"
0D19                             ;     jr nz,editDef1
0D19                             ;     jp editBlock0               ; convert letter into address
0D19                             ; editDef1:
0D19                             ;     cp "("
0D19                             ;     jr nz,editDef2
0D19                             ;     jp editBlock0               ; convert letter into address
0D19                             ; editDef2:
0D19                             ;     jp editLambda
0D19                             ; editDef3:
0D19                             ;     ld a," "                    ; write assign
0D19                             ;     call writeChar
0D19                             ;     pop hl                      ; a = ident
0D19                             ;     ld a,l
0D19                             ;     call writeChar
0D19                             ;     ld a,"="                    ; write assign
0D19                             ;     call writeChar
0D19                             ;     ld ix,editDef4              ; NEXT = editDef4
0D19                             ;     jp printTIB
0D19                             ; editDef4:
0D19                             ;     pop ix                      ; restore NEXT
0D19                             ;     jp (ix)
0D19                             ; writeChar:
0D19                             ;     ld de,(vTIBPtr)             ; de = TIB*
0D19                             ;     ld (de),a                   ; write ident
0D19                             ;     inc de
0D19                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0D19                             ;     ret
0D19                             ; ; printTIB
0D19                             ; printTIB:
0D19                             ;     ld hl,(vTIBPtr)
0D19                             ;     ld de,TIB
0D19                             ;     or a
0D19                             ;     sbc hl,de
0D19                             ;     jp printTIB2
0D19                             ; printTIB1:
0D19                             ;     ld a,(de)
0D19                             ;     call putchar
0D19                             ; printTIB2:
0D19                             ;     ld a,l
0D19                             ;     or h
0D19                             ;     jr nz,printTIB1
0D19                             ;     jp (ix)
0D19                             ; editBlock:
0D19                             ;     pop hl                      ; hl = block*
0D19                             ; editBlock0:
0D19                             ;     push ix                     ; save next
0D19                             ;     push hl                     ; push block*
0D19                             ;     push hl                     ; push block*
0D19                             ;     ld ix,(editBlock2)
0D19                             ;     jp blockLength
0D19                             ; editBlock1:
0D19                             ;     pop hl                      ; bc = length, (sp) = IP
0D19                             ;     pop de                      ; de = block*
0D19                             ;     ld a,l
0D19                             ;     or h
0D19                             ;     jr z,editBlock2
0D19                             ;     push bc
0D19                             ;     ld bc,hl
0D19                             ;     ex de,hl                    ; hl = block*
0D19                             ;     ld de,(vTIBPtr)              ; de = TIB*
0D19                             ;     ldir                        ; copy block to TIB
0D19                             ;     ld (vTIBPtr),de              ; save TIB*
0D19                             ;     pop bc
0D19                             ; editBlock2:
0D19                             ;     pop ix                      ; restore next
0D19                             ;     jp (ix)
0D19                             ; editLambda:
0D19                             ;     jp (ix)
0D19                             ; editArray:
0D19                             ;     jp (ix)
0D19                             ; editArglist:
0D19                             ;     jp (ix)
0D19                             ; ; blockLength
0D19                             ; ; addr1 -- length
0D19                             ; blockLength:
0D19                             ;     pop hl                      ; block*
0D19                             ;     push hl                     ; save block*
0D19                             ;     inc hl                      ; skip first char
0D19                             ;     ld d,1                      ; increase nesting
0D19                             ; blockLength1:                   ; Skip to end of definition
0D19                             ;     ld a,(hl)                   ; Get the next character
0D19                             ;     inc hl                      ; Point to next character
0D19                             ;     cp " " + 1                  ; ignore whitespace
0D19                             ;     jr c,blockLength1
0D19                             ;     cp ")"
0D19                             ;     jr z,blockLength4
0D19                             ;     cp "}"
0D19                             ;     jr z,blockLength4
0D19                             ;     cp "]"
0D19                             ;     jr z,blockLength4
0D19                             ;     cp "("
0D19                             ;     jr z,blockLength2
0D19                             ;     cp "{"
0D19                             ;     jr z,blockLength2
0D19                             ;     cp "["
0D19                             ;     jr z,blockLength2
0D19                             ;     cp "'"
0D19                             ;     jr z,blockLength3
0D19                             ;     cp "`"
0D19                             ;     jr z,blockLength3
0D19                             ;     cp DQUOTE
0D19                             ;     jr z,blockLength3
0D19                             ;     jr blockLength1
0D19                             ; blockLength2:
0D19                             ;     inc d
0D19                             ;     jr blockLength1
0D19                             ; blockLength4:
0D19                             ;     dec d
0D19                             ;     jr nz, blockLength1         ; get the next element
0D19                             ; blockLength3:
0D19                             ;     ld a,$80
0D19                             ;     xor d
0D19                             ;     ld d,a
0D19                             ;     jr nz, blockLength1
0D19                             ;     pop hl                      ; hl = block*
0D19                             ;     or a
0D19                             ;     sbc hl,de
0D19                             ;     push hl
0D19                             ;     jp (ix)
0D19                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0D19                             ; \a start of stack \#3 depth \b base \$ prompt
0D19                             ; DW dStack               ; a vS0 start of datastack			
0D19                             ; DW FALSE                ; b vBase16
0D19                             ; DW 0                    ; c vTIBPtr an offset to the tib
0D19                             ; DW 0                    ; d
0D19                             ; DW 65                   ; e vLastDef "A" last command u defined
0D19                             ; DW 0                    ; f
0D19                             ; DW page6                ; g 256 bytes limits
0D19                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0D19                          ALIGN   $100   
0E00                TESTSSTART:      
0E00                             ; test 00bbRFFVT1RFLDAwc3NJa0VpISxEUVVPVEUsMDBzc0lpNXpJQzlqTDNaQ0lEQWpJZz09IQ==, 65
0E00                             ; test 00bbMDBzc0lpOGkhLDAwc3NJbVlpIQ==, false
0E00                             ; ; test ":ab{%b %a-}/px F= 1 2F^ .", false
0E00                             ; call printStr
0E00                             ; .cstr "Done!"
0E00                             ; HALT
0E00                             ; 
0E00                          ;*Macro unroll:  test "/f", false
0E00   31 00 4B               LD   SP,STACK   
0E03   CD F6 0B               CALL   coldInit   
0E06   CD 0A 49               CALL   execStr   
0E09   2F 66 00               DB   "/f",0   
0E0C   CD 36 0B               CALL   flushBuffer   
0E0F   E1                     POP   HL   
0E10   E5                     PUSH   HL   
0E11   11 00 00               LD   DE,false   
0E14   B7                     OR   A   
0E15   ED 52                  SBC   HL,DE   
0E17   7D                     LD   A,L   
0E18   B4                     OR   H   
0E19   CA 76 0E               JP   Z,expectM_2783S25   
0E1C   CD AE 0B               CALL   printStr   
0E1F   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0E28   CD AE 0B               CALL   printStr   
0E2B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E3A   21 00 00               LD   hl,false   
0E3D   E5                     PUSH   hl   
0E3E   E5                     PUSH   hl   
0E3F   CD CD 0C               CALL   run   
0E42   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0E4A   CD 36 0B               CALL   flushBuffer   
0E4D   CD AE 0B               CALL   printStr   
0E50   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E5D   E1                     POP   hl   
0E5E   E5                     PUSH   hl   
0E5F   E5                     PUSH   hl   
0E60   CD CD 0C               CALL   run   
0E63   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0E72   CD 36 0B               CALL   flushBuffer   
0E75   76                     HALT      
0E76                EXPECTM_2783S25:      
0E76   E1                     POP   HL   
0E77                          ;*Macro unroll:  test "/t", true
0E77   31 00 4B               LD   SP,STACK   
0E7A   CD F6 0B               CALL   coldInit   
0E7D   CD 0A 49               CALL   execStr   
0E80   2F 74 00               DB   "/t",0   
0E83   CD 36 0B               CALL   flushBuffer   
0E86   E1                     POP   HL   
0E87   E5                     PUSH   HL   
0E88   11 FF FF               LD   DE,true   
0E8B   B7                     OR   A   
0E8C   ED 52                  SBC   HL,DE   
0E8E   7D                     LD   A,L   
0E8F   B4                     OR   H   
0E90   CA ED 0E               JP   Z,expectM_2784S26   
0E93   CD AE 0B               CALL   printStr   
0E96   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0E9F   CD AE 0B               CALL   printStr   
0EA2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EB1   21 FF FF               LD   hl,true   
0EB4   E5                     PUSH   hl   
0EB5   E5                     PUSH   hl   
0EB6   CD CD 0C               CALL   run   
0EB9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0EC1   CD 36 0B               CALL   flushBuffer   
0EC4   CD AE 0B               CALL   printStr   
0EC7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0ED4   E1                     POP   hl   
0ED5   E5                     PUSH   hl   
0ED6   E5                     PUSH   hl   
0ED7   CD CD 0C               CALL   run   
0EDA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0EE9   CD 36 0B               CALL   flushBuffer   
0EEC   76                     HALT      
0EED                EXPECTM_2784S26:      
0EED   E1                     POP   HL   
0EEE                          ;*Macro unroll:  test "1", 1
0EEE   31 00 4B               LD   SP,STACK   
0EF1   CD F6 0B               CALL   coldInit   
0EF4   CD 0A 49               CALL   execStr   
0EF7   31 00                  DB   "1",0   
0EF9   CD 36 0B               CALL   flushBuffer   
0EFC   E1                     POP   HL   
0EFD   E5                     PUSH   HL   
0EFE   11 01 00               LD   DE,1   
0F01   B7                     OR   A   
0F02   ED 52                  SBC   HL,DE   
0F04   7D                     LD   A,L   
0F05   B4                     OR   H   
0F06   CA 62 0F               JP   Z,expectM_2785S27   
0F09   CD AE 0B               CALL   printStr   
0F0C   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0F14   CD AE 0B               CALL   printStr   
0F17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F26   21 01 00               LD   hl,1   
0F29   E5                     PUSH   hl   
0F2A   E5                     PUSH   hl   
0F2B   CD CD 0C               CALL   run   
0F2E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0F36   CD 36 0B               CALL   flushBuffer   
0F39   CD AE 0B               CALL   printStr   
0F3C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F49   E1                     POP   hl   
0F4A   E5                     PUSH   hl   
0F4B   E5                     PUSH   hl   
0F4C   CD CD 0C               CALL   run   
0F4F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0F5E   CD 36 0B               CALL   flushBuffer   
0F61   76                     HALT      
0F62                EXPECTM_2785S27:      
0F62   E1                     POP   HL   
0F63                          ;*Macro unroll:  test "2", 2
0F63   31 00 4B               LD   SP,STACK   
0F66   CD F6 0B               CALL   coldInit   
0F69   CD 0A 49               CALL   execStr   
0F6C   32 00                  DB   "2",0   
0F6E   CD 36 0B               CALL   flushBuffer   
0F71   E1                     POP   HL   
0F72   E5                     PUSH   HL   
0F73   11 02 00               LD   DE,2   
0F76   B7                     OR   A   
0F77   ED 52                  SBC   HL,DE   
0F79   7D                     LD   A,L   
0F7A   B4                     OR   H   
0F7B   CA D7 0F               JP   Z,expectM_2786S28   
0F7E   CD AE 0B               CALL   printStr   
0F81   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0F89   CD AE 0B               CALL   printStr   
0F8C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F9B   21 02 00               LD   hl,2   
0F9E   E5                     PUSH   hl   
0F9F   E5                     PUSH   hl   
0FA0   CD CD 0C               CALL   run   
0FA3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
0FAB   CD 36 0B               CALL   flushBuffer   
0FAE   CD AE 0B               CALL   printStr   
0FB1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FBE   E1                     POP   hl   
0FBF   E5                     PUSH   hl   
0FC0   E5                     PUSH   hl   
0FC1   CD CD 0C               CALL   run   
0FC4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
0FD3   CD 36 0B               CALL   flushBuffer   
0FD6   76                     HALT      
0FD7                EXPECTM_2786S28:      
0FD7   E1                     POP   HL   
0FD8                          ;*Macro unroll:  test "1", 1
0FD8   31 00 4B               LD   SP,STACK   
0FDB   CD F6 0B               CALL   coldInit   
0FDE   CD 0A 49               CALL   execStr   
0FE1   31 00                  DB   "1",0   
0FE3   CD 36 0B               CALL   flushBuffer   
0FE6   E1                     POP   HL   
0FE7   E5                     PUSH   HL   
0FE8   11 01 00               LD   DE,1   
0FEB   B7                     OR   A   
0FEC   ED 52                  SBC   HL,DE   
0FEE   7D                     LD   A,L   
0FEF   B4                     OR   H   
0FF0   CA 4C 10               JP   Z,expectM_2787S29   
0FF3   CD AE 0B               CALL   printStr   
0FF6   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0FFE   CD AE 0B               CALL   printStr   
1001   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1010   21 01 00               LD   hl,1   
1013   E5                     PUSH   hl   
1014   E5                     PUSH   hl   
1015   CD CD 0C               CALL   run   
1018   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1020   CD 36 0B               CALL   flushBuffer   
1023   CD AE 0B               CALL   printStr   
1026   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1033   E1                     POP   hl   
1034   E5                     PUSH   hl   
1035   E5                     PUSH   hl   
1036   CD CD 0C               CALL   run   
1039   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1048   CD 36 0B               CALL   flushBuffer   
104B   76                     HALT      
104C                EXPECTM_2787S29:      
104C   E1                     POP   HL   
104D                          ;*Macro unroll:  test "0", 0
104D   31 00 4B               LD   SP,STACK   
1050   CD F6 0B               CALL   coldInit   
1053   CD 0A 49               CALL   execStr   
1056   30 00                  DB   "0",0   
1058   CD 36 0B               CALL   flushBuffer   
105B   E1                     POP   HL   
105C   E5                     PUSH   HL   
105D   11 00 00               LD   DE,0   
1060   B7                     OR   A   
1061   ED 52                  SBC   HL,DE   
1063   7D                     LD   A,L   
1064   B4                     OR   H   
1065   CA C1 10               JP   Z,expectM_2788S30   
1068   CD AE 0B               CALL   printStr   
106B   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
1073   CD AE 0B               CALL   printStr   
1076   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1085   21 00 00               LD   hl,0   
1088   E5                     PUSH   hl   
1089   E5                     PUSH   hl   
108A   CD CD 0C               CALL   run   
108D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1095   CD 36 0B               CALL   flushBuffer   
1098   CD AE 0B               CALL   printStr   
109B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10A8   E1                     POP   hl   
10A9   E5                     PUSH   hl   
10AA   E5                     PUSH   hl   
10AB   CD CD 0C               CALL   run   
10AE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
10BD   CD 36 0B               CALL   flushBuffer   
10C0   76                     HALT      
10C1                EXPECTM_2788S30:      
10C1   E1                     POP   HL   
10C2                          ;*Macro unroll:  test "10", 10
10C2   31 00 4B               LD   SP,STACK   
10C5   CD F6 0B               CALL   coldInit   
10C8   CD 0A 49               CALL   execStr   
10CB   31 30 00               DB   "10",0   
10CE   CD 36 0B               CALL   flushBuffer   
10D1   E1                     POP   HL   
10D2   E5                     PUSH   HL   
10D3   11 0A 00               LD   DE,10   
10D6   B7                     OR   A   
10D7   ED 52                  SBC   HL,DE   
10D9   7D                     LD   A,L   
10DA   B4                     OR   H   
10DB   CA 38 11               JP   Z,expectM_2789S31   
10DE   CD AE 0B               CALL   printStr   
10E1   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
10EA   CD AE 0B               CALL   printStr   
10ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10FC   21 0A 00               LD   hl,10   
10FF   E5                     PUSH   hl   
1100   E5                     PUSH   hl   
1101   CD CD 0C               CALL   run   
1104   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
110C   CD 36 0B               CALL   flushBuffer   
110F   CD AE 0B               CALL   printStr   
1112   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
111F   E1                     POP   hl   
1120   E5                     PUSH   hl   
1121   E5                     PUSH   hl   
1122   CD CD 0C               CALL   run   
1125   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1134   CD 36 0B               CALL   flushBuffer   
1137   76                     HALT      
1138                EXPECTM_2789S31:      
1138   E1                     POP   HL   
1139                          ;*Macro unroll:  test "123", 123
1139   31 00 4B               LD   SP,STACK   
113C   CD F6 0B               CALL   coldInit   
113F   CD 0A 49               CALL   execStr   
1142   31 32 33 00            DB   "123",0   
1146   CD 36 0B               CALL   flushBuffer   
1149   E1                     POP   HL   
114A   E5                     PUSH   HL   
114B   11 7B 00               LD   DE,123   
114E   B7                     OR   A   
114F   ED 52                  SBC   HL,DE   
1151   7D                     LD   A,L   
1152   B4                     OR   H   
1153   CA B1 11               JP   Z,expectM_2790S32   
1156   CD AE 0B               CALL   printStr   
1159   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
1163   CD AE 0B               CALL   printStr   
1166   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1175   21 7B 00               LD   hl,123   
1178   E5                     PUSH   hl   
1179   E5                     PUSH   hl   
117A   CD CD 0C               CALL   run   
117D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1185   CD 36 0B               CALL   flushBuffer   
1188   CD AE 0B               CALL   printStr   
118B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1198   E1                     POP   hl   
1199   E5                     PUSH   hl   
119A   E5                     PUSH   hl   
119B   CD CD 0C               CALL   run   
119E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
11AD   CD 36 0B               CALL   flushBuffer   
11B0   76                     HALT      
11B1                EXPECTM_2790S32:      
11B1   E1                     POP   HL   
11B2                          ;*Macro unroll:  test "-1",-1
11B2   31 00 4B               LD   SP,STACK   
11B5   CD F6 0B               CALL   coldInit   
11B8   CD 0A 49               CALL   execStr   
11BB   2D 31 00               DB   "-1",0   
11BE   CD 36 0B               CALL   flushBuffer   
11C1   E1                     POP   HL   
11C2   E5                     PUSH   HL   
11C3   11 FF FF               LD   DE,-1   
11C6   B7                     OR   A   
11C7   ED 52                  SBC   HL,DE   
11C9   7D                     LD   A,L   
11CA   B4                     OR   H   
11CB   CA 28 12               JP   Z,expectM_2791S33   
11CE   CD AE 0B               CALL   printStr   
11D1   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
11DA   CD AE 0B               CALL   printStr   
11DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11EC   21 FF FF               LD   hl,-1   
11EF   E5                     PUSH   hl   
11F0   E5                     PUSH   hl   
11F1   CD CD 0C               CALL   run   
11F4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
11FC   CD 36 0B               CALL   flushBuffer   
11FF   CD AE 0B               CALL   printStr   
1202   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
120F   E1                     POP   hl   
1210   E5                     PUSH   hl   
1211   E5                     PUSH   hl   
1212   CD CD 0C               CALL   run   
1215   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1224   CD 36 0B               CALL   flushBuffer   
1227   76                     HALT      
1228                EXPECTM_2791S33:      
1228   E1                     POP   HL   
1229                          ;*Macro unroll:  test "''", 0
1229   31 00 4B               LD   SP,STACK   
122C   CD F6 0B               CALL   coldInit   
122F   CD 0A 49               CALL   execStr   
1232   27 27 00               DB   "''",0   
1235   CD 36 0B               CALL   flushBuffer   
1238   E1                     POP   HL   
1239   E5                     PUSH   HL   
123A   11 00 00               LD   DE,0   
123D   B7                     OR   A   
123E   ED 52                  SBC   HL,DE   
1240   7D                     LD   A,L   
1241   B4                     OR   H   
1242   CA 9F 12               JP   Z,expectM_2792S34   
1245   CD AE 0B               CALL   printStr   
1248   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
1251   CD AE 0B               CALL   printStr   
1254   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1263   21 00 00               LD   hl,0   
1266   E5                     PUSH   hl   
1267   E5                     PUSH   hl   
1268   CD CD 0C               CALL   run   
126B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1273   CD 36 0B               CALL   flushBuffer   
1276   CD AE 0B               CALL   printStr   
1279   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1286   E1                     POP   hl   
1287   E5                     PUSH   hl   
1288   E5                     PUSH   hl   
1289   CD CD 0C               CALL   run   
128C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
129B   CD 36 0B               CALL   flushBuffer   
129E   76                     HALT      
129F                EXPECTM_2792S34:      
129F   E1                     POP   HL   
12A0                          ;*Macro unroll:  test "'a'", $61
12A0   31 00 4B               LD   SP,STACK   
12A3   CD F6 0B               CALL   coldInit   
12A6   CD 0A 49               CALL   execStr   
12A9   27 61 27 00            DB   "'a'",0   
12AD   CD 36 0B               CALL   flushBuffer   
12B0   E1                     POP   HL   
12B1   E5                     PUSH   HL   
12B2   11 61 00               LD   DE,$61   
12B5   B7                     OR   A   
12B6   ED 52                  SBC   HL,DE   
12B8   7D                     LD   A,L   
12B9   B4                     OR   H   
12BA   CA 18 13               JP   Z,expectM_2793S35   
12BD   CD AE 0B               CALL   printStr   
12C0   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
12CA   CD AE 0B               CALL   printStr   
12CD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12DC   21 61 00               LD   hl,$61   
12DF   E5                     PUSH   hl   
12E0   E5                     PUSH   hl   
12E1   CD CD 0C               CALL   run   
12E4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
12EC   CD 36 0B               CALL   flushBuffer   
12EF   CD AE 0B               CALL   printStr   
12F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12FF   E1                     POP   hl   
1300   E5                     PUSH   hl   
1301   E5                     PUSH   hl   
1302   CD CD 0C               CALL   run   
1305   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1314   CD 36 0B               CALL   flushBuffer   
1317   76                     HALT      
1318                EXPECTM_2793S35:      
1318   E1                     POP   HL   
1319                          ;*Macro unroll:  test "'\\''", $27
1319   31 00 4B               LD   SP,STACK   
131C   CD F6 0B               CALL   coldInit   
131F   CD 0A 49               CALL   execStr   
1322   27 5C 27 27 00         DB   "'\\''",0   
1327   CD 36 0B               CALL   flushBuffer   
132A   E1                     POP   HL   
132B   E5                     PUSH   HL   
132C   11 27 00               LD   DE,$27   
132F   B7                     OR   A   
1330   ED 52                  SBC   HL,DE   
1332   7D                     LD   A,L   
1333   B4                     OR   H   
1334   CA 93 13               JP   Z,expectM_2794S36   
1337   CD AE 0B               CALL   printStr   
133A   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
1345   CD AE 0B               CALL   printStr   
1348   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1357   21 27 00               LD   hl,$27   
135A   E5                     PUSH   hl   
135B   E5                     PUSH   hl   
135C   CD CD 0C               CALL   run   
135F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1367   CD 36 0B               CALL   flushBuffer   
136A   CD AE 0B               CALL   printStr   
136D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
137A   E1                     POP   hl   
137B   E5                     PUSH   hl   
137C   E5                     PUSH   hl   
137D   CD CD 0C               CALL   run   
1380   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
138F   CD 36 0B               CALL   flushBuffer   
1392   76                     HALT      
1393                EXPECTM_2794S36:      
1393   E1                     POP   HL   
1394                          ;*Macro unroll:  test "$10", $10
1394   31 00 4B               LD   SP,STACK   
1397   CD F6 0B               CALL   coldInit   
139A   CD 0A 49               CALL   execStr   
139D   24 31 30 00            DB   "$10",0   
13A1   CD 36 0B               CALL   flushBuffer   
13A4   E1                     POP   HL   
13A5   E5                     PUSH   HL   
13A6   11 10 00               LD   DE,$10   
13A9   B7                     OR   A   
13AA   ED 52                  SBC   HL,DE   
13AC   7D                     LD   A,L   
13AD   B4                     OR   H   
13AE   CA 0C 14               JP   Z,expectM_2795S37   
13B1   CD AE 0B               CALL   printStr   
13B4   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
13BE   CD AE 0B               CALL   printStr   
13C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13D0   21 10 00               LD   hl,$10   
13D3   E5                     PUSH   hl   
13D4   E5                     PUSH   hl   
13D5   CD CD 0C               CALL   run   
13D8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
13E0   CD 36 0B               CALL   flushBuffer   
13E3   CD AE 0B               CALL   printStr   
13E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13F3   E1                     POP   hl   
13F4   E5                     PUSH   hl   
13F5   E5                     PUSH   hl   
13F6   CD CD 0C               CALL   run   
13F9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1408   CD 36 0B               CALL   flushBuffer   
140B   76                     HALT      
140C                EXPECTM_2795S37:      
140C   E1                     POP   HL   
140D                          ;*Macro unroll:  test "$FF", $FF
140D   31 00 4B               LD   SP,STACK   
1410   CD F6 0B               CALL   coldInit   
1413   CD 0A 49               CALL   execStr   
1416   24 46 46 00            DB   "$FF",0   
141A   CD 36 0B               CALL   flushBuffer   
141D   E1                     POP   HL   
141E   E5                     PUSH   HL   
141F   11 FF 00               LD   DE,$FF   
1422   B7                     OR   A   
1423   ED 52                  SBC   HL,DE   
1425   7D                     LD   A,L   
1426   B4                     OR   H   
1427   CA 85 14               JP   Z,expectM_2796S38   
142A   CD AE 0B               CALL   printStr   
142D   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
1437   CD AE 0B               CALL   printStr   
143A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1449   21 FF 00               LD   hl,$FF   
144C   E5                     PUSH   hl   
144D   E5                     PUSH   hl   
144E   CD CD 0C               CALL   run   
1451   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1459   CD 36 0B               CALL   flushBuffer   
145C   CD AE 0B               CALL   printStr   
145F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
146C   E1                     POP   hl   
146D   E5                     PUSH   hl   
146E   E5                     PUSH   hl   
146F   CD CD 0C               CALL   run   
1472   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1481   CD 36 0B               CALL   flushBuffer   
1484   76                     HALT      
1485                EXPECTM_2796S38:      
1485   E1                     POP   HL   
1486                          ;*Macro unroll:  test "-1 2 +",1
1486   31 00 4B               LD   SP,STACK   
1489   CD F6 0B               CALL   coldInit   
148C   CD 0A 49               CALL   execStr   
148F   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
1496   CD 36 0B               CALL   flushBuffer   
1499   E1                     POP   HL   
149A   E5                     PUSH   HL   
149B   11 01 00               LD   DE,1   
149E   B7                     OR   A   
149F   ED 52                  SBC   HL,DE   
14A1   7D                     LD   A,L   
14A2   B4                     OR   H   
14A3   CA 04 15               JP   Z,expectM_2797S39   
14A6   CD AE 0B               CALL   printStr   
14A9   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
14B6   CD AE 0B               CALL   printStr   
14B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14C8   21 01 00               LD   hl,1   
14CB   E5                     PUSH   hl   
14CC   E5                     PUSH   hl   
14CD   CD CD 0C               CALL   run   
14D0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
14D8   CD 36 0B               CALL   flushBuffer   
14DB   CD AE 0B               CALL   printStr   
14DE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14EB   E1                     POP   hl   
14EC   E5                     PUSH   hl   
14ED   E5                     PUSH   hl   
14EE   CD CD 0C               CALL   run   
14F1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1500   CD 36 0B               CALL   flushBuffer   
1503   76                     HALT      
1504                EXPECTM_2797S39:      
1504   E1                     POP   HL   
1505                          ;*Macro unroll:  test "-1 1 +",0
1505   31 00 4B               LD   SP,STACK   
1508   CD F6 0B               CALL   coldInit   
150B   CD 0A 49               CALL   execStr   
150E   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
1515   CD 36 0B               CALL   flushBuffer   
1518   E1                     POP   HL   
1519   E5                     PUSH   HL   
151A   11 00 00               LD   DE,0   
151D   B7                     OR   A   
151E   ED 52                  SBC   HL,DE   
1520   7D                     LD   A,L   
1521   B4                     OR   H   
1522   CA 83 15               JP   Z,expectM_2798S40   
1525   CD AE 0B               CALL   printStr   
1528   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1535   CD AE 0B               CALL   printStr   
1538   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1547   21 00 00               LD   hl,0   
154A   E5                     PUSH   hl   
154B   E5                     PUSH   hl   
154C   CD CD 0C               CALL   run   
154F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1557   CD 36 0B               CALL   flushBuffer   
155A   CD AE 0B               CALL   printStr   
155D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
156A   E1                     POP   hl   
156B   E5                     PUSH   hl   
156C   E5                     PUSH   hl   
156D   CD CD 0C               CALL   run   
1570   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
157F   CD 36 0B               CALL   flushBuffer   
1582   76                     HALT      
1583                EXPECTM_2798S40:      
1583   E1                     POP   HL   
1584                          ;*Macro unroll:  test "1 2 +", 3
1584   31 00 4B               LD   SP,STACK   
1587   CD F6 0B               CALL   coldInit   
158A   CD 0A 49               CALL   execStr   
158D   31 20 32 20 2B 00      DB   "1 2 +",0   
1593   CD 36 0B               CALL   flushBuffer   
1596   E1                     POP   HL   
1597   E5                     PUSH   HL   
1598   11 03 00               LD   DE,3   
159B   B7                     OR   A   
159C   ED 52                  SBC   HL,DE   
159E   7D                     LD   A,L   
159F   B4                     OR   H   
15A0   CA 00 16               JP   Z,expectM_2799S41   
15A3   CD AE 0B               CALL   printStr   
15A6   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
15B2   CD AE 0B               CALL   printStr   
15B5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15C4   21 03 00               LD   hl,3   
15C7   E5                     PUSH   hl   
15C8   E5                     PUSH   hl   
15C9   CD CD 0C               CALL   run   
15CC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
15D4   CD 36 0B               CALL   flushBuffer   
15D7   CD AE 0B               CALL   printStr   
15DA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15E7   E1                     POP   hl   
15E8   E5                     PUSH   hl   
15E9   E5                     PUSH   hl   
15EA   CD CD 0C               CALL   run   
15ED   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
15FC   CD 36 0B               CALL   flushBuffer   
15FF   76                     HALT      
1600                EXPECTM_2799S41:      
1600   E1                     POP   HL   
1601                          ;*Macro unroll:  test "4 1 2 +", 3
1601   31 00 4B               LD   SP,STACK   
1604   CD F6 0B               CALL   coldInit   
1607   CD 0A 49               CALL   execStr   
160A   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
1612   CD 36 0B               CALL   flushBuffer   
1615   E1                     POP   HL   
1616   E5                     PUSH   HL   
1617   11 03 00               LD   DE,3   
161A   B7                     OR   A   
161B   ED 52                  SBC   HL,DE   
161D   7D                     LD   A,L   
161E   B4                     OR   H   
161F   CA 81 16               JP   Z,expectM_2800S42   
1622   CD AE 0B               CALL   printStr   
1625   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1633   CD AE 0B               CALL   printStr   
1636   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1645   21 03 00               LD   hl,3   
1648   E5                     PUSH   hl   
1649   E5                     PUSH   hl   
164A   CD CD 0C               CALL   run   
164D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1655   CD 36 0B               CALL   flushBuffer   
1658   CD AE 0B               CALL   printStr   
165B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1668   E1                     POP   hl   
1669   E5                     PUSH   hl   
166A   E5                     PUSH   hl   
166B   CD CD 0C               CALL   run   
166E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
167D   CD 36 0B               CALL   flushBuffer   
1680   76                     HALT      
1681                EXPECTM_2800S42:      
1681   E1                     POP   HL   
1682                          ;*Macro unroll:  test "123 456 +", 123+456
1682   31 00 4B               LD   SP,STACK   
1685   CD F6 0B               CALL   coldInit   
1688   CD 0A 49               CALL   execStr   
168B   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1695   CD 36 0B               CALL   flushBuffer   
1698   E1                     POP   HL   
1699   E5                     PUSH   HL   
169A   11 43 02               LD   DE,123+456   
169D   B7                     OR   A   
169E   ED 52                  SBC   HL,DE   
16A0   7D                     LD   A,L   
16A1   B4                     OR   H   
16A2   CA 06 17               JP   Z,expectM_2801S43   
16A5   CD AE 0B               CALL   printStr   
16A8   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
16B8   CD AE 0B               CALL   printStr   
16BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16CA   21 43 02               LD   hl,123+456   
16CD   E5                     PUSH   hl   
16CE   E5                     PUSH   hl   
16CF   CD CD 0C               CALL   run   
16D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
16DA   CD 36 0B               CALL   flushBuffer   
16DD   CD AE 0B               CALL   printStr   
16E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16ED   E1                     POP   hl   
16EE   E5                     PUSH   hl   
16EF   E5                     PUSH   hl   
16F0   CD CD 0C               CALL   run   
16F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1702   CD 36 0B               CALL   flushBuffer   
1705   76                     HALT      
1706                EXPECTM_2801S43:      
1706   E1                     POP   HL   
1707                          ;*Macro unroll:  test "64 128 +", 64+128
1707   31 00 4B               LD   SP,STACK   
170A   CD F6 0B               CALL   coldInit   
170D   CD 0A 49               CALL   execStr   
1710   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
1719   CD 36 0B               CALL   flushBuffer   
171C   E1                     POP   HL   
171D   E5                     PUSH   HL   
171E   11 C0 00               LD   DE,64+128   
1721   B7                     OR   A   
1722   ED 52                  SBC   HL,DE   
1724   7D                     LD   A,L   
1725   B4                     OR   H   
1726   CA 89 17               JP   Z,expectM_2802S44   
1729   CD AE 0B               CALL   printStr   
172C   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
173B   CD AE 0B               CALL   printStr   
173E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
174D   21 C0 00               LD   hl,64+128   
1750   E5                     PUSH   hl   
1751   E5                     PUSH   hl   
1752   CD CD 0C               CALL   run   
1755   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
175D   CD 36 0B               CALL   flushBuffer   
1760   CD AE 0B               CALL   printStr   
1763   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1770   E1                     POP   hl   
1771   E5                     PUSH   hl   
1772   E5                     PUSH   hl   
1773   CD CD 0C               CALL   run   
1776   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1785   CD 36 0B               CALL   flushBuffer   
1788   76                     HALT      
1789                EXPECTM_2802S44:      
1789   E1                     POP   HL   
178A                          ;*Macro unroll:  test "1 2 +", 3
178A   31 00 4B               LD   SP,STACK   
178D   CD F6 0B               CALL   coldInit   
1790   CD 0A 49               CALL   execStr   
1793   31 20 32 20 2B 00      DB   "1 2 +",0   
1799   CD 36 0B               CALL   flushBuffer   
179C   E1                     POP   HL   
179D   E5                     PUSH   HL   
179E   11 03 00               LD   DE,3   
17A1   B7                     OR   A   
17A2   ED 52                  SBC   HL,DE   
17A4   7D                     LD   A,L   
17A5   B4                     OR   H   
17A6   CA 06 18               JP   Z,expectM_2803S45   
17A9   CD AE 0B               CALL   printStr   
17AC   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
17B8   CD AE 0B               CALL   printStr   
17BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17CA   21 03 00               LD   hl,3   
17CD   E5                     PUSH   hl   
17CE   E5                     PUSH   hl   
17CF   CD CD 0C               CALL   run   
17D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
17DA   CD 36 0B               CALL   flushBuffer   
17DD   CD AE 0B               CALL   printStr   
17E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17ED   E1                     POP   hl   
17EE   E5                     PUSH   hl   
17EF   E5                     PUSH   hl   
17F0   CD CD 0C               CALL   run   
17F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1802   CD 36 0B               CALL   flushBuffer   
1805   76                     HALT      
1806                EXPECTM_2803S45:      
1806   E1                     POP   HL   
1807                          ;*Macro unroll:  test "1a= a++ a",2
1807   31 00 4B               LD   SP,STACK   
180A   CD F6 0B               CALL   coldInit   
180D   CD 0A 49               CALL   execStr   
1810   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
181A   CD 36 0B               CALL   flushBuffer   
181D   E1                     POP   HL   
181E   E5                     PUSH   HL   
181F   11 02 00               LD   DE,2   
1822   B7                     OR   A   
1823   ED 52                  SBC   HL,DE   
1825   7D                     LD   A,L   
1826   B4                     OR   H   
1827   CA 8B 18               JP   Z,expectM_2804S46   
182A   CD AE 0B               CALL   printStr   
182D   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
183D   CD AE 0B               CALL   printStr   
1840   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
184F   21 02 00               LD   hl,2   
1852   E5                     PUSH   hl   
1853   E5                     PUSH   hl   
1854   CD CD 0C               CALL   run   
1857   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
185F   CD 36 0B               CALL   flushBuffer   
1862   CD AE 0B               CALL   printStr   
1865   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1872   E1                     POP   hl   
1873   E5                     PUSH   hl   
1874   E5                     PUSH   hl   
1875   CD CD 0C               CALL   run   
1878   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1887   CD 36 0B               CALL   flushBuffer   
188A   76                     HALT      
188B                EXPECTM_2804S46:      
188B   E1                     POP   HL   
188C                          ;*Macro unroll:  test "-1 -1 -",0
188C   31 00 4B               LD   SP,STACK   
188F   CD F6 0B               CALL   coldInit   
1892   CD 0A 49               CALL   execStr   
1895   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
189D   CD 36 0B               CALL   flushBuffer   
18A0   E1                     POP   HL   
18A1   E5                     PUSH   HL   
18A2   11 00 00               LD   DE,0   
18A5   B7                     OR   A   
18A6   ED 52                  SBC   HL,DE   
18A8   7D                     LD   A,L   
18A9   B4                     OR   H   
18AA   CA 0C 19               JP   Z,expectM_2805S47   
18AD   CD AE 0B               CALL   printStr   
18B0   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
18BE   CD AE 0B               CALL   printStr   
18C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18D0   21 00 00               LD   hl,0   
18D3   E5                     PUSH   hl   
18D4   E5                     PUSH   hl   
18D5   CD CD 0C               CALL   run   
18D8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
18E0   CD 36 0B               CALL   flushBuffer   
18E3   CD AE 0B               CALL   printStr   
18E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18F3   E1                     POP   hl   
18F4   E5                     PUSH   hl   
18F5   E5                     PUSH   hl   
18F6   CD CD 0C               CALL   run   
18F9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1908   CD 36 0B               CALL   flushBuffer   
190B   76                     HALT      
190C                EXPECTM_2805S47:      
190C   E1                     POP   HL   
190D                          ;*Macro unroll:  test "5 3 -", 2
190D   31 00 4B               LD   SP,STACK   
1910   CD F6 0B               CALL   coldInit   
1913   CD 0A 49               CALL   execStr   
1916   35 20 33 20 2D 00      DB   "5 3 -",0   
191C   CD 36 0B               CALL   flushBuffer   
191F   E1                     POP   HL   
1920   E5                     PUSH   HL   
1921   11 02 00               LD   DE,2   
1924   B7                     OR   A   
1925   ED 52                  SBC   HL,DE   
1927   7D                     LD   A,L   
1928   B4                     OR   H   
1929   CA 89 19               JP   Z,expectM_2806S48   
192C   CD AE 0B               CALL   printStr   
192F   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
193B   CD AE 0B               CALL   printStr   
193E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
194D   21 02 00               LD   hl,2   
1950   E5                     PUSH   hl   
1951   E5                     PUSH   hl   
1952   CD CD 0C               CALL   run   
1955   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
195D   CD 36 0B               CALL   flushBuffer   
1960   CD AE 0B               CALL   printStr   
1963   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1970   E1                     POP   hl   
1971   E5                     PUSH   hl   
1972   E5                     PUSH   hl   
1973   CD CD 0C               CALL   run   
1976   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1985   CD 36 0B               CALL   flushBuffer   
1988   76                     HALT      
1989                EXPECTM_2806S48:      
1989   E1                     POP   HL   
198A                          ;*Macro unroll:  test "2 1 -",1
198A   31 00 4B               LD   SP,STACK   
198D   CD F6 0B               CALL   coldInit   
1990   CD 0A 49               CALL   execStr   
1993   32 20 31 20 2D 00      DB   "2 1 -",0   
1999   CD 36 0B               CALL   flushBuffer   
199C   E1                     POP   HL   
199D   E5                     PUSH   HL   
199E   11 01 00               LD   DE,1   
19A1   B7                     OR   A   
19A2   ED 52                  SBC   HL,DE   
19A4   7D                     LD   A,L   
19A5   B4                     OR   H   
19A6   CA 06 1A               JP   Z,expectM_2807S49   
19A9   CD AE 0B               CALL   printStr   
19AC   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
19B8   CD AE 0B               CALL   printStr   
19BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19CA   21 01 00               LD   hl,1   
19CD   E5                     PUSH   hl   
19CE   E5                     PUSH   hl   
19CF   CD CD 0C               CALL   run   
19D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
19DA   CD 36 0B               CALL   flushBuffer   
19DD   CD AE 0B               CALL   printStr   
19E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19ED   E1                     POP   hl   
19EE   E5                     PUSH   hl   
19EF   E5                     PUSH   hl   
19F0   CD CD 0C               CALL   run   
19F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A02   CD 36 0B               CALL   flushBuffer   
1A05   76                     HALT      
1A06                EXPECTM_2807S49:      
1A06   E1                     POP   HL   
1A07                          ;*Macro unroll:  test "3a= a-- a",2
1A07   31 00 4B               LD   SP,STACK   
1A0A   CD F6 0B               CALL   coldInit   
1A0D   CD 0A 49               CALL   execStr   
1A10   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1A1A   CD 36 0B               CALL   flushBuffer   
1A1D   E1                     POP   HL   
1A1E   E5                     PUSH   HL   
1A1F   11 02 00               LD   DE,2   
1A22   B7                     OR   A   
1A23   ED 52                  SBC   HL,DE   
1A25   7D                     LD   A,L   
1A26   B4                     OR   H   
1A27   CA 8B 1A               JP   Z,expectM_2808S50   
1A2A   CD AE 0B               CALL   printStr   
1A2D   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1A3D   CD AE 0B               CALL   printStr   
1A40   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A4F   21 02 00               LD   hl,2   
1A52   E5                     PUSH   hl   
1A53   E5                     PUSH   hl   
1A54   CD CD 0C               CALL   run   
1A57   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1A5F   CD 36 0B               CALL   flushBuffer   
1A62   CD AE 0B               CALL   printStr   
1A65   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A72   E1                     POP   hl   
1A73   E5                     PUSH   hl   
1A74   E5                     PUSH   hl   
1A75   CD CD 0C               CALL   run   
1A78   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1A87   CD 36 0B               CALL   flushBuffer   
1A8A   76                     HALT      
1A8B                EXPECTM_2808S50:      
1A8B   E1                     POP   HL   
1A8C                          ;*Macro unroll:  test "3 5 &", 1
1A8C   31 00 4B               LD   SP,STACK   
1A8F   CD F6 0B               CALL   coldInit   
1A92   CD 0A 49               CALL   execStr   
1A95   33 20 35 20 26 00      DB   "3 5 &",0   
1A9B   CD 36 0B               CALL   flushBuffer   
1A9E   E1                     POP   HL   
1A9F   E5                     PUSH   HL   
1AA0   11 01 00               LD   DE,1   
1AA3   B7                     OR   A   
1AA4   ED 52                  SBC   HL,DE   
1AA6   7D                     LD   A,L   
1AA7   B4                     OR   H   
1AA8   CA 08 1B               JP   Z,expectM_2809S51   
1AAB   CD AE 0B               CALL   printStr   
1AAE   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1ABA   CD AE 0B               CALL   printStr   
1ABD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ACC   21 01 00               LD   hl,1   
1ACF   E5                     PUSH   hl   
1AD0   E5                     PUSH   hl   
1AD1   CD CD 0C               CALL   run   
1AD4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1ADC   CD 36 0B               CALL   flushBuffer   
1ADF   CD AE 0B               CALL   printStr   
1AE2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AEF   E1                     POP   hl   
1AF0   E5                     PUSH   hl   
1AF1   E5                     PUSH   hl   
1AF2   CD CD 0C               CALL   run   
1AF5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B04   CD 36 0B               CALL   flushBuffer   
1B07   76                     HALT      
1B08                EXPECTM_2809S51:      
1B08   E1                     POP   HL   
1B09                          ;*Macro unroll:  test "3 5 |", 7
1B09   31 00 4B               LD   SP,STACK   
1B0C   CD F6 0B               CALL   coldInit   
1B0F   CD 0A 49               CALL   execStr   
1B12   33 20 35 20 7C 00      DB   "3 5 |",0   
1B18   CD 36 0B               CALL   flushBuffer   
1B1B   E1                     POP   HL   
1B1C   E5                     PUSH   HL   
1B1D   11 07 00               LD   DE,7   
1B20   B7                     OR   A   
1B21   ED 52                  SBC   HL,DE   
1B23   7D                     LD   A,L   
1B24   B4                     OR   H   
1B25   CA 85 1B               JP   Z,expectM_2810S52   
1B28   CD AE 0B               CALL   printStr   
1B2B   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1B37   CD AE 0B               CALL   printStr   
1B3A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B49   21 07 00               LD   hl,7   
1B4C   E5                     PUSH   hl   
1B4D   E5                     PUSH   hl   
1B4E   CD CD 0C               CALL   run   
1B51   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1B59   CD 36 0B               CALL   flushBuffer   
1B5C   CD AE 0B               CALL   printStr   
1B5F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B6C   E1                     POP   hl   
1B6D   E5                     PUSH   hl   
1B6E   E5                     PUSH   hl   
1B6F   CD CD 0C               CALL   run   
1B72   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1B81   CD 36 0B               CALL   flushBuffer   
1B84   76                     HALT      
1B85                EXPECTM_2810S52:      
1B85   E1                     POP   HL   
1B86                          ;*Macro unroll:  test "3 5 /x", 6
1B86   31 00 4B               LD   SP,STACK   
1B89   CD F6 0B               CALL   coldInit   
1B8C   CD 0A 49               CALL   execStr   
1B8F   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1B96   CD 36 0B               CALL   flushBuffer   
1B99   E1                     POP   HL   
1B9A   E5                     PUSH   HL   
1B9B   11 06 00               LD   DE,6   
1B9E   B7                     OR   A   
1B9F   ED 52                  SBC   HL,DE   
1BA1   7D                     LD   A,L   
1BA2   B4                     OR   H   
1BA3   CA 04 1C               JP   Z,expectM_2811S53   
1BA6   CD AE 0B               CALL   printStr   
1BA9   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1BB6   CD AE 0B               CALL   printStr   
1BB9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BC8   21 06 00               LD   hl,6   
1BCB   E5                     PUSH   hl   
1BCC   E5                     PUSH   hl   
1BCD   CD CD 0C               CALL   run   
1BD0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1BD8   CD 36 0B               CALL   flushBuffer   
1BDB   CD AE 0B               CALL   printStr   
1BDE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BEB   E1                     POP   hl   
1BEC   E5                     PUSH   hl   
1BED   E5                     PUSH   hl   
1BEE   CD CD 0C               CALL   run   
1BF1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C00   CD 36 0B               CALL   flushBuffer   
1C03   76                     HALT      
1C04                EXPECTM_2811S53:      
1C04   E1                     POP   HL   
1C05                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1C05   31 00 4B               LD   SP,STACK   
1C08   CD F6 0B               CALL   coldInit   
1C0B   CD 0A 49               CALL   execStr   
1C0E   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1C1D   CD 36 0B               CALL   flushBuffer   
1C20   E1                     POP   HL   
1C21   E5                     PUSH   HL   
1C22   11 06 00               LD   DE,6   
1C25   B7                     OR   A   
1C26   ED 52                  SBC   HL,DE   
1C28   7D                     LD   A,L   
1C29   B4                     OR   H   
1C2A   CA 93 1C               JP   Z,expectM_2812S54   
1C2D   CD AE 0B               CALL   printStr   
1C30   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1C45   CD AE 0B               CALL   printStr   
1C48   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C57   21 06 00               LD   hl,6   
1C5A   E5                     PUSH   hl   
1C5B   E5                     PUSH   hl   
1C5C   CD CD 0C               CALL   run   
1C5F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1C67   CD 36 0B               CALL   flushBuffer   
1C6A   CD AE 0B               CALL   printStr   
1C6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C7A   E1                     POP   hl   
1C7B   E5                     PUSH   hl   
1C7C   E5                     PUSH   hl   
1C7D   CD CD 0C               CALL   run   
1C80   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1C8F   CD 36 0B               CALL   flushBuffer   
1C92   76                     HALT      
1C93                EXPECTM_2812S54:      
1C93   E1                     POP   HL   
1C94                          ;*Macro unroll:  test "2 3 *", 6
1C94   31 00 4B               LD   SP,STACK   
1C97   CD F6 0B               CALL   coldInit   
1C9A   CD 0A 49               CALL   execStr   
1C9D   32 20 33 20 2A 00      DB   "2 3 *",0   
1CA3   CD 36 0B               CALL   flushBuffer   
1CA6   E1                     POP   HL   
1CA7   E5                     PUSH   HL   
1CA8   11 06 00               LD   DE,6   
1CAB   B7                     OR   A   
1CAC   ED 52                  SBC   HL,DE   
1CAE   7D                     LD   A,L   
1CAF   B4                     OR   H   
1CB0   CA 10 1D               JP   Z,expectM_2813S55   
1CB3   CD AE 0B               CALL   printStr   
1CB6   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1CC2   CD AE 0B               CALL   printStr   
1CC5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CD4   21 06 00               LD   hl,6   
1CD7   E5                     PUSH   hl   
1CD8   E5                     PUSH   hl   
1CD9   CD CD 0C               CALL   run   
1CDC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1CE4   CD 36 0B               CALL   flushBuffer   
1CE7   CD AE 0B               CALL   printStr   
1CEA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CF7   E1                     POP   hl   
1CF8   E5                     PUSH   hl   
1CF9   E5                     PUSH   hl   
1CFA   CD CD 0C               CALL   run   
1CFD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D0C   CD 36 0B               CALL   flushBuffer   
1D0F   76                     HALT      
1D10                EXPECTM_2813S55:      
1D10   E1                     POP   HL   
1D11                          ;*Macro unroll:  test "1 2 3 + *", 5
1D11   31 00 4B               LD   SP,STACK   
1D14   CD F6 0B               CALL   coldInit   
1D17   CD 0A 49               CALL   execStr   
1D1A   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
1D24   CD 36 0B               CALL   flushBuffer   
1D27   E1                     POP   HL   
1D28   E5                     PUSH   HL   
1D29   11 05 00               LD   DE,5   
1D2C   B7                     OR   A   
1D2D   ED 52                  SBC   HL,DE   
1D2F   7D                     LD   A,L   
1D30   B4                     OR   H   
1D31   CA 95 1D               JP   Z,expectM_2814S56   
1D34   CD AE 0B               CALL   printStr   
1D37   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1D47   CD AE 0B               CALL   printStr   
1D4A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D59   21 05 00               LD   hl,5   
1D5C   E5                     PUSH   hl   
1D5D   E5                     PUSH   hl   
1D5E   CD CD 0C               CALL   run   
1D61   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1D69   CD 36 0B               CALL   flushBuffer   
1D6C   CD AE 0B               CALL   printStr   
1D6F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D7C   E1                     POP   hl   
1D7D   E5                     PUSH   hl   
1D7E   E5                     PUSH   hl   
1D7F   CD CD 0C               CALL   run   
1D82   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1D91   CD 36 0B               CALL   flushBuffer   
1D94   76                     HALT      
1D95                EXPECTM_2814S56:      
1D95   E1                     POP   HL   
1D96                          ;*Macro unroll:  test "7 3 /", 2
1D96   31 00 4B               LD   SP,STACK   
1D99   CD F6 0B               CALL   coldInit   
1D9C   CD 0A 49               CALL   execStr   
1D9F   37 20 33 20 2F 00      DB   "7 3 /",0   
1DA5   CD 36 0B               CALL   flushBuffer   
1DA8   E1                     POP   HL   
1DA9   E5                     PUSH   HL   
1DAA   11 02 00               LD   DE,2   
1DAD   B7                     OR   A   
1DAE   ED 52                  SBC   HL,DE   
1DB0   7D                     LD   A,L   
1DB1   B4                     OR   H   
1DB2   CA 12 1E               JP   Z,expectM_2815S57   
1DB5   CD AE 0B               CALL   printStr   
1DB8   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1DC4   CD AE 0B               CALL   printStr   
1DC7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DD6   21 02 00               LD   hl,2   
1DD9   E5                     PUSH   hl   
1DDA   E5                     PUSH   hl   
1DDB   CD CD 0C               CALL   run   
1DDE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1DE6   CD 36 0B               CALL   flushBuffer   
1DE9   CD AE 0B               CALL   printStr   
1DEC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DF9   E1                     POP   hl   
1DFA   E5                     PUSH   hl   
1DFB   E5                     PUSH   hl   
1DFC   CD CD 0C               CALL   run   
1DFF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E0E   CD 36 0B               CALL   flushBuffer   
1E11   76                     HALT      
1E12                EXPECTM_2815S57:      
1E12   E1                     POP   HL   
1E13                          ;*Macro unroll:  test "7 3 / /re", 1
1E13   31 00 4B               LD   SP,STACK   
1E16   CD F6 0B               CALL   coldInit   
1E19   CD 0A 49               CALL   execStr   
1E1C   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
1E26   CD 36 0B               CALL   flushBuffer   
1E29   E1                     POP   HL   
1E2A   E5                     PUSH   HL   
1E2B   11 01 00               LD   DE,1   
1E2E   B7                     OR   A   
1E2F   ED 52                  SBC   HL,DE   
1E31   7D                     LD   A,L   
1E32   B4                     OR   H   
1E33   CA 97 1E               JP   Z,expectM_2816S58   
1E36   CD AE 0B               CALL   printStr   
1E39   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
1E49   CD AE 0B               CALL   printStr   
1E4C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E5B   21 01 00               LD   hl,1   
1E5E   E5                     PUSH   hl   
1E5F   E5                     PUSH   hl   
1E60   CD CD 0C               CALL   run   
1E63   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1E6B   CD 36 0B               CALL   flushBuffer   
1E6E   CD AE 0B               CALL   printStr   
1E71   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E7E   E1                     POP   hl   
1E7F   E5                     PUSH   hl   
1E80   E5                     PUSH   hl   
1E81   CD CD 0C               CALL   run   
1E84   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1E93   CD 36 0B               CALL   flushBuffer   
1E96   76                     HALT      
1E97                EXPECTM_2816S58:      
1E97   E1                     POP   HL   
1E98                          ;*Macro unroll:  test "7 3 /", 2
1E98   31 00 4B               LD   SP,STACK   
1E9B   CD F6 0B               CALL   coldInit   
1E9E   CD 0A 49               CALL   execStr   
1EA1   37 20 33 20 2F 00      DB   "7 3 /",0   
1EA7   CD 36 0B               CALL   flushBuffer   
1EAA   E1                     POP   HL   
1EAB   E5                     PUSH   HL   
1EAC   11 02 00               LD   DE,2   
1EAF   B7                     OR   A   
1EB0   ED 52                  SBC   HL,DE   
1EB2   7D                     LD   A,L   
1EB3   B4                     OR   H   
1EB4   CA 14 1F               JP   Z,expectM_2817S59   
1EB7   CD AE 0B               CALL   printStr   
1EBA   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1EC6   CD AE 0B               CALL   printStr   
1EC9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ED8   21 02 00               LD   hl,2   
1EDB   E5                     PUSH   hl   
1EDC   E5                     PUSH   hl   
1EDD   CD CD 0C               CALL   run   
1EE0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1EE8   CD 36 0B               CALL   flushBuffer   
1EEB   CD AE 0B               CALL   printStr   
1EEE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EFB   E1                     POP   hl   
1EFC   E5                     PUSH   hl   
1EFD   E5                     PUSH   hl   
1EFE   CD CD 0C               CALL   run   
1F01   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F10   CD 36 0B               CALL   flushBuffer   
1F13   76                     HALT      
1F14                EXPECTM_2817S59:      
1F14   E1                     POP   HL   
1F15                          ;*Macro unroll:  test "2 3 ==", FALSE
1F15   31 00 4B               LD   SP,STACK   
1F18   CD F6 0B               CALL   coldInit   
1F1B   CD 0A 49               CALL   execStr   
1F1E   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
1F25   CD 36 0B               CALL   flushBuffer   
1F28   E1                     POP   HL   
1F29   E5                     PUSH   HL   
1F2A   11 00 00               LD   DE,FALSE   
1F2D   B7                     OR   A   
1F2E   ED 52                  SBC   HL,DE   
1F30   7D                     LD   A,L   
1F31   B4                     OR   H   
1F32   CA 93 1F               JP   Z,expectM_2818S60   
1F35   CD AE 0B               CALL   printStr   
1F38   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1F45   CD AE 0B               CALL   printStr   
1F48   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F57   21 00 00               LD   hl,FALSE   
1F5A   E5                     PUSH   hl   
1F5B   E5                     PUSH   hl   
1F5C   CD CD 0C               CALL   run   
1F5F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1F67   CD 36 0B               CALL   flushBuffer   
1F6A   CD AE 0B               CALL   printStr   
1F6D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F7A   E1                     POP   hl   
1F7B   E5                     PUSH   hl   
1F7C   E5                     PUSH   hl   
1F7D   CD CD 0C               CALL   run   
1F80   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
1F8F   CD 36 0B               CALL   flushBuffer   
1F92   76                     HALT      
1F93                EXPECTM_2818S60:      
1F93   E1                     POP   HL   
1F94                          ;*Macro unroll:  test "3 3 ==", TRUE
1F94   31 00 4B               LD   SP,STACK   
1F97   CD F6 0B               CALL   coldInit   
1F9A   CD 0A 49               CALL   execStr   
1F9D   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
1FA4   CD 36 0B               CALL   flushBuffer   
1FA7   E1                     POP   HL   
1FA8   E5                     PUSH   HL   
1FA9   11 FF FF               LD   DE,TRUE   
1FAC   B7                     OR   A   
1FAD   ED 52                  SBC   HL,DE   
1FAF   7D                     LD   A,L   
1FB0   B4                     OR   H   
1FB1   CA 12 20               JP   Z,expectM_2819S61   
1FB4   CD AE 0B               CALL   printStr   
1FB7   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1FC4   CD AE 0B               CALL   printStr   
1FC7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FD6   21 FF FF               LD   hl,TRUE   
1FD9   E5                     PUSH   hl   
1FDA   E5                     PUSH   hl   
1FDB   CD CD 0C               CALL   run   
1FDE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
1FE6   CD 36 0B               CALL   flushBuffer   
1FE9   CD AE 0B               CALL   printStr   
1FEC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FF9   E1                     POP   hl   
1FFA   E5                     PUSH   hl   
1FFB   E5                     PUSH   hl   
1FFC   CD CD 0C               CALL   run   
1FFF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
200E   CD 36 0B               CALL   flushBuffer   
2011   76                     HALT      
2012                EXPECTM_2819S61:      
2012   E1                     POP   HL   
2013                          ;*Macro unroll:  test "1 2 <", TRUE
2013   31 00 4B               LD   SP,STACK   
2016   CD F6 0B               CALL   coldInit   
2019   CD 0A 49               CALL   execStr   
201C   31 20 32 20 3C 00      DB   "1 2 <",0   
2022   CD 36 0B               CALL   flushBuffer   
2025   E1                     POP   HL   
2026   E5                     PUSH   HL   
2027   11 FF FF               LD   DE,TRUE   
202A   B7                     OR   A   
202B   ED 52                  SBC   HL,DE   
202D   7D                     LD   A,L   
202E   B4                     OR   H   
202F   CA 8F 20               JP   Z,expectM_2820S62   
2032   CD AE 0B               CALL   printStr   
2035   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2041   CD AE 0B               CALL   printStr   
2044   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2053   21 FF FF               LD   hl,TRUE   
2056   E5                     PUSH   hl   
2057   E5                     PUSH   hl   
2058   CD CD 0C               CALL   run   
205B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2063   CD 36 0B               CALL   flushBuffer   
2066   CD AE 0B               CALL   printStr   
2069   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2076   E1                     POP   hl   
2077   E5                     PUSH   hl   
2078   E5                     PUSH   hl   
2079   CD CD 0C               CALL   run   
207C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
208B   CD 36 0B               CALL   flushBuffer   
208E   76                     HALT      
208F                EXPECTM_2820S62:      
208F   E1                     POP   HL   
2090                          ;*Macro unroll:  test "2 1 <", FALSE
2090   31 00 4B               LD   SP,STACK   
2093   CD F6 0B               CALL   coldInit   
2096   CD 0A 49               CALL   execStr   
2099   32 20 31 20 3C 00      DB   "2 1 <",0   
209F   CD 36 0B               CALL   flushBuffer   
20A2   E1                     POP   HL   
20A3   E5                     PUSH   HL   
20A4   11 00 00               LD   DE,FALSE   
20A7   B7                     OR   A   
20A8   ED 52                  SBC   HL,DE   
20AA   7D                     LD   A,L   
20AB   B4                     OR   H   
20AC   CA 0C 21               JP   Z,expectM_2821S63   
20AF   CD AE 0B               CALL   printStr   
20B2   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
20BE   CD AE 0B               CALL   printStr   
20C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20D0   21 00 00               LD   hl,FALSE   
20D3   E5                     PUSH   hl   
20D4   E5                     PUSH   hl   
20D5   CD CD 0C               CALL   run   
20D8   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
20E0   CD 36 0B               CALL   flushBuffer   
20E3   CD AE 0B               CALL   printStr   
20E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20F3   E1                     POP   hl   
20F4   E5                     PUSH   hl   
20F5   E5                     PUSH   hl   
20F6   CD CD 0C               CALL   run   
20F9   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2108   CD 36 0B               CALL   flushBuffer   
210B   76                     HALT      
210C                EXPECTM_2821S63:      
210C   E1                     POP   HL   
210D                          ;*Macro unroll:  test "2 3 <", TRUE
210D   31 00 4B               LD   SP,STACK   
2110   CD F6 0B               CALL   coldInit   
2113   CD 0A 49               CALL   execStr   
2116   32 20 33 20 3C 00      DB   "2 3 <",0   
211C   CD 36 0B               CALL   flushBuffer   
211F   E1                     POP   HL   
2120   E5                     PUSH   HL   
2121   11 FF FF               LD   DE,TRUE   
2124   B7                     OR   A   
2125   ED 52                  SBC   HL,DE   
2127   7D                     LD   A,L   
2128   B4                     OR   H   
2129   CA 89 21               JP   Z,expectM_2822S64   
212C   CD AE 0B               CALL   printStr   
212F   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
213B   CD AE 0B               CALL   printStr   
213E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
214D   21 FF FF               LD   hl,TRUE   
2150   E5                     PUSH   hl   
2151   E5                     PUSH   hl   
2152   CD CD 0C               CALL   run   
2155   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
215D   CD 36 0B               CALL   flushBuffer   
2160   CD AE 0B               CALL   printStr   
2163   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2170   E1                     POP   hl   
2171   E5                     PUSH   hl   
2172   E5                     PUSH   hl   
2173   CD CD 0C               CALL   run   
2176   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2185   CD 36 0B               CALL   flushBuffer   
2188   76                     HALT      
2189                EXPECTM_2822S64:      
2189   E1                     POP   HL   
218A                          ;*Macro unroll:  test "3 3 <", FALSE
218A   31 00 4B               LD   SP,STACK   
218D   CD F6 0B               CALL   coldInit   
2190   CD 0A 49               CALL   execStr   
2193   33 20 33 20 3C 00      DB   "3 3 <",0   
2199   CD 36 0B               CALL   flushBuffer   
219C   E1                     POP   HL   
219D   E5                     PUSH   HL   
219E   11 00 00               LD   DE,FALSE   
21A1   B7                     OR   A   
21A2   ED 52                  SBC   HL,DE   
21A4   7D                     LD   A,L   
21A5   B4                     OR   H   
21A6   CA 06 22               JP   Z,expectM_2823S65   
21A9   CD AE 0B               CALL   printStr   
21AC   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
21B8   CD AE 0B               CALL   printStr   
21BB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21CA   21 00 00               LD   hl,FALSE   
21CD   E5                     PUSH   hl   
21CE   E5                     PUSH   hl   
21CF   CD CD 0C               CALL   run   
21D2   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
21DA   CD 36 0B               CALL   flushBuffer   
21DD   CD AE 0B               CALL   printStr   
21E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21ED   E1                     POP   hl   
21EE   E5                     PUSH   hl   
21EF   E5                     PUSH   hl   
21F0   CD CD 0C               CALL   run   
21F3   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2202   CD 36 0B               CALL   flushBuffer   
2205   76                     HALT      
2206                EXPECTM_2823S65:      
2206   E1                     POP   HL   
2207                          ;*Macro unroll:  test "1 2 >", FALSE
2207   31 00 4B               LD   SP,STACK   
220A   CD F6 0B               CALL   coldInit   
220D   CD 0A 49               CALL   execStr   
2210   31 20 32 20 3E 00      DB   "1 2 >",0   
2216   CD 36 0B               CALL   flushBuffer   
2219   E1                     POP   HL   
221A   E5                     PUSH   HL   
221B   11 00 00               LD   DE,FALSE   
221E   B7                     OR   A   
221F   ED 52                  SBC   HL,DE   
2221   7D                     LD   A,L   
2222   B4                     OR   H   
2223   CA 83 22               JP   Z,expectM_2824S66   
2226   CD AE 0B               CALL   printStr   
2229   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2235   CD AE 0B               CALL   printStr   
2238   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2247   21 00 00               LD   hl,FALSE   
224A   E5                     PUSH   hl   
224B   E5                     PUSH   hl   
224C   CD CD 0C               CALL   run   
224F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2257   CD 36 0B               CALL   flushBuffer   
225A   CD AE 0B               CALL   printStr   
225D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
226A   E1                     POP   hl   
226B   E5                     PUSH   hl   
226C   E5                     PUSH   hl   
226D   CD CD 0C               CALL   run   
2270   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
227F   CD 36 0B               CALL   flushBuffer   
2282   76                     HALT      
2283                EXPECTM_2824S66:      
2283   E1                     POP   HL   
2284                          ;*Macro unroll:  test "2 1 >", TRUE
2284   31 00 4B               LD   SP,STACK   
2287   CD F6 0B               CALL   coldInit   
228A   CD 0A 49               CALL   execStr   
228D   32 20 31 20 3E 00      DB   "2 1 >",0   
2293   CD 36 0B               CALL   flushBuffer   
2296   E1                     POP   HL   
2297   E5                     PUSH   HL   
2298   11 FF FF               LD   DE,TRUE   
229B   B7                     OR   A   
229C   ED 52                  SBC   HL,DE   
229E   7D                     LD   A,L   
229F   B4                     OR   H   
22A0   CA 00 23               JP   Z,expectM_2825S67   
22A3   CD AE 0B               CALL   printStr   
22A6   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
22B2   CD AE 0B               CALL   printStr   
22B5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22C4   21 FF FF               LD   hl,TRUE   
22C7   E5                     PUSH   hl   
22C8   E5                     PUSH   hl   
22C9   CD CD 0C               CALL   run   
22CC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
22D4   CD 36 0B               CALL   flushBuffer   
22D7   CD AE 0B               CALL   printStr   
22DA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22E7   E1                     POP   hl   
22E8   E5                     PUSH   hl   
22E9   E5                     PUSH   hl   
22EA   CD CD 0C               CALL   run   
22ED   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
22FC   CD 36 0B               CALL   flushBuffer   
22FF   76                     HALT      
2300                EXPECTM_2825S67:      
2300   E1                     POP   HL   
2301                          ;*Macro unroll:  test "3 3 >", FALSE
2301   31 00 4B               LD   SP,STACK   
2304   CD F6 0B               CALL   coldInit   
2307   CD 0A 49               CALL   execStr   
230A   33 20 33 20 3E 00      DB   "3 3 >",0   
2310   CD 36 0B               CALL   flushBuffer   
2313   E1                     POP   HL   
2314   E5                     PUSH   HL   
2315   11 00 00               LD   DE,FALSE   
2318   B7                     OR   A   
2319   ED 52                  SBC   HL,DE   
231B   7D                     LD   A,L   
231C   B4                     OR   H   
231D   CA 7D 23               JP   Z,expectM_2826S68   
2320   CD AE 0B               CALL   printStr   
2323   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
232F   CD AE 0B               CALL   printStr   
2332   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2341   21 00 00               LD   hl,FALSE   
2344   E5                     PUSH   hl   
2345   E5                     PUSH   hl   
2346   CD CD 0C               CALL   run   
2349   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2351   CD 36 0B               CALL   flushBuffer   
2354   CD AE 0B               CALL   printStr   
2357   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2364   E1                     POP   hl   
2365   E5                     PUSH   hl   
2366   E5                     PUSH   hl   
2367   CD CD 0C               CALL   run   
236A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2379   CD 36 0B               CALL   flushBuffer   
237C   76                     HALT      
237D                EXPECTM_2826S68:      
237D   E1                     POP   HL   
237E                          ;*Macro unroll:  test "4 3 >", TRUE
237E   31 00 4B               LD   SP,STACK   
2381   CD F6 0B               CALL   coldInit   
2384   CD 0A 49               CALL   execStr   
2387   34 20 33 20 3E 00      DB   "4 3 >",0   
238D   CD 36 0B               CALL   flushBuffer   
2390   E1                     POP   HL   
2391   E5                     PUSH   HL   
2392   11 FF FF               LD   DE,TRUE   
2395   B7                     OR   A   
2396   ED 52                  SBC   HL,DE   
2398   7D                     LD   A,L   
2399   B4                     OR   H   
239A   CA FA 23               JP   Z,expectM_2827S69   
239D   CD AE 0B               CALL   printStr   
23A0   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
23AC   CD AE 0B               CALL   printStr   
23AF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23BE   21 FF FF               LD   hl,TRUE   
23C1   E5                     PUSH   hl   
23C2   E5                     PUSH   hl   
23C3   CD CD 0C               CALL   run   
23C6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
23CE   CD 36 0B               CALL   flushBuffer   
23D1   CD AE 0B               CALL   printStr   
23D4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23E1   E1                     POP   hl   
23E2   E5                     PUSH   hl   
23E3   E5                     PUSH   hl   
23E4   CD CD 0C               CALL   run   
23E7   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
23F6   CD 36 0B               CALL   flushBuffer   
23F9   76                     HALT      
23FA                EXPECTM_2827S69:      
23FA   E1                     POP   HL   
23FB                          ;*Macro unroll:  test "2 2 <=", TRUE
23FB   31 00 4B               LD   SP,STACK   
23FE   CD F6 0B               CALL   coldInit   
2401   CD 0A 49               CALL   execStr   
2404   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
240B   CD 36 0B               CALL   flushBuffer   
240E   E1                     POP   HL   
240F   E5                     PUSH   HL   
2410   11 FF FF               LD   DE,TRUE   
2413   B7                     OR   A   
2414   ED 52                  SBC   HL,DE   
2416   7D                     LD   A,L   
2417   B4                     OR   H   
2418   CA 79 24               JP   Z,expectM_2828S70   
241B   CD AE 0B               CALL   printStr   
241E   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
242B   CD AE 0B               CALL   printStr   
242E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
243D   21 FF FF               LD   hl,TRUE   
2440   E5                     PUSH   hl   
2441   E5                     PUSH   hl   
2442   CD CD 0C               CALL   run   
2445   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
244D   CD 36 0B               CALL   flushBuffer   
2450   CD AE 0B               CALL   printStr   
2453   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2460   E1                     POP   hl   
2461   E5                     PUSH   hl   
2462   E5                     PUSH   hl   
2463   CD CD 0C               CALL   run   
2466   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2475   CD 36 0B               CALL   flushBuffer   
2478   76                     HALT      
2479                EXPECTM_2828S70:      
2479   E1                     POP   HL   
247A                          ;*Macro unroll:  test "2 2 >=", TRUE
247A   31 00 4B               LD   SP,STACK   
247D   CD F6 0B               CALL   coldInit   
2480   CD 0A 49               CALL   execStr   
2483   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
248A   CD 36 0B               CALL   flushBuffer   
248D   E1                     POP   HL   
248E   E5                     PUSH   HL   
248F   11 FF FF               LD   DE,TRUE   
2492   B7                     OR   A   
2493   ED 52                  SBC   HL,DE   
2495   7D                     LD   A,L   
2496   B4                     OR   H   
2497   CA F8 24               JP   Z,expectM_2829S71   
249A   CD AE 0B               CALL   printStr   
249D   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
24AA   CD AE 0B               CALL   printStr   
24AD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24BC   21 FF FF               LD   hl,TRUE   
24BF   E5                     PUSH   hl   
24C0   E5                     PUSH   hl   
24C1   CD CD 0C               CALL   run   
24C4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
24CC   CD 36 0B               CALL   flushBuffer   
24CF   CD AE 0B               CALL   printStr   
24D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24DF   E1                     POP   hl   
24E0   E5                     PUSH   hl   
24E1   E5                     PUSH   hl   
24E2   CD CD 0C               CALL   run   
24E5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
24F4   CD 36 0B               CALL   flushBuffer   
24F7   76                     HALT      
24F8                EXPECTM_2829S71:      
24F8   E1                     POP   HL   
24F9                          ;*Macro unroll:  test "3 1 <<", 6
24F9   31 00 4B               LD   SP,STACK   
24FC   CD F6 0B               CALL   coldInit   
24FF   CD 0A 49               CALL   execStr   
2502   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
2509   CD 36 0B               CALL   flushBuffer   
250C   E1                     POP   HL   
250D   E5                     PUSH   HL   
250E   11 06 00               LD   DE,6   
2511   B7                     OR   A   
2512   ED 52                  SBC   HL,DE   
2514   7D                     LD   A,L   
2515   B4                     OR   H   
2516   CA 77 25               JP   Z,expectM_2830S72   
2519   CD AE 0B               CALL   printStr   
251C   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2529   CD AE 0B               CALL   printStr   
252C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
253B   21 06 00               LD   hl,6   
253E   E5                     PUSH   hl   
253F   E5                     PUSH   hl   
2540   CD CD 0C               CALL   run   
2543   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
254B   CD 36 0B               CALL   flushBuffer   
254E   CD AE 0B               CALL   printStr   
2551   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
255E   E1                     POP   hl   
255F   E5                     PUSH   hl   
2560   E5                     PUSH   hl   
2561   CD CD 0C               CALL   run   
2564   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2573   CD 36 0B               CALL   flushBuffer   
2576   76                     HALT      
2577                EXPECTM_2830S72:      
2577   E1                     POP   HL   
2578                          ;*Macro unroll:  test "10 1 >>", 5
2578   31 00 4B               LD   SP,STACK   
257B   CD F6 0B               CALL   coldInit   
257E   CD 0A 49               CALL   execStr   
2581   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
2589   CD 36 0B               CALL   flushBuffer   
258C   E1                     POP   HL   
258D   E5                     PUSH   HL   
258E   11 05 00               LD   DE,5   
2591   B7                     OR   A   
2592   ED 52                  SBC   HL,DE   
2594   7D                     LD   A,L   
2595   B4                     OR   H   
2596   CA F8 25               JP   Z,expectM_2831S73   
2599   CD AE 0B               CALL   printStr   
259C   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
25AA   CD AE 0B               CALL   printStr   
25AD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25BC   21 05 00               LD   hl,5   
25BF   E5                     PUSH   hl   
25C0   E5                     PUSH   hl   
25C1   CD CD 0C               CALL   run   
25C4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
25CC   CD 36 0B               CALL   flushBuffer   
25CF   CD AE 0B               CALL   printStr   
25D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25DF   E1                     POP   hl   
25E0   E5                     PUSH   hl   
25E1   E5                     PUSH   hl   
25E2   CD CD 0C               CALL   run   
25E5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
25F4   CD 36 0B               CALL   flushBuffer   
25F7   76                     HALT      
25F8                EXPECTM_2831S73:      
25F8   E1                     POP   HL   
25F9                          ;*Macro unroll:  test "1 x = x", 1
25F9   31 00 4B               LD   SP,STACK   
25FC   CD F6 0B               CALL   coldInit   
25FF   CD 0A 49               CALL   execStr   
2602   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
260A   CD 36 0B               CALL   flushBuffer   
260D   E1                     POP   HL   
260E   E5                     PUSH   HL   
260F   11 01 00               LD   DE,1   
2612   B7                     OR   A   
2613   ED 52                  SBC   HL,DE   
2615   7D                     LD   A,L   
2616   B4                     OR   H   
2617   CA 79 26               JP   Z,expectM_2832S74   
261A   CD AE 0B               CALL   printStr   
261D   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
262B   CD AE 0B               CALL   printStr   
262E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
263D   21 01 00               LD   hl,1   
2640   E5                     PUSH   hl   
2641   E5                     PUSH   hl   
2642   CD CD 0C               CALL   run   
2645   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
264D   CD 36 0B               CALL   flushBuffer   
2650   CD AE 0B               CALL   printStr   
2653   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2660   E1                     POP   hl   
2661   E5                     PUSH   hl   
2662   E5                     PUSH   hl   
2663   CD CD 0C               CALL   run   
2666   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2675   CD 36 0B               CALL   flushBuffer   
2678   76                     HALT      
2679                EXPECTM_2832S74:      
2679   E1                     POP   HL   
267A                          ;*Macro unroll:  test "1{}^", 1
267A   31 00 4B               LD   SP,STACK   
267D   CD F6 0B               CALL   coldInit   
2680   CD 0A 49               CALL   execStr   
2683   31 7B 7D 5E 00         DB   "1{}^",0   
2688   CD 36 0B               CALL   flushBuffer   
268B   E1                     POP   HL   
268C   E5                     PUSH   HL   
268D   11 01 00               LD   DE,1   
2690   B7                     OR   A   
2691   ED 52                  SBC   HL,DE   
2693   7D                     LD   A,L   
2694   B4                     OR   H   
2695   CA F4 26               JP   Z,expectM_2833S75   
2698   CD AE 0B               CALL   printStr   
269B   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
26A6   CD AE 0B               CALL   printStr   
26A9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26B8   21 01 00               LD   hl,1   
26BB   E5                     PUSH   hl   
26BC   E5                     PUSH   hl   
26BD   CD CD 0C               CALL   run   
26C0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
26C8   CD 36 0B               CALL   flushBuffer   
26CB   CD AE 0B               CALL   printStr   
26CE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26DB   E1                     POP   hl   
26DC   E5                     PUSH   hl   
26DD   E5                     PUSH   hl   
26DE   CD CD 0C               CALL   run   
26E1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
26F0   CD 36 0B               CALL   flushBuffer   
26F3   76                     HALT      
26F4                EXPECTM_2833S75:      
26F4   E1                     POP   HL   
26F5                          ;*Macro unroll:  test "{1}^", 1
26F5   31 00 4B               LD   SP,STACK   
26F8   CD F6 0B               CALL   coldInit   
26FB   CD 0A 49               CALL   execStr   
26FE   7B 31 7D 5E 00         DB   "{1}^",0   
2703   CD 36 0B               CALL   flushBuffer   
2706   E1                     POP   HL   
2707   E5                     PUSH   HL   
2708   11 01 00               LD   DE,1   
270B   B7                     OR   A   
270C   ED 52                  SBC   HL,DE   
270E   7D                     LD   A,L   
270F   B4                     OR   H   
2710   CA 6F 27               JP   Z,expectM_2834S76   
2713   CD AE 0B               CALL   printStr   
2716   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2721   CD AE 0B               CALL   printStr   
2724   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2733   21 01 00               LD   hl,1   
2736   E5                     PUSH   hl   
2737   E5                     PUSH   hl   
2738   CD CD 0C               CALL   run   
273B   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2743   CD 36 0B               CALL   flushBuffer   
2746   CD AE 0B               CALL   printStr   
2749   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2756   E1                     POP   hl   
2757   E5                     PUSH   hl   
2758   E5                     PUSH   hl   
2759   CD CD 0C               CALL   run   
275C   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
276B   CD 36 0B               CALL   flushBuffer   
276E   76                     HALT      
276F                EXPECTM_2834S76:      
276F   E1                     POP   HL   
2770                          ;*Macro unroll:  test "{{1}^}^", 1
2770   31 00 4B               LD   SP,STACK   
2773   CD F6 0B               CALL   coldInit   
2776   CD 0A 49               CALL   execStr   
2779   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
2781   CD 36 0B               CALL   flushBuffer   
2784   E1                     POP   HL   
2785   E5                     PUSH   HL   
2786   11 01 00               LD   DE,1   
2789   B7                     OR   A   
278A   ED 52                  SBC   HL,DE   
278C   7D                     LD   A,L   
278D   B4                     OR   H   
278E   CA F0 27               JP   Z,expectM_2835S77   
2791   CD AE 0B               CALL   printStr   
2794   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
27A2   CD AE 0B               CALL   printStr   
27A5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27B4   21 01 00               LD   hl,1   
27B7   E5                     PUSH   hl   
27B8   E5                     PUSH   hl   
27B9   CD CD 0C               CALL   run   
27BC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
27C4   CD 36 0B               CALL   flushBuffer   
27C7   CD AE 0B               CALL   printStr   
27CA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27D7   E1                     POP   hl   
27D8   E5                     PUSH   hl   
27D9   E5                     PUSH   hl   
27DA   CD CD 0C               CALL   run   
27DD   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
27EC   CD 36 0B               CALL   flushBuffer   
27EF   76                     HALT      
27F0                EXPECTM_2835S77:      
27F0   E1                     POP   HL   
27F1                          ;*Macro unroll:  test "{{{1}^}^}^", 1
27F1   31 00 4B               LD   SP,STACK   
27F4   CD F6 0B               CALL   coldInit   
27F7   CD 0A 49               CALL   execStr   
27FA   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2805   CD 36 0B               CALL   flushBuffer   
2808   E1                     POP   HL   
2809   E5                     PUSH   HL   
280A   11 01 00               LD   DE,1   
280D   B7                     OR   A   
280E   ED 52                  SBC   HL,DE   
2810   7D                     LD   A,L   
2811   B4                     OR   H   
2812   CA 77 28               JP   Z,expectM_2836S78   
2815   CD AE 0B               CALL   printStr   
2818   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2829   CD AE 0B               CALL   printStr   
282C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
283B   21 01 00               LD   hl,1   
283E   E5                     PUSH   hl   
283F   E5                     PUSH   hl   
2840   CD CD 0C               CALL   run   
2843   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
284B   CD 36 0B               CALL   flushBuffer   
284E   CD AE 0B               CALL   printStr   
2851   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
285E   E1                     POP   hl   
285F   E5                     PUSH   hl   
2860   E5                     PUSH   hl   
2861   CD CD 0C               CALL   run   
2864   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2873   CD 36 0B               CALL   flushBuffer   
2876   76                     HALT      
2877                EXPECTM_2836S78:      
2877   E1                     POP   HL   
2878                          ;*Macro unroll:  test "5 /f{10} ?", 5
2878   31 00 4B               LD   SP,STACK   
287B   CD F6 0B               CALL   coldInit   
287E   CD 0A 49               CALL   execStr   
2881   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
288C   CD 36 0B               CALL   flushBuffer   
288F   E1                     POP   HL   
2890   E5                     PUSH   HL   
2891   11 05 00               LD   DE,5   
2894   B7                     OR   A   
2895   ED 52                  SBC   HL,DE   
2897   7D                     LD   A,L   
2898   B4                     OR   H   
2899   CA FE 28               JP   Z,expectM_2837S79   
289C   CD AE 0B               CALL   printStr   
289F   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
28B0   CD AE 0B               CALL   printStr   
28B3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28C2   21 05 00               LD   hl,5   
28C5   E5                     PUSH   hl   
28C6   E5                     PUSH   hl   
28C7   CD CD 0C               CALL   run   
28CA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
28D2   CD 36 0B               CALL   flushBuffer   
28D5   CD AE 0B               CALL   printStr   
28D8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28E5   E1                     POP   hl   
28E6   E5                     PUSH   hl   
28E7   E5                     PUSH   hl   
28E8   CD CD 0C               CALL   run   
28EB   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
28FA   CD 36 0B               CALL   flushBuffer   
28FD   76                     HALT      
28FE                EXPECTM_2837S79:      
28FE   E1                     POP   HL   
28FF                          ;*Macro unroll:  test "5 /t{10} ? +", 15
28FF   31 00 4B               LD   SP,STACK   
2902   CD F6 0B               CALL   coldInit   
2905   CD 0A 49               CALL   execStr   
2908   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2915   CD 36 0B               CALL   flushBuffer   
2918   E1                     POP   HL   
2919   E5                     PUSH   HL   
291A   11 0F 00               LD   DE,15   
291D   B7                     OR   A   
291E   ED 52                  SBC   HL,DE   
2920   7D                     LD   A,L   
2921   B4                     OR   H   
2922   CA 89 29               JP   Z,expectM_2838S80   
2925   CD AE 0B               CALL   printStr   
2928   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
293B   CD AE 0B               CALL   printStr   
293E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
294D   21 0F 00               LD   hl,15   
2950   E5                     PUSH   hl   
2951   E5                     PUSH   hl   
2952   CD CD 0C               CALL   run   
2955   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
295D   CD 36 0B               CALL   flushBuffer   
2960   CD AE 0B               CALL   printStr   
2963   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2970   E1                     POP   hl   
2971   E5                     PUSH   hl   
2972   E5                     PUSH   hl   
2973   CD CD 0C               CALL   run   
2976   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2985   CD 36 0B               CALL   flushBuffer   
2988   76                     HALT      
2989                EXPECTM_2838S80:      
2989   E1                     POP   HL   
298A                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
298A   31 00 4B               LD   SP,STACK   
298D   CD F6 0B               CALL   coldInit   
2990   CD 0A 49               CALL   execStr   
2993   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
29A5   CD 36 0B               CALL   flushBuffer   
29A8   E1                     POP   HL   
29A9   E5                     PUSH   HL   
29AA   11 15 00               LD   DE,21   
29AD   B7                     OR   A   
29AE   ED 52                  SBC   HL,DE   
29B0   7D                     LD   A,L   
29B1   B4                     OR   H   
29B2   CA 1E 2A               JP   Z,expectM_2839S81   
29B5   CD AE 0B               CALL   printStr   
29B8   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
29D0   CD AE 0B               CALL   printStr   
29D3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29E2   21 15 00               LD   hl,21   
29E5   E5                     PUSH   hl   
29E6   E5                     PUSH   hl   
29E7   CD CD 0C               CALL   run   
29EA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
29F2   CD 36 0B               CALL   flushBuffer   
29F5   CD AE 0B               CALL   printStr   
29F8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A05   E1                     POP   hl   
2A06   E5                     PUSH   hl   
2A07   E5                     PUSH   hl   
2A08   CD CD 0C               CALL   run   
2A0B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2A1A   CD 36 0B               CALL   flushBuffer   
2A1D   76                     HALT      
2A1E                EXPECTM_2839S81:      
2A1E   E1                     POP   HL   
2A1F                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
2A1F   31 00 4B               LD   SP,STACK   
2A22   CD F6 0B               CALL   coldInit   
2A25   CD 0A 49               CALL   execStr   
2A28   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
2A3A   CD 36 0B               CALL   flushBuffer   
2A3D   E1                     POP   HL   
2A3E   E5                     PUSH   HL   
2A3F   11 0B 00               LD   DE,11   
2A42   B7                     OR   A   
2A43   ED 52                  SBC   HL,DE   
2A45   7D                     LD   A,L   
2A46   B4                     OR   H   
2A47   CA B3 2A               JP   Z,expectM_2840S82   
2A4A   CD AE 0B               CALL   printStr   
2A4D   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2A65   CD AE 0B               CALL   printStr   
2A68   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A77   21 0B 00               LD   hl,11   
2A7A   E5                     PUSH   hl   
2A7B   E5                     PUSH   hl   
2A7C   CD CD 0C               CALL   run   
2A7F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2A87   CD 36 0B               CALL   flushBuffer   
2A8A   CD AE 0B               CALL   printStr   
2A8D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A9A   E1                     POP   hl   
2A9B   E5                     PUSH   hl   
2A9C   E5                     PUSH   hl   
2A9D   CD CD 0C               CALL   run   
2AA0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2AAF   CD 36 0B               CALL   flushBuffer   
2AB2   76                     HALT      
2AB3                EXPECTM_2840S82:      
2AB3   E1                     POP   HL   
2AB4                          ;*Macro unroll:  test ": 0#", $0000
2AB4   31 00 4B               LD   SP,STACK   
2AB7   CD F6 0B               CALL   coldInit   
2ABA   CD 0A 49               CALL   execStr   
2ABD   3A 20 30 23 00         DB   ": 0#",0   
2AC2   CD 36 0B               CALL   flushBuffer   
2AC5   E1                     POP   HL   
2AC6   E5                     PUSH   HL   
2AC7   11 00 00               LD   DE,$0000   
2ACA   B7                     OR   A   
2ACB   ED 52                  SBC   HL,DE   
2ACD   7D                     LD   A,L   
2ACE   B4                     OR   H   
2ACF   CA 2E 2B               JP   Z,expectM_2841S83   
2AD2   CD AE 0B               CALL   printStr   
2AD5   43 6F 64 65 3A 20 3A 20 30 23 00 .CSTR   "Code: ",": 0#"   
2AE0   CD AE 0B               CALL   printStr   
2AE3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AF2   21 00 00               LD   hl,$0000   
2AF5   E5                     PUSH   hl   
2AF6   E5                     PUSH   hl   
2AF7   CD CD 0C               CALL   run   
2AFA   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B02   CD 36 0B               CALL   flushBuffer   
2B05   CD AE 0B               CALL   printStr   
2B08   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B15   E1                     POP   hl   
2B16   E5                     PUSH   hl   
2B17   E5                     PUSH   hl   
2B18   CD CD 0C               CALL   run   
2B1B   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2B2A   CD 36 0B               CALL   flushBuffer   
2B2D   76                     HALT      
2B2E                EXPECTM_2841S83:      
2B2E   E1                     POP   HL   
2B2F                          ;*Macro unroll:  test ":a 0#", $0100
2B2F   31 00 4B               LD   SP,STACK   
2B32   CD F6 0B               CALL   coldInit   
2B35   CD 0A 49               CALL   execStr   
2B38   3A 61 20 30 23 00      DB   ":a 0#",0   
2B3E   CD 36 0B               CALL   flushBuffer   
2B41   E1                     POP   HL   
2B42   E5                     PUSH   HL   
2B43   11 00 01               LD   DE,$0100   
2B46   B7                     OR   A   
2B47   ED 52                  SBC   HL,DE   
2B49   7D                     LD   A,L   
2B4A   B4                     OR   H   
2B4B   CA AB 2B               JP   Z,expectM_2842S84   
2B4E   CD AE 0B               CALL   printStr   
2B51   43 6F 64 65 3A 20 3A 61 20 30 23 00 .CSTR   "Code: ",":a 0#"   
2B5D   CD AE 0B               CALL   printStr   
2B60   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B6F   21 00 01               LD   hl,$0100   
2B72   E5                     PUSH   hl   
2B73   E5                     PUSH   hl   
2B74   CD CD 0C               CALL   run   
2B77   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2B7F   CD 36 0B               CALL   flushBuffer   
2B82   CD AE 0B               CALL   printStr   
2B85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B92   E1                     POP   hl   
2B93   E5                     PUSH   hl   
2B94   E5                     PUSH   hl   
2B95   CD CD 0C               CALL   run   
2B98   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2BA7   CD 36 0B               CALL   flushBuffer   
2BAA   76                     HALT      
2BAB                EXPECTM_2842S84:      
2BAB   E1                     POP   HL   
2BAC                          ;*Macro unroll:  test ":a: 0#", $0100
2BAC   31 00 4B               LD   SP,STACK   
2BAF   CD F6 0B               CALL   coldInit   
2BB2   CD 0A 49               CALL   execStr   
2BB5   3A 61 3A 20 30 23 00   DB   ":a: 0#",0   
2BBC   CD 36 0B               CALL   flushBuffer   
2BBF   E1                     POP   HL   
2BC0   E5                     PUSH   HL   
2BC1   11 00 01               LD   DE,$0100   
2BC4   B7                     OR   A   
2BC5   ED 52                  SBC   HL,DE   
2BC7   7D                     LD   A,L   
2BC8   B4                     OR   H   
2BC9   CA 2A 2C               JP   Z,expectM_2843S85   
2BCC   CD AE 0B               CALL   printStr   
2BCF   43 6F 64 65 3A 20 3A 61 3A 20 30 23 00 .CSTR   "Code: ",":a: 0#"   
2BDC   CD AE 0B               CALL   printStr   
2BDF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BEE   21 00 01               LD   hl,$0100   
2BF1   E5                     PUSH   hl   
2BF2   E5                     PUSH   hl   
2BF3   CD CD 0C               CALL   run   
2BF6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2BFE   CD 36 0B               CALL   flushBuffer   
2C01   CD AE 0B               CALL   printStr   
2C04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C11   E1                     POP   hl   
2C12   E5                     PUSH   hl   
2C13   E5                     PUSH   hl   
2C14   CD CD 0C               CALL   run   
2C17   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2C26   CD 36 0B               CALL   flushBuffer   
2C29   76                     HALT      
2C2A                EXPECTM_2843S85:      
2C2A   E1                     POP   HL   
2C2B                          ;*Macro unroll:  test ":a:b 0#", $0201
2C2B   31 00 4B               LD   SP,STACK   
2C2E   CD F6 0B               CALL   coldInit   
2C31   CD 0A 49               CALL   execStr   
2C34   3A 61 3A 62 20 30 23 00 DB   ":a:b 0#",0   
2C3C   CD 36 0B               CALL   flushBuffer   
2C3F   E1                     POP   HL   
2C40   E5                     PUSH   HL   
2C41   11 01 02               LD   DE,$0201   
2C44   B7                     OR   A   
2C45   ED 52                  SBC   HL,DE   
2C47   7D                     LD   A,L   
2C48   B4                     OR   H   
2C49   CA AB 2C               JP   Z,expectM_2844S86   
2C4C   CD AE 0B               CALL   printStr   
2C4F   43 6F 64 65 3A 20 3A 61 3A 62 20 30 23 00 .CSTR   "Code: ",":a:b 0#"   
2C5D   CD AE 0B               CALL   printStr   
2C60   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C6F   21 01 02               LD   hl,$0201   
2C72   E5                     PUSH   hl   
2C73   E5                     PUSH   hl   
2C74   CD CD 0C               CALL   run   
2C77   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2C7F   CD 36 0B               CALL   flushBuffer   
2C82   CD AE 0B               CALL   printStr   
2C85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C92   E1                     POP   hl   
2C93   E5                     PUSH   hl   
2C94   E5                     PUSH   hl   
2C95   CD CD 0C               CALL   run   
2C98   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2CA7   CD 36 0B               CALL   flushBuffer   
2CAA   76                     HALT      
2CAB                EXPECTM_2844S86:      
2CAB   E1                     POP   HL   
2CAC                          ;*Macro unroll:  test "::b 0#", $0101
2CAC   31 00 4B               LD   SP,STACK   
2CAF   CD F6 0B               CALL   coldInit   
2CB2   CD 0A 49               CALL   execStr   
2CB5   3A 3A 62 20 30 23 00   DB   "::b 0#",0   
2CBC   CD 36 0B               CALL   flushBuffer   
2CBF   E1                     POP   HL   
2CC0   E5                     PUSH   HL   
2CC1   11 01 01               LD   DE,$0101   
2CC4   B7                     OR   A   
2CC5   ED 52                  SBC   HL,DE   
2CC7   7D                     LD   A,L   
2CC8   B4                     OR   H   
2CC9   CA 2A 2D               JP   Z,expectM_2845S87   
2CCC   CD AE 0B               CALL   printStr   
2CCF   43 6F 64 65 3A 20 3A 3A 62 20 30 23 00 .CSTR   "Code: ","::b 0#"   
2CDC   CD AE 0B               CALL   printStr   
2CDF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CEE   21 01 01               LD   hl,$0101   
2CF1   E5                     PUSH   hl   
2CF2   E5                     PUSH   hl   
2CF3   CD CD 0C               CALL   run   
2CF6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2CFE   CD 36 0B               CALL   flushBuffer   
2D01   CD AE 0B               CALL   printStr   
2D04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D11   E1                     POP   hl   
2D12   E5                     PUSH   hl   
2D13   E5                     PUSH   hl   
2D14   CD CD 0C               CALL   run   
2D17   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2D26   CD 36 0B               CALL   flushBuffer   
2D29   76                     HALT      
2D2A                EXPECTM_2845S87:      
2D2A   E1                     POP   HL   
2D2B                          ;*Macro unroll:  test ":{2};^", 2
2D2B   31 00 4B               LD   SP,STACK   
2D2E   CD F6 0B               CALL   coldInit   
2D31   CD 0A 49               CALL   execStr   
2D34   3A 7B 32 7D 3B 5E 00   DB   ":{2};^",0   
2D3B   CD 36 0B               CALL   flushBuffer   
2D3E   E1                     POP   HL   
2D3F   E5                     PUSH   HL   
2D40   11 02 00               LD   DE,2   
2D43   B7                     OR   A   
2D44   ED 52                  SBC   HL,DE   
2D46   7D                     LD   A,L   
2D47   B4                     OR   H   
2D48   CA A9 2D               JP   Z,expectM_2846S88   
2D4B   CD AE 0B               CALL   printStr   
2D4E   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
2D5B   CD AE 0B               CALL   printStr   
2D5E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D6D   21 02 00               LD   hl,2   
2D70   E5                     PUSH   hl   
2D71   E5                     PUSH   hl   
2D72   CD CD 0C               CALL   run   
2D75   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2D7D   CD 36 0B               CALL   flushBuffer   
2D80   CD AE 0B               CALL   printStr   
2D83   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D90   E1                     POP   hl   
2D91   E5                     PUSH   hl   
2D92   E5                     PUSH   hl   
2D93   CD CD 0C               CALL   run   
2D96   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2DA5   CD 36 0B               CALL   flushBuffer   
2DA8   76                     HALT      
2DA9                EXPECTM_2846S88:      
2DA9   E1                     POP   HL   
2DAA                          ;*Macro unroll:  test ":a{2};^", 2
2DAA   31 00 4B               LD   SP,STACK   
2DAD   CD F6 0B               CALL   coldInit   
2DB0   CD 0A 49               CALL   execStr   
2DB3   3A 61 7B 32 7D 3B 5E 00 DB   ":a{2};^",0   
2DBB   CD 36 0B               CALL   flushBuffer   
2DBE   E1                     POP   HL   
2DBF   E5                     PUSH   HL   
2DC0   11 02 00               LD   DE,2   
2DC3   B7                     OR   A   
2DC4   ED 52                  SBC   HL,DE   
2DC6   7D                     LD   A,L   
2DC7   B4                     OR   H   
2DC8   CA 2A 2E               JP   Z,expectM_2847S89   
2DCB   CD AE 0B               CALL   printStr   
2DCE   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
2DDC   CD AE 0B               CALL   printStr   
2DDF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DEE   21 02 00               LD   hl,2   
2DF1   E5                     PUSH   hl   
2DF2   E5                     PUSH   hl   
2DF3   CD CD 0C               CALL   run   
2DF6   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2DFE   CD 36 0B               CALL   flushBuffer   
2E01   CD AE 0B               CALL   printStr   
2E04   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E11   E1                     POP   hl   
2E12   E5                     PUSH   hl   
2E13   E5                     PUSH   hl   
2E14   CD CD 0C               CALL   run   
2E17   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2E26   CD 36 0B               CALL   flushBuffer   
2E29   76                     HALT      
2E2A                EXPECTM_2847S89:      
2E2A   E1                     POP   HL   
2E2B                          ;*Macro unroll:  test "5 :a{%a};^", 5
2E2B   31 00 4B               LD   SP,STACK   
2E2E   CD F6 0B               CALL   coldInit   
2E31   CD 0A 49               CALL   execStr   
2E34   35 20 3A 61 7B 25 61 7D 3B 5E 00 DB   "5 :a{%a};^",0   
2E3F   CD 36 0B               CALL   flushBuffer   
2E42   E1                     POP   HL   
2E43   E5                     PUSH   HL   
2E44   11 05 00               LD   DE,5   
2E47   B7                     OR   A   
2E48   ED 52                  SBC   HL,DE   
2E4A   7D                     LD   A,L   
2E4B   B4                     OR   H   
2E4C   CA B1 2E               JP   Z,expectM_2848S90   
2E4F   CD AE 0B               CALL   printStr   
2E52   43 6F 64 65 3A 20 35 20 3A 61 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{%a};^"   
2E63   CD AE 0B               CALL   printStr   
2E66   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E75   21 05 00               LD   hl,5   
2E78   E5                     PUSH   hl   
2E79   E5                     PUSH   hl   
2E7A   CD CD 0C               CALL   run   
2E7D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2E85   CD 36 0B               CALL   flushBuffer   
2E88   CD AE 0B               CALL   printStr   
2E8B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E98   E1                     POP   hl   
2E99   E5                     PUSH   hl   
2E9A   E5                     PUSH   hl   
2E9B   CD CD 0C               CALL   run   
2E9E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2EAD   CD 36 0B               CALL   flushBuffer   
2EB0   76                     HALT      
2EB1                EXPECTM_2848S90:      
2EB1   E1                     POP   HL   
2EB2                          ;*Macro unroll:  test "5 :a:b{%a};^", 5
2EB2   31 00 4B               LD   SP,STACK   
2EB5   CD F6 0B               CALL   coldInit   
2EB8   CD 0A 49               CALL   execStr   
2EBB   35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 DB   "5 :a:b{%a};^",0   
2EC8   CD 36 0B               CALL   flushBuffer   
2ECB   E1                     POP   HL   
2ECC   E5                     PUSH   HL   
2ECD   11 05 00               LD   DE,5   
2ED0   B7                     OR   A   
2ED1   ED 52                  SBC   HL,DE   
2ED3   7D                     LD   A,L   
2ED4   B4                     OR   H   
2ED5   CA 3C 2F               JP   Z,expectM_2849S91   
2ED8   CD AE 0B               CALL   printStr   
2EDB   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 25 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{%a};^"   
2EEE   CD AE 0B               CALL   printStr   
2EF1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F00   21 05 00               LD   hl,5   
2F03   E5                     PUSH   hl   
2F04   E5                     PUSH   hl   
2F05   CD CD 0C               CALL   run   
2F08   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F10   CD 36 0B               CALL   flushBuffer   
2F13   CD AE 0B               CALL   printStr   
2F16   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F23   E1                     POP   hl   
2F24   E5                     PUSH   hl   
2F25   E5                     PUSH   hl   
2F26   CD CD 0C               CALL   run   
2F29   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2F38   CD 36 0B               CALL   flushBuffer   
2F3B   76                     HALT      
2F3C                EXPECTM_2849S91:      
2F3C   E1                     POP   HL   
2F3D                          ;*Macro unroll:  test ":a{{2}^};^", 2
2F3D   31 00 4B               LD   SP,STACK   
2F40   CD F6 0B               CALL   coldInit   
2F43   CD 0A 49               CALL   execStr   
2F46   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 DB   ":a{{2}^};^",0   
2F51   CD 36 0B               CALL   flushBuffer   
2F54   E1                     POP   HL   
2F55   E5                     PUSH   HL   
2F56   11 02 00               LD   DE,2   
2F59   B7                     OR   A   
2F5A   ED 52                  SBC   HL,DE   
2F5C   7D                     LD   A,L   
2F5D   B4                     OR   H   
2F5E   CA C3 2F               JP   Z,expectM_2850S92   
2F61   CD AE 0B               CALL   printStr   
2F64   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
2F75   CD AE 0B               CALL   printStr   
2F78   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F87   21 02 00               LD   hl,2   
2F8A   E5                     PUSH   hl   
2F8B   E5                     PUSH   hl   
2F8C   CD CD 0C               CALL   run   
2F8F   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
2F97   CD 36 0B               CALL   flushBuffer   
2F9A   CD AE 0B               CALL   printStr   
2F9D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FAA   E1                     POP   hl   
2FAB   E5                     PUSH   hl   
2FAC   E5                     PUSH   hl   
2FAD   CD CD 0C               CALL   run   
2FB0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
2FBF   CD 36 0B               CALL   flushBuffer   
2FC2   76                     HALT      
2FC3                EXPECTM_2850S92:      
2FC3   E1                     POP   HL   
2FC4                          ;*Macro unroll:  test "1 5 :a{{%a}^};^", 5
2FC4   31 00 4B               LD   SP,STACK   
2FC7   CD F6 0B               CALL   coldInit   
2FCA   CD 0A 49               CALL   execStr   
2FCD   31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a}^};^",0   
2FDD   CD 36 0B               CALL   flushBuffer   
2FE0   E1                     POP   HL   
2FE1   E5                     PUSH   HL   
2FE2   11 05 00               LD   DE,5   
2FE5   B7                     OR   A   
2FE6   ED 52                  SBC   HL,DE   
2FE8   7D                     LD   A,L   
2FE9   B4                     OR   H   
2FEA   CA 54 30               JP   Z,expectM_2851S93   
2FED   CD AE 0B               CALL   printStr   
2FF0   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a}^};^"   
3006   CD AE 0B               CALL   printStr   
3009   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3018   21 05 00               LD   hl,5   
301B   E5                     PUSH   hl   
301C   E5                     PUSH   hl   
301D   CD CD 0C               CALL   run   
3020   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3028   CD 36 0B               CALL   flushBuffer   
302B   CD AE 0B               CALL   printStr   
302E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
303B   E1                     POP   hl   
303C   E5                     PUSH   hl   
303D   E5                     PUSH   hl   
303E   CD CD 0C               CALL   run   
3041   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3050   CD 36 0B               CALL   flushBuffer   
3053   76                     HALT      
3054                EXPECTM_2851S93:      
3054   E1                     POP   HL   
3055                          ;*Macro unroll:  test "1 5 :ab{{%a}^};^", 1
3055   31 00 4B               LD   SP,STACK   
3058   CD F6 0B               CALL   coldInit   
305B   CD 0A 49               CALL   execStr   
305E   31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a}^};^",0   
306F   CD 36 0B               CALL   flushBuffer   
3072   E1                     POP   HL   
3073   E5                     PUSH   HL   
3074   11 01 00               LD   DE,1   
3077   B7                     OR   A   
3078   ED 52                  SBC   HL,DE   
307A   7D                     LD   A,L   
307B   B4                     OR   H   
307C   CA E7 30               JP   Z,expectM_2852S94   
307F   CD AE 0B               CALL   printStr   
3082   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a}^};^"   
3099   CD AE 0B               CALL   printStr   
309C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30AB   21 01 00               LD   hl,1   
30AE   E5                     PUSH   hl   
30AF   E5                     PUSH   hl   
30B0   CD CD 0C               CALL   run   
30B3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
30BB   CD 36 0B               CALL   flushBuffer   
30BE   CD AE 0B               CALL   printStr   
30C1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30CE   E1                     POP   hl   
30CF   E5                     PUSH   hl   
30D0   E5                     PUSH   hl   
30D1   CD CD 0C               CALL   run   
30D4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
30E3   CD 36 0B               CALL   flushBuffer   
30E6   76                     HALT      
30E7                EXPECTM_2852S94:      
30E7   E1                     POP   HL   
30E8                          ;*Macro unroll:  test "1 5 :a{{%a 2 +}^};^", 7
30E8   31 00 4B               LD   SP,STACK   
30EB   CD F6 0B               CALL   coldInit   
30EE   CD 0A 49               CALL   execStr   
30F1   31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :a{{%a 2 +}^};^",0   
3105   CD 36 0B               CALL   flushBuffer   
3108   E1                     POP   HL   
3109   E5                     PUSH   HL   
310A   11 07 00               LD   DE,7   
310D   B7                     OR   A   
310E   ED 52                  SBC   HL,DE   
3110   7D                     LD   A,L   
3111   B4                     OR   H   
3112   CA 80 31               JP   Z,expectM_2853S95   
3115   CD AE 0B               CALL   printStr   
3118   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{%a 2 +}^};^"   
3132   CD AE 0B               CALL   printStr   
3135   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3144   21 07 00               LD   hl,7   
3147   E5                     PUSH   hl   
3148   E5                     PUSH   hl   
3149   CD CD 0C               CALL   run   
314C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3154   CD 36 0B               CALL   flushBuffer   
3157   CD AE 0B               CALL   printStr   
315A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3167   E1                     POP   hl   
3168   E5                     PUSH   hl   
3169   E5                     PUSH   hl   
316A   CD CD 0C               CALL   run   
316D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
317C   CD 36 0B               CALL   flushBuffer   
317F   76                     HALT      
3180                EXPECTM_2853S95:      
3180   E1                     POP   HL   
3181                          ;*Macro unroll:  test "1 5 :ab{{%a %b +}^};^", 6
3181   31 00 4B               LD   SP,STACK   
3184   CD F6 0B               CALL   coldInit   
3187   CD 0A 49               CALL   execStr   
318A   31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 DB   "1 5 :ab{{%a %b +}^};^",0   
31A0   CD 36 0B               CALL   flushBuffer   
31A3   E1                     POP   HL   
31A4   E5                     PUSH   HL   
31A5   11 06 00               LD   DE,6   
31A8   B7                     OR   A   
31A9   ED 52                  SBC   HL,DE   
31AB   7D                     LD   A,L   
31AC   B4                     OR   H   
31AD   CA 1D 32               JP   Z,expectM_2854S96   
31B0   CD AE 0B               CALL   printStr   
31B3   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{%a %b +}^};^"   
31CF   CD AE 0B               CALL   printStr   
31D2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31E1   21 06 00               LD   hl,6   
31E4   E5                     PUSH   hl   
31E5   E5                     PUSH   hl   
31E6   CD CD 0C               CALL   run   
31E9   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
31F1   CD 36 0B               CALL   flushBuffer   
31F4   CD AE 0B               CALL   printStr   
31F7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3204   E1                     POP   hl   
3205   E5                     PUSH   hl   
3206   E5                     PUSH   hl   
3207   CD CD 0C               CALL   run   
320A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3219   CD 36 0B               CALL   flushBuffer   
321C   76                     HALT      
321D                EXPECTM_2854S96:      
321D   E1                     POP   HL   
321E                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
321E   31 00 4B               LD   SP,STACK   
3221   CD F6 0B               CALL   coldInit   
3224   CD 0A 49               CALL   execStr   
3227   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a{2}; x= 1 x^",0   
3236   CD 36 0B               CALL   flushBuffer   
3239   E1                     POP   HL   
323A   E5                     PUSH   HL   
323B   11 02 00               LD   DE,2   
323E   B7                     OR   A   
323F   ED 52                  SBC   HL,DE   
3241   7D                     LD   A,L   
3242   B4                     OR   H   
3243   CA AC 32               JP   Z,expectM_2855S97   
3246   CD AE 0B               CALL   printStr   
3249   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
325E   CD AE 0B               CALL   printStr   
3261   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3270   21 02 00               LD   hl,2   
3273   E5                     PUSH   hl   
3274   E5                     PUSH   hl   
3275   CD CD 0C               CALL   run   
3278   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3280   CD 36 0B               CALL   flushBuffer   
3283   CD AE 0B               CALL   printStr   
3286   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3293   E1                     POP   hl   
3294   E5                     PUSH   hl   
3295   E5                     PUSH   hl   
3296   CD CD 0C               CALL   run   
3299   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
32A8   CD 36 0B               CALL   flushBuffer   
32AB   76                     HALT      
32AC                EXPECTM_2855S97:      
32AC   E1                     POP   HL   
32AD                          ;*Macro unroll:  test ":a{%a}; x= 0 1 x^", 1
32AD   31 00 4B               LD   SP,STACK   
32B0   CD F6 0B               CALL   coldInit   
32B3   CD 0A 49               CALL   execStr   
32B6   3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 DB   ":a{%a}; x= 0 1 x^",0   
32C8   CD 36 0B               CALL   flushBuffer   
32CB   E1                     POP   HL   
32CC   E5                     PUSH   HL   
32CD   11 01 00               LD   DE,1   
32D0   B7                     OR   A   
32D1   ED 52                  SBC   HL,DE   
32D3   7D                     LD   A,L   
32D4   B4                     OR   H   
32D5   CA 41 33               JP   Z,expectM_2856S98   
32D8   CD AE 0B               CALL   printStr   
32DB   43 6F 64 65 3A 20 3A 61 7B 25 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{%a}; x= 0 1 x^"   
32F3   CD AE 0B               CALL   printStr   
32F6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3305   21 01 00               LD   hl,1   
3308   E5                     PUSH   hl   
3309   E5                     PUSH   hl   
330A   CD CD 0C               CALL   run   
330D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3315   CD 36 0B               CALL   flushBuffer   
3318   CD AE 0B               CALL   printStr   
331B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3328   E1                     POP   hl   
3329   E5                     PUSH   hl   
332A   E5                     PUSH   hl   
332B   CD CD 0C               CALL   run   
332E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
333D   CD 36 0B               CALL   flushBuffer   
3340   76                     HALT      
3341                EXPECTM_2856S98:      
3341   E1                     POP   HL   
3342                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
3342   31 00 4B               LD   SP,STACK   
3345   CD F6 0B               CALL   coldInit   
3348   CD 0A 49               CALL   execStr   
334B   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
335E   CD 36 0B               CALL   flushBuffer   
3361   E1                     POP   HL   
3362   E5                     PUSH   HL   
3363   11 02 00               LD   DE,2   
3366   B7                     OR   A   
3367   ED 52                  SBC   HL,DE   
3369   7D                     LD   A,L   
336A   B4                     OR   H   
336B   CA D8 33               JP   Z,expectM_2857S99   
336E   CD AE 0B               CALL   printStr   
3371   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
338A   CD AE 0B               CALL   printStr   
338D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
339C   21 02 00               LD   hl,2   
339F   E5                     PUSH   hl   
33A0   E5                     PUSH   hl   
33A1   CD CD 0C               CALL   run   
33A4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
33AC   CD 36 0B               CALL   flushBuffer   
33AF   CD AE 0B               CALL   printStr   
33B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33BF   E1                     POP   hl   
33C0   E5                     PUSH   hl   
33C1   E5                     PUSH   hl   
33C2   CD CD 0C               CALL   run   
33C5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
33D4   CD 36 0B               CALL   flushBuffer   
33D7   76                     HALT      
33D8                EXPECTM_2857S99:      
33D8   E1                     POP   HL   
33D9                          ;*Macro unroll:  test ":a:b{%a}; x= 1 2 x^", 2
33D9   31 00 4B               LD   SP,STACK   
33DC   CD F6 0B               CALL   coldInit   
33DF   CD 0A 49               CALL   execStr   
33E2   3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":a:b{%a}; x= 1 2 x^",0   
33F6   CD 36 0B               CALL   flushBuffer   
33F9   E1                     POP   HL   
33FA   E5                     PUSH   HL   
33FB   11 02 00               LD   DE,2   
33FE   B7                     OR   A   
33FF   ED 52                  SBC   HL,DE   
3401   7D                     LD   A,L   
3402   B4                     OR   H   
3403   CA 71 34               JP   Z,expectM_2858S100   
3406   CD AE 0B               CALL   printStr   
3409   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a}; x= 1 2 x^"   
3423   CD AE 0B               CALL   printStr   
3426   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3435   21 02 00               LD   hl,2   
3438   E5                     PUSH   hl   
3439   E5                     PUSH   hl   
343A   CD CD 0C               CALL   run   
343D   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3445   CD 36 0B               CALL   flushBuffer   
3448   CD AE 0B               CALL   printStr   
344B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3458   E1                     POP   hl   
3459   E5                     PUSH   hl   
345A   E5                     PUSH   hl   
345B   CD CD 0C               CALL   run   
345E   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
346D   CD 36 0B               CALL   flushBuffer   
3470   76                     HALT      
3471                EXPECTM_2858S100:      
3471   E1                     POP   HL   
3472                          ;*Macro unroll:  test ":ab{%b}; x= 1 2 x^", 2
3472   31 00 4B               LD   SP,STACK   
3475   CD F6 0B               CALL   coldInit   
3478   CD 0A 49               CALL   execStr   
347B   3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 DB   ":ab{%b}; x= 1 2 x^",0   
348E   CD 36 0B               CALL   flushBuffer   
3491   E1                     POP   HL   
3492   E5                     PUSH   HL   
3493   11 02 00               LD   DE,2   
3496   B7                     OR   A   
3497   ED 52                  SBC   HL,DE   
3499   7D                     LD   A,L   
349A   B4                     OR   H   
349B   CA 08 35               JP   Z,expectM_2859S101   
349E   CD AE 0B               CALL   printStr   
34A1   43 6F 64 65 3A 20 3A 61 62 7B 25 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{%b}; x= 1 2 x^"   
34BA   CD AE 0B               CALL   printStr   
34BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34CC   21 02 00               LD   hl,2   
34CF   E5                     PUSH   hl   
34D0   E5                     PUSH   hl   
34D1   CD CD 0C               CALL   run   
34D4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
34DC   CD 36 0B               CALL   flushBuffer   
34DF   CD AE 0B               CALL   printStr   
34E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34EF   E1                     POP   hl   
34F0   E5                     PUSH   hl   
34F1   E5                     PUSH   hl   
34F2   CD CD 0C               CALL   run   
34F5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3504   CD 36 0B               CALL   flushBuffer   
3507   76                     HALT      
3508                EXPECTM_2859S101:      
3508   E1                     POP   HL   
3509                          ;*Macro unroll:  test ":ab{%b %a}; x= 10 15 x^ -", 5
3509   31 00 4B               LD   SP,STACK   
350C   CD F6 0B               CALL   coldInit   
350F   CD 0A 49               CALL   execStr   
3512   3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   ":ab{%b %a}; x= 10 15 x^ -",0   
352C   CD 36 0B               CALL   flushBuffer   
352F   E1                     POP   HL   
3530   E5                     PUSH   HL   
3531   11 05 00               LD   DE,5   
3534   B7                     OR   A   
3535   ED 52                  SBC   HL,DE   
3537   7D                     LD   A,L   
3538   B4                     OR   H   
3539   CA AD 35               JP   Z,expectM_2860S102   
353C   CD AE 0B               CALL   printStr   
353F   43 6F 64 65 3A 20 3A 61 62 7B 25 62 20 25 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{%b %a}; x= 10 15 x^ -"   
355F   CD AE 0B               CALL   printStr   
3562   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3571   21 05 00               LD   hl,5   
3574   E5                     PUSH   hl   
3575   E5                     PUSH   hl   
3576   CD CD 0C               CALL   run   
3579   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3581   CD 36 0B               CALL   flushBuffer   
3584   CD AE 0B               CALL   printStr   
3587   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3594   E1                     POP   hl   
3595   E5                     PUSH   hl   
3596   E5                     PUSH   hl   
3597   CD CD 0C               CALL   run   
359A   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
35A9   CD 36 0B               CALL   flushBuffer   
35AC   76                     HALT      
35AD                EXPECTM_2860S102:      
35AD   E1                     POP   HL   
35AE                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
35AE   31 00 4B               LD   SP,STACK   
35B1   CD F6 0B               CALL   coldInit   
35B4   CD 0A 49               CALL   execStr   
35B7   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 DB   ":a:b{2}; x= 1 x^",0   
35C8   CD 36 0B               CALL   flushBuffer   
35CB   E1                     POP   HL   
35CC   E5                     PUSH   HL   
35CD   11 02 00               LD   DE,2   
35D0   B7                     OR   A   
35D1   ED 52                  SBC   HL,DE   
35D3   7D                     LD   A,L   
35D4   B4                     OR   H   
35D5   CA 40 36               JP   Z,expectM_2861S103   
35D8   CD AE 0B               CALL   printStr   
35DB   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
35F2   CD AE 0B               CALL   printStr   
35F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3604   21 02 00               LD   hl,2   
3607   E5                     PUSH   hl   
3608   E5                     PUSH   hl   
3609   CD CD 0C               CALL   run   
360C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3614   CD 36 0B               CALL   flushBuffer   
3617   CD AE 0B               CALL   printStr   
361A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3627   E1                     POP   hl   
3628   E5                     PUSH   hl   
3629   E5                     PUSH   hl   
362A   CD CD 0C               CALL   run   
362D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
363C   CD 36 0B               CALL   flushBuffer   
363F   76                     HALT      
3640                EXPECTM_2861S103:      
3640   E1                     POP   HL   
3641                          ;*Macro unroll:  test "::b{100 %b = %b}; x= x^", 100
3641   31 00 4B               LD   SP,STACK   
3644   CD F6 0B               CALL   coldInit   
3647   CD 0A 49               CALL   execStr   
364A   3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 DB   "::b{100 %b = %b}; x= x^",0   
3662   CD 36 0B               CALL   flushBuffer   
3665   E1                     POP   HL   
3666   E5                     PUSH   HL   
3667   11 64 00               LD   DE,100   
366A   B7                     OR   A   
366B   ED 52                  SBC   HL,DE   
366D   7D                     LD   A,L   
366E   B4                     OR   H   
366F   CA E1 36               JP   Z,expectM_2862S104   
3672   CD AE 0B               CALL   printStr   
3675   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 %b = %b}; x= x^"   
3693   CD AE 0B               CALL   printStr   
3696   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36A5   21 64 00               LD   hl,100   
36A8   E5                     PUSH   hl   
36A9   E5                     PUSH   hl   
36AA   CD CD 0C               CALL   run   
36AD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
36B5   CD 36 0B               CALL   flushBuffer   
36B8   CD AE 0B               CALL   printStr   
36BB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36C8   E1                     POP   hl   
36C9   E5                     PUSH   hl   
36CA   E5                     PUSH   hl   
36CB   CD CD 0C               CALL   run   
36CE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
36DD   CD 36 0B               CALL   flushBuffer   
36E0   76                     HALT      
36E1                EXPECTM_2862S104:      
36E1   E1                     POP   HL   
36E2                          ;*Macro unroll:  test ":a:b{1 %b = %b}; x= 2 x^", 1
36E2   31 00 4B               LD   SP,STACK   
36E5   CD F6 0B               CALL   coldInit   
36E8   CD 0A 49               CALL   execStr   
36EB   3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{1 %b = %b}; x= 2 x^",0   
3704   CD 36 0B               CALL   flushBuffer   
3707   E1                     POP   HL   
3708   E5                     PUSH   HL   
3709   11 01 00               LD   DE,1   
370C   B7                     OR   A   
370D   ED 52                  SBC   HL,DE   
370F   7D                     LD   A,L   
3710   B4                     OR   H   
3711   CA 84 37               JP   Z,expectM_2863S105   
3714   CD AE 0B               CALL   printStr   
3717   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 %b = %b}; x= 2 x^"   
3736   CD AE 0B               CALL   printStr   
3739   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3748   21 01 00               LD   hl,1   
374B   E5                     PUSH   hl   
374C   E5                     PUSH   hl   
374D   CD CD 0C               CALL   run   
3750   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3758   CD 36 0B               CALL   flushBuffer   
375B   CD AE 0B               CALL   printStr   
375E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
376B   E1                     POP   hl   
376C   E5                     PUSH   hl   
376D   E5                     PUSH   hl   
376E   CD CD 0C               CALL   run   
3771   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3780   CD 36 0B               CALL   flushBuffer   
3783   76                     HALT      
3784                EXPECTM_2863S105:      
3784   E1                     POP   HL   
3785                          ;*Macro unroll:  test ":a:b{%a %b = %b}; x= 2 x^", 2
3785   31 00 4B               LD   SP,STACK   
3788   CD F6 0B               CALL   coldInit   
378B   CD 0A 49               CALL   execStr   
378E   3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 DB   ":a:b{%a %b = %b}; x= 2 x^",0   
37A8   CD 36 0B               CALL   flushBuffer   
37AB   E1                     POP   HL   
37AC   E5                     PUSH   HL   
37AD   11 02 00               LD   DE,2   
37B0   B7                     OR   A   
37B1   ED 52                  SBC   HL,DE   
37B3   7D                     LD   A,L   
37B4   B4                     OR   H   
37B5   CA 29 38               JP   Z,expectM_2864S106   
37B8   CD AE 0B               CALL   printStr   
37BB   43 6F 64 65 3A 20 3A 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{%a %b = %b}; x= 2 x^"   
37DB   CD AE 0B               CALL   printStr   
37DE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37ED   21 02 00               LD   hl,2   
37F0   E5                     PUSH   hl   
37F1   E5                     PUSH   hl   
37F2   CD CD 0C               CALL   run   
37F5   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
37FD   CD 36 0B               CALL   flushBuffer   
3800   CD AE 0B               CALL   printStr   
3803   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3810   E1                     POP   hl   
3811   E5                     PUSH   hl   
3812   E5                     PUSH   hl   
3813   CD CD 0C               CALL   run   
3816   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3825   CD 36 0B               CALL   flushBuffer   
3828   76                     HALT      
3829                EXPECTM_2864S106:      
3829   E1                     POP   HL   
382A                          ;*Macro unroll:  test "1 10 20 :ab{/t{%a}{%b} ??};^ +", 11
382A   31 00 4B               LD   SP,STACK   
382D   CD F6 0B               CALL   coldInit   
3830   CD 0A 49               CALL   execStr   
3833   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/t{%a}{%b} ??};^ +",0   
3852   CD 36 0B               CALL   flushBuffer   
3855   E1                     POP   HL   
3856   E5                     PUSH   HL   
3857   11 0B 00               LD   DE,11   
385A   B7                     OR   A   
385B   ED 52                  SBC   HL,DE   
385D   7D                     LD   A,L   
385E   B4                     OR   H   
385F   CA D8 38               JP   Z,expectM_2865S107   
3862   CD AE 0B               CALL   printStr   
3865   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{%a}{%b} ??};^ +"   
388A   CD AE 0B               CALL   printStr   
388D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
389C   21 0B 00               LD   hl,11   
389F   E5                     PUSH   hl   
38A0   E5                     PUSH   hl   
38A1   CD CD 0C               CALL   run   
38A4   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
38AC   CD 36 0B               CALL   flushBuffer   
38AF   CD AE 0B               CALL   printStr   
38B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38BF   E1                     POP   hl   
38C0   E5                     PUSH   hl   
38C1   E5                     PUSH   hl   
38C2   CD CD 0C               CALL   run   
38C5   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
38D4   CD 36 0B               CALL   flushBuffer   
38D7   76                     HALT      
38D8                EXPECTM_2865S107:      
38D8   E1                     POP   HL   
38D9                          ;*Macro unroll:  test "1 10 20 :ab{/f{%a}{%b} ??};^ +", 21
38D9   31 00 4B               LD   SP,STACK   
38DC   CD F6 0B               CALL   coldInit   
38DF   CD 0A 49               CALL   execStr   
38E2   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 DB   "1 10 20 :ab{/f{%a}{%b} ??};^ +",0   
3901   CD 36 0B               CALL   flushBuffer   
3904   E1                     POP   HL   
3905   E5                     PUSH   HL   
3906   11 15 00               LD   DE,21   
3909   B7                     OR   A   
390A   ED 52                  SBC   HL,DE   
390C   7D                     LD   A,L   
390D   B4                     OR   H   
390E   CA 87 39               JP   Z,expectM_2866S108   
3911   CD AE 0B               CALL   printStr   
3914   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{%a}{%b} ??};^ +"   
3939   CD AE 0B               CALL   printStr   
393C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
394B   21 15 00               LD   hl,21   
394E   E5                     PUSH   hl   
394F   E5                     PUSH   hl   
3950   CD CD 0C               CALL   run   
3953   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
395B   CD 36 0B               CALL   flushBuffer   
395E   CD AE 0B               CALL   printStr   
3961   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
396E   E1                     POP   hl   
396F   E5                     PUSH   hl   
3970   E5                     PUSH   hl   
3971   CD CD 0C               CALL   run   
3974   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3983   CD 36 0B               CALL   flushBuffer   
3986   76                     HALT      
3987                EXPECTM_2866S108:      
3987   E1                     POP   HL   
3988                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3988   31 00 4B               LD   SP,STACK   
398B   CD F6 0B               CALL   coldInit   
398E   CD 0A 49               CALL   execStr   
3991   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
399F   CD 36 0B               CALL   flushBuffer   
39A2   E1                     POP   HL   
39A3   E5                     PUSH   HL   
39A4   11 14 00               LD   DE,20   
39A7   B7                     OR   A   
39A8   ED 52                  SBC   HL,DE   
39AA   7D                     LD   A,L   
39AB   B4                     OR   H   
39AC   CA 14 3A               JP   Z,expectM_2867S109   
39AF   CD AE 0B               CALL   printStr   
39B2   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
39C6   CD AE 0B               CALL   printStr   
39C9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39D8   21 14 00               LD   hl,20   
39DB   E5                     PUSH   hl   
39DC   E5                     PUSH   hl   
39DD   CD CD 0C               CALL   run   
39E0   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
39E8   CD 36 0B               CALL   flushBuffer   
39EB   CD AE 0B               CALL   printStr   
39EE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39FB   E1                     POP   hl   
39FC   E5                     PUSH   hl   
39FD   E5                     PUSH   hl   
39FE   CD CD 0C               CALL   run   
3A01   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3A10   CD 36 0B               CALL   flushBuffer   
3A13   76                     HALT      
3A14                EXPECTM_2867S109:      
3A14   E1                     POP   HL   
3A15                          ;*Macro unroll:  test "[10 20 30 40] /s", 4
3A15   31 00 4B               LD   SP,STACK   
3A18   CD F6 0B               CALL   coldInit   
3A1B   CD 0A 49               CALL   execStr   
3A1E   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 DB   "[10 20 30 40] /s",0   
3A2F   CD 36 0B               CALL   flushBuffer   
3A32   E1                     POP   HL   
3A33   E5                     PUSH   HL   
3A34   11 04 00               LD   DE,4   
3A37   B7                     OR   A   
3A38   ED 52                  SBC   HL,DE   
3A3A   7D                     LD   A,L   
3A3B   B4                     OR   H   
3A3C   CA A7 3A               JP   Z,expectM_2868S110   
3A3F   CD AE 0B               CALL   printStr   
3A42   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "Code: ","[10 20 30 40] /s"   
3A59   CD AE 0B               CALL   printStr   
3A5C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A6B   21 04 00               LD   hl,4   
3A6E   E5                     PUSH   hl   
3A6F   E5                     PUSH   hl   
3A70   CD CD 0C               CALL   run   
3A73   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3A7B   CD 36 0B               CALL   flushBuffer   
3A7E   CD AE 0B               CALL   printStr   
3A81   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A8E   E1                     POP   hl   
3A8F   E5                     PUSH   hl   
3A90   E5                     PUSH   hl   
3A91   CD CD 0C               CALL   run   
3A94   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3AA3   CD 36 0B               CALL   flushBuffer   
3AA6   76                     HALT      
3AA7                EXPECTM_2868S110:      
3AA7   E1                     POP   HL   
3AA8                          ;*Macro unroll:  test "/c [1 2 3] 1#", 2
3AA8   31 00 4B               LD   SP,STACK   
3AAB   CD F6 0B               CALL   coldInit   
3AAE   CD 0A 49               CALL   execStr   
3AB1   2F 63 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/c [1 2 3] 1#",0   
3ABF   CD 36 0B               CALL   flushBuffer   
3AC2   E1                     POP   HL   
3AC3   E5                     PUSH   HL   
3AC4   11 02 00               LD   DE,2   
3AC7   B7                     OR   A   
3AC8   ED 52                  SBC   HL,DE   
3ACA   7D                     LD   A,L   
3ACB   B4                     OR   H   
3ACC   CA 34 3B               JP   Z,expectM_2869S111   
3ACF   CD AE 0B               CALL   printStr   
3AD2   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/c [1 2 3] 1#"   
3AE6   CD AE 0B               CALL   printStr   
3AE9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AF8   21 02 00               LD   hl,2   
3AFB   E5                     PUSH   hl   
3AFC   E5                     PUSH   hl   
3AFD   CD CD 0C               CALL   run   
3B00   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3B08   CD 36 0B               CALL   flushBuffer   
3B0B   CD AE 0B               CALL   printStr   
3B0E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B1B   E1                     POP   hl   
3B1C   E5                     PUSH   hl   
3B1D   E5                     PUSH   hl   
3B1E   CD CD 0C               CALL   run   
3B21   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3B30   CD 36 0B               CALL   flushBuffer   
3B33   76                     HALT      
3B34                EXPECTM_2869S111:      
3B34   E1                     POP   HL   
3B35                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1#", 66
3B35   31 00 4B               LD   SP,STACK   
3B38   CD F6 0B               CALL   coldInit   
3B3B   CD 0A 49               CALL   execStr   
3B3E   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 DB   "/c ['A' 'B' 'C'] 1#",0   
3B52   CD 36 0B               CALL   flushBuffer   
3B55   E1                     POP   HL   
3B56   E5                     PUSH   HL   
3B57   11 42 00               LD   DE,66   
3B5A   B7                     OR   A   
3B5B   ED 52                  SBC   HL,DE   
3B5D   7D                     LD   A,L   
3B5E   B4                     OR   H   
3B5F   CA CD 3B               JP   Z,expectM_2870S112   
3B62   CD AE 0B               CALL   printStr   
3B65   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 23 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1#"   
3B7F   CD AE 0B               CALL   printStr   
3B82   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B91   21 42 00               LD   hl,66   
3B94   E5                     PUSH   hl   
3B95   E5                     PUSH   hl   
3B96   CD CD 0C               CALL   run   
3B99   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3BA1   CD 36 0B               CALL   flushBuffer   
3BA4   CD AE 0B               CALL   printStr   
3BA7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BB4   E1                     POP   hl   
3BB5   E5                     PUSH   hl   
3BB6   E5                     PUSH   hl   
3BB7   CD CD 0C               CALL   run   
3BBA   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3BC9   CD 36 0B               CALL   flushBuffer   
3BCC   76                     HALT      
3BCD                EXPECTM_2870S112:      
3BCD   E1                     POP   HL   
3BCE                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3BCE   31 00 4B               LD   SP,STACK   
3BD1   CD F6 0B               CALL   coldInit   
3BD4   CD 0A 49               CALL   execStr   
3BD7   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
3BEB   CD 36 0B               CALL   flushBuffer   
3BEE   E1                     POP   HL   
3BEF   E5                     PUSH   HL   
3BF0   11 0A 00               LD   DE,10   
3BF3   B7                     OR   A   
3BF4   ED 52                  SBC   HL,DE   
3BF6   7D                     LD   A,L   
3BF7   B4                     OR   H   
3BF8   CA 66 3C               JP   Z,expectM_2871S113   
3BFB   CD AE 0B               CALL   printStr   
3BFE   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
3C18   CD AE 0B               CALL   printStr   
3C1B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C2A   21 0A 00               LD   hl,10   
3C2D   E5                     PUSH   hl   
3C2E   E5                     PUSH   hl   
3C2F   CD CD 0C               CALL   run   
3C32   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3C3A   CD 36 0B               CALL   flushBuffer   
3C3D   CD AE 0B               CALL   printStr   
3C40   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C4D   E1                     POP   hl   
3C4E   E5                     PUSH   hl   
3C4F   E5                     PUSH   hl   
3C50   CD CD 0C               CALL   run   
3C53   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3C62   CD 36 0B               CALL   flushBuffer   
3C65   76                     HALT      
3C66                EXPECTM_2871S113:      
3C66   E1                     POP   HL   
3C67                          ;*Macro unroll:  test "10 20 :ab {[{%a}{%b}] 0#^};^", 10
3C67   31 00 4B               LD   SP,STACK   
3C6A   CD F6 0B               CALL   coldInit   
3C6D   CD 0A 49               CALL   execStr   
3C70   31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 DB   "10 20 :ab {[{%a}{%b}] 0#^};^",0   
3C8D   CD 36 0B               CALL   flushBuffer   
3C90   E1                     POP   HL   
3C91   E5                     PUSH   HL   
3C92   11 0A 00               LD   DE,10   
3C95   B7                     OR   A   
3C96   ED 52                  SBC   HL,DE   
3C98   7D                     LD   A,L   
3C99   B4                     OR   H   
3C9A   CA 11 3D               JP   Z,expectM_2872S114   
3C9D   CD AE 0B               CALL   printStr   
3CA0   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab {[{%a}{%b}] 0#^};^"   
3CC3   CD AE 0B               CALL   printStr   
3CC6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CD5   21 0A 00               LD   hl,10   
3CD8   E5                     PUSH   hl   
3CD9   E5                     PUSH   hl   
3CDA   CD CD 0C               CALL   run   
3CDD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3CE5   CD 36 0B               CALL   flushBuffer   
3CE8   CD AE 0B               CALL   printStr   
3CEB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CF8   E1                     POP   hl   
3CF9   E5                     PUSH   hl   
3CFA   E5                     PUSH   hl   
3CFB   CD CD 0C               CALL   run   
3CFE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3D0D   CD 36 0B               CALL   flushBuffer   
3D10   76                     HALT      
3D11                EXPECTM_2872S114:      
3D11   E1                     POP   HL   
3D12                          ;*Macro unroll:  test "0 10 20 :iab {[{%a}{%b}] %i#^};^", 10
3D12   31 00 4B               LD   SP,STACK   
3D15   CD F6 0B               CALL   coldInit   
3D18   CD 0A 49               CALL   execStr   
3D1B   30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "0 10 20 :iab {[{%a}{%b}] %i#^};^",0   
3D3C   CD 36 0B               CALL   flushBuffer   
3D3F   E1                     POP   HL   
3D40   E5                     PUSH   HL   
3D41   11 0A 00               LD   DE,10   
3D44   B7                     OR   A   
3D45   ED 52                  SBC   HL,DE   
3D47   7D                     LD   A,L   
3D48   B4                     OR   H   
3D49   CA C4 3D               JP   Z,expectM_2873S115   
3D4C   CD AE 0B               CALL   printStr   
3D4F   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab {[{%a}{%b}] %i#^};^"   
3D76   CD AE 0B               CALL   printStr   
3D79   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D88   21 0A 00               LD   hl,10   
3D8B   E5                     PUSH   hl   
3D8C   E5                     PUSH   hl   
3D8D   CD CD 0C               CALL   run   
3D90   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3D98   CD 36 0B               CALL   flushBuffer   
3D9B   CD AE 0B               CALL   printStr   
3D9E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DAB   E1                     POP   hl   
3DAC   E5                     PUSH   hl   
3DAD   E5                     PUSH   hl   
3DAE   CD CD 0C               CALL   run   
3DB1   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3DC0   CD 36 0B               CALL   flushBuffer   
3DC3   76                     HALT      
3DC4                EXPECTM_2873S115:      
3DC4   E1                     POP   HL   
3DC5                          ;*Macro unroll:  test "1 10 20 :iab {[{%a}{%b}] %i#^};^", 20
3DC5   31 00 4B               LD   SP,STACK   
3DC8   CD F6 0B               CALL   coldInit   
3DCB   CD 0A 49               CALL   execStr   
3DCE   31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 DB   "1 10 20 :iab {[{%a}{%b}] %i#^};^",0   
3DEF   CD 36 0B               CALL   flushBuffer   
3DF2   E1                     POP   HL   
3DF3   E5                     PUSH   HL   
3DF4   11 14 00               LD   DE,20   
3DF7   B7                     OR   A   
3DF8   ED 52                  SBC   HL,DE   
3DFA   7D                     LD   A,L   
3DFB   B4                     OR   H   
3DFC   CA 77 3E               JP   Z,expectM_2874S116   
3DFF   CD AE 0B               CALL   printStr   
3E02   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 20 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab {[{%a}{%b}] %i#^};^"   
3E29   CD AE 0B               CALL   printStr   
3E2C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E3B   21 14 00               LD   hl,20   
3E3E   E5                     PUSH   hl   
3E3F   E5                     PUSH   hl   
3E40   CD CD 0C               CALL   run   
3E43   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3E4B   CD 36 0B               CALL   flushBuffer   
3E4E   CD AE 0B               CALL   printStr   
3E51   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E5E   E1                     POP   hl   
3E5F   E5                     PUSH   hl   
3E60   E5                     PUSH   hl   
3E61   CD CD 0C               CALL   run   
3E64   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3E73   CD 36 0B               CALL   flushBuffer   
3E76   76                     HALT      
3E77                EXPECTM_2874S116:      
3E77   E1                     POP   HL   
3E78                          ;*Macro unroll:  test "5 [4] :a {%a}; /pa ^", 4
3E78   31 00 4B               LD   SP,STACK   
3E7B   CD F6 0B               CALL   coldInit   
3E7E   CD 0A 49               CALL   execStr   
3E81   35 20 5B 34 5D 20 3A 61 20 7B 25 61 7D 3B 20 2F 70 61 20 5E 00 DB   "5 [4] :a {%a}; /pa ^",0   
3E96   CD 36 0B               CALL   flushBuffer   
3E99   E1                     POP   HL   
3E9A   E5                     PUSH   HL   
3E9B   11 04 00               LD   DE,4   
3E9E   B7                     OR   A   
3E9F   ED 52                  SBC   HL,DE   
3EA1   7D                     LD   A,L   
3EA2   B4                     OR   H   
3EA3   CA 12 3F               JP   Z,expectM_2875S117   
3EA6   CD AE 0B               CALL   printStr   
3EA9   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 20 7B 25 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :a {%a}; /pa ^"   
3EC4   CD AE 0B               CALL   printStr   
3EC7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3ED6   21 04 00               LD   hl,4   
3ED9   E5                     PUSH   hl   
3EDA   E5                     PUSH   hl   
3EDB   CD CD 0C               CALL   run   
3EDE   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3EE6   CD 36 0B               CALL   flushBuffer   
3EE9   CD AE 0B               CALL   printStr   
3EEC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3EF9   E1                     POP   hl   
3EFA   E5                     PUSH   hl   
3EFB   E5                     PUSH   hl   
3EFC   CD CD 0C               CALL   run   
3EFF   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3F0E   CD 36 0B               CALL   flushBuffer   
3F11   76                     HALT      
3F12                EXPECTM_2875S117:      
3F12   E1                     POP   HL   
3F13                          ;*Macro unroll:  test "5 [4] :ab {%a %b +}; /pa ^", 9
3F13   31 00 4B               LD   SP,STACK   
3F16   CD F6 0B               CALL   coldInit   
3F19   CD 0A 49               CALL   execStr   
3F1C   35 20 5B 34 5D 20 3A 61 62 20 7B 25 61 20 25 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 DB   "5 [4] :ab {%a %b +}; /pa ^",0   
3F37   CD 36 0B               CALL   flushBuffer   
3F3A   E1                     POP   HL   
3F3B   E5                     PUSH   HL   
3F3C   11 09 00               LD   DE,9   
3F3F   B7                     OR   A   
3F40   ED 52                  SBC   HL,DE   
3F42   7D                     LD   A,L   
3F43   B4                     OR   H   
3F44   CA B9 3F               JP   Z,expectM_2876S118   
3F47   CD AE 0B               CALL   printStr   
3F4A   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 20 7B 25 61 20 25 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :ab {%a %b +}; /pa ^"   
3F6B   CD AE 0B               CALL   printStr   
3F6E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F7D   21 09 00               LD   hl,9   
3F80   E5                     PUSH   hl   
3F81   E5                     PUSH   hl   
3F82   CD CD 0C               CALL   run   
3F85   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
3F8D   CD 36 0B               CALL   flushBuffer   
3F90   CD AE 0B               CALL   printStr   
3F93   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FA0   E1                     POP   hl   
3FA1   E5                     PUSH   hl   
3FA2   E5                     PUSH   hl   
3FA3   CD CD 0C               CALL   run   
3FA6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
3FB5   CD 36 0B               CALL   flushBuffer   
3FB8   76                     HALT      
3FB9                EXPECTM_2876S118:      
3FB9   E1                     POP   HL   
3FBA                          ;*Macro unroll:  test "5 [4] :ab {%a %b -}; /pa ^", 1
3FBA   31 00 4B               LD   SP,STACK   
3FBD   CD F6 0B               CALL   coldInit   
3FC0   CD 0A 49               CALL   execStr   
3FC3   35 20 5B 34 5D 20 3A 61 62 20 7B 25 61 20 25 62 20 2D 7D 3B 20 2F 70 61 20 5E 00 DB   "5 [4] :ab {%a %b -}; /pa ^",0   
3FDE   CD 36 0B               CALL   flushBuffer   
3FE1   E1                     POP   HL   
3FE2   E5                     PUSH   HL   
3FE3   11 01 00               LD   DE,1   
3FE6   B7                     OR   A   
3FE7   ED 52                  SBC   HL,DE   
3FE9   7D                     LD   A,L   
3FEA   B4                     OR   H   
3FEB   CA 60 40               JP   Z,expectM_2877S119   
3FEE   CD AE 0B               CALL   printStr   
3FF1   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 20 7B 25 61 20 25 62 20 2D 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :ab {%a %b -}; /pa ^"   
4012   CD AE 0B               CALL   printStr   
4015   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4024   21 01 00               LD   hl,1   
4027   E5                     PUSH   hl   
4028   E5                     PUSH   hl   
4029   CD CD 0C               CALL   run   
402C   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4034   CD 36 0B               CALL   flushBuffer   
4037   CD AE 0B               CALL   printStr   
403A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4047   E1                     POP   hl   
4048   E5                     PUSH   hl   
4049   E5                     PUSH   hl   
404A   CD CD 0C               CALL   run   
404D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
405C   CD 36 0B               CALL   flushBuffer   
405F   76                     HALT      
4060                EXPECTM_2877S119:      
4060   E1                     POP   HL   
4061                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
4061   31 00 4B               LD   SP,STACK   
4064   CD F6 0B               CALL   coldInit   
4067   CD 0A 49               CALL   execStr   
406A   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
4082   CD 36 0B               CALL   flushBuffer   
4085   E1                     POP   HL   
4086   E5                     PUSH   HL   
4087   11 06 00               LD   DE,6   
408A   B7                     OR   A   
408B   ED 52                  SBC   HL,DE   
408D   7D                     LD   A,L   
408E   B4                     OR   H   
408F   CA 01 41               JP   Z,expectM_2878S120   
4092   CD AE 0B               CALL   printStr   
4095   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
40B3   CD AE 0B               CALL   printStr   
40B6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40C5   21 06 00               LD   hl,6   
40C8   E5                     PUSH   hl   
40C9   E5                     PUSH   hl   
40CA   CD CD 0C               CALL   run   
40CD   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
40D5   CD 36 0B               CALL   flushBuffer   
40D8   CD AE 0B               CALL   printStr   
40DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40E8   E1                     POP   hl   
40E9   E5                     PUSH   hl   
40EA   E5                     PUSH   hl   
40EB   CD CD 0C               CALL   run   
40EE   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
40FD   CD 36 0B               CALL   flushBuffer   
4100   76                     HALT      
4101                EXPECTM_2878S120:      
4101   E1                     POP   HL   
4102                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
4102   31 00 4B               LD   SP,STACK   
4105   CD F6 0B               CALL   coldInit   
4108   CD 0A 49               CALL   execStr   
410B   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
4126   CD 36 0B               CALL   flushBuffer   
4129   E1                     POP   HL   
412A   E5                     PUSH   HL   
412B   11 02 00               LD   DE,2   
412E   B7                     OR   A   
412F   ED 52                  SBC   HL,DE   
4131   7D                     LD   A,L   
4132   B4                     OR   H   
4133   CA A8 41               JP   Z,expectM_2879S121   
4136   CD AE 0B               CALL   printStr   
4139   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
415A   CD AE 0B               CALL   printStr   
415D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
416C   21 02 00               LD   hl,2   
416F   E5                     PUSH   hl   
4170   E5                     PUSH   hl   
4171   CD CD 0C               CALL   run   
4174   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
417C   CD 36 0B               CALL   flushBuffer   
417F   CD AE 0B               CALL   printStr   
4182   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
418F   E1                     POP   hl   
4190   E5                     PUSH   hl   
4191   E5                     PUSH   hl   
4192   CD CD 0C               CALL   run   
4195   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
41A4   CD 36 0B               CALL   flushBuffer   
41A7   76                     HALT      
41A8                EXPECTM_2879S121:      
41A8   E1                     POP   HL   
41A9                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
41A9   31 00 4B               LD   SP,STACK   
41AC   CD F6 0B               CALL   coldInit   
41AF   CD 0A 49               CALL   execStr   
41B2   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
41D8   CD 36 0B               CALL   flushBuffer   
41DB   E1                     POP   HL   
41DC   E5                     PUSH   HL   
41DD   11 0A 00               LD   DE,10   
41E0   B7                     OR   A   
41E1   ED 52                  SBC   HL,DE   
41E3   7D                     LD   A,L   
41E4   B4                     OR   H   
41E5   CA 65 42               JP   Z,expectM_2880S122   
41E8   CD AE 0B               CALL   printStr   
41EB   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
4217   CD AE 0B               CALL   printStr   
421A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4229   21 0A 00               LD   hl,10   
422C   E5                     PUSH   hl   
422D   E5                     PUSH   hl   
422E   CD CD 0C               CALL   run   
4231   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4239   CD 36 0B               CALL   flushBuffer   
423C   CD AE 0B               CALL   printStr   
423F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
424C   E1                     POP   hl   
424D   E5                     PUSH   hl   
424E   E5                     PUSH   hl   
424F   CD CD 0C               CALL   run   
4252   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4261   CD 36 0B               CALL   flushBuffer   
4264   76                     HALT      
4265                EXPECTM_2880S122:      
4265   E1                     POP   HL   
4266                          ;*Macro unroll:  test "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^", 6
4266   31 00 4B               LD   SP,STACK   
4269   CD F6 0B               CALL   coldInit   
426C   CD 0A 49               CALL   execStr   
426F   33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 DB   "3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^",0   
429C   CD 36 0B               CALL   flushBuffer   
429F   E1                     POP   HL   
42A0   E5                     PUSH   HL   
42A1   11 06 00               LD   DE,6   
42A4   B7                     OR   A   
42A5   ED 52                  SBC   HL,DE   
42A7   7D                     LD   A,L   
42A8   B4                     OR   H   
42A9   CA 30 43               JP   Z,expectM_2881S123   
42AC   CD AE 0B               CALL   printStr   
42AF   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 20 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "Code: ","3 :a:bc {%a %c = ( %c %c -- %c /br )^ + +};^"   
42E2   CD AE 0B               CALL   printStr   
42E5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42F4   21 06 00               LD   hl,6   
42F7   E5                     PUSH   hl   
42F8   E5                     PUSH   hl   
42F9   CD CD 0C               CALL   run   
42FC   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4304   CD 36 0B               CALL   flushBuffer   
4307   CD AE 0B               CALL   printStr   
430A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4317   E1                     POP   hl   
4318   E5                     PUSH   hl   
4319   E5                     PUSH   hl   
431A   CD CD 0C               CALL   run   
431D   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
432C   CD 36 0B               CALL   flushBuffer   
432F   76                     HALT      
4330                EXPECTM_2881S123:      
4330   E1                     POP   HL   
4331                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
4331   31 00 4B               LD   SP,STACK   
4334   CD F6 0B               CALL   coldInit   
4337   CD 0A 49               CALL   execStr   
433A   27 41 27 20 31 20 2D 20 2F 61 64 00 DB   "'A' 1 - /ad",0   
4346   CD 36 0B               CALL   flushBuffer   
4349   E1                     POP   HL   
434A   E5                     PUSH   HL   
434B   11 00 00               LD   DE,NUL   
434E   B7                     OR   A   
434F   ED 52                  SBC   HL,DE   
4351   7D                     LD   A,L   
4352   B4                     OR   H   
4353   CA B9 43               JP   Z,expectM_2882S124   
4356   CD AE 0B               CALL   printStr   
4359   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
436B   CD AE 0B               CALL   printStr   
436E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
437D   21 00 00               LD   hl,NUL   
4380   E5                     PUSH   hl   
4381   E5                     PUSH   hl   
4382   CD CD 0C               CALL   run   
4385   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
438D   CD 36 0B               CALL   flushBuffer   
4390   CD AE 0B               CALL   printStr   
4393   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43A0   E1                     POP   hl   
43A1   E5                     PUSH   hl   
43A2   E5                     PUSH   hl   
43A3   CD CD 0C               CALL   run   
43A6   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
43B5   CD 36 0B               CALL   flushBuffer   
43B8   76                     HALT      
43B9                EXPECTM_2882S124:      
43B9   E1                     POP   HL   
43BA                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
43BA   31 00 4B               LD   SP,STACK   
43BD   CD F6 0B               CALL   coldInit   
43C0   CD 0A 49               CALL   execStr   
43C3   27 5A 27 20 31 20 2B 20 2F 61 64 00 DB   "'Z' 1 + /ad",0   
43CF   CD 36 0B               CALL   flushBuffer   
43D2   E1                     POP   HL   
43D3   E5                     PUSH   HL   
43D4   11 00 00               LD   DE,NUL   
43D7   B7                     OR   A   
43D8   ED 52                  SBC   HL,DE   
43DA   7D                     LD   A,L   
43DB   B4                     OR   H   
43DC   CA 42 44               JP   Z,expectM_2883S125   
43DF   CD AE 0B               CALL   printStr   
43E2   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
43F4   CD AE 0B               CALL   printStr   
43F7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4406   21 00 00               LD   hl,NUL   
4409   E5                     PUSH   hl   
440A   E5                     PUSH   hl   
440B   CD CD 0C               CALL   run   
440E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4416   CD 36 0B               CALL   flushBuffer   
4419   CD AE 0B               CALL   printStr   
441C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4429   E1                     POP   hl   
442A   E5                     PUSH   hl   
442B   E5                     PUSH   hl   
442C   CD CD 0C               CALL   run   
442F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
443E   CD 36 0B               CALL   flushBuffer   
4441   76                     HALT      
4442                EXPECTM_2883S125:      
4442   E1                     POP   HL   
4443                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
4443   31 00 4B               LD   SP,STACK   
4446   CD F6 0B               CALL   coldInit   
4449   CD 0A 49               CALL   execStr   
444C   27 61 27 20 31 20 2D 20 2F 61 64 00 DB   "'a' 1 - /ad",0   
4458   CD 36 0B               CALL   flushBuffer   
445B   E1                     POP   HL   
445C   E5                     PUSH   HL   
445D   11 00 00               LD   DE,NUL   
4460   B7                     OR   A   
4461   ED 52                  SBC   HL,DE   
4463   7D                     LD   A,L   
4464   B4                     OR   H   
4465   CA CB 44               JP   Z,expectM_2884S126   
4468   CD AE 0B               CALL   printStr   
446B   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
447D   CD AE 0B               CALL   printStr   
4480   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
448F   21 00 00               LD   hl,NUL   
4492   E5                     PUSH   hl   
4493   E5                     PUSH   hl   
4494   CD CD 0C               CALL   run   
4497   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
449F   CD 36 0B               CALL   flushBuffer   
44A2   CD AE 0B               CALL   printStr   
44A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44B2   E1                     POP   hl   
44B3   E5                     PUSH   hl   
44B4   E5                     PUSH   hl   
44B5   CD CD 0C               CALL   run   
44B8   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
44C7   CD 36 0B               CALL   flushBuffer   
44CA   76                     HALT      
44CB                EXPECTM_2884S126:      
44CB   E1                     POP   HL   
44CC                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
44CC   31 00 4B               LD   SP,STACK   
44CF   CD F6 0B               CALL   coldInit   
44D2   CD 0A 49               CALL   execStr   
44D5   27 7A 27 20 31 20 2B 20 2F 61 64 00 DB   "'z' 1 + /ad",0   
44E1   CD 36 0B               CALL   flushBuffer   
44E4   E1                     POP   HL   
44E5   E5                     PUSH   HL   
44E6   11 00 00               LD   DE,NUL   
44E9   B7                     OR   A   
44EA   ED 52                  SBC   HL,DE   
44EC   7D                     LD   A,L   
44ED   B4                     OR   H   
44EE   CA 54 45               JP   Z,expectM_2885S127   
44F1   CD AE 0B               CALL   printStr   
44F4   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
4506   CD AE 0B               CALL   printStr   
4509   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4518   21 00 00               LD   hl,NUL   
451B   E5                     PUSH   hl   
451C   E5                     PUSH   hl   
451D   CD CD 0C               CALL   run   
4520   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4528   CD 36 0B               CALL   flushBuffer   
452B   CD AE 0B               CALL   printStr   
452E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
453B   E1                     POP   hl   
453C   E5                     PUSH   hl   
453D   E5                     PUSH   hl   
453E   CD CD 0C               CALL   run   
4541   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4550   CD 36 0B               CALL   flushBuffer   
4553   76                     HALT      
4554                EXPECTM_2885S127:      
4554   E1                     POP   HL   
4555                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
4555   31 00 4B               LD   SP,STACK   
4558   CD F6 0B               CALL   coldInit   
455B   CD 0A 49               CALL   execStr   
455E   27 7A 27 20 2F 61 64 00 DB   "'z' /ad",0   
4566   CD 36 0B               CALL   flushBuffer   
4569   E1                     POP   HL   
456A   E5                     PUSH   HL   
456B   11 66 4D               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
456E   B7                     OR   A   
456F   ED 52                  SBC   HL,DE   
4571   7D                     LD   A,L   
4572   B4                     OR   H   
4573   CA D5 45               JP   Z,expectM_2886S128   
4576   CD AE 0B               CALL   printStr   
4579   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
4587   CD AE 0B               CALL   printStr   
458A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4599   21 66 4D               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
459C   E5                     PUSH   hl   
459D   E5                     PUSH   hl   
459E   CD CD 0C               CALL   run   
45A1   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
45A9   CD 36 0B               CALL   flushBuffer   
45AC   CD AE 0B               CALL   printStr   
45AF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45BC   E1                     POP   hl   
45BD   E5                     PUSH   hl   
45BE   E5                     PUSH   hl   
45BF   CD CD 0C               CALL   run   
45C2   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
45D1   CD 36 0B               CALL   flushBuffer   
45D4   76                     HALT      
45D5                EXPECTM_2886S128:      
45D5   E1                     POP   HL   
45D6                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
45D6   31 00 4B               LD   SP,STACK   
45D9   CD F6 0B               CALL   coldInit   
45DC   CD 0A 49               CALL   execStr   
45DF   27 61 27 20 2F 61 64 00 DB   "'a' /ad",0   
45E7   CD 36 0B               CALL   flushBuffer   
45EA   E1                     POP   HL   
45EB   E5                     PUSH   HL   
45EC   11 34 4D               LD   DE,VARS + ("Z"-"A"+1)*2   
45EF   B7                     OR   A   
45F0   ED 52                  SBC   HL,DE   
45F2   7D                     LD   A,L   
45F3   B4                     OR   H   
45F4   CA 56 46               JP   Z,expectM_2887S129   
45F7   CD AE 0B               CALL   printStr   
45FA   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
4608   CD AE 0B               CALL   printStr   
460B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
461A   21 34 4D               LD   hl,VARS + ("Z"-"A"+1)*2   
461D   E5                     PUSH   hl   
461E   E5                     PUSH   hl   
461F   CD CD 0C               CALL   run   
4622   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
462A   CD 36 0B               CALL   flushBuffer   
462D   CD AE 0B               CALL   printStr   
4630   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
463D   E1                     POP   hl   
463E   E5                     PUSH   hl   
463F   E5                     PUSH   hl   
4640   CD CD 0C               CALL   run   
4643   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4652   CD 36 0B               CALL   flushBuffer   
4655   76                     HALT      
4656                EXPECTM_2887S129:      
4656   E1                     POP   HL   
4657                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
4657   31 00 4B               LD   SP,STACK   
465A   CD F6 0B               CALL   coldInit   
465D   CD 0A 49               CALL   execStr   
4660   27 5A 27 20 2F 61 64 00 DB   "'Z' /ad",0   
4668   CD 36 0B               CALL   flushBuffer   
466B   E1                     POP   HL   
466C   E5                     PUSH   HL   
466D   11 32 4D               LD   DE,VARS + ("Z"-"A")*2   
4670   B7                     OR   A   
4671   ED 52                  SBC   HL,DE   
4673   7D                     LD   A,L   
4674   B4                     OR   H   
4675   CA D7 46               JP   Z,expectM_2888S130   
4678   CD AE 0B               CALL   printStr   
467B   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
4689   CD AE 0B               CALL   printStr   
468C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
469B   21 32 4D               LD   hl,VARS + ("Z"-"A")*2   
469E   E5                     PUSH   hl   
469F   E5                     PUSH   hl   
46A0   CD CD 0C               CALL   run   
46A3   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
46AB   CD 36 0B               CALL   flushBuffer   
46AE   CD AE 0B               CALL   printStr   
46B1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46BE   E1                     POP   hl   
46BF   E5                     PUSH   hl   
46C0   E5                     PUSH   hl   
46C1   CD CD 0C               CALL   run   
46C4   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
46D3   CD 36 0B               CALL   flushBuffer   
46D6   76                     HALT      
46D7                EXPECTM_2888S130:      
46D7   E1                     POP   HL   
46D8                          ;*Macro unroll:  test "'A' /ad", VARS
46D8   31 00 4B               LD   SP,STACK   
46DB   CD F6 0B               CALL   coldInit   
46DE   CD 0A 49               CALL   execStr   
46E1   27 41 27 20 2F 61 64 00 DB   "'A' /ad",0   
46E9   CD 36 0B               CALL   flushBuffer   
46EC   E1                     POP   HL   
46ED   E5                     PUSH   HL   
46EE   11 00 4D               LD   DE,VARS   
46F1   B7                     OR   A   
46F2   ED 52                  SBC   HL,DE   
46F4   7D                     LD   A,L   
46F5   B4                     OR   H   
46F6   CA 58 47               JP   Z,expectM_2889S131   
46F9   CD AE 0B               CALL   printStr   
46FC   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
470A   CD AE 0B               CALL   printStr   
470D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
471C   21 00 4D               LD   hl,VARS   
471F   E5                     PUSH   hl   
4720   E5                     PUSH   hl   
4721   CD CD 0C               CALL   run   
4724   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
472C   CD 36 0B               CALL   flushBuffer   
472F   CD AE 0B               CALL   printStr   
4732   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
473F   E1                     POP   hl   
4740   E5                     PUSH   hl   
4741   E5                     PUSH   hl   
4742   CD CD 0C               CALL   run   
4745   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
4754   CD 36 0B               CALL   flushBuffer   
4757   76                     HALT      
4758                EXPECTM_2889S131:      
4758   E1                     POP   HL   
4759                          ;*Macro unroll:  test "-1. /c/vB 0#", $2D
4759   31 00 4B               LD   SP,STACK   
475C   CD F6 0B               CALL   coldInit   
475F   CD 0A 49               CALL   execStr   
4762   2D 31 2E 20 2F 63 2F 76 42 20 30 23 00 DB   "-1. /c/vB 0#",0   
476F   CD 36 0B               CALL   flushBuffer   
4772   E1                     POP   HL   
4773   E5                     PUSH   HL   
4774   11 2D 00               LD   DE,$2D   
4777   B7                     OR   A   
4778   ED 52                  SBC   HL,DE   
477A   7D                     LD   A,L   
477B   B4                     OR   H   
477C   CA E3 47               JP   Z,expectM_2890S132   
477F   CD AE 0B               CALL   printStr   
4782   43 6F 64 65 3A 20 2D 31 2E 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "Code: ","-1. /c/vB 0#"   
4795   CD AE 0B               CALL   printStr   
4798   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47A7   21 2D 00               LD   hl,$2D   
47AA   E5                     PUSH   hl   
47AB   E5                     PUSH   hl   
47AC   CD CD 0C               CALL   run   
47AF   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
47B7   CD 36 0B               CALL   flushBuffer   
47BA   CD AE 0B               CALL   printStr   
47BD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47CA   E1                     POP   hl   
47CB   E5                     PUSH   hl   
47CC   E5                     PUSH   hl   
47CD   CD CD 0C               CALL   run   
47D0   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
47DF   CD 36 0B               CALL   flushBuffer   
47E2   76                     HALT      
47E3                EXPECTM_2890S132:      
47E3   E1                     POP   HL   
47E4                          ;*Macro unroll:  test {DQUOTE,"A",DQUOTE,".s /c/vB 0#"}, 65
47E4   31 00 4B               LD   SP,STACK   
47E7   CD F6 0B               CALL   coldInit   
47EA   CD 0A 49               CALL   execStr   
47ED   22 41 22 2E 73 20 2F 63 2F 76 42 20 30 23 00 DB   DQUOTE,"A",DQUOTE,".s /c/vB 0#",0   
47FC   CD 36 0B               CALL   flushBuffer   
47FF   E1                     POP   HL   
4800   E5                     PUSH   HL   
4801   11 41 00               LD   DE,65   
4804   B7                     OR   A   
4805   ED 52                  SBC   HL,DE   
4807   7D                     LD   A,L   
4808   B4                     OR   H   
4809   CA 72 48               JP   Z,expectM_2891S133   
480C   CD AE 0B               CALL   printStr   
480F   43 6F 64 65 3A 20 22 41 22 2E 73 20 2F 63 2F 76 42 20 30 23 00 .CSTR   "Code: ",DQUOTE,"A",DQUOTE,".s /c/vB 0#"   
4824   CD AE 0B               CALL   printStr   
4827   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4836   21 41 00               LD   hl,65   
4839   E5                     PUSH   hl   
483A   E5                     PUSH   hl   
483B   CD CD 0C               CALL   run   
483E   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
4846   CD 36 0B               CALL   flushBuffer   
4849   CD AE 0B               CALL   printStr   
484C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4859   E1                     POP   hl   
485A   E5                     PUSH   hl   
485B   E5                     PUSH   hl   
485C   CD CD 0C               CALL   run   
485F   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
486E   CD 36 0B               CALL   flushBuffer   
4871   76                     HALT      
4872                EXPECTM_2891S133:      
4872   E1                     POP   HL   
4873                          ;*Macro unroll:  test "123. /c/vB 1#", $32
4873   31 00 4B               LD   SP,STACK   
4876   CD F6 0B               CALL   coldInit   
4879   CD 0A 49               CALL   execStr   
487C   31 32 33 2E 20 2F 63 2F 76 42 20 31 23 00 DB   "123. /c/vB 1#",0   
488A   CD 36 0B               CALL   flushBuffer   
488D   E1                     POP   HL   
488E   E5                     PUSH   HL   
488F   11 32 00               LD   DE,$32   
4892   B7                     OR   A   
4893   ED 52                  SBC   HL,DE   
4895   7D                     LD   A,L   
4896   B4                     OR   H   
4897   CA FF 48               JP   Z,expectM_2892S134   
489A   CD AE 0B               CALL   printStr   
489D   43 6F 64 65 3A 20 31 32 33 2E 20 2F 63 2F 76 42 20 31 23 00 .CSTR   "Code: ","123. /c/vB 1#"   
48B1   CD AE 0B               CALL   printStr   
48B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48C3   21 32 00               LD   hl,$32   
48C6   E5                     PUSH   hl   
48C7   E5                     PUSH   hl   
48C8   CD CD 0C               CALL   run   
48CB   2E 20 2F 68 2E 2F 64 00 .CSTR   ". /h./d"   
48D3   CD 36 0B               CALL   flushBuffer   
48D6   CD AE 0B               CALL   printStr   
48D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48E6   E1                     POP   hl   
48E7   E5                     PUSH   hl   
48E8   E5                     PUSH   hl   
48E9   CD CD 0C               CALL   run   
48EC   2E 20 2F 68 2E 2F 64 20 60 0D 0A 60 2E 73 00 .CSTR   ". /h./d `\r\n`.s"   
48FB   CD 36 0B               CALL   flushBuffer   
48FE   76                     HALT      
48FF                EXPECTM_2892S134:      
48FF   E1                     POP   HL   
4900                             ; 
4900   CD AE 0B               CALL   printStr   
4903   44 6F 6E 65 21 00      .CSTR   "Done!"   
4909   76                     HALT      
490A                             ; executes a null teminated string (null executes exit_)
490A                             ; the string should be immedaitely following the call
490A                EXECSTR:      ; create a root stack frame
490A   C1                     POP   bc   ; bc = code*
490B   0B                     DEC   bc   ; dec to prepare for next routine
490C   11 00 00               LD   de,0   
490F   D5                     PUSH   de   ; push fake IP
4910   D5                     PUSH   de   ; push null arg_list*
4911   D5                     PUSH   de   ; push null first_arg*
4912   D5                     PUSH   de   ; push fake BP
4913   DD E9                  JP   (ix)   
4915                STKSIZE:   EQU   $100   ; Stack size
4915                TIBSIZE:   EQU   $100   ; 256 bytes
4915                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
4915                          ALIGN   $100   
4A00                          DS   STKSIZE   
4B00                STACK:       
4B00                          ALIGN   $100   
4B00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
4C00                          ALIGN   $100   
4C00                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
4D00                          ALIGN   $100   
4D00                VARS:        
4D00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
4DD0                RESTARTS:      
4DD0                RST08:    DS   2   
4DD2                RST10:    DS   2   
4DD4                RST18:    DS   2   
4DD6                RST20:    DS   2   
4DD8                RST28:    DS   2   
4DDA                RST30:    DS   2   ; 
4DDC                BAUD:     DS   2   ; 
4DDE                INTVEC:   DS   2   ; 
4DE0                NMIVEC:   DS   2   ; 
4DE2                GETCVEC:   DS   2   ; 
4DE4                PUTCVEC:   DS   2   ; 
4DE6                SYSVARS:      
4DE6                             ; initialised sys variables (preserved)
4DE6                VDATAWIDTH:   DS   2   ; 
4DE8                VNUMBASE:   DS   2   ; 
4DEA                VTIBPTR:   DS   2   ; 
4DEC                VBUFPTR:   DS   2   ; 
4DEE                VNEXT:    DS   2   ; 
4DF0                VHEAPPTR:   DS   2   ; 
4DF2                             ; uninitialised sys variables (preserved)
4DF2                VPOINTER:   DS   2   ; 
4DF4                VREMAIN:   DS   2   ; 
4DF6                VSAVEDIP:   DS   2   ; 
4DF8                VSAVEDSP:   DS   2   ; 
4DFA                VSAVEDNEXT:   DS   2   ; 
4DFC                VSAVEDBP:   DS   2   ; 
4DFE                VCHECKSUM:   DS   2   ; 
4E00                             ; uninitialised sys variables (unpreserved)
4E00                VTEMP1:   DS   2   ; 
4E02                VTEMP2:   DS   2   ; 
4E04                VLASTDEF:   DS   2   ; 
4E06                VHASHSTR:   DS   2   ; 
4E08                TBPTR:    DS   2   ; reserved for tests
4E0A                TITLEBUF:   DS   20   
4E1E                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0B2C DEFINED AT LINE 1851 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 2081 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1668 IN MAIN.asm
                    > USED AT LINE 1915 IN MAIN.asm
                    > USED AT LINE 2065 IN MAIN.asm
                    > USED AT LINE 2127 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 986 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 1454 IN MAIN.asm
                    > USED AT LINE 1469 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 1713 IN MAIN.asm
                    > USED AT LINE 1742 IN MAIN.asm
                    > USED AT LINE 2084 IN MAIN.asm
                    > USED AT LINE 2172 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
DQUOTE:             0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 1142 IN MAIN.asm
                    > USED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 1934 IN MAIN.asm
                    > USED AT LINE 2186 IN MAIN.asm
                    > USED AT LINE 2201 IN MAIN.asm
                    > USED AT LINE 8
                    > USED AT LINE 20
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2090 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2092 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2094 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 2096 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 53 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN MAIN.asm
                    > USED AT LINE 2018 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 68 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 171 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 173 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 175 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 177 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 179 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 181 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 183 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 185 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 187 IN MAIN.asm
LPAREN_:            0318 DEFINED AT LINE 189 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 190 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 192 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 194 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 196 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 198 IN MAIN.asm
COLON_:             0327 DEFINED AT LINE 200 IN MAIN.asm
UPCASE_:            032A DEFINED AT LINE 202 IN MAIN.asm
LOWCASE_:           032D DEFINED AT LINE 204 IN MAIN.asm
QUESTION_:          0330 DEFINED AT LINE 206 IN MAIN.asm
STAR_:              0333 DEFINED AT LINE 208 IN MAIN.asm
BANG_:              0336 DEFINED AT LINE 210 IN MAIN.asm
NUM_:               033B DEFINED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 1170 IN MAIN.asm
HASH_:              033E DEFINED AT LINE 215 IN MAIN.asm
PIPE_:              0341 DEFINED AT LINE 217 IN MAIN.asm
CARET_:             0344 DEFINED AT LINE 219 IN MAIN.asm
COMMA_:             0347 DEFINED AT LINE 221 IN MAIN.asm
DBLQUOTE_:          034A DEFINED AT LINE 223 IN MAIN.asm
MINUS_:             034D DEFINED AT LINE 225 IN MAIN.asm
EQ_:                0350 DEFINED AT LINE 227 IN MAIN.asm
EQ0:                035A DEFINED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 231 IN MAIN.asm
EQ1:                035B DEFINED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
GT_:                035F DEFINED AT LINE 240 IN MAIN.asm
LT_:                036A DEFINED AT LINE 248 IN MAIN.asm
LT1:                0373 DEFINED AT LINE 255 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
SLASH_:             037C DEFINED AT LINE 260 IN MAIN.asm
NOP_:               037F DEFINED AT LINE 262 IN MAIN.asm
RPAREN_:            0381 DEFINED AT LINE 264 IN MAIN.asm
PLUS:               0384 DEFINED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
ADD:                0384 DEFINED AT LINE 271 IN MAIN.asm
ADD1:               038F DEFINED AT LINE 279 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
ADD3:               0393 DEFINED AT LINE 284 IN MAIN.asm
                    > USED AT LINE 746 IN MAIN.asm
                    > USED AT LINE 1022 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
AT:                 0396 DEFINED AT LINE 290 IN MAIN.asm
                    > USED AT LINE 176 IN MAIN.asm
ADDR:               0396 DEFINED AT LINE 291 IN MAIN.asm
AMPER:              03A0 DEFINED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
AND:                03A0 DEFINED AT LINE 297 IN MAIN.asm
AND1:               03A7 DEFINED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 319 IN MAIN.asm
PIPE:               03AB DEFINED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
OR:                 03AB DEFINED AT LINE 311 IN MAIN.asm
XOR:                03B4 DEFINED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 733 IN MAIN.asm
XOR1:               03B5 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 335 IN MAIN.asm
INVERT:             03BF DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 1453 IN MAIN.asm
PERCENT:            03C4 DEFINED AT LINE 340 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
ARG:                03C4 DEFINED AT LINE 341 IN MAIN.asm
ARG0:               03E0 DEFINED AT LINE 360 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
ARG0A:              03E9 DEFINED AT LINE 368 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 352 IN MAIN.asm
ARG1:               03EE DEFINED AT LINE 371 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
ARG1A:              03F6 DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 370 IN MAIN.asm
LBRACK:             03F9 DEFINED AT LINE 382 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
ARRAYSTART:         03F9 DEFINED AT LINE 383 IN MAIN.asm
RBRACK:             0415 DEFINED AT LINE 397 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
ARRAYEND:           0415 DEFINED AT LINE 398 IN MAIN.asm
ARRAYEND1:          0431 DEFINED AT LINE 415 IN MAIN.asm
                    > USED AT LINE 432 IN MAIN.asm
ARRAYEND2:          0441 DEFINED AT LINE 425 IN MAIN.asm
                    > USED AT LINE 421 IN MAIN.asm
ARRAYEND3:          0446 DEFINED AT LINE 429 IN MAIN.asm
                    > USED AT LINE 414 IN MAIN.asm
HASH:               0465 DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
ARRAYINDEX:         0465 DEFINED AT LINE 454 IN MAIN.asm
ARRAYINDEX0:        046D DEFINED AT LINE 460 IN MAIN.asm
ARRAYINDEX1:        046E DEFINED AT LINE 462 IN MAIN.asm
                    > USED AT LINE 459 IN MAIN.asm
ARRAYINDEX2:        047A DEFINED AT LINE 471 IN MAIN.asm
                    > USED AT LINE 468 IN MAIN.asm
ASSIGN:             047D DEFINED AT LINE 476 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
ASSIGN0:            047F DEFINED AT LINE 479 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
ASSIGNX:            0480 DEFINED AT LINE 481 IN MAIN.asm
ASSIGN1:            048C DEFINED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
COLON:              048E DEFINED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
ARGLIST:            048E DEFINED AT LINE 497 IN MAIN.asm
ARGLIST1:           0498 DEFINED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
ARGLIST1A:          04A0 DEFINED AT LINE 510 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
ARGLIST2:           04A8 DEFINED AT LINE 515 IN MAIN.asm
ARGLIST3:           04B0 DEFINED AT LINE 523 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
ARGLIST4:           04B3 DEFINED AT LINE 526 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 514 IN MAIN.asm
ARGLIST5:           04B9 DEFINED AT LINE 532 IN MAIN.asm
                    > USED AT LINE 530 IN MAIN.asm
LBRACE:             04C4 DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
BLOCKSTART:         04C4 DEFINED AT LINE 543 IN MAIN.asm
BLOCKSTART1:        04C8 DEFINED AT LINE 547 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 585 IN MAIN.asm
BLOCKSTART2:        04F4 DEFINED AT LINE 574 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 563 IN MAIN.asm
                    > USED AT LINE 565 IN MAIN.asm
BLOCKSTART3:        04F7 DEFINED AT LINE 577 IN MAIN.asm
                    > USED AT LINE 568 IN MAIN.asm
                    > USED AT LINE 570 IN MAIN.asm
                    > USED AT LINE 572 IN MAIN.asm
BLOCKSTART4:        04FF DEFINED AT LINE 583 IN MAIN.asm
                    > USED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 556 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
BLOCKSTART5:        0502 DEFINED AT LINE 586 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
BLOCKSTART6:        052A DEFINED AT LINE 605 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
RBRACE:             052D DEFINED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
BLOCKEND:           052D DEFINED AT LINE 610 IN MAIN.asm
                    > USED AT LINE 1397 IN MAIN.asm
BLOCKEND1:          055F DEFINED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
BLOCKEND2:          056B DEFINED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 631 IN MAIN.asm
BLOCKEND3:          057D DEFINED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 645 IN MAIN.asm
TICK:               0589 DEFINED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
CHAR:               0589 DEFINED AT LINE 661 IN MAIN.asm
CHAR1:              058C DEFINED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 674 IN MAIN.asm
CHAR2:              0598 DEFINED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
CHAR3:              059B DEFINED AT LINE 675 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
BACKSLASH:          059E DEFINED AT LINE 679 IN MAIN.asm
                    > USED AT LINE 188 IN MAIN.asm
COMMA:              05A0 DEFINED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
DISCARD:            05A0 DEFINED AT LINE 685 IN MAIN.asm
DISCARD1:           05AD DEFINED AT LINE 694 IN MAIN.asm
                    > USED AT LINE 692 IN MAIN.asm
SLASH:              05AF DEFINED AT LINE 697 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
COMMAND:            05AF DEFINED AT LINE 698 IN MAIN.asm
DIV:                05E8 DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 735 IN MAIN.asm
DOT:                05F9 DEFINED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
DIVIDE:             060B DEFINED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 742 IN MAIN.asm
DIVIDE1:            0610 DEFINED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
DIVIDE2:            061D DEFINED AT LINE 775 IN MAIN.asm
                    > USED AT LINE 772 IN MAIN.asm
DIVIDE3:            061E DEFINED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 774 IN MAIN.asm
EQUALS:             0624 DEFINED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
LESSTHANEQ:         062C DEFINED AT LINE 793 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN:           0631 DEFINED AT LINE 800 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
LESSTHAN1:          0636 DEFINED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
TRUE1:              0639 DEFINED AT LINE 808 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 788 IN MAIN.asm
NULL1:              063F DEFINED AT LINE 812 IN MAIN.asm
FALSE1:             063F DEFINED AT LINE 813 IN MAIN.asm
                    > USED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
                    > USED AT LINE 806 IN MAIN.asm
CARET:              0645 DEFINED AT LINE 821 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
GO:                 0645 DEFINED AT LINE 822 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0646 DEFINED AT LINE 824 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
                    > USED AT LINE 1000 IN MAIN.asm
GO2:                064C DEFINED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
GOBLOCK:            0657 DEFINED AT LINE 837 IN MAIN.asm
GOBLOCK1:           0657 DEFINED AT LINE 838 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
GOBLOCK2:           067C DEFINED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
GOLAMBDA:           068A DEFINED AT LINE 864 IN MAIN.asm
                    > USED AT LINE 834 IN MAIN.asm
GOLAMBDA1:          06A3 DEFINED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
GOLAMBDA2:          06A9 DEFINED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
GOLAMBDA3:          06B4 DEFINED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
GOLAMBDA4:          06CC DEFINED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
GOLAMBDA5:          06CF DEFINED AT LINE 916 IN MAIN.asm
                    > USED AT LINE 922 IN MAIN.asm
GOLAMBDA6:          06D2 DEFINED AT LINE 920 IN MAIN.asm
                    > USED AT LINE 915 IN MAIN.asm
GOLAMBDA7:          06D5 DEFINED AT LINE 923 IN MAIN.asm
GOLAMBDA8:          06D9 DEFINED AT LINE 928 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
DOLLAR:             06E4 DEFINED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
HEXNUM:             06E4 DEFINED AT LINE 938 IN MAIN.asm
HEXNUM1:            06E7 DEFINED AT LINE 940 IN MAIN.asm
                    > USED AT LINE 957 IN MAIN.asm
HEXNUM2:            06EF DEFINED AT LINE 946 IN MAIN.asm
                    > USED AT LINE 944 IN MAIN.asm
UPCASE:             0701 DEFINED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
LOWCASE:            0706 DEFINED AT LINE 962 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
IDENT1:             070B DEFINED AT LINE 966 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
QUESTION:           0718 DEFINED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
IF:                 0718 DEFINED AT LINE 980 IN MAIN.asm
IFTE:               0724 DEFINED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 984 IN MAIN.asm
IFTE1:              0725 DEFINED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 987 IN MAIN.asm
STAR:               0731 DEFINED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
MUL:                0731 DEFINED AT LINE 1003 IN MAIN.asm
MUL2:               0733 DEFINED AT LINE 1006 IN MAIN.asm
MUL3:               073B DEFINED AT LINE 1011 IN MAIN.asm
                    > USED AT LINE 1020 IN MAIN.asm
NUM:                074D DEFINED AT LINE 1024 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
NUM0:               0756 DEFINED AT LINE 1030 IN MAIN.asm
                    > USED AT LINE 1028 IN MAIN.asm
NUM1:               0757 DEFINED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1049 IN MAIN.asm
NUM2:               076F DEFINED AT LINE 1050 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
                    > USED AT LINE 1035 IN MAIN.asm
                    > USED AT LINE 1037 IN MAIN.asm
NUM3:               077A DEFINED AT LINE 1058 IN MAIN.asm
                    > USED AT LINE 1053 IN MAIN.asm
RPAREN:             077D DEFINED AT LINE 1062 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
SEMICOLON:          0785 DEFINED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
SHIFTLEFT:          07A1 DEFINED AT LINE 1092 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
SHIFTLEFT1:         07A9 DEFINED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 1102 IN MAIN.asm
SHIFTLEFT2:         07AA DEFINED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 1098 IN MAIN.asm
SHIFTRIGHT:         07B1 DEFINED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
SHIFTRIGHT1:        07B9 DEFINED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
SHIFTRIGHT2:        07BD DEFINED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
DBLQUOTE:           07C4 DEFINED AT LINE 1128 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
STRING:             07C4 DEFINED AT LINE 1129 IN MAIN.asm
STRING1:            07CD DEFINED AT LINE 1136 IN MAIN.asm
                    > USED AT LINE 1145 IN MAIN.asm
STRING2:            07D0 DEFINED AT LINE 1140 IN MAIN.asm
                    > USED AT LINE 1135 IN MAIN.asm
STRING3:            07D9 DEFINED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 1143 IN MAIN.asm
MINUS:              07EC DEFINED AT LINE 1163 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
SUB:                07F8 DEFINED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 1168 IN MAIN.asm
SUB1:               0802 DEFINED AT LINE 1178 IN MAIN.asm
                    > USED AT LINE 1174 IN MAIN.asm
ERROR1:             080B DEFINED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 1206 IN MAIN.asm
                    > USED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1455 IN MAIN.asm
                    > USED AT LINE 1470 IN MAIN.asm
                    > USED AT LINE 1714 IN MAIN.asm
                    > USED AT LINE 1743 IN MAIN.asm
COMMENT:            0812 DEFINED AT LINE 1191 IN MAIN.asm
                    > USED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
COMMAND_A:          081B DEFINED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 703 IN MAIN.asm
ABSOLUTE:           0827 DEFINED AT LINE 1210 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
ADDROF:             0834 DEFINED AT LINE 1225 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
ADDROF1:            0848 DEFINED AT LINE 1237 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
ADDROF2:            0853 DEFINED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
                    > USED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1236 IN MAIN.asm
COMMAND_B:          0855 DEFINED AT LINE 1249 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
BUFFERARRAY:        0861 DEFINED AT LINE 32
                    > USED AT LINE 751 IN MAIN.asm
BUFFERARRAYM_1767S1258: 086F DEFINED AT LINE 39
                    > USED AT LINE 35
BUFFERNUMBER:       08AA DEFINED AT LINE 1264 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
BUFFERDEC:          08B1 DEFINED AT LINE 1271 IN MAIN.asm
BUFFERDEC0:         08CB DEFINED AT LINE 1288 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
BUFFERDEC1:         08DB DEFINED AT LINE 1302 IN MAIN.asm
                    > USED AT LINE 1290 IN MAIN.asm
BUFFERDEC2:         08FB DEFINED AT LINE 1316 IN MAIN.asm
                    > USED AT LINE 1305 IN MAIN.asm
                    > USED AT LINE 1307 IN MAIN.asm
                    > USED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 1311 IN MAIN.asm
                    > USED AT LINE 1314 IN MAIN.asm
BUFFERDEC3:         08FD DEFINED AT LINE 1318 IN MAIN.asm
                    > USED AT LINE 1321 IN MAIN.asm
BUFFERDEC4:         090D DEFINED AT LINE 1330 IN MAIN.asm
                    > USED AT LINE 1325 IN MAIN.asm
BUFFERDEC5:         090E DEFINED AT LINE 1332 IN MAIN.asm
                    > USED AT LINE 1329 IN MAIN.asm
BUFFERHEX:          0917 DEFINED AT LINE 1343 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
BUFFERHEX1:         0938 DEFINED AT LINE 1361 IN MAIN.asm
                    > USED AT LINE 1351 IN MAIN.asm
                    > USED AT LINE 1353 IN MAIN.asm
BUFFERHEX2:         0941 DEFINED AT LINE 1369 IN MAIN.asm
                    > USED AT LINE 1367 IN MAIN.asm
BREAK:              094F DEFINED AT LINE 1382 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
BREAK1:             0956 DEFINED AT LINE 1388 IN MAIN.asm
                    > USED AT LINE 1386 IN MAIN.asm
BUFFERSTRING:       0969 DEFINED AT LINE 1401 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
BUFFERSTRING0:      0970 DEFINED AT LINE 1405 IN MAIN.asm
                    > USED AT LINE 1413 IN MAIN.asm
BUFFERSTRING1:      0976 DEFINED AT LINE 1410 IN MAIN.asm
                    > USED AT LINE 1404 IN MAIN.asm
BUFFERCHAR:         0983 DEFINED AT LINE 1420 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
BUFFERXCHARS:       0988 DEFINED AT LINE 1426 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
BUFFERXCHARS0:      0989 DEFINED AT LINE 1428 IN MAIN.asm
                    > USED AT LINE 1422 IN MAIN.asm
BUFFERXCHARS1:      0992 DEFINED AT LINE 1434 IN MAIN.asm
                    > USED AT LINE 1444 IN MAIN.asm
BUFFERXCHARS2:      099A DEFINED AT LINE 1441 IN MAIN.asm
                    > USED AT LINE 1433 IN MAIN.asm
COMMAND_I:          09A4 DEFINED AT LINE 1448 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
COMMAND_P:          09B0 DEFINED AT LINE 1457 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
PARTIAL:            09C5 DEFINED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1460 IN MAIN.asm
XPARTIAL:           09E5 DEFINED AT LINE 1492 IN MAIN.asm
                    > USED AT LINE 1468 IN MAIN.asm
XPARTIAL1:          0A03 DEFINED AT LINE 1512 IN MAIN.asm
                    > USED AT LINE 1508 IN MAIN.asm
XPARTIAL2:          0A1A DEFINED AT LINE 1528 IN MAIN.asm
                    > USED AT LINE 1519 IN MAIN.asm
                    > USED AT LINE 1524 IN MAIN.asm
XPARTIAL3:          0A35 DEFINED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 1561 IN MAIN.asm
XPARTIAL4:          0A40 DEFINED AT LINE 1562 IN MAIN.asm
                    > USED AT LINE 1538 IN MAIN.asm
PRINTBUFFER:        0A5D DEFINED AT LINE 32
                    > USED AT LINE 1462 IN MAIN.asm
PRINTBUFFERM_2144S1655: 0A69 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTCHARS:         0A83 DEFINED AT LINE 1660 IN MAIN.asm
                    > USED AT LINE 1464 IN MAIN.asm
PRINTCHARS1:        0A8A DEFINED AT LINE 1666 IN MAIN.asm
                    > USED AT LINE 1675 IN MAIN.asm
PRINTCHARS2:        0A90 DEFINED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 1663 IN MAIN.asm
                    > USED AT LINE 1880 IN MAIN.asm
PRINTSTACK:         0A95 DEFINED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 1466 IN MAIN.asm
COMMAND_R:          0A97 DEFINED AT LINE 1709 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
REMAIN:             0AA0 DEFINED AT LINE 1716 IN MAIN.asm
                    > USED AT LINE 1712 IN MAIN.asm
SIZE:               0AA6 DEFINED AT LINE 1721 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
COMMAND_V:          0AAE DEFINED AT LINE 1730 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
CONSTBUFSTART:      0AC3 DEFINED AT LINE 1745 IN MAIN.asm
                    > USED AT LINE 1739 IN MAIN.asm
CONSTHEAPSTART:     0AC8 DEFINED AT LINE 1749 IN MAIN.asm
CONSTTIBSTART:      0ACD DEFINED AT LINE 1753 IN MAIN.asm
                    > USED AT LINE 1741 IN MAIN.asm
VARBUFPTR:          0AD2 DEFINED AT LINE 1757 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
VARHEAPPTR:         0ADB DEFINED AT LINE 1762 IN MAIN.asm
                    > USED AT LINE 1735 IN MAIN.asm
VARTIBPTR:          0AE4 DEFINED AT LINE 1767 IN MAIN.asm
                    > USED AT LINE 1737 IN MAIN.asm
VARIABLE:           0AED DEFINED AT LINE 1772 IN MAIN.asm
                    > USED AT LINE 294 IN MAIN.asm
                    > USED AT LINE 1760 IN MAIN.asm
                    > USED AT LINE 1765 IN MAIN.asm
                    > USED AT LINE 1770 IN MAIN.asm
CONSTANT:           0AF0 DEFINED AT LINE 1774 IN MAIN.asm
                    > USED AT LINE 1747 IN MAIN.asm
                    > USED AT LINE 1751 IN MAIN.asm
                    > USED AT LINE 1755 IN MAIN.asm
CHARS:              0AF3 DEFINED AT LINE 1779 IN MAIN.asm
                    > USED AT LINE 707 IN MAIN.asm
CHARS1:             0AF6 DEFINED AT LINE 1781 IN MAIN.asm
                    > USED AT LINE 1826 IN MAIN.asm
DECIMAL:            0AFB DEFINED AT LINE 1785 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
DECIMAL1:           0AFE DEFINED AT LINE 1787 IN MAIN.asm
                    > USED AT LINE 1792 IN MAIN.asm
HEXADECIMAL:        0B03 DEFINED AT LINE 1790 IN MAIN.asm
                    > USED AT LINE 713 IN MAIN.asm
INPUT:              0B09 DEFINED AT LINE 1796 IN MAIN.asm
                    > USED AT LINE 1451 IN MAIN.asm
KEY:                0B14 DEFINED AT LINE 1806 IN MAIN.asm
                    > USED AT LINE 717 IN MAIN.asm
OUTPUT:             0B1D DEFINED AT LINE 1815 IN MAIN.asm
                    > USED AT LINE 721 IN MAIN.asm
NUMBERS:            0B26 DEFINED AT LINE 1824 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
FILTER:             0B2C DEFINED AT LINE 1849 IN MAIN.asm
MAP:                0B2C DEFINED AT LINE 1850 IN MAIN.asm
ARGS1A0L:           0B2E DEFINED AT LINE 1858 IN MAIN.asm
ARGS1A2L:           0B31 DEFINED AT LINE 1862 IN MAIN.asm
FLUSHBUFFER:        0B36 DEFINED AT LINE 1871 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 1337 IN MAIN.asm
                    > USED AT LINE 1349 IN MAIN.asm
                    > USED AT LINE 1357 IN MAIN.asm
                    > USED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 1408 IN MAIN.asm
                    > USED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
                    > USED AT LINE 9
                    > USED AT LINE 29
                    > USED AT LINE 38
JUMPTABLE:          0B4D DEFINED AT LINE 1890 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
                    > USED AT LINE 1449 IN MAIN.asm
                    > USED AT LINE 1458 IN MAIN.asm
                    > USED AT LINE 1710 IN MAIN.asm
                    > USED AT LINE 1731 IN MAIN.asm
JUMPTABLE0:         0B4F DEFINED AT LINE 1893 IN MAIN.asm
                    > USED AT LINE 1903 IN MAIN.asm
JUMPTABLE1:         0B5C DEFINED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 1896 IN MAIN.asm
JUMPTABLE2:         0B5D DEFINED AT LINE 1906 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
PRTSTR0:            0B63 DEFINED AT LINE 1914 IN MAIN.asm
                    > USED AT LINE 1920 IN MAIN.asm
PRTSTR:             0B67 DEFINED AT LINE 1917 IN MAIN.asm
                    > USED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 2044 IN MAIN.asm
NESTING:            0B6C DEFINED AT LINE 1933 IN MAIN.asm
                    > USED AT LINE 2070 IN MAIN.asm
                    > USED AT LINE 2128 IN MAIN.asm
NESTING0:           0B76 DEFINED AT LINE 1939 IN MAIN.asm
                    > USED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 1937 IN MAIN.asm
NESTING1A:          0B7D DEFINED AT LINE 1944 IN MAIN.asm
                    > USED AT LINE 1941 IN MAIN.asm
NESTING1:           0B80 DEFINED AT LINE 1947 IN MAIN.asm
                    > USED AT LINE 1938 IN MAIN.asm
NESTING2:           0B8F DEFINED AT LINE 1956 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
NESTING3:           0B91 DEFINED AT LINE 1959 IN MAIN.asm
                    > USED AT LINE 1955 IN MAIN.asm
NESTING4:           0B9C DEFINED AT LINE 1966 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
                    > USED AT LINE 1963 IN MAIN.asm
PROMPT:             0B9E DEFINED AT LINE 1970 IN MAIN.asm
                    > USED AT LINE 2049 IN MAIN.asm
CRLF:               0BA7 DEFINED AT LINE 1975 IN MAIN.asm
                    > USED AT LINE 2141 IN MAIN.asm
PRINTSTR:           0BAE DEFINED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 1971 IN MAIN.asm
                    > USED AT LINE 1976 IN MAIN.asm
                    > USED AT LINE 2194 IN MAIN.asm
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 19
                    > USED AT LINE 22
                    > USED AT LINE 31
                    > USED AT LINE 138
TITLESTR:           0BB5 DEFINED AT LINE 1989 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
                    > USED AT LINE 2012 IN MAIN.asm
INIT:               0BC9 DEFINED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
INIT1:              0BD1 DEFINED AT LINE 1996 IN MAIN.asm
                    > USED AT LINE 2002 IN MAIN.asm
WARMINIT:           0BD9 DEFINED AT LINE 2004 IN MAIN.asm
COLDBOOT0:          0BEC DEFINED AT LINE 2011 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
                    > USED AT LINE 2037 IN MAIN.asm
COLDINIT:           0BF6 DEFINED AT LINE 2017 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          0C07 DEFINED AT LINE 2026 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
COLDSTART:          0C14 DEFINED AT LINE 2035 IN MAIN.asm
                    > USED AT LINE 1254 IN MAIN.asm
START:              0C1D DEFINED AT LINE 2039 IN MAIN.asm
START1:             0C23 DEFINED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 2038 IN MAIN.asm
INTERPRET:          0C29 DEFINED AT LINE 2046 IN MAIN.asm
                    > USED AT LINE 2174 IN MAIN.asm
                    > USED AT LINE 2187 IN MAIN.asm
                    > USED AT LINE 2202 IN MAIN.asm
                    > USED AT LINE 2205 IN MAIN.asm
                    > USED AT LINE 2210 IN MAIN.asm
INTERPRET2:         0C38 DEFINED AT LINE 2055 IN MAIN.asm
                    > USED AT LINE 2119 IN MAIN.asm
                    > USED AT LINE 2192 IN MAIN.asm
                    > USED AT LINE 2196 IN MAIN.asm
INTERPRET3:         0C40 DEFINED AT LINE 2063 IN MAIN.asm
                    > USED AT LINE 2076 IN MAIN.asm
INTERPRET4:         0C4B DEFINED AT LINE 2072 IN MAIN.asm
                    > USED AT LINE 2061 IN MAIN.asm
INTERPRET5:         0C50 DEFINED AT LINE 2079 IN MAIN.asm
                    > USED AT LINE 2129 IN MAIN.asm
                    > USED AT LINE 2144 IN MAIN.asm
INTERPRET5A:        0C73 DEFINED AT LINE 2116 IN MAIN.asm
INTERPRET6:         0C75 DEFINED AT LINE 2121 IN MAIN.asm
                    > USED AT LINE 2083 IN MAIN.asm
INTERPRET7:         0C83 DEFINED AT LINE 2131 IN MAIN.asm
                    > USED AT LINE 2088 IN MAIN.asm
INTERPRET8:         0C96 DEFINED AT LINE 2146 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
NEXT:               0CB1 DEFINED AT LINE 2159 IN MAIN.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 2163 IN MAIN.asm
NEXT1:              0CC2 DEFINED AT LINE 2171 IN MAIN.asm
                    > USED AT LINE 2164 IN MAIN.asm
EXIT:               0CC9 DEFINED AT LINE 2175 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
RUN:                0CCD DEFINED AT LINE 2179 IN MAIN.asm
                    > USED AT LINE 2185 IN MAIN.asm
                    > USED AT LINE 2200 IN MAIN.asm
                    > USED AT LINE 2208 IN MAIN.asm
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
                    > USED AT LINE 27
                    > USED AT LINE 36
ERROR:              0CD1 DEFINED AT LINE 2184 IN MAIN.asm
                    > USED AT LINE 1189 IN MAIN.asm
BACKSPACE_:         0CE4 DEFINED AT LINE 2189 IN MAIN.asm
                    > USED AT LINE 2093 IN MAIN.asm
EDIT_:              0CF4 DEFINED AT LINE 2199 IN MAIN.asm
                    > USED AT LINE 2091 IN MAIN.asm
REEDIT_:            0D0C DEFINED AT LINE 2204 IN MAIN.asm
                    > USED AT LINE 2095 IN MAIN.asm
PRINTSTACK_:        0D0F DEFINED AT LINE 2207 IN MAIN.asm
                    > USED AT LINE 2097 IN MAIN.asm
TESTSSTART:         0E00 DEFINED AT LINE 13
                    > USED AT LINE 8
EXPECTM_2783S25:    0E76 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2784S26:    0EED DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2785S27:    0F62 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2786S28:    0FD7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2787S29:    104C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2788S30:    10C1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2789S31:    1138 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2790S32:    11B1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2791S33:    1228 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2792S34:    129F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2793S35:    1318 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2794S36:    1393 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2795S37:    140C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2796S38:    1485 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2797S39:    1504 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2798S40:    1583 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2799S41:    1600 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2800S42:    1681 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2801S43:    1706 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2802S44:    1789 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2803S45:    1806 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2804S46:    188B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2805S47:    190C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2806S48:    1989 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2807S49:    1A06 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2808S50:    1A8B DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2809S51:    1B08 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2810S52:    1B85 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2811S53:    1C04 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2812S54:    1C93 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2813S55:    1D10 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2814S56:    1D95 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2815S57:    1E12 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2816S58:    1E97 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2817S59:    1F14 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2818S60:    1F93 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2819S61:    2012 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2820S62:    208F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2821S63:    210C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2822S64:    2189 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2823S65:    2206 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2824S66:    2283 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2825S67:    2300 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2826S68:    237D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2827S69:    23FA DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2828S70:    2479 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2829S71:    24F8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2830S72:    2577 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2831S73:    25F8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2832S74:    2679 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2833S75:    26F4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2834S76:    276F DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2835S77:    27F0 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2836S78:    2877 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2837S79:    28FE DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2838S80:    2989 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2839S81:    2A1E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2840S82:    2AB3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2841S83:    2B2E DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2842S84:    2BAB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2843S85:    2C2A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2844S86:    2CAB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2845S87:    2D2A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2846S88:    2DA9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2847S89:    2E2A DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2848S90:    2EB1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2849S91:    2F3C DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2850S92:    2FC3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2851S93:    3054 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2852S94:    30E7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2853S95:    3180 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2854S96:    321D DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2855S97:    32AC DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2856S98:    3341 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2857S99:    33D8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2858S100:   3471 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2859S101:   3508 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2860S102:   35AD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2861S103:   3640 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2862S104:   36E1 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2863S105:   3784 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2864S106:   3829 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2865S107:   38D8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2866S108:   3987 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2867S109:   3A14 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2868S110:   3AA7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2869S111:   3B34 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2870S112:   3BCD DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2871S113:   3C66 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2872S114:   3D11 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2873S115:   3DC4 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2874S116:   3E77 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2875S117:   3F12 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2876S118:   3FB9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2877S119:   4060 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2878S120:   4101 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2879S121:   41A8 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2880S122:   4265 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2881S123:   4330 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2882S124:   43B9 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2883S125:   4442 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2884S126:   44CB DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2885S127:   4554 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2886S128:   45D5 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2887S129:   4656 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2888S130:   46D7 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2889S131:   4758 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2890S132:   47E3 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2891S133:   4872 DEFINED AT LINE 40
                    > USED AT LINE 17
EXPECTM_2892S134:   48FF DEFINED AT LINE 40
                    > USED AT LINE 17
EXECSTR:            490A DEFINED AT LINE 144
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              4B00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 2032 IN MAIN.asm
                    > USED AT LINE 2036 IN MAIN.asm
                    > USED AT LINE 2040 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                4B00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 1754 IN MAIN.asm
                    > USED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2060 IN MAIN.asm
                    > USED AT LINE 2123 IN MAIN.asm
                    > USED AT LINE 2133 IN MAIN.asm
                    > USED AT LINE 2148 IN MAIN.asm
                    > USED AT LINE 2151 IN MAIN.asm
BUF:                4C00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 1746 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
VARS:               4D00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1239 IN MAIN.asm
                    > USED AT LINE 2023 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
                    > USED AT LINE 12
                    > USED AT LINE 24
RESTARTS:           4DD0 DEFINED AT LINE 18 IN ram.asm
RST08:              4DD0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              4DD2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              4DD4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              4DD6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              4DD8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              4DDA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               4DDC DEFINED AT LINE 26 IN ram.asm
INTVEC:             4DDE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             4DE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            4DE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            4DE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            4DE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2019 IN MAIN.asm
VDATAWIDTH:         4DE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
                    > USED AT LINE 1782 IN MAIN.asm
VNUMBASE:           4DE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 1788 IN MAIN.asm
VTIBPTR:            4DEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1768 IN MAIN.asm
                    > USED AT LINE 1769 IN MAIN.asm
                    > USED AT LINE 2053 IN MAIN.asm
                    > USED AT LINE 2150 IN MAIN.asm
VBUFPTR:            4DEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 1282 IN MAIN.asm
                    > USED AT LINE 1345 IN MAIN.asm
                    > USED AT LINE 1358 IN MAIN.asm
                    > USED AT LINE 1403 IN MAIN.asm
                    > USED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 1415 IN MAIN.asm
                    > USED AT LINE 1432 IN MAIN.asm
                    > USED AT LINE 1445 IN MAIN.asm
                    > USED AT LINE 1758 IN MAIN.asm
                    > USED AT LINE 1759 IN MAIN.asm
                    > USED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 1877 IN MAIN.asm
VNEXT:              4DEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2031 IN MAIN.asm
VHEAPPTR:           4DF0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 408 IN MAIN.asm
                    > USED AT LINE 442 IN MAIN.asm
                    > USED AT LINE 446 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
                    > USED AT LINE 603 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1085 IN MAIN.asm
                    > USED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 1476 IN MAIN.asm
                    > USED AT LINE 1481 IN MAIN.asm
                    > USED AT LINE 1482 IN MAIN.asm
                    > USED AT LINE 1497 IN MAIN.asm
                    > USED AT LINE 1539 IN MAIN.asm
                    > USED AT LINE 1580 IN MAIN.asm
                    > USED AT LINE 1763 IN MAIN.asm
                    > USED AT LINE 1764 IN MAIN.asm
VPOINTER:           4DF2 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 293 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 482 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
                    > USED AT LINE 1773 IN MAIN.asm
VREMAIN:            4DF4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 744 IN MAIN.asm
                    > USED AT LINE 1717 IN MAIN.asm
VSAVEDIP:           4DF6 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 2005 IN MAIN.asm
                    > USED AT LINE 2153 IN MAIN.asm
VSAVEDSP:           4DF8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 2006 IN MAIN.asm
                    > USED AT LINE 2154 IN MAIN.asm
VSAVEDNEXT:         4DFA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 2007 IN MAIN.asm
                    > USED AT LINE 2155 IN MAIN.asm
VSAVEDBP:           4DFC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2008 IN MAIN.asm
                    > USED AT LINE 2156 IN MAIN.asm
VCHECKSUM:          4DFE DEFINED AT LINE 52 IN ram.asm
VTEMP1:             4E00 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 401 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
                    > USED AT LINE 604 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 873 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 901 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
                    > USED AT LINE 1477 IN MAIN.asm
                    > USED AT LINE 1480 IN MAIN.asm
                    > USED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 1581 IN MAIN.asm
VTEMP2:             4E02 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 874 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 1495 IN MAIN.asm
                    > USED AT LINE 1571 IN MAIN.asm
VLASTDEF:           4E04 DEFINED AT LINE 58 IN ram.asm
VHASHSTR:           4E06 DEFINED AT LINE 59 IN ram.asm
TBPTR:              4E08 DEFINED AT LINE 60 IN ram.asm
TITLEBUF:           4E0A DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 1994 IN MAIN.asm
                    > USED AT LINE 2013 IN MAIN.asm
                    > USED AT LINE 2043 IN MAIN.asm
HEAP:               4E1E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
                    > USED AT LINE 1750 IN MAIN.asm
