0000                             ; .engine mycomputer
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jr Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld HL,val1
0000                 call prtdec
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 call prtdec
0000                 pop hl
0000                 call printStr
0000                 .cstr " (#"
0000                 call prthex
0000                 call printStr
0000                 .cstr ")\r\n"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 19               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 19               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 19               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 19               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 19               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 19               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 19               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 19               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 19               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 19               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 19               LD   (RST08),HL   
0094   22 D2 19               LD   (RST10),HL   
0097   22 D4 19               LD   (RST18),HL   
009A   22 D6 19               LD   (RST20),HL   
009D   22 D8 19               LD   (RST28),HL   
00A0   22 DA 19               LD   (RST30),HL   
00A3   22 DE 19               LD   (INTVEC),HL   
00A6   22 E0 19               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 19               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 19               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD F7 08               CALL   init   
00C9   C3 00 40               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; ?
00CC                DC2:      EQU   18   ; ?
00CC                DC3:      EQU   19   ; ?
00CC                ESC:      EQU   27   ; ?
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; ScopeBP                           -- first_arg
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0184   82 09                  DW   next   ; g nNext
0186   00 1C                  DW   heap   ; h vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available , ; DEL
0220   A8                     DB   lsb(nop_)   ; SP
0221   45                     DB   lsb(not_)   ; !
0222   56                     DB   lsb(string_)   ; "
0223   4D                     DB   lsb(hexnum_)   ; #
0224   0C                     DB   lsb(arg_)   ; $
0225   18                     DB   lsb(arrIndex_)   ; %
0226   09                     DB   lsb(and_)   ; &
0227   21                     DB   lsb(char_)   ; '
0228   0F                     DB   lsb(arg_list_)   ; (
0229   A8                     DB   lsb(nop_)   ; )
022A   42                     DB   lsb(mul_)   ; *
022B   00                     DB   lsb(add_)   ; +
022C   A8                     DB   lsb(nop_)   ; ,
022D   59                     DB   lsb(sub_)   ; -
022E   2A                     DB   lsb(dot_)   ; .
022F   99                     DB   lsb(div_)   ; /	
0230   4A                     DB   lsb(num_)   ; 0
0231   4A                     DB   lsb(num_)   ; 1
0232   4A                     DB   lsb(num_)   ; 2
0233   4A                     DB   lsb(num_)   ; 3
0234   4A                     DB   lsb(num_)   ; 4
0235   4A                     DB   lsb(num_)   ; 5
0236   4A                     DB   lsb(num_)   ; 6
0237   4A                     DB   lsb(num_)   ; 7
0238   4A                     DB   lsb(num_)   ; 8
0239   4A                     DB   lsb(num_)   ; 9
023A   30                     DB   lsb(go_)   ; :
023B   27                     DB   lsb(compile_)   ; ;
023C   87                     DB   lsb(lt_)   ; <
023D   6D                     DB   lsb(eq_)   ; =
023E   7C                     DB   lsb(gt_)   ; >
023F   39                     DB   lsb(if_)   ; ?
0240   06                     DB   lsb(addr_)   ; @
0241   33                     DB   lsb(identU_)   ; A
0242   33                     DB   lsb(identU_)   ; B
0243   33                     DB   lsb(identU_)   ; C
0244   33                     DB   lsb(identU_)   ; D
0245   33                     DB   lsb(identU_)   ; E
0246   33                     DB   lsb(identU_)   ; F
0247   33                     DB   lsb(identU_)   ; G
0248   33                     DB   lsb(identU_)   ; h
0249   33                     DB   lsb(identU_)   ; I
024A   33                     DB   lsb(identU_)   ; J
024B   33                     DB   lsb(identU_)   ; K
024C   33                     DB   lsb(identU_)   ; L
024D   33                     DB   lsb(identU_)   ; M
024E   33                     DB   lsb(identU_)   ; N
024F   33                     DB   lsb(identU_)   ; O
0250   33                     DB   lsb(identU_)   ; p
0251   33                     DB   lsb(identU_)   ; Q
0252   33                     DB   lsb(identU_)   ; R
0253   33                     DB   lsb(identU_)   ; S
0254   33                     DB   lsb(identU_)   ; T
0255   33                     DB   lsb(identU_)   ; U
0256   33                     DB   lsb(identU_)   ; V
0257   33                     DB   lsb(identU_)   ; W
0258   33                     DB   lsb(identU_)   ; X
0259   33                     DB   lsb(identU_)   ; Y
025A   33                     DB   lsb(identU_)   ; Z
025B   12                     DB   lsb(arrBegin_)   ; [
025C   24                     DB   lsb(command_)   ; \
025D   15                     DB   lsb(arrEnd_)   ; ]
025E   53                     DB   lsb(xor_)   ; ^
025F   2D                     DB   lsb(remain_)   ; _
0260   56                     DB   lsb(string_)   ; `     used for testing string   	
0261   36                     DB   lsb(identL_)   ; a
0262   36                     DB   lsb(identL_)   ; b
0263   36                     DB   lsb(identL_)   ; c
0264   36                     DB   lsb(identL_)   ; d
0265   36                     DB   lsb(identL_)   ; e
0266   36                     DB   lsb(identL_)   ; f
0267   36                     DB   lsb(identL_)   ; g
0268   36                     DB   lsb(identL_)   ; h
0269   36                     DB   lsb(identL_)   ; i
026A   36                     DB   lsb(identL_)   ; j
026B   36                     DB   lsb(identL_)   ; k
026C   36                     DB   lsb(identL_)   ; l
026D   36                     DB   lsb(identL_)   ; m
026E   36                     DB   lsb(identL_)   ; n
026F   36                     DB   lsb(identL_)   ; o
0270   36                     DB   lsb(identL_)   ; p
0271   36                     DB   lsb(identL_)   ; q
0272   36                     DB   lsb(identL_)   ; r
0273   36                     DB   lsb(identL_)   ; s
0274   36                     DB   lsb(identL_)   ; t
0275   36                     DB   lsb(identL_)   ; u
0276   36                     DB   lsb(identL_)   ; v
0277   36                     DB   lsb(identL_)   ; w
0278   36                     DB   lsb(identL_)   ; x
0279   36                     DB   lsb(identL_)   ; y
027A   36                     DB   lsb(identL_)   ; z
027B   1B                     DB   lsb(block_)   ; {
027C   50                     DB   lsb(or_)   ; |
027D   1E                     DB   lsb(blockEnd_)   ; }
027E   3C                     DB   lsb(inv_)   ; ~
027F   A8                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                ADD_:        ; add the top 2 members of the stack
0300   D1                     POP   de   
0301   E1                     POP   hl   
0302   19                     ADD   hl,de   
0303   E5                     PUSH   hl   
0304   DD E9                  JP   (ix)   
0306                ADDR_:       
0306   C3 AA 03               JP   addr   
0309                AND_:        
0309   C3 B6 03               JP   and   
030C                ARG_:        
030C   C3 D3 03               JP   arg   
030F                ARG_LIST_:      
030F   C3 0A 04               JP   arg_list   
0312                ARRBEGIN_:      
0312   C3 3C 04               JP   arrBegin   
0315                ARREND_:      
0315   C3 58 04               JP   arrEnd   
0318                ARRINDEX_:      
0318   C3 A6 04               JP   arrIndex   
031B                BLOCK_:      
031B   C3 CE 04               JP   block   
031E                BLOCKEND_:      
031E   C3 0F 05               JP   blockend   
0321                CHAR_:       
0321   C3 60 05               JP   char   
0324                COMMAND_:      
0324   C3 48 07               JP   command   
0327                COMPILE_:      
0327   C3 75 05               JP   compile   
032A                DOT_:        
032A   C3 93 05               JP   dot   
032D                REMAIN_:      
032D   C3 F7 06               JP   remain   
0330                GO_:         
0330   C3 F7 05               JP   go   
0333                IDENTU_:      
0333   C3 7B 06               JP   identU   
0336                IDENTL_:      
0336   C3 80 06               JP   identL   
0339                IF_:         
0339   C3 92 06               JP   if   
033C                INV_:        ; Bitwise INVert the top member of the stack
033C   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
033F   C3 CB 03               JP   xor1   
0342                MUL_:        
0342   C3 AB 06               JP   mul   
0345                NOT_:        ; logical invert, any non zero value
0345   21 00 00               LD   hl,0   ; is considered true
0348   18 2E                  JR   eq1   
034A                NUM_:        
034A   C3 C7 06               JP   num   
034D                HEXNUM_:      
034D   C3 5E 06               JP   hexnum   
0350                OR_:         
0350   C3 C1 03               JP   or   
0353                XOR_:        
0353   C3 CA 03               JP   xor   
0356                STRING_:      
0356   C3 20 07               JP   string   
0359                SUB_:        ; negative sign or subtract
0359   03                     INC   bc   ; check if sign of a number
035A   0A                     LD   a,(bc)   
035B   0B                     DEC   bc   
035C   FE 30                  CP   "0"   
035E   38 05                  JR   c,sub1   
0360   FE 3A                  CP   "9"+1   
0362   DA 4A 03               JP   c,num_   
0365                SUB1:        ; Subtract the value 2nd on stack from top of stack
0365   D1                     POP   de   
0366   E1                     POP   hl   ; Entry point for INVert
0367                SUB2:        
0367   B7                     OR   a   ; Entry point for NEGate
0368   ED 52                  SBC   hl,de   
036A   E5                     PUSH   hl   
036B   DD E9                  JP   (ix)   
036D                EQ_:         
036D   03                     INC   bc   
036E   0A                     LD   a,(bc)   ; is it == ?
036F   FE 3D                  CP   "="   
0371   28 04                  JR   z,eq0   ; no its equality
0373   0B                     DEC   bc   
0374   C3 BE 04               JP   assign   ; no its assignment
0377                EQ0:         
0377   E1                     POP   hl   
0378                EQ1:         
0378   D1                     POP   de   
0379   C3 D6 05               JP   equals   
037C                GT_:         
037C   03                     INC   bc   
037D   0A                     LD   a,(bc)   
037E   FE 3E                  CP   ">"   
0380   CA 0D 07               JP   z,shiftRight   
0383   D1                     POP   de   
0384   E1                     POP   hl   
0385   18 09                  JR   lt1   
0387                LT_:         
0387   03                     INC   bc   
0388   0A                     LD   a,(bc)   
0389   FE 3C                  CP   "<"   
038B   CA FD 06               JP   z,shiftLeft   
038E   E1                     POP   hl   
038F   D1                     POP   de   
0390                LT1:         
0390   FE 3D                  CP   "="   
0392   CA DE 05               JP   z,lessthaneq   
0395   0B                     DEC   bc   
0396   C3 E3 05               JP   lessthan   
0399                DIV_:        
0399   D1                     POP   de   ; get first value
039A   E1                     POP   hl   ; get 2nd value
039B   C5                     PUSH   bc   ; preserve the IP
039C   44 4D                  LD   bc,hl   
039E   CD BD 05               CALL   divide   
03A1   22 F4 19               LD   (vRemain),hl   
03A4   C1                     POP   bc   
03A5   D5                     PUSH   de   ; push result
03A6   DD E9                  JP   (ix)   
03A8                NOP_:        
03A8   DD E9                  JP   (ix)   
03AA                             ;*******************************************************************
03AA                             ; word operators
03AA                             ;*******************************************************************
03AA                             ; -- ptr
03AA                ADDR:        
03AA   2A EE 19               LD   hl,(vPointer)   
03AD   E5                     PUSH   hl   
03AE   21 EE 19               LD   hl,vPointer   
03B1   22 EE 19               LD   (vPointer),hl   
03B4   DD E9                  JP   (ix)   
03B6                AND:         
03B6   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B7   E1                     POP   hl   
03B8   7B                     LD   a,e   
03B9   A5                     AND   l   
03BA   6F                     LD   l,a   
03BB   7A                     LD   a,d   
03BC   A4                     AND   h   
03BD                AND1:        
03BD   67                     LD   h,a   
03BE   E5                     PUSH   hl   
03BF   DD E9                  JP   (ix)   
03C1                OR:          
03C1   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03C2   E1                     POP   hl   
03C3   7B                     LD   a,e   
03C4   B5                     OR   l   
03C5   6F                     LD   l,a   
03C6   7A                     LD   a,d   
03C7   B4                     OR   h   
03C8   18 F3                  JR   and1   
03CA                XOR:         
03CA   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03CB                XOR1:        
03CB   E1                     POP   hl   
03CC   7B                     LD   a,e   
03CD   AD                     XOR   l   
03CE   6F                     LD   l,a   
03CF   7A                     LD   a,d   
03D0   AC                     XOR   h   
03D1   18 EA                  JR   and1   
03D3                             ; $a .. $z
03D3                             ; -- value
03D3                             ; returns value of arg
03D3                ARG:         
03D3   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03D6   FD 56 05               LD   d,(iy+5)   
03D9   EB                     EX   de,hl   
03DA   7D                     LD   a,l   ; arg_list* == null, skip
03DB   B4                     OR   h   
03DC   28 1C                  JR   z,arg0a   
03DE   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03DF   2B                     DEC   hl   
03E0   7E                     LD   a,(hl)   
03E1   23                     INC   hl   
03E2   23                     INC   hl   
03E3   B7                     OR   a   
03E4   28 14                  JR   z,arg0a   ; num_args == 0, skip
03E6   5F                     LD   e,a   ; e = a = num_args
03E7   03                     INC   bc   ; a = next char = arg_name
03E8   0A                     LD   a,(bc)   
03E9   C5                     PUSH   bc   ; save IP
03EA   43                     LD   b,e   ; b = e = num_args
03EB   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03EE   FD 56 03               LD   d,(iy+3)   
03F1                ARG0:        
03F1   1B                     DEC   de   ; a = arg_name, de = next arg*
03F2   1B                     DEC   de   
03F3   BE                     CP   (hl)   
03F4   28 09                  JR   z,arg1   
03F6   23                     INC   hl   ; hl = next arg_list*
03F7   10 F8                  DJNZ   arg0   
03F9   C1                     POP   bc   ; no match, restore IP
03FA                ARG0A:       
03FA   11 00 00               LD   de,0   ; return 0
03FD   18 08                  JR   arg1a   
03FF                ARG1:        
03FF   C1                     POP   bc   ; restore IP
0400   EB                     EX   de,hl   ; hl = arg*
0401   22 EE 19               LD   (vPointer),hl   ; store arg* in setter
0404   5E                     LD   e,(hl)   
0405   23                     INC   hl   
0406   56                     LD   d,(hl)   ; de = arg
0407                ARG1A:       
0407   D5                     PUSH   de   ; push arg
0408   DD E9                  JP   (ix)   
040A                             ; arg_list - parses input (ab:c)
040A                             ; names after the : represent uninitialised locals
040A                             ; return values are the state of the stack after the block ends
040A                ARG_LIST:      
040A   11 00 00               LD   de,0   ; d = count locals, e = count args ()
040D   2A EC 19               LD   hl,(vHeapPtr)   ; hl = heap*
0410   23                     INC   hl   ; skip length field to start
0411   23                     INC   hl   
0412   E5                     PUSH   hl   ; save start of arg_list
0413   03                     INC   bc   ; point to next char
0414                ARG_LIST1:      
0414   0A                     LD   a,(bc)   
0415   FE 29                  CP   ")"   ; ) is the arg_list terminator
0417   28 12                  JR   z,arg_list4   
0419   FE 3A                  CP   ":"   
041B   20 03                  JR   nz,arg_list2   
041D   14                     INC   d   ; non zero value local count acts as flag
041E   20 08                  JR   nz,arg_list3   
0420                ARG_LIST2:      
0420   77                     LD   (hl),a   
0421   23                     INC   hl   
0422   1C                     INC   e   ; increase arg count
0423   AF                     XOR   a   
0424   B2                     OR   d   
0425   28 01                  JR   z,arg_list3   
0427   14                     INC   d   ; if d > 0 increase local count
0428                ARG_LIST3:      
0428   03                     INC   bc   ; point to next char
0429   18 E9                  JR   arg_list1   
042B                ARG_LIST4:      
042B   AF                     XOR   a   
042C   B2                     OR   d   
042D   28 01                  JR   z,arg_list5   
042F   15                     DEC   d   ; remove initial inc
0430                ARG_LIST5:      
0430   23                     INC   hl   
0431   22 EC 19               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0434   E1                     POP   hl   ; hl = start of arg_list
0435   E5                     PUSH   hl   ; return start of string
0436   2B                     DEC   hl   ; write length bytes to length field at start - 2
0437   72                     LD   (hl),d   
0438   2B                     DEC   hl   
0439   73                     LD   (hl),e   
043A   DD E9                  JP   (ix)   
043C                             ; arrBegin:
043C                             ;     ld hl,(vHeapPtr)            ; hl = heap
043C                             ;     inc hl                      ; reserve space for size
043C                             ;     inc hl
043C                             ;     ld (vHeapPtr),hl            ; hl = array start
043C                             ;     push hl                     ; return start of array
043C                             ;     jp (ix)
043C                             ; arrEnd:
043C                             ;     pop de                      ; de = dup array start
043C                             ;     push de
043C                             ;     push bc                     ; save IP
043C                             ;     ld bc,de                    ; bc = de = array start
043C                             ;     ld hl,(vHeapPtr)            ; hl = array end
043C                             ;     or a                        ; de = array length
043C                             ;     sbc hl,de
043C                             ;     ex de,hl
043C                             ;     ld hl,bc                    ; hl = array start
043C                             ;     dec hl
043C                             ;     ld (hl),d
043C                             ;     dec hl
043C                             ;     ld (hl),e
043C                             ;     pop bc                      ; bc = IP
043C                             ;     jp (ix)
043C                             ; arrItem:
043C                             ;     pop de                      ; new value
043C                             ;     ld hl,(vHeapPtr)
043C                             ;     ld (hl),e
043C                             ;     inc hl
043C                             ;     ld a,(vDataWidth)
043C                             ;     dec a                       ; is it byte?
043C                             ;     jr z,arrItem1
043C                             ;     ld (hl),d
043C                             ;     inc hl
043C                             ; arrItem1:	
043C                             ;     ld (vHeapPtr),hl
043C                             ;     jp (ix)
043C                ARRBEGIN:      
043C   11 00 00               LD   de,0   ; create stack frame
043F   D5                     PUSH   de   ; push null for IP
0440   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0443   FD 56 05               LD   d,(iy+5)   ; 
0446   D5                     PUSH   de   ; 
0447   FD 5E 02               LD   e,(iy+2)   ; push ScopeBP from parent stack frame
044A   FD 56 03               LD   d,(iy+3)   ; 
044D   D5                     PUSH   de   ; 
044E   FD E5                  PUSH   iy   ; push BP
0450   FD 21 00 00            LD   iy,0   ; BP = SP
0454   FD 39                  ADD   iy,sp   
0456   DD E9                  JP   (ix)   
0458                ARREND:      
0458   FD 54                  LD   d,iyh   ; de = BP
045A   FD 5D                  LD   e,iyl   
045C   ED 43 F6 19            LD   (vTemp1),bc   ; save IP
0460   62 6B                  LD   hl,de   ; hl = de = BP
0462   B7                     OR   a   
0463   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0465   CB 3C                  SRL   h   ; 
0467   CB 1D                  RR   l   
0469   44 4D                  LD   bc,hl   ; bc = count
046B   2A EC 19               LD   hl,(vHeapPtr)   ; hl = array[-2]
046E   71                     LD   (hl),c   ; write num items in length word
046F   23                     INC   hl   
0470   70                     LD   (hl),b   
0471   23                     INC   hl   ; hl = array[0], bc = count
0472                             ; de = BP, hl = array[0], bc = count
0472                ARREND1:      
0472   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0475   77                     LD   (hl),a   ; write lsb of array item
0476   23                     INC   hl   ; move to msb of array item
0477   3A E6 19               LD   a,(vDataWidth)   ; vDataWidth=1?
047A   3D                     DEC   a   
047B   28 05                  JR   z,arrEnd2   
047D   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0480   77                     LD   (hl),a   ; write msb of array item
0481   23                     INC   hl   ; move to next word in array
0482                ARREND2:      
0482   FD 2B                  DEC   iy   ; move to next word on stack
0484   FD 2B                  DEC   iy   
0486   0B                     DEC   bc   ; dec items count
0487   79                     LD   a,c   ; if not zero loop
0488   B0                     OR   b   
0489   20 E7                  JR   nz,arrEnd1   
048B   EB                     EX   de,hl   ; de = end of array, hl = BP
048C   F9                     LD   sp,hl   ; sp = BP
048D   E1                     POP   hl   ; de = end of array, hl = old BP
048E   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
048F   FD 62                  LD   iyh,d   
0491   FD 6B                  LD   iyl,e   
0493   D1                     POP   de   ; pop arg_list (discard)
0494   D1                     POP   de   ; pop ScopeBP (discard)
0495   D1                     POP   de   ; pop IP (discard)
0496   ED 5B EC 19            LD   de,(vHeapPtr)   ; de = array[-2]
049A   22 EC 19               LD   (vHeapPtr),hl   ; move heap* to end of array
049D   ED 4B F6 19            LD   bc,(vTemp1)   ; restore IP
04A1   13                     INC   de   ; de = array[0]
04A2   13                     INC   de   
04A3   D5                     PUSH   de   ; return array[0]
04A4   DD E9                  JP   (ix)   
04A6                             ; index of an array, based on vDataWidth
04A6                             ; array num -- value    ; also sets vPointer to address
04A6                ARRINDEX:      
04A6   E1                     POP   hl   ; hl = index
04A7   D1                     POP   de   ; de = array
04A8   3A E6 19               LD   a,(vDataWidth)   ; a = data width
04AB   3D                     DEC   a   
04AC   28 01                  JR   z,arrIndex1   
04AE                ARRINDEX0:      
04AE   29                     ADD   hl,hl   ; if data width = 2 then double
04AF                ARRINDEX1:      
04AF   19                     ADD   hl,de   ; add addr
04B0   22 EE 19               LD   (vPointer),hl   ; store address in setter
04B3   16 00                  LD   d,0   
04B5   5E                     LD   e,(hl)   
04B6   B7                     OR   a   ; check data width again
04B7   28 02                  JR   z,arrIndex2   
04B9   23                     INC   hl   
04BA   56                     LD   d,(hl)   
04BB                ARRINDEX2:      
04BB   D5                     PUSH   de   
04BC   DD E9                  JP   (ix)   
04BE                             ; value _oldValue --            ; uses address in vPointer
04BE                ASSIGN:      
04BE   E1                     POP   hl   ; discard last accessed value
04BF   D1                     POP   de   ; new value
04C0   2A EE 19               LD   hl,(vPointer)   
04C3   73                     LD   (hl),e   
04C4   3A E6 19               LD   a,(vDataWidth)   
04C7   3D                     DEC   a   ; is it byte?
04C8   28 02                  JR   z,assign1   
04CA   23                     INC   hl   
04CB   72                     LD   (hl),d   
04CC                ASSIGN1:      
04CC   DD E9                  JP   (ix)   
04CE                BLOCK:       
04CE   C5                     PUSH   bc   ; return pointer to first { of block
04CF   03                     INC   bc   
04D0   16 01                  LD   d,1   ; nesting: count first parenthesis
04D2                BLOCK1:      ; Skip to end of definition
04D2   0A                     LD   a,(bc)   ; Get the next character
04D3   03                     INC   bc   ; Point to next character
04D4   FE 21                  CP   " " + 1   ; ignore whitespace
04D6   38 FA                  JR   c,block1   
04D8   FE 29                  CP   ")"   
04DA   28 2D                  JR   z,block4   
04DC   FE 7D                  CP   "}"   
04DE   28 29                  JR   z,block4   
04E0   FE 5D                  CP   "]"   
04E2   28 25                  JR   z,block4   
04E4   FE 28                  CP   "("   
04E6   28 16                  JR   z,block2   
04E8   FE 7B                  CP   "{"   
04EA   28 12                  JR   z,block2   
04EC   FE 5B                  CP   "["   
04EE   28 0E                  JR   z,block2   
04F0   FE 27                  CP   "'"   
04F2   28 0D                  JR   z,block3   
04F4   FE 60                  CP   "`"   
04F6   28 09                  JR   z,block3   
04F8   FE 22                  CP   $22   
04FA   28 05                  JR   z,block3   
04FC   18 D4                  JR   block1   
04FE                BLOCK2:      
04FE   14                     INC   d   
04FF   18 D1                  JR   block1   
0501                BLOCK3:      
0501   3E 80                  LD   a,$80   
0503   AA                     XOR   d   
0504   47                     LD   b,a   
0505   20 CB                  JR   nz,block1   
0507   18 03                  JR   block5   
0509                BLOCK4:      
0509   15                     DEC   d   
050A   20 C6                  JR   nz,block1   ; get the next element
050C                BLOCK5:      
050C   0B                     DEC   bc   ; balanced, exit
050D   DD E9                  JP   (ix)   
050F                BLOCKEND:      
050F   D9                     EXX      
0510   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0513   FD 56 01               LD   d,(iy+1)   
0516   FD 4E 06               LD   c,(iy+6)   ; bc = IP
0519   FD 46 07               LD   b,(iy+7)   
051C   D9                     EXX      
051D   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0520   FD 56 03               LD   d,(iy+3)   
0523   EB                     EX   de,hl   
0524   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0527   FD 56 01               LD   d,(iy+1)   
052A                             ; ex de,hl                    ; de = first_arg*, hl = oldBP
052A   13                     INC   de   ; for carry flag <=
052B   B7                     OR   a   
052C   ED 52                  SBC   hl,de   
052E   38 0B                  JR   c,blockend1   ; oldBP >= first_arg, same scope skip
0530   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0532   FD 5D                  LD   e,iyl   
0534   21 08 00               LD   hl,8   
0537   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0538   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0539   18 0C                  JR   blockend2   
053B                BLOCKEND1:      ; same scope
053B   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
053E   FD 56 03               LD   d,(iy+3)   
0541   EB                     EX   de,hl   
0542   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0544   FD 5D                  LD   e,iyl   
0546   EB                     EX   de,hl   
0547                BLOCKEND2:      
0547   44 4D                  LD   bc,hl   ; bc = hl = BP
0549   B7                     OR   a   ; hl = BP - SP = count
054A   ED 72                  SBC   hl,sp   
054C   C5                     PUSH   bc   ; bc = count, hl = BP
054D   44 4D                  LD   bc,hl   
054F   E1                     POP   hl   
0550   2B                     DEC   hl   ; hl = BP-1
0551   1B                     DEC   de   ; de = args*-1
0552   ED B8                  LDDR      
0554   13                     INC   de   ; hl = new tos
0555   EB                     EX   de,hl   
0556   F9                     LD   sp,hl   ; sp = new tos
0557   D9                     EXX      ; bc = IP, iy = oldBP
0558   D5                     PUSH   de   
0559   C5                     PUSH   bc   
055A   D9                     EXX      
055B   C1                     POP   bc   
055C   FD E1                  POP   iy   
055E   DD E9                  JP   (ix)   
0560                CHAR:        
0560   21 00 00               LD   hl,0   ; if "" is empty or null
0563                CHAR1:       
0563   03                     INC   bc   ; point to next char
0564   0A                     LD   a,(bc)   
0565   FE 27                  CP   "'"   ; ' is the terminator
0567   28 09                  JR   z,char3   
0569   FE 5C                  CP   $5c   ; \ is the escape
056B   20 02                  JR   nz,char2   
056D   03                     INC   bc   
056E   0A                     LD   a,(bc)   
056F                CHAR2:       
056F   6F                     LD   l,a   
0570   18 F1                  JR   char1   
0572                CHAR3:       
0572   E5                     PUSH   hl   
0573   DD E9                  JP   (ix)   
0575                             ; ;
0575                             ; block* -- hblock*
0575                             ; copies bytes from TOS to IP to the heap
0575                COMPILE:      
0575   ED 43 F6 19            LD   (vTemp1),bc   ; save IP
0579   D1                     POP   de   ; de = block*
057A   60 69                  LD   hl,bc   ; hl = IP
057C   B7                     OR   a   ; bc = size
057D   ED 52                  SBC   hl,de   
057F   44 4D                  LD   bc,hl   
0581   EB                     EX   de,hl   ; hl = block*
0582   ED 5B EC 19            LD   de,(vHeapPtr)   ; de = heap*
0586   D5                     PUSH   de   ; return hblock*
0587   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0589   ED 53 EC 19            LD   (vHeapPtr),de   
058D   ED 4B F6 19            LD   bc,(vTemp1)   ; restore IP
0591   DD E9                  JP   (ix)   
0593                DOT:         
0593   E1                     POP   hl   
0594   03                     INC   bc   
0595   0A                     LD   a,(bc)   
0596   FE 68                  CP   "h"   
0598   20 05                  JR   nz,dot1   
059A   CD 79 08               CALL   prthex   
059D   18 17                  JR   dot4   
059F                DOT1:        
059F   FE 73                  CP   "s"   
05A1   20 05                  JR   nz,dot2   
05A3   CD 9C 08               CALL   prtstr   
05A6   18 0E                  JR   dot4   
05A8                DOT2:        
05A8   FE 63                  CP   "c"   
05AA   20 06                  JR   nz,dot3   
05AC   7D                     LD   a,l   
05AD   CD 85 00               CALL   putchar   
05B0   18 04                  JR   dot4   
05B2                DOT3:        
05B2   0B                     DEC   bc   
05B3   CD 31 08               CALL   prtdec   
05B6                DOT4:        
05B6   3E 20                  LD   a," "   
05B8   CD 85 00               CALL   putchar   
05BB   DD E9                  JP   (ix)   
05BD                             ; division subroutine.
05BD                             ; bc: divisor, de: dividend, hl: remainder
05BD                DIVIDE:      
05BD   21 00 00               LD   hl,0   ; zero the remainder
05C0   3E 10                  LD   a,16   ; loop counter
05C2                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
05C2   CB 21                  SLA   c   
05C4   CB 10                  RL   b   
05C6   ED 6A                  ADC   hl,hl   
05C8   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
05CA   38 03                  JR   c,divide2   
05CC   0C                     INC   c   
05CD   18 01                  JR   divide3   
05CF                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
05CF   19                     ADD   hl,de   
05D0                DIVIDE3:      
05D0   3D                     DEC   a   
05D1   20 EF                  JR   nz,divide1   
05D3   50 59                  LD   de,bc   ; result from bc to de
05D5   C9                     RET      
05D6                             ; hl = value1, de = value2
05D6                             ; hl = result
05D6                EQUALS:      
05D6   B7                     OR   a   ; reset the carry flag
05D7   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
05D9   28 10                  JR   z,true1   
05DB   C3 F1 05               JP   false1   
05DE                             ; hl = value1 de = value2
05DE                             ; hl = result
05DE                LESSTHANEQ:      
05DE   B7                     OR   a   
05DF   ED 52                  SBC   hl,de   
05E1   18 05                  JR   lessthan1   
05E3                             ; hl = value1 de = value2
05E3                             ; hl = result
05E3                LESSTHAN:      
05E3   B7                     OR   a   
05E4   ED 52                  SBC   hl,de   
05E6   28 09                  JR   z,false1   
05E8                LESSTHAN1:      
05E8   FA F1 05               JP   m,false1   
05EB                TRUE1:       
05EB   21 FF FF               LD   hl,TRUE   
05EE   E5                     PUSH   hl   
05EF   DD E9                  JP   (ix)   
05F1                NULL1:       
05F1                FALSE1:      
05F1   21 00 00               LD   hl,FALSE   
05F4   E5                     PUSH   hl   
05F5   DD E9                  JP   (ix)   
05F7                             ; execute a block of code which ends with }
05F7                             ; creates a root scope if BP == stack
05F7                             ; else uses outer scope
05F7                GO:          
05F7   D1                     POP   de   ; de = block*
05F8                GO0:         
05F8   7B                     LD   a,e   ; if block* == null, exit
05F9   B2                     OR   d   
05FA   20 02                  JR   nz,go1   
05FC   DD E9                  JP   (ix)   
05FE                GO1:         
05FE   1A                     LD   a,(de)   
05FF   FE 7B                  CP   "{"   
0601   C2 38 06               JP   nz,go10   
0604   13                     INC   de   
0605   C5                     PUSH   bc   ; push IP
0606   21 80 18               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0609   FD 44                  LD   b,iyh   
060B   FD 4D                  LD   c,iyl   
060D   B7                     OR   a   ; hl = stack - BP = root_scope
060E   ED 42                  SBC   hl,bc   
0610   7D                     LD   a,l   ; if root_scope, skip
0611   B4                     OR   h   
0612   28 11                  JR   z,go2   
0614   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0617   FD 46 05               LD   b,(iy+5)   
061A   C5                     PUSH   bc   
061B   FD 4E 02               LD   c,(iy+2)   ; hl = first_arg* (parent)
061E   FD 46 03               LD   b,(iy+3)   
0621   60 69                  LD   hl,bc   
0623   18 05                  JR   go3   
0625                GO2:         
0625   E5                     PUSH   hl   ; push arg_list (null)
0626   21 04 00               LD   hl,4   ; hl = first_arg* (BP+8)
0629   39                     ADD   hl,sp   
062A                GO3:         
062A   E5                     PUSH   hl   ; push first_arg
062B   FD E5                  PUSH   iy   ; push BP
062D   FD 21 00 00            LD   iy,0   ; BP = SP
0631   FD 39                  ADD   iy,sp   
0633   42 4B                  LD   bc,de   ; bc = de = block*-1
0635   0B                     DEC   bc   
0636   DD E9                  JP   (ix)   
0638                GO10:        ; execute code at pointer
0638   EB                     EX   de,hl   ; hl = code*
0639   5E                     LD   e,(hl)   ; de = block*, hl = arg_list*
063A   23                     INC   hl   
063B   56                     LD   d,(hl)   
063C   23                     INC   hl   
063D   EB                     EX   de,hl   
063E   7D                     LD   a,l   ; if arg_list* != null skip
063F   B4                     OR   h   
0640   20 03                  JR   nz,go11   
0642   C5                     PUSH   bc   ; push IP
0643   18 E0                  JR   go2   
0645                GO11:        
0645   2B                     DEC   hl   ; a = num_locals*, de = block* hl = arg_list*
0646   7E                     LD   a,(hl)   
0647   23                     INC   hl   
0648   B7                     OR   a   
0649   28 05                  JR   z,go13   
064B                GO12:        
064B   3B                     DEC   sp   
064C   3B                     DEC   sp   
064D   3D                     DEC   a   
064E   20 FB                  JR   nz,go12   
0650                GO13:        
0650   C5                     PUSH   bc   ; push IP
0651   E5                     PUSH   hl   ; push arg_list*
0652   2B                     DEC   hl   ; hl = num_args*
0653   2B                     DEC   hl   
0654   7E                     LD   a,(hl)   ; hl = num_args * 2
0655   87                     ADD   a,a   
0656   C6 04                  ADD   a,4   ; offset for IP and arg_list
0658   6F                     LD   l,a   
0659   26 00                  LD   h,$0   
065B   39                     ADD   hl,sp   ; hl = first_arg*
065C   18 CC                  JR   go3   
065E                HEXNUM:      
065E   21 00 00               LD   hl,0   ; Clear hl to accept the number
0661                HEXNUM1:      
0661   03                     INC   bc   
0662   0A                     LD   a,(bc)   ; Get the character which is a numeral
0663   CB 77                  BIT   6,a   ; is it uppercase alpha?
0665   28 02                  JR   z,hexnum2   ; no a decimal
0667   D6 07                  SUB   7   ; sub 7  to make $a - $F
0669                HEXNUM2:      
0669   D6 30                  SUB   $30   ; form decimal digit
066B   DA E9 06               JP   c,num2   
066E   FE 10                  CP   $0F+1   
0670   D2 E9 06               JP   nc,num2   
0673   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0674   29                     ADD   hl,hl   ; 4X
0675   29                     ADD   hl,hl   ; 8X
0676   29                     ADD   hl,hl   ; 16X
0677   85                     ADD   a,l   ; add into bottom of hl
0678   6F                     LD   l,a   
0679   18 E6                  JR   hexnum1   
067B                IDENTU:      
067B   0A                     LD   a,(bc)   ; a = identifier char
067C   D6 41                  SUB   "A"   ; "A" = 0
067E   18 05                  JR   ident1   
0680                IDENTL:      
0680   0A                     LD   a,(bc)   
0681   D6 61                  SUB   "a"   
0683   C6 1A                  ADD   a,26   
0685                IDENT1:      
0685   87                     ADD   a,a   ; l = a * 2
0686   6F                     LD   l,a   
0687   26 19                  LD   h,msb(vars)   
0689   22 EE 19               LD   (vPointer),hl   ; store address in setter
068C   5E                     LD   e,(hl)   
068D   23                     INC   hl   
068E   56                     LD   d,(hl)   
068F   D5                     PUSH   de   
0690   DD E9                  JP   (ix)   
0692                             ; if
0692                             ; condition then -- value
0692                IF:          
0692   03                     INC   bc   
0693   0A                     LD   a,(bc)   
0694   FE 3F                  CP   "?"   
0696   28 06                  JR   z,ifte   
0698   0B                     DEC   bc   
0699   11 00 00               LD   de,0   ; NUL pointer for else
069C   18 01                  JR   ifte1   
069E                             ; ifte
069E                             ; condition then else -- value
069E                IFTE:        
069E   D1                     POP   de   ; de = else
069F                IFTE1:       
069F   E1                     POP   hl   ; hl = then
06A0   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
06A1   7C                     LD   a,h   
06A2   B5                     OR   l   
06A3   E1                     POP   hl   ; hl = then
06A4   CA F8 05               JP   z,go0   ; if z de = else
06A7   EB                     EX   de,hl   ; condition = false, de = then
06A8   C3 F8 05               JP   go0   
06AB                MUL:         
06AB   D1                     POP   de   ; get first value
06AC   E1                     POP   hl   
06AD   C5                     PUSH   bc   ; Preserve the IP
06AE   44                     LD   b,h   ; bc = 2nd value
06AF   4D                     LD   c,l   
06B0   21 00 00               LD   hl,0   
06B3   3E 10                  LD   a,16   
06B5                MUL2:        
06B5   29                     ADD   hl,hl   
06B6   CB 13                  RL   e   
06B8   CB 12                  RL   d   
06BA   30 04                  JR   nc,$+6   
06BC   09                     ADD   hl,bc   
06BD   30 01                  JR   nc,$+3   
06BF   13                     INC   de   
06C0   3D                     DEC   a   
06C1   20 F2                  JR   nz,mul2   
06C3   C1                     POP   bc   ; Restore the IP
06C4   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
06C5   DD E9                  JP   (ix)   
06C7                NUM:         
06C7   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
06CA   0A                     LD   a,(bc)   ; Get numeral or -
06CB   FE 2D                  CP   "-"   
06CD   20 01                  JR   nz,num0   
06CF   03                     INC   bc   ; move to next char, no flags affected
06D0                NUM0:        
06D0   08                     EX   af,af'   ; save zero flag = 0 for later
06D1                NUM1:        
06D1   0A                     LD   a,(bc)   ; read digit
06D2   D6 30                  SUB   "0"   ; less than 0?
06D4   38 13                  JR   c,num2   ; not a digit, exit loop
06D6   FE 0A                  CP   10   ; greater that 9?
06D8   30 0F                  JR   nc,num2   ; not a digit, exit loop
06DA   03                     INC   bc   ; inc IP
06DB   54 5D                  LD   de,hl   ; multiply hl * 10
06DD   29                     ADD   hl,hl   
06DE   29                     ADD   hl,hl   
06DF   19                     ADD   hl,de   
06E0   29                     ADD   hl,hl   
06E1   85                     ADD   a,l   ; add digit in a to hl
06E2   6F                     LD   l,a   
06E3   3E 00                  LD   a,0   
06E5   8C                     ADC   a,h   
06E6   67                     LD   h,a   
06E7   18 E8                  JR   num1   
06E9                NUM2:        
06E9   0B                     DEC   bc   
06EA   08                     EX   af,af'   ; restore zero flag
06EB   20 07                  JR   nz,num3   
06ED   EB                     EX   de,hl   ; negate the value of hl
06EE   21 00 00               LD   hl,0   
06F1   B7                     OR   a   ; jump to sub2
06F2   ED 52                  SBC   hl,de   
06F4                NUM3:        
06F4   E5                     PUSH   hl   ; Put the number on the stack
06F5   DD E9                  JP   (ix)   ; and process the next character
06F7                REMAIN:      
06F7   2A F4 19               LD   hl,(vRemain)   
06FA   E5                     PUSH   hl   
06FB   DD E9                  JP   (ix)   
06FD                             ; shiftLeft
06FD                             ; value count -- value2          shift left count places
06FD                SHIFTLEFT:      
06FD   50 59                  LD   de,bc   ; save IP
06FF   C1                     POP   bc   ; bc = count
0700   41                     LD   b,c   ; b = loop counter
0701   E1                     POP   hl   
0702   04                     INC   b   ; test for counter=0 case
0703   18 01                  JR   shiftLeft2   
0705                SHIFTLEFT1:      
0705   29                     ADD   hl,hl   ; left shift hl
0706                SHIFTLEFT2:      
0706   10 FD                  DJNZ   shiftLeft1   
0708   E5                     PUSH   hl   
0709   42 4B                  LD   bc,de   ; restore IP
070B   DD E9                  JP   (ix)   
070D                             ; shiftRight
070D                             ; value count -- value2          shift left count places
070D                SHIFTRIGHT:      
070D   50 59                  LD   de,bc   ; save IP
070F   C1                     POP   bc   ; bc = count
0710   41                     LD   b,c   ; b = loop counter
0711   E1                     POP   hl   
0712   04                     INC   b   ; test for counter=0 case
0713   18 04                  JR   shiftRight2   
0715                SHIFTRIGHT1:      
0715   CB 3C                  SRL   h   ; right shift hl
0717   CB 1D                  RR   l   
0719                SHIFTRIGHT2:      
0719   10 FA                  DJNZ   shiftRight1   
071B   E5                     PUSH   hl   
071C   42 4B                  LD   bc,de   ; restore IP
071E   DD E9                  JP   (ix)   
0720                             ; string
0720                             ; -- ptr                        ; points to start of string chars,
0720                             ; length is stored at start - 2 bytes
0720                STRING:      
0720   2A EC 19               LD   hl,(vHeapPtr)   ; hl = heap*
0723   23                     INC   hl   ; skip length field to start
0724   23                     INC   hl   
0725   E5                     PUSH   hl   ; save start of string
0726   03                     INC   bc   ; point to next char
0727   18 03                  JR   string2   
0729                STRING1:      
0729   77                     LD   (hl),a   
072A   23                     INC   hl   ; increase count
072B   03                     INC   bc   ; point to next char
072C                STRING2:      
072C   0A                     LD   a,(bc)   
072D   FE 22                  CP   DQUOTE   ; " is the string terminator
072F   20 F8                  JR   nz,string1   
0731   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0733   20 F4                  JR   nz,string1   
0735   AF                     XOR   a   ; write NUL to terminate string
0736   77                     LD   (hl),a   ; hl = end of string
0737   23                     INC   hl   
0738   22 EC 19               LD   (vHeapPtr),hl   ; bump heap* to after end of string
073B   2B                     DEC   hl   ; hl = end of string without terminator
073C   D1                     POP   de   ; de = start of string
073D   D5                     PUSH   de   ; return start of string
073E   B7                     OR   a   ; hl = length bytes, de = start of string
073F   ED 52                  SBC   hl,de   
0741   EB                     EX   de,hl   
0742   2B                     DEC   hl   ; write length bytes to length field at start - 2
0743   72                     LD   (hl),d   
0744   2B                     DEC   hl   
0745   73                     LD   (hl),e   
0746   DD E9                  JP   (ix)   
0748                             ;*******************************************************************
0748                             ; commands
0748                             ;*******************************************************************
0748                COMMAND:      
0748   03                     INC   bc   
0749   0A                     LD   a,(bc)   
074A   FE 5C                  CP   $5C   ; \\ comment
074C   CA 99 07               JP   z,comment   
074F   FE 61                  CP   "a"   ; \a absolute
0751   CA 8C 07               JP   z,abs1   
0754   FE 62                  CP   "b"   ; \b bytes
0756   CA A2 07               JP   z,bytes   
0759   FE 66                  CP   "f"   ; \f func
075B   CA AA 07               JP   z,func   
075E   FE 46                  CP   "F"   ; \F false
0760   CA F1 05               JP   z,false1   
0763   FE 69                  CP   "i"   ; \i input
0765   CA FE 07               JP   z,input   
0768   FE 6B                  CP   "k"   ; \k key
076A   CA 09 08               JP   z,key   
076D   FE 6F                  CP   "o"   ; \o output
076F   CA 12 08               JP   z,output   
0772   FE 72                  CP   "r"   ; \r repeat
0774   CA 1B 08               JP   z,repeat   
0777   FE 73                  CP   "s"   ; \s select
0779   CA 1D 08               JP   z,select   
077C   FE 54                  CP   "T"   ; \T true
077E   CA EB 05               JP   z,true1   
0781   FE 77                  CP   "w"   ; \w words
0783   CA 27 08               JP   z,words   
0786   21 01 00               LD   hl,1   ; error 1: unknown command
0789   C3 9B 09               JP   error   
078C                ABS1:        
078C   E1                     POP   hl   
078D   CB 7C                  BIT   7,h   
078F   C8                     RET   z   
0790   AF                     XOR   a   
0791   95                     SUB   l   
0792   6F                     LD   l,a   
0793   9F                     SBC   a,a   
0794   94                     SUB   h   
0795   67                     LD   h,a   
0796   E5                     PUSH   hl   
0797   DD E9                  JP   (ix)   
0799                COMMENT:      
0799   03                     INC   bc   ; point to next char
079A   0A                     LD   a,(bc)   
079B   FE 20                  CP   " "   ; terminate on any char less than SP
079D   30 FA                  JR   nc,comment   
079F   0B                     DEC   bc   
07A0   DD E9                  JP   (ix)   
07A2                BYTES:       
07A2   21 01 00               LD   hl,1   
07A5                BYTES1:      
07A5   22 E6 19               LD   (vDataWidth),hl   
07A8   DD E9                  JP   (ix)   
07AA                             ; arg_list* block* -- ptr
07AA                FUNC:        
07AA   2A EC 19               LD   hl,(vHeapPtr)   ; hl = heap*
07AD   D1                     POP   de   ; hl = heap*, de = block
07AE   EB                     EX   de,hl   ; hl = heap*, de = arg_list*, (sp) = block*
07AF   E3                     EX   (sp),hl   
07B0   EB                     EX   de,hl   
07B1   73                     LD   (hl),e   ; compile arg_list*
07B2   23                     INC   hl   
07B3   72                     LD   (hl),d   
07B4   23                     INC   hl   
07B5   D1                     POP   de   ; de = block*
07B6   13                     INC   de   
07B7   C5                     PUSH   bc   ; (sp) = IP
07B8   06 01                  LD   b,1   ; b = nesting
07BA                FUNC1:       
07BA   1A                     LD   a,(de)   
07BB   13                     INC   de   
07BC   77                     LD   (hl),a   
07BD   23                     INC   hl   
07BE   FE 29                  CP   ")"   
07C0   28 2D                  JR   z,func4   
07C2   FE 7D                  CP   "}"   
07C4   28 29                  JR   z,func4   
07C6   FE 5D                  CP   "]"   
07C8   28 25                  JR   z,func4   
07CA   FE 28                  CP   "("   
07CC   28 16                  JR   z,func2   
07CE   FE 7B                  CP   "{"   
07D0   28 12                  JR   z,func2   
07D2   FE 5B                  CP   "["   
07D4   28 0E                  JR   z,func2   
07D6   FE 22                  CP   DQUOTE   
07D8   28 0D                  JR   z,func3   
07DA   FE 27                  CP   "'"   
07DC   28 09                  JR   z,func3   
07DE   FE 60                  CP   "`"   
07E0   28 05                  JR   z,func3   
07E2   18 D6                  JR   func1   
07E4                FUNC2:       
07E4   04                     INC   b   
07E5   18 D3                  JR   func1   
07E7                FUNC3:       
07E7   3E 80                  LD   a,$80   
07E9   A8                     XOR   b   
07EA   47                     LD   b,a   
07EB   20 CD                  JR   nz,func1   
07ED   18 03                  JR   func4a   
07EF                FUNC4:       
07EF   05                     DEC   b   
07F0   20 C8                  JR   nz,func1   ; get the next element
07F2                FUNC4A:      
07F2   23                     INC   hl   
07F3   C1                     POP   bc   ; de = defstart, hl = IP
07F4   ED 5B EC 19            LD   de,(vHeapPtr)   ; de = defstart
07F8   D5                     PUSH   de   
07F9   22 EC 19               LD   (vHeapPtr),hl   ; update heap* to end of definition
07FC   DD E9                  JP   (ix)   
07FE                             ; Z80 port input
07FE                             ; port -- value
07FE                INPUT:       
07FE   E1                     POP   hl   
07FF   59                     LD   e,c   ; save IP
0800   4D                     LD   c,l   
0801   ED 68                  IN   l,(c)   
0803   26 00                  LD   h,0   
0805   4B                     LD   c,e   ; restore IP
0806   E5                     PUSH   hl   
0807   DD E9                  JP   (ix)   
0809                KEY:         
0809   CD 81 00               CALL   getchar   
080C   26 00                  LD   h,0   
080E   6F                     LD   l,a   
080F   E5                     PUSH   hl   
0810   DD E9                  JP   (ix)   
0812                             ; Z80 port output
0812                             ; value port --
0812                OUTPUT:      
0812   E1                     POP   hl   
0813   59                     LD   e,c   ; save IP
0814   4D                     LD   c,l   
0815   E1                     POP   hl   
0816   ED 69                  OUT   (c),l   
0818   4B                     LD   c,e   ; restore IP
0819   DD E9                  JP   (ix)   
081B                REPEAT:      
081B   DD E9                  JP   (ix)   
081D                             ; select
081D                             ; index array -- value
081D                SELECT:      
081D   D1                     POP   de   ; de = array
081E   E1                     POP   hl   ; hl = index
081F   29                     ADD   hl,hl   ; if data width = 2 then double
0820   19                     ADD   hl,de   ; add addr
0821   5E                     LD   e,(hl)   
0822   23                     INC   hl   
0823   56                     LD   d,(hl)   
0824   C3 F8 05               JP   go0   
0827                WORDS:       
0827   21 02 00               LD   hl,2   
082A   C3 A5 07               JP   bytes1   
082D                             ; 
082D                             ; 
082D                             ; 
082D                             ; 
082D                             ; c b --
082D                             ; loops until c = 0
082D                LOOP:        
082D   DD E9                  JP   (ix)   
082F                             ;     pop de                      ; de = block                    c
082F                             ;     pop hl                      ; hl = condition
082F                             ;     push de
082F                             ;     push bc                     ; push IP
082F                             ;     ld bc,de                    ; bc = block
082F                             ;     ld e,(iy+2)                 ; get ScopeBP from parent stack frame
082F                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
082F                             ;     push de                     ; push ScopeBP
082F                             ;     push iy                     ; push BP
082F                             ;     ld iy,0                     ; iy = sp
082F                             ;     add iy,sp
082F                             ; loop1:
082F                             ;     ld a,l                      ; bc = block, hl = condition = zero?
082F                             ;     or h
082F                             ;     jr z,loop3
082F                             ;     ld de,loop2-1               ; IP return address
082F                             ;     push de
082F                             ;     ld e,(iy+2)                 ; push parent ScopeBP
082F                             ;     ld d,(iy+3)
082F                             ;     push de                     ;
082F                             ;     push iy                     ; push BP
082F                             ;     ld iy,0                     ; iy = sp
082F                             ;     add iy,sp
082F                             ;     push hl                     ; push condition
082F                             ;     dec bc
082F                             ;     jp (ix)
082F                             ; loop2:
082F                             ;     db ESC                      ; escape from interpreter
082F                             ;     ld c,(iy+6)                 ; bc = block
082F                             ;     ld b,(iy+7)
082F                             ;     pop hl                      ; hl = condition
082F                             ;     jr loop1
082F                             ; loop3:
082F                             ;     ld d,iyh                    ; de = BP
082F                             ;     ld e,iyl
082F                             ;     ex de,hl                    ; hl = BP, de = result
082F                             ;     ld sp,hl                    ; sp = BP
082F                             ;     pop hl                      ; hl = old BP
082F                             ;     pop bc                      ; pop ScopeBP (discard)
082F                             ;     pop bc                      ; bc = IP
082F                             ;     ld sp,hl                    ; sp = old BP
082F                             ;     ld iy,0                     ; iy = sp
082F                             ;     add iy,sp
082F                             ;     ld ix,(vNext)                  ; needed?
082F                             ;     jp (ix)
082F                             ; str -- num
082F                             ; hash:
082F                             ; pop hl
082F                             ; push bc
082F                             ; ld bc,hl
082F                             ; call hashStr
082F                             ; pop bc
082F                             ; push hl
082F                             ; jp (ix)
082F                             ; sqrt1:
082F                             ;     pop hl
082F                             ;     push bc
082F                             ;     call squareRoot
082F                             ;     ld (vRemain),bc
082F                             ;     pop bc
082F                             ;     push de
082F                             ;     jp (ix)
082F                FILTER:      
082F                MAP:         
082F                SCAN:        
082F   DD E9                  JP   (ix)   
0831                             ; -------------------------------------------------------------------------------
0831                             ; ; hash C-string
0831                             ; ; BC = str
0831                             ; ; HL = hash
0831                             ; hashStr:
0831                             ;     ld (vHashStr),bc                    ; store source string
0831                             ;     ld hl,0
0831                             ; hashStr1:
0831                             ;     ld a,(bc)                           ; load next char
0831                             ;     inc bc
0831                             ;     cp 0                                ; NUL?
0831                             ;     ret z
0831                             ; hashStr2:
0831                             ;     ld d,0
0831                             ;     ld e,a
0831                             ;     add hl,de
0831                             ;     ld de,hl                            ; hl *= 193 (11000001)
0831                             ;     add hl,hl                           ; shift left
0831                             ;     add hl,de                           ; add
0831                             ;     add hl,hl                           ; shift left
0831                             ;     add hl,hl                           ; shift left
0831                             ;     add hl,hl                           ; shift left
0831                             ;     add hl,hl                           ; shift left
0831                             ;     add hl,hl                           ; shift left
0831                             ;     add hl,hl                           ; shift left
0831                             ;     add hl,de                           ; add
0831                             ;     jr hashStr1
0831                             ; ; squareroot
0831                             ; ; Input: HL = value
0831                             ; ; Result: DE = square root BC = remainder
0831                             ; squareRoot:
0831                             ;     ld bc,0800h
0831                             ;     ld e,c
0831                             ;     xor a
0831                             ; squareRoot1:
0831                             ;     add hl,hl
0831                             ;     rl c
0831                             ;     adc hl,hl
0831                             ;     rl c
0831                             ;     jr nc,$+4
0831                             ;     set 0,l
0831                             ;     ld a,e
0831                             ;     add a,a
0831                             ;     ld e,a
0831                             ;     add a,a
0831                             ;     bit 0,l
0831                             ;     jr nz,$+5
0831                             ;     sub c
0831                             ;     jr nc,squareRoot4
0831                             ;     ld a,c
0831                             ;     sub e
0831                             ;     inc e
0831                             ;     sub e
0831                             ;     ld c,a
0831                             ; squareRoot4:
0831                             ;     djnz squareRoot1
0831                             ;     bit 0,l
0831                             ;     jr z,squareRoot5
0831                             ;     inc b
0831                             ; squareRoot5:
0831                             ;     ld d,0
0831                             ;     ret
0831                             ; print decimal
0831                             ; hl = value
0831                PRTDEC:      
0831   CB 7C                  BIT   7,h   
0833   28 0B                  JR   z,prtdec0   
0835   3E 2D                  LD   a,"-"   
0837   CD 85 00               CALL   putchar   
083A   AF                     XOR   a   
083B   95                     SUB   l   
083C   6F                     LD   l,a   
083D   9F                     SBC   a,a   
083E   94                     SUB   h   
083F   67                     LD   h,a   
0840                PRTDEC0:      
0840   C5                     PUSH   bc   
0841   0E 00                  LD   c,0   ; leading zeros flag = false
0843   11 F0 D8               LD   de,-10000   
0846   CD 62 08               CALL   prtdec1   
0849   11 18 FC               LD   de,-1000   
084C   CD 62 08               CALL   prtdec1   
084F   11 9C FF               LD   de,-100   
0852   CD 62 08               CALL   prtdec1   
0855   1E F6                  LD   e,-10   
0857   CD 62 08               CALL   prtdec1   
085A   0C                     INC   c   ; flag = true for at least digit
085B   1E FF                  LD   e,-1   
085D   CD 62 08               CALL   prtdec1   
0860   C1                     POP   bc   
0861   C9                     RET      
0862                PRTDEC1:      
0862   06 2F                  LD   b,"0"-1   
0864                PRTDEC2:      
0864   04                     INC   b   
0865   19                     ADD   hl,de   
0866   38 FC                  JR   c,prtdec2   
0868   ED 52                  SBC   hl,de   
086A   3E 30                  LD   a,"0"   
086C   B8                     CP   b   
086D   20 05                  JR   nz,prtdec3   
086F   AF                     XOR   a   
0870   B1                     OR   c   
0871   C8                     RET   z   
0872   18 01                  JR   prtdec4   
0874                PRTDEC3:      
0874   0C                     INC   c   
0875                PRTDEC4:      
0875   78                     LD   a,b   
0876   C3 85 00               JP   putchar   
0879                PRTHEX:      ; display hl as a 16-bit number in hex.
0879   C5                     PUSH   bc   ; preserve the IP
087A   7C                     LD   a,h   
087B   CD 84 08               CALL   prthex2   
087E   7D                     LD   a,l   
087F   CD 84 08               CALL   prthex2   
0882   C1                     POP   bc   
0883   C9                     RET      
0884                PRTHEX2:      
0884   4F                     LD   c,a   
0885   1F                     RRA      
0886   1F                     RRA      
0887   1F                     RRA      
0888   1F                     RRA      
0889   CD 8D 08               CALL   prthex3   
088C   79                     LD   a,c   
088D                PRTHEX3:      
088D   E6 0F                  AND   0x0F   
088F   C6 90                  ADD   a,0x90   
0891   27                     DAA      
0892   CE 40                  ADC   a,0x40   
0894   27                     DAA      
0895   C3 85 00               JP   putchar   
0898                PRTSTR0:      
0898   CD 85 00               CALL   putchar   
089B   23                     INC   hl   
089C                PRTSTR:      
089C   7E                     LD   a,(hl)   
089D   B7                     OR   a   
089E   20 F8                  JR   nz,prtstr0   
08A0   C9                     RET      
08A1                             ; **************************************************************************
08A1                             ; calculate nesting value
08A1                             ; a is char to be tested,
08A1                             ; e is the nesting value (initially 0)
08A1                             ; e is increased by ( and [
08A1                             ; e is decreased by ) and ]
08A1                             ; e has its bit 7 toggled by `
08A1                             ; limited to 127 levels
08A1                             ; **************************************************************************
08A1                NESTING:      
08A1   FE 22                  CP   DQUOTE   ; quote char
08A3   28 06                  JR   z,nesting0   
08A5   FE 60                  CP   "`"   ; quote char
08A7   28 02                  JR   z,nesting0   
08A9   18 0A                  JR   nesting1   
08AB                NESTING0:      
08AB   CB 7B                  BIT   7,e   
08AD   28 03                  JR   z,nesting1a   
08AF   CB BB                  RES   7,e   
08B1   C9                     RET      
08B2                NESTING1A:      
08B2   CB FB                  SET   7,e   
08B4   C9                     RET      
08B5                NESTING1:      
08B5   CB 7B                  BIT   7,e   
08B7   C0                     RET   nz   
08B8   FE 7B                  CP   "{"   
08BA   28 08                  JR   z,nesting2   
08BC   FE 5B                  CP   "["   
08BE   28 04                  JR   z,nesting2   
08C0   FE 28                  CP   "("   
08C2   20 02                  JR   nz,nesting3   
08C4                NESTING2:      
08C4   1C                     INC   e   
08C5   C9                     RET      
08C6                NESTING3:      
08C6   FE 7D                  CP   "}"   
08C8   28 07                  JR   z,nesting4   
08CA   FE 5D                  CP   "]"   
08CC   28 03                  JR   z,nesting4   
08CE   FE 29                  CP   ")"   
08D0   C0                     RET   nz   
08D1                NESTING4:      
08D1   1D                     DEC   e   
08D2   C9                     RET      
08D3                PROMPT:      
08D3   CD E3 08               CALL   printStr   
08D6   0D 0A 3E 20 00         .CSTR   "\r\n> "   
08DB   C9                     RET      
08DC                CRLF:        
08DC   CD E3 08               CALL   printStr   
08DF   0D 0A 00               .CSTR   "\r\n"   
08E2   C9                     RET      
08E3                             ; prints a null teminated string
08E3                             ; the string should be immedaitely following the call
08E3                PRINTSTR:      
08E3   E3                     EX   (sp),hl   ; swap			
08E4   CD 9C 08               CALL   prtstr   
08E7   23                     INC   hl   ; inc past NUL
08E8   E3                     EX   (sp),hl   ; put it back	
08E9   C9                     RET      
08EA                             ; executes a null teminated string (null executes exit_)
08EA                             ; the string should be immedaitely following the call
08EA                EXECSTR:      ; create a root stack frame
08EA   C1                     POP   bc   ; bc = code*
08EB   0B                     DEC   bc   ; dec to prepare for next routine
08EC   11 00 00               LD   de,0   
08EF   D5                     PUSH   de   ; push fake IP
08F0   D5                     PUSH   de   ; push null arg_list*
08F1   D5                     PUSH   de   ; push null first_arg*
08F2   D5                     PUSH   de   ; push fake BP
08F3   DD E9                  JP   (ix)   
08F5                             ; arg1 .. argn func -- ?
08F5                CALL:        
08F5   E1                     POP   hl   
08F6   E9                     JP   (hl)   
08F7                INIT:        
08F7   DD 2A EA 19            LD   ix,(vNext)   
08FB   FD 21 80 18            LD   iy,STACK   
08FF   21 80 01               LD   hl,isysVars   
0902   11 E6 19               LD   de,sysVars   
0905   01 10 00               LD   bc,8 * 2   
0908   ED B0                  LDIR      
090A   21 00 19               LD   hl,vars   ; 52 vars LO HI
090D   06 34                  LD   b,26*2   
090F   AF                     XOR   a   
0910                INIT0:       
0910   77                     LD   (hl),a   
0911   23                     INC   hl   
0912   10 FC                  DJNZ   init0   
0914   C9                     RET      
0915                START:       
0915   31 80 18               LD   sp,STACK   ; start of monty
0918   CD F7 08               CALL   init   ; setups
091B   CD E3 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
091E   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
092B                INTERPRET:      
092B   CD D3 08               CALL   prompt   
092E   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0931   ED 43 E8 19            LD   (vTIBPtr),bc   
0935                INTERPRET2:      ; calc nesting (a macro might have changed it)
0935   1E 00                  LD   e,0   ; initilize nesting value
0937   C5                     PUSH   bc   ; save offset into TIB,
0938                             ; bc is also the count of chars in TIB
0938   21 00 1A               LD   hl,TIB   ; hl is start of TIB
093B   18 06                  JR   interpret4   
093D                INTERPRET3:      
093D   7E                     LD   a,(hl)   ; a = char in TIB
093E   23                     INC   hl   ; inc pointer into TIB
093F   0B                     DEC   bc   ; dec count of chars in TIB
0940   CD A1 08               CALL   nesting   ; update nesting value
0943                INTERPRET4:      
0943   79                     LD   a,c   ; is count zero?
0944   B0                     OR   b   
0945   20 F6                  JR   nz,interpret3   ; if not loop
0947   C1                     POP   bc   ; restore offset into TIB
0948                INTERPRET5:      
0948   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
094B   FE 20                  CP   $20   ; compare to space
094D   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
094F   FE 00                  CP   $0   ; is it end of string? NUL end of string
0951                             ; ???? NEEDED?
0951   28 27                  JR   z,interpret8   
0953   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0955   28 10                  JR   z,interpret7   ; if anything else its macro/control
0957                             ; macro
0957                             ;  ld (vTIBPtr),bc
0957                             ;  ld hl,ctrlCodes
0957                             ;  add a,l			            ; look up key of macros
0957                             ;  ld l,a
0957                             ;  ld e,(hl)
0957                             ;  ld a,e
0957                             ;  or a
0957                             ;  jr z,macro1
0957                             ;  ld d,msb(macros)
0957                             ;  push de
0957                             ;  call call		            ; monty exec_ operation and jump to it
0957                             ;  db DC1,0
0957                             ; macro1:
0957                             ;  ld bc,(vTIBPtr)
0957   18 DC                  JR   interpret2   
0959                INTERPRET6:      
0959   21 00 1A               LD   hl,TIB   
095C   09                     ADD   hl,bc   
095D   77                     LD   (hl),a   ; store the character in textbuf
095E   03                     INC   bc   
095F   CD 85 00               CALL   putchar   ; echo character to screen
0962   CD A1 08               CALL   nesting   
0965   18 E1                  JR   interpret5   ; wait for next character
0967                INTERPRET7:      
0967   21 00 1A               LD   hl,TIB   
096A   09                     ADD   hl,bc   
096B   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
096D   23                     INC   hl   
096E   36 0A                  LD   (hl),"\n"   
0970   23                     INC   hl   
0971   03                     INC   bc   
0972   03                     INC   bc   
0973   CD DC 08               CALL   crlf   ; echo character to screen
0976   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0977   B7                     OR   a   
0978   20 CE                  JR   nz,interpret5   
097A                INTERPRET8:      
097A   ED 43 E8 19            LD   (vTIBPtr),bc   
097E   01 00 1A               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0981                             ; we pressed enter
0981   0B                     DEC   bc   
0982                NEXT:        
0982   03                     INC   bc   ; Increment the IP
0983   0A                     LD   a,(bc)   ; Get the next character and dispatch
0984   FE 20                  CP   " "   ; whitespace?
0986   28 FA                  JR   z,next   ; space? ignore
0988   38 07                  JR   c,next1   
098A   6F                     LD   l,a   ; index into table
098B   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
098D   6E                     LD   l,(hl)   ; get low jump address
098E   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0990   E9                     JP   (hl)   ; Jump to routine
0991                NEXT1:       
0991   FE 00                  CP   NUL   ; end of input string?
0993   28 03                  JR   z,exit_   
0995   C3 2B 09               JP   interpret   ; no, other whitespace, macros?
0998                EXIT_:       
0998   60 69                  LD   hl,bc   
099A   E9                     JP   (hl)   
099B                ERROR:       
099B   CD E3 08               CALL   printStr   
099E   45 72 72 6F 72 20 00   .CSTR   "Error "   
09A5   CD 31 08               CALL   prtdec   
09A8   C3 2B 09               JP   interpret   
09AB                             ; .pstr "hash",0
09AB                             ; dw hash \hsh
09AB                             ; .pstr "input",0
09AB                             ; dw input \in ?
09AB                             ; call define
09AB                             ; .pstr "output",0
09AB                             ; dw output \out ?
09AB                             ; .pstr "key",0
09AB                             ; dw key \k
09AB                             ; .pstr "loop",0
09AB                             ; dw loop \rpt
09AB                             ; .pstr "select",0
09AB                             ; dw select. \sw
09AB                             ; call define
09AB                             ; .pstr "filter",0
09AB                             ; dw filter \f ?
09AB                             ; call define
09AB                             ; .pstr "map",0
09AB                             ; dw map \m ?
09AB                             ; call define
09AB                             ; .pstr "scan",0
09AB                             ; dw scan.  \fold ?
09AB                             ; call define
09AB                             ; .pstr "sqrt",0
09AB                             ; dw sqrt1 \sqt
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                          ALIGN   $100   
1900                VARS:        
1900                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
19D0                RESTARTS:      
19D0                RST08:    DS   2   
19D2                RST10:    DS   2   
19D4                RST18:    DS   2   
19D6                RST20:    DS   2   
19D8                RST28:    DS   2   
19DA                RST30:    DS   2   ; 
19DC                BAUD:     DS   2   ; 
19DE                INTVEC:   DS   2   ; 
19E0                NMIVEC:   DS   2   ; 
19E2                GETCVEC:   DS   2   ; 
19E4                PUTCVEC:   DS   2   ; 
19E6                SYSVARS:      
19E6                             ; initialised sys variables
19E6                VDATAWIDTH:   DS   2   ; 
19E8                VTIBPTR:   DS   2   ; 
19EA                VNEXT:    DS   2   ; 
19EC                VHEAPPTR:   DS   2   ; 
19EE                             ; uninitialised sys variables
19EE                VPOINTER:   DS   2   ; 
19F0                VHASHSTR:   DS   2   ; 
19F2                VLASTDEF:   DS   2   ; 
19F4                VREMAIN:   DS   2   ; 
19F6                VTEMP1:   DS   2   ; 
19F8                VTEMP2:   DS   2   ; 
19FA                TBPTR:    DS   2   ; reserved for tests
19FC                          ALIGN   $100   
1A00                TIB:      DS   TIBSIZE   
1B00                          ALIGN   $100   
1B00                PAD:      DS   $100   
1C00                HEAP:        
4000                          .ORG   $4000   
4000                TESTSSTART:      
4000                          ;*Macro unroll:  test "{1};:", 1
4000   31 80 18               LD   SP,STACK   
4003   CD F7 08               CALL   init   
4006   CD EA 08               CALL   execStr   
4009   7B 31 7D 3B 3A 00      .CSTR   "{1};:"   
400F                          ;*Macro unroll:  expect "{1};:",1
400F   E1                     POP   HL   
4010   E5                     PUSH   HL   
4011   11 01 00               LD   DE,1   
4014   B7                     OR   A   
4015   ED 52                  SBC   HL,DE   
4017   7D                     LD   A,L   
4018   B4                     OR   H   
4019   28 50                  JR   Z,expectM_0_2256S43   
401B   CD E3 08               CALL   printStr   
401E   43 6F 64 65 3A 20 7B 31 7D 3B 3A 00 .CSTR   "Code: ","{1};:"   
402A   CD E3 08               CALL   printStr   
402D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
403C   21 01 00               LD   HL,1   
403F   CD 31 08               CALL   prtdec   
4042   CD E3 08               CALL   printStr   
4045   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4052   E1                     POP   hl   
4053   E5                     PUSH   hl   
4054   CD 31 08               CALL   prtdec   
4057   E1                     POP   hl   
4058   CD E3 08               CALL   printStr   
405B   20 28 23 00            .CSTR   " (#"   
405F   CD 79 08               CALL   prthex   
4062   CD E3 08               CALL   printStr   
4065   29 0D 0A 00            .CSTR   ")\r\n"   
4069   76                     HALT      
406A   00                     .CSTR      
406B                EXPECTM_0_2256S43:      
406B   E1                     POP   HL   
406C                             ; 
406C                          ;*Macro unroll:  test "\\F", false
406C   31 80 18               LD   SP,STACK   
406F   CD F7 08               CALL   init   
4072   CD EA 08               CALL   execStr   
4075   5C 46 00               .CSTR   "\\F"   
4078                          ;*Macro unroll:  expect "\\F",false
4078   E1                     POP   HL   
4079   E5                     PUSH   HL   
407A   11 00 00               LD   DE,false   
407D   B7                     OR   A   
407E   ED 52                  SBC   HL,DE   
4080   7D                     LD   A,L   
4081   B4                     OR   H   
4082   28 4D                  JR   Z,expectM_0_2258S43   
4084   CD E3 08               CALL   printStr   
4087   43 6F 64 65 3A 20 5C 46 00 .CSTR   "Code: ","\\F"   
4090   CD E3 08               CALL   printStr   
4093   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40A2   21 00 00               LD   HL,false   
40A5   CD 31 08               CALL   prtdec   
40A8   CD E3 08               CALL   printStr   
40AB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40B8   E1                     POP   hl   
40B9   E5                     PUSH   hl   
40BA   CD 31 08               CALL   prtdec   
40BD   E1                     POP   hl   
40BE   CD E3 08               CALL   printStr   
40C1   20 28 23 00            .CSTR   " (#"   
40C5   CD 79 08               CALL   prthex   
40C8   CD E3 08               CALL   printStr   
40CB   29 0D 0A 00            .CSTR   ")\r\n"   
40CF   76                     HALT      
40D0   00                     .CSTR      
40D1                EXPECTM_0_2258S43:      
40D1   E1                     POP   HL   
40D2                          ;*Macro unroll:  test "\\T", true
40D2   31 80 18               LD   SP,STACK   
40D5   CD F7 08               CALL   init   
40D8   CD EA 08               CALL   execStr   
40DB   5C 54 00               .CSTR   "\\T"   
40DE                          ;*Macro unroll:  expect "\\T",true
40DE   E1                     POP   HL   
40DF   E5                     PUSH   HL   
40E0   11 FF FF               LD   DE,true   
40E3   B7                     OR   A   
40E4   ED 52                  SBC   HL,DE   
40E6   7D                     LD   A,L   
40E7   B4                     OR   H   
40E8   28 4D                  JR   Z,expectM_0_2259S43   
40EA   CD E3 08               CALL   printStr   
40ED   43 6F 64 65 3A 20 5C 54 00 .CSTR   "Code: ","\\T"   
40F6   CD E3 08               CALL   printStr   
40F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4108   21 FF FF               LD   HL,true   
410B   CD 31 08               CALL   prtdec   
410E   CD E3 08               CALL   printStr   
4111   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
411E   E1                     POP   hl   
411F   E5                     PUSH   hl   
4120   CD 31 08               CALL   prtdec   
4123   E1                     POP   hl   
4124   CD E3 08               CALL   printStr   
4127   20 28 23 00            .CSTR   " (#"   
412B   CD 79 08               CALL   prthex   
412E   CD E3 08               CALL   printStr   
4131   29 0D 0A 00            .CSTR   ")\r\n"   
4135   76                     HALT      
4136   00                     .CSTR      
4137                EXPECTM_0_2259S43:      
4137   E1                     POP   HL   
4138                          ;*Macro unroll:  test "1", 1
4138   31 80 18               LD   SP,STACK   
413B   CD F7 08               CALL   init   
413E   CD EA 08               CALL   execStr   
4141   31 00                  .CSTR   "1"   
4143                          ;*Macro unroll:  expect "1",1
4143   E1                     POP   HL   
4144   E5                     PUSH   HL   
4145   11 01 00               LD   DE,1   
4148   B7                     OR   A   
4149   ED 52                  SBC   HL,DE   
414B   7D                     LD   A,L   
414C   B4                     OR   H   
414D   28 4C                  JR   Z,expectM_0_2260S43   
414F   CD E3 08               CALL   printStr   
4152   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
415A   CD E3 08               CALL   printStr   
415D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
416C   21 01 00               LD   HL,1   
416F   CD 31 08               CALL   prtdec   
4172   CD E3 08               CALL   printStr   
4175   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4182   E1                     POP   hl   
4183   E5                     PUSH   hl   
4184   CD 31 08               CALL   prtdec   
4187   E1                     POP   hl   
4188   CD E3 08               CALL   printStr   
418B   20 28 23 00            .CSTR   " (#"   
418F   CD 79 08               CALL   prthex   
4192   CD E3 08               CALL   printStr   
4195   29 0D 0A 00            .CSTR   ")\r\n"   
4199   76                     HALT      
419A   00                     .CSTR      
419B                EXPECTM_0_2260S43:      
419B   E1                     POP   HL   
419C                          ;*Macro unroll:  test "2", 2
419C   31 80 18               LD   SP,STACK   
419F   CD F7 08               CALL   init   
41A2   CD EA 08               CALL   execStr   
41A5   32 00                  .CSTR   "2"   
41A7                          ;*Macro unroll:  expect "2",2
41A7   E1                     POP   HL   
41A8   E5                     PUSH   HL   
41A9   11 02 00               LD   DE,2   
41AC   B7                     OR   A   
41AD   ED 52                  SBC   HL,DE   
41AF   7D                     LD   A,L   
41B0   B4                     OR   H   
41B1   28 4C                  JR   Z,expectM_0_2261S43   
41B3   CD E3 08               CALL   printStr   
41B6   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
41BE   CD E3 08               CALL   printStr   
41C1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41D0   21 02 00               LD   HL,2   
41D3   CD 31 08               CALL   prtdec   
41D6   CD E3 08               CALL   printStr   
41D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41E6   E1                     POP   hl   
41E7   E5                     PUSH   hl   
41E8   CD 31 08               CALL   prtdec   
41EB   E1                     POP   hl   
41EC   CD E3 08               CALL   printStr   
41EF   20 28 23 00            .CSTR   " (#"   
41F3   CD 79 08               CALL   prthex   
41F6   CD E3 08               CALL   printStr   
41F9   29 0D 0A 00            .CSTR   ")\r\n"   
41FD   76                     HALT      
41FE   00                     .CSTR      
41FF                EXPECTM_0_2261S43:      
41FF   E1                     POP   HL   
4200                          ;*Macro unroll:  test "1", 1
4200   31 80 18               LD   SP,STACK   
4203   CD F7 08               CALL   init   
4206   CD EA 08               CALL   execStr   
4209   31 00                  .CSTR   "1"   
420B                          ;*Macro unroll:  expect "1",1
420B   E1                     POP   HL   
420C   E5                     PUSH   HL   
420D   11 01 00               LD   DE,1   
4210   B7                     OR   A   
4211   ED 52                  SBC   HL,DE   
4213   7D                     LD   A,L   
4214   B4                     OR   H   
4215   28 4C                  JR   Z,expectM_0_2262S43   
4217   CD E3 08               CALL   printStr   
421A   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
4222   CD E3 08               CALL   printStr   
4225   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4234   21 01 00               LD   HL,1   
4237   CD 31 08               CALL   prtdec   
423A   CD E3 08               CALL   printStr   
423D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
424A   E1                     POP   hl   
424B   E5                     PUSH   hl   
424C   CD 31 08               CALL   prtdec   
424F   E1                     POP   hl   
4250   CD E3 08               CALL   printStr   
4253   20 28 23 00            .CSTR   " (#"   
4257   CD 79 08               CALL   prthex   
425A   CD E3 08               CALL   printStr   
425D   29 0D 0A 00            .CSTR   ")\r\n"   
4261   76                     HALT      
4262   00                     .CSTR      
4263                EXPECTM_0_2262S43:      
4263   E1                     POP   HL   
4264                          ;*Macro unroll:  test "0", 0
4264   31 80 18               LD   SP,STACK   
4267   CD F7 08               CALL   init   
426A   CD EA 08               CALL   execStr   
426D   30 00                  .CSTR   "0"   
426F                          ;*Macro unroll:  expect "0",0
426F   E1                     POP   HL   
4270   E5                     PUSH   HL   
4271   11 00 00               LD   DE,0   
4274   B7                     OR   A   
4275   ED 52                  SBC   HL,DE   
4277   7D                     LD   A,L   
4278   B4                     OR   H   
4279   28 4C                  JR   Z,expectM_0_2263S43   
427B   CD E3 08               CALL   printStr   
427E   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
4286   CD E3 08               CALL   printStr   
4289   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4298   21 00 00               LD   HL,0   
429B   CD 31 08               CALL   prtdec   
429E   CD E3 08               CALL   printStr   
42A1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42AE   E1                     POP   hl   
42AF   E5                     PUSH   hl   
42B0   CD 31 08               CALL   prtdec   
42B3   E1                     POP   hl   
42B4   CD E3 08               CALL   printStr   
42B7   20 28 23 00            .CSTR   " (#"   
42BB   CD 79 08               CALL   prthex   
42BE   CD E3 08               CALL   printStr   
42C1   29 0D 0A 00            .CSTR   ")\r\n"   
42C5   76                     HALT      
42C6   00                     .CSTR      
42C7                EXPECTM_0_2263S43:      
42C7   E1                     POP   HL   
42C8                          ;*Macro unroll:  test "10", 10
42C8   31 80 18               LD   SP,STACK   
42CB   CD F7 08               CALL   init   
42CE   CD EA 08               CALL   execStr   
42D1   31 30 00               .CSTR   "10"   
42D4                          ;*Macro unroll:  expect "10",10
42D4   E1                     POP   HL   
42D5   E5                     PUSH   HL   
42D6   11 0A 00               LD   DE,10   
42D9   B7                     OR   A   
42DA   ED 52                  SBC   HL,DE   
42DC   7D                     LD   A,L   
42DD   B4                     OR   H   
42DE   28 4D                  JR   Z,expectM_0_2264S43   
42E0   CD E3 08               CALL   printStr   
42E3   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
42EC   CD E3 08               CALL   printStr   
42EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42FE   21 0A 00               LD   HL,10   
4301   CD 31 08               CALL   prtdec   
4304   CD E3 08               CALL   printStr   
4307   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4314   E1                     POP   hl   
4315   E5                     PUSH   hl   
4316   CD 31 08               CALL   prtdec   
4319   E1                     POP   hl   
431A   CD E3 08               CALL   printStr   
431D   20 28 23 00            .CSTR   " (#"   
4321   CD 79 08               CALL   prthex   
4324   CD E3 08               CALL   printStr   
4327   29 0D 0A 00            .CSTR   ")\r\n"   
432B   76                     HALT      
432C   00                     .CSTR      
432D                EXPECTM_0_2264S43:      
432D   E1                     POP   HL   
432E                          ;*Macro unroll:  test "123", 123
432E   31 80 18               LD   SP,STACK   
4331   CD F7 08               CALL   init   
4334   CD EA 08               CALL   execStr   
4337   31 32 33 00            .CSTR   "123"   
433B                          ;*Macro unroll:  expect "123",123
433B   E1                     POP   HL   
433C   E5                     PUSH   HL   
433D   11 7B 00               LD   DE,123   
4340   B7                     OR   A   
4341   ED 52                  SBC   HL,DE   
4343   7D                     LD   A,L   
4344   B4                     OR   H   
4345   28 4E                  JR   Z,expectM_0_2265S43   
4347   CD E3 08               CALL   printStr   
434A   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
4354   CD E3 08               CALL   printStr   
4357   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4366   21 7B 00               LD   HL,123   
4369   CD 31 08               CALL   prtdec   
436C   CD E3 08               CALL   printStr   
436F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
437C   E1                     POP   hl   
437D   E5                     PUSH   hl   
437E   CD 31 08               CALL   prtdec   
4381   E1                     POP   hl   
4382   CD E3 08               CALL   printStr   
4385   20 28 23 00            .CSTR   " (#"   
4389   CD 79 08               CALL   prthex   
438C   CD E3 08               CALL   printStr   
438F   29 0D 0A 00            .CSTR   ")\r\n"   
4393   76                     HALT      
4394   00                     .CSTR      
4395                EXPECTM_0_2265S43:      
4395   E1                     POP   HL   
4396                          ;*Macro unroll:  test "-1",-1
4396   31 80 18               LD   SP,STACK   
4399   CD F7 08               CALL   init   
439C   CD EA 08               CALL   execStr   
439F   2D 31 00               .CSTR   "-1"   
43A2                          ;*Macro unroll:  expect "-1",-1
43A2   E1                     POP   HL   
43A3   E5                     PUSH   HL   
43A4   11 FF FF               LD   DE,-1   
43A7   B7                     OR   A   
43A8   ED 52                  SBC   HL,DE   
43AA   7D                     LD   A,L   
43AB   B4                     OR   H   
43AC   28 4D                  JR   Z,expectM_0_2266S43   
43AE   CD E3 08               CALL   printStr   
43B1   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
43BA   CD E3 08               CALL   printStr   
43BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43CC   21 FF FF               LD   HL,-1   
43CF   CD 31 08               CALL   prtdec   
43D2   CD E3 08               CALL   printStr   
43D5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43E2   E1                     POP   hl   
43E3   E5                     PUSH   hl   
43E4   CD 31 08               CALL   prtdec   
43E7   E1                     POP   hl   
43E8   CD E3 08               CALL   printStr   
43EB   20 28 23 00            .CSTR   " (#"   
43EF   CD 79 08               CALL   prthex   
43F2   CD E3 08               CALL   printStr   
43F5   29 0D 0A 00            .CSTR   ")\r\n"   
43F9   76                     HALT      
43FA   00                     .CSTR      
43FB                EXPECTM_0_2266S43:      
43FB   E1                     POP   HL   
43FC                          ;*Macro unroll:  test "''", 0
43FC   31 80 18               LD   SP,STACK   
43FF   CD F7 08               CALL   init   
4402   CD EA 08               CALL   execStr   
4405   27 27 00               .CSTR   "''"   
4408                          ;*Macro unroll:  expect "''",0
4408   E1                     POP   HL   
4409   E5                     PUSH   HL   
440A   11 00 00               LD   DE,0   
440D   B7                     OR   A   
440E   ED 52                  SBC   HL,DE   
4410   7D                     LD   A,L   
4411   B4                     OR   H   
4412   28 4D                  JR   Z,expectM_0_2267S43   
4414   CD E3 08               CALL   printStr   
4417   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
4420   CD E3 08               CALL   printStr   
4423   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4432   21 00 00               LD   HL,0   
4435   CD 31 08               CALL   prtdec   
4438   CD E3 08               CALL   printStr   
443B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4448   E1                     POP   hl   
4449   E5                     PUSH   hl   
444A   CD 31 08               CALL   prtdec   
444D   E1                     POP   hl   
444E   CD E3 08               CALL   printStr   
4451   20 28 23 00            .CSTR   " (#"   
4455   CD 79 08               CALL   prthex   
4458   CD E3 08               CALL   printStr   
445B   29 0D 0A 00            .CSTR   ")\r\n"   
445F   76                     HALT      
4460   00                     .CSTR      
4461                EXPECTM_0_2267S43:      
4461   E1                     POP   HL   
4462                          ;*Macro unroll:  test "'a'", $61
4462   31 80 18               LD   SP,STACK   
4465   CD F7 08               CALL   init   
4468   CD EA 08               CALL   execStr   
446B   27 61 27 00            .CSTR   "'a'"   
446F                          ;*Macro unroll:  expect "'a'",$61
446F   E1                     POP   HL   
4470   E5                     PUSH   HL   
4471   11 61 00               LD   DE,$61   
4474   B7                     OR   A   
4475   ED 52                  SBC   HL,DE   
4477   7D                     LD   A,L   
4478   B4                     OR   H   
4479   28 4E                  JR   Z,expectM_0_2268S43   
447B   CD E3 08               CALL   printStr   
447E   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
4488   CD E3 08               CALL   printStr   
448B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
449A   21 61 00               LD   HL,$61   
449D   CD 31 08               CALL   prtdec   
44A0   CD E3 08               CALL   printStr   
44A3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44B0   E1                     POP   hl   
44B1   E5                     PUSH   hl   
44B2   CD 31 08               CALL   prtdec   
44B5   E1                     POP   hl   
44B6   CD E3 08               CALL   printStr   
44B9   20 28 23 00            .CSTR   " (#"   
44BD   CD 79 08               CALL   prthex   
44C0   CD E3 08               CALL   printStr   
44C3   29 0D 0A 00            .CSTR   ")\r\n"   
44C7   76                     HALT      
44C8   00                     .CSTR      
44C9                EXPECTM_0_2268S43:      
44C9   E1                     POP   HL   
44CA                          ;*Macro unroll:  test "'\\''", $27
44CA   31 80 18               LD   SP,STACK   
44CD   CD F7 08               CALL   init   
44D0   CD EA 08               CALL   execStr   
44D3   27 5C 27 27 00         .CSTR   "'\\''"   
44D8                          ;*Macro unroll:  expect "'\\''",$27
44D8   E1                     POP   HL   
44D9   E5                     PUSH   HL   
44DA   11 27 00               LD   DE,$27   
44DD   B7                     OR   A   
44DE   ED 52                  SBC   HL,DE   
44E0   7D                     LD   A,L   
44E1   B4                     OR   H   
44E2   28 4F                  JR   Z,expectM_0_2269S43   
44E4   CD E3 08               CALL   printStr   
44E7   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
44F2   CD E3 08               CALL   printStr   
44F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4504   21 27 00               LD   HL,$27   
4507   CD 31 08               CALL   prtdec   
450A   CD E3 08               CALL   printStr   
450D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
451A   E1                     POP   hl   
451B   E5                     PUSH   hl   
451C   CD 31 08               CALL   prtdec   
451F   E1                     POP   hl   
4520   CD E3 08               CALL   printStr   
4523   20 28 23 00            .CSTR   " (#"   
4527   CD 79 08               CALL   prthex   
452A   CD E3 08               CALL   printStr   
452D   29 0D 0A 00            .CSTR   ")\r\n"   
4531   76                     HALT      
4532   00                     .CSTR      
4533                EXPECTM_0_2269S43:      
4533   E1                     POP   HL   
4534                          ;*Macro unroll:  test "#10", $10
4534   31 80 18               LD   SP,STACK   
4537   CD F7 08               CALL   init   
453A   CD EA 08               CALL   execStr   
453D   23 31 30 00            .CSTR   "#10"   
4541                          ;*Macro unroll:  expect "#10",$10
4541   E1                     POP   HL   
4542   E5                     PUSH   HL   
4543   11 10 00               LD   DE,$10   
4546   B7                     OR   A   
4547   ED 52                  SBC   HL,DE   
4549   7D                     LD   A,L   
454A   B4                     OR   H   
454B   28 4E                  JR   Z,expectM_0_2270S43   
454D   CD E3 08               CALL   printStr   
4550   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
455A   CD E3 08               CALL   printStr   
455D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
456C   21 10 00               LD   HL,$10   
456F   CD 31 08               CALL   prtdec   
4572   CD E3 08               CALL   printStr   
4575   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4582   E1                     POP   hl   
4583   E5                     PUSH   hl   
4584   CD 31 08               CALL   prtdec   
4587   E1                     POP   hl   
4588   CD E3 08               CALL   printStr   
458B   20 28 23 00            .CSTR   " (#"   
458F   CD 79 08               CALL   prthex   
4592   CD E3 08               CALL   printStr   
4595   29 0D 0A 00            .CSTR   ")\r\n"   
4599   76                     HALT      
459A   00                     .CSTR      
459B                EXPECTM_0_2270S43:      
459B   E1                     POP   HL   
459C                          ;*Macro unroll:  test "#FF", $FF
459C   31 80 18               LD   SP,STACK   
459F   CD F7 08               CALL   init   
45A2   CD EA 08               CALL   execStr   
45A5   23 46 46 00            .CSTR   "#FF"   
45A9                          ;*Macro unroll:  expect "#FF",$FF
45A9   E1                     POP   HL   
45AA   E5                     PUSH   HL   
45AB   11 FF 00               LD   DE,$FF   
45AE   B7                     OR   A   
45AF   ED 52                  SBC   HL,DE   
45B1   7D                     LD   A,L   
45B2   B4                     OR   H   
45B3   28 4E                  JR   Z,expectM_0_2271S43   
45B5   CD E3 08               CALL   printStr   
45B8   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
45C2   CD E3 08               CALL   printStr   
45C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45D4   21 FF 00               LD   HL,$FF   
45D7   CD 31 08               CALL   prtdec   
45DA   CD E3 08               CALL   printStr   
45DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45EA   E1                     POP   hl   
45EB   E5                     PUSH   hl   
45EC   CD 31 08               CALL   prtdec   
45EF   E1                     POP   hl   
45F0   CD E3 08               CALL   printStr   
45F3   20 28 23 00            .CSTR   " (#"   
45F7   CD 79 08               CALL   prthex   
45FA   CD E3 08               CALL   printStr   
45FD   29 0D 0A 00            .CSTR   ")\r\n"   
4601   76                     HALT      
4602   00                     .CSTR      
4603                EXPECTM_0_2271S43:      
4603   E1                     POP   HL   
4604                          ;*Macro unroll:  test "-1 2 +",1
4604   31 80 18               LD   SP,STACK   
4607   CD F7 08               CALL   init   
460A   CD EA 08               CALL   execStr   
460D   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
4614                          ;*Macro unroll:  expect "-1 2 +",1
4614   E1                     POP   HL   
4615   E5                     PUSH   HL   
4616   11 01 00               LD   DE,1   
4619   B7                     OR   A   
461A   ED 52                  SBC   HL,DE   
461C   7D                     LD   A,L   
461D   B4                     OR   H   
461E   28 51                  JR   Z,expectM_0_2272S43   
4620   CD E3 08               CALL   printStr   
4623   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
4630   CD E3 08               CALL   printStr   
4633   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4642   21 01 00               LD   HL,1   
4645   CD 31 08               CALL   prtdec   
4648   CD E3 08               CALL   printStr   
464B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4658   E1                     POP   hl   
4659   E5                     PUSH   hl   
465A   CD 31 08               CALL   prtdec   
465D   E1                     POP   hl   
465E   CD E3 08               CALL   printStr   
4661   20 28 23 00            .CSTR   " (#"   
4665   CD 79 08               CALL   prthex   
4668   CD E3 08               CALL   printStr   
466B   29 0D 0A 00            .CSTR   ")\r\n"   
466F   76                     HALT      
4670   00                     .CSTR      
4671                EXPECTM_0_2272S43:      
4671   E1                     POP   HL   
4672                          ;*Macro unroll:  test "-1 1 +",0
4672   31 80 18               LD   SP,STACK   
4675   CD F7 08               CALL   init   
4678   CD EA 08               CALL   execStr   
467B   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
4682                          ;*Macro unroll:  expect "-1 1 +",0
4682   E1                     POP   HL   
4683   E5                     PUSH   HL   
4684   11 00 00               LD   DE,0   
4687   B7                     OR   A   
4688   ED 52                  SBC   HL,DE   
468A   7D                     LD   A,L   
468B   B4                     OR   H   
468C   28 51                  JR   Z,expectM_0_2273S43   
468E   CD E3 08               CALL   printStr   
4691   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
469E   CD E3 08               CALL   printStr   
46A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46B0   21 00 00               LD   HL,0   
46B3   CD 31 08               CALL   prtdec   
46B6   CD E3 08               CALL   printStr   
46B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46C6   E1                     POP   hl   
46C7   E5                     PUSH   hl   
46C8   CD 31 08               CALL   prtdec   
46CB   E1                     POP   hl   
46CC   CD E3 08               CALL   printStr   
46CF   20 28 23 00            .CSTR   " (#"   
46D3   CD 79 08               CALL   prthex   
46D6   CD E3 08               CALL   printStr   
46D9   29 0D 0A 00            .CSTR   ")\r\n"   
46DD   76                     HALT      
46DE   00                     .CSTR      
46DF                EXPECTM_0_2273S43:      
46DF   E1                     POP   HL   
46E0                          ;*Macro unroll:  test "1 2 +", 3
46E0   31 80 18               LD   SP,STACK   
46E3   CD F7 08               CALL   init   
46E6   CD EA 08               CALL   execStr   
46E9   31 20 32 20 2B 00      .CSTR   "1 2 +"   
46EF                          ;*Macro unroll:  expect "1 2 +",3
46EF   E1                     POP   HL   
46F0   E5                     PUSH   HL   
46F1   11 03 00               LD   DE,3   
46F4   B7                     OR   A   
46F5   ED 52                  SBC   HL,DE   
46F7   7D                     LD   A,L   
46F8   B4                     OR   H   
46F9   28 50                  JR   Z,expectM_0_2274S43   
46FB   CD E3 08               CALL   printStr   
46FE   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
470A   CD E3 08               CALL   printStr   
470D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
471C   21 03 00               LD   HL,3   
471F   CD 31 08               CALL   prtdec   
4722   CD E3 08               CALL   printStr   
4725   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4732   E1                     POP   hl   
4733   E5                     PUSH   hl   
4734   CD 31 08               CALL   prtdec   
4737   E1                     POP   hl   
4738   CD E3 08               CALL   printStr   
473B   20 28 23 00            .CSTR   " (#"   
473F   CD 79 08               CALL   prthex   
4742   CD E3 08               CALL   printStr   
4745   29 0D 0A 00            .CSTR   ")\r\n"   
4749   76                     HALT      
474A   00                     .CSTR      
474B                EXPECTM_0_2274S43:      
474B   E1                     POP   HL   
474C                          ;*Macro unroll:  test "4 1 2 +", 3
474C   31 80 18               LD   SP,STACK   
474F   CD F7 08               CALL   init   
4752   CD EA 08               CALL   execStr   
4755   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
475D                          ;*Macro unroll:  expect "4 1 2 +",3
475D   E1                     POP   HL   
475E   E5                     PUSH   HL   
475F   11 03 00               LD   DE,3   
4762   B7                     OR   A   
4763   ED 52                  SBC   HL,DE   
4765   7D                     LD   A,L   
4766   B4                     OR   H   
4767   28 52                  JR   Z,expectM_0_2275S43   
4769   CD E3 08               CALL   printStr   
476C   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
477A   CD E3 08               CALL   printStr   
477D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
478C   21 03 00               LD   HL,3   
478F   CD 31 08               CALL   prtdec   
4792   CD E3 08               CALL   printStr   
4795   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47A2   E1                     POP   hl   
47A3   E5                     PUSH   hl   
47A4   CD 31 08               CALL   prtdec   
47A7   E1                     POP   hl   
47A8   CD E3 08               CALL   printStr   
47AB   20 28 23 00            .CSTR   " (#"   
47AF   CD 79 08               CALL   prthex   
47B2   CD E3 08               CALL   printStr   
47B5   29 0D 0A 00            .CSTR   ")\r\n"   
47B9   76                     HALT      
47BA   00                     .CSTR      
47BB                EXPECTM_0_2275S43:      
47BB   E1                     POP   HL   
47BC                          ;*Macro unroll:  test "1 2 +", 3
47BC   31 80 18               LD   SP,STACK   
47BF   CD F7 08               CALL   init   
47C2   CD EA 08               CALL   execStr   
47C5   31 20 32 20 2B 00      .CSTR   "1 2 +"   
47CB                          ;*Macro unroll:  expect "1 2 +",3
47CB   E1                     POP   HL   
47CC   E5                     PUSH   HL   
47CD   11 03 00               LD   DE,3   
47D0   B7                     OR   A   
47D1   ED 52                  SBC   HL,DE   
47D3   7D                     LD   A,L   
47D4   B4                     OR   H   
47D5   28 50                  JR   Z,expectM_0_2276S43   
47D7   CD E3 08               CALL   printStr   
47DA   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
47E6   CD E3 08               CALL   printStr   
47E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47F8   21 03 00               LD   HL,3   
47FB   CD 31 08               CALL   prtdec   
47FE   CD E3 08               CALL   printStr   
4801   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
480E   E1                     POP   hl   
480F   E5                     PUSH   hl   
4810   CD 31 08               CALL   prtdec   
4813   E1                     POP   hl   
4814   CD E3 08               CALL   printStr   
4817   20 28 23 00            .CSTR   " (#"   
481B   CD 79 08               CALL   prthex   
481E   CD E3 08               CALL   printStr   
4821   29 0D 0A 00            .CSTR   ")\r\n"   
4825   76                     HALT      
4826   00                     .CSTR      
4827                EXPECTM_0_2276S43:      
4827   E1                     POP   HL   
4828                          ;*Macro unroll:  test "123 456 +", 123+456
4828   31 80 18               LD   SP,STACK   
482B   CD F7 08               CALL   init   
482E   CD EA 08               CALL   execStr   
4831   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
483B                          ;*Macro unroll:  expect "123 456 +",123+456
483B   E1                     POP   HL   
483C   E5                     PUSH   HL   
483D   11 43 02               LD   DE,123+456   
4840   B7                     OR   A   
4841   ED 52                  SBC   HL,DE   
4843   7D                     LD   A,L   
4844   B4                     OR   H   
4845   28 54                  JR   Z,expectM_0_2277S43   
4847   CD E3 08               CALL   printStr   
484A   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
485A   CD E3 08               CALL   printStr   
485D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
486C   21 43 02               LD   HL,123+456   
486F   CD 31 08               CALL   prtdec   
4872   CD E3 08               CALL   printStr   
4875   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4882   E1                     POP   hl   
4883   E5                     PUSH   hl   
4884   CD 31 08               CALL   prtdec   
4887   E1                     POP   hl   
4888   CD E3 08               CALL   printStr   
488B   20 28 23 00            .CSTR   " (#"   
488F   CD 79 08               CALL   prthex   
4892   CD E3 08               CALL   printStr   
4895   29 0D 0A 00            .CSTR   ")\r\n"   
4899   76                     HALT      
489A   00                     .CSTR      
489B                EXPECTM_0_2277S43:      
489B   E1                     POP   HL   
489C                          ;*Macro unroll:  test "64 128 +", 64+128
489C   31 80 18               LD   SP,STACK   
489F   CD F7 08               CALL   init   
48A2   CD EA 08               CALL   execStr   
48A5   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
48AE                          ;*Macro unroll:  expect "64 128 +",64+128
48AE   E1                     POP   HL   
48AF   E5                     PUSH   HL   
48B0   11 C0 00               LD   DE,64+128   
48B3   B7                     OR   A   
48B4   ED 52                  SBC   HL,DE   
48B6   7D                     LD   A,L   
48B7   B4                     OR   H   
48B8   28 53                  JR   Z,expectM_0_2278S43   
48BA   CD E3 08               CALL   printStr   
48BD   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
48CC   CD E3 08               CALL   printStr   
48CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48DE   21 C0 00               LD   HL,64+128   
48E1   CD 31 08               CALL   prtdec   
48E4   CD E3 08               CALL   printStr   
48E7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48F4   E1                     POP   hl   
48F5   E5                     PUSH   hl   
48F6   CD 31 08               CALL   prtdec   
48F9   E1                     POP   hl   
48FA   CD E3 08               CALL   printStr   
48FD   20 28 23 00            .CSTR   " (#"   
4901   CD 79 08               CALL   prthex   
4904   CD E3 08               CALL   printStr   
4907   29 0D 0A 00            .CSTR   ")\r\n"   
490B   76                     HALT      
490C   00                     .CSTR      
490D                EXPECTM_0_2278S43:      
490D   E1                     POP   HL   
490E                          ;*Macro unroll:  test "-1 -1 -",0
490E   31 80 18               LD   SP,STACK   
4911   CD F7 08               CALL   init   
4914   CD EA 08               CALL   execStr   
4917   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
491F                          ;*Macro unroll:  expect "-1 -1 -",0
491F   E1                     POP   HL   
4920   E5                     PUSH   HL   
4921   11 00 00               LD   DE,0   
4924   B7                     OR   A   
4925   ED 52                  SBC   HL,DE   
4927   7D                     LD   A,L   
4928   B4                     OR   H   
4929   28 52                  JR   Z,expectM_0_2279S43   
492B   CD E3 08               CALL   printStr   
492E   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
493C   CD E3 08               CALL   printStr   
493F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
494E   21 00 00               LD   HL,0   
4951   CD 31 08               CALL   prtdec   
4954   CD E3 08               CALL   printStr   
4957   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4964   E1                     POP   hl   
4965   E5                     PUSH   hl   
4966   CD 31 08               CALL   prtdec   
4969   E1                     POP   hl   
496A   CD E3 08               CALL   printStr   
496D   20 28 23 00            .CSTR   " (#"   
4971   CD 79 08               CALL   prthex   
4974   CD E3 08               CALL   printStr   
4977   29 0D 0A 00            .CSTR   ")\r\n"   
497B   76                     HALT      
497C   00                     .CSTR      
497D                EXPECTM_0_2279S43:      
497D   E1                     POP   HL   
497E                          ;*Macro unroll:  test "5 3 -", 2
497E   31 80 18               LD   SP,STACK   
4981   CD F7 08               CALL   init   
4984   CD EA 08               CALL   execStr   
4987   35 20 33 20 2D 00      .CSTR   "5 3 -"   
498D                          ;*Macro unroll:  expect "5 3 -",2
498D   E1                     POP   HL   
498E   E5                     PUSH   HL   
498F   11 02 00               LD   DE,2   
4992   B7                     OR   A   
4993   ED 52                  SBC   HL,DE   
4995   7D                     LD   A,L   
4996   B4                     OR   H   
4997   28 50                  JR   Z,expectM_0_2280S43   
4999   CD E3 08               CALL   printStr   
499C   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
49A8   CD E3 08               CALL   printStr   
49AB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49BA   21 02 00               LD   HL,2   
49BD   CD 31 08               CALL   prtdec   
49C0   CD E3 08               CALL   printStr   
49C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49D0   E1                     POP   hl   
49D1   E5                     PUSH   hl   
49D2   CD 31 08               CALL   prtdec   
49D5   E1                     POP   hl   
49D6   CD E3 08               CALL   printStr   
49D9   20 28 23 00            .CSTR   " (#"   
49DD   CD 79 08               CALL   prthex   
49E0   CD E3 08               CALL   printStr   
49E3   29 0D 0A 00            .CSTR   ")\r\n"   
49E7   76                     HALT      
49E8   00                     .CSTR      
49E9                EXPECTM_0_2280S43:      
49E9   E1                     POP   HL   
49EA                          ;*Macro unroll:  test "3 5 &", 1
49EA   31 80 18               LD   SP,STACK   
49ED   CD F7 08               CALL   init   
49F0   CD EA 08               CALL   execStr   
49F3   33 20 35 20 26 00      .CSTR   "3 5 &"   
49F9                          ;*Macro unroll:  expect "3 5 &",1
49F9   E1                     POP   HL   
49FA   E5                     PUSH   HL   
49FB   11 01 00               LD   DE,1   
49FE   B7                     OR   A   
49FF   ED 52                  SBC   HL,DE   
4A01   7D                     LD   A,L   
4A02   B4                     OR   H   
4A03   28 50                  JR   Z,expectM_0_2281S43   
4A05   CD E3 08               CALL   printStr   
4A08   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
4A14   CD E3 08               CALL   printStr   
4A17   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A26   21 01 00               LD   HL,1   
4A29   CD 31 08               CALL   prtdec   
4A2C   CD E3 08               CALL   printStr   
4A2F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A3C   E1                     POP   hl   
4A3D   E5                     PUSH   hl   
4A3E   CD 31 08               CALL   prtdec   
4A41   E1                     POP   hl   
4A42   CD E3 08               CALL   printStr   
4A45   20 28 23 00            .CSTR   " (#"   
4A49   CD 79 08               CALL   prthex   
4A4C   CD E3 08               CALL   printStr   
4A4F   29 0D 0A 00            .CSTR   ")\r\n"   
4A53   76                     HALT      
4A54   00                     .CSTR      
4A55                EXPECTM_0_2281S43:      
4A55   E1                     POP   HL   
4A56                          ;*Macro unroll:  test "3 5 |", 7
4A56   31 80 18               LD   SP,STACK   
4A59   CD F7 08               CALL   init   
4A5C   CD EA 08               CALL   execStr   
4A5F   33 20 35 20 7C 00      .CSTR   "3 5 |"   
4A65                          ;*Macro unroll:  expect "3 5 |",7
4A65   E1                     POP   HL   
4A66   E5                     PUSH   HL   
4A67   11 07 00               LD   DE,7   
4A6A   B7                     OR   A   
4A6B   ED 52                  SBC   HL,DE   
4A6D   7D                     LD   A,L   
4A6E   B4                     OR   H   
4A6F   28 50                  JR   Z,expectM_0_2282S43   
4A71   CD E3 08               CALL   printStr   
4A74   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
4A80   CD E3 08               CALL   printStr   
4A83   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A92   21 07 00               LD   HL,7   
4A95   CD 31 08               CALL   prtdec   
4A98   CD E3 08               CALL   printStr   
4A9B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4AA8   E1                     POP   hl   
4AA9   E5                     PUSH   hl   
4AAA   CD 31 08               CALL   prtdec   
4AAD   E1                     POP   hl   
4AAE   CD E3 08               CALL   printStr   
4AB1   20 28 23 00            .CSTR   " (#"   
4AB5   CD 79 08               CALL   prthex   
4AB8   CD E3 08               CALL   printStr   
4ABB   29 0D 0A 00            .CSTR   ")\r\n"   
4ABF   76                     HALT      
4AC0   00                     .CSTR      
4AC1                EXPECTM_0_2282S43:      
4AC1   E1                     POP   HL   
4AC2                          ;*Macro unroll:  test "2 3 *", 6
4AC2   31 80 18               LD   SP,STACK   
4AC5   CD F7 08               CALL   init   
4AC8   CD EA 08               CALL   execStr   
4ACB   32 20 33 20 2A 00      .CSTR   "2 3 *"   
4AD1                          ;*Macro unroll:  expect "2 3 *",6
4AD1   E1                     POP   HL   
4AD2   E5                     PUSH   HL   
4AD3   11 06 00               LD   DE,6   
4AD6   B7                     OR   A   
4AD7   ED 52                  SBC   HL,DE   
4AD9   7D                     LD   A,L   
4ADA   B4                     OR   H   
4ADB   28 50                  JR   Z,expectM_0_2283S43   
4ADD   CD E3 08               CALL   printStr   
4AE0   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
4AEC   CD E3 08               CALL   printStr   
4AEF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4AFE   21 06 00               LD   HL,6   
4B01   CD 31 08               CALL   prtdec   
4B04   CD E3 08               CALL   printStr   
4B07   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B14   E1                     POP   hl   
4B15   E5                     PUSH   hl   
4B16   CD 31 08               CALL   prtdec   
4B19   E1                     POP   hl   
4B1A   CD E3 08               CALL   printStr   
4B1D   20 28 23 00            .CSTR   " (#"   
4B21   CD 79 08               CALL   prthex   
4B24   CD E3 08               CALL   printStr   
4B27   29 0D 0A 00            .CSTR   ")\r\n"   
4B2B   76                     HALT      
4B2C   00                     .CSTR      
4B2D                EXPECTM_0_2283S43:      
4B2D   E1                     POP   HL   
4B2E                          ;*Macro unroll:  test "1 2 3 + *", 5
4B2E   31 80 18               LD   SP,STACK   
4B31   CD F7 08               CALL   init   
4B34   CD EA 08               CALL   execStr   
4B37   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
4B41                          ;*Macro unroll:  expect "1 2 3 + *",5
4B41   E1                     POP   HL   
4B42   E5                     PUSH   HL   
4B43   11 05 00               LD   DE,5   
4B46   B7                     OR   A   
4B47   ED 52                  SBC   HL,DE   
4B49   7D                     LD   A,L   
4B4A   B4                     OR   H   
4B4B   28 54                  JR   Z,expectM_0_2284S43   
4B4D   CD E3 08               CALL   printStr   
4B50   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
4B60   CD E3 08               CALL   printStr   
4B63   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B72   21 05 00               LD   HL,5   
4B75   CD 31 08               CALL   prtdec   
4B78   CD E3 08               CALL   printStr   
4B7B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B88   E1                     POP   hl   
4B89   E5                     PUSH   hl   
4B8A   CD 31 08               CALL   prtdec   
4B8D   E1                     POP   hl   
4B8E   CD E3 08               CALL   printStr   
4B91   20 28 23 00            .CSTR   " (#"   
4B95   CD 79 08               CALL   prthex   
4B98   CD E3 08               CALL   printStr   
4B9B   29 0D 0A 00            .CSTR   ")\r\n"   
4B9F   76                     HALT      
4BA0   00                     .CSTR      
4BA1                EXPECTM_0_2284S43:      
4BA1   E1                     POP   HL   
4BA2                          ;*Macro unroll:  test "7 3 /", 2
4BA2   31 80 18               LD   SP,STACK   
4BA5   CD F7 08               CALL   init   
4BA8   CD EA 08               CALL   execStr   
4BAB   37 20 33 20 2F 00      .CSTR   "7 3 /"   
4BB1                          ;*Macro unroll:  expect "7 3 /",2
4BB1   E1                     POP   HL   
4BB2   E5                     PUSH   HL   
4BB3   11 02 00               LD   DE,2   
4BB6   B7                     OR   A   
4BB7   ED 52                  SBC   HL,DE   
4BB9   7D                     LD   A,L   
4BBA   B4                     OR   H   
4BBB   28 50                  JR   Z,expectM_0_2285S43   
4BBD   CD E3 08               CALL   printStr   
4BC0   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
4BCC   CD E3 08               CALL   printStr   
4BCF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BDE   21 02 00               LD   HL,2   
4BE1   CD 31 08               CALL   prtdec   
4BE4   CD E3 08               CALL   printStr   
4BE7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BF4   E1                     POP   hl   
4BF5   E5                     PUSH   hl   
4BF6   CD 31 08               CALL   prtdec   
4BF9   E1                     POP   hl   
4BFA   CD E3 08               CALL   printStr   
4BFD   20 28 23 00            .CSTR   " (#"   
4C01   CD 79 08               CALL   prthex   
4C04   CD E3 08               CALL   printStr   
4C07   29 0D 0A 00            .CSTR   ")\r\n"   
4C0B   76                     HALT      
4C0C   00                     .CSTR      
4C0D                EXPECTM_0_2285S43:      
4C0D   E1                     POP   HL   
4C0E                          ;*Macro unroll:  test "7 3 / _", 1
4C0E   31 80 18               LD   SP,STACK   
4C11   CD F7 08               CALL   init   
4C14   CD EA 08               CALL   execStr   
4C17   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
4C1F                          ;*Macro unroll:  expect "7 3 / _",1
4C1F   E1                     POP   HL   
4C20   E5                     PUSH   HL   
4C21   11 01 00               LD   DE,1   
4C24   B7                     OR   A   
4C25   ED 52                  SBC   HL,DE   
4C27   7D                     LD   A,L   
4C28   B4                     OR   H   
4C29   28 52                  JR   Z,expectM_0_2286S43   
4C2B   CD E3 08               CALL   printStr   
4C2E   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
4C3C   CD E3 08               CALL   printStr   
4C3F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C4E   21 01 00               LD   HL,1   
4C51   CD 31 08               CALL   prtdec   
4C54   CD E3 08               CALL   printStr   
4C57   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C64   E1                     POP   hl   
4C65   E5                     PUSH   hl   
4C66   CD 31 08               CALL   prtdec   
4C69   E1                     POP   hl   
4C6A   CD E3 08               CALL   printStr   
4C6D   20 28 23 00            .CSTR   " (#"   
4C71   CD 79 08               CALL   prthex   
4C74   CD E3 08               CALL   printStr   
4C77   29 0D 0A 00            .CSTR   ")\r\n"   
4C7B   76                     HALT      
4C7C   00                     .CSTR      
4C7D                EXPECTM_0_2286S43:      
4C7D   E1                     POP   HL   
4C7E                          ;*Macro unroll:  test "2 3 ==", FALSE
4C7E   31 80 18               LD   SP,STACK   
4C81   CD F7 08               CALL   init   
4C84   CD EA 08               CALL   execStr   
4C87   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
4C8E                          ;*Macro unroll:  expect "2 3 ==",FALSE
4C8E   E1                     POP   HL   
4C8F   E5                     PUSH   HL   
4C90   11 00 00               LD   DE,FALSE   
4C93   B7                     OR   A   
4C94   ED 52                  SBC   HL,DE   
4C96   7D                     LD   A,L   
4C97   B4                     OR   H   
4C98   28 51                  JR   Z,expectM_0_2287S43   
4C9A   CD E3 08               CALL   printStr   
4C9D   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
4CAA   CD E3 08               CALL   printStr   
4CAD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CBC   21 00 00               LD   HL,FALSE   
4CBF   CD 31 08               CALL   prtdec   
4CC2   CD E3 08               CALL   printStr   
4CC5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4CD2   E1                     POP   hl   
4CD3   E5                     PUSH   hl   
4CD4   CD 31 08               CALL   prtdec   
4CD7   E1                     POP   hl   
4CD8   CD E3 08               CALL   printStr   
4CDB   20 28 23 00            .CSTR   " (#"   
4CDF   CD 79 08               CALL   prthex   
4CE2   CD E3 08               CALL   printStr   
4CE5   29 0D 0A 00            .CSTR   ")\r\n"   
4CE9   76                     HALT      
4CEA   00                     .CSTR      
4CEB                EXPECTM_0_2287S43:      
4CEB   E1                     POP   HL   
4CEC                          ;*Macro unroll:  test "3 3 ==", TRUE
4CEC   31 80 18               LD   SP,STACK   
4CEF   CD F7 08               CALL   init   
4CF2   CD EA 08               CALL   execStr   
4CF5   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
4CFC                          ;*Macro unroll:  expect "3 3 ==",TRUE
4CFC   E1                     POP   HL   
4CFD   E5                     PUSH   HL   
4CFE   11 FF FF               LD   DE,TRUE   
4D01   B7                     OR   A   
4D02   ED 52                  SBC   HL,DE   
4D04   7D                     LD   A,L   
4D05   B4                     OR   H   
4D06   28 51                  JR   Z,expectM_0_2288S43   
4D08   CD E3 08               CALL   printStr   
4D0B   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
4D18   CD E3 08               CALL   printStr   
4D1B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D2A   21 FF FF               LD   HL,TRUE   
4D2D   CD 31 08               CALL   prtdec   
4D30   CD E3 08               CALL   printStr   
4D33   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D40   E1                     POP   hl   
4D41   E5                     PUSH   hl   
4D42   CD 31 08               CALL   prtdec   
4D45   E1                     POP   hl   
4D46   CD E3 08               CALL   printStr   
4D49   20 28 23 00            .CSTR   " (#"   
4D4D   CD 79 08               CALL   prthex   
4D50   CD E3 08               CALL   printStr   
4D53   29 0D 0A 00            .CSTR   ")\r\n"   
4D57   76                     HALT      
4D58   00                     .CSTR      
4D59                EXPECTM_0_2288S43:      
4D59   E1                     POP   HL   
4D5A                          ;*Macro unroll:  test "1 2 <", TRUE
4D5A   31 80 18               LD   SP,STACK   
4D5D   CD F7 08               CALL   init   
4D60   CD EA 08               CALL   execStr   
4D63   31 20 32 20 3C 00      .CSTR   "1 2 <"   
4D69                          ;*Macro unroll:  expect "1 2 <",TRUE
4D69   E1                     POP   HL   
4D6A   E5                     PUSH   HL   
4D6B   11 FF FF               LD   DE,TRUE   
4D6E   B7                     OR   A   
4D6F   ED 52                  SBC   HL,DE   
4D71   7D                     LD   A,L   
4D72   B4                     OR   H   
4D73   28 50                  JR   Z,expectM_0_2289S43   
4D75   CD E3 08               CALL   printStr   
4D78   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
4D84   CD E3 08               CALL   printStr   
4D87   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D96   21 FF FF               LD   HL,TRUE   
4D99   CD 31 08               CALL   prtdec   
4D9C   CD E3 08               CALL   printStr   
4D9F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DAC   E1                     POP   hl   
4DAD   E5                     PUSH   hl   
4DAE   CD 31 08               CALL   prtdec   
4DB1   E1                     POP   hl   
4DB2   CD E3 08               CALL   printStr   
4DB5   20 28 23 00            .CSTR   " (#"   
4DB9   CD 79 08               CALL   prthex   
4DBC   CD E3 08               CALL   printStr   
4DBF   29 0D 0A 00            .CSTR   ")\r\n"   
4DC3   76                     HALT      
4DC4   00                     .CSTR      
4DC5                EXPECTM_0_2289S43:      
4DC5   E1                     POP   HL   
4DC6                          ;*Macro unroll:  test "2 1 <", FALSE
4DC6   31 80 18               LD   SP,STACK   
4DC9   CD F7 08               CALL   init   
4DCC   CD EA 08               CALL   execStr   
4DCF   32 20 31 20 3C 00      .CSTR   "2 1 <"   
4DD5                          ;*Macro unroll:  expect "2 1 <",FALSE
4DD5   E1                     POP   HL   
4DD6   E5                     PUSH   HL   
4DD7   11 00 00               LD   DE,FALSE   
4DDA   B7                     OR   A   
4DDB   ED 52                  SBC   HL,DE   
4DDD   7D                     LD   A,L   
4DDE   B4                     OR   H   
4DDF   28 50                  JR   Z,expectM_0_2290S43   
4DE1   CD E3 08               CALL   printStr   
4DE4   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
4DF0   CD E3 08               CALL   printStr   
4DF3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E02   21 00 00               LD   HL,FALSE   
4E05   CD 31 08               CALL   prtdec   
4E08   CD E3 08               CALL   printStr   
4E0B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E18   E1                     POP   hl   
4E19   E5                     PUSH   hl   
4E1A   CD 31 08               CALL   prtdec   
4E1D   E1                     POP   hl   
4E1E   CD E3 08               CALL   printStr   
4E21   20 28 23 00            .CSTR   " (#"   
4E25   CD 79 08               CALL   prthex   
4E28   CD E3 08               CALL   printStr   
4E2B   29 0D 0A 00            .CSTR   ")\r\n"   
4E2F   76                     HALT      
4E30   00                     .CSTR      
4E31                EXPECTM_0_2290S43:      
4E31   E1                     POP   HL   
4E32                          ;*Macro unroll:  test "2 3 <", TRUE
4E32   31 80 18               LD   SP,STACK   
4E35   CD F7 08               CALL   init   
4E38   CD EA 08               CALL   execStr   
4E3B   32 20 33 20 3C 00      .CSTR   "2 3 <"   
4E41                          ;*Macro unroll:  expect "2 3 <",TRUE
4E41   E1                     POP   HL   
4E42   E5                     PUSH   HL   
4E43   11 FF FF               LD   DE,TRUE   
4E46   B7                     OR   A   
4E47   ED 52                  SBC   HL,DE   
4E49   7D                     LD   A,L   
4E4A   B4                     OR   H   
4E4B   28 50                  JR   Z,expectM_0_2291S43   
4E4D   CD E3 08               CALL   printStr   
4E50   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
4E5C   CD E3 08               CALL   printStr   
4E5F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E6E   21 FF FF               LD   HL,TRUE   
4E71   CD 31 08               CALL   prtdec   
4E74   CD E3 08               CALL   printStr   
4E77   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E84   E1                     POP   hl   
4E85   E5                     PUSH   hl   
4E86   CD 31 08               CALL   prtdec   
4E89   E1                     POP   hl   
4E8A   CD E3 08               CALL   printStr   
4E8D   20 28 23 00            .CSTR   " (#"   
4E91   CD 79 08               CALL   prthex   
4E94   CD E3 08               CALL   printStr   
4E97   29 0D 0A 00            .CSTR   ")\r\n"   
4E9B   76                     HALT      
4E9C   00                     .CSTR      
4E9D                EXPECTM_0_2291S43:      
4E9D   E1                     POP   HL   
4E9E                          ;*Macro unroll:  test "3 3 <", FALSE
4E9E   31 80 18               LD   SP,STACK   
4EA1   CD F7 08               CALL   init   
4EA4   CD EA 08               CALL   execStr   
4EA7   33 20 33 20 3C 00      .CSTR   "3 3 <"   
4EAD                          ;*Macro unroll:  expect "3 3 <",FALSE
4EAD   E1                     POP   HL   
4EAE   E5                     PUSH   HL   
4EAF   11 00 00               LD   DE,FALSE   
4EB2   B7                     OR   A   
4EB3   ED 52                  SBC   HL,DE   
4EB5   7D                     LD   A,L   
4EB6   B4                     OR   H   
4EB7   28 50                  JR   Z,expectM_0_2292S43   
4EB9   CD E3 08               CALL   printStr   
4EBC   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
4EC8   CD E3 08               CALL   printStr   
4ECB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4EDA   21 00 00               LD   HL,FALSE   
4EDD   CD 31 08               CALL   prtdec   
4EE0   CD E3 08               CALL   printStr   
4EE3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4EF0   E1                     POP   hl   
4EF1   E5                     PUSH   hl   
4EF2   CD 31 08               CALL   prtdec   
4EF5   E1                     POP   hl   
4EF6   CD E3 08               CALL   printStr   
4EF9   20 28 23 00            .CSTR   " (#"   
4EFD   CD 79 08               CALL   prthex   
4F00   CD E3 08               CALL   printStr   
4F03   29 0D 0A 00            .CSTR   ")\r\n"   
4F07   76                     HALT      
4F08   00                     .CSTR      
4F09                EXPECTM_0_2292S43:      
4F09   E1                     POP   HL   
4F0A                          ;*Macro unroll:  test "1 2 >", FALSE
4F0A   31 80 18               LD   SP,STACK   
4F0D   CD F7 08               CALL   init   
4F10   CD EA 08               CALL   execStr   
4F13   31 20 32 20 3E 00      .CSTR   "1 2 >"   
4F19                          ;*Macro unroll:  expect "1 2 >",FALSE
4F19   E1                     POP   HL   
4F1A   E5                     PUSH   HL   
4F1B   11 00 00               LD   DE,FALSE   
4F1E   B7                     OR   A   
4F1F   ED 52                  SBC   HL,DE   
4F21   7D                     LD   A,L   
4F22   B4                     OR   H   
4F23   28 50                  JR   Z,expectM_0_2293S43   
4F25   CD E3 08               CALL   printStr   
4F28   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
4F34   CD E3 08               CALL   printStr   
4F37   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F46   21 00 00               LD   HL,FALSE   
4F49   CD 31 08               CALL   prtdec   
4F4C   CD E3 08               CALL   printStr   
4F4F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F5C   E1                     POP   hl   
4F5D   E5                     PUSH   hl   
4F5E   CD 31 08               CALL   prtdec   
4F61   E1                     POP   hl   
4F62   CD E3 08               CALL   printStr   
4F65   20 28 23 00            .CSTR   " (#"   
4F69   CD 79 08               CALL   prthex   
4F6C   CD E3 08               CALL   printStr   
4F6F   29 0D 0A 00            .CSTR   ")\r\n"   
4F73   76                     HALT      
4F74   00                     .CSTR      
4F75                EXPECTM_0_2293S43:      
4F75   E1                     POP   HL   
4F76                          ;*Macro unroll:  test "2 1 >", TRUE
4F76   31 80 18               LD   SP,STACK   
4F79   CD F7 08               CALL   init   
4F7C   CD EA 08               CALL   execStr   
4F7F   32 20 31 20 3E 00      .CSTR   "2 1 >"   
4F85                          ;*Macro unroll:  expect "2 1 >",TRUE
4F85   E1                     POP   HL   
4F86   E5                     PUSH   HL   
4F87   11 FF FF               LD   DE,TRUE   
4F8A   B7                     OR   A   
4F8B   ED 52                  SBC   HL,DE   
4F8D   7D                     LD   A,L   
4F8E   B4                     OR   H   
4F8F   28 50                  JR   Z,expectM_0_2294S43   
4F91   CD E3 08               CALL   printStr   
4F94   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
4FA0   CD E3 08               CALL   printStr   
4FA3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4FB2   21 FF FF               LD   HL,TRUE   
4FB5   CD 31 08               CALL   prtdec   
4FB8   CD E3 08               CALL   printStr   
4FBB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4FC8   E1                     POP   hl   
4FC9   E5                     PUSH   hl   
4FCA   CD 31 08               CALL   prtdec   
4FCD   E1                     POP   hl   
4FCE   CD E3 08               CALL   printStr   
4FD1   20 28 23 00            .CSTR   " (#"   
4FD5   CD 79 08               CALL   prthex   
4FD8   CD E3 08               CALL   printStr   
4FDB   29 0D 0A 00            .CSTR   ")\r\n"   
4FDF   76                     HALT      
4FE0   00                     .CSTR      
4FE1                EXPECTM_0_2294S43:      
4FE1   E1                     POP   HL   
4FE2                          ;*Macro unroll:  test "3 3 >", FALSE
4FE2   31 80 18               LD   SP,STACK   
4FE5   CD F7 08               CALL   init   
4FE8   CD EA 08               CALL   execStr   
4FEB   33 20 33 20 3E 00      .CSTR   "3 3 >"   
4FF1                          ;*Macro unroll:  expect "3 3 >",FALSE
4FF1   E1                     POP   HL   
4FF2   E5                     PUSH   HL   
4FF3   11 00 00               LD   DE,FALSE   
4FF6   B7                     OR   A   
4FF7   ED 52                  SBC   HL,DE   
4FF9   7D                     LD   A,L   
4FFA   B4                     OR   H   
4FFB   28 50                  JR   Z,expectM_0_2295S43   
4FFD   CD E3 08               CALL   printStr   
5000   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
500C   CD E3 08               CALL   printStr   
500F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
501E   21 00 00               LD   HL,FALSE   
5021   CD 31 08               CALL   prtdec   
5024   CD E3 08               CALL   printStr   
5027   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5034   E1                     POP   hl   
5035   E5                     PUSH   hl   
5036   CD 31 08               CALL   prtdec   
5039   E1                     POP   hl   
503A   CD E3 08               CALL   printStr   
503D   20 28 23 00            .CSTR   " (#"   
5041   CD 79 08               CALL   prthex   
5044   CD E3 08               CALL   printStr   
5047   29 0D 0A 00            .CSTR   ")\r\n"   
504B   76                     HALT      
504C   00                     .CSTR      
504D                EXPECTM_0_2295S43:      
504D   E1                     POP   HL   
504E                          ;*Macro unroll:  test "4 3 >", TRUE
504E   31 80 18               LD   SP,STACK   
5051   CD F7 08               CALL   init   
5054   CD EA 08               CALL   execStr   
5057   34 20 33 20 3E 00      .CSTR   "4 3 >"   
505D                          ;*Macro unroll:  expect "4 3 >",TRUE
505D   E1                     POP   HL   
505E   E5                     PUSH   HL   
505F   11 FF FF               LD   DE,TRUE   
5062   B7                     OR   A   
5063   ED 52                  SBC   HL,DE   
5065   7D                     LD   A,L   
5066   B4                     OR   H   
5067   28 50                  JR   Z,expectM_0_2296S43   
5069   CD E3 08               CALL   printStr   
506C   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
5078   CD E3 08               CALL   printStr   
507B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
508A   21 FF FF               LD   HL,TRUE   
508D   CD 31 08               CALL   prtdec   
5090   CD E3 08               CALL   printStr   
5093   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
50A0   E1                     POP   hl   
50A1   E5                     PUSH   hl   
50A2   CD 31 08               CALL   prtdec   
50A5   E1                     POP   hl   
50A6   CD E3 08               CALL   printStr   
50A9   20 28 23 00            .CSTR   " (#"   
50AD   CD 79 08               CALL   prthex   
50B0   CD E3 08               CALL   printStr   
50B3   29 0D 0A 00            .CSTR   ")\r\n"   
50B7   76                     HALT      
50B8   00                     .CSTR      
50B9                EXPECTM_0_2296S43:      
50B9   E1                     POP   HL   
50BA                          ;*Macro unroll:  test "2 2 <=", TRUE
50BA   31 80 18               LD   SP,STACK   
50BD   CD F7 08               CALL   init   
50C0   CD EA 08               CALL   execStr   
50C3   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
50CA                          ;*Macro unroll:  expect "2 2 <=",TRUE
50CA   E1                     POP   HL   
50CB   E5                     PUSH   HL   
50CC   11 FF FF               LD   DE,TRUE   
50CF   B7                     OR   A   
50D0   ED 52                  SBC   HL,DE   
50D2   7D                     LD   A,L   
50D3   B4                     OR   H   
50D4   28 51                  JR   Z,expectM_0_2297S43   
50D6   CD E3 08               CALL   printStr   
50D9   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
50E6   CD E3 08               CALL   printStr   
50E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
50F8   21 FF FF               LD   HL,TRUE   
50FB   CD 31 08               CALL   prtdec   
50FE   CD E3 08               CALL   printStr   
5101   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
510E   E1                     POP   hl   
510F   E5                     PUSH   hl   
5110   CD 31 08               CALL   prtdec   
5113   E1                     POP   hl   
5114   CD E3 08               CALL   printStr   
5117   20 28 23 00            .CSTR   " (#"   
511B   CD 79 08               CALL   prthex   
511E   CD E3 08               CALL   printStr   
5121   29 0D 0A 00            .CSTR   ")\r\n"   
5125   76                     HALT      
5126   00                     .CSTR      
5127                EXPECTM_0_2297S43:      
5127   E1                     POP   HL   
5128                          ;*Macro unroll:  test "2 2 >=", TRUE
5128   31 80 18               LD   SP,STACK   
512B   CD F7 08               CALL   init   
512E   CD EA 08               CALL   execStr   
5131   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
5138                          ;*Macro unroll:  expect "2 2 >=",TRUE
5138   E1                     POP   HL   
5139   E5                     PUSH   HL   
513A   11 FF FF               LD   DE,TRUE   
513D   B7                     OR   A   
513E   ED 52                  SBC   HL,DE   
5140   7D                     LD   A,L   
5141   B4                     OR   H   
5142   28 51                  JR   Z,expectM_0_2298S43   
5144   CD E3 08               CALL   printStr   
5147   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
5154   CD E3 08               CALL   printStr   
5157   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5166   21 FF FF               LD   HL,TRUE   
5169   CD 31 08               CALL   prtdec   
516C   CD E3 08               CALL   printStr   
516F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
517C   E1                     POP   hl   
517D   E5                     PUSH   hl   
517E   CD 31 08               CALL   prtdec   
5181   E1                     POP   hl   
5182   CD E3 08               CALL   printStr   
5185   20 28 23 00            .CSTR   " (#"   
5189   CD 79 08               CALL   prthex   
518C   CD E3 08               CALL   printStr   
518F   29 0D 0A 00            .CSTR   ")\r\n"   
5193   76                     HALT      
5194   00                     .CSTR      
5195                EXPECTM_0_2298S43:      
5195   E1                     POP   HL   
5196                          ;*Macro unroll:  test "3 1 <<", 6
5196   31 80 18               LD   SP,STACK   
5199   CD F7 08               CALL   init   
519C   CD EA 08               CALL   execStr   
519F   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
51A6                          ;*Macro unroll:  expect "3 1 <<",6
51A6   E1                     POP   HL   
51A7   E5                     PUSH   HL   
51A8   11 06 00               LD   DE,6   
51AB   B7                     OR   A   
51AC   ED 52                  SBC   HL,DE   
51AE   7D                     LD   A,L   
51AF   B4                     OR   H   
51B0   28 51                  JR   Z,expectM_0_2299S43   
51B2   CD E3 08               CALL   printStr   
51B5   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
51C2   CD E3 08               CALL   printStr   
51C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
51D4   21 06 00               LD   HL,6   
51D7   CD 31 08               CALL   prtdec   
51DA   CD E3 08               CALL   printStr   
51DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
51EA   E1                     POP   hl   
51EB   E5                     PUSH   hl   
51EC   CD 31 08               CALL   prtdec   
51EF   E1                     POP   hl   
51F0   CD E3 08               CALL   printStr   
51F3   20 28 23 00            .CSTR   " (#"   
51F7   CD 79 08               CALL   prthex   
51FA   CD E3 08               CALL   printStr   
51FD   29 0D 0A 00            .CSTR   ")\r\n"   
5201   76                     HALT      
5202   00                     .CSTR      
5203                EXPECTM_0_2299S43:      
5203   E1                     POP   HL   
5204                          ;*Macro unroll:  test "10 1 >>", 5
5204   31 80 18               LD   SP,STACK   
5207   CD F7 08               CALL   init   
520A   CD EA 08               CALL   execStr   
520D   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
5215                          ;*Macro unroll:  expect "10 1 >>",5
5215   E1                     POP   HL   
5216   E5                     PUSH   HL   
5217   11 05 00               LD   DE,5   
521A   B7                     OR   A   
521B   ED 52                  SBC   HL,DE   
521D   7D                     LD   A,L   
521E   B4                     OR   H   
521F   28 52                  JR   Z,expectM_0_2300S43   
5221   CD E3 08               CALL   printStr   
5224   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
5232   CD E3 08               CALL   printStr   
5235   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5244   21 05 00               LD   HL,5   
5247   CD 31 08               CALL   prtdec   
524A   CD E3 08               CALL   printStr   
524D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
525A   E1                     POP   hl   
525B   E5                     PUSH   hl   
525C   CD 31 08               CALL   prtdec   
525F   E1                     POP   hl   
5260   CD E3 08               CALL   printStr   
5263   20 28 23 00            .CSTR   " (#"   
5267   CD 79 08               CALL   prthex   
526A   CD E3 08               CALL   printStr   
526D   29 0D 0A 00            .CSTR   ")\r\n"   
5271   76                     HALT      
5272   00                     .CSTR      
5273                EXPECTM_0_2300S43:      
5273   E1                     POP   HL   
5274                          ;*Macro unroll:  test "1 x = x", 1
5274   31 80 18               LD   SP,STACK   
5277   CD F7 08               CALL   init   
527A   CD EA 08               CALL   execStr   
527D   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
5285                          ;*Macro unroll:  expect "1 x = x",1
5285   E1                     POP   HL   
5286   E5                     PUSH   HL   
5287   11 01 00               LD   DE,1   
528A   B7                     OR   A   
528B   ED 52                  SBC   HL,DE   
528D   7D                     LD   A,L   
528E   B4                     OR   H   
528F   28 52                  JR   Z,expectM_0_2301S43   
5291   CD E3 08               CALL   printStr   
5294   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
52A2   CD E3 08               CALL   printStr   
52A5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
52B4   21 01 00               LD   HL,1   
52B7   CD 31 08               CALL   prtdec   
52BA   CD E3 08               CALL   printStr   
52BD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
52CA   E1                     POP   hl   
52CB   E5                     PUSH   hl   
52CC   CD 31 08               CALL   prtdec   
52CF   E1                     POP   hl   
52D0   CD E3 08               CALL   printStr   
52D3   20 28 23 00            .CSTR   " (#"   
52D7   CD 79 08               CALL   prthex   
52DA   CD E3 08               CALL   printStr   
52DD   29 0D 0A 00            .CSTR   ")\r\n"   
52E1   76                     HALT      
52E2   00                     .CSTR      
52E3                EXPECTM_0_2301S43:      
52E3   E1                     POP   HL   
52E4                          ;*Macro unroll:  test "{1}:", 1
52E4   31 80 18               LD   SP,STACK   
52E7   CD F7 08               CALL   init   
52EA   CD EA 08               CALL   execStr   
52ED   7B 31 7D 3A 00         .CSTR   "{1}:"   
52F2                          ;*Macro unroll:  expect "{1}:",1
52F2   E1                     POP   HL   
52F3   E5                     PUSH   HL   
52F4   11 01 00               LD   DE,1   
52F7   B7                     OR   A   
52F8   ED 52                  SBC   HL,DE   
52FA   7D                     LD   A,L   
52FB   B4                     OR   H   
52FC   28 4F                  JR   Z,expectM_0_2302S43   
52FE   CD E3 08               CALL   printStr   
5301   43 6F 64 65 3A 20 7B 31 7D 3A 00 .CSTR   "Code: ","{1}:"   
530C   CD E3 08               CALL   printStr   
530F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
531E   21 01 00               LD   HL,1   
5321   CD 31 08               CALL   prtdec   
5324   CD E3 08               CALL   printStr   
5327   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5334   E1                     POP   hl   
5335   E5                     PUSH   hl   
5336   CD 31 08               CALL   prtdec   
5339   E1                     POP   hl   
533A   CD E3 08               CALL   printStr   
533D   20 28 23 00            .CSTR   " (#"   
5341   CD 79 08               CALL   prthex   
5344   CD E3 08               CALL   printStr   
5347   29 0D 0A 00            .CSTR   ")\r\n"   
534B   76                     HALT      
534C   00                     .CSTR      
534D                EXPECTM_0_2302S43:      
534D   E1                     POP   HL   
534E                          ;*Macro unroll:  test "{{1}:}:", 1
534E   31 80 18               LD   SP,STACK   
5351   CD F7 08               CALL   init   
5354   CD EA 08               CALL   execStr   
5357   7B 7B 31 7D 3A 7D 3A 00 .CSTR   "{{1}:}:"   
535F                          ;*Macro unroll:  expect "{{1}:}:",1
535F   E1                     POP   HL   
5360   E5                     PUSH   HL   
5361   11 01 00               LD   DE,1   
5364   B7                     OR   A   
5365   ED 52                  SBC   HL,DE   
5367   7D                     LD   A,L   
5368   B4                     OR   H   
5369   28 52                  JR   Z,expectM_0_2303S43   
536B   CD E3 08               CALL   printStr   
536E   43 6F 64 65 3A 20 7B 7B 31 7D 3A 7D 3A 00 .CSTR   "Code: ","{{1}:}:"   
537C   CD E3 08               CALL   printStr   
537F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
538E   21 01 00               LD   HL,1   
5391   CD 31 08               CALL   prtdec   
5394   CD E3 08               CALL   printStr   
5397   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
53A4   E1                     POP   hl   
53A5   E5                     PUSH   hl   
53A6   CD 31 08               CALL   prtdec   
53A9   E1                     POP   hl   
53AA   CD E3 08               CALL   printStr   
53AD   20 28 23 00            .CSTR   " (#"   
53B1   CD 79 08               CALL   prthex   
53B4   CD E3 08               CALL   printStr   
53B7   29 0D 0A 00            .CSTR   ")\r\n"   
53BB   76                     HALT      
53BC   00                     .CSTR      
53BD                EXPECTM_0_2303S43:      
53BD   E1                     POP   HL   
53BE                          ;*Macro unroll:  test "{{{1}:}:}:", 1
53BE   31 80 18               LD   SP,STACK   
53C1   CD F7 08               CALL   init   
53C4   CD EA 08               CALL   execStr   
53C7   7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "{{{1}:}:}:"   
53D2                          ;*Macro unroll:  expect "{{{1}:}:}:",1
53D2   E1                     POP   HL   
53D3   E5                     PUSH   HL   
53D4   11 01 00               LD   DE,1   
53D7   B7                     OR   A   
53D8   ED 52                  SBC   HL,DE   
53DA   7D                     LD   A,L   
53DB   B4                     OR   H   
53DC   28 55                  JR   Z,expectM_0_2304S43   
53DE   CD E3 08               CALL   printStr   
53E1   43 6F 64 65 3A 20 7B 7B 7B 31 7D 3A 7D 3A 7D 3A 00 .CSTR   "Code: ","{{{1}:}:}:"   
53F2   CD E3 08               CALL   printStr   
53F5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5404   21 01 00               LD   HL,1   
5407   CD 31 08               CALL   prtdec   
540A   CD E3 08               CALL   printStr   
540D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
541A   E1                     POP   hl   
541B   E5                     PUSH   hl   
541C   CD 31 08               CALL   prtdec   
541F   E1                     POP   hl   
5420   CD E3 08               CALL   printStr   
5423   20 28 23 00            .CSTR   " (#"   
5427   CD 79 08               CALL   prthex   
542A   CD E3 08               CALL   printStr   
542D   29 0D 0A 00            .CSTR   ")\r\n"   
5431   76                     HALT      
5432   00                     .CSTR      
5433                EXPECTM_0_2304S43:      
5433   E1                     POP   HL   
5434                          ;*Macro unroll:  test "5 \\F {10} ?", 5
5434   31 80 18               LD   SP,STACK   
5437   CD F7 08               CALL   init   
543A   CD EA 08               CALL   execStr   
543D   35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "5 \\F {10} ?"   
5449                          ;*Macro unroll:  expect "5 \\F {10} ?",5
5449   E1                     POP   HL   
544A   E5                     PUSH   HL   
544B   11 05 00               LD   DE,5   
544E   B7                     OR   A   
544F   ED 52                  SBC   HL,DE   
5451   7D                     LD   A,L   
5452   B4                     OR   H   
5453   28 56                  JR   Z,expectM_0_2305S43   
5455   CD E3 08               CALL   printStr   
5458   43 6F 64 65 3A 20 35 20 5C 46 20 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 \\F {10} ?"   
546A   CD E3 08               CALL   printStr   
546D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
547C   21 05 00               LD   HL,5   
547F   CD 31 08               CALL   prtdec   
5482   CD E3 08               CALL   printStr   
5485   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5492   E1                     POP   hl   
5493   E5                     PUSH   hl   
5494   CD 31 08               CALL   prtdec   
5497   E1                     POP   hl   
5498   CD E3 08               CALL   printStr   
549B   20 28 23 00            .CSTR   " (#"   
549F   CD 79 08               CALL   prthex   
54A2   CD E3 08               CALL   printStr   
54A5   29 0D 0A 00            .CSTR   ")\r\n"   
54A9   76                     HALT      
54AA   00                     .CSTR      
54AB                EXPECTM_0_2305S43:      
54AB   E1                     POP   HL   
54AC                          ;*Macro unroll:  test "5 \\T {10} ? +", 15
54AC   31 80 18               LD   SP,STACK   
54AF   CD F7 08               CALL   init   
54B2   CD EA 08               CALL   execStr   
54B5   35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 \\T {10} ? +"   
54C3                          ;*Macro unroll:  expect "5 \\T {10} ? +",15
54C3   E1                     POP   HL   
54C4   E5                     PUSH   HL   
54C5   11 0F 00               LD   DE,15   
54C8   B7                     OR   A   
54C9   ED 52                  SBC   HL,DE   
54CB   7D                     LD   A,L   
54CC   B4                     OR   H   
54CD   28 58                  JR   Z,expectM_0_2306S43   
54CF   CD E3 08               CALL   printStr   
54D2   43 6F 64 65 3A 20 35 20 5C 54 20 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 \\T {10} ? +"   
54E6   CD E3 08               CALL   printStr   
54E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
54F8   21 0F 00               LD   HL,15   
54FB   CD 31 08               CALL   prtdec   
54FE   CD E3 08               CALL   printStr   
5501   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
550E   E1                     POP   hl   
550F   E5                     PUSH   hl   
5510   CD 31 08               CALL   prtdec   
5513   E1                     POP   hl   
5514   CD E3 08               CALL   printStr   
5517   20 28 23 00            .CSTR   " (#"   
551B   CD 79 08               CALL   prthex   
551E   CD E3 08               CALL   printStr   
5521   29 0D 0A 00            .CSTR   ")\r\n"   
5525   76                     HALT      
5526   00                     .CSTR      
5527                EXPECTM_0_2306S43:      
5527   E1                     POP   HL   
5528                          ;*Macro unroll:  test "1 \\F {10} {20} ?? +", 21
5528   31 80 18               LD   SP,STACK   
552B   CD F7 08               CALL   init   
552E   CD EA 08               CALL   execStr   
5531   31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\F {10} {20} ?? +"   
5545                          ;*Macro unroll:  expect "1 \\F {10} {20} ?? +",21
5545   E1                     POP   HL   
5546   E5                     PUSH   HL   
5547   11 15 00               LD   DE,21   
554A   B7                     OR   A   
554B   ED 52                  SBC   HL,DE   
554D   7D                     LD   A,L   
554E   B4                     OR   H   
554F   28 5E                  JR   Z,expectM_0_2307S43   
5551   CD E3 08               CALL   printStr   
5554   43 6F 64 65 3A 20 31 20 5C 46 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\F {10} {20} ?? +"   
556E   CD E3 08               CALL   printStr   
5571   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5580   21 15 00               LD   HL,21   
5583   CD 31 08               CALL   prtdec   
5586   CD E3 08               CALL   printStr   
5589   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5596   E1                     POP   hl   
5597   E5                     PUSH   hl   
5598   CD 31 08               CALL   prtdec   
559B   E1                     POP   hl   
559C   CD E3 08               CALL   printStr   
559F   20 28 23 00            .CSTR   " (#"   
55A3   CD 79 08               CALL   prthex   
55A6   CD E3 08               CALL   printStr   
55A9   29 0D 0A 00            .CSTR   ")\r\n"   
55AD   76                     HALT      
55AE   00                     .CSTR      
55AF                EXPECTM_0_2307S43:      
55AF   E1                     POP   HL   
55B0                          ;*Macro unroll:  test "1 \\T {10} {20} ?? +", 11
55B0   31 80 18               LD   SP,STACK   
55B3   CD F7 08               CALL   init   
55B6   CD EA 08               CALL   execStr   
55B9   31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 \\T {10} {20} ?? +"   
55CD                          ;*Macro unroll:  expect "1 \\T {10} {20} ?? +",11
55CD   E1                     POP   HL   
55CE   E5                     PUSH   HL   
55CF   11 0B 00               LD   DE,11   
55D2   B7                     OR   A   
55D3   ED 52                  SBC   HL,DE   
55D5   7D                     LD   A,L   
55D6   B4                     OR   H   
55D7   28 5E                  JR   Z,expectM_0_2308S43   
55D9   CD E3 08               CALL   printStr   
55DC   43 6F 64 65 3A 20 31 20 5C 54 20 7B 31 30 7D 20 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 \\T {10} {20} ?? +"   
55F6   CD E3 08               CALL   printStr   
55F9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5608   21 0B 00               LD   HL,11   
560B   CD 31 08               CALL   prtdec   
560E   CD E3 08               CALL   printStr   
5611   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
561E   E1                     POP   hl   
561F   E5                     PUSH   hl   
5620   CD 31 08               CALL   prtdec   
5623   E1                     POP   hl   
5624   CD E3 08               CALL   printStr   
5627   20 28 23 00            .CSTR   " (#"   
562B   CD 79 08               CALL   prthex   
562E   CD E3 08               CALL   printStr   
5631   29 0D 0A 00            .CSTR   ")\r\n"   
5635   76                     HALT      
5636   00                     .CSTR      
5637                EXPECTM_0_2308S43:      
5637   E1                     POP   HL   
5638                          ;*Macro unroll:  test "() -2%", $0000
5638   31 80 18               LD   SP,STACK   
563B   CD F7 08               CALL   init   
563E   CD EA 08               CALL   execStr   
5641   28 29 20 2D 32 25 00   .CSTR   "() -2%"   
5648                          ;*Macro unroll:  expect "() -2%",$0000
5648   E1                     POP   HL   
5649   E5                     PUSH   HL   
564A   11 00 00               LD   DE,$0000   
564D   B7                     OR   A   
564E   ED 52                  SBC   HL,DE   
5650   7D                     LD   A,L   
5651   B4                     OR   H   
5652   28 51                  JR   Z,expectM_0_2309S43   
5654   CD E3 08               CALL   printStr   
5657   43 6F 64 65 3A 20 28 29 20 2D 32 25 00 .CSTR   "Code: ","() -2%"   
5664   CD E3 08               CALL   printStr   
5667   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5676   21 00 00               LD   HL,$0000   
5679   CD 31 08               CALL   prtdec   
567C   CD E3 08               CALL   printStr   
567F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
568C   E1                     POP   hl   
568D   E5                     PUSH   hl   
568E   CD 31 08               CALL   prtdec   
5691   E1                     POP   hl   
5692   CD E3 08               CALL   printStr   
5695   20 28 23 00            .CSTR   " (#"   
5699   CD 79 08               CALL   prthex   
569C   CD E3 08               CALL   printStr   
569F   29 0D 0A 00            .CSTR   ")\r\n"   
56A3   76                     HALT      
56A4   00                     .CSTR      
56A5                EXPECTM_0_2309S43:      
56A5   E1                     POP   HL   
56A6                          ;*Macro unroll:  test "(a) -1%", $0001
56A6   31 80 18               LD   SP,STACK   
56A9   CD F7 08               CALL   init   
56AC   CD EA 08               CALL   execStr   
56AF   28 61 29 20 2D 31 25 00 .CSTR   "(a) -1%"   
56B7                          ;*Macro unroll:  expect "(a) -1%",$0001
56B7   E1                     POP   HL   
56B8   E5                     PUSH   HL   
56B9   11 01 00               LD   DE,$0001   
56BC   B7                     OR   A   
56BD   ED 52                  SBC   HL,DE   
56BF   7D                     LD   A,L   
56C0   B4                     OR   H   
56C1   28 52                  JR   Z,expectM_0_2310S43   
56C3   CD E3 08               CALL   printStr   
56C6   43 6F 64 65 3A 20 28 61 29 20 2D 31 25 00 .CSTR   "Code: ","(a) -1%"   
56D4   CD E3 08               CALL   printStr   
56D7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
56E6   21 01 00               LD   HL,$0001   
56E9   CD 31 08               CALL   prtdec   
56EC   CD E3 08               CALL   printStr   
56EF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
56FC   E1                     POP   hl   
56FD   E5                     PUSH   hl   
56FE   CD 31 08               CALL   prtdec   
5701   E1                     POP   hl   
5702   CD E3 08               CALL   printStr   
5705   20 28 23 00            .CSTR   " (#"   
5709   CD 79 08               CALL   prthex   
570C   CD E3 08               CALL   printStr   
570F   29 0D 0A 00            .CSTR   ")\r\n"   
5713   76                     HALT      
5714   00                     .CSTR      
5715                EXPECTM_0_2310S43:      
5715   E1                     POP   HL   
5716                          ;*Macro unroll:  test "(a:) -1%", $0001
5716   31 80 18               LD   SP,STACK   
5719   CD F7 08               CALL   init   
571C   CD EA 08               CALL   execStr   
571F   28 61 3A 29 20 2D 31 25 00 .CSTR   "(a:) -1%"   
5728                          ;*Macro unroll:  expect "(a:) -1%",$0001
5728   E1                     POP   HL   
5729   E5                     PUSH   HL   
572A   11 01 00               LD   DE,$0001   
572D   B7                     OR   A   
572E   ED 52                  SBC   HL,DE   
5730   7D                     LD   A,L   
5731   B4                     OR   H   
5732   28 53                  JR   Z,expectM_0_2311S43   
5734   CD E3 08               CALL   printStr   
5737   43 6F 64 65 3A 20 28 61 3A 29 20 2D 31 25 00 .CSTR   "Code: ","(a:) -1%"   
5746   CD E3 08               CALL   printStr   
5749   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5758   21 01 00               LD   HL,$0001   
575B   CD 31 08               CALL   prtdec   
575E   CD E3 08               CALL   printStr   
5761   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
576E   E1                     POP   hl   
576F   E5                     PUSH   hl   
5770   CD 31 08               CALL   prtdec   
5773   E1                     POP   hl   
5774   CD E3 08               CALL   printStr   
5777   20 28 23 00            .CSTR   " (#"   
577B   CD 79 08               CALL   prthex   
577E   CD E3 08               CALL   printStr   
5781   29 0D 0A 00            .CSTR   ")\r\n"   
5785   76                     HALT      
5786   00                     .CSTR      
5787                EXPECTM_0_2311S43:      
5787   E1                     POP   HL   
5788                          ;*Macro unroll:  test "(a:b) -1%", $0102
5788   31 80 18               LD   SP,STACK   
578B   CD F7 08               CALL   init   
578E   CD EA 08               CALL   execStr   
5791   28 61 3A 62 29 20 2D 31 25 00 .CSTR   "(a:b) -1%"   
579B                          ;*Macro unroll:  expect "(a:b) -1%",$0102
579B   E1                     POP   HL   
579C   E5                     PUSH   HL   
579D   11 02 01               LD   DE,$0102   
57A0   B7                     OR   A   
57A1   ED 52                  SBC   HL,DE   
57A3   7D                     LD   A,L   
57A4   B4                     OR   H   
57A5   28 54                  JR   Z,expectM_0_2312S43   
57A7   CD E3 08               CALL   printStr   
57AA   43 6F 64 65 3A 20 28 61 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(a:b) -1%"   
57BA   CD E3 08               CALL   printStr   
57BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
57CC   21 02 01               LD   HL,$0102   
57CF   CD 31 08               CALL   prtdec   
57D2   CD E3 08               CALL   printStr   
57D5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
57E2   E1                     POP   hl   
57E3   E5                     PUSH   hl   
57E4   CD 31 08               CALL   prtdec   
57E7   E1                     POP   hl   
57E8   CD E3 08               CALL   printStr   
57EB   20 28 23 00            .CSTR   " (#"   
57EF   CD 79 08               CALL   prthex   
57F2   CD E3 08               CALL   printStr   
57F5   29 0D 0A 00            .CSTR   ")\r\n"   
57F9   76                     HALT      
57FA   00                     .CSTR      
57FB                EXPECTM_0_2312S43:      
57FB   E1                     POP   HL   
57FC                          ;*Macro unroll:  test "(:b) -1%", $0101
57FC   31 80 18               LD   SP,STACK   
57FF   CD F7 08               CALL   init   
5802   CD EA 08               CALL   execStr   
5805   28 3A 62 29 20 2D 31 25 00 .CSTR   "(:b) -1%"   
580E                          ;*Macro unroll:  expect "(:b) -1%",$0101
580E   E1                     POP   HL   
580F   E5                     PUSH   HL   
5810   11 01 01               LD   DE,$0101   
5813   B7                     OR   A   
5814   ED 52                  SBC   HL,DE   
5816   7D                     LD   A,L   
5817   B4                     OR   H   
5818   28 53                  JR   Z,expectM_0_2313S43   
581A   CD E3 08               CALL   printStr   
581D   43 6F 64 65 3A 20 28 3A 62 29 20 2D 31 25 00 .CSTR   "Code: ","(:b) -1%"   
582C   CD E3 08               CALL   printStr   
582F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
583E   21 01 01               LD   HL,$0101   
5841   CD 31 08               CALL   prtdec   
5844   CD E3 08               CALL   printStr   
5847   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5854   E1                     POP   hl   
5855   E5                     PUSH   hl   
5856   CD 31 08               CALL   prtdec   
5859   E1                     POP   hl   
585A   CD E3 08               CALL   printStr   
585D   20 28 23 00            .CSTR   " (#"   
5861   CD 79 08               CALL   prthex   
5864   CD E3 08               CALL   printStr   
5867   29 0D 0A 00            .CSTR   ")\r\n"   
586B   76                     HALT      
586C   00                     .CSTR      
586D                EXPECTM_0_2313S43:      
586D   E1                     POP   HL   
586E                          ;*Macro unroll:  test "() {2} \\f:", 2
586E   31 80 18               LD   SP,STACK   
5871   CD F7 08               CALL   init   
5874   CD EA 08               CALL   execStr   
5877   28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "() {2} \\f:"   
5882                          ;*Macro unroll:  expect "() {2} \\f:",2
5882   E1                     POP   HL   
5883   E5                     PUSH   HL   
5884   11 02 00               LD   DE,2   
5887   B7                     OR   A   
5888   ED 52                  SBC   HL,DE   
588A   7D                     LD   A,L   
588B   B4                     OR   H   
588C   28 55                  JR   Z,expectM_0_2314S43   
588E   CD E3 08               CALL   printStr   
5891   43 6F 64 65 3A 20 28 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","() {2} \\f:"   
58A2   CD E3 08               CALL   printStr   
58A5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
58B4   21 02 00               LD   HL,2   
58B7   CD 31 08               CALL   prtdec   
58BA   CD E3 08               CALL   printStr   
58BD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
58CA   E1                     POP   hl   
58CB   E5                     PUSH   hl   
58CC   CD 31 08               CALL   prtdec   
58CF   E1                     POP   hl   
58D0   CD E3 08               CALL   printStr   
58D3   20 28 23 00            .CSTR   " (#"   
58D7   CD 79 08               CALL   prthex   
58DA   CD E3 08               CALL   printStr   
58DD   29 0D 0A 00            .CSTR   ")\r\n"   
58E1   76                     HALT      
58E2   00                     .CSTR      
58E3                EXPECTM_0_2314S43:      
58E3   E1                     POP   HL   
58E4                          ;*Macro unroll:  test "(a) {2} \\f:", 2
58E4   31 80 18               LD   SP,STACK   
58E7   CD F7 08               CALL   init   
58EA   CD EA 08               CALL   execStr   
58ED   28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "(a) {2} \\f:"   
58F9                          ;*Macro unroll:  expect "(a) {2} \\f:",2
58F9   E1                     POP   HL   
58FA   E5                     PUSH   HL   
58FB   11 02 00               LD   DE,2   
58FE   B7                     OR   A   
58FF   ED 52                  SBC   HL,DE   
5901   7D                     LD   A,L   
5902   B4                     OR   H   
5903   28 56                  JR   Z,expectM_0_2315S43   
5905   CD E3 08               CALL   printStr   
5908   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {2} \\f:"   
591A   CD E3 08               CALL   printStr   
591D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
592C   21 02 00               LD   HL,2   
592F   CD 31 08               CALL   prtdec   
5932   CD E3 08               CALL   printStr   
5935   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5942   E1                     POP   hl   
5943   E5                     PUSH   hl   
5944   CD 31 08               CALL   prtdec   
5947   E1                     POP   hl   
5948   CD E3 08               CALL   printStr   
594B   20 28 23 00            .CSTR   " (#"   
594F   CD 79 08               CALL   prthex   
5952   CD E3 08               CALL   printStr   
5955   29 0D 0A 00            .CSTR   ")\r\n"   
5959   76                     HALT      
595A   00                     .CSTR      
595B                EXPECTM_0_2315S43:      
595B   E1                     POP   HL   
595C                          ;*Macro unroll:  test "5 (a) {$a} \\f:", 5
595C   31 80 18               LD   SP,STACK   
595F   CD F7 08               CALL   init   
5962   CD EA 08               CALL   execStr   
5965   35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a) {$a} \\f:"   
5974                          ;*Macro unroll:  expect "5 (a) {$a} \\f:",5
5974   E1                     POP   HL   
5975   E5                     PUSH   HL   
5976   11 05 00               LD   DE,5   
5979   B7                     OR   A   
597A   ED 52                  SBC   HL,DE   
597C   7D                     LD   A,L   
597D   B4                     OR   H   
597E   28 59                  JR   Z,expectM_0_2316S43   
5980   CD E3 08               CALL   printStr   
5983   43 6F 64 65 3A 20 35 20 28 61 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a) {$a} \\f:"   
5998   CD E3 08               CALL   printStr   
599B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
59AA   21 05 00               LD   HL,5   
59AD   CD 31 08               CALL   prtdec   
59B0   CD E3 08               CALL   printStr   
59B3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
59C0   E1                     POP   hl   
59C1   E5                     PUSH   hl   
59C2   CD 31 08               CALL   prtdec   
59C5   E1                     POP   hl   
59C6   CD E3 08               CALL   printStr   
59C9   20 28 23 00            .CSTR   " (#"   
59CD   CD 79 08               CALL   prthex   
59D0   CD E3 08               CALL   printStr   
59D3   29 0D 0A 00            .CSTR   ")\r\n"   
59D7   76                     HALT      
59D8   00                     .CSTR      
59D9                EXPECTM_0_2316S43:      
59D9   E1                     POP   HL   
59DA                          ;*Macro unroll:  test "5 (a:b) {$a} \\f:", 5
59DA   31 80 18               LD   SP,STACK   
59DD   CD F7 08               CALL   init   
59E0   CD EA 08               CALL   execStr   
59E3   35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "5 (a:b) {$a} \\f:"   
59F4                          ;*Macro unroll:  expect "5 (a:b) {$a} \\f:",5
59F4   E1                     POP   HL   
59F5   E5                     PUSH   HL   
59F6   11 05 00               LD   DE,5   
59F9   B7                     OR   A   
59FA   ED 52                  SBC   HL,DE   
59FC   7D                     LD   A,L   
59FD   B4                     OR   H   
59FE   28 5B                  JR   Z,expectM_0_2317S43   
5A00   CD E3 08               CALL   printStr   
5A03   43 6F 64 65 3A 20 35 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 3A 00 .CSTR   "Code: ","5 (a:b) {$a} \\f:"   
5A1A   CD E3 08               CALL   printStr   
5A1D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5A2C   21 05 00               LD   HL,5   
5A2F   CD 31 08               CALL   prtdec   
5A32   CD E3 08               CALL   printStr   
5A35   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5A42   E1                     POP   hl   
5A43   E5                     PUSH   hl   
5A44   CD 31 08               CALL   prtdec   
5A47   E1                     POP   hl   
5A48   CD E3 08               CALL   printStr   
5A4B   20 28 23 00            .CSTR   " (#"   
5A4F   CD 79 08               CALL   prthex   
5A52   CD E3 08               CALL   printStr   
5A55   29 0D 0A 00            .CSTR   ")\r\n"   
5A59   76                     HALT      
5A5A   00                     .CSTR      
5A5B                EXPECTM_0_2317S43:      
5A5B   E1                     POP   HL   
5A5C                          ;*Macro unroll:  test "(a) {{2}:} \\f:", 2
5A5C   31 80 18               LD   SP,STACK   
5A5F   CD F7 08               CALL   init   
5A62   CD EA 08               CALL   execStr   
5A65   28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "(a) {{2}:} \\f:"   
5A74                          ;*Macro unroll:  expect "(a) {{2}:} \\f:",2
5A74   E1                     POP   HL   
5A75   E5                     PUSH   HL   
5A76   11 02 00               LD   DE,2   
5A79   B7                     OR   A   
5A7A   ED 52                  SBC   HL,DE   
5A7C   7D                     LD   A,L   
5A7D   B4                     OR   H   
5A7E   28 59                  JR   Z,expectM_0_2318S43   
5A80   CD E3 08               CALL   printStr   
5A83   43 6F 64 65 3A 20 28 61 29 20 7B 7B 32 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","(a) {{2}:} \\f:"   
5A98   CD E3 08               CALL   printStr   
5A9B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5AAA   21 02 00               LD   HL,2   
5AAD   CD 31 08               CALL   prtdec   
5AB0   CD E3 08               CALL   printStr   
5AB3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5AC0   E1                     POP   hl   
5AC1   E5                     PUSH   hl   
5AC2   CD 31 08               CALL   prtdec   
5AC5   E1                     POP   hl   
5AC6   CD E3 08               CALL   printStr   
5AC9   20 28 23 00            .CSTR   " (#"   
5ACD   CD 79 08               CALL   prthex   
5AD0   CD E3 08               CALL   printStr   
5AD3   29 0D 0A 00            .CSTR   ")\r\n"   
5AD7   76                     HALT      
5AD8   00                     .CSTR      
5AD9                EXPECTM_0_2318S43:      
5AD9   E1                     POP   HL   
5ADA                          ;*Macro unroll:  test "1 5 (a) {{$a}:} \\f:", 5
5ADA   31 80 18               LD   SP,STACK   
5ADD   CD F7 08               CALL   init   
5AE0   CD EA 08               CALL   execStr   
5AE3   31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a}:} \\f:"   
5AF7                          ;*Macro unroll:  expect "1 5 (a) {{$a}:} \\f:",5
5AF7   E1                     POP   HL   
5AF8   E5                     PUSH   HL   
5AF9   11 05 00               LD   DE,5   
5AFC   B7                     OR   A   
5AFD   ED 52                  SBC   HL,DE   
5AFF   7D                     LD   A,L   
5B00   B4                     OR   H   
5B01   28 5E                  JR   Z,expectM_0_2319S43   
5B03   CD E3 08               CALL   printStr   
5B06   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a}:} \\f:"   
5B20   CD E3 08               CALL   printStr   
5B23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5B32   21 05 00               LD   HL,5   
5B35   CD 31 08               CALL   prtdec   
5B38   CD E3 08               CALL   printStr   
5B3B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5B48   E1                     POP   hl   
5B49   E5                     PUSH   hl   
5B4A   CD 31 08               CALL   prtdec   
5B4D   E1                     POP   hl   
5B4E   CD E3 08               CALL   printStr   
5B51   20 28 23 00            .CSTR   " (#"   
5B55   CD 79 08               CALL   prthex   
5B58   CD E3 08               CALL   printStr   
5B5B   29 0D 0A 00            .CSTR   ")\r\n"   
5B5F   76                     HALT      
5B60   00                     .CSTR      
5B61                EXPECTM_0_2319S43:      
5B61   E1                     POP   HL   
5B62                          ;*Macro unroll:  test "1 5 (ab) {{$a}:} \\f:", 1
5B62   31 80 18               LD   SP,STACK   
5B65   CD F7 08               CALL   init   
5B68   CD EA 08               CALL   execStr   
5B6B   31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a}:} \\f:"   
5B80                          ;*Macro unroll:  expect "1 5 (ab) {{$a}:} \\f:",1
5B80   E1                     POP   HL   
5B81   E5                     PUSH   HL   
5B82   11 01 00               LD   DE,1   
5B85   B7                     OR   A   
5B86   ED 52                  SBC   HL,DE   
5B88   7D                     LD   A,L   
5B89   B4                     OR   H   
5B8A   28 5F                  JR   Z,expectM_0_2320S43   
5B8C   CD E3 08               CALL   printStr   
5B8F   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a}:} \\f:"   
5BAA   CD E3 08               CALL   printStr   
5BAD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5BBC   21 01 00               LD   HL,1   
5BBF   CD 31 08               CALL   prtdec   
5BC2   CD E3 08               CALL   printStr   
5BC5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5BD2   E1                     POP   hl   
5BD3   E5                     PUSH   hl   
5BD4   CD 31 08               CALL   prtdec   
5BD7   E1                     POP   hl   
5BD8   CD E3 08               CALL   printStr   
5BDB   20 28 23 00            .CSTR   " (#"   
5BDF   CD 79 08               CALL   prthex   
5BE2   CD E3 08               CALL   printStr   
5BE5   29 0D 0A 00            .CSTR   ")\r\n"   
5BE9   76                     HALT      
5BEA   00                     .CSTR      
5BEB                EXPECTM_0_2320S43:      
5BEB   E1                     POP   HL   
5BEC                          ;*Macro unroll:  test "1 5 (a) {{$a 2 +}:} \\f:", 7
5BEC   31 80 18               LD   SP,STACK   
5BEF   CD F7 08               CALL   init   
5BF2   CD EA 08               CALL   execStr   
5BF5   31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (a) {{$a 2 +}:} \\f:"   
5C0D                          ;*Macro unroll:  expect "1 5 (a) {{$a 2 +}:} \\f:",7
5C0D   E1                     POP   HL   
5C0E   E5                     PUSH   HL   
5C0F   11 07 00               LD   DE,7   
5C12   B7                     OR   A   
5C13   ED 52                  SBC   HL,DE   
5C15   7D                     LD   A,L   
5C16   B4                     OR   H   
5C17   28 62                  JR   Z,expectM_0_2321S43   
5C19   CD E3 08               CALL   printStr   
5C1C   43 6F 64 65 3A 20 31 20 35 20 28 61 29 20 7B 7B 24 61 20 32 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (a) {{$a 2 +}:} \\f:"   
5C3A   CD E3 08               CALL   printStr   
5C3D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5C4C   21 07 00               LD   HL,7   
5C4F   CD 31 08               CALL   prtdec   
5C52   CD E3 08               CALL   printStr   
5C55   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5C62   E1                     POP   hl   
5C63   E5                     PUSH   hl   
5C64   CD 31 08               CALL   prtdec   
5C67   E1                     POP   hl   
5C68   CD E3 08               CALL   printStr   
5C6B   20 28 23 00            .CSTR   " (#"   
5C6F   CD 79 08               CALL   prthex   
5C72   CD E3 08               CALL   printStr   
5C75   29 0D 0A 00            .CSTR   ")\r\n"   
5C79   76                     HALT      
5C7A   00                     .CSTR      
5C7B                EXPECTM_0_2321S43:      
5C7B   E1                     POP   HL   
5C7C                          ;*Macro unroll:  test "1 5 (ab) {{$a $b +}:} \\f:", 6
5C7C   31 80 18               LD   SP,STACK   
5C7F   CD F7 08               CALL   init   
5C82   CD EA 08               CALL   execStr   
5C85   31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "1 5 (ab) {{$a $b +}:} \\f:"   
5C9F                          ;*Macro unroll:  expect "1 5 (ab) {{$a $b +}:} \\f:",6
5C9F   E1                     POP   HL   
5CA0   E5                     PUSH   HL   
5CA1   11 06 00               LD   DE,6   
5CA4   B7                     OR   A   
5CA5   ED 52                  SBC   HL,DE   
5CA7   7D                     LD   A,L   
5CA8   B4                     OR   H   
5CA9   28 64                  JR   Z,expectM_0_2322S43   
5CAB   CD E3 08               CALL   printStr   
5CAE   43 6F 64 65 3A 20 31 20 35 20 28 61 62 29 20 7B 7B 24 61 20 24 62 20 2B 7D 3A 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 5 (ab) {{$a $b +}:} \\f:"   
5CCE   CD E3 08               CALL   printStr   
5CD1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5CE0   21 06 00               LD   HL,6   
5CE3   CD 31 08               CALL   prtdec   
5CE6   CD E3 08               CALL   printStr   
5CE9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5CF6   E1                     POP   hl   
5CF7   E5                     PUSH   hl   
5CF8   CD 31 08               CALL   prtdec   
5CFB   E1                     POP   hl   
5CFC   CD E3 08               CALL   printStr   
5CFF   20 28 23 00            .CSTR   " (#"   
5D03   CD 79 08               CALL   prthex   
5D06   CD E3 08               CALL   printStr   
5D09   29 0D 0A 00            .CSTR   ")\r\n"   
5D0D   76                     HALT      
5D0E   00                     .CSTR      
5D0F                EXPECTM_0_2322S43:      
5D0F   E1                     POP   HL   
5D10                          ;*Macro unroll:  test "(a) {2} \\f x= 1 x:", 2
5D10   31 80 18               LD   SP,STACK   
5D13   CD F7 08               CALL   init   
5D16   CD EA 08               CALL   execStr   
5D19   28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a) {2} \\f x= 1 x:"   
5D2C                          ;*Macro unroll:  expect "(a) {2} \\f x= 1 x:",2
5D2C   E1                     POP   HL   
5D2D   E5                     PUSH   HL   
5D2E   11 02 00               LD   DE,2   
5D31   B7                     OR   A   
5D32   ED 52                  SBC   HL,DE   
5D34   7D                     LD   A,L   
5D35   B4                     OR   H   
5D36   28 5D                  JR   Z,expectM_0_2323S43   
5D38   CD E3 08               CALL   printStr   
5D3B   43 6F 64 65 3A 20 28 61 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {2} \\f x= 1 x:"   
5D54   CD E3 08               CALL   printStr   
5D57   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5D66   21 02 00               LD   HL,2   
5D69   CD 31 08               CALL   prtdec   
5D6C   CD E3 08               CALL   printStr   
5D6F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5D7C   E1                     POP   hl   
5D7D   E5                     PUSH   hl   
5D7E   CD 31 08               CALL   prtdec   
5D81   E1                     POP   hl   
5D82   CD E3 08               CALL   printStr   
5D85   20 28 23 00            .CSTR   " (#"   
5D89   CD 79 08               CALL   prthex   
5D8C   CD E3 08               CALL   printStr   
5D8F   29 0D 0A 00            .CSTR   ")\r\n"   
5D93   76                     HALT      
5D94   00                     .CSTR      
5D95                EXPECTM_0_2323S43:      
5D95   E1                     POP   HL   
5D96                          ;*Macro unroll:  test "(a) {$a} \\f x= 0 1 x:", 1
5D96   31 80 18               LD   SP,STACK   
5D99   CD F7 08               CALL   init   
5D9C   CD EA 08               CALL   execStr   
5D9F   28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "(a) {$a} \\f x= 0 1 x:"   
5DB5                          ;*Macro unroll:  expect "(a) {$a} \\f x= 0 1 x:",1
5DB5   E1                     POP   HL   
5DB6   E5                     PUSH   HL   
5DB7   11 01 00               LD   DE,1   
5DBA   B7                     OR   A   
5DBB   ED 52                  SBC   HL,DE   
5DBD   7D                     LD   A,L   
5DBE   B4                     OR   H   
5DBF   28 60                  JR   Z,expectM_0_2324S43   
5DC1   CD E3 08               CALL   printStr   
5DC4   43 6F 64 65 3A 20 28 61 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 30 20 31 20 78 3A 00 .CSTR   "Code: ","(a) {$a} \\f x= 0 1 x:"   
5DE0   CD E3 08               CALL   printStr   
5DE3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5DF2   21 01 00               LD   HL,1   
5DF5   CD 31 08               CALL   prtdec   
5DF8   CD E3 08               CALL   printStr   
5DFB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5E08   E1                     POP   hl   
5E09   E5                     PUSH   hl   
5E0A   CD 31 08               CALL   prtdec   
5E0D   E1                     POP   hl   
5E0E   CD E3 08               CALL   printStr   
5E11   20 28 23 00            .CSTR   " (#"   
5E15   CD 79 08               CALL   prthex   
5E18   CD E3 08               CALL   printStr   
5E1B   29 0D 0A 00            .CSTR   ")\r\n"   
5E1F   76                     HALT      
5E20   00                     .CSTR      
5E21                EXPECTM_0_2324S43:      
5E21   E1                     POP   HL   
5E22                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
5E22   31 80 18               LD   SP,STACK   
5E25   CD F7 08               CALL   init   
5E28   CD EA 08               CALL   execStr   
5E2B   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
5E42                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
5E42   E1                     POP   HL   
5E43   E5                     PUSH   HL   
5E44   11 02 00               LD   DE,2   
5E47   B7                     OR   A   
5E48   ED 52                  SBC   HL,DE   
5E4A   7D                     LD   A,L   
5E4B   B4                     OR   H   
5E4C   28 61                  JR   Z,expectM_0_2325S43   
5E4E   CD E3 08               CALL   printStr   
5E51   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
5E6E   CD E3 08               CALL   printStr   
5E71   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5E80   21 02 00               LD   HL,2   
5E83   CD 31 08               CALL   prtdec   
5E86   CD E3 08               CALL   printStr   
5E89   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5E96   E1                     POP   hl   
5E97   E5                     PUSH   hl   
5E98   CD 31 08               CALL   prtdec   
5E9B   E1                     POP   hl   
5E9C   CD E3 08               CALL   printStr   
5E9F   20 28 23 00            .CSTR   " (#"   
5EA3   CD 79 08               CALL   prthex   
5EA6   CD E3 08               CALL   printStr   
5EA9   29 0D 0A 00            .CSTR   ")\r\n"   
5EAD   76                     HALT      
5EAE   00                     .CSTR      
5EAF                EXPECTM_0_2325S43:      
5EAF   E1                     POP   HL   
5EB0                          ;*Macro unroll:  test "(a:b) {$a} \\f x= 1 2 x:", 2
5EB0   31 80 18               LD   SP,STACK   
5EB3   CD F7 08               CALL   init   
5EB6   CD EA 08               CALL   execStr   
5EB9   28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(a:b) {$a} \\f x= 1 2 x:"   
5ED1                          ;*Macro unroll:  expect "(a:b) {$a} \\f x= 1 2 x:",2
5ED1   E1                     POP   HL   
5ED2   E5                     PUSH   HL   
5ED3   11 02 00               LD   DE,2   
5ED6   B7                     OR   A   
5ED7   ED 52                  SBC   HL,DE   
5ED9   7D                     LD   A,L   
5EDA   B4                     OR   H   
5EDB   28 62                  JR   Z,expectM_0_2326S43   
5EDD   CD E3 08               CALL   printStr   
5EE0   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a} \\f x= 1 2 x:"   
5EFE   CD E3 08               CALL   printStr   
5F01   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5F10   21 02 00               LD   HL,2   
5F13   CD 31 08               CALL   prtdec   
5F16   CD E3 08               CALL   printStr   
5F19   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5F26   E1                     POP   hl   
5F27   E5                     PUSH   hl   
5F28   CD 31 08               CALL   prtdec   
5F2B   E1                     POP   hl   
5F2C   CD E3 08               CALL   printStr   
5F2F   20 28 23 00            .CSTR   " (#"   
5F33   CD 79 08               CALL   prthex   
5F36   CD E3 08               CALL   printStr   
5F39   29 0D 0A 00            .CSTR   ")\r\n"   
5F3D   76                     HALT      
5F3E   00                     .CSTR      
5F3F                EXPECTM_0_2326S43:      
5F3F   E1                     POP   HL   
5F40                          ;*Macro unroll:  test "(ab) {$b} \\f x= 1 2 x:", 2
5F40   31 80 18               LD   SP,STACK   
5F43   CD F7 08               CALL   init   
5F46   CD EA 08               CALL   execStr   
5F49   28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "(ab) {$b} \\f x= 1 2 x:"   
5F60                          ;*Macro unroll:  expect "(ab) {$b} \\f x= 1 2 x:",2
5F60   E1                     POP   HL   
5F61   E5                     PUSH   HL   
5F62   11 02 00               LD   DE,2   
5F65   B7                     OR   A   
5F66   ED 52                  SBC   HL,DE   
5F68   7D                     LD   A,L   
5F69   B4                     OR   H   
5F6A   28 61                  JR   Z,expectM_0_2327S43   
5F6C   CD E3 08               CALL   printStr   
5F6F   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 7D 20 5C 66 20 78 3D 20 31 20 32 20 78 3A 00 .CSTR   "Code: ","(ab) {$b} \\f x= 1 2 x:"   
5F8C   CD E3 08               CALL   printStr   
5F8F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5F9E   21 02 00               LD   HL,2   
5FA1   CD 31 08               CALL   prtdec   
5FA4   CD E3 08               CALL   printStr   
5FA7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5FB4   E1                     POP   hl   
5FB5   E5                     PUSH   hl   
5FB6   CD 31 08               CALL   prtdec   
5FB9   E1                     POP   hl   
5FBA   CD E3 08               CALL   printStr   
5FBD   20 28 23 00            .CSTR   " (#"   
5FC1   CD 79 08               CALL   prthex   
5FC4   CD E3 08               CALL   printStr   
5FC7   29 0D 0A 00            .CSTR   ")\r\n"   
5FCB   76                     HALT      
5FCC   00                     .CSTR      
5FCD                EXPECTM_0_2327S43:      
5FCD   E1                     POP   HL   
5FCE                          ;*Macro unroll:  test "(ab) {$b $a} \\f x= 10 15 x: -", 5
5FCE   31 80 18               LD   SP,STACK   
5FD1   CD F7 08               CALL   init   
5FD4   CD EA 08               CALL   execStr   
5FD7   28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "(ab) {$b $a} \\f x= 10 15 x: -"   
5FF5                          ;*Macro unroll:  expect "(ab) {$b $a} \\f x= 10 15 x: -",5
5FF5   E1                     POP   HL   
5FF6   E5                     PUSH   HL   
5FF7   11 05 00               LD   DE,5   
5FFA   B7                     OR   A   
5FFB   ED 52                  SBC   HL,DE   
5FFD   7D                     LD   A,L   
5FFE   B4                     OR   H   
5FFF   28 68                  JR   Z,expectM_0_2328S43   
6001   CD E3 08               CALL   printStr   
6004   43 6F 64 65 3A 20 28 61 62 29 20 7B 24 62 20 24 61 7D 20 5C 66 20 78 3D 20 31 30 20 31 35 20 78 3A 20 2D 00 .CSTR   "Code: ","(ab) {$b $a} \\f x= 10 15 x: -"   
6028   CD E3 08               CALL   printStr   
602B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
603A   21 05 00               LD   HL,5   
603D   CD 31 08               CALL   prtdec   
6040   CD E3 08               CALL   printStr   
6043   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6050   E1                     POP   hl   
6051   E5                     PUSH   hl   
6052   CD 31 08               CALL   prtdec   
6055   E1                     POP   hl   
6056   CD E3 08               CALL   printStr   
6059   20 28 23 00            .CSTR   " (#"   
605D   CD 79 08               CALL   prthex   
6060   CD E3 08               CALL   printStr   
6063   29 0D 0A 00            .CSTR   ")\r\n"   
6067   76                     HALT      
6068   00                     .CSTR      
6069                EXPECTM_0_2328S43:      
6069   E1                     POP   HL   
606A                          ;*Macro unroll:  test "(a:b) {2} \\f x= 1 x:", 2
606A   31 80 18               LD   SP,STACK   
606D   CD F7 08               CALL   init   
6070   CD EA 08               CALL   execStr   
6073   28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "(a:b) {2} \\f x= 1 x:"   
6088                          ;*Macro unroll:  expect "(a:b) {2} \\f x= 1 x:",2
6088   E1                     POP   HL   
6089   E5                     PUSH   HL   
608A   11 02 00               LD   DE,2   
608D   B7                     OR   A   
608E   ED 52                  SBC   HL,DE   
6090   7D                     LD   A,L   
6091   B4                     OR   H   
6092   28 5F                  JR   Z,expectM_0_2329S43   
6094   CD E3 08               CALL   printStr   
6097   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 32 7D 20 5C 66 20 78 3D 20 31 20 78 3A 00 .CSTR   "Code: ","(a:b) {2} \\f x= 1 x:"   
60B2   CD E3 08               CALL   printStr   
60B5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
60C4   21 02 00               LD   HL,2   
60C7   CD 31 08               CALL   prtdec   
60CA   CD E3 08               CALL   printStr   
60CD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
60DA   E1                     POP   hl   
60DB   E5                     PUSH   hl   
60DC   CD 31 08               CALL   prtdec   
60DF   E1                     POP   hl   
60E0   CD E3 08               CALL   printStr   
60E3   20 28 23 00            .CSTR   " (#"   
60E7   CD 79 08               CALL   prthex   
60EA   CD E3 08               CALL   printStr   
60ED   29 0D 0A 00            .CSTR   ")\r\n"   
60F1   76                     HALT      
60F2   00                     .CSTR      
60F3                EXPECTM_0_2329S43:      
60F3   E1                     POP   HL   
60F4                          ;*Macro unroll:  test "(:b) {100 $b= $b} \\f x= x:", 100
60F4   31 80 18               LD   SP,STACK   
60F7   CD F7 08               CALL   init   
60FA   CD EA 08               CALL   execStr   
60FD   28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "(:b) {100 $b= $b} \\f x= x:"   
6118                          ;*Macro unroll:  expect "(:b) {100 $b= $b} \\f x= x:",100
6118   E1                     POP   HL   
6119   E5                     PUSH   HL   
611A   11 64 00               LD   DE,100   
611D   B7                     OR   A   
611E   ED 52                  SBC   HL,DE   
6120   7D                     LD   A,L   
6121   B4                     OR   H   
6122   28 65                  JR   Z,expectM_0_2330S43   
6124   CD E3 08               CALL   printStr   
6127   43 6F 64 65 3A 20 28 3A 62 29 20 7B 31 30 30 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 78 3A 00 .CSTR   "Code: ","(:b) {100 $b= $b} \\f x= x:"   
6148   CD E3 08               CALL   printStr   
614B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
615A   21 64 00               LD   HL,100   
615D   CD 31 08               CALL   prtdec   
6160   CD E3 08               CALL   printStr   
6163   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6170   E1                     POP   hl   
6171   E5                     PUSH   hl   
6172   CD 31 08               CALL   prtdec   
6175   E1                     POP   hl   
6176   CD E3 08               CALL   printStr   
6179   20 28 23 00            .CSTR   " (#"   
617D   CD 79 08               CALL   prthex   
6180   CD E3 08               CALL   printStr   
6183   29 0D 0A 00            .CSTR   ")\r\n"   
6187   76                     HALT      
6188   00                     .CSTR      
6189                EXPECTM_0_2330S43:      
6189   E1                     POP   HL   
618A                          ;*Macro unroll:  test "(a:b) {1 $b= $b} \\f x= 2 x:", 1
618A   31 80 18               LD   SP,STACK   
618D   CD F7 08               CALL   init   
6190   CD EA 08               CALL   execStr   
6193   28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {1 $b= $b} \\f x= 2 x:"   
61AF                          ;*Macro unroll:  expect "(a:b) {1 $b= $b} \\f x= 2 x:",1
61AF   E1                     POP   HL   
61B0   E5                     PUSH   HL   
61B1   11 01 00               LD   DE,1   
61B4   B7                     OR   A   
61B5   ED 52                  SBC   HL,DE   
61B7   7D                     LD   A,L   
61B8   B4                     OR   H   
61B9   28 66                  JR   Z,expectM_0_2331S43   
61BB   CD E3 08               CALL   printStr   
61BE   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 31 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {1 $b= $b} \\f x= 2 x:"   
61E0   CD E3 08               CALL   printStr   
61E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
61F2   21 01 00               LD   HL,1   
61F5   CD 31 08               CALL   prtdec   
61F8   CD E3 08               CALL   printStr   
61FB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6208   E1                     POP   hl   
6209   E5                     PUSH   hl   
620A   CD 31 08               CALL   prtdec   
620D   E1                     POP   hl   
620E   CD E3 08               CALL   printStr   
6211   20 28 23 00            .CSTR   " (#"   
6215   CD 79 08               CALL   prthex   
6218   CD E3 08               CALL   printStr   
621B   29 0D 0A 00            .CSTR   ")\r\n"   
621F   76                     HALT      
6220   00                     .CSTR      
6221                EXPECTM_0_2331S43:      
6221   E1                     POP   HL   
6222                          ;*Macro unroll:  test "(a:b) {$a $b= $b} \\f x= 2 x:", 2
6222   31 80 18               LD   SP,STACK   
6225   CD F7 08               CALL   init   
6228   CD EA 08               CALL   execStr   
622B   28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "(a:b) {$a $b= $b} \\f x= 2 x:"   
6248                          ;*Macro unroll:  expect "(a:b) {$a $b= $b} \\f x= 2 x:",2
6248   E1                     POP   HL   
6249   E5                     PUSH   HL   
624A   11 02 00               LD   DE,2   
624D   B7                     OR   A   
624E   ED 52                  SBC   HL,DE   
6250   7D                     LD   A,L   
6251   B4                     OR   H   
6252   28 67                  JR   Z,expectM_0_2332S43   
6254   CD E3 08               CALL   printStr   
6257   43 6F 64 65 3A 20 28 61 3A 62 29 20 7B 24 61 20 24 62 3D 20 24 62 7D 20 5C 66 20 78 3D 20 32 20 78 3A 00 .CSTR   "Code: ","(a:b) {$a $b= $b} \\f x= 2 x:"   
627A   CD E3 08               CALL   printStr   
627D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
628C   21 02 00               LD   HL,2   
628F   CD 31 08               CALL   prtdec   
6292   CD E3 08               CALL   printStr   
6295   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
62A2   E1                     POP   hl   
62A3   E5                     PUSH   hl   
62A4   CD 31 08               CALL   prtdec   
62A7   E1                     POP   hl   
62A8   CD E3 08               CALL   printStr   
62AB   20 28 23 00            .CSTR   " (#"   
62AF   CD 79 08               CALL   prthex   
62B2   CD E3 08               CALL   printStr   
62B5   29 0D 0A 00            .CSTR   ")\r\n"   
62B9   76                     HALT      
62BA   00                     .CSTR      
62BB                EXPECTM_0_2332S43:      
62BB   E1                     POP   HL   
62BC                          ;*Macro unroll:  test "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +", 11
62BC   31 80 18               LD   SP,STACK   
62BF   CD F7 08               CALL   init   
62C2   CD EA 08               CALL   execStr   
62C5   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
62EA                          ;*Macro unroll:  expect "1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +",11
62EA   E1                     POP   HL   
62EB   E5                     PUSH   HL   
62EC   11 0B 00               LD   DE,11   
62EF   B7                     OR   A   
62F0   ED 52                  SBC   HL,DE   
62F2   7D                     LD   A,L   
62F3   B4                     OR   H   
62F4   28 6F                  JR   Z,expectM_0_2333S43   
62F6   CD E3 08               CALL   printStr   
62F9   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 54 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\T {$a} {$b} ??} \\f: +"   
6324   CD E3 08               CALL   printStr   
6327   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6336   21 0B 00               LD   HL,11   
6339   CD 31 08               CALL   prtdec   
633C   CD E3 08               CALL   printStr   
633F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
634C   E1                     POP   hl   
634D   E5                     PUSH   hl   
634E   CD 31 08               CALL   prtdec   
6351   E1                     POP   hl   
6352   CD E3 08               CALL   printStr   
6355   20 28 23 00            .CSTR   " (#"   
6359   CD 79 08               CALL   prthex   
635C   CD E3 08               CALL   printStr   
635F   29 0D 0A 00            .CSTR   ")\r\n"   
6363   76                     HALT      
6364   00                     .CSTR      
6365                EXPECTM_0_2333S43:      
6365   E1                     POP   HL   
6366                          ;*Macro unroll:  test "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +", 21
6366   31 80 18               LD   SP,STACK   
6369   CD F7 08               CALL   init   
636C   CD EA 08               CALL   execStr   
636F   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
6394                          ;*Macro unroll:  expect "1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +",21
6394   E1                     POP   HL   
6395   E5                     PUSH   HL   
6396   11 15 00               LD   DE,21   
6399   B7                     OR   A   
639A   ED 52                  SBC   HL,DE   
639C   7D                     LD   A,L   
639D   B4                     OR   H   
639E   28 6F                  JR   Z,expectM_0_2334S43   
63A0   CD E3 08               CALL   printStr   
63A3   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 5C 46 20 7B 24 61 7D 20 7B 24 62 7D 20 3F 3F 7D 20 5C 66 3A 20 2B 00 .CSTR   "Code: ","1 10 20 (ab) {\\F {$a} {$b} ??} \\f: +"   
63CE   CD E3 08               CALL   printStr   
63D1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
63E0   21 15 00               LD   HL,21   
63E3   CD 31 08               CALL   prtdec   
63E6   CD E3 08               CALL   printStr   
63E9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
63F6   E1                     POP   hl   
63F7   E5                     PUSH   hl   
63F8   CD 31 08               CALL   prtdec   
63FB   E1                     POP   hl   
63FC   CD E3 08               CALL   printStr   
63FF   20 28 23 00            .CSTR   " (#"   
6403   CD 79 08               CALL   prthex   
6406   CD E3 08               CALL   printStr   
6409   29 0D 0A 00            .CSTR   ")\r\n"   
640D   76                     HALT      
640E   00                     .CSTR      
640F                EXPECTM_0_2334S43:      
640F   E1                     POP   HL   
6410                          ;*Macro unroll:  test "[10 20 30] 1%", 20
6410   31 80 18               LD   SP,STACK   
6413   CD F7 08               CALL   init   
6416   CD EA 08               CALL   execStr   
6419   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
6427                          ;*Macro unroll:  expect "[10 20 30] 1%",20
6427   E1                     POP   HL   
6428   E5                     PUSH   HL   
6429   11 14 00               LD   DE,20   
642C   B7                     OR   A   
642D   ED 52                  SBC   HL,DE   
642F   7D                     LD   A,L   
6430   B4                     OR   H   
6431   28 58                  JR   Z,expectM_0_2335S43   
6433   CD E3 08               CALL   printStr   
6436   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
644A   CD E3 08               CALL   printStr   
644D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
645C   21 14 00               LD   HL,20   
645F   CD 31 08               CALL   prtdec   
6462   CD E3 08               CALL   printStr   
6465   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6472   E1                     POP   hl   
6473   E5                     PUSH   hl   
6474   CD 31 08               CALL   prtdec   
6477   E1                     POP   hl   
6478   CD E3 08               CALL   printStr   
647B   20 28 23 00            .CSTR   " (#"   
647F   CD 79 08               CALL   prthex   
6482   CD E3 08               CALL   printStr   
6485   29 0D 0A 00            .CSTR   ")\r\n"   
6489   76                     HALT      
648A   00                     .CSTR      
648B                EXPECTM_0_2335S43:      
648B   E1                     POP   HL   
648C                          ;*Macro unroll:  test "\\b [1 2 3] 1%", 2
648C   31 80 18               LD   SP,STACK   
648F   CD F7 08               CALL   init   
6492   CD EA 08               CALL   execStr   
6495   5C 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "\\b [1 2 3] 1%"   
64A3                          ;*Macro unroll:  expect "\\b [1 2 3] 1%",2
64A3   E1                     POP   HL   
64A4   E5                     PUSH   HL   
64A5   11 02 00               LD   DE,2   
64A8   B7                     OR   A   
64A9   ED 52                  SBC   HL,DE   
64AB   7D                     LD   A,L   
64AC   B4                     OR   H   
64AD   28 58                  JR   Z,expectM_0_2336S43   
64AF   CD E3 08               CALL   printStr   
64B2   43 6F 64 65 3A 20 5C 62 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","\\b [1 2 3] 1%"   
64C6   CD E3 08               CALL   printStr   
64C9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
64D8   21 02 00               LD   HL,2   
64DB   CD 31 08               CALL   prtdec   
64DE   CD E3 08               CALL   printStr   
64E1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
64EE   E1                     POP   hl   
64EF   E5                     PUSH   hl   
64F0   CD 31 08               CALL   prtdec   
64F3   E1                     POP   hl   
64F4   CD E3 08               CALL   printStr   
64F7   20 28 23 00            .CSTR   " (#"   
64FB   CD 79 08               CALL   prthex   
64FE   CD E3 08               CALL   printStr   
6501   29 0D 0A 00            .CSTR   ")\r\n"   
6505   76                     HALT      
6506   00                     .CSTR      
6507                EXPECTM_0_2336S43:      
6507   E1                     POP   HL   
6508                          ;*Macro unroll:  test "\\b ['A' 'B' 'C'] 1%", 66
6508   31 80 18               LD   SP,STACK   
650B   CD F7 08               CALL   init   
650E   CD EA 08               CALL   execStr   
6511   5C 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "\\b ['A' 'B' 'C'] 1%"   
6525                          ;*Macro unroll:  expect "\\b ['A' 'B' 'C'] 1%",66
6525   E1                     POP   HL   
6526   E5                     PUSH   HL   
6527   11 42 00               LD   DE,66   
652A   B7                     OR   A   
652B   ED 52                  SBC   HL,DE   
652D   7D                     LD   A,L   
652E   B4                     OR   H   
652F   28 5E                  JR   Z,expectM_0_2337S43   
6531   CD E3 08               CALL   printStr   
6534   43 6F 64 65 3A 20 5C 62 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","\\b ['A' 'B' 'C'] 1%"   
654E   CD E3 08               CALL   printStr   
6551   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6560   21 42 00               LD   HL,66   
6563   CD 31 08               CALL   prtdec   
6566   CD E3 08               CALL   printStr   
6569   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6576   E1                     POP   hl   
6577   E5                     PUSH   hl   
6578   CD 31 08               CALL   prtdec   
657B   E1                     POP   hl   
657C   CD E3 08               CALL   printStr   
657F   20 28 23 00            .CSTR   " (#"   
6583   CD 79 08               CALL   prthex   
6586   CD E3 08               CALL   printStr   
6589   29 0D 0A 00            .CSTR   ")\r\n"   
658D   76                     HALT      
658E   00                     .CSTR      
658F                EXPECTM_0_2337S43:      
658F   E1                     POP   HL   
6590                          ;*Macro unroll:  test "0 [{10} {20} {30}] \\s", 10
6590   31 80 18               LD   SP,STACK   
6593   CD F7 08               CALL   init   
6596   CD EA 08               CALL   execStr   
6599   30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 5C 73 00 .CSTR   "0 [{10} {20} {30}] \\s"   
65AF                          ;*Macro unroll:  expect "0 [{10} {20} {30}] \\s",10
65AF   E1                     POP   HL   
65B0   E5                     PUSH   HL   
65B1   11 0A 00               LD   DE,10   
65B4   B7                     OR   A   
65B5   ED 52                  SBC   HL,DE   
65B7   7D                     LD   A,L   
65B8   B4                     OR   H   
65B9   28 60                  JR   Z,expectM_0_2338S43   
65BB   CD E3 08               CALL   printStr   
65BE   43 6F 64 65 3A 20 30 20 5B 7B 31 30 7D 20 7B 32 30 7D 20 7B 33 30 7D 5D 20 5C 73 00 .CSTR   "Code: ","0 [{10} {20} {30}] \\s"   
65DA   CD E3 08               CALL   printStr   
65DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
65EC   21 0A 00               LD   HL,10   
65EF   CD 31 08               CALL   prtdec   
65F2   CD E3 08               CALL   printStr   
65F5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6602   E1                     POP   hl   
6603   E5                     PUSH   hl   
6604   CD 31 08               CALL   prtdec   
6607   E1                     POP   hl   
6608   CD E3 08               CALL   printStr   
660B   20 28 23 00            .CSTR   " (#"   
660F   CD 79 08               CALL   prthex   
6612   CD E3 08               CALL   printStr   
6615   29 0D 0A 00            .CSTR   ")\r\n"   
6619   76                     HALT      
661A   00                     .CSTR      
661B                EXPECTM_0_2338S43:      
661B   E1                     POP   HL   
661C                          ;*Macro unroll:  test "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:", 10
661C   31 80 18               LD   SP,STACK   
661F   CD F7 08               CALL   init   
6622   CD EA 08               CALL   execStr   
6625   31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:"   
6649                          ;*Macro unroll:  expect "1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:",10
6649   E1                     POP   HL   
664A   E5                     PUSH   HL   
664B   11 0A 00               LD   DE,10   
664E   B7                     OR   A   
664F   ED 52                  SBC   HL,DE   
6651   7D                     LD   A,L   
6652   B4                     OR   H   
6653   28 6E                  JR   Z,expectM_0_2339S43   
6655   CD E3 08               CALL   printStr   
6658   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 61 62 29 20 7B 30 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 10 20 (ab) {0 [{$a} {$b}] \\s} \\f:"   
6682   CD E3 08               CALL   printStr   
6685   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6694   21 0A 00               LD   HL,10   
6697   CD 31 08               CALL   prtdec   
669A   CD E3 08               CALL   printStr   
669D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
66AA   E1                     POP   hl   
66AB   E5                     PUSH   hl   
66AC   CD 31 08               CALL   prtdec   
66AF   E1                     POP   hl   
66B0   CD E3 08               CALL   printStr   
66B3   20 28 23 00            .CSTR   " (#"   
66B7   CD 79 08               CALL   prthex   
66BA   CD E3 08               CALL   printStr   
66BD   29 0D 0A 00            .CSTR   ")\r\n"   
66C1   76                     HALT      
66C2   00                     .CSTR      
66C3                EXPECTM_0_2339S43:      
66C3   E1                     POP   HL   
66C4                          ;*Macro unroll:  test "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:", 10
66C4   31 80 18               LD   SP,STACK   
66C7   CD F7 08               CALL   init   
66CA   CD EA 08               CALL   execStr   
66CD   30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
66F3                          ;*Macro unroll:  expect "0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:",10
66F3   E1                     POP   HL   
66F4   E5                     PUSH   HL   
66F5   11 0A 00               LD   DE,10   
66F8   B7                     OR   A   
66F9   ED 52                  SBC   HL,DE   
66FB   7D                     LD   A,L   
66FC   B4                     OR   H   
66FD   28 70                  JR   Z,expectM_0_2340S43   
66FF   CD E3 08               CALL   printStr   
6702   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","0 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
672E   CD E3 08               CALL   printStr   
6731   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
6740   21 0A 00               LD   HL,10   
6743   CD 31 08               CALL   prtdec   
6746   CD E3 08               CALL   printStr   
6749   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6756   E1                     POP   hl   
6757   E5                     PUSH   hl   
6758   CD 31 08               CALL   prtdec   
675B   E1                     POP   hl   
675C   CD E3 08               CALL   printStr   
675F   20 28 23 00            .CSTR   " (#"   
6763   CD 79 08               CALL   prthex   
6766   CD E3 08               CALL   printStr   
6769   29 0D 0A 00            .CSTR   ")\r\n"   
676D   76                     HALT      
676E   00                     .CSTR      
676F                EXPECTM_0_2340S43:      
676F   E1                     POP   HL   
6770                          ;*Macro unroll:  test "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:", 20
6770   31 80 18               LD   SP,STACK   
6773   CD F7 08               CALL   init   
6776   CD EA 08               CALL   execStr   
6779   31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
679F                          ;*Macro unroll:  expect "1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:",20
679F   E1                     POP   HL   
67A0   E5                     PUSH   HL   
67A1   11 14 00               LD   DE,20   
67A4   B7                     OR   A   
67A5   ED 52                  SBC   HL,DE   
67A7   7D                     LD   A,L   
67A8   B4                     OR   H   
67A9   28 70                  JR   Z,expectM_0_2341S43   
67AB   CD E3 08               CALL   printStr   
67AE   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 28 69 61 62 29 20 7B 24 69 20 5B 7B 24 61 7D 20 7B 24 62 7D 5D 20 5C 73 7D 20 5C 66 3A 00 .CSTR   "Code: ","1 10 20 (iab) {$i [{$a} {$b}] \\s} \\f:"   
67DA   CD E3 08               CALL   printStr   
67DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
67EC   21 14 00               LD   HL,20   
67EF   CD 31 08               CALL   prtdec   
67F2   CD E3 08               CALL   printStr   
67F5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
6802   E1                     POP   hl   
6803   E5                     PUSH   hl   
6804   CD 31 08               CALL   prtdec   
6807   E1                     POP   hl   
6808   CD E3 08               CALL   printStr   
680B   20 28 23 00            .CSTR   " (#"   
680F   CD 79 08               CALL   prthex   
6812   CD E3 08               CALL   printStr   
6815   29 0D 0A 00            .CSTR   ")\r\n"   
6819   76                     HALT      
681A   00                     .CSTR      
681B                EXPECTM_0_2341S43:      
681B   E1                     POP   HL   
681C                             ; 
681C                             ; 
681C                             ; 
681C                             ; 
681C                             ; 
681C                             ; 
681C                             ; 
681C                             ; test "10 sqrt", 3
681C                             ; test "10 sqrt %", 1
681C                             ; test "[ 1 ] closure call", 1
681C                             ; test "[ [ 2 ] ] closure call 0%", 2
681C   CD E3 08               CALL   printStr   
681F   44 6F 6E 65 21 00      .CSTR   "Done!"   
6825   76                     HALT      
6826                          ALIGN   2   
6826                PRINTER:      
6826   E1                     POP   hl   
6827   CD 31 08               CALL   prtdec   
682A   DD E9                  JP   (ix)   


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 56 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               082F DEFINED AT LINE 1367 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1251 IN monty.asm
                    > USED AT LINE 1652 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 770 IN monty.asm
                    > USED AT LINE 777 IN monty.asm
                    > USED AT LINE 1444 IN monty.asm
                    > USED AT LINE 1485 IN monty.asm
                    > USED AT LINE 1509 IN monty.asm
                    > USED AT LINE 1512 IN monty.asm
                    > USED AT LINE 1683 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 44 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 828 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 833 IN monty.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1719 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
DQUOTE:             0022 DEFINED AT LINE 27 IN monty.asm
                    > USED AT LINE 1098 IN monty.asm
                    > USED AT LINE 1211 IN monty.asm
                    > USED AT LINE 1531 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 29 IN monty.asm
MACROS:             0180 DEFINED AT LINE 61 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 66 IN monty.asm
                    > USED AT LINE 1607 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 74 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 76 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 110 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 213 IN monty.asm
ADD_:               0300 DEFINED AT LINE 215 IN monty.asm
ADDR_:              0306 DEFINED AT LINE 221 IN monty.asm
AND_:               0309 DEFINED AT LINE 223 IN monty.asm
ARG_:               030C DEFINED AT LINE 225 IN monty.asm
ARG_LIST_:          030F DEFINED AT LINE 227 IN monty.asm
ARRBEGIN_:          0312 DEFINED AT LINE 229 IN monty.asm
ARREND_:            0315 DEFINED AT LINE 231 IN monty.asm
ARRINDEX_:          0318 DEFINED AT LINE 233 IN monty.asm
BLOCK_:             031B DEFINED AT LINE 235 IN monty.asm
BLOCKEND_:          031E DEFINED AT LINE 237 IN monty.asm
CHAR_:              0321 DEFINED AT LINE 239 IN monty.asm
COMMAND_:           0324 DEFINED AT LINE 241 IN monty.asm
COMPILE_:           0327 DEFINED AT LINE 243 IN monty.asm
DOT_:               032A DEFINED AT LINE 245 IN monty.asm
REMAIN_:            032D DEFINED AT LINE 247 IN monty.asm
GO_:                0330 DEFINED AT LINE 249 IN monty.asm
IDENTU_:            0333 DEFINED AT LINE 251 IN monty.asm
IDENTL_:            0336 DEFINED AT LINE 253 IN monty.asm
IF_:                0339 DEFINED AT LINE 255 IN monty.asm
INV_:               033C DEFINED AT LINE 257 IN monty.asm
MUL_:               0342 DEFINED AT LINE 260 IN monty.asm
NOT_:               0345 DEFINED AT LINE 262 IN monty.asm
NUM_:               034A DEFINED AT LINE 265 IN monty.asm
                    > USED AT LINE 282 IN monty.asm
HEXNUM_:            034D DEFINED AT LINE 267 IN monty.asm
OR_:                0350 DEFINED AT LINE 269 IN monty.asm
XOR_:               0353 DEFINED AT LINE 271 IN monty.asm
STRING_:            0356 DEFINED AT LINE 273 IN monty.asm
SUB_:               0359 DEFINED AT LINE 275 IN monty.asm
SUB1:               0365 DEFINED AT LINE 283 IN monty.asm
                    > USED AT LINE 280 IN monty.asm
SUB2:               0367 DEFINED AT LINE 286 IN monty.asm
EQ_:                036D DEFINED AT LINE 292 IN monty.asm
EQ0:                0377 DEFINED AT LINE 299 IN monty.asm
                    > USED AT LINE 296 IN monty.asm
EQ1:                0378 DEFINED AT LINE 301 IN monty.asm
                    > USED AT LINE 264 IN monty.asm
GT_:                037C DEFINED AT LINE 305 IN monty.asm
LT_:                0387 DEFINED AT LINE 314 IN monty.asm
LT1:                0390 DEFINED AT LINE 321 IN monty.asm
                    > USED AT LINE 312 IN monty.asm
DIV_:               0399 DEFINED AT LINE 327 IN monty.asm
NOP_:               03A8 DEFINED AT LINE 338 IN monty.asm
ADDR:               03AA DEFINED AT LINE 346 IN monty.asm
                    > USED AT LINE 222 IN monty.asm
AND:                03B6 DEFINED AT LINE 352 IN monty.asm
                    > USED AT LINE 224 IN monty.asm
AND1:               03BD DEFINED AT LINE 360 IN monty.asm
                    > USED AT LINE 372 IN monty.asm
                    > USED AT LINE 382 IN monty.asm
OR:                 03C1 DEFINED AT LINE 364 IN monty.asm
                    > USED AT LINE 270 IN monty.asm
XOR:                03CA DEFINED AT LINE 373 IN monty.asm
                    > USED AT LINE 272 IN monty.asm
XOR1:               03CB DEFINED AT LINE 375 IN monty.asm
                    > USED AT LINE 259 IN monty.asm
ARG:                03D3 DEFINED AT LINE 387 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
ARG0:               03F1 DEFINED AT LINE 408 IN monty.asm
                    > USED AT LINE 414 IN monty.asm
ARG0A:              03FA DEFINED AT LINE 416 IN monty.asm
                    > USED AT LINE 393 IN monty.asm
                    > USED AT LINE 400 IN monty.asm
ARG1:               03FF DEFINED AT LINE 419 IN monty.asm
                    > USED AT LINE 412 IN monty.asm
ARG1A:              0407 DEFINED AT LINE 426 IN monty.asm
                    > USED AT LINE 418 IN monty.asm
ARG_LIST:           040A DEFINED AT LINE 435 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
ARG_LIST1:          0414 DEFINED AT LINE 442 IN monty.asm
                    > USED AT LINE 460 IN monty.asm
ARG_LIST2:          0420 DEFINED AT LINE 450 IN monty.asm
                    > USED AT LINE 447 IN monty.asm
ARG_LIST3:          0428 DEFINED AT LINE 458 IN monty.asm
                    > USED AT LINE 449 IN monty.asm
                    > USED AT LINE 456 IN monty.asm
ARG_LIST4:          042B DEFINED AT LINE 461 IN monty.asm
                    > USED AT LINE 445 IN monty.asm
ARG_LIST5:          0430 DEFINED AT LINE 466 IN monty.asm
                    > USED AT LINE 464 IN monty.asm
ARRBEGIN:           043C DEFINED AT LINE 516 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
ARREND:             0458 DEFINED AT LINE 530 IN monty.asm
                    > USED AT LINE 232 IN monty.asm
ARREND1:            0472 DEFINED AT LINE 546 IN monty.asm
                    > USED AT LINE 562 IN monty.asm
ARREND2:            0482 DEFINED AT LINE 556 IN monty.asm
                    > USED AT LINE 552 IN monty.asm
ARRINDEX:           04A6 DEFINED AT LINE 583 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
ARRINDEX0:          04AE DEFINED AT LINE 589 IN monty.asm
ARRINDEX1:          04AF DEFINED AT LINE 591 IN monty.asm
                    > USED AT LINE 588 IN monty.asm
ARRINDEX2:          04BB DEFINED AT LINE 600 IN monty.asm
                    > USED AT LINE 597 IN monty.asm
ASSIGN:             04BE DEFINED AT LINE 606 IN monty.asm
                    > USED AT LINE 298 IN monty.asm
ASSIGN1:            04CC DEFINED AT LINE 616 IN monty.asm
                    > USED AT LINE 613 IN monty.asm
BLOCK:              04CE DEFINED AT LINE 619 IN monty.asm
                    > USED AT LINE 236 IN monty.asm
BLOCK1:             04D2 DEFINED AT LINE 623 IN monty.asm
                    > USED AT LINE 627 IN monty.asm
                    > USED AT LINE 649 IN monty.asm
                    > USED AT LINE 652 IN monty.asm
                    > USED AT LINE 657 IN monty.asm
                    > USED AT LINE 661 IN monty.asm
BLOCK2:             04FE DEFINED AT LINE 650 IN monty.asm
                    > USED AT LINE 637 IN monty.asm
                    > USED AT LINE 639 IN monty.asm
                    > USED AT LINE 641 IN monty.asm
BLOCK3:             0501 DEFINED AT LINE 653 IN monty.asm
                    > USED AT LINE 644 IN monty.asm
                    > USED AT LINE 646 IN monty.asm
                    > USED AT LINE 648 IN monty.asm
BLOCK4:             0509 DEFINED AT LINE 659 IN monty.asm
                    > USED AT LINE 630 IN monty.asm
                    > USED AT LINE 632 IN monty.asm
                    > USED AT LINE 634 IN monty.asm
BLOCK5:             050C DEFINED AT LINE 662 IN monty.asm
                    > USED AT LINE 658 IN monty.asm
BLOCKEND:           050F DEFINED AT LINE 666 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
BLOCKEND1:          053B DEFINED AT LINE 689 IN monty.asm
                    > USED AT LINE 682 IN monty.asm
BLOCKEND2:          0547 DEFINED AT LINE 696 IN monty.asm
                    > USED AT LINE 688 IN monty.asm
CHAR:               0560 DEFINED AT LINE 717 IN monty.asm
                    > USED AT LINE 240 IN monty.asm
CHAR1:              0563 DEFINED AT LINE 719 IN monty.asm
                    > USED AT LINE 730 IN monty.asm
CHAR2:              056F DEFINED AT LINE 728 IN monty.asm
                    > USED AT LINE 725 IN monty.asm
CHAR3:              0572 DEFINED AT LINE 731 IN monty.asm
                    > USED AT LINE 723 IN monty.asm
COMPILE:            0575 DEFINED AT LINE 738 IN monty.asm
                    > USED AT LINE 244 IN monty.asm
DOT:                0593 DEFINED AT LINE 753 IN monty.asm
                    > USED AT LINE 246 IN monty.asm
DOT1:               059F DEFINED AT LINE 761 IN monty.asm
                    > USED AT LINE 758 IN monty.asm
DOT2:               05A8 DEFINED AT LINE 766 IN monty.asm
                    > USED AT LINE 763 IN monty.asm
DOT3:               05B2 DEFINED AT LINE 772 IN monty.asm
                    > USED AT LINE 768 IN monty.asm
DOT4:               05B6 DEFINED AT LINE 775 IN monty.asm
                    > USED AT LINE 760 IN monty.asm
                    > USED AT LINE 765 IN monty.asm
                    > USED AT LINE 771 IN monty.asm
DIVIDE:             05BD DEFINED AT LINE 783 IN monty.asm
                    > USED AT LINE 332 IN monty.asm
DIVIDE1:            05C2 DEFINED AT LINE 786 IN monty.asm
                    > USED AT LINE 798 IN monty.asm
DIVIDE2:            05CF DEFINED AT LINE 794 IN monty.asm
                    > USED AT LINE 791 IN monty.asm
DIVIDE3:            05D0 DEFINED AT LINE 796 IN monty.asm
                    > USED AT LINE 793 IN monty.asm
EQUALS:             05D6 DEFINED AT LINE 804 IN monty.asm
                    > USED AT LINE 303 IN monty.asm
LESSTHANEQ:         05DE DEFINED AT LINE 812 IN monty.asm
                    > USED AT LINE 323 IN monty.asm
LESSTHAN:           05E3 DEFINED AT LINE 819 IN monty.asm
                    > USED AT LINE 325 IN monty.asm
LESSTHAN1:          05E8 DEFINED AT LINE 824 IN monty.asm
                    > USED AT LINE 815 IN monty.asm
TRUE1:              05EB DEFINED AT LINE 827 IN monty.asm
                    > USED AT LINE 807 IN monty.asm
                    > USED AT LINE 1145 IN monty.asm
NULL1:              05F1 DEFINED AT LINE 831 IN monty.asm
FALSE1:             05F1 DEFINED AT LINE 832 IN monty.asm
                    > USED AT LINE 808 IN monty.asm
                    > USED AT LINE 822 IN monty.asm
                    > USED AT LINE 825 IN monty.asm
                    > USED AT LINE 1133 IN monty.asm
GO:                 05F7 DEFINED AT LINE 841 IN monty.asm
                    > USED AT LINE 250 IN monty.asm
GO0:                05F8 DEFINED AT LINE 843 IN monty.asm
                    > USED AT LINE 977 IN monty.asm
                    > USED AT LINE 979 IN monty.asm
                    > USED AT LINE 1281 IN monty.asm
GO1:                05FE DEFINED AT LINE 848 IN monty.asm
                    > USED AT LINE 846 IN monty.asm
GO2:                0625 DEFINED AT LINE 869 IN monty.asm
                    > USED AT LINE 861 IN monty.asm
                    > USED AT LINE 893 IN monty.asm
GO3:                062A DEFINED AT LINE 873 IN monty.asm
                    > USED AT LINE 868 IN monty.asm
                    > USED AT LINE 916 IN monty.asm
GO10:               0638 DEFINED AT LINE 882 IN monty.asm
                    > USED AT LINE 851 IN monty.asm
GO11:               0645 DEFINED AT LINE 894 IN monty.asm
                    > USED AT LINE 891 IN monty.asm
GO12:               064B DEFINED AT LINE 900 IN monty.asm
                    > USED AT LINE 904 IN monty.asm
GO13:               0650 DEFINED AT LINE 905 IN monty.asm
                    > USED AT LINE 899 IN monty.asm
HEXNUM:             065E DEFINED AT LINE 918 IN monty.asm
                    > USED AT LINE 268 IN monty.asm
HEXNUM1:            0661 DEFINED AT LINE 920 IN monty.asm
                    > USED AT LINE 937 IN monty.asm
HEXNUM2:            0669 DEFINED AT LINE 926 IN monty.asm
                    > USED AT LINE 924 IN monty.asm
IDENTU:             067B DEFINED AT LINE 938 IN monty.asm
                    > USED AT LINE 252 IN monty.asm
IDENTL:             0680 DEFINED AT LINE 942 IN monty.asm
                    > USED AT LINE 254 IN monty.asm
IDENT1:             0685 DEFINED AT LINE 946 IN monty.asm
                    > USED AT LINE 941 IN monty.asm
IF:                 0692 DEFINED AT LINE 959 IN monty.asm
                    > USED AT LINE 256 IN monty.asm
IFTE:               069E DEFINED AT LINE 969 IN monty.asm
                    > USED AT LINE 963 IN monty.asm
IFTE1:              069F DEFINED AT LINE 971 IN monty.asm
                    > USED AT LINE 966 IN monty.asm
MUL:                06AB DEFINED AT LINE 981 IN monty.asm
                    > USED AT LINE 261 IN monty.asm
MUL2:               06B5 DEFINED AT LINE 990 IN monty.asm
                    > USED AT LINE 999 IN monty.asm
NUM:                06C7 DEFINED AT LINE 1004 IN monty.asm
                    > USED AT LINE 266 IN monty.asm
NUM0:               06D0 DEFINED AT LINE 1010 IN monty.asm
                    > USED AT LINE 1008 IN monty.asm
NUM1:               06D1 DEFINED AT LINE 1012 IN monty.asm
                    > USED AT LINE 1029 IN monty.asm
NUM2:               06E9 DEFINED AT LINE 1030 IN monty.asm
                    > USED AT LINE 928 IN monty.asm
                    > USED AT LINE 930 IN monty.asm
                    > USED AT LINE 1015 IN monty.asm
                    > USED AT LINE 1017 IN monty.asm
NUM3:               06F4 DEFINED AT LINE 1038 IN monty.asm
                    > USED AT LINE 1033 IN monty.asm
REMAIN:             06F7 DEFINED AT LINE 1042 IN monty.asm
                    > USED AT LINE 248 IN monty.asm
SHIFTLEFT:          06FD DEFINED AT LINE 1049 IN monty.asm
                    > USED AT LINE 318 IN monty.asm
SHIFTLEFT1:         0705 DEFINED AT LINE 1056 IN monty.asm
                    > USED AT LINE 1059 IN monty.asm
SHIFTLEFT2:         0706 DEFINED AT LINE 1058 IN monty.asm
                    > USED AT LINE 1055 IN monty.asm
SHIFTRIGHT:         070D DEFINED AT LINE 1066 IN monty.asm
                    > USED AT LINE 309 IN monty.asm
SHIFTRIGHT1:        0715 DEFINED AT LINE 1073 IN monty.asm
                    > USED AT LINE 1077 IN monty.asm
SHIFTRIGHT2:        0719 DEFINED AT LINE 1076 IN monty.asm
                    > USED AT LINE 1072 IN monty.asm
STRING:             0720 DEFINED AT LINE 1085 IN monty.asm
                    > USED AT LINE 274 IN monty.asm
STRING1:            0729 DEFINED AT LINE 1092 IN monty.asm
                    > USED AT LINE 1099 IN monty.asm
                    > USED AT LINE 1101 IN monty.asm
STRING2:            072C DEFINED AT LINE 1096 IN monty.asm
                    > USED AT LINE 1091 IN monty.asm
COMMAND:            0748 DEFINED AT LINE 1121 IN monty.asm
                    > USED AT LINE 242 IN monty.asm
ABS1:               078C DEFINED AT LINE 1152 IN monty.asm
                    > USED AT LINE 1127 IN monty.asm
COMMENT:            0799 DEFINED AT LINE 1165 IN monty.asm
                    > USED AT LINE 1125 IN monty.asm
                    > USED AT LINE 1169 IN monty.asm
BYTES:              07A2 DEFINED AT LINE 1173 IN monty.asm
                    > USED AT LINE 1129 IN monty.asm
BYTES1:             07A5 DEFINED AT LINE 1175 IN monty.asm
                    > USED AT LINE 1285 IN monty.asm
FUNC:               07AA DEFINED AT LINE 1180 IN monty.asm
                    > USED AT LINE 1131 IN monty.asm
FUNC1:              07BA DEFINED AT LINE 1194 IN monty.asm
                    > USED AT LINE 1217 IN monty.asm
                    > USED AT LINE 1220 IN monty.asm
                    > USED AT LINE 1225 IN monty.asm
                    > USED AT LINE 1229 IN monty.asm
FUNC2:              07E4 DEFINED AT LINE 1218 IN monty.asm
                    > USED AT LINE 1206 IN monty.asm
                    > USED AT LINE 1208 IN monty.asm
                    > USED AT LINE 1210 IN monty.asm
FUNC3:              07E7 DEFINED AT LINE 1221 IN monty.asm
                    > USED AT LINE 1212 IN monty.asm
                    > USED AT LINE 1214 IN monty.asm
                    > USED AT LINE 1216 IN monty.asm
FUNC4:              07EF DEFINED AT LINE 1227 IN monty.asm
                    > USED AT LINE 1200 IN monty.asm
                    > USED AT LINE 1202 IN monty.asm
                    > USED AT LINE 1204 IN monty.asm
FUNC4A:             07F2 DEFINED AT LINE 1230 IN monty.asm
                    > USED AT LINE 1226 IN monty.asm
INPUT:              07FE DEFINED AT LINE 1240 IN monty.asm
                    > USED AT LINE 1135 IN monty.asm
KEY:                0809 DEFINED AT LINE 1250 IN monty.asm
                    > USED AT LINE 1137 IN monty.asm
OUTPUT:             0812 DEFINED AT LINE 1259 IN monty.asm
                    > USED AT LINE 1139 IN monty.asm
REPEAT:             081B DEFINED AT LINE 1268 IN monty.asm
                    > USED AT LINE 1141 IN monty.asm
SELECT:             081D DEFINED AT LINE 1273 IN monty.asm
                    > USED AT LINE 1143 IN monty.asm
WORDS:              0827 DEFINED AT LINE 1283 IN monty.asm
                    > USED AT LINE 1147 IN monty.asm
LOOP:               082D DEFINED AT LINE 1296 IN monty.asm
FILTER:             082F DEFINED AT LINE 1365 IN monty.asm
MAP:                082F DEFINED AT LINE 1366 IN monty.asm
PRTDEC:             0831 DEFINED AT LINE 1440 IN monty.asm
                    > USED AT LINE 774 IN monty.asm
                    > USED AT LINE 1729 IN monty.asm
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 18
                    > USED AT LINE 24
                    > USED AT LINE 128
PRTDEC0:            0840 DEFINED AT LINE 1451 IN monty.asm
                    > USED AT LINE 1442 IN monty.asm
PRTDEC1:            0862 DEFINED AT LINE 1467 IN monty.asm
                    > USED AT LINE 1455 IN monty.asm
                    > USED AT LINE 1457 IN monty.asm
                    > USED AT LINE 1459 IN monty.asm
                    > USED AT LINE 1461 IN monty.asm
                    > USED AT LINE 1464 IN monty.asm
PRTDEC2:            0864 DEFINED AT LINE 1469 IN monty.asm
                    > USED AT LINE 1472 IN monty.asm
PRTDEC3:            0874 DEFINED AT LINE 1481 IN monty.asm
                    > USED AT LINE 1476 IN monty.asm
PRTDEC4:            0875 DEFINED AT LINE 1483 IN monty.asm
                    > USED AT LINE 1480 IN monty.asm
PRTHEX:             0879 DEFINED AT LINE 1487 IN monty.asm
                    > USED AT LINE 759 IN monty.asm
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
                    > USED AT LINE 28
PRTHEX2:            0884 DEFINED AT LINE 1495 IN monty.asm
                    > USED AT LINE 1490 IN monty.asm
                    > USED AT LINE 1492 IN monty.asm
PRTHEX3:            088D DEFINED AT LINE 1503 IN monty.asm
                    > USED AT LINE 1501 IN monty.asm
PRTSTR0:            0898 DEFINED AT LINE 1511 IN monty.asm
                    > USED AT LINE 1517 IN monty.asm
PRTSTR:             089C DEFINED AT LINE 1514 IN monty.asm
                    > USED AT LINE 764 IN monty.asm
                    > USED AT LINE 1581 IN monty.asm
NESTING:            08A1 DEFINED AT LINE 1530 IN monty.asm
                    > USED AT LINE 1643 IN monty.asm
                    > USED AT LINE 1684 IN monty.asm
NESTING0:           08AB DEFINED AT LINE 1536 IN monty.asm
                    > USED AT LINE 1532 IN monty.asm
                    > USED AT LINE 1534 IN monty.asm
NESTING1A:          08B2 DEFINED AT LINE 1541 IN monty.asm
                    > USED AT LINE 1538 IN monty.asm
NESTING1:           08B5 DEFINED AT LINE 1544 IN monty.asm
                    > USED AT LINE 1535 IN monty.asm
NESTING2:           08C4 DEFINED AT LINE 1553 IN monty.asm
                    > USED AT LINE 1548 IN monty.asm
                    > USED AT LINE 1550 IN monty.asm
NESTING3:           08C6 DEFINED AT LINE 1556 IN monty.asm
                    > USED AT LINE 1552 IN monty.asm
NESTING4:           08D1 DEFINED AT LINE 1563 IN monty.asm
                    > USED AT LINE 1558 IN monty.asm
                    > USED AT LINE 1560 IN monty.asm
PROMPT:             08D3 DEFINED AT LINE 1567 IN monty.asm
                    > USED AT LINE 1627 IN monty.asm
CRLF:               08DC DEFINED AT LINE 1572 IN monty.asm
                    > USED AT LINE 1696 IN monty.asm
PRINTSTR:           08E3 DEFINED AT LINE 1579 IN monty.asm
                    > USED AT LINE 1568 IN monty.asm
                    > USED AT LINE 1573 IN monty.asm
                    > USED AT LINE 1623 IN monty.asm
                    > USED AT LINE 1727 IN monty.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 20
                    > USED AT LINE 26
                    > USED AT LINE 29
                    > USED AT LINE 121
EXECSTR:            08EA DEFINED AT LINE 1588 IN monty.asm
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
                    > USED AT LINE 41
CALL:               08F5 DEFINED AT LINE 1599 IN monty.asm
INIT:               08F7 DEFINED AT LINE 1604 IN monty.asm
                    > USED AT LINE 9
                    > USED AT LINE 1622 IN monty.asm
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
                    > USED AT LINE 40
INIT0:              0910 DEFINED AT LINE 1614 IN monty.asm
                    > USED AT LINE 1617 IN monty.asm
START:              0915 DEFINED AT LINE 1620 IN monty.asm
INTERPRET:          092B DEFINED AT LINE 1626 IN monty.asm
                    > USED AT LINE 1721 IN monty.asm
                    > USED AT LINE 1730 IN monty.asm
INTERPRET2:         0935 DEFINED AT LINE 1632 IN monty.asm
                    > USED AT LINE 1676 IN monty.asm
INTERPRET3:         093D DEFINED AT LINE 1639 IN monty.asm
                    > USED AT LINE 1648 IN monty.asm
INTERPRET4:         0943 DEFINED AT LINE 1645 IN monty.asm
                    > USED AT LINE 1637 IN monty.asm
INTERPRET5:         0948 DEFINED AT LINE 1651 IN monty.asm
                    > USED AT LINE 1685 IN monty.asm
                    > USED AT LINE 1699 IN monty.asm
INTERPRET6:         0959 DEFINED AT LINE 1678 IN monty.asm
                    > USED AT LINE 1654 IN monty.asm
INTERPRET7:         0967 DEFINED AT LINE 1687 IN monty.asm
                    > USED AT LINE 1659 IN monty.asm
INTERPRET8:         097A DEFINED AT LINE 1701 IN monty.asm
                    > USED AT LINE 1657 IN monty.asm
NEXT:               0982 DEFINED AT LINE 1707 IN monty.asm
                    > USED AT LINE 69 IN monty.asm
                    > USED AT LINE 1711 IN monty.asm
NEXT1:              0991 DEFINED AT LINE 1718 IN monty.asm
                    > USED AT LINE 1712 IN monty.asm
EXIT_:              0998 DEFINED AT LINE 1722 IN monty.asm
                    > USED AT LINE 1720 IN monty.asm
ERROR:              099B DEFINED AT LINE 1726 IN monty.asm
                    > USED AT LINE 1150 IN monty.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 854 IN monty.asm
                    > USED AT LINE 1606 IN monty.asm
                    > USED AT LINE 1621 IN monty.asm
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
                    > USED AT LINE 39
VARS:               1900 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 1611 IN monty.asm
RESTARTS:           19D0 DEFINED AT LINE 10 IN ram.asm
RST08:              19D0 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              19D2 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              19D4 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              19D6 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              19D8 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              19DA DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               19DC DEFINED AT LINE 18 IN ram.asm
INTVEC:             19DE DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             19E0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            19E2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            19E4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            19E6 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 1608 IN monty.asm
VDATAWIDTH:         19E6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 550 IN monty.asm
                    > USED AT LINE 586 IN monty.asm
                    > USED AT LINE 611 IN monty.asm
                    > USED AT LINE 1176 IN monty.asm
VTIBPTR:            19E8 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 1630 IN monty.asm
                    > USED AT LINE 1702 IN monty.asm
VNEXT:              19EA DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1605 IN monty.asm
VHEAPPTR:           19EC DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 437 IN monty.asm
                    > USED AT LINE 468 IN monty.asm
                    > USED AT LINE 540 IN monty.asm
                    > USED AT LINE 572 IN monty.asm
                    > USED AT LINE 573 IN monty.asm
                    > USED AT LINE 746 IN monty.asm
                    > USED AT LINE 749 IN monty.asm
                    > USED AT LINE 1086 IN monty.asm
                    > USED AT LINE 1105 IN monty.asm
                    > USED AT LINE 1181 IN monty.asm
                    > USED AT LINE 1233 IN monty.asm
                    > USED AT LINE 1235 IN monty.asm
VPOINTER:           19EE DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 347 IN monty.asm
                    > USED AT LINE 349 IN monty.asm
                    > USED AT LINE 350 IN monty.asm
                    > USED AT LINE 422 IN monty.asm
                    > USED AT LINE 593 IN monty.asm
                    > USED AT LINE 609 IN monty.asm
                    > USED AT LINE 950 IN monty.asm
VHASHSTR:           19F0 DEFINED AT LINE 36 IN ram.asm
VLASTDEF:           19F2 DEFINED AT LINE 37 IN ram.asm
VREMAIN:            19F4 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 333 IN monty.asm
                    > USED AT LINE 1043 IN monty.asm
VTEMP1:             19F6 DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 533 IN monty.asm
                    > USED AT LINE 574 IN monty.asm
                    > USED AT LINE 739 IN monty.asm
                    > USED AT LINE 750 IN monty.asm
VTEMP2:             19F8 DEFINED AT LINE 40 IN ram.asm
TBPTR:              19FA DEFINED AT LINE 41 IN ram.asm
TIB:                1A00 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1636 IN monty.asm
                    > USED AT LINE 1679 IN monty.asm
                    > USED AT LINE 1688 IN monty.asm
                    > USED AT LINE 1703 IN monty.asm
PAD:                1B00 DEFINED AT LINE 47 IN ram.asm
HEAP:               1C00 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 70 IN monty.asm
TESTSSTART:         4000 DEFINED AT LINE 16
                    > USED AT LINE 10
EXPECTM_0_2256S43:  406B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2258S43:  40D1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2259S43:  4137 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2260S43:  419B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2261S43:  41FF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2262S43:  4263 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2263S43:  42C7 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2264S43:  432D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2265S43:  4395 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2266S43:  43FB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2267S43:  4461 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2268S43:  44C9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2269S43:  4533 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2270S43:  459B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2271S43:  4603 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2272S43:  4671 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2273S43:  46DF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2274S43:  474B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2275S43:  47BB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2276S43:  4827 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2277S43:  489B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2278S43:  490D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2279S43:  497D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2280S43:  49E9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2281S43:  4A55 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2282S43:  4AC1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2283S43:  4B2D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2284S43:  4BA1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2285S43:  4C0D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2286S43:  4C7D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2287S43:  4CEB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2288S43:  4D59 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2289S43:  4DC5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2290S43:  4E31 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2291S43:  4E9D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2292S43:  4F09 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2293S43:  4F75 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2294S43:  4FE1 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2295S43:  504D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2296S43:  50B9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2297S43:  5127 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2298S43:  5195 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2299S43:  5203 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2300S43:  5273 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2301S43:  52E3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2302S43:  534D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2303S43:  53BD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2304S43:  5433 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2305S43:  54AB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2306S43:  5527 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2307S43:  55AF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2308S43:  5637 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2309S43:  56A5 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2310S43:  5715 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2311S43:  5787 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2312S43:  57FB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2313S43:  586D DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2314S43:  58E3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2315S43:  595B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2316S43:  59D9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2317S43:  5A5B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2318S43:  5AD9 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2319S43:  5B61 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2320S43:  5BEB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2321S43:  5C7B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2322S43:  5D0F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2323S43:  5D95 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2324S43:  5E21 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2325S43:  5EAF DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2326S43:  5F3F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2327S43:  5FCD DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2328S43:  6069 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2329S43:  60F3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2330S43:  6189 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2331S43:  6221 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2332S43:  62BB DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2333S43:  6365 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2334S43:  640F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2335S43:  648B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2336S43:  6507 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2337S43:  658F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2338S43:  661B DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2339S43:  66C3 DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2340S43:  676F DEFINED AT LINE 34
                    > USED AT LINE 10
EXPECTM_0_2341S43:  681B DEFINED AT LINE 34
                    > USED AT LINE 10
PRINTER:            6826 DEFINED AT LINE 126
