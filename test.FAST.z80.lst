0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /hex./dec"
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". /hex./dec `\r\n`"
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 5F               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 5F               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 5F               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 5F               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 5F               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 5F               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 5F               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 5F               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 5F               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 5F               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 5D               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 5F               LD   (RST08),HL   
0094   22 D2 5F               LD   (RST10),HL   
0097   22 D4 5F               LD   (RST18),HL   
009A   22 D6 5F               LD   (RST20),HL   
009D   22 D8 5F               LD   (RST28),HL   
00A0   22 DA 5F               LD   (RST30),HL   
00A3   22 DE 5F               LD   (INTVEC),HL   
00A6   22 E0 5F               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 5F               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 5F               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 12               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   21                     DB   lsb(bang_)   ; !     1
0181   0C                     DB   lsb(dquote_)   ; "     2
0182   5E                     DB   lsb(hash_)   ; #     1
0183   09                     DB   lsb(dollar_)   ; $     1
0184   12                     DB   lsb(percent_)   ; %     1
0185   73                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   18                     DB   lsb(lparen_)   ; (     1
0188   6B                     DB   lsb(rparen_)   ; )     1
0189   A5                     DB   lsb(star_)   ; *     1
018A   C9                     DB   lsb(plus_)   ; +     1
018B   06                     DB   lsb(comma_)   ; ,     2
018C   7D                     DB   lsb(minus_)   ; -     1
018D   0F                     DB   lsb(dot_)   ; .     2
018E   1B                     DB   lsb(slash_)   ; /	    1
018F   1E                     DB   lsb(num_)   ; 0     1
0190   1E                     DB   lsb(num_)   ; 1
0191   1E                     DB   lsb(num_)   ; 2
0192   1E                     DB   lsb(num_)   ; 3
0193   1E                     DB   lsb(num_)   ; 4
0194   1E                     DB   lsb(num_)   ; 5
0195   1E                     DB   lsb(num_)   ; 6
0196   1E                     DB   lsb(num_)   ; 7
0197   1E                     DB   lsb(num_)   ; 8
0198   1E                     DB   lsb(num_)   ; 9
0199   04                     DB   lsb(colon_)   ; :     2
019A   5E                     DB   lsb(semicolon_)   ; ;     2
019B   4C                     DB   lsb(lt_)   ; <     1
019C   32                     DB   lsb(eq_)   ; =     1
019D   41                     DB   lsb(gt_)   ; >     1
019E   15                     DB   lsb(question_)   ; ?     1
019F   E9                     DB   lsb(at_)   ; @     2
01A0   E5                     DB   lsb(upcase_)   ; A     1
01A1   E5                     DB   lsb(upcase_)   ; B
01A2   E5                     DB   lsb(upcase_)   ; C
01A3   E5                     DB   lsb(upcase_)   ; D
01A4   E5                     DB   lsb(upcase_)   ; E
01A5   E5                     DB   lsb(upcase_)   ; F
01A6   E5                     DB   lsb(upcase_)   ; G
01A7   E5                     DB   lsb(upcase_)   ; h
01A8   E5                     DB   lsb(upcase_)   ; I
01A9   E5                     DB   lsb(upcase_)   ; J
01AA   E5                     DB   lsb(upcase_)   ; K
01AB   E5                     DB   lsb(upcase_)   ; L
01AC   E5                     DB   lsb(upcase_)   ; M
01AD   E5                     DB   lsb(upcase_)   ; N
01AE   E5                     DB   lsb(upcase_)   ; O
01AF   E5                     DB   lsb(upcase_)   ; p
01B0   E5                     DB   lsb(upcase_)   ; Q
01B1   E5                     DB   lsb(upcase_)   ; R
01B2   E5                     DB   lsb(upcase_)   ; S
01B3   E5                     DB   lsb(upcase_)   ; T
01B4   E5                     DB   lsb(upcase_)   ; U
01B5   E5                     DB   lsb(upcase_)   ; V
01B6   E5                     DB   lsb(upcase_)   ; W
01B7   E5                     DB   lsb(upcase_)   ; X
01B8   E5                     DB   lsb(upcase_)   ; Y
01B9   E5                     DB   lsb(upcase_)   ; Z
01BA   12                     DB   lsb(lbrack_)   ; [     2
01BB   2E                     DB   lsb(backslash_)   ; \     2
01BC   4F                     DB   lsb(rbrack_)   ; ]     2
01BD   9F                     DB   lsb(caret_)   ; ^     1
01BE   E1                     DB   lsb(underscore_)   ; _     2
01BF   B5                     DB   lsb(grave_)   ; `     2   	
01C0   00                     DB   lsb(lowcase_)   ; a     1
01C1   00                     DB   lsb(lowcase_)   ; b
01C2   00                     DB   lsb(lowcase_)   ; c
01C3   00                     DB   lsb(lowcase_)   ; d
01C4   00                     DB   lsb(lowcase_)   ; e
01C5   00                     DB   lsb(lowcase_)   ; f
01C6   00                     DB   lsb(lowcase_)   ; g
01C7   00                     DB   lsb(lowcase_)   ; h
01C8   00                     DB   lsb(lowcase_)   ; i
01C9   00                     DB   lsb(lowcase_)   ; j
01CA   00                     DB   lsb(lowcase_)   ; k
01CB   00                     DB   lsb(lowcase_)   ; l
01CC   00                     DB   lsb(lowcase_)   ; m
01CD   00                     DB   lsb(lowcase_)   ; n
01CE   00                     DB   lsb(lowcase_)   ; o
01CF   00                     DB   lsb(lowcase_)   ; p
01D0   00                     DB   lsb(lowcase_)   ; q
01D1   00                     DB   lsb(lowcase_)   ; r
01D2   00                     DB   lsb(lowcase_)   ; s
01D3   00                     DB   lsb(lowcase_)   ; t
01D4   00                     DB   lsb(lowcase_)   ; u
01D5   00                     DB   lsb(lowcase_)   ; v
01D6   00                     DB   lsb(lowcase_)   ; w
01D7   00                     DB   lsb(lowcase_)   ; x
01D8   00                     DB   lsb(lowcase_)   ; y
01D9   00                     DB   lsb(lowcase_)   ; z
01DA   CB                     DB   lsb(lbrace_)   ; {     1
01DB   D0                     DB   lsb(pipe_)   ; |     1
01DC   DB                     DB   lsb(rbrace_)   ; }     1
01DD   DE                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   00 5D                  DW   TIB   ; vTIBPtr pointer into TIB
01E0   00 5E                  DW   BUFFER   ; vBufPtr pointer into BUF
01E2   22 60                  DW   HEAP   ; vHeapPtr \h start of the free mem
01E4   00 00                  DW   NUL   ; vRecurPtr
01E6   02                     DB   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E7   0A                     DB   10   ; vNumBase = 10
01E8   24                     DB   "$"   ; vHexPrefix
01E9   FF                     DB   TRUE   ; vEcho
01EA   00                     DB   FALSE   ; vStrMode
01EB   00                     DB   0   
01EC   00                     DB   0   
01ED   00                     DB   0   
01EE   00                     DB   0   
01EF   00                     DB   0   
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                COLON_:      
0204   DD E9                  JP   (ix)   
0206                COMMA_:      
0206   C3 5E 0B               JP   comma   
0209                DOLLAR_:      
0209   C3 E1 0B               JP   dollar   
020C                DQUOTE_:      
020C                QUOTE_:      
020C   C3 0B 0C               JP   quote   
020F                DOT_:        
020F   C3 00 04               JP   dot   
0212                PERCENT_:      
0212   C3 25 0C               JP   percent   
0215                QUESTION_:      
0215   C3 FE 0B               JP   question   
0218                LPAREN_:      
0218   C3 CB 03               JP   lbrace   
021B                SLASH_:      
021B   C3 00 05               JP   slash   
021E                NUM_:        
021E   C3 5A 0C               JP   num   
0221                BANG_:       
0221                BANG:        ; logical invert, any non zero value
0221   03                     INC   bc   
0222   0A                     LD   a,(bc)   
0223   FE 3D                  CP   "="   
0225   20 05                  JR   nz,not   
0227   E1                     POP   hl   
0228   D1                     POP   de   
0229   C3 9C 0D               JP   notequals   
022C                NOT:         
022C   0B                     DEC   bc   
022D   21 00 00               LD   hl,0   ; is considered true
0230   18 0B                  JR   eq1   
0232                EQ_:         
0232                EQ:          
0232   03                     INC   bc   
0233   0A                     LD   a,(bc)   
0234   FE 3D                  CP   "="   
0236   28 04                  JR   z,eq0   
0238   0B                     DEC   bc   
0239   C3 84 0D               JP   assign   
023C                EQ0:         
023C   E1                     POP   hl   
023D                EQ1:         
023D   D1                     POP   de   
023E   C3 95 0D               JP   equals   
0241                GT_:         
0241                GT:          
0241   03                     INC   bc   
0242   0A                     LD   a,(bc)   
0243   FE 3E                  CP   ">"   
0245   CA FC 0D               JP   z,shiftRight   
0248   D1                     POP   de   
0249   E1                     POP   hl   
024A   18 09                  JR   lt1   
024C                LT_:         
024C                LT:          
024C   03                     INC   bc   
024D   0A                     LD   a,(bc)   
024E   FE 3C                  CP   "<"   
0250   CA E0 0D               JP   z,shiftLeft   
0253   E1                     POP   hl   
0254   D1                     POP   de   
0255                LT1:         
0255   FE 3D                  CP   "="   
0257   CA A3 0D               JP   z,lessthaneq   
025A   0B                     DEC   bc   
025B   C3 A8 0D               JP   lessthan   
025E                             ; index of an array, based on vDataWidth 22
025E                             ; array* num -- value    ; also sets vPointer to address
025E                HASH_:       
025E                SEMICOLON_:      
025E                SEMICOLON:      
025E                ARRAYINDEX:      
025E   E1                     POP   hl   ; hl = index
025F   D1                     POP   de   ; de = array
0260   3A EE 5F               LD   a,(vDataWidth)   ; a = data width
0263   3D                     DEC   a   
0264   28 01                  JR   z,arrayIndex1   
0266                ARRAYINDEX0:      
0266   29                     ADD   hl,hl   ; if data width = 2 then double
0267                ARRAYINDEX1:      
0267   19                     ADD   hl,de   ; add addr
0268   C3 95 0F               JP   variable   
026B                             ;                               4
026B                RPAREN_:      
026B                             ; jp rparen
026B                RPAREN:      
026B   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
026E   FD 46 09               LD   b,(iy+9)   
0271   DD E9                  JP   (ix)   
0273                             ; & and                          14
0273                             ; a b -- c
0273                AMPER_:      
0273                AMPER:       
0273                AND:         
0273   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0274   E1                     POP   hl   
0275   7B                     LD   a,e   
0276   A5                     AND   l   
0277   6F                     LD   l,a   
0278   7A                     LD   a,d   
0279   A4                     AND   h   
027A   67                     LD   h,a   
027B   18 5B                  JR   add3   
027D                             ; - sub
027D                             ; a b -- c
027D                             ; -- sub
027D                             ; b1 -- b2
027D                             ; -= sub
027D                             ; a b1 -- b2
027D                MINUS_:      
027D                MINUS:       
027D   03                     INC   bc   ; check if sign of a number
027E   0A                     LD   a,(bc)   
027F   0B                     DEC   bc   
0280   FE 30                  CP   "0"   
0282   38 05                  JR   c,sub   
0284   FE 3A                  CP   "9"+1   
0286   DA 5A 0C               JP   c,num   
0289                SUB:         ; Subtract the value 2nd on stack from top of stack
0289   E1                     POP   hl   ; hl = arg_b
028A   03                     INC   bc   
028B   FE 2D                  CP   "-"   
028D   20 04                  JR   nz,sub1   
028F   2B                     DEC   hl   ; --
0290   C3 86 0D               JP   assign0   
0293                SUB1:        
0293   D1                     POP   de   ; de = arg_a
0294   FE 3D                  CP   "="   
0296   28 02                  JR   z,sub2   
0298   0B                     DEC   bc   ; -
0299   EB                     EX   de,hl   
029A                SUB2:        
029A   B7                     OR   a   ; -=
029B   ED 52                  SBC   hl,de   
029D                SUB3:        
029D   FE 3D                  CP   "="   
029F   CA 86 0D               JP   z,assign0   
02A2   E5                     PUSH   hl   
02A3   DD E9                  JP   (ix)   
02A5                STAR_:       ; 21
02A5                STAR:        
02A5   03                     INC   bc   ; check for ** spread
02A6   0A                     LD   a,(bc)   
02A7   FE 2A                  CP   "*"   
02A9   CA BC 0D               JP   z,spread   
02AC   0B                     DEC   bc   
02AD                MUL:         
02AD   D1                     POP   de   ; get first value
02AE   E1                     POP   hl   
02AF                MUL2:        
02AF   C5                     PUSH   bc   ; Preserve the IP
02B0   44 4D                  LD   bc,hl   ; bc = 2nd value
02B2   21 00 00               LD   hl,0   
02B5   3E 10                  LD   a,16   
02B7                MUL3:        
02B7   29                     ADD   hl,hl   
02B8   CB 13                  RL   e   
02BA   CB 12                  RL   d   
02BC   30 04                  JR   nc,$+6   
02BE   09                     ADD   hl,bc   
02BF   30 01                  JR   nc,$+3   
02C1   13                     INC   de   
02C2   3D                     DEC   a   
02C3   20 F2                  JR   nz,mul3   
02C5   C1                     POP   bc   ; Restore the IP
02C6   C3 D8 02               JP   add3   
02C9                             ; + add                         25
02C9                             ; a b -- c
02C9                PLUS_:       
02C9                PLUS:        
02C9                ADD:         
02C9   03                     INC   bc   
02CA   0A                     LD   a,(bc)   
02CB   FE 2B                  CP   "+"   ; ++ increment variable
02CD   20 05                  JR   nz,add1   
02CF   E1                     POP   hl   
02D0   23                     INC   hl   
02D1   C3 86 0D               JP   assign0   
02D4                ADD1:        
02D4   0B                     DEC   bc   
02D5   D1                     POP   de   ; second term
02D6   E1                     POP   hl   ; first term
02D7   19                     ADD   hl,de   
02D8                ADD3:        
02D8   03                     INC   bc   
02D9   0A                     LD   a,(bc)   
02DA   FE 3D                  CP   "="   
02DC   28 04                  JR   z,add4   
02DE   0B                     DEC   bc   
02DF   E5                     PUSH   hl   
02E0   DD E9                  JP   (ix)   
02E2                ADD4:        
02E2   C3 86 0D               JP   assign0   
02E5                             ;                               18
02E5                UPCASE_:      
02E5                UPCASE:      
02E5   0A                     LD   a,(bc)   ; a = identifier char
02E6   D6 41                  SUB   "A"   ; "A" = 0
02E8   18 1B                  JR   ident1   
02EA                             ;********************** PAGE 2 END *********************************************
02EA                          ALIGN   $100   
0300                             ;********************** PAGE 3 BEGIN *********************************************
0300                LOWCASE_:      
0300                LOWCASE:      
0300   0A                     LD   a,(bc)   
0301   D6 61                  SUB   "a"   
0303   C6 1A                  ADD   a,26   
0305                IDENT1:      
0305   87                     ADD   a,a   ; l = a * 2
0306   6F                     LD   l,a   
0307   26 5F                  LD   h,msb(VARS)   
0309   22 F8 5F               LD   (vPointer),hl   ; store address in setter
030C   5E                     LD   e,(hl)   
030D   23                     INC   hl   
030E   56                     LD   d,(hl)   
030F   D5                     PUSH   de   
0310   DD E9                  JP   (ix)   
0312                             ; [                             14
0312                LBRACK_:      
0312                LBRACK:      
0312                ARRAYSTART:      
0312   11 00 00               LD   de,0   ; create stack frame
0315   D5                     PUSH   de   ; push null for IP
0316   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0319   FD 56 05               LD   d,(iy+5)   ; 
031C   D5                     PUSH   de   ; 
031D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0320   FD 56 03               LD   d,(iy+3)   ; 
0323   D5                     PUSH   de   ; 
0324   FD E5                  PUSH   iy   ; push BP
0326   FD 21 00 00            LD   iy,0   ; BP = SP
032A   FD 39                  ADD   iy,sp   
032C   DD E9                  JP   (ix)   
032E                             ; \                             19
032E                BACKSLASH_:      
032E                BACKSLASH:      
032E                LAMBDA:      
032E   DD E5                  PUSH   ix   
0330   CD 4E 0E               CALL   parseArgs   
0333                LAMBDA1:      
0333   03                     INC   bc   ; arg_list must ve immediately followed by {
0334   0A                     LD   a,(bc)   
0335   FE 21                  CP   " "+1   ; skip white space
0337   38 FA                  JR   c,lambda1   
0339   FE 7B                  CP   "{"   
033B   28 06                  JR   z,lambda2   
033D   21 02 00               LD   hl,2   ; error 2: parse error
0340   C3 4B 11               JP   error   
0343                LAMBDA2:      
0343   CD 84 0E               CALL   parseBlock   
0346   CD F3 0E               CALL   createFunc   
0349   E1                     POP   hl   
034A   DD E1                  POP   ix   
034C   E5                     PUSH   hl   
034D   DD E9                  JP   (ix)   
034F                RBRACK_:      
034F                RBRACK:      
034F                ARRAYEND:      ; 53
034F   FD 54                  LD   d,iyh   ; de = BP
0351   FD 5D                  LD   e,iyl   
0353   ED 43 04 60            LD   (vTemp1),bc   ; save IP
0357   62 6B                  LD   hl,de   ; hl = de = BP
0359   B7                     OR   a   
035A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
035C   CB 3C                  SRL   h   ; 
035E   CB 1D                  RR   l   
0360   44 4D                  LD   bc,hl   ; bc = count
0362   2A EA 5F               LD   hl,(vHeapPtr)   ; hl = array[-4]
0365   71                     LD   (hl),c   ; write num items in length word
0366   23                     INC   hl   
0367   70                     LD   (hl),b   
0368   23                     INC   hl   ; hl = array[0], bc = count
0369                             ; de = BP, hl = array[0], bc = count
0369   18 15                  JR   arrayEnd3   
036B                ARRAYEND1:      
036B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
036E   77                     LD   (hl),a   ; write lsb of array item
036F   23                     INC   hl   ; move to msb of array item
0370   3A EE 5F               LD   a,(vDataWidth)   ; vDataWidth=1?
0373   3D                     DEC   a   
0374   28 05                  JR   z,arrayEnd2   
0376   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0379   77                     LD   (hl),a   ; write msb of array item
037A   23                     INC   hl   ; move to next word in array
037B                ARRAYEND2:      
037B   FD 2B                  DEC   iy   ; move to next word on stack
037D   FD 2B                  DEC   iy   
037F   0B                     DEC   bc   ; dec items count
0380                ARRAYEND3:      
0380   79                     LD   a,c   ; if not zero loop
0381   B0                     OR   b   
0382   20 E7                  JR   nz,arrayEnd1   
0384   EB                     EX   de,hl   ; de = end of array, hl = BP
0385   F9                     LD   sp,hl   ; sp = BP
0386   E1                     POP   hl   ; de = end of array, hl = old BP
0387   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0388   FD 62                  LD   iyh,d   
038A   FD 6B                  LD   iyl,e   
038C   D1                     POP   de   ; pop arg_list (discard)
038D   D1                     POP   de   ; pop first_arg* (discard)
038E   D1                     POP   de   ; pop IP (discard)
038F   ED 5B EA 5F            LD   de,(vHeapPtr)   ; de = array[-2]
0393   13                     INC   de   
0394   13                     INC   de   
0395   D5                     PUSH   de   ; return array[0]
0396   22 EA 5F               LD   (vHeapPtr),hl   ; move heap* to end of array
0399   ED 4B 04 60            LD   bc,(vTemp1)   ; restore IP
039D   DD E9                  JP   (ix)   
039F                CARET_:      
039F                             ; execute a block of code which ends with } 116
039F                             ; creates a root scope if BP == stack
039F                             ; else uses outer scope
039F                CARET:       
039F                GO:          
039F   D1                     POP   de   ; de = block*
03A0                GO1:         
03A0   7B                     LD   a,e   ; if block* == null, exit
03A1   B2                     OR   d   
03A2   20 02                  JR   nz,go2   
03A4   DD E9                  JP   (ix)   
03A6                GO2:         
03A6   1A                     LD   a,(de)   
03A7   FE 7B                  CP   "{"   
03A9   CA F7 0C               JP   z,goBlock   
03AC   FE 28                  CP   "("   
03AE   C2 2A 0D               JP   nz,goFunc   
03B1   D5                     PUSH   de   ; push de just before stack frame
03B2   CA F7 0C               JP   z,goBlock   
03B5                GRAVE_:      
03B5                GRAVE:       
03B5                PRINTLITERAL:      
03B5   03                     INC   bc   ; move to first char
03B6   ED 5B E8 5F            LD   de,(vBufPtr)   ; de = buffer*
03BA   18 03                  JR   printLiteral1   
03BC                PRINTLITERAL0:      
03BC   12                     LD   (de),a   ; a -> buffer*
03BD   13                     INC   de   ; string*++,
03BE   03                     INC   bc   
03BF                PRINTLITERAL1:      
03BF   0A                     LD   a,(bc)   ; a <- string*
03C0   FE 60                  CP   "`"   ; if ` exit loop
03C2   20 F8                  JR   nz,printLiteral0   
03C4   ED 53 E8 5F            LD   (vBufPtr),de   ; save buffer*' in pointer
03C8   C3 34 0E               JP   dotNext   
03CB                LBRACE_:      
03CB                LBRACE:      
03CB   CD 84 0E               CALL   parseBlock   
03CE   DD E9                  JP   (ix)   
03D0                             ; | or                          11
03D0                             ; a b -- c
03D0                PIPE_:       
03D0                PIPE:        
03D0                OR:          
03D0   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03D1   E1                     POP   hl   
03D2   7B                     LD   a,e   
03D3   B5                     OR   l   
03D4   6F                     LD   l,a   
03D5   7A                     LD   a,d   
03D6   B4                     OR   h   
03D7   67                     LD   h,a   
03D8   C3 D8 02               JP   add3   
03DB                RBRACE_:      
03DB   C3 8A 0C               JP   rbrace   
03DE                             ; ~ char                        8
03DE                TILDE_:      
03DE   C3 D7 0B               JP   tilde   
03E1                UNDERSCORE_:      
03E1                CHAR:        
03E1   03                     INC   bc   ; point to next char
03E2   0A                     LD   a,(bc)   
03E3   6F                     LD   l,a   
03E4   26 00                  LD   h,0   
03E6   E5                     PUSH   hl   
03E7   DD E9                  JP   (ix)   
03E9                AT_:         
03E9                AT:          
03E9                ADDR:        
03E9   ED 5B F8 5F            LD   de,(vPointer)   
03ED   21 F8 5F               LD   hl,vPointer   
03F0   C3 95 0F               JP   variable   
03F3                             ;********************** PAGE 3 END *********************************************
03F3                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   CD C2 0F               CALL   cmdTable   
0403   61 00                  DB   "a",0   ; .a print array
0405   15 0B                  DW   printArray   
0407   63 00                  DB   "c",0   ; .c print char
0409   13 04                  DW   printChar   
040B   73 00                  DB   "s",0   ; .s print string
040D   22 04                  DW   printString   
040F   00 00                  DW   0   ; .  print number, fall through
0411   37 04                  DW   printNumber   
0413                             ; .c print char
0413                             ; char --
0413                PRINTCHAR:      
0413   E1                     POP   hl   ; a = char
0414   7D                     LD   a,l   
0415   ED 5B E8 5F            LD   de,(vBufPtr)   ; de = buffer*
0419   12                     LD   (de),a   
041A   13                     INC   de   
041B   ED 53 E8 5F            LD   (vBufPtr),de   ; save buffer*'
041F   C3 34 0E               JP   dotNext   
0422                             ; .s print string
0422                             ; string* --
0422                PRINTSTRING:      
0422   E1                     POP   hl   ; hl = string*
0423   ED 5B E8 5F            LD   de,(vBufPtr)   ; de = buffer*
0427   18 03                  JR   printString1   
0429                PRINTSTRING0:      
0429   12                     LD   (de),a   ; a -> buffer*
042A   13                     INC   de   ; string*++,
042B   23                     INC   hl   
042C                PRINTSTRING1:      
042C   7E                     LD   a,(hl)   ; a <- string*
042D   B7                     OR   a   ; if NUL exit loop
042E   20 F9                  JR   nz,printString0   
0430   ED 53 E8 5F            LD   (vBufPtr),de   ; save buffer*' in pointer
0434   C3 34 0E               JP   dotNext   
0437                             ; . print decimal
0437                             ; value --
0437                PRINTNUMBER:      
0437   3A EF 5F               LD   a,(vNumBase)   
043A   FE 10                  CP   16   
043C   CA A8 04               JP   z,printHex   ; else falls through
043F   C3 42 04               JP   printDec   
0442                             ; print decimal                 ; 70
0442                             ; value --
0442                PRINTDEC:      
0442   ED 5B E8 5F            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0446   D9                     EXX      
0447   E1                     POP   hl   ; hl = value
0448   3A EE 5F               LD   a,(vDataWidth)   
044B   3D                     DEC   a   
044C   20 02                  JR   nz,printDec1   
044E   26 00                  LD   h,0   
0450                PRINTDEC1:      
0450   CD 5F 04               CALL   printDec2   
0453   D9                     EXX      ; de = buffer*' bc = IP
0454   3E 20                  LD   a," "   ; append space to buffer
0456   12                     LD   (de),a   
0457   13                     INC   de   ; string*++,
0458   ED 53 E8 5F            LD   (vBufPtr),de   ; update buffer* with buffer*'
045C   C3 34 0E               JP   dotNext   
045F                             ; hl = value
045F                             ; de' = buffer*
045F                             ; a, bc, de, hl destroyed
045F                PRINTDEC2:      
045F   CB 7C                  BIT   7,h   
0461   28 0C                  JR   z,printDec3   
0463   D9                     EXX      
0464   3E 2D                  LD   a,"-"   
0466   12                     LD   (de),a   
0467   13                     INC   de   
0468   D9                     EXX      
0469   AF                     XOR   a   
046A   95                     SUB   l   
046B   6F                     LD   l,a   
046C   9F                     SBC   a,a   
046D   94                     SUB   h   
046E   67                     LD   h,a   
046F                PRINTDEC3:      
046F   0E 00                  LD   c,0   ; leading zeros flag = false
0471   11 F0 D8               LD   de,-10000   
0474   CD 8F 04               CALL   printDec4   
0477   11 18 FC               LD   de,-1000   
047A   CD 8F 04               CALL   printDec4   
047D   11 9C FF               LD   de,-100   
0480   CD 8F 04               CALL   printDec4   
0483   1E F6                  LD   e,-10   
0485   CD 8F 04               CALL   printDec4   
0488   0C                     INC   c   ; flag = true for at least digit
0489   1E FF                  LD   e,-1   
048B   CD 8F 04               CALL   printDec4   
048E   C9                     RET      
048F                PRINTDEC4:      
048F   06 2F                  LD   b,"0"-1   
0491                PRINTDEC5:      
0491   04                     INC   b   
0492   19                     ADD   hl,de   
0493   38 FC                  JR   c,printDec5   
0495   ED 52                  SBC   hl,de   
0497   3E 30                  LD   a,"0"   
0499   B8                     CP   b   
049A   20 05                  JR   nz,printDec6   
049C   AF                     XOR   a   
049D   B1                     OR   c   
049E   C8                     RET   z   
049F   18 01                  JR   printDec7   
04A1                PRINTDEC6:      
04A1   0C                     INC   c   
04A2                PRINTDEC7:      
04A2   78                     LD   a,b   
04A3   D9                     EXX      
04A4   12                     LD   (de),a   
04A5   13                     INC   de   
04A6   D9                     EXX      
04A7   C9                     RET      
04A8                             ; buffer hex                    37
04A8                             ; value --
04A8                PRINTHEX:      
04A8   ED 5B E8 5F            LD   de,(vBufPtr)   
04AC   3A F0 5F               LD   a,(vHexPrefix)   ; "$"
04AF   B7                     OR   a   ; skip if null
04B0   28 02                  JR   z,printHex1   
04B2   12                     LD   (de),a   
04B3   13                     INC   de   ; string*++,
04B4                PRINTHEX1:      
04B4   E1                     POP   hl   ; hl = value
04B5   3A EE 5F               LD   a,(vDataWidth)   
04B8   3D                     DEC   a   
04B9   28 04                  JR   z,printHex2   
04BB   7C                     LD   a,h   
04BC   CD CE 04               CALL   printHex3   
04BF                PRINTHEX2:      
04BF   7D                     LD   a,l   
04C0   CD CE 04               CALL   printHex3   
04C3   3E 20                  LD   a," "   ; append space to buffer
04C5   12                     LD   (de),a   
04C6   13                     INC   de   ; string*++,
04C7   ED 53 E8 5F            LD   (vBufPtr),de   
04CB   C3 34 0E               JP   dotNext   
04CE                PRINTHEX3:      
04CE   F5                     PUSH   af   
04CF   1F                     RRA      
04D0   1F                     RRA      
04D1   1F                     RRA      
04D2   1F                     RRA      
04D3   CD D7 04               CALL   printHex4   
04D6   F1                     POP   af   
04D7                PRINTHEX4:      
04D7   E6 0F                  AND   0x0F   
04D9   C6 90                  ADD   a,0x90   
04DB   27                     DAA      
04DC   CE 40                  ADC   a,0x40   
04DE   27                     DAA      
04DF   12                     LD   (de),a   
04E0   13                     INC   de   ; string*++,
04E1   C9                     RET      
04E2                             ;********************** PAGE 4 END *********************************************
04E2                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA CB 06               JP   z,comment   
0507   0B                     DEC   bc   
0508   CD A7 0F               CALL   charTable   
050B   26                     DB   lsb(command_a_)   
050C   45                     DB   lsb(command_b_)   
050D   00                     DB   0   
050E   54                     DB   lsb(command_d_)   
050F   00                     DB   0   
0510   6E                     DB   lsb(command_f_)   
0511   00                     DB   0   
0512   A1                     DB   lsb(command_h_)   
0513   AC                     DB   lsb(command_i_)   
0514   00                     DB   0   
0515   00                     DB   0   
0516   00                     DB   0   
0517   B7                     DB   lsb(command_m_)   
0518   00                     DB   0   
0519   CA                     DB   lsb(comand_o_)   
051A   D5                     DB   lsb(command_p_)   
051B   00                     DB   0   
051C   DC                     DB   lsb(command_r_)   
051D   DE                     DB   lsb(command_s_)   
051E   E0                     DB   lsb(command_t_)   
051F   00                     DB   0   
0520   E2                     DB   lsb(command_v_)   
0521   E4                     DB   lsb(command_w_)   
0522   E6                     DB   lsb(command_x_)   
0523   00                     DB   0   
0524   00                     DB   0   
0525   E8                     DB   lsb(command_default_)   
0526                             ; 12
0526                COMMAND_A_:      
0526   CD C2 0F               CALL   cmdTable   
0529   62 73                  DB   "bs"   ; /abs absolute
052B   77 06                  DW   absolute   
052D   64 72                  DB   "dr"   ; /adr address of
052F   85 06                  DW   addrOf   
0531   69 00                  DB   "i",0   ; /ai array iterator
0533   83 08                  DW   arrayIter   
0535   6C 63                  DB   "lc"   ; /alc mem allocate
0537   F7 06                  DW   memAllocate   
0539   6C 6E                  DB   "ln"   ; /al array length
053B   8D 06                  DW   arrayLength   
053D   73 00                  DB   "s",0   ; /as array size
053F   96 06                  DW   arraySize   
0541   00 00                  DW   0   
0543   E6 06                  DW   error1   
0545                COMMAND_B_:      
0545   CD C2 0F               CALL   cmdTable   
0548   79 65                  DB   "ye"   ; /bye cold reboot
054A   9C 10                  DW   coldStart   
054C   79 74                  DB   "yt"   ; /byt byte mode
054E   C4 06                  DW   byteMode   
0550   00 00                  DW   0   
0552   E6 06                  DW   error1   
0554                COMMAND_D_:      
0554   CD C2 0F               CALL   cmdTable   
0557   65 63                  DB   "ec"   ; /dec decimal
0559   D4 06                  DW   decBase   
055B   00 00                  DW   0   
055D   E6 06                  DW   error1   
055F                COMMAND_E:      
055F   CD C2 0F               CALL   cmdTable   
0562   63 68                  DB   "ch"   
0564   DB 06                  DW   echo   
0566   6E 64                  DB   "nd"   
0568   6A 07                  DW   stringEnd   
056A   00 00                  DW   0   
056C   E6 06                  DW   error1   
056E                COMMAND_F_:      
056E   CD C2 0F               CALL   cmdTable   
0571   61 6C                  DB   "al"   ; /fal false
0573   B6 0D                  DW   false1   
0575   64 00                  DB   "d",0   ; /fd fold
0577   3D 0A                  DW   fold   
0579   6F 72                  DB   "or"   ; /for forEach
057B   8E 0A                  DW   forEach   
057D   72 65                  DB   "re"   ; /fre free memory
057F   F9 06                  DW   memFree   
0581   72 61                  DB   "ra"   ; /fra free memory array
0583   FF 06                  DW   memFreeArray   
0585   73 00                  DB   "s",0   ; /fs funcSrc
0587   DA 0A                  DW   funcSrc   
0589   74 00                  DB   "t",0   ; /ft filter
058B   DC 09                  DW   filter   
058D   31 00                  DB   "1",0   
058F   8D 11                  DW   f1   
0591   32 00                  DB   "2",0   
0593   99 11                  DW   f2   
0595   33 00                  DB   "3",0   
0597   A5 11                  DW   f3   
0599   34 00                  DB   "4",0   
059B   B1 11                  DW   f4   
059D   00 00                  DW   0   
059F   E6 06                  DW   error1   
05A1                COMMAND_H_:      
05A1   CD C2 0F               CALL   cmdTable   
05A4   65 78                  DB   "ex"   ; /hex hex
05A6   E1 06                  DW   hexBase   
05A8   00 00                  DW   0   
05AA   E6 06                  DW   error1   
05AC                COMMAND_I_:      
05AC   CD C2 0F               CALL   cmdTable   
05AF   6E 00                  DB   "n",0   ; /in input
05B1   EC 06                  DW   input   
05B3   00 00                  DW   0   
05B5   E6 06                  DW   error1   
05B7                COMMAND_M_:      
05B7   CD C2 0F               CALL   cmdTable   
05BA   61 70                  DB   "ap"   ; /map map
05BC   9A 09                  DW   map   
05BE   61 78                  DB   "ax"   ; /max maximum
05C0   04 07                  DW   maximum   
05C2   69 6E                  DB   "in"   ; /min minimum
05C4   10 07                  DW   minimum   
05C6   00 00                  DW   0   
05C8   E6 06                  DW   error1   
05CA                COMAND_O_:      
05CA   CD C2 0F               CALL   cmdTable   
05CD   75 74                  DB   "ut"   ; /out out
05CF   1C 07                  DW   output   
05D1   00 00                  DW   0   
05D3   E6 06                  DW   error1   
05D5                COMMAND_P_:      
05D5   CD C2 0F               CALL   cmdTable   
05D8   00 00                  DW   0   
05DA   E6 06                  DW   error1   
05DC                COMMAND_R_:      
05DC   18 0D                  JR   command_r   
05DE                COMMAND_S_:      
05DE   18 22                  JR   command_s   
05E0                COMMAND_T_:      
05E0   18 3F                  JR   command_t   
05E2                COMMAND_V_:      
05E2   18 48                  JR   command_v   
05E4                COMMAND_W_:      
05E4   18 55                  JR   command_w   
05E6                COMMAND_X_:      
05E6   18 62                  JR   command_x   
05E8                             ; 3
05E8                COMMAND_DEFAULT_:      
05E8   C3 55 06               JP   command_default   
05EB                             ;********************** PAGE 5 END *********************************************
05EB                             ; .align $100
05EB                COMMAND_R:      
05EB   CD C2 0F               CALL   cmdTable   
05EE   63 00                  DB   "c",0   ; /rc tail call optimisation
05F0   2F 07                  DW   recur   
05F2   65 6D                  DB   "em"   ; /rem remainder
05F4   35 07                  DW   remain   
05F6   65 74                  DB   "et"   ; /ret return
05F8   25 07                  DW   return   
05FA   6E 67                  DB   "ng"   ; /rng range src
05FC   EA 07                  DW   rangeSrc   
05FE   00 00                  DW   0   
0600   E6 06                  DW   error1   
0602                COMMAND_S:      
0602   CD C2 0F               CALL   cmdTable   
0605   63 00                  DB   "c",0   
0607   B4 07                  DW   stringCompare   
0609   65 6C                  DB   "el"   
060B   3B 07                  DW   select   
060D   69 00                  DB   "i",0   
060F   0A 09                  DW   stringIter   
0611   6C 00                  DB   "l",0   
0613   99 07                  DW   stringLength   
0615   73 00                  DB   "s",0   
0617   A8 07                  DW   stringSize   
0619   74 72                  DB   "tr"   ; /str
061B   62 07                  DW   stringBegin   
061D   00 00                  DW   0   
061F   E6 06                  DW   error1   
0621                COMMAND_T:      
0621   CD C2 0F               CALL   cmdTable   
0624   72 75                  DB   "ru"   
0626   B0 0D                  DW   true1   
0628   00 00                  DW   0   
062A   E6 06                  DW   error1   
062C                COMMAND_V:      
062C   CD C2 0F               CALL   cmdTable   
062F   61 72                  DB   "ar"   
0631   00 5F                  DW   vars   
0633   6F 69                  DB   "oi"   
0635   D2 07                  DW   void   
0637   00 00                  DW   0   
0639   E6 06                  DW   error1   
063B                COMMAND_W:      
063B   CD C2 0F               CALL   cmdTable   
063E   68 69                  DB   "hi"   ; /whi while true else break from loop
0640   AA 06                  DW   while   
0642   72 64                  DB   "rd"   ; /wrd word mode
0644   DA 07                  DW   wordMode   
0646   00 00                  DW   0   
0648   E6 06                  DW   error1   
064A                COMMAND_X:      
064A   CD C2 0F               CALL   cmdTable   
064D   6F 72                  DB   "or"   ; /xor exclsuive or
064F   DF 07                  DW   xor   
0651   00 00                  DW   0   
0653   E6 06                  DW   error1   
0655                COMMAND_DEFAULT:      
0655   CD C2 0F               CALL   cmdTable   
0658   00 00                  DW   0   
065A   5C 06                  DW   div   
065C                             ;                               32
065C                DIV:         
065C   E1                     POP   hl   ; hl = arg_b
065D   D1                     POP   de   ; de = arg_a
065E   03                     INC   bc   
065F   0A                     LD   a,(bc)   
0660   FE 3D                  CP   "="   
0662   28 02                  JR   z,div2   
0664   0B                     DEC   bc   ; /
0665   EB                     EX   de,hl   
0666                DIV2:        
0666   F5                     PUSH   af   ; preserve af, bc
0667   C5                     PUSH   bc   
0668   44 4D                  LD   bc,hl   
066A   CD 1B 0E               CALL   divide   
066D   EB                     EX   de,hl   
066E   ED 53 FA 5F            LD   (vRemain),de   
0672   C1                     POP   bc   ; restore
0673   F1                     POP   af   
0674   C3 9D 02               JP   sub3   
0677                             ; /abs absolute
0677                             ; num -- num
0677                ABSOLUTE:      
0677   E1                     POP   hl   
0678   CB 7C                  BIT   7,h   
067A   28 06                  JR   z,absolute1   
067C   AF                     XOR   a   
067D   95                     SUB   l   
067E   6F                     LD   l,a   
067F   9F                     SBC   a,a   
0680   94                     SUB   h   
0681   67                     LD   h,a   
0682                ABSOLUTE1:      
0682   E5                     PUSH   hl   
0683   DD E9                  JP   (ix)   
0685                             ; /adr addrOf
0685                             ; char -- addr
0685                ADDROF:      
0685   E1                     POP   hl   ; a = char
0686   7D                     LD   a,l   
0687   CD E4 0F               CALL   getVarAddr   
068A   E5                     PUSH   hl   
068B                ADDROF2:      
068B   DD E9                  JP   (ix)   
068D                             ; /al length of an array, num elements
068D                             ; array* -- num
068D                ARRAYLENGTH:      
068D   E1                     POP   hl   
068E   2B                     DEC   hl   ; msb size
068F   56                     LD   d,(hl)   
0690   2B                     DEC   hl   ; lsb size
0691   5E                     LD   e,(hl)   
0692   EB                     EX   de,hl   
0693                ARRAYLENGTH1:      
0693   E5                     PUSH   hl   
0694   DD E9                  JP   (ix)   
0696                             ; /as size in bytes of an array, based on current data width
0696                             ; array* -- num
0696                ARRAYSIZE:      
0696                          ;*Macro unroll:  PERFORM arrayLength
0696   DD 21 9D 06            LD   ix,performM_1548S1072   
069A   C3 8D 06               JP   arrayLength   
069D                PERFORMM_1548S1072:      
069D   E1                     POP   hl   
069E   3A EE 5F               LD   a,(vDataWidth)   
06A1   3D                     DEC   a   
06A2   28 EF                  JR   z,arrayLength1   
06A4   CB 3C                  SRL   h   
06A6   CB 1D                  RR   l   
06A8   18 E9                  JR   arrayLength1   
06AA                             ; 13
06AA                             ; /whi while true else break from loop
06AA                             ; --
06AA                WHILE:       
06AA   E1                     POP   hl   ; hl = condition, break if false
06AB   7D                     LD   a,l   
06AC   B4                     OR   h   
06AD   28 02                  JR   z,while1   
06AF   DD E9                  JP   (ix)   
06B1                WHILE1:      
06B1   FD 5D                  LD   e,iyl   ; get block* just under stack frame
06B3   FD 54                  LD   d,iyh   
06B5   21 08 00               LD   hl,8   
06B8   19                     ADD   hl,de   
06B9   23                     INC   hl   
06BA   23                     INC   hl   
06BB   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
06BE   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
06C1   C3 8A 0C               JP   blockEnd   
06C4                             ; /byt
06C4                BYTEMODE:      
06C4   3E 01                  LD   a,1   
06C6                BYTEMODE1:      
06C6   32 EE 5F               LD   (vDataWidth),a   
06C9   DD E9                  JP   (ix)   
06CB                             ; //
06CB                COMMENT:      
06CB   03                     INC   bc   ; point to next char
06CC   0A                     LD   a,(bc)   
06CD   FE 20                  CP   " "   ; terminate on any char less than SP
06CF   30 FA                  JR   nc,comment   
06D1   0B                     DEC   bc   
06D2   DD E9                  JP   (ix)   
06D4                DECBASE:      
06D4   3E 0A                  LD   a,10   
06D6                DECBASE1:      
06D6   32 EF 5F               LD   (vNumBase),a   
06D9   DD E9                  JP   (ix)   
06DB                             ; /ech
06DB                             ; bool --
06DB                ECHO:        
06DB   E1                     POP   hl   
06DC   22 F1 5F               LD   (vEcho),hl   
06DF   DD E9                  JP   (ix)   
06E1                HEXBASE:      
06E1   3E 10                  LD   a,16   
06E3   C3 D6 06               JP   decBase1   
06E6                ERROR1:      
06E6   21 01 00               LD   hl,1   ; error 1: unknown command
06E9   C3 4B 11               JP   error   
06EC                             ; Z80 port input
06EC                             ; port -- value
06EC                INPUT:       
06EC   E1                     POP   hl   
06ED   59                     LD   e,c   ; save IP
06EE   4D                     LD   c,l   
06EF   ED 68                  IN   l,(c)   
06F1   26 00                  LD   h,0   
06F3   4B                     LD   c,e   ; restore IP
06F4   E5                     PUSH   hl   
06F5   DD E9                  JP   (ix)   
06F7                             ; /alc
06F7                             ; size -- adr
06F7                MEMALLOCATE:      
06F7   DD E9                  JP   (ix)   
06F9                             ; /fre
06F9                             ; adr --
06F9                MEMFREE:      
06F9   E1                     POP   hl   
06FA                MEMFREE1:      
06FA   22 EA 5F               LD   (vHeapPtr),hl   
06FD   DD E9                  JP   (ix)   
06FF                             ; /fra
06FF                             ; adr --
06FF                MEMFREEARRAY:      
06FF   E1                     POP   hl   
0700   2B                     DEC   hl   
0701   2B                     DEC   hl   
0702   18 F6                  JR   memFree1   
0704                             ; /max maximum
0704                             ; a b -- c
0704                MAXIMUM:      
0704   E1                     POP   hl   
0705   D1                     POP   de   
0706   E5                     PUSH   hl   
0707   B3                     OR   e   
0708   ED 52                  SBC   hl,de   
070A   30 02                  JR   nc,maximum1   
070C   E1                     POP   hl   
070D   D5                     PUSH   de   
070E                MAXIMUM1:      
070E   DD E9                  JP   (ix)   
0710                             ; /min minimum
0710                             ; a b -- c
0710                MINIMUM:      
0710   E1                     POP   hl   
0711   D1                     POP   de   
0712   E5                     PUSH   hl   
0713   B3                     OR   e   
0714   ED 52                  SBC   hl,de   
0716   38 02                  JR   c,minimum1   
0718   E1                     POP   hl   
0719   D5                     PUSH   de   
071A                MINIMUM1:      
071A   DD E9                  JP   (ix)   
071C                             ; /o Z80 port output
071C                             ; value port --
071C                OUTPUT:      
071C   E1                     POP   hl   
071D   59                     LD   e,c   ; save IP
071E   4D                     LD   c,l   
071F   E1                     POP   hl   
0720   ED 69                  OUT   (c),l   
0722   4B                     LD   c,e   ; restore IP
0723   DD E9                  JP   (ix)   
0725                             ; /ret
0725                             ; --
0725                RETURN:      
0725   E1                     POP   hl   ; hl = condition, exit if true
0726   7D                     LD   a,l   
0727   B4                     OR   h   
0728   20 02                  JR   nz,return1   
072A   DD E9                  JP   (ix)   
072C                RETURN1:      
072C   C3 8A 0C               JP   blockEnd   
072F                RECUR:       
072F   E1                     POP   hl   
0730   22 EC 5F               LD   (vRecurPtr),hl   
0733   DD E9                  JP   (ix)   
0735                REMAIN:      
0735   2A FA 5F               LD   hl,(vRemain)   
0738   E5                     PUSH   hl   
0739   DD E9                  JP   (ix)   
073B                             ; select case from an associative array of cases
073B                             ; bool cases* --
073B                SELECT:      
073B   E1                     POP   hl   ; hl = case associative array [ key1 value1 ... ]
073C   D1                     POP   de   ; de = select key
073D   C5                     PUSH   bc   ; save IP
073E   2B                     DEC   hl   ; bc = array length
073F   46                     LD   b,(hl)   
0740   2B                     DEC   hl   
0741   4E                     LD   c,(hl)   
0742   23                     INC   hl   
0743   23                     INC   hl   
0744   18 15                  JR   select2   
0746                SELECT1:      
0746   7E                     LD   a,(hl)   ; compare lsb case key with lsb select key, hl++
0747   BB                     CP   e   
0748   23                     INC   hl   ; hl++, flags are unaltered
0749   20 0C                  JR   nz,select1a   
074B   7E                     LD   a,(hl)   ; compare msb case key with msb select key, hl++
074C   BA                     CP   d   
074D   23                     INC   hl   ; hl++, flags are unaltered
074E   20 08                  JR   nz,select1b   
0750   5E                     LD   e,(hl)   
0751   23                     INC   hl   
0752   56                     LD   d,(hl)   
0753   C1                     POP   bc   
0754   C3 A0 03               JP   go1   
0757                SELECT1A:      
0757   23                     INC   hl   
0758                SELECT1B:      
0758   23                     INC   hl   
0759   23                     INC   hl   
075A   0B                     DEC   bc   
075B                SELECT2:      
075B   79                     LD   a,c   
075C   B0                     OR   b   
075D   20 E7                  JR   nz,select1   
075F   C1                     POP   bc   
0760   DD E9                  JP   (ix)   
0762                             ; /str
0762                STRINGBEGIN:      
0762   21 FF FF               LD   hl,TRUE   ; string mode = true
0765   22 F2 5F               LD   (vStrMode),hl   
0768   18 27                  JR   stringEnd1   ; save hl in vBufPtr
076A                             ; /end
076A                STRINGEND:      
076A   21 00 00               LD   hl,FALSE   ; string mode = false
076D   22 F2 5F               LD   (vStrMode),hl   
0770   2A E8 5F               LD   hl,(vBufPtr)   ; append NUL to string
0773   AF                     XOR   a   
0774   77                     LD   (hl),a   
0775   23                     INC   hl   ; hl = string_end*
0776   ED 43 04 60            LD   (vTemp1),bc   ; save IP
077A   11 00 5E               LD   de,BUFFER   ; de = string*
077D   B7                     OR   a   ; bc = size
077E   ED 52                  SBC   hl,de   
0780   44 4D                  LD   bc,hl   
0782   2A EA 5F               LD   hl,(vHeapPtr)   ; hl = hstring*
0785   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
0786   D5                     PUSH   de   ; return hstring*
0787   ED B0                  LDIR      ; copy size bytes from string* to hstring*
0789   ED 53 EA 5F            LD   (vHeapPtr),de   ; bump heap to hstring* += size
078D   ED 4B 04 60            LD   bc,(vTemp1)   ; restore IP
0791                STRINGEND1:      
0791   21 00 5E               LD   hl,BUFFER   ; reset vBufPtr
0794   22 E8 5F               LD   (vBufPtr),hl   
0797   DD E9                  JP   (ix)   
0799                STRINGLENGTH:      
0799   D1                     POP   de   
079A   21 00 00               LD   hl,0   
079D   18 02                  JR   stringLength2   
079F                STRINGLENGTH1:      
079F   13                     INC   de   
07A0   23                     INC   hl   
07A1                STRINGLENGTH2:      
07A1   1A                     LD   a,(de)   
07A2   B7                     OR   a   
07A3   20 FA                  JR   nz,stringLength1   
07A5                STRINGLENGTH3:      
07A5   E5                     PUSH   hl   
07A6   DD E9                  JP   (ix)   
07A8                STRINGSIZE:      
07A8                          ;*Macro unroll:  PERFORM stringLength
07A8   DD 21 AF 07            LD   ix,performM_1771S1317   
07AC   C3 99 07               JP   stringLength   
07AF                PERFORMM_1771S1317:      
07AF   E1                     POP   hl   
07B0   23                     INC   hl   
07B1   C3 A5 07               JP   stringLength3   
07B4                             ; /sc string compare
07B4                             ; string1* string2* -- bool
07B4                             ; Compares two null terminated strings.
07B4                STRINGCOMPARE:      
07B4   D1                     POP   de   
07B5   E1                     POP   hl   
07B6                STRINGCOMPARE1:      
07B6   1A                     LD   a,(de)   
07B7   BE                     CP   (hl)   
07B8   20 07                  JR   nz,stringCompare2   
07BA   B7                     OR   a   
07BB   28 09                  JR   z,stringCompare3   
07BD   13                     INC   de   
07BE   23                     INC   hl   
07BF   18 F5                  JR   stringCompare1   
07C1                STRINGCOMPARE2:      
07C1   21 00 00               LD   hl,FALSE   
07C4   18 03                  JR   stringCompare4   
07C6                STRINGCOMPARE3:      
07C6   21 FF FF               LD   hl,TRUE   
07C9                STRINGCOMPARE4:      
07C9   E5                     PUSH   hl   
07CA   DD E9                  JP   (ix)   
07CC                             ; /var
07CC                             ; --
07CC                VARIABLES:      
07CC   21 00 5F               LD   hl,VARS   
07CF   C3 A4 0F               JP   constant   
07D2                             ; /voi clear out returned values
07D2                             ; ?? --
07D2                VOID:        
07D2   FD 5D                  LD   e,iyl   
07D4   FD 54                  LD   d,iyh   
07D6   EB                     EX   de,hl   
07D7   F9                     LD   sp,hl   
07D8   DD E9                  JP   (ix)   
07DA                             ; /wrd
07DA                WORDMODE:      
07DA   3E 02                  LD   a,2   
07DC   C3 C6 06               JP   byteMode1   
07DF                             ; /xor
07DF                XOR:         
07DF   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
07E0                XOR1:        
07E0   E1                     POP   hl   
07E1   7B                     LD   a,e   
07E2   AD                     XOR   l   
07E3   6F                     LD   l,a   
07E4   7A                     LD   a,d   
07E5   AC                     XOR   h   
07E6   67                     LD   h,a   
07E7   C3 D8 02               JP   add3   
07EA                             ;*******************************************************************
07EA                             ; Monty implementations
07EA                             ;*******************************************************************
07EA                             ; /rng rangeSrc
07EA                             ; begin end step -- src
07EA                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
07EA                RANGESRC:      ; range source: begin, end, step, local: L
07EA   CD 9F 03               CALL   go   
07ED   00 00                  DW   NUL   
07EF   F9 07                  DW   rangeSrcM_1832S1385   
07F1   F3 07                  DW   $+2   
07F3   01                     DB   1   
07F4   04 62 65 73 4C         .PSTR   "besL"   
07F9                RANGESRCM_1832S1385:      
07F9   7B                     DB   "{"   ; init mutable L [index active inrange_test]
07FA   5B 25 62 20 2F 74 72 75 20 25 73 30 3E 7B 7B 25 61 25 65 3C 7D 7D 7B 7B 25 61 25 65 3E 7D 7D 3F 5D 20 25 4C 3D 20 DB   "[%b /tru %s0>{{%a%e<}}{{%a%e>}}?] %L= "   
0820   5C 6B 74 7B            DB   "\\kt{"   
0824   30 25 74 21 3D 2F 72 65 74 DB   "0%t!=/ret"   ; break if type != 0
082D   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
0833   25 4C 31 3B 21 2F 72 65 74 DB   "%L1;!/ret"   ; if not active don't send
083C   25 4C 30 3B 20 25 61 3D DB   "%L0; %a="   ; store current index in A
0844   25 73 20 25 4C 30 3B 20 2B 3D DB   "%s %L0; +="   ; inc value of index by step
084E   31 25 74 21 3D 2F 72 65 74 DB   "1%t!=/ret"   ; break if type != 0
0857   25 4C 32 3B 5E         DB   "%L2;^"   ; ifte: inrange_test?
085C   7B 25 61 20 31 7D 7B 2F 66 61 6C 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%a 1}{/fal %L1;= 0 2}"   ; ifte: /tru index, /fal active = false, quit
0872   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
0879   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0880   7D                     DB   "}"   
0881   7D                     DB   "}"   
0882   00                     DB   0   
0883                             ; /ai arrayIter
0883                             ; array* -- src
0883                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
0883                ARRAYITER:      
0883   CD 9F 03               CALL   go   
0886   00 00                  DW   NUL   
0888   90 08                  DW   arrayIterM_1851S1405   
088A   8C 08                  DW   $+2   
088C   01                     DB   1   
088D   02 61 4C               .PSTR   "aL"   
0890                ARRAYITERM_1851S1405:      
0890   7B                     DB   "{"   
0891   5B 30 20 2F 74 72 75 20 25 61 2F 61 6C 5D 20 25 4C 3D DB   "[0 /tru %a/al] %L="   ; init mutable L [index active size]
08A3   5C 6B 74 7B            DB   "\\kt{"   
08A7   30 25 74 21 3D 2F 72 65 74 DB   "0%t!=/ret"   ; break if type != 0
08B0   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
08B6   25 4C 31 3B 21 2F 72 65 74 DB   "%L1;!/ret"   ; if not active don't send
08BF   25 4C 30 3B 20 25 69 3D DB   "%L0; %i="   ; store current index in i
08C7   25 4C 30 3B 20 2B 2B   DB   "%L0; ++"   ; inc value of index
08CE   31 25 74 21 3D 2F 72 65 74 DB   "1%t!=/ret"   ; break if type != 0
08D7   25 69 20 25 4C 32 3B 20 3C DB   "%i %L2; <"   ; ifte: index < size
08E0   7B 25 61 25 69 3B 20 31 7D 7B 2F 66 61 6C 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%a%i; 1}{/fal %L1;= 0 2}"   ; ifte: /tru value, /fal active = false, quit
08F9   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
0900   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0907   7D                     DB   "}"   
0908   7D                     DB   "}"   
0909   00                     DB   0   
090A                             ; /si stringIter
090A                             ; string* -- src
090A                          ;*Macro unroll: FUNC stringIter, 1, "sL"
090A                STRINGITER:      
090A   CD 9F 03               CALL   go   
090D   00 00                  DW   NUL   
090F   17 09                  DW   stringIterM_1870S1425   
0911   13 09                  DW   $+2   
0913   01                     DB   1   
0914   02 73 4C               .PSTR   "sL"   
0917                STRINGITERM_1870S1425:      
0917   7B                     DB   "{"   
0918   5B 30 20 2F 74 72 75 5D 20 25 4C 3D DB   "[0 /tru] %L="   ; init mutable L [index active]
0924   5C 6B 74 7B            DB   "\\kt{"   
0928   30 25 74 21 3D 2F 72 65 74 DB   "0%t!=/ret"   ; break if type != 0
0931   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
0938   25 4C 31 3B 21 2F 72 65 74 DB   "%L1;!/ret"   ; if not active don't send
0941   25 4C 30 3B 20 25 69 3D DB   "%L0; %i="   ; store current index in A
0949   25 4C 30 3B 20 2B 2B   DB   "%L0; ++"   ; inc value of index by step
0950   2F 62 79 74 20 25 73 25 69 3B 20 2F 77 72 64 20 25 63 3D DB   "/byt %s%i; /wrd %c="   ; read byte at i, store in c as word
0963   31 25 74 21 3D 2F 72 65 74 DB   "1%t!=/ret"   ; break if type != 0
096C   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
0973   7B 25 63 20 31 7D 7B 2F 66 61 6C 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%c 1}{/fal %L1;= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
0989   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: call sink note: /rc recur
0990   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0997   7D                     DB   "}"   
0998   7D                     DB   "}"   
0999   00                     DB   0   
099A                             ; /map map
099A                             ; src func -- src1
099A                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
099A                MAP:         ; map: source, function
099A   CD 9F 03               CALL   go   
099D   00 00                  DW   NUL   
099F   A7 09                  DW   mapM_1890S1447   
09A1   A3 09                  DW   $+2   
09A3   00                     DB   0   
09A4   02 73 66               .PSTR   "sf"   
09A7                MAPM_1890S1447:      
09A7   7B                     DB   "{"   
09A8   5C 6B 74 7B            DB   "\\kt{"   
09AC   30 25 74 21 3D 2F 72 65 74 DB   "0%t!=/ret"   ; break if type != 0
09B5   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09B9   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
09BE   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
09CA   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
09D2   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09D9   7D                     DB   "}"   
09DA   7D                     DB   "}"   
09DB   00                     DB   0   
09DC                             ; /ft filter
09DC                             ; src pred -- src1
09DC                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
09DC                FILTER:      ; filter: source, predicate, local: T
09DC   CD 9F 03               CALL   go   
09DF   00 00                  DW   NUL   
09E1   EA 09                  DW   filterM_1904S1462   
09E3   E5 09                  DW   $+2   
09E5   01                     DB   1   
09E6   03 73 70 54            .PSTR   "spT"   
09EA                FILTERM_1904S1462:      
09EA   7B                     DB   "{"   
09EB   5B 30 5D 25 54 3D      DB   "[0]%T="   
09F1   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09F5   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09F9   5B                     DB   "["   
09FA   7B 25 64 20 25 54 30 3B 3D 20 2F 74 72 75 7D DB   "{%d %T0;= /tru}"   ; case 0: store talkback in T[0], return true
0A09   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
0A11   7B 2F 74 72 75 7D      DB   "{/tru}"   ; case 2: return true
0A17   5D 25 74 3B 5E         DB   "]%t;^"   ; select on %t
0A1C   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 3B 5E 7D DB   "{%d %t %k^}{0 1 %T0;^}"   ; ifte: true send d to sink, false send 1 to talkback
0A32   3F                     DB   "?"   
0A33   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A3A   7D                     DB   "}"   
0A3B   7D                     DB   "}"   
0A3C   00                     DB   0   
0A3D                             ; /fd fold
0A3D                             ; reducer is a function like: \\da00bbLi4u
0A3D                             ; src init reducer -- src1
0A3D                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
0A3D                FOLD:        ; src, init, reducer
0A3D   CD 9F 03               CALL   go   
0A40   00 00                  DW   NUL   
0A42   4C 0A                  DW   foldM_1923S1482   
0A44   46 0A                  DW   $+2   
0A46   01                     DB   1   
0A47   04 73 69 72 41         .PSTR   "sirA"   
0A4C                FOLDM_1923S1482:      
0A4C   7B                     DB   "{"   ; reducer: \\da00bbLi4u
0A4D   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
0A54   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0A58   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0A5C   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0A61   7B 25 64 20 25 41 30 3B 20 25 72 5E 25 41 30 3B 3D 20 25 41 30 3B 7D 7B 25 64 7D DB   "{%d %A0; %r^%A0;= %A0;}{%d}"   ; ifte: reduce -> acc, acc or data
0A7C   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
0A84   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A8B   7D                     DB   "}"   
0A8C   7D                     DB   "}"   
0A8D   00                     DB   0   
0A8E                             ; /for forEach
0A8E                             ; src proc --
0A8E                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
0A8E                FOREACH:      ; forEach: source, procedure, local: T
0A8E   CD 9F 03               CALL   go   
0A91   00 00                  DW   NUL   
0A93   9C 0A                  DW   forEachM_1937S1497   
0A95   97 0A                  DW   $+2   
0A97   01                     DB   1   
0A98   03 73 70 54            .PSTR   "spT"   
0A9C                FOREACHM_1937S1497:      
0A9C   7B                     DB   "{"   
0A9D   5B 30 5D 25 54 3D      DB   "[0]%T="   
0AA3   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
0AA7   32 25 74 3D 3D 2F 72 65 74 DB   "2%t==/ret"   ; if type == 2 skip
0AB0   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0AB5   7B 25 64 20 25 54 30 3B 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0;=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0AC7   3F                     DB   "?"   ; ifte:
0AC8   30 20 31 20 25 54 30 3B 5E DB   "0 1 %T0;^"   ; 0 or 1: get next src data item
0AD1   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0AD8   7D                     DB   "}"   
0AD9   00                     DB   0   
0ADA                             ; ; /fs funcSrc
0ADA                             ; ; func -- src
0ADA                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0ADA                FUNCSRC:      ; :f func or block
0ADA   CD 9F 03               CALL   go   
0ADD   00 00                  DW   NUL   
0ADF   E6 0A                  DW   funcSrcM_1951S1512   
0AE1   E3 0A                  DW   $+2   
0AE3   00                     DB   0   
0AE4   01 66                  .PSTR   "f"   
0AE6                FUNCSRCM_1951S1512:      
0AE6   7B                     DB   "{"   
0AE7   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0AEB   30 25 74 3D 3D 2F 77 68 69 DB   "0%t==/whi"   ; break if t != 0 ; TODO replace with /ret
0AF4   5C 64 74 7B            DB   "\\dt{"   
0AF8   31 25 74 3D 3D 2F 77 68 69 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/whi %f^ 1 %k^"   ; if t == 1 send data to sink TODO: replace with /ret
0B0B   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0B12   7D                     DB   "}"   
0B13   7D                     DB   "}"   
0B14   00                     DB   0   
0B15                          ;*Macro unroll: FUNC printArray, 2, "abc"
0B15                PRINTARRAY:      
0B15   CD 9F 03               CALL   go   
0B18   00 00                  DW   NUL   
0B1A   23 0B                  DW   printArrayM_1961S1523   
0B1C   1E 0B                  DW   $+2   
0B1E   02                     DB   2   
0B1F   03 61 62 63            .PSTR   "abc"   
0B23                PRINTARRAYM_1961S1523:      
0B23   7B                     DB   "{"   
0B24   27 5B 20 27 2E 73 20 25 61 2F 61 6C 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 3B 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 77 68 69 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/al%c= 0%b= (%a %b ;. %b ++ %b %c </whi)^ ']'.s"   
0B5C   7D                     DB   "}"   
0B5D   00                     DB   0   
0B5E                             ;*******************************************************************
0B5E                             ; implementations continued
0B5E                             ;*******************************************************************
0B5E                COMMA:       
0B5E   CD C2 0F               CALL   cmdTable   
0B61   63 00                  DB   "c",NUL   ; .c print char
0B63   6D 0B                  DW   readChar   
0B65   73 00                  DB   "s",NUL   ; .s print string
0B67   76 0B                  DW   readString   
0B69   00 00                  DW   NUL   ; .  print number, fall through
0B6B   98 0B                  DW   readNumber   
0B6D                READCHAR:      
0B6D   CD 81 00               CALL   getchar   
0B70   26 00                  LD   h,0   
0B72   6F                     LD   l,a   
0B73   E5                     PUSH   hl   
0B74   DD E9                  JP   (ix)   
0B76                READSTRING:      
0B76   ED 5B EA 5F            LD   de,(vHeapPtr)   
0B7A   D5                     PUSH   de   ; return start of string
0B7B                READSTRING1:      
0B7B   CD 81 00               CALL   getchar   
0B7E   FE 0D                  CP   "\r"   
0B80   28 0D                  JR   z,readString2   
0B82   12                     LD   (de),a   
0B83   13                     INC   de   
0B84   3A F1 5F               LD   a,(vEcho)   
0B87   3C                     INC   a   
0B88   20 F1                  JR   nz,readString1   
0B8A   CD 85 00               CALL   putchar   
0B8D   18 EC                  JR   readString1   
0B8F                READSTRING2:      
0B8F   AF                     XOR   a   
0B90   12                     LD   (de),a   
0B91   13                     INC   de   
0B92   ED 53 EA 5F            LD   (vHeapPtr),de   
0B96   DD E9                  JP   (ix)   
0B98                READNUMBER:      
0B98   DD E5                  PUSH   ix   
0B9A                          ;*Macro unroll:  PERFORM readString
0B9A   DD 21 A1 0B            LD   ix,performM_2005S1572   
0B9E   C3 76 0B               JP   readString   
0BA1                PERFORMM_2005S1572:      
0BA1   60 69                  LD   hl,bc   ; save bc, hl = string*
0BA3   E3                     EX   (sp),hl   
0BA4   22 EA 5F               LD   (vHeapPtr),hl   ; restore heap* to before string
0BA7   44 4D                  LD   bc,hl   
0BA9   0A                     LD   a,(bc)   
0BAA   FE 2D                  CP   "-"   
0BAC   28 11                  JR   z,readNumber1   
0BAE   FE 24                  CP   "$"   
0BB0   28 17                  JR   z,readNumber2   
0BB2   FE 30                  CP   "0"   
0BB4   30 09                  JR   nc,readNumber1   
0BB6   FE 3A                  CP   "9"+1   
0BB8   38 05                  JR   c,readNumber1   
0BBA   21 00 00               LD   hl,0   
0BBD   18 12                  JR   readNumber3   
0BBF                READNUMBER1:      
0BBF                          ;*Macro unroll:  PERFORM num
0BBF   DD 21 C6 0B            LD   ix,performM_2022S1589   
0BC3   C3 5A 0C               JP   num   
0BC6                PERFORMM_2022S1589:      
0BC6   E1                     POP   hl   
0BC7   18 08                  JR   readNumber3   
0BC9                READNUMBER2:      
0BC9                          ;*Macro unroll:  PERFORM hexNum
0BC9   DD 21 D0 0B            LD   ix,performM_2026S1593   
0BCD   C3 E1 0B               JP   hexNum   
0BD0                PERFORMM_2026S1593:      
0BD0   E1                     POP   hl   
0BD1                READNUMBER3:      
0BD1   C1                     POP   bc   
0BD2   DD E1                  POP   ix   
0BD4   E5                     PUSH   hl   
0BD5   DD E9                  JP   (ix)   
0BD7                             ; ~ bitwise invert
0BD7                TILDE:       
0BD7                INVERT:      
0BD7   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
0BD8   7D                     LD   a,l   
0BD9   2F                     CPL      
0BDA   6F                     LD   l,a   
0BDB   7C                     LD   a,h   
0BDC   2F                     CPL      
0BDD   67                     LD   h,a   
0BDE   C3 D8 02               JP   add3   
0BE1                             ; $ hex                         ; 22
0BE1                DOLLAR:      
0BE1                HEXNUM:      
0BE1   21 00 00               LD   hl,0   ; Clear hl to accept the number
0BE4                HEXNUM1:      
0BE4   03                     INC   bc   
0BE5   0A                     LD   a,(bc)   ; Get the character which is a numeral
0BE6   CB 77                  BIT   6,a   ; is it uppercase alpha?
0BE8   28 02                  JR   z,hexnum2   ; no a decimal
0BEA   D6 07                  SUB   7   ; sub 7  to make $a - $F
0BEC                HEXNUM2:      
0BEC   D6 30                  SUB   $30   ; form decimal digit
0BEE   DA 7C 0C               JP   c,num2   
0BF1   FE 10                  CP   $0F+1   
0BF3   D2 7C 0C               JP   nc,num2   
0BF6   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0BF7   29                     ADD   hl,hl   ; 4X
0BF8   29                     ADD   hl,hl   ; 8X
0BF9   29                     ADD   hl,hl   ; 16X
0BFA   85                     ADD   a,l   ; add into bottom of hl
0BFB   6F                     LD   l,a   
0BFC   18 E6                  JR   hexnum1   
0BFE                             ; ? if                            23
0BFE                             ; condition then else -- value
0BFE                QUESTION:      
0BFE                IF:          
0BFE   D1                     POP   de   ; de = else
0BFF   E1                     POP   hl   ; hl = then
0C00   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0C01   7C                     LD   a,h   
0C02   B5                     OR   l   
0C03   E1                     POP   hl   ; hl = then
0C04   CA A0 03               JP   z,go1   ; if z de = else
0C07   EB                     EX   de,hl   ; condition = false, de = then
0C08   C3 A0 03               JP   go1   
0C0B                             ; string                        ;38
0C0B                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0C0B                QUOTE:       
0C0B                STRING:      
0C0B   2A EA 5F               LD   hl,(vHeapPtr)   ; hl = heap*
0C0E   E5                     PUSH   hl   ; save start of string
0C0F   0A                     LD   a,(bc)   
0C10   5F                     LD   e,a   ; e = matching terminator
0C11   03                     INC   bc   ; point to next char
0C12   18 03                  JR   string2   
0C14                STRING1:      
0C14   77                     LD   (hl),a   
0C15   23                     INC   hl   ; increase count
0C16   03                     INC   bc   ; point to next char
0C17                STRING2:      
0C17   0A                     LD   a,(bc)   
0C18   BB                     CP   e   ; is it the string terminator
0C19   28 02                  JR   z,string3   
0C1B   18 F7                  JR   string1   
0C1D                STRING3:      
0C1D   AF                     XOR   a   ; write NUL to terminate string
0C1E   77                     LD   (hl),a   ; hl = end of string
0C1F   23                     INC   hl   
0C20   22 EA 5F               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0C23   DD E9                  JP   (ix)   
0C25                             ; %a .. %z                      43
0C25                             ; -- value
0C25                             ; returns value of arg
0C25                PERCENT:      
0C25                ARG:         
0C25   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0C28   FD 56 05               LD   d,(iy+5)   
0C2B   EB                     EX   de,hl   
0C2C   7D                     LD   a,l   ; arg_list* == null, skip
0C2D   B4                     OR   h   
0C2E   28 1A                  JR   z,arg0a   
0C30   23                     INC   hl   ; a = num_args, hl = arg_list*
0C31   7E                     LD   a,(hl)   
0C32   23                     INC   hl   
0C33   B7                     OR   a   
0C34   28 14                  JR   z,arg0a   ; num_args == 0, skip
0C36   5F                     LD   e,a   ; e = a = num_args
0C37   03                     INC   bc   ; a = next char = dollar_name
0C38   0A                     LD   a,(bc)   
0C39   C5                     PUSH   bc   ; save IP
0C3A   43                     LD   b,e   ; b = e = num_args
0C3B   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0C3E   FD 56 03               LD   d,(iy+3)   
0C41                ARG0:        
0C41   1B                     DEC   de   ; a = dollar_name, de = next arg*
0C42   1B                     DEC   de   
0C43   BE                     CP   (hl)   
0C44   28 09                  JR   z,arg1   
0C46   23                     INC   hl   ; hl = next arg_list*
0C47   10 F8                  DJNZ   arg0   
0C49   C1                     POP   bc   ; no match, restore IP
0C4A                ARG0A:       
0C4A   11 00 00               LD   de,0   ; return 0
0C4D   18 08                  JR   arg1a   
0C4F                ARG1:        
0C4F   C1                     POP   bc   ; restore IP
0C50   EB                     EX   de,hl   ; hl = arg*
0C51   22 F8 5F               LD   (vPointer),hl   ; store arg* in setter
0C54   5E                     LD   e,(hl)   
0C55   23                     INC   hl   
0C56   56                     LD   d,(hl)   ; de = arg
0C57                ARG1A:       
0C57   D5                     PUSH   de   ; push arg
0C58   DD E9                  JP   (ix)   
0C5A                             ; 0..9 number                   37
0C5A                NUM:         
0C5A   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0C5D   0A                     LD   a,(bc)   ; Get numeral or -
0C5E   FE 2D                  CP   "-"   
0C60   20 01                  JR   nz,num0   
0C62   03                     INC   bc   ; move to next char, no flags affected
0C63                NUM0:        
0C63   08                     EX   af,af'   ; save zero flag = 0 for later
0C64                NUM1:        
0C64   0A                     LD   a,(bc)   ; read digit
0C65   D6 30                  SUB   "0"   ; less than 0?
0C67   38 13                  JR   c,num2   ; not a digit, exit loop
0C69   FE 0A                  CP   10   ; greater that 9?
0C6B   30 0F                  JR   nc,num2   ; not a digit, exit loop
0C6D   03                     INC   bc   ; inc IP
0C6E   54 5D                  LD   de,hl   ; multiply hl * 10
0C70   29                     ADD   hl,hl   
0C71   29                     ADD   hl,hl   
0C72   19                     ADD   hl,de   
0C73   29                     ADD   hl,hl   
0C74   85                     ADD   a,l   ; add digit in a to hl
0C75   6F                     LD   l,a   
0C76   3E 00                  LD   a,0   
0C78   8C                     ADC   a,h   
0C79   67                     LD   h,a   
0C7A   18 E8                  JR   num1   
0C7C                NUM2:        
0C7C   0B                     DEC   bc   
0C7D   08                     EX   af,af'   ; restore zero flag
0C7E   20 07                  JR   nz,num3   
0C80   EB                     EX   de,hl   ; negate the value of hl
0C81   21 00 00               LD   hl,0   
0C84   B7                     OR   a   ; jump to sub2
0C85   ED 52                  SBC   hl,de   
0C87                NUM3:        
0C87   E5                     PUSH   hl   ; Put the number on the stack
0C88   DD E9                  JP   (ix)   ; and process the next character
0C8A                             ; }                               58
0C8A                RBRACE:      
0C8A                BLOCKEND:      
0C8A   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0C8D   FD 56 01               LD   d,(iy+1)   
0C90   ED 53 04 60            LD   (vTemp1),de   
0C94   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0C97   FD 56 07               LD   d,(iy+7)   
0C9A   ED 53 06 60            LD   (vTemp2),de   
0C9E   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0CA1   FD 56 03               LD   d,(iy+3)   
0CA4   EB                     EX   de,hl   
0CA5   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0CA8   FD 56 01               LD   d,(iy+1)   
0CAB   13                     INC   de   ; for carry flag <=
0CAC   B7                     OR   a   
0CAD   ED 52                  SBC   hl,de   
0CAF   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0CB1   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0CB3   FD 5D                  LD   e,iyl   
0CB5   21 08 00               LD   hl,8   
0CB8   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0CB9   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0CBA   18 0C                  JR   blockEnd2   
0CBC                BLOCKEND1:      ; same scope
0CBC   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0CBF   FD 56 03               LD   d,(iy+3)   
0CC2   EB                     EX   de,hl   
0CC3   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0CC5   FD 5D                  LD   e,iyl   
0CC7   EB                     EX   de,hl   
0CC8                BLOCKEND2:      
0CC8   44 4D                  LD   bc,hl   ; bc = hl = BP
0CCA   B7                     OR   a   ; hl = BP - SP = count
0CCB   ED 72                  SBC   hl,sp   
0CCD   7D                     LD   a,l   
0CCE   B4                     OR   h   
0CCF   28 09                  JR   z,blockEnd3   
0CD1   C5                     PUSH   bc   ; bc = count, hl = BP
0CD2   44 4D                  LD   bc,hl   
0CD4   E1                     POP   hl   
0CD5   2B                     DEC   hl   ; hl = BP-1
0CD6   1B                     DEC   de   ; de = args*-1
0CD7   ED B8                  LDDR      
0CD9   13                     INC   de   
0CDA                BLOCKEND3:      
0CDA   EB                     EX   de,hl   ; sp = de = new tos*
0CDB   F9                     LD   sp,hl   
0CDC   ED 4B 06 60            LD   bc,(vTemp2)   
0CE0   FD 2A 04 60            LD   iy,(vTemp1)   
0CE4   ED 5B EC 5F            LD   de,(vRecurPtr)   ; de = recur vector
0CE8   7B                     LD   a,e   ; check for NUL
0CE9   B2                     OR   d   
0CEA   20 02                  JR   nz,blockEnd4   
0CEC   DD E9                  JP   (ix)   
0CEE                BLOCKEND4:      
0CEE   21 00 00               LD   hl,0   ; clear recur vector
0CF1   22 EC 5F               LD   (vRecurPtr),hl   
0CF4   C3 A0 03               JP   go1   ; execute de
0CF7                GOBLOCK:      
0CF7   ED 53 04 60            LD   (vTemp1),de   ; save de
0CFB   21 00 5D               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0CFE   FD 54                  LD   d,iyh   
0D00   FD 5D                  LD   e,iyl   
0D02   B7                     OR   a   ; if stack* == BP then this is the root_scope
0D03   ED 52                  SBC   hl,de   
0D05   ED 5B 04 60            LD   de,(vTemp1)   ; restore de
0D09   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0D0A   B4                     OR   h   
0D0B   3E 00                  LD   a,0   
0D0D   28 6A                  JR   z,goFunc8   
0D0F   C5                     PUSH   bc   ; push IP
0D10   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0D13   FD 46 05               LD   b,(iy+5)   
0D16   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0D19   FD 66 03               LD   h,(iy+3)   
0D1C                GOBLOCK2:      
0D1C   C5                     PUSH   bc   ; arg_list*
0D1D   E5                     PUSH   hl   ; first_arg*
0D1E   FD E5                  PUSH   iy   ; push BP
0D20   FD 21 00 00            LD   iy,0   ; BP = SP
0D24   FD 39                  ADD   iy,sp   
0D26                GOBLOCK3:      
0D26   42 4B                  LD   bc,de   ; bc = de = block*-1
0D28   DD E9                  JP   (ix)   
0D2A                GOFUNC:      ; execute func
0D2A   EB                     EX   de,hl   ; hl = func*
0D2B   5E                     LD   e,(hl)   ; de = partial_array*
0D2C   23                     INC   hl   
0D2D   56                     LD   d,(hl)   
0D2E   23                     INC   hl   
0D2F   7B                     LD   a,e   ; if partial_array* == null skip
0D30   B2                     OR   d   
0D31   28 21                  JR   z,goFunc3   
0D33   ED 43 04 60            LD   (vTemp1),bc   
0D37   22 06 60               LD   (vTemp2),hl   ; save bc,hl
0D3A   EB                     EX   de,hl   ; hl = partial_array*
0D3B   2B                     DEC   hl   ; bc = count
0D3C   46                     LD   b,(hl)   
0D3D   2B                     DEC   hl   
0D3E   4E                     LD   c,(hl)   
0D3F   23                     INC   hl   ; hl = array data*
0D40   23                     INC   hl   
0D41   18 06                  JR   goFunc2   ; push each item on stack
0D43                GOFUNC1:      
0D43   5E                     LD   e,(hl)   ; de = partial item
0D44   23                     INC   hl   
0D45   56                     LD   d,(hl)   
0D46   23                     INC   hl   
0D47   D5                     PUSH   de   ; push on stack
0D48   0B                     DEC   bc   
0D49                GOFUNC2:      
0D49   79                     LD   a,c   ; if count != 0 then loop
0D4A   B0                     OR   b   
0D4B   20 F6                  JR   nz,goFunc1   
0D4D   ED 4B 04 60            LD   bc,(vTemp1)   ; restore bc
0D51   2A 06 60               LD   hl,(vTemp2)   ; restore hl
0D54                GOFUNC3:      
0D54   5E                     LD   e,(hl)   ; de = block*
0D55   23                     INC   hl   
0D56   56                     LD   d,(hl)   
0D57   23                     INC   hl   
0D58   ED 53 04 60            LD   (vTemp1),de   ; save block*
0D5C   5E                     LD   e,(hl)   ; de = arg_list*
0D5D   23                     INC   hl   
0D5E   56                     LD   d,(hl)   
0D5F   23                     INC   hl   
0D60   EB                     EX   de,hl   ; hl = arg_list*
0D61   ED 5B 04 60            LD   de,(vTemp1)   ; restore de = block*
0D65   7D                     LD   a,l   ; if arg_list* == null a = 0
0D66   B4                     OR   h   
0D67   20 03                  JR   nz,goFunc4   
0D69   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0D6A   18 0D                  JR   goFunc8   
0D6C                GOFUNC4:      ; allocate locals
0D6C   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0D6D   18 03                  JR   goFunc6   
0D6F                GOFUNC5:      ; loop
0D6F   3B                     DEC   sp   
0D70   3B                     DEC   sp   
0D71   3D                     DEC   a   
0D72                GOFUNC6:      
0D72   B7                     OR   a   
0D73   20 FA                  JR   nz,goFunc5   ; end loop
0D75                GOFUNC7:      
0D75   23                     INC   hl   ; a = num_args* x 2
0D76   7E                     LD   a,(hl)   
0D77   2B                     DEC   hl   
0D78   87                     ADD   a,a   ; a *= 2
0D79                GOFUNC8:      
0D79   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0D7A   44 4D                  LD   bc,hl   
0D7C   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0D7F   85                     ADD   a,l   
0D80   6F                     LD   l,a   
0D81   39                     ADD   hl,sp   
0D82   18 98                  JR   goBlock2   
0D84                             ; =                              21
0D84                             ; value _oldValue --            ; uses address in vPointer 15
0D84                ASSIGN:      
0D84   E1                     POP   hl   ; discard last accessed value
0D85   E1                     POP   hl   ; hl = new value
0D86                ASSIGN0:      
0D86   EB                     EX   de,hl   ; de = new value
0D87   2A F8 5F               LD   hl,(vPointer)   
0D8A                ASSIGN1:      ; entry point from defineEnd
0D8A   73                     LD   (hl),e   
0D8B   3A EE 5F               LD   a,(vDataWidth)   
0D8E   3D                     DEC   a   ; is it byte?
0D8F   28 02                  JR   z,assign2   
0D91   23                     INC   hl   
0D92   72                     LD   (hl),d   
0D93                ASSIGN2:      
0D93   DD E9                  JP   (ix)   
0D95                             ; hl = value1, de = value2
0D95                             ; hl = result
0D95                EQUALS:      
0D95   B7                     OR   a   ; reset the carry flag
0D96   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0D98   28 16                  JR   z,true1   
0D9A   18 1A                  JR   false1   
0D9C                NOTEQUALS:      
0D9C   B7                     OR   a   ; reset the carry flag
0D9D   ED 52                  SBC   hl,de   
0D9F   20 0F                  JR   nz,true1   
0DA1   18 13                  JR   false1   
0DA3                             ; hl = value1 de = value2
0DA3                             ; hl = result
0DA3                LESSTHANEQ:      
0DA3   B7                     OR   a   
0DA4   ED 52                  SBC   hl,de   
0DA6   18 05                  JR   lessthan1   
0DA8                             ; hl = value1 de = value2
0DA8                             ; hl = result
0DA8                LESSTHAN:      
0DA8   B7                     OR   a   
0DA9   ED 52                  SBC   hl,de   
0DAB   28 09                  JR   z,false1   
0DAD                LESSTHAN1:      
0DAD   FA B6 0D               JP   m,false1   
0DB0                TRUE1:       
0DB0   21 FF FF               LD   hl,TRUE   
0DB3   E5                     PUSH   hl   
0DB4   DD E9                  JP   (ix)   
0DB6                NULL1:       
0DB6                FALSE1:      
0DB6   21 00 00               LD   hl,FALSE   
0DB9   E5                     PUSH   hl   
0DBA   DD E9                  JP   (ix)   
0DBC                SPREAD:      
0DBC   E1                     POP   hl   ; hl = array*
0DBD   ED 43 04 60            LD   (vTemp1),bc   ; save bc
0DC1   2B                     DEC   hl   ; bc = length
0DC2   46                     LD   b,(hl)   
0DC3   2B                     DEC   hl   
0DC4   4E                     LD   c,(hl)   
0DC5   23                     INC   hl   ; move back to array 0
0DC6   23                     INC   hl   
0DC7   18 0D                  JR   spread3   
0DC9                SPREAD1:      
0DC9   5E                     LD   e,(hl)   ; e = lsb data at hl
0DCA   23                     INC   hl   
0DCB   3A EE 5F               LD   a,(vDataWidth)   ; data width = 1, d = 0, skip
0DCE   57                     LD   d,a   
0DCF   15                     DEC   d   
0DD0   28 02                  JR   z,spread2   
0DD2   56                     LD   d,(hl)   ; d = msb data at hl
0DD3   23                     INC   hl   
0DD4                SPREAD2:      
0DD4   D5                     PUSH   de   ; return de
0DD5   0B                     DEC   bc   ; count--
0DD6                SPREAD3:      
0DD6   79                     LD   a,c   ; exit loop if bc == 0
0DD7   B0                     OR   b   
0DD8   20 EF                  JR   nz,spread1   
0DDA   ED 4B 04 60            LD   bc,(vTemp1)   ; restore bc
0DDE   DD E9                  JP   (ix)   
0DE0                             ; shiftLeft
0DE0                             ; value count <<
0DE0                             ; count variable <<=
0DE0                SHIFTLEFT:      
0DE0   E1                     POP   hl   ; de = arg_a, hl = arg_b
0DE1   D1                     POP   de   
0DE2   03                     INC   bc   
0DE3   0A                     LD   a,(bc)   
0DE4   FE 3D                  CP   "="   
0DE6   28 02                  JR   z,shiftLeft2   
0DE8   0B                     DEC   bc   
0DE9   EB                     EX   de,hl   ; de = arg_b, hl = arg_a
0DEA                SHIFTLEFT2:      
0DEA   ED 43 04 60            LD   (vTemp1),bc   ; save IP
0DEE   43                     LD   b,e   ; b = loop counter
0DEF   04                     INC   b   ; test for counter=0 case
0DF0   18 01                  JR   shiftLeft4   
0DF2                SHIFTLEFT3:      
0DF2   29                     ADD   hl,hl   ; left shift hl
0DF3                SHIFTLEFT4:      
0DF3   10 FD                  DJNZ   shiftLeft3   
0DF5   ED 4B 04 60            LD   bc,(vTemp1)   ; restore IP
0DF9   C3 9D 02               JP   sub3   
0DFC                             ; shiftRight
0DFC                             ; value count >>
0DFC                             ; count variable >>=
0DFC                SHIFTRIGHT:      
0DFC   E1                     POP   hl   ; de = arg_a, hl = arg_b
0DFD   D1                     POP   de   
0DFE   03                     INC   bc   
0DFF   0A                     LD   a,(bc)   
0E00   FE 3D                  CP   "="   
0E02   28 02                  JR   z,shiftRight2   
0E04   0B                     DEC   bc   
0E05   EB                     EX   de,hl   ; de = arg_a, hl = arg_b
0E06                SHIFTRIGHT2:      
0E06   ED 43 04 60            LD   (vTemp1),bc   ; save IP
0E0A   43                     LD   b,e   ; b = loop counter
0E0B   04                     INC   b   ; test for counter=0 case
0E0C   18 04                  JR   shiftRight4   
0E0E                SHIFTRIGHT3:      
0E0E   CB 3C                  SRL   h   ; right shift hl
0E10   CB 1D                  RR   l   
0E12                SHIFTRIGHT4:      
0E12   10 FA                  DJNZ   shiftRight3   
0E14   ED 4B 04 60            LD   bc,(vTemp1)   ; restore IP
0E18   C3 9D 02               JP   sub3   
0E1B                             ; division subroutine.
0E1B                             ; bc: divisor, de: dividend, hl: remainder
0E1B                DIVIDE:      
0E1B   21 00 00               LD   hl,0   ; zero the remainder
0E1E   3E 10                  LD   a,16   ; loop counter
0E20                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0E20   CB 21                  SLA   c   
0E22   CB 10                  RL   b   
0E24   ED 6A                  ADC   hl,hl   
0E26   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0E28   38 03                  JR   c,divide2   
0E2A   0C                     INC   c   
0E2B   18 01                  JR   divide3   
0E2D                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0E2D   19                     ADD   hl,de   
0E2E                DIVIDE3:      
0E2E   3D                     DEC   a   
0E2F   20 EF                  JR   nz,divide1   
0E31   50 59                  LD   de,bc   ; result from bc to de
0E33   C9                     RET      
0E34                DOTNEXT:      
0E34   3A F2 5F               LD   a,(vStrMode)   ; if string mode then exit
0E37   3C                     INC   a   
0E38   20 02                  JR   nz,dotNext1   
0E3A   DD E9                  JP   (ix)   
0E3C                DOTNEXT1:      
0E3C   11 00 5E               LD   de,BUFFER   
0E3F   2A E8 5F               LD   hl,(vBufPtr)   
0E42   36 00                  LD   (hl),0   ; store NUL at end of string
0E44   ED 53 E8 5F            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0E48   EB                     EX   de,hl   ; hl = BUFFER
0E49   CD FF 0F               CALL   putstr   
0E4C   DD E9                  JP   (ix)   
0E4E                             ; arg_list - parses arg_list e.g. ab:c
0E4E                             ; -- arg_list*
0E4E                PARSEARGS:      
0E4E   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0E51   2A EA 5F               LD   hl,(vHeapPtr)   ; hl = heap*
0E54   E5                     PUSH   hl   ; save start of arg_list
0E55   23                     INC   hl   ; skip length fields to start of string
0E56   23                     INC   hl   
0E57   03                     INC   bc   ; point to next char
0E58                PARSEARGS1:      
0E58   0A                     LD   a,(bc)   
0E59   FE 3A                  CP   ":"   ; ":" switches from args to locals
0E5B   20 03                  JR   nz,parseArgs1a   
0E5D   14                     INC   d   ; non zero value local count acts as flag
0E5E   18 10                  JR   parseArgs3   
0E60                PARSEARGS1A:      
0E60   FE 61                  CP   "a"   ; < "a" terminates arg_list
0E62   38 0F                  JR   c,parseArgs4   
0E64   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0E66   30 0B                  JR   nc,parseArgs4   
0E68                PARSEARGS2:      
0E68   77                     LD   (hl),a   
0E69   23                     INC   hl   
0E6A   1C                     INC   e   ; increase arg count
0E6B   AF                     XOR   a   
0E6C   B2                     OR   d   
0E6D   28 01                  JR   z,parseArgs3   
0E6F   14                     INC   d   ; if d > 0 increase local count
0E70                PARSEARGS3:      
0E70   03                     INC   bc   ; point to next char
0E71   18 E5                  JR   parseArgs1   
0E73                PARSEARGS4:      
0E73   0B                     DEC   bc   
0E74   AF                     XOR   a   
0E75   B2                     OR   d   
0E76   28 01                  JR   z,parseArgs5   
0E78   15                     DEC   d   ; remove initial inc
0E79                PARSEARGS5:      
0E79   23                     INC   hl   
0E7A   22 EA 5F               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0E7D   E1                     POP   hl   ; hl = start of arg_list
0E7E   72                     LD   (hl),d   ; write number of locals at start - 1
0E7F   23                     INC   hl   
0E80   73                     LD   (hl),e   ; write number of args + locals at start - 2
0E81   2B                     DEC   hl   
0E82   E3                     EX   (sp),hl   
0E83   E9                     JP   (hl)   
0E84                             ; create block: parses block e.g. 00bbIC4uLi4g
0E84                             ; -- block*
0E84                PARSEBLOCK:      
0E84   C5                     PUSH   bc   ; return pointer to first { of block
0E85   03                     INC   bc   
0E86   16 01                  LD   d,1   ; nesting: count first parenthesis
0E88                PARSEBLOCK1:      ; Skip to end of definition
0E88   0A                     LD   a,(bc)   ; Get the next character
0E89   03                     INC   bc   ; Point to next character
0E8A   FE 21                  CP   " " + 1   ; ignore whitespace
0E8C   38 FA                  JR   c,parseBlock1   
0E8E   FE 27                  CP   "'"   ; quote char
0E90   28 0F                  JR   z,parseBlock2   
0E92   FE 22                  CP   DQ   ; double quote char
0E94   28 0B                  JR   z,parseBlock2   
0E96   FE 60                  CP   "`"   ; grave char
0E98   28 07                  JR   z,parseBlock2   
0E9A   CB 7A                  BIT   7,d   
0E9C   20 EA                  JR   nz,parseBlock1   
0E9E   C3 A7 0E               JP   parseBlock3   
0EA1                PARSEBLOCK2:      
0EA1   3E 80                  LD   a,$80   
0EA3   AA                     XOR   d   
0EA4   57                     LD   d,a   
0EA5   18 E1                  JR   parseBlock1   
0EA7                PARSEBLOCK3:      
0EA7   FE 28                  CP   "("   
0EA9   28 16                  JR   z,parseBlock4   
0EAB   FE 7B                  CP   "{"   
0EAD   28 12                  JR   z,parseBlock4   
0EAF   FE 5B                  CP   "["   
0EB1   28 0E                  JR   z,parseBlock4   
0EB3   FE 29                  CP   ")"   
0EB5   28 0D                  JR   z,parseBlock5   
0EB7   FE 7D                  CP   "}"   
0EB9   28 09                  JR   z,parseBlock5   
0EBB   FE 5D                  CP   "]"   
0EBD   28 05                  JR   z,parseBlock5   
0EBF   18 C7                  JR   parseBlock1   
0EC1                PARSEBLOCK4:      
0EC1   14                     INC   d   
0EC2   18 C4                  JR   parseBlock1   
0EC4                PARSEBLOCK5:      
0EC4   15                     DEC   d   
0EC5   20 C1                  JR   nz,parseBlock1   ; get the next element
0EC7   60 69                  LD   hl,bc   ; hl = IP
0EC9   11 22 60               LD   de,HEAP   ; is IP pointing to object in heap
0ECC   B7                     OR   a   ; IP - HEAP
0ECD   ED 52                  SBC   hl,de   
0ECF   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0ED1   28 1C                  JR   z,parseBlock6   
0ED3   60 69                  LD   hl,bc   ; hl = IP
0ED5   D1                     POP   de   ; de = block*
0ED6   ED 43 04 60            LD   (vTemp1),bc   ; save IP
0EDA   B7                     OR   a   ; bc = size
0EDB   ED 52                  SBC   hl,de   
0EDD   44 4D                  LD   bc,hl   
0EDF   EB                     EX   de,hl   ; hl = block* de = heap*
0EE0   ED 5B EA 5F            LD   de,(vHeapPtr)   
0EE4   D5                     PUSH   de   ; return hblock*
0EE5   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0EE7   ED 53 EA 5F            LD   (vHeapPtr),de   ; heap* += size
0EEB   ED 4B 04 60            LD   bc,(vTemp1)   ; restore IP
0EEF                PARSEBLOCK6:      
0EEF   0B                     DEC   bc   ; balanced, exit
0EF0   E1                     POP   hl   ; hl = block*
0EF1   E3                     EX   (sp),hl   ; return to caller
0EF2   E9                     JP   (hl)   
0EF3                             ; create function
0EF3                             ; arg_list* block* -- func*
0EF3                CREATEFUNC:      
0EF3   E1                     POP   hl   ; save retrn address
0EF4   22 08 60               LD   (vTemp3),hl   
0EF7   ED 43 04 60            LD   (vTemp1),bc   ; save IP
0EFB   E1                     POP   hl   ; hl = block*
0EFC   22 06 60               LD   (vTemp2),hl   ; save block*
0EFF   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0F02   FD 56 05               LD   d,(iy+5)   
0F05   7B                     LD   a,e   ; if arg_list == null then make a func
0F06   B2                     OR   d   
0F07   20 09                  JR   nz,createFunc0   
0F09   21 00 00               LD   hl,0   ; partial_array = null
0F0C   ED 5B EA 5F            LD   de,(vHeapPtr)   ; de = compile*
0F10   18 65                  JR   createFunc5   
0F12                CREATEFUNC0:      
0F12   E1                     POP   hl   ; hl = inner_arg_list*
0F13   E5                     PUSH   hl   ; save inner_arg_list
0F14   ED 5B EA 5F            LD   de,(vHeapPtr)   ; de = compile*
0F18   7E                     LD   a,(hl)   ; compile inner_num_locals
0F19   4F                     LD   c,a   ; b = inner_num_locals
0F1A   12                     LD   (de),a   
0F1B   23                     INC   hl   
0F1C   13                     INC   de   
0F1D   7E                     LD   a,(hl)   ; compile inner_length
0F1E   12                     LD   (de),a   
0F1F   91                     SUB   c   ; a = inner_num args
0F20   23                     INC   hl   
0F21   13                     INC   de   
0F22   B7                     OR   a   ; compile args if inner_length > 0
0F23   28 05                  JR   z,createFunc1   
0F25   4F                     LD   c,a   ; bc = a
0F26   06 00                  LD   b,0   
0F28   ED B0                  LDIR      
0F2A                CREATEFUNC1:      
0F2A   EB                     EX   de,hl   ; hl = outer_arg_list
0F2B   FD 5E 04               LD   e,(iy+4)   
0F2E   FD 56 05               LD   d,(iy+5)   
0F31   EB                     EX   de,hl   
0F32   23                     INC   hl   ; a = outer_length
0F33   7E                     LD   a,(hl)   
0F34   23                     INC   hl   
0F35   B7                     OR   a   
0F36   28 05                  JR   z,createFunc2   
0F38   4F                     LD   c,a   
0F39   06 00                  LD   b,0   
0F3B   ED B0                  LDIR      ; append outer_args
0F3D                CREATEFUNC2:      ; a = outer_length
0F3D   47                     LD   b,a   ; b = a = outer_length
0F3E   2A EA 5F               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0F41   23                     INC   hl   
0F42   7E                     LD   a,(hl)   ; add outer_length to new length
0F43   80                     ADD   a,b   
0F44   77                     LD   (hl),a   
0F45   2B                     DEC   hl   
0F46   78                     LD   a,b   ; save outer_length in a'
0F47   08                     EX   af,af'   
0F48   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0F49   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0F4A   B7                     OR   a   
0F4B   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0F4D   4F                     LD   c,a   ; c = inner_num_locals
0F4E   06 00                  LD   b,0   ; bc = inner_num_locals
0F50   23                     INC   hl   ; a = inner_length
0F51   7E                     LD   a,(hl)   
0F52   91                     SUB   c   ; a = inner_num_args
0F53   23                     INC   hl   ; hl = inner_arg_chars
0F54   85                     ADD   a,l   ; hl += a
0F55   6F                     LD   l,a   
0F56   3E 00                  LD   a,0   
0F58   84                     ADD   a,h   
0F59   67                     LD   h,a   
0F5A   ED B0                  LDIR      ; append inner_locals
0F5C                CREATEFUNC2A:      
0F5C   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0F5D   12                     LD   (de),a   ; compile partial_array length field
0F5E   13                     INC   de   
0F5F   AF                     XOR   a   
0F60   12                     LD   (de),a   
0F61   13                     INC   de   
0F62   D5                     PUSH   de   ; push partial_array*
0F63   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0F64   FD 5E 02               LD   e,(iy+2)   
0F67   FD 56 03               LD   d,(iy+3)   
0F6A   EB                     EX   de,hl   
0F6B                CREATEFUNC3:      
0F6B   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0F6C   4E                     LD   c,(hl)   
0F6D   2B                     DEC   hl   
0F6E   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0F6F   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0F70   13                     INC   de   
0F71   79                     LD   a,c   
0F72   12                     LD   (de),a   
0F73   13                     INC   de   
0F74   10 F5                  DJNZ   createFunc3   ; b = outer_length
0F76                CREATEFUNC4:      
0F76   E1                     POP   hl   ; hl = partial_array*
0F77                CREATEFUNC5:      
0F77   C1                     POP   bc   ; bc = new_arg_list*
0F78   D5                     PUSH   de   ; return new func*
0F79   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0F7A   73                     LD   (hl),e   ; compile partial_array* to func
0F7B   23                     INC   hl   
0F7C   72                     LD   (hl),d   
0F7D   23                     INC   hl   
0F7E   ED 5B 06 60            LD   de,(vTemp2)   ; de = block*
0F82   73                     LD   (hl),e   ; compile block* to func
0F83   23                     INC   hl   
0F84   72                     LD   (hl),d   
0F85   23                     INC   hl   
0F86   71                     LD   (hl),c   ; compile new_arg_list* to func
0F87   23                     INC   hl   
0F88   70                     LD   (hl),b   
0F89   23                     INC   hl   
0F8A   22 EA 5F               LD   (vHeapPtr),hl   ; bump heap ptr
0F8D   ED 4B 04 60            LD   bc,(vTemp1)   ; restore IP
0F91   2A 08 60               LD   hl,(vTemp3)   ; jump to return address
0F94   E9                     JP   (hl)   
0F95                             ;*******************************************************************
0F95                             ; general routines
0F95                             ;*******************************************************************
0F95                             ; hl = address
0F95                VARIABLE:      
0F95   22 F8 5F               LD   (vPointer),hl   
0F98   5E                     LD   e,(hl)   
0F99   3A EE 5F               LD   a,(vDataWidth)   
0F9C   3D                     DEC   a   
0F9D   16 00                  LD   d,0   
0F9F   28 03                  JR   z,constant   
0FA1   23                     INC   hl   
0FA2   56                     LD   d,(hl)   
0FA3   2B                     DEC   hl   
0FA4                CONSTANT:      
0FA4   D5                     PUSH   de   
0FA5   DD E9                  JP   (ix)   
0FA7                             ; followed by a table
0FA7                             ; indexed on the 0-25 lowercase letter
0FA7                             ; db lsb(addr)
0FA7                             ; the final item index 26 matches any other char
0FA7                CHARTABLE:      
0FA7   03                     INC   bc   
0FA8   0A                     LD   a,(bc)   
0FA9   FE 7B                  CP   "z"+1   
0FAB   30 10                  JR   nc,charTable3   
0FAD   D6 61                  SUB   "a"   
0FAF   38 0C                  JR   c,charTable3   
0FB1                CHARTABLE1:      
0FB1   E1                     POP   hl   
0FB2   85                     ADD   a,l   
0FB3   6F                     LD   l,a   
0FB4   7E                     LD   a,(hl)   ; must have the same msb as the table
0FB5   B7                     OR   a   ; a = 0, nop
0FB6   20 03                  JR   nz,charTable2   
0FB8   C3 E6 06               JP   error1   
0FBB                CHARTABLE2:      
0FBB   6F                     LD   l,a   
0FBC   E9                     JP   (hl)   
0FBD                CHARTABLE3:      
0FBD   3E 1A                  LD   a,26   
0FBF   0B                     DEC   bc   
0FC0   18 EF                  JR   charTable1   
0FC2                             ; followed by a table
0FC2                             ; db char
0FC2                             ; db char - if null only match on first char
0FC2                             ; dw addr
0FC2                             ; the final item must have char == NUL
0FC2                CMDTABLE:      
0FC2   E1                     POP   hl   
0FC3                CMDTABLE1:      
0FC3                CMDTABLE2:      
0FC3   56                     LD   d,(hl)   
0FC4   23                     INC   hl   
0FC5   5E                     LD   e,(hl)   
0FC6   23                     INC   hl   
0FC7   AF                     XOR   a   ; if d == 0, matched
0FC8   BA                     CP   d   
0FC9   28 14                  JR   z,cmdTable5   
0FCB   03                     INC   bc   ; match?
0FCC   0A                     LD   a,(bc)   
0FCD   BA                     CP   d   
0FCE   20 0A                  JR   nz,cmdTable4   
0FD0                CMDTABLE3:      
0FD0   AF                     XOR   a   ; if e == 0, matched
0FD1   BB                     CP   e   
0FD2   28 0B                  JR   z,cmdTable5   
0FD4   03                     INC   bc   
0FD5   0A                     LD   a,(bc)   ; match?
0FD6   BB                     CP   e   
0FD7   28 06                  JR   z,cmdTable5   
0FD9   0B                     DEC   bc   
0FDA                CMDTABLE4:      ; no match, restore bc, go to next table entry
0FDA   0B                     DEC   bc   
0FDB   23                     INC   hl   
0FDC   23                     INC   hl   
0FDD   18 E4                  JR   cmdTable2   
0FDF                CMDTABLE5:      ; matched, jump to addr
0FDF   5E                     LD   e,(hl)   
0FE0   23                     INC   hl   
0FE1   56                     LD   d,(hl)   
0FE2   EB                     EX   de,hl   
0FE3   E9                     JP   (hl)   
0FE4                GETVARADDR:      
0FE4   21 00 00               LD   hl,0   
0FE7   FE 7B                  CP   "z"+1   ; if a > z then exit
0FE9   D0                     RET   nc   
0FEA   D6 41                  SUB   "A"   ; a - 65
0FEC   D8                     RET   c   ; if < A then exit
0FED   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0FEF   38 05                  JR   c,getVarAddr1   
0FF1   D6 06                  SUB   "a"-("Z"+1)   
0FF3   FE 1A                  CP   "Z"-"A"+1   
0FF5   D8                     RET   c   ; if < a then exit
0FF6                GETVARADDR1:      
0FF6   87                     ADD   a,a   ; double a
0FF7   6F                     LD   l,a   
0FF8   26 5F                  LD   h,msb(VARS)   
0FFA   C9                     RET      
0FFB                PUTSTR0:      
0FFB   CD 85 00               CALL   putchar   
0FFE   23                     INC   hl   
0FFF                PUTSTR:      
0FFF   7E                     LD   a,(hl)   
1000   B7                     OR   a   
1001   20 F8                  JR   nz,putstr0   
1003   C9                     RET      
1004                             ; **************************************************************************
1004                             ; calculate nesting value
1004                             ; a is char to be tested,
1004                             ; e is the nesting value (initially 0)
1004                             ; e is increased by ( and [
1004                             ; e is decreased by ) and ]
1004                             ; e has its bit 7 toggled by `
1004                             ; limited to 127 levels
1004                             ; **************************************************************************
1004                NESTING:      
1004   FE 27                  CP   "'"   ; quote char
1006   28 0A                  JR   z,nesting0   
1008   FE 22                  CP   DQ   ; double quote char
100A   28 06                  JR   z,nesting0   
100C   FE 60                  CP   "`"   ; grave char
100E   28 02                  JR   z,nesting0   
1010   18 0A                  JR   nesting1   
1012                NESTING0:      
1012   CB 7B                  BIT   7,e   
1014   28 03                  JR   z,nesting1a   
1016   CB BB                  RES   7,e   
1018   C9                     RET      
1019                NESTING1A:      
1019   CB FB                  SET   7,e   
101B   C9                     RET      
101C                NESTING1:      
101C   CB 7B                  BIT   7,e   
101E   C0                     RET   nz   
101F   FE 7B                  CP   "{"   
1021   28 08                  JR   z,nesting2   
1023   FE 5B                  CP   "["   
1025   28 04                  JR   z,nesting2   
1027   FE 28                  CP   "("   
1029   20 02                  JR   nz,nesting3   
102B                NESTING2:      
102B   1C                     INC   e   
102C   C9                     RET      
102D                NESTING3:      
102D   FE 7D                  CP   "}"   
102F   28 07                  JR   z,nesting4   
1031   FE 5D                  CP   "]"   
1033   28 03                  JR   z,nesting4   
1035   FE 29                  CP   ")"   
1037   C0                     RET   nz   
1038                NESTING4:      
1038   1D                     DEC   e   
1039   C9                     RET      
103A                PROMPT:      
103A   CD 4A 10               CALL   printStr   
103D   0D 0A 3E 20 00         .CSTR   "\r\n> "   
1042   C9                     RET      
1043                CRLF:        
1043   CD 4A 10               CALL   printStr   
1046   0D 0A 00               .CSTR   "\r\n"   
1049   C9                     RET      
104A                             ; prints a null teminated string
104A                             ; the string should be immediately following the call
104A                PRINTSTR:      
104A   E3                     EX   (sp),hl   ; swap			
104B   CD FF 0F               CALL   putstr   
104E   23                     INC   hl   ; inc past NUL
104F   E3                     EX   (sp),hl   ; put it back	
1050   C9                     RET      
1051                INIT:        
1051   21 F0 01               LD   hl,titleStr   
1054   11 0E 60               LD   de,titleBuf   
1057   06 14                  LD   b,20   
1059                INIT1:       
1059   1A                     LD   a,(de)   
105A   BE                     CP   (hl)   
105B   20 17                  JR   nz,coldBoot0   
105D   13                     INC   de   
105E   23                     INC   hl   
105F   10 F8                  DJNZ   init1   
1061                WARMINIT:      
1061   ED 4B FC 5F            LD   bc,(vSavedIP)   ; restore IP
1065   ED 7B FE 5F            LD   sp,(vSavedSP)   ; restore SP
1069   DD 2A 00 60            LD   ix,(vSavedNext)   ; restore Next
106D   FD 2A 02 60            LD   iy,(vSavedBP)   ; restore BP
1071   C3 AB 10               JP   start1   
1074                COLDBOOT0:      
1074   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
1077   11 0E 60               LD   de,titleBuf   
107A   06 14                  LD   b,20   
107C   ED B0                  LDIR      
107E                COLDINIT:      
107E   21 DE 01               LD   hl,isysVars   
1081   11 E6 5F               LD   de,sysVars   
1084   01 12 00               LD   bc,4 * 2 + 10   
1087   ED B0                  LDIR      
1089   21 00 5F               LD   hl,vars   ; 52 vars LO HI
108C   06 34                  LD   b,26*2   
108E   AF                     XOR   a   
108F                COLDBOOT1:      
108F   77                     LD   (hl),a   
1090   23                     INC   hl   
1091   10 FC                  DJNZ   coldBoot1   
1093   DD 21 27 11            LD   ix,NEXT   
1097   FD 21 00 5D            LD   iy,STACK   
109B   C9                     RET      
109C                COLDSTART:      
109C   31 00 5D               LD   sp,STACK   
109F   CD 74 10               CALL   coldBoot0   
10A2   C3 AB 10               JP   start1   
10A5                START:       
10A5   31 00 5D               LD   sp,STACK   ; start Monty
10A8   CD 51 10               CALL   init   ; setups
10AB                START1:      
10AB   21 0E 60               LD   hl,titleBuf   
10AE   CD FF 0F               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
10B1                INTERPRET:      
10B1   CD 3A 10               CALL   prompt   
10B4   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
10B7   21 00 5D               LD   hl,TIB   
10BA   22 E6 5F               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
10BD                INTERPRET2:      ; calculate nesting
10BD   1E 00                  LD   e,0   ; initilize nesting value
10BF   C5                     PUSH   bc   ; save offset into TIB,
10C0                             ; bc is also the count of chars in TIB
10C0   21 00 5D               LD   hl,TIB   ; hl is start of TIB
10C3   18 06                  JR   interpret4   
10C5                INTERPRET3:      
10C5   7E                     LD   a,(hl)   ; a = char in TIB
10C6   23                     INC   hl   ; inc pointer into TIB
10C7   0B                     DEC   bc   ; dec count of chars in TIB
10C8   CD 04 10               CALL   nesting   ; update nesting value
10CB                INTERPRET4:      
10CB   79                     LD   a,c   ; is count zero?
10CC   B0                     OR   b   
10CD   20 F6                  JR   nz,interpret3   ; if not loop
10CF   C1                     POP   bc   ; restore offset into TIB
10D0                INTERPRET5:      
10D0   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
10D3   FE 20                  CP   $20   ; compare to space
10D5   30 14                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
10D7   FE 00                  CP   NUL   ; is it end of string? NUL end of string
10D9   28 31                  JR   z,interpret8   
10DB   FE 0D                  CP   "\r"   ; carriage return? ascii 13
10DD   28 1A                  JR   z,interpret7   ; if anything else its macro/control
10DF   FE 08                  CP   CTRL_H   
10E1   CA 5D 11               JP   z,backSpace_   
10E4   FE 0A                  CP   CTRL_J   
10E6   CA 6D 11               JP   z,reEdit_   
10E9                INTERPRET5A:      
10E9   18 D2                  JR   interpret2   
10EB                INTERPRET6:      
10EB   21 00 5D               LD   hl,TIB   
10EE   09                     ADD   hl,bc   
10EF   77                     LD   (hl),a   ; store the character in textbuf
10F0   03                     INC   bc   
10F1   CD 85 00               CALL   putchar   ; echo character to screen
10F4   CD 04 10               CALL   nesting   
10F7   18 D7                  JR   interpret5   ; wait for next character
10F9                INTERPRET7:      
10F9   21 00 5D               LD   hl,TIB   
10FC   09                     ADD   hl,bc   
10FD   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
10FF   23                     INC   hl   
1100   36 0A                  LD   (hl),"\n"   
1102   23                     INC   hl   
1103   03                     INC   bc   
1104   03                     INC   bc   
1105   CD 43 10               CALL   crlf   ; echo character to screen
1108   7B                     LD   a,e   ; if zero nesting append and ETX after \r
1109   B7                     OR   a   
110A   20 C4                  JR   nz,interpret5   
110C                INTERPRET8:      
110C   21 00 5D               LD   hl,TIB   
110F   09                     ADD   hl,bc   
1110   22 E6 5F               LD   (vTIBPtr),hl   
1113   01 00 5D               LD   bc,TIB   
1116   ED 43 FC 5F            LD   (vSavedIP),bc   ; save IP
111A   ED 73 FE 5F            LD   (vSavedSP),sp   ; save SP
111E   DD 22 00 60            LD   (vSavedNext),ix   ; save Next
1122   FD 22 02 60            LD   (vSavedBP),iy   ; save BP
1126   0B                     DEC   bc   
1127                NEXT:        
1127   03                     INC   bc   ; Increment the IP
1128   0A                     LD   a,(bc)   ; Get the next character and dispatch
1129   FE 20                  CP   " "   ; whitespace?
112B   28 FA                  JR   z,next   ; space? ignore
112D   38 0D                  JR   c,next1   
112F   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
1131   6F                     LD   l,a   ; index into table
1132   26 01                  LD   h,msb(opcodes)   ; start address of jump table
1134   6E                     LD   l,(hl)   ; get low jump address
1135   24                     INC   h   ; page 2
1136   FE BA                  CP   "Z" - "!" + 1 + $80   
1138   38 01                  JR   c,next0   
113A   24                     INC   h   ; page 3
113B                NEXT0:       
113B   E9                     JP   (hl)   ; Jump to routine
113C                NEXT1:       
113C   FE 00                  CP   NUL   ; end of input string?
113E   28 03                  JR   z,exit   
1140   C3 B1 10               JP   interpret   ; no, other whitespace, macros?
1143                EXIT:        
1143   03                     INC   bc   
1144   60 69                  LD   hl,bc   
1146   E9                     JP   (hl)   
1147                RUN:         
1147   C1                     POP   bc   
1148   0B                     DEC   bc   
1149   DD E9                  JP   (ix)   
114B                ERROR:       
114B   E5                     PUSH   hl   
114C   CD 47 11               CALL   run   
114F   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
115A   C3 B1 10               JP   interpret   
115D                BACKSPACE_:      
115D   79                     LD   a,c   
115E   B0                     OR   b   
115F   CA BD 10               JP   z,interpret2   
1162   0B                     DEC   bc   
1163   CD 4A 10               CALL   printStr   
1166   08 20 08 00            .CSTR   "\b \b"   
116A   C3 BD 10               JP   interpret2   
116D                REEDIT_:      
116D   CD 4A 10               CALL   printStr   
1170   0D 3E 20 00            .CSTR   "\r> "   
1174   21 00 5D               LD   hl,TIB   
1177   18 04                  JR   reEdit1   
1179                REEDIT0:      
1179   CD 85 00               CALL   putchar   
117C   23                     INC   hl   
117D                REEDIT1:      
117D   7E                     LD   a,(hl)   
117E   FE 0D                  CP   "\r"   
1180   20 F7                  JR   nz,reEdit0   
1182   11 00 5D               LD   de,TIB   
1185   B7                     OR   a   
1186   ED 52                  SBC   hl,de   
1188   44 4D                  LD   bc,hl   
118A   C3 BD 10               JP   interpret2   
118D                          ;*Macro unroll: FUNC f1, 0, ""
118D                F1:          
118D   CD 9F 03               CALL   go   
1190   00 00                  DW   NUL   
1192   98 11                  DW   f1M_3079S12   
1194   96 11                  DW   $+2   
1196   00                     DB   0   
1197   00                     .PSTR   ""   
1198                F1M_3079S12:      
1198   00                     DB   0   
1199                          ;*Macro unroll: FUNC f2, 0, ""
1199                F2:          
1199   CD 9F 03               CALL   go   
119C   00 00                  DW   NUL   
119E   A4 11                  DW   f2M_3081S15   
11A0   A2 11                  DW   $+2   
11A2   00                     DB   0   
11A3   00                     .PSTR   ""   
11A4                F2M_3081S15:      
11A4   00                     DB   0   
11A5                          ;*Macro unroll: FUNC f3, 0, ""
11A5                F3:          
11A5   CD 9F 03               CALL   go   
11A8   00 00                  DW   NUL   
11AA   B0 11                  DW   f3M_3083S18   
11AC   AE 11                  DW   $+2   
11AE   00                     DB   0   
11AF   00                     .PSTR   ""   
11B0                F3M_3083S18:      
11B0   00                     DB   0   
11B1                          ;*Macro unroll: FUNC f4, 0, ""
11B1                F4:          
11B1   CD 9F 03               CALL   go   
11B4   00 00                  DW   NUL   
11B6   BC 11                  DW   f4M_3085S21   
11B8   BA 11                  DW   $+2   
11BA   00                     DB   0   
11BB   00                     .PSTR   ""   
11BC                F4M_3085S21:      
11BC   00                     DB   0   
11BD                          ALIGN   $100   
1200                TESTSSTART:      
1200                          ;*Macro unroll:  test "0 10 1 /rng \\a{%a.} /for", 0
1200   31 00 5D               LD   SP,STACK   
1203   CD 7E 10               CALL   coldInit   
1206   CD 74 5B               CALL   execStr   
1209   30 20 31 30 20 31 20 2F 72 6E 67 20 5C 61 7B 25 61 2E 7D 20 2F 66 6F 72 00 DB   "0 10 1 /rng \\a{%a.} /for",0   
1222   E1                     POP   HL   
1223   E5                     PUSH   HL   
1224   11 00 00               LD   DE,0   
1227   B7                     OR   A   
1228   ED 52                  SBC   HL,DE   
122A   7D                     LD   A,L   
122B   B4                     OR   H   
122C   CA 9F 12               JP   Z,expectM_3089S27   
122F   CD 4A 10               CALL   printStr   
1232   43 6F 64 65 3A 20 30 20 31 30 20 31 20 2F 72 6E 67 20 5C 61 7B 25 61 2E 7D 20 2F 66 6F 72 00 .CSTR   "Code: ","0 10 1 /rng \\a{%a.} /for"   
1251   CD 4A 10               CALL   printStr   
1254   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1263   21 00 00               LD   hl,0   
1266   E5                     PUSH   hl   
1267   E5                     PUSH   hl   
1268   CD 47 11               CALL   run   
126B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1277   CD 4A 10               CALL   printStr   
127A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1287   E1                     POP   hl   
1288   E5                     PUSH   hl   
1289   E5                     PUSH   hl   
128A   CD 47 11               CALL   run   
128D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
129E   76                     HALT      
129F                EXPECTM_3089S27:      
129F   E1                     POP   HL   
12A0                             ; test "0 10 1 /rng \\a{%a 1 + 10 *} /map \\a{%a.} /for", 0
12A0                             ; test "0 10 1 /rng \\a{%a 3<}/ft \\a{%a.} /for", 0
12A0                             ; test "0 10 1 /rng  0 \\da{%d%a+}/fd \\a{%a 24<}/ft \\a{%a.} /for", 0
12A0                             ; test "[10 20 30] /ai \\a{%a.} /for", 0
12A0                             ; test "[1 2 3].a", 0
12A0                             ; test "/str `hello:` 65.c 1. 2. 3. /end .s", FALSE
12A0                             ; test "`hello:` 65.c 1. 2. 3.", FALSE
12A0                             ; test "/hex /byt $1234.",0
12A0                             ; test "/byt 257.",0
12A0                             ; test "$1000 'hello there!' /si \\a{%a.c} /for", $1000
12A0                             ; test "10 0 -1 /rng \\a{%a.} /for", 0
12A0                             ; test "0 10 1 /f1 \\a{%a.} /for", 0
12A0                             ; test "0 x = 2 x + = x .", false
12A0                             ; test "_B [_A {1} _B {2}] /endl", 2
12A0                             ; ; test "[_A {1} _B {2}] x= _B x /endl", 2
12A0                             ; ; test "/bra", 2
12A0                             ; call printStr
12A0                             ; .cstr "Done!"
12A0                             ; HALT
12A0                          ;*Macro unroll:  test "/fal", false
12A0   31 00 5D               LD   SP,STACK   
12A3   CD 7E 10               CALL   coldInit   
12A6   CD 74 5B               CALL   execStr   
12A9   2F 66 61 6C 00         DB   "/fal",0   
12AE   E1                     POP   HL   
12AF   E5                     PUSH   HL   
12B0   11 00 00               LD   DE,false   
12B3   B7                     OR   A   
12B4   ED 52                  SBC   HL,DE   
12B6   7D                     LD   A,L   
12B7   B4                     OR   H   
12B8   CA 17 13               JP   Z,expectM_3109S53   
12BB   CD 4A 10               CALL   printStr   
12BE   43 6F 64 65 3A 20 2F 66 61 6C 00 .CSTR   "Code: ","/fal"   
12C9   CD 4A 10               CALL   printStr   
12CC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12DB   21 00 00               LD   hl,false   
12DE   E5                     PUSH   hl   
12DF   E5                     PUSH   hl   
12E0   CD 47 11               CALL   run   
12E3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
12EF   CD 4A 10               CALL   printStr   
12F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12FF   E1                     POP   hl   
1300   E5                     PUSH   hl   
1301   E5                     PUSH   hl   
1302   CD 47 11               CALL   run   
1305   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1316   76                     HALT      
1317                EXPECTM_3109S53:      
1317   E1                     POP   HL   
1318                          ;*Macro unroll:  test "/tru", true
1318   31 00 5D               LD   SP,STACK   
131B   CD 7E 10               CALL   coldInit   
131E   CD 74 5B               CALL   execStr   
1321   2F 74 72 75 00         DB   "/tru",0   
1326   E1                     POP   HL   
1327   E5                     PUSH   HL   
1328   11 FF FF               LD   DE,true   
132B   B7                     OR   A   
132C   ED 52                  SBC   HL,DE   
132E   7D                     LD   A,L   
132F   B4                     OR   H   
1330   CA 8F 13               JP   Z,expectM_3110S54   
1333   CD 4A 10               CALL   printStr   
1336   43 6F 64 65 3A 20 2F 74 72 75 00 .CSTR   "Code: ","/tru"   
1341   CD 4A 10               CALL   printStr   
1344   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1353   21 FF FF               LD   hl,true   
1356   E5                     PUSH   hl   
1357   E5                     PUSH   hl   
1358   CD 47 11               CALL   run   
135B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1367   CD 4A 10               CALL   printStr   
136A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1377   E1                     POP   hl   
1378   E5                     PUSH   hl   
1379   E5                     PUSH   hl   
137A   CD 47 11               CALL   run   
137D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
138E   76                     HALT      
138F                EXPECTM_3110S54:      
138F   E1                     POP   HL   
1390                          ;*Macro unroll:  test "1", 1
1390   31 00 5D               LD   SP,STACK   
1393   CD 7E 10               CALL   coldInit   
1396   CD 74 5B               CALL   execStr   
1399   31 00                  DB   "1",0   
139B   E1                     POP   HL   
139C   E5                     PUSH   HL   
139D   11 01 00               LD   DE,1   
13A0   B7                     OR   A   
13A1   ED 52                  SBC   HL,DE   
13A3   7D                     LD   A,L   
13A4   B4                     OR   H   
13A5   CA 01 14               JP   Z,expectM_3111S55   
13A8   CD 4A 10               CALL   printStr   
13AB   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
13B3   CD 4A 10               CALL   printStr   
13B6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13C5   21 01 00               LD   hl,1   
13C8   E5                     PUSH   hl   
13C9   E5                     PUSH   hl   
13CA   CD 47 11               CALL   run   
13CD   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
13D9   CD 4A 10               CALL   printStr   
13DC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13E9   E1                     POP   hl   
13EA   E5                     PUSH   hl   
13EB   E5                     PUSH   hl   
13EC   CD 47 11               CALL   run   
13EF   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1400   76                     HALT      
1401                EXPECTM_3111S55:      
1401   E1                     POP   HL   
1402                          ;*Macro unroll:  test "2", 2
1402   31 00 5D               LD   SP,STACK   
1405   CD 7E 10               CALL   coldInit   
1408   CD 74 5B               CALL   execStr   
140B   32 00                  DB   "2",0   
140D   E1                     POP   HL   
140E   E5                     PUSH   HL   
140F   11 02 00               LD   DE,2   
1412   B7                     OR   A   
1413   ED 52                  SBC   HL,DE   
1415   7D                     LD   A,L   
1416   B4                     OR   H   
1417   CA 73 14               JP   Z,expectM_3112S56   
141A   CD 4A 10               CALL   printStr   
141D   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
1425   CD 4A 10               CALL   printStr   
1428   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1437   21 02 00               LD   hl,2   
143A   E5                     PUSH   hl   
143B   E5                     PUSH   hl   
143C   CD 47 11               CALL   run   
143F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
144B   CD 4A 10               CALL   printStr   
144E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
145B   E1                     POP   hl   
145C   E5                     PUSH   hl   
145D   E5                     PUSH   hl   
145E   CD 47 11               CALL   run   
1461   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1472   76                     HALT      
1473                EXPECTM_3112S56:      
1473   E1                     POP   HL   
1474                          ;*Macro unroll:  test "1", 1
1474   31 00 5D               LD   SP,STACK   
1477   CD 7E 10               CALL   coldInit   
147A   CD 74 5B               CALL   execStr   
147D   31 00                  DB   "1",0   
147F   E1                     POP   HL   
1480   E5                     PUSH   HL   
1481   11 01 00               LD   DE,1   
1484   B7                     OR   A   
1485   ED 52                  SBC   HL,DE   
1487   7D                     LD   A,L   
1488   B4                     OR   H   
1489   CA E5 14               JP   Z,expectM_3113S57   
148C   CD 4A 10               CALL   printStr   
148F   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
1497   CD 4A 10               CALL   printStr   
149A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14A9   21 01 00               LD   hl,1   
14AC   E5                     PUSH   hl   
14AD   E5                     PUSH   hl   
14AE   CD 47 11               CALL   run   
14B1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
14BD   CD 4A 10               CALL   printStr   
14C0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14CD   E1                     POP   hl   
14CE   E5                     PUSH   hl   
14CF   E5                     PUSH   hl   
14D0   CD 47 11               CALL   run   
14D3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
14E4   76                     HALT      
14E5                EXPECTM_3113S57:      
14E5   E1                     POP   HL   
14E6                          ;*Macro unroll:  test "0", 0
14E6   31 00 5D               LD   SP,STACK   
14E9   CD 7E 10               CALL   coldInit   
14EC   CD 74 5B               CALL   execStr   
14EF   30 00                  DB   "0",0   
14F1   E1                     POP   HL   
14F2   E5                     PUSH   HL   
14F3   11 00 00               LD   DE,0   
14F6   B7                     OR   A   
14F7   ED 52                  SBC   HL,DE   
14F9   7D                     LD   A,L   
14FA   B4                     OR   H   
14FB   CA 57 15               JP   Z,expectM_3114S58   
14FE   CD 4A 10               CALL   printStr   
1501   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
1509   CD 4A 10               CALL   printStr   
150C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
151B   21 00 00               LD   hl,0   
151E   E5                     PUSH   hl   
151F   E5                     PUSH   hl   
1520   CD 47 11               CALL   run   
1523   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
152F   CD 4A 10               CALL   printStr   
1532   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
153F   E1                     POP   hl   
1540   E5                     PUSH   hl   
1541   E5                     PUSH   hl   
1542   CD 47 11               CALL   run   
1545   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1556   76                     HALT      
1557                EXPECTM_3114S58:      
1557   E1                     POP   HL   
1558                          ;*Macro unroll:  test "10", 10
1558   31 00 5D               LD   SP,STACK   
155B   CD 7E 10               CALL   coldInit   
155E   CD 74 5B               CALL   execStr   
1561   31 30 00               DB   "10",0   
1564   E1                     POP   HL   
1565   E5                     PUSH   HL   
1566   11 0A 00               LD   DE,10   
1569   B7                     OR   A   
156A   ED 52                  SBC   HL,DE   
156C   7D                     LD   A,L   
156D   B4                     OR   H   
156E   CA CB 15               JP   Z,expectM_3115S59   
1571   CD 4A 10               CALL   printStr   
1574   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
157D   CD 4A 10               CALL   printStr   
1580   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
158F   21 0A 00               LD   hl,10   
1592   E5                     PUSH   hl   
1593   E5                     PUSH   hl   
1594   CD 47 11               CALL   run   
1597   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
15A3   CD 4A 10               CALL   printStr   
15A6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15B3   E1                     POP   hl   
15B4   E5                     PUSH   hl   
15B5   E5                     PUSH   hl   
15B6   CD 47 11               CALL   run   
15B9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
15CA   76                     HALT      
15CB                EXPECTM_3115S59:      
15CB   E1                     POP   HL   
15CC                          ;*Macro unroll:  test "123", 123
15CC   31 00 5D               LD   SP,STACK   
15CF   CD 7E 10               CALL   coldInit   
15D2   CD 74 5B               CALL   execStr   
15D5   31 32 33 00            DB   "123",0   
15D9   E1                     POP   HL   
15DA   E5                     PUSH   HL   
15DB   11 7B 00               LD   DE,123   
15DE   B7                     OR   A   
15DF   ED 52                  SBC   HL,DE   
15E1   7D                     LD   A,L   
15E2   B4                     OR   H   
15E3   CA 41 16               JP   Z,expectM_3116S60   
15E6   CD 4A 10               CALL   printStr   
15E9   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
15F3   CD 4A 10               CALL   printStr   
15F6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1605   21 7B 00               LD   hl,123   
1608   E5                     PUSH   hl   
1609   E5                     PUSH   hl   
160A   CD 47 11               CALL   run   
160D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1619   CD 4A 10               CALL   printStr   
161C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1629   E1                     POP   hl   
162A   E5                     PUSH   hl   
162B   E5                     PUSH   hl   
162C   CD 47 11               CALL   run   
162F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1640   76                     HALT      
1641                EXPECTM_3116S60:      
1641   E1                     POP   HL   
1642                          ;*Macro unroll:  test "-1",-1
1642   31 00 5D               LD   SP,STACK   
1645   CD 7E 10               CALL   coldInit   
1648   CD 74 5B               CALL   execStr   
164B   2D 31 00               DB   "-1",0   
164E   E1                     POP   HL   
164F   E5                     PUSH   HL   
1650   11 FF FF               LD   DE,-1   
1653   B7                     OR   A   
1654   ED 52                  SBC   HL,DE   
1656   7D                     LD   A,L   
1657   B4                     OR   H   
1658   CA B5 16               JP   Z,expectM_3117S61   
165B   CD 4A 10               CALL   printStr   
165E   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1667   CD 4A 10               CALL   printStr   
166A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1679   21 FF FF               LD   hl,-1   
167C   E5                     PUSH   hl   
167D   E5                     PUSH   hl   
167E   CD 47 11               CALL   run   
1681   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
168D   CD 4A 10               CALL   printStr   
1690   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
169D   E1                     POP   hl   
169E   E5                     PUSH   hl   
169F   E5                     PUSH   hl   
16A0   CD 47 11               CALL   run   
16A3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
16B4   76                     HALT      
16B5                EXPECTM_3117S61:      
16B5   E1                     POP   HL   
16B6                          ;*Macro unroll:  test "-1/abs",1
16B6   31 00 5D               LD   SP,STACK   
16B9   CD 7E 10               CALL   coldInit   
16BC   CD 74 5B               CALL   execStr   
16BF   2D 31 2F 61 62 73 00   DB   "-1/abs",0   
16C6   E1                     POP   HL   
16C7   E5                     PUSH   HL   
16C8   11 01 00               LD   DE,1   
16CB   B7                     OR   A   
16CC   ED 52                  SBC   HL,DE   
16CE   7D                     LD   A,L   
16CF   B4                     OR   H   
16D0   CA 31 17               JP   Z,expectM_3118S62   
16D3   CD 4A 10               CALL   printStr   
16D6   43 6F 64 65 3A 20 2D 31 2F 61 62 73 00 .CSTR   "Code: ","-1/abs"   
16E3   CD 4A 10               CALL   printStr   
16E6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16F5   21 01 00               LD   hl,1   
16F8   E5                     PUSH   hl   
16F9   E5                     PUSH   hl   
16FA   CD 47 11               CALL   run   
16FD   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1709   CD 4A 10               CALL   printStr   
170C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1719   E1                     POP   hl   
171A   E5                     PUSH   hl   
171B   E5                     PUSH   hl   
171C   CD 47 11               CALL   run   
171F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1730   76                     HALT      
1731                EXPECTM_3118S62:      
1731   E1                     POP   HL   
1732                          ;*Macro unroll:  test "_a", $61
1732   31 00 5D               LD   SP,STACK   
1735   CD 7E 10               CALL   coldInit   
1738   CD 74 5B               CALL   execStr   
173B   5F 61 00               DB   "_a",0   
173E   E1                     POP   HL   
173F   E5                     PUSH   HL   
1740   11 61 00               LD   DE,$61   
1743   B7                     OR   A   
1744   ED 52                  SBC   HL,DE   
1746   7D                     LD   A,L   
1747   B4                     OR   H   
1748   CA A5 17               JP   Z,expectM_3119S63   
174B   CD 4A 10               CALL   printStr   
174E   43 6F 64 65 3A 20 5F 61 00 .CSTR   "Code: ","_a"   
1757   CD 4A 10               CALL   printStr   
175A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1769   21 61 00               LD   hl,$61   
176C   E5                     PUSH   hl   
176D   E5                     PUSH   hl   
176E   CD 47 11               CALL   run   
1771   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
177D   CD 4A 10               CALL   printStr   
1780   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
178D   E1                     POP   hl   
178E   E5                     PUSH   hl   
178F   E5                     PUSH   hl   
1790   CD 47 11               CALL   run   
1793   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
17A4   76                     HALT      
17A5                EXPECTM_3119S63:      
17A5   E1                     POP   HL   
17A6                          ;*Macro unroll:  test "__", $5F
17A6   31 00 5D               LD   SP,STACK   
17A9   CD 7E 10               CALL   coldInit   
17AC   CD 74 5B               CALL   execStr   
17AF   5F 5F 00               DB   "__",0   
17B2   E1                     POP   HL   
17B3   E5                     PUSH   HL   
17B4   11 5F 00               LD   DE,$5F   
17B7   B7                     OR   A   
17B8   ED 52                  SBC   HL,DE   
17BA   7D                     LD   A,L   
17BB   B4                     OR   H   
17BC   CA 19 18               JP   Z,expectM_3120S64   
17BF   CD 4A 10               CALL   printStr   
17C2   43 6F 64 65 3A 20 5F 5F 00 .CSTR   "Code: ","__"   
17CB   CD 4A 10               CALL   printStr   
17CE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17DD   21 5F 00               LD   hl,$5F   
17E0   E5                     PUSH   hl   
17E1   E5                     PUSH   hl   
17E2   CD 47 11               CALL   run   
17E5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
17F1   CD 4A 10               CALL   printStr   
17F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1801   E1                     POP   hl   
1802   E5                     PUSH   hl   
1803   E5                     PUSH   hl   
1804   CD 47 11               CALL   run   
1807   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1818   76                     HALT      
1819                EXPECTM_3120S64:      
1819   E1                     POP   HL   
181A                          ;*Macro unroll:  test "$10", $10
181A   31 00 5D               LD   SP,STACK   
181D   CD 7E 10               CALL   coldInit   
1820   CD 74 5B               CALL   execStr   
1823   24 31 30 00            DB   "$10",0   
1827   E1                     POP   HL   
1828   E5                     PUSH   HL   
1829   11 10 00               LD   DE,$10   
182C   B7                     OR   A   
182D   ED 52                  SBC   HL,DE   
182F   7D                     LD   A,L   
1830   B4                     OR   H   
1831   CA 8F 18               JP   Z,expectM_3121S65   
1834   CD 4A 10               CALL   printStr   
1837   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
1841   CD 4A 10               CALL   printStr   
1844   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1853   21 10 00               LD   hl,$10   
1856   E5                     PUSH   hl   
1857   E5                     PUSH   hl   
1858   CD 47 11               CALL   run   
185B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1867   CD 4A 10               CALL   printStr   
186A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1877   E1                     POP   hl   
1878   E5                     PUSH   hl   
1879   E5                     PUSH   hl   
187A   CD 47 11               CALL   run   
187D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
188E   76                     HALT      
188F                EXPECTM_3121S65:      
188F   E1                     POP   HL   
1890                          ;*Macro unroll:  test "$FF", $FF
1890   31 00 5D               LD   SP,STACK   
1893   CD 7E 10               CALL   coldInit   
1896   CD 74 5B               CALL   execStr   
1899   24 46 46 00            DB   "$FF",0   
189D   E1                     POP   HL   
189E   E5                     PUSH   HL   
189F   11 FF 00               LD   DE,$FF   
18A2   B7                     OR   A   
18A3   ED 52                  SBC   HL,DE   
18A5   7D                     LD   A,L   
18A6   B4                     OR   H   
18A7   CA 05 19               JP   Z,expectM_3122S66   
18AA   CD 4A 10               CALL   printStr   
18AD   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
18B7   CD 4A 10               CALL   printStr   
18BA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18C9   21 FF 00               LD   hl,$FF   
18CC   E5                     PUSH   hl   
18CD   E5                     PUSH   hl   
18CE   CD 47 11               CALL   run   
18D1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
18DD   CD 4A 10               CALL   printStr   
18E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18ED   E1                     POP   hl   
18EE   E5                     PUSH   hl   
18EF   E5                     PUSH   hl   
18F0   CD 47 11               CALL   run   
18F3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1904   76                     HALT      
1905                EXPECTM_3122S66:      
1905   E1                     POP   HL   
1906                          ;*Macro unroll:  test "-1 2 +",1
1906   31 00 5D               LD   SP,STACK   
1909   CD 7E 10               CALL   coldInit   
190C   CD 74 5B               CALL   execStr   
190F   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
1916   E1                     POP   HL   
1917   E5                     PUSH   HL   
1918   11 01 00               LD   DE,1   
191B   B7                     OR   A   
191C   ED 52                  SBC   HL,DE   
191E   7D                     LD   A,L   
191F   B4                     OR   H   
1920   CA 81 19               JP   Z,expectM_3123S67   
1923   CD 4A 10               CALL   printStr   
1926   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1933   CD 4A 10               CALL   printStr   
1936   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1945   21 01 00               LD   hl,1   
1948   E5                     PUSH   hl   
1949   E5                     PUSH   hl   
194A   CD 47 11               CALL   run   
194D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1959   CD 4A 10               CALL   printStr   
195C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1969   E1                     POP   hl   
196A   E5                     PUSH   hl   
196B   E5                     PUSH   hl   
196C   CD 47 11               CALL   run   
196F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1980   76                     HALT      
1981                EXPECTM_3123S67:      
1981   E1                     POP   HL   
1982                          ;*Macro unroll:  test "-1 1 +",0
1982   31 00 5D               LD   SP,STACK   
1985   CD 7E 10               CALL   coldInit   
1988   CD 74 5B               CALL   execStr   
198B   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
1992   E1                     POP   HL   
1993   E5                     PUSH   HL   
1994   11 00 00               LD   DE,0   
1997   B7                     OR   A   
1998   ED 52                  SBC   HL,DE   
199A   7D                     LD   A,L   
199B   B4                     OR   H   
199C   CA FD 19               JP   Z,expectM_3124S68   
199F   CD 4A 10               CALL   printStr   
19A2   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
19AF   CD 4A 10               CALL   printStr   
19B2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19C1   21 00 00               LD   hl,0   
19C4   E5                     PUSH   hl   
19C5   E5                     PUSH   hl   
19C6   CD 47 11               CALL   run   
19C9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
19D5   CD 4A 10               CALL   printStr   
19D8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19E5   E1                     POP   hl   
19E6   E5                     PUSH   hl   
19E7   E5                     PUSH   hl   
19E8   CD 47 11               CALL   run   
19EB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
19FC   76                     HALT      
19FD                EXPECTM_3124S68:      
19FD   E1                     POP   HL   
19FE                          ;*Macro unroll:  test "1 2 +", 3
19FE   31 00 5D               LD   SP,STACK   
1A01   CD 7E 10               CALL   coldInit   
1A04   CD 74 5B               CALL   execStr   
1A07   31 20 32 20 2B 00      DB   "1 2 +",0   
1A0D   E1                     POP   HL   
1A0E   E5                     PUSH   HL   
1A0F   11 03 00               LD   DE,3   
1A12   B7                     OR   A   
1A13   ED 52                  SBC   HL,DE   
1A15   7D                     LD   A,L   
1A16   B4                     OR   H   
1A17   CA 77 1A               JP   Z,expectM_3125S69   
1A1A   CD 4A 10               CALL   printStr   
1A1D   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1A29   CD 4A 10               CALL   printStr   
1A2C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A3B   21 03 00               LD   hl,3   
1A3E   E5                     PUSH   hl   
1A3F   E5                     PUSH   hl   
1A40   CD 47 11               CALL   run   
1A43   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1A4F   CD 4A 10               CALL   printStr   
1A52   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A5F   E1                     POP   hl   
1A60   E5                     PUSH   hl   
1A61   E5                     PUSH   hl   
1A62   CD 47 11               CALL   run   
1A65   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1A76   76                     HALT      
1A77                EXPECTM_3125S69:      
1A77   E1                     POP   HL   
1A78                          ;*Macro unroll:  test "4 1 2 +", 3
1A78   31 00 5D               LD   SP,STACK   
1A7B   CD 7E 10               CALL   coldInit   
1A7E   CD 74 5B               CALL   execStr   
1A81   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
1A89   E1                     POP   HL   
1A8A   E5                     PUSH   HL   
1A8B   11 03 00               LD   DE,3   
1A8E   B7                     OR   A   
1A8F   ED 52                  SBC   HL,DE   
1A91   7D                     LD   A,L   
1A92   B4                     OR   H   
1A93   CA F5 1A               JP   Z,expectM_3126S70   
1A96   CD 4A 10               CALL   printStr   
1A99   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1AA7   CD 4A 10               CALL   printStr   
1AAA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AB9   21 03 00               LD   hl,3   
1ABC   E5                     PUSH   hl   
1ABD   E5                     PUSH   hl   
1ABE   CD 47 11               CALL   run   
1AC1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1ACD   CD 4A 10               CALL   printStr   
1AD0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1ADD   E1                     POP   hl   
1ADE   E5                     PUSH   hl   
1ADF   E5                     PUSH   hl   
1AE0   CD 47 11               CALL   run   
1AE3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1AF4   76                     HALT      
1AF5                EXPECTM_3126S70:      
1AF5   E1                     POP   HL   
1AF6                          ;*Macro unroll:  test "123 456 +", 123+456
1AF6   31 00 5D               LD   SP,STACK   
1AF9   CD 7E 10               CALL   coldInit   
1AFC   CD 74 5B               CALL   execStr   
1AFF   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1B09   E1                     POP   HL   
1B0A   E5                     PUSH   HL   
1B0B   11 43 02               LD   DE,123+456   
1B0E   B7                     OR   A   
1B0F   ED 52                  SBC   HL,DE   
1B11   7D                     LD   A,L   
1B12   B4                     OR   H   
1B13   CA 77 1B               JP   Z,expectM_3127S71   
1B16   CD 4A 10               CALL   printStr   
1B19   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1B29   CD 4A 10               CALL   printStr   
1B2C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B3B   21 43 02               LD   hl,123+456   
1B3E   E5                     PUSH   hl   
1B3F   E5                     PUSH   hl   
1B40   CD 47 11               CALL   run   
1B43   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1B4F   CD 4A 10               CALL   printStr   
1B52   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B5F   E1                     POP   hl   
1B60   E5                     PUSH   hl   
1B61   E5                     PUSH   hl   
1B62   CD 47 11               CALL   run   
1B65   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1B76   76                     HALT      
1B77                EXPECTM_3127S71:      
1B77   E1                     POP   HL   
1B78                          ;*Macro unroll:  test "64 128 +", 64+128
1B78   31 00 5D               LD   SP,STACK   
1B7B   CD 7E 10               CALL   coldInit   
1B7E   CD 74 5B               CALL   execStr   
1B81   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
1B8A   E1                     POP   HL   
1B8B   E5                     PUSH   HL   
1B8C   11 C0 00               LD   DE,64+128   
1B8F   B7                     OR   A   
1B90   ED 52                  SBC   HL,DE   
1B92   7D                     LD   A,L   
1B93   B4                     OR   H   
1B94   CA F7 1B               JP   Z,expectM_3128S72   
1B97   CD 4A 10               CALL   printStr   
1B9A   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1BA9   CD 4A 10               CALL   printStr   
1BAC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BBB   21 C0 00               LD   hl,64+128   
1BBE   E5                     PUSH   hl   
1BBF   E5                     PUSH   hl   
1BC0   CD 47 11               CALL   run   
1BC3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1BCF   CD 4A 10               CALL   printStr   
1BD2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BDF   E1                     POP   hl   
1BE0   E5                     PUSH   hl   
1BE1   E5                     PUSH   hl   
1BE2   CD 47 11               CALL   run   
1BE5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1BF6   76                     HALT      
1BF7                EXPECTM_3128S72:      
1BF7   E1                     POP   HL   
1BF8                          ;*Macro unroll:  test "1 2 +", 3
1BF8   31 00 5D               LD   SP,STACK   
1BFB   CD 7E 10               CALL   coldInit   
1BFE   CD 74 5B               CALL   execStr   
1C01   31 20 32 20 2B 00      DB   "1 2 +",0   
1C07   E1                     POP   HL   
1C08   E5                     PUSH   HL   
1C09   11 03 00               LD   DE,3   
1C0C   B7                     OR   A   
1C0D   ED 52                  SBC   HL,DE   
1C0F   7D                     LD   A,L   
1C10   B4                     OR   H   
1C11   CA 71 1C               JP   Z,expectM_3129S73   
1C14   CD 4A 10               CALL   printStr   
1C17   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1C23   CD 4A 10               CALL   printStr   
1C26   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C35   21 03 00               LD   hl,3   
1C38   E5                     PUSH   hl   
1C39   E5                     PUSH   hl   
1C3A   CD 47 11               CALL   run   
1C3D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1C49   CD 4A 10               CALL   printStr   
1C4C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C59   E1                     POP   hl   
1C5A   E5                     PUSH   hl   
1C5B   E5                     PUSH   hl   
1C5C   CD 47 11               CALL   run   
1C5F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1C70   76                     HALT      
1C71                EXPECTM_3129S73:      
1C71   E1                     POP   HL   
1C72                          ;*Macro unroll:  test "1a= a++ a",2
1C72   31 00 5D               LD   SP,STACK   
1C75   CD 7E 10               CALL   coldInit   
1C78   CD 74 5B               CALL   execStr   
1C7B   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1C85   E1                     POP   HL   
1C86   E5                     PUSH   HL   
1C87   11 02 00               LD   DE,2   
1C8A   B7                     OR   A   
1C8B   ED 52                  SBC   HL,DE   
1C8D   7D                     LD   A,L   
1C8E   B4                     OR   H   
1C8F   CA F3 1C               JP   Z,expectM_3130S74   
1C92   CD 4A 10               CALL   printStr   
1C95   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1CA5   CD 4A 10               CALL   printStr   
1CA8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CB7   21 02 00               LD   hl,2   
1CBA   E5                     PUSH   hl   
1CBB   E5                     PUSH   hl   
1CBC   CD 47 11               CALL   run   
1CBF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1CCB   CD 4A 10               CALL   printStr   
1CCE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CDB   E1                     POP   hl   
1CDC   E5                     PUSH   hl   
1CDD   E5                     PUSH   hl   
1CDE   CD 47 11               CALL   run   
1CE1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1CF2   76                     HALT      
1CF3                EXPECTM_3130S74:      
1CF3   E1                     POP   HL   
1CF4                          ;*Macro unroll:  test "-1 -1 -",0
1CF4   31 00 5D               LD   SP,STACK   
1CF7   CD 7E 10               CALL   coldInit   
1CFA   CD 74 5B               CALL   execStr   
1CFD   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1D05   E1                     POP   HL   
1D06   E5                     PUSH   HL   
1D07   11 00 00               LD   DE,0   
1D0A   B7                     OR   A   
1D0B   ED 52                  SBC   HL,DE   
1D0D   7D                     LD   A,L   
1D0E   B4                     OR   H   
1D0F   CA 71 1D               JP   Z,expectM_3131S75   
1D12   CD 4A 10               CALL   printStr   
1D15   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1D23   CD 4A 10               CALL   printStr   
1D26   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D35   21 00 00               LD   hl,0   
1D38   E5                     PUSH   hl   
1D39   E5                     PUSH   hl   
1D3A   CD 47 11               CALL   run   
1D3D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1D49   CD 4A 10               CALL   printStr   
1D4C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D59   E1                     POP   hl   
1D5A   E5                     PUSH   hl   
1D5B   E5                     PUSH   hl   
1D5C   CD 47 11               CALL   run   
1D5F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1D70   76                     HALT      
1D71                EXPECTM_3131S75:      
1D71   E1                     POP   HL   
1D72                          ;*Macro unroll:  test "5 3 -", 2
1D72   31 00 5D               LD   SP,STACK   
1D75   CD 7E 10               CALL   coldInit   
1D78   CD 74 5B               CALL   execStr   
1D7B   35 20 33 20 2D 00      DB   "5 3 -",0   
1D81   E1                     POP   HL   
1D82   E5                     PUSH   HL   
1D83   11 02 00               LD   DE,2   
1D86   B7                     OR   A   
1D87   ED 52                  SBC   HL,DE   
1D89   7D                     LD   A,L   
1D8A   B4                     OR   H   
1D8B   CA EB 1D               JP   Z,expectM_3132S76   
1D8E   CD 4A 10               CALL   printStr   
1D91   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1D9D   CD 4A 10               CALL   printStr   
1DA0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DAF   21 02 00               LD   hl,2   
1DB2   E5                     PUSH   hl   
1DB3   E5                     PUSH   hl   
1DB4   CD 47 11               CALL   run   
1DB7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1DC3   CD 4A 10               CALL   printStr   
1DC6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DD3   E1                     POP   hl   
1DD4   E5                     PUSH   hl   
1DD5   E5                     PUSH   hl   
1DD6   CD 47 11               CALL   run   
1DD9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1DEA   76                     HALT      
1DEB                EXPECTM_3132S76:      
1DEB   E1                     POP   HL   
1DEC                          ;*Macro unroll:  test "2 1 -",1
1DEC   31 00 5D               LD   SP,STACK   
1DEF   CD 7E 10               CALL   coldInit   
1DF2   CD 74 5B               CALL   execStr   
1DF5   32 20 31 20 2D 00      DB   "2 1 -",0   
1DFB   E1                     POP   HL   
1DFC   E5                     PUSH   HL   
1DFD   11 01 00               LD   DE,1   
1E00   B7                     OR   A   
1E01   ED 52                  SBC   HL,DE   
1E03   7D                     LD   A,L   
1E04   B4                     OR   H   
1E05   CA 65 1E               JP   Z,expectM_3133S77   
1E08   CD 4A 10               CALL   printStr   
1E0B   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1E17   CD 4A 10               CALL   printStr   
1E1A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E29   21 01 00               LD   hl,1   
1E2C   E5                     PUSH   hl   
1E2D   E5                     PUSH   hl   
1E2E   CD 47 11               CALL   run   
1E31   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1E3D   CD 4A 10               CALL   printStr   
1E40   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E4D   E1                     POP   hl   
1E4E   E5                     PUSH   hl   
1E4F   E5                     PUSH   hl   
1E50   CD 47 11               CALL   run   
1E53   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1E64   76                     HALT      
1E65                EXPECTM_3133S77:      
1E65   E1                     POP   HL   
1E66                          ;*Macro unroll:  test "3a= a-- a",2
1E66   31 00 5D               LD   SP,STACK   
1E69   CD 7E 10               CALL   coldInit   
1E6C   CD 74 5B               CALL   execStr   
1E6F   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1E79   E1                     POP   HL   
1E7A   E5                     PUSH   HL   
1E7B   11 02 00               LD   DE,2   
1E7E   B7                     OR   A   
1E7F   ED 52                  SBC   HL,DE   
1E81   7D                     LD   A,L   
1E82   B4                     OR   H   
1E83   CA E7 1E               JP   Z,expectM_3134S78   
1E86   CD 4A 10               CALL   printStr   
1E89   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1E99   CD 4A 10               CALL   printStr   
1E9C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EAB   21 02 00               LD   hl,2   
1EAE   E5                     PUSH   hl   
1EAF   E5                     PUSH   hl   
1EB0   CD 47 11               CALL   run   
1EB3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1EBF   CD 4A 10               CALL   printStr   
1EC2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1ECF   E1                     POP   hl   
1ED0   E5                     PUSH   hl   
1ED1   E5                     PUSH   hl   
1ED2   CD 47 11               CALL   run   
1ED5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1EE6   76                     HALT      
1EE7                EXPECTM_3134S78:      
1EE7   E1                     POP   HL   
1EE8                          ;*Macro unroll:  test "3 5 &", 1
1EE8   31 00 5D               LD   SP,STACK   
1EEB   CD 7E 10               CALL   coldInit   
1EEE   CD 74 5B               CALL   execStr   
1EF1   33 20 35 20 26 00      DB   "3 5 &",0   
1EF7   E1                     POP   HL   
1EF8   E5                     PUSH   HL   
1EF9   11 01 00               LD   DE,1   
1EFC   B7                     OR   A   
1EFD   ED 52                  SBC   HL,DE   
1EFF   7D                     LD   A,L   
1F00   B4                     OR   H   
1F01   CA 61 1F               JP   Z,expectM_3135S79   
1F04   CD 4A 10               CALL   printStr   
1F07   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1F13   CD 4A 10               CALL   printStr   
1F16   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F25   21 01 00               LD   hl,1   
1F28   E5                     PUSH   hl   
1F29   E5                     PUSH   hl   
1F2A   CD 47 11               CALL   run   
1F2D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1F39   CD 4A 10               CALL   printStr   
1F3C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F49   E1                     POP   hl   
1F4A   E5                     PUSH   hl   
1F4B   E5                     PUSH   hl   
1F4C   CD 47 11               CALL   run   
1F4F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1F60   76                     HALT      
1F61                EXPECTM_3135S79:      
1F61   E1                     POP   HL   
1F62                          ;*Macro unroll:  test "3 5 |", 7
1F62   31 00 5D               LD   SP,STACK   
1F65   CD 7E 10               CALL   coldInit   
1F68   CD 74 5B               CALL   execStr   
1F6B   33 20 35 20 7C 00      DB   "3 5 |",0   
1F71   E1                     POP   HL   
1F72   E5                     PUSH   HL   
1F73   11 07 00               LD   DE,7   
1F76   B7                     OR   A   
1F77   ED 52                  SBC   HL,DE   
1F79   7D                     LD   A,L   
1F7A   B4                     OR   H   
1F7B   CA DB 1F               JP   Z,expectM_3136S80   
1F7E   CD 4A 10               CALL   printStr   
1F81   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1F8D   CD 4A 10               CALL   printStr   
1F90   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F9F   21 07 00               LD   hl,7   
1FA2   E5                     PUSH   hl   
1FA3   E5                     PUSH   hl   
1FA4   CD 47 11               CALL   run   
1FA7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
1FB3   CD 4A 10               CALL   printStr   
1FB6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FC3   E1                     POP   hl   
1FC4   E5                     PUSH   hl   
1FC5   E5                     PUSH   hl   
1FC6   CD 47 11               CALL   run   
1FC9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
1FDA   76                     HALT      
1FDB                EXPECTM_3136S80:      
1FDB   E1                     POP   HL   
1FDC                          ;*Macro unroll:  test "3 5 /xor", 6
1FDC   31 00 5D               LD   SP,STACK   
1FDF   CD 7E 10               CALL   coldInit   
1FE2   CD 74 5B               CALL   execStr   
1FE5   33 20 35 20 2F 78 6F 72 00 DB   "3 5 /xor",0   
1FEE   E1                     POP   HL   
1FEF   E5                     PUSH   HL   
1FF0   11 06 00               LD   DE,6   
1FF3   B7                     OR   A   
1FF4   ED 52                  SBC   HL,DE   
1FF6   7D                     LD   A,L   
1FF7   B4                     OR   H   
1FF8   CA 5B 20               JP   Z,expectM_3137S81   
1FFB   CD 4A 10               CALL   printStr   
1FFE   43 6F 64 65 3A 20 33 20 35 20 2F 78 6F 72 00 .CSTR   "Code: ","3 5 /xor"   
200D   CD 4A 10               CALL   printStr   
2010   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
201F   21 06 00               LD   hl,6   
2022   E5                     PUSH   hl   
2023   E5                     PUSH   hl   
2024   CD 47 11               CALL   run   
2027   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2033   CD 4A 10               CALL   printStr   
2036   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2043   E1                     POP   hl   
2044   E5                     PUSH   hl   
2045   E5                     PUSH   hl   
2046   CD 47 11               CALL   run   
2049   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
205A   76                     HALT      
205B                EXPECTM_3137S81:      
205B   E1                     POP   HL   
205C                          ;*Macro unroll:  test "3a= 5 a/xor a= a",6
205C   31 00 5D               LD   SP,STACK   
205F   CD 7E 10               CALL   coldInit   
2062   CD 74 5B               CALL   execStr   
2065   33 61 3D 20 35 20 61 2F 78 6F 72 20 61 3D 20 61 00 DB   "3a= 5 a/xor a= a",0   
2076   E1                     POP   HL   
2077   E5                     PUSH   HL   
2078   11 06 00               LD   DE,6   
207B   B7                     OR   A   
207C   ED 52                  SBC   HL,DE   
207E   7D                     LD   A,L   
207F   B4                     OR   H   
2080   CA EB 20               JP   Z,expectM_3138S82   
2083   CD 4A 10               CALL   printStr   
2086   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 6F 72 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/xor a= a"   
209D   CD 4A 10               CALL   printStr   
20A0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20AF   21 06 00               LD   hl,6   
20B2   E5                     PUSH   hl   
20B3   E5                     PUSH   hl   
20B4   CD 47 11               CALL   run   
20B7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
20C3   CD 4A 10               CALL   printStr   
20C6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20D3   E1                     POP   hl   
20D4   E5                     PUSH   hl   
20D5   E5                     PUSH   hl   
20D6   CD 47 11               CALL   run   
20D9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
20EA   76                     HALT      
20EB                EXPECTM_3138S82:      
20EB   E1                     POP   HL   
20EC                          ;*Macro unroll:  test "0 !", true
20EC   31 00 5D               LD   SP,STACK   
20EF   CD 7E 10               CALL   coldInit   
20F2   CD 74 5B               CALL   execStr   
20F5   30 20 21 00            DB   "0 !",0   
20F9   E1                     POP   HL   
20FA   E5                     PUSH   HL   
20FB   11 FF FF               LD   DE,true   
20FE   B7                     OR   A   
20FF   ED 52                  SBC   HL,DE   
2101   7D                     LD   A,L   
2102   B4                     OR   H   
2103   CA 61 21               JP   Z,expectM_3139S83   
2106   CD 4A 10               CALL   printStr   
2109   43 6F 64 65 3A 20 30 20 21 00 .CSTR   "Code: ","0 !"   
2113   CD 4A 10               CALL   printStr   
2116   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2125   21 FF FF               LD   hl,true   
2128   E5                     PUSH   hl   
2129   E5                     PUSH   hl   
212A   CD 47 11               CALL   run   
212D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2139   CD 4A 10               CALL   printStr   
213C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2149   E1                     POP   hl   
214A   E5                     PUSH   hl   
214B   E5                     PUSH   hl   
214C   CD 47 11               CALL   run   
214F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2160   76                     HALT      
2161                EXPECTM_3139S83:      
2161   E1                     POP   HL   
2162                          ;*Macro unroll:  test "2 !", false
2162   31 00 5D               LD   SP,STACK   
2165   CD 7E 10               CALL   coldInit   
2168   CD 74 5B               CALL   execStr   
216B   32 20 21 00            DB   "2 !",0   
216F   E1                     POP   HL   
2170   E5                     PUSH   HL   
2171   11 00 00               LD   DE,false   
2174   B7                     OR   A   
2175   ED 52                  SBC   HL,DE   
2177   7D                     LD   A,L   
2178   B4                     OR   H   
2179   CA D7 21               JP   Z,expectM_3140S84   
217C   CD 4A 10               CALL   printStr   
217F   43 6F 64 65 3A 20 32 20 21 00 .CSTR   "Code: ","2 !"   
2189   CD 4A 10               CALL   printStr   
218C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
219B   21 00 00               LD   hl,false   
219E   E5                     PUSH   hl   
219F   E5                     PUSH   hl   
21A0   CD 47 11               CALL   run   
21A3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
21AF   CD 4A 10               CALL   printStr   
21B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21BF   E1                     POP   hl   
21C0   E5                     PUSH   hl   
21C1   E5                     PUSH   hl   
21C2   CD 47 11               CALL   run   
21C5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
21D6   76                     HALT      
21D7                EXPECTM_3140S84:      
21D7   E1                     POP   HL   
21D8                          ;*Macro unroll:  test "0 !!", false
21D8   31 00 5D               LD   SP,STACK   
21DB   CD 7E 10               CALL   coldInit   
21DE   CD 74 5B               CALL   execStr   
21E1   30 20 21 21 00         DB   "0 !!",0   
21E6   E1                     POP   HL   
21E7   E5                     PUSH   HL   
21E8   11 00 00               LD   DE,false   
21EB   B7                     OR   A   
21EC   ED 52                  SBC   HL,DE   
21EE   7D                     LD   A,L   
21EF   B4                     OR   H   
21F0   CA 4F 22               JP   Z,expectM_3141S85   
21F3   CD 4A 10               CALL   printStr   
21F6   43 6F 64 65 3A 20 30 20 21 21 00 .CSTR   "Code: ","0 !!"   
2201   CD 4A 10               CALL   printStr   
2204   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2213   21 00 00               LD   hl,false   
2216   E5                     PUSH   hl   
2217   E5                     PUSH   hl   
2218   CD 47 11               CALL   run   
221B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2227   CD 4A 10               CALL   printStr   
222A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2237   E1                     POP   hl   
2238   E5                     PUSH   hl   
2239   E5                     PUSH   hl   
223A   CD 47 11               CALL   run   
223D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
224E   76                     HALT      
224F                EXPECTM_3141S85:      
224F   E1                     POP   HL   
2250                          ;*Macro unroll:  test "2 !!", true
2250   31 00 5D               LD   SP,STACK   
2253   CD 7E 10               CALL   coldInit   
2256   CD 74 5B               CALL   execStr   
2259   32 20 21 21 00         DB   "2 !!",0   
225E   E1                     POP   HL   
225F   E5                     PUSH   HL   
2260   11 FF FF               LD   DE,true   
2263   B7                     OR   A   
2264   ED 52                  SBC   HL,DE   
2266   7D                     LD   A,L   
2267   B4                     OR   H   
2268   CA C7 22               JP   Z,expectM_3142S86   
226B   CD 4A 10               CALL   printStr   
226E   43 6F 64 65 3A 20 32 20 21 21 00 .CSTR   "Code: ","2 !!"   
2279   CD 4A 10               CALL   printStr   
227C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
228B   21 FF FF               LD   hl,true   
228E   E5                     PUSH   hl   
228F   E5                     PUSH   hl   
2290   CD 47 11               CALL   run   
2293   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
229F   CD 4A 10               CALL   printStr   
22A2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22AF   E1                     POP   hl   
22B0   E5                     PUSH   hl   
22B1   E5                     PUSH   hl   
22B2   CD 47 11               CALL   run   
22B5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
22C6   76                     HALT      
22C7                EXPECTM_3142S86:      
22C7   E1                     POP   HL   
22C8                          ;*Macro unroll:  test "2 3 *", 6
22C8   31 00 5D               LD   SP,STACK   
22CB   CD 7E 10               CALL   coldInit   
22CE   CD 74 5B               CALL   execStr   
22D1   32 20 33 20 2A 00      DB   "2 3 *",0   
22D7   E1                     POP   HL   
22D8   E5                     PUSH   HL   
22D9   11 06 00               LD   DE,6   
22DC   B7                     OR   A   
22DD   ED 52                  SBC   HL,DE   
22DF   7D                     LD   A,L   
22E0   B4                     OR   H   
22E1   CA 41 23               JP   Z,expectM_3143S87   
22E4   CD 4A 10               CALL   printStr   
22E7   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
22F3   CD 4A 10               CALL   printStr   
22F6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2305   21 06 00               LD   hl,6   
2308   E5                     PUSH   hl   
2309   E5                     PUSH   hl   
230A   CD 47 11               CALL   run   
230D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2319   CD 4A 10               CALL   printStr   
231C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2329   E1                     POP   hl   
232A   E5                     PUSH   hl   
232B   E5                     PUSH   hl   
232C   CD 47 11               CALL   run   
232F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2340   76                     HALT      
2341                EXPECTM_3143S87:      
2341   E1                     POP   HL   
2342                          ;*Macro unroll:  test "1 2 3 + *", 5
2342   31 00 5D               LD   SP,STACK   
2345   CD 7E 10               CALL   coldInit   
2348   CD 74 5B               CALL   execStr   
234B   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
2355   E1                     POP   HL   
2356   E5                     PUSH   HL   
2357   11 05 00               LD   DE,5   
235A   B7                     OR   A   
235B   ED 52                  SBC   HL,DE   
235D   7D                     LD   A,L   
235E   B4                     OR   H   
235F   CA C3 23               JP   Z,expectM_3144S88   
2362   CD 4A 10               CALL   printStr   
2365   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
2375   CD 4A 10               CALL   printStr   
2378   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2387   21 05 00               LD   hl,5   
238A   E5                     PUSH   hl   
238B   E5                     PUSH   hl   
238C   CD 47 11               CALL   run   
238F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
239B   CD 4A 10               CALL   printStr   
239E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23AB   E1                     POP   hl   
23AC   E5                     PUSH   hl   
23AD   E5                     PUSH   hl   
23AE   CD 47 11               CALL   run   
23B1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
23C2   76                     HALT      
23C3                EXPECTM_3144S88:      
23C3   E1                     POP   HL   
23C4                          ;*Macro unroll:  test "7 3 /", 2
23C4   31 00 5D               LD   SP,STACK   
23C7   CD 7E 10               CALL   coldInit   
23CA   CD 74 5B               CALL   execStr   
23CD   37 20 33 20 2F 00      DB   "7 3 /",0   
23D3   E1                     POP   HL   
23D4   E5                     PUSH   HL   
23D5   11 02 00               LD   DE,2   
23D8   B7                     OR   A   
23D9   ED 52                  SBC   HL,DE   
23DB   7D                     LD   A,L   
23DC   B4                     OR   H   
23DD   CA 3D 24               JP   Z,expectM_3145S89   
23E0   CD 4A 10               CALL   printStr   
23E3   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
23EF   CD 4A 10               CALL   printStr   
23F2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2401   21 02 00               LD   hl,2   
2404   E5                     PUSH   hl   
2405   E5                     PUSH   hl   
2406   CD 47 11               CALL   run   
2409   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2415   CD 4A 10               CALL   printStr   
2418   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2425   E1                     POP   hl   
2426   E5                     PUSH   hl   
2427   E5                     PUSH   hl   
2428   CD 47 11               CALL   run   
242B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
243C   76                     HALT      
243D                EXPECTM_3145S89:      
243D   E1                     POP   HL   
243E                          ;*Macro unroll:  test "100a= 1a+= a", 101
243E   31 00 5D               LD   SP,STACK   
2441   CD 7E 10               CALL   coldInit   
2444   CD 74 5B               CALL   execStr   
2447   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
2454   E1                     POP   HL   
2455   E5                     PUSH   HL   
2456   11 65 00               LD   DE,101   
2459   B7                     OR   A   
245A   ED 52                  SBC   HL,DE   
245C   7D                     LD   A,L   
245D   B4                     OR   H   
245E   CA C5 24               JP   Z,expectM_3146S90   
2461   CD 4A 10               CALL   printStr   
2464   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
2477   CD 4A 10               CALL   printStr   
247A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2489   21 65 00               LD   hl,101   
248C   E5                     PUSH   hl   
248D   E5                     PUSH   hl   
248E   CD 47 11               CALL   run   
2491   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
249D   CD 4A 10               CALL   printStr   
24A0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24AD   E1                     POP   hl   
24AE   E5                     PUSH   hl   
24AF   E5                     PUSH   hl   
24B0   CD 47 11               CALL   run   
24B3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
24C4   76                     HALT      
24C5                EXPECTM_3146S90:      
24C5   E1                     POP   HL   
24C6                          ;*Macro unroll:  test "100a= 1a-= a", 99
24C6   31 00 5D               LD   SP,STACK   
24C9   CD 7E 10               CALL   coldInit   
24CC   CD 74 5B               CALL   execStr   
24CF   31 30 30 61 3D 20 31 61 2D 3D 20 61 00 DB   "100a= 1a-= a",0   
24DC   E1                     POP   HL   
24DD   E5                     PUSH   HL   
24DE   11 63 00               LD   DE,99   
24E1   B7                     OR   A   
24E2   ED 52                  SBC   HL,DE   
24E4   7D                     LD   A,L   
24E5   B4                     OR   H   
24E6   CA 4D 25               JP   Z,expectM_3147S91   
24E9   CD 4A 10               CALL   printStr   
24EC   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2D 3D 20 61 00 .CSTR   "Code: ","100a= 1a-= a"   
24FF   CD 4A 10               CALL   printStr   
2502   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2511   21 63 00               LD   hl,99   
2514   E5                     PUSH   hl   
2515   E5                     PUSH   hl   
2516   CD 47 11               CALL   run   
2519   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2525   CD 4A 10               CALL   printStr   
2528   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2535   E1                     POP   hl   
2536   E5                     PUSH   hl   
2537   E5                     PUSH   hl   
2538   CD 47 11               CALL   run   
253B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
254C   76                     HALT      
254D                EXPECTM_3147S91:      
254D   E1                     POP   HL   
254E                          ;*Macro unroll:  test "100a= 2a*= a", 200
254E   31 00 5D               LD   SP,STACK   
2551   CD 7E 10               CALL   coldInit   
2554   CD 74 5B               CALL   execStr   
2557   31 30 30 61 3D 20 32 61 2A 3D 20 61 00 DB   "100a= 2a*= a",0   
2564   E1                     POP   HL   
2565   E5                     PUSH   HL   
2566   11 C8 00               LD   DE,200   
2569   B7                     OR   A   
256A   ED 52                  SBC   HL,DE   
256C   7D                     LD   A,L   
256D   B4                     OR   H   
256E   CA D5 25               JP   Z,expectM_3148S92   
2571   CD 4A 10               CALL   printStr   
2574   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 61 2A 3D 20 61 00 .CSTR   "Code: ","100a= 2a*= a"   
2587   CD 4A 10               CALL   printStr   
258A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2599   21 C8 00               LD   hl,200   
259C   E5                     PUSH   hl   
259D   E5                     PUSH   hl   
259E   CD 47 11               CALL   run   
25A1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
25AD   CD 4A 10               CALL   printStr   
25B0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25BD   E1                     POP   hl   
25BE   E5                     PUSH   hl   
25BF   E5                     PUSH   hl   
25C0   CD 47 11               CALL   run   
25C3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
25D4   76                     HALT      
25D5                EXPECTM_3148S92:      
25D5   E1                     POP   HL   
25D6                          ;*Macro unroll:  test "100a= 2 a/= a", 50
25D6   31 00 5D               LD   SP,STACK   
25D9   CD 7E 10               CALL   coldInit   
25DC   CD 74 5B               CALL   execStr   
25DF   31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 DB   "100a= 2 a/= a",0   
25ED   E1                     POP   HL   
25EE   E5                     PUSH   HL   
25EF   11 32 00               LD   DE,50   
25F2   B7                     OR   A   
25F3   ED 52                  SBC   HL,DE   
25F5   7D                     LD   A,L   
25F6   B4                     OR   H   
25F7   CA 5F 26               JP   Z,expectM_3149S93   
25FA   CD 4A 10               CALL   printStr   
25FD   43 6F 64 65 3A 20 31 30 30 61 3D 20 32 20 61 2F 3D 20 61 00 .CSTR   "Code: ","100a= 2 a/= a"   
2611   CD 4A 10               CALL   printStr   
2614   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2623   21 32 00               LD   hl,50   
2626   E5                     PUSH   hl   
2627   E5                     PUSH   hl   
2628   CD 47 11               CALL   run   
262B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2637   CD 4A 10               CALL   printStr   
263A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2647   E1                     POP   hl   
2648   E5                     PUSH   hl   
2649   E5                     PUSH   hl   
264A   CD 47 11               CALL   run   
264D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
265E   76                     HALT      
265F                EXPECTM_3149S93:      
265F   E1                     POP   HL   
2660                          ;*Macro unroll:  test "2a= 3b= a b+= b", 5
2660   31 00 5D               LD   SP,STACK   
2663   CD 7E 10               CALL   coldInit   
2666   CD 74 5B               CALL   execStr   
2669   32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 DB   "2a= 3b= a b+= b",0   
2679   E1                     POP   HL   
267A   E5                     PUSH   HL   
267B   11 05 00               LD   DE,5   
267E   B7                     OR   A   
267F   ED 52                  SBC   HL,DE   
2681   7D                     LD   A,L   
2682   B4                     OR   H   
2683   CA ED 26               JP   Z,expectM_3150S94   
2686   CD 4A 10               CALL   printStr   
2689   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2B 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b+= b"   
269F   CD 4A 10               CALL   printStr   
26A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26B1   21 05 00               LD   hl,5   
26B4   E5                     PUSH   hl   
26B5   E5                     PUSH   hl   
26B6   CD 47 11               CALL   run   
26B9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
26C5   CD 4A 10               CALL   printStr   
26C8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26D5   E1                     POP   hl   
26D6   E5                     PUSH   hl   
26D7   E5                     PUSH   hl   
26D8   CD 47 11               CALL   run   
26DB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
26EC   76                     HALT      
26ED                EXPECTM_3150S94:      
26ED   E1                     POP   HL   
26EE                          ;*Macro unroll:  test "2a= 3b= a b-= b", 1
26EE   31 00 5D               LD   SP,STACK   
26F1   CD 7E 10               CALL   coldInit   
26F4   CD 74 5B               CALL   execStr   
26F7   32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 DB   "2a= 3b= a b-= b",0   
2707   E1                     POP   HL   
2708   E5                     PUSH   HL   
2709   11 01 00               LD   DE,1   
270C   B7                     OR   A   
270D   ED 52                  SBC   HL,DE   
270F   7D                     LD   A,L   
2710   B4                     OR   H   
2711   CA 7B 27               JP   Z,expectM_3151S95   
2714   CD 4A 10               CALL   printStr   
2717   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2D 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b-= b"   
272D   CD 4A 10               CALL   printStr   
2730   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
273F   21 01 00               LD   hl,1   
2742   E5                     PUSH   hl   
2743   E5                     PUSH   hl   
2744   CD 47 11               CALL   run   
2747   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2753   CD 4A 10               CALL   printStr   
2756   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2763   E1                     POP   hl   
2764   E5                     PUSH   hl   
2765   E5                     PUSH   hl   
2766   CD 47 11               CALL   run   
2769   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
277A   76                     HALT      
277B                EXPECTM_3151S95:      
277B   E1                     POP   HL   
277C                          ;*Macro unroll:  test "2a= 3b= a b*= b", 6
277C   31 00 5D               LD   SP,STACK   
277F   CD 7E 10               CALL   coldInit   
2782   CD 74 5B               CALL   execStr   
2785   32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 DB   "2a= 3b= a b*= b",0   
2795   E1                     POP   HL   
2796   E5                     PUSH   HL   
2797   11 06 00               LD   DE,6   
279A   B7                     OR   A   
279B   ED 52                  SBC   HL,DE   
279D   7D                     LD   A,L   
279E   B4                     OR   H   
279F   CA 09 28               JP   Z,expectM_3152S96   
27A2   CD 4A 10               CALL   printStr   
27A5   43 6F 64 65 3A 20 32 61 3D 20 33 62 3D 20 61 20 62 2A 3D 20 62 00 .CSTR   "Code: ","2a= 3b= a b*= b"   
27BB   CD 4A 10               CALL   printStr   
27BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27CD   21 06 00               LD   hl,6   
27D0   E5                     PUSH   hl   
27D1   E5                     PUSH   hl   
27D2   CD 47 11               CALL   run   
27D5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
27E1   CD 4A 10               CALL   printStr   
27E4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27F1   E1                     POP   hl   
27F2   E5                     PUSH   hl   
27F3   E5                     PUSH   hl   
27F4   CD 47 11               CALL   run   
27F7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2808   76                     HALT      
2809                EXPECTM_3152S96:      
2809   E1                     POP   HL   
280A                          ;*Macro unroll:  test "2a= 6b= a b/= b", 3
280A   31 00 5D               LD   SP,STACK   
280D   CD 7E 10               CALL   coldInit   
2810   CD 74 5B               CALL   execStr   
2813   32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 DB   "2a= 6b= a b/= b",0   
2823   E1                     POP   HL   
2824   E5                     PUSH   HL   
2825   11 03 00               LD   DE,3   
2828   B7                     OR   A   
2829   ED 52                  SBC   HL,DE   
282B   7D                     LD   A,L   
282C   B4                     OR   H   
282D   CA 97 28               JP   Z,expectM_3153S97   
2830   CD 4A 10               CALL   printStr   
2833   43 6F 64 65 3A 20 32 61 3D 20 36 62 3D 20 61 20 62 2F 3D 20 62 00 .CSTR   "Code: ","2a= 6b= a b/= b"   
2849   CD 4A 10               CALL   printStr   
284C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
285B   21 03 00               LD   hl,3   
285E   E5                     PUSH   hl   
285F   E5                     PUSH   hl   
2860   CD 47 11               CALL   run   
2863   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
286F   CD 4A 10               CALL   printStr   
2872   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
287F   E1                     POP   hl   
2880   E5                     PUSH   hl   
2881   E5                     PUSH   hl   
2882   CD 47 11               CALL   run   
2885   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2896   76                     HALT      
2897                EXPECTM_3153S97:      
2897   E1                     POP   HL   
2898                          ;*Macro unroll:  test "$55a= $AAa&= a",0
2898   31 00 5D               LD   SP,STACK   
289B   CD 7E 10               CALL   coldInit   
289E   CD 74 5B               CALL   execStr   
28A1   24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 DB   "$55a= $AAa&= a",0   
28B0   E1                     POP   HL   
28B1   E5                     PUSH   HL   
28B2   11 00 00               LD   DE,0   
28B5   B7                     OR   A   
28B6   ED 52                  SBC   HL,DE   
28B8   7D                     LD   A,L   
28B9   B4                     OR   H   
28BA   CA 23 29               JP   Z,expectM_3154S98   
28BD   CD 4A 10               CALL   printStr   
28C0   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa&= a"   
28D5   CD 4A 10               CALL   printStr   
28D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28E7   21 00 00               LD   hl,0   
28EA   E5                     PUSH   hl   
28EB   E5                     PUSH   hl   
28EC   CD 47 11               CALL   run   
28EF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
28FB   CD 4A 10               CALL   printStr   
28FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
290B   E1                     POP   hl   
290C   E5                     PUSH   hl   
290D   E5                     PUSH   hl   
290E   CD 47 11               CALL   run   
2911   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2922   76                     HALT      
2923                EXPECTM_3154S98:      
2923   E1                     POP   HL   
2924                          ;*Macro unroll:  test "$55a= $AAa|= a",$FF
2924   31 00 5D               LD   SP,STACK   
2927   CD 7E 10               CALL   coldInit   
292A   CD 74 5B               CALL   execStr   
292D   24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 DB   "$55a= $AAa|= a",0   
293C   E1                     POP   HL   
293D   E5                     PUSH   HL   
293E   11 FF 00               LD   DE,$FF   
2941   B7                     OR   A   
2942   ED 52                  SBC   HL,DE   
2944   7D                     LD   A,L   
2945   B4                     OR   H   
2946   CA AF 29               JP   Z,expectM_3155S99   
2949   CD 4A 10               CALL   printStr   
294C   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa|= a"   
2961   CD 4A 10               CALL   printStr   
2964   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2973   21 FF 00               LD   hl,$FF   
2976   E5                     PUSH   hl   
2977   E5                     PUSH   hl   
2978   CD 47 11               CALL   run   
297B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2987   CD 4A 10               CALL   printStr   
298A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2997   E1                     POP   hl   
2998   E5                     PUSH   hl   
2999   E5                     PUSH   hl   
299A   CD 47 11               CALL   run   
299D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
29AE   76                     HALT      
29AF                EXPECTM_3155S99:      
29AF   E1                     POP   HL   
29B0                          ;*Macro unroll:  test "$A5a= $AAa /xor= a",$0F
29B0   31 00 5D               LD   SP,STACK   
29B3   CD 7E 10               CALL   coldInit   
29B6   CD 74 5B               CALL   execStr   
29B9   24 41 35 61 3D 20 24 41 41 61 20 2F 78 6F 72 3D 20 61 00 DB   "$A5a= $AAa /xor= a",0   
29CC   E1                     POP   HL   
29CD   E5                     PUSH   HL   
29CE   11 0F 00               LD   DE,$0F   
29D1   B7                     OR   A   
29D2   ED 52                  SBC   HL,DE   
29D4   7D                     LD   A,L   
29D5   B4                     OR   H   
29D6   CA 43 2A               JP   Z,expectM_3156S100   
29D9   CD 4A 10               CALL   printStr   
29DC   43 6F 64 65 3A 20 24 41 35 61 3D 20 24 41 41 61 20 2F 78 6F 72 3D 20 61 00 .CSTR   "Code: ","$A5a= $AAa /xor= a"   
29F5   CD 4A 10               CALL   printStr   
29F8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A07   21 0F 00               LD   hl,$0F   
2A0A   E5                     PUSH   hl   
2A0B   E5                     PUSH   hl   
2A0C   CD 47 11               CALL   run   
2A0F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2A1B   CD 4A 10               CALL   printStr   
2A1E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A2B   E1                     POP   hl   
2A2C   E5                     PUSH   hl   
2A2D   E5                     PUSH   hl   
2A2E   CD 47 11               CALL   run   
2A31   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2A42   76                     HALT      
2A43                EXPECTM_3156S100:      
2A43   E1                     POP   HL   
2A44                          ;*Macro unroll:  test "$00AA~",$FF55
2A44   31 00 5D               LD   SP,STACK   
2A47   CD 7E 10               CALL   coldInit   
2A4A   CD 74 5B               CALL   execStr   
2A4D   24 30 30 41 41 7E 00   DB   "$00AA~",0   
2A54   E1                     POP   HL   
2A55   E5                     PUSH   HL   
2A56   11 55 FF               LD   DE,$FF55   
2A59   B7                     OR   A   
2A5A   ED 52                  SBC   HL,DE   
2A5C   7D                     LD   A,L   
2A5D   B4                     OR   H   
2A5E   CA BF 2A               JP   Z,expectM_3157S101   
2A61   CD 4A 10               CALL   printStr   
2A64   43 6F 64 65 3A 20 24 30 30 41 41 7E 00 .CSTR   "Code: ","$00AA~"   
2A71   CD 4A 10               CALL   printStr   
2A74   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A83   21 55 FF               LD   hl,$FF55   
2A86   E5                     PUSH   hl   
2A87   E5                     PUSH   hl   
2A88   CD 47 11               CALL   run   
2A8B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2A97   CD 4A 10               CALL   printStr   
2A9A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AA7   E1                     POP   hl   
2AA8   E5                     PUSH   hl   
2AA9   E5                     PUSH   hl   
2AAA   CD 47 11               CALL   run   
2AAD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2ABE   76                     HALT      
2ABF                EXPECTM_3157S101:      
2ABF   E1                     POP   HL   
2AC0                          ;*Macro unroll:  test "$AAAAa= a~= a",$5555
2AC0   31 00 5D               LD   SP,STACK   
2AC3   CD 7E 10               CALL   coldInit   
2AC6   CD 74 5B               CALL   execStr   
2AC9   24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 DB   "$AAAAa= a~= a",0   
2AD7   E1                     POP   HL   
2AD8   E5                     PUSH   HL   
2AD9   11 55 55               LD   DE,$5555   
2ADC   B7                     OR   A   
2ADD   ED 52                  SBC   HL,DE   
2ADF   7D                     LD   A,L   
2AE0   B4                     OR   H   
2AE1   CA 49 2B               JP   Z,expectM_3158S102   
2AE4   CD 4A 10               CALL   printStr   
2AE7   43 6F 64 65 3A 20 24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 .CSTR   "Code: ","$AAAAa= a~= a"   
2AFB   CD 4A 10               CALL   printStr   
2AFE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B0D   21 55 55               LD   hl,$5555   
2B10   E5                     PUSH   hl   
2B11   E5                     PUSH   hl   
2B12   CD 47 11               CALL   run   
2B15   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2B21   CD 4A 10               CALL   printStr   
2B24   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B31   E1                     POP   hl   
2B32   E5                     PUSH   hl   
2B33   E5                     PUSH   hl   
2B34   CD 47 11               CALL   run   
2B37   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2B48   76                     HALT      
2B49                EXPECTM_3158S102:      
2B49   E1                     POP   HL   
2B4A                          ;*Macro unroll:  test "3x= 1 x <<= x", 6
2B4A   31 00 5D               LD   SP,STACK   
2B4D   CD 7E 10               CALL   coldInit   
2B50   CD 74 5B               CALL   execStr   
2B53   33 78 3D 20 31 20 78 20 3C 3C 3D 20 78 00 DB   "3x= 1 x <<= x",0   
2B61   E1                     POP   HL   
2B62   E5                     PUSH   HL   
2B63   11 06 00               LD   DE,6   
2B66   B7                     OR   A   
2B67   ED 52                  SBC   HL,DE   
2B69   7D                     LD   A,L   
2B6A   B4                     OR   H   
2B6B   CA D3 2B               JP   Z,expectM_3159S103   
2B6E   CD 4A 10               CALL   printStr   
2B71   43 6F 64 65 3A 20 33 78 3D 20 31 20 78 20 3C 3C 3D 20 78 00 .CSTR   "Code: ","3x= 1 x <<= x"   
2B85   CD 4A 10               CALL   printStr   
2B88   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B97   21 06 00               LD   hl,6   
2B9A   E5                     PUSH   hl   
2B9B   E5                     PUSH   hl   
2B9C   CD 47 11               CALL   run   
2B9F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2BAB   CD 4A 10               CALL   printStr   
2BAE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BBB   E1                     POP   hl   
2BBC   E5                     PUSH   hl   
2BBD   E5                     PUSH   hl   
2BBE   CD 47 11               CALL   run   
2BC1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2BD2   76                     HALT      
2BD3                EXPECTM_3159S103:      
2BD3   E1                     POP   HL   
2BD4                          ;*Macro unroll:  test "10x= 1 x >>= x", 5
2BD4   31 00 5D               LD   SP,STACK   
2BD7   CD 7E 10               CALL   coldInit   
2BDA   CD 74 5B               CALL   execStr   
2BDD   31 30 78 3D 20 31 20 78 20 3E 3E 3D 20 78 00 DB   "10x= 1 x >>= x",0   
2BEC   E1                     POP   HL   
2BED   E5                     PUSH   HL   
2BEE   11 05 00               LD   DE,5   
2BF1   B7                     OR   A   
2BF2   ED 52                  SBC   HL,DE   
2BF4   7D                     LD   A,L   
2BF5   B4                     OR   H   
2BF6   CA 5F 2C               JP   Z,expectM_3160S104   
2BF9   CD 4A 10               CALL   printStr   
2BFC   43 6F 64 65 3A 20 31 30 78 3D 20 31 20 78 20 3E 3E 3D 20 78 00 .CSTR   "Code: ","10x= 1 x >>= x"   
2C11   CD 4A 10               CALL   printStr   
2C14   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C23   21 05 00               LD   hl,5   
2C26   E5                     PUSH   hl   
2C27   E5                     PUSH   hl   
2C28   CD 47 11               CALL   run   
2C2B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2C37   CD 4A 10               CALL   printStr   
2C3A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C47   E1                     POP   hl   
2C48   E5                     PUSH   hl   
2C49   E5                     PUSH   hl   
2C4A   CD 47 11               CALL   run   
2C4D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2C5E   76                     HALT      
2C5F                EXPECTM_3160S104:      
2C5F   E1                     POP   HL   
2C60                          ;*Macro unroll:  test "7 3 / /rem", 1
2C60   31 00 5D               LD   SP,STACK   
2C63   CD 7E 10               CALL   coldInit   
2C66   CD 74 5B               CALL   execStr   
2C69   37 20 33 20 2F 20 2F 72 65 6D 00 DB   "7 3 / /rem",0   
2C74   E1                     POP   HL   
2C75   E5                     PUSH   HL   
2C76   11 01 00               LD   DE,1   
2C79   B7                     OR   A   
2C7A   ED 52                  SBC   HL,DE   
2C7C   7D                     LD   A,L   
2C7D   B4                     OR   H   
2C7E   CA E3 2C               JP   Z,expectM_3161S105   
2C81   CD 4A 10               CALL   printStr   
2C84   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 6D 00 .CSTR   "Code: ","7 3 / /rem"   
2C95   CD 4A 10               CALL   printStr   
2C98   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CA7   21 01 00               LD   hl,1   
2CAA   E5                     PUSH   hl   
2CAB   E5                     PUSH   hl   
2CAC   CD 47 11               CALL   run   
2CAF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2CBB   CD 4A 10               CALL   printStr   
2CBE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CCB   E1                     POP   hl   
2CCC   E5                     PUSH   hl   
2CCD   E5                     PUSH   hl   
2CCE   CD 47 11               CALL   run   
2CD1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2CE2   76                     HALT      
2CE3                EXPECTM_3161S105:      
2CE3   E1                     POP   HL   
2CE4                          ;*Macro unroll:  test "7 3 /", 2
2CE4   31 00 5D               LD   SP,STACK   
2CE7   CD 7E 10               CALL   coldInit   
2CEA   CD 74 5B               CALL   execStr   
2CED   37 20 33 20 2F 00      DB   "7 3 /",0   
2CF3   E1                     POP   HL   
2CF4   E5                     PUSH   HL   
2CF5   11 02 00               LD   DE,2   
2CF8   B7                     OR   A   
2CF9   ED 52                  SBC   HL,DE   
2CFB   7D                     LD   A,L   
2CFC   B4                     OR   H   
2CFD   CA 5D 2D               JP   Z,expectM_3162S106   
2D00   CD 4A 10               CALL   printStr   
2D03   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
2D0F   CD 4A 10               CALL   printStr   
2D12   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D21   21 02 00               LD   hl,2   
2D24   E5                     PUSH   hl   
2D25   E5                     PUSH   hl   
2D26   CD 47 11               CALL   run   
2D29   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2D35   CD 4A 10               CALL   printStr   
2D38   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D45   E1                     POP   hl   
2D46   E5                     PUSH   hl   
2D47   E5                     PUSH   hl   
2D48   CD 47 11               CALL   run   
2D4B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2D5C   76                     HALT      
2D5D                EXPECTM_3162S106:      
2D5D   E1                     POP   HL   
2D5E                          ;*Macro unroll:  test "2 3 ==", FALSE
2D5E   31 00 5D               LD   SP,STACK   
2D61   CD 7E 10               CALL   coldInit   
2D64   CD 74 5B               CALL   execStr   
2D67   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
2D6E   E1                     POP   HL   
2D6F   E5                     PUSH   HL   
2D70   11 00 00               LD   DE,FALSE   
2D73   B7                     OR   A   
2D74   ED 52                  SBC   HL,DE   
2D76   7D                     LD   A,L   
2D77   B4                     OR   H   
2D78   CA D9 2D               JP   Z,expectM_3163S107   
2D7B   CD 4A 10               CALL   printStr   
2D7E   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
2D8B   CD 4A 10               CALL   printStr   
2D8E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D9D   21 00 00               LD   hl,FALSE   
2DA0   E5                     PUSH   hl   
2DA1   E5                     PUSH   hl   
2DA2   CD 47 11               CALL   run   
2DA5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2DB1   CD 4A 10               CALL   printStr   
2DB4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2DC1   E1                     POP   hl   
2DC2   E5                     PUSH   hl   
2DC3   E5                     PUSH   hl   
2DC4   CD 47 11               CALL   run   
2DC7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2DD8   76                     HALT      
2DD9                EXPECTM_3163S107:      
2DD9   E1                     POP   HL   
2DDA                          ;*Macro unroll:  test "3 3 ==", TRUE
2DDA   31 00 5D               LD   SP,STACK   
2DDD   CD 7E 10               CALL   coldInit   
2DE0   CD 74 5B               CALL   execStr   
2DE3   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
2DEA   E1                     POP   HL   
2DEB   E5                     PUSH   HL   
2DEC   11 FF FF               LD   DE,TRUE   
2DEF   B7                     OR   A   
2DF0   ED 52                  SBC   HL,DE   
2DF2   7D                     LD   A,L   
2DF3   B4                     OR   H   
2DF4   CA 55 2E               JP   Z,expectM_3164S108   
2DF7   CD 4A 10               CALL   printStr   
2DFA   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
2E07   CD 4A 10               CALL   printStr   
2E0A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E19   21 FF FF               LD   hl,TRUE   
2E1C   E5                     PUSH   hl   
2E1D   E5                     PUSH   hl   
2E1E   CD 47 11               CALL   run   
2E21   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2E2D   CD 4A 10               CALL   printStr   
2E30   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E3D   E1                     POP   hl   
2E3E   E5                     PUSH   hl   
2E3F   E5                     PUSH   hl   
2E40   CD 47 11               CALL   run   
2E43   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2E54   76                     HALT      
2E55                EXPECTM_3164S108:      
2E55   E1                     POP   HL   
2E56                          ;*Macro unroll:  test "1 2 <", TRUE
2E56   31 00 5D               LD   SP,STACK   
2E59   CD 7E 10               CALL   coldInit   
2E5C   CD 74 5B               CALL   execStr   
2E5F   31 20 32 20 3C 00      DB   "1 2 <",0   
2E65   E1                     POP   HL   
2E66   E5                     PUSH   HL   
2E67   11 FF FF               LD   DE,TRUE   
2E6A   B7                     OR   A   
2E6B   ED 52                  SBC   HL,DE   
2E6D   7D                     LD   A,L   
2E6E   B4                     OR   H   
2E6F   CA CF 2E               JP   Z,expectM_3165S109   
2E72   CD 4A 10               CALL   printStr   
2E75   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
2E81   CD 4A 10               CALL   printStr   
2E84   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E93   21 FF FF               LD   hl,TRUE   
2E96   E5                     PUSH   hl   
2E97   E5                     PUSH   hl   
2E98   CD 47 11               CALL   run   
2E9B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2EA7   CD 4A 10               CALL   printStr   
2EAA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EB7   E1                     POP   hl   
2EB8   E5                     PUSH   hl   
2EB9   E5                     PUSH   hl   
2EBA   CD 47 11               CALL   run   
2EBD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2ECE   76                     HALT      
2ECF                EXPECTM_3165S109:      
2ECF   E1                     POP   HL   
2ED0                          ;*Macro unroll:  test "2 1 <", FALSE
2ED0   31 00 5D               LD   SP,STACK   
2ED3   CD 7E 10               CALL   coldInit   
2ED6   CD 74 5B               CALL   execStr   
2ED9   32 20 31 20 3C 00      DB   "2 1 <",0   
2EDF   E1                     POP   HL   
2EE0   E5                     PUSH   HL   
2EE1   11 00 00               LD   DE,FALSE   
2EE4   B7                     OR   A   
2EE5   ED 52                  SBC   HL,DE   
2EE7   7D                     LD   A,L   
2EE8   B4                     OR   H   
2EE9   CA 49 2F               JP   Z,expectM_3166S110   
2EEC   CD 4A 10               CALL   printStr   
2EEF   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
2EFB   CD 4A 10               CALL   printStr   
2EFE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F0D   21 00 00               LD   hl,FALSE   
2F10   E5                     PUSH   hl   
2F11   E5                     PUSH   hl   
2F12   CD 47 11               CALL   run   
2F15   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2F21   CD 4A 10               CALL   printStr   
2F24   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F31   E1                     POP   hl   
2F32   E5                     PUSH   hl   
2F33   E5                     PUSH   hl   
2F34   CD 47 11               CALL   run   
2F37   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2F48   76                     HALT      
2F49                EXPECTM_3166S110:      
2F49   E1                     POP   HL   
2F4A                          ;*Macro unroll:  test "2 3 <", TRUE
2F4A   31 00 5D               LD   SP,STACK   
2F4D   CD 7E 10               CALL   coldInit   
2F50   CD 74 5B               CALL   execStr   
2F53   32 20 33 20 3C 00      DB   "2 3 <",0   
2F59   E1                     POP   HL   
2F5A   E5                     PUSH   HL   
2F5B   11 FF FF               LD   DE,TRUE   
2F5E   B7                     OR   A   
2F5F   ED 52                  SBC   HL,DE   
2F61   7D                     LD   A,L   
2F62   B4                     OR   H   
2F63   CA C3 2F               JP   Z,expectM_3167S111   
2F66   CD 4A 10               CALL   printStr   
2F69   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2F75   CD 4A 10               CALL   printStr   
2F78   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F87   21 FF FF               LD   hl,TRUE   
2F8A   E5                     PUSH   hl   
2F8B   E5                     PUSH   hl   
2F8C   CD 47 11               CALL   run   
2F8F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
2F9B   CD 4A 10               CALL   printStr   
2F9E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FAB   E1                     POP   hl   
2FAC   E5                     PUSH   hl   
2FAD   E5                     PUSH   hl   
2FAE   CD 47 11               CALL   run   
2FB1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
2FC2   76                     HALT      
2FC3                EXPECTM_3167S111:      
2FC3   E1                     POP   HL   
2FC4                          ;*Macro unroll:  test "3 3 <", FALSE
2FC4   31 00 5D               LD   SP,STACK   
2FC7   CD 7E 10               CALL   coldInit   
2FCA   CD 74 5B               CALL   execStr   
2FCD   33 20 33 20 3C 00      DB   "3 3 <",0   
2FD3   E1                     POP   HL   
2FD4   E5                     PUSH   HL   
2FD5   11 00 00               LD   DE,FALSE   
2FD8   B7                     OR   A   
2FD9   ED 52                  SBC   HL,DE   
2FDB   7D                     LD   A,L   
2FDC   B4                     OR   H   
2FDD   CA 3D 30               JP   Z,expectM_3168S112   
2FE0   CD 4A 10               CALL   printStr   
2FE3   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
2FEF   CD 4A 10               CALL   printStr   
2FF2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3001   21 00 00               LD   hl,FALSE   
3004   E5                     PUSH   hl   
3005   E5                     PUSH   hl   
3006   CD 47 11               CALL   run   
3009   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3015   CD 4A 10               CALL   printStr   
3018   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3025   E1                     POP   hl   
3026   E5                     PUSH   hl   
3027   E5                     PUSH   hl   
3028   CD 47 11               CALL   run   
302B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
303C   76                     HALT      
303D                EXPECTM_3168S112:      
303D   E1                     POP   HL   
303E                          ;*Macro unroll:  test "1 2 >", FALSE
303E   31 00 5D               LD   SP,STACK   
3041   CD 7E 10               CALL   coldInit   
3044   CD 74 5B               CALL   execStr   
3047   31 20 32 20 3E 00      DB   "1 2 >",0   
304D   E1                     POP   HL   
304E   E5                     PUSH   HL   
304F   11 00 00               LD   DE,FALSE   
3052   B7                     OR   A   
3053   ED 52                  SBC   HL,DE   
3055   7D                     LD   A,L   
3056   B4                     OR   H   
3057   CA B7 30               JP   Z,expectM_3169S113   
305A   CD 4A 10               CALL   printStr   
305D   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
3069   CD 4A 10               CALL   printStr   
306C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
307B   21 00 00               LD   hl,FALSE   
307E   E5                     PUSH   hl   
307F   E5                     PUSH   hl   
3080   CD 47 11               CALL   run   
3083   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
308F   CD 4A 10               CALL   printStr   
3092   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
309F   E1                     POP   hl   
30A0   E5                     PUSH   hl   
30A1   E5                     PUSH   hl   
30A2   CD 47 11               CALL   run   
30A5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
30B6   76                     HALT      
30B7                EXPECTM_3169S113:      
30B7   E1                     POP   HL   
30B8                          ;*Macro unroll:  test "2 1 >", TRUE
30B8   31 00 5D               LD   SP,STACK   
30BB   CD 7E 10               CALL   coldInit   
30BE   CD 74 5B               CALL   execStr   
30C1   32 20 31 20 3E 00      DB   "2 1 >",0   
30C7   E1                     POP   HL   
30C8   E5                     PUSH   HL   
30C9   11 FF FF               LD   DE,TRUE   
30CC   B7                     OR   A   
30CD   ED 52                  SBC   HL,DE   
30CF   7D                     LD   A,L   
30D0   B4                     OR   H   
30D1   CA 31 31               JP   Z,expectM_3170S114   
30D4   CD 4A 10               CALL   printStr   
30D7   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
30E3   CD 4A 10               CALL   printStr   
30E6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30F5   21 FF FF               LD   hl,TRUE   
30F8   E5                     PUSH   hl   
30F9   E5                     PUSH   hl   
30FA   CD 47 11               CALL   run   
30FD   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3109   CD 4A 10               CALL   printStr   
310C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3119   E1                     POP   hl   
311A   E5                     PUSH   hl   
311B   E5                     PUSH   hl   
311C   CD 47 11               CALL   run   
311F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3130   76                     HALT      
3131                EXPECTM_3170S114:      
3131   E1                     POP   HL   
3132                          ;*Macro unroll:  test "3 3 >", FALSE
3132   31 00 5D               LD   SP,STACK   
3135   CD 7E 10               CALL   coldInit   
3138   CD 74 5B               CALL   execStr   
313B   33 20 33 20 3E 00      DB   "3 3 >",0   
3141   E1                     POP   HL   
3142   E5                     PUSH   HL   
3143   11 00 00               LD   DE,FALSE   
3146   B7                     OR   A   
3147   ED 52                  SBC   HL,DE   
3149   7D                     LD   A,L   
314A   B4                     OR   H   
314B   CA AB 31               JP   Z,expectM_3171S115   
314E   CD 4A 10               CALL   printStr   
3151   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
315D   CD 4A 10               CALL   printStr   
3160   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
316F   21 00 00               LD   hl,FALSE   
3172   E5                     PUSH   hl   
3173   E5                     PUSH   hl   
3174   CD 47 11               CALL   run   
3177   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3183   CD 4A 10               CALL   printStr   
3186   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3193   E1                     POP   hl   
3194   E5                     PUSH   hl   
3195   E5                     PUSH   hl   
3196   CD 47 11               CALL   run   
3199   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
31AA   76                     HALT      
31AB                EXPECTM_3171S115:      
31AB   E1                     POP   HL   
31AC                          ;*Macro unroll:  test "4 3 >", TRUE
31AC   31 00 5D               LD   SP,STACK   
31AF   CD 7E 10               CALL   coldInit   
31B2   CD 74 5B               CALL   execStr   
31B5   34 20 33 20 3E 00      DB   "4 3 >",0   
31BB   E1                     POP   HL   
31BC   E5                     PUSH   HL   
31BD   11 FF FF               LD   DE,TRUE   
31C0   B7                     OR   A   
31C1   ED 52                  SBC   HL,DE   
31C3   7D                     LD   A,L   
31C4   B4                     OR   H   
31C5   CA 25 32               JP   Z,expectM_3172S116   
31C8   CD 4A 10               CALL   printStr   
31CB   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
31D7   CD 4A 10               CALL   printStr   
31DA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31E9   21 FF FF               LD   hl,TRUE   
31EC   E5                     PUSH   hl   
31ED   E5                     PUSH   hl   
31EE   CD 47 11               CALL   run   
31F1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
31FD   CD 4A 10               CALL   printStr   
3200   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
320D   E1                     POP   hl   
320E   E5                     PUSH   hl   
320F   E5                     PUSH   hl   
3210   CD 47 11               CALL   run   
3213   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3224   76                     HALT      
3225                EXPECTM_3172S116:      
3225   E1                     POP   HL   
3226                          ;*Macro unroll:  test "2 2 <=", TRUE
3226   31 00 5D               LD   SP,STACK   
3229   CD 7E 10               CALL   coldInit   
322C   CD 74 5B               CALL   execStr   
322F   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
3236   E1                     POP   HL   
3237   E5                     PUSH   HL   
3238   11 FF FF               LD   DE,TRUE   
323B   B7                     OR   A   
323C   ED 52                  SBC   HL,DE   
323E   7D                     LD   A,L   
323F   B4                     OR   H   
3240   CA A1 32               JP   Z,expectM_3173S117   
3243   CD 4A 10               CALL   printStr   
3246   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
3253   CD 4A 10               CALL   printStr   
3256   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3265   21 FF FF               LD   hl,TRUE   
3268   E5                     PUSH   hl   
3269   E5                     PUSH   hl   
326A   CD 47 11               CALL   run   
326D   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3279   CD 4A 10               CALL   printStr   
327C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3289   E1                     POP   hl   
328A   E5                     PUSH   hl   
328B   E5                     PUSH   hl   
328C   CD 47 11               CALL   run   
328F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
32A0   76                     HALT      
32A1                EXPECTM_3173S117:      
32A1   E1                     POP   HL   
32A2                          ;*Macro unroll:  test "2 2 >=", TRUE
32A2   31 00 5D               LD   SP,STACK   
32A5   CD 7E 10               CALL   coldInit   
32A8   CD 74 5B               CALL   execStr   
32AB   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
32B2   E1                     POP   HL   
32B3   E5                     PUSH   HL   
32B4   11 FF FF               LD   DE,TRUE   
32B7   B7                     OR   A   
32B8   ED 52                  SBC   HL,DE   
32BA   7D                     LD   A,L   
32BB   B4                     OR   H   
32BC   CA 1D 33               JP   Z,expectM_3174S118   
32BF   CD 4A 10               CALL   printStr   
32C2   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
32CF   CD 4A 10               CALL   printStr   
32D2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32E1   21 FF FF               LD   hl,TRUE   
32E4   E5                     PUSH   hl   
32E5   E5                     PUSH   hl   
32E6   CD 47 11               CALL   run   
32E9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
32F5   CD 4A 10               CALL   printStr   
32F8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3305   E1                     POP   hl   
3306   E5                     PUSH   hl   
3307   E5                     PUSH   hl   
3308   CD 47 11               CALL   run   
330B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
331C   76                     HALT      
331D                EXPECTM_3174S118:      
331D   E1                     POP   HL   
331E                          ;*Macro unroll:  test "3 1 <<", 6
331E   31 00 5D               LD   SP,STACK   
3321   CD 7E 10               CALL   coldInit   
3324   CD 74 5B               CALL   execStr   
3327   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
332E   E1                     POP   HL   
332F   E5                     PUSH   HL   
3330   11 06 00               LD   DE,6   
3333   B7                     OR   A   
3334   ED 52                  SBC   HL,DE   
3336   7D                     LD   A,L   
3337   B4                     OR   H   
3338   CA 99 33               JP   Z,expectM_3175S119   
333B   CD 4A 10               CALL   printStr   
333E   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
334B   CD 4A 10               CALL   printStr   
334E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
335D   21 06 00               LD   hl,6   
3360   E5                     PUSH   hl   
3361   E5                     PUSH   hl   
3362   CD 47 11               CALL   run   
3365   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3371   CD 4A 10               CALL   printStr   
3374   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3381   E1                     POP   hl   
3382   E5                     PUSH   hl   
3383   E5                     PUSH   hl   
3384   CD 47 11               CALL   run   
3387   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3398   76                     HALT      
3399                EXPECTM_3175S119:      
3399   E1                     POP   HL   
339A                          ;*Macro unroll:  test "10 1 >>", 5
339A   31 00 5D               LD   SP,STACK   
339D   CD 7E 10               CALL   coldInit   
33A0   CD 74 5B               CALL   execStr   
33A3   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
33AB   E1                     POP   HL   
33AC   E5                     PUSH   HL   
33AD   11 05 00               LD   DE,5   
33B0   B7                     OR   A   
33B1   ED 52                  SBC   HL,DE   
33B3   7D                     LD   A,L   
33B4   B4                     OR   H   
33B5   CA 17 34               JP   Z,expectM_3176S120   
33B8   CD 4A 10               CALL   printStr   
33BB   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
33C9   CD 4A 10               CALL   printStr   
33CC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33DB   21 05 00               LD   hl,5   
33DE   E5                     PUSH   hl   
33DF   E5                     PUSH   hl   
33E0   CD 47 11               CALL   run   
33E3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
33EF   CD 4A 10               CALL   printStr   
33F2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33FF   E1                     POP   hl   
3400   E5                     PUSH   hl   
3401   E5                     PUSH   hl   
3402   CD 47 11               CALL   run   
3405   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3416   76                     HALT      
3417                EXPECTM_3176S120:      
3417   E1                     POP   HL   
3418                          ;*Macro unroll:  test "1 x = x", 1
3418   31 00 5D               LD   SP,STACK   
341B   CD 7E 10               CALL   coldInit   
341E   CD 74 5B               CALL   execStr   
3421   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
3429   E1                     POP   HL   
342A   E5                     PUSH   HL   
342B   11 01 00               LD   DE,1   
342E   B7                     OR   A   
342F   ED 52                  SBC   HL,DE   
3431   7D                     LD   A,L   
3432   B4                     OR   H   
3433   CA 95 34               JP   Z,expectM_3177S121   
3436   CD 4A 10               CALL   printStr   
3439   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
3447   CD 4A 10               CALL   printStr   
344A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3459   21 01 00               LD   hl,1   
345C   E5                     PUSH   hl   
345D   E5                     PUSH   hl   
345E   CD 47 11               CALL   run   
3461   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
346D   CD 4A 10               CALL   printStr   
3470   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
347D   E1                     POP   hl   
347E   E5                     PUSH   hl   
347F   E5                     PUSH   hl   
3480   CD 47 11               CALL   run   
3483   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3494   76                     HALT      
3495                EXPECTM_3177S121:      
3495   E1                     POP   HL   
3496                          ;*Macro unroll:  test "1{}^", 1
3496   31 00 5D               LD   SP,STACK   
3499   CD 7E 10               CALL   coldInit   
349C   CD 74 5B               CALL   execStr   
349F   31 7B 7D 5E 00         DB   "1{}^",0   
34A4   E1                     POP   HL   
34A5   E5                     PUSH   HL   
34A6   11 01 00               LD   DE,1   
34A9   B7                     OR   A   
34AA   ED 52                  SBC   HL,DE   
34AC   7D                     LD   A,L   
34AD   B4                     OR   H   
34AE   CA 0D 35               JP   Z,expectM_3178S122   
34B1   CD 4A 10               CALL   printStr   
34B4   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
34BF   CD 4A 10               CALL   printStr   
34C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34D1   21 01 00               LD   hl,1   
34D4   E5                     PUSH   hl   
34D5   E5                     PUSH   hl   
34D6   CD 47 11               CALL   run   
34D9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
34E5   CD 4A 10               CALL   printStr   
34E8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34F5   E1                     POP   hl   
34F6   E5                     PUSH   hl   
34F7   E5                     PUSH   hl   
34F8   CD 47 11               CALL   run   
34FB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
350C   76                     HALT      
350D                EXPECTM_3178S122:      
350D   E1                     POP   HL   
350E                          ;*Macro unroll:  test "{1}^", 1
350E   31 00 5D               LD   SP,STACK   
3511   CD 7E 10               CALL   coldInit   
3514   CD 74 5B               CALL   execStr   
3517   7B 31 7D 5E 00         DB   "{1}^",0   
351C   E1                     POP   HL   
351D   E5                     PUSH   HL   
351E   11 01 00               LD   DE,1   
3521   B7                     OR   A   
3522   ED 52                  SBC   HL,DE   
3524   7D                     LD   A,L   
3525   B4                     OR   H   
3526   CA 85 35               JP   Z,expectM_3179S123   
3529   CD 4A 10               CALL   printStr   
352C   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
3537   CD 4A 10               CALL   printStr   
353A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3549   21 01 00               LD   hl,1   
354C   E5                     PUSH   hl   
354D   E5                     PUSH   hl   
354E   CD 47 11               CALL   run   
3551   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
355D   CD 4A 10               CALL   printStr   
3560   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
356D   E1                     POP   hl   
356E   E5                     PUSH   hl   
356F   E5                     PUSH   hl   
3570   CD 47 11               CALL   run   
3573   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3584   76                     HALT      
3585                EXPECTM_3179S123:      
3585   E1                     POP   HL   
3586                          ;*Macro unroll:  test "{{1}^}^", 1
3586   31 00 5D               LD   SP,STACK   
3589   CD 7E 10               CALL   coldInit   
358C   CD 74 5B               CALL   execStr   
358F   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
3597   E1                     POP   HL   
3598   E5                     PUSH   HL   
3599   11 01 00               LD   DE,1   
359C   B7                     OR   A   
359D   ED 52                  SBC   HL,DE   
359F   7D                     LD   A,L   
35A0   B4                     OR   H   
35A1   CA 03 36               JP   Z,expectM_3180S124   
35A4   CD 4A 10               CALL   printStr   
35A7   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
35B5   CD 4A 10               CALL   printStr   
35B8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35C7   21 01 00               LD   hl,1   
35CA   E5                     PUSH   hl   
35CB   E5                     PUSH   hl   
35CC   CD 47 11               CALL   run   
35CF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
35DB   CD 4A 10               CALL   printStr   
35DE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35EB   E1                     POP   hl   
35EC   E5                     PUSH   hl   
35ED   E5                     PUSH   hl   
35EE   CD 47 11               CALL   run   
35F1   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3602   76                     HALT      
3603                EXPECTM_3180S124:      
3603   E1                     POP   HL   
3604                          ;*Macro unroll:  test "{{{1}^}^}^", 1
3604   31 00 5D               LD   SP,STACK   
3607   CD 7E 10               CALL   coldInit   
360A   CD 74 5B               CALL   execStr   
360D   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
3618   E1                     POP   HL   
3619   E5                     PUSH   HL   
361A   11 01 00               LD   DE,1   
361D   B7                     OR   A   
361E   ED 52                  SBC   HL,DE   
3620   7D                     LD   A,L   
3621   B4                     OR   H   
3622   CA 87 36               JP   Z,expectM_3181S125   
3625   CD 4A 10               CALL   printStr   
3628   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
3639   CD 4A 10               CALL   printStr   
363C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
364B   21 01 00               LD   hl,1   
364E   E5                     PUSH   hl   
364F   E5                     PUSH   hl   
3650   CD 47 11               CALL   run   
3653   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
365F   CD 4A 10               CALL   printStr   
3662   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
366F   E1                     POP   hl   
3670   E5                     PUSH   hl   
3671   E5                     PUSH   hl   
3672   CD 47 11               CALL   run   
3675   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3686   76                     HALT      
3687                EXPECTM_3181S125:      
3687   E1                     POP   HL   
3688                          ;*Macro unroll:  test "1 /fal{10}{20} ? +", 21
3688   31 00 5D               LD   SP,STACK   
368B   CD 7E 10               CALL   coldInit   
368E   CD 74 5B               CALL   execStr   
3691   31 20 2F 66 61 6C 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 DB   "1 /fal{10}{20} ? +",0   
36A4   E1                     POP   HL   
36A5   E5                     PUSH   HL   
36A6   11 15 00               LD   DE,21   
36A9   B7                     OR   A   
36AA   ED 52                  SBC   HL,DE   
36AC   7D                     LD   A,L   
36AD   B4                     OR   H   
36AE   CA 1B 37               JP   Z,expectM_3182S126   
36B1   CD 4A 10               CALL   printStr   
36B4   43 6F 64 65 3A 20 31 20 2F 66 61 6C 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","1 /fal{10}{20} ? +"   
36CD   CD 4A 10               CALL   printStr   
36D0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36DF   21 15 00               LD   hl,21   
36E2   E5                     PUSH   hl   
36E3   E5                     PUSH   hl   
36E4   CD 47 11               CALL   run   
36E7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
36F3   CD 4A 10               CALL   printStr   
36F6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3703   E1                     POP   hl   
3704   E5                     PUSH   hl   
3705   E5                     PUSH   hl   
3706   CD 47 11               CALL   run   
3709   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
371A   76                     HALT      
371B                EXPECTM_3182S126:      
371B   E1                     POP   HL   
371C                          ;*Macro unroll:  test "1 /tru{10}{20} ? +", 11
371C   31 00 5D               LD   SP,STACK   
371F   CD 7E 10               CALL   coldInit   
3722   CD 74 5B               CALL   execStr   
3725   31 20 2F 74 72 75 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 DB   "1 /tru{10}{20} ? +",0   
3738   E1                     POP   HL   
3739   E5                     PUSH   HL   
373A   11 0B 00               LD   DE,11   
373D   B7                     OR   A   
373E   ED 52                  SBC   HL,DE   
3740   7D                     LD   A,L   
3741   B4                     OR   H   
3742   CA AF 37               JP   Z,expectM_3183S127   
3745   CD 4A 10               CALL   printStr   
3748   43 6F 64 65 3A 20 31 20 2F 74 72 75 7B 31 30 7D 7B 32 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","1 /tru{10}{20} ? +"   
3761   CD 4A 10               CALL   printStr   
3764   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3773   21 0B 00               LD   hl,11   
3776   E5                     PUSH   hl   
3777   E5                     PUSH   hl   
3778   CD 47 11               CALL   run   
377B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3787   CD 4A 10               CALL   printStr   
378A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3797   E1                     POP   hl   
3798   E5                     PUSH   hl   
3799   E5                     PUSH   hl   
379A   CD 47 11               CALL   run   
379D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
37AE   76                     HALT      
37AF                EXPECTM_3183S127:      
37AF   E1                     POP   HL   
37B0                          ;*Macro unroll:  test "\\{2}^", 2
37B0   31 00 5D               LD   SP,STACK   
37B3   CD 7E 10               CALL   coldInit   
37B6   CD 74 5B               CALL   execStr   
37B9   5C 7B 32 7D 5E 00      DB   "\\{2}^",0   
37BF   E1                     POP   HL   
37C0   E5                     PUSH   HL   
37C1   11 02 00               LD   DE,2   
37C4   B7                     OR   A   
37C5   ED 52                  SBC   HL,DE   
37C7   7D                     LD   A,L   
37C8   B4                     OR   H   
37C9   CA 29 38               JP   Z,expectM_3184S128   
37CC   CD 4A 10               CALL   printStr   
37CF   43 6F 64 65 3A 20 5C 7B 32 7D 5E 00 .CSTR   "Code: ","\\{2}^"   
37DB   CD 4A 10               CALL   printStr   
37DE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37ED   21 02 00               LD   hl,2   
37F0   E5                     PUSH   hl   
37F1   E5                     PUSH   hl   
37F2   CD 47 11               CALL   run   
37F5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3801   CD 4A 10               CALL   printStr   
3804   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3811   E1                     POP   hl   
3812   E5                     PUSH   hl   
3813   E5                     PUSH   hl   
3814   CD 47 11               CALL   run   
3817   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3828   76                     HALT      
3829                EXPECTM_3184S128:      
3829   E1                     POP   HL   
382A                          ;*Macro unroll:  test "\\a{2}^", 2
382A   31 00 5D               LD   SP,STACK   
382D   CD 7E 10               CALL   coldInit   
3830   CD 74 5B               CALL   execStr   
3833   5C 61 7B 32 7D 5E 00   DB   "\\a{2}^",0   
383A   E1                     POP   HL   
383B   E5                     PUSH   HL   
383C   11 02 00               LD   DE,2   
383F   B7                     OR   A   
3840   ED 52                  SBC   HL,DE   
3842   7D                     LD   A,L   
3843   B4                     OR   H   
3844   CA A5 38               JP   Z,expectM_3185S129   
3847   CD 4A 10               CALL   printStr   
384A   43 6F 64 65 3A 20 5C 61 7B 32 7D 5E 00 .CSTR   "Code: ","\\a{2}^"   
3857   CD 4A 10               CALL   printStr   
385A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3869   21 02 00               LD   hl,2   
386C   E5                     PUSH   hl   
386D   E5                     PUSH   hl   
386E   CD 47 11               CALL   run   
3871   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
387D   CD 4A 10               CALL   printStr   
3880   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
388D   E1                     POP   hl   
388E   E5                     PUSH   hl   
388F   E5                     PUSH   hl   
3890   CD 47 11               CALL   run   
3893   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
38A4   76                     HALT      
38A5                EXPECTM_3185S129:      
38A5   E1                     POP   HL   
38A6                          ;*Macro unroll:  test "5 \\a{%a}^", 5
38A6   31 00 5D               LD   SP,STACK   
38A9   CD 7E 10               CALL   coldInit   
38AC   CD 74 5B               CALL   execStr   
38AF   35 20 5C 61 7B 25 61 7D 5E 00 DB   "5 \\a{%a}^",0   
38B9   E1                     POP   HL   
38BA   E5                     PUSH   HL   
38BB   11 05 00               LD   DE,5   
38BE   B7                     OR   A   
38BF   ED 52                  SBC   HL,DE   
38C1   7D                     LD   A,L   
38C2   B4                     OR   H   
38C3   CA 27 39               JP   Z,expectM_3186S130   
38C6   CD 4A 10               CALL   printStr   
38C9   43 6F 64 65 3A 20 35 20 5C 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a{%a}^"   
38D9   CD 4A 10               CALL   printStr   
38DC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38EB   21 05 00               LD   hl,5   
38EE   E5                     PUSH   hl   
38EF   E5                     PUSH   hl   
38F0   CD 47 11               CALL   run   
38F3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
38FF   CD 4A 10               CALL   printStr   
3902   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
390F   E1                     POP   hl   
3910   E5                     PUSH   hl   
3911   E5                     PUSH   hl   
3912   CD 47 11               CALL   run   
3915   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3926   76                     HALT      
3927                EXPECTM_3186S130:      
3927   E1                     POP   HL   
3928                          ;*Macro unroll:  test "5 \\a:b{%a}^", 5
3928   31 00 5D               LD   SP,STACK   
392B   CD 7E 10               CALL   coldInit   
392E   CD 74 5B               CALL   execStr   
3931   35 20 5C 61 3A 62 7B 25 61 7D 5E 00 DB   "5 \\a:b{%a}^",0   
393D   E1                     POP   HL   
393E   E5                     PUSH   HL   
393F   11 05 00               LD   DE,5   
3942   B7                     OR   A   
3943   ED 52                  SBC   HL,DE   
3945   7D                     LD   A,L   
3946   B4                     OR   H   
3947   CA AD 39               JP   Z,expectM_3187S131   
394A   CD 4A 10               CALL   printStr   
394D   43 6F 64 65 3A 20 35 20 5C 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a:b{%a}^"   
395F   CD 4A 10               CALL   printStr   
3962   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3971   21 05 00               LD   hl,5   
3974   E5                     PUSH   hl   
3975   E5                     PUSH   hl   
3976   CD 47 11               CALL   run   
3979   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3985   CD 4A 10               CALL   printStr   
3988   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3995   E1                     POP   hl   
3996   E5                     PUSH   hl   
3997   E5                     PUSH   hl   
3998   CD 47 11               CALL   run   
399B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
39AC   76                     HALT      
39AD                EXPECTM_3187S131:      
39AD   E1                     POP   HL   
39AE                          ;*Macro unroll:  test "\\a{{2}^}^", 2
39AE   31 00 5D               LD   SP,STACK   
39B1   CD 7E 10               CALL   coldInit   
39B4   CD 74 5B               CALL   execStr   
39B7   5C 61 7B 7B 32 7D 5E 7D 5E 00 DB   "\\a{{2}^}^",0   
39C1   E1                     POP   HL   
39C2   E5                     PUSH   HL   
39C3   11 02 00               LD   DE,2   
39C6   B7                     OR   A   
39C7   ED 52                  SBC   HL,DE   
39C9   7D                     LD   A,L   
39CA   B4                     OR   H   
39CB   CA 2F 3A               JP   Z,expectM_3188S132   
39CE   CD 4A 10               CALL   printStr   
39D1   43 6F 64 65 3A 20 5C 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ","\\a{{2}^}^"   
39E1   CD 4A 10               CALL   printStr   
39E4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39F3   21 02 00               LD   hl,2   
39F6   E5                     PUSH   hl   
39F7   E5                     PUSH   hl   
39F8   CD 47 11               CALL   run   
39FB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3A07   CD 4A 10               CALL   printStr   
3A0A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A17   E1                     POP   hl   
3A18   E5                     PUSH   hl   
3A19   E5                     PUSH   hl   
3A1A   CD 47 11               CALL   run   
3A1D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3A2E   76                     HALT      
3A2F                EXPECTM_3188S132:      
3A2F   E1                     POP   HL   
3A30                          ;*Macro unroll:  test "1 5 \\a{{%a}^}^", 5
3A30   31 00 5D               LD   SP,STACK   
3A33   CD 7E 10               CALL   coldInit   
3A36   CD 74 5B               CALL   execStr   
3A39   31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a}^}^",0   
3A48   E1                     POP   HL   
3A49   E5                     PUSH   HL   
3A4A   11 05 00               LD   DE,5   
3A4D   B7                     OR   A   
3A4E   ED 52                  SBC   HL,DE   
3A50   7D                     LD   A,L   
3A51   B4                     OR   H   
3A52   CA BB 3A               JP   Z,expectM_3189S133   
3A55   CD 4A 10               CALL   printStr   
3A58   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a}^}^"   
3A6D   CD 4A 10               CALL   printStr   
3A70   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A7F   21 05 00               LD   hl,5   
3A82   E5                     PUSH   hl   
3A83   E5                     PUSH   hl   
3A84   CD 47 11               CALL   run   
3A87   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3A93   CD 4A 10               CALL   printStr   
3A96   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AA3   E1                     POP   hl   
3AA4   E5                     PUSH   hl   
3AA5   E5                     PUSH   hl   
3AA6   CD 47 11               CALL   run   
3AA9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3ABA   76                     HALT      
3ABB                EXPECTM_3189S133:      
3ABB   E1                     POP   HL   
3ABC                          ;*Macro unroll:  test "1 5 \\ab{{%a}^}^", 1
3ABC   31 00 5D               LD   SP,STACK   
3ABF   CD 7E 10               CALL   coldInit   
3AC2   CD 74 5B               CALL   execStr   
3AC5   31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a}^}^",0   
3AD5   E1                     POP   HL   
3AD6   E5                     PUSH   HL   
3AD7   11 01 00               LD   DE,1   
3ADA   B7                     OR   A   
3ADB   ED 52                  SBC   HL,DE   
3ADD   7D                     LD   A,L   
3ADE   B4                     OR   H   
3ADF   CA 49 3B               JP   Z,expectM_3190S134   
3AE2   CD 4A 10               CALL   printStr   
3AE5   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a}^}^"   
3AFB   CD 4A 10               CALL   printStr   
3AFE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B0D   21 01 00               LD   hl,1   
3B10   E5                     PUSH   hl   
3B11   E5                     PUSH   hl   
3B12   CD 47 11               CALL   run   
3B15   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3B21   CD 4A 10               CALL   printStr   
3B24   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B31   E1                     POP   hl   
3B32   E5                     PUSH   hl   
3B33   E5                     PUSH   hl   
3B34   CD 47 11               CALL   run   
3B37   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3B48   76                     HALT      
3B49                EXPECTM_3190S134:      
3B49   E1                     POP   HL   
3B4A                          ;*Macro unroll:  test "1 5 \\a{{%a 2 +}^}^", 7
3B4A   31 00 5D               LD   SP,STACK   
3B4D   CD 7E 10               CALL   coldInit   
3B50   CD 74 5B               CALL   execStr   
3B53   31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a 2 +}^}^",0   
3B66   E1                     POP   HL   
3B67   E5                     PUSH   HL   
3B68   11 07 00               LD   DE,7   
3B6B   B7                     OR   A   
3B6C   ED 52                  SBC   HL,DE   
3B6E   7D                     LD   A,L   
3B6F   B4                     OR   H   
3B70   CA DD 3B               JP   Z,expectM_3191S135   
3B73   CD 4A 10               CALL   printStr   
3B76   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a 2 +}^}^"   
3B8F   CD 4A 10               CALL   printStr   
3B92   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BA1   21 07 00               LD   hl,7   
3BA4   E5                     PUSH   hl   
3BA5   E5                     PUSH   hl   
3BA6   CD 47 11               CALL   run   
3BA9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3BB5   CD 4A 10               CALL   printStr   
3BB8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BC5   E1                     POP   hl   
3BC6   E5                     PUSH   hl   
3BC7   E5                     PUSH   hl   
3BC8   CD 47 11               CALL   run   
3BCB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3BDC   76                     HALT      
3BDD                EXPECTM_3191S135:      
3BDD   E1                     POP   HL   
3BDE                          ;*Macro unroll:  test "1 5 \\ab{{%a %b +}^}^", 6
3BDE   31 00 5D               LD   SP,STACK   
3BE1   CD 7E 10               CALL   coldInit   
3BE4   CD 74 5B               CALL   execStr   
3BE7   31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a %b +}^}^",0   
3BFC   E1                     POP   HL   
3BFD   E5                     PUSH   HL   
3BFE   11 06 00               LD   DE,6   
3C01   B7                     OR   A   
3C02   ED 52                  SBC   HL,DE   
3C04   7D                     LD   A,L   
3C05   B4                     OR   H   
3C06   CA 75 3C               JP   Z,expectM_3192S136   
3C09   CD 4A 10               CALL   printStr   
3C0C   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a %b +}^}^"   
3C27   CD 4A 10               CALL   printStr   
3C2A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C39   21 06 00               LD   hl,6   
3C3C   E5                     PUSH   hl   
3C3D   E5                     PUSH   hl   
3C3E   CD 47 11               CALL   run   
3C41   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3C4D   CD 4A 10               CALL   printStr   
3C50   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C5D   E1                     POP   hl   
3C5E   E5                     PUSH   hl   
3C5F   E5                     PUSH   hl   
3C60   CD 47 11               CALL   run   
3C63   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3C74   76                     HALT      
3C75                EXPECTM_3192S136:      
3C75   E1                     POP   HL   
3C76                          ;*Macro unroll:  test "\\a{2} x= 1 x^", 2
3C76   31 00 5D               LD   SP,STACK   
3C79   CD 7E 10               CALL   coldInit   
3C7C   CD 74 5B               CALL   execStr   
3C7F   5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a{2} x= 1 x^",0   
3C8D   E1                     POP   HL   
3C8E   E5                     PUSH   HL   
3C8F   11 02 00               LD   DE,2   
3C92   B7                     OR   A   
3C93   ED 52                  SBC   HL,DE   
3C95   7D                     LD   A,L   
3C96   B4                     OR   H   
3C97   CA FF 3C               JP   Z,expectM_3193S137   
3C9A   CD 4A 10               CALL   printStr   
3C9D   43 6F 64 65 3A 20 5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{2} x= 1 x^"   
3CB1   CD 4A 10               CALL   printStr   
3CB4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CC3   21 02 00               LD   hl,2   
3CC6   E5                     PUSH   hl   
3CC7   E5                     PUSH   hl   
3CC8   CD 47 11               CALL   run   
3CCB   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3CD7   CD 4A 10               CALL   printStr   
3CDA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CE7   E1                     POP   hl   
3CE8   E5                     PUSH   hl   
3CE9   E5                     PUSH   hl   
3CEA   CD 47 11               CALL   run   
3CED   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3CFE   76                     HALT      
3CFF                EXPECTM_3193S137:      
3CFF   E1                     POP   HL   
3D00                          ;*Macro unroll:  test "\\a{%a} x= 0 1 x^", 1
3D00   31 00 5D               LD   SP,STACK   
3D03   CD 7E 10               CALL   coldInit   
3D06   CD 74 5B               CALL   execStr   
3D09   5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   "\\a{%a} x= 0 1 x^",0   
3D1A   E1                     POP   HL   
3D1B   E5                     PUSH   HL   
3D1C   11 01 00               LD   DE,1   
3D1F   B7                     OR   A   
3D20   ED 52                  SBC   HL,DE   
3D22   7D                     LD   A,L   
3D23   B4                     OR   H   
3D24   CA 8F 3D               JP   Z,expectM_3194S138   
3D27   CD 4A 10               CALL   printStr   
3D2A   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{%a} x= 0 1 x^"   
3D41   CD 4A 10               CALL   printStr   
3D44   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D53   21 01 00               LD   hl,1   
3D56   E5                     PUSH   hl   
3D57   E5                     PUSH   hl   
3D58   CD 47 11               CALL   run   
3D5B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3D67   CD 4A 10               CALL   printStr   
3D6A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D77   E1                     POP   hl   
3D78   E5                     PUSH   hl   
3D79   E5                     PUSH   hl   
3D7A   CD 47 11               CALL   run   
3D7D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3D8E   76                     HALT      
3D8F                EXPECTM_3194S138:      
3D8F   E1                     POP   HL   
3D90                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3D90   31 00 5D               LD   SP,STACK   
3D93   CD 7E 10               CALL   coldInit   
3D96   CD 74 5B               CALL   execStr   
3D99   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3DAB   E1                     POP   HL   
3DAC   E5                     PUSH   HL   
3DAD   11 02 00               LD   DE,2   
3DB0   B7                     OR   A   
3DB1   ED 52                  SBC   HL,DE   
3DB3   7D                     LD   A,L   
3DB4   B4                     OR   H   
3DB5   CA 21 3E               JP   Z,expectM_3195S139   
3DB8   CD 4A 10               CALL   printStr   
3DBB   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
3DD3   CD 4A 10               CALL   printStr   
3DD6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DE5   21 02 00               LD   hl,2   
3DE8   E5                     PUSH   hl   
3DE9   E5                     PUSH   hl   
3DEA   CD 47 11               CALL   run   
3DED   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3DF9   CD 4A 10               CALL   printStr   
3DFC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E09   E1                     POP   hl   
3E0A   E5                     PUSH   hl   
3E0B   E5                     PUSH   hl   
3E0C   CD 47 11               CALL   run   
3E0F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3E20   76                     HALT      
3E21                EXPECTM_3195S139:      
3E21   E1                     POP   HL   
3E22                          ;*Macro unroll:  test "\\a:b{%a} x= 1 2 x^", 2
3E22   31 00 5D               LD   SP,STACK   
3E25   CD 7E 10               CALL   coldInit   
3E28   CD 74 5B               CALL   execStr   
3E2B   5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\a:b{%a} x= 1 2 x^",0   
3E3E   E1                     POP   HL   
3E3F   E5                     PUSH   HL   
3E40   11 02 00               LD   DE,2   
3E43   B7                     OR   A   
3E44   ED 52                  SBC   HL,DE   
3E46   7D                     LD   A,L   
3E47   B4                     OR   H   
3E48   CA B5 3E               JP   Z,expectM_3196S140   
3E4B   CD 4A 10               CALL   printStr   
3E4E   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a} x= 1 2 x^"   
3E67   CD 4A 10               CALL   printStr   
3E6A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E79   21 02 00               LD   hl,2   
3E7C   E5                     PUSH   hl   
3E7D   E5                     PUSH   hl   
3E7E   CD 47 11               CALL   run   
3E81   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3E8D   CD 4A 10               CALL   printStr   
3E90   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E9D   E1                     POP   hl   
3E9E   E5                     PUSH   hl   
3E9F   E5                     PUSH   hl   
3EA0   CD 47 11               CALL   run   
3EA3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3EB4   76                     HALT      
3EB5                EXPECTM_3196S140:      
3EB5   E1                     POP   HL   
3EB6                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3EB6   31 00 5D               LD   SP,STACK   
3EB9   CD 7E 10               CALL   coldInit   
3EBC   CD 74 5B               CALL   execStr   
3EBF   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
3ED1   E1                     POP   HL   
3ED2   E5                     PUSH   HL   
3ED3   11 02 00               LD   DE,2   
3ED6   B7                     OR   A   
3ED7   ED 52                  SBC   HL,DE   
3ED9   7D                     LD   A,L   
3EDA   B4                     OR   H   
3EDB   CA 47 3F               JP   Z,expectM_3197S141   
3EDE   CD 4A 10               CALL   printStr   
3EE1   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
3EF9   CD 4A 10               CALL   printStr   
3EFC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F0B   21 02 00               LD   hl,2   
3F0E   E5                     PUSH   hl   
3F0F   E5                     PUSH   hl   
3F10   CD 47 11               CALL   run   
3F13   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3F1F   CD 4A 10               CALL   printStr   
3F22   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F2F   E1                     POP   hl   
3F30   E5                     PUSH   hl   
3F31   E5                     PUSH   hl   
3F32   CD 47 11               CALL   run   
3F35   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3F46   76                     HALT      
3F47                EXPECTM_3197S141:      
3F47   E1                     POP   HL   
3F48                          ;*Macro unroll:  test "\\ab{%b %a} x= 10 15 x^ -", 5
3F48   31 00 5D               LD   SP,STACK   
3F4B   CD 7E 10               CALL   coldInit   
3F4E   CD 74 5B               CALL   execStr   
3F51   5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   "\\ab{%b %a} x= 10 15 x^ -",0   
3F6A   E1                     POP   HL   
3F6B   E5                     PUSH   HL   
3F6C   11 05 00               LD   DE,5   
3F6F   B7                     OR   A   
3F70   ED 52                  SBC   HL,DE   
3F72   7D                     LD   A,L   
3F73   B4                     OR   H   
3F74   CA E7 3F               JP   Z,expectM_3198S142   
3F77   CD 4A 10               CALL   printStr   
3F7A   43 6F 64 65 3A 20 5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","\\ab{%b %a} x= 10 15 x^ -"   
3F99   CD 4A 10               CALL   printStr   
3F9C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FAB   21 05 00               LD   hl,5   
3FAE   E5                     PUSH   hl   
3FAF   E5                     PUSH   hl   
3FB0   CD 47 11               CALL   run   
3FB3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
3FBF   CD 4A 10               CALL   printStr   
3FC2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FCF   E1                     POP   hl   
3FD0   E5                     PUSH   hl   
3FD1   E5                     PUSH   hl   
3FD2   CD 47 11               CALL   run   
3FD5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
3FE6   76                     HALT      
3FE7                EXPECTM_3198S142:      
3FE7   E1                     POP   HL   
3FE8                          ;*Macro unroll:  test "\\a:b{2} x= 1 x^", 2
3FE8   31 00 5D               LD   SP,STACK   
3FEB   CD 7E 10               CALL   coldInit   
3FEE   CD 74 5B               CALL   execStr   
3FF1   5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a:b{2} x= 1 x^",0   
4001   E1                     POP   HL   
4002   E5                     PUSH   HL   
4003   11 02 00               LD   DE,2   
4006   B7                     OR   A   
4007   ED 52                  SBC   HL,DE   
4009   7D                     LD   A,L   
400A   B4                     OR   H   
400B   CA 75 40               JP   Z,expectM_3199S143   
400E   CD 4A 10               CALL   printStr   
4011   43 6F 64 65 3A 20 5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a:b{2} x= 1 x^"   
4027   CD 4A 10               CALL   printStr   
402A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4039   21 02 00               LD   hl,2   
403C   E5                     PUSH   hl   
403D   E5                     PUSH   hl   
403E   CD 47 11               CALL   run   
4041   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
404D   CD 4A 10               CALL   printStr   
4050   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
405D   E1                     POP   hl   
405E   E5                     PUSH   hl   
405F   E5                     PUSH   hl   
4060   CD 47 11               CALL   run   
4063   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4074   76                     HALT      
4075                EXPECTM_3199S143:      
4075   E1                     POP   HL   
4076                          ;*Macro unroll:  test "\\:b{100 %b = %b} x= x^", 100
4076   31 00 5D               LD   SP,STACK   
4079   CD 7E 10               CALL   coldInit   
407C   CD 74 5B               CALL   execStr   
407F   5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "\\:b{100 %b = %b} x= x^",0   
4096   E1                     POP   HL   
4097   E5                     PUSH   HL   
4098   11 64 00               LD   DE,100   
409B   B7                     OR   A   
409C   ED 52                  SBC   HL,DE   
409E   7D                     LD   A,L   
409F   B4                     OR   H   
40A0   CA 11 41               JP   Z,expectM_3200S144   
40A3   CD 4A 10               CALL   printStr   
40A6   43 6F 64 65 3A 20 5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","\\:b{100 %b = %b} x= x^"   
40C3   CD 4A 10               CALL   printStr   
40C6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40D5   21 64 00               LD   hl,100   
40D8   E5                     PUSH   hl   
40D9   E5                     PUSH   hl   
40DA   CD 47 11               CALL   run   
40DD   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
40E9   CD 4A 10               CALL   printStr   
40EC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40F9   E1                     POP   hl   
40FA   E5                     PUSH   hl   
40FB   E5                     PUSH   hl   
40FC   CD 47 11               CALL   run   
40FF   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4110   76                     HALT      
4111                EXPECTM_3200S144:      
4111   E1                     POP   HL   
4112                          ;*Macro unroll:  test "\\a:b{1 %b = %b} x= 2 x^", 1
4112   31 00 5D               LD   SP,STACK   
4115   CD 7E 10               CALL   coldInit   
4118   CD 74 5B               CALL   execStr   
411B   5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{1 %b = %b} x= 2 x^",0   
4133   E1                     POP   HL   
4134   E5                     PUSH   HL   
4135   11 01 00               LD   DE,1   
4138   B7                     OR   A   
4139   ED 52                  SBC   HL,DE   
413B   7D                     LD   A,L   
413C   B4                     OR   H   
413D   CA AF 41               JP   Z,expectM_3201S145   
4140   CD 4A 10               CALL   printStr   
4143   43 6F 64 65 3A 20 5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{1 %b = %b} x= 2 x^"   
4161   CD 4A 10               CALL   printStr   
4164   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4173   21 01 00               LD   hl,1   
4176   E5                     PUSH   hl   
4177   E5                     PUSH   hl   
4178   CD 47 11               CALL   run   
417B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4187   CD 4A 10               CALL   printStr   
418A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4197   E1                     POP   hl   
4198   E5                     PUSH   hl   
4199   E5                     PUSH   hl   
419A   CD 47 11               CALL   run   
419D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
41AE   76                     HALT      
41AF                EXPECTM_3201S145:      
41AF   E1                     POP   HL   
41B0                          ;*Macro unroll:  test "\\a:b{%a %b = %b} x= 2 x^", 2
41B0   31 00 5D               LD   SP,STACK   
41B3   CD 7E 10               CALL   coldInit   
41B6   CD 74 5B               CALL   execStr   
41B9   5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{%a %b = %b} x= 2 x^",0   
41D2   E1                     POP   HL   
41D3   E5                     PUSH   HL   
41D4   11 02 00               LD   DE,2   
41D7   B7                     OR   A   
41D8   ED 52                  SBC   HL,DE   
41DA   7D                     LD   A,L   
41DB   B4                     OR   H   
41DC   CA 4F 42               JP   Z,expectM_3202S146   
41DF   CD 4A 10               CALL   printStr   
41E2   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a %b = %b} x= 2 x^"   
4201   CD 4A 10               CALL   printStr   
4204   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4213   21 02 00               LD   hl,2   
4216   E5                     PUSH   hl   
4217   E5                     PUSH   hl   
4218   CD 47 11               CALL   run   
421B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4227   CD 4A 10               CALL   printStr   
422A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4237   E1                     POP   hl   
4238   E5                     PUSH   hl   
4239   E5                     PUSH   hl   
423A   CD 47 11               CALL   run   
423D   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
424E   76                     HALT      
424F                EXPECTM_3202S146:      
424F   E1                     POP   HL   
4250                          ;*Macro unroll:  test "1 10 20 \\ab{/tru{%a}{%b} ?}^ +", 11
4250   31 00 5D               LD   SP,STACK   
4253   CD 7E 10               CALL   coldInit   
4256   CD 74 5B               CALL   execStr   
4259   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 72 75 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/tru{%a}{%b} ?}^ +",0   
4278   E1                     POP   HL   
4279   E5                     PUSH   HL   
427A   11 0B 00               LD   DE,11   
427D   B7                     OR   A   
427E   ED 52                  SBC   HL,DE   
4280   7D                     LD   A,L   
4281   B4                     OR   H   
4282   CA FB 42               JP   Z,expectM_3203S147   
4285   CD 4A 10               CALL   printStr   
4288   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 72 75 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/tru{%a}{%b} ?}^ +"   
42AD   CD 4A 10               CALL   printStr   
42B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42BF   21 0B 00               LD   hl,11   
42C2   E5                     PUSH   hl   
42C3   E5                     PUSH   hl   
42C4   CD 47 11               CALL   run   
42C7   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
42D3   CD 4A 10               CALL   printStr   
42D6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42E3   E1                     POP   hl   
42E4   E5                     PUSH   hl   
42E5   E5                     PUSH   hl   
42E6   CD 47 11               CALL   run   
42E9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
42FA   76                     HALT      
42FB                EXPECTM_3203S147:      
42FB   E1                     POP   HL   
42FC                          ;*Macro unroll:  test "1 10 20 \\ab{/fal{%a}{%b} ?}^ +", 21
42FC   31 00 5D               LD   SP,STACK   
42FF   CD 7E 10               CALL   coldInit   
4302   CD 74 5B               CALL   execStr   
4305   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 61 6C 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/fal{%a}{%b} ?}^ +",0   
4324   E1                     POP   HL   
4325   E5                     PUSH   HL   
4326   11 15 00               LD   DE,21   
4329   B7                     OR   A   
432A   ED 52                  SBC   HL,DE   
432C   7D                     LD   A,L   
432D   B4                     OR   H   
432E   CA A7 43               JP   Z,expectM_3204S148   
4331   CD 4A 10               CALL   printStr   
4334   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 61 6C 7B 25 61 7D 7B 25 62 7D 20 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/fal{%a}{%b} ?}^ +"   
4359   CD 4A 10               CALL   printStr   
435C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
436B   21 15 00               LD   hl,21   
436E   E5                     PUSH   hl   
436F   E5                     PUSH   hl   
4370   CD 47 11               CALL   run   
4373   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
437F   CD 4A 10               CALL   printStr   
4382   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
438F   E1                     POP   hl   
4390   E5                     PUSH   hl   
4391   E5                     PUSH   hl   
4392   CD 47 11               CALL   run   
4395   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
43A6   76                     HALT      
43A7                EXPECTM_3204S148:      
43A7   E1                     POP   HL   
43A8                          ;*Macro unroll:  test "[10 20 30] 1;", 20
43A8   31 00 5D               LD   SP,STACK   
43AB   CD 7E 10               CALL   coldInit   
43AE   CD 74 5B               CALL   execStr   
43B1   5B 31 30 20 32 30 20 33 30 5D 20 31 3B 00 DB   "[10 20 30] 1;",0   
43BF   E1                     POP   HL   
43C0   E5                     PUSH   HL   
43C1   11 14 00               LD   DE,20   
43C4   B7                     OR   A   
43C5   ED 52                  SBC   HL,DE   
43C7   7D                     LD   A,L   
43C8   B4                     OR   H   
43C9   CA 31 44               JP   Z,expectM_3205S149   
43CC   CD 4A 10               CALL   printStr   
43CF   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 3B 00 .CSTR   "Code: ","[10 20 30] 1;"   
43E3   CD 4A 10               CALL   printStr   
43E6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43F5   21 14 00               LD   hl,20   
43F8   E5                     PUSH   hl   
43F9   E5                     PUSH   hl   
43FA   CD 47 11               CALL   run   
43FD   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4409   CD 4A 10               CALL   printStr   
440C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4419   E1                     POP   hl   
441A   E5                     PUSH   hl   
441B   E5                     PUSH   hl   
441C   CD 47 11               CALL   run   
441F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4430   76                     HALT      
4431                EXPECTM_3205S149:      
4431   E1                     POP   HL   
4432                          ;*Macro unroll:  test "[10 20 30 40] /aln", 4
4432   31 00 5D               LD   SP,STACK   
4435   CD 7E 10               CALL   coldInit   
4438   CD 74 5B               CALL   execStr   
443B   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 6E 00 DB   "[10 20 30 40] /aln",0   
444E   E1                     POP   HL   
444F   E5                     PUSH   HL   
4450   11 04 00               LD   DE,4   
4453   B7                     OR   A   
4454   ED 52                  SBC   HL,DE   
4456   7D                     LD   A,L   
4457   B4                     OR   H   
4458   CA C5 44               JP   Z,expectM_3206S150   
445B   CD 4A 10               CALL   printStr   
445E   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 6E 00 .CSTR   "Code: ","[10 20 30 40] /aln"   
4477   CD 4A 10               CALL   printStr   
447A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4489   21 04 00               LD   hl,4   
448C   E5                     PUSH   hl   
448D   E5                     PUSH   hl   
448E   CD 47 11               CALL   run   
4491   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
449D   CD 4A 10               CALL   printStr   
44A0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44AD   E1                     POP   hl   
44AE   E5                     PUSH   hl   
44AF   E5                     PUSH   hl   
44B0   CD 47 11               CALL   run   
44B3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
44C4   76                     HALT      
44C5                EXPECTM_3206S150:      
44C5   E1                     POP   HL   
44C6                          ;*Macro unroll:  test "/byt [1 2 3] 1;", 2
44C6   31 00 5D               LD   SP,STACK   
44C9   CD 7E 10               CALL   coldInit   
44CC   CD 74 5B               CALL   execStr   
44CF   2F 62 79 74 20 5B 31 20 32 20 33 5D 20 31 3B 00 DB   "/byt [1 2 3] 1;",0   
44DF   E1                     POP   HL   
44E0   E5                     PUSH   HL   
44E1   11 02 00               LD   DE,2   
44E4   B7                     OR   A   
44E5   ED 52                  SBC   HL,DE   
44E7   7D                     LD   A,L   
44E8   B4                     OR   H   
44E9   CA 53 45               JP   Z,expectM_3207S151   
44EC   CD 4A 10               CALL   printStr   
44EF   43 6F 64 65 3A 20 2F 62 79 74 20 5B 31 20 32 20 33 5D 20 31 3B 00 .CSTR   "Code: ","/byt [1 2 3] 1;"   
4505   CD 4A 10               CALL   printStr   
4508   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4517   21 02 00               LD   hl,2   
451A   E5                     PUSH   hl   
451B   E5                     PUSH   hl   
451C   CD 47 11               CALL   run   
451F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
452B   CD 4A 10               CALL   printStr   
452E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
453B   E1                     POP   hl   
453C   E5                     PUSH   hl   
453D   E5                     PUSH   hl   
453E   CD 47 11               CALL   run   
4541   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4552   76                     HALT      
4553                EXPECTM_3207S151:      
4553   E1                     POP   HL   
4554                          ;*Macro unroll:  test "/byt [_A _B _C] 1;", 66
4554   31 00 5D               LD   SP,STACK   
4557   CD 7E 10               CALL   coldInit   
455A   CD 74 5B               CALL   execStr   
455D   2F 62 79 74 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 3B 00 DB   "/byt [_A _B _C] 1;",0   
4570   E1                     POP   HL   
4571   E5                     PUSH   HL   
4572   11 42 00               LD   DE,66   
4575   B7                     OR   A   
4576   ED 52                  SBC   HL,DE   
4578   7D                     LD   A,L   
4579   B4                     OR   H   
457A   CA E7 45               JP   Z,expectM_3208S152   
457D   CD 4A 10               CALL   printStr   
4580   43 6F 64 65 3A 20 2F 62 79 74 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 3B 00 .CSTR   "Code: ","/byt [_A _B _C] 1;"   
4599   CD 4A 10               CALL   printStr   
459C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45AB   21 42 00               LD   hl,66   
45AE   E5                     PUSH   hl   
45AF   E5                     PUSH   hl   
45B0   CD 47 11               CALL   run   
45B3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
45BF   CD 4A 10               CALL   printStr   
45C2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45CF   E1                     POP   hl   
45D0   E5                     PUSH   hl   
45D1   E5                     PUSH   hl   
45D2   CD 47 11               CALL   run   
45D5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
45E6   76                     HALT      
45E7                EXPECTM_3208S152:      
45E7   E1                     POP   HL   
45E8                          ;*Macro unroll:  test "[{10}{20}{30}] 0;^ ", 10
45E8   31 00 5D               LD   SP,STACK   
45EB   CD 7E 10               CALL   coldInit   
45EE   CD 74 5B               CALL   execStr   
45F1   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 3B 5E 20 00 DB   "[{10}{20}{30}] 0;^ ",0   
4605   E1                     POP   HL   
4606   E5                     PUSH   HL   
4607   11 0A 00               LD   DE,10   
460A   B7                     OR   A   
460B   ED 52                  SBC   HL,DE   
460D   7D                     LD   A,L   
460E   B4                     OR   H   
460F   CA 7D 46               JP   Z,expectM_3209S153   
4612   CD 4A 10               CALL   printStr   
4615   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 3B 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0;^ "   
462F   CD 4A 10               CALL   printStr   
4632   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4641   21 0A 00               LD   hl,10   
4644   E5                     PUSH   hl   
4645   E5                     PUSH   hl   
4646   CD 47 11               CALL   run   
4649   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4655   CD 4A 10               CALL   printStr   
4658   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4665   E1                     POP   hl   
4666   E5                     PUSH   hl   
4667   E5                     PUSH   hl   
4668   CD 47 11               CALL   run   
466B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
467C   76                     HALT      
467D                EXPECTM_3209S153:      
467D   E1                     POP   HL   
467E                          ;*Macro unroll:  test "10 20 \\ab{[{%a}{%b}] 0;^}^", 10
467E   31 00 5D               LD   SP,STACK   
4681   CD 7E 10               CALL   coldInit   
4684   CD 74 5B               CALL   execStr   
4687   31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 3B 5E 7D 5E 00 DB   "10 20 \\ab{[{%a}{%b}] 0;^}^",0   
46A2   E1                     POP   HL   
46A3   E5                     PUSH   HL   
46A4   11 0A 00               LD   DE,10   
46A7   B7                     OR   A   
46A8   ED 52                  SBC   HL,DE   
46AA   7D                     LD   A,L   
46AB   B4                     OR   H   
46AC   CA 21 47               JP   Z,expectM_3210S154   
46AF   CD 4A 10               CALL   printStr   
46B2   43 6F 64 65 3A 20 31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 3B 5E 7D 5E 00 .CSTR   "Code: ","10 20 \\ab{[{%a}{%b}] 0;^}^"   
46D3   CD 4A 10               CALL   printStr   
46D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46E5   21 0A 00               LD   hl,10   
46E8   E5                     PUSH   hl   
46E9   E5                     PUSH   hl   
46EA   CD 47 11               CALL   run   
46ED   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
46F9   CD 4A 10               CALL   printStr   
46FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4709   E1                     POP   hl   
470A   E5                     PUSH   hl   
470B   E5                     PUSH   hl   
470C   CD 47 11               CALL   run   
470F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4720   76                     HALT      
4721                EXPECTM_3210S154:      
4721   E1                     POP   HL   
4722                          ;*Macro unroll:  test "0 10 20 \\iab{[{%a}{%b}] %i;^}^", 10
4722   31 00 5D               LD   SP,STACK   
4725   CD 7E 10               CALL   coldInit   
4728   CD 74 5B               CALL   execStr   
472B   30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 DB   "0 10 20 \\iab{[{%a}{%b}] %i;^}^",0   
474A   E1                     POP   HL   
474B   E5                     PUSH   HL   
474C   11 0A 00               LD   DE,10   
474F   B7                     OR   A   
4750   ED 52                  SBC   HL,DE   
4752   7D                     LD   A,L   
4753   B4                     OR   H   
4754   CA CD 47               JP   Z,expectM_3211S155   
4757   CD 4A 10               CALL   printStr   
475A   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 \\iab{[{%a}{%b}] %i;^}^"   
477F   CD 4A 10               CALL   printStr   
4782   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4791   21 0A 00               LD   hl,10   
4794   E5                     PUSH   hl   
4795   E5                     PUSH   hl   
4796   CD 47 11               CALL   run   
4799   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
47A5   CD 4A 10               CALL   printStr   
47A8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47B5   E1                     POP   hl   
47B6   E5                     PUSH   hl   
47B7   E5                     PUSH   hl   
47B8   CD 47 11               CALL   run   
47BB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
47CC   76                     HALT      
47CD                EXPECTM_3211S155:      
47CD   E1                     POP   HL   
47CE                          ;*Macro unroll:  test "1 10 20 \\iab{[{%a}{%b}] %i;^}^", 20
47CE   31 00 5D               LD   SP,STACK   
47D1   CD 7E 10               CALL   coldInit   
47D4   CD 74 5B               CALL   execStr   
47D7   31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 DB   "1 10 20 \\iab{[{%a}{%b}] %i;^}^",0   
47F6   E1                     POP   HL   
47F7   E5                     PUSH   HL   
47F8   11 14 00               LD   DE,20   
47FB   B7                     OR   A   
47FC   ED 52                  SBC   HL,DE   
47FE   7D                     LD   A,L   
47FF   B4                     OR   H   
4800   CA 79 48               JP   Z,expectM_3212S156   
4803   CD 4A 10               CALL   printStr   
4806   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 3B 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 \\iab{[{%a}{%b}] %i;^}^"   
482B   CD 4A 10               CALL   printStr   
482E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
483D   21 14 00               LD   hl,20   
4840   E5                     PUSH   hl   
4841   E5                     PUSH   hl   
4842   CD 47 11               CALL   run   
4845   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4851   CD 4A 10               CALL   printStr   
4854   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4861   E1                     POP   hl   
4862   E5                     PUSH   hl   
4863   E5                     PUSH   hl   
4864   CD 47 11               CALL   run   
4867   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4878   76                     HALT      
4879                EXPECTM_3212S156:      
4879   E1                     POP   HL   
487A                          ;*Macro unroll:  test "3i= ( i i-- i/whi )^ + +", 6
487A   31 00 5D               LD   SP,STACK   
487D   CD 7E 10               CALL   coldInit   
4880   CD 74 5B               CALL   execStr   
4883   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/whi )^ + +",0   
489C   E1                     POP   HL   
489D   E5                     PUSH   HL   
489E   11 06 00               LD   DE,6   
48A1   B7                     OR   A   
48A2   ED 52                  SBC   HL,DE   
48A4   7D                     LD   A,L   
48A5   B4                     OR   H   
48A6   CA 19 49               JP   Z,expectM_3213S157   
48A9   CD 4A 10               CALL   printStr   
48AC   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/whi )^ + +"   
48CB   CD 4A 10               CALL   printStr   
48CE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48DD   21 06 00               LD   hl,6   
48E0   E5                     PUSH   hl   
48E1   E5                     PUSH   hl   
48E2   CD 47 11               CALL   run   
48E5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
48F1   CD 4A 10               CALL   printStr   
48F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4901   E1                     POP   hl   
4902   E5                     PUSH   hl   
4903   E5                     PUSH   hl   
4904   CD 47 11               CALL   run   
4907   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4918   76                     HALT      
4919                EXPECTM_3213S157:      
4919   E1                     POP   HL   
491A                          ;*Macro unroll:  test "3i= [ ( i i-- i/whi )^ ] 1;", 2
491A   31 00 5D               LD   SP,STACK   
491D   CD 7E 10               CALL   coldInit   
4920   CD 74 5B               CALL   execStr   
4923   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 5D 20 31 3B 00 DB   "3i= [ ( i i-- i/whi )^ ] 1;",0   
493F   E1                     POP   HL   
4940   E5                     PUSH   HL   
4941   11 02 00               LD   DE,2   
4944   B7                     OR   A   
4945   ED 52                  SBC   HL,DE   
4947   7D                     LD   A,L   
4948   B4                     OR   H   
4949   CA BF 49               JP   Z,expectM_3214S158   
494C   CD 4A 10               CALL   printStr   
494F   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 5D 20 31 3B 00 .CSTR   "Code: ","3i= [ ( i i-- i/whi )^ ] 1;"   
4971   CD 4A 10               CALL   printStr   
4974   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4983   21 02 00               LD   hl,2   
4986   E5                     PUSH   hl   
4987   E5                     PUSH   hl   
4988   CD 47 11               CALL   run   
498B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4997   CD 4A 10               CALL   printStr   
499A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
49A7   E1                     POP   hl   
49A8   E5                     PUSH   hl   
49A9   E5                     PUSH   hl   
49AA   CD 47 11               CALL   run   
49AD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
49BE   76                     HALT      
49BF                EXPECTM_3214S158:      
49BF   E1                     POP   HL   
49C0                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/whi )^ j ", 10
49C0   31 00 5D               LD   SP,STACK   
49C3   CD 7E 10               CALL   coldInit   
49C6   CD 74 5B               CALL   execStr   
49C9   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/whi )^ j ",0   
49F0   E1                     POP   HL   
49F1   E5                     PUSH   HL   
49F2   11 0A 00               LD   DE,10   
49F5   B7                     OR   A   
49F6   ED 52                  SBC   HL,DE   
49F8   7D                     LD   A,L   
49F9   B4                     OR   H   
49FA   CA 7B 4A               JP   Z,expectM_3215S159   
49FD   CD 4A 10               CALL   printStr   
4A00   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 77 68 69 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/whi )^ j "   
4A2D   CD 4A 10               CALL   printStr   
4A30   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A3F   21 0A 00               LD   hl,10   
4A42   E5                     PUSH   hl   
4A43   E5                     PUSH   hl   
4A44   CD 47 11               CALL   run   
4A47   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4A53   CD 4A 10               CALL   printStr   
4A56   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A63   E1                     POP   hl   
4A64   E5                     PUSH   hl   
4A65   E5                     PUSH   hl   
4A66   CD 47 11               CALL   run   
4A69   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4A7A   76                     HALT      
4A7B                EXPECTM_3215S159:      
4A7B   E1                     POP   HL   
4A7C                          ;*Macro unroll:  test "0j= 0i= ( i j+= i++ i 5< /whi )^ j ", 10
4A7C   31 00 5D               LD   SP,STACK   
4A7F   CD 7E 10               CALL   coldInit   
4A82   CD 74 5B               CALL   execStr   
4A85   30 6A 3D 20 30 69 3D 20 28 20 69 20 6A 2B 3D 20 69 2B 2B 20 69 20 35 3C 20 2F 77 68 69 20 29 5E 20 6A 20 00 DB   "0j= 0i= ( i j+= i++ i 5< /whi )^ j ",0   
4AA9   E1                     POP   HL   
4AAA   E5                     PUSH   HL   
4AAB   11 0A 00               LD   DE,10   
4AAE   B7                     OR   A   
4AAF   ED 52                  SBC   HL,DE   
4AB1   7D                     LD   A,L   
4AB2   B4                     OR   H   
4AB3   CA 31 4B               JP   Z,expectM_3216S160   
4AB6   CD 4A 10               CALL   printStr   
4AB9   43 6F 64 65 3A 20 30 6A 3D 20 30 69 3D 20 28 20 69 20 6A 2B 3D 20 69 2B 2B 20 69 20 35 3C 20 2F 77 68 69 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0j= 0i= ( i j+= i++ i 5< /whi )^ j "   
4AE3   CD 4A 10               CALL   printStr   
4AE6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4AF5   21 0A 00               LD   hl,10   
4AF8   E5                     PUSH   hl   
4AF9   E5                     PUSH   hl   
4AFA   CD 47 11               CALL   run   
4AFD   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4B09   CD 4A 10               CALL   printStr   
4B0C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B19   E1                     POP   hl   
4B1A   E5                     PUSH   hl   
4B1B   E5                     PUSH   hl   
4B1C   CD 47 11               CALL   run   
4B1F   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4B30   76                     HALT      
4B31                EXPECTM_3216S160:      
4B31   E1                     POP   HL   
4B32                          ;*Macro unroll:  test "0t= 3i= (4j= (t++ j-- j/whi)^ i-- i/whi)^ t", 12
4B32   31 00 5D               LD   SP,STACK   
4B35   CD 7E 10               CALL   coldInit   
4B38   CD 74 5B               CALL   execStr   
4B3B   30 74 3D 20 33 69 3D 20 28 34 6A 3D 20 28 74 2B 2B 20 6A 2D 2D 20 6A 2F 77 68 69 29 5E 20 69 2D 2D 20 69 2F 77 68 69 29 5E 20 74 00 DB   "0t= 3i= (4j= (t++ j-- j/whi)^ i-- i/whi)^ t",0   
4B67   E1                     POP   HL   
4B68   E5                     PUSH   HL   
4B69   11 0C 00               LD   DE,12   
4B6C   B7                     OR   A   
4B6D   ED 52                  SBC   HL,DE   
4B6F   7D                     LD   A,L   
4B70   B4                     OR   H   
4B71   CA F7 4B               JP   Z,expectM_3217S161   
4B74   CD 4A 10               CALL   printStr   
4B77   43 6F 64 65 3A 20 30 74 3D 20 33 69 3D 20 28 34 6A 3D 20 28 74 2B 2B 20 6A 2D 2D 20 6A 2F 77 68 69 29 5E 20 69 2D 2D 20 69 2F 77 68 69 29 5E 20 74 00 .CSTR   "Code: ","0t= 3i= (4j= (t++ j-- j/whi)^ i-- i/whi)^ t"   
4BA9   CD 4A 10               CALL   printStr   
4BAC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BBB   21 0C 00               LD   hl,12   
4BBE   E5                     PUSH   hl   
4BBF   E5                     PUSH   hl   
4BC0   CD 47 11               CALL   run   
4BC3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4BCF   CD 4A 10               CALL   printStr   
4BD2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4BDF   E1                     POP   hl   
4BE0   E5                     PUSH   hl   
4BE1   E5                     PUSH   hl   
4BE2   CD 47 11               CALL   run   
4BE5   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4BF6   76                     HALT      
4BF7                EXPECTM_3217S161:      
4BF7   E1                     POP   HL   
4BF8                          ;*Macro unroll:  test "3 \\a:bc{%a %c = ( %c %c -- %c /whi )^ + +}^", 6
4BF8   31 00 5D               LD   SP,STACK   
4BFB   CD 7E 10               CALL   coldInit   
4BFE   CD 74 5B               CALL   execStr   
4C01   33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 77 68 69 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 \\a:bc{%a %c = ( %c %c -- %c /whi )^ + +}^",0   
4C2D   E1                     POP   HL   
4C2E   E5                     PUSH   HL   
4C2F   11 06 00               LD   DE,6   
4C32   B7                     OR   A   
4C33   ED 52                  SBC   HL,DE   
4C35   7D                     LD   A,L   
4C36   B4                     OR   H   
4C37   CA BD 4C               JP   Z,expectM_3218S162   
4C3A   CD 4A 10               CALL   printStr   
4C3D   43 6F 64 65 3A 20 33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 77 68 69 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 \\a:bc{%a %c = ( %c %c -- %c /whi )^ + +}^"   
4C6F   CD 4A 10               CALL   printStr   
4C72   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C81   21 06 00               LD   hl,6   
4C84   E5                     PUSH   hl   
4C85   E5                     PUSH   hl   
4C86   CD 47 11               CALL   run   
4C89   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4C95   CD 4A 10               CALL   printStr   
4C98   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4CA5   E1                     POP   hl   
4CA6   E5                     PUSH   hl   
4CA7   E5                     PUSH   hl   
4CA8   CD 47 11               CALL   run   
4CAB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4CBC   76                     HALT      
4CBD                EXPECTM_3218S162:      
4CBD   E1                     POP   HL   
4CBE                          ;*Macro unroll:  test "/tru \\f{1 %f/whi 2 +}^",3
4CBE   31 00 5D               LD   SP,STACK   
4CC1   CD 7E 10               CALL   coldInit   
4CC4   CD 74 5B               CALL   execStr   
4CC7   2F 74 72 75 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 DB   "/tru \\f{1 %f/whi 2 +}^",0   
4CDE   E1                     POP   HL   
4CDF   E5                     PUSH   HL   
4CE0   11 03 00               LD   DE,3   
4CE3   B7                     OR   A   
4CE4   ED 52                  SBC   HL,DE   
4CE6   7D                     LD   A,L   
4CE7   B4                     OR   H   
4CE8   CA 59 4D               JP   Z,expectM_3219S163   
4CEB   CD 4A 10               CALL   printStr   
4CEE   43 6F 64 65 3A 20 2F 74 72 75 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/tru \\f{1 %f/whi 2 +}^"   
4D0B   CD 4A 10               CALL   printStr   
4D0E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D1D   21 03 00               LD   hl,3   
4D20   E5                     PUSH   hl   
4D21   E5                     PUSH   hl   
4D22   CD 47 11               CALL   run   
4D25   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4D31   CD 4A 10               CALL   printStr   
4D34   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D41   E1                     POP   hl   
4D42   E5                     PUSH   hl   
4D43   E5                     PUSH   hl   
4D44   CD 47 11               CALL   run   
4D47   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4D58   76                     HALT      
4D59                EXPECTM_3219S163:      
4D59   E1                     POP   HL   
4D5A                          ;*Macro unroll:  test "/fal \\f{1 %f/whi 2 +}^",1
4D5A   31 00 5D               LD   SP,STACK   
4D5D   CD 7E 10               CALL   coldInit   
4D60   CD 74 5B               CALL   execStr   
4D63   2F 66 61 6C 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 DB   "/fal \\f{1 %f/whi 2 +}^",0   
4D7A   E1                     POP   HL   
4D7B   E5                     PUSH   HL   
4D7C   11 01 00               LD   DE,1   
4D7F   B7                     OR   A   
4D80   ED 52                  SBC   HL,DE   
4D82   7D                     LD   A,L   
4D83   B4                     OR   H   
4D84   CA F5 4D               JP   Z,expectM_3220S164   
4D87   CD 4A 10               CALL   printStr   
4D8A   43 6F 64 65 3A 20 2F 66 61 6C 20 5C 66 7B 31 20 25 66 2F 77 68 69 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/fal \\f{1 %f/whi 2 +}^"   
4DA7   CD 4A 10               CALL   printStr   
4DAA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4DB9   21 01 00               LD   hl,1   
4DBC   E5                     PUSH   hl   
4DBD   E5                     PUSH   hl   
4DBE   CD 47 11               CALL   run   
4DC1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4DCD   CD 4A 10               CALL   printStr   
4DD0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4DDD   E1                     POP   hl   
4DDE   E5                     PUSH   hl   
4DDF   E5                     PUSH   hl   
4DE0   CD 47 11               CALL   run   
4DE3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4DF4   76                     HALT      
4DF5                EXPECTM_3220S164:      
4DF5   E1                     POP   HL   
4DF6                          ;*Macro unroll:  test "_A 1 - /adr", NUL
4DF6   31 00 5D               LD   SP,STACK   
4DF9   CD 7E 10               CALL   coldInit   
4DFC   CD 74 5B               CALL   execStr   
4DFF   5F 41 20 31 20 2D 20 2F 61 64 72 00 DB   "_A 1 - /adr",0   
4E0B   E1                     POP   HL   
4E0C   E5                     PUSH   HL   
4E0D   11 00 00               LD   DE,NUL   
4E10   B7                     OR   A   
4E11   ED 52                  SBC   HL,DE   
4E13   7D                     LD   A,L   
4E14   B4                     OR   H   
4E15   CA 7B 4E               JP   Z,expectM_3221S165   
4E18   CD 4A 10               CALL   printStr   
4E1B   43 6F 64 65 3A 20 5F 41 20 31 20 2D 20 2F 61 64 72 00 .CSTR   "Code: ","_A 1 - /adr"   
4E2D   CD 4A 10               CALL   printStr   
4E30   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4E3F   21 00 00               LD   hl,NUL   
4E42   E5                     PUSH   hl   
4E43   E5                     PUSH   hl   
4E44   CD 47 11               CALL   run   
4E47   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4E53   CD 4A 10               CALL   printStr   
4E56   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4E63   E1                     POP   hl   
4E64   E5                     PUSH   hl   
4E65   E5                     PUSH   hl   
4E66   CD 47 11               CALL   run   
4E69   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4E7A   76                     HALT      
4E7B                EXPECTM_3221S165:      
4E7B   E1                     POP   HL   
4E7C                          ;*Macro unroll:  test "_Z 1 + /adr", NUL
4E7C   31 00 5D               LD   SP,STACK   
4E7F   CD 7E 10               CALL   coldInit   
4E82   CD 74 5B               CALL   execStr   
4E85   5F 5A 20 31 20 2B 20 2F 61 64 72 00 DB   "_Z 1 + /adr",0   
4E91   E1                     POP   HL   
4E92   E5                     PUSH   HL   
4E93   11 00 00               LD   DE,NUL   
4E96   B7                     OR   A   
4E97   ED 52                  SBC   HL,DE   
4E99   7D                     LD   A,L   
4E9A   B4                     OR   H   
4E9B   CA 01 4F               JP   Z,expectM_3222S166   
4E9E   CD 4A 10               CALL   printStr   
4EA1   43 6F 64 65 3A 20 5F 5A 20 31 20 2B 20 2F 61 64 72 00 .CSTR   "Code: ","_Z 1 + /adr"   
4EB3   CD 4A 10               CALL   printStr   
4EB6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4EC5   21 00 00               LD   hl,NUL   
4EC8   E5                     PUSH   hl   
4EC9   E5                     PUSH   hl   
4ECA   CD 47 11               CALL   run   
4ECD   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4ED9   CD 4A 10               CALL   printStr   
4EDC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4EE9   E1                     POP   hl   
4EEA   E5                     PUSH   hl   
4EEB   E5                     PUSH   hl   
4EEC   CD 47 11               CALL   run   
4EEF   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4F00   76                     HALT      
4F01                EXPECTM_3222S166:      
4F01   E1                     POP   HL   
4F02                          ;*Macro unroll:  test "_a 1 - /adr", NUL
4F02   31 00 5D               LD   SP,STACK   
4F05   CD 7E 10               CALL   coldInit   
4F08   CD 74 5B               CALL   execStr   
4F0B   5F 61 20 31 20 2D 20 2F 61 64 72 00 DB   "_a 1 - /adr",0   
4F17   E1                     POP   HL   
4F18   E5                     PUSH   HL   
4F19   11 00 00               LD   DE,NUL   
4F1C   B7                     OR   A   
4F1D   ED 52                  SBC   HL,DE   
4F1F   7D                     LD   A,L   
4F20   B4                     OR   H   
4F21   CA 87 4F               JP   Z,expectM_3223S167   
4F24   CD 4A 10               CALL   printStr   
4F27   43 6F 64 65 3A 20 5F 61 20 31 20 2D 20 2F 61 64 72 00 .CSTR   "Code: ","_a 1 - /adr"   
4F39   CD 4A 10               CALL   printStr   
4F3C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4F4B   21 00 00               LD   hl,NUL   
4F4E   E5                     PUSH   hl   
4F4F   E5                     PUSH   hl   
4F50   CD 47 11               CALL   run   
4F53   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4F5F   CD 4A 10               CALL   printStr   
4F62   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4F6F   E1                     POP   hl   
4F70   E5                     PUSH   hl   
4F71   E5                     PUSH   hl   
4F72   CD 47 11               CALL   run   
4F75   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
4F86   76                     HALT      
4F87                EXPECTM_3223S167:      
4F87   E1                     POP   HL   
4F88                          ;*Macro unroll:  test "_z 1 + /adr", NUL
4F88   31 00 5D               LD   SP,STACK   
4F8B   CD 7E 10               CALL   coldInit   
4F8E   CD 74 5B               CALL   execStr   
4F91   5F 7A 20 31 20 2B 20 2F 61 64 72 00 DB   "_z 1 + /adr",0   
4F9D   E1                     POP   HL   
4F9E   E5                     PUSH   HL   
4F9F   11 00 00               LD   DE,NUL   
4FA2   B7                     OR   A   
4FA3   ED 52                  SBC   HL,DE   
4FA5   7D                     LD   A,L   
4FA6   B4                     OR   H   
4FA7   CA 0D 50               JP   Z,expectM_3224S168   
4FAA   CD 4A 10               CALL   printStr   
4FAD   43 6F 64 65 3A 20 5F 7A 20 31 20 2B 20 2F 61 64 72 00 .CSTR   "Code: ","_z 1 + /adr"   
4FBF   CD 4A 10               CALL   printStr   
4FC2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4FD1   21 00 00               LD   hl,NUL   
4FD4   E5                     PUSH   hl   
4FD5   E5                     PUSH   hl   
4FD6   CD 47 11               CALL   run   
4FD9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
4FE5   CD 4A 10               CALL   printStr   
4FE8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4FF5   E1                     POP   hl   
4FF6   E5                     PUSH   hl   
4FF7   E5                     PUSH   hl   
4FF8   CD 47 11               CALL   run   
4FFB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
500C   76                     HALT      
500D                EXPECTM_3224S168:      
500D   E1                     POP   HL   
500E                          ;*Macro unroll:  test "_z /adr", VARS + (("z"-"a")+("Z"-"A")+1)*2
500E   31 00 5D               LD   SP,STACK   
5011   CD 7E 10               CALL   coldInit   
5014   CD 74 5B               CALL   execStr   
5017   5F 7A 20 2F 61 64 72 00 DB   "_z /adr",0   
501F   E1                     POP   HL   
5020   E5                     PUSH   HL   
5021   11 66 5F               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
5024   B7                     OR   A   
5025   ED 52                  SBC   HL,DE   
5027   7D                     LD   A,L   
5028   B4                     OR   H   
5029   CA 8B 50               JP   Z,expectM_3225S169   
502C   CD 4A 10               CALL   printStr   
502F   43 6F 64 65 3A 20 5F 7A 20 2F 61 64 72 00 .CSTR   "Code: ","_z /adr"   
503D   CD 4A 10               CALL   printStr   
5040   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
504F   21 66 5F               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
5052   E5                     PUSH   hl   
5053   E5                     PUSH   hl   
5054   CD 47 11               CALL   run   
5057   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5063   CD 4A 10               CALL   printStr   
5066   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5073   E1                     POP   hl   
5074   E5                     PUSH   hl   
5075   E5                     PUSH   hl   
5076   CD 47 11               CALL   run   
5079   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
508A   76                     HALT      
508B                EXPECTM_3225S169:      
508B   E1                     POP   HL   
508C                          ;*Macro unroll:  test "_a /adr", VARS + ("Z"-"A"+1)*2
508C   31 00 5D               LD   SP,STACK   
508F   CD 7E 10               CALL   coldInit   
5092   CD 74 5B               CALL   execStr   
5095   5F 61 20 2F 61 64 72 00 DB   "_a /adr",0   
509D   E1                     POP   HL   
509E   E5                     PUSH   HL   
509F   11 34 5F               LD   DE,VARS + ("Z"-"A"+1)*2   
50A2   B7                     OR   A   
50A3   ED 52                  SBC   HL,DE   
50A5   7D                     LD   A,L   
50A6   B4                     OR   H   
50A7   CA 09 51               JP   Z,expectM_3226S170   
50AA   CD 4A 10               CALL   printStr   
50AD   43 6F 64 65 3A 20 5F 61 20 2F 61 64 72 00 .CSTR   "Code: ","_a /adr"   
50BB   CD 4A 10               CALL   printStr   
50BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
50CD   21 34 5F               LD   hl,VARS + ("Z"-"A"+1)*2   
50D0   E5                     PUSH   hl   
50D1   E5                     PUSH   hl   
50D2   CD 47 11               CALL   run   
50D5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
50E1   CD 4A 10               CALL   printStr   
50E4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
50F1   E1                     POP   hl   
50F2   E5                     PUSH   hl   
50F3   E5                     PUSH   hl   
50F4   CD 47 11               CALL   run   
50F7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5108   76                     HALT      
5109                EXPECTM_3226S170:      
5109   E1                     POP   HL   
510A                          ;*Macro unroll:  test "_Z /adr", VARS + ("Z"-"A")*2
510A   31 00 5D               LD   SP,STACK   
510D   CD 7E 10               CALL   coldInit   
5110   CD 74 5B               CALL   execStr   
5113   5F 5A 20 2F 61 64 72 00 DB   "_Z /adr",0   
511B   E1                     POP   HL   
511C   E5                     PUSH   HL   
511D   11 32 5F               LD   DE,VARS + ("Z"-"A")*2   
5120   B7                     OR   A   
5121   ED 52                  SBC   HL,DE   
5123   7D                     LD   A,L   
5124   B4                     OR   H   
5125   CA 87 51               JP   Z,expectM_3227S171   
5128   CD 4A 10               CALL   printStr   
512B   43 6F 64 65 3A 20 5F 5A 20 2F 61 64 72 00 .CSTR   "Code: ","_Z /adr"   
5139   CD 4A 10               CALL   printStr   
513C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
514B   21 32 5F               LD   hl,VARS + ("Z"-"A")*2   
514E   E5                     PUSH   hl   
514F   E5                     PUSH   hl   
5150   CD 47 11               CALL   run   
5153   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
515F   CD 4A 10               CALL   printStr   
5162   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
516F   E1                     POP   hl   
5170   E5                     PUSH   hl   
5171   E5                     PUSH   hl   
5172   CD 47 11               CALL   run   
5175   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5186   76                     HALT      
5187                EXPECTM_3227S171:      
5187   E1                     POP   HL   
5188                          ;*Macro unroll:  test "_A /adr", VARS
5188   31 00 5D               LD   SP,STACK   
518B   CD 7E 10               CALL   coldInit   
518E   CD 74 5B               CALL   execStr   
5191   5F 41 20 2F 61 64 72 00 DB   "_A /adr",0   
5199   E1                     POP   HL   
519A   E5                     PUSH   HL   
519B   11 00 5F               LD   DE,VARS   
519E   B7                     OR   A   
519F   ED 52                  SBC   HL,DE   
51A1   7D                     LD   A,L   
51A2   B4                     OR   H   
51A3   CA 05 52               JP   Z,expectM_3228S172   
51A6   CD 4A 10               CALL   printStr   
51A9   43 6F 64 65 3A 20 5F 41 20 2F 61 64 72 00 .CSTR   "Code: ","_A /adr"   
51B7   CD 4A 10               CALL   printStr   
51BA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
51C9   21 00 5F               LD   hl,VARS   
51CC   E5                     PUSH   hl   
51CD   E5                     PUSH   hl   
51CE   CD 47 11               CALL   run   
51D1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
51DD   CD 4A 10               CALL   printStr   
51E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
51ED   E1                     POP   hl   
51EE   E5                     PUSH   hl   
51EF   E5                     PUSH   hl   
51F0   CD 47 11               CALL   run   
51F3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5204   76                     HALT      
5205                EXPECTM_3228S172:      
5205   E1                     POP   HL   
5206                          ;*Macro unroll:  test "\\a{%a} F=1F^", 1
5206   31 00 5D               LD   SP,STACK   
5209   CD 7E 10               CALL   coldInit   
520C   CD 74 5B               CALL   execStr   
520F   5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   "\\a{%a} F=1F^",0   
521C   E1                     POP   HL   
521D   E5                     PUSH   HL   
521E   11 01 00               LD   DE,1   
5221   B7                     OR   A   
5222   ED 52                  SBC   HL,DE   
5224   7D                     LD   A,L   
5225   B4                     OR   H   
5226   CA 8D 52               JP   Z,expectM_3229S173   
5229   CD 4A 10               CALL   printStr   
522C   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ","\\a{%a} F=1F^"   
523F   CD 4A 10               CALL   printStr   
5242   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5251   21 01 00               LD   hl,1   
5254   E5                     PUSH   hl   
5255   E5                     PUSH   hl   
5256   CD 47 11               CALL   run   
5259   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5265   CD 4A 10               CALL   printStr   
5268   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5275   E1                     POP   hl   
5276   E5                     PUSH   hl   
5277   E5                     PUSH   hl   
5278   CD 47 11               CALL   run   
527B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
528C   76                     HALT      
528D                EXPECTM_3229S173:      
528D   E1                     POP   HL   
528E                          ;*Macro unroll:  test "1 \\b{\\a{%a}}^F= 3F^",3
528E   31 00 5D               LD   SP,STACK   
5291   CD 7E 10               CALL   coldInit   
5294   CD 74 5B               CALL   execStr   
5297   31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a}}^F= 3F^",0   
52AB   E1                     POP   HL   
52AC   E5                     PUSH   HL   
52AD   11 03 00               LD   DE,3   
52B0   B7                     OR   A   
52B1   ED 52                  SBC   HL,DE   
52B3   7D                     LD   A,L   
52B4   B4                     OR   H   
52B5   CA 23 53               JP   Z,expectM_3230S174   
52B8   CD 4A 10               CALL   printStr   
52BB   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a}}^F= 3F^"   
52D5   CD 4A 10               CALL   printStr   
52D8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
52E7   21 03 00               LD   hl,3   
52EA   E5                     PUSH   hl   
52EB   E5                     PUSH   hl   
52EC   CD 47 11               CALL   run   
52EF   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
52FB   CD 4A 10               CALL   printStr   
52FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
530B   E1                     POP   hl   
530C   E5                     PUSH   hl   
530D   E5                     PUSH   hl   
530E   CD 47 11               CALL   run   
5311   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5322   76                     HALT      
5323                EXPECTM_3230S174:      
5323   E1                     POP   HL   
5324                          ;*Macro unroll:  test "1 \\b{\\a{%a%b-}}^F= 3F^",2
5324   31 00 5D               LD   SP,STACK   
5327   CD 7E 10               CALL   coldInit   
532A   CD 74 5B               CALL   execStr   
532D   31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a%b-}}^F= 3F^",0   
5344   E1                     POP   HL   
5345   E5                     PUSH   HL   
5346   11 02 00               LD   DE,2   
5349   B7                     OR   A   
534A   ED 52                  SBC   HL,DE   
534C   7D                     LD   A,L   
534D   B4                     OR   H   
534E   CA BF 53               JP   Z,expectM_3231S175   
5351   CD 4A 10               CALL   printStr   
5354   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a%b-}}^F= 3F^"   
5371   CD 4A 10               CALL   printStr   
5374   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5383   21 02 00               LD   hl,2   
5386   E5                     PUSH   hl   
5387   E5                     PUSH   hl   
5388   CD 47 11               CALL   run   
538B   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5397   CD 4A 10               CALL   printStr   
539A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
53A7   E1                     POP   hl   
53A8   E5                     PUSH   hl   
53A9   E5                     PUSH   hl   
53AA   CD 47 11               CALL   run   
53AD   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
53BE   76                     HALT      
53BF                EXPECTM_3231S175:      
53BF   E1                     POP   HL   
53C0                          ;*Macro unroll:  test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
53C0   31 00 5D               LD   SP,STACK   
53C3   CD 7E 10               CALL   coldInit   
53C6   CD 74 5B               CALL   execStr   
53C9   31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
53EC   E1                     POP   HL   
53ED   E5                     PUSH   HL   
53EE   11 01 00               LD   DE,1   
53F1   B7                     OR   A   
53F2   ED 52                  SBC   HL,DE   
53F4   7D                     LD   A,L   
53F5   B4                     OR   H   
53F6   CA 73 54               JP   Z,expectM_3232S176   
53F9   CD 4A 10               CALL   printStr   
53FC   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^"   
5425   CD 4A 10               CALL   printStr   
5428   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5437   21 01 00               LD   hl,1   
543A   E5                     PUSH   hl   
543B   E5                     PUSH   hl   
543C   CD 47 11               CALL   run   
543F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
544B   CD 4A 10               CALL   printStr   
544E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
545B   E1                     POP   hl   
545C   E5                     PUSH   hl   
545D   E5                     PUSH   hl   
545E   CD 47 11               CALL   run   
5461   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5472   76                     HALT      
5473                EXPECTM_3232S176:      
5473   E1                     POP   HL   
5474                          ;*Macro unroll:  test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
5474   31 00 5D               LD   SP,STACK   
5477   CD 7E 10               CALL   coldInit   
547A   CD 74 5B               CALL   execStr   
547D   31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",0   
54A0   E1                     POP   HL   
54A1   E5                     PUSH   HL   
54A2   11 01 00               LD   DE,1   
54A5   B7                     OR   A   
54A6   ED 52                  SBC   HL,DE   
54A8   7D                     LD   A,L   
54A9   B4                     OR   H   
54AA   CA 27 55               JP   Z,expectM_3233S177   
54AD   CD 4A 10               CALL   printStr   
54B0   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^"   
54D9   CD 4A 10               CALL   printStr   
54DC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
54EB   21 01 00               LD   hl,1   
54EE   E5                     PUSH   hl   
54EF   E5                     PUSH   hl   
54F0   CD 47 11               CALL   run   
54F3   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
54FF   CD 4A 10               CALL   printStr   
5502   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
550F   E1                     POP   hl   
5510   E5                     PUSH   hl   
5511   E5                     PUSH   hl   
5512   CD 47 11               CALL   run   
5515   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5526   76                     HALT      
5527                EXPECTM_3233S177:      
5527   E1                     POP   HL   
5528                          ;*Macro unroll:  test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
5528   31 00 5D               LD   SP,STACK   
552B   CD 7E 10               CALL   coldInit   
552E   CD 74 5B               CALL   execStr   
5531   31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
5561   E1                     POP   HL   
5562   E5                     PUSH   HL   
5563   11 02 00               LD   DE,2   
5566   B7                     OR   A   
5567   ED 52                  SBC   HL,DE   
5569   7D                     LD   A,L   
556A   B4                     OR   H   
556B   CA F5 55               JP   Z,expectM_3234S178   
556E   CD 4A 10               CALL   printStr   
5571   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
55A7   CD 4A 10               CALL   printStr   
55AA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
55B9   21 02 00               LD   hl,2   
55BC   E5                     PUSH   hl   
55BD   E5                     PUSH   hl   
55BE   CD 47 11               CALL   run   
55C1   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
55CD   CD 4A 10               CALL   printStr   
55D0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
55DD   E1                     POP   hl   
55DE   E5                     PUSH   hl   
55DF   E5                     PUSH   hl   
55E0   CD 47 11               CALL   run   
55E3   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
55F4   76                     HALT      
55F5                EXPECTM_3234S178:      
55F5   E1                     POP   HL   
55F6                          ;*Macro unroll:  test "'hello'/sl",5
55F6   31 00 5D               LD   SP,STACK   
55F9   CD 7E 10               CALL   coldInit   
55FC   CD 74 5B               CALL   execStr   
55FF   27 68 65 6C 6C 6F 27 2F 73 6C 00 DB   "'hello'/sl",0   
560A   E1                     POP   HL   
560B   E5                     PUSH   HL   
560C   11 05 00               LD   DE,5   
560F   B7                     OR   A   
5610   ED 52                  SBC   HL,DE   
5612   7D                     LD   A,L   
5613   B4                     OR   H   
5614   CA 79 56               JP   Z,expectM_3235S179   
5617   CD 4A 10               CALL   printStr   
561A   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 2F 73 6C 00 .CSTR   "Code: ","'hello'/sl"   
562B   CD 4A 10               CALL   printStr   
562E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
563D   21 05 00               LD   hl,5   
5640   E5                     PUSH   hl   
5641   E5                     PUSH   hl   
5642   CD 47 11               CALL   run   
5645   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5651   CD 4A 10               CALL   printStr   
5654   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5661   E1                     POP   hl   
5662   E5                     PUSH   hl   
5663   E5                     PUSH   hl   
5664   CD 47 11               CALL   run   
5667   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5678   76                     HALT      
5679                EXPECTM_3235S179:      
5679   E1                     POP   HL   
567A                          ;*Macro unroll:  test "'hello' 'hell' /sc", false
567A   31 00 5D               LD   SP,STACK   
567D   CD 7E 10               CALL   coldInit   
5680   CD 74 5B               CALL   execStr   
5683   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 00 DB   "'hello' 'hell' /sc",0   
5696   E1                     POP   HL   
5697   E5                     PUSH   HL   
5698   11 00 00               LD   DE,false   
569B   B7                     OR   A   
569C   ED 52                  SBC   HL,DE   
569E   7D                     LD   A,L   
569F   B4                     OR   H   
56A0   CA 0D 57               JP   Z,expectM_3236S180   
56A3   CD 4A 10               CALL   printStr   
56A6   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 00 .CSTR   "Code: ","'hello' 'hell' /sc"   
56BF   CD 4A 10               CALL   printStr   
56C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
56D1   21 00 00               LD   hl,false   
56D4   E5                     PUSH   hl   
56D5   E5                     PUSH   hl   
56D6   CD 47 11               CALL   run   
56D9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
56E5   CD 4A 10               CALL   printStr   
56E8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
56F5   E1                     POP   hl   
56F6   E5                     PUSH   hl   
56F7   E5                     PUSH   hl   
56F8   CD 47 11               CALL   run   
56FB   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
570C   76                     HALT      
570D                EXPECTM_3236S180:      
570D   E1                     POP   HL   
570E                          ;*Macro unroll:  test "'hello' 'hello' /sc", true
570E   31 00 5D               LD   SP,STACK   
5711   CD 7E 10               CALL   coldInit   
5714   CD 74 5B               CALL   execStr   
5717   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 00 DB   "'hello' 'hello' /sc",0   
572B   E1                     POP   HL   
572C   E5                     PUSH   HL   
572D   11 FF FF               LD   DE,true   
5730   B7                     OR   A   
5731   ED 52                  SBC   HL,DE   
5733   7D                     LD   A,L   
5734   B4                     OR   H   
5735   CA A3 57               JP   Z,expectM_3237S181   
5738   CD 4A 10               CALL   printStr   
573B   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 00 .CSTR   "Code: ","'hello' 'hello' /sc"   
5755   CD 4A 10               CALL   printStr   
5758   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5767   21 FF FF               LD   hl,true   
576A   E5                     PUSH   hl   
576B   E5                     PUSH   hl   
576C   CD 47 11               CALL   run   
576F   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
577B   CD 4A 10               CALL   printStr   
577E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
578B   E1                     POP   hl   
578C   E5                     PUSH   hl   
578D   E5                     PUSH   hl   
578E   CD 47 11               CALL   run   
5791   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
57A2   76                     HALT      
57A3                EXPECTM_3237S181:      
57A3   E1                     POP   HL   
57A4                          ;*Macro unroll:  test "[1 2 3]** + +", 6
57A4   31 00 5D               LD   SP,STACK   
57A7   CD 7E 10               CALL   coldInit   
57AA   CD 74 5B               CALL   execStr   
57AD   5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 DB   "[1 2 3]** + +",0   
57BB   E1                     POP   HL   
57BC   E5                     PUSH   HL   
57BD   11 06 00               LD   DE,6   
57C0   B7                     OR   A   
57C1   ED 52                  SBC   HL,DE   
57C3   7D                     LD   A,L   
57C4   B4                     OR   H   
57C5   CA 2D 58               JP   Z,expectM_3238S182   
57C8   CD 4A 10               CALL   printStr   
57CB   43 6F 64 65 3A 20 5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 .CSTR   "Code: ","[1 2 3]** + +"   
57DF   CD 4A 10               CALL   printStr   
57E2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
57F1   21 06 00               LD   hl,6   
57F4   E5                     PUSH   hl   
57F5   E5                     PUSH   hl   
57F6   CD 47 11               CALL   run   
57F9   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5805   CD 4A 10               CALL   printStr   
5808   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5815   E1                     POP   hl   
5816   E5                     PUSH   hl   
5817   E5                     PUSH   hl   
5818   CD 47 11               CALL   run   
581B   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
582C   76                     HALT      
582D                EXPECTM_3238S182:      
582D   E1                     POP   HL   
582E                          ;*Macro unroll:  test "/byt[_a [_b _c]** _d]2;", $63
582E   31 00 5D               LD   SP,STACK   
5831   CD 7E 10               CALL   coldInit   
5834   CD 74 5B               CALL   execStr   
5837   2F 62 79 74 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 3B 00 DB   "/byt[_a [_b _c]** _d]2;",0   
584F   E1                     POP   HL   
5850   E5                     PUSH   HL   
5851   11 63 00               LD   DE,$63   
5854   B7                     OR   A   
5855   ED 52                  SBC   HL,DE   
5857   7D                     LD   A,L   
5858   B4                     OR   H   
5859   CA CB 58               JP   Z,expectM_3239S183   
585C   CD 4A 10               CALL   printStr   
585F   43 6F 64 65 3A 20 2F 62 79 74 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 3B 00 .CSTR   "Code: ","/byt[_a [_b _c]** _d]2;"   
587D   CD 4A 10               CALL   printStr   
5880   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
588F   21 63 00               LD   hl,$63   
5892   E5                     PUSH   hl   
5893   E5                     PUSH   hl   
5894   CD 47 11               CALL   run   
5897   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
58A3   CD 4A 10               CALL   printStr   
58A6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
58B3   E1                     POP   hl   
58B4   E5                     PUSH   hl   
58B5   E5                     PUSH   hl   
58B6   CD 47 11               CALL   run   
58B9   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
58CA   76                     HALT      
58CB                EXPECTM_3239S183:      
58CB   E1                     POP   HL   
58CC                          ;*Macro unroll:  test "_B [_A {1} _B {2}] /sel", 2
58CC   31 00 5D               LD   SP,STACK   
58CF   CD 7E 10               CALL   coldInit   
58D2   CD 74 5B               CALL   execStr   
58D5   5F 42 20 5B 5F 41 20 7B 31 7D 20 5F 42 20 7B 32 7D 5D 20 2F 73 65 6C 00 DB   "_B [_A {1} _B {2}] /sel",0   
58ED   E1                     POP   HL   
58EE   E5                     PUSH   HL   
58EF   11 02 00               LD   DE,2   
58F2   B7                     OR   A   
58F3   ED 52                  SBC   HL,DE   
58F5   7D                     LD   A,L   
58F6   B4                     OR   H   
58F7   CA 69 59               JP   Z,expectM_3240S184   
58FA   CD 4A 10               CALL   printStr   
58FD   43 6F 64 65 3A 20 5F 42 20 5B 5F 41 20 7B 31 7D 20 5F 42 20 7B 32 7D 5D 20 2F 73 65 6C 00 .CSTR   "Code: ","_B [_A {1} _B {2}] /sel"   
591B   CD 4A 10               CALL   printStr   
591E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
592D   21 02 00               LD   hl,2   
5930   E5                     PUSH   hl   
5931   E5                     PUSH   hl   
5932   CD 47 11               CALL   run   
5935   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5941   CD 4A 10               CALL   printStr   
5944   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5951   E1                     POP   hl   
5952   E5                     PUSH   hl   
5953   E5                     PUSH   hl   
5954   CD 47 11               CALL   run   
5957   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5968   76                     HALT      
5969                EXPECTM_3240S184:      
5969   E1                     POP   HL   
596A                          ;*Macro unroll:  test "1 2 /max", 2
596A   31 00 5D               LD   SP,STACK   
596D   CD 7E 10               CALL   coldInit   
5970   CD 74 5B               CALL   execStr   
5973   31 20 32 20 2F 6D 61 78 00 DB   "1 2 /max",0   
597C   E1                     POP   HL   
597D   E5                     PUSH   HL   
597E   11 02 00               LD   DE,2   
5981   B7                     OR   A   
5982   ED 52                  SBC   HL,DE   
5984   7D                     LD   A,L   
5985   B4                     OR   H   
5986   CA E9 59               JP   Z,expectM_3241S185   
5989   CD 4A 10               CALL   printStr   
598C   43 6F 64 65 3A 20 31 20 32 20 2F 6D 61 78 00 .CSTR   "Code: ","1 2 /max"   
599B   CD 4A 10               CALL   printStr   
599E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
59AD   21 02 00               LD   hl,2   
59B0   E5                     PUSH   hl   
59B1   E5                     PUSH   hl   
59B2   CD 47 11               CALL   run   
59B5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
59C1   CD 4A 10               CALL   printStr   
59C4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
59D1   E1                     POP   hl   
59D2   E5                     PUSH   hl   
59D3   E5                     PUSH   hl   
59D4   CD 47 11               CALL   run   
59D7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
59E8   76                     HALT      
59E9                EXPECTM_3241S185:      
59E9   E1                     POP   HL   
59EA                          ;*Macro unroll:  test "2 1 /max", 2
59EA   31 00 5D               LD   SP,STACK   
59ED   CD 7E 10               CALL   coldInit   
59F0   CD 74 5B               CALL   execStr   
59F3   32 20 31 20 2F 6D 61 78 00 DB   "2 1 /max",0   
59FC   E1                     POP   HL   
59FD   E5                     PUSH   HL   
59FE   11 02 00               LD   DE,2   
5A01   B7                     OR   A   
5A02   ED 52                  SBC   HL,DE   
5A04   7D                     LD   A,L   
5A05   B4                     OR   H   
5A06   CA 69 5A               JP   Z,expectM_3242S186   
5A09   CD 4A 10               CALL   printStr   
5A0C   43 6F 64 65 3A 20 32 20 31 20 2F 6D 61 78 00 .CSTR   "Code: ","2 1 /max"   
5A1B   CD 4A 10               CALL   printStr   
5A1E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5A2D   21 02 00               LD   hl,2   
5A30   E5                     PUSH   hl   
5A31   E5                     PUSH   hl   
5A32   CD 47 11               CALL   run   
5A35   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5A41   CD 4A 10               CALL   printStr   
5A44   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5A51   E1                     POP   hl   
5A52   E5                     PUSH   hl   
5A53   E5                     PUSH   hl   
5A54   CD 47 11               CALL   run   
5A57   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5A68   76                     HALT      
5A69                EXPECTM_3242S186:      
5A69   E1                     POP   HL   
5A6A                          ;*Macro unroll:  test "1 2 /min", 1
5A6A   31 00 5D               LD   SP,STACK   
5A6D   CD 7E 10               CALL   coldInit   
5A70   CD 74 5B               CALL   execStr   
5A73   31 20 32 20 2F 6D 69 6E 00 DB   "1 2 /min",0   
5A7C   E1                     POP   HL   
5A7D   E5                     PUSH   HL   
5A7E   11 01 00               LD   DE,1   
5A81   B7                     OR   A   
5A82   ED 52                  SBC   HL,DE   
5A84   7D                     LD   A,L   
5A85   B4                     OR   H   
5A86   CA E9 5A               JP   Z,expectM_3243S187   
5A89   CD 4A 10               CALL   printStr   
5A8C   43 6F 64 65 3A 20 31 20 32 20 2F 6D 69 6E 00 .CSTR   "Code: ","1 2 /min"   
5A9B   CD 4A 10               CALL   printStr   
5A9E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5AAD   21 01 00               LD   hl,1   
5AB0   E5                     PUSH   hl   
5AB1   E5                     PUSH   hl   
5AB2   CD 47 11               CALL   run   
5AB5   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5AC1   CD 4A 10               CALL   printStr   
5AC4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5AD1   E1                     POP   hl   
5AD2   E5                     PUSH   hl   
5AD3   E5                     PUSH   hl   
5AD4   CD 47 11               CALL   run   
5AD7   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5AE8   76                     HALT      
5AE9                EXPECTM_3243S187:      
5AE9   E1                     POP   HL   
5AEA                          ;*Macro unroll:  test "2 1 /min", 1
5AEA   31 00 5D               LD   SP,STACK   
5AED   CD 7E 10               CALL   coldInit   
5AF0   CD 74 5B               CALL   execStr   
5AF3   32 20 31 20 2F 6D 69 6E 00 DB   "2 1 /min",0   
5AFC   E1                     POP   HL   
5AFD   E5                     PUSH   HL   
5AFE   11 01 00               LD   DE,1   
5B01   B7                     OR   A   
5B02   ED 52                  SBC   HL,DE   
5B04   7D                     LD   A,L   
5B05   B4                     OR   H   
5B06   CA 69 5B               JP   Z,expectM_3244S188   
5B09   CD 4A 10               CALL   printStr   
5B0C   43 6F 64 65 3A 20 32 20 31 20 2F 6D 69 6E 00 .CSTR   "Code: ","2 1 /min"   
5B1B   CD 4A 10               CALL   printStr   
5B1E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
5B2D   21 01 00               LD   hl,1   
5B30   E5                     PUSH   hl   
5B31   E5                     PUSH   hl   
5B32   CD 47 11               CALL   run   
5B35   2E 20 2F 68 65 78 2E 2F 64 65 63 00 .CSTR   ". /hex./dec"   
5B41   CD 4A 10               CALL   printStr   
5B44   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
5B51   E1                     POP   hl   
5B52   E5                     PUSH   hl   
5B53   E5                     PUSH   hl   
5B54   CD 47 11               CALL   run   
5B57   2E 20 2F 68 65 78 2E 2F 64 65 63 20 60 0D 0A 60 00 .CSTR   ". /hex./dec `\r\n`"   
5B68   76                     HALT      
5B69                EXPECTM_3244S188:      
5B69   E1                     POP   HL   
5B6A                             ; ; test "$1000 0 10 1 /rng \\a{%a 1 + 10 *} /map \\a{%a.} /for", $1000
5B6A                             ; 
5B6A   CD 4A 10               CALL   printStr   
5B6D   44 6F 6E 65 21 00      .CSTR   "Done!"   
5B73   76                     HALT      
5B74                             ; executes a null teminated string (null executes exit_)
5B74                             ; the string should be immedaitely following the call
5B74                EXECSTR:      ; create a root stack frame
5B74   C1                     POP   bc   ; bc = code*
5B75   0B                     DEC   bc   ; dec to prepare for next routine
5B76   11 00 00               LD   de,0   
5B79   D5                     PUSH   de   ; push fake IP
5B7A   D5                     PUSH   de   ; push null arg_list*
5B7B   D5                     PUSH   de   ; push null first_arg*
5B7C   D5                     PUSH   de   ; push fake BP
5B7D   DD E9                  JP   (ix)   
5B7F                STKSIZE:   EQU   $100   ; Stack size
5B7F                TIBSIZE:   EQU   $100   ; 256 bytes
5B7F                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
5B7F                          ALIGN   $100   
5C00                          DS   STKSIZE   
5D00                STACK:       
5D00                          ALIGN   $100   
5D00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
5E00                          ALIGN   $100   
5E00                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5F00                          ALIGN   $100   
5F00                VARS:        
5F00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
5FD0                RESTARTS:      
5FD0                RST08:    DS   2   
5FD2                RST10:    DS   2   
5FD4                RST18:    DS   2   
5FD6                RST20:    DS   2   
5FD8                RST28:    DS   2   
5FDA                RST30:    DS   2   ; 
5FDC                BAUD:     DS   2   ; 
5FDE                INTVEC:   DS   2   ; 
5FE0                NMIVEC:   DS   2   ; 
5FE2                GETCVEC:   DS   2   ; 
5FE4                PUTCVEC:   DS   2   ; 
5FE6                SYSVARS:      
5FE6                             ; initialised sys variables (preserved)
5FE6                VTIBPTR:   DS   2   
5FE8                VBUFPTR:   DS   2   
5FEA                VHEAPPTR:   DS   2   
5FEC                VRECURPTR:   DS   2   
5FEE                VDATAWIDTH:   DS   1   
5FEF                VNUMBASE:   DS   1   
5FF0                VHEXPREFIX:   DS   1   
5FF1                VECHO:    DS   1   
5FF2                VSTRMODE:   DS   1   
5FF3                          DS   1   
5FF4                          DS   1   
5FF5                          DS   1   
5FF6                          DS   1   
5FF7                          DS   1   
5FF8                             ; uninitialised sys variables (preserved)
5FF8                VPOINTER:   DS   2   ; 
5FFA                VREMAIN:   DS   2   ; 
5FFC                VSAVEDIP:   DS   2   ; 
5FFE                VSAVEDSP:   DS   2   ; 
6000                VSAVEDNEXT:   DS   2   ; 
6002                VSAVEDBP:   DS   2   ; 
6004                             ; uninitialised sys variables (unpreserved)
6004                VTEMP1:   DS   2   ; 
6006                VTEMP2:   DS   2   ; 
6008                VTEMP3:   DS   2   ; 
600A                          DS   2   ; 
600C                TBPTR:    DS   2   ; reserved for tests
600E                TITLEBUF:   DS   20   
6022                HEAP:        
6022                             ; FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
6022                             ; db "{"
6022                             ; db    "[%b /tru] %L="                 ; init mutable L [index active]
6022                             ; db    "\\kt{"
6022                             ; db      "0%t!=/ret"                  ; break if type != 0
6022                             ; db      "\\dt:a{"                   ; return talkback to receive data
6022                             ; db        "%L1;!/ret"                ; if not active don't send
6022                             ; db        "%L0; %a="                ; store current index in A
6022                             ; db        "%s %L0; +="              ; inc value of index by step
6022                             ; db        "1%t!=/ret"                ; break if type != 0
6022                             ; db        "%a %e <"                 ; ifte: in range?
6022                             ; db          "{%a 1}{/fal %L1;= 0 2}"  ; ifte: /tru index, /fal active = false, quit
6022                             ; db          "? %k/rc"              ; ifte: send to sink note: /rc recur
6022                             ; db      "} 0 %k^"                   ; init sink
6022                             ; db    "}"
6022                             ; db "}"
6022                             ; db 0
6022                             ; FUNC map, 0, "sf"                   ; map
6022                             ; db "{"
6022                             ; db    "\\kt{"
6022                             ; db      "0%t!=/ret"                  ; break if type != 0
6022                             ; db      "\\dt{"                     ; call source with tb
6022                             ; db        "1%t=="                   ; ifte: type == 1 ?
6022                             ; db        "{%d %f^}{%d}"            ; ifte: func(data) or data
6022                             ; db        "? %t %k^"               ; ifte: send to sink
6022                             ; db      "} 0 %s^"
6022                             ; db    "}"
6022                             ; db "}"
6022                             ; db 0
6022                             ; ; /ft filter
6022                             ; ; src pred -- src1
6022                             ; FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
6022                             ; db "{"
6022                             ; db    "[0]%T="
6022                             ; db    "\\kt{"                       ; return talkback to receive data
6022                             ; db      "\\dt{"                     ; call source with tb
6022                             ; db        "["
6022                             ; db          "{%d %T0;= /tru}"         ; case 0: store talkback in T[0], return true
6022                             ; db          "{%d %p^}"              ; case 1: return boolean based on predicate
6022                             ; db          "{/tru}"                  ; case 2: return true
6022                             ; db        "]%t;^"                   ; select on %t
6022                             ; db        "{%d %t %k^}{0 1 %T0;^}"  ; ifte: true send d to sink, false send 1 to talkback
6022                             ; db        "?"
6022                             ; db      "} 0 %s^"
6022                             ; db    "}"
6022                             ; db "}"
6022                             ; db 0
6022                             ; FUNC forEach, 1, "spT"
6022                             ; db "{"
6022                             ; db    "[0]%T="
6022                             ; db    "\\dt{"                       ; return talkback to receive data ; $56AA
6022                             ; db      "2%t==/ret"                    ; if type == 2 skip
6022                             ; db      "0%t=="                   ; ifte: type = 0 ?
6022                             ; db      "{%d %T0;=}{%d %p^}"      ; ifte: 0: store talkback, 1: send data
6022                             ; db      "?"                      ; ifte:
6022                             ; db      "0 1 %T0;^"               ; 0 or 1: get next src data item
6022                             ; db    "} 0 %s^"
6022                             ; db "}"
6022                             ; db 0
6022                             ; FUNC fold, 1, "sirA"                       ; src, init, reducer
6022                             ; db "{"                                  ; reducer: \\da00bbLi4u
6022                             ; db    "[%i]%A="
6022                             ; db    "\\kt{"                         ; return talkback to receive data
6022                             ; db      "\\dt{"                         ; call source with tb
6022                             ; db        "1%t=="                       ; ifte: type == 1 ?
6022                             ; db        "{ %d %A0; %r^ %A0;= %A0;}{%d}"      ; ifte: reduce -> acc, acc or data
6022                             ; db        "? %t %k^"                    ; ifte: send to sink
6022                             ; db      "} 0 %s^"
6022                             ; db    "}"
6022                             ; db "}"
6022                             ; db 0
6022                             ; 


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 1553 IN MAIN.asm
                    > USED AT LINE 2598 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 2437 IN MAIN.asm
                    > USED AT LINE 2620 IN MAIN.asm
                    > USED AT LINE 2704 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 161 IN MAIN.asm
                    > USED AT LINE 1273 IN MAIN.asm
                    > USED AT LINE 1341 IN MAIN.asm
                    > USED AT LINE 1970 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 162 IN MAIN.asm
                    > USED AT LINE 1279 IN MAIN.asm
                    > USED AT LINE 1338 IN MAIN.asm
                    > USED AT LINE 1975 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1535 IN MAIN.asm
                    > USED AT LINE 1537 IN MAIN.asm
                    > USED AT LINE 1539 IN MAIN.asm
                    > USED AT LINE 2601 IN MAIN.asm
                    > USED AT LINE 2669 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 2155 IN MAIN.asm
                    > USED AT LINE 2458 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2606 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2608 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2539 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 173 IN MAIN.asm
                    > USED AT LINE 2514 IN MAIN.asm
                    > USED AT LINE 2533 IN MAIN.asm
COLON_:             0204 DEFINED AT LINE 178 IN MAIN.asm
COMMA_:             0206 DEFINED AT LINE 181 IN MAIN.asm
DOLLAR_:            0209 DEFINED AT LINE 184 IN MAIN.asm
DQUOTE_:            020C DEFINED AT LINE 187 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 188 IN MAIN.asm
DOT_:               020F DEFINED AT LINE 191 IN MAIN.asm
PERCENT_:           0212 DEFINED AT LINE 194 IN MAIN.asm
QUESTION_:          0215 DEFINED AT LINE 197 IN MAIN.asm
LPAREN_:            0218 DEFINED AT LINE 200 IN MAIN.asm
SLASH_:             021B DEFINED AT LINE 203 IN MAIN.asm
NUM_:               021E DEFINED AT LINE 206 IN MAIN.asm
BANG_:              0221 DEFINED AT LINE 209 IN MAIN.asm
BANG:               0221 DEFINED AT LINE 210 IN MAIN.asm
NOT:                022C DEFINED AT LINE 218 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
EQ_:                0232 DEFINED AT LINE 222 IN MAIN.asm
EQ:                 0232 DEFINED AT LINE 223 IN MAIN.asm
EQ0:                023C DEFINED AT LINE 230 IN MAIN.asm
                    > USED AT LINE 227 IN MAIN.asm
EQ1:                023D DEFINED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
GT_:                0241 DEFINED AT LINE 236 IN MAIN.asm
GT:                 0241 DEFINED AT LINE 237 IN MAIN.asm
LT_:                024C DEFINED AT LINE 245 IN MAIN.asm
LT:                 024C DEFINED AT LINE 246 IN MAIN.asm
LT1:                0255 DEFINED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
HASH_:              025E DEFINED AT LINE 261 IN MAIN.asm
SEMICOLON_:         025E DEFINED AT LINE 262 IN MAIN.asm
SEMICOLON:          025E DEFINED AT LINE 263 IN MAIN.asm
ARRAYINDEX:         025E DEFINED AT LINE 264 IN MAIN.asm
ARRAYINDEX0:        0266 DEFINED AT LINE 270 IN MAIN.asm
ARRAYINDEX1:        0267 DEFINED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
RPAREN_:            026B DEFINED AT LINE 277 IN MAIN.asm
RPAREN:             026B DEFINED AT LINE 279 IN MAIN.asm
AMPER_:             0273 DEFINED AT LINE 287 IN MAIN.asm
AMPER:              0273 DEFINED AT LINE 288 IN MAIN.asm
AND:                0273 DEFINED AT LINE 289 IN MAIN.asm
MINUS_:             027D DEFINED AT LINE 307 IN MAIN.asm
MINUS:              027D DEFINED AT LINE 308 IN MAIN.asm
SUB:                0289 DEFINED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
SUB1:               0293 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 320 IN MAIN.asm
SUB2:               029A DEFINED AT LINE 329 IN MAIN.asm
                    > USED AT LINE 326 IN MAIN.asm
SUB3:               029D DEFINED AT LINE 332 IN MAIN.asm
                    > USED AT LINE 1028 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
                    > USED AT LINE 2055 IN MAIN.asm
STAR_:              02A5 DEFINED AT LINE 338 IN MAIN.asm
STAR:               02A5 DEFINED AT LINE 339 IN MAIN.asm
MUL:                02AD DEFINED AT LINE 345 IN MAIN.asm
MUL2:               02AF DEFINED AT LINE 348 IN MAIN.asm
MUL3:               02B7 DEFINED AT LINE 353 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
PLUS_:              02C9 DEFINED AT LINE 368 IN MAIN.asm
PLUS:               02C9 DEFINED AT LINE 369 IN MAIN.asm
ADD:                02C9 DEFINED AT LINE 370 IN MAIN.asm
ADD1:               02D4 DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
ADD3:               02D8 DEFINED AT LINE 383 IN MAIN.asm
                    > USED AT LINE 298 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 1611 IN MAIN.asm
ADD4:               02E2 DEFINED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 387 IN MAIN.asm
UPCASE_:            02E5 DEFINED AT LINE 395 IN MAIN.asm
UPCASE:             02E5 DEFINED AT LINE 396 IN MAIN.asm
LOWCASE_:           0300 DEFINED AT LINE 405 IN MAIN.asm
LOWCASE:            0300 DEFINED AT LINE 406 IN MAIN.asm
IDENT1:             0305 DEFINED AT LINE 410 IN MAIN.asm
                    > USED AT LINE 399 IN MAIN.asm
LBRACK_:            0312 DEFINED AT LINE 422 IN MAIN.asm
LBRACK:             0312 DEFINED AT LINE 423 IN MAIN.asm
ARRAYSTART:         0312 DEFINED AT LINE 424 IN MAIN.asm
BACKSLASH_:         032E DEFINED AT LINE 439 IN MAIN.asm
BACKSLASH:          032E DEFINED AT LINE 440 IN MAIN.asm
LAMBDA:             032E DEFINED AT LINE 441 IN MAIN.asm
LAMBDA1:            0333 DEFINED AT LINE 444 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
LAMBDA2:            0343 DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
RBRACK_:            034F DEFINED AT LINE 461 IN MAIN.asm
RBRACK:             034F DEFINED AT LINE 462 IN MAIN.asm
ARRAYEND:           034F DEFINED AT LINE 463 IN MAIN.asm
ARRAYEND1:          036B DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 497 IN MAIN.asm
ARRAYEND2:          037B DEFINED AT LINE 490 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
ARRAYEND3:          0380 DEFINED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 479 IN MAIN.asm
CARET_:             039F DEFINED AT LINE 515 IN MAIN.asm
CARET:              039F DEFINED AT LINE 519 IN MAIN.asm
GO:                 039F DEFINED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03A0 DEFINED AT LINE 522 IN MAIN.asm
                    > USED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1646 IN MAIN.asm
                    > USED AT LINE 1648 IN MAIN.asm
                    > USED AT LINE 1818 IN MAIN.asm
GO2:                03A6 DEFINED AT LINE 527 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
GRAVE_:             03B5 DEFINED AT LINE 536 IN MAIN.asm
GRAVE:              03B5 DEFINED AT LINE 537 IN MAIN.asm
PRINTLITERAL:       03B5 DEFINED AT LINE 538 IN MAIN.asm
PRINTLITERAL0:      03BC DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
PRINTLITERAL1:      03BF DEFINED AT LINE 546 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
LBRACE_:            03CB DEFINED AT LINE 553 IN MAIN.asm
LBRACE:             03CB DEFINED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
PIPE_:              03D0 DEFINED AT LINE 560 IN MAIN.asm
PIPE:               03D0 DEFINED AT LINE 561 IN MAIN.asm
OR:                 03D0 DEFINED AT LINE 562 IN MAIN.asm
RBRACE_:            03DB DEFINED AT LINE 573 IN MAIN.asm
TILDE_:             03DE DEFINED AT LINE 577 IN MAIN.asm
UNDERSCORE_:        03E1 DEFINED AT LINE 580 IN MAIN.asm
CHAR:               03E1 DEFINED AT LINE 581 IN MAIN.asm
AT_:                03E9 DEFINED AT LINE 589 IN MAIN.asm
AT:                 03E9 DEFINED AT LINE 590 IN MAIN.asm
ADDR:               03E9 DEFINED AT LINE 591 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 602 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 603 IN MAIN.asm
PRINTCHAR:          0413 DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
PRINTSTRING:        0422 DEFINED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
PRINTSTRING0:       0429 DEFINED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
PRINTSTRING1:       042C DEFINED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 630 IN MAIN.asm
PRINTNUMBER:        0437 DEFINED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
PRINTDEC:           0442 DEFINED AT LINE 652 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
PRINTDEC1:          0450 DEFINED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 658 IN MAIN.asm
PRINTDEC2:          045F DEFINED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 661 IN MAIN.asm
PRINTDEC3:          046F DEFINED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 674 IN MAIN.asm
PRINTDEC4:          048F DEFINED AT LINE 700 IN MAIN.asm
                    > USED AT LINE 689 IN MAIN.asm
                    > USED AT LINE 691 IN MAIN.asm
                    > USED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
PRINTDEC5:          0491 DEFINED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
PRINTDEC6:          04A1 DEFINED AT LINE 714 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
PRINTDEC7:          04A2 DEFINED AT LINE 716 IN MAIN.asm
                    > USED AT LINE 713 IN MAIN.asm
PRINTHEX:           04A8 DEFINED AT LINE 727 IN MAIN.asm
                    > USED AT LINE 647 IN MAIN.asm
PRINTHEX1:          04B4 DEFINED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
PRINTHEX2:          04BF DEFINED AT LINE 741 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
PRINTHEX3:          04CE DEFINED AT LINE 750 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
PRINTHEX4:          04D7 DEFINED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 774 IN MAIN.asm
COMMAND_A_:         0526 DEFINED AT LINE 810 IN MAIN.asm
COMMAND_B_:         0545 DEFINED AT LINE 827 IN MAIN.asm
COMMAND_D_:         0554 DEFINED AT LINE 836 IN MAIN.asm
COMMAND_E:          055F DEFINED AT LINE 843 IN MAIN.asm
COMMAND_F_:         056E DEFINED AT LINE 852 IN MAIN.asm
COMMAND_H_:         05A1 DEFINED AT LINE 880 IN MAIN.asm
COMMAND_I_:         05AC DEFINED AT LINE 887 IN MAIN.asm
COMMAND_M_:         05B7 DEFINED AT LINE 894 IN MAIN.asm
COMAND_O_:          05CA DEFINED AT LINE 905 IN MAIN.asm
COMMAND_P_:         05D5 DEFINED AT LINE 912 IN MAIN.asm
COMMAND_R_:         05DC DEFINED AT LINE 917 IN MAIN.asm
COMMAND_S_:         05DE DEFINED AT LINE 920 IN MAIN.asm
COMMAND_T_:         05E0 DEFINED AT LINE 923 IN MAIN.asm
COMMAND_V_:         05E2 DEFINED AT LINE 926 IN MAIN.asm
COMMAND_W_:         05E4 DEFINED AT LINE 929 IN MAIN.asm
COMMAND_X_:         05E6 DEFINED AT LINE 932 IN MAIN.asm
COMMAND_DEFAULT_:   05E8 DEFINED AT LINE 935 IN MAIN.asm
COMMAND_R:          05EB DEFINED AT LINE 942 IN MAIN.asm
                    > USED AT LINE 918 IN MAIN.asm
COMMAND_S:          0602 DEFINED AT LINE 955 IN MAIN.asm
                    > USED AT LINE 921 IN MAIN.asm
COMMAND_T:          0621 DEFINED AT LINE 972 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
COMMAND_V:          062C DEFINED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 927 IN MAIN.asm
COMMAND_W:          063B DEFINED AT LINE 988 IN MAIN.asm
                    > USED AT LINE 930 IN MAIN.asm
COMMAND_X:          064A DEFINED AT LINE 997 IN MAIN.asm
                    > USED AT LINE 933 IN MAIN.asm
COMMAND_DEFAULT:    0655 DEFINED AT LINE 1004 IN MAIN.asm
                    > USED AT LINE 936 IN MAIN.asm
DIV:                065C DEFINED AT LINE 1010 IN MAIN.asm
                    > USED AT LINE 1007 IN MAIN.asm
DIV2:               0666 DEFINED AT LINE 1019 IN MAIN.asm
                    > USED AT LINE 1016 IN MAIN.asm
ABSOLUTE:           0677 DEFINED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 813 IN MAIN.asm
ABSOLUTE1:          0682 DEFINED AT LINE 1042 IN MAIN.asm
                    > USED AT LINE 1035 IN MAIN.asm
ADDROF:             0685 DEFINED AT LINE 1048 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
ADDROF2:            068B DEFINED AT LINE 1053 IN MAIN.asm
ARRAYLENGTH:        068D DEFINED AT LINE 1058 IN MAIN.asm
                    > USED AT LINE 821 IN MAIN.asm
                    > USED AT LINE 44
ARRAYLENGTH1:       0693 DEFINED AT LINE 1065 IN MAIN.asm
                    > USED AT LINE 1076 IN MAIN.asm
                    > USED AT LINE 1079 IN MAIN.asm
ARRAYSIZE:          0696 DEFINED AT LINE 1071 IN MAIN.asm
                    > USED AT LINE 823 IN MAIN.asm
PERFORMM_1548S1072: 069D DEFINED AT LINE 45
                    > USED AT LINE 43
WHILE:              06AA DEFINED AT LINE 1084 IN MAIN.asm
                    > USED AT LINE 991 IN MAIN.asm
WHILE1:             06B1 DEFINED AT LINE 1090 IN MAIN.asm
                    > USED AT LINE 1088 IN MAIN.asm
BYTEMODE:           06C4 DEFINED AT LINE 1102 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
BYTEMODE1:          06C6 DEFINED AT LINE 1104 IN MAIN.asm
                    > USED AT LINE 1364 IN MAIN.asm
COMMENT:            06CB DEFINED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
                    > USED AT LINE 1113 IN MAIN.asm
DECBASE:            06D4 DEFINED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
DECBASE1:           06D6 DEFINED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 1132 IN MAIN.asm
ECHO:               06DB DEFINED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
HEXBASE:            06E1 DEFINED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 883 IN MAIN.asm
ERROR1:             06E6 DEFINED AT LINE 1134 IN MAIN.asm
                    > USED AT LINE 825 IN MAIN.asm
                    > USED AT LINE 834 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 878 IN MAIN.asm
                    > USED AT LINE 885 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 903 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
                    > USED AT LINE 915 IN MAIN.asm
                    > USED AT LINE 953 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
                    > USED AT LINE 977 IN MAIN.asm
                    > USED AT LINE 986 IN MAIN.asm
                    > USED AT LINE 995 IN MAIN.asm
                    > USED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 2369 IN MAIN.asm
INPUT:              06EC DEFINED AT LINE 1140 IN MAIN.asm
                    > USED AT LINE 890 IN MAIN.asm
MEMALLOCATE:        06F7 DEFINED AT LINE 1152 IN MAIN.asm
                    > USED AT LINE 819 IN MAIN.asm
MEMFREE:            06F9 DEFINED AT LINE 1157 IN MAIN.asm
                    > USED AT LINE 861 IN MAIN.asm
MEMFREE1:           06FA DEFINED AT LINE 1159 IN MAIN.asm
                    > USED AT LINE 1169 IN MAIN.asm
MEMFREEARRAY:       06FF DEFINED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 863 IN MAIN.asm
MAXIMUM:            0704 DEFINED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 899 IN MAIN.asm
MAXIMUM1:           070E DEFINED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 1179 IN MAIN.asm
MINIMUM:            0710 DEFINED AT LINE 1187 IN MAIN.asm
                    > USED AT LINE 901 IN MAIN.asm
MINIMUM1:           071A DEFINED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
OUTPUT:             071C DEFINED AT LINE 1201 IN MAIN.asm
                    > USED AT LINE 908 IN MAIN.asm
RETURN:             0725 DEFINED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
RETURN1:            072C DEFINED AT LINE 1218 IN MAIN.asm
                    > USED AT LINE 1216 IN MAIN.asm
RECUR:              072F DEFINED AT LINE 1221 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
REMAIN:             0735 DEFINED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
SELECT:             073B DEFINED AT LINE 1233 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
SELECT1:            0746 DEFINED AT LINE 1244 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
SELECT1A:           0757 DEFINED AT LINE 1258 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
SELECT1B:           0758 DEFINED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
SELECT2:            075B DEFINED AT LINE 1264 IN MAIN.asm
                    > USED AT LINE 1243 IN MAIN.asm
STRINGBEGIN:        0762 DEFINED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 968 IN MAIN.asm
STRINGEND:          076A DEFINED AT LINE 1278 IN MAIN.asm
                    > USED AT LINE 848 IN MAIN.asm
STRINGEND1:         0791 DEFINED AT LINE 1296 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
STRINGLENGTH:       0799 DEFINED AT LINE 1301 IN MAIN.asm
                    > USED AT LINE 964 IN MAIN.asm
                    > USED AT LINE 44
STRINGLENGTH1:      079F DEFINED AT LINE 1305 IN MAIN.asm
                    > USED AT LINE 1311 IN MAIN.asm
STRINGLENGTH2:      07A1 DEFINED AT LINE 1308 IN MAIN.asm
                    > USED AT LINE 1304 IN MAIN.asm
STRINGLENGTH3:      07A5 DEFINED AT LINE 1312 IN MAIN.asm
                    > USED AT LINE 1320 IN MAIN.asm
STRINGSIZE:         07A8 DEFINED AT LINE 1316 IN MAIN.asm
                    > USED AT LINE 966 IN MAIN.asm
PERFORMM_1771S1317: 07AF DEFINED AT LINE 45
                    > USED AT LINE 43
STRINGCOMPARE:      07B4 DEFINED AT LINE 1325 IN MAIN.asm
                    > USED AT LINE 958 IN MAIN.asm
STRINGCOMPARE1:     07B6 DEFINED AT LINE 1328 IN MAIN.asm
                    > USED AT LINE 1336 IN MAIN.asm
STRINGCOMPARE2:     07C1 DEFINED AT LINE 1337 IN MAIN.asm
                    > USED AT LINE 1331 IN MAIN.asm
STRINGCOMPARE3:     07C6 DEFINED AT LINE 1340 IN MAIN.asm
                    > USED AT LINE 1333 IN MAIN.asm
STRINGCOMPARE4:     07C9 DEFINED AT LINE 1342 IN MAIN.asm
                    > USED AT LINE 1339 IN MAIN.asm
VARIABLES:          07CC DEFINED AT LINE 1348 IN MAIN.asm
VOID:               07D2 DEFINED AT LINE 1354 IN MAIN.asm
                    > USED AT LINE 984 IN MAIN.asm
WORDMODE:           07DA DEFINED AT LINE 1362 IN MAIN.asm
                    > USED AT LINE 993 IN MAIN.asm
XOR:                07DF DEFINED AT LINE 1367 IN MAIN.asm
                    > USED AT LINE 1000 IN MAIN.asm
XOR1:               07E0 DEFINED AT LINE 1369 IN MAIN.asm
RANGESRC:           07EA DEFINED AT LINE 32
                    > USED AT LINE 951 IN MAIN.asm
RANGESRCM_1832S1385: 07F9 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          0883 DEFINED AT LINE 32
                    > USED AT LINE 817 IN MAIN.asm
ARRAYITERM_1851S1405: 0890 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         090A DEFINED AT LINE 32
                    > USED AT LINE 962 IN MAIN.asm
STRINGITERM_1870S1425: 0917 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                099A DEFINED AT LINE 32
                    > USED AT LINE 897 IN MAIN.asm
MAPM_1890S1447:     09A7 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             09DC DEFINED AT LINE 32
                    > USED AT LINE 868 IN MAIN.asm
FILTERM_1904S1462:  09EA DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               0A3D DEFINED AT LINE 32
                    > USED AT LINE 857 IN MAIN.asm
FOLDM_1923S1482:    0A4C DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            0A8E DEFINED AT LINE 32
                    > USED AT LINE 859 IN MAIN.asm
FOREACHM_1937S1497: 0A9C DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0ADA DEFINED AT LINE 32
                    > USED AT LINE 866 IN MAIN.asm
FUNCSRCM_1951S1512: 0AE6 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0B15 DEFINED AT LINE 32
                    > USED AT LINE 606 IN MAIN.asm
PRINTARRAYM_1961S1523: 0B23 DEFINED AT LINE 39
                    > USED AT LINE 35
COMMA:              0B5E DEFINED AT LINE 1533 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
READCHAR:           0B6D DEFINED AT LINE 1542 IN MAIN.asm
                    > USED AT LINE 1536 IN MAIN.asm
READSTRING:         0B76 DEFINED AT LINE 1549 IN MAIN.asm
                    > USED AT LINE 1538 IN MAIN.asm
                    > USED AT LINE 44
READSTRING1:        0B7B DEFINED AT LINE 1552 IN MAIN.asm
                    > USED AT LINE 1560 IN MAIN.asm
                    > USED AT LINE 1562 IN MAIN.asm
READSTRING2:        0B8F DEFINED AT LINE 1563 IN MAIN.asm
                    > USED AT LINE 1555 IN MAIN.asm
READNUMBER:         0B98 DEFINED AT LINE 1570 IN MAIN.asm
                    > USED AT LINE 1540 IN MAIN.asm
PERFORMM_2005S1572: 0BA1 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER1:        0BBF DEFINED AT LINE 1588 IN MAIN.asm
                    > USED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 1585 IN MAIN.asm
PERFORMM_2022S1589: 0BC6 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER2:        0BC9 DEFINED AT LINE 1592 IN MAIN.asm
                    > USED AT LINE 1581 IN MAIN.asm
PERFORMM_2026S1593: 0BD0 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER3:        0BD1 DEFINED AT LINE 1595 IN MAIN.asm
                    > USED AT LINE 1587 IN MAIN.asm
                    > USED AT LINE 1591 IN MAIN.asm
TILDE:              0BD7 DEFINED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
INVERT:             0BD7 DEFINED AT LINE 1603 IN MAIN.asm
DOLLAR:             0BE1 DEFINED AT LINE 1614 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
HEXNUM:             0BE1 DEFINED AT LINE 1615 IN MAIN.asm
                    > USED AT LINE 44
HEXNUM1:            0BE4 DEFINED AT LINE 1617 IN MAIN.asm
                    > USED AT LINE 1634 IN MAIN.asm
HEXNUM2:            0BEC DEFINED AT LINE 1623 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
QUESTION:           0BFE DEFINED AT LINE 1638 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
IF:                 0BFE DEFINED AT LINE 1639 IN MAIN.asm
QUOTE:              0C0B DEFINED AT LINE 1652 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
STRING:             0C0B DEFINED AT LINE 1653 IN MAIN.asm
STRING1:            0C14 DEFINED AT LINE 1660 IN MAIN.asm
                    > USED AT LINE 1668 IN MAIN.asm
STRING2:            0C17 DEFINED AT LINE 1664 IN MAIN.asm
                    > USED AT LINE 1659 IN MAIN.asm
STRING3:            0C1D DEFINED AT LINE 1669 IN MAIN.asm
                    > USED AT LINE 1667 IN MAIN.asm
PERCENT:            0C25 DEFINED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
ARG:                0C25 DEFINED AT LINE 1680 IN MAIN.asm
ARG0:               0C41 DEFINED AT LINE 1699 IN MAIN.asm
                    > USED AT LINE 1705 IN MAIN.asm
ARG0A:              0C4A DEFINED AT LINE 1707 IN MAIN.asm
                    > USED AT LINE 1686 IN MAIN.asm
                    > USED AT LINE 1691 IN MAIN.asm
ARG1:               0C4F DEFINED AT LINE 1710 IN MAIN.asm
                    > USED AT LINE 1703 IN MAIN.asm
ARG1A:              0C57 DEFINED AT LINE 1717 IN MAIN.asm
                    > USED AT LINE 1709 IN MAIN.asm
NUM:                0C5A DEFINED AT LINE 1722 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
                    > USED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 44
NUM0:               0C63 DEFINED AT LINE 1728 IN MAIN.asm
                    > USED AT LINE 1726 IN MAIN.asm
NUM1:               0C64 DEFINED AT LINE 1730 IN MAIN.asm
                    > USED AT LINE 1747 IN MAIN.asm
NUM2:               0C7C DEFINED AT LINE 1748 IN MAIN.asm
                    > USED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
                    > USED AT LINE 1735 IN MAIN.asm
NUM3:               0C87 DEFINED AT LINE 1756 IN MAIN.asm
                    > USED AT LINE 1751 IN MAIN.asm
RBRACE:             0C8A DEFINED AT LINE 1761 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
BLOCKEND:           0C8A DEFINED AT LINE 1762 IN MAIN.asm
                    > USED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
BLOCKEND1:          0CBC DEFINED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 1777 IN MAIN.asm
BLOCKEND2:          0CC8 DEFINED AT LINE 1791 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
BLOCKEND3:          0CDA DEFINED AT LINE 1805 IN MAIN.asm
                    > USED AT LINE 1797 IN MAIN.asm
BLOCKEND4:          0CEE DEFINED AT LINE 1815 IN MAIN.asm
                    > USED AT LINE 1813 IN MAIN.asm
GOBLOCK:            0CF7 DEFINED AT LINE 1820 IN MAIN.asm
                    > USED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
GOBLOCK2:           0D1C DEFINED AT LINE 1837 IN MAIN.asm
                    > USED AT LINE 1918 IN MAIN.asm
GOBLOCK3:           0D26 DEFINED AT LINE 1843 IN MAIN.asm
GOFUNC:             0D2A DEFINED AT LINE 1847 IN MAIN.asm
                    > USED AT LINE 532 IN MAIN.asm
GOFUNC1:            0D43 DEFINED AT LINE 1866 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
GOFUNC2:            0D49 DEFINED AT LINE 1873 IN MAIN.asm
                    > USED AT LINE 1865 IN MAIN.asm
GOFUNC3:            0D54 DEFINED AT LINE 1879 IN MAIN.asm
                    > USED AT LINE 1855 IN MAIN.asm
GOFUNC4:            0D6C DEFINED AT LINE 1896 IN MAIN.asm
                    > USED AT LINE 1893 IN MAIN.asm
GOFUNC5:            0D6F DEFINED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 1905 IN MAIN.asm
GOFUNC6:            0D72 DEFINED AT LINE 1903 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
GOFUNC7:            0D75 DEFINED AT LINE 1906 IN MAIN.asm
GOFUNC8:            0D79 DEFINED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1831 IN MAIN.asm
                    > USED AT LINE 1895 IN MAIN.asm
ASSIGN:             0D84 DEFINED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
ASSIGN0:            0D86 DEFINED AT LINE 1925 IN MAIN.asm
                    > USED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
ASSIGN1:            0D8A DEFINED AT LINE 1928 IN MAIN.asm
ASSIGN2:            0D93 DEFINED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 1932 IN MAIN.asm
EQUALS:             0D95 DEFINED AT LINE 1940 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
NOTEQUALS:          0D9C DEFINED AT LINE 1946 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
LESSTHANEQ:         0DA3 DEFINED AT LINE 1954 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
LESSTHAN:           0DA8 DEFINED AT LINE 1961 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN1:          0DAD DEFINED AT LINE 1966 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
TRUE1:              0DB0 DEFINED AT LINE 1969 IN MAIN.asm
                    > USED AT LINE 975 IN MAIN.asm
                    > USED AT LINE 1943 IN MAIN.asm
                    > USED AT LINE 1949 IN MAIN.asm
NULL1:              0DB6 DEFINED AT LINE 1973 IN MAIN.asm
FALSE1:             0DB6 DEFINED AT LINE 1974 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
                    > USED AT LINE 1950 IN MAIN.asm
                    > USED AT LINE 1964 IN MAIN.asm
                    > USED AT LINE 1967 IN MAIN.asm
SPREAD:             0DBC DEFINED AT LINE 1979 IN MAIN.asm
                    > USED AT LINE 343 IN MAIN.asm
SPREAD1:            0DC9 DEFINED AT LINE 1989 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
SPREAD2:            0DD4 DEFINED AT LINE 1998 IN MAIN.asm
                    > USED AT LINE 1995 IN MAIN.asm
SPREAD3:            0DD6 DEFINED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 1988 IN MAIN.asm
SHIFTLEFT:          0DE0 DEFINED AT LINE 2011 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SHIFTLEFT2:         0DEA DEFINED AT LINE 2020 IN MAIN.asm
                    > USED AT LINE 2017 IN MAIN.asm
SHIFTLEFT3:         0DF2 DEFINED AT LINE 2025 IN MAIN.asm
                    > USED AT LINE 2028 IN MAIN.asm
SHIFTLEFT4:         0DF3 DEFINED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 2024 IN MAIN.asm
SHIFTRIGHT:         0DFC DEFINED AT LINE 2035 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
SHIFTRIGHT2:        0E06 DEFINED AT LINE 2044 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
SHIFTRIGHT3:        0E0E DEFINED AT LINE 2049 IN MAIN.asm
                    > USED AT LINE 2053 IN MAIN.asm
SHIFTRIGHT4:        0E12 DEFINED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2048 IN MAIN.asm
DIVIDE:             0E1B DEFINED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 1023 IN MAIN.asm
DIVIDE1:            0E20 DEFINED AT LINE 2064 IN MAIN.asm
                    > USED AT LINE 2076 IN MAIN.asm
DIVIDE2:            0E2D DEFINED AT LINE 2072 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
DIVIDE3:            0E2E DEFINED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 2071 IN MAIN.asm
DOTNEXT:            0E34 DEFINED AT LINE 2080 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
DOTNEXT1:           0E3C DEFINED AT LINE 2085 IN MAIN.asm
                    > USED AT LINE 2083 IN MAIN.asm
PARSEARGS:          0E4E DEFINED AT LINE 2096 IN MAIN.asm
                    > USED AT LINE 443 IN MAIN.asm
PARSEARGS1:         0E58 DEFINED AT LINE 2103 IN MAIN.asm
                    > USED AT LINE 2124 IN MAIN.asm
PARSEARGS1A:        0E60 DEFINED AT LINE 2109 IN MAIN.asm
                    > USED AT LINE 2106 IN MAIN.asm
PARSEARGS2:         0E68 DEFINED AT LINE 2114 IN MAIN.asm
PARSEARGS3:         0E70 DEFINED AT LINE 2122 IN MAIN.asm
                    > USED AT LINE 2108 IN MAIN.asm
                    > USED AT LINE 2120 IN MAIN.asm
PARSEARGS4:         0E73 DEFINED AT LINE 2125 IN MAIN.asm
                    > USED AT LINE 2111 IN MAIN.asm
                    > USED AT LINE 2113 IN MAIN.asm
PARSEARGS5:         0E79 DEFINED AT LINE 2131 IN MAIN.asm
                    > USED AT LINE 2129 IN MAIN.asm
PARSEBLOCK:         0E84 DEFINED AT LINE 2144 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
PARSEBLOCK1:        0E88 DEFINED AT LINE 2148 IN MAIN.asm
                    > USED AT LINE 2152 IN MAIN.asm
                    > USED AT LINE 2160 IN MAIN.asm
                    > USED AT LINE 2166 IN MAIN.asm
                    > USED AT LINE 2180 IN MAIN.asm
                    > USED AT LINE 2183 IN MAIN.asm
                    > USED AT LINE 2186 IN MAIN.asm
PARSEBLOCK2:        0EA1 DEFINED AT LINE 2162 IN MAIN.asm
                    > USED AT LINE 2154 IN MAIN.asm
                    > USED AT LINE 2156 IN MAIN.asm
                    > USED AT LINE 2158 IN MAIN.asm
PARSEBLOCK3:        0EA7 DEFINED AT LINE 2167 IN MAIN.asm
                    > USED AT LINE 2161 IN MAIN.asm
PARSEBLOCK4:        0EC1 DEFINED AT LINE 2181 IN MAIN.asm
                    > USED AT LINE 2169 IN MAIN.asm
                    > USED AT LINE 2171 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
PARSEBLOCK5:        0EC4 DEFINED AT LINE 2184 IN MAIN.asm
                    > USED AT LINE 2175 IN MAIN.asm
                    > USED AT LINE 2177 IN MAIN.asm
                    > USED AT LINE 2179 IN MAIN.asm
PARSEBLOCK6:        0EEF DEFINED AT LINE 2205 IN MAIN.asm
                    > USED AT LINE 2192 IN MAIN.asm
CREATEFUNC:         0EF3 DEFINED AT LINE 2213 IN MAIN.asm
                    > USED AT LINE 455 IN MAIN.asm
CREATEFUNC0:        0F12 DEFINED AT LINE 2227 IN MAIN.asm
                    > USED AT LINE 2223 IN MAIN.asm
CREATEFUNC1:        0F2A DEFINED AT LINE 2246 IN MAIN.asm
                    > USED AT LINE 2242 IN MAIN.asm
CREATEFUNC2:        0F3D DEFINED AT LINE 2259 IN MAIN.asm
                    > USED AT LINE 2255 IN MAIN.asm
CREATEFUNC2A:       0F5C DEFINED AT LINE 2285 IN MAIN.asm
                    > USED AT LINE 2272 IN MAIN.asm
CREATEFUNC3:        0F6B DEFINED AT LINE 2297 IN MAIN.asm
                    > USED AT LINE 2307 IN MAIN.asm
CREATEFUNC4:        0F76 DEFINED AT LINE 2308 IN MAIN.asm
CREATEFUNC5:        0F77 DEFINED AT LINE 2310 IN MAIN.asm
                    > USED AT LINE 2226 IN MAIN.asm
VARIABLE:           0F95 DEFINED AT LINE 2337 IN MAIN.asm
                    > USED AT LINE 274 IN MAIN.asm
                    > USED AT LINE 594 IN MAIN.asm
CONSTANT:           0FA4 DEFINED AT LINE 2347 IN MAIN.asm
                    > USED AT LINE 1350 IN MAIN.asm
                    > USED AT LINE 2343 IN MAIN.asm
CHARTABLE:          0FA7 DEFINED AT LINE 2355 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
CHARTABLE1:         0FB1 DEFINED AT LINE 2362 IN MAIN.asm
                    > USED AT LINE 2376 IN MAIN.asm
CHARTABLE2:         0FBB DEFINED AT LINE 2370 IN MAIN.asm
                    > USED AT LINE 2368 IN MAIN.asm
CHARTABLE3:         0FBD DEFINED AT LINE 2373 IN MAIN.asm
                    > USED AT LINE 2359 IN MAIN.asm
                    > USED AT LINE 2361 IN MAIN.asm
CMDTABLE:           0FC2 DEFINED AT LINE 2383 IN MAIN.asm
                    > USED AT LINE 604 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
                    > USED AT LINE 828 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
                    > USED AT LINE 881 IN MAIN.asm
                    > USED AT LINE 888 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
                    > USED AT LINE 956 IN MAIN.asm
                    > USED AT LINE 973 IN MAIN.asm
                    > USED AT LINE 980 IN MAIN.asm
                    > USED AT LINE 989 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
                    > USED AT LINE 1005 IN MAIN.asm
                    > USED AT LINE 1534 IN MAIN.asm
CMDTABLE1:          0FC3 DEFINED AT LINE 2385 IN MAIN.asm
CMDTABLE2:          0FC3 DEFINED AT LINE 2386 IN MAIN.asm
                    > USED AT LINE 2411 IN MAIN.asm
CMDTABLE3:          0FD0 DEFINED AT LINE 2398 IN MAIN.asm
CMDTABLE4:          0FDA DEFINED AT LINE 2407 IN MAIN.asm
                    > USED AT LINE 2397 IN MAIN.asm
CMDTABLE5:          0FDF DEFINED AT LINE 2412 IN MAIN.asm
                    > USED AT LINE 2393 IN MAIN.asm
                    > USED AT LINE 2401 IN MAIN.asm
                    > USED AT LINE 2405 IN MAIN.asm
GETVARADDR:         0FE4 DEFINED AT LINE 2419 IN MAIN.asm
                    > USED AT LINE 1051 IN MAIN.asm
GETVARADDR1:        0FF6 DEFINED AT LINE 2430 IN MAIN.asm
                    > USED AT LINE 2426 IN MAIN.asm
PUTSTR0:            0FFB DEFINED AT LINE 2436 IN MAIN.asm
                    > USED AT LINE 2442 IN MAIN.asm
PUTSTR:             0FFF DEFINED AT LINE 2439 IN MAIN.asm
                    > USED AT LINE 2091 IN MAIN.asm
                    > USED AT LINE 2508 IN MAIN.asm
                    > USED AT LINE 2565 IN MAIN.asm
NESTING:            1004 DEFINED AT LINE 2455 IN MAIN.asm
                    > USED AT LINE 2587 IN MAIN.asm
                    > USED AT LINE 2621 IN MAIN.asm
NESTING0:           1012 DEFINED AT LINE 2463 IN MAIN.asm
                    > USED AT LINE 2457 IN MAIN.asm
                    > USED AT LINE 2459 IN MAIN.asm
                    > USED AT LINE 2461 IN MAIN.asm
NESTING1A:          1019 DEFINED AT LINE 2468 IN MAIN.asm
                    > USED AT LINE 2465 IN MAIN.asm
NESTING1:           101C DEFINED AT LINE 2471 IN MAIN.asm
                    > USED AT LINE 2462 IN MAIN.asm
NESTING2:           102B DEFINED AT LINE 2480 IN MAIN.asm
                    > USED AT LINE 2475 IN MAIN.asm
                    > USED AT LINE 2477 IN MAIN.asm
NESTING3:           102D DEFINED AT LINE 2483 IN MAIN.asm
                    > USED AT LINE 2479 IN MAIN.asm
NESTING4:           1038 DEFINED AT LINE 2490 IN MAIN.asm
                    > USED AT LINE 2485 IN MAIN.asm
                    > USED AT LINE 2487 IN MAIN.asm
PROMPT:             103A DEFINED AT LINE 2494 IN MAIN.asm
                    > USED AT LINE 2569 IN MAIN.asm
CRLF:               1043 DEFINED AT LINE 2499 IN MAIN.asm
                    > USED AT LINE 2634 IN MAIN.asm
PRINTSTR:           104A DEFINED AT LINE 2506 IN MAIN.asm
                    > USED AT LINE 2495 IN MAIN.asm
                    > USED AT LINE 2500 IN MAIN.asm
                    > USED AT LINE 2694 IN MAIN.asm
                    > USED AT LINE 2699 IN MAIN.asm
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 194
INIT:               1051 DEFINED AT LINE 2513 IN MAIN.asm
                    > USED AT LINE 2562 IN MAIN.asm
INIT1:              1059 DEFINED AT LINE 2517 IN MAIN.asm
                    > USED AT LINE 2523 IN MAIN.asm
WARMINIT:           1061 DEFINED AT LINE 2525 IN MAIN.asm
COLDBOOT0:          1074 DEFINED AT LINE 2532 IN MAIN.asm
                    > USED AT LINE 2520 IN MAIN.asm
                    > USED AT LINE 2558 IN MAIN.asm
COLDINIT:           107E DEFINED AT LINE 2538 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          108F DEFINED AT LINE 2547 IN MAIN.asm
                    > USED AT LINE 2550 IN MAIN.asm
COLDSTART:          109C DEFINED AT LINE 2556 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
START:              10A5 DEFINED AT LINE 2560 IN MAIN.asm
START1:             10AB DEFINED AT LINE 2563 IN MAIN.asm
                    > USED AT LINE 2530 IN MAIN.asm
                    > USED AT LINE 2559 IN MAIN.asm
INTERPRET:          10B1 DEFINED AT LINE 2567 IN MAIN.asm
                    > USED AT LINE 2671 IN MAIN.asm
                    > USED AT LINE 2687 IN MAIN.asm
INTERPRET2:         10BD DEFINED AT LINE 2575 IN MAIN.asm
                    > USED AT LINE 2612 IN MAIN.asm
                    > USED AT LINE 2692 IN MAIN.asm
                    > USED AT LINE 2696 IN MAIN.asm
                    > USED AT LINE 2714 IN MAIN.asm
INTERPRET3:         10C5 DEFINED AT LINE 2583 IN MAIN.asm
                    > USED AT LINE 2593 IN MAIN.asm
INTERPRET4:         10CB DEFINED AT LINE 2589 IN MAIN.asm
                    > USED AT LINE 2581 IN MAIN.asm
INTERPRET5:         10D0 DEFINED AT LINE 2596 IN MAIN.asm
                    > USED AT LINE 2622 IN MAIN.asm
                    > USED AT LINE 2637 IN MAIN.asm
INTERPRET5A:        10E9 DEFINED AT LINE 2611 IN MAIN.asm
INTERPRET6:         10EB DEFINED AT LINE 2614 IN MAIN.asm
                    > USED AT LINE 2600 IN MAIN.asm
INTERPRET7:         10F9 DEFINED AT LINE 2624 IN MAIN.asm
                    > USED AT LINE 2604 IN MAIN.asm
INTERPRET8:         110C DEFINED AT LINE 2639 IN MAIN.asm
                    > USED AT LINE 2602 IN MAIN.asm
NEXT:               1127 DEFINED AT LINE 2652 IN MAIN.asm
                    > USED AT LINE 2552 IN MAIN.asm
                    > USED AT LINE 2656 IN MAIN.asm
NEXT0:              113B DEFINED AT LINE 2666 IN MAIN.asm
                    > USED AT LINE 2664 IN MAIN.asm
NEXT1:              113C DEFINED AT LINE 2668 IN MAIN.asm
                    > USED AT LINE 2657 IN MAIN.asm
EXIT:               1143 DEFINED AT LINE 2673 IN MAIN.asm
                    > USED AT LINE 2670 IN MAIN.asm
RUN:                1147 DEFINED AT LINE 2678 IN MAIN.asm
                    > USED AT LINE 2685 IN MAIN.asm
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
ERROR:              114B DEFINED AT LINE 2683 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 1136 IN MAIN.asm
BACKSPACE_:         115D DEFINED AT LINE 2689 IN MAIN.asm
                    > USED AT LINE 2607 IN MAIN.asm
REEDIT_:            116D DEFINED AT LINE 2698 IN MAIN.asm
                    > USED AT LINE 2609 IN MAIN.asm
REEDIT0:            1179 DEFINED AT LINE 2703 IN MAIN.asm
                    > USED AT LINE 2709 IN MAIN.asm
REEDIT1:            117D DEFINED AT LINE 2706 IN MAIN.asm
                    > USED AT LINE 2702 IN MAIN.asm
F1:                 118D DEFINED AT LINE 32
                    > USED AT LINE 870 IN MAIN.asm
F1M_3079S12:        1198 DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 1199 DEFINED AT LINE 32
                    > USED AT LINE 872 IN MAIN.asm
F2M_3081S15:        11A4 DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 11A5 DEFINED AT LINE 32
                    > USED AT LINE 874 IN MAIN.asm
F3M_3083S18:        11B0 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 11B1 DEFINED AT LINE 32
                    > USED AT LINE 876 IN MAIN.asm
F4M_3085S21:        11BC DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         1200 DEFINED AT LINE 25
                    > USED AT LINE 8
EXPECTM_3089S27:    129F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3109S53:    1317 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3110S54:    138F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3111S55:    1401 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3112S56:    1473 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3113S57:    14E5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3114S58:    1557 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3115S59:    15CB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3116S60:    1641 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3117S61:    16B5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3118S62:    1731 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3119S63:    17A5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3120S64:    1819 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3121S65:    188F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3122S66:    1905 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3123S67:    1981 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3124S68:    19FD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3125S69:    1A77 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3126S70:    1AF5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3127S71:    1B77 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3128S72:    1BF7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3129S73:    1C71 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3130S74:    1CF3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3131S75:    1D71 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3132S76:    1DEB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3133S77:    1E65 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3134S78:    1EE7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3135S79:    1F61 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3136S80:    1FDB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3137S81:    205B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3138S82:    20EB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3139S83:    2161 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3140S84:    21D7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3141S85:    224F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3142S86:    22C7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3143S87:    2341 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3144S88:    23C3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3145S89:    243D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3146S90:    24C5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3147S91:    254D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3148S92:    25D5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3149S93:    265F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3150S94:    26ED DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3151S95:    277B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3152S96:    2809 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3153S97:    2897 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3154S98:    2923 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3155S99:    29AF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3156S100:   2A43 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3157S101:   2ABF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3158S102:   2B49 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3159S103:   2BD3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3160S104:   2C5F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3161S105:   2CE3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3162S106:   2D5D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3163S107:   2DD9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3164S108:   2E55 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3165S109:   2ECF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3166S110:   2F49 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3167S111:   2FC3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3168S112:   303D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3169S113:   30B7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3170S114:   3131 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3171S115:   31AB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3172S116:   3225 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3173S117:   32A1 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3174S118:   331D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3175S119:   3399 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3176S120:   3417 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3177S121:   3495 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3178S122:   350D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3179S123:   3585 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3180S124:   3603 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3181S125:   3687 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3182S126:   371B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3183S127:   37AF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3184S128:   3829 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3185S129:   38A5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3186S130:   3927 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3187S131:   39AD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3188S132:   3A2F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3189S133:   3ABB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3190S134:   3B49 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3191S135:   3BDD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3192S136:   3C75 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3193S137:   3CFF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3194S138:   3D8F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3195S139:   3E21 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3196S140:   3EB5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3197S141:   3F47 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3198S142:   3FE7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3199S143:   4075 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3200S144:   4111 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3201S145:   41AF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3202S146:   424F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3203S147:   42FB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3204S148:   43A7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3205S149:   4431 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3206S150:   44C5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3207S151:   4553 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3208S152:   45E7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3209S153:   467D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3210S154:   4721 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3211S155:   47CD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3212S156:   4879 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3213S157:   4919 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3214S158:   49BF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3215S159:   4A7B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3216S160:   4B31 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3217S161:   4BF7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3218S162:   4CBD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3219S163:   4D59 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3220S164:   4DF5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3221S165:   4E7B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3222S166:   4F01 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3223S167:   4F87 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3224S168:   500D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3225S169:   508B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3226S170:   5109 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3227S171:   5187 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3228S172:   5205 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3229S173:   528D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3230S174:   5323 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3231S175:   53BF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3232S176:   5473 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3233S177:   5527 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3234S178:   55F5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3235S179:   5679 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3236S180:   570D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3237S181:   57A3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3238S182:   582D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3239S183:   58CB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3240S184:   5969 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3241S185:   59E9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3242S186:   5A69 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3243S187:   5AE9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3244S188:   5B69 DEFINED AT LINE 37
                    > USED AT LINE 16
EXECSTR:            5B74 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              5D00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1822 IN MAIN.asm
                    > USED AT LINE 2553 IN MAIN.asm
                    > USED AT LINE 2557 IN MAIN.asm
                    > USED AT LINE 2561 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                5D00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 154 IN MAIN.asm
                    > USED AT LINE 2572 IN MAIN.asm
                    > USED AT LINE 2580 IN MAIN.asm
                    > USED AT LINE 2616 IN MAIN.asm
                    > USED AT LINE 2626 IN MAIN.asm
                    > USED AT LINE 2641 IN MAIN.asm
                    > USED AT LINE 2644 IN MAIN.asm
                    > USED AT LINE 2701 IN MAIN.asm
                    > USED AT LINE 2710 IN MAIN.asm
BUFFER:             5E00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 155 IN MAIN.asm
                    > USED AT LINE 1286 IN MAIN.asm
                    > USED AT LINE 1297 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
VARS:               5F00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 982 IN MAIN.asm
                    > USED AT LINE 1349 IN MAIN.asm
                    > USED AT LINE 2544 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
RESTARTS:           5FD0 DEFINED AT LINE 18 IN ram.asm
RST08:              5FD0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              5FD2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              5FD4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              5FD6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              5FD8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              5FDA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               5FDC DEFINED AT LINE 26 IN ram.asm
INTVEC:             5FDE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             5FE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            5FE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            5FE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            5FE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2540 IN MAIN.asm
VTIBPTR:            5FE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 2573 IN MAIN.asm
                    > USED AT LINE 2643 IN MAIN.asm
VBUFPTR:            5FE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 1298 IN MAIN.asm
                    > USED AT LINE 2087 IN MAIN.asm
                    > USED AT LINE 2089 IN MAIN.asm
VHEAPPTR:           5FEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 1160 IN MAIN.asm
                    > USED AT LINE 1290 IN MAIN.asm
                    > USED AT LINE 1294 IN MAIN.asm
                    > USED AT LINE 1550 IN MAIN.asm
                    > USED AT LINE 1567 IN MAIN.asm
                    > USED AT LINE 1575 IN MAIN.asm
                    > USED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 2098 IN MAIN.asm
                    > USED AT LINE 2133 IN MAIN.asm
                    > USED AT LINE 2200 IN MAIN.asm
                    > USED AT LINE 2203 IN MAIN.asm
                    > USED AT LINE 2225 IN MAIN.asm
                    > USED AT LINE 2230 IN MAIN.asm
                    > USED AT LINE 2261 IN MAIN.asm
                    > USED AT LINE 2327 IN MAIN.asm
VRECURPTR:          5FEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 1810 IN MAIN.asm
                    > USED AT LINE 1817 IN MAIN.asm
VDATAWIDTH:         5FEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 267 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
                    > USED AT LINE 1074 IN MAIN.asm
                    > USED AT LINE 1105 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 2340 IN MAIN.asm
VNUMBASE:           5FEF DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
VHEXPREFIX:         5FF0 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 729 IN MAIN.asm
VECHO:              5FF1 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 1127 IN MAIN.asm
                    > USED AT LINE 1558 IN MAIN.asm
VSTRMODE:           5FF2 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1274 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 2081 IN MAIN.asm
VPOINTER:           5FF8 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 414 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
                    > USED AT LINE 1713 IN MAIN.asm
                    > USED AT LINE 1927 IN MAIN.asm
                    > USED AT LINE 2338 IN MAIN.asm
VREMAIN:            5FFA DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 1025 IN MAIN.asm
                    > USED AT LINE 1227 IN MAIN.asm
VSAVEDIP:           5FFC DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 2526 IN MAIN.asm
                    > USED AT LINE 2646 IN MAIN.asm
VSAVEDSP:           5FFE DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 2527 IN MAIN.asm
                    > USED AT LINE 2647 IN MAIN.asm
VSAVEDNEXT:         6000 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 2528 IN MAIN.asm
                    > USED AT LINE 2648 IN MAIN.asm
VSAVEDBP:           6002 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 2529 IN MAIN.asm
                    > USED AT LINE 2649 IN MAIN.asm
VTEMP1:             6004 DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 466 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 1295 IN MAIN.asm
                    > USED AT LINE 1765 IN MAIN.asm
                    > USED AT LINE 1809 IN MAIN.asm
                    > USED AT LINE 1821 IN MAIN.asm
                    > USED AT LINE 1827 IN MAIN.asm
                    > USED AT LINE 1856 IN MAIN.asm
                    > USED AT LINE 1877 IN MAIN.asm
                    > USED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1890 IN MAIN.asm
                    > USED AT LINE 1981 IN MAIN.asm
                    > USED AT LINE 2005 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
                    > USED AT LINE 2045 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 2195 IN MAIN.asm
                    > USED AT LINE 2204 IN MAIN.asm
                    > USED AT LINE 2216 IN MAIN.asm
                    > USED AT LINE 2328 IN MAIN.asm
VTEMP2:             6006 DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 1768 IN MAIN.asm
                    > USED AT LINE 1808 IN MAIN.asm
                    > USED AT LINE 1857 IN MAIN.asm
                    > USED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 2218 IN MAIN.asm
                    > USED AT LINE 2318 IN MAIN.asm
VTEMP3:             6008 DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 2215 IN MAIN.asm
                    > USED AT LINE 2329 IN MAIN.asm
TBPTR:              600C DEFINED AT LINE 67 IN ram.asm
TITLEBUF:           600E DEFINED AT LINE 69 IN ram.asm
                    > USED AT LINE 2515 IN MAIN.asm
                    > USED AT LINE 2534 IN MAIN.asm
                    > USED AT LINE 2564 IN MAIN.asm
HEAP:               6022 DEFINED AT LINE 71 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 2188 IN MAIN.asm
