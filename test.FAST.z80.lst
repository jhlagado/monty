0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; call prtdec
0000                             ; push hl
0000                             ; call prtdec
0000                             ; pop hl
0000                             ; call printStr
0000                             ; .cstr " (#"
0000                             ; call prthex
0000                             ; call printStr
0000                             ; .cstr ")\r\n"
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,val1
0000                 push hl
0000                 call run
0000                 .cstr "."
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". `(#`.s .h `)\r\n`.s"
0000                 call flushBuffer
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call coldBoot
0000                 call execStr
0000                 .cstr code1
0000                 call flushBuffer
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 4C               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 4C               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 4C               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 4C               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 4C               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 4C               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 4C               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 4C               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 4C               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 4C               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 4A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 4C               LD   (RST08),HL   
0094   22 D2 4C               LD   (RST10),HL   
0097   22 D4 4C               LD   (RST18),HL   
009A   22 D6 4C               LD   (RST20),HL   
009D   22 D8 4C               LD   (RST28),HL   
00A0   22 DA 4C               LD   (RST30),HL   
00A3   22 DE 4C               LD   (INTVEC),HL   
00A6   22 E0 4C               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 4C               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 4C               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; ld SP,STACK
00C3                             ; call coldBoot
00C3   C3 00 0D               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQUOTE:   EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                TMAGIC:   EQU   $AA   ; magic number
00C6                TRESERV:   EQU   $A0   ; reserved
00C6                TNUMBER:   EQU   $A1   ; number
00C6                TSTRING:   EQU   $A2   ; string
00C6                TPOINTER:   EQU   $A3   ; pointer
00C6                TARRAY:   EQU   $A4   ; array
00C6                TBLOCK:   EQU   $A5   ; block
00C6                TLAMBDA:   EQU   $A6   ; lambda
00C6                TARGLST:   EQU   $A7   ; arglist
00C6                             ; z80_RST8    equ     $CF
00C6                             ; **************************************************************************
00C6                             ; Page 0  Initialisation
00C6                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 4A                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 4B                  DW   BUF   ; vBUFPtr pointer into BUF
0188   37 0C                  DW   next   ; nNext
018A   1E 4D                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C                          ALIGN   $100   
0200                OPCODES:      ; still available ~ `
0200   82                     DB   lsb(nop_)   ; SP
0201   39                     DB   lsb(bang_)   ; !
0202   4D                     DB   lsb(dblquote_)   ; "
0203   41                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1E                     DB   lsb(tick_)   ; '
0208   18                     DB   lsb(lparen_)   ; (
0209   84                     DB   lsb(rparen_)   ; )
020A   36                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   4A                     DB   lsb(comma_)   ; ,
020D   50                     DB   lsb(minus_)   ; -
020E   24                     DB   lsb(dot_)   ; .
020F   7F                     DB   lsb(slash_)   ; /	
0210   3E                     DB   lsb(num_)   ; 0
0211   3E                     DB   lsb(num_)   ; 1
0212   3E                     DB   lsb(num_)   ; 2
0213   3E                     DB   lsb(num_)   ; 3
0214   3E                     DB   lsb(num_)   ; 4
0215   3E                     DB   lsb(num_)   ; 5
0216   3E                     DB   lsb(num_)   ; 6
0217   3E                     DB   lsb(num_)   ; 7
0218   3E                     DB   lsb(num_)   ; 8
0219   3E                     DB   lsb(num_)   ; 9
021A   2A                     DB   lsb(colon_)   ; :
021B   21                     DB   lsb(semicolon_)   ; ;
021C   6D                     DB   lsb(lt_)   ; <
021D   53                     DB   lsb(eq_)   ; =
021E   62                     DB   lsb(gt_)   ; >
021F   33                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   2D                     DB   lsb(upcase_)   ; A
0222   2D                     DB   lsb(upcase_)   ; B
0223   2D                     DB   lsb(upcase_)   ; C
0224   2D                     DB   lsb(upcase_)   ; D
0225   2D                     DB   lsb(upcase_)   ; E
0226   2D                     DB   lsb(upcase_)   ; F
0227   2D                     DB   lsb(upcase_)   ; G
0228   2D                     DB   lsb(upcase_)   ; h
0229   2D                     DB   lsb(upcase_)   ; I
022A   2D                     DB   lsb(upcase_)   ; J
022B   2D                     DB   lsb(upcase_)   ; K
022C   2D                     DB   lsb(upcase_)   ; L
022D   2D                     DB   lsb(upcase_)   ; M
022E   2D                     DB   lsb(upcase_)   ; N
022F   2D                     DB   lsb(upcase_)   ; O
0230   2D                     DB   lsb(upcase_)   ; p
0231   2D                     DB   lsb(upcase_)   ; Q
0232   2D                     DB   lsb(upcase_)   ; R
0233   2D                     DB   lsb(upcase_)   ; S
0234   2D                     DB   lsb(upcase_)   ; T
0235   2D                     DB   lsb(upcase_)   ; U
0236   2D                     DB   lsb(upcase_)   ; V
0237   2D                     DB   lsb(upcase_)   ; W
0238   2D                     DB   lsb(upcase_)   ; X
0239   2D                     DB   lsb(upcase_)   ; Y
023A   2D                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   15                     DB   lsb(backslash_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   47                     DB   lsb(caret_)   ; ^
023F   27                     DB   lsb(underscore_)   ; _
0240   4D                     DB   lsb(dblquote_)   ; `     used for testing string   	
0241   30                     DB   lsb(lowcase_)   ; a
0242   30                     DB   lsb(lowcase_)   ; b
0243   30                     DB   lsb(lowcase_)   ; c
0244   30                     DB   lsb(lowcase_)   ; d
0245   30                     DB   lsb(lowcase_)   ; e
0246   30                     DB   lsb(lowcase_)   ; f
0247   30                     DB   lsb(lowcase_)   ; g
0248   30                     DB   lsb(lowcase_)   ; h
0249   30                     DB   lsb(lowcase_)   ; i
024A   30                     DB   lsb(lowcase_)   ; j
024B   30                     DB   lsb(lowcase_)   ; k
024C   30                     DB   lsb(lowcase_)   ; l
024D   30                     DB   lsb(lowcase_)   ; m
024E   30                     DB   lsb(lowcase_)   ; n
024F   30                     DB   lsb(lowcase_)   ; o
0250   30                     DB   lsb(lowcase_)   ; p
0251   30                     DB   lsb(lowcase_)   ; q
0252   30                     DB   lsb(lowcase_)   ; r
0253   30                     DB   lsb(lowcase_)   ; s
0254   30                     DB   lsb(lowcase_)   ; t
0255   30                     DB   lsb(lowcase_)   ; u
0256   30                     DB   lsb(lowcase_)   ; v
0257   30                     DB   lsb(lowcase_)   ; w
0258   30                     DB   lsb(lowcase_)   ; x
0259   30                     DB   lsb(lowcase_)   ; y
025A   30                     DB   lsb(lowcase_)   ; z
025B   18                     DB   lsb(lbrace_)   ; {
025C   44                     DB   lsb(pipe_)   ; |
025D   1B                     DB   lsb(rbrace_)   ; }
025E   82                     DB   lsb(nop_)   ; ~
025F   82                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 87 03               JP   plus   
0303                AT_:         
0303   C3 99 03               JP   at   
0306                AMPER_:      
0306   C3 A3 03               JP   amper   
0309                DOLLAR_:      
0309   C3 C7 03               JP   dollar   
030C                LBRACK_:      
030C   C3 FE 03               JP   lbrack   
030F                RBRACK_:      
030F   C3 1A 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 72 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 AC 05               JP   backslash   
0318                LPAREN_:      
0318                LBRACE_:      
0318   C3 D2 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 3B 05               JP   rbrace   
031E                TICK_:       
031E   C3 97 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 9D 07               JP   semicolon   
0324                DOT_:        
0324   C3 04 06               JP   dot   
0327                UNDERSCORE_:      
0327   C3 8F 07               JP   underscore   
032A                COLON_:      
032A   C3 9B 04               JP   colon   
032D                UPCASE_:      
032D   C3 13 07               JP   upcase   
0330                LOWCASE_:      
0330   C3 18 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 2A 07               JP   question   
0336                STAR_:       
0336   C3 43 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 5F 07               JP   num   
0341                HASH_:       
0341   C3 F6 06               JP   hash   
0344                PIPE_:       
0344   C3 AE 03               JP   pipe   
0347                CARET_:      
0347   C3 50 06               JP   caret   
034A                COMMA_:      
034A   C3 AE 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 DC 07               JP   dblquote   
0350                MINUS_:      
0350   C3 04 08               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 8A 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 2F 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA C9 07               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 09                  JR   lt1   
036D                LT_:         
036D   03                     INC   bc   
036E   0A                     LD   a,(bc)   
036F   FE 3C                  CP   "<"   
0371   CA B9 07               JP   z,shiftLeft   
0374   E1                     POP   hl   
0375   D1                     POP   de   
0376                LT1:         
0376   FE 3D                  CP   "="   
0378   CA 37 06               JP   z,lessthaneq   
037B   0B                     DEC   bc   
037C   C3 3C 06               JP   lessthan   
037F                SLASH_:      
037F   C3 BD 05               JP   slash   
0382                NOP_:        
0382   DD E9                  JP   (ix)   
0384                RPAREN_:      
0384   C3 95 07               JP   rparen   
0387                             ;*******************************************************************
0387                             ; implementations
0387                             ;*******************************************************************
0387                PLUS:        
0387                ADD:         
0387   03                     INC   bc   
0388   0A                     LD   a,(bc)   
0389   FE 2B                  CP   "+"   ; ++ increment variable
038B   20 05                  JR   nz,add1   
038D   E1                     POP   hl   
038E   23                     INC   hl   
038F   C3 8C 04               JP   assign0   
0392                ADD1:        
0392   0B                     DEC   bc   
0393   D1                     POP   de   ; second term
0394   E1                     POP   hl   ; first term
0395   19                     ADD   hl,de   
0396                ADD3:        
0396   E5                     PUSH   hl   
0397   DD E9                  JP   (ix)   
0399                             ; @ addr
0399                             ; -- ptr
0399                AT:          
0399                ADDR:        
0399   ED 5B F2 4C            LD   de,(vPointer)   
039D   21 F2 4C               LD   hl,vPointer   
03A0   C3 71 0A               JP   variable   
03A3                AMPER:       
03A3                AND:         
03A3   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A4   E1                     POP   hl   
03A5   7B                     LD   a,e   
03A6   A5                     AND   l   
03A7   6F                     LD   l,a   
03A8   7A                     LD   a,d   
03A9   A4                     AND   h   
03AA                AND1:        
03AA   67                     LD   h,a   
03AB   E5                     PUSH   hl   
03AC   DD E9                  JP   (ix)   
03AE                PIPE:        
03AE                OR:          
03AE   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03AF   E1                     POP   hl   
03B0   7B                     LD   a,e   
03B1   B5                     OR   l   
03B2   6F                     LD   l,a   
03B3   7A                     LD   a,d   
03B4   B4                     OR   h   
03B5   18 F3                  JR   and1   
03B7                XOR:         
03B7   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03B8                XOR1:        
03B8   E1                     POP   hl   
03B9   7B                     LD   a,e   
03BA   AD                     XOR   l   
03BB   6F                     LD   l,a   
03BC   7A                     LD   a,d   
03BD   AC                     XOR   h   
03BE   67                     LD   h,a   
03BF   E5                     PUSH   hl   
03C0   DD E9                  JP   (ix)   
03C2                INVERT:      ; Bitwise INVert the top member of the stack
03C2   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C5   18 F1                  JR   xor1   
03C7                             ; $a .. $z
03C7                             ; -- value
03C7                             ; returns value of arg
03C7                DOLLAR:      
03C7                ARG:         
03C7   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03CA   FD 56 05               LD   d,(iy+5)   
03CD   EB                     EX   de,hl   
03CE   7D                     LD   a,l   ; arg_list* == null, skip
03CF   B4                     OR   h   
03D0   28 1C                  JR   z,arg0a   
03D2   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D3   2B                     DEC   hl   
03D4   7E                     LD   a,(hl)   
03D5   23                     INC   hl   
03D6   23                     INC   hl   
03D7   B7                     OR   a   
03D8   28 14                  JR   z,arg0a   ; num_args == 0, skip
03DA   5F                     LD   e,a   ; e = a = num_args
03DB   03                     INC   bc   ; a = next char = dollar_name
03DC   0A                     LD   a,(bc)   
03DD   C5                     PUSH   bc   ; save IP
03DE   43                     LD   b,e   ; b = e = num_args
03DF   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E2   FD 56 03               LD   d,(iy+3)   
03E5                ARG0:        
03E5   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E6   1B                     DEC   de   
03E7   BE                     CP   (hl)   
03E8   28 09                  JR   z,arg1   
03EA   23                     INC   hl   ; hl = next arg_list*
03EB   10 F8                  DJNZ   arg0   
03ED   C1                     POP   bc   ; no match, restore IP
03EE                ARG0A:       
03EE   11 00 00               LD   de,0   ; return 0
03F1   18 08                  JR   arg1a   
03F3                ARG1:        
03F3   C1                     POP   bc   ; restore IP
03F4   EB                     EX   de,hl   ; hl = arg*
03F5   22 F2 4C               LD   (vPointer),hl   ; store arg* in setter
03F8   5E                     LD   e,(hl)   
03F9   23                     INC   hl   
03FA   56                     LD   d,(hl)   ; de = arg
03FB                ARG1A:       
03FB   D5                     PUSH   de   ; push arg
03FC   DD E9                  JP   (ix)   
03FE                LBRACK:      
03FE                ARRAYSTART:      
03FE   11 00 00               LD   de,0   ; create stack frame
0401   D5                     PUSH   de   ; push null for IP
0402   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0405   FD 56 05               LD   d,(iy+5)   ; 
0408   D5                     PUSH   de   ; 
0409   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
040C   FD 56 03               LD   d,(iy+3)   ; 
040F   D5                     PUSH   de   ; 
0410   FD E5                  PUSH   iy   ; push BP
0412   FD 21 00 00            LD   iy,0   ; BP = SP
0416   FD 39                  ADD   iy,sp   
0418   DD E9                  JP   (ix)   
041A                RBRACK:      
041A                ARRAYEND:      
041A   FD 54                  LD   d,iyh   ; de = BP
041C   FD 5D                  LD   e,iyl   
041E   ED 43 00 4D            LD   (vTemp1),bc   ; save IP
0422   62 6B                  LD   hl,de   ; hl = de = BP
0424   B7                     OR   a   
0425   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0427   CB 3C                  SRL   h   ; 
0429   CB 1D                  RR   l   
042B   44 4D                  LD   bc,hl   ; bc = count
042D   2A F0 4C               LD   hl,(vHeapPtr)   ; hl = array[-4]
0430   71                     LD   (hl),c   ; write num items in length word
0431   23                     INC   hl   
0432   70                     LD   (hl),b   
0433   23                     INC   hl   ; hl = array[0], bc = count
0434                             ; de = BP, hl = array[0], bc = count
0434   3E A4                  LD   a,TARRAY   ; write type tag
0436   77                     LD   (hl),a   
0437   23                     INC   hl   
0438   3E AA                  LD   a,TMAGIC   ; write magic byte
043A   77                     LD   (hl),a   
043B   23                     INC   hl   
043C                ARRAYEND1:      
043C   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
043F   77                     LD   (hl),a   ; write lsb of array item
0440   23                     INC   hl   ; move to msb of array item
0441   3A E6 4C               LD   a,(vDataWidth)   ; vDataWidth=1?
0444   3D                     DEC   a   
0445   28 05                  JR   z,arrayEnd2   
0447   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
044A   77                     LD   (hl),a   ; write msb of array item
044B   23                     INC   hl   ; move to next word in array
044C                ARRAYEND2:      
044C   FD 2B                  DEC   iy   ; move to next word on stack
044E   FD 2B                  DEC   iy   
0450   0B                     DEC   bc   ; dec items count
0451   79                     LD   a,c   ; if not zero loop
0452   B0                     OR   b   
0453   20 E7                  JR   nz,arrayEnd1   
0455   EB                     EX   de,hl   ; de = end of array, hl = BP
0456   F9                     LD   sp,hl   ; sp = BP
0457   E1                     POP   hl   ; de = end of array, hl = old BP
0458   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0459   FD 62                  LD   iyh,d   
045B   FD 6B                  LD   iyl,e   
045D   D1                     POP   de   ; pop arg_list (discard)
045E   D1                     POP   de   ; pop first_arg* (discard)
045F   D1                     POP   de   ; pop IP (discard)
0460   ED 5B F0 4C            LD   de,(vHeapPtr)   ; de = array[-4]
0464   13                     INC   de   ; de = array[0]
0465   13                     INC   de   
0466   13                     INC   de   
0467   13                     INC   de   
0468   D5                     PUSH   de   ; return array[0]
0469   22 F0 4C               LD   (vHeapPtr),hl   ; move heap* to end of array
046C   ED 4B 00 4D            LD   bc,(vTemp1)   ; restore IP
0470   DD E9                  JP   (ix)   
0472                             ; index of an array, based on vDataWidth
0472                             ; array num -- value    ; also sets vPointer to address
0472                ARRINDEX:      
0472   E1                     POP   hl   ; hl = index
0473   D1                     POP   de   ; de = array
0474   3A E6 4C               LD   a,(vDataWidth)   ; a = data width
0477   3D                     DEC   a   
0478   28 01                  JR   z,arrIndex1   
047A                ARRINDEX0:      
047A   29                     ADD   hl,hl   ; if data width = 2 then double
047B                ARRINDEX1:      
047B   19                     ADD   hl,de   ; add addr
047C   22 F2 4C               LD   (vPointer),hl   ; store address in setter
047F   16 00                  LD   d,0   
0481   5E                     LD   e,(hl)   
0482   B7                     OR   a   ; check data width again
0483   28 02                  JR   z,arrIndex2   
0485   23                     INC   hl   
0486   56                     LD   d,(hl)   
0487                ARRINDEX2:      
0487   D5                     PUSH   de   
0488   DD E9                  JP   (ix)   
048A                             ; value _oldValue --            ; uses address in vPointer
048A                ASSIGN:      
048A   E1                     POP   hl   ; discard last accessed value
048B   E1                     POP   hl   ; hl = new value
048C                ASSIGN0:      
048C   EB                     EX   de,hl   ; de = new value
048D                ASSIGNX:      
048D   2A F2 4C               LD   hl,(vPointer)   
0490   73                     LD   (hl),e   
0491   3A E6 4C               LD   a,(vDataWidth)   
0494   3D                     DEC   a   ; is it byte?
0495   28 02                  JR   z,assign1   
0497   23                     INC   hl   
0498   72                     LD   (hl),d   
0499                ASSIGN1:      
0499   DD E9                  JP   (ix)   
049B                             ; arg_list - parses input (ab:c)
049B                             ; names after the : represent uninitialised locals
049B                             ; return values are the state of the stack after the block ends
049B                COLON:       
049B                ARGLIST:      
049B   11 00 00               LD   de,0   ; d = count locals, e = count args ()
049E   2A F0 4C               LD   hl,(vHeapPtr)   ; hl = heap*
04A1   23                     INC   hl   ; skip length field to start
04A2   23                     INC   hl   
04A3   E5                     PUSH   hl   ; save start of arg_list
04A4   03                     INC   bc   ; point to next char
04A5                ARGLIST1:      
04A5   0A                     LD   a,(bc)   
04A6   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A8   20 03                  JR   nz,arglist1a   
04AA   14                     INC   d   ; non zero value local count acts as flag
04AB   18 10                  JR   arglist3   
04AD                ARGLIST1A:      
04AD   FE 41                  CP   "A"   ; < "A" terminates arg_list
04AF   38 0F                  JR   c,arglist4   
04B1   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B3   30 0B                  JR   nc,arglist4   
04B5                ARGLIST2:      
04B5   77                     LD   (hl),a   
04B6   23                     INC   hl   
04B7   1C                     INC   e   ; increase arg count
04B8   AF                     XOR   a   
04B9   B2                     OR   d   
04BA   28 01                  JR   z,arglist3   
04BC   14                     INC   d   ; if d > 0 increase local count
04BD                ARGLIST3:      
04BD   03                     INC   bc   ; point to next char
04BE   18 E5                  JR   arglist1   
04C0                ARGLIST4:      
04C0   0B                     DEC   bc   
04C1   AF                     XOR   a   
04C2   B2                     OR   d   
04C3   28 01                  JR   z,arglist5   
04C5   15                     DEC   d   ; remove initial inc
04C6                ARGLIST5:      
04C6   23                     INC   hl   
04C7   22 F0 4C               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04CA   E1                     POP   hl   ; hl = start of arg_list
04CB   E5                     PUSH   hl   ; return start of arg_list
04CC   2B                     DEC   hl   ; write number of locals at start - 1
04CD   72                     LD   (hl),d   
04CE   2B                     DEC   hl   ; write number of args + locals at start - 2
04CF   73                     LD   (hl),e   
04D0   DD E9                  JP   (ix)   
04D2                LBRACE:      
04D2                BLOCKSTART:      
04D2   C5                     PUSH   bc   ; return pointer to first { of block
04D3   03                     INC   bc   
04D4   16 01                  LD   d,1   ; nesting: count first parenthesis
04D6                BLOCKSTART1:      ; Skip to end of definition
04D6   0A                     LD   a,(bc)   ; Get the next character
04D7   03                     INC   bc   ; Point to next character
04D8   FE 21                  CP   " " + 1   ; ignore whitespace
04DA   38 FA                  JR   c,blockStart1   
04DC   FE 29                  CP   ")"   
04DE   28 2D                  JR   z,blockStart4   
04E0   FE 7D                  CP   "}"   
04E2   28 29                  JR   z,blockStart4   
04E4   FE 5D                  CP   "]"   
04E6   28 25                  JR   z,blockStart4   
04E8   FE 28                  CP   "("   
04EA   28 16                  JR   z,blockStart2   
04EC   FE 7B                  CP   "{"   
04EE   28 12                  JR   z,blockStart2   
04F0   FE 5B                  CP   "["   
04F2   28 0E                  JR   z,blockStart2   
04F4   FE 27                  CP   "'"   
04F6   28 0D                  JR   z,blockStart3   
04F8   FE 60                  CP   "`"   
04FA   28 09                  JR   z,blockStart3   
04FC   FE 22                  CP   DQUOTE   
04FE   28 05                  JR   z,blockStart3   
0500   18 D4                  JR   blockStart1   
0502                BLOCKSTART2:      
0502   14                     INC   d   
0503   18 D1                  JR   blockStart1   
0505                BLOCKSTART3:      
0505   3E 80                  LD   a,$80   
0507   AA                     XOR   d   
0508   57                     LD   d,a   
0509   20 CB                  JR   nz,blockStart1   
050B   18 03                  JR   blockStart5   
050D                BLOCKSTART4:      
050D   15                     DEC   d   
050E   20 C6                  JR   nz,blockStart1   ; get the next element
0510                BLOCKSTART5:      
0510   60 69                  LD   hl,bc   ; hl = IP
0512   11 1E 4D               LD   de,HEAP   ; is IP pointing to object in heap
0515   B7                     OR   a   ; IP - HEAP
0516   ED 52                  SBC   hl,de   
0518   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
051A   28 1C                  JR   z,blockStart6   
051C   60 69                  LD   hl,bc   ; hl = IP
051E   D1                     POP   de   ; de = block*
051F   ED 43 00 4D            LD   (vTemp1),bc   ; save IP
0523   B7                     OR   a   ; bc = size
0524   ED 52                  SBC   hl,de   
0526   44 4D                  LD   bc,hl   
0528   EB                     EX   de,hl   ; hl = block* de = heap*
0529   ED 5B F0 4C            LD   de,(vHeapPtr)   
052D   D5                     PUSH   de   ; return hblock*
052E   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0530   ED 53 F0 4C            LD   (vHeapPtr),de   ; heap* += size
0534   ED 4B 00 4D            LD   bc,(vTemp1)   ; restore IP
0538                BLOCKSTART6:      
0538   0B                     DEC   bc   ; balanced, exit
0539   DD E9                  JP   (ix)   
053B                RBRACE:      
053B                BLOCKEND:      
053B   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
053E   FD 56 01               LD   d,(iy+1)   
0541   ED 53 00 4D            LD   (vTemp1),de   
0545   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0548   FD 56 07               LD   d,(iy+7)   
054B   ED 53 02 4D            LD   (vTemp2),de   
054F   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0552   FD 56 03               LD   d,(iy+3)   
0555   EB                     EX   de,hl   
0556   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0559   FD 56 01               LD   d,(iy+1)   
055C   13                     INC   de   ; for carry flag <=
055D   B7                     OR   a   
055E   ED 52                  SBC   hl,de   
0560   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0562   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0564   FD 5D                  LD   e,iyl   
0566   21 08 00               LD   hl,8   
0569   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
056A   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
056B   18 0C                  JR   blockEnd2   
056D                BLOCKEND1:      ; same scope
056D   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0570   FD 56 03               LD   d,(iy+3)   
0573   EB                     EX   de,hl   
0574   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0576   FD 5D                  LD   e,iyl   
0578   EB                     EX   de,hl   
0579                BLOCKEND2:      
0579   44 4D                  LD   bc,hl   ; bc = hl = BP
057B   B7                     OR   a   ; hl = BP - SP = count
057C   ED 72                  SBC   hl,sp   
057E   7D                     LD   a,l   
057F   B4                     OR   h   
0580   28 09                  JR   z,blockEnd3   
0582   C5                     PUSH   bc   ; bc = count, hl = BP
0583   44 4D                  LD   bc,hl   
0585   E1                     POP   hl   
0586   2B                     DEC   hl   ; hl = BP-1
0587   1B                     DEC   de   ; de = args*-1
0588   ED B8                  LDDR      
058A   13                     INC   de   
058B                BLOCKEND3:      
058B   EB                     EX   de,hl   ; sp = de = new tos*
058C   F9                     LD   sp,hl   
058D   ED 4B 02 4D            LD   bc,(vTemp2)   
0591   FD 2A 00 4D            LD   iy,(vTemp1)   
0595   DD E9                  JP   (ix)   
0597                TICK:        
0597                CHAR:        
0597   21 00 00               LD   hl,0   ; if "" is empty or null
059A                CHAR1:       
059A   03                     INC   bc   ; point to next char
059B   0A                     LD   a,(bc)   
059C   FE 27                  CP   "'"   ; ' is the terminator
059E   28 09                  JR   z,char3   
05A0   FE 5C                  CP   $5c   ; \ is the escape
05A2   20 02                  JR   nz,char2   
05A4   03                     INC   bc   
05A5   0A                     LD   a,(bc)   
05A6                CHAR2:       
05A6   6F                     LD   l,a   
05A7   18 F1                  JR   char1   
05A9                CHAR3:       
05A9   E5                     PUSH   hl   
05AA   DD E9                  JP   (ix)   
05AC                BACKSLASH:      
05AC   DD E9                  JP   (ix)   
05AE                             ; , discard stack item
05AE                             ; x y -- x
05AE                COMMA:       
05AE                DISCARD:      
05AE   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05B0   FD 5D                  LD   e,iyl   
05B2   EB                     EX   de,hl   
05B3   B7                     OR   a   
05B4   ED 72                  SBC   hl,sp   
05B6   CB 7C                  BIT   7,h   
05B8   20 01                  JR   nz,discard1   
05BA   E1                     POP   hl   
05BB                DISCARD1:      
05BB   DD E9                  JP   (ix)   
05BD                SLASH:       
05BD   CD DC 0A               CALL   jumpTable   
05C0   2F                     DB   "/"   
05C1   2A 08                  DW   comment   
05C3   61                     DB   "a"   
05C4   33 08                  DW   command_a   
05C6   62                     DB   "b"   
05C7   6D 08                  DW   command_b   
05C9   63                     DB   "c"   
05CA   77 0A                  DW   chars   
05CC   64                     DB   "d"   
05CD   7F 0A                  DW   decimal   
05CF   66                     DB   "f"   
05D0   4A 06                  DW   false1   
05D2   68                     DB   "h"   
05D3   87 0A                  DW   hexadecimal   
05D5   69                     DB   "i"   
05D6   B3 09                  DW   command_i   
05D8   6B                     DB   "k"   
05D9   98 0A                  DW   key   
05DB   6E                     DB   "n"   
05DC   AA 0A                  DW   numbers   
05DE   6F                     DB   "o"   
05DF   A1 0A                  DW   output   
05E1   70                     DB   "p"   
05E2   BF 09                  DW   command_p   
05E4   73                     DB   "s"   
05E5   28 0A                  DW   size   
05E7   74                     DB   "t"   
05E8   44 06                  DW   true1   
05EA   76                     DB   "v"   
05EB   32 0A                  DW   command_v   
05ED   78                     DB   "x"   
05EE   B7 03                  DW   xor   
05F0   00                     DB   NUL   
05F1   F3 05                  DW   div   
05F3                DIV:         
05F3   D1                     POP   de   
05F4   E1                     POP   hl   
05F5   C5                     PUSH   bc   ; preserve the IP
05F6   44 4D                  LD   bc,hl   
05F8   CD 16 06               CALL   divide   
05FB   EB                     EX   de,hl   
05FC   ED 53 F4 4C            LD   (vRemain),de   
0600   C1                     POP   bc   
0601   C3 96 03               JP   add3   
0604                DOT:         
0604   CD DC 0A               CALL   jumpTable   
0607   61                     DB   "a"   
0608   85 08                  DW   bufferArray   
060A   63                     DB   "c"   
060B   92 09                  DW   bufferChar   
060D   73                     DB   "s"   
060E   78 09                  DW   bufferString   
0610   78                     DB   "x"   
0611   97 09                  DW   bufferXChars   
0613   00                     DB   NUL   
0614   B9 08                  DW   bufferNumber   
0616                             ; division subroutine.
0616                             ; bc: divisor, de: dividend, hl: remainder
0616                DIVIDE:      
0616   21 00 00               LD   hl,0   ; zero the remainder
0619   3E 10                  LD   a,16   ; loop counter
061B                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
061B   CB 21                  SLA   c   
061D   CB 10                  RL   b   
061F   ED 6A                  ADC   hl,hl   
0621   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0623   38 03                  JR   c,divide2   
0625   0C                     INC   c   
0626   18 01                  JR   divide3   
0628                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0628   19                     ADD   hl,de   
0629                DIVIDE3:      
0629   3D                     DEC   a   
062A   20 EF                  JR   nz,divide1   
062C   50 59                  LD   de,bc   ; result from bc to de
062E   C9                     RET      
062F                             ; hl = value1, de = value2
062F                             ; hl = result
062F                EQUALS:      
062F   B7                     OR   a   ; reset the carry flag
0630   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0632   28 10                  JR   z,true1   
0634   C3 4A 06               JP   false1   
0637                             ; hl = value1 de = value2
0637                             ; hl = result
0637                LESSTHANEQ:      
0637   B7                     OR   a   
0638   ED 52                  SBC   hl,de   
063A   18 05                  JR   lessthan1   
063C                             ; hl = value1 de = value2
063C                             ; hl = result
063C                LESSTHAN:      
063C   B7                     OR   a   
063D   ED 52                  SBC   hl,de   
063F   28 09                  JR   z,false1   
0641                LESSTHAN1:      
0641   FA 4A 06               JP   m,false1   
0644                TRUE1:       
0644   21 FF FF               LD   hl,TRUE   
0647   E5                     PUSH   hl   
0648   DD E9                  JP   (ix)   
064A                NULL1:       
064A                FALSE1:      
064A   21 00 00               LD   hl,FALSE   
064D   E5                     PUSH   hl   
064E   DD E9                  JP   (ix)   
0650                             ; execute a block of code which ends with }
0650                             ; creates a root scope if BP == stack
0650                             ; else uses outer scope
0650                CARET:       
0650                GO:          
0650   D1                     POP   de   ; de = block*
0651                GO1:         
0651   7B                     LD   a,e   ; if block* == null, exit
0652   B2                     OR   d   
0653   20 02                  JR   nz,go2   
0655   DD E9                  JP   (ix)   
0657                GO2:         
0657   1A                     LD   a,(de)   
0658   FE 7B                  CP   "{"   
065A   28 07                  JR   z,goBlock1   
065C   FE 28                  CP   "("   
065E   C2 96 06               JP   nz,goLambda   
0661   13                     INC   de   ; de is the address to jump back to
0662   D5                     PUSH   de   ; push de just before stack frame
0663                GOBLOCK:      
0663                GOBLOCK1:      
0663   ED 53 00 4D            LD   (vTemp1),de   ; save de
0667   21 00 4A               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
066A   FD 54                  LD   d,iyh   
066C   FD 5D                  LD   e,iyl   
066E   B7                     OR   a   ; if stack* == BP then this is the root_scope
066F   ED 52                  SBC   hl,de   
0671   ED 5B 00 4D            LD   de,(vTemp1)   ; restore de
0675   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0676   B4                     OR   h   
0677   3E 00                  LD   a,0   
0679   28 70                  JR   z,goLambda8   
067B   C5                     PUSH   bc   ; push IP
067C   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
067F   FD 46 05               LD   b,(iy+5)   
0682   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0685   FD 66 03               LD   h,(iy+3)   
0688                GOBLOCK2:      
0688   C5                     PUSH   bc   ; arg_list*
0689   E5                     PUSH   hl   ; first_arg*
068A   FD E5                  PUSH   iy   ; push BP
068C   FD 21 00 00            LD   iy,0   ; BP = SP
0690   FD 39                  ADD   iy,sp   
0692   42 4B                  LD   bc,de   ; bc = de = block*-1
0694   DD E9                  JP   (ix)   
0696                GOLAMBDA:      ; execute lambda
0696   EB                     EX   de,hl   ; hl = lambda*
0697   5E                     LD   e,(hl)   ; de = partial_array*
0698   23                     INC   hl   
0699   56                     LD   d,(hl)   
069A   23                     INC   hl   
069B   7B                     LD   a,e   ; if partial_array* == null skip
069C   B2                     OR   d   
069D   28 25                  JR   z,goLambda3   
069F   ED 43 00 4D            LD   (vTemp1),bc   
06A3   22 02 4D               LD   (vTemp2),hl   ; save bc,hl
06A6   EB                     EX   de,hl   ; hl = partial_array*
06A7   2B                     DEC   hl   ; skip type byte
06A8   2B                     DEC   hl   ; skip magic byte
06A9   2B                     DEC   hl   ; bc = count
06AA   46                     LD   b,(hl)   
06AB   2B                     DEC   hl   
06AC   4E                     LD   c,(hl)   
06AD   23                     INC   hl   ; hl = array data*
06AE   23                     INC   hl   
06AF   23                     INC   hl   
06B0   23                     INC   hl   
06B1   18 06                  JR   goLambda2   ; push each item on stack
06B3                GOLAMBDA1:      
06B3   5E                     LD   e,(hl)   ; de = partial item
06B4   23                     INC   hl   
06B5   56                     LD   d,(hl)   
06B6   23                     INC   hl   
06B7   D5                     PUSH   de   ; push on stack
06B8   0B                     DEC   bc   
06B9                GOLAMBDA2:      
06B9   79                     LD   a,c   ; if count != 0 then loop
06BA   B0                     OR   b   
06BB   20 F6                  JR   nz,goLambda1   
06BD   ED 4B 00 4D            LD   bc,(vTemp1)   ; restore bc
06C1   2A 02 4D               LD   hl,(vTemp2)   ; restore hl
06C4                GOLAMBDA3:      
06C4   5E                     LD   e,(hl)   ; de = block*
06C5   23                     INC   hl   
06C6   56                     LD   d,(hl)   
06C7   23                     INC   hl   
06C8   ED 53 00 4D            LD   (vTemp1),de   ; save block*
06CC   5E                     LD   e,(hl)   ; de = arg_list*
06CD   23                     INC   hl   
06CE   56                     LD   d,(hl)   
06CF   23                     INC   hl   
06D0   EB                     EX   de,hl   ; hl = arg_list*
06D1   ED 5B 00 4D            LD   de,(vTemp1)   ; restore de = block*
06D5   7D                     LD   a,l   ; if arg_list* == null a = 0
06D6   B4                     OR   h   
06D7   20 03                  JR   nz,goLambda4   
06D9   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06DA   18 0F                  JR   goLambda8   
06DC                GOLAMBDA4:      ; allocate locals
06DC   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
06DD   7E                     LD   a,(hl)   
06DE   18 03                  JR   goLambda6   
06E0                GOLAMBDA5:      ; loop
06E0   3B                     DEC   sp   
06E1   3B                     DEC   sp   
06E2   3D                     DEC   a   
06E3                GOLAMBDA6:      
06E3   B7                     OR   a   
06E4   20 FA                  JR   nz,goLambda5   ; end loop
06E6                GOLAMBDA7:      
06E6   2B                     DEC   hl   ; a = num_args* x 2
06E7   7E                     LD   a,(hl)   
06E8   23                     INC   hl   
06E9   23                     INC   hl   
06EA   87                     ADD   a,a   ; a *= 2
06EB                GOLAMBDA8:      
06EB   C5                     PUSH   bc   ; push IP
06EC   44 4D                  LD   bc,hl   
06EE   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06F1   85                     ADD   a,l   
06F2   6F                     LD   l,a   
06F3   39                     ADD   hl,sp   
06F4   18 92                  JR   goBlock2   
06F6                HASH:        
06F6                HEXNUM:      
06F6   21 00 00               LD   hl,0   ; Clear hl to accept the number
06F9                HEXNUM1:      
06F9   03                     INC   bc   
06FA   0A                     LD   a,(bc)   ; Get the character which is a numeral
06FB   CB 77                  BIT   6,a   ; is it uppercase alpha?
06FD   28 02                  JR   z,hexnum2   ; no a decimal
06FF   D6 07                  SUB   7   ; sub 7  to make $a - $F
0701                HEXNUM2:      
0701   D6 30                  SUB   $30   ; form decimal digit
0703   DA 81 07               JP   c,num2   
0706   FE 10                  CP   $0F+1   
0708   D2 81 07               JP   nc,num2   
070B   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
070C   29                     ADD   hl,hl   ; 4X
070D   29                     ADD   hl,hl   ; 8X
070E   29                     ADD   hl,hl   ; 16X
070F   85                     ADD   a,l   ; add into bottom of hl
0710   6F                     LD   l,a   
0711   18 E6                  JR   hexnum1   
0713                UPCASE:      
0713   0A                     LD   a,(bc)   ; a = identifier char
0714   D6 41                  SUB   "A"   ; "A" = 0
0716   18 05                  JR   ident1   
0718                LOWCASE:      
0718   0A                     LD   a,(bc)   
0719   D6 61                  SUB   "a"   
071B   C6 1A                  ADD   a,26   
071D                IDENT1:      
071D   87                     ADD   a,a   ; l = a * 2
071E   6F                     LD   l,a   
071F   26 4C                  LD   h,msb(vars)   
0721   22 F2 4C               LD   (vPointer),hl   ; store address in setter
0724   5E                     LD   e,(hl)   
0725   23                     INC   hl   
0726   56                     LD   d,(hl)   
0727   D5                     PUSH   de   
0728   DD E9                  JP   (ix)   
072A                             ; if
072A                             ; condition then -- value
072A                QUESTION:      
072A                IF:          
072A   03                     INC   bc   
072B   0A                     LD   a,(bc)   
072C   FE 3F                  CP   "?"   
072E   28 06                  JR   z,ifte   
0730   0B                     DEC   bc   
0731   11 00 00               LD   de,NUL   ; NUL pointer for else
0734   18 01                  JR   ifte1   
0736                             ; ifte
0736                             ; condition then else -- value
0736                IFTE:        
0736   D1                     POP   de   ; de = else
0737                IFTE1:       
0737   E1                     POP   hl   ; hl = then
0738   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0739   7C                     LD   a,h   
073A   B5                     OR   l   
073B   E1                     POP   hl   ; hl = then
073C   CA 51 06               JP   z,go1   ; if z de = else
073F   EB                     EX   de,hl   ; condition = false, de = then
0740   C3 51 06               JP   go1   
0743                STAR:        
0743                MUL:         
0743   D1                     POP   de   ; get first value
0744   E1                     POP   hl   
0745                MUL2:        
0745   C5                     PUSH   bc   ; Preserve the IP
0746   44 4D                  LD   bc,hl   ; bc = 2nd value
0748   21 00 00               LD   hl,0   
074B   3E 10                  LD   a,16   
074D                MUL3:        
074D   29                     ADD   hl,hl   
074E   CB 13                  RL   e   
0750   CB 12                  RL   d   
0752   30 04                  JR   nc,$+6   
0754   09                     ADD   hl,bc   
0755   30 01                  JR   nc,$+3   
0757   13                     INC   de   
0758   3D                     DEC   a   
0759   20 F2                  JR   nz,mul3   
075B   C1                     POP   bc   ; Restore the IP
075C   C3 96 03               JP   add3   
075F                NUM:         
075F   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0762   0A                     LD   a,(bc)   ; Get numeral or -
0763   FE 2D                  CP   "-"   
0765   20 01                  JR   nz,num0   
0767   03                     INC   bc   ; move to next char, no flags affected
0768                NUM0:        
0768   08                     EX   af,af'   ; save zero flag = 0 for later
0769                NUM1:        
0769   0A                     LD   a,(bc)   ; read digit
076A   D6 30                  SUB   "0"   ; less than 0?
076C   38 13                  JR   c,num2   ; not a digit, exit loop
076E   FE 0A                  CP   10   ; greater that 9?
0770   30 0F                  JR   nc,num2   ; not a digit, exit loop
0772   03                     INC   bc   ; inc IP
0773   54 5D                  LD   de,hl   ; multiply hl * 10
0775   29                     ADD   hl,hl   
0776   29                     ADD   hl,hl   
0777   19                     ADD   hl,de   
0778   29                     ADD   hl,hl   
0779   85                     ADD   a,l   ; add digit in a to hl
077A   6F                     LD   l,a   
077B   3E 00                  LD   a,0   
077D   8C                     ADC   a,h   
077E   67                     LD   h,a   
077F   18 E8                  JR   num1   
0781                NUM2:        
0781   0B                     DEC   bc   
0782   08                     EX   af,af'   ; restore zero flag
0783   20 07                  JR   nz,num3   
0785   EB                     EX   de,hl   ; negate the value of hl
0786   21 00 00               LD   hl,0   
0789   B7                     OR   a   ; jump to sub2
078A   ED 52                  SBC   hl,de   
078C                NUM3:        
078C   E5                     PUSH   hl   ; Put the number on the stack
078D   DD E9                  JP   (ix)   ; and process the next character
078F                UNDERSCORE:      
078F                REMAIN:      
078F   2A F4 4C               LD   hl,(vRemain)   
0792   E5                     PUSH   hl   
0793   DD E9                  JP   (ix)   
0795                RPAREN:      
0795   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0798   FD 46 09               LD   b,(iy+9)   
079B   DD E9                  JP   (ix)   
079D                             ; arg_list* block* -- ptr
079D                SEMICOLON:      
079D   D1                     POP   de   ; de = block* hl = heap*
079E   2A F0 4C               LD   hl,(vHeapPtr)   
07A1   AF                     XOR   a   
07A2   77                     LD   (hl),a   ; compile null partial_array*
07A3   23                     INC   hl   
07A4   77                     LD   (hl),a   
07A5   23                     INC   hl   
07A6   73                     LD   (hl),e   ; compile block*
07A7   23                     INC   hl   
07A8   72                     LD   (hl),d   
07A9   23                     INC   hl   
07AA   D1                     POP   de   ; de = block*
07AB   73                     LD   (hl),e   ; compile arg_list*
07AC   23                     INC   hl   
07AD   72                     LD   (hl),d   
07AE   23                     INC   hl   
07AF   ED 5B F0 4C            LD   de,(vHeapPtr)   ; return lambda*
07B3   D5                     PUSH   de   
07B4   22 F0 4C               LD   (vHeapPtr),hl   ; heap* += 4
07B7   DD E9                  JP   (ix)   
07B9                             ; shiftLeft
07B9                             ; value count -- value2          shift left count places
07B9                SHIFTLEFT:      
07B9   50 59                  LD   de,bc   ; save IP
07BB   C1                     POP   bc   ; bc = count
07BC   41                     LD   b,c   ; b = loop counter
07BD   E1                     POP   hl   
07BE   04                     INC   b   ; test for counter=0 case
07BF   18 01                  JR   shiftLeft2   
07C1                SHIFTLEFT1:      
07C1   29                     ADD   hl,hl   ; left shift hl
07C2                SHIFTLEFT2:      
07C2   10 FD                  DJNZ   shiftLeft1   
07C4   E5                     PUSH   hl   
07C5   42 4B                  LD   bc,de   ; restore IP
07C7   DD E9                  JP   (ix)   
07C9                             ; shiftRight
07C9                             ; value count -- value2          shift left count places
07C9                SHIFTRIGHT:      
07C9   50 59                  LD   de,bc   ; save IP
07CB   C1                     POP   bc   ; bc = count
07CC   41                     LD   b,c   ; b = loop counter
07CD   E1                     POP   hl   
07CE   04                     INC   b   ; test for counter=0 case
07CF   18 04                  JR   shiftRight2   
07D1                SHIFTRIGHT1:      
07D1   CB 3C                  SRL   h   ; right shift hl
07D3   CB 1D                  RR   l   
07D5                SHIFTRIGHT2:      
07D5   10 FA                  DJNZ   shiftRight1   
07D7   E5                     PUSH   hl   
07D8   42 4B                  LD   bc,de   ; restore IP
07DA   DD E9                  JP   (ix)   
07DC                             ; string
07DC                             ; -- ptr                        ; points to start of string chars,
07DC                             ; length is stored at start - 2 bytes
07DC                DBLQUOTE:      
07DC                STRING:      
07DC   2A F0 4C               LD   hl,(vHeapPtr)   ; hl = heap*
07DF   23                     INC   hl   ; skip length field to start
07E0   23                     INC   hl   
07E1   E5                     PUSH   hl   ; save start of string
07E2   03                     INC   bc   ; point to next char
07E3   18 03                  JR   string2   
07E5                STRING1:      
07E5   77                     LD   (hl),a   
07E6   23                     INC   hl   ; increase count
07E7   03                     INC   bc   ; point to next char
07E8                STRING2:      
07E8   0A                     LD   a,(bc)   
07E9   FE 22                  CP   DQUOTE   ; " is the string terminator
07EB   28 04                  JR   z,string3   
07ED   FE 60                  CP   "`"   ; ` is the string terminator used in testing
07EF   20 F4                  JR   nz,string1   
07F1                STRING3:      
07F1   AF                     XOR   a   ; write NUL to terminate string
07F2   77                     LD   (hl),a   ; hl = end of string
07F3   23                     INC   hl   
07F4   22 F0 4C               LD   (vHeapPtr),hl   ; bump heap* to after end of string
07F7   2B                     DEC   hl   ; hl = end of string without terminator
07F8   D1                     POP   de   ; de = start of string
07F9   D5                     PUSH   de   ; return start of string
07FA   B7                     OR   a   ; hl = length bytes, de = start of string
07FB   ED 52                  SBC   hl,de   
07FD   EB                     EX   de,hl   
07FE   2B                     DEC   hl   ; write length bytes to length field at start - 2
07FF   72                     LD   (hl),d   
0800   2B                     DEC   hl   
0801   73                     LD   (hl),e   
0802   DD E9                  JP   (ix)   
0804                MINUS:       ; negative sign or subtract
0804   03                     INC   bc   ; check if sign of a number
0805   0A                     LD   a,(bc)   
0806   0B                     DEC   bc   
0807   FE 30                  CP   "0"   
0809   38 05                  JR   c,sub   
080B   FE 3A                  CP   "9"+1   
080D   DA 3E 03               JP   c,num_   
0810                SUB:         ; Subtract the value 2nd on stack from top of stack
0810   03                     INC   bc   
0811   FE 2D                  CP   "-"   
0813   20 05                  JR   nz,sub1   
0815   E1                     POP   hl   
0816   2B                     DEC   hl   
0817   C3 8C 04               JP   assign0   
081A                SUB1:        
081A   0B                     DEC   bc   
081B   D1                     POP   de   
081C   E1                     POP   hl   
081D   B7                     OR   a   
081E   ED 52                  SBC   hl,de   
0820   C3 96 03               JP   add3   
0823                ERROR1:      
0823   21 01 00               LD   hl,1   ; error 1: unknown command
0826   E5                     PUSH   hl   
0827   C3 57 0C               JP   error   
082A                COMMENT:      
082A   03                     INC   bc   ; point to next char
082B   0A                     LD   a,(bc)   
082C   FE 20                  CP   " "   ; terminate on any char less than SP
082E   30 FA                  JR   nc,comment   
0830   0B                     DEC   bc   
0831   DD E9                  JP   (ix)   
0833                COMMAND_A:      
0833   CD DC 0A               CALL   jumpTable   
0836   62                     DB   "b"   
0837   3F 08                  DW   absolute   
0839   64                     DB   "d"   
083A   4C 08                  DW   addrOf   
083C   00                     DB   NUL   
083D   23 08                  DW   error1   
083F                             ; /ab absolute
083F                             ; num -- num
083F                ABSOLUTE:      
083F   E1                     POP   hl   
0840   CB 7C                  BIT   7,h   
0842   C8                     RET   z   
0843   AF                     XOR   a   
0844   95                     SUB   l   
0845   6F                     LD   l,a   
0846   9F                     SBC   a,a   
0847   94                     SUB   h   
0848   67                     LD   h,a   
0849   E5                     PUSH   hl   
084A   DD E9                  JP   (ix)   
084C                             ; /ad addrOf
084C                             ; char -- addr
084C                ADDROF:      
084C   E1                     POP   hl   ; a = char
084D   7D                     LD   a,l   
084E   FE 7B                  CP   "z"+1   ; if a > z then exit
0850   30 19                  JR   nc,addrOf2   
0852   D6 41                  SUB   "A"   ; a - 65
0854   38 15                  JR   c,addrOf2   ; if < A then exit
0856   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0858   38 06                  JR   c,addrOf1   
085A   D6 06                  SUB   "a"-("Z"+1)   
085C   FE 1A                  CP   "Z"-"A"+1   
085E   38 0B                  JR   c,addrOf2   ; if < a then exit
0860                ADDROF1:      
0860   87                     ADD   a,a   ; double a
0861   21 00 4C               LD   hl,VARS   ; hl = VARS + a
0864   85                     ADD   a,l   
0865   6F                     LD   l,a   
0866   3E 00                  LD   a,0   
0868   8C                     ADC   a,h   
0869   67                     LD   h,a   
086A   E5                     PUSH   hl   
086B                ADDROF2:      
086B   DD E9                  JP   (ix)   
086D                COMMAND_B:      
086D   CD DC 0A               CALL   jumpTable   
0870   61                     DB   "a"   
0871   85 08                  DW   bufferArray   
0873   63                     DB   "c"   
0874   92 09                  DW   bufferChar   
0876   6E                     DB   "n"   
0877   B9 08                  DW   bufferNumber   
0879   72                     DB   "r"   
087A   5E 09                  DW   break   
087C   73                     DB   "s"   
087D   78 09                  DW   bufferString   
087F   78                     DB   "x"   
0880   97 09                  DW   bufferXChars   
0882   00                     DB   NUL   
0883   23 08                  DW   error1   
0885                             ; /ba buffer array
0885                             ; array* --
0885                BUFFERARRAY:      
0885   CD 50 06               CALL   go   
0888   00 00                  DW   NUL   ; NUL closure
088A   8E 08                  DW   $+4   
088C   C2 0A                  DW   args1A2L   
088E   7B 24 61 2F 73 24 63 3D 20 30 24 62 3D 28 20 24 61 24 62 25 2F 62 64 20 24 62 2B 2B 20 24 62 20 24 63 3C 2F 62 72 20 29 5E 7D 00 .CSTR   "{$a/s$c= 0$b=( $a$b%/bd $b++ $b $c</br )^}"   ; block
08B9                             ; /bd buffer decimal
08B9                             ; value --
08B9                BUFFERNUMBER:      
08B9   3A E8 4C               LD   a,(vNumBase)   
08BC   FE 10                  CP   16   
08BE   28 66                  JR   z,bufferHex   ; else falls through
08C0                             ; /bd buffer decimal
08C0                             ; value --
08C0                BUFFERDEC:      
08C0   ED 5B EC 4C            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
08C4   D9                     EXX      
08C5   E1                     POP   hl   ; hl = value
08C6   CD DA 08               CALL   bufferDec0   
08C9   D9                     EXX      ; de = buffer*' bc = IP
08CA   3E 20                  LD   a," "   ; append space to buffer
08CC   12                     LD   (de),a   
08CD   1C                     INC   e   ; buffer*++, wraparound
08CE   CC C5 0A               CALL   z,flushBuffer   
08D1   2A EC 4C               LD   hl,(vBufPtr)   ; hl = buffer*
08D4   ED 53 EC 4C            LD   (vBufPtr),de   ; update buffer* with buffer*'
08D8   DD E9                  JP   (ix)   
08DA                             ; hl = value
08DA                             ; de' = buffer*
08DA                             ; a, bc, de, hl destroyed
08DA                BUFFERDEC0:      
08DA   CB 7C                  BIT   7,h   
08DC   28 0C                  JR   z,bufferDec1   
08DE   D9                     EXX      
08DF   3E 2D                  LD   a,"-"   
08E1   12                     LD   (de),a   
08E2   13                     INC   de   
08E3   D9                     EXX      
08E4   AF                     XOR   a   
08E5   95                     SUB   l   
08E6   6F                     LD   l,a   
08E7   9F                     SBC   a,a   
08E8   94                     SUB   h   
08E9   67                     LD   h,a   
08EA                BUFFERDEC1:      
08EA   0E 00                  LD   c,0   ; leading zeros flag = false
08EC   11 F0 D8               LD   de,-10000   
08EF   CD 0A 09               CALL   bufferDec2   
08F2   11 18 FC               LD   de,-1000   
08F5   CD 0A 09               CALL   bufferDec2   
08F8   11 9C FF               LD   de,-100   
08FB   CD 0A 09               CALL   bufferDec2   
08FE   1E F6                  LD   e,-10   
0900   CD 0A 09               CALL   bufferDec2   
0903   0C                     INC   c   ; flag = true for at least digit
0904   1E FF                  LD   e,-1   
0906   CD 0A 09               CALL   bufferDec2   
0909   C9                     RET      
090A                BUFFERDEC2:      
090A   06 2F                  LD   b,"0"-1   
090C                BUFFERDEC3:      
090C   04                     INC   b   
090D   19                     ADD   hl,de   
090E   38 FC                  JR   c,bufferDec3   
0910   ED 52                  SBC   hl,de   
0912   3E 30                  LD   a,"0"   
0914   B8                     CP   b   
0915   20 05                  JR   nz,bufferDec4   
0917   AF                     XOR   a   
0918   B1                     OR   c   
0919   C8                     RET   z   
091A   18 01                  JR   bufferDec5   
091C                BUFFERDEC4:      
091C   0C                     INC   c   
091D                BUFFERDEC5:      
091D   78                     LD   a,b   
091E   D9                     EXX      
091F   12                     LD   (de),a   
0920   1C                     INC   e   
0921   CC C5 0A               CALL   z,flushBuffer   
0924   D9                     EXX      
0925   C9                     RET      
0926                             ; /bh buffer hex
0926                             ; value --
0926                BUFFERHEX:      
0926   E1                     POP   hl   ; hl = value
0927   ED 5B EC 4C            LD   de,(vBufPtr)   
092B   3E 23                  LD   a,"#"   ; # prefix
092D   12                     LD   (de),a   
092E   1C                     INC   e   ; buffer*++, wraparound
092F   CC C5 0A               CALL   z,flushBuffer   
0932   7C                     LD   a,h   
0933   CD 47 09               CALL   bufferHex1   
0936   7D                     LD   a,l   
0937   CD 47 09               CALL   bufferHex1   
093A   3E 20                  LD   a," "   ; append space to buffer
093C   12                     LD   (de),a   
093D   1C                     INC   e   ; buffer*++, wraparound
093E   CC C5 0A               CALL   z,flushBuffer   
0941   ED 53 EC 4C            LD   (vBufPtr),de   
0945   DD E9                  JP   (ix)   
0947                BUFFERHEX1:      
0947   F5                     PUSH   af   
0948   1F                     RRA      
0949   1F                     RRA      
094A   1F                     RRA      
094B   1F                     RRA      
094C   CD 50 09               CALL   bufferHex2   
094F   F1                     POP   af   
0950                BUFFERHEX2:      
0950   E6 0F                  AND   0x0F   
0952   C6 90                  ADD   a,0x90   
0954   27                     DAA      
0955   CE 40                  ADC   a,0x40   
0957   27                     DAA      
0958   12                     LD   (de),a   
0959   1C                     INC   e   ; buffer*++, wraparound
095A   CC C5 0A               CALL   z,flushBuffer   
095D   C9                     RET      
095E                             ; /br break from loop
095E                             ; --
095E                BREAK:       
095E   E1                     POP   hl   
095F   7D                     LD   a,l   
0960   B4                     OR   h   
0961   28 02                  JR   z,break1   
0963   DD E9                  JP   (ix)   
0965                BREAK1:      
0965   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0967   FD 54                  LD   d,iyh   
0969   21 08 00               LD   hl,8   
096C   19                     ADD   hl,de   
096D   23                     INC   hl   
096E   23                     INC   hl   
096F   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0972   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0975   C3 3B 05               JP   blockEnd   
0978                             ; /bs buffered string
0978                             ; string* --
0978                BUFFERSTRING:      
0978   E1                     POP   hl   ; hl = string*
0979   ED 5B EC 4C            LD   de,(vBufPtr)   ; de = buffer*
097D   18 06                  JR   bufferString1   
097F                BUFFERSTRING0:      
097F   12                     LD   (de),a   ; a -> buffer*
0980   1C                     INC   e   ; buffer*++, wraparound
0981   CC C5 0A               CALL   z,flushBuffer   
0984   23                     INC   hl   
0985                BUFFERSTRING1:      
0985   7E                     LD   a,(hl)   ; a <- string*
0986   B7                     OR   a   ; if NUL exit loop
0987   20 F6                  JR   nz,bufferString0   
0989   2A EC 4C               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
098C   ED 53 EC 4C            LD   (vBufPtr),de   ; save buffer*' in pointer
0990   DD E9                  JP   (ix)   
0992                             ; /bc buffer char
0992                             ; char --
0992                BUFFERCHAR:      
0992   21 01 00               LD   hl,1   
0995   18 01                  JR   bufferXChars0   
0997                             ; /bx buffered x chars
0997                             ; char length --
0997                BUFFERXCHARS:      
0997   E1                     POP   hl   ; hl = length
0998                BUFFERXCHARS0:      
0998   D1                     POP   de   ; a' = char
0999   7B                     LD   a,e   
099A   08                     EX   af,af'   
099B   ED 5B EC 4C            LD   de,(vBufPtr)   ; de = buffer*
099F   18 08                  JR   bufferXChars2   
09A1                BUFFERXCHARS1:      
09A1   08                     EX   af,af'   
09A2   12                     LD   (de),a   
09A3   08                     EX   af,af'   
09A4   1C                     INC   e   ; buffer*++, wraparound
09A5   CC C5 0A               CALL   z,flushBuffer   
09A8   2B                     DEC   hl   
09A9                BUFFERXCHARS2:      
09A9   7D                     LD   a,l   
09AA   B4                     OR   h   
09AB   20 F4                  JR   nz,bufferXChars1   
09AD   ED 53 EC 4C            LD   (vBufPtr),de   ; save buffer*'
09B1   DD E9                  JP   (ix)   
09B3                COMMAND_I:      
09B3   CD DC 0A               CALL   jumpTable   
09B6   6E                     DB   "n"   
09B7   8D 0A                  DW   input   
09B9   76                     DB   "v"   
09BA   C2 03                  DW   invert   
09BC   00                     DB   NUL   
09BD   23 08                  DW   error1   
09BF                COMMAND_P:      
09BF   CD DC 0A               CALL   jumpTable   
09C2   61                     DB   "a"   
09C3   D1 09                  DW   partial   
09C5   62                     DB   "b"   
09C6   F1 09                  DW   printBuffer   
09C8   63                     DB   "c"   
09C9   14 0A                  DW   printChars   
09CB   6B                     DB   "k"   
09CC   26 0A                  DW   printStack   
09CE   00                     DB   NUL   
09CF   23 08                  DW   error1   
09D1                             ; partial
09D1                             ; array* lambda* -- lambda1*
09D1                PARTIAL:      
09D1   E1                     POP   hl   ; h1 = lambda*
09D2   ED 5B F0 4C            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
09D6   ED 43 00 4D            LD   (vTemp1),bc   ; save IP
09DA   01 06 00               LD   bc,6   ; bc = count
09DD   ED B0                  LDIR      ; clone lambda
09DF   ED 4B 00 4D            LD   bc,(vTemp1)   ; restore IP
09E3   2A F0 4C               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
09E6   ED 53 F0 4C            LD   (vHeapPtr),de   ; heap* += 6
09EA   D1                     POP   de   ; de = array*
09EB   E5                     PUSH   hl   ; return partial_array*
09EC   73                     LD   (hl),e   ; compile array*
09ED   23                     INC   hl   
09EE   72                     LD   (hl),d   
09EF   DD E9                  JP   (ix)   
09F1                             ; /pb printBuffer
09F1                             ; --
09F1                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
09F1                PRINTBUFFER:      
09F1   CD 50 06               CALL   go   
09F4   00 00                  DW   NUL   ; NUL closure
09F6   FA 09                  DW   $+4   
09F8   B7 0A                  DW   args1A0L   
09FA   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0A14                             ; printChars
0A14                             ; char* len --
0A14                PRINTCHARS:      
0A14   E1                     POP   hl   ; hl = count
0A15   D1                     POP   de   ; de = char*
0A16   CD 21 0A               CALL   printChars2   
0A19   DD E9                  JP   (ix)   
0A1B                PRINTCHARS1:      
0A1B   1A                     LD   a,(de)   ; print char at char*
0A1C   CD 85 00               CALL   putchar   
0A1F   13                     INC   de   ; char*++
0A20   2B                     DEC   hl   ; count--
0A21                PRINTCHARS2:      
0A21   7D                     LD   a,l   ; count == 0?
0A22   B4                     OR   h   
0A23   C8                     RET   z   
0A24   18 F5                  JR   printChars1   ; if not loop
0A26                             ; /pk print stack
0A26                             ; --
0A26                PRINTSTACK:      
0A26                             ;     ld (vTemp1),bc
0A26                             ;     call printStr
0A26                             ;     .cstr "=> "
0A26                             ;     ld hl,STACK
0A26                             ;     sbc hl,sp
0A26                             ;     srl h
0A26                             ;     rr l
0A26                             ;     ld bc,hl
0A26                             ;     ld hl,STACK
0A26                             ;     jr printStack2
0A26                             ; printStack1:
0A26                             ;     dec bc
0A26                             ;     dec hl
0A26                             ;     ld d,(hl)
0A26                             ;     dec hl
0A26                             ;     ld e,(hl)
0A26                             ;     ex de,hl
0A26                             ;     call prthex
0A26                             ;     ex de,hl
0A26                             ;     ld a," "
0A26                             ;     call putchar
0A26                             ; printStack2:
0A26                             ;     ld a,c
0A26                             ;     or b
0A26                             ;     jr nz,printStack1
0A26                             ;     call prompt
0A26                             ;     ld bc,(vTemp1)
0A26   DD E9                  JP   (ix)   
0A28                SIZE:        
0A28   E1                     POP   hl   
0A29   2B                     DEC   hl   ; skip magic byte
0A2A   2B                     DEC   hl   ; skip type tag
0A2B   2B                     DEC   hl   ; msb size
0A2C   56                     LD   d,(hl)   
0A2D   2B                     DEC   hl   ; lsb size
0A2E   5E                     LD   e,(hl)   
0A2F   D5                     PUSH   de   
0A30   DD E9                  JP   (ix)   
0A32                COMMAND_V:      
0A32   CD DC 0A               CALL   jumpTable   
0A35   62                     DB   "b"   
0A36   56 0A                  DW   varBufPtr   
0A38   68                     DB   "h"   
0A39   5F 0A                  DW   varHeapPtr   
0A3B   74                     DB   "t"   
0A3C   68 0A                  DW   varTIBPtr   
0A3E   42                     DB   "B"   
0A3F   47 0A                  DW   constBufStart   
0A41   54                     DB   "T"   
0A42   51 0A                  DW   constTIBStart   
0A44   00                     DB   NUL   
0A45   23 08                  DW   error1   
0A47                CONSTBUFSTART:      
0A47   11 00 4B               LD   de,BUF   
0A4A   18 28                  JR   constant   
0A4C                CONSTHEAPSTART:      
0A4C   11 1E 4D               LD   de,HEAP   
0A4F   18 23                  JR   constant   
0A51                CONSTTIBSTART:      
0A51   11 00 4A               LD   de,TIB   
0A54   18 1E                  JR   constant   
0A56                VARBUFPTR:      
0A56   ED 5B EC 4C            LD   de,(vBufPtr)   
0A5A   21 EC 4C               LD   hl,vBufPtr   
0A5D   18 12                  JR   variable   
0A5F                VARHEAPPTR:      
0A5F   ED 5B F0 4C            LD   de,(vHeapPtr)   
0A63   21 F0 4C               LD   hl,vHeapPtr   
0A66   18 09                  JR   variable   
0A68                VARTIBPTR:      
0A68   ED 5B EA 4C            LD   de,(vTIBPtr)   
0A6C   21 EA 4C               LD   hl,vTIBPtr   
0A6F   18 00                  JR   variable   
0A71                VARIABLE:      
0A71   22 F2 4C               LD   (vPointer),hl   
0A74                CONSTANT:      
0A74   D5                     PUSH   de   
0A75   DD E9                  JP   (ix)   
0A77                CHARS:       
0A77   21 01 00               LD   hl,1   
0A7A                CHARS1:      
0A7A   22 E6 4C               LD   (vDataWidth),hl   
0A7D   DD E9                  JP   (ix)   
0A7F                DECIMAL:      
0A7F   21 0A 00               LD   hl,10   
0A82                DECIMAL1:      
0A82   22 E8 4C               LD   (vNumBase),hl   
0A85   DD E9                  JP   (ix)   
0A87                HEXADECIMAL:      
0A87   21 10 00               LD   hl,16   
0A8A   C3 82 0A               JP   decimal1   
0A8D                             ; Z80 port input
0A8D                             ; port -- value
0A8D                INPUT:       
0A8D   E1                     POP   hl   
0A8E   59                     LD   e,c   ; save IP
0A8F   4D                     LD   c,l   
0A90   ED 68                  IN   l,(c)   
0A92   26 00                  LD   h,0   
0A94   4B                     LD   c,e   ; restore IP
0A95   E5                     PUSH   hl   
0A96   DD E9                  JP   (ix)   
0A98                KEY:         
0A98   CD 81 00               CALL   getchar   
0A9B   26 00                  LD   h,0   
0A9D   6F                     LD   l,a   
0A9E   E5                     PUSH   hl   
0A9F   DD E9                  JP   (ix)   
0AA1                             ; Z80 port output
0AA1                             ; value port --
0AA1                OUTPUT:      
0AA1   E1                     POP   hl   
0AA2   59                     LD   e,c   ; save IP
0AA3   4D                     LD   c,l   
0AA4   E1                     POP   hl   
0AA5   ED 69                  OUT   (c),l   
0AA7   4B                     LD   c,e   ; restore IP
0AA8   DD E9                  JP   (ix)   
0AAA                NUMBERS:      
0AAA   21 02 00               LD   hl,2   
0AAD   C3 7A 0A               JP   chars1   
0AB0                             ; 
0AB0                             ; 
0AB0                             ; 
0AB0                             ; 
0AB0                FILTER:      
0AB0                MAP:         
0AB0                SCAN:        
0AB0   DD E9                  JP   (ix)   
0AB2                             ;*******************************************************************
0AB2                             ; reusable arglists
0AB2                             ;*******************************************************************
0AB2                ARGS0A1L_:      ; zero args one local
0AB2   01                     DB   1   ; num args + locals
0AB3   01                     DB   1   ; num locals
0AB4                ARGS0A1L:      
0AB4   61                     DB   "a"   
0AB5                ARGS1A0L_:      ; one arg zero locals
0AB5   01                     DB   1   ; num args + locals
0AB6   00                     DB   0   ; num locals
0AB7                ARGS1A0L:      
0AB7   61                     DB   "a"   
0AB8                ARGS1A1L_:      ; one arg one local
0AB8   02                     DB   2   ; num args + locals
0AB9   01                     DB   1   ; num locals
0ABA                ARGS1A1L:      
0ABA   61 62                  DB   "ab"   
0ABC                ARGS2A0L_:      ; two args zero locals
0ABC   02                     DB   2   ; num args + locals
0ABD   00                     DB   0   ; num locals
0ABE                ARGS2A0L:      
0ABE   61 62                  DB   "ab"   
0AC0                ARGS1A2L_:      ; one arg two locals
0AC0   03                     DB   3   ; num args + locals
0AC1   02                     DB   2   ; num locals
0AC2                ARGS1A2L:      
0AC2   61 62 63               DB   "abc"   
0AC5                             ;*******************************************************************
0AC5                             ; general routines
0AC5                             ;*******************************************************************
0AC5                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0AC5                FLUSHBUFFER:      
0AC5   F5                     PUSH   af   
0AC6   D5                     PUSH   de   
0AC7   E5                     PUSH   hl   
0AC8   2A EC 4C               LD   hl,(vBufPtr)   
0ACB   11 00 4B               LD   de,BUF   
0ACE   ED 53 EC 4C            LD   (vBufPtr),de   
0AD2   B7                     OR   a   
0AD3   ED 52                  SBC   hl,de   
0AD5   CD 21 0A               CALL   printChars2   
0AD8   E1                     POP   hl   
0AD9   D1                     POP   de   
0ADA   F1                     POP   af   
0ADB   C9                     RET      
0ADC                             ; followed by a table
0ADC                             ; db char
0ADC                             ; dw addr
0ADC                             ; the final item must have char == NUL
0ADC                JUMPTABLE:      
0ADC   03                     INC   bc   
0ADD   E1                     POP   hl   
0ADE                JUMPTABLE0:      
0ADE   AF                     XOR   a   
0ADF   BE                     CP   (hl)   
0AE0   28 09                  JR   z,jumpTable1   
0AE2   0A                     LD   a,(bc)   
0AE3   BE                     CP   (hl)   
0AE4   28 06                  JR   z,jumpTable2   
0AE6   23                     INC   hl   
0AE7   23                     INC   hl   
0AE8   23                     INC   hl   
0AE9   18 F3                  JR   jumpTable0   
0AEB                JUMPTABLE1:      
0AEB   0B                     DEC   bc   
0AEC                JUMPTABLE2:      
0AEC   23                     INC   hl   
0AED   5E                     LD   e,(hl)   
0AEE   23                     INC   hl   
0AEF   56                     LD   d,(hl)   
0AF0   EB                     EX   de,hl   
0AF1   E9                     JP   (hl)   
0AF2                PRTSTR0:      
0AF2   CD 85 00               CALL   putchar   
0AF5   23                     INC   hl   
0AF6                PRTSTR:      
0AF6   7E                     LD   a,(hl)   
0AF7   B7                     OR   a   
0AF8   20 F8                  JR   nz,prtstr0   
0AFA   C9                     RET      
0AFB                             ; **************************************************************************
0AFB                             ; calculate nesting value
0AFB                             ; a is char to be tested,
0AFB                             ; e is the nesting value (initially 0)
0AFB                             ; e is increased by ( and [
0AFB                             ; e is decreased by ) and ]
0AFB                             ; e has its bit 7 toggled by `
0AFB                             ; limited to 127 levels
0AFB                             ; **************************************************************************
0AFB                NESTING:      
0AFB   FE 22                  CP   DQUOTE   ; quote char
0AFD   28 06                  JR   z,nesting0   
0AFF   FE 60                  CP   "`"   ; quote char
0B01   28 02                  JR   z,nesting0   
0B03   18 0A                  JR   nesting1   
0B05                NESTING0:      
0B05   CB 7B                  BIT   7,e   
0B07   28 03                  JR   z,nesting1a   
0B09   CB BB                  RES   7,e   
0B0B   C9                     RET      
0B0C                NESTING1A:      
0B0C   CB FB                  SET   7,e   
0B0E   C9                     RET      
0B0F                NESTING1:      
0B0F   CB 7B                  BIT   7,e   
0B11   C0                     RET   nz   
0B12   FE 7B                  CP   "{"   
0B14   28 08                  JR   z,nesting2   
0B16   FE 5B                  CP   "["   
0B18   28 04                  JR   z,nesting2   
0B1A   FE 28                  CP   "("   
0B1C   20 02                  JR   nz,nesting3   
0B1E                NESTING2:      
0B1E   1C                     INC   e   
0B1F   C9                     RET      
0B20                NESTING3:      
0B20   FE 7D                  CP   "}"   
0B22   28 07                  JR   z,nesting4   
0B24   FE 5D                  CP   "]"   
0B26   28 03                  JR   z,nesting4   
0B28   FE 29                  CP   ")"   
0B2A   C0                     RET   nz   
0B2B                NESTING4:      
0B2B   1D                     DEC   e   
0B2C   C9                     RET      
0B2D                PROMPT:      
0B2D   CD 3D 0B               CALL   printStr   
0B30   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0B35   C9                     RET      
0B36                CRLF:        
0B36   CD 3D 0B               CALL   printStr   
0B39   0D 0A 00               .CSTR   "\r\n"   
0B3C   C9                     RET      
0B3D                             ; prints a null teminated string
0B3D                             ; the string should be immediately following the call
0B3D                PRINTSTR:      
0B3D   E3                     EX   (sp),hl   ; swap			
0B3E   CD F6 0A               CALL   prtstr   
0B41   23                     INC   hl   ; inc past NUL
0B42   E3                     EX   (sp),hl   ; put it back	
0B43   C9                     RET      
0B44                TITLESTR:      
0B44   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.0\r\n",0,0,0   
0B58                INIT:        
0B58   21 44 0B               LD   hl,titleStr   
0B5B   11 0A 4D               LD   de,warmBuf   
0B5E   06 14                  LD   b,20   
0B60                INIT1:       
0B60   1A                     LD   a,(de)   
0B61   BE                     CP   (hl)   
0B62   20 17                  JR   nz,coldBoot0   
0B64   13                     INC   de   
0B65   23                     INC   hl   
0B66   10 F8                  DJNZ   init1   
0B68                WARMBOOT:      
0B68   ED 4B F6 4C            LD   bc,(vSavedIP)   ; restore IP
0B6C   ED 7B F8 4C            LD   sp,(vSavedSP)   ; restore SP
0B70   DD 2A FA 4C            LD   ix,(vSavedNext)   ; restore Next
0B74   FD 2A FC 4C            LD   iy,(vSavedBP)   ; restore BP
0B78   C3 A9 0B               JP   start1   
0B7B                COLDBOOT0:      
0B7B   21 44 0B               LD   hl,titleStr   ; copy titleStr to warmBuf
0B7E   11 0A 4D               LD   de,warmBuf   
0B81   06 14                  LD   b,20   
0B83   ED B0                  LDIR      
0B85                COLDBOOT:      
0B85   21 80 01               LD   hl,isysVars   
0B88   11 E6 4C               LD   de,sysVars   
0B8B   01 10 00               LD   bc,8 * 2   
0B8E   ED B0                  LDIR      
0B90   21 00 4C               LD   hl,vars   ; 52 vars LO HI
0B93   06 34                  LD   b,26*2   
0B95   AF                     XOR   a   
0B96                COLDBOOT1:      
0B96   77                     LD   (hl),a   
0B97   23                     INC   hl   
0B98   10 FC                  DJNZ   coldBoot1   
0B9A   DD 2A EE 4C            LD   ix,(vNext)   
0B9E   FD 21 00 4A            LD   iy,STACK   
0BA2   C9                     RET      
0BA3                START:       
0BA3   31 00 4A               LD   sp,STACK   ; start Monty
0BA6   CD 58 0B               CALL   init   ; setups
0BA9                START1:      
0BA9   21 0A 4D               LD   hl,warmBuf   
0BAC   CD F6 0A               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0BAF                INTERPRET:      
0BAF   CD C5 0A               CALL   flushBuffer   
0BB2   CD 2D 0B               CALL   prompt   
0BB5   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0BB8   21 00 4A               LD   hl,TIB   
0BBB   22 EA 4C               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0BBE                INTERPRET2:      ; calculate nesting
0BBE   1E 00                  LD   e,0   ; initilize nesting value
0BC0   C5                     PUSH   bc   ; save offset into TIB,
0BC1                             ; bc is also the count of chars in TIB
0BC1   21 00 4A               LD   hl,TIB   ; hl is start of TIB
0BC4   18 0B                  JR   interpret4   
0BC6                INTERPRET3:      
0BC6   3E 33                  LD   a,"3"   
0BC8   CD 85 00               CALL   putchar   
0BCB   7E                     LD   a,(hl)   ; a = char in TIB
0BCC   23                     INC   hl   ; inc pointer into TIB
0BCD   0B                     DEC   bc   ; dec count of chars in TIB
0BCE   CD FB 0A               CALL   nesting   ; update nesting value
0BD1                INTERPRET4:      
0BD1   79                     LD   a,c   ; is count zero?
0BD2   B0                     OR   b   
0BD3   20 F1                  JR   nz,interpret3   ; if not loop
0BD5   C1                     POP   bc   ; restore offset into TIB
0BD6                INTERPRET5:      
0BD6   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0BD9   FE 20                  CP   $20   ; compare to space
0BDB   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0BDD   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0BDF                             ; ???? NEEDED?
0BDF   28 3B                  JR   z,interpret8   
0BE1   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0BE3   28 24                  JR   z,interpret7   ; if anything else its macro/control
0BE5   FE 05                  CP   CTRL_E   
0BE7   CA 7A 0C               JP   z,edit_   
0BEA   FE 08                  CP   CTRL_H   
0BEC   CA 6A 0C               JP   z,backSpace_   
0BEF   FE 0A                  CP   CTRL_J   
0BF1   CA 92 0C               JP   z,reEdit_   
0BF4   FE 13                  CP   CTRL_S   
0BF6   CA 95 0C               JP   z,printStack_   
0BF9                             ; DB     lsb(edit_)       ; ENQ ^E  5
0BF9                             ; DB     lsb(reedit_)     ; LF  ^J 10
0BF9                             ; DB     lsb(list_)       ; FF  ^L 12
0BF9                             ; DB     lsb(printStack_) ; DLE ^P 16
0BF9                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0BF9                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0BF9                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0BF9                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0BF9                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0BF9                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0BF9                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0BF9                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0BF9                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0BF9                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0BF9                INTERPRET5A:      
0BF9                             ; ld (vTIBPtr),bc
0BF9                             ; ld bc,(vTIBPtr)
0BF9   18 C3                  JR   interpret2   
0BFB                INTERPRET6:      
0BFB   21 00 4A               LD   hl,TIB   
0BFE   09                     ADD   hl,bc   
0BFF   77                     LD   (hl),a   ; store the character in textbuf
0C00   03                     INC   bc   
0C01   CD 85 00               CALL   putchar   ; echo character to screen
0C04   CD FB 0A               CALL   nesting   
0C07   18 CD                  JR   interpret5   ; wait for next character
0C09                INTERPRET7:      
0C09   21 00 4A               LD   hl,TIB   
0C0C   09                     ADD   hl,bc   
0C0D   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0C0F   23                     INC   hl   
0C10   36 0A                  LD   (hl),"\n"   
0C12   23                     INC   hl   
0C13   03                     INC   bc   
0C14   03                     INC   bc   
0C15   CD 36 0B               CALL   crlf   ; echo character to screen
0C18   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0C19   B7                     OR   a   
0C1A   20 BA                  JR   nz,interpret5   
0C1C                INTERPRET8:      
0C1C   21 00 4A               LD   hl,TIB   
0C1F   09                     ADD   hl,bc   
0C20   22 EA 4C               LD   (vTIBPtr),hl   
0C23   01 00 4A               LD   bc,TIB   
0C26   ED 43 F6 4C            LD   (vSavedIP),bc   ; save IP
0C2A   ED 73 F8 4C            LD   (vSavedSP),sp   ; save SP
0C2E   DD 22 FA 4C            LD   (vSavedNext),ix   ; save Next
0C32   FD 22 FC 4C            LD   (vSavedBP),iy   ; save BP
0C36   0B                     DEC   bc   
0C37                NEXT:        
0C37   03                     INC   bc   ; Increment the IP
0C38   0A                     LD   a,(bc)   ; Get the next character and dispatch
0C39   FE 20                  CP   " "   ; whitespace?
0C3B   28 FA                  JR   z,next   ; space? ignore
0C3D   38 09                  JR   c,next1   
0C3F   D6 20                  SUB   " "   
0C41   6F                     LD   l,a   ; index into table
0C42   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0C44   6E                     LD   l,(hl)   ; get low jump address
0C45   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0C47   E9                     JP   (hl)   ; Jump to routine
0C48                NEXT1:       
0C48   FE 00                  CP   NUL   ; end of input string?
0C4A   28 03                  JR   z,exit   
0C4C   C3 AF 0B               JP   interpret   ; no, other whitespace, macros?
0C4F                EXIT:        
0C4F   03                     INC   bc   
0C50   60 69                  LD   hl,bc   
0C52   E9                     JP   (hl)   
0C53                RUN:         
0C53   C1                     POP   bc   
0C54   0B                     DEC   bc   
0C55   DD E9                  JP   (ix)   
0C57                ERROR:       
0C57   CD 53 0C               CALL   run   
0C5A   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQUOTE,"Error ",DQUOTE,".s .",0   
0C67   C3 AF 0B               JP   interpret   
0C6A                BACKSPACE_:      
0C6A   79                     LD   a,c   
0C6B   B0                     OR   b   
0C6C   CA BE 0B               JP   z,interpret2   
0C6F   0B                     DEC   bc   
0C70   CD 3D 0B               CALL   printStr   
0C73   08 20 08 00            .CSTR   "\b \b"   
0C77   C3 BE 0B               JP   interpret2   
0C7A                             ; edit
0C7A                EDIT_:       
0C7A   CD 53 0C               CALL   run   
0C7D   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0C8F   C3 AF 0B               JP   interpret   
0C92                REEDIT_:      
0C92   C3 AF 0B               JP   interpret   
0C95                PRINTSTACK_:      
0C95   CD 53 0C               CALL   run   
0C98   2F 70 6B 00            .CSTR   "/pk"   
0C9C   C3 AF 0B               JP   interpret   
0C9F                             ; editDef:
0C9F                             ;     pop hl                      ; pop ret address
0C9F                             ;     ex (sp),hl                  ; swap with TOS
0C9F                             ;     push hl                     ; dup TOS
0C9F                             ;     ld a,l                      ; a = ident
0C9F                             ;     ld de,TIB                   ; de = start of TIB
0C9F                             ;     ld (vTIBPtr),de             ; update TIB*
0C9F                             ;     push ix                     ; save NEXT
0C9F                             ;     ld ix,editDef0              ; NEXT = editDef0
0C9F                             ;     jp lookupRef                ; convert letter into address
0C9F                             ; editDef0:
0C9F                             ;     ld e,(hl)                   ; de = (hl++)
0C9F                             ;     inc hl
0C9F                             ;     ld d,(hl)
0C9F                             ;     ld a,d                      ; de == 0 ?
0C9F                             ;     or e
0C9F                             ;     jr z,editDef4
0C9F                             ;     ld ix,editDef3              ; NEXT = editDef3
0C9F                             ;     ex de,hl
0C9F                             ;     ld a,(hl)
0C9F                             ;     cp "{"
0C9F                             ;     jr nz,editDef1
0C9F                             ;     jp editBlock0               ; convert letter into address
0C9F                             ; editDef1:
0C9F                             ;     cp "("
0C9F                             ;     jr nz,editDef2
0C9F                             ;     jp editBlock0               ; convert letter into address
0C9F                             ; editDef2:
0C9F                             ;     jp editLambda
0C9F                             ; editDef3:
0C9F                             ;     ld a," "                    ; write assign
0C9F                             ;     call writeChar
0C9F                             ;     pop hl                      ; a = ident
0C9F                             ;     ld a,l
0C9F                             ;     call writeChar
0C9F                             ;     ld a,"="                    ; write assign
0C9F                             ;     call writeChar
0C9F                             ;     ld ix,editDef4              ; NEXT = editDef4
0C9F                             ;     jp printTIB
0C9F                             ; editDef4:
0C9F                             ;     pop ix                      ; restore NEXT
0C9F                             ;     jp (ix)
0C9F                             ; writeChar:
0C9F                             ;     ld de,(vTIBPtr)             ; de = TIB*
0C9F                             ;     ld (de),a                   ; write ident
0C9F                             ;     inc de
0C9F                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0C9F                             ;     ret
0C9F                             ; ; printTIB
0C9F                             ; printTIB:
0C9F                             ;     ld hl,(vTIBPtr)
0C9F                             ;     ld de,TIB
0C9F                             ;     or a
0C9F                             ;     sbc hl,de
0C9F                             ;     jp printTIB2
0C9F                             ; printTIB1:
0C9F                             ;     ld a,(de)
0C9F                             ;     call putchar
0C9F                             ; printTIB2:
0C9F                             ;     ld a,l
0C9F                             ;     or h
0C9F                             ;     jr nz,printTIB1
0C9F                             ;     jp (ix)
0C9F                             ; editBlock:
0C9F                             ;     pop hl                      ; hl = block*
0C9F                             ; editBlock0:
0C9F                             ;     push ix                     ; save next
0C9F                             ;     push hl                     ; push block*
0C9F                             ;     push hl                     ; push block*
0C9F                             ;     ld ix,(editBlock2)
0C9F                             ;     jp blockLength
0C9F                             ; editBlock1:
0C9F                             ;     pop hl                      ; bc = length, (sp) = IP
0C9F                             ;     pop de                      ; de = block*
0C9F                             ;     ld a,l
0C9F                             ;     or h
0C9F                             ;     jr z,editBlock2
0C9F                             ;     push bc
0C9F                             ;     ld bc,hl
0C9F                             ;     ex de,hl                    ; hl = block*
0C9F                             ;     ld de,(vTIBPtr)              ; de = TIB*
0C9F                             ;     ldir                        ; copy block to TIB
0C9F                             ;     ld (vTIBPtr),de              ; save TIB*
0C9F                             ;     pop bc
0C9F                             ; editBlock2:
0C9F                             ;     pop ix                      ; restore next
0C9F                             ;     jp (ix)
0C9F                             ; editLambda:
0C9F                             ;     jp (ix)
0C9F                             ; editArray:
0C9F                             ;     jp (ix)
0C9F                             ; editArglist:
0C9F                             ;     jp (ix)
0C9F                             ; ; blockLength
0C9F                             ; ; addr1 -- length
0C9F                             ; blockLength:
0C9F                             ;     pop hl                      ; block*
0C9F                             ;     push hl                     ; save block*
0C9F                             ;     inc hl                      ; skip first char
0C9F                             ;     ld d,1                      ; increase nesting
0C9F                             ; blockLength1:                   ; Skip to end of definition
0C9F                             ;     ld a,(hl)                   ; Get the next character
0C9F                             ;     inc hl                      ; Point to next character
0C9F                             ;     cp " " + 1                  ; ignore whitespace
0C9F                             ;     jr c,blockLength1
0C9F                             ;     cp ")"
0C9F                             ;     jr z,blockLength4
0C9F                             ;     cp "}"
0C9F                             ;     jr z,blockLength4
0C9F                             ;     cp "]"
0C9F                             ;     jr z,blockLength4
0C9F                             ;     cp "("
0C9F                             ;     jr z,blockLength2
0C9F                             ;     cp "{"
0C9F                             ;     jr z,blockLength2
0C9F                             ;     cp "["
0C9F                             ;     jr z,blockLength2
0C9F                             ;     cp "'"
0C9F                             ;     jr z,blockLength3
0C9F                             ;     cp "`"
0C9F                             ;     jr z,blockLength3
0C9F                             ;     cp DQUOTE
0C9F                             ;     jr z,blockLength3
0C9F                             ;     jr blockLength1
0C9F                             ; blockLength2:
0C9F                             ;     inc d
0C9F                             ;     jr blockLength1
0C9F                             ; blockLength4:
0C9F                             ;     dec d
0C9F                             ;     jr nz, blockLength1         ; get the next element
0C9F                             ; blockLength3:
0C9F                             ;     ld a,$80
0C9F                             ;     xor d
0C9F                             ;     ld d,a
0C9F                             ;     jr nz, blockLength1
0C9F                             ;     pop hl                      ; hl = block*
0C9F                             ;     or a
0C9F                             ;     sbc hl,de
0C9F                             ;     push hl
0C9F                             ;     jp (ix)
0C9F                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0C9F                             ; \a start of stack \#3 depth \b base \$ prompt
0C9F                             ; DW dStack               ; a vS0 start of datastack			
0C9F                             ; DW FALSE                ; b vBase16
0C9F                             ; DW 0                    ; c vTIBPtr an offset to the tib
0C9F                             ; DW 0                    ; d
0C9F                             ; DW 65                   ; e vLastDef "A" last command u defined
0C9F                             ; DW 0                    ; f
0C9F                             ; DW page6                ; g 256 bytes limits
0C9F                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0C9F                          ALIGN   $100   
0D00                TESTSSTART:      
0D00                          ;*Macro unroll:  test "1", 1
0D00   31 00 4A               LD   SP,STACK   
0D03   CD 85 0B               CALL   coldBoot   
0D06   CD 54 48               CALL   execStr   
0D09   31 00                  .CSTR   "1"   
0D0B   CD C5 0A               CALL   flushBuffer   
0D0E                          ;*Macro unroll:  expect "1",1
0D0E   E1                     POP   HL   
0D0F   E5                     PUSH   HL   
0D10   11 01 00               LD   DE,1   
0D13   B7                     OR   A   
0D14   ED 52                  SBC   HL,DE   
0D16   7D                     LD   A,L   
0D17   B4                     OR   H   
0D18   CA 70 0D               JP   Z,expectM_0_2656S52   
0D1B   CD 3D 0B               CALL   printStr   
0D1E   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0D26   CD 3D 0B               CALL   printStr   
0D29   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0D38   21 01 00               LD   hl,1   
0D3B   E5                     PUSH   hl   
0D3C   CD 53 0C               CALL   run   
0D3F   2E 00                  .CSTR   "."   
0D41   CD 3D 0B               CALL   printStr   
0D44   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0D51   E1                     POP   hl   
0D52   E5                     PUSH   hl   
0D53   E5                     PUSH   hl   
0D54   CD 53 0C               CALL   run   
0D57   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0D6B   CD C5 0A               CALL   flushBuffer   
0D6E   76                     HALT      
0D6F   00                     .CSTR      
0D70                EXPECTM_0_2656S52:      
0D70   E1                     POP   HL   
0D71                             ; test "100 :a:bc{`[ `/bs 10 /bd 20 /bd 30 /bd `]`/bs}; ^ /pb", 0
0D71                             ; test "[10 20 30 40] :a:bc{$a/s$c= 0$b=( $a$b%/bd $b++ $b $c</br )^}; ^ /px", 0
0D71                             ; test "[10 20 30] `[`.s :a:bc{$a/s$c= 0$b=( $a$b%. $b++ $b $c</br )^};^ `]`.s", 0
0D71   CD 3D 0B               CALL   printStr   
0D74   44 6F 6E 65 21 00      .CSTR   "Done!"   
0D7A   76                     HALT      
0D7B                             ; 
0D7B                          ;*Macro unroll:  test "/f", false
0D7B   31 00 4A               LD   SP,STACK   
0D7E   CD 85 0B               CALL   coldBoot   
0D81   CD 54 48               CALL   execStr   
0D84   2F 66 00               .CSTR   "/f"   
0D87   CD C5 0A               CALL   flushBuffer   
0D8A                          ;*Macro unroll:  expect "/f",false
0D8A   E1                     POP   HL   
0D8B   E5                     PUSH   HL   
0D8C   11 00 00               LD   DE,false   
0D8F   B7                     OR   A   
0D90   ED 52                  SBC   HL,DE   
0D92   7D                     LD   A,L   
0D93   B4                     OR   H   
0D94   CA ED 0D               JP   Z,expectM_0_2664S52   
0D97   CD 3D 0B               CALL   printStr   
0D9A   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0DA3   CD 3D 0B               CALL   printStr   
0DA6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DB5   21 00 00               LD   hl,false   
0DB8   E5                     PUSH   hl   
0DB9   CD 53 0C               CALL   run   
0DBC   2E 00                  .CSTR   "."   
0DBE   CD 3D 0B               CALL   printStr   
0DC1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DCE   E1                     POP   hl   
0DCF   E5                     PUSH   hl   
0DD0   E5                     PUSH   hl   
0DD1   CD 53 0C               CALL   run   
0DD4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0DE8   CD C5 0A               CALL   flushBuffer   
0DEB   76                     HALT      
0DEC   00                     .CSTR      
0DED                EXPECTM_0_2664S52:      
0DED   E1                     POP   HL   
0DEE                          ;*Macro unroll:  test "/t", true
0DEE   31 00 4A               LD   SP,STACK   
0DF1   CD 85 0B               CALL   coldBoot   
0DF4   CD 54 48               CALL   execStr   
0DF7   2F 74 00               .CSTR   "/t"   
0DFA   CD C5 0A               CALL   flushBuffer   
0DFD                          ;*Macro unroll:  expect "/t",true
0DFD   E1                     POP   HL   
0DFE   E5                     PUSH   HL   
0DFF   11 FF FF               LD   DE,true   
0E02   B7                     OR   A   
0E03   ED 52                  SBC   HL,DE   
0E05   7D                     LD   A,L   
0E06   B4                     OR   H   
0E07   CA 60 0E               JP   Z,expectM_0_2665S52   
0E0A   CD 3D 0B               CALL   printStr   
0E0D   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0E16   CD 3D 0B               CALL   printStr   
0E19   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E28   21 FF FF               LD   hl,true   
0E2B   E5                     PUSH   hl   
0E2C   CD 53 0C               CALL   run   
0E2F   2E 00                  .CSTR   "."   
0E31   CD 3D 0B               CALL   printStr   
0E34   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E41   E1                     POP   hl   
0E42   E5                     PUSH   hl   
0E43   E5                     PUSH   hl   
0E44   CD 53 0C               CALL   run   
0E47   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0E5B   CD C5 0A               CALL   flushBuffer   
0E5E   76                     HALT      
0E5F   00                     .CSTR      
0E60                EXPECTM_0_2665S52:      
0E60   E1                     POP   HL   
0E61                          ;*Macro unroll:  test "1", 1
0E61   31 00 4A               LD   SP,STACK   
0E64   CD 85 0B               CALL   coldBoot   
0E67   CD 54 48               CALL   execStr   
0E6A   31 00                  .CSTR   "1"   
0E6C   CD C5 0A               CALL   flushBuffer   
0E6F                          ;*Macro unroll:  expect "1",1
0E6F   E1                     POP   HL   
0E70   E5                     PUSH   HL   
0E71   11 01 00               LD   DE,1   
0E74   B7                     OR   A   
0E75   ED 52                  SBC   HL,DE   
0E77   7D                     LD   A,L   
0E78   B4                     OR   H   
0E79   CA D1 0E               JP   Z,expectM_0_2666S52   
0E7C   CD 3D 0B               CALL   printStr   
0E7F   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0E87   CD 3D 0B               CALL   printStr   
0E8A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E99   21 01 00               LD   hl,1   
0E9C   E5                     PUSH   hl   
0E9D   CD 53 0C               CALL   run   
0EA0   2E 00                  .CSTR   "."   
0EA2   CD 3D 0B               CALL   printStr   
0EA5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EB2   E1                     POP   hl   
0EB3   E5                     PUSH   hl   
0EB4   E5                     PUSH   hl   
0EB5   CD 53 0C               CALL   run   
0EB8   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0ECC   CD C5 0A               CALL   flushBuffer   
0ECF   76                     HALT      
0ED0   00                     .CSTR      
0ED1                EXPECTM_0_2666S52:      
0ED1   E1                     POP   HL   
0ED2                          ;*Macro unroll:  test "2", 2
0ED2   31 00 4A               LD   SP,STACK   
0ED5   CD 85 0B               CALL   coldBoot   
0ED8   CD 54 48               CALL   execStr   
0EDB   32 00                  .CSTR   "2"   
0EDD   CD C5 0A               CALL   flushBuffer   
0EE0                          ;*Macro unroll:  expect "2",2
0EE0   E1                     POP   HL   
0EE1   E5                     PUSH   HL   
0EE2   11 02 00               LD   DE,2   
0EE5   B7                     OR   A   
0EE6   ED 52                  SBC   HL,DE   
0EE8   7D                     LD   A,L   
0EE9   B4                     OR   H   
0EEA   CA 42 0F               JP   Z,expectM_0_2667S52   
0EED   CD 3D 0B               CALL   printStr   
0EF0   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0EF8   CD 3D 0B               CALL   printStr   
0EFB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F0A   21 02 00               LD   hl,2   
0F0D   E5                     PUSH   hl   
0F0E   CD 53 0C               CALL   run   
0F11   2E 00                  .CSTR   "."   
0F13   CD 3D 0B               CALL   printStr   
0F16   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F23   E1                     POP   hl   
0F24   E5                     PUSH   hl   
0F25   E5                     PUSH   hl   
0F26   CD 53 0C               CALL   run   
0F29   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0F3D   CD C5 0A               CALL   flushBuffer   
0F40   76                     HALT      
0F41   00                     .CSTR      
0F42                EXPECTM_0_2667S52:      
0F42   E1                     POP   HL   
0F43                          ;*Macro unroll:  test "1", 1
0F43   31 00 4A               LD   SP,STACK   
0F46   CD 85 0B               CALL   coldBoot   
0F49   CD 54 48               CALL   execStr   
0F4C   31 00                  .CSTR   "1"   
0F4E   CD C5 0A               CALL   flushBuffer   
0F51                          ;*Macro unroll:  expect "1",1
0F51   E1                     POP   HL   
0F52   E5                     PUSH   HL   
0F53   11 01 00               LD   DE,1   
0F56   B7                     OR   A   
0F57   ED 52                  SBC   HL,DE   
0F59   7D                     LD   A,L   
0F5A   B4                     OR   H   
0F5B   CA B3 0F               JP   Z,expectM_0_2668S52   
0F5E   CD 3D 0B               CALL   printStr   
0F61   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0F69   CD 3D 0B               CALL   printStr   
0F6C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F7B   21 01 00               LD   hl,1   
0F7E   E5                     PUSH   hl   
0F7F   CD 53 0C               CALL   run   
0F82   2E 00                  .CSTR   "."   
0F84   CD 3D 0B               CALL   printStr   
0F87   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F94   E1                     POP   hl   
0F95   E5                     PUSH   hl   
0F96   E5                     PUSH   hl   
0F97   CD 53 0C               CALL   run   
0F9A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0FAE   CD C5 0A               CALL   flushBuffer   
0FB1   76                     HALT      
0FB2   00                     .CSTR      
0FB3                EXPECTM_0_2668S52:      
0FB3   E1                     POP   HL   
0FB4                          ;*Macro unroll:  test "0", 0
0FB4   31 00 4A               LD   SP,STACK   
0FB7   CD 85 0B               CALL   coldBoot   
0FBA   CD 54 48               CALL   execStr   
0FBD   30 00                  .CSTR   "0"   
0FBF   CD C5 0A               CALL   flushBuffer   
0FC2                          ;*Macro unroll:  expect "0",0
0FC2   E1                     POP   HL   
0FC3   E5                     PUSH   HL   
0FC4   11 00 00               LD   DE,0   
0FC7   B7                     OR   A   
0FC8   ED 52                  SBC   HL,DE   
0FCA   7D                     LD   A,L   
0FCB   B4                     OR   H   
0FCC   CA 24 10               JP   Z,expectM_0_2669S52   
0FCF   CD 3D 0B               CALL   printStr   
0FD2   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
0FDA   CD 3D 0B               CALL   printStr   
0FDD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FEC   21 00 00               LD   hl,0   
0FEF   E5                     PUSH   hl   
0FF0   CD 53 0C               CALL   run   
0FF3   2E 00                  .CSTR   "."   
0FF5   CD 3D 0B               CALL   printStr   
0FF8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1005   E1                     POP   hl   
1006   E5                     PUSH   hl   
1007   E5                     PUSH   hl   
1008   CD 53 0C               CALL   run   
100B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
101F   CD C5 0A               CALL   flushBuffer   
1022   76                     HALT      
1023   00                     .CSTR      
1024                EXPECTM_0_2669S52:      
1024   E1                     POP   HL   
1025                          ;*Macro unroll:  test "10", 10
1025   31 00 4A               LD   SP,STACK   
1028   CD 85 0B               CALL   coldBoot   
102B   CD 54 48               CALL   execStr   
102E   31 30 00               .CSTR   "10"   
1031   CD C5 0A               CALL   flushBuffer   
1034                          ;*Macro unroll:  expect "10",10
1034   E1                     POP   HL   
1035   E5                     PUSH   HL   
1036   11 0A 00               LD   DE,10   
1039   B7                     OR   A   
103A   ED 52                  SBC   HL,DE   
103C   7D                     LD   A,L   
103D   B4                     OR   H   
103E   CA 97 10               JP   Z,expectM_0_2670S52   
1041   CD 3D 0B               CALL   printStr   
1044   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
104D   CD 3D 0B               CALL   printStr   
1050   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
105F   21 0A 00               LD   hl,10   
1062   E5                     PUSH   hl   
1063   CD 53 0C               CALL   run   
1066   2E 00                  .CSTR   "."   
1068   CD 3D 0B               CALL   printStr   
106B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1078   E1                     POP   hl   
1079   E5                     PUSH   hl   
107A   E5                     PUSH   hl   
107B   CD 53 0C               CALL   run   
107E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1092   CD C5 0A               CALL   flushBuffer   
1095   76                     HALT      
1096   00                     .CSTR      
1097                EXPECTM_0_2670S52:      
1097   E1                     POP   HL   
1098                          ;*Macro unroll:  test "123", 123
1098   31 00 4A               LD   SP,STACK   
109B   CD 85 0B               CALL   coldBoot   
109E   CD 54 48               CALL   execStr   
10A1   31 32 33 00            .CSTR   "123"   
10A5   CD C5 0A               CALL   flushBuffer   
10A8                          ;*Macro unroll:  expect "123",123
10A8   E1                     POP   HL   
10A9   E5                     PUSH   HL   
10AA   11 7B 00               LD   DE,123   
10AD   B7                     OR   A   
10AE   ED 52                  SBC   HL,DE   
10B0   7D                     LD   A,L   
10B1   B4                     OR   H   
10B2   CA 0C 11               JP   Z,expectM_0_2671S52   
10B5   CD 3D 0B               CALL   printStr   
10B8   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
10C2   CD 3D 0B               CALL   printStr   
10C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10D4   21 7B 00               LD   hl,123   
10D7   E5                     PUSH   hl   
10D8   CD 53 0C               CALL   run   
10DB   2E 00                  .CSTR   "."   
10DD   CD 3D 0B               CALL   printStr   
10E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10ED   E1                     POP   hl   
10EE   E5                     PUSH   hl   
10EF   E5                     PUSH   hl   
10F0   CD 53 0C               CALL   run   
10F3   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1107   CD C5 0A               CALL   flushBuffer   
110A   76                     HALT      
110B   00                     .CSTR      
110C                EXPECTM_0_2671S52:      
110C   E1                     POP   HL   
110D                          ;*Macro unroll:  test "-1",-1
110D   31 00 4A               LD   SP,STACK   
1110   CD 85 0B               CALL   coldBoot   
1113   CD 54 48               CALL   execStr   
1116   2D 31 00               .CSTR   "-1"   
1119   CD C5 0A               CALL   flushBuffer   
111C                          ;*Macro unroll:  expect "-1",-1
111C   E1                     POP   HL   
111D   E5                     PUSH   HL   
111E   11 FF FF               LD   DE,-1   
1121   B7                     OR   A   
1122   ED 52                  SBC   HL,DE   
1124   7D                     LD   A,L   
1125   B4                     OR   H   
1126   CA 7F 11               JP   Z,expectM_0_2672S52   
1129   CD 3D 0B               CALL   printStr   
112C   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1135   CD 3D 0B               CALL   printStr   
1138   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1147   21 FF FF               LD   hl,-1   
114A   E5                     PUSH   hl   
114B   CD 53 0C               CALL   run   
114E   2E 00                  .CSTR   "."   
1150   CD 3D 0B               CALL   printStr   
1153   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1160   E1                     POP   hl   
1161   E5                     PUSH   hl   
1162   E5                     PUSH   hl   
1163   CD 53 0C               CALL   run   
1166   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
117A   CD C5 0A               CALL   flushBuffer   
117D   76                     HALT      
117E   00                     .CSTR      
117F                EXPECTM_0_2672S52:      
117F   E1                     POP   HL   
1180                          ;*Macro unroll:  test "''", 0
1180   31 00 4A               LD   SP,STACK   
1183   CD 85 0B               CALL   coldBoot   
1186   CD 54 48               CALL   execStr   
1189   27 27 00               .CSTR   "''"   
118C   CD C5 0A               CALL   flushBuffer   
118F                          ;*Macro unroll:  expect "''",0
118F   E1                     POP   HL   
1190   E5                     PUSH   HL   
1191   11 00 00               LD   DE,0   
1194   B7                     OR   A   
1195   ED 52                  SBC   HL,DE   
1197   7D                     LD   A,L   
1198   B4                     OR   H   
1199   CA F2 11               JP   Z,expectM_0_2673S52   
119C   CD 3D 0B               CALL   printStr   
119F   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
11A8   CD 3D 0B               CALL   printStr   
11AB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
11BA   21 00 00               LD   hl,0   
11BD   E5                     PUSH   hl   
11BE   CD 53 0C               CALL   run   
11C1   2E 00                  .CSTR   "."   
11C3   CD 3D 0B               CALL   printStr   
11C6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11D3   E1                     POP   hl   
11D4   E5                     PUSH   hl   
11D5   E5                     PUSH   hl   
11D6   CD 53 0C               CALL   run   
11D9   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
11ED   CD C5 0A               CALL   flushBuffer   
11F0   76                     HALT      
11F1   00                     .CSTR      
11F2                EXPECTM_0_2673S52:      
11F2   E1                     POP   HL   
11F3                          ;*Macro unroll:  test "'a'", $61
11F3   31 00 4A               LD   SP,STACK   
11F6   CD 85 0B               CALL   coldBoot   
11F9   CD 54 48               CALL   execStr   
11FC   27 61 27 00            .CSTR   "'a'"   
1200   CD C5 0A               CALL   flushBuffer   
1203                          ;*Macro unroll:  expect "'a'",$61
1203   E1                     POP   HL   
1204   E5                     PUSH   HL   
1205   11 61 00               LD   DE,$61   
1208   B7                     OR   A   
1209   ED 52                  SBC   HL,DE   
120B   7D                     LD   A,L   
120C   B4                     OR   H   
120D   CA 67 12               JP   Z,expectM_0_2674S52   
1210   CD 3D 0B               CALL   printStr   
1213   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
121D   CD 3D 0B               CALL   printStr   
1220   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
122F   21 61 00               LD   hl,$61   
1232   E5                     PUSH   hl   
1233   CD 53 0C               CALL   run   
1236   2E 00                  .CSTR   "."   
1238   CD 3D 0B               CALL   printStr   
123B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1248   E1                     POP   hl   
1249   E5                     PUSH   hl   
124A   E5                     PUSH   hl   
124B   CD 53 0C               CALL   run   
124E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1262   CD C5 0A               CALL   flushBuffer   
1265   76                     HALT      
1266   00                     .CSTR      
1267                EXPECTM_0_2674S52:      
1267   E1                     POP   HL   
1268                          ;*Macro unroll:  test "'\\''", $27
1268   31 00 4A               LD   SP,STACK   
126B   CD 85 0B               CALL   coldBoot   
126E   CD 54 48               CALL   execStr   
1271   27 5C 27 27 00         .CSTR   "'\\''"   
1276   CD C5 0A               CALL   flushBuffer   
1279                          ;*Macro unroll:  expect "'\\''",$27
1279   E1                     POP   HL   
127A   E5                     PUSH   HL   
127B   11 27 00               LD   DE,$27   
127E   B7                     OR   A   
127F   ED 52                  SBC   HL,DE   
1281   7D                     LD   A,L   
1282   B4                     OR   H   
1283   CA DE 12               JP   Z,expectM_0_2675S52   
1286   CD 3D 0B               CALL   printStr   
1289   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
1294   CD 3D 0B               CALL   printStr   
1297   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12A6   21 27 00               LD   hl,$27   
12A9   E5                     PUSH   hl   
12AA   CD 53 0C               CALL   run   
12AD   2E 00                  .CSTR   "."   
12AF   CD 3D 0B               CALL   printStr   
12B2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12BF   E1                     POP   hl   
12C0   E5                     PUSH   hl   
12C1   E5                     PUSH   hl   
12C2   CD 53 0C               CALL   run   
12C5   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
12D9   CD C5 0A               CALL   flushBuffer   
12DC   76                     HALT      
12DD   00                     .CSTR      
12DE                EXPECTM_0_2675S52:      
12DE   E1                     POP   HL   
12DF                          ;*Macro unroll:  test "#10", $10
12DF   31 00 4A               LD   SP,STACK   
12E2   CD 85 0B               CALL   coldBoot   
12E5   CD 54 48               CALL   execStr   
12E8   23 31 30 00            .CSTR   "#10"   
12EC   CD C5 0A               CALL   flushBuffer   
12EF                          ;*Macro unroll:  expect "#10",$10
12EF   E1                     POP   HL   
12F0   E5                     PUSH   HL   
12F1   11 10 00               LD   DE,$10   
12F4   B7                     OR   A   
12F5   ED 52                  SBC   HL,DE   
12F7   7D                     LD   A,L   
12F8   B4                     OR   H   
12F9   CA 53 13               JP   Z,expectM_0_2676S52   
12FC   CD 3D 0B               CALL   printStr   
12FF   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
1309   CD 3D 0B               CALL   printStr   
130C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
131B   21 10 00               LD   hl,$10   
131E   E5                     PUSH   hl   
131F   CD 53 0C               CALL   run   
1322   2E 00                  .CSTR   "."   
1324   CD 3D 0B               CALL   printStr   
1327   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1334   E1                     POP   hl   
1335   E5                     PUSH   hl   
1336   E5                     PUSH   hl   
1337   CD 53 0C               CALL   run   
133A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
134E   CD C5 0A               CALL   flushBuffer   
1351   76                     HALT      
1352   00                     .CSTR      
1353                EXPECTM_0_2676S52:      
1353   E1                     POP   HL   
1354                          ;*Macro unroll:  test "#FF", $FF
1354   31 00 4A               LD   SP,STACK   
1357   CD 85 0B               CALL   coldBoot   
135A   CD 54 48               CALL   execStr   
135D   23 46 46 00            .CSTR   "#FF"   
1361   CD C5 0A               CALL   flushBuffer   
1364                          ;*Macro unroll:  expect "#FF",$FF
1364   E1                     POP   HL   
1365   E5                     PUSH   HL   
1366   11 FF 00               LD   DE,$FF   
1369   B7                     OR   A   
136A   ED 52                  SBC   HL,DE   
136C   7D                     LD   A,L   
136D   B4                     OR   H   
136E   CA C8 13               JP   Z,expectM_0_2677S52   
1371   CD 3D 0B               CALL   printStr   
1374   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
137E   CD 3D 0B               CALL   printStr   
1381   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1390   21 FF 00               LD   hl,$FF   
1393   E5                     PUSH   hl   
1394   CD 53 0C               CALL   run   
1397   2E 00                  .CSTR   "."   
1399   CD 3D 0B               CALL   printStr   
139C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13A9   E1                     POP   hl   
13AA   E5                     PUSH   hl   
13AB   E5                     PUSH   hl   
13AC   CD 53 0C               CALL   run   
13AF   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
13C3   CD C5 0A               CALL   flushBuffer   
13C6   76                     HALT      
13C7   00                     .CSTR      
13C8                EXPECTM_0_2677S52:      
13C8   E1                     POP   HL   
13C9                          ;*Macro unroll:  test "-1 2 +",1
13C9   31 00 4A               LD   SP,STACK   
13CC   CD 85 0B               CALL   coldBoot   
13CF   CD 54 48               CALL   execStr   
13D2   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
13D9   CD C5 0A               CALL   flushBuffer   
13DC                          ;*Macro unroll:  expect "-1 2 +",1
13DC   E1                     POP   HL   
13DD   E5                     PUSH   HL   
13DE   11 01 00               LD   DE,1   
13E1   B7                     OR   A   
13E2   ED 52                  SBC   HL,DE   
13E4   7D                     LD   A,L   
13E5   B4                     OR   H   
13E6   CA 43 14               JP   Z,expectM_0_2678S52   
13E9   CD 3D 0B               CALL   printStr   
13EC   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
13F9   CD 3D 0B               CALL   printStr   
13FC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
140B   21 01 00               LD   hl,1   
140E   E5                     PUSH   hl   
140F   CD 53 0C               CALL   run   
1412   2E 00                  .CSTR   "."   
1414   CD 3D 0B               CALL   printStr   
1417   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1424   E1                     POP   hl   
1425   E5                     PUSH   hl   
1426   E5                     PUSH   hl   
1427   CD 53 0C               CALL   run   
142A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
143E   CD C5 0A               CALL   flushBuffer   
1441   76                     HALT      
1442   00                     .CSTR      
1443                EXPECTM_0_2678S52:      
1443   E1                     POP   HL   
1444                          ;*Macro unroll:  test "-1 1 +",0
1444   31 00 4A               LD   SP,STACK   
1447   CD 85 0B               CALL   coldBoot   
144A   CD 54 48               CALL   execStr   
144D   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
1454   CD C5 0A               CALL   flushBuffer   
1457                          ;*Macro unroll:  expect "-1 1 +",0
1457   E1                     POP   HL   
1458   E5                     PUSH   HL   
1459   11 00 00               LD   DE,0   
145C   B7                     OR   A   
145D   ED 52                  SBC   HL,DE   
145F   7D                     LD   A,L   
1460   B4                     OR   H   
1461   CA BE 14               JP   Z,expectM_0_2679S52   
1464   CD 3D 0B               CALL   printStr   
1467   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
1474   CD 3D 0B               CALL   printStr   
1477   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1486   21 00 00               LD   hl,0   
1489   E5                     PUSH   hl   
148A   CD 53 0C               CALL   run   
148D   2E 00                  .CSTR   "."   
148F   CD 3D 0B               CALL   printStr   
1492   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
149F   E1                     POP   hl   
14A0   E5                     PUSH   hl   
14A1   E5                     PUSH   hl   
14A2   CD 53 0C               CALL   run   
14A5   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
14B9   CD C5 0A               CALL   flushBuffer   
14BC   76                     HALT      
14BD   00                     .CSTR      
14BE                EXPECTM_0_2679S52:      
14BE   E1                     POP   HL   
14BF                          ;*Macro unroll:  test "1 2 +", 3
14BF   31 00 4A               LD   SP,STACK   
14C2   CD 85 0B               CALL   coldBoot   
14C5   CD 54 48               CALL   execStr   
14C8   31 20 32 20 2B 00      .CSTR   "1 2 +"   
14CE   CD C5 0A               CALL   flushBuffer   
14D1                          ;*Macro unroll:  expect "1 2 +",3
14D1   E1                     POP   HL   
14D2   E5                     PUSH   HL   
14D3   11 03 00               LD   DE,3   
14D6   B7                     OR   A   
14D7   ED 52                  SBC   HL,DE   
14D9   7D                     LD   A,L   
14DA   B4                     OR   H   
14DB   CA 37 15               JP   Z,expectM_0_2680S52   
14DE   CD 3D 0B               CALL   printStr   
14E1   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
14ED   CD 3D 0B               CALL   printStr   
14F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14FF   21 03 00               LD   hl,3   
1502   E5                     PUSH   hl   
1503   CD 53 0C               CALL   run   
1506   2E 00                  .CSTR   "."   
1508   CD 3D 0B               CALL   printStr   
150B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1518   E1                     POP   hl   
1519   E5                     PUSH   hl   
151A   E5                     PUSH   hl   
151B   CD 53 0C               CALL   run   
151E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1532   CD C5 0A               CALL   flushBuffer   
1535   76                     HALT      
1536   00                     .CSTR      
1537                EXPECTM_0_2680S52:      
1537   E1                     POP   HL   
1538                          ;*Macro unroll:  test "4 1 2 +", 3
1538   31 00 4A               LD   SP,STACK   
153B   CD 85 0B               CALL   coldBoot   
153E   CD 54 48               CALL   execStr   
1541   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
1549   CD C5 0A               CALL   flushBuffer   
154C                          ;*Macro unroll:  expect "4 1 2 +",3
154C   E1                     POP   HL   
154D   E5                     PUSH   HL   
154E   11 03 00               LD   DE,3   
1551   B7                     OR   A   
1552   ED 52                  SBC   HL,DE   
1554   7D                     LD   A,L   
1555   B4                     OR   H   
1556   CA B4 15               JP   Z,expectM_0_2681S52   
1559   CD 3D 0B               CALL   printStr   
155C   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
156A   CD 3D 0B               CALL   printStr   
156D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
157C   21 03 00               LD   hl,3   
157F   E5                     PUSH   hl   
1580   CD 53 0C               CALL   run   
1583   2E 00                  .CSTR   "."   
1585   CD 3D 0B               CALL   printStr   
1588   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1595   E1                     POP   hl   
1596   E5                     PUSH   hl   
1597   E5                     PUSH   hl   
1598   CD 53 0C               CALL   run   
159B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
15AF   CD C5 0A               CALL   flushBuffer   
15B2   76                     HALT      
15B3   00                     .CSTR      
15B4                EXPECTM_0_2681S52:      
15B4   E1                     POP   HL   
15B5                          ;*Macro unroll:  test "123 456 +", 123+456
15B5   31 00 4A               LD   SP,STACK   
15B8   CD 85 0B               CALL   coldBoot   
15BB   CD 54 48               CALL   execStr   
15BE   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
15C8   CD C5 0A               CALL   flushBuffer   
15CB                          ;*Macro unroll:  expect "123 456 +",123+456
15CB   E1                     POP   HL   
15CC   E5                     PUSH   HL   
15CD   11 43 02               LD   DE,123+456   
15D0   B7                     OR   A   
15D1   ED 52                  SBC   HL,DE   
15D3   7D                     LD   A,L   
15D4   B4                     OR   H   
15D5   CA 35 16               JP   Z,expectM_0_2682S52   
15D8   CD 3D 0B               CALL   printStr   
15DB   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
15EB   CD 3D 0B               CALL   printStr   
15EE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15FD   21 43 02               LD   hl,123+456   
1600   E5                     PUSH   hl   
1601   CD 53 0C               CALL   run   
1604   2E 00                  .CSTR   "."   
1606   CD 3D 0B               CALL   printStr   
1609   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1616   E1                     POP   hl   
1617   E5                     PUSH   hl   
1618   E5                     PUSH   hl   
1619   CD 53 0C               CALL   run   
161C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1630   CD C5 0A               CALL   flushBuffer   
1633   76                     HALT      
1634   00                     .CSTR      
1635                EXPECTM_0_2682S52:      
1635   E1                     POP   HL   
1636                          ;*Macro unroll:  test "64 128 +", 64+128
1636   31 00 4A               LD   SP,STACK   
1639   CD 85 0B               CALL   coldBoot   
163C   CD 54 48               CALL   execStr   
163F   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
1648   CD C5 0A               CALL   flushBuffer   
164B                          ;*Macro unroll:  expect "64 128 +",64+128
164B   E1                     POP   HL   
164C   E5                     PUSH   HL   
164D   11 C0 00               LD   DE,64+128   
1650   B7                     OR   A   
1651   ED 52                  SBC   HL,DE   
1653   7D                     LD   A,L   
1654   B4                     OR   H   
1655   CA B4 16               JP   Z,expectM_0_2683S52   
1658   CD 3D 0B               CALL   printStr   
165B   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
166A   CD 3D 0B               CALL   printStr   
166D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
167C   21 C0 00               LD   hl,64+128   
167F   E5                     PUSH   hl   
1680   CD 53 0C               CALL   run   
1683   2E 00                  .CSTR   "."   
1685   CD 3D 0B               CALL   printStr   
1688   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1695   E1                     POP   hl   
1696   E5                     PUSH   hl   
1697   E5                     PUSH   hl   
1698   CD 53 0C               CALL   run   
169B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
16AF   CD C5 0A               CALL   flushBuffer   
16B2   76                     HALT      
16B3   00                     .CSTR      
16B4                EXPECTM_0_2683S52:      
16B4   E1                     POP   HL   
16B5                          ;*Macro unroll:  test "1 2 +", 3
16B5   31 00 4A               LD   SP,STACK   
16B8   CD 85 0B               CALL   coldBoot   
16BB   CD 54 48               CALL   execStr   
16BE   31 20 32 20 2B 00      .CSTR   "1 2 +"   
16C4   CD C5 0A               CALL   flushBuffer   
16C7                          ;*Macro unroll:  expect "1 2 +",3
16C7   E1                     POP   HL   
16C8   E5                     PUSH   HL   
16C9   11 03 00               LD   DE,3   
16CC   B7                     OR   A   
16CD   ED 52                  SBC   HL,DE   
16CF   7D                     LD   A,L   
16D0   B4                     OR   H   
16D1   CA 2D 17               JP   Z,expectM_0_2684S52   
16D4   CD 3D 0B               CALL   printStr   
16D7   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
16E3   CD 3D 0B               CALL   printStr   
16E6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16F5   21 03 00               LD   hl,3   
16F8   E5                     PUSH   hl   
16F9   CD 53 0C               CALL   run   
16FC   2E 00                  .CSTR   "."   
16FE   CD 3D 0B               CALL   printStr   
1701   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
170E   E1                     POP   hl   
170F   E5                     PUSH   hl   
1710   E5                     PUSH   hl   
1711   CD 53 0C               CALL   run   
1714   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1728   CD C5 0A               CALL   flushBuffer   
172B   76                     HALT      
172C   00                     .CSTR      
172D                EXPECTM_0_2684S52:      
172D   E1                     POP   HL   
172E                          ;*Macro unroll:  test "1a= a++ a",2
172E   31 00 4A               LD   SP,STACK   
1731   CD 85 0B               CALL   coldBoot   
1734   CD 54 48               CALL   execStr   
1737   31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1a= a++ a"   
1741   CD C5 0A               CALL   flushBuffer   
1744                          ;*Macro unroll:  expect "1a= a++ a",2
1744   E1                     POP   HL   
1745   E5                     PUSH   HL   
1746   11 02 00               LD   DE,2   
1749   B7                     OR   A   
174A   ED 52                  SBC   HL,DE   
174C   7D                     LD   A,L   
174D   B4                     OR   H   
174E   CA AE 17               JP   Z,expectM_0_2685S52   
1751   CD 3D 0B               CALL   printStr   
1754   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1764   CD 3D 0B               CALL   printStr   
1767   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1776   21 02 00               LD   hl,2   
1779   E5                     PUSH   hl   
177A   CD 53 0C               CALL   run   
177D   2E 00                  .CSTR   "."   
177F   CD 3D 0B               CALL   printStr   
1782   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
178F   E1                     POP   hl   
1790   E5                     PUSH   hl   
1791   E5                     PUSH   hl   
1792   CD 53 0C               CALL   run   
1795   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
17A9   CD C5 0A               CALL   flushBuffer   
17AC   76                     HALT      
17AD   00                     .CSTR      
17AE                EXPECTM_0_2685S52:      
17AE   E1                     POP   HL   
17AF                          ;*Macro unroll:  test "-1 -1 -",0
17AF   31 00 4A               LD   SP,STACK   
17B2   CD 85 0B               CALL   coldBoot   
17B5   CD 54 48               CALL   execStr   
17B8   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
17C0   CD C5 0A               CALL   flushBuffer   
17C3                          ;*Macro unroll:  expect "-1 -1 -",0
17C3   E1                     POP   HL   
17C4   E5                     PUSH   HL   
17C5   11 00 00               LD   DE,0   
17C8   B7                     OR   A   
17C9   ED 52                  SBC   HL,DE   
17CB   7D                     LD   A,L   
17CC   B4                     OR   H   
17CD   CA 2B 18               JP   Z,expectM_0_2686S52   
17D0   CD 3D 0B               CALL   printStr   
17D3   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
17E1   CD 3D 0B               CALL   printStr   
17E4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17F3   21 00 00               LD   hl,0   
17F6   E5                     PUSH   hl   
17F7   CD 53 0C               CALL   run   
17FA   2E 00                  .CSTR   "."   
17FC   CD 3D 0B               CALL   printStr   
17FF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
180C   E1                     POP   hl   
180D   E5                     PUSH   hl   
180E   E5                     PUSH   hl   
180F   CD 53 0C               CALL   run   
1812   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1826   CD C5 0A               CALL   flushBuffer   
1829   76                     HALT      
182A   00                     .CSTR      
182B                EXPECTM_0_2686S52:      
182B   E1                     POP   HL   
182C                          ;*Macro unroll:  test "5 3 -", 2
182C   31 00 4A               LD   SP,STACK   
182F   CD 85 0B               CALL   coldBoot   
1832   CD 54 48               CALL   execStr   
1835   35 20 33 20 2D 00      .CSTR   "5 3 -"   
183B   CD C5 0A               CALL   flushBuffer   
183E                          ;*Macro unroll:  expect "5 3 -",2
183E   E1                     POP   HL   
183F   E5                     PUSH   HL   
1840   11 02 00               LD   DE,2   
1843   B7                     OR   A   
1844   ED 52                  SBC   HL,DE   
1846   7D                     LD   A,L   
1847   B4                     OR   H   
1848   CA A4 18               JP   Z,expectM_0_2687S52   
184B   CD 3D 0B               CALL   printStr   
184E   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
185A   CD 3D 0B               CALL   printStr   
185D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
186C   21 02 00               LD   hl,2   
186F   E5                     PUSH   hl   
1870   CD 53 0C               CALL   run   
1873   2E 00                  .CSTR   "."   
1875   CD 3D 0B               CALL   printStr   
1878   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1885   E1                     POP   hl   
1886   E5                     PUSH   hl   
1887   E5                     PUSH   hl   
1888   CD 53 0C               CALL   run   
188B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
189F   CD C5 0A               CALL   flushBuffer   
18A2   76                     HALT      
18A3   00                     .CSTR      
18A4                EXPECTM_0_2687S52:      
18A4   E1                     POP   HL   
18A5                          ;*Macro unroll:  test "2 1 -",1
18A5   31 00 4A               LD   SP,STACK   
18A8   CD 85 0B               CALL   coldBoot   
18AB   CD 54 48               CALL   execStr   
18AE   32 20 31 20 2D 00      .CSTR   "2 1 -"   
18B4   CD C5 0A               CALL   flushBuffer   
18B7                          ;*Macro unroll:  expect "2 1 -",1
18B7   E1                     POP   HL   
18B8   E5                     PUSH   HL   
18B9   11 01 00               LD   DE,1   
18BC   B7                     OR   A   
18BD   ED 52                  SBC   HL,DE   
18BF   7D                     LD   A,L   
18C0   B4                     OR   H   
18C1   CA 1D 19               JP   Z,expectM_0_2688S52   
18C4   CD 3D 0B               CALL   printStr   
18C7   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
18D3   CD 3D 0B               CALL   printStr   
18D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18E5   21 01 00               LD   hl,1   
18E8   E5                     PUSH   hl   
18E9   CD 53 0C               CALL   run   
18EC   2E 00                  .CSTR   "."   
18EE   CD 3D 0B               CALL   printStr   
18F1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18FE   E1                     POP   hl   
18FF   E5                     PUSH   hl   
1900   E5                     PUSH   hl   
1901   CD 53 0C               CALL   run   
1904   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1918   CD C5 0A               CALL   flushBuffer   
191B   76                     HALT      
191C   00                     .CSTR      
191D                EXPECTM_0_2688S52:      
191D   E1                     POP   HL   
191E                          ;*Macro unroll:  test "3a= a-- a",2
191E   31 00 4A               LD   SP,STACK   
1921   CD 85 0B               CALL   coldBoot   
1924   CD 54 48               CALL   execStr   
1927   33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3a= a-- a"   
1931   CD C5 0A               CALL   flushBuffer   
1934                          ;*Macro unroll:  expect "3a= a-- a",2
1934   E1                     POP   HL   
1935   E5                     PUSH   HL   
1936   11 02 00               LD   DE,2   
1939   B7                     OR   A   
193A   ED 52                  SBC   HL,DE   
193C   7D                     LD   A,L   
193D   B4                     OR   H   
193E   CA 9E 19               JP   Z,expectM_0_2689S52   
1941   CD 3D 0B               CALL   printStr   
1944   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1954   CD 3D 0B               CALL   printStr   
1957   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1966   21 02 00               LD   hl,2   
1969   E5                     PUSH   hl   
196A   CD 53 0C               CALL   run   
196D   2E 00                  .CSTR   "."   
196F   CD 3D 0B               CALL   printStr   
1972   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
197F   E1                     POP   hl   
1980   E5                     PUSH   hl   
1981   E5                     PUSH   hl   
1982   CD 53 0C               CALL   run   
1985   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1999   CD C5 0A               CALL   flushBuffer   
199C   76                     HALT      
199D   00                     .CSTR      
199E                EXPECTM_0_2689S52:      
199E   E1                     POP   HL   
199F                          ;*Macro unroll:  test "3 5 &", 1
199F   31 00 4A               LD   SP,STACK   
19A2   CD 85 0B               CALL   coldBoot   
19A5   CD 54 48               CALL   execStr   
19A8   33 20 35 20 26 00      .CSTR   "3 5 &"   
19AE   CD C5 0A               CALL   flushBuffer   
19B1                          ;*Macro unroll:  expect "3 5 &",1
19B1   E1                     POP   HL   
19B2   E5                     PUSH   HL   
19B3   11 01 00               LD   DE,1   
19B6   B7                     OR   A   
19B7   ED 52                  SBC   HL,DE   
19B9   7D                     LD   A,L   
19BA   B4                     OR   H   
19BB   CA 17 1A               JP   Z,expectM_0_2690S52   
19BE   CD 3D 0B               CALL   printStr   
19C1   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
19CD   CD 3D 0B               CALL   printStr   
19D0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19DF   21 01 00               LD   hl,1   
19E2   E5                     PUSH   hl   
19E3   CD 53 0C               CALL   run   
19E6   2E 00                  .CSTR   "."   
19E8   CD 3D 0B               CALL   printStr   
19EB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19F8   E1                     POP   hl   
19F9   E5                     PUSH   hl   
19FA   E5                     PUSH   hl   
19FB   CD 53 0C               CALL   run   
19FE   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1A12   CD C5 0A               CALL   flushBuffer   
1A15   76                     HALT      
1A16   00                     .CSTR      
1A17                EXPECTM_0_2690S52:      
1A17   E1                     POP   HL   
1A18                          ;*Macro unroll:  test "3 5 |", 7
1A18   31 00 4A               LD   SP,STACK   
1A1B   CD 85 0B               CALL   coldBoot   
1A1E   CD 54 48               CALL   execStr   
1A21   33 20 35 20 7C 00      .CSTR   "3 5 |"   
1A27   CD C5 0A               CALL   flushBuffer   
1A2A                          ;*Macro unroll:  expect "3 5 |",7
1A2A   E1                     POP   HL   
1A2B   E5                     PUSH   HL   
1A2C   11 07 00               LD   DE,7   
1A2F   B7                     OR   A   
1A30   ED 52                  SBC   HL,DE   
1A32   7D                     LD   A,L   
1A33   B4                     OR   H   
1A34   CA 90 1A               JP   Z,expectM_0_2691S52   
1A37   CD 3D 0B               CALL   printStr   
1A3A   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1A46   CD 3D 0B               CALL   printStr   
1A49   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A58   21 07 00               LD   hl,7   
1A5B   E5                     PUSH   hl   
1A5C   CD 53 0C               CALL   run   
1A5F   2E 00                  .CSTR   "."   
1A61   CD 3D 0B               CALL   printStr   
1A64   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A71   E1                     POP   hl   
1A72   E5                     PUSH   hl   
1A73   E5                     PUSH   hl   
1A74   CD 53 0C               CALL   run   
1A77   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1A8B   CD C5 0A               CALL   flushBuffer   
1A8E   76                     HALT      
1A8F   00                     .CSTR      
1A90                EXPECTM_0_2691S52:      
1A90   E1                     POP   HL   
1A91                          ;*Macro unroll:  test "3 5 /x", 6
1A91   31 00 4A               LD   SP,STACK   
1A94   CD 85 0B               CALL   coldBoot   
1A97   CD 54 48               CALL   execStr   
1A9A   33 20 35 20 2F 78 00   .CSTR   "3 5 /x"   
1AA1   CD C5 0A               CALL   flushBuffer   
1AA4                          ;*Macro unroll:  expect "3 5 /x",6
1AA4   E1                     POP   HL   
1AA5   E5                     PUSH   HL   
1AA6   11 06 00               LD   DE,6   
1AA9   B7                     OR   A   
1AAA   ED 52                  SBC   HL,DE   
1AAC   7D                     LD   A,L   
1AAD   B4                     OR   H   
1AAE   CA 0B 1B               JP   Z,expectM_0_2692S52   
1AB1   CD 3D 0B               CALL   printStr   
1AB4   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1AC1   CD 3D 0B               CALL   printStr   
1AC4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AD3   21 06 00               LD   hl,6   
1AD6   E5                     PUSH   hl   
1AD7   CD 53 0C               CALL   run   
1ADA   2E 00                  .CSTR   "."   
1ADC   CD 3D 0B               CALL   printStr   
1ADF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AEC   E1                     POP   hl   
1AED   E5                     PUSH   hl   
1AEE   E5                     PUSH   hl   
1AEF   CD 53 0C               CALL   run   
1AF2   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1B06   CD C5 0A               CALL   flushBuffer   
1B09   76                     HALT      
1B0A   00                     .CSTR      
1B0B                EXPECTM_0_2692S52:      
1B0B   E1                     POP   HL   
1B0C                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1B0C   31 00 4A               LD   SP,STACK   
1B0F   CD 85 0B               CALL   coldBoot   
1B12   CD 54 48               CALL   execStr   
1B15   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "3a= 5 a/x a= a"   
1B24   CD C5 0A               CALL   flushBuffer   
1B27                          ;*Macro unroll:  expect "3a= 5 a/x a= a",6
1B27   E1                     POP   HL   
1B28   E5                     PUSH   HL   
1B29   11 06 00               LD   DE,6   
1B2C   B7                     OR   A   
1B2D   ED 52                  SBC   HL,DE   
1B2F   7D                     LD   A,L   
1B30   B4                     OR   H   
1B31   CA 96 1B               JP   Z,expectM_0_2693S52   
1B34   CD 3D 0B               CALL   printStr   
1B37   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1B4C   CD 3D 0B               CALL   printStr   
1B4F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B5E   21 06 00               LD   hl,6   
1B61   E5                     PUSH   hl   
1B62   CD 53 0C               CALL   run   
1B65   2E 00                  .CSTR   "."   
1B67   CD 3D 0B               CALL   printStr   
1B6A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B77   E1                     POP   hl   
1B78   E5                     PUSH   hl   
1B79   E5                     PUSH   hl   
1B7A   CD 53 0C               CALL   run   
1B7D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1B91   CD C5 0A               CALL   flushBuffer   
1B94   76                     HALT      
1B95   00                     .CSTR      
1B96                EXPECTM_0_2693S52:      
1B96   E1                     POP   HL   
1B97                          ;*Macro unroll:  test "2 3 *", 6
1B97   31 00 4A               LD   SP,STACK   
1B9A   CD 85 0B               CALL   coldBoot   
1B9D   CD 54 48               CALL   execStr   
1BA0   32 20 33 20 2A 00      .CSTR   "2 3 *"   
1BA6   CD C5 0A               CALL   flushBuffer   
1BA9                          ;*Macro unroll:  expect "2 3 *",6
1BA9   E1                     POP   HL   
1BAA   E5                     PUSH   HL   
1BAB   11 06 00               LD   DE,6   
1BAE   B7                     OR   A   
1BAF   ED 52                  SBC   HL,DE   
1BB1   7D                     LD   A,L   
1BB2   B4                     OR   H   
1BB3   CA 0F 1C               JP   Z,expectM_0_2694S52   
1BB6   CD 3D 0B               CALL   printStr   
1BB9   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1BC5   CD 3D 0B               CALL   printStr   
1BC8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BD7   21 06 00               LD   hl,6   
1BDA   E5                     PUSH   hl   
1BDB   CD 53 0C               CALL   run   
1BDE   2E 00                  .CSTR   "."   
1BE0   CD 3D 0B               CALL   printStr   
1BE3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BF0   E1                     POP   hl   
1BF1   E5                     PUSH   hl   
1BF2   E5                     PUSH   hl   
1BF3   CD 53 0C               CALL   run   
1BF6   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1C0A   CD C5 0A               CALL   flushBuffer   
1C0D   76                     HALT      
1C0E   00                     .CSTR      
1C0F                EXPECTM_0_2694S52:      
1C0F   E1                     POP   HL   
1C10                          ;*Macro unroll:  test "1 2 3 + *", 5
1C10   31 00 4A               LD   SP,STACK   
1C13   CD 85 0B               CALL   coldBoot   
1C16   CD 54 48               CALL   execStr   
1C19   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
1C23   CD C5 0A               CALL   flushBuffer   
1C26                          ;*Macro unroll:  expect "1 2 3 + *",5
1C26   E1                     POP   HL   
1C27   E5                     PUSH   HL   
1C28   11 05 00               LD   DE,5   
1C2B   B7                     OR   A   
1C2C   ED 52                  SBC   HL,DE   
1C2E   7D                     LD   A,L   
1C2F   B4                     OR   H   
1C30   CA 90 1C               JP   Z,expectM_0_2695S52   
1C33   CD 3D 0B               CALL   printStr   
1C36   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1C46   CD 3D 0B               CALL   printStr   
1C49   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C58   21 05 00               LD   hl,5   
1C5B   E5                     PUSH   hl   
1C5C   CD 53 0C               CALL   run   
1C5F   2E 00                  .CSTR   "."   
1C61   CD 3D 0B               CALL   printStr   
1C64   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C71   E1                     POP   hl   
1C72   E5                     PUSH   hl   
1C73   E5                     PUSH   hl   
1C74   CD 53 0C               CALL   run   
1C77   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1C8B   CD C5 0A               CALL   flushBuffer   
1C8E   76                     HALT      
1C8F   00                     .CSTR      
1C90                EXPECTM_0_2695S52:      
1C90   E1                     POP   HL   
1C91                          ;*Macro unroll:  test "7 3 /", 2
1C91   31 00 4A               LD   SP,STACK   
1C94   CD 85 0B               CALL   coldBoot   
1C97   CD 54 48               CALL   execStr   
1C9A   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1CA0   CD C5 0A               CALL   flushBuffer   
1CA3                          ;*Macro unroll:  expect "7 3 /",2
1CA3   E1                     POP   HL   
1CA4   E5                     PUSH   HL   
1CA5   11 02 00               LD   DE,2   
1CA8   B7                     OR   A   
1CA9   ED 52                  SBC   HL,DE   
1CAB   7D                     LD   A,L   
1CAC   B4                     OR   H   
1CAD   CA 09 1D               JP   Z,expectM_0_2696S52   
1CB0   CD 3D 0B               CALL   printStr   
1CB3   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1CBF   CD 3D 0B               CALL   printStr   
1CC2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CD1   21 02 00               LD   hl,2   
1CD4   E5                     PUSH   hl   
1CD5   CD 53 0C               CALL   run   
1CD8   2E 00                  .CSTR   "."   
1CDA   CD 3D 0B               CALL   printStr   
1CDD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CEA   E1                     POP   hl   
1CEB   E5                     PUSH   hl   
1CEC   E5                     PUSH   hl   
1CED   CD 53 0C               CALL   run   
1CF0   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1D04   CD C5 0A               CALL   flushBuffer   
1D07   76                     HALT      
1D08   00                     .CSTR      
1D09                EXPECTM_0_2696S52:      
1D09   E1                     POP   HL   
1D0A                          ;*Macro unroll:  test "7 3 / _", 1
1D0A   31 00 4A               LD   SP,STACK   
1D0D   CD 85 0B               CALL   coldBoot   
1D10   CD 54 48               CALL   execStr   
1D13   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
1D1B   CD C5 0A               CALL   flushBuffer   
1D1E                          ;*Macro unroll:  expect "7 3 / _",1
1D1E   E1                     POP   HL   
1D1F   E5                     PUSH   HL   
1D20   11 01 00               LD   DE,1   
1D23   B7                     OR   A   
1D24   ED 52                  SBC   HL,DE   
1D26   7D                     LD   A,L   
1D27   B4                     OR   H   
1D28   CA 86 1D               JP   Z,expectM_0_2697S52   
1D2B   CD 3D 0B               CALL   printStr   
1D2E   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
1D3C   CD 3D 0B               CALL   printStr   
1D3F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D4E   21 01 00               LD   hl,1   
1D51   E5                     PUSH   hl   
1D52   CD 53 0C               CALL   run   
1D55   2E 00                  .CSTR   "."   
1D57   CD 3D 0B               CALL   printStr   
1D5A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D67   E1                     POP   hl   
1D68   E5                     PUSH   hl   
1D69   E5                     PUSH   hl   
1D6A   CD 53 0C               CALL   run   
1D6D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1D81   CD C5 0A               CALL   flushBuffer   
1D84   76                     HALT      
1D85   00                     .CSTR      
1D86                EXPECTM_0_2697S52:      
1D86   E1                     POP   HL   
1D87                          ;*Macro unroll:  test "7 3 /", 2
1D87   31 00 4A               LD   SP,STACK   
1D8A   CD 85 0B               CALL   coldBoot   
1D8D   CD 54 48               CALL   execStr   
1D90   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1D96   CD C5 0A               CALL   flushBuffer   
1D99                          ;*Macro unroll:  expect "7 3 /",2
1D99   E1                     POP   HL   
1D9A   E5                     PUSH   HL   
1D9B   11 02 00               LD   DE,2   
1D9E   B7                     OR   A   
1D9F   ED 52                  SBC   HL,DE   
1DA1   7D                     LD   A,L   
1DA2   B4                     OR   H   
1DA3   CA FF 1D               JP   Z,expectM_0_2698S52   
1DA6   CD 3D 0B               CALL   printStr   
1DA9   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1DB5   CD 3D 0B               CALL   printStr   
1DB8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DC7   21 02 00               LD   hl,2   
1DCA   E5                     PUSH   hl   
1DCB   CD 53 0C               CALL   run   
1DCE   2E 00                  .CSTR   "."   
1DD0   CD 3D 0B               CALL   printStr   
1DD3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DE0   E1                     POP   hl   
1DE1   E5                     PUSH   hl   
1DE2   E5                     PUSH   hl   
1DE3   CD 53 0C               CALL   run   
1DE6   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1DFA   CD C5 0A               CALL   flushBuffer   
1DFD   76                     HALT      
1DFE   00                     .CSTR      
1DFF                EXPECTM_0_2698S52:      
1DFF   E1                     POP   HL   
1E00                          ;*Macro unroll:  test "2 3 ==", FALSE
1E00   31 00 4A               LD   SP,STACK   
1E03   CD 85 0B               CALL   coldBoot   
1E06   CD 54 48               CALL   execStr   
1E09   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1E10   CD C5 0A               CALL   flushBuffer   
1E13                          ;*Macro unroll:  expect "2 3 ==",FALSE
1E13   E1                     POP   HL   
1E14   E5                     PUSH   HL   
1E15   11 00 00               LD   DE,FALSE   
1E18   B7                     OR   A   
1E19   ED 52                  SBC   HL,DE   
1E1B   7D                     LD   A,L   
1E1C   B4                     OR   H   
1E1D   CA 7A 1E               JP   Z,expectM_0_2699S52   
1E20   CD 3D 0B               CALL   printStr   
1E23   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1E30   CD 3D 0B               CALL   printStr   
1E33   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E42   21 00 00               LD   hl,FALSE   
1E45   E5                     PUSH   hl   
1E46   CD 53 0C               CALL   run   
1E49   2E 00                  .CSTR   "."   
1E4B   CD 3D 0B               CALL   printStr   
1E4E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E5B   E1                     POP   hl   
1E5C   E5                     PUSH   hl   
1E5D   E5                     PUSH   hl   
1E5E   CD 53 0C               CALL   run   
1E61   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1E75   CD C5 0A               CALL   flushBuffer   
1E78   76                     HALT      
1E79   00                     .CSTR      
1E7A                EXPECTM_0_2699S52:      
1E7A   E1                     POP   HL   
1E7B                          ;*Macro unroll:  test "3 3 ==", TRUE
1E7B   31 00 4A               LD   SP,STACK   
1E7E   CD 85 0B               CALL   coldBoot   
1E81   CD 54 48               CALL   execStr   
1E84   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1E8B   CD C5 0A               CALL   flushBuffer   
1E8E                          ;*Macro unroll:  expect "3 3 ==",TRUE
1E8E   E1                     POP   HL   
1E8F   E5                     PUSH   HL   
1E90   11 FF FF               LD   DE,TRUE   
1E93   B7                     OR   A   
1E94   ED 52                  SBC   HL,DE   
1E96   7D                     LD   A,L   
1E97   B4                     OR   H   
1E98   CA F5 1E               JP   Z,expectM_0_2700S52   
1E9B   CD 3D 0B               CALL   printStr   
1E9E   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1EAB   CD 3D 0B               CALL   printStr   
1EAE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EBD   21 FF FF               LD   hl,TRUE   
1EC0   E5                     PUSH   hl   
1EC1   CD 53 0C               CALL   run   
1EC4   2E 00                  .CSTR   "."   
1EC6   CD 3D 0B               CALL   printStr   
1EC9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1ED6   E1                     POP   hl   
1ED7   E5                     PUSH   hl   
1ED8   E5                     PUSH   hl   
1ED9   CD 53 0C               CALL   run   
1EDC   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1EF0   CD C5 0A               CALL   flushBuffer   
1EF3   76                     HALT      
1EF4   00                     .CSTR      
1EF5                EXPECTM_0_2700S52:      
1EF5   E1                     POP   HL   
1EF6                          ;*Macro unroll:  test "1 2 <", TRUE
1EF6   31 00 4A               LD   SP,STACK   
1EF9   CD 85 0B               CALL   coldBoot   
1EFC   CD 54 48               CALL   execStr   
1EFF   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1F05   CD C5 0A               CALL   flushBuffer   
1F08                          ;*Macro unroll:  expect "1 2 <",TRUE
1F08   E1                     POP   HL   
1F09   E5                     PUSH   HL   
1F0A   11 FF FF               LD   DE,TRUE   
1F0D   B7                     OR   A   
1F0E   ED 52                  SBC   HL,DE   
1F10   7D                     LD   A,L   
1F11   B4                     OR   H   
1F12   CA 6E 1F               JP   Z,expectM_0_2701S52   
1F15   CD 3D 0B               CALL   printStr   
1F18   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1F24   CD 3D 0B               CALL   printStr   
1F27   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F36   21 FF FF               LD   hl,TRUE   
1F39   E5                     PUSH   hl   
1F3A   CD 53 0C               CALL   run   
1F3D   2E 00                  .CSTR   "."   
1F3F   CD 3D 0B               CALL   printStr   
1F42   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F4F   E1                     POP   hl   
1F50   E5                     PUSH   hl   
1F51   E5                     PUSH   hl   
1F52   CD 53 0C               CALL   run   
1F55   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1F69   CD C5 0A               CALL   flushBuffer   
1F6C   76                     HALT      
1F6D   00                     .CSTR      
1F6E                EXPECTM_0_2701S52:      
1F6E   E1                     POP   HL   
1F6F                          ;*Macro unroll:  test "2 1 <", FALSE
1F6F   31 00 4A               LD   SP,STACK   
1F72   CD 85 0B               CALL   coldBoot   
1F75   CD 54 48               CALL   execStr   
1F78   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1F7E   CD C5 0A               CALL   flushBuffer   
1F81                          ;*Macro unroll:  expect "2 1 <",FALSE
1F81   E1                     POP   HL   
1F82   E5                     PUSH   HL   
1F83   11 00 00               LD   DE,FALSE   
1F86   B7                     OR   A   
1F87   ED 52                  SBC   HL,DE   
1F89   7D                     LD   A,L   
1F8A   B4                     OR   H   
1F8B   CA E7 1F               JP   Z,expectM_0_2702S52   
1F8E   CD 3D 0B               CALL   printStr   
1F91   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1F9D   CD 3D 0B               CALL   printStr   
1FA0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FAF   21 00 00               LD   hl,FALSE   
1FB2   E5                     PUSH   hl   
1FB3   CD 53 0C               CALL   run   
1FB6   2E 00                  .CSTR   "."   
1FB8   CD 3D 0B               CALL   printStr   
1FBB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FC8   E1                     POP   hl   
1FC9   E5                     PUSH   hl   
1FCA   E5                     PUSH   hl   
1FCB   CD 53 0C               CALL   run   
1FCE   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1FE2   CD C5 0A               CALL   flushBuffer   
1FE5   76                     HALT      
1FE6   00                     .CSTR      
1FE7                EXPECTM_0_2702S52:      
1FE7   E1                     POP   HL   
1FE8                          ;*Macro unroll:  test "2 3 <", TRUE
1FE8   31 00 4A               LD   SP,STACK   
1FEB   CD 85 0B               CALL   coldBoot   
1FEE   CD 54 48               CALL   execStr   
1FF1   32 20 33 20 3C 00      .CSTR   "2 3 <"   
1FF7   CD C5 0A               CALL   flushBuffer   
1FFA                          ;*Macro unroll:  expect "2 3 <",TRUE
1FFA   E1                     POP   HL   
1FFB   E5                     PUSH   HL   
1FFC   11 FF FF               LD   DE,TRUE   
1FFF   B7                     OR   A   
2000   ED 52                  SBC   HL,DE   
2002   7D                     LD   A,L   
2003   B4                     OR   H   
2004   CA 60 20               JP   Z,expectM_0_2703S52   
2007   CD 3D 0B               CALL   printStr   
200A   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
2016   CD 3D 0B               CALL   printStr   
2019   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2028   21 FF FF               LD   hl,TRUE   
202B   E5                     PUSH   hl   
202C   CD 53 0C               CALL   run   
202F   2E 00                  .CSTR   "."   
2031   CD 3D 0B               CALL   printStr   
2034   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2041   E1                     POP   hl   
2042   E5                     PUSH   hl   
2043   E5                     PUSH   hl   
2044   CD 53 0C               CALL   run   
2047   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
205B   CD C5 0A               CALL   flushBuffer   
205E   76                     HALT      
205F   00                     .CSTR      
2060                EXPECTM_0_2703S52:      
2060   E1                     POP   HL   
2061                          ;*Macro unroll:  test "3 3 <", FALSE
2061   31 00 4A               LD   SP,STACK   
2064   CD 85 0B               CALL   coldBoot   
2067   CD 54 48               CALL   execStr   
206A   33 20 33 20 3C 00      .CSTR   "3 3 <"   
2070   CD C5 0A               CALL   flushBuffer   
2073                          ;*Macro unroll:  expect "3 3 <",FALSE
2073   E1                     POP   HL   
2074   E5                     PUSH   HL   
2075   11 00 00               LD   DE,FALSE   
2078   B7                     OR   A   
2079   ED 52                  SBC   HL,DE   
207B   7D                     LD   A,L   
207C   B4                     OR   H   
207D   CA D9 20               JP   Z,expectM_0_2704S52   
2080   CD 3D 0B               CALL   printStr   
2083   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
208F   CD 3D 0B               CALL   printStr   
2092   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20A1   21 00 00               LD   hl,FALSE   
20A4   E5                     PUSH   hl   
20A5   CD 53 0C               CALL   run   
20A8   2E 00                  .CSTR   "."   
20AA   CD 3D 0B               CALL   printStr   
20AD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20BA   E1                     POP   hl   
20BB   E5                     PUSH   hl   
20BC   E5                     PUSH   hl   
20BD   CD 53 0C               CALL   run   
20C0   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
20D4   CD C5 0A               CALL   flushBuffer   
20D7   76                     HALT      
20D8   00                     .CSTR      
20D9                EXPECTM_0_2704S52:      
20D9   E1                     POP   HL   
20DA                          ;*Macro unroll:  test "1 2 >", FALSE
20DA   31 00 4A               LD   SP,STACK   
20DD   CD 85 0B               CALL   coldBoot   
20E0   CD 54 48               CALL   execStr   
20E3   31 20 32 20 3E 00      .CSTR   "1 2 >"   
20E9   CD C5 0A               CALL   flushBuffer   
20EC                          ;*Macro unroll:  expect "1 2 >",FALSE
20EC   E1                     POP   HL   
20ED   E5                     PUSH   HL   
20EE   11 00 00               LD   DE,FALSE   
20F1   B7                     OR   A   
20F2   ED 52                  SBC   HL,DE   
20F4   7D                     LD   A,L   
20F5   B4                     OR   H   
20F6   CA 52 21               JP   Z,expectM_0_2705S52   
20F9   CD 3D 0B               CALL   printStr   
20FC   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2108   CD 3D 0B               CALL   printStr   
210B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
211A   21 00 00               LD   hl,FALSE   
211D   E5                     PUSH   hl   
211E   CD 53 0C               CALL   run   
2121   2E 00                  .CSTR   "."   
2123   CD 3D 0B               CALL   printStr   
2126   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2133   E1                     POP   hl   
2134   E5                     PUSH   hl   
2135   E5                     PUSH   hl   
2136   CD 53 0C               CALL   run   
2139   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
214D   CD C5 0A               CALL   flushBuffer   
2150   76                     HALT      
2151   00                     .CSTR      
2152                EXPECTM_0_2705S52:      
2152   E1                     POP   HL   
2153                          ;*Macro unroll:  test "2 1 >", TRUE
2153   31 00 4A               LD   SP,STACK   
2156   CD 85 0B               CALL   coldBoot   
2159   CD 54 48               CALL   execStr   
215C   32 20 31 20 3E 00      .CSTR   "2 1 >"   
2162   CD C5 0A               CALL   flushBuffer   
2165                          ;*Macro unroll:  expect "2 1 >",TRUE
2165   E1                     POP   HL   
2166   E5                     PUSH   HL   
2167   11 FF FF               LD   DE,TRUE   
216A   B7                     OR   A   
216B   ED 52                  SBC   HL,DE   
216D   7D                     LD   A,L   
216E   B4                     OR   H   
216F   CA CB 21               JP   Z,expectM_0_2706S52   
2172   CD 3D 0B               CALL   printStr   
2175   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
2181   CD 3D 0B               CALL   printStr   
2184   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2193   21 FF FF               LD   hl,TRUE   
2196   E5                     PUSH   hl   
2197   CD 53 0C               CALL   run   
219A   2E 00                  .CSTR   "."   
219C   CD 3D 0B               CALL   printStr   
219F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21AC   E1                     POP   hl   
21AD   E5                     PUSH   hl   
21AE   E5                     PUSH   hl   
21AF   CD 53 0C               CALL   run   
21B2   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
21C6   CD C5 0A               CALL   flushBuffer   
21C9   76                     HALT      
21CA   00                     .CSTR      
21CB                EXPECTM_0_2706S52:      
21CB   E1                     POP   HL   
21CC                          ;*Macro unroll:  test "3 3 >", FALSE
21CC   31 00 4A               LD   SP,STACK   
21CF   CD 85 0B               CALL   coldBoot   
21D2   CD 54 48               CALL   execStr   
21D5   33 20 33 20 3E 00      .CSTR   "3 3 >"   
21DB   CD C5 0A               CALL   flushBuffer   
21DE                          ;*Macro unroll:  expect "3 3 >",FALSE
21DE   E1                     POP   HL   
21DF   E5                     PUSH   HL   
21E0   11 00 00               LD   DE,FALSE   
21E3   B7                     OR   A   
21E4   ED 52                  SBC   HL,DE   
21E6   7D                     LD   A,L   
21E7   B4                     OR   H   
21E8   CA 44 22               JP   Z,expectM_0_2707S52   
21EB   CD 3D 0B               CALL   printStr   
21EE   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
21FA   CD 3D 0B               CALL   printStr   
21FD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
220C   21 00 00               LD   hl,FALSE   
220F   E5                     PUSH   hl   
2210   CD 53 0C               CALL   run   
2213   2E 00                  .CSTR   "."   
2215   CD 3D 0B               CALL   printStr   
2218   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2225   E1                     POP   hl   
2226   E5                     PUSH   hl   
2227   E5                     PUSH   hl   
2228   CD 53 0C               CALL   run   
222B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
223F   CD C5 0A               CALL   flushBuffer   
2242   76                     HALT      
2243   00                     .CSTR      
2244                EXPECTM_0_2707S52:      
2244   E1                     POP   HL   
2245                          ;*Macro unroll:  test "4 3 >", TRUE
2245   31 00 4A               LD   SP,STACK   
2248   CD 85 0B               CALL   coldBoot   
224B   CD 54 48               CALL   execStr   
224E   34 20 33 20 3E 00      .CSTR   "4 3 >"   
2254   CD C5 0A               CALL   flushBuffer   
2257                          ;*Macro unroll:  expect "4 3 >",TRUE
2257   E1                     POP   HL   
2258   E5                     PUSH   HL   
2259   11 FF FF               LD   DE,TRUE   
225C   B7                     OR   A   
225D   ED 52                  SBC   HL,DE   
225F   7D                     LD   A,L   
2260   B4                     OR   H   
2261   CA BD 22               JP   Z,expectM_0_2708S52   
2264   CD 3D 0B               CALL   printStr   
2267   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2273   CD 3D 0B               CALL   printStr   
2276   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2285   21 FF FF               LD   hl,TRUE   
2288   E5                     PUSH   hl   
2289   CD 53 0C               CALL   run   
228C   2E 00                  .CSTR   "."   
228E   CD 3D 0B               CALL   printStr   
2291   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
229E   E1                     POP   hl   
229F   E5                     PUSH   hl   
22A0   E5                     PUSH   hl   
22A1   CD 53 0C               CALL   run   
22A4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
22B8   CD C5 0A               CALL   flushBuffer   
22BB   76                     HALT      
22BC   00                     .CSTR      
22BD                EXPECTM_0_2708S52:      
22BD   E1                     POP   HL   
22BE                          ;*Macro unroll:  test "2 2 <=", TRUE
22BE   31 00 4A               LD   SP,STACK   
22C1   CD 85 0B               CALL   coldBoot   
22C4   CD 54 48               CALL   execStr   
22C7   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
22CE   CD C5 0A               CALL   flushBuffer   
22D1                          ;*Macro unroll:  expect "2 2 <=",TRUE
22D1   E1                     POP   HL   
22D2   E5                     PUSH   HL   
22D3   11 FF FF               LD   DE,TRUE   
22D6   B7                     OR   A   
22D7   ED 52                  SBC   HL,DE   
22D9   7D                     LD   A,L   
22DA   B4                     OR   H   
22DB   CA 38 23               JP   Z,expectM_0_2709S52   
22DE   CD 3D 0B               CALL   printStr   
22E1   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
22EE   CD 3D 0B               CALL   printStr   
22F1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2300   21 FF FF               LD   hl,TRUE   
2303   E5                     PUSH   hl   
2304   CD 53 0C               CALL   run   
2307   2E 00                  .CSTR   "."   
2309   CD 3D 0B               CALL   printStr   
230C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2319   E1                     POP   hl   
231A   E5                     PUSH   hl   
231B   E5                     PUSH   hl   
231C   CD 53 0C               CALL   run   
231F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2333   CD C5 0A               CALL   flushBuffer   
2336   76                     HALT      
2337   00                     .CSTR      
2338                EXPECTM_0_2709S52:      
2338   E1                     POP   HL   
2339                          ;*Macro unroll:  test "2 2 >=", TRUE
2339   31 00 4A               LD   SP,STACK   
233C   CD 85 0B               CALL   coldBoot   
233F   CD 54 48               CALL   execStr   
2342   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
2349   CD C5 0A               CALL   flushBuffer   
234C                          ;*Macro unroll:  expect "2 2 >=",TRUE
234C   E1                     POP   HL   
234D   E5                     PUSH   HL   
234E   11 FF FF               LD   DE,TRUE   
2351   B7                     OR   A   
2352   ED 52                  SBC   HL,DE   
2354   7D                     LD   A,L   
2355   B4                     OR   H   
2356   CA B3 23               JP   Z,expectM_0_2710S52   
2359   CD 3D 0B               CALL   printStr   
235C   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2369   CD 3D 0B               CALL   printStr   
236C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
237B   21 FF FF               LD   hl,TRUE   
237E   E5                     PUSH   hl   
237F   CD 53 0C               CALL   run   
2382   2E 00                  .CSTR   "."   
2384   CD 3D 0B               CALL   printStr   
2387   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2394   E1                     POP   hl   
2395   E5                     PUSH   hl   
2396   E5                     PUSH   hl   
2397   CD 53 0C               CALL   run   
239A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
23AE   CD C5 0A               CALL   flushBuffer   
23B1   76                     HALT      
23B2   00                     .CSTR      
23B3                EXPECTM_0_2710S52:      
23B3   E1                     POP   HL   
23B4                          ;*Macro unroll:  test "3 1 <<", 6
23B4   31 00 4A               LD   SP,STACK   
23B7   CD 85 0B               CALL   coldBoot   
23BA   CD 54 48               CALL   execStr   
23BD   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
23C4   CD C5 0A               CALL   flushBuffer   
23C7                          ;*Macro unroll:  expect "3 1 <<",6
23C7   E1                     POP   HL   
23C8   E5                     PUSH   HL   
23C9   11 06 00               LD   DE,6   
23CC   B7                     OR   A   
23CD   ED 52                  SBC   HL,DE   
23CF   7D                     LD   A,L   
23D0   B4                     OR   H   
23D1   CA 2E 24               JP   Z,expectM_0_2711S52   
23D4   CD 3D 0B               CALL   printStr   
23D7   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
23E4   CD 3D 0B               CALL   printStr   
23E7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23F6   21 06 00               LD   hl,6   
23F9   E5                     PUSH   hl   
23FA   CD 53 0C               CALL   run   
23FD   2E 00                  .CSTR   "."   
23FF   CD 3D 0B               CALL   printStr   
2402   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
240F   E1                     POP   hl   
2410   E5                     PUSH   hl   
2411   E5                     PUSH   hl   
2412   CD 53 0C               CALL   run   
2415   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2429   CD C5 0A               CALL   flushBuffer   
242C   76                     HALT      
242D   00                     .CSTR      
242E                EXPECTM_0_2711S52:      
242E   E1                     POP   HL   
242F                          ;*Macro unroll:  test "10 1 >>", 5
242F   31 00 4A               LD   SP,STACK   
2432   CD 85 0B               CALL   coldBoot   
2435   CD 54 48               CALL   execStr   
2438   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
2440   CD C5 0A               CALL   flushBuffer   
2443                          ;*Macro unroll:  expect "10 1 >>",5
2443   E1                     POP   HL   
2444   E5                     PUSH   HL   
2445   11 05 00               LD   DE,5   
2448   B7                     OR   A   
2449   ED 52                  SBC   HL,DE   
244B   7D                     LD   A,L   
244C   B4                     OR   H   
244D   CA AB 24               JP   Z,expectM_0_2712S52   
2450   CD 3D 0B               CALL   printStr   
2453   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2461   CD 3D 0B               CALL   printStr   
2464   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2473   21 05 00               LD   hl,5   
2476   E5                     PUSH   hl   
2477   CD 53 0C               CALL   run   
247A   2E 00                  .CSTR   "."   
247C   CD 3D 0B               CALL   printStr   
247F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
248C   E1                     POP   hl   
248D   E5                     PUSH   hl   
248E   E5                     PUSH   hl   
248F   CD 53 0C               CALL   run   
2492   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
24A6   CD C5 0A               CALL   flushBuffer   
24A9   76                     HALT      
24AA   00                     .CSTR      
24AB                EXPECTM_0_2712S52:      
24AB   E1                     POP   HL   
24AC                          ;*Macro unroll:  test "1 x = x", 1
24AC   31 00 4A               LD   SP,STACK   
24AF   CD 85 0B               CALL   coldBoot   
24B2   CD 54 48               CALL   execStr   
24B5   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
24BD   CD C5 0A               CALL   flushBuffer   
24C0                          ;*Macro unroll:  expect "1 x = x",1
24C0   E1                     POP   HL   
24C1   E5                     PUSH   HL   
24C2   11 01 00               LD   DE,1   
24C5   B7                     OR   A   
24C6   ED 52                  SBC   HL,DE   
24C8   7D                     LD   A,L   
24C9   B4                     OR   H   
24CA   CA 28 25               JP   Z,expectM_0_2713S52   
24CD   CD 3D 0B               CALL   printStr   
24D0   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
24DE   CD 3D 0B               CALL   printStr   
24E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24F0   21 01 00               LD   hl,1   
24F3   E5                     PUSH   hl   
24F4   CD 53 0C               CALL   run   
24F7   2E 00                  .CSTR   "."   
24F9   CD 3D 0B               CALL   printStr   
24FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2509   E1                     POP   hl   
250A   E5                     PUSH   hl   
250B   E5                     PUSH   hl   
250C   CD 53 0C               CALL   run   
250F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2523   CD C5 0A               CALL   flushBuffer   
2526   76                     HALT      
2527   00                     .CSTR      
2528                EXPECTM_0_2713S52:      
2528   E1                     POP   HL   
2529                          ;*Macro unroll:  test "1{}^", 1
2529   31 00 4A               LD   SP,STACK   
252C   CD 85 0B               CALL   coldBoot   
252F   CD 54 48               CALL   execStr   
2532   31 7B 7D 5E 00         .CSTR   "1{}^"   
2537   CD C5 0A               CALL   flushBuffer   
253A                          ;*Macro unroll:  expect "1{}^",1
253A   E1                     POP   HL   
253B   E5                     PUSH   HL   
253C   11 01 00               LD   DE,1   
253F   B7                     OR   A   
2540   ED 52                  SBC   HL,DE   
2542   7D                     LD   A,L   
2543   B4                     OR   H   
2544   CA 9F 25               JP   Z,expectM_0_2714S52   
2547   CD 3D 0B               CALL   printStr   
254A   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2555   CD 3D 0B               CALL   printStr   
2558   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2567   21 01 00               LD   hl,1   
256A   E5                     PUSH   hl   
256B   CD 53 0C               CALL   run   
256E   2E 00                  .CSTR   "."   
2570   CD 3D 0B               CALL   printStr   
2573   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2580   E1                     POP   hl   
2581   E5                     PUSH   hl   
2582   E5                     PUSH   hl   
2583   CD 53 0C               CALL   run   
2586   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
259A   CD C5 0A               CALL   flushBuffer   
259D   76                     HALT      
259E   00                     .CSTR      
259F                EXPECTM_0_2714S52:      
259F   E1                     POP   HL   
25A0                          ;*Macro unroll:  test "{1}^", 1
25A0   31 00 4A               LD   SP,STACK   
25A3   CD 85 0B               CALL   coldBoot   
25A6   CD 54 48               CALL   execStr   
25A9   7B 31 7D 5E 00         .CSTR   "{1}^"   
25AE   CD C5 0A               CALL   flushBuffer   
25B1                          ;*Macro unroll:  expect "{1}^",1
25B1   E1                     POP   HL   
25B2   E5                     PUSH   HL   
25B3   11 01 00               LD   DE,1   
25B6   B7                     OR   A   
25B7   ED 52                  SBC   HL,DE   
25B9   7D                     LD   A,L   
25BA   B4                     OR   H   
25BB   CA 16 26               JP   Z,expectM_0_2715S52   
25BE   CD 3D 0B               CALL   printStr   
25C1   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
25CC   CD 3D 0B               CALL   printStr   
25CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25DE   21 01 00               LD   hl,1   
25E1   E5                     PUSH   hl   
25E2   CD 53 0C               CALL   run   
25E5   2E 00                  .CSTR   "."   
25E7   CD 3D 0B               CALL   printStr   
25EA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25F7   E1                     POP   hl   
25F8   E5                     PUSH   hl   
25F9   E5                     PUSH   hl   
25FA   CD 53 0C               CALL   run   
25FD   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2611   CD C5 0A               CALL   flushBuffer   
2614   76                     HALT      
2615   00                     .CSTR      
2616                EXPECTM_0_2715S52:      
2616   E1                     POP   HL   
2617                          ;*Macro unroll:  test "{{1}^}^", 1
2617   31 00 4A               LD   SP,STACK   
261A   CD 85 0B               CALL   coldBoot   
261D   CD 54 48               CALL   execStr   
2620   7B 7B 31 7D 5E 7D 5E 00 .CSTR   "{{1}^}^"   
2628   CD C5 0A               CALL   flushBuffer   
262B                          ;*Macro unroll:  expect "{{1}^}^",1
262B   E1                     POP   HL   
262C   E5                     PUSH   HL   
262D   11 01 00               LD   DE,1   
2630   B7                     OR   A   
2631   ED 52                  SBC   HL,DE   
2633   7D                     LD   A,L   
2634   B4                     OR   H   
2635   CA 93 26               JP   Z,expectM_0_2716S52   
2638   CD 3D 0B               CALL   printStr   
263B   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2649   CD 3D 0B               CALL   printStr   
264C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
265B   21 01 00               LD   hl,1   
265E   E5                     PUSH   hl   
265F   CD 53 0C               CALL   run   
2662   2E 00                  .CSTR   "."   
2664   CD 3D 0B               CALL   printStr   
2667   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2674   E1                     POP   hl   
2675   E5                     PUSH   hl   
2676   E5                     PUSH   hl   
2677   CD 53 0C               CALL   run   
267A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
268E   CD C5 0A               CALL   flushBuffer   
2691   76                     HALT      
2692   00                     .CSTR      
2693                EXPECTM_0_2716S52:      
2693   E1                     POP   HL   
2694                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2694   31 00 4A               LD   SP,STACK   
2697   CD 85 0B               CALL   coldBoot   
269A   CD 54 48               CALL   execStr   
269D   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "{{{1}^}^}^"   
26A8   CD C5 0A               CALL   flushBuffer   
26AB                          ;*Macro unroll:  expect "{{{1}^}^}^",1
26AB   E1                     POP   HL   
26AC   E5                     PUSH   HL   
26AD   11 01 00               LD   DE,1   
26B0   B7                     OR   A   
26B1   ED 52                  SBC   HL,DE   
26B3   7D                     LD   A,L   
26B4   B4                     OR   H   
26B5   CA 16 27               JP   Z,expectM_0_2717S52   
26B8   CD 3D 0B               CALL   printStr   
26BB   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
26CC   CD 3D 0B               CALL   printStr   
26CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26DE   21 01 00               LD   hl,1   
26E1   E5                     PUSH   hl   
26E2   CD 53 0C               CALL   run   
26E5   2E 00                  .CSTR   "."   
26E7   CD 3D 0B               CALL   printStr   
26EA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26F7   E1                     POP   hl   
26F8   E5                     PUSH   hl   
26F9   E5                     PUSH   hl   
26FA   CD 53 0C               CALL   run   
26FD   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2711   CD C5 0A               CALL   flushBuffer   
2714   76                     HALT      
2715   00                     .CSTR      
2716                EXPECTM_0_2717S52:      
2716   E1                     POP   HL   
2717                          ;*Macro unroll:  test "5 /f{10} ?", 5
2717   31 00 4A               LD   SP,STACK   
271A   CD 85 0B               CALL   coldBoot   
271D   CD 54 48               CALL   execStr   
2720   35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "5 /f{10} ?"   
272B   CD C5 0A               CALL   flushBuffer   
272E                          ;*Macro unroll:  expect "5 /f{10} ?",5
272E   E1                     POP   HL   
272F   E5                     PUSH   HL   
2730   11 05 00               LD   DE,5   
2733   B7                     OR   A   
2734   ED 52                  SBC   HL,DE   
2736   7D                     LD   A,L   
2737   B4                     OR   H   
2738   CA 99 27               JP   Z,expectM_0_2718S52   
273B   CD 3D 0B               CALL   printStr   
273E   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
274F   CD 3D 0B               CALL   printStr   
2752   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2761   21 05 00               LD   hl,5   
2764   E5                     PUSH   hl   
2765   CD 53 0C               CALL   run   
2768   2E 00                  .CSTR   "."   
276A   CD 3D 0B               CALL   printStr   
276D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
277A   E1                     POP   hl   
277B   E5                     PUSH   hl   
277C   E5                     PUSH   hl   
277D   CD 53 0C               CALL   run   
2780   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2794   CD C5 0A               CALL   flushBuffer   
2797   76                     HALT      
2798   00                     .CSTR      
2799                EXPECTM_0_2718S52:      
2799   E1                     POP   HL   
279A                          ;*Macro unroll:  test "5 /t{10} ? +", 15
279A   31 00 4A               LD   SP,STACK   
279D   CD 85 0B               CALL   coldBoot   
27A0   CD 54 48               CALL   execStr   
27A3   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 /t{10} ? +"   
27B0   CD C5 0A               CALL   flushBuffer   
27B3                          ;*Macro unroll:  expect "5 /t{10} ? +",15
27B3   E1                     POP   HL   
27B4   E5                     PUSH   HL   
27B5   11 0F 00               LD   DE,15   
27B8   B7                     OR   A   
27B9   ED 52                  SBC   HL,DE   
27BB   7D                     LD   A,L   
27BC   B4                     OR   H   
27BD   CA 20 28               JP   Z,expectM_0_2719S52   
27C0   CD 3D 0B               CALL   printStr   
27C3   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
27D6   CD 3D 0B               CALL   printStr   
27D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27E8   21 0F 00               LD   hl,15   
27EB   E5                     PUSH   hl   
27EC   CD 53 0C               CALL   run   
27EF   2E 00                  .CSTR   "."   
27F1   CD 3D 0B               CALL   printStr   
27F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2801   E1                     POP   hl   
2802   E5                     PUSH   hl   
2803   E5                     PUSH   hl   
2804   CD 53 0C               CALL   run   
2807   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
281B   CD C5 0A               CALL   flushBuffer   
281E   76                     HALT      
281F   00                     .CSTR      
2820                EXPECTM_0_2719S52:      
2820   E1                     POP   HL   
2821                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2821   31 00 4A               LD   SP,STACK   
2824   CD 85 0B               CALL   coldBoot   
2827   CD 54 48               CALL   execStr   
282A   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /f{10}{20} ?? +"   
283C   CD C5 0A               CALL   flushBuffer   
283F                          ;*Macro unroll:  expect "1 /f{10}{20} ?? +",21
283F   E1                     POP   HL   
2840   E5                     PUSH   HL   
2841   11 15 00               LD   DE,21   
2844   B7                     OR   A   
2845   ED 52                  SBC   HL,DE   
2847   7D                     LD   A,L   
2848   B4                     OR   H   
2849   CA B1 28               JP   Z,expectM_0_2720S52   
284C   CD 3D 0B               CALL   printStr   
284F   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2867   CD 3D 0B               CALL   printStr   
286A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2879   21 15 00               LD   hl,21   
287C   E5                     PUSH   hl   
287D   CD 53 0C               CALL   run   
2880   2E 00                  .CSTR   "."   
2882   CD 3D 0B               CALL   printStr   
2885   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2892   E1                     POP   hl   
2893   E5                     PUSH   hl   
2894   E5                     PUSH   hl   
2895   CD 53 0C               CALL   run   
2898   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
28AC   CD C5 0A               CALL   flushBuffer   
28AF   76                     HALT      
28B0   00                     .CSTR      
28B1                EXPECTM_0_2720S52:      
28B1   E1                     POP   HL   
28B2                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
28B2   31 00 4A               LD   SP,STACK   
28B5   CD 85 0B               CALL   coldBoot   
28B8   CD 54 48               CALL   execStr   
28BB   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /t{10}{20} ?? +"   
28CD   CD C5 0A               CALL   flushBuffer   
28D0                          ;*Macro unroll:  expect "1 /t{10}{20} ?? +",11
28D0   E1                     POP   HL   
28D1   E5                     PUSH   HL   
28D2   11 0B 00               LD   DE,11   
28D5   B7                     OR   A   
28D6   ED 52                  SBC   HL,DE   
28D8   7D                     LD   A,L   
28D9   B4                     OR   H   
28DA   CA 42 29               JP   Z,expectM_0_2721S52   
28DD   CD 3D 0B               CALL   printStr   
28E0   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
28F8   CD 3D 0B               CALL   printStr   
28FB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
290A   21 0B 00               LD   hl,11   
290D   E5                     PUSH   hl   
290E   CD 53 0C               CALL   run   
2911   2E 00                  .CSTR   "."   
2913   CD 3D 0B               CALL   printStr   
2916   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2923   E1                     POP   hl   
2924   E5                     PUSH   hl   
2925   E5                     PUSH   hl   
2926   CD 53 0C               CALL   run   
2929   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
293D   CD C5 0A               CALL   flushBuffer   
2940   76                     HALT      
2941   00                     .CSTR      
2942                EXPECTM_0_2721S52:      
2942   E1                     POP   HL   
2943                          ;*Macro unroll:  test ": -2%", $0000
2943   31 00 4A               LD   SP,STACK   
2946   CD 85 0B               CALL   coldBoot   
2949   CD 54 48               CALL   execStr   
294C   3A 20 2D 32 25 00      .CSTR   ": -2%"   
2952   CD C5 0A               CALL   flushBuffer   
2955                          ;*Macro unroll:  expect ": -2%",$0000
2955   E1                     POP   HL   
2956   E5                     PUSH   HL   
2957   11 00 00               LD   DE,$0000   
295A   B7                     OR   A   
295B   ED 52                  SBC   HL,DE   
295D   7D                     LD   A,L   
295E   B4                     OR   H   
295F   CA BB 29               JP   Z,expectM_0_2722S52   
2962   CD 3D 0B               CALL   printStr   
2965   43 6F 64 65 3A 20 3A 20 2D 32 25 00 .CSTR   "Code: ",": -2%"   
2971   CD 3D 0B               CALL   printStr   
2974   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2983   21 00 00               LD   hl,$0000   
2986   E5                     PUSH   hl   
2987   CD 53 0C               CALL   run   
298A   2E 00                  .CSTR   "."   
298C   CD 3D 0B               CALL   printStr   
298F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
299C   E1                     POP   hl   
299D   E5                     PUSH   hl   
299E   E5                     PUSH   hl   
299F   CD 53 0C               CALL   run   
29A2   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
29B6   CD C5 0A               CALL   flushBuffer   
29B9   76                     HALT      
29BA   00                     .CSTR      
29BB                EXPECTM_0_2722S52:      
29BB   E1                     POP   HL   
29BC                          ;*Macro unroll:  test ":a -1%", $0001
29BC   31 00 4A               LD   SP,STACK   
29BF   CD 85 0B               CALL   coldBoot   
29C2   CD 54 48               CALL   execStr   
29C5   3A 61 20 2D 31 25 00   .CSTR   ":a -1%"   
29CC   CD C5 0A               CALL   flushBuffer   
29CF                          ;*Macro unroll:  expect ":a -1%",$0001
29CF   E1                     POP   HL   
29D0   E5                     PUSH   HL   
29D1   11 01 00               LD   DE,$0001   
29D4   B7                     OR   A   
29D5   ED 52                  SBC   HL,DE   
29D7   7D                     LD   A,L   
29D8   B4                     OR   H   
29D9   CA 36 2A               JP   Z,expectM_0_2723S52   
29DC   CD 3D 0B               CALL   printStr   
29DF   43 6F 64 65 3A 20 3A 61 20 2D 31 25 00 .CSTR   "Code: ",":a -1%"   
29EC   CD 3D 0B               CALL   printStr   
29EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29FE   21 01 00               LD   hl,$0001   
2A01   E5                     PUSH   hl   
2A02   CD 53 0C               CALL   run   
2A05   2E 00                  .CSTR   "."   
2A07   CD 3D 0B               CALL   printStr   
2A0A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A17   E1                     POP   hl   
2A18   E5                     PUSH   hl   
2A19   E5                     PUSH   hl   
2A1A   CD 53 0C               CALL   run   
2A1D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2A31   CD C5 0A               CALL   flushBuffer   
2A34   76                     HALT      
2A35   00                     .CSTR      
2A36                EXPECTM_0_2723S52:      
2A36   E1                     POP   HL   
2A37                          ;*Macro unroll:  test ":a: -1%", $0001
2A37   31 00 4A               LD   SP,STACK   
2A3A   CD 85 0B               CALL   coldBoot   
2A3D   CD 54 48               CALL   execStr   
2A40   3A 61 3A 20 2D 31 25 00 .CSTR   ":a: -1%"   
2A48   CD C5 0A               CALL   flushBuffer   
2A4B                          ;*Macro unroll:  expect ":a: -1%",$0001
2A4B   E1                     POP   HL   
2A4C   E5                     PUSH   HL   
2A4D   11 01 00               LD   DE,$0001   
2A50   B7                     OR   A   
2A51   ED 52                  SBC   HL,DE   
2A53   7D                     LD   A,L   
2A54   B4                     OR   H   
2A55   CA B3 2A               JP   Z,expectM_0_2724S52   
2A58   CD 3D 0B               CALL   printStr   
2A5B   43 6F 64 65 3A 20 3A 61 3A 20 2D 31 25 00 .CSTR   "Code: ",":a: -1%"   
2A69   CD 3D 0B               CALL   printStr   
2A6C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A7B   21 01 00               LD   hl,$0001   
2A7E   E5                     PUSH   hl   
2A7F   CD 53 0C               CALL   run   
2A82   2E 00                  .CSTR   "."   
2A84   CD 3D 0B               CALL   printStr   
2A87   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A94   E1                     POP   hl   
2A95   E5                     PUSH   hl   
2A96   E5                     PUSH   hl   
2A97   CD 53 0C               CALL   run   
2A9A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2AAE   CD C5 0A               CALL   flushBuffer   
2AB1   76                     HALT      
2AB2   00                     .CSTR      
2AB3                EXPECTM_0_2724S52:      
2AB3   E1                     POP   HL   
2AB4                          ;*Macro unroll:  test ":a:b -1%", $0102
2AB4   31 00 4A               LD   SP,STACK   
2AB7   CD 85 0B               CALL   coldBoot   
2ABA   CD 54 48               CALL   execStr   
2ABD   3A 61 3A 62 20 2D 31 25 00 .CSTR   ":a:b -1%"   
2AC6   CD C5 0A               CALL   flushBuffer   
2AC9                          ;*Macro unroll:  expect ":a:b -1%",$0102
2AC9   E1                     POP   HL   
2ACA   E5                     PUSH   HL   
2ACB   11 02 01               LD   DE,$0102   
2ACE   B7                     OR   A   
2ACF   ED 52                  SBC   HL,DE   
2AD1   7D                     LD   A,L   
2AD2   B4                     OR   H   
2AD3   CA 32 2B               JP   Z,expectM_0_2725S52   
2AD6   CD 3D 0B               CALL   printStr   
2AD9   43 6F 64 65 3A 20 3A 61 3A 62 20 2D 31 25 00 .CSTR   "Code: ",":a:b -1%"   
2AE8   CD 3D 0B               CALL   printStr   
2AEB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AFA   21 02 01               LD   hl,$0102   
2AFD   E5                     PUSH   hl   
2AFE   CD 53 0C               CALL   run   
2B01   2E 00                  .CSTR   "."   
2B03   CD 3D 0B               CALL   printStr   
2B06   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B13   E1                     POP   hl   
2B14   E5                     PUSH   hl   
2B15   E5                     PUSH   hl   
2B16   CD 53 0C               CALL   run   
2B19   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2B2D   CD C5 0A               CALL   flushBuffer   
2B30   76                     HALT      
2B31   00                     .CSTR      
2B32                EXPECTM_0_2725S52:      
2B32   E1                     POP   HL   
2B33                          ;*Macro unroll:  test "::b -1%", $0101
2B33   31 00 4A               LD   SP,STACK   
2B36   CD 85 0B               CALL   coldBoot   
2B39   CD 54 48               CALL   execStr   
2B3C   3A 3A 62 20 2D 31 25 00 .CSTR   "::b -1%"   
2B44   CD C5 0A               CALL   flushBuffer   
2B47                          ;*Macro unroll:  expect "::b -1%",$0101
2B47   E1                     POP   HL   
2B48   E5                     PUSH   HL   
2B49   11 01 01               LD   DE,$0101   
2B4C   B7                     OR   A   
2B4D   ED 52                  SBC   HL,DE   
2B4F   7D                     LD   A,L   
2B50   B4                     OR   H   
2B51   CA AF 2B               JP   Z,expectM_0_2726S52   
2B54   CD 3D 0B               CALL   printStr   
2B57   43 6F 64 65 3A 20 3A 3A 62 20 2D 31 25 00 .CSTR   "Code: ","::b -1%"   
2B65   CD 3D 0B               CALL   printStr   
2B68   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B77   21 01 01               LD   hl,$0101   
2B7A   E5                     PUSH   hl   
2B7B   CD 53 0C               CALL   run   
2B7E   2E 00                  .CSTR   "."   
2B80   CD 3D 0B               CALL   printStr   
2B83   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B90   E1                     POP   hl   
2B91   E5                     PUSH   hl   
2B92   E5                     PUSH   hl   
2B93   CD 53 0C               CALL   run   
2B96   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2BAA   CD C5 0A               CALL   flushBuffer   
2BAD   76                     HALT      
2BAE   00                     .CSTR      
2BAF                EXPECTM_0_2726S52:      
2BAF   E1                     POP   HL   
2BB0                          ;*Macro unroll:  test ":{2};^", 2
2BB0   31 00 4A               LD   SP,STACK   
2BB3   CD 85 0B               CALL   coldBoot   
2BB6   CD 54 48               CALL   execStr   
2BB9   3A 7B 32 7D 3B 5E 00   .CSTR   ":{2};^"   
2BC0   CD C5 0A               CALL   flushBuffer   
2BC3                          ;*Macro unroll:  expect ":{2};^",2
2BC3   E1                     POP   HL   
2BC4   E5                     PUSH   HL   
2BC5   11 02 00               LD   DE,2   
2BC8   B7                     OR   A   
2BC9   ED 52                  SBC   HL,DE   
2BCB   7D                     LD   A,L   
2BCC   B4                     OR   H   
2BCD   CA 2A 2C               JP   Z,expectM_0_2727S52   
2BD0   CD 3D 0B               CALL   printStr   
2BD3   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
2BE0   CD 3D 0B               CALL   printStr   
2BE3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BF2   21 02 00               LD   hl,2   
2BF5   E5                     PUSH   hl   
2BF6   CD 53 0C               CALL   run   
2BF9   2E 00                  .CSTR   "."   
2BFB   CD 3D 0B               CALL   printStr   
2BFE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C0B   E1                     POP   hl   
2C0C   E5                     PUSH   hl   
2C0D   E5                     PUSH   hl   
2C0E   CD 53 0C               CALL   run   
2C11   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2C25   CD C5 0A               CALL   flushBuffer   
2C28   76                     HALT      
2C29   00                     .CSTR      
2C2A                EXPECTM_0_2727S52:      
2C2A   E1                     POP   HL   
2C2B                          ;*Macro unroll:  test ":a{2};^", 2
2C2B   31 00 4A               LD   SP,STACK   
2C2E   CD 85 0B               CALL   coldBoot   
2C31   CD 54 48               CALL   execStr   
2C34   3A 61 7B 32 7D 3B 5E 00 .CSTR   ":a{2};^"   
2C3C   CD C5 0A               CALL   flushBuffer   
2C3F                          ;*Macro unroll:  expect ":a{2};^",2
2C3F   E1                     POP   HL   
2C40   E5                     PUSH   HL   
2C41   11 02 00               LD   DE,2   
2C44   B7                     OR   A   
2C45   ED 52                  SBC   HL,DE   
2C47   7D                     LD   A,L   
2C48   B4                     OR   H   
2C49   CA A7 2C               JP   Z,expectM_0_2728S52   
2C4C   CD 3D 0B               CALL   printStr   
2C4F   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
2C5D   CD 3D 0B               CALL   printStr   
2C60   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C6F   21 02 00               LD   hl,2   
2C72   E5                     PUSH   hl   
2C73   CD 53 0C               CALL   run   
2C76   2E 00                  .CSTR   "."   
2C78   CD 3D 0B               CALL   printStr   
2C7B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C88   E1                     POP   hl   
2C89   E5                     PUSH   hl   
2C8A   E5                     PUSH   hl   
2C8B   CD 53 0C               CALL   run   
2C8E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2CA2   CD C5 0A               CALL   flushBuffer   
2CA5   76                     HALT      
2CA6   00                     .CSTR      
2CA7                EXPECTM_0_2728S52:      
2CA7   E1                     POP   HL   
2CA8                          ;*Macro unroll:  test "5 :a{$a};^", 5
2CA8   31 00 4A               LD   SP,STACK   
2CAB   CD 85 0B               CALL   coldBoot   
2CAE   CD 54 48               CALL   execStr   
2CB1   35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a{$a};^"   
2CBC   CD C5 0A               CALL   flushBuffer   
2CBF                          ;*Macro unroll:  expect "5 :a{$a};^",5
2CBF   E1                     POP   HL   
2CC0   E5                     PUSH   HL   
2CC1   11 05 00               LD   DE,5   
2CC4   B7                     OR   A   
2CC5   ED 52                  SBC   HL,DE   
2CC7   7D                     LD   A,L   
2CC8   B4                     OR   H   
2CC9   CA 2A 2D               JP   Z,expectM_0_2729S52   
2CCC   CD 3D 0B               CALL   printStr   
2CCF   43 6F 64 65 3A 20 35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{$a};^"   
2CE0   CD 3D 0B               CALL   printStr   
2CE3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CF2   21 05 00               LD   hl,5   
2CF5   E5                     PUSH   hl   
2CF6   CD 53 0C               CALL   run   
2CF9   2E 00                  .CSTR   "."   
2CFB   CD 3D 0B               CALL   printStr   
2CFE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D0B   E1                     POP   hl   
2D0C   E5                     PUSH   hl   
2D0D   E5                     PUSH   hl   
2D0E   CD 53 0C               CALL   run   
2D11   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2D25   CD C5 0A               CALL   flushBuffer   
2D28   76                     HALT      
2D29   00                     .CSTR      
2D2A                EXPECTM_0_2729S52:      
2D2A   E1                     POP   HL   
2D2B                          ;*Macro unroll:  test "5 :a:b{$a};^", 5
2D2B   31 00 4A               LD   SP,STACK   
2D2E   CD 85 0B               CALL   coldBoot   
2D31   CD 54 48               CALL   execStr   
2D34   35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a:b{$a};^"   
2D41   CD C5 0A               CALL   flushBuffer   
2D44                          ;*Macro unroll:  expect "5 :a:b{$a};^",5
2D44   E1                     POP   HL   
2D45   E5                     PUSH   HL   
2D46   11 05 00               LD   DE,5   
2D49   B7                     OR   A   
2D4A   ED 52                  SBC   HL,DE   
2D4C   7D                     LD   A,L   
2D4D   B4                     OR   H   
2D4E   CA B1 2D               JP   Z,expectM_0_2730S52   
2D51   CD 3D 0B               CALL   printStr   
2D54   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{$a};^"   
2D67   CD 3D 0B               CALL   printStr   
2D6A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D79   21 05 00               LD   hl,5   
2D7C   E5                     PUSH   hl   
2D7D   CD 53 0C               CALL   run   
2D80   2E 00                  .CSTR   "."   
2D82   CD 3D 0B               CALL   printStr   
2D85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D92   E1                     POP   hl   
2D93   E5                     PUSH   hl   
2D94   E5                     PUSH   hl   
2D95   CD 53 0C               CALL   run   
2D98   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2DAC   CD C5 0A               CALL   flushBuffer   
2DAF   76                     HALT      
2DB0   00                     .CSTR      
2DB1                EXPECTM_0_2730S52:      
2DB1   E1                     POP   HL   
2DB2                          ;*Macro unroll:  test ":a{{2}^};^", 2
2DB2   31 00 4A               LD   SP,STACK   
2DB5   CD 85 0B               CALL   coldBoot   
2DB8   CD 54 48               CALL   execStr   
2DBB   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   ":a{{2}^};^"   
2DC6   CD C5 0A               CALL   flushBuffer   
2DC9                          ;*Macro unroll:  expect ":a{{2}^};^",2
2DC9   E1                     POP   HL   
2DCA   E5                     PUSH   HL   
2DCB   11 02 00               LD   DE,2   
2DCE   B7                     OR   A   
2DCF   ED 52                  SBC   HL,DE   
2DD1   7D                     LD   A,L   
2DD2   B4                     OR   H   
2DD3   CA 34 2E               JP   Z,expectM_0_2731S52   
2DD6   CD 3D 0B               CALL   printStr   
2DD9   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
2DEA   CD 3D 0B               CALL   printStr   
2DED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DFC   21 02 00               LD   hl,2   
2DFF   E5                     PUSH   hl   
2E00   CD 53 0C               CALL   run   
2E03   2E 00                  .CSTR   "."   
2E05   CD 3D 0B               CALL   printStr   
2E08   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E15   E1                     POP   hl   
2E16   E5                     PUSH   hl   
2E17   E5                     PUSH   hl   
2E18   CD 53 0C               CALL   run   
2E1B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2E2F   CD C5 0A               CALL   flushBuffer   
2E32   76                     HALT      
2E33   00                     .CSTR      
2E34                EXPECTM_0_2731S52:      
2E34   E1                     POP   HL   
2E35                          ;*Macro unroll:  test "1 5 :a{{$a}^};^", 5
2E35   31 00 4A               LD   SP,STACK   
2E38   CD 85 0B               CALL   coldBoot   
2E3B   CD 54 48               CALL   execStr   
2E3E   31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a}^};^"   
2E4E   CD C5 0A               CALL   flushBuffer   
2E51                          ;*Macro unroll:  expect "1 5 :a{{$a}^};^",5
2E51   E1                     POP   HL   
2E52   E5                     PUSH   HL   
2E53   11 05 00               LD   DE,5   
2E56   B7                     OR   A   
2E57   ED 52                  SBC   HL,DE   
2E59   7D                     LD   A,L   
2E5A   B4                     OR   H   
2E5B   CA C1 2E               JP   Z,expectM_0_2732S52   
2E5E   CD 3D 0B               CALL   printStr   
2E61   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a}^};^"   
2E77   CD 3D 0B               CALL   printStr   
2E7A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E89   21 05 00               LD   hl,5   
2E8C   E5                     PUSH   hl   
2E8D   CD 53 0C               CALL   run   
2E90   2E 00                  .CSTR   "."   
2E92   CD 3D 0B               CALL   printStr   
2E95   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EA2   E1                     POP   hl   
2EA3   E5                     PUSH   hl   
2EA4   E5                     PUSH   hl   
2EA5   CD 53 0C               CALL   run   
2EA8   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2EBC   CD C5 0A               CALL   flushBuffer   
2EBF   76                     HALT      
2EC0   00                     .CSTR      
2EC1                EXPECTM_0_2732S52:      
2EC1   E1                     POP   HL   
2EC2                          ;*Macro unroll:  test "1 5 :ab{{$a}^};^", 1
2EC2   31 00 4A               LD   SP,STACK   
2EC5   CD 85 0B               CALL   coldBoot   
2EC8   CD 54 48               CALL   execStr   
2ECB   31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a}^};^"   
2EDC   CD C5 0A               CALL   flushBuffer   
2EDF                          ;*Macro unroll:  expect "1 5 :ab{{$a}^};^",1
2EDF   E1                     POP   HL   
2EE0   E5                     PUSH   HL   
2EE1   11 01 00               LD   DE,1   
2EE4   B7                     OR   A   
2EE5   ED 52                  SBC   HL,DE   
2EE7   7D                     LD   A,L   
2EE8   B4                     OR   H   
2EE9   CA 50 2F               JP   Z,expectM_0_2733S52   
2EEC   CD 3D 0B               CALL   printStr   
2EEF   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a}^};^"   
2F06   CD 3D 0B               CALL   printStr   
2F09   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F18   21 01 00               LD   hl,1   
2F1B   E5                     PUSH   hl   
2F1C   CD 53 0C               CALL   run   
2F1F   2E 00                  .CSTR   "."   
2F21   CD 3D 0B               CALL   printStr   
2F24   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F31   E1                     POP   hl   
2F32   E5                     PUSH   hl   
2F33   E5                     PUSH   hl   
2F34   CD 53 0C               CALL   run   
2F37   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2F4B   CD C5 0A               CALL   flushBuffer   
2F4E   76                     HALT      
2F4F   00                     .CSTR      
2F50                EXPECTM_0_2733S52:      
2F50   E1                     POP   HL   
2F51                          ;*Macro unroll:  test "1 5 :a{{$a 2 +}^};^", 7
2F51   31 00 4A               LD   SP,STACK   
2F54   CD 85 0B               CALL   coldBoot   
2F57   CD 54 48               CALL   execStr   
2F5A   31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a 2 +}^};^"   
2F6E   CD C5 0A               CALL   flushBuffer   
2F71                          ;*Macro unroll:  expect "1 5 :a{{$a 2 +}^};^",7
2F71   E1                     POP   HL   
2F72   E5                     PUSH   HL   
2F73   11 07 00               LD   DE,7   
2F76   B7                     OR   A   
2F77   ED 52                  SBC   HL,DE   
2F79   7D                     LD   A,L   
2F7A   B4                     OR   H   
2F7B   CA E5 2F               JP   Z,expectM_0_2734S52   
2F7E   CD 3D 0B               CALL   printStr   
2F81   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a 2 +}^};^"   
2F9B   CD 3D 0B               CALL   printStr   
2F9E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FAD   21 07 00               LD   hl,7   
2FB0   E5                     PUSH   hl   
2FB1   CD 53 0C               CALL   run   
2FB4   2E 00                  .CSTR   "."   
2FB6   CD 3D 0B               CALL   printStr   
2FB9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FC6   E1                     POP   hl   
2FC7   E5                     PUSH   hl   
2FC8   E5                     PUSH   hl   
2FC9   CD 53 0C               CALL   run   
2FCC   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2FE0   CD C5 0A               CALL   flushBuffer   
2FE3   76                     HALT      
2FE4   00                     .CSTR      
2FE5                EXPECTM_0_2734S52:      
2FE5   E1                     POP   HL   
2FE6                          ;*Macro unroll:  test "1 5 :ab{{$a $b +}^};^", 6
2FE6   31 00 4A               LD   SP,STACK   
2FE9   CD 85 0B               CALL   coldBoot   
2FEC   CD 54 48               CALL   execStr   
2FEF   31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a $b +}^};^"   
3005   CD C5 0A               CALL   flushBuffer   
3008                          ;*Macro unroll:  expect "1 5 :ab{{$a $b +}^};^",6
3008   E1                     POP   HL   
3009   E5                     PUSH   HL   
300A   11 06 00               LD   DE,6   
300D   B7                     OR   A   
300E   ED 52                  SBC   HL,DE   
3010   7D                     LD   A,L   
3011   B4                     OR   H   
3012   CA 7E 30               JP   Z,expectM_0_2735S52   
3015   CD 3D 0B               CALL   printStr   
3018   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a $b +}^};^"   
3034   CD 3D 0B               CALL   printStr   
3037   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3046   21 06 00               LD   hl,6   
3049   E5                     PUSH   hl   
304A   CD 53 0C               CALL   run   
304D   2E 00                  .CSTR   "."   
304F   CD 3D 0B               CALL   printStr   
3052   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
305F   E1                     POP   hl   
3060   E5                     PUSH   hl   
3061   E5                     PUSH   hl   
3062   CD 53 0C               CALL   run   
3065   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3079   CD C5 0A               CALL   flushBuffer   
307C   76                     HALT      
307D   00                     .CSTR      
307E                EXPECTM_0_2735S52:      
307E   E1                     POP   HL   
307F                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
307F   31 00 4A               LD   SP,STACK   
3082   CD 85 0B               CALL   coldBoot   
3085   CD 54 48               CALL   execStr   
3088   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a{2}; x= 1 x^"   
3097   CD C5 0A               CALL   flushBuffer   
309A                          ;*Macro unroll:  expect ":a{2}; x= 1 x^",2
309A   E1                     POP   HL   
309B   E5                     PUSH   HL   
309C   11 02 00               LD   DE,2   
309F   B7                     OR   A   
30A0   ED 52                  SBC   HL,DE   
30A2   7D                     LD   A,L   
30A3   B4                     OR   H   
30A4   CA 09 31               JP   Z,expectM_0_2736S52   
30A7   CD 3D 0B               CALL   printStr   
30AA   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
30BF   CD 3D 0B               CALL   printStr   
30C2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30D1   21 02 00               LD   hl,2   
30D4   E5                     PUSH   hl   
30D5   CD 53 0C               CALL   run   
30D8   2E 00                  .CSTR   "."   
30DA   CD 3D 0B               CALL   printStr   
30DD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30EA   E1                     POP   hl   
30EB   E5                     PUSH   hl   
30EC   E5                     PUSH   hl   
30ED   CD 53 0C               CALL   run   
30F0   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3104   CD C5 0A               CALL   flushBuffer   
3107   76                     HALT      
3108   00                     .CSTR      
3109                EXPECTM_0_2736S52:      
3109   E1                     POP   HL   
310A                          ;*Macro unroll:  test ":a{$a}; x= 0 1 x^", 1
310A   31 00 4A               LD   SP,STACK   
310D   CD 85 0B               CALL   coldBoot   
3110   CD 54 48               CALL   execStr   
3113   3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   ":a{$a}; x= 0 1 x^"   
3125   CD C5 0A               CALL   flushBuffer   
3128                          ;*Macro unroll:  expect ":a{$a}; x= 0 1 x^",1
3128   E1                     POP   HL   
3129   E5                     PUSH   HL   
312A   11 01 00               LD   DE,1   
312D   B7                     OR   A   
312E   ED 52                  SBC   HL,DE   
3130   7D                     LD   A,L   
3131   B4                     OR   H   
3132   CA 9A 31               JP   Z,expectM_0_2737S52   
3135   CD 3D 0B               CALL   printStr   
3138   43 6F 64 65 3A 20 3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{$a}; x= 0 1 x^"   
3150   CD 3D 0B               CALL   printStr   
3153   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3162   21 01 00               LD   hl,1   
3165   E5                     PUSH   hl   
3166   CD 53 0C               CALL   run   
3169   2E 00                  .CSTR   "."   
316B   CD 3D 0B               CALL   printStr   
316E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
317B   E1                     POP   hl   
317C   E5                     PUSH   hl   
317D   E5                     PUSH   hl   
317E   CD 53 0C               CALL   run   
3181   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3195   CD C5 0A               CALL   flushBuffer   
3198   76                     HALT      
3199   00                     .CSTR      
319A                EXPECTM_0_2737S52:      
319A   E1                     POP   HL   
319B                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
319B   31 00 4A               LD   SP,STACK   
319E   CD 85 0B               CALL   coldBoot   
31A1   CD 54 48               CALL   execStr   
31A4   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
31B7   CD C5 0A               CALL   flushBuffer   
31BA                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
31BA   E1                     POP   HL   
31BB   E5                     PUSH   HL   
31BC   11 02 00               LD   DE,2   
31BF   B7                     OR   A   
31C0   ED 52                  SBC   HL,DE   
31C2   7D                     LD   A,L   
31C3   B4                     OR   H   
31C4   CA 2D 32               JP   Z,expectM_0_2738S52   
31C7   CD 3D 0B               CALL   printStr   
31CA   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
31E3   CD 3D 0B               CALL   printStr   
31E6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31F5   21 02 00               LD   hl,2   
31F8   E5                     PUSH   hl   
31F9   CD 53 0C               CALL   run   
31FC   2E 00                  .CSTR   "."   
31FE   CD 3D 0B               CALL   printStr   
3201   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
320E   E1                     POP   hl   
320F   E5                     PUSH   hl   
3210   E5                     PUSH   hl   
3211   CD 53 0C               CALL   run   
3214   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3228   CD C5 0A               CALL   flushBuffer   
322B   76                     HALT      
322C   00                     .CSTR      
322D                EXPECTM_0_2738S52:      
322D   E1                     POP   HL   
322E                          ;*Macro unroll:  test ":a:b{$a}; x= 1 2 x^", 2
322E   31 00 4A               LD   SP,STACK   
3231   CD 85 0B               CALL   coldBoot   
3234   CD 54 48               CALL   execStr   
3237   3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":a:b{$a}; x= 1 2 x^"   
324B   CD C5 0A               CALL   flushBuffer   
324E                          ;*Macro unroll:  expect ":a:b{$a}; x= 1 2 x^",2
324E   E1                     POP   HL   
324F   E5                     PUSH   HL   
3250   11 02 00               LD   DE,2   
3253   B7                     OR   A   
3254   ED 52                  SBC   HL,DE   
3256   7D                     LD   A,L   
3257   B4                     OR   H   
3258   CA C2 32               JP   Z,expectM_0_2739S52   
325B   CD 3D 0B               CALL   printStr   
325E   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a}; x= 1 2 x^"   
3278   CD 3D 0B               CALL   printStr   
327B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
328A   21 02 00               LD   hl,2   
328D   E5                     PUSH   hl   
328E   CD 53 0C               CALL   run   
3291   2E 00                  .CSTR   "."   
3293   CD 3D 0B               CALL   printStr   
3296   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32A3   E1                     POP   hl   
32A4   E5                     PUSH   hl   
32A5   E5                     PUSH   hl   
32A6   CD 53 0C               CALL   run   
32A9   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
32BD   CD C5 0A               CALL   flushBuffer   
32C0   76                     HALT      
32C1   00                     .CSTR      
32C2                EXPECTM_0_2739S52:      
32C2   E1                     POP   HL   
32C3                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
32C3   31 00 4A               LD   SP,STACK   
32C6   CD 85 0B               CALL   coldBoot   
32C9   CD 54 48               CALL   execStr   
32CC   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
32DF   CD C5 0A               CALL   flushBuffer   
32E2                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
32E2   E1                     POP   HL   
32E3   E5                     PUSH   HL   
32E4   11 02 00               LD   DE,2   
32E7   B7                     OR   A   
32E8   ED 52                  SBC   HL,DE   
32EA   7D                     LD   A,L   
32EB   B4                     OR   H   
32EC   CA 55 33               JP   Z,expectM_0_2740S52   
32EF   CD 3D 0B               CALL   printStr   
32F2   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
330B   CD 3D 0B               CALL   printStr   
330E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
331D   21 02 00               LD   hl,2   
3320   E5                     PUSH   hl   
3321   CD 53 0C               CALL   run   
3324   2E 00                  .CSTR   "."   
3326   CD 3D 0B               CALL   printStr   
3329   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3336   E1                     POP   hl   
3337   E5                     PUSH   hl   
3338   E5                     PUSH   hl   
3339   CD 53 0C               CALL   run   
333C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3350   CD C5 0A               CALL   flushBuffer   
3353   76                     HALT      
3354   00                     .CSTR      
3355                EXPECTM_0_2740S52:      
3355   E1                     POP   HL   
3356                          ;*Macro unroll:  test ":ab{$b $a}; x= 10 15 x^ -", 5
3356   31 00 4A               LD   SP,STACK   
3359   CD 85 0B               CALL   coldBoot   
335C   CD 54 48               CALL   execStr   
335F   3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   ":ab{$b $a}; x= 10 15 x^ -"   
3379   CD C5 0A               CALL   flushBuffer   
337C                          ;*Macro unroll:  expect ":ab{$b $a}; x= 10 15 x^ -",5
337C   E1                     POP   HL   
337D   E5                     PUSH   HL   
337E   11 05 00               LD   DE,5   
3381   B7                     OR   A   
3382   ED 52                  SBC   HL,DE   
3384   7D                     LD   A,L   
3385   B4                     OR   H   
3386   CA F6 33               JP   Z,expectM_0_2741S52   
3389   CD 3D 0B               CALL   printStr   
338C   43 6F 64 65 3A 20 3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{$b $a}; x= 10 15 x^ -"   
33AC   CD 3D 0B               CALL   printStr   
33AF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33BE   21 05 00               LD   hl,5   
33C1   E5                     PUSH   hl   
33C2   CD 53 0C               CALL   run   
33C5   2E 00                  .CSTR   "."   
33C7   CD 3D 0B               CALL   printStr   
33CA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33D7   E1                     POP   hl   
33D8   E5                     PUSH   hl   
33D9   E5                     PUSH   hl   
33DA   CD 53 0C               CALL   run   
33DD   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
33F1   CD C5 0A               CALL   flushBuffer   
33F4   76                     HALT      
33F5   00                     .CSTR      
33F6                EXPECTM_0_2741S52:      
33F6   E1                     POP   HL   
33F7                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
33F7   31 00 4A               LD   SP,STACK   
33FA   CD 85 0B               CALL   coldBoot   
33FD   CD 54 48               CALL   execStr   
3400   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a:b{2}; x= 1 x^"   
3411   CD C5 0A               CALL   flushBuffer   
3414                          ;*Macro unroll:  expect ":a:b{2}; x= 1 x^",2
3414   E1                     POP   HL   
3415   E5                     PUSH   HL   
3416   11 02 00               LD   DE,2   
3419   B7                     OR   A   
341A   ED 52                  SBC   HL,DE   
341C   7D                     LD   A,L   
341D   B4                     OR   H   
341E   CA 85 34               JP   Z,expectM_0_2742S52   
3421   CD 3D 0B               CALL   printStr   
3424   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
343B   CD 3D 0B               CALL   printStr   
343E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
344D   21 02 00               LD   hl,2   
3450   E5                     PUSH   hl   
3451   CD 53 0C               CALL   run   
3454   2E 00                  .CSTR   "."   
3456   CD 3D 0B               CALL   printStr   
3459   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3466   E1                     POP   hl   
3467   E5                     PUSH   hl   
3468   E5                     PUSH   hl   
3469   CD 53 0C               CALL   run   
346C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3480   CD C5 0A               CALL   flushBuffer   
3483   76                     HALT      
3484   00                     .CSTR      
3485                EXPECTM_0_2742S52:      
3485   E1                     POP   HL   
3486                          ;*Macro unroll:  test "::b{100 $b= $b}; x= x^", 100
3486   31 00 4A               LD   SP,STACK   
3489   CD 85 0B               CALL   coldBoot   
348C   CD 54 48               CALL   execStr   
348F   3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "::b{100 $b= $b}; x= x^"   
34A6   CD C5 0A               CALL   flushBuffer   
34A9                          ;*Macro unroll:  expect "::b{100 $b= $b}; x= x^",100
34A9   E1                     POP   HL   
34AA   E5                     PUSH   HL   
34AB   11 64 00               LD   DE,100   
34AE   B7                     OR   A   
34AF   ED 52                  SBC   HL,DE   
34B1   7D                     LD   A,L   
34B2   B4                     OR   H   
34B3   CA 20 35               JP   Z,expectM_0_2743S52   
34B6   CD 3D 0B               CALL   printStr   
34B9   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 $b= $b}; x= x^"   
34D6   CD 3D 0B               CALL   printStr   
34D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34E8   21 64 00               LD   hl,100   
34EB   E5                     PUSH   hl   
34EC   CD 53 0C               CALL   run   
34EF   2E 00                  .CSTR   "."   
34F1   CD 3D 0B               CALL   printStr   
34F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3501   E1                     POP   hl   
3502   E5                     PUSH   hl   
3503   E5                     PUSH   hl   
3504   CD 53 0C               CALL   run   
3507   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
351B   CD C5 0A               CALL   flushBuffer   
351E   76                     HALT      
351F   00                     .CSTR      
3520                EXPECTM_0_2743S52:      
3520   E1                     POP   HL   
3521                          ;*Macro unroll:  test ":a:b{1 $b= $b}; x= 2 x^", 1
3521   31 00 4A               LD   SP,STACK   
3524   CD 85 0B               CALL   coldBoot   
3527   CD 54 48               CALL   execStr   
352A   3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{1 $b= $b}; x= 2 x^"   
3542   CD C5 0A               CALL   flushBuffer   
3545                          ;*Macro unroll:  expect ":a:b{1 $b= $b}; x= 2 x^",1
3545   E1                     POP   HL   
3546   E5                     PUSH   HL   
3547   11 01 00               LD   DE,1   
354A   B7                     OR   A   
354B   ED 52                  SBC   HL,DE   
354D   7D                     LD   A,L   
354E   B4                     OR   H   
354F   CA BD 35               JP   Z,expectM_0_2744S52   
3552   CD 3D 0B               CALL   printStr   
3555   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 $b= $b}; x= 2 x^"   
3573   CD 3D 0B               CALL   printStr   
3576   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3585   21 01 00               LD   hl,1   
3588   E5                     PUSH   hl   
3589   CD 53 0C               CALL   run   
358C   2E 00                  .CSTR   "."   
358E   CD 3D 0B               CALL   printStr   
3591   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
359E   E1                     POP   hl   
359F   E5                     PUSH   hl   
35A0   E5                     PUSH   hl   
35A1   CD 53 0C               CALL   run   
35A4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
35B8   CD C5 0A               CALL   flushBuffer   
35BB   76                     HALT      
35BC   00                     .CSTR      
35BD                EXPECTM_0_2744S52:      
35BD   E1                     POP   HL   
35BE                          ;*Macro unroll:  test ":a:b{$a $b= $b}; x= 2 x^", 2
35BE   31 00 4A               LD   SP,STACK   
35C1   CD 85 0B               CALL   coldBoot   
35C4   CD 54 48               CALL   execStr   
35C7   3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{$a $b= $b}; x= 2 x^"   
35E0   CD C5 0A               CALL   flushBuffer   
35E3                          ;*Macro unroll:  expect ":a:b{$a $b= $b}; x= 2 x^",2
35E3   E1                     POP   HL   
35E4   E5                     PUSH   HL   
35E5   11 02 00               LD   DE,2   
35E8   B7                     OR   A   
35E9   ED 52                  SBC   HL,DE   
35EB   7D                     LD   A,L   
35EC   B4                     OR   H   
35ED   CA 5C 36               JP   Z,expectM_0_2745S52   
35F0   CD 3D 0B               CALL   printStr   
35F3   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a $b= $b}; x= 2 x^"   
3612   CD 3D 0B               CALL   printStr   
3615   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3624   21 02 00               LD   hl,2   
3627   E5                     PUSH   hl   
3628   CD 53 0C               CALL   run   
362B   2E 00                  .CSTR   "."   
362D   CD 3D 0B               CALL   printStr   
3630   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
363D   E1                     POP   hl   
363E   E5                     PUSH   hl   
363F   E5                     PUSH   hl   
3640   CD 53 0C               CALL   run   
3643   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3657   CD C5 0A               CALL   flushBuffer   
365A   76                     HALT      
365B   00                     .CSTR      
365C                EXPECTM_0_2745S52:      
365C   E1                     POP   HL   
365D                          ;*Macro unroll:  test "1 10 20 :ab{/t{$a}{$b} ??};^ +", 11
365D   31 00 4A               LD   SP,STACK   
3660   CD 85 0B               CALL   coldBoot   
3663   CD 54 48               CALL   execStr   
3666   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/t{$a}{$b} ??};^ +"   
3685   CD C5 0A               CALL   flushBuffer   
3688                          ;*Macro unroll:  expect "1 10 20 :ab{/t{$a}{$b} ??};^ +",11
3688   E1                     POP   HL   
3689   E5                     PUSH   HL   
368A   11 0B 00               LD   DE,11   
368D   B7                     OR   A   
368E   ED 52                  SBC   HL,DE   
3690   7D                     LD   A,L   
3691   B4                     OR   H   
3692   CA 07 37               JP   Z,expectM_0_2746S52   
3695   CD 3D 0B               CALL   printStr   
3698   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{$a}{$b} ??};^ +"   
36BD   CD 3D 0B               CALL   printStr   
36C0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36CF   21 0B 00               LD   hl,11   
36D2   E5                     PUSH   hl   
36D3   CD 53 0C               CALL   run   
36D6   2E 00                  .CSTR   "."   
36D8   CD 3D 0B               CALL   printStr   
36DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36E8   E1                     POP   hl   
36E9   E5                     PUSH   hl   
36EA   E5                     PUSH   hl   
36EB   CD 53 0C               CALL   run   
36EE   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3702   CD C5 0A               CALL   flushBuffer   
3705   76                     HALT      
3706   00                     .CSTR      
3707                EXPECTM_0_2746S52:      
3707   E1                     POP   HL   
3708                          ;*Macro unroll:  test "1 10 20 :ab{/f{$a}{$b} ??};^ +", 21
3708   31 00 4A               LD   SP,STACK   
370B   CD 85 0B               CALL   coldBoot   
370E   CD 54 48               CALL   execStr   
3711   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/f{$a}{$b} ??};^ +"   
3730   CD C5 0A               CALL   flushBuffer   
3733                          ;*Macro unroll:  expect "1 10 20 :ab{/f{$a}{$b} ??};^ +",21
3733   E1                     POP   HL   
3734   E5                     PUSH   HL   
3735   11 15 00               LD   DE,21   
3738   B7                     OR   A   
3739   ED 52                  SBC   HL,DE   
373B   7D                     LD   A,L   
373C   B4                     OR   H   
373D   CA B2 37               JP   Z,expectM_0_2747S52   
3740   CD 3D 0B               CALL   printStr   
3743   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{$a}{$b} ??};^ +"   
3768   CD 3D 0B               CALL   printStr   
376B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
377A   21 15 00               LD   hl,21   
377D   E5                     PUSH   hl   
377E   CD 53 0C               CALL   run   
3781   2E 00                  .CSTR   "."   
3783   CD 3D 0B               CALL   printStr   
3786   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3793   E1                     POP   hl   
3794   E5                     PUSH   hl   
3795   E5                     PUSH   hl   
3796   CD 53 0C               CALL   run   
3799   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
37AD   CD C5 0A               CALL   flushBuffer   
37B0   76                     HALT      
37B1   00                     .CSTR      
37B2                EXPECTM_0_2747S52:      
37B2   E1                     POP   HL   
37B3                          ;*Macro unroll:  test "[10 20 30] 1%", 20
37B3   31 00 4A               LD   SP,STACK   
37B6   CD 85 0B               CALL   coldBoot   
37B9   CD 54 48               CALL   execStr   
37BC   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
37CA   CD C5 0A               CALL   flushBuffer   
37CD                          ;*Macro unroll:  expect "[10 20 30] 1%",20
37CD   E1                     POP   HL   
37CE   E5                     PUSH   HL   
37CF   11 14 00               LD   DE,20   
37D2   B7                     OR   A   
37D3   ED 52                  SBC   HL,DE   
37D5   7D                     LD   A,L   
37D6   B4                     OR   H   
37D7   CA 3B 38               JP   Z,expectM_0_2748S52   
37DA   CD 3D 0B               CALL   printStr   
37DD   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
37F1   CD 3D 0B               CALL   printStr   
37F4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3803   21 14 00               LD   hl,20   
3806   E5                     PUSH   hl   
3807   CD 53 0C               CALL   run   
380A   2E 00                  .CSTR   "."   
380C   CD 3D 0B               CALL   printStr   
380F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
381C   E1                     POP   hl   
381D   E5                     PUSH   hl   
381E   E5                     PUSH   hl   
381F   CD 53 0C               CALL   run   
3822   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3836   CD C5 0A               CALL   flushBuffer   
3839   76                     HALT      
383A   00                     .CSTR      
383B                EXPECTM_0_2748S52:      
383B   E1                     POP   HL   
383C                          ;*Macro unroll:  test "[10 20 30 40] /s", 4
383C   31 00 4A               LD   SP,STACK   
383F   CD 85 0B               CALL   coldBoot   
3842   CD 54 48               CALL   execStr   
3845   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "[10 20 30 40] /s"   
3856   CD C5 0A               CALL   flushBuffer   
3859                          ;*Macro unroll:  expect "[10 20 30 40] /s",4
3859   E1                     POP   HL   
385A   E5                     PUSH   HL   
385B   11 04 00               LD   DE,4   
385E   B7                     OR   A   
385F   ED 52                  SBC   HL,DE   
3861   7D                     LD   A,L   
3862   B4                     OR   H   
3863   CA CA 38               JP   Z,expectM_0_2749S52   
3866   CD 3D 0B               CALL   printStr   
3869   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "Code: ","[10 20 30 40] /s"   
3880   CD 3D 0B               CALL   printStr   
3883   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3892   21 04 00               LD   hl,4   
3895   E5                     PUSH   hl   
3896   CD 53 0C               CALL   run   
3899   2E 00                  .CSTR   "."   
389B   CD 3D 0B               CALL   printStr   
389E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38AB   E1                     POP   hl   
38AC   E5                     PUSH   hl   
38AD   E5                     PUSH   hl   
38AE   CD 53 0C               CALL   run   
38B1   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
38C5   CD C5 0A               CALL   flushBuffer   
38C8   76                     HALT      
38C9   00                     .CSTR      
38CA                EXPECTM_0_2749S52:      
38CA   E1                     POP   HL   
38CB                          ;*Macro unroll:  test "/c [1 2 3] 1%", 2
38CB   31 00 4A               LD   SP,STACK   
38CE   CD 85 0B               CALL   coldBoot   
38D1   CD 54 48               CALL   execStr   
38D4   2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "/c [1 2 3] 1%"   
38E2   CD C5 0A               CALL   flushBuffer   
38E5                          ;*Macro unroll:  expect "/c [1 2 3] 1%",2
38E5   E1                     POP   HL   
38E6   E5                     PUSH   HL   
38E7   11 02 00               LD   DE,2   
38EA   B7                     OR   A   
38EB   ED 52                  SBC   HL,DE   
38ED   7D                     LD   A,L   
38EE   B4                     OR   H   
38EF   CA 53 39               JP   Z,expectM_0_2750S52   
38F2   CD 3D 0B               CALL   printStr   
38F5   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","/c [1 2 3] 1%"   
3909   CD 3D 0B               CALL   printStr   
390C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
391B   21 02 00               LD   hl,2   
391E   E5                     PUSH   hl   
391F   CD 53 0C               CALL   run   
3922   2E 00                  .CSTR   "."   
3924   CD 3D 0B               CALL   printStr   
3927   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3934   E1                     POP   hl   
3935   E5                     PUSH   hl   
3936   E5                     PUSH   hl   
3937   CD 53 0C               CALL   run   
393A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
394E   CD C5 0A               CALL   flushBuffer   
3951   76                     HALT      
3952   00                     .CSTR      
3953                EXPECTM_0_2750S52:      
3953   E1                     POP   HL   
3954                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1%", 66
3954   31 00 4A               LD   SP,STACK   
3957   CD 85 0B               CALL   coldBoot   
395A   CD 54 48               CALL   execStr   
395D   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "/c ['A' 'B' 'C'] 1%"   
3971   CD C5 0A               CALL   flushBuffer   
3974                          ;*Macro unroll:  expect "/c ['A' 'B' 'C'] 1%",66
3974   E1                     POP   HL   
3975   E5                     PUSH   HL   
3976   11 42 00               LD   DE,66   
3979   B7                     OR   A   
397A   ED 52                  SBC   HL,DE   
397C   7D                     LD   A,L   
397D   B4                     OR   H   
397E   CA E8 39               JP   Z,expectM_0_2751S52   
3981   CD 3D 0B               CALL   printStr   
3984   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1%"   
399E   CD 3D 0B               CALL   printStr   
39A1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39B0   21 42 00               LD   hl,66   
39B3   E5                     PUSH   hl   
39B4   CD 53 0C               CALL   run   
39B7   2E 00                  .CSTR   "."   
39B9   CD 3D 0B               CALL   printStr   
39BC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39C9   E1                     POP   hl   
39CA   E5                     PUSH   hl   
39CB   E5                     PUSH   hl   
39CC   CD 53 0C               CALL   run   
39CF   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
39E3   CD C5 0A               CALL   flushBuffer   
39E6   76                     HALT      
39E7   00                     .CSTR      
39E8                EXPECTM_0_2751S52:      
39E8   E1                     POP   HL   
39E9                          ;*Macro unroll:  test "[{10}{20}{30}] 0%^ ", 10
39E9   31 00 4A               LD   SP,STACK   
39EC   CD 85 0B               CALL   coldBoot   
39EF   CD 54 48               CALL   execStr   
39F2   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "[{10}{20}{30}] 0%^ "   
3A06   CD C5 0A               CALL   flushBuffer   
3A09                          ;*Macro unroll:  expect "[{10}{20}{30}] 0%^ ",10
3A09   E1                     POP   HL   
3A0A   E5                     PUSH   HL   
3A0B   11 0A 00               LD   DE,10   
3A0E   B7                     OR   A   
3A0F   ED 52                  SBC   HL,DE   
3A11   7D                     LD   A,L   
3A12   B4                     OR   H   
3A13   CA 7D 3A               JP   Z,expectM_0_2752S52   
3A16   CD 3D 0B               CALL   printStr   
3A19   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0%^ "   
3A33   CD 3D 0B               CALL   printStr   
3A36   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A45   21 0A 00               LD   hl,10   
3A48   E5                     PUSH   hl   
3A49   CD 53 0C               CALL   run   
3A4C   2E 00                  .CSTR   "."   
3A4E   CD 3D 0B               CALL   printStr   
3A51   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A5E   E1                     POP   hl   
3A5F   E5                     PUSH   hl   
3A60   E5                     PUSH   hl   
3A61   CD 53 0C               CALL   run   
3A64   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3A78   CD C5 0A               CALL   flushBuffer   
3A7B   76                     HALT      
3A7C   00                     .CSTR      
3A7D                EXPECTM_0_2752S52:      
3A7D   E1                     POP   HL   
3A7E                          ;*Macro unroll:  test "10 20 :ab{[{$a}{$b}] 0%^};^", 10
3A7E   31 00 4A               LD   SP,STACK   
3A81   CD 85 0B               CALL   coldBoot   
3A84   CD 54 48               CALL   execStr   
3A87   31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "10 20 :ab{[{$a}{$b}] 0%^};^"   
3AA3   CD C5 0A               CALL   flushBuffer   
3AA6                          ;*Macro unroll:  expect "10 20 :ab{[{$a}{$b}] 0%^};^",10
3AA6   E1                     POP   HL   
3AA7   E5                     PUSH   HL   
3AA8   11 0A 00               LD   DE,10   
3AAB   B7                     OR   A   
3AAC   ED 52                  SBC   HL,DE   
3AAE   7D                     LD   A,L   
3AAF   B4                     OR   H   
3AB0   CA 22 3B               JP   Z,expectM_0_2753S52   
3AB3   CD 3D 0B               CALL   printStr   
3AB6   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab{[{$a}{$b}] 0%^};^"   
3AD8   CD 3D 0B               CALL   printStr   
3ADB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AEA   21 0A 00               LD   hl,10   
3AED   E5                     PUSH   hl   
3AEE   CD 53 0C               CALL   run   
3AF1   2E 00                  .CSTR   "."   
3AF3   CD 3D 0B               CALL   printStr   
3AF6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B03   E1                     POP   hl   
3B04   E5                     PUSH   hl   
3B05   E5                     PUSH   hl   
3B06   CD 53 0C               CALL   run   
3B09   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3B1D   CD C5 0A               CALL   flushBuffer   
3B20   76                     HALT      
3B21   00                     .CSTR      
3B22                EXPECTM_0_2753S52:      
3B22   E1                     POP   HL   
3B23                          ;*Macro unroll:  test "0 10 20 :iab{[{$a}{$b}] $i%^};^", 10
3B23   31 00 4A               LD   SP,STACK   
3B26   CD 85 0B               CALL   coldBoot   
3B29   CD 54 48               CALL   execStr   
3B2C   30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "0 10 20 :iab{[{$a}{$b}] $i%^};^"   
3B4C   CD C5 0A               CALL   flushBuffer   
3B4F                          ;*Macro unroll:  expect "0 10 20 :iab{[{$a}{$b}] $i%^};^",10
3B4F   E1                     POP   HL   
3B50   E5                     PUSH   HL   
3B51   11 0A 00               LD   DE,10   
3B54   B7                     OR   A   
3B55   ED 52                  SBC   HL,DE   
3B57   7D                     LD   A,L   
3B58   B4                     OR   H   
3B59   CA CF 3B               JP   Z,expectM_0_2754S52   
3B5C   CD 3D 0B               CALL   printStr   
3B5F   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab{[{$a}{$b}] $i%^};^"   
3B85   CD 3D 0B               CALL   printStr   
3B88   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B97   21 0A 00               LD   hl,10   
3B9A   E5                     PUSH   hl   
3B9B   CD 53 0C               CALL   run   
3B9E   2E 00                  .CSTR   "."   
3BA0   CD 3D 0B               CALL   printStr   
3BA3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BB0   E1                     POP   hl   
3BB1   E5                     PUSH   hl   
3BB2   E5                     PUSH   hl   
3BB3   CD 53 0C               CALL   run   
3BB6   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3BCA   CD C5 0A               CALL   flushBuffer   
3BCD   76                     HALT      
3BCE   00                     .CSTR      
3BCF                EXPECTM_0_2754S52:      
3BCF   E1                     POP   HL   
3BD0                          ;*Macro unroll:  test "1 10 20 :iab{[{$a}{$b}] $i%^};^", 20
3BD0   31 00 4A               LD   SP,STACK   
3BD3   CD 85 0B               CALL   coldBoot   
3BD6   CD 54 48               CALL   execStr   
3BD9   31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "1 10 20 :iab{[{$a}{$b}] $i%^};^"   
3BF9   CD C5 0A               CALL   flushBuffer   
3BFC                          ;*Macro unroll:  expect "1 10 20 :iab{[{$a}{$b}] $i%^};^",20
3BFC   E1                     POP   HL   
3BFD   E5                     PUSH   HL   
3BFE   11 14 00               LD   DE,20   
3C01   B7                     OR   A   
3C02   ED 52                  SBC   HL,DE   
3C04   7D                     LD   A,L   
3C05   B4                     OR   H   
3C06   CA 7C 3C               JP   Z,expectM_0_2755S52   
3C09   CD 3D 0B               CALL   printStr   
3C0C   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab{[{$a}{$b}] $i%^};^"   
3C32   CD 3D 0B               CALL   printStr   
3C35   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C44   21 14 00               LD   hl,20   
3C47   E5                     PUSH   hl   
3C48   CD 53 0C               CALL   run   
3C4B   2E 00                  .CSTR   "."   
3C4D   CD 3D 0B               CALL   printStr   
3C50   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C5D   E1                     POP   hl   
3C5E   E5                     PUSH   hl   
3C5F   E5                     PUSH   hl   
3C60   CD 53 0C               CALL   run   
3C63   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3C77   CD C5 0A               CALL   flushBuffer   
3C7A   76                     HALT      
3C7B   00                     .CSTR      
3C7C                EXPECTM_0_2755S52:      
3C7C   E1                     POP   HL   
3C7D                          ;*Macro unroll:  test "5 [4] :a{$a}; /pa ^", 4
3C7D   31 00 4A               LD   SP,STACK   
3C80   CD 85 0B               CALL   coldBoot   
3C83   CD 54 48               CALL   execStr   
3C86   35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :a{$a}; /pa ^"   
3C9A   CD C5 0A               CALL   flushBuffer   
3C9D                          ;*Macro unroll:  expect "5 [4] :a{$a}; /pa ^",4
3C9D   E1                     POP   HL   
3C9E   E5                     PUSH   HL   
3C9F   11 04 00               LD   DE,4   
3CA2   B7                     OR   A   
3CA3   ED 52                  SBC   HL,DE   
3CA5   7D                     LD   A,L   
3CA6   B4                     OR   H   
3CA7   CA 11 3D               JP   Z,expectM_0_2756S52   
3CAA   CD 3D 0B               CALL   printStr   
3CAD   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :a{$a}; /pa ^"   
3CC7   CD 3D 0B               CALL   printStr   
3CCA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CD9   21 04 00               LD   hl,4   
3CDC   E5                     PUSH   hl   
3CDD   CD 53 0C               CALL   run   
3CE0   2E 00                  .CSTR   "."   
3CE2   CD 3D 0B               CALL   printStr   
3CE5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3CF2   E1                     POP   hl   
3CF3   E5                     PUSH   hl   
3CF4   E5                     PUSH   hl   
3CF5   CD 53 0C               CALL   run   
3CF8   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3D0C   CD C5 0A               CALL   flushBuffer   
3D0F   76                     HALT      
3D10   00                     .CSTR      
3D11                EXPECTM_0_2756S52:      
3D11   E1                     POP   HL   
3D12                          ;*Macro unroll:  test "5 [4] :ab{$a $b +}; /pa ^", 9
3D12   31 00 4A               LD   SP,STACK   
3D15   CD 85 0B               CALL   coldBoot   
3D18   CD 54 48               CALL   execStr   
3D1B   35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :ab{$a $b +}; /pa ^"   
3D35   CD C5 0A               CALL   flushBuffer   
3D38                          ;*Macro unroll:  expect "5 [4] :ab{$a $b +}; /pa ^",9
3D38   E1                     POP   HL   
3D39   E5                     PUSH   HL   
3D3A   11 09 00               LD   DE,9   
3D3D   B7                     OR   A   
3D3E   ED 52                  SBC   HL,DE   
3D40   7D                     LD   A,L   
3D41   B4                     OR   H   
3D42   CA B2 3D               JP   Z,expectM_0_2757S52   
3D45   CD 3D 0B               CALL   printStr   
3D48   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :ab{$a $b +}; /pa ^"   
3D68   CD 3D 0B               CALL   printStr   
3D6B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D7A   21 09 00               LD   hl,9   
3D7D   E5                     PUSH   hl   
3D7E   CD 53 0C               CALL   run   
3D81   2E 00                  .CSTR   "."   
3D83   CD 3D 0B               CALL   printStr   
3D86   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D93   E1                     POP   hl   
3D94   E5                     PUSH   hl   
3D95   E5                     PUSH   hl   
3D96   CD 53 0C               CALL   run   
3D99   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3DAD   CD C5 0A               CALL   flushBuffer   
3DB0   76                     HALT      
3DB1   00                     .CSTR      
3DB2                EXPECTM_0_2757S52:      
3DB2   E1                     POP   HL   
3DB3                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3DB3   31 00 4A               LD   SP,STACK   
3DB6   CD 85 0B               CALL   coldBoot   
3DB9   CD 54 48               CALL   execStr   
3DBC   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "3i= ( i i-- i/br )^ + +"   
3DD4   CD C5 0A               CALL   flushBuffer   
3DD7                          ;*Macro unroll:  expect "3i= ( i i-- i/br )^ + +",6
3DD7   E1                     POP   HL   
3DD8   E5                     PUSH   HL   
3DD9   11 06 00               LD   DE,6   
3DDC   B7                     OR   A   
3DDD   ED 52                  SBC   HL,DE   
3DDF   7D                     LD   A,L   
3DE0   B4                     OR   H   
3DE1   CA 4F 3E               JP   Z,expectM_0_2758S52   
3DE4   CD 3D 0B               CALL   printStr   
3DE7   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3E05   CD 3D 0B               CALL   printStr   
3E08   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E17   21 06 00               LD   hl,6   
3E1A   E5                     PUSH   hl   
3E1B   CD 53 0C               CALL   run   
3E1E   2E 00                  .CSTR   "."   
3E20   CD 3D 0B               CALL   printStr   
3E23   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E30   E1                     POP   hl   
3E31   E5                     PUSH   hl   
3E32   E5                     PUSH   hl   
3E33   CD 53 0C               CALL   run   
3E36   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3E4A   CD C5 0A               CALL   flushBuffer   
3E4D   76                     HALT      
3E4E   00                     .CSTR      
3E4F                EXPECTM_0_2758S52:      
3E4F   E1                     POP   HL   
3E50                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1%", 2
3E50   31 00 4A               LD   SP,STACK   
3E53   CD 85 0B               CALL   coldBoot   
3E56   CD 54 48               CALL   execStr   
3E59   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "3i= [ ( i i-- i/br )^ ] 1%"   
3E74   CD C5 0A               CALL   flushBuffer   
3E77                          ;*Macro unroll:  expect "3i= [ ( i i-- i/br )^ ] 1%",2
3E77   E1                     POP   HL   
3E78   E5                     PUSH   HL   
3E79   11 02 00               LD   DE,2   
3E7C   B7                     OR   A   
3E7D   ED 52                  SBC   HL,DE   
3E7F   7D                     LD   A,L   
3E80   B4                     OR   H   
3E81   CA F2 3E               JP   Z,expectM_0_2759S52   
3E84   CD 3D 0B               CALL   printStr   
3E87   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1%"   
3EA8   CD 3D 0B               CALL   printStr   
3EAB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3EBA   21 02 00               LD   hl,2   
3EBD   E5                     PUSH   hl   
3EBE   CD 53 0C               CALL   run   
3EC1   2E 00                  .CSTR   "."   
3EC3   CD 3D 0B               CALL   printStr   
3EC6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3ED3   E1                     POP   hl   
3ED4   E5                     PUSH   hl   
3ED5   E5                     PUSH   hl   
3ED6   CD 53 0C               CALL   run   
3ED9   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3EED   CD C5 0A               CALL   flushBuffer   
3EF0   76                     HALT      
3EF1   00                     .CSTR      
3EF2                EXPECTM_0_2759S52:      
3EF2   E1                     POP   HL   
3EF3                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
3EF3   31 00 4A               LD   SP,STACK   
3EF6   CD 85 0B               CALL   coldBoot   
3EF9   CD 54 48               CALL   execStr   
3EFC   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3F22   CD C5 0A               CALL   flushBuffer   
3F25                          ;*Macro unroll:  expect "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",10
3F25   E1                     POP   HL   
3F26   E5                     PUSH   HL   
3F27   11 0A 00               LD   DE,10   
3F2A   B7                     OR   A   
3F2B   ED 52                  SBC   HL,DE   
3F2D   7D                     LD   A,L   
3F2E   B4                     OR   H   
3F2F   CA AB 3F               JP   Z,expectM_0_2760S52   
3F32   CD 3D 0B               CALL   printStr   
3F35   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3F61   CD 3D 0B               CALL   printStr   
3F64   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F73   21 0A 00               LD   hl,10   
3F76   E5                     PUSH   hl   
3F77   CD 53 0C               CALL   run   
3F7A   2E 00                  .CSTR   "."   
3F7C   CD 3D 0B               CALL   printStr   
3F7F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F8C   E1                     POP   hl   
3F8D   E5                     PUSH   hl   
3F8E   E5                     PUSH   hl   
3F8F   CD 53 0C               CALL   run   
3F92   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3FA6   CD C5 0A               CALL   flushBuffer   
3FA9   76                     HALT      
3FAA   00                     .CSTR      
3FAB                EXPECTM_0_2760S52:      
3FAB   E1                     POP   HL   
3FAC                          ;*Macro unroll:  test "3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^", 6
3FAC   31 00 4A               LD   SP,STACK   
3FAF   CD 85 0B               CALL   coldBoot   
3FB2   CD 54 48               CALL   execStr   
3FB5   33 20 3A 61 3A 62 63 7B 24 61 24 63 3D 20 28 20 24 63 20 24 63 2D 2D 20 24 63 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^"   
3FDD   CD C5 0A               CALL   flushBuffer   
3FE0                          ;*Macro unroll:  expect "3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^",6
3FE0   E1                     POP   HL   
3FE1   E5                     PUSH   HL   
3FE2   11 06 00               LD   DE,6   
3FE5   B7                     OR   A   
3FE6   ED 52                  SBC   HL,DE   
3FE8   7D                     LD   A,L   
3FE9   B4                     OR   H   
3FEA   CA 68 40               JP   Z,expectM_0_2761S52   
3FED   CD 3D 0B               CALL   printStr   
3FF0   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 7B 24 61 24 63 3D 20 28 20 24 63 20 24 63 2D 2D 20 24 63 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "Code: ","3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^"   
401E   CD 3D 0B               CALL   printStr   
4021   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4030   21 06 00               LD   hl,6   
4033   E5                     PUSH   hl   
4034   CD 53 0C               CALL   run   
4037   2E 00                  .CSTR   "."   
4039   CD 3D 0B               CALL   printStr   
403C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4049   E1                     POP   hl   
404A   E5                     PUSH   hl   
404B   E5                     PUSH   hl   
404C   CD 53 0C               CALL   run   
404F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4063   CD C5 0A               CALL   flushBuffer   
4066   76                     HALT      
4067   00                     .CSTR      
4068                EXPECTM_0_2761S52:      
4068   E1                     POP   HL   
4069                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
4069   31 00 4A               LD   SP,STACK   
406C   CD 85 0B               CALL   coldBoot   
406F   CD 54 48               CALL   execStr   
4072   27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'A' 1 - /ad"   
407E   CD C5 0A               CALL   flushBuffer   
4081                          ;*Macro unroll:  expect "'A' 1 - /ad",NUL
4081   E1                     POP   HL   
4082   E5                     PUSH   HL   
4083   11 00 00               LD   DE,NUL   
4086   B7                     OR   A   
4087   ED 52                  SBC   HL,DE   
4089   7D                     LD   A,L   
408A   B4                     OR   H   
408B   CA ED 40               JP   Z,expectM_0_2762S52   
408E   CD 3D 0B               CALL   printStr   
4091   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
40A3   CD 3D 0B               CALL   printStr   
40A6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40B5   21 00 00               LD   hl,NUL   
40B8   E5                     PUSH   hl   
40B9   CD 53 0C               CALL   run   
40BC   2E 00                  .CSTR   "."   
40BE   CD 3D 0B               CALL   printStr   
40C1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40CE   E1                     POP   hl   
40CF   E5                     PUSH   hl   
40D0   E5                     PUSH   hl   
40D1   CD 53 0C               CALL   run   
40D4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
40E8   CD C5 0A               CALL   flushBuffer   
40EB   76                     HALT      
40EC   00                     .CSTR      
40ED                EXPECTM_0_2762S52:      
40ED   E1                     POP   HL   
40EE                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
40EE   31 00 4A               LD   SP,STACK   
40F1   CD 85 0B               CALL   coldBoot   
40F4   CD 54 48               CALL   execStr   
40F7   27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'Z' 1 + /ad"   
4103   CD C5 0A               CALL   flushBuffer   
4106                          ;*Macro unroll:  expect "'Z' 1 + /ad",NUL
4106   E1                     POP   HL   
4107   E5                     PUSH   HL   
4108   11 00 00               LD   DE,NUL   
410B   B7                     OR   A   
410C   ED 52                  SBC   HL,DE   
410E   7D                     LD   A,L   
410F   B4                     OR   H   
4110   CA 72 41               JP   Z,expectM_0_2763S52   
4113   CD 3D 0B               CALL   printStr   
4116   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
4128   CD 3D 0B               CALL   printStr   
412B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
413A   21 00 00               LD   hl,NUL   
413D   E5                     PUSH   hl   
413E   CD 53 0C               CALL   run   
4141   2E 00                  .CSTR   "."   
4143   CD 3D 0B               CALL   printStr   
4146   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4153   E1                     POP   hl   
4154   E5                     PUSH   hl   
4155   E5                     PUSH   hl   
4156   CD 53 0C               CALL   run   
4159   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
416D   CD C5 0A               CALL   flushBuffer   
4170   76                     HALT      
4171   00                     .CSTR      
4172                EXPECTM_0_2763S52:      
4172   E1                     POP   HL   
4173                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
4173   31 00 4A               LD   SP,STACK   
4176   CD 85 0B               CALL   coldBoot   
4179   CD 54 48               CALL   execStr   
417C   27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'a' 1 - /ad"   
4188   CD C5 0A               CALL   flushBuffer   
418B                          ;*Macro unroll:  expect "'a' 1 - /ad",NUL
418B   E1                     POP   HL   
418C   E5                     PUSH   HL   
418D   11 00 00               LD   DE,NUL   
4190   B7                     OR   A   
4191   ED 52                  SBC   HL,DE   
4193   7D                     LD   A,L   
4194   B4                     OR   H   
4195   CA F7 41               JP   Z,expectM_0_2764S52   
4198   CD 3D 0B               CALL   printStr   
419B   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
41AD   CD 3D 0B               CALL   printStr   
41B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41BF   21 00 00               LD   hl,NUL   
41C2   E5                     PUSH   hl   
41C3   CD 53 0C               CALL   run   
41C6   2E 00                  .CSTR   "."   
41C8   CD 3D 0B               CALL   printStr   
41CB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41D8   E1                     POP   hl   
41D9   E5                     PUSH   hl   
41DA   E5                     PUSH   hl   
41DB   CD 53 0C               CALL   run   
41DE   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
41F2   CD C5 0A               CALL   flushBuffer   
41F5   76                     HALT      
41F6   00                     .CSTR      
41F7                EXPECTM_0_2764S52:      
41F7   E1                     POP   HL   
41F8                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
41F8   31 00 4A               LD   SP,STACK   
41FB   CD 85 0B               CALL   coldBoot   
41FE   CD 54 48               CALL   execStr   
4201   27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'z' 1 + /ad"   
420D   CD C5 0A               CALL   flushBuffer   
4210                          ;*Macro unroll:  expect "'z' 1 + /ad",NUL
4210   E1                     POP   HL   
4211   E5                     PUSH   HL   
4212   11 00 00               LD   DE,NUL   
4215   B7                     OR   A   
4216   ED 52                  SBC   HL,DE   
4218   7D                     LD   A,L   
4219   B4                     OR   H   
421A   CA 7C 42               JP   Z,expectM_0_2765S52   
421D   CD 3D 0B               CALL   printStr   
4220   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
4232   CD 3D 0B               CALL   printStr   
4235   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4244   21 00 00               LD   hl,NUL   
4247   E5                     PUSH   hl   
4248   CD 53 0C               CALL   run   
424B   2E 00                  .CSTR   "."   
424D   CD 3D 0B               CALL   printStr   
4250   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
425D   E1                     POP   hl   
425E   E5                     PUSH   hl   
425F   E5                     PUSH   hl   
4260   CD 53 0C               CALL   run   
4263   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4277   CD C5 0A               CALL   flushBuffer   
427A   76                     HALT      
427B   00                     .CSTR      
427C                EXPECTM_0_2765S52:      
427C   E1                     POP   HL   
427D                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
427D   31 00 4A               LD   SP,STACK   
4280   CD 85 0B               CALL   coldBoot   
4283   CD 54 48               CALL   execStr   
4286   27 7A 27 20 2F 61 64 00 .CSTR   "'z' /ad"   
428E   CD C5 0A               CALL   flushBuffer   
4291                          ;*Macro unroll:  expect "'z' /ad",VARS + (("z"-"a")+("Z"-"A")+1)*2
4291   E1                     POP   HL   
4292   E5                     PUSH   HL   
4293   11 66 4C               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4296   B7                     OR   A   
4297   ED 52                  SBC   HL,DE   
4299   7D                     LD   A,L   
429A   B4                     OR   H   
429B   CA F9 42               JP   Z,expectM_0_2766S52   
429E   CD 3D 0B               CALL   printStr   
42A1   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
42AF   CD 3D 0B               CALL   printStr   
42B2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42C1   21 66 4C               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
42C4   E5                     PUSH   hl   
42C5   CD 53 0C               CALL   run   
42C8   2E 00                  .CSTR   "."   
42CA   CD 3D 0B               CALL   printStr   
42CD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42DA   E1                     POP   hl   
42DB   E5                     PUSH   hl   
42DC   E5                     PUSH   hl   
42DD   CD 53 0C               CALL   run   
42E0   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
42F4   CD C5 0A               CALL   flushBuffer   
42F7   76                     HALT      
42F8   00                     .CSTR      
42F9                EXPECTM_0_2766S52:      
42F9   E1                     POP   HL   
42FA                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
42FA   31 00 4A               LD   SP,STACK   
42FD   CD 85 0B               CALL   coldBoot   
4300   CD 54 48               CALL   execStr   
4303   27 61 27 20 2F 61 64 00 .CSTR   "'a' /ad"   
430B   CD C5 0A               CALL   flushBuffer   
430E                          ;*Macro unroll:  expect "'a' /ad",VARS + ("Z"-"A"+1)*2
430E   E1                     POP   HL   
430F   E5                     PUSH   HL   
4310   11 34 4C               LD   DE,VARS + ("Z"-"A"+1)*2   
4313   B7                     OR   A   
4314   ED 52                  SBC   HL,DE   
4316   7D                     LD   A,L   
4317   B4                     OR   H   
4318   CA 76 43               JP   Z,expectM_0_2767S52   
431B   CD 3D 0B               CALL   printStr   
431E   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
432C   CD 3D 0B               CALL   printStr   
432F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
433E   21 34 4C               LD   hl,VARS + ("Z"-"A"+1)*2   
4341   E5                     PUSH   hl   
4342   CD 53 0C               CALL   run   
4345   2E 00                  .CSTR   "."   
4347   CD 3D 0B               CALL   printStr   
434A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4357   E1                     POP   hl   
4358   E5                     PUSH   hl   
4359   E5                     PUSH   hl   
435A   CD 53 0C               CALL   run   
435D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4371   CD C5 0A               CALL   flushBuffer   
4374   76                     HALT      
4375   00                     .CSTR      
4376                EXPECTM_0_2767S52:      
4376   E1                     POP   HL   
4377                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
4377   31 00 4A               LD   SP,STACK   
437A   CD 85 0B               CALL   coldBoot   
437D   CD 54 48               CALL   execStr   
4380   27 5A 27 20 2F 61 64 00 .CSTR   "'Z' /ad"   
4388   CD C5 0A               CALL   flushBuffer   
438B                          ;*Macro unroll:  expect "'Z' /ad",VARS + ("Z"-"A")*2
438B   E1                     POP   HL   
438C   E5                     PUSH   HL   
438D   11 32 4C               LD   DE,VARS + ("Z"-"A")*2   
4390   B7                     OR   A   
4391   ED 52                  SBC   HL,DE   
4393   7D                     LD   A,L   
4394   B4                     OR   H   
4395   CA F3 43               JP   Z,expectM_0_2768S52   
4398   CD 3D 0B               CALL   printStr   
439B   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
43A9   CD 3D 0B               CALL   printStr   
43AC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43BB   21 32 4C               LD   hl,VARS + ("Z"-"A")*2   
43BE   E5                     PUSH   hl   
43BF   CD 53 0C               CALL   run   
43C2   2E 00                  .CSTR   "."   
43C4   CD 3D 0B               CALL   printStr   
43C7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43D4   E1                     POP   hl   
43D5   E5                     PUSH   hl   
43D6   E5                     PUSH   hl   
43D7   CD 53 0C               CALL   run   
43DA   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
43EE   CD C5 0A               CALL   flushBuffer   
43F1   76                     HALT      
43F2   00                     .CSTR      
43F3                EXPECTM_0_2768S52:      
43F3   E1                     POP   HL   
43F4                          ;*Macro unroll:  test "'A' /ad", VARS
43F4   31 00 4A               LD   SP,STACK   
43F7   CD 85 0B               CALL   coldBoot   
43FA   CD 54 48               CALL   execStr   
43FD   27 41 27 20 2F 61 64 00 .CSTR   "'A' /ad"   
4405   CD C5 0A               CALL   flushBuffer   
4408                          ;*Macro unroll:  expect "'A' /ad",VARS
4408   E1                     POP   HL   
4409   E5                     PUSH   HL   
440A   11 00 4C               LD   DE,VARS   
440D   B7                     OR   A   
440E   ED 52                  SBC   HL,DE   
4410   7D                     LD   A,L   
4411   B4                     OR   H   
4412   CA 70 44               JP   Z,expectM_0_2769S52   
4415   CD 3D 0B               CALL   printStr   
4418   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
4426   CD 3D 0B               CALL   printStr   
4429   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4438   21 00 4C               LD   hl,VARS   
443B   E5                     PUSH   hl   
443C   CD 53 0C               CALL   run   
443F   2E 00                  .CSTR   "."   
4441   CD 3D 0B               CALL   printStr   
4444   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4451   E1                     POP   hl   
4452   E5                     PUSH   hl   
4453   E5                     PUSH   hl   
4454   CD 53 0C               CALL   run   
4457   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
446B   CD C5 0A               CALL   flushBuffer   
446E   76                     HALT      
446F   00                     .CSTR      
4470                EXPECTM_0_2769S52:      
4470   E1                     POP   HL   
4471                          ;*Macro unroll:  test "-1 /bd/vB/c 0%", $2D
4471   31 00 4A               LD   SP,STACK   
4474   CD 85 0B               CALL   coldBoot   
4477   CD 54 48               CALL   execStr   
447A   2D 31 20 2F 62 64 2F 76 42 2F 63 20 30 25 00 .CSTR   "-1 /bd/vB/c 0%"   
4489   CD C5 0A               CALL   flushBuffer   
448C                          ;*Macro unroll:  expect "-1 /bd/vB/c 0%",$2D
448C   E1                     POP   HL   
448D   E5                     PUSH   HL   
448E   11 2D 00               LD   DE,$2D   
4491   B7                     OR   A   
4492   ED 52                  SBC   HL,DE   
4494   7D                     LD   A,L   
4495   B4                     OR   H   
4496   CA FB 44               JP   Z,expectM_0_2770S52   
4499   CD 3D 0B               CALL   printStr   
449C   43 6F 64 65 3A 20 2D 31 20 2F 62 64 2F 76 42 2F 63 20 30 25 00 .CSTR   "Code: ","-1 /bd/vB/c 0%"   
44B1   CD 3D 0B               CALL   printStr   
44B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44C3   21 2D 00               LD   hl,$2D   
44C6   E5                     PUSH   hl   
44C7   CD 53 0C               CALL   run   
44CA   2E 00                  .CSTR   "."   
44CC   CD 3D 0B               CALL   printStr   
44CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
44DC   E1                     POP   hl   
44DD   E5                     PUSH   hl   
44DE   E5                     PUSH   hl   
44DF   CD 53 0C               CALL   run   
44E2   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
44F6   CD C5 0A               CALL   flushBuffer   
44F9   76                     HALT      
44FA   00                     .CSTR      
44FB                EXPECTM_0_2770S52:      
44FB   E1                     POP   HL   
44FC                          ;*Macro unroll:  test "`A` /bs/vB/c 0%", 65
44FC   31 00 4A               LD   SP,STACK   
44FF   CD 85 0B               CALL   coldBoot   
4502   CD 54 48               CALL   execStr   
4505   60 41 60 20 2F 62 73 2F 76 42 2F 63 20 30 25 00 .CSTR   "`A` /bs/vB/c 0%"   
4515   CD C5 0A               CALL   flushBuffer   
4518                          ;*Macro unroll:  expect "`A` /bs/vB/c 0%",65
4518   E1                     POP   HL   
4519   E5                     PUSH   HL   
451A   11 41 00               LD   DE,65   
451D   B7                     OR   A   
451E   ED 52                  SBC   HL,DE   
4520   7D                     LD   A,L   
4521   B4                     OR   H   
4522   CA 88 45               JP   Z,expectM_0_2771S52   
4525   CD 3D 0B               CALL   printStr   
4528   43 6F 64 65 3A 20 60 41 60 20 2F 62 73 2F 76 42 2F 63 20 30 25 00 .CSTR   "Code: ","`A` /bs/vB/c 0%"   
453E   CD 3D 0B               CALL   printStr   
4541   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4550   21 41 00               LD   hl,65   
4553   E5                     PUSH   hl   
4554   CD 53 0C               CALL   run   
4557   2E 00                  .CSTR   "."   
4559   CD 3D 0B               CALL   printStr   
455C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4569   E1                     POP   hl   
456A   E5                     PUSH   hl   
456B   E5                     PUSH   hl   
456C   CD 53 0C               CALL   run   
456F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4583   CD C5 0A               CALL   flushBuffer   
4586   76                     HALT      
4587   00                     .CSTR      
4588                EXPECTM_0_2771S52:      
4588   E1                     POP   HL   
4589                          ;*Macro unroll:  test "123 /bd", 3
4589   31 00 4A               LD   SP,STACK   
458C   CD 85 0B               CALL   coldBoot   
458F   CD 54 48               CALL   execStr   
4592   31 32 33 20 2F 62 64 00 .CSTR   "123 /bd"   
459A   CD C5 0A               CALL   flushBuffer   
459D                          ;*Macro unroll:  expect "123 /bd",3
459D   E1                     POP   HL   
459E   E5                     PUSH   HL   
459F   11 03 00               LD   DE,3   
45A2   B7                     OR   A   
45A3   ED 52                  SBC   HL,DE   
45A5   7D                     LD   A,L   
45A6   B4                     OR   H   
45A7   CA 05 46               JP   Z,expectM_0_2772S52   
45AA   CD 3D 0B               CALL   printStr   
45AD   43 6F 64 65 3A 20 31 32 33 20 2F 62 64 00 .CSTR   "Code: ","123 /bd"   
45BB   CD 3D 0B               CALL   printStr   
45BE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45CD   21 03 00               LD   hl,3   
45D0   E5                     PUSH   hl   
45D1   CD 53 0C               CALL   run   
45D4   2E 00                  .CSTR   "."   
45D6   CD 3D 0B               CALL   printStr   
45D9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
45E6   E1                     POP   hl   
45E7   E5                     PUSH   hl   
45E8   E5                     PUSH   hl   
45E9   CD 53 0C               CALL   run   
45EC   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4600   CD C5 0A               CALL   flushBuffer   
4603   76                     HALT      
4604   00                     .CSTR      
4605                EXPECTM_0_2772S52:      
4605   E1                     POP   HL   
4606                          ;*Macro unroll:  test "123 /bd/vB/c 1%", $32
4606   31 00 4A               LD   SP,STACK   
4609   CD 85 0B               CALL   coldBoot   
460C   CD 54 48               CALL   execStr   
460F   31 32 33 20 2F 62 64 2F 76 42 2F 63 20 31 25 00 .CSTR   "123 /bd/vB/c 1%"   
461F   CD C5 0A               CALL   flushBuffer   
4622                          ;*Macro unroll:  expect "123 /bd/vB/c 1%",$32
4622   E1                     POP   HL   
4623   E5                     PUSH   HL   
4624   11 32 00               LD   DE,$32   
4627   B7                     OR   A   
4628   ED 52                  SBC   HL,DE   
462A   7D                     LD   A,L   
462B   B4                     OR   H   
462C   CA 92 46               JP   Z,expectM_0_2773S52   
462F   CD 3D 0B               CALL   printStr   
4632   43 6F 64 65 3A 20 31 32 33 20 2F 62 64 2F 76 42 2F 63 20 31 25 00 .CSTR   "Code: ","123 /bd/vB/c 1%"   
4648   CD 3D 0B               CALL   printStr   
464B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
465A   21 32 00               LD   hl,$32   
465D   E5                     PUSH   hl   
465E   CD 53 0C               CALL   run   
4661   2E 00                  .CSTR   "."   
4663   CD 3D 0B               CALL   printStr   
4666   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4673   E1                     POP   hl   
4674   E5                     PUSH   hl   
4675   E5                     PUSH   hl   
4676   CD 53 0C               CALL   run   
4679   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
468D   CD C5 0A               CALL   flushBuffer   
4690   76                     HALT      
4691   00                     .CSTR      
4692                EXPECTM_0_2773S52:      
4692   E1                     POP   HL   
4693                          ;*Macro unroll:  test "123/bd ` x `/bs 456/bd + + ", 9
4693   31 00 4A               LD   SP,STACK   
4696   CD 85 0B               CALL   coldBoot   
4699   CD 54 48               CALL   execStr   
469C   31 32 33 2F 62 64 20 60 20 78 20 60 2F 62 73 20 34 35 36 2F 62 64 20 2B 20 2B 20 00 .CSTR   "123/bd ` x `/bs 456/bd + + "   
46B8   CD C5 0A               CALL   flushBuffer   
46BB                          ;*Macro unroll:  expect "123/bd ` x `/bs 456/bd + + ",9
46BB   E1                     POP   HL   
46BC   E5                     PUSH   HL   
46BD   11 09 00               LD   DE,9   
46C0   B7                     OR   A   
46C1   ED 52                  SBC   HL,DE   
46C3   7D                     LD   A,L   
46C4   B4                     OR   H   
46C5   CA 37 47               JP   Z,expectM_0_2774S52   
46C8   CD 3D 0B               CALL   printStr   
46CB   43 6F 64 65 3A 20 31 32 33 2F 62 64 20 60 20 78 20 60 2F 62 73 20 34 35 36 2F 62 64 20 2B 20 2B 20 00 .CSTR   "Code: ","123/bd ` x `/bs 456/bd + + "   
46ED   CD 3D 0B               CALL   printStr   
46F0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46FF   21 09 00               LD   hl,9   
4702   E5                     PUSH   hl   
4703   CD 53 0C               CALL   run   
4706   2E 00                  .CSTR   "."   
4708   CD 3D 0B               CALL   printStr   
470B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4718   E1                     POP   hl   
4719   E5                     PUSH   hl   
471A   E5                     PUSH   hl   
471B   CD 53 0C               CALL   run   
471E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4732   CD C5 0A               CALL   flushBuffer   
4735   76                     HALT      
4736   00                     .CSTR      
4737                EXPECTM_0_2774S52:      
4737   E1                     POP   HL   
4738                          ;*Macro unroll:  test "#4321 /bh", 4
4738   31 00 4A               LD   SP,STACK   
473B   CD 85 0B               CALL   coldBoot   
473E   CD 54 48               CALL   execStr   
4741   23 34 33 32 31 20 2F 62 68 00 .CSTR   "#4321 /bh"   
474B   CD C5 0A               CALL   flushBuffer   
474E                          ;*Macro unroll:  expect "#4321 /bh",4
474E   E1                     POP   HL   
474F   E5                     PUSH   HL   
4750   11 04 00               LD   DE,4   
4753   B7                     OR   A   
4754   ED 52                  SBC   HL,DE   
4756   7D                     LD   A,L   
4757   B4                     OR   H   
4758   CA B8 47               JP   Z,expectM_0_2775S52   
475B   CD 3D 0B               CALL   printStr   
475E   43 6F 64 65 3A 20 23 34 33 32 31 20 2F 62 68 00 .CSTR   "Code: ","#4321 /bh"   
476E   CD 3D 0B               CALL   printStr   
4771   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4780   21 04 00               LD   hl,4   
4783   E5                     PUSH   hl   
4784   CD 53 0C               CALL   run   
4787   2E 00                  .CSTR   "."   
4789   CD 3D 0B               CALL   printStr   
478C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4799   E1                     POP   hl   
479A   E5                     PUSH   hl   
479B   E5                     PUSH   hl   
479C   CD 53 0C               CALL   run   
479F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
47B3   CD C5 0A               CALL   flushBuffer   
47B6   76                     HALT      
47B7   00                     .CSTR      
47B8                EXPECTM_0_2775S52:      
47B8   E1                     POP   HL   
47B9                          ;*Macro unroll:  test "#4321 /bh/vB/c 0%", $34
47B9   31 00 4A               LD   SP,STACK   
47BC   CD 85 0B               CALL   coldBoot   
47BF   CD 54 48               CALL   execStr   
47C2   23 34 33 32 31 20 2F 62 68 2F 76 42 2F 63 20 30 25 00 .CSTR   "#4321 /bh/vB/c 0%"   
47D4   CD C5 0A               CALL   flushBuffer   
47D7                          ;*Macro unroll:  expect "#4321 /bh/vB/c 0%",$34
47D7   E1                     POP   HL   
47D8   E5                     PUSH   HL   
47D9   11 34 00               LD   DE,$34   
47DC   B7                     OR   A   
47DD   ED 52                  SBC   HL,DE   
47DF   7D                     LD   A,L   
47E0   B4                     OR   H   
47E1   CA 49 48               JP   Z,expectM_0_2776S52   
47E4   CD 3D 0B               CALL   printStr   
47E7   43 6F 64 65 3A 20 23 34 33 32 31 20 2F 62 68 2F 76 42 2F 63 20 30 25 00 .CSTR   "Code: ","#4321 /bh/vB/c 0%"   
47FF   CD 3D 0B               CALL   printStr   
4802   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4811   21 34 00               LD   hl,$34   
4814   E5                     PUSH   hl   
4815   CD 53 0C               CALL   run   
4818   2E 00                  .CSTR   "."   
481A   CD 3D 0B               CALL   printStr   
481D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
482A   E1                     POP   hl   
482B   E5                     PUSH   hl   
482C   E5                     PUSH   hl   
482D   CD 53 0C               CALL   run   
4830   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4844   CD C5 0A               CALL   flushBuffer   
4847   76                     HALT      
4848   00                     .CSTR      
4849                EXPECTM_0_2776S52:      
4849   E1                     POP   HL   
484A                             ; 
484A   CD 3D 0B               CALL   printStr   
484D   44 6F 6E 65 21 00      .CSTR   "Done!"   
4853   76                     HALT      
4854                          ALIGN   2   
4854                             ; printer:
4854                             ;     pop hl
4854                             ;     call prtdec
4854                             ;     jp (ix)
4854                             ; executes a null teminated string (null executes exit_)
4854                             ; the string should be immedaitely following the call
4854                EXECSTR:      ; create a root stack frame
4854   C1                     POP   bc   ; bc = code*
4855   0B                     DEC   bc   ; dec to prepare for next routine
4856   11 00 00               LD   de,0   
4859   D5                     PUSH   de   ; push fake IP
485A   D5                     PUSH   de   ; push null arg_list*
485B   D5                     PUSH   de   ; push null first_arg*
485C   D5                     PUSH   de   ; push fake BP
485D   DD E9                  JP   (ix)   
485F                STKSIZE:   EQU   $100   ; Stack size
485F                TIBSIZE:   EQU   $100   ; 256 bytes
485F                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
485F                          ALIGN   $100   
4900                          DS   STKSIZE   
4A00                STACK:       
4A00                          ALIGN   $100   
4A00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
4B00                          ALIGN   $100   
4B00                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
4C00                          ALIGN   $100   
4C00                VARS:        
4C00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
4CD0                RESTARTS:      
4CD0                RST08:    DS   2   
4CD2                RST10:    DS   2   
4CD4                RST18:    DS   2   
4CD6                RST20:    DS   2   
4CD8                RST28:    DS   2   
4CDA                RST30:    DS   2   ; 
4CDC                BAUD:     DS   2   ; 
4CDE                INTVEC:   DS   2   ; 
4CE0                NMIVEC:   DS   2   ; 
4CE2                GETCVEC:   DS   2   ; 
4CE4                PUTCVEC:   DS   2   ; 
4CE6                SYSVARS:      
4CE6                             ; initialised sys variables (preserved)
4CE6                VDATAWIDTH:   DS   2   ; 
4CE8                VNUMBASE:   DS   2   ; 
4CEA                VTIBPTR:   DS   2   ; 
4CEC                VBUFPTR:   DS   2   ; 
4CEE                VNEXT:    DS   2   ; 
4CF0                VHEAPPTR:   DS   2   ; 
4CF2                             ; uninitialised sys variables (preserved)
4CF2                VPOINTER:   DS   2   ; 
4CF4                VREMAIN:   DS   2   ; 
4CF6                VSAVEDIP:   DS   2   ; 
4CF8                VSAVEDSP:   DS   2   ; 
4CFA                VSAVEDNEXT:   DS   2   ; 
4CFC                VSAVEDBP:   DS   2   ; 
4CFE                VCHECKSUM:   DS   2   ; 
4D00                             ; uninitialised sys variables (unpreserved)
4D00                VTEMP1:   DS   2   ; 
4D02                VTEMP2:   DS   2   ; 
4D04                VLASTDEF:   DS   2   ; 
4D06                VHASHSTR:   DS   2   ; 
4D08                TBPTR:    DS   2   ; reserved for tests
4D0A                WARMBUF:   DS   20   
4D1E                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 46 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0AB0 DEFINED AT LINE 1695 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 1855 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1667 IN MAIN.asm
                    > USED AT LINE 1942 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1538 IN MAIN.asm
                    > USED AT LINE 1780 IN MAIN.asm
                    > USED AT LINE 1926 IN MAIN.asm
                    > USED AT LINE 1988 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 819 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
                    > USED AT LINE 997 IN MAIN.asm
                    > USED AT LINE 1222 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 1287 IN MAIN.asm
                    > USED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 1497 IN MAIN.asm
                    > USED AT LINE 1523 IN MAIN.asm
                    > USED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 1945 IN MAIN.asm
                    > USED AT LINE 2033 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
DQUOTE:             0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 1159 IN MAIN.asm
                    > USED AT LINE 1799 IN MAIN.asm
                    > USED AT LINE 2047 IN MAIN.asm
                    > USED AT LINE 2062 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 1955 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
TMAGIC:             00AA DEFINED AT LINE 29 IN MAIN.asm
                    > USED AT LINE 419 IN MAIN.asm
TRESERV:            00A0 DEFINED AT LINE 30 IN MAIN.asm
TNUMBER:            00A1 DEFINED AT LINE 31 IN MAIN.asm
TSTRING:            00A2 DEFINED AT LINE 32 IN MAIN.asm
TPOINTER:           00A3 DEFINED AT LINE 33 IN MAIN.asm
TARRAY:             00A4 DEFINED AT LINE 34 IN MAIN.asm
                    > USED AT LINE 416 IN MAIN.asm
TBLOCK:             00A5 DEFINED AT LINE 35 IN MAIN.asm
TLAMBDA:            00A6 DEFINED AT LINE 36 IN MAIN.asm
TARGLST:            00A7 DEFINED AT LINE 37 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 51 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 56 IN MAIN.asm
                    > USED AT LINE 1883 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 66 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 169 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 171 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 173 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 175 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 177 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 179 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 181 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 183 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 185 IN MAIN.asm
LPAREN_:            0318 DEFINED AT LINE 187 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 188 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 190 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 192 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 194 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 196 IN MAIN.asm
UNDERSCORE_:        0327 DEFINED AT LINE 198 IN MAIN.asm
COLON_:             032A DEFINED AT LINE 200 IN MAIN.asm
UPCASE_:            032D DEFINED AT LINE 202 IN MAIN.asm
LOWCASE_:           0330 DEFINED AT LINE 204 IN MAIN.asm
QUESTION_:          0333 DEFINED AT LINE 206 IN MAIN.asm
STAR_:              0336 DEFINED AT LINE 208 IN MAIN.asm
BANG_:              0339 DEFINED AT LINE 210 IN MAIN.asm
NUM_:               033E DEFINED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
HASH_:              0341 DEFINED AT LINE 215 IN MAIN.asm
PIPE_:              0344 DEFINED AT LINE 217 IN MAIN.asm
CARET_:             0347 DEFINED AT LINE 219 IN MAIN.asm
COMMA_:             034A DEFINED AT LINE 221 IN MAIN.asm
DBLQUOTE_:          034D DEFINED AT LINE 223 IN MAIN.asm
MINUS_:             0350 DEFINED AT LINE 225 IN MAIN.asm
EQ_:                0353 DEFINED AT LINE 227 IN MAIN.asm
EQ0:                035D DEFINED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 231 IN MAIN.asm
EQ1:                035E DEFINED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
GT_:                0362 DEFINED AT LINE 240 IN MAIN.asm
LT_:                036D DEFINED AT LINE 248 IN MAIN.asm
LT1:                0376 DEFINED AT LINE 255 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
SLASH_:             037F DEFINED AT LINE 260 IN MAIN.asm
NOP_:               0382 DEFINED AT LINE 262 IN MAIN.asm
RPAREN_:            0384 DEFINED AT LINE 264 IN MAIN.asm
PLUS:               0387 DEFINED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 172 IN MAIN.asm
ADD:                0387 DEFINED AT LINE 271 IN MAIN.asm
ADD1:               0392 DEFINED AT LINE 279 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
ADD3:               0396 DEFINED AT LINE 284 IN MAIN.asm
                    > USED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 1033 IN MAIN.asm
                    > USED AT LINE 1201 IN MAIN.asm
AT:                 0399 DEFINED AT LINE 290 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
ADDR:               0399 DEFINED AT LINE 291 IN MAIN.asm
AMPER:              03A3 DEFINED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 176 IN MAIN.asm
AND:                03A3 DEFINED AT LINE 297 IN MAIN.asm
AND1:               03AA DEFINED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 319 IN MAIN.asm
PIPE:               03AE DEFINED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
OR:                 03AE DEFINED AT LINE 311 IN MAIN.asm
XOR:                03B7 DEFINED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
XOR1:               03B8 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 335 IN MAIN.asm
INVERT:             03C2 DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 1483 IN MAIN.asm
DOLLAR:             03C7 DEFINED AT LINE 340 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
ARG:                03C7 DEFINED AT LINE 341 IN MAIN.asm
ARG0:               03E5 DEFINED AT LINE 362 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
ARG0A:              03EE DEFINED AT LINE 370 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 354 IN MAIN.asm
ARG1:               03F3 DEFINED AT LINE 373 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
ARG1A:              03FB DEFINED AT LINE 380 IN MAIN.asm
                    > USED AT LINE 372 IN MAIN.asm
LBRACK:             03FE DEFINED AT LINE 384 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
ARRAYSTART:         03FE DEFINED AT LINE 385 IN MAIN.asm
RBRACK:             041A DEFINED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
ARRAYEND:           041A DEFINED AT LINE 400 IN MAIN.asm
ARRAYEND1:          043C DEFINED AT LINE 422 IN MAIN.asm
                    > USED AT LINE 438 IN MAIN.asm
ARRAYEND2:          044C DEFINED AT LINE 432 IN MAIN.asm
                    > USED AT LINE 428 IN MAIN.asm
ARRINDEX:           0472 DEFINED AT LINE 461 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
ARRINDEX0:          047A DEFINED AT LINE 467 IN MAIN.asm
ARRINDEX1:          047B DEFINED AT LINE 469 IN MAIN.asm
                    > USED AT LINE 466 IN MAIN.asm
ARRINDEX2:          0487 DEFINED AT LINE 478 IN MAIN.asm
                    > USED AT LINE 475 IN MAIN.asm
ASSIGN:             048A DEFINED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
ASSIGN0:            048C DEFINED AT LINE 486 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
ASSIGNX:            048D DEFINED AT LINE 488 IN MAIN.asm
ASSIGN1:            0499 DEFINED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 493 IN MAIN.asm
COLON:              049B DEFINED AT LINE 503 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
ARGLIST:            049B DEFINED AT LINE 504 IN MAIN.asm
ARGLIST1:           04A5 DEFINED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 532 IN MAIN.asm
ARGLIST1A:          04AD DEFINED AT LINE 517 IN MAIN.asm
                    > USED AT LINE 514 IN MAIN.asm
ARGLIST2:           04B5 DEFINED AT LINE 522 IN MAIN.asm
ARGLIST3:           04BD DEFINED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 528 IN MAIN.asm
ARGLIST4:           04C0 DEFINED AT LINE 533 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
ARGLIST5:           04C6 DEFINED AT LINE 539 IN MAIN.asm
                    > USED AT LINE 537 IN MAIN.asm
LBRACE:             04D2 DEFINED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
BLOCKSTART:         04D2 DEFINED AT LINE 551 IN MAIN.asm
BLOCKSTART1:        04D6 DEFINED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 589 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
BLOCKSTART2:        0502 DEFINED AT LINE 582 IN MAIN.asm
                    > USED AT LINE 569 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
BLOCKSTART3:        0505 DEFINED AT LINE 585 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
                    > USED AT LINE 580 IN MAIN.asm
BLOCKSTART4:        050D DEFINED AT LINE 591 IN MAIN.asm
                    > USED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
BLOCKSTART5:        0510 DEFINED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 590 IN MAIN.asm
BLOCKSTART6:        0538 DEFINED AT LINE 613 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
RBRACE:             053B DEFINED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
BLOCKEND:           053B DEFINED AT LINE 618 IN MAIN.asm
                    > USED AT LINE 1427 IN MAIN.asm
BLOCKEND1:          056D DEFINED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 633 IN MAIN.asm
BLOCKEND2:          0579 DEFINED AT LINE 647 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
BLOCKEND3:          058B DEFINED AT LINE 661 IN MAIN.asm
                    > USED AT LINE 653 IN MAIN.asm
TICK:               0597 DEFINED AT LINE 668 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
CHAR:               0597 DEFINED AT LINE 669 IN MAIN.asm
CHAR1:              059A DEFINED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 682 IN MAIN.asm
CHAR2:              05A6 DEFINED AT LINE 680 IN MAIN.asm
                    > USED AT LINE 677 IN MAIN.asm
CHAR3:              05A9 DEFINED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 675 IN MAIN.asm
BACKSLASH:          05AC DEFINED AT LINE 687 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
COMMA:              05AE DEFINED AT LINE 692 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
DISCARD:            05AE DEFINED AT LINE 693 IN MAIN.asm
DISCARD1:           05BB DEFINED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 700 IN MAIN.asm
SLASH:              05BD DEFINED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
DIV:                05F3 DEFINED AT LINE 742 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
DOT:                0604 DEFINED AT LINE 753 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
DIVIDE:             0616 DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
DIVIDE1:            061B DEFINED AT LINE 772 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
DIVIDE2:            0628 DEFINED AT LINE 780 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
DIVIDE3:            0629 DEFINED AT LINE 782 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
EQUALS:             062F DEFINED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
LESSTHANEQ:         0637 DEFINED AT LINE 798 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN:           063C DEFINED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
LESSTHAN1:          0641 DEFINED AT LINE 810 IN MAIN.asm
                    > USED AT LINE 801 IN MAIN.asm
TRUE1:              0644 DEFINED AT LINE 813 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
NULL1:              064A DEFINED AT LINE 817 IN MAIN.asm
FALSE1:             064A DEFINED AT LINE 818 IN MAIN.asm
                    > USED AT LINE 718 IN MAIN.asm
                    > USED AT LINE 794 IN MAIN.asm
                    > USED AT LINE 808 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
CARET:              0650 DEFINED AT LINE 826 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
GO:                 0650 DEFINED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 1286 IN MAIN.asm
                    > USED AT LINE 1522 IN MAIN.asm
GO1:                0651 DEFINED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 1009 IN MAIN.asm
                    > USED AT LINE 1011 IN MAIN.asm
GO2:                0657 DEFINED AT LINE 834 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
GOBLOCK:            0663 DEFINED AT LINE 842 IN MAIN.asm
GOBLOCK1:           0663 DEFINED AT LINE 843 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
GOBLOCK2:           0688 DEFINED AT LINE 860 IN MAIN.asm
                    > USED AT LINE 946 IN MAIN.asm
GOLAMBDA:           0696 DEFINED AT LINE 869 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
GOLAMBDA1:          06B3 DEFINED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
GOLAMBDA2:          06B9 DEFINED AT LINE 899 IN MAIN.asm
                    > USED AT LINE 891 IN MAIN.asm
GOLAMBDA3:          06C4 DEFINED AT LINE 905 IN MAIN.asm
                    > USED AT LINE 877 IN MAIN.asm
GOLAMBDA4:          06DC DEFINED AT LINE 922 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
GOLAMBDA5:          06E0 DEFINED AT LINE 926 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
GOLAMBDA6:          06E3 DEFINED AT LINE 930 IN MAIN.asm
                    > USED AT LINE 925 IN MAIN.asm
GOLAMBDA7:          06E6 DEFINED AT LINE 933 IN MAIN.asm
GOLAMBDA8:          06EB DEFINED AT LINE 939 IN MAIN.asm
                    > USED AT LINE 854 IN MAIN.asm
                    > USED AT LINE 921 IN MAIN.asm
HASH:               06F6 DEFINED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
HEXNUM:             06F6 DEFINED AT LINE 949 IN MAIN.asm
HEXNUM1:            06F9 DEFINED AT LINE 951 IN MAIN.asm
                    > USED AT LINE 968 IN MAIN.asm
HEXNUM2:            0701 DEFINED AT LINE 957 IN MAIN.asm
                    > USED AT LINE 955 IN MAIN.asm
UPCASE:             0713 DEFINED AT LINE 969 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
LOWCASE:            0718 DEFINED AT LINE 973 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
IDENT1:             071D DEFINED AT LINE 977 IN MAIN.asm
                    > USED AT LINE 972 IN MAIN.asm
QUESTION:           072A DEFINED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
IF:                 072A DEFINED AT LINE 991 IN MAIN.asm
IFTE:               0736 DEFINED AT LINE 1001 IN MAIN.asm
                    > USED AT LINE 995 IN MAIN.asm
IFTE1:              0737 DEFINED AT LINE 1003 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
STAR:               0743 DEFINED AT LINE 1013 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
MUL:                0743 DEFINED AT LINE 1014 IN MAIN.asm
MUL2:               0745 DEFINED AT LINE 1017 IN MAIN.asm
MUL3:               074D DEFINED AT LINE 1022 IN MAIN.asm
                    > USED AT LINE 1031 IN MAIN.asm
NUM:                075F DEFINED AT LINE 1035 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
NUM0:               0768 DEFINED AT LINE 1041 IN MAIN.asm
                    > USED AT LINE 1039 IN MAIN.asm
NUM1:               0769 DEFINED AT LINE 1043 IN MAIN.asm
                    > USED AT LINE 1060 IN MAIN.asm
NUM2:               0781 DEFINED AT LINE 1061 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
                    > USED AT LINE 1046 IN MAIN.asm
                    > USED AT LINE 1048 IN MAIN.asm
NUM3:               078C DEFINED AT LINE 1069 IN MAIN.asm
                    > USED AT LINE 1064 IN MAIN.asm
UNDERSCORE:         078F DEFINED AT LINE 1073 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
REMAIN:             078F DEFINED AT LINE 1074 IN MAIN.asm
RPAREN:             0795 DEFINED AT LINE 1079 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
SEMICOLON:          079D DEFINED AT LINE 1085 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
SHIFTLEFT:          07B9 DEFINED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
SHIFTLEFT1:         07C1 DEFINED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 1119 IN MAIN.asm
SHIFTLEFT2:         07C2 DEFINED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
SHIFTRIGHT:         07C9 DEFINED AT LINE 1126 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
SHIFTRIGHT1:        07D1 DEFINED AT LINE 1133 IN MAIN.asm
                    > USED AT LINE 1137 IN MAIN.asm
SHIFTRIGHT2:        07D5 DEFINED AT LINE 1136 IN MAIN.asm
                    > USED AT LINE 1132 IN MAIN.asm
DBLQUOTE:           07DC DEFINED AT LINE 1145 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
STRING:             07DC DEFINED AT LINE 1146 IN MAIN.asm
STRING1:            07E5 DEFINED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 1162 IN MAIN.asm
STRING2:            07E8 DEFINED AT LINE 1157 IN MAIN.asm
                    > USED AT LINE 1152 IN MAIN.asm
STRING3:            07F1 DEFINED AT LINE 1163 IN MAIN.asm
                    > USED AT LINE 1160 IN MAIN.asm
MINUS:              0804 DEFINED AT LINE 1180 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
SUB:                0810 DEFINED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 1185 IN MAIN.asm
SUB1:               081A DEFINED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 1191 IN MAIN.asm
ERROR1:             0823 DEFINED AT LINE 1203 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 1485 IN MAIN.asm
                    > USED AT LINE 1498 IN MAIN.asm
                    > USED AT LINE 1603 IN MAIN.asm
COMMENT:            082A DEFINED AT LINE 1208 IN MAIN.asm
                    > USED AT LINE 708 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
COMMAND_A:          0833 DEFINED AT LINE 1216 IN MAIN.asm
                    > USED AT LINE 710 IN MAIN.asm
ABSOLUTE:           083F DEFINED AT LINE 1227 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
ADDROF:             084C DEFINED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 1221 IN MAIN.asm
ADDROF1:            0860 DEFINED AT LINE 1254 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
ADDROF2:            086B DEFINED AT LINE 1263 IN MAIN.asm
                    > USED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 1253 IN MAIN.asm
COMMAND_B:          086D DEFINED AT LINE 1266 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
BUFFERARRAY:        0885 DEFINED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
BUFFERNUMBER:       08B9 DEFINED AT LINE 1294 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 1273 IN MAIN.asm
BUFFERDEC:          08C0 DEFINED AT LINE 1301 IN MAIN.asm
BUFFERDEC0:         08DA DEFINED AT LINE 1318 IN MAIN.asm
                    > USED AT LINE 1305 IN MAIN.asm
BUFFERDEC1:         08EA DEFINED AT LINE 1332 IN MAIN.asm
                    > USED AT LINE 1320 IN MAIN.asm
BUFFERDEC2:         090A DEFINED AT LINE 1346 IN MAIN.asm
                    > USED AT LINE 1335 IN MAIN.asm
                    > USED AT LINE 1337 IN MAIN.asm
                    > USED AT LINE 1339 IN MAIN.asm
                    > USED AT LINE 1341 IN MAIN.asm
                    > USED AT LINE 1344 IN MAIN.asm
BUFFERDEC3:         090C DEFINED AT LINE 1348 IN MAIN.asm
                    > USED AT LINE 1351 IN MAIN.asm
BUFFERDEC4:         091C DEFINED AT LINE 1360 IN MAIN.asm
                    > USED AT LINE 1355 IN MAIN.asm
BUFFERDEC5:         091D DEFINED AT LINE 1362 IN MAIN.asm
                    > USED AT LINE 1359 IN MAIN.asm
BUFFERHEX:          0926 DEFINED AT LINE 1373 IN MAIN.asm
                    > USED AT LINE 1297 IN MAIN.asm
BUFFERHEX1:         0947 DEFINED AT LINE 1391 IN MAIN.asm
                    > USED AT LINE 1381 IN MAIN.asm
                    > USED AT LINE 1383 IN MAIN.asm
BUFFERHEX2:         0950 DEFINED AT LINE 1399 IN MAIN.asm
                    > USED AT LINE 1397 IN MAIN.asm
BREAK:              095E DEFINED AT LINE 1412 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
BREAK1:             0965 DEFINED AT LINE 1418 IN MAIN.asm
                    > USED AT LINE 1416 IN MAIN.asm
BUFFERSTRING:       0978 DEFINED AT LINE 1431 IN MAIN.asm
                    > USED AT LINE 760 IN MAIN.asm
                    > USED AT LINE 1277 IN MAIN.asm
BUFFERSTRING0:      097F DEFINED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 1443 IN MAIN.asm
BUFFERSTRING1:      0985 DEFINED AT LINE 1440 IN MAIN.asm
                    > USED AT LINE 1434 IN MAIN.asm
BUFFERCHAR:         0992 DEFINED AT LINE 1450 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 1271 IN MAIN.asm
BUFFERXCHARS:       0997 DEFINED AT LINE 1456 IN MAIN.asm
                    > USED AT LINE 762 IN MAIN.asm
                    > USED AT LINE 1279 IN MAIN.asm
BUFFERXCHARS0:      0998 DEFINED AT LINE 1458 IN MAIN.asm
                    > USED AT LINE 1452 IN MAIN.asm
BUFFERXCHARS1:      09A1 DEFINED AT LINE 1464 IN MAIN.asm
                    > USED AT LINE 1474 IN MAIN.asm
BUFFERXCHARS2:      09A9 DEFINED AT LINE 1471 IN MAIN.asm
                    > USED AT LINE 1463 IN MAIN.asm
COMMAND_I:          09B3 DEFINED AT LINE 1478 IN MAIN.asm
                    > USED AT LINE 722 IN MAIN.asm
COMMAND_P:          09BF DEFINED AT LINE 1487 IN MAIN.asm
                    > USED AT LINE 730 IN MAIN.asm
PARTIAL:            09D1 DEFINED AT LINE 1502 IN MAIN.asm
                    > USED AT LINE 1490 IN MAIN.asm
PRINTBUFFER:        09F1 DEFINED AT LINE 1521 IN MAIN.asm
                    > USED AT LINE 1492 IN MAIN.asm
PRINTCHARS:         0A14 DEFINED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1494 IN MAIN.asm
PRINTCHARS1:        0A1B DEFINED AT LINE 1536 IN MAIN.asm
                    > USED AT LINE 1545 IN MAIN.asm
PRINTCHARS2:        0A21 DEFINED AT LINE 1541 IN MAIN.asm
                    > USED AT LINE 1533 IN MAIN.asm
                    > USED AT LINE 1745 IN MAIN.asm
PRINTSTACK:         0A26 DEFINED AT LINE 1549 IN MAIN.asm
                    > USED AT LINE 1496 IN MAIN.asm
SIZE:               0A28 DEFINED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 732 IN MAIN.asm
COMMAND_V:          0A32 DEFINED AT LINE 1590 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
CONSTBUFSTART:      0A47 DEFINED AT LINE 1605 IN MAIN.asm
                    > USED AT LINE 1599 IN MAIN.asm
CONSTHEAPSTART:     0A4C DEFINED AT LINE 1609 IN MAIN.asm
CONSTTIBSTART:      0A51 DEFINED AT LINE 1613 IN MAIN.asm
                    > USED AT LINE 1601 IN MAIN.asm
VARBUFPTR:          0A56 DEFINED AT LINE 1617 IN MAIN.asm
                    > USED AT LINE 1593 IN MAIN.asm
VARHEAPPTR:         0A5F DEFINED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 1595 IN MAIN.asm
VARTIBPTR:          0A68 DEFINED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1597 IN MAIN.asm
VARIABLE:           0A71 DEFINED AT LINE 1632 IN MAIN.asm
                    > USED AT LINE 294 IN MAIN.asm
                    > USED AT LINE 1620 IN MAIN.asm
                    > USED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 1630 IN MAIN.asm
CONSTANT:           0A74 DEFINED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 1607 IN MAIN.asm
                    > USED AT LINE 1611 IN MAIN.asm
                    > USED AT LINE 1615 IN MAIN.asm
CHARS:              0A77 DEFINED AT LINE 1639 IN MAIN.asm
                    > USED AT LINE 714 IN MAIN.asm
CHARS1:             0A7A DEFINED AT LINE 1641 IN MAIN.asm
                    > USED AT LINE 1686 IN MAIN.asm
DECIMAL:            0A7F DEFINED AT LINE 1645 IN MAIN.asm
                    > USED AT LINE 716 IN MAIN.asm
DECIMAL1:           0A82 DEFINED AT LINE 1647 IN MAIN.asm
                    > USED AT LINE 1652 IN MAIN.asm
HEXADECIMAL:        0A87 DEFINED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 720 IN MAIN.asm
INPUT:              0A8D DEFINED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 1481 IN MAIN.asm
KEY:                0A98 DEFINED AT LINE 1666 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
OUTPUT:             0AA1 DEFINED AT LINE 1675 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
NUMBERS:            0AAA DEFINED AT LINE 1684 IN MAIN.asm
                    > USED AT LINE 726 IN MAIN.asm
FILTER:             0AB0 DEFINED AT LINE 1693 IN MAIN.asm
MAP:                0AB0 DEFINED AT LINE 1694 IN MAIN.asm
ARGS0A1L_:          0AB2 DEFINED AT LINE 1701 IN MAIN.asm
ARGS0A1L:           0AB4 DEFINED AT LINE 1704 IN MAIN.asm
ARGS1A0L_:          0AB5 DEFINED AT LINE 1707 IN MAIN.asm
ARGS1A0L:           0AB7 DEFINED AT LINE 1710 IN MAIN.asm
                    > USED AT LINE 1525 IN MAIN.asm
ARGS1A1L_:          0AB8 DEFINED AT LINE 1713 IN MAIN.asm
ARGS1A1L:           0ABA DEFINED AT LINE 1716 IN MAIN.asm
ARGS2A0L_:          0ABC DEFINED AT LINE 1719 IN MAIN.asm
ARGS2A0L:           0ABE DEFINED AT LINE 1722 IN MAIN.asm
ARGS1A2L_:          0AC0 DEFINED AT LINE 1725 IN MAIN.asm
ARGS1A2L:           0AC2 DEFINED AT LINE 1728 IN MAIN.asm
                    > USED AT LINE 1289 IN MAIN.asm
FLUSHBUFFER:        0AC5 DEFINED AT LINE 1736 IN MAIN.asm
                    > USED AT LINE 1310 IN MAIN.asm
                    > USED AT LINE 1367 IN MAIN.asm
                    > USED AT LINE 1379 IN MAIN.asm
                    > USED AT LINE 1387 IN MAIN.asm
                    > USED AT LINE 1407 IN MAIN.asm
                    > USED AT LINE 1438 IN MAIN.asm
                    > USED AT LINE 1469 IN MAIN.asm
                    > USED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
                    > USED AT LINE 51
                    > USED AT LINE 39
JUMPTABLE:          0ADC DEFINED AT LINE 1755 IN MAIN.asm
                    > USED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 1479 IN MAIN.asm
                    > USED AT LINE 1488 IN MAIN.asm
                    > USED AT LINE 1591 IN MAIN.asm
JUMPTABLE0:         0ADE DEFINED AT LINE 1758 IN MAIN.asm
                    > USED AT LINE 1768 IN MAIN.asm
JUMPTABLE1:         0AEB DEFINED AT LINE 1769 IN MAIN.asm
                    > USED AT LINE 1761 IN MAIN.asm
JUMPTABLE2:         0AEC DEFINED AT LINE 1771 IN MAIN.asm
                    > USED AT LINE 1764 IN MAIN.asm
PRTSTR0:            0AF2 DEFINED AT LINE 1779 IN MAIN.asm
                    > USED AT LINE 1785 IN MAIN.asm
PRTSTR:             0AF6 DEFINED AT LINE 1782 IN MAIN.asm
                    > USED AT LINE 1849 IN MAIN.asm
                    > USED AT LINE 1905 IN MAIN.asm
NESTING:            0AFB DEFINED AT LINE 1798 IN MAIN.asm
                    > USED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 1989 IN MAIN.asm
NESTING0:           0B05 DEFINED AT LINE 1804 IN MAIN.asm
                    > USED AT LINE 1800 IN MAIN.asm
                    > USED AT LINE 1802 IN MAIN.asm
NESTING1A:          0B0C DEFINED AT LINE 1809 IN MAIN.asm
                    > USED AT LINE 1806 IN MAIN.asm
NESTING1:           0B0F DEFINED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 1803 IN MAIN.asm
NESTING2:           0B1E DEFINED AT LINE 1821 IN MAIN.asm
                    > USED AT LINE 1816 IN MAIN.asm
                    > USED AT LINE 1818 IN MAIN.asm
NESTING3:           0B20 DEFINED AT LINE 1824 IN MAIN.asm
                    > USED AT LINE 1820 IN MAIN.asm
NESTING4:           0B2B DEFINED AT LINE 1831 IN MAIN.asm
                    > USED AT LINE 1826 IN MAIN.asm
                    > USED AT LINE 1828 IN MAIN.asm
PROMPT:             0B2D DEFINED AT LINE 1835 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
CRLF:               0B36 DEFINED AT LINE 1840 IN MAIN.asm
                    > USED AT LINE 2002 IN MAIN.asm
PRINTSTR:           0B3D DEFINED AT LINE 1847 IN MAIN.asm
                    > USED AT LINE 1836 IN MAIN.asm
                    > USED AT LINE 1841 IN MAIN.asm
                    > USED AT LINE 2055 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 22
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 144
TITLESTR:           0B44 DEFINED AT LINE 1854 IN MAIN.asm
                    > USED AT LINE 1858 IN MAIN.asm
                    > USED AT LINE 1877 IN MAIN.asm
INIT:               0B58 DEFINED AT LINE 1857 IN MAIN.asm
                    > USED AT LINE 1902 IN MAIN.asm
INIT1:              0B60 DEFINED AT LINE 1861 IN MAIN.asm
                    > USED AT LINE 1867 IN MAIN.asm
WARMBOOT:           0B68 DEFINED AT LINE 1869 IN MAIN.asm
COLDBOOT0:          0B7B DEFINED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 1864 IN MAIN.asm
COLDBOOT:           0B85 DEFINED AT LINE 1882 IN MAIN.asm
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
COLDBOOT1:          0B96 DEFINED AT LINE 1891 IN MAIN.asm
                    > USED AT LINE 1894 IN MAIN.asm
START:              0BA3 DEFINED AT LINE 1900 IN MAIN.asm
START1:             0BA9 DEFINED AT LINE 1903 IN MAIN.asm
                    > USED AT LINE 1874 IN MAIN.asm
INTERPRET:          0BAF DEFINED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 2035 IN MAIN.asm
                    > USED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2063 IN MAIN.asm
                    > USED AT LINE 2066 IN MAIN.asm
                    > USED AT LINE 2071 IN MAIN.asm
INTERPRET2:         0BBE DEFINED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 1980 IN MAIN.asm
                    > USED AT LINE 2053 IN MAIN.asm
                    > USED AT LINE 2057 IN MAIN.asm
INTERPRET3:         0BC6 DEFINED AT LINE 1924 IN MAIN.asm
                    > USED AT LINE 1937 IN MAIN.asm
INTERPRET4:         0BD1 DEFINED AT LINE 1933 IN MAIN.asm
                    > USED AT LINE 1922 IN MAIN.asm
INTERPRET5:         0BD6 DEFINED AT LINE 1940 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
                    > USED AT LINE 2005 IN MAIN.asm
INTERPRET5A:        0BF9 DEFINED AT LINE 1977 IN MAIN.asm
INTERPRET6:         0BFB DEFINED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
INTERPRET7:         0C09 DEFINED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 1949 IN MAIN.asm
INTERPRET8:         0C1C DEFINED AT LINE 2007 IN MAIN.asm
                    > USED AT LINE 1947 IN MAIN.asm
NEXT:               0C37 DEFINED AT LINE 2020 IN MAIN.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 2024 IN MAIN.asm
NEXT1:              0C48 DEFINED AT LINE 2032 IN MAIN.asm
                    > USED AT LINE 2025 IN MAIN.asm
EXIT:               0C4F DEFINED AT LINE 2036 IN MAIN.asm
                    > USED AT LINE 2034 IN MAIN.asm
RUN:                0C53 DEFINED AT LINE 2040 IN MAIN.asm
                    > USED AT LINE 2046 IN MAIN.asm
                    > USED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
ERROR:              0C57 DEFINED AT LINE 2045 IN MAIN.asm
                    > USED AT LINE 1206 IN MAIN.asm
BACKSPACE_:         0C6A DEFINED AT LINE 2050 IN MAIN.asm
                    > USED AT LINE 1954 IN MAIN.asm
EDIT_:              0C7A DEFINED AT LINE 2060 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
REEDIT_:            0C92 DEFINED AT LINE 2065 IN MAIN.asm
                    > USED AT LINE 1956 IN MAIN.asm
PRINTSTACK_:        0C95 DEFINED AT LINE 2068 IN MAIN.asm
                    > USED AT LINE 1958 IN MAIN.asm
TESTSSTART:         0D00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2656S52:  0D70 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2664S52:  0DED DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2665S52:  0E60 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2666S52:  0ED1 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2667S52:  0F42 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2668S52:  0FB3 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2669S52:  1024 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2670S52:  1097 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2671S52:  110C DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2672S52:  117F DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2673S52:  11F2 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2674S52:  1267 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2675S52:  12DE DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2676S52:  1353 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2677S52:  13C8 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2678S52:  1443 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2679S52:  14BE DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2680S52:  1537 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2681S52:  15B4 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2682S52:  1635 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2683S52:  16B4 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2684S52:  172D DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2685S52:  17AE DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2686S52:  182B DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2687S52:  18A4 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2688S52:  191D DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2689S52:  199E DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2690S52:  1A17 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2691S52:  1A90 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2692S52:  1B0B DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2693S52:  1B96 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2694S52:  1C0F DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2695S52:  1C90 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2696S52:  1D09 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2697S52:  1D86 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2698S52:  1DFF DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2699S52:  1E7A DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2700S52:  1EF5 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2701S52:  1F6E DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2702S52:  1FE7 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2703S52:  2060 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2704S52:  20D9 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2705S52:  2152 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2706S52:  21CB DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2707S52:  2244 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2708S52:  22BD DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2709S52:  2338 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2710S52:  23B3 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2711S52:  242E DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2712S52:  24AB DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2713S52:  2528 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2714S52:  259F DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2715S52:  2616 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2716S52:  2693 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2717S52:  2716 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2718S52:  2799 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2719S52:  2820 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2720S52:  28B1 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2721S52:  2942 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2722S52:  29BB DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2723S52:  2A36 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2724S52:  2AB3 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2725S52:  2B32 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2726S52:  2BAF DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2727S52:  2C2A DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2728S52:  2CA7 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2729S52:  2D2A DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2730S52:  2DB1 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2731S52:  2E34 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2732S52:  2EC1 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2733S52:  2F50 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2734S52:  2FE5 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2735S52:  307E DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2736S52:  3109 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2737S52:  319A DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2738S52:  322D DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2739S52:  32C2 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2740S52:  3355 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2741S52:  33F6 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2742S52:  3485 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2743S52:  3520 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2744S52:  35BD DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2745S52:  365C DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2746S52:  3707 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2747S52:  37B2 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2748S52:  383B DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2749S52:  38CA DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2750S52:  3953 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2751S52:  39E8 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2752S52:  3A7D DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2753S52:  3B22 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2754S52:  3BCF DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2755S52:  3C7C DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2756S52:  3D11 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2757S52:  3DB2 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2758S52:  3E4F DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2759S52:  3EF2 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2760S52:  3FAB DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2761S52:  4068 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2762S52:  40ED DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2763S52:  4172 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2764S52:  41F7 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2765S52:  427C DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2766S52:  42F9 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2767S52:  4376 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2768S52:  43F3 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2769S52:  4470 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2770S52:  44FB DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2771S52:  4588 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2772S52:  4605 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2773S52:  4692 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2774S52:  4737 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2775S52:  47B8 DEFINED AT LINE 42
                    > USED AT LINE 10
EXPECTM_0_2776S52:  4849 DEFINED AT LINE 42
                    > USED AT LINE 10
EXECSTR:            4854 DEFINED AT LINE 156
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
                    > USED AT LINE 49
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              4A00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 1897 IN MAIN.asm
                    > USED AT LINE 1901 IN MAIN.asm
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
TIB:                4A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 59 IN MAIN.asm
                    > USED AT LINE 1614 IN MAIN.asm
                    > USED AT LINE 1913 IN MAIN.asm
                    > USED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 2012 IN MAIN.asm
BUF:                4B00 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 60 IN MAIN.asm
                    > USED AT LINE 1606 IN MAIN.asm
                    > USED AT LINE 1741 IN MAIN.asm
VARS:               4C00 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1888 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
RESTARTS:           4CD0 DEFINED AT LINE 18 IN ram.asm
RST08:              4CD0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              4CD2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              4CD4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              4CD6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              4CD8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              4CDA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               4CDC DEFINED AT LINE 26 IN ram.asm
INTVEC:             4CDE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             4CE0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            4CE2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            4CE4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            4CE6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1884 IN MAIN.asm
VDATAWIDTH:         4CE6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 426 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 491 IN MAIN.asm
                    > USED AT LINE 1642 IN MAIN.asm
VNUMBASE:           4CE8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1295 IN MAIN.asm
                    > USED AT LINE 1648 IN MAIN.asm
VTIBPTR:            4CEA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1628 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1914 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
VBUFPTR:            4CEC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1302 IN MAIN.asm
                    > USED AT LINE 1311 IN MAIN.asm
                    > USED AT LINE 1312 IN MAIN.asm
                    > USED AT LINE 1375 IN MAIN.asm
                    > USED AT LINE 1388 IN MAIN.asm
                    > USED AT LINE 1433 IN MAIN.asm
                    > USED AT LINE 1444 IN MAIN.asm
                    > USED AT LINE 1445 IN MAIN.asm
                    > USED AT LINE 1462 IN MAIN.asm
                    > USED AT LINE 1475 IN MAIN.asm
                    > USED AT LINE 1618 IN MAIN.asm
                    > USED AT LINE 1619 IN MAIN.asm
                    > USED AT LINE 1740 IN MAIN.asm
                    > USED AT LINE 1742 IN MAIN.asm
VNEXT:              4CEE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 1896 IN MAIN.asm
VHEAPPTR:           4CF0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 410 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
                    > USED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1102 IN MAIN.asm
                    > USED AT LINE 1104 IN MAIN.asm
                    > USED AT LINE 1147 IN MAIN.asm
                    > USED AT LINE 1167 IN MAIN.asm
                    > USED AT LINE 1504 IN MAIN.asm
                    > USED AT LINE 1509 IN MAIN.asm
                    > USED AT LINE 1510 IN MAIN.asm
                    > USED AT LINE 1623 IN MAIN.asm
                    > USED AT LINE 1624 IN MAIN.asm
VPOINTER:           4CF2 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 293 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
                    > USED AT LINE 471 IN MAIN.asm
                    > USED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 981 IN MAIN.asm
                    > USED AT LINE 1633 IN MAIN.asm
VREMAIN:            4CF4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 1075 IN MAIN.asm
VSAVEDIP:           4CF6 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 1870 IN MAIN.asm
                    > USED AT LINE 2014 IN MAIN.asm
VSAVEDSP:           4CF8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1871 IN MAIN.asm
                    > USED AT LINE 2015 IN MAIN.asm
VSAVEDNEXT:         4CFA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 1872 IN MAIN.asm
                    > USED AT LINE 2016 IN MAIN.asm
VSAVEDBP:           4CFC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 1873 IN MAIN.asm
                    > USED AT LINE 2017 IN MAIN.asm
VCHECKSUM:          4CFE DEFINED AT LINE 52 IN ram.asm
VTEMP1:             4D00 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 403 IN MAIN.asm
                    > USED AT LINE 455 IN MAIN.asm
                    > USED AT LINE 603 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
                    > USED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 665 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 878 IN MAIN.asm
                    > USED AT LINE 903 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
                    > USED AT LINE 916 IN MAIN.asm
                    > USED AT LINE 1505 IN MAIN.asm
                    > USED AT LINE 1508 IN MAIN.asm
VTEMP2:             4D02 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 624 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
                    > USED AT LINE 879 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
VLASTDEF:           4D04 DEFINED AT LINE 58 IN ram.asm
VHASHSTR:           4D06 DEFINED AT LINE 59 IN ram.asm
TBPTR:              4D08 DEFINED AT LINE 60 IN ram.asm
WARMBUF:            4D0A DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 1859 IN MAIN.asm
                    > USED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 1904 IN MAIN.asm
HEAP:               4D1E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 1610 IN MAIN.asm
