0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; call prtdec
0000                             ; push hl
0000                             ; call prtdec
0000                             ; pop hl
0000                             ; call printStr
0000                             ; .cstr " (#"
0000                             ; call prthex
0000                             ; call printStr
0000                             ; .cstr ")\r\n"
0000                .macro EXPECT,msg1,val1
0000                             ; 
0000                 pop HL
0000                 push HL
0000                 ld DE,val1
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",msg1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,val1
0000                 push hl
0000                 call run
0000                 .cstr "."
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ". `(#`.s .h `)\r\n`.s"
0000                 halt
0000                 .cstr
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                .macro TEST,code1,val1
0000                             ; 
0000                 ld SP,STACK
0000                 call init
0000                 call execStr
0000                 .cstr code1
0000                 expect code1,val1
0000                .endm
0000                 
0000                .macro KALL,label1
0000                             ; 
0000                 db msb(label1 / 2) + $80
0000                 db lsb(label1 / 2)
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 48               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 48               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 48               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 48               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 48               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 48               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 48               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 48               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 48               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 48               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 47               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 48               LD   (RST08),HL   
0094   22 D2 48               LD   (RST10),HL   
0097   22 D4 48               LD   (RST18),HL   
009A   22 D6 48               LD   (RST20),HL   
009D   22 D8 48               LD   (RST28),HL   
00A0   22 DA 48               LD   (RST30),HL   
00A3   22 DE 48               LD   (INTVEC),HL   
00A6   22 E0 48               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 48               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 48               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   31 80 47               LD   SP,STACK   
00C6   CD C5 0B               CALL   init   
00C9   C3 00 0D               JP   testsStart   
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                STKSIZE:   EQU   $80   ; Stack size
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                BUFSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                NUL:      EQU   0   ; exit code
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                CTRL_C:   EQU   3   
00CC                CTRL_E:   EQU   5   
00CC                CTRL_H:   EQU   8   
00CC                CTRL_J:   EQU   10   
00CC                CTRL_L:   EQU   12   
00CC                CTRL_P:   EQU   16   
00CC                CTRL_S:   EQU   19   
00CC                ESC:      EQU   27   
00CC                TMAGIC:   EQU   $AA   ; magic number
00CC                TRESERV:   EQU   $A0   ; reserved
00CC                TNUMBER:   EQU   $A1   ; number
00CC                TSTRING:   EQU   $A2   ; string
00CC                TPOINTER:   EQU   $A3   ; pointer
00CC                TARRAY:   EQU   $A4   ; array
00CC                TBLOCK:   EQU   $A5   ; block
00CC                TLAMBDA:   EQU   $A6   ; lambda
00CC                TARGLST:   EQU   $A7   ; arglist
00CC                             ; z80_RST8    equ     $CF
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 4A                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 4B                  DW   BUF   ; vBUFPtr pointer into BUF
0188   69 0C                  DW   next   ; nNext
018A   00 4D                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C                          ALIGN   $100   
0200                OPCODES:      ; still available ~ `
0200   82                     DB   lsb(nop_)   ; SP
0201   39                     DB   lsb(bang_)   ; !
0202   4D                     DB   lsb(dblquote_)   ; "
0203   41                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1E                     DB   lsb(tick_)   ; '
0208   18                     DB   lsb(lparen_)   ; (
0209   84                     DB   lsb(rparen_)   ; )
020A   36                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   4A                     DB   lsb(comma_)   ; ,
020D   50                     DB   lsb(minus_)   ; -
020E   24                     DB   lsb(dot_)   ; .
020F   7F                     DB   lsb(slash_)   ; /	
0210   3E                     DB   lsb(num_)   ; 0
0211   3E                     DB   lsb(num_)   ; 1
0212   3E                     DB   lsb(num_)   ; 2
0213   3E                     DB   lsb(num_)   ; 3
0214   3E                     DB   lsb(num_)   ; 4
0215   3E                     DB   lsb(num_)   ; 5
0216   3E                     DB   lsb(num_)   ; 6
0217   3E                     DB   lsb(num_)   ; 7
0218   3E                     DB   lsb(num_)   ; 8
0219   3E                     DB   lsb(num_)   ; 9
021A   2A                     DB   lsb(colon_)   ; :
021B   21                     DB   lsb(semicolon_)   ; ;
021C   6D                     DB   lsb(lt_)   ; <
021D   53                     DB   lsb(eq_)   ; =
021E   62                     DB   lsb(gt_)   ; >
021F   33                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   2D                     DB   lsb(upcase_)   ; A
0222   2D                     DB   lsb(upcase_)   ; B
0223   2D                     DB   lsb(upcase_)   ; C
0224   2D                     DB   lsb(upcase_)   ; D
0225   2D                     DB   lsb(upcase_)   ; E
0226   2D                     DB   lsb(upcase_)   ; F
0227   2D                     DB   lsb(upcase_)   ; G
0228   2D                     DB   lsb(upcase_)   ; h
0229   2D                     DB   lsb(upcase_)   ; I
022A   2D                     DB   lsb(upcase_)   ; J
022B   2D                     DB   lsb(upcase_)   ; K
022C   2D                     DB   lsb(upcase_)   ; L
022D   2D                     DB   lsb(upcase_)   ; M
022E   2D                     DB   lsb(upcase_)   ; N
022F   2D                     DB   lsb(upcase_)   ; O
0230   2D                     DB   lsb(upcase_)   ; p
0231   2D                     DB   lsb(upcase_)   ; Q
0232   2D                     DB   lsb(upcase_)   ; R
0233   2D                     DB   lsb(upcase_)   ; S
0234   2D                     DB   lsb(upcase_)   ; T
0235   2D                     DB   lsb(upcase_)   ; U
0236   2D                     DB   lsb(upcase_)   ; V
0237   2D                     DB   lsb(upcase_)   ; W
0238   2D                     DB   lsb(upcase_)   ; X
0239   2D                     DB   lsb(upcase_)   ; Y
023A   2D                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   15                     DB   lsb(backslash_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   47                     DB   lsb(caret_)   ; ^
023F   27                     DB   lsb(underscore_)   ; _
0240   4D                     DB   lsb(dblquote_)   ; `     used for testing string   	
0241   30                     DB   lsb(lowcase_)   ; a
0242   30                     DB   lsb(lowcase_)   ; b
0243   30                     DB   lsb(lowcase_)   ; c
0244   30                     DB   lsb(lowcase_)   ; d
0245   30                     DB   lsb(lowcase_)   ; e
0246   30                     DB   lsb(lowcase_)   ; f
0247   30                     DB   lsb(lowcase_)   ; g
0248   30                     DB   lsb(lowcase_)   ; h
0249   30                     DB   lsb(lowcase_)   ; i
024A   30                     DB   lsb(lowcase_)   ; j
024B   30                     DB   lsb(lowcase_)   ; k
024C   30                     DB   lsb(lowcase_)   ; l
024D   30                     DB   lsb(lowcase_)   ; m
024E   30                     DB   lsb(lowcase_)   ; n
024F   30                     DB   lsb(lowcase_)   ; o
0250   30                     DB   lsb(lowcase_)   ; p
0251   30                     DB   lsb(lowcase_)   ; q
0252   30                     DB   lsb(lowcase_)   ; r
0253   30                     DB   lsb(lowcase_)   ; s
0254   30                     DB   lsb(lowcase_)   ; t
0255   30                     DB   lsb(lowcase_)   ; u
0256   30                     DB   lsb(lowcase_)   ; v
0257   30                     DB   lsb(lowcase_)   ; w
0258   30                     DB   lsb(lowcase_)   ; x
0259   30                     DB   lsb(lowcase_)   ; y
025A   30                     DB   lsb(lowcase_)   ; z
025B   18                     DB   lsb(lbrace_)   ; {
025C   44                     DB   lsb(pipe_)   ; |
025D   1B                     DB   lsb(rbrace_)   ; }
025E   82                     DB   lsb(nop_)   ; ~
025F   82                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 87 03               JP   plus   
0303                AT_:         
0303   C3 99 03               JP   at   
0306                AMPER_:      
0306   C3 A3 03               JP   amper   
0309                DOLLAR_:      
0309   C3 C7 03               JP   dollar   
030C                LBRACK_:      
030C   C3 FE 03               JP   lbrack   
030F                RBRACK_:      
030F   C3 1A 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 72 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 AC 05               JP   backslash   
0318                LPAREN_:      
0318                LBRACE_:      
0318   C3 D2 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 3B 05               JP   rbrace   
031E                TICK_:       
031E   C3 97 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 01 08               JP   semicolon   
0324                DOT_:        
0324   C3 04 06               JP   dot   
0327                UNDERSCORE_:      
0327   C3 F3 07               JP   underscore   
032A                COLON_:      
032A   C3 9B 04               JP   colon   
032D                UPCASE_:      
032D   C3 77 07               JP   upcase   
0330                LOWCASE_:      
0330   C3 7C 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 8E 07               JP   question   
0336                STAR_:       
0336   C3 A7 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 C3 07               JP   num   
0341                HASH_:       
0341   C3 5A 07               JP   hash   
0344                PIPE_:       
0344   C3 AE 03               JP   pipe   
0347                CARET_:      
0347   C3 B4 06               JP   caret   
034A                COMMA_:      
034A   C3 AE 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 40 08               JP   dblquote   
0350                MINUS_:      
0350   C3 68 08               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 8A 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 93 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA 2D 08               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 09                  JR   lt1   
036D                LT_:         
036D   03                     INC   bc   
036E   0A                     LD   a,(bc)   
036F   FE 3C                  CP   "<"   
0371   CA 1D 08               JP   z,shiftLeft   
0374   E1                     POP   hl   
0375   D1                     POP   de   
0376                LT1:         
0376   FE 3D                  CP   "="   
0378   CA 9B 06               JP   z,lessthaneq   
037B   0B                     DEC   bc   
037C   C3 A0 06               JP   lessthan   
037F                SLASH_:      
037F   C3 BD 05               JP   slash   
0382                NOP_:        
0382   DD E9                  JP   (ix)   
0384                RPAREN_:      
0384   C3 F9 07               JP   rparen   
0387                             ;*******************************************************************
0387                             ; implementations
0387                             ;*******************************************************************
0387                PLUS:        
0387                ADD:         
0387   03                     INC   bc   
0388   0A                     LD   a,(bc)   
0389   FE 2B                  CP   "+"   ; ++ increment variable
038B   20 05                  JR   nz,add1   
038D   E1                     POP   hl   
038E   23                     INC   hl   
038F   C3 8C 04               JP   assign0   
0392                ADD1:        
0392   0B                     DEC   bc   
0393   D1                     POP   de   ; second term
0394   E1                     POP   hl   ; first term
0395   19                     ADD   hl,de   
0396                ADD3:        
0396   E5                     PUSH   hl   
0397   DD E9                  JP   (ix)   
0399                             ; @ addr
0399                             ; -- ptr
0399                AT:          
0399                ADDR:        
0399   ED 5B F2 48            LD   de,(vPointer)   
039D   21 F2 48               LD   hl,vPointer   
03A0   C3 D5 0A               JP   variable   
03A3                AMPER:       
03A3                AND:         
03A3   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A4   E1                     POP   hl   
03A5   7B                     LD   a,e   
03A6   A5                     AND   l   
03A7   6F                     LD   l,a   
03A8   7A                     LD   a,d   
03A9   A4                     AND   h   
03AA                AND1:        
03AA   67                     LD   h,a   
03AB   E5                     PUSH   hl   
03AC   DD E9                  JP   (ix)   
03AE                PIPE:        
03AE                OR:          
03AE   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03AF   E1                     POP   hl   
03B0   7B                     LD   a,e   
03B1   B5                     OR   l   
03B2   6F                     LD   l,a   
03B3   7A                     LD   a,d   
03B4   B4                     OR   h   
03B5   18 F3                  JR   and1   
03B7                XOR:         
03B7   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03B8                XOR1:        
03B8   E1                     POP   hl   
03B9   7B                     LD   a,e   
03BA   AD                     XOR   l   
03BB   6F                     LD   l,a   
03BC   7A                     LD   a,d   
03BD   AC                     XOR   h   
03BE   67                     LD   h,a   
03BF   E5                     PUSH   hl   
03C0   DD E9                  JP   (ix)   
03C2                INVERT:      ; Bitwise INVert the top member of the stack
03C2   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C5   18 F1                  JR   xor1   
03C7                             ; $a .. $z
03C7                             ; -- value
03C7                             ; returns value of arg
03C7                DOLLAR:      
03C7                ARG:         
03C7   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03CA   FD 56 05               LD   d,(iy+5)   
03CD   EB                     EX   de,hl   
03CE   7D                     LD   a,l   ; arg_list* == null, skip
03CF   B4                     OR   h   
03D0   28 1C                  JR   z,arg0a   
03D2   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D3   2B                     DEC   hl   
03D4   7E                     LD   a,(hl)   
03D5   23                     INC   hl   
03D6   23                     INC   hl   
03D7   B7                     OR   a   
03D8   28 14                  JR   z,arg0a   ; num_args == 0, skip
03DA   5F                     LD   e,a   ; e = a = num_args
03DB   03                     INC   bc   ; a = next char = dollar_name
03DC   0A                     LD   a,(bc)   
03DD   C5                     PUSH   bc   ; save IP
03DE   43                     LD   b,e   ; b = e = num_args
03DF   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E2   FD 56 03               LD   d,(iy+3)   
03E5                ARG0:        
03E5   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E6   1B                     DEC   de   
03E7   BE                     CP   (hl)   
03E8   28 09                  JR   z,arg1   
03EA   23                     INC   hl   ; hl = next arg_list*
03EB   10 F8                  DJNZ   arg0   
03ED   C1                     POP   bc   ; no match, restore IP
03EE                ARG0A:       
03EE   11 00 00               LD   de,0   ; return 0
03F1   18 08                  JR   arg1a   
03F3                ARG1:        
03F3   C1                     POP   bc   ; restore IP
03F4   EB                     EX   de,hl   ; hl = arg*
03F5   22 F2 48               LD   (vPointer),hl   ; store arg* in setter
03F8   5E                     LD   e,(hl)   
03F9   23                     INC   hl   
03FA   56                     LD   d,(hl)   ; de = arg
03FB                ARG1A:       
03FB   D5                     PUSH   de   ; push arg
03FC   DD E9                  JP   (ix)   
03FE                LBRACK:      
03FE                ARRAYSTART:      
03FE   11 00 00               LD   de,0   ; create stack frame
0401   D5                     PUSH   de   ; push null for IP
0402   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0405   FD 56 05               LD   d,(iy+5)   ; 
0408   D5                     PUSH   de   ; 
0409   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
040C   FD 56 03               LD   d,(iy+3)   ; 
040F   D5                     PUSH   de   ; 
0410   FD E5                  PUSH   iy   ; push BP
0412   FD 21 00 00            LD   iy,0   ; BP = SP
0416   FD 39                  ADD   iy,sp   
0418   DD E9                  JP   (ix)   
041A                RBRACK:      
041A                ARRAYEND:      
041A   FD 54                  LD   d,iyh   ; de = BP
041C   FD 5D                  LD   e,iyl   
041E   ED 43 FE 48            LD   (vTemp1),bc   ; save IP
0422   62 6B                  LD   hl,de   ; hl = de = BP
0424   B7                     OR   a   
0425   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0427   CB 3C                  SRL   h   ; 
0429   CB 1D                  RR   l   
042B   44 4D                  LD   bc,hl   ; bc = count
042D   2A F0 48               LD   hl,(vHeapPtr)   ; hl = array[-4]
0430   71                     LD   (hl),c   ; write num items in length word
0431   23                     INC   hl   
0432   70                     LD   (hl),b   
0433   23                     INC   hl   ; hl = array[0], bc = count
0434                             ; de = BP, hl = array[0], bc = count
0434   3E A4                  LD   a,TARRAY   ; write type tag
0436   77                     LD   (hl),a   
0437   23                     INC   hl   
0438   3E AA                  LD   a,TMAGIC   ; write magic byte
043A   77                     LD   (hl),a   
043B   23                     INC   hl   
043C                ARRAYEND1:      
043C   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
043F   77                     LD   (hl),a   ; write lsb of array item
0440   23                     INC   hl   ; move to msb of array item
0441   3A E6 48               LD   a,(vDataWidth)   ; vDataWidth=1?
0444   3D                     DEC   a   
0445   28 05                  JR   z,arrayEnd2   
0447   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
044A   77                     LD   (hl),a   ; write msb of array item
044B   23                     INC   hl   ; move to next word in array
044C                ARRAYEND2:      
044C   FD 2B                  DEC   iy   ; move to next word on stack
044E   FD 2B                  DEC   iy   
0450   0B                     DEC   bc   ; dec items count
0451   79                     LD   a,c   ; if not zero loop
0452   B0                     OR   b   
0453   20 E7                  JR   nz,arrayEnd1   
0455   EB                     EX   de,hl   ; de = end of array, hl = BP
0456   F9                     LD   sp,hl   ; sp = BP
0457   E1                     POP   hl   ; de = end of array, hl = old BP
0458   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0459   FD 62                  LD   iyh,d   
045B   FD 6B                  LD   iyl,e   
045D   D1                     POP   de   ; pop arg_list (discard)
045E   D1                     POP   de   ; pop first_arg* (discard)
045F   D1                     POP   de   ; pop IP (discard)
0460   ED 5B F0 48            LD   de,(vHeapPtr)   ; de = array[-4]
0464   13                     INC   de   ; de = array[0]
0465   13                     INC   de   
0466   13                     INC   de   
0467   13                     INC   de   
0468   D5                     PUSH   de   ; return array[0]
0469   22 F0 48               LD   (vHeapPtr),hl   ; move heap* to end of array
046C   ED 4B FE 48            LD   bc,(vTemp1)   ; restore IP
0470   DD E9                  JP   (ix)   
0472                             ; index of an array, based on vDataWidth
0472                             ; array num -- value    ; also sets vPointer to address
0472                ARRINDEX:      
0472   E1                     POP   hl   ; hl = index
0473   D1                     POP   de   ; de = array
0474   3A E6 48               LD   a,(vDataWidth)   ; a = data width
0477   3D                     DEC   a   
0478   28 01                  JR   z,arrIndex1   
047A                ARRINDEX0:      
047A   29                     ADD   hl,hl   ; if data width = 2 then double
047B                ARRINDEX1:      
047B   19                     ADD   hl,de   ; add addr
047C   22 F2 48               LD   (vPointer),hl   ; store address in setter
047F   16 00                  LD   d,0   
0481   5E                     LD   e,(hl)   
0482   B7                     OR   a   ; check data width again
0483   28 02                  JR   z,arrIndex2   
0485   23                     INC   hl   
0486   56                     LD   d,(hl)   
0487                ARRINDEX2:      
0487   D5                     PUSH   de   
0488   DD E9                  JP   (ix)   
048A                             ; value _oldValue --            ; uses address in vPointer
048A                ASSIGN:      
048A   E1                     POP   hl   ; discard last accessed value
048B   E1                     POP   hl   ; hl = new value
048C                ASSIGN0:      
048C   EB                     EX   de,hl   ; de = new value
048D                ASSIGNX:      
048D   2A F2 48               LD   hl,(vPointer)   
0490   73                     LD   (hl),e   
0491   3A E6 48               LD   a,(vDataWidth)   
0494   3D                     DEC   a   ; is it byte?
0495   28 02                  JR   z,assign1   
0497   23                     INC   hl   
0498   72                     LD   (hl),d   
0499                ASSIGN1:      
0499   DD E9                  JP   (ix)   
049B                             ; arg_list - parses input (ab:c)
049B                             ; names after the : represent uninitialised locals
049B                             ; return values are the state of the stack after the block ends
049B                COLON:       
049B                ARGLIST:      
049B   11 00 00               LD   de,0   ; d = count locals, e = count args ()
049E   2A F0 48               LD   hl,(vHeapPtr)   ; hl = heap*
04A1   23                     INC   hl   ; skip length field to start
04A2   23                     INC   hl   
04A3   E5                     PUSH   hl   ; save start of arg_list
04A4   03                     INC   bc   ; point to next char
04A5                ARGLIST1:      
04A5   0A                     LD   a,(bc)   
04A6   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A8   20 03                  JR   nz,arglist1a   
04AA   14                     INC   d   ; non zero value local count acts as flag
04AB   18 10                  JR   arglist3   
04AD                ARGLIST1A:      
04AD   FE 41                  CP   "A"   ; < "A" terminates arg_list
04AF   38 0F                  JR   c,arglist4   
04B1   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B3   30 0B                  JR   nc,arglist4   
04B5                ARGLIST2:      
04B5   77                     LD   (hl),a   
04B6   23                     INC   hl   
04B7   1C                     INC   e   ; increase arg count
04B8   AF                     XOR   a   
04B9   B2                     OR   d   
04BA   28 01                  JR   z,arglist3   
04BC   14                     INC   d   ; if d > 0 increase local count
04BD                ARGLIST3:      
04BD   03                     INC   bc   ; point to next char
04BE   18 E5                  JR   arglist1   
04C0                ARGLIST4:      
04C0   0B                     DEC   bc   
04C1   AF                     XOR   a   
04C2   B2                     OR   d   
04C3   28 01                  JR   z,arglist5   
04C5   15                     DEC   d   ; remove initial inc
04C6                ARGLIST5:      
04C6   23                     INC   hl   
04C7   22 F0 48               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04CA   E1                     POP   hl   ; hl = start of arg_list
04CB   E5                     PUSH   hl   ; return start of arg_list
04CC   2B                     DEC   hl   ; write number of locals at start - 1
04CD   72                     LD   (hl),d   
04CE   2B                     DEC   hl   ; write number of args + locals at start - 2
04CF   73                     LD   (hl),e   
04D0   DD E9                  JP   (ix)   
04D2                LBRACE:      
04D2                BLOCKSTART:      
04D2   C5                     PUSH   bc   ; return pointer to first { of block
04D3   03                     INC   bc   
04D4   16 01                  LD   d,1   ; nesting: count first parenthesis
04D6                BLOCKSTART1:      ; Skip to end of definition
04D6   0A                     LD   a,(bc)   ; Get the next character
04D7   03                     INC   bc   ; Point to next character
04D8   FE 21                  CP   " " + 1   ; ignore whitespace
04DA   38 FA                  JR   c,blockStart1   
04DC   FE 29                  CP   ")"   
04DE   28 2D                  JR   z,blockStart4   
04E0   FE 7D                  CP   "}"   
04E2   28 29                  JR   z,blockStart4   
04E4   FE 5D                  CP   "]"   
04E6   28 25                  JR   z,blockStart4   
04E8   FE 28                  CP   "("   
04EA   28 16                  JR   z,blockStart2   
04EC   FE 7B                  CP   "{"   
04EE   28 12                  JR   z,blockStart2   
04F0   FE 5B                  CP   "["   
04F2   28 0E                  JR   z,blockStart2   
04F4   FE 27                  CP   "'"   
04F6   28 0D                  JR   z,blockStart3   
04F8   FE 60                  CP   "`"   
04FA   28 09                  JR   z,blockStart3   
04FC   FE 22                  CP   DQUOTE   
04FE   28 05                  JR   z,blockStart3   
0500   18 D4                  JR   blockStart1   
0502                BLOCKSTART2:      
0502   14                     INC   d   
0503   18 D1                  JR   blockStart1   
0505                BLOCKSTART3:      
0505   3E 80                  LD   a,$80   
0507   AA                     XOR   d   
0508   47                     LD   b,a   
0509   20 CB                  JR   nz,blockStart1   
050B   18 03                  JR   blockStart5   
050D                BLOCKSTART4:      
050D   15                     DEC   d   
050E   20 C6                  JR   nz,blockStart1   ; get the next element
0510                BLOCKSTART5:      
0510   60 69                  LD   hl,bc   ; hl = IP
0512   11 00 4D               LD   de,HEAP   ; is IP pointing to object in heap
0515   B7                     OR   a   ; IP - HEAP
0516   ED 52                  SBC   hl,de   
0518   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
051A   28 1C                  JR   z,blockStart6   
051C   60 69                  LD   hl,bc   ; hl = IP
051E   D1                     POP   de   ; de = block*
051F   ED 43 FE 48            LD   (vTemp1),bc   ; save IP
0523   B7                     OR   a   ; bc = size
0524   ED 52                  SBC   hl,de   
0526   44 4D                  LD   bc,hl   
0528   EB                     EX   de,hl   ; hl = block* de = heap*
0529   ED 5B F0 48            LD   de,(vHeapPtr)   
052D   D5                     PUSH   de   ; return hblock*
052E   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0530   ED 53 F0 48            LD   (vHeapPtr),de   ; heap* += size
0534   ED 4B FE 48            LD   bc,(vTemp1)   ; restore IP
0538                BLOCKSTART6:      
0538   0B                     DEC   bc   ; balanced, exit
0539   DD E9                  JP   (ix)   
053B                RBRACE:      
053B                BLOCKEND:      
053B   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
053E   FD 56 01               LD   d,(iy+1)   
0541   ED 53 FE 48            LD   (vTemp1),de   
0545   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0548   FD 56 07               LD   d,(iy+7)   
054B   ED 53 00 49            LD   (vTemp2),de   
054F   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0552   FD 56 03               LD   d,(iy+3)   
0555   EB                     EX   de,hl   
0556   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0559   FD 56 01               LD   d,(iy+1)   
055C   13                     INC   de   ; for carry flag <=
055D   B7                     OR   a   
055E   ED 52                  SBC   hl,de   
0560   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0562   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0564   FD 5D                  LD   e,iyl   
0566   21 08 00               LD   hl,8   
0569   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
056A   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
056B   18 0C                  JR   blockEnd2   
056D                BLOCKEND1:      ; same scope
056D   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0570   FD 56 03               LD   d,(iy+3)   
0573   EB                     EX   de,hl   
0574   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0576   FD 5D                  LD   e,iyl   
0578   EB                     EX   de,hl   
0579                BLOCKEND2:      
0579   44 4D                  LD   bc,hl   ; bc = hl = BP
057B   B7                     OR   a   ; hl = BP - SP = count
057C   ED 72                  SBC   hl,sp   
057E   7D                     LD   a,l   
057F   B4                     OR   h   
0580   28 09                  JR   z,blockEnd3   
0582   C5                     PUSH   bc   ; bc = count, hl = BP
0583   44 4D                  LD   bc,hl   
0585   E1                     POP   hl   
0586   2B                     DEC   hl   ; hl = BP-1
0587   1B                     DEC   de   ; de = args*-1
0588   ED B8                  LDDR      
058A   13                     INC   de   
058B                BLOCKEND3:      
058B   EB                     EX   de,hl   ; sp = de = new tos*
058C   F9                     LD   sp,hl   
058D   ED 4B 00 49            LD   bc,(vTemp2)   
0591   FD 2A FE 48            LD   iy,(vTemp1)   
0595   DD E9                  JP   (ix)   
0597                TICK:        
0597                CHAR:        
0597   21 00 00               LD   hl,0   ; if "" is empty or null
059A                CHAR1:       
059A   03                     INC   bc   ; point to next char
059B   0A                     LD   a,(bc)   
059C   FE 27                  CP   "'"   ; ' is the terminator
059E   28 09                  JR   z,char3   
05A0   FE 5C                  CP   $5c   ; \ is the escape
05A2   20 02                  JR   nz,char2   
05A4   03                     INC   bc   
05A5   0A                     LD   a,(bc)   
05A6                CHAR2:       
05A6   6F                     LD   l,a   
05A7   18 F1                  JR   char1   
05A9                CHAR3:       
05A9   E5                     PUSH   hl   
05AA   DD E9                  JP   (ix)   
05AC                BACKSLASH:      
05AC   DD E9                  JP   (ix)   
05AE                             ; , discard stack item
05AE                             ; x y -- x
05AE                COMMA:       
05AE                DISCARD:      
05AE   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05B0   FD 5D                  LD   e,iyl   
05B2   EB                     EX   de,hl   
05B3   B7                     OR   a   
05B4   ED 72                  SBC   hl,sp   
05B6   CB 7C                  BIT   7,h   
05B8   20 01                  JR   nz,discard1   
05BA   E1                     POP   hl   
05BB                DISCARD1:      
05BB   DD E9                  JP   (ix)   
05BD                SLASH:       
05BD   CD 5D 0B               CALL   jumpTable   
05C0   2F                     DB   "/"   
05C1   8E 08                  DW   comment   
05C3   61                     DB   "a"   
05C4   97 08                  DW   command_a   
05C6   62                     DB   "b"   
05C7   D1 08                  DW   command_b   
05C9   63                     DB   "c"   
05CA   DB 0A                  DW   chars   
05CC   64                     DB   "d"   
05CD   E3 0A                  DW   decimal   
05CF   66                     DB   "f"   
05D0   AE 06                  DW   false1   
05D2   68                     DB   "h"   
05D3   EB 0A                  DW   hexadecimal   
05D5   69                     DB   "i"   
05D6   0F 0A                  DW   command_i   
05D8   6B                     DB   "k"   
05D9   FC 0A                  DW   key   
05DB   6E                     DB   "n"   
05DC   0E 0B                  DW   numbers   
05DE   6F                     DB   "o"   
05DF   05 0B                  DW   output   
05E1   70                     DB   "p"   
05E2   1B 0A                  DW   command_p   
05E4   73                     DB   "s"   
05E5   61 0A                  DW   size   
05E7   74                     DB   "t"   
05E8   A8 06                  DW   true1   
05EA   76                     DB   "v"   
05EB   96 0A                  DW   command_v   
05ED   78                     DB   "x"   
05EE   B7 03                  DW   xor   
05F0   00                     DB   NUL   
05F1   F3 05                  DW   div   
05F3                DIV:         
05F3   D1                     POP   de   
05F4   E1                     POP   hl   
05F5   C5                     PUSH   bc   ; preserve the IP
05F6   44 4D                  LD   bc,hl   
05F8   CD 7A 06               CALL   divide   
05FB   EB                     EX   de,hl   
05FC   ED 53 F4 48            LD   (vRemain),de   
0600   C1                     POP   bc   
0601   C3 96 03               JP   add3   
0604                DOT:         
0604   CD 5D 0B               CALL   jumpTable   
0607   61                     DB   "a"   
0608   16 06                  DW   dotArray   
060A   68                     DB   "h"   
060B   2A 06                  DW   dotHex   
060D   73                     DB   "s"   
060E   3E 06                  DW   dotStr   
0610   63                     DB   "c"   
0611   52 06                  DW   dotChar   
0613   00                     DB   NUL   
0614   66 06                  DW   dotDec   
0616                DOTARRAY:      
0616   CD B4 06               CALL   go   
0619   00 00                  DW   NUL   ; null closure
061B   1F 06                  DW   dotArray_block   
061D   4F 0B                  DW   args1A0L   
061F                DOTARRAY_BLOCK:      
061F   7B 24 61 2F 62 61 2F 70 78 7D 00 .CSTR   "{$a/ba/px}"   ; block
062A                DOTHEX:      
062A   CD B4 06               CALL   go   
062D   00 00                  DW   NUL   ; null closure
062F   33 06                  DW   dotHex_block   
0631   4F 0B                  DW   args1A0L   
0633                DOTHEX_BLOCK:      
0633   7B 24 61 2F 62 68 2F 70 78 7D 00 .CSTR   "{$a/bh/px}"   ; block
063E                DOTSTR:      
063E   CD B4 06               CALL   go   
0641   00 00                  DW   NUL   ; null closure
0643   47 06                  DW   dotStr_block   
0645   4F 0B                  DW   args1A0L   
0647                DOTSTR_BLOCK:      
0647   7B 24 61 2F 62 73 2F 70 78 7D 00 .CSTR   "{$a/bs/px}"   ; block
0652                DOTCHAR:      
0652   CD B4 06               CALL   go   
0655   00 00                  DW   NUL   ; null closure
0657   5B 06                  DW   dotChar_block   
0659   4F 0B                  DW   args1A0L   
065B                DOTCHAR_BLOCK:      
065B   7B 24 61 2F 62 63 2F 70 78 7D 00 .CSTR   "{$a/bc/px}"   ; block
0666                DOTDEC:      
0666   CD B4 06               CALL   go   
0669   00 00                  DW   NUL   ; closure
066B   6F 06                  DW   dotDec_block   
066D   4F 0B                  DW   args1A0L   
066F                DOTDEC_BLOCK:      
066F   7B 24 61 2F 62 64 2F 70 78 7D 00 .CSTR   "{$a/bd/px}"   ; block
067A                             ; division subroutine.
067A                             ; bc: divisor, de: dividend, hl: remainder
067A                DIVIDE:      
067A   21 00 00               LD   hl,0   ; zero the remainder
067D   3E 10                  LD   a,16   ; loop counter
067F                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
067F   CB 21                  SLA   c   
0681   CB 10                  RL   b   
0683   ED 6A                  ADC   hl,hl   
0685   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0687   38 03                  JR   c,divide2   
0689   0C                     INC   c   
068A   18 01                  JR   divide3   
068C                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
068C   19                     ADD   hl,de   
068D                DIVIDE3:      
068D   3D                     DEC   a   
068E   20 EF                  JR   nz,divide1   
0690   50 59                  LD   de,bc   ; result from bc to de
0692   C9                     RET      
0693                             ; hl = value1, de = value2
0693                             ; hl = result
0693                EQUALS:      
0693   B7                     OR   a   ; reset the carry flag
0694   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0696   28 10                  JR   z,true1   
0698   C3 AE 06               JP   false1   
069B                             ; hl = value1 de = value2
069B                             ; hl = result
069B                LESSTHANEQ:      
069B   B7                     OR   a   
069C   ED 52                  SBC   hl,de   
069E   18 05                  JR   lessthan1   
06A0                             ; hl = value1 de = value2
06A0                             ; hl = result
06A0                LESSTHAN:      
06A0   B7                     OR   a   
06A1   ED 52                  SBC   hl,de   
06A3   28 09                  JR   z,false1   
06A5                LESSTHAN1:      
06A5   FA AE 06               JP   m,false1   
06A8                TRUE1:       
06A8   21 FF FF               LD   hl,TRUE   
06AB   E5                     PUSH   hl   
06AC   DD E9                  JP   (ix)   
06AE                NULL1:       
06AE                FALSE1:      
06AE   21 00 00               LD   hl,FALSE   
06B1   E5                     PUSH   hl   
06B2   DD E9                  JP   (ix)   
06B4                             ; execute a block of code which ends with }
06B4                             ; creates a root scope if BP == stack
06B4                             ; else uses outer scope
06B4                CARET:       
06B4                GO:          
06B4   D1                     POP   de   ; de = block*
06B5                GO1:         
06B5   7B                     LD   a,e   ; if block* == null, exit
06B6   B2                     OR   d   
06B7   20 02                  JR   nz,go2   
06B9   DD E9                  JP   (ix)   
06BB                GO2:         
06BB   1A                     LD   a,(de)   
06BC   FE 7B                  CP   "{"   
06BE   28 07                  JR   z,goBlock1   
06C0   FE 28                  CP   "("   
06C2   C2 FA 06               JP   nz,goLambda   
06C5   13                     INC   de   ; de is the address to jump back to
06C6   D5                     PUSH   de   ; push de just before stack frame
06C7                GOBLOCK:      
06C7                GOBLOCK1:      
06C7   ED 53 FE 48            LD   (vTemp1),de   ; save de
06CB   21 80 47               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
06CE   FD 54                  LD   d,iyh   
06D0   FD 5D                  LD   e,iyl   
06D2   B7                     OR   a   ; if stack* == BP then this is the root_scope
06D3   ED 52                  SBC   hl,de   
06D5   ED 5B FE 48            LD   de,(vTemp1)   ; restore de
06D9   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
06DA   B4                     OR   h   
06DB   3E 00                  LD   a,0   
06DD   28 70                  JR   z,goLambda8   
06DF   C5                     PUSH   bc   ; push IP
06E0   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
06E3   FD 46 05               LD   b,(iy+5)   
06E6   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
06E9   FD 66 03               LD   h,(iy+3)   
06EC                GOBLOCK2:      
06EC   C5                     PUSH   bc   ; arg_list*
06ED   E5                     PUSH   hl   ; first_arg*
06EE   FD E5                  PUSH   iy   ; push BP
06F0   FD 21 00 00            LD   iy,0   ; BP = SP
06F4   FD 39                  ADD   iy,sp   
06F6   42 4B                  LD   bc,de   ; bc = de = block*-1
06F8   DD E9                  JP   (ix)   
06FA                GOLAMBDA:      ; execute lambda
06FA   EB                     EX   de,hl   ; hl = lambda*
06FB   5E                     LD   e,(hl)   ; de = partial_array*
06FC   23                     INC   hl   
06FD   56                     LD   d,(hl)   
06FE   23                     INC   hl   
06FF   7B                     LD   a,e   ; if partial_array* == null skip
0700   B2                     OR   d   
0701   28 25                  JR   z,goLambda3   
0703   ED 43 FE 48            LD   (vTemp1),bc   
0707   22 00 49               LD   (vTemp2),hl   ; save bc,hl
070A   EB                     EX   de,hl   ; hl = partial_array*
070B   2B                     DEC   hl   ; skip type byte
070C   2B                     DEC   hl   ; skip magic byte
070D   2B                     DEC   hl   ; bc = count
070E   46                     LD   b,(hl)   
070F   2B                     DEC   hl   
0710   4E                     LD   c,(hl)   
0711   23                     INC   hl   ; hl = array data*
0712   23                     INC   hl   
0713   23                     INC   hl   
0714   23                     INC   hl   
0715   18 06                  JR   goLambda2   ; push each item on stack
0717                GOLAMBDA1:      
0717   5E                     LD   e,(hl)   ; de = partial item
0718   23                     INC   hl   
0719   56                     LD   d,(hl)   
071A   23                     INC   hl   
071B   D5                     PUSH   de   ; push on stack
071C   0B                     DEC   bc   
071D                GOLAMBDA2:      
071D   79                     LD   a,c   ; if count != 0 then loop
071E   B0                     OR   b   
071F   20 F6                  JR   nz,goLambda1   
0721   ED 4B FE 48            LD   bc,(vTemp1)   ; restore bc
0725   2A 00 49               LD   hl,(vTemp2)   ; restore hl
0728                GOLAMBDA3:      
0728   5E                     LD   e,(hl)   ; de = block*
0729   23                     INC   hl   
072A   56                     LD   d,(hl)   
072B   23                     INC   hl   
072C   ED 53 FE 48            LD   (vTemp1),de   ; save block*
0730   5E                     LD   e,(hl)   ; de = arg_list*
0731   23                     INC   hl   
0732   56                     LD   d,(hl)   
0733   23                     INC   hl   
0734   EB                     EX   de,hl   ; hl = arg_list*
0735   ED 5B FE 48            LD   de,(vTemp1)   ; restore de = block*
0739   7D                     LD   a,l   ; if arg_list* == null a = 0
073A   B4                     OR   h   
073B   20 03                  JR   nz,goLambda4   
073D   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
073E   18 0F                  JR   goLambda8   
0740                GOLAMBDA4:      ; allocate locals
0740   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
0741   7E                     LD   a,(hl)   
0742   18 03                  JR   goLambda6   
0744                GOLAMBDA5:      ; loop
0744   3B                     DEC   sp   
0745   3B                     DEC   sp   
0746   3D                     DEC   a   
0747                GOLAMBDA6:      
0747   B7                     OR   a   
0748   20 FA                  JR   nz,goLambda5   ; end loop
074A                GOLAMBDA7:      
074A   2B                     DEC   hl   ; a = num_args* x 2
074B   7E                     LD   a,(hl)   
074C   23                     INC   hl   
074D   23                     INC   hl   
074E   87                     ADD   a,a   ; a *= 2
074F                GOLAMBDA8:      
074F   C5                     PUSH   bc   ; push IP
0750   44 4D                  LD   bc,hl   
0752   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0755   85                     ADD   a,l   
0756   6F                     LD   l,a   
0757   39                     ADD   hl,sp   
0758   18 92                  JR   goBlock2   
075A                HASH:        
075A                HEXNUM:      
075A   21 00 00               LD   hl,0   ; Clear hl to accept the number
075D                HEXNUM1:      
075D   03                     INC   bc   
075E   0A                     LD   a,(bc)   ; Get the character which is a numeral
075F   CB 77                  BIT   6,a   ; is it uppercase alpha?
0761   28 02                  JR   z,hexnum2   ; no a decimal
0763   D6 07                  SUB   7   ; sub 7  to make $a - $F
0765                HEXNUM2:      
0765   D6 30                  SUB   $30   ; form decimal digit
0767   DA E5 07               JP   c,num2   
076A   FE 10                  CP   $0F+1   
076C   D2 E5 07               JP   nc,num2   
076F   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0770   29                     ADD   hl,hl   ; 4X
0771   29                     ADD   hl,hl   ; 8X
0772   29                     ADD   hl,hl   ; 16X
0773   85                     ADD   a,l   ; add into bottom of hl
0774   6F                     LD   l,a   
0775   18 E6                  JR   hexnum1   
0777                UPCASE:      
0777   0A                     LD   a,(bc)   ; a = identifier char
0778   D6 41                  SUB   "A"   ; "A" = 0
077A   18 05                  JR   ident1   
077C                LOWCASE:      
077C   0A                     LD   a,(bc)   
077D   D6 61                  SUB   "a"   
077F   C6 1A                  ADD   a,26   
0781                IDENT1:      
0781   87                     ADD   a,a   ; l = a * 2
0782   6F                     LD   l,a   
0783   26 48                  LD   h,msb(vars)   
0785   22 F2 48               LD   (vPointer),hl   ; store address in setter
0788   5E                     LD   e,(hl)   
0789   23                     INC   hl   
078A   56                     LD   d,(hl)   
078B   D5                     PUSH   de   
078C   DD E9                  JP   (ix)   
078E                             ; if
078E                             ; condition then -- value
078E                QUESTION:      
078E                IF:          
078E   03                     INC   bc   
078F   0A                     LD   a,(bc)   
0790   FE 3F                  CP   "?"   
0792   28 06                  JR   z,ifte   
0794   0B                     DEC   bc   
0795   11 00 00               LD   de,NUL   ; NUL pointer for else
0798   18 01                  JR   ifte1   
079A                             ; ifte
079A                             ; condition then else -- value
079A                IFTE:        
079A   D1                     POP   de   ; de = else
079B                IFTE1:       
079B   E1                     POP   hl   ; hl = then
079C   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
079D   7C                     LD   a,h   
079E   B5                     OR   l   
079F   E1                     POP   hl   ; hl = then
07A0   CA B5 06               JP   z,go1   ; if z de = else
07A3   EB                     EX   de,hl   ; condition = false, de = then
07A4   C3 B5 06               JP   go1   
07A7                STAR:        
07A7                MUL:         
07A7   D1                     POP   de   ; get first value
07A8   E1                     POP   hl   
07A9                MUL2:        
07A9   C5                     PUSH   bc   ; Preserve the IP
07AA   44 4D                  LD   bc,hl   ; bc = 2nd value
07AC   21 00 00               LD   hl,0   
07AF   3E 10                  LD   a,16   
07B1                MUL3:        
07B1   29                     ADD   hl,hl   
07B2   CB 13                  RL   e   
07B4   CB 12                  RL   d   
07B6   30 04                  JR   nc,$+6   
07B8   09                     ADD   hl,bc   
07B9   30 01                  JR   nc,$+3   
07BB   13                     INC   de   
07BC   3D                     DEC   a   
07BD   20 F2                  JR   nz,mul3   
07BF   C1                     POP   bc   ; Restore the IP
07C0   C3 96 03               JP   add3   
07C3                NUM:         
07C3   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
07C6   0A                     LD   a,(bc)   ; Get numeral or -
07C7   FE 2D                  CP   "-"   
07C9   20 01                  JR   nz,num0   
07CB   03                     INC   bc   ; move to next char, no flags affected
07CC                NUM0:        
07CC   08                     EX   af,af'   ; save zero flag = 0 for later
07CD                NUM1:        
07CD   0A                     LD   a,(bc)   ; read digit
07CE   D6 30                  SUB   "0"   ; less than 0?
07D0   38 13                  JR   c,num2   ; not a digit, exit loop
07D2   FE 0A                  CP   10   ; greater that 9?
07D4   30 0F                  JR   nc,num2   ; not a digit, exit loop
07D6   03                     INC   bc   ; inc IP
07D7   54 5D                  LD   de,hl   ; multiply hl * 10
07D9   29                     ADD   hl,hl   
07DA   29                     ADD   hl,hl   
07DB   19                     ADD   hl,de   
07DC   29                     ADD   hl,hl   
07DD   85                     ADD   a,l   ; add digit in a to hl
07DE   6F                     LD   l,a   
07DF   3E 00                  LD   a,0   
07E1   8C                     ADC   a,h   
07E2   67                     LD   h,a   
07E3   18 E8                  JR   num1   
07E5                NUM2:        
07E5   0B                     DEC   bc   
07E6   08                     EX   af,af'   ; restore zero flag
07E7   20 07                  JR   nz,num3   
07E9   EB                     EX   de,hl   ; negate the value of hl
07EA   21 00 00               LD   hl,0   
07ED   B7                     OR   a   ; jump to sub2
07EE   ED 52                  SBC   hl,de   
07F0                NUM3:        
07F0   E5                     PUSH   hl   ; Put the number on the stack
07F1   DD E9                  JP   (ix)   ; and process the next character
07F3                UNDERSCORE:      
07F3                REMAIN:      
07F3   2A F4 48               LD   hl,(vRemain)   
07F6   E5                     PUSH   hl   
07F7   DD E9                  JP   (ix)   
07F9                RPAREN:      
07F9   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
07FC   FD 46 09               LD   b,(iy+9)   
07FF   DD E9                  JP   (ix)   
0801                             ; arg_list* block* -- ptr
0801                SEMICOLON:      
0801   D1                     POP   de   ; de = block* hl = heap*
0802   2A F0 48               LD   hl,(vHeapPtr)   
0805   AF                     XOR   a   
0806   77                     LD   (hl),a   ; compile null partial_array*
0807   23                     INC   hl   
0808   77                     LD   (hl),a   
0809   23                     INC   hl   
080A   73                     LD   (hl),e   ; compile block*
080B   23                     INC   hl   
080C   72                     LD   (hl),d   
080D   23                     INC   hl   
080E   D1                     POP   de   ; de = block*
080F   73                     LD   (hl),e   ; compile arg_list*
0810   23                     INC   hl   
0811   72                     LD   (hl),d   
0812   23                     INC   hl   
0813   ED 5B F0 48            LD   de,(vHeapPtr)   ; return lambda*
0817   D5                     PUSH   de   
0818   22 F0 48               LD   (vHeapPtr),hl   ; heap* += 4
081B   DD E9                  JP   (ix)   
081D                             ; shiftLeft
081D                             ; value count -- value2          shift left count places
081D                SHIFTLEFT:      
081D   50 59                  LD   de,bc   ; save IP
081F   C1                     POP   bc   ; bc = count
0820   41                     LD   b,c   ; b = loop counter
0821   E1                     POP   hl   
0822   04                     INC   b   ; test for counter=0 case
0823   18 01                  JR   shiftLeft2   
0825                SHIFTLEFT1:      
0825   29                     ADD   hl,hl   ; left shift hl
0826                SHIFTLEFT2:      
0826   10 FD                  DJNZ   shiftLeft1   
0828   E5                     PUSH   hl   
0829   42 4B                  LD   bc,de   ; restore IP
082B   DD E9                  JP   (ix)   
082D                             ; shiftRight
082D                             ; value count -- value2          shift left count places
082D                SHIFTRIGHT:      
082D   50 59                  LD   de,bc   ; save IP
082F   C1                     POP   bc   ; bc = count
0830   41                     LD   b,c   ; b = loop counter
0831   E1                     POP   hl   
0832   04                     INC   b   ; test for counter=0 case
0833   18 04                  JR   shiftRight2   
0835                SHIFTRIGHT1:      
0835   CB 3C                  SRL   h   ; right shift hl
0837   CB 1D                  RR   l   
0839                SHIFTRIGHT2:      
0839   10 FA                  DJNZ   shiftRight1   
083B   E5                     PUSH   hl   
083C   42 4B                  LD   bc,de   ; restore IP
083E   DD E9                  JP   (ix)   
0840                             ; string
0840                             ; -- ptr                        ; points to start of string chars,
0840                             ; length is stored at start - 2 bytes
0840                DBLQUOTE:      
0840                STRING:      
0840   2A F0 48               LD   hl,(vHeapPtr)   ; hl = heap*
0843   23                     INC   hl   ; skip length field to start
0844   23                     INC   hl   
0845   E5                     PUSH   hl   ; save start of string
0846   03                     INC   bc   ; point to next char
0847   18 03                  JR   string2   
0849                STRING1:      
0849   77                     LD   (hl),a   
084A   23                     INC   hl   ; increase count
084B   03                     INC   bc   ; point to next char
084C                STRING2:      
084C   0A                     LD   a,(bc)   
084D   FE 22                  CP   DQUOTE   ; " is the string terminator
084F   28 04                  JR   z,string3   
0851   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0853   20 F4                  JR   nz,string1   
0855                STRING3:      
0855   AF                     XOR   a   ; write NUL to terminate string
0856   77                     LD   (hl),a   ; hl = end of string
0857   23                     INC   hl   
0858   22 F0 48               LD   (vHeapPtr),hl   ; bump heap* to after end of string
085B   2B                     DEC   hl   ; hl = end of string without terminator
085C   D1                     POP   de   ; de = start of string
085D   D5                     PUSH   de   ; return start of string
085E   B7                     OR   a   ; hl = length bytes, de = start of string
085F   ED 52                  SBC   hl,de   
0861   EB                     EX   de,hl   
0862   2B                     DEC   hl   ; write length bytes to length field at start - 2
0863   72                     LD   (hl),d   
0864   2B                     DEC   hl   
0865   73                     LD   (hl),e   
0866   DD E9                  JP   (ix)   
0868                MINUS:       ; negative sign or subtract
0868   03                     INC   bc   ; check if sign of a number
0869   0A                     LD   a,(bc)   
086A   0B                     DEC   bc   
086B   FE 30                  CP   "0"   
086D   38 05                  JR   c,sub   
086F   FE 3A                  CP   "9"+1   
0871   DA 3E 03               JP   c,num_   
0874                SUB:         ; Subtract the value 2nd on stack from top of stack
0874   03                     INC   bc   
0875   FE 2D                  CP   "-"   
0877   20 05                  JR   nz,sub1   
0879   E1                     POP   hl   
087A   2B                     DEC   hl   
087B   C3 8C 04               JP   assign0   
087E                SUB1:        
087E   0B                     DEC   bc   
087F   D1                     POP   de   
0880   E1                     POP   hl   
0881   B7                     OR   a   
0882   ED 52                  SBC   hl,de   
0884   C3 96 03               JP   add3   
0887                ERROR1:      
0887   21 01 00               LD   hl,1   ; error 1: unknown command
088A   E5                     PUSH   hl   
088B   C3 89 0C               JP   error   
088E                COMMENT:      
088E   03                     INC   bc   ; point to next char
088F   0A                     LD   a,(bc)   
0890   FE 20                  CP   " "   ; terminate on any char less than SP
0892   30 FA                  JR   nc,comment   
0894   0B                     DEC   bc   
0895   DD E9                  JP   (ix)   
0897                COMMAND_A:      
0897   CD 5D 0B               CALL   jumpTable   
089A   62                     DB   "b"   
089B   A3 08                  DW   absolute   
089D   64                     DB   "d"   
089E   B0 08                  DW   addrOf   
08A0   00                     DB   NUL   
08A1   87 08                  DW   error1   
08A3                             ; /ab absolute
08A3                             ; num -- num
08A3                ABSOLUTE:      
08A3   E1                     POP   hl   
08A4   CB 7C                  BIT   7,h   
08A6   C8                     RET   z   
08A7   AF                     XOR   a   
08A8   95                     SUB   l   
08A9   6F                     LD   l,a   
08AA   9F                     SBC   a,a   
08AB   94                     SUB   h   
08AC   67                     LD   h,a   
08AD   E5                     PUSH   hl   
08AE   DD E9                  JP   (ix)   
08B0                             ; /ad addrOf
08B0                             ; char -- addr
08B0                ADDROF:      
08B0   E1                     POP   hl   ; a = char
08B1   7D                     LD   a,l   
08B2   FE 7B                  CP   "z"+1   ; if a > z then exit
08B4   30 19                  JR   nc,addrOf2   
08B6   D6 41                  SUB   "A"   ; a - 65
08B8   38 15                  JR   c,addrOf2   ; if < A then exit
08BA   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
08BC   38 06                  JR   c,addrOf1   
08BE   D6 06                  SUB   "a"-("Z"+1)   
08C0   FE 1A                  CP   "Z"-"A"+1   
08C2   38 0B                  JR   c,addrOf2   ; if < a then exit
08C4                ADDROF1:      
08C4   87                     ADD   a,a   ; double a
08C5   21 00 48               LD   hl,VARS   ; hl = VARS + a
08C8   85                     ADD   a,l   
08C9   6F                     LD   l,a   
08CA   3E 00                  LD   a,0   
08CC   8C                     ADC   a,h   
08CD   67                     LD   h,a   
08CE   E5                     PUSH   hl   
08CF                ADDROF2:      
08CF   DD E9                  JP   (ix)   
08D1                COMMAND_B:      
08D1   CD 5D 0B               CALL   jumpTable   
08D4   61                     DB   "a"   
08D5   EC 08                  DW   bufferArray   
08D7   63                     DB   "c"   
08D8   26 09                  DW   bufferChar   
08DA   64                     DB   "d"   
08DB   35 09                  DW   bufferDec   
08DD   68                     DB   "h"   
08DE   96 09                  DW   bufferHex   
08E0   72                     DB   "r"   
08E1   C5 09                  DW   break   
08E3   73                     DB   "s"   
08E4   DF 09                  DW   bufferString   
08E6   78                     DB   "x"   
08E7   FB 09                  DW   bufferXSpaces   
08E9   00                     DB   NUL   
08EA   87 08                  DW   error1   
08EC                BUFFERARRAY:      
08EC   CD B4 06               CALL   go   
08EF   00 00                  DW   NUL   ; closure
08F1   F5 08                  DW   bufferArray_block   
08F3   5A 0B                  DW   args1A2L   
08F5                BUFFERARRAY_BLOCK:      
08F5   7B 24 61 2F 73 24 63 3D 20 60 5B 20 60 2E 73 20 30 24 62 3D 28 24 61 24 62 25 2E 20 24 62 2B 2B 20 24 63 24 62 3D 3D 2F 62 29 5E 60 20 5D 60 7D 00 .CSTR   "{$a/s$c= `[ `.s 0$b=($a$b%. $b++ $c$b==/b)^` ]`}"   ; block
0926                             ;     ld (vTemp1),bc
0926                             ;     ld (vTemp2),ix
0926                             ;     ld de,(vBufPtr)
0926                             ;     ld a,"["
0926                             ;     ld (de),a
0926                             ;     inc de
0926                             ;     ld a," "
0926                             ;     ld (de),a
0926                             ;     inc de
0926                             ;     ld (vBufPtr),de
0926                             ;     pop hl
0926                             ;     dec hl
0926                             ;     dec hl
0926                             ;     dec hl
0926                             ;     ld b,(hl)
0926                             ;     dec hl
0926                             ;     ld c,(hl)
0926                             ;     inc hl
0926                             ;     inc hl
0926                             ;     inc hl
0926                             ;     push hl
0926                             ;     ld ix,bufferArray3
0926                             ;     jp (ix)
0926                             ; bufferArray2:
0926                             ;     dec bc
0926                             ;     ld e,(hl)
0926                             ;     inc hl
0926                             ;     ld d,(hl)
0926                             ;     inc hl
0926                             ;     push hl
0926                             ;     push de
0926                             ;     jp bufferDec
0926                             ; bufferArray3:
0926                             ;     pop hl
0926                             ;     ld a,c
0926                             ;     or b
0926                             ;     jr nz,bufferArray2
0926                             ;     ld de,(vBufPtr)
0926                             ;     ld a," "
0926                             ;     ld (de),a
0926                             ;     inc de
0926                             ;     ld a,"]"
0926                             ;     ld (de),a
0926                             ;     inc de
0926                             ;     ld (vBufPtr),de
0926                             ;     ld bc,(vTemp1)
0926                             ;     ld ix,(vTemp2)
0926                             ;     jp (ix)
0926                             ; /bc buffer char
0926                             ; char -- length
0926                BUFFERCHAR:      
0926   D1                     POP   de   ; e = char
0927   2A EC 48               LD   hl,(vBufPtr)   ; hl = buffer*
092A   73                     LD   (hl),e   ; e -> buffer*
092B   23                     INC   hl   ; buffer*++
092C   22 EC 48               LD   (vBufPtr),hl   ; save buffer*' in pointer
092F   11 01 00               LD   de,1   ; return 1 byte
0932   D5                     PUSH   de   
0933   DD E9                  JP   (ix)   
0935                             ; /bd buffer decimal
0935                             ; value -- length               ; length can be used to rewind buffer*
0935                BUFFERDEC:      
0935   ED 5B EC 48            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0939   D9                     EXX      
093A   E1                     POP   hl   ; hl = value
093B   CD 4D 09               CALL   bufferDec0   
093E   D9                     EXX      ; de = buffer*' bc = IP
093F   2A EC 48               LD   hl,(vBufPtr)   ; hl = buffer*
0942   ED 53 EC 48            LD   (vBufPtr),de   ; update buffer* with buffer*'
0946   EB                     EX   de,hl   ; hl = length
0947   B7                     OR   a   
0948   ED 52                  SBC   hl,de   
094A   E5                     PUSH   hl   ; return length
094B   DD E9                  JP   (ix)   
094D                             ; hl = value
094D                             ; de' = buffer*
094D                             ; a, bc, de, hl destroyed
094D                BUFFERDEC0:      
094D   CB 7C                  BIT   7,h   
094F   28 0C                  JR   z,bufferDec1   
0951   D9                     EXX      
0952   3E 2D                  LD   a,"-"   
0954   12                     LD   (de),a   
0955   13                     INC   de   
0956   D9                     EXX      
0957   AF                     XOR   a   
0958   95                     SUB   l   
0959   6F                     LD   l,a   
095A   9F                     SBC   a,a   
095B   94                     SUB   h   
095C   67                     LD   h,a   
095D                BUFFERDEC1:      
095D   0E 00                  LD   c,0   ; leading zeros flag = false
095F   11 F0 D8               LD   de,-10000   
0962   CD 7D 09               CALL   bufferDec2   
0965   11 18 FC               LD   de,-1000   
0968   CD 7D 09               CALL   bufferDec2   
096B   11 9C FF               LD   de,-100   
096E   CD 7D 09               CALL   bufferDec2   
0971   1E F6                  LD   e,-10   
0973   CD 7D 09               CALL   bufferDec2   
0976   0C                     INC   c   ; flag = true for at least digit
0977   1E FF                  LD   e,-1   
0979   CD 7D 09               CALL   bufferDec2   
097C   C9                     RET      
097D                BUFFERDEC2:      
097D   06 2F                  LD   b,"0"-1   
097F                BUFFERDEC3:      
097F   04                     INC   b   
0980   19                     ADD   hl,de   
0981   38 FC                  JR   c,bufferDec3   
0983   ED 52                  SBC   hl,de   
0985   3E 30                  LD   a,"0"   
0987   B8                     CP   b   
0988   20 05                  JR   nz,bufferDec4   
098A   AF                     XOR   a   
098B   B1                     OR   c   
098C   C8                     RET   z   
098D   18 01                  JR   bufferDec5   
098F                BUFFERDEC4:      
098F   0C                     INC   c   
0990                BUFFERDEC5:      
0990   78                     LD   a,b   
0991   D9                     EXX      
0992   12                     LD   (de),a   
0993   13                     INC   de   
0994   D9                     EXX      
0995   C9                     RET      
0996                             ; /bh buffer hex
0996                             ; value -- length               ; length can be used to rewind buffer*
0996                BUFFERHEX:      
0996   E1                     POP   hl   ; hl = value
0997   ED 5B EC 48            LD   de,(vBufPtr)   
099B   7C                     LD   a,h   
099C   CD B1 09               CALL   bufferHex1   
099F   7D                     LD   a,l   
09A0   CD B1 09               CALL   bufferHex1   
09A3   EB                     EX   de,hl   
09A4   ED 5B EC 48            LD   de,(vBufPtr)   
09A8   22 EC 48               LD   (vBufPtr),hl   
09AB   B7                     OR   a   
09AC   ED 52                  SBC   hl,de   
09AE   E5                     PUSH   hl   
09AF   DD E9                  JP   (ix)   
09B1                BUFFERHEX1:      
09B1   F5                     PUSH   af   
09B2   1F                     RRA      
09B3   1F                     RRA      
09B4   1F                     RRA      
09B5   1F                     RRA      
09B6   CD BA 09               CALL   bufferHex2   
09B9   F1                     POP   af   
09BA                BUFFERHEX2:      
09BA   E6 0F                  AND   0x0F   
09BC   C6 90                  ADD   a,0x90   
09BE   27                     DAA      
09BF   CE 40                  ADC   a,0x40   
09C1   27                     DAA      
09C2   12                     LD   (de),a   
09C3   13                     INC   de   
09C4   C9                     RET      
09C5                             ; /br break from loop
09C5                             ; --
09C5                BREAK:       
09C5   E1                     POP   hl   
09C6   7D                     LD   a,l   
09C7   B4                     OR   h   
09C8   28 02                  JR   z,break1   
09CA   DD E9                  JP   (ix)   
09CC                BREAK1:      
09CC   FD 5D                  LD   e,iyl   ; get block* just under stack frame
09CE   FD 54                  LD   d,iyh   
09D0   21 08 00               LD   hl,8   
09D3   19                     ADD   hl,de   
09D4   23                     INC   hl   
09D5   23                     INC   hl   
09D6   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
09D9   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
09DC   C3 3B 05               JP   blockEnd   
09DF                             ; /bs buffered string
09DF                             ; string* -- length
09DF                BUFFERSTRING:      
09DF   E1                     POP   hl   ; hl = string*
09E0   ED 5B EC 48            LD   de,(vBufPtr)   ; de = buffer*
09E4   18 03                  JR   bufferString1   
09E6                BUFFERSTRING0:      
09E6   12                     LD   (de),a   ; a -> buffer*
09E7   13                     INC   de   ; string*++ buffer++
09E8   23                     INC   hl   
09E9                BUFFERSTRING1:      
09E9   7E                     LD   a,(hl)   ; a <- string*
09EA   B7                     OR   a   ; if NUL exit loop
09EB   20 F9                  JR   nz,bufferString0   
09ED   2A EC 48               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
09F0   ED 53 EC 48            LD   (vBufPtr),de   ; save buffer*' in pointer
09F4   EB                     EX   de,hl   ; hl = length
09F5   B7                     OR   a   
09F6   ED 52                  SBC   hl,de   
09F8   E5                     PUSH   hl   ; return length
09F9   DD E9                  JP   (ix)   
09FB                             ; /bx buffered x spaces
09FB                             ; length -- length
09FB                BUFFERXSPACES:      
09FB   D1                     POP   de   ; bc = length
09FC   D5                     PUSH   de   ; return length
09FD   2A EC 48               LD   hl,(vBufPtr)   ; hl = buffer*
0A00   18 04                  JR   bufferXSpaces2   
0A02                BUFFERXSPACES1:      
0A02   36 20                  LD   (hl)," "   
0A04   23                     INC   hl   
0A05   1B                     DEC   de   
0A06                BUFFERXSPACES2:      
0A06   7B                     LD   a,e   
0A07   B2                     OR   d   
0A08   20 F8                  JR   nz,bufferXSpaces1   
0A0A   22 EC 48               LD   (vBufPtr),hl   ; save buffer*'
0A0D   DD E9                  JP   (ix)   
0A0F                COMMAND_I:      
0A0F   CD 5D 0B               CALL   jumpTable   
0A12   6E                     DB   "n"   
0A13   F1 0A                  DW   input   
0A15   76                     DB   "v"   
0A16   C2 03                  DW   invert   
0A18   00                     DB   NUL   
0A19   87 08                  DW   error1   
0A1B                COMMAND_P:      
0A1B   CD 5D 0B               CALL   jumpTable   
0A1E   61                     DB   "a"   
0A1F   2D 0A                  DW   partial   
0A21   63                     DB   "c"   
0A22   4D 0A                  DW   printChars   
0A24   6B                     DB   "k"   
0A25   5F 0A                  DW   printStack   
0A27   78                     DB   "x"   
0A28   6B 0A                  DW   printX   
0A2A   00                     DB   NUL   
0A2B   87 08                  DW   error1   
0A2D                             ; partial
0A2D                             ; array* lambda* -- lambda1*
0A2D                PARTIAL:      
0A2D   E1                     POP   hl   ; h1 = lambda*
0A2E   ED 5B F0 48            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
0A32   ED 43 FE 48            LD   (vTemp1),bc   ; save IP
0A36   01 06 00               LD   bc,6   ; bc = count
0A39   ED B0                  LDIR      ; clone lambda
0A3B   ED 4B FE 48            LD   bc,(vTemp1)   ; restore IP
0A3F   2A F0 48               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
0A42   ED 53 F0 48            LD   (vHeapPtr),de   ; heap* += 6
0A46   D1                     POP   de   ; de = array*
0A47   E5                     PUSH   hl   ; return partial_array*
0A48   73                     LD   (hl),e   ; compile array*
0A49   23                     INC   hl   
0A4A   72                     LD   (hl),d   
0A4B   DD E9                  JP   (ix)   
0A4D                             ; printChars
0A4D                             ; char* len --
0A4D                             ; prints whatever in in buffer starting from TIB and ending at vTIBPtr*
0A4D                PRINTCHARS:      
0A4D   E1                     POP   hl   
0A4E   2B                     DEC   hl   
0A4F   D1                     POP   de   
0A50   C3 55 0A               JP   printChars2   
0A53                PRINTCHARS1:      
0A53   13                     INC   de   
0A54   2B                     DEC   hl   
0A55                PRINTCHARS2:      
0A55   1A                     LD   a,(de)   
0A56   CD 85 00               CALL   putchar   
0A59   7D                     LD   a,l   
0A5A   B4                     OR   h   
0A5B   20 F6                  JR   nz,printChars1   
0A5D   DD E9                  JP   (ix)   
0A5F                             ; /pk print stack
0A5F                             ; --
0A5F                PRINTSTACK:      
0A5F                             ;     ld (vTemp1),bc
0A5F                             ;     call printStr
0A5F                             ;     .cstr "=> "
0A5F                             ;     ld hl,STACK
0A5F                             ;     sbc hl,sp
0A5F                             ;     srl h
0A5F                             ;     rr l
0A5F                             ;     ld bc,hl
0A5F                             ;     ld hl,STACK
0A5F                             ;     jr printStack2
0A5F                             ; printStack1:
0A5F                             ;     dec bc
0A5F                             ;     dec hl
0A5F                             ;     ld d,(hl)
0A5F                             ;     dec hl
0A5F                             ;     ld e,(hl)
0A5F                             ;     ex de,hl
0A5F                             ;     call prthex
0A5F                             ;     ex de,hl
0A5F                             ;     ld a," "
0A5F                             ;     call putchar
0A5F                             ; printStack2:
0A5F                             ;     ld a,c
0A5F                             ;     or b
0A5F                             ;     jr nz,printStack1
0A5F                             ;     call prompt
0A5F                             ;     ld bc,(vTemp1)
0A5F   DD E9                  JP   (ix)   
0A61                SIZE:        
0A61   E1                     POP   hl   
0A62   2B                     DEC   hl   ; skip magic byte
0A63   2B                     DEC   hl   ; skip type tag
0A64   2B                     DEC   hl   ; msb size
0A65   56                     LD   d,(hl)   
0A66   2B                     DEC   hl   ; lsb size
0A67   5E                     LD   e,(hl)   
0A68   D5                     PUSH   de   
0A69   DD E9                  JP   (ix)   
0A6B                PRINTX:      
0A6B   CD B4 06               CALL   go   
0A6E   00 00                  DW   NUL   ; closure
0A70   74 0A                  DW   printX_block   
0A72   4F 0B                  DW   args1A0L   
0A74                PRINTX_BLOCK:      
0A74   7B 24 61 20 31 2F 62 78 2B 24 61 3D 20 2F 76 62 24 61 2D 2F 76 62 3D 20 2F 76 62 24 61 2F 70 63 7D 00 .CSTR   "{$a 1/bx+$a= /vb$a-/vb= /vb$a/pc}"   ; block
0A96                COMMAND_V:      
0A96   CD 5D 0B               CALL   jumpTable   
0A99   62                     DB   "b"   
0A9A   BA 0A                  DW   varBufPtr   
0A9C   68                     DB   "h"   
0A9D   C3 0A                  DW   varHeapPtr   
0A9F   74                     DB   "t"   
0AA0   CC 0A                  DW   varTIBPtr   
0AA2   42                     DB   "B"   
0AA3   AB 0A                  DW   constBufStart   
0AA5   54                     DB   "T"   
0AA6   B5 0A                  DW   constTIBStart   
0AA8   00                     DB   NUL   
0AA9   87 08                  DW   error1   
0AAB                CONSTBUFSTART:      
0AAB   11 00 4B               LD   de,BUF   
0AAE   18 28                  JR   constant   
0AB0                CONSTHEAPSTART:      
0AB0   11 00 4D               LD   de,HEAP   
0AB3   18 23                  JR   constant   
0AB5                CONSTTIBSTART:      
0AB5   11 00 4A               LD   de,TIB   
0AB8   18 1E                  JR   constant   
0ABA                VARBUFPTR:      
0ABA   ED 5B EC 48            LD   de,(vBufPtr)   
0ABE   21 EC 48               LD   hl,vBufPtr   
0AC1   18 12                  JR   variable   
0AC3                VARHEAPPTR:      
0AC3   ED 5B F0 48            LD   de,(vHeapPtr)   
0AC7   21 F0 48               LD   hl,vHeapPtr   
0ACA   18 09                  JR   variable   
0ACC                VARTIBPTR:      
0ACC   ED 5B EA 48            LD   de,(vTIBPtr)   
0AD0   21 EA 48               LD   hl,vTIBPtr   
0AD3   18 00                  JR   variable   
0AD5                VARIABLE:      
0AD5   22 F2 48               LD   (vPointer),hl   
0AD8                CONSTANT:      
0AD8   D5                     PUSH   de   
0AD9   DD E9                  JP   (ix)   
0ADB                CHARS:       
0ADB   21 01 00               LD   hl,1   
0ADE                CHARS1:      
0ADE   22 E6 48               LD   (vDataWidth),hl   
0AE1   DD E9                  JP   (ix)   
0AE3                DECIMAL:      
0AE3   21 0A 00               LD   hl,10   
0AE6                DECIMAL1:      
0AE6   22 E8 48               LD   (vNumBase),hl   
0AE9   DD E9                  JP   (ix)   
0AEB                HEXADECIMAL:      
0AEB   21 10 00               LD   hl,16   
0AEE   C3 E6 0A               JP   decimal1   
0AF1                             ; Z80 port input
0AF1                             ; port -- value
0AF1                INPUT:       
0AF1   E1                     POP   hl   
0AF2   59                     LD   e,c   ; save IP
0AF3   4D                     LD   c,l   
0AF4   ED 68                  IN   l,(c)   
0AF6   26 00                  LD   h,0   
0AF8   4B                     LD   c,e   ; restore IP
0AF9   E5                     PUSH   hl   
0AFA   DD E9                  JP   (ix)   
0AFC                KEY:         
0AFC   CD 81 00               CALL   getchar   
0AFF   26 00                  LD   h,0   
0B01   6F                     LD   l,a   
0B02   E5                     PUSH   hl   
0B03   DD E9                  JP   (ix)   
0B05                             ; Z80 port output
0B05                             ; value port --
0B05                OUTPUT:      
0B05   E1                     POP   hl   
0B06   59                     LD   e,c   ; save IP
0B07   4D                     LD   c,l   
0B08   E1                     POP   hl   
0B09   ED 69                  OUT   (c),l   
0B0B   4B                     LD   c,e   ; restore IP
0B0C   DD E9                  JP   (ix)   
0B0E                NUMBERS:      
0B0E   21 02 00               LD   hl,2   
0B11   C3 DE 0A               JP   chars1   
0B14                             ; 
0B14                             ; 
0B14                             ; 
0B14                             ; 
0B14                FILTER:      
0B14                MAP:         
0B14                SCAN:        
0B14   DD E9                  JP   (ix)   
0B16                ZPRT:        
0B16   CD B4 06               CALL   go   
0B19   00 00                  DW   NUL   ; closure
0B1B   23 0B                  DW   zprt_block   
0B1D   21 0B                  DW   zprt_args   
0B1F   02                     DB   2   ; num args + locals
0B20   01                     DB   1   ; num locals
0B21                ZPRT_ARGS:      
0B21   6E 73                  DB   "ns"   
0B23                ZPRT_BLOCK:      
0B23   7B 24 6E 2F 62 64 60 20 60 2F 62 73 20 2B 24 73 3D 20 2F 76 62 24 73 2D 2F 76 62 3D 20 2F 76 62 24 73 2F 70 63 7D 00 .CSTR   "{$n/bd` `/bs +$s= /vb$s-/vb= /vb$s/pc}"   ; block
0B4A                             ;*******************************************************************
0B4A                             ; reusable arglists
0B4A                             ;*******************************************************************
0B4A                ARGS0A1L_:      ; zero args one local
0B4A   01                     DB   1   ; num args + locals
0B4B   01                     DB   1   ; num locals
0B4C                ARGS0A1L:      
0B4C   61                     DB   "a"   
0B4D                ARGS1A0L_:      ; one arg zero locals
0B4D   01                     DB   1   ; num args + locals
0B4E   00                     DB   0   ; num locals
0B4F                ARGS1A0L:      
0B4F   61                     DB   "a"   
0B50                ARGS1A1L_:      ; one arg one local
0B50   02                     DB   2   ; num args + locals
0B51   01                     DB   1   ; num locals
0B52                ARGS1A1L:      
0B52   61 62                  DB   "ab"   
0B54                ARGS2A0L_:      ; two args zero locals
0B54   02                     DB   2   ; num args + locals
0B55   00                     DB   0   ; num locals
0B56                ARGS2A0L:      
0B56   61 62                  DB   "ab"   
0B58                ARGS1A2L_:      ; one arg two locals
0B58   03                     DB   3   ; num args + locals
0B59   02                     DB   2   ; num locals
0B5A                ARGS1A2L:      
0B5A   61 62 63               DB   "abc"   
0B5D                             ;*******************************************************************
0B5D                             ; general routines
0B5D                             ;*******************************************************************
0B5D                             ; followed by a table
0B5D                             ; db char
0B5D                             ; dw addr
0B5D                             ; the final item must have char == NUL
0B5D                JUMPTABLE:      
0B5D   03                     INC   bc   
0B5E   E1                     POP   hl   
0B5F                JUMPTABLE0:      
0B5F   AF                     XOR   a   
0B60   BE                     CP   (hl)   
0B61   28 09                  JR   z,jumpTable1   
0B63   0A                     LD   a,(bc)   
0B64   BE                     CP   (hl)   
0B65   28 06                  JR   z,jumpTable2   
0B67   23                     INC   hl   
0B68   23                     INC   hl   
0B69   23                     INC   hl   
0B6A   18 F3                  JR   jumpTable0   
0B6C                JUMPTABLE1:      
0B6C   0B                     DEC   bc   
0B6D                JUMPTABLE2:      
0B6D   23                     INC   hl   
0B6E   5E                     LD   e,(hl)   
0B6F   23                     INC   hl   
0B70   56                     LD   d,(hl)   
0B71   EB                     EX   de,hl   
0B72   E9                     JP   (hl)   
0B73                PRTSTR0:      
0B73   CD 85 00               CALL   putchar   
0B76   23                     INC   hl   
0B77                PRTSTR:      
0B77   7E                     LD   a,(hl)   
0B78   B7                     OR   a   
0B79   20 F8                  JR   nz,prtstr0   
0B7B   C9                     RET      
0B7C                             ; **************************************************************************
0B7C                             ; calculate nesting value
0B7C                             ; a is char to be tested,
0B7C                             ; e is the nesting value (initially 0)
0B7C                             ; e is increased by ( and [
0B7C                             ; e is decreased by ) and ]
0B7C                             ; e has its bit 7 toggled by `
0B7C                             ; limited to 127 levels
0B7C                             ; **************************************************************************
0B7C                NESTING:      
0B7C   FE 22                  CP   DQUOTE   ; quote char
0B7E   28 06                  JR   z,nesting0   
0B80   FE 60                  CP   "`"   ; quote char
0B82   28 02                  JR   z,nesting0   
0B84   18 0A                  JR   nesting1   
0B86                NESTING0:      
0B86   CB 7B                  BIT   7,e   
0B88   28 03                  JR   z,nesting1a   
0B8A   CB BB                  RES   7,e   
0B8C   C9                     RET      
0B8D                NESTING1A:      
0B8D   CB FB                  SET   7,e   
0B8F   C9                     RET      
0B90                NESTING1:      
0B90   CB 7B                  BIT   7,e   
0B92   C0                     RET   nz   
0B93   FE 7B                  CP   "{"   
0B95   28 08                  JR   z,nesting2   
0B97   FE 5B                  CP   "["   
0B99   28 04                  JR   z,nesting2   
0B9B   FE 28                  CP   "("   
0B9D   20 02                  JR   nz,nesting3   
0B9F                NESTING2:      
0B9F   1C                     INC   e   
0BA0   C9                     RET      
0BA1                NESTING3:      
0BA1   FE 7D                  CP   "}"   
0BA3   28 07                  JR   z,nesting4   
0BA5   FE 5D                  CP   "]"   
0BA7   28 03                  JR   z,nesting4   
0BA9   FE 29                  CP   ")"   
0BAB   C0                     RET   nz   
0BAC                NESTING4:      
0BAC   1D                     DEC   e   
0BAD   C9                     RET      
0BAE                PROMPT:      
0BAE   CD BE 0B               CALL   printStr   
0BB1   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0BB6   C9                     RET      
0BB7                CRLF:        
0BB7   CD BE 0B               CALL   printStr   
0BBA   0D 0A 00               .CSTR   "\r\n"   
0BBD   C9                     RET      
0BBE                             ; prints a null teminated string
0BBE                             ; the string should be immediately following the call
0BBE                PRINTSTR:      
0BBE   E3                     EX   (sp),hl   ; swap			
0BBF   CD 77 0B               CALL   prtstr   
0BC2   23                     INC   hl   ; inc past NUL
0BC3   E3                     EX   (sp),hl   ; put it back	
0BC4   C9                     RET      
0BC5                INIT:        
0BC5   DD 2A EE 48            LD   ix,(vNext)   
0BC9   FD 21 80 47            LD   iy,STACK   
0BCD   21 80 01               LD   hl,isysVars   
0BD0   11 E6 48               LD   de,sysVars   
0BD3   01 10 00               LD   bc,8 * 2   
0BD6   ED B0                  LDIR      
0BD8   21 00 48               LD   hl,vars   ; 52 vars LO HI
0BDB   06 34                  LD   b,26*2   
0BDD   AF                     XOR   a   
0BDE                INIT0:       
0BDE   77                     LD   (hl),a   
0BDF   23                     INC   hl   
0BE0   10 FC                  DJNZ   init0   
0BE2   C9                     RET      
0BE3                START:       
0BE3   31 80 47               LD   sp,STACK   ; start Monty
0BE6   CD C5 0B               CALL   init   ; setups
0BE9   CD BE 0B               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0BEC   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
0BF9                INTERPRET:      
0BF9   CD AE 0B               CALL   prompt   
0BFC   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0BFF   21 00 4A               LD   hl,TIB   
0C02   22 EA 48               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0C05                INTERPRET2:      ; calculate nesting
0C05   1E 00                  LD   e,0   ; initilize nesting value
0C07   C5                     PUSH   bc   ; save offset into TIB,
0C08                             ; bc is also the count of chars in TIB
0C08   21 00 4A               LD   hl,TIB   ; hl is start of TIB
0C0B   18 06                  JR   interpret4   
0C0D                INTERPRET3:      
0C0D   7E                     LD   a,(hl)   ; a = char in TIB
0C0E   23                     INC   hl   ; inc pointer into TIB
0C0F   0B                     DEC   bc   ; dec count of chars in TIB
0C10   CD 7C 0B               CALL   nesting   ; update nesting value
0C13                INTERPRET4:      
0C13   79                     LD   a,c   ; is count zero?
0C14   B0                     OR   b   
0C15   20 F6                  JR   nz,interpret3   ; if not loop
0C17   C1                     POP   bc   ; restore offset into TIB
0C18                INTERPRET5:      
0C18   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0C1B   FE 20                  CP   $20   ; compare to space
0C1D   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0C1F   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0C21                             ; ???? NEEDED?
0C21   28 3B                  JR   z,interpret8   
0C23   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0C25   28 24                  JR   z,interpret7   ; if anything else its macro/control
0C27   FE 05                  CP   CTRL_E   
0C29   CA AC 0C               JP   z,edit_   
0C2C   FE 08                  CP   CTRL_H   
0C2E   CA 9C 0C               JP   z,backSpace_   
0C31   FE 0A                  CP   CTRL_J   
0C33   CA C4 0C               JP   z,reEdit_   
0C36   FE 13                  CP   CTRL_S   
0C38   CA C7 0C               JP   z,printStack_   
0C3B                             ; DB     lsb(edit_)       ; ENQ ^E  5
0C3B                             ; DB     lsb(reedit_)     ; LF  ^J 10
0C3B                             ; DB     lsb(list_)       ; FF  ^L 12
0C3B                             ; DB     lsb(printStack_) ; DLE ^P 16
0C3B                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0C3B                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0C3B                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0C3B                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0C3B                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0C3B                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0C3B                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0C3B                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0C3B                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0C3B                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0C3B                INTERPRET5A:      
0C3B                             ; ld (vTIBPtr),bc
0C3B                             ; ld bc,(vTIBPtr)
0C3B   18 C8                  JR   interpret2   
0C3D                INTERPRET6:      
0C3D   21 00 4A               LD   hl,TIB   
0C40   09                     ADD   hl,bc   
0C41   77                     LD   (hl),a   ; store the character in textbuf
0C42   03                     INC   bc   
0C43   CD 85 00               CALL   putchar   ; echo character to screen
0C46   CD 7C 0B               CALL   nesting   
0C49   18 CD                  JR   interpret5   ; wait for next character
0C4B                INTERPRET7:      
0C4B   21 00 4A               LD   hl,TIB   
0C4E   09                     ADD   hl,bc   
0C4F   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0C51   23                     INC   hl   
0C52   36 0A                  LD   (hl),"\n"   
0C54   23                     INC   hl   
0C55   03                     INC   bc   
0C56   03                     INC   bc   
0C57   CD B7 0B               CALL   crlf   ; echo character to screen
0C5A   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0C5B   B7                     OR   a   
0C5C   20 BA                  JR   nz,interpret5   
0C5E                INTERPRET8:      
0C5E   21 00 4A               LD   hl,TIB   
0C61   09                     ADD   hl,bc   
0C62   22 EA 48               LD   (vTIBPtr),hl   
0C65   01 00 4A               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0C68                             ; we pressed enter
0C68   0B                     DEC   bc   
0C69                NEXT:        
0C69   03                     INC   bc   ; Increment the IP
0C6A   0A                     LD   a,(bc)   ; Get the next character and dispatch
0C6B   FE 20                  CP   " "   ; whitespace?
0C6D   28 FA                  JR   z,next   ; space? ignore
0C6F   38 09                  JR   c,next1   
0C71   D6 20                  SUB   " "   
0C73   6F                     LD   l,a   ; index into table
0C74   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0C76   6E                     LD   l,(hl)   ; get low jump address
0C77   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0C79   E9                     JP   (hl)   ; Jump to routine
0C7A                NEXT1:       
0C7A   FE 00                  CP   NUL   ; end of input string?
0C7C   28 03                  JR   z,exit   
0C7E   C3 F9 0B               JP   interpret   ; no, other whitespace, macros?
0C81                EXIT:        
0C81   03                     INC   bc   
0C82   60 69                  LD   hl,bc   
0C84   E9                     JP   (hl)   
0C85                RUN:         
0C85   C1                     POP   bc   
0C86   0B                     DEC   bc   
0C87   DD E9                  JP   (ix)   
0C89                ERROR:       
0C89   CD 85 0C               CALL   run   
0C8C   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQUOTE,"Error ",DQUOTE,".s .",0   
0C99   C3 F9 0B               JP   interpret   
0C9C                BACKSPACE_:      
0C9C   79                     LD   a,c   
0C9D   B0                     OR   b   
0C9E   CA 05 0C               JP   z,interpret2   
0CA1   0B                     DEC   bc   
0CA2   CD BE 0B               CALL   printStr   
0CA5   08 20 08 00            .CSTR   "\b \b"   
0CA9   C3 05 0C               JP   interpret2   
0CAC                             ; edit
0CAC                EDIT_:       
0CAC   CD 85 0C               CALL   run   
0CAF   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0CC1   C3 F9 0B               JP   interpret   
0CC4                REEDIT_:      
0CC4   C3 F9 0B               JP   interpret   
0CC7                PRINTSTACK_:      
0CC7   CD 85 0C               CALL   run   
0CCA   2F 70 6B 00            .CSTR   "/pk"   
0CCE   C3 F9 0B               JP   interpret   
0CD1                             ; editDef:
0CD1                             ;     pop hl                      ; pop ret address
0CD1                             ;     ex (sp),hl                  ; swap with TOS
0CD1                             ;     push hl                     ; dup TOS
0CD1                             ;     ld a,l                      ; a = ident
0CD1                             ;     ld de,TIB                   ; de = start of TIB
0CD1                             ;     ld (vTIBPtr),de             ; update TIB*
0CD1                             ;     push ix                     ; save NEXT
0CD1                             ;     ld ix,editDef0              ; NEXT = editDef0
0CD1                             ;     jp lookupRef                ; convert letter into address
0CD1                             ; editDef0:
0CD1                             ;     ld e,(hl)                   ; de = (hl++)
0CD1                             ;     inc hl
0CD1                             ;     ld d,(hl)
0CD1                             ;     ld a,d                      ; de == 0 ?
0CD1                             ;     or e
0CD1                             ;     jr z,editDef4
0CD1                             ;     ld ix,editDef3              ; NEXT = editDef3
0CD1                             ;     ex de,hl
0CD1                             ;     ld a,(hl)
0CD1                             ;     cp "{"
0CD1                             ;     jr nz,editDef1
0CD1                             ;     jp editBlock0               ; convert letter into address
0CD1                             ; editDef1:
0CD1                             ;     cp "("
0CD1                             ;     jr nz,editDef2
0CD1                             ;     jp editBlock0               ; convert letter into address
0CD1                             ; editDef2:
0CD1                             ;     jp editLambda
0CD1                             ; editDef3:
0CD1                             ;     ld a," "                    ; write assign
0CD1                             ;     call writeChar
0CD1                             ;     pop hl                      ; a = ident
0CD1                             ;     ld a,l
0CD1                             ;     call writeChar
0CD1                             ;     ld a,"="                    ; write assign
0CD1                             ;     call writeChar
0CD1                             ;     ld ix,editDef4              ; NEXT = editDef4
0CD1                             ;     jp printTIB
0CD1                             ; editDef4:
0CD1                             ;     pop ix                      ; restore NEXT
0CD1                             ;     jp (ix)
0CD1                             ; writeChar:
0CD1                             ;     ld de,(vTIBPtr)             ; de = TIB*
0CD1                             ;     ld (de),a                   ; write ident
0CD1                             ;     inc de
0CD1                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0CD1                             ;     ret
0CD1                             ; ; printTIB
0CD1                             ; printTIB:
0CD1                             ;     ld hl,(vTIBPtr)
0CD1                             ;     ld de,TIB
0CD1                             ;     or a
0CD1                             ;     sbc hl,de
0CD1                             ;     jp printTIB2
0CD1                             ; printTIB1:
0CD1                             ;     ld a,(de)
0CD1                             ;     call putchar
0CD1                             ; printTIB2:
0CD1                             ;     ld a,l
0CD1                             ;     or h
0CD1                             ;     jr nz,printTIB1
0CD1                             ;     jp (ix)
0CD1                             ; editBlock:
0CD1                             ;     pop hl                      ; hl = block*
0CD1                             ; editBlock0:
0CD1                             ;     push ix                     ; save next
0CD1                             ;     push hl                     ; push block*
0CD1                             ;     push hl                     ; push block*
0CD1                             ;     ld ix,(editBlock2)
0CD1                             ;     jp blockLength
0CD1                             ; editBlock1:
0CD1                             ;     pop hl                      ; bc = length, (sp) = IP
0CD1                             ;     pop de                      ; de = block*
0CD1                             ;     ld a,l
0CD1                             ;     or h
0CD1                             ;     jr z,editBlock2
0CD1                             ;     push bc
0CD1                             ;     ld bc,hl
0CD1                             ;     ex de,hl                    ; hl = block*
0CD1                             ;     ld de,(vTIBPtr)              ; de = TIB*
0CD1                             ;     ldir                        ; copy block to TIB
0CD1                             ;     ld (vTIBPtr),de              ; save TIB*
0CD1                             ;     pop bc
0CD1                             ; editBlock2:
0CD1                             ;     pop ix                      ; restore next
0CD1                             ;     jp (ix)
0CD1                             ; editLambda:
0CD1                             ;     jp (ix)
0CD1                             ; editArray:
0CD1                             ;     jp (ix)
0CD1                             ; editArglist:
0CD1                             ;     jp (ix)
0CD1                             ; ; blockLength
0CD1                             ; ; addr1 -- length
0CD1                             ; blockLength:
0CD1                             ;     pop hl                      ; block*
0CD1                             ;     push hl                     ; save block*
0CD1                             ;     inc hl                      ; skip first char
0CD1                             ;     ld d,1                      ; increase nesting
0CD1                             ; blockLength1:                   ; Skip to end of definition
0CD1                             ;     ld a,(hl)                   ; Get the next character
0CD1                             ;     inc hl                      ; Point to next character
0CD1                             ;     cp " " + 1                  ; ignore whitespace
0CD1                             ;     jr c,blockLength1
0CD1                             ;     cp ")"
0CD1                             ;     jr z,blockLength4
0CD1                             ;     cp "}"
0CD1                             ;     jr z,blockLength4
0CD1                             ;     cp "]"
0CD1                             ;     jr z,blockLength4
0CD1                             ;     cp "("
0CD1                             ;     jr z,blockLength2
0CD1                             ;     cp "{"
0CD1                             ;     jr z,blockLength2
0CD1                             ;     cp "["
0CD1                             ;     jr z,blockLength2
0CD1                             ;     cp "'"
0CD1                             ;     jr z,blockLength3
0CD1                             ;     cp "`"
0CD1                             ;     jr z,blockLength3
0CD1                             ;     cp DQUOTE
0CD1                             ;     jr z,blockLength3
0CD1                             ;     jr blockLength1
0CD1                             ; blockLength2:
0CD1                             ;     inc d
0CD1                             ;     jr blockLength1
0CD1                             ; blockLength4:
0CD1                             ;     dec d
0CD1                             ;     jr nz, blockLength1         ; get the next element
0CD1                             ; blockLength3:
0CD1                             ;     ld a,$80
0CD1                             ;     xor d
0CD1                             ;     ld d,a
0CD1                             ;     jr nz, blockLength1
0CD1                             ;     pop hl                      ; hl = block*
0CD1                             ;     or a
0CD1                             ;     sbc hl,de
0CD1                             ;     push hl
0CD1                             ;     jp (ix)
0CD1                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0CD1                             ; \a start of stack \#3 depth \b base \$ prompt
0CD1                             ; DW dStack               ; a vS0 start of datastack			
0CD1                             ; DW FALSE                ; b vBase16
0CD1                             ; DW 0                    ; c vTIBPtr an offset to the tib
0CD1                             ; DW 0                    ; d
0CD1                             ; DW 65                   ; e vLastDef "A" last command u defined
0CD1                             ; DW 0                    ; f
0CD1                             ; DW page6                ; g 256 bytes limits
0CD1                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0CD1                          ALIGN   $100   
0D00                TESTSSTART:      
0D00                          ;*Macro unroll:  test "[10 20 30] `[`.s :a:bc{$a/s$c= 0$b=( $a$b%. $b++ $b $c</br )^};^ `]`.s", 0
0D00   31 80 47               LD   SP,STACK   
0D03   CD C5 0B               CALL   init   
0D06   CD 32 46               CALL   execStr   
0D09   5B 31 30 20 32 30 20 33 30 5D 20 60 5B 60 2E 73 20 3A 61 3A 62 63 7B 24 61 2F 73 24 63 3D 20 30 24 62 3D 28 20 24 61 24 62 25 2E 20 24 62 2B 2B 20 24 62 20 24 63 3C 2F 62 72 20 29 5E 7D 3B 5E 20 60 5D 60 2E 73 00 .CSTR   "[10 20 30] `[`.s :a:bc{$a/s$c= 0$b=( $a$b%. $b++ $b $c</br )^};^ `]`.s"   
0D50                          ;*Macro unroll:  expect "[10 20 30] `[`.s :a:bc{$a/s$c= 0$b=( $a$b%. $b++ $b $c</br )^};^ `]`.s",0
0D50   E1                     POP   HL   
0D51   E5                     PUSH   HL   
0D52   11 00 00               LD   DE,0   
0D55   B7                     OR   A   
0D56   ED 52                  SBC   HL,DE   
0D58   7D                     LD   A,L   
0D59   B4                     OR   H   
0D5A   CA F4 0D               JP   Z,expectM_0_2697S50   
0D5D   CD BE 0B               CALL   printStr   
0D60   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 60 5B 60 2E 73 20 3A 61 3A 62 63 7B 24 61 2F 73 24 63 3D 20 30 24 62 3D 28 20 24 61 24 62 25 2E 20 24 62 2B 2B 20 24 62 20 24 63 3C 2F 62 72 20 29 5E 7D 3B 5E 20 60 5D 60 2E 73 00 .CSTR   "Code: ","[10 20 30] `[`.s :a:bc{$a/s$c= 0$b=( $a$b%. $b++ $b $c</br )^};^ `]`.s"   
0DAD   CD BE 0B               CALL   printStr   
0DB0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0DBF   21 00 00               LD   hl,0   
0DC2   E5                     PUSH   hl   
0DC3   CD 85 0C               CALL   run   
0DC6   2E 00                  .CSTR   "."   
0DC8   CD BE 0B               CALL   printStr   
0DCB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0DD8   E1                     POP   hl   
0DD9   E5                     PUSH   hl   
0DDA   E5                     PUSH   hl   
0DDB   CD 85 0C               CALL   run   
0DDE   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0DF2   76                     HALT      
0DF3   00                     .CSTR      
0DF4                EXPECTM_0_2697S50:      
0DF4   E1                     POP   HL   
0DF5                             ; test "{`x` .s}^", 6
0DF5   CD BE 0B               CALL   printStr   
0DF8   44 6F 6E 65 21 00      .CSTR   "Done!"   
0DFE   76                     HALT      
0DFF                             ; 
0DFF                          ;*Macro unroll:  test "/f", false
0DFF   31 80 47               LD   SP,STACK   
0E02   CD C5 0B               CALL   init   
0E05   CD 32 46               CALL   execStr   
0E08   2F 66 00               .CSTR   "/f"   
0E0B                          ;*Macro unroll:  expect "/f",false
0E0B   E1                     POP   HL   
0E0C   E5                     PUSH   HL   
0E0D   11 00 00               LD   DE,false   
0E10   B7                     OR   A   
0E11   ED 52                  SBC   HL,DE   
0E13   7D                     LD   A,L   
0E14   B4                     OR   H   
0E15   CA 6B 0E               JP   Z,expectM_0_2703S50   
0E18   CD BE 0B               CALL   printStr   
0E1B   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
0E24   CD BE 0B               CALL   printStr   
0E27   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0E36   21 00 00               LD   hl,false   
0E39   E5                     PUSH   hl   
0E3A   CD 85 0C               CALL   run   
0E3D   2E 00                  .CSTR   "."   
0E3F   CD BE 0B               CALL   printStr   
0E42   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0E4F   E1                     POP   hl   
0E50   E5                     PUSH   hl   
0E51   E5                     PUSH   hl   
0E52   CD 85 0C               CALL   run   
0E55   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0E69   76                     HALT      
0E6A   00                     .CSTR      
0E6B                EXPECTM_0_2703S50:      
0E6B   E1                     POP   HL   
0E6C                          ;*Macro unroll:  test "/t", true
0E6C   31 80 47               LD   SP,STACK   
0E6F   CD C5 0B               CALL   init   
0E72   CD 32 46               CALL   execStr   
0E75   2F 74 00               .CSTR   "/t"   
0E78                          ;*Macro unroll:  expect "/t",true
0E78   E1                     POP   HL   
0E79   E5                     PUSH   HL   
0E7A   11 FF FF               LD   DE,true   
0E7D   B7                     OR   A   
0E7E   ED 52                  SBC   HL,DE   
0E80   7D                     LD   A,L   
0E81   B4                     OR   H   
0E82   CA D8 0E               JP   Z,expectM_0_2704S50   
0E85   CD BE 0B               CALL   printStr   
0E88   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
0E91   CD BE 0B               CALL   printStr   
0E94   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0EA3   21 FF FF               LD   hl,true   
0EA6   E5                     PUSH   hl   
0EA7   CD 85 0C               CALL   run   
0EAA   2E 00                  .CSTR   "."   
0EAC   CD BE 0B               CALL   printStr   
0EAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0EBC   E1                     POP   hl   
0EBD   E5                     PUSH   hl   
0EBE   E5                     PUSH   hl   
0EBF   CD 85 0C               CALL   run   
0EC2   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0ED6   76                     HALT      
0ED7   00                     .CSTR      
0ED8                EXPECTM_0_2704S50:      
0ED8   E1                     POP   HL   
0ED9                          ;*Macro unroll:  test "1", 1
0ED9   31 80 47               LD   SP,STACK   
0EDC   CD C5 0B               CALL   init   
0EDF   CD 32 46               CALL   execStr   
0EE2   31 00                  .CSTR   "1"   
0EE4                          ;*Macro unroll:  expect "1",1
0EE4   E1                     POP   HL   
0EE5   E5                     PUSH   HL   
0EE6   11 01 00               LD   DE,1   
0EE9   B7                     OR   A   
0EEA   ED 52                  SBC   HL,DE   
0EEC   7D                     LD   A,L   
0EED   B4                     OR   H   
0EEE   CA 43 0F               JP   Z,expectM_0_2705S50   
0EF1   CD BE 0B               CALL   printStr   
0EF4   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0EFC   CD BE 0B               CALL   printStr   
0EFF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F0E   21 01 00               LD   hl,1   
0F11   E5                     PUSH   hl   
0F12   CD 85 0C               CALL   run   
0F15   2E 00                  .CSTR   "."   
0F17   CD BE 0B               CALL   printStr   
0F1A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F27   E1                     POP   hl   
0F28   E5                     PUSH   hl   
0F29   E5                     PUSH   hl   
0F2A   CD 85 0C               CALL   run   
0F2D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0F41   76                     HALT      
0F42   00                     .CSTR      
0F43                EXPECTM_0_2705S50:      
0F43   E1                     POP   HL   
0F44                          ;*Macro unroll:  test "2", 2
0F44   31 80 47               LD   SP,STACK   
0F47   CD C5 0B               CALL   init   
0F4A   CD 32 46               CALL   execStr   
0F4D   32 00                  .CSTR   "2"   
0F4F                          ;*Macro unroll:  expect "2",2
0F4F   E1                     POP   HL   
0F50   E5                     PUSH   HL   
0F51   11 02 00               LD   DE,2   
0F54   B7                     OR   A   
0F55   ED 52                  SBC   HL,DE   
0F57   7D                     LD   A,L   
0F58   B4                     OR   H   
0F59   CA AE 0F               JP   Z,expectM_0_2706S50   
0F5C   CD BE 0B               CALL   printStr   
0F5F   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
0F67   CD BE 0B               CALL   printStr   
0F6A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0F79   21 02 00               LD   hl,2   
0F7C   E5                     PUSH   hl   
0F7D   CD 85 0C               CALL   run   
0F80   2E 00                  .CSTR   "."   
0F82   CD BE 0B               CALL   printStr   
0F85   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0F92   E1                     POP   hl   
0F93   E5                     PUSH   hl   
0F94   E5                     PUSH   hl   
0F95   CD 85 0C               CALL   run   
0F98   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
0FAC   76                     HALT      
0FAD   00                     .CSTR      
0FAE                EXPECTM_0_2706S50:      
0FAE   E1                     POP   HL   
0FAF                          ;*Macro unroll:  test "1", 1
0FAF   31 80 47               LD   SP,STACK   
0FB2   CD C5 0B               CALL   init   
0FB5   CD 32 46               CALL   execStr   
0FB8   31 00                  .CSTR   "1"   
0FBA                          ;*Macro unroll:  expect "1",1
0FBA   E1                     POP   HL   
0FBB   E5                     PUSH   HL   
0FBC   11 01 00               LD   DE,1   
0FBF   B7                     OR   A   
0FC0   ED 52                  SBC   HL,DE   
0FC2   7D                     LD   A,L   
0FC3   B4                     OR   H   
0FC4   CA 19 10               JP   Z,expectM_0_2707S50   
0FC7   CD BE 0B               CALL   printStr   
0FCA   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
0FD2   CD BE 0B               CALL   printStr   
0FD5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
0FE4   21 01 00               LD   hl,1   
0FE7   E5                     PUSH   hl   
0FE8   CD 85 0C               CALL   run   
0FEB   2E 00                  .CSTR   "."   
0FED   CD BE 0B               CALL   printStr   
0FF0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
0FFD   E1                     POP   hl   
0FFE   E5                     PUSH   hl   
0FFF   E5                     PUSH   hl   
1000   CD 85 0C               CALL   run   
1003   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1017   76                     HALT      
1018   00                     .CSTR      
1019                EXPECTM_0_2707S50:      
1019   E1                     POP   HL   
101A                          ;*Macro unroll:  test "0", 0
101A   31 80 47               LD   SP,STACK   
101D   CD C5 0B               CALL   init   
1020   CD 32 46               CALL   execStr   
1023   30 00                  .CSTR   "0"   
1025                          ;*Macro unroll:  expect "0",0
1025   E1                     POP   HL   
1026   E5                     PUSH   HL   
1027   11 00 00               LD   DE,0   
102A   B7                     OR   A   
102B   ED 52                  SBC   HL,DE   
102D   7D                     LD   A,L   
102E   B4                     OR   H   
102F   CA 84 10               JP   Z,expectM_0_2708S50   
1032   CD BE 0B               CALL   printStr   
1035   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
103D   CD BE 0B               CALL   printStr   
1040   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
104F   21 00 00               LD   hl,0   
1052   E5                     PUSH   hl   
1053   CD 85 0C               CALL   run   
1056   2E 00                  .CSTR   "."   
1058   CD BE 0B               CALL   printStr   
105B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1068   E1                     POP   hl   
1069   E5                     PUSH   hl   
106A   E5                     PUSH   hl   
106B   CD 85 0C               CALL   run   
106E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1082   76                     HALT      
1083   00                     .CSTR      
1084                EXPECTM_0_2708S50:      
1084   E1                     POP   HL   
1085                          ;*Macro unroll:  test "10", 10
1085   31 80 47               LD   SP,STACK   
1088   CD C5 0B               CALL   init   
108B   CD 32 46               CALL   execStr   
108E   31 30 00               .CSTR   "10"   
1091                          ;*Macro unroll:  expect "10",10
1091   E1                     POP   HL   
1092   E5                     PUSH   HL   
1093   11 0A 00               LD   DE,10   
1096   B7                     OR   A   
1097   ED 52                  SBC   HL,DE   
1099   7D                     LD   A,L   
109A   B4                     OR   H   
109B   CA F1 10               JP   Z,expectM_0_2709S50   
109E   CD BE 0B               CALL   printStr   
10A1   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
10AA   CD BE 0B               CALL   printStr   
10AD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
10BC   21 0A 00               LD   hl,10   
10BF   E5                     PUSH   hl   
10C0   CD 85 0C               CALL   run   
10C3   2E 00                  .CSTR   "."   
10C5   CD BE 0B               CALL   printStr   
10C8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
10D5   E1                     POP   hl   
10D6   E5                     PUSH   hl   
10D7   E5                     PUSH   hl   
10D8   CD 85 0C               CALL   run   
10DB   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
10EF   76                     HALT      
10F0   00                     .CSTR      
10F1                EXPECTM_0_2709S50:      
10F1   E1                     POP   HL   
10F2                          ;*Macro unroll:  test "123", 123
10F2   31 80 47               LD   SP,STACK   
10F5   CD C5 0B               CALL   init   
10F8   CD 32 46               CALL   execStr   
10FB   31 32 33 00            .CSTR   "123"   
10FF                          ;*Macro unroll:  expect "123",123
10FF   E1                     POP   HL   
1100   E5                     PUSH   HL   
1101   11 7B 00               LD   DE,123   
1104   B7                     OR   A   
1105   ED 52                  SBC   HL,DE   
1107   7D                     LD   A,L   
1108   B4                     OR   H   
1109   CA 60 11               JP   Z,expectM_0_2710S50   
110C   CD BE 0B               CALL   printStr   
110F   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
1119   CD BE 0B               CALL   printStr   
111C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
112B   21 7B 00               LD   hl,123   
112E   E5                     PUSH   hl   
112F   CD 85 0C               CALL   run   
1132   2E 00                  .CSTR   "."   
1134   CD BE 0B               CALL   printStr   
1137   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1144   E1                     POP   hl   
1145   E5                     PUSH   hl   
1146   E5                     PUSH   hl   
1147   CD 85 0C               CALL   run   
114A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
115E   76                     HALT      
115F   00                     .CSTR      
1160                EXPECTM_0_2710S50:      
1160   E1                     POP   HL   
1161                          ;*Macro unroll:  test "-1",-1
1161   31 80 47               LD   SP,STACK   
1164   CD C5 0B               CALL   init   
1167   CD 32 46               CALL   execStr   
116A   2D 31 00               .CSTR   "-1"   
116D                          ;*Macro unroll:  expect "-1",-1
116D   E1                     POP   HL   
116E   E5                     PUSH   HL   
116F   11 FF FF               LD   DE,-1   
1172   B7                     OR   A   
1173   ED 52                  SBC   HL,DE   
1175   7D                     LD   A,L   
1176   B4                     OR   H   
1177   CA CD 11               JP   Z,expectM_0_2711S50   
117A   CD BE 0B               CALL   printStr   
117D   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1186   CD BE 0B               CALL   printStr   
1189   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1198   21 FF FF               LD   hl,-1   
119B   E5                     PUSH   hl   
119C   CD 85 0C               CALL   run   
119F   2E 00                  .CSTR   "."   
11A1   CD BE 0B               CALL   printStr   
11A4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
11B1   E1                     POP   hl   
11B2   E5                     PUSH   hl   
11B3   E5                     PUSH   hl   
11B4   CD 85 0C               CALL   run   
11B7   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
11CB   76                     HALT      
11CC   00                     .CSTR      
11CD                EXPECTM_0_2711S50:      
11CD   E1                     POP   HL   
11CE                          ;*Macro unroll:  test "''", 0
11CE   31 80 47               LD   SP,STACK   
11D1   CD C5 0B               CALL   init   
11D4   CD 32 46               CALL   execStr   
11D7   27 27 00               .CSTR   "''"   
11DA                          ;*Macro unroll:  expect "''",0
11DA   E1                     POP   HL   
11DB   E5                     PUSH   HL   
11DC   11 00 00               LD   DE,0   
11DF   B7                     OR   A   
11E0   ED 52                  SBC   HL,DE   
11E2   7D                     LD   A,L   
11E3   B4                     OR   H   
11E4   CA 3A 12               JP   Z,expectM_0_2712S50   
11E7   CD BE 0B               CALL   printStr   
11EA   43 6F 64 65 3A 20 27 27 00 .CSTR   "Code: ","''"   
11F3   CD BE 0B               CALL   printStr   
11F6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1205   21 00 00               LD   hl,0   
1208   E5                     PUSH   hl   
1209   CD 85 0C               CALL   run   
120C   2E 00                  .CSTR   "."   
120E   CD BE 0B               CALL   printStr   
1211   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
121E   E1                     POP   hl   
121F   E5                     PUSH   hl   
1220   E5                     PUSH   hl   
1221   CD 85 0C               CALL   run   
1224   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1238   76                     HALT      
1239   00                     .CSTR      
123A                EXPECTM_0_2712S50:      
123A   E1                     POP   HL   
123B                          ;*Macro unroll:  test "'a'", $61
123B   31 80 47               LD   SP,STACK   
123E   CD C5 0B               CALL   init   
1241   CD 32 46               CALL   execStr   
1244   27 61 27 00            .CSTR   "'a'"   
1248                          ;*Macro unroll:  expect "'a'",$61
1248   E1                     POP   HL   
1249   E5                     PUSH   HL   
124A   11 61 00               LD   DE,$61   
124D   B7                     OR   A   
124E   ED 52                  SBC   HL,DE   
1250   7D                     LD   A,L   
1251   B4                     OR   H   
1252   CA A9 12               JP   Z,expectM_0_2713S50   
1255   CD BE 0B               CALL   printStr   
1258   43 6F 64 65 3A 20 27 61 27 00 .CSTR   "Code: ","'a'"   
1262   CD BE 0B               CALL   printStr   
1265   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1274   21 61 00               LD   hl,$61   
1277   E5                     PUSH   hl   
1278   CD 85 0C               CALL   run   
127B   2E 00                  .CSTR   "."   
127D   CD BE 0B               CALL   printStr   
1280   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
128D   E1                     POP   hl   
128E   E5                     PUSH   hl   
128F   E5                     PUSH   hl   
1290   CD 85 0C               CALL   run   
1293   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
12A7   76                     HALT      
12A8   00                     .CSTR      
12A9                EXPECTM_0_2713S50:      
12A9   E1                     POP   HL   
12AA                          ;*Macro unroll:  test "'\\''", $27
12AA   31 80 47               LD   SP,STACK   
12AD   CD C5 0B               CALL   init   
12B0   CD 32 46               CALL   execStr   
12B3   27 5C 27 27 00         .CSTR   "'\\''"   
12B8                          ;*Macro unroll:  expect "'\\''",$27
12B8   E1                     POP   HL   
12B9   E5                     PUSH   HL   
12BA   11 27 00               LD   DE,$27   
12BD   B7                     OR   A   
12BE   ED 52                  SBC   HL,DE   
12C0   7D                     LD   A,L   
12C1   B4                     OR   H   
12C2   CA 1A 13               JP   Z,expectM_0_2714S50   
12C5   CD BE 0B               CALL   printStr   
12C8   43 6F 64 65 3A 20 27 5C 27 27 00 .CSTR   "Code: ","'\\''"   
12D3   CD BE 0B               CALL   printStr   
12D6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12E5   21 27 00               LD   hl,$27   
12E8   E5                     PUSH   hl   
12E9   CD 85 0C               CALL   run   
12EC   2E 00                  .CSTR   "."   
12EE   CD BE 0B               CALL   printStr   
12F1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12FE   E1                     POP   hl   
12FF   E5                     PUSH   hl   
1300   E5                     PUSH   hl   
1301   CD 85 0C               CALL   run   
1304   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1318   76                     HALT      
1319   00                     .CSTR      
131A                EXPECTM_0_2714S50:      
131A   E1                     POP   HL   
131B                          ;*Macro unroll:  test "#10", $10
131B   31 80 47               LD   SP,STACK   
131E   CD C5 0B               CALL   init   
1321   CD 32 46               CALL   execStr   
1324   23 31 30 00            .CSTR   "#10"   
1328                          ;*Macro unroll:  expect "#10",$10
1328   E1                     POP   HL   
1329   E5                     PUSH   HL   
132A   11 10 00               LD   DE,$10   
132D   B7                     OR   A   
132E   ED 52                  SBC   HL,DE   
1330   7D                     LD   A,L   
1331   B4                     OR   H   
1332   CA 89 13               JP   Z,expectM_0_2715S50   
1335   CD BE 0B               CALL   printStr   
1338   43 6F 64 65 3A 20 23 31 30 00 .CSTR   "Code: ","#10"   
1342   CD BE 0B               CALL   printStr   
1345   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1354   21 10 00               LD   hl,$10   
1357   E5                     PUSH   hl   
1358   CD 85 0C               CALL   run   
135B   2E 00                  .CSTR   "."   
135D   CD BE 0B               CALL   printStr   
1360   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
136D   E1                     POP   hl   
136E   E5                     PUSH   hl   
136F   E5                     PUSH   hl   
1370   CD 85 0C               CALL   run   
1373   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1387   76                     HALT      
1388   00                     .CSTR      
1389                EXPECTM_0_2715S50:      
1389   E1                     POP   HL   
138A                          ;*Macro unroll:  test "#FF", $FF
138A   31 80 47               LD   SP,STACK   
138D   CD C5 0B               CALL   init   
1390   CD 32 46               CALL   execStr   
1393   23 46 46 00            .CSTR   "#FF"   
1397                          ;*Macro unroll:  expect "#FF",$FF
1397   E1                     POP   HL   
1398   E5                     PUSH   HL   
1399   11 FF 00               LD   DE,$FF   
139C   B7                     OR   A   
139D   ED 52                  SBC   HL,DE   
139F   7D                     LD   A,L   
13A0   B4                     OR   H   
13A1   CA F8 13               JP   Z,expectM_0_2716S50   
13A4   CD BE 0B               CALL   printStr   
13A7   43 6F 64 65 3A 20 23 46 46 00 .CSTR   "Code: ","#FF"   
13B1   CD BE 0B               CALL   printStr   
13B4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13C3   21 FF 00               LD   hl,$FF   
13C6   E5                     PUSH   hl   
13C7   CD 85 0C               CALL   run   
13CA   2E 00                  .CSTR   "."   
13CC   CD BE 0B               CALL   printStr   
13CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13DC   E1                     POP   hl   
13DD   E5                     PUSH   hl   
13DE   E5                     PUSH   hl   
13DF   CD 85 0C               CALL   run   
13E2   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
13F6   76                     HALT      
13F7   00                     .CSTR      
13F8                EXPECTM_0_2716S50:      
13F8   E1                     POP   HL   
13F9                          ;*Macro unroll:  test "-1 2 +",1
13F9   31 80 47               LD   SP,STACK   
13FC   CD C5 0B               CALL   init   
13FF   CD 32 46               CALL   execStr   
1402   2D 31 20 32 20 2B 00   .CSTR   "-1 2 +"   
1409                          ;*Macro unroll:  expect "-1 2 +",1
1409   E1                     POP   HL   
140A   E5                     PUSH   HL   
140B   11 01 00               LD   DE,1   
140E   B7                     OR   A   
140F   ED 52                  SBC   HL,DE   
1411   7D                     LD   A,L   
1412   B4                     OR   H   
1413   CA 6D 14               JP   Z,expectM_0_2717S50   
1416   CD BE 0B               CALL   printStr   
1419   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1426   CD BE 0B               CALL   printStr   
1429   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1438   21 01 00               LD   hl,1   
143B   E5                     PUSH   hl   
143C   CD 85 0C               CALL   run   
143F   2E 00                  .CSTR   "."   
1441   CD BE 0B               CALL   printStr   
1444   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1451   E1                     POP   hl   
1452   E5                     PUSH   hl   
1453   E5                     PUSH   hl   
1454   CD 85 0C               CALL   run   
1457   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
146B   76                     HALT      
146C   00                     .CSTR      
146D                EXPECTM_0_2717S50:      
146D   E1                     POP   HL   
146E                          ;*Macro unroll:  test "-1 1 +",0
146E   31 80 47               LD   SP,STACK   
1471   CD C5 0B               CALL   init   
1474   CD 32 46               CALL   execStr   
1477   2D 31 20 31 20 2B 00   .CSTR   "-1 1 +"   
147E                          ;*Macro unroll:  expect "-1 1 +",0
147E   E1                     POP   HL   
147F   E5                     PUSH   HL   
1480   11 00 00               LD   DE,0   
1483   B7                     OR   A   
1484   ED 52                  SBC   HL,DE   
1486   7D                     LD   A,L   
1487   B4                     OR   H   
1488   CA E2 14               JP   Z,expectM_0_2718S50   
148B   CD BE 0B               CALL   printStr   
148E   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
149B   CD BE 0B               CALL   printStr   
149E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14AD   21 00 00               LD   hl,0   
14B0   E5                     PUSH   hl   
14B1   CD 85 0C               CALL   run   
14B4   2E 00                  .CSTR   "."   
14B6   CD BE 0B               CALL   printStr   
14B9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14C6   E1                     POP   hl   
14C7   E5                     PUSH   hl   
14C8   E5                     PUSH   hl   
14C9   CD 85 0C               CALL   run   
14CC   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
14E0   76                     HALT      
14E1   00                     .CSTR      
14E2                EXPECTM_0_2718S50:      
14E2   E1                     POP   HL   
14E3                          ;*Macro unroll:  test "1 2 +", 3
14E3   31 80 47               LD   SP,STACK   
14E6   CD C5 0B               CALL   init   
14E9   CD 32 46               CALL   execStr   
14EC   31 20 32 20 2B 00      .CSTR   "1 2 +"   
14F2                          ;*Macro unroll:  expect "1 2 +",3
14F2   E1                     POP   HL   
14F3   E5                     PUSH   HL   
14F4   11 03 00               LD   DE,3   
14F7   B7                     OR   A   
14F8   ED 52                  SBC   HL,DE   
14FA   7D                     LD   A,L   
14FB   B4                     OR   H   
14FC   CA 55 15               JP   Z,expectM_0_2719S50   
14FF   CD BE 0B               CALL   printStr   
1502   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
150E   CD BE 0B               CALL   printStr   
1511   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1520   21 03 00               LD   hl,3   
1523   E5                     PUSH   hl   
1524   CD 85 0C               CALL   run   
1527   2E 00                  .CSTR   "."   
1529   CD BE 0B               CALL   printStr   
152C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1539   E1                     POP   hl   
153A   E5                     PUSH   hl   
153B   E5                     PUSH   hl   
153C   CD 85 0C               CALL   run   
153F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1553   76                     HALT      
1554   00                     .CSTR      
1555                EXPECTM_0_2719S50:      
1555   E1                     POP   HL   
1556                          ;*Macro unroll:  test "4 1 2 +", 3
1556   31 80 47               LD   SP,STACK   
1559   CD C5 0B               CALL   init   
155C   CD 32 46               CALL   execStr   
155F   34 20 31 20 32 20 2B 00 .CSTR   "4 1 2 +"   
1567                          ;*Macro unroll:  expect "4 1 2 +",3
1567   E1                     POP   HL   
1568   E5                     PUSH   HL   
1569   11 03 00               LD   DE,3   
156C   B7                     OR   A   
156D   ED 52                  SBC   HL,DE   
156F   7D                     LD   A,L   
1570   B4                     OR   H   
1571   CA CC 15               JP   Z,expectM_0_2720S50   
1574   CD BE 0B               CALL   printStr   
1577   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1585   CD BE 0B               CALL   printStr   
1588   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1597   21 03 00               LD   hl,3   
159A   E5                     PUSH   hl   
159B   CD 85 0C               CALL   run   
159E   2E 00                  .CSTR   "."   
15A0   CD BE 0B               CALL   printStr   
15A3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15B0   E1                     POP   hl   
15B1   E5                     PUSH   hl   
15B2   E5                     PUSH   hl   
15B3   CD 85 0C               CALL   run   
15B6   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
15CA   76                     HALT      
15CB   00                     .CSTR      
15CC                EXPECTM_0_2720S50:      
15CC   E1                     POP   HL   
15CD                          ;*Macro unroll:  test "123 456 +", 123+456
15CD   31 80 47               LD   SP,STACK   
15D0   CD C5 0B               CALL   init   
15D3   CD 32 46               CALL   execStr   
15D6   31 32 33 20 34 35 36 20 2B 00 .CSTR   "123 456 +"   
15E0                          ;*Macro unroll:  expect "123 456 +",123+456
15E0   E1                     POP   HL   
15E1   E5                     PUSH   HL   
15E2   11 43 02               LD   DE,123+456   
15E5   B7                     OR   A   
15E6   ED 52                  SBC   HL,DE   
15E8   7D                     LD   A,L   
15E9   B4                     OR   H   
15EA   CA 47 16               JP   Z,expectM_0_2721S50   
15ED   CD BE 0B               CALL   printStr   
15F0   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1600   CD BE 0B               CALL   printStr   
1603   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1612   21 43 02               LD   hl,123+456   
1615   E5                     PUSH   hl   
1616   CD 85 0C               CALL   run   
1619   2E 00                  .CSTR   "."   
161B   CD BE 0B               CALL   printStr   
161E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
162B   E1                     POP   hl   
162C   E5                     PUSH   hl   
162D   E5                     PUSH   hl   
162E   CD 85 0C               CALL   run   
1631   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1645   76                     HALT      
1646   00                     .CSTR      
1647                EXPECTM_0_2721S50:      
1647   E1                     POP   HL   
1648                          ;*Macro unroll:  test "64 128 +", 64+128
1648   31 80 47               LD   SP,STACK   
164B   CD C5 0B               CALL   init   
164E   CD 32 46               CALL   execStr   
1651   36 34 20 31 32 38 20 2B 00 .CSTR   "64 128 +"   
165A                          ;*Macro unroll:  expect "64 128 +",64+128
165A   E1                     POP   HL   
165B   E5                     PUSH   HL   
165C   11 C0 00               LD   DE,64+128   
165F   B7                     OR   A   
1660   ED 52                  SBC   HL,DE   
1662   7D                     LD   A,L   
1663   B4                     OR   H   
1664   CA C0 16               JP   Z,expectM_0_2722S50   
1667   CD BE 0B               CALL   printStr   
166A   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1679   CD BE 0B               CALL   printStr   
167C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
168B   21 C0 00               LD   hl,64+128   
168E   E5                     PUSH   hl   
168F   CD 85 0C               CALL   run   
1692   2E 00                  .CSTR   "."   
1694   CD BE 0B               CALL   printStr   
1697   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16A4   E1                     POP   hl   
16A5   E5                     PUSH   hl   
16A6   E5                     PUSH   hl   
16A7   CD 85 0C               CALL   run   
16AA   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
16BE   76                     HALT      
16BF   00                     .CSTR      
16C0                EXPECTM_0_2722S50:      
16C0   E1                     POP   HL   
16C1                          ;*Macro unroll:  test "1 2 +", 3
16C1   31 80 47               LD   SP,STACK   
16C4   CD C5 0B               CALL   init   
16C7   CD 32 46               CALL   execStr   
16CA   31 20 32 20 2B 00      .CSTR   "1 2 +"   
16D0                          ;*Macro unroll:  expect "1 2 +",3
16D0   E1                     POP   HL   
16D1   E5                     PUSH   HL   
16D2   11 03 00               LD   DE,3   
16D5   B7                     OR   A   
16D6   ED 52                  SBC   HL,DE   
16D8   7D                     LD   A,L   
16D9   B4                     OR   H   
16DA   CA 33 17               JP   Z,expectM_0_2723S50   
16DD   CD BE 0B               CALL   printStr   
16E0   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
16EC   CD BE 0B               CALL   printStr   
16EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
16FE   21 03 00               LD   hl,3   
1701   E5                     PUSH   hl   
1702   CD 85 0C               CALL   run   
1705   2E 00                  .CSTR   "."   
1707   CD BE 0B               CALL   printStr   
170A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1717   E1                     POP   hl   
1718   E5                     PUSH   hl   
1719   E5                     PUSH   hl   
171A   CD 85 0C               CALL   run   
171D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1731   76                     HALT      
1732   00                     .CSTR      
1733                EXPECTM_0_2723S50:      
1733   E1                     POP   HL   
1734                          ;*Macro unroll:  test "1a= a++ a",2
1734   31 80 47               LD   SP,STACK   
1737   CD C5 0B               CALL   init   
173A   CD 32 46               CALL   execStr   
173D   31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "1a= a++ a"   
1747                          ;*Macro unroll:  expect "1a= a++ a",2
1747   E1                     POP   HL   
1748   E5                     PUSH   HL   
1749   11 02 00               LD   DE,2   
174C   B7                     OR   A   
174D   ED 52                  SBC   HL,DE   
174F   7D                     LD   A,L   
1750   B4                     OR   H   
1751   CA AE 17               JP   Z,expectM_0_2724S50   
1754   CD BE 0B               CALL   printStr   
1757   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1767   CD BE 0B               CALL   printStr   
176A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1779   21 02 00               LD   hl,2   
177C   E5                     PUSH   hl   
177D   CD 85 0C               CALL   run   
1780   2E 00                  .CSTR   "."   
1782   CD BE 0B               CALL   printStr   
1785   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1792   E1                     POP   hl   
1793   E5                     PUSH   hl   
1794   E5                     PUSH   hl   
1795   CD 85 0C               CALL   run   
1798   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
17AC   76                     HALT      
17AD   00                     .CSTR      
17AE                EXPECTM_0_2724S50:      
17AE   E1                     POP   HL   
17AF                          ;*Macro unroll:  test "-1 -1 -",0
17AF   31 80 47               LD   SP,STACK   
17B2   CD C5 0B               CALL   init   
17B5   CD 32 46               CALL   execStr   
17B8   2D 31 20 2D 31 20 2D 00 .CSTR   "-1 -1 -"   
17C0                          ;*Macro unroll:  expect "-1 -1 -",0
17C0   E1                     POP   HL   
17C1   E5                     PUSH   HL   
17C2   11 00 00               LD   DE,0   
17C5   B7                     OR   A   
17C6   ED 52                  SBC   HL,DE   
17C8   7D                     LD   A,L   
17C9   B4                     OR   H   
17CA   CA 25 18               JP   Z,expectM_0_2725S50   
17CD   CD BE 0B               CALL   printStr   
17D0   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
17DE   CD BE 0B               CALL   printStr   
17E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17F0   21 00 00               LD   hl,0   
17F3   E5                     PUSH   hl   
17F4   CD 85 0C               CALL   run   
17F7   2E 00                  .CSTR   "."   
17F9   CD BE 0B               CALL   printStr   
17FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1809   E1                     POP   hl   
180A   E5                     PUSH   hl   
180B   E5                     PUSH   hl   
180C   CD 85 0C               CALL   run   
180F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1823   76                     HALT      
1824   00                     .CSTR      
1825                EXPECTM_0_2725S50:      
1825   E1                     POP   HL   
1826                          ;*Macro unroll:  test "5 3 -", 2
1826   31 80 47               LD   SP,STACK   
1829   CD C5 0B               CALL   init   
182C   CD 32 46               CALL   execStr   
182F   35 20 33 20 2D 00      .CSTR   "5 3 -"   
1835                          ;*Macro unroll:  expect "5 3 -",2
1835   E1                     POP   HL   
1836   E5                     PUSH   HL   
1837   11 02 00               LD   DE,2   
183A   B7                     OR   A   
183B   ED 52                  SBC   HL,DE   
183D   7D                     LD   A,L   
183E   B4                     OR   H   
183F   CA 98 18               JP   Z,expectM_0_2726S50   
1842   CD BE 0B               CALL   printStr   
1845   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1851   CD BE 0B               CALL   printStr   
1854   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1863   21 02 00               LD   hl,2   
1866   E5                     PUSH   hl   
1867   CD 85 0C               CALL   run   
186A   2E 00                  .CSTR   "."   
186C   CD BE 0B               CALL   printStr   
186F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
187C   E1                     POP   hl   
187D   E5                     PUSH   hl   
187E   E5                     PUSH   hl   
187F   CD 85 0C               CALL   run   
1882   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1896   76                     HALT      
1897   00                     .CSTR      
1898                EXPECTM_0_2726S50:      
1898   E1                     POP   HL   
1899                          ;*Macro unroll:  test "2 1 -",1
1899   31 80 47               LD   SP,STACK   
189C   CD C5 0B               CALL   init   
189F   CD 32 46               CALL   execStr   
18A2   32 20 31 20 2D 00      .CSTR   "2 1 -"   
18A8                          ;*Macro unroll:  expect "2 1 -",1
18A8   E1                     POP   HL   
18A9   E5                     PUSH   HL   
18AA   11 01 00               LD   DE,1   
18AD   B7                     OR   A   
18AE   ED 52                  SBC   HL,DE   
18B0   7D                     LD   A,L   
18B1   B4                     OR   H   
18B2   CA 0B 19               JP   Z,expectM_0_2727S50   
18B5   CD BE 0B               CALL   printStr   
18B8   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
18C4   CD BE 0B               CALL   printStr   
18C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18D6   21 01 00               LD   hl,1   
18D9   E5                     PUSH   hl   
18DA   CD 85 0C               CALL   run   
18DD   2E 00                  .CSTR   "."   
18DF   CD BE 0B               CALL   printStr   
18E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18EF   E1                     POP   hl   
18F0   E5                     PUSH   hl   
18F1   E5                     PUSH   hl   
18F2   CD 85 0C               CALL   run   
18F5   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1909   76                     HALT      
190A   00                     .CSTR      
190B                EXPECTM_0_2727S50:      
190B   E1                     POP   HL   
190C                          ;*Macro unroll:  test "3a= a-- a",2
190C   31 80 47               LD   SP,STACK   
190F   CD C5 0B               CALL   init   
1912   CD 32 46               CALL   execStr   
1915   33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "3a= a-- a"   
191F                          ;*Macro unroll:  expect "3a= a-- a",2
191F   E1                     POP   HL   
1920   E5                     PUSH   HL   
1921   11 02 00               LD   DE,2   
1924   B7                     OR   A   
1925   ED 52                  SBC   HL,DE   
1927   7D                     LD   A,L   
1928   B4                     OR   H   
1929   CA 86 19               JP   Z,expectM_0_2728S50   
192C   CD BE 0B               CALL   printStr   
192F   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
193F   CD BE 0B               CALL   printStr   
1942   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1951   21 02 00               LD   hl,2   
1954   E5                     PUSH   hl   
1955   CD 85 0C               CALL   run   
1958   2E 00                  .CSTR   "."   
195A   CD BE 0B               CALL   printStr   
195D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
196A   E1                     POP   hl   
196B   E5                     PUSH   hl   
196C   E5                     PUSH   hl   
196D   CD 85 0C               CALL   run   
1970   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1984   76                     HALT      
1985   00                     .CSTR      
1986                EXPECTM_0_2728S50:      
1986   E1                     POP   HL   
1987                          ;*Macro unroll:  test "3 5 &", 1
1987   31 80 47               LD   SP,STACK   
198A   CD C5 0B               CALL   init   
198D   CD 32 46               CALL   execStr   
1990   33 20 35 20 26 00      .CSTR   "3 5 &"   
1996                          ;*Macro unroll:  expect "3 5 &",1
1996   E1                     POP   HL   
1997   E5                     PUSH   HL   
1998   11 01 00               LD   DE,1   
199B   B7                     OR   A   
199C   ED 52                  SBC   HL,DE   
199E   7D                     LD   A,L   
199F   B4                     OR   H   
19A0   CA F9 19               JP   Z,expectM_0_2729S50   
19A3   CD BE 0B               CALL   printStr   
19A6   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
19B2   CD BE 0B               CALL   printStr   
19B5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19C4   21 01 00               LD   hl,1   
19C7   E5                     PUSH   hl   
19C8   CD 85 0C               CALL   run   
19CB   2E 00                  .CSTR   "."   
19CD   CD BE 0B               CALL   printStr   
19D0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19DD   E1                     POP   hl   
19DE   E5                     PUSH   hl   
19DF   E5                     PUSH   hl   
19E0   CD 85 0C               CALL   run   
19E3   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
19F7   76                     HALT      
19F8   00                     .CSTR      
19F9                EXPECTM_0_2729S50:      
19F9   E1                     POP   HL   
19FA                          ;*Macro unroll:  test "3 5 |", 7
19FA   31 80 47               LD   SP,STACK   
19FD   CD C5 0B               CALL   init   
1A00   CD 32 46               CALL   execStr   
1A03   33 20 35 20 7C 00      .CSTR   "3 5 |"   
1A09                          ;*Macro unroll:  expect "3 5 |",7
1A09   E1                     POP   HL   
1A0A   E5                     PUSH   HL   
1A0B   11 07 00               LD   DE,7   
1A0E   B7                     OR   A   
1A0F   ED 52                  SBC   HL,DE   
1A11   7D                     LD   A,L   
1A12   B4                     OR   H   
1A13   CA 6C 1A               JP   Z,expectM_0_2730S50   
1A16   CD BE 0B               CALL   printStr   
1A19   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1A25   CD BE 0B               CALL   printStr   
1A28   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A37   21 07 00               LD   hl,7   
1A3A   E5                     PUSH   hl   
1A3B   CD 85 0C               CALL   run   
1A3E   2E 00                  .CSTR   "."   
1A40   CD BE 0B               CALL   printStr   
1A43   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A50   E1                     POP   hl   
1A51   E5                     PUSH   hl   
1A52   E5                     PUSH   hl   
1A53   CD 85 0C               CALL   run   
1A56   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1A6A   76                     HALT      
1A6B   00                     .CSTR      
1A6C                EXPECTM_0_2730S50:      
1A6C   E1                     POP   HL   
1A6D                          ;*Macro unroll:  test "3 5 /x", 6
1A6D   31 80 47               LD   SP,STACK   
1A70   CD C5 0B               CALL   init   
1A73   CD 32 46               CALL   execStr   
1A76   33 20 35 20 2F 78 00   .CSTR   "3 5 /x"   
1A7D                          ;*Macro unroll:  expect "3 5 /x",6
1A7D   E1                     POP   HL   
1A7E   E5                     PUSH   HL   
1A7F   11 06 00               LD   DE,6   
1A82   B7                     OR   A   
1A83   ED 52                  SBC   HL,DE   
1A85   7D                     LD   A,L   
1A86   B4                     OR   H   
1A87   CA E1 1A               JP   Z,expectM_0_2731S50   
1A8A   CD BE 0B               CALL   printStr   
1A8D   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1A9A   CD BE 0B               CALL   printStr   
1A9D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AAC   21 06 00               LD   hl,6   
1AAF   E5                     PUSH   hl   
1AB0   CD 85 0C               CALL   run   
1AB3   2E 00                  .CSTR   "."   
1AB5   CD BE 0B               CALL   printStr   
1AB8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1AC5   E1                     POP   hl   
1AC6   E5                     PUSH   hl   
1AC7   E5                     PUSH   hl   
1AC8   CD 85 0C               CALL   run   
1ACB   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1ADF   76                     HALT      
1AE0   00                     .CSTR      
1AE1                EXPECTM_0_2731S50:      
1AE1   E1                     POP   HL   
1AE2                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1AE2   31 80 47               LD   SP,STACK   
1AE5   CD C5 0B               CALL   init   
1AE8   CD 32 46               CALL   execStr   
1AEB   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "3a= 5 a/x a= a"   
1AFA                          ;*Macro unroll:  expect "3a= 5 a/x a= a",6
1AFA   E1                     POP   HL   
1AFB   E5                     PUSH   HL   
1AFC   11 06 00               LD   DE,6   
1AFF   B7                     OR   A   
1B00   ED 52                  SBC   HL,DE   
1B02   7D                     LD   A,L   
1B03   B4                     OR   H   
1B04   CA 66 1B               JP   Z,expectM_0_2732S50   
1B07   CD BE 0B               CALL   printStr   
1B0A   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1B1F   CD BE 0B               CALL   printStr   
1B22   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B31   21 06 00               LD   hl,6   
1B34   E5                     PUSH   hl   
1B35   CD 85 0C               CALL   run   
1B38   2E 00                  .CSTR   "."   
1B3A   CD BE 0B               CALL   printStr   
1B3D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B4A   E1                     POP   hl   
1B4B   E5                     PUSH   hl   
1B4C   E5                     PUSH   hl   
1B4D   CD 85 0C               CALL   run   
1B50   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1B64   76                     HALT      
1B65   00                     .CSTR      
1B66                EXPECTM_0_2732S50:      
1B66   E1                     POP   HL   
1B67                          ;*Macro unroll:  test "2 3 *", 6
1B67   31 80 47               LD   SP,STACK   
1B6A   CD C5 0B               CALL   init   
1B6D   CD 32 46               CALL   execStr   
1B70   32 20 33 20 2A 00      .CSTR   "2 3 *"   
1B76                          ;*Macro unroll:  expect "2 3 *",6
1B76   E1                     POP   HL   
1B77   E5                     PUSH   HL   
1B78   11 06 00               LD   DE,6   
1B7B   B7                     OR   A   
1B7C   ED 52                  SBC   HL,DE   
1B7E   7D                     LD   A,L   
1B7F   B4                     OR   H   
1B80   CA D9 1B               JP   Z,expectM_0_2733S50   
1B83   CD BE 0B               CALL   printStr   
1B86   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
1B92   CD BE 0B               CALL   printStr   
1B95   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BA4   21 06 00               LD   hl,6   
1BA7   E5                     PUSH   hl   
1BA8   CD 85 0C               CALL   run   
1BAB   2E 00                  .CSTR   "."   
1BAD   CD BE 0B               CALL   printStr   
1BB0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BBD   E1                     POP   hl   
1BBE   E5                     PUSH   hl   
1BBF   E5                     PUSH   hl   
1BC0   CD 85 0C               CALL   run   
1BC3   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1BD7   76                     HALT      
1BD8   00                     .CSTR      
1BD9                EXPECTM_0_2733S50:      
1BD9   E1                     POP   HL   
1BDA                          ;*Macro unroll:  test "1 2 3 + *", 5
1BDA   31 80 47               LD   SP,STACK   
1BDD   CD C5 0B               CALL   init   
1BE0   CD 32 46               CALL   execStr   
1BE3   31 20 32 20 33 20 2B 20 2A 00 .CSTR   "1 2 3 + *"   
1BED                          ;*Macro unroll:  expect "1 2 3 + *",5
1BED   E1                     POP   HL   
1BEE   E5                     PUSH   HL   
1BEF   11 05 00               LD   DE,5   
1BF2   B7                     OR   A   
1BF3   ED 52                  SBC   HL,DE   
1BF5   7D                     LD   A,L   
1BF6   B4                     OR   H   
1BF7   CA 54 1C               JP   Z,expectM_0_2734S50   
1BFA   CD BE 0B               CALL   printStr   
1BFD   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
1C0D   CD BE 0B               CALL   printStr   
1C10   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C1F   21 05 00               LD   hl,5   
1C22   E5                     PUSH   hl   
1C23   CD 85 0C               CALL   run   
1C26   2E 00                  .CSTR   "."   
1C28   CD BE 0B               CALL   printStr   
1C2B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C38   E1                     POP   hl   
1C39   E5                     PUSH   hl   
1C3A   E5                     PUSH   hl   
1C3B   CD 85 0C               CALL   run   
1C3E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1C52   76                     HALT      
1C53   00                     .CSTR      
1C54                EXPECTM_0_2734S50:      
1C54   E1                     POP   HL   
1C55                          ;*Macro unroll:  test "7 3 /", 2
1C55   31 80 47               LD   SP,STACK   
1C58   CD C5 0B               CALL   init   
1C5B   CD 32 46               CALL   execStr   
1C5E   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1C64                          ;*Macro unroll:  expect "7 3 /",2
1C64   E1                     POP   HL   
1C65   E5                     PUSH   HL   
1C66   11 02 00               LD   DE,2   
1C69   B7                     OR   A   
1C6A   ED 52                  SBC   HL,DE   
1C6C   7D                     LD   A,L   
1C6D   B4                     OR   H   
1C6E   CA C7 1C               JP   Z,expectM_0_2735S50   
1C71   CD BE 0B               CALL   printStr   
1C74   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1C80   CD BE 0B               CALL   printStr   
1C83   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C92   21 02 00               LD   hl,2   
1C95   E5                     PUSH   hl   
1C96   CD 85 0C               CALL   run   
1C99   2E 00                  .CSTR   "."   
1C9B   CD BE 0B               CALL   printStr   
1C9E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CAB   E1                     POP   hl   
1CAC   E5                     PUSH   hl   
1CAD   E5                     PUSH   hl   
1CAE   CD 85 0C               CALL   run   
1CB1   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1CC5   76                     HALT      
1CC6   00                     .CSTR      
1CC7                EXPECTM_0_2735S50:      
1CC7   E1                     POP   HL   
1CC8                          ;*Macro unroll:  test "7 3 / _", 1
1CC8   31 80 47               LD   SP,STACK   
1CCB   CD C5 0B               CALL   init   
1CCE   CD 32 46               CALL   execStr   
1CD1   37 20 33 20 2F 20 5F 00 .CSTR   "7 3 / _"   
1CD9                          ;*Macro unroll:  expect "7 3 / _",1
1CD9   E1                     POP   HL   
1CDA   E5                     PUSH   HL   
1CDB   11 01 00               LD   DE,1   
1CDE   B7                     OR   A   
1CDF   ED 52                  SBC   HL,DE   
1CE1   7D                     LD   A,L   
1CE2   B4                     OR   H   
1CE3   CA 3E 1D               JP   Z,expectM_0_2736S50   
1CE6   CD BE 0B               CALL   printStr   
1CE9   43 6F 64 65 3A 20 37 20 33 20 2F 20 5F 00 .CSTR   "Code: ","7 3 / _"   
1CF7   CD BE 0B               CALL   printStr   
1CFA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D09   21 01 00               LD   hl,1   
1D0C   E5                     PUSH   hl   
1D0D   CD 85 0C               CALL   run   
1D10   2E 00                  .CSTR   "."   
1D12   CD BE 0B               CALL   printStr   
1D15   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D22   E1                     POP   hl   
1D23   E5                     PUSH   hl   
1D24   E5                     PUSH   hl   
1D25   CD 85 0C               CALL   run   
1D28   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1D3C   76                     HALT      
1D3D   00                     .CSTR      
1D3E                EXPECTM_0_2736S50:      
1D3E   E1                     POP   HL   
1D3F                          ;*Macro unroll:  test "7 3 /", 2
1D3F   31 80 47               LD   SP,STACK   
1D42   CD C5 0B               CALL   init   
1D45   CD 32 46               CALL   execStr   
1D48   37 20 33 20 2F 00      .CSTR   "7 3 /"   
1D4E                          ;*Macro unroll:  expect "7 3 /",2
1D4E   E1                     POP   HL   
1D4F   E5                     PUSH   HL   
1D50   11 02 00               LD   DE,2   
1D53   B7                     OR   A   
1D54   ED 52                  SBC   HL,DE   
1D56   7D                     LD   A,L   
1D57   B4                     OR   H   
1D58   CA B1 1D               JP   Z,expectM_0_2737S50   
1D5B   CD BE 0B               CALL   printStr   
1D5E   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
1D6A   CD BE 0B               CALL   printStr   
1D6D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D7C   21 02 00               LD   hl,2   
1D7F   E5                     PUSH   hl   
1D80   CD 85 0C               CALL   run   
1D83   2E 00                  .CSTR   "."   
1D85   CD BE 0B               CALL   printStr   
1D88   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D95   E1                     POP   hl   
1D96   E5                     PUSH   hl   
1D97   E5                     PUSH   hl   
1D98   CD 85 0C               CALL   run   
1D9B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1DAF   76                     HALT      
1DB0   00                     .CSTR      
1DB1                EXPECTM_0_2737S50:      
1DB1   E1                     POP   HL   
1DB2                          ;*Macro unroll:  test "2 3 ==", FALSE
1DB2   31 80 47               LD   SP,STACK   
1DB5   CD C5 0B               CALL   init   
1DB8   CD 32 46               CALL   execStr   
1DBB   32 20 33 20 3D 3D 00   .CSTR   "2 3 =="   
1DC2                          ;*Macro unroll:  expect "2 3 ==",FALSE
1DC2   E1                     POP   HL   
1DC3   E5                     PUSH   HL   
1DC4   11 00 00               LD   DE,FALSE   
1DC7   B7                     OR   A   
1DC8   ED 52                  SBC   HL,DE   
1DCA   7D                     LD   A,L   
1DCB   B4                     OR   H   
1DCC   CA 26 1E               JP   Z,expectM_0_2738S50   
1DCF   CD BE 0B               CALL   printStr   
1DD2   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
1DDF   CD BE 0B               CALL   printStr   
1DE2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1DF1   21 00 00               LD   hl,FALSE   
1DF4   E5                     PUSH   hl   
1DF5   CD 85 0C               CALL   run   
1DF8   2E 00                  .CSTR   "."   
1DFA   CD BE 0B               CALL   printStr   
1DFD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E0A   E1                     POP   hl   
1E0B   E5                     PUSH   hl   
1E0C   E5                     PUSH   hl   
1E0D   CD 85 0C               CALL   run   
1E10   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1E24   76                     HALT      
1E25   00                     .CSTR      
1E26                EXPECTM_0_2738S50:      
1E26   E1                     POP   HL   
1E27                          ;*Macro unroll:  test "3 3 ==", TRUE
1E27   31 80 47               LD   SP,STACK   
1E2A   CD C5 0B               CALL   init   
1E2D   CD 32 46               CALL   execStr   
1E30   33 20 33 20 3D 3D 00   .CSTR   "3 3 =="   
1E37                          ;*Macro unroll:  expect "3 3 ==",TRUE
1E37   E1                     POP   HL   
1E38   E5                     PUSH   HL   
1E39   11 FF FF               LD   DE,TRUE   
1E3C   B7                     OR   A   
1E3D   ED 52                  SBC   HL,DE   
1E3F   7D                     LD   A,L   
1E40   B4                     OR   H   
1E41   CA 9B 1E               JP   Z,expectM_0_2739S50   
1E44   CD BE 0B               CALL   printStr   
1E47   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
1E54   CD BE 0B               CALL   printStr   
1E57   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E66   21 FF FF               LD   hl,TRUE   
1E69   E5                     PUSH   hl   
1E6A   CD 85 0C               CALL   run   
1E6D   2E 00                  .CSTR   "."   
1E6F   CD BE 0B               CALL   printStr   
1E72   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E7F   E1                     POP   hl   
1E80   E5                     PUSH   hl   
1E81   E5                     PUSH   hl   
1E82   CD 85 0C               CALL   run   
1E85   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1E99   76                     HALT      
1E9A   00                     .CSTR      
1E9B                EXPECTM_0_2739S50:      
1E9B   E1                     POP   HL   
1E9C                          ;*Macro unroll:  test "1 2 <", TRUE
1E9C   31 80 47               LD   SP,STACK   
1E9F   CD C5 0B               CALL   init   
1EA2   CD 32 46               CALL   execStr   
1EA5   31 20 32 20 3C 00      .CSTR   "1 2 <"   
1EAB                          ;*Macro unroll:  expect "1 2 <",TRUE
1EAB   E1                     POP   HL   
1EAC   E5                     PUSH   HL   
1EAD   11 FF FF               LD   DE,TRUE   
1EB0   B7                     OR   A   
1EB1   ED 52                  SBC   HL,DE   
1EB3   7D                     LD   A,L   
1EB4   B4                     OR   H   
1EB5   CA 0E 1F               JP   Z,expectM_0_2740S50   
1EB8   CD BE 0B               CALL   printStr   
1EBB   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
1EC7   CD BE 0B               CALL   printStr   
1ECA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1ED9   21 FF FF               LD   hl,TRUE   
1EDC   E5                     PUSH   hl   
1EDD   CD 85 0C               CALL   run   
1EE0   2E 00                  .CSTR   "."   
1EE2   CD BE 0B               CALL   printStr   
1EE5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1EF2   E1                     POP   hl   
1EF3   E5                     PUSH   hl   
1EF4   E5                     PUSH   hl   
1EF5   CD 85 0C               CALL   run   
1EF8   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1F0C   76                     HALT      
1F0D   00                     .CSTR      
1F0E                EXPECTM_0_2740S50:      
1F0E   E1                     POP   HL   
1F0F                          ;*Macro unroll:  test "2 1 <", FALSE
1F0F   31 80 47               LD   SP,STACK   
1F12   CD C5 0B               CALL   init   
1F15   CD 32 46               CALL   execStr   
1F18   32 20 31 20 3C 00      .CSTR   "2 1 <"   
1F1E                          ;*Macro unroll:  expect "2 1 <",FALSE
1F1E   E1                     POP   HL   
1F1F   E5                     PUSH   HL   
1F20   11 00 00               LD   DE,FALSE   
1F23   B7                     OR   A   
1F24   ED 52                  SBC   HL,DE   
1F26   7D                     LD   A,L   
1F27   B4                     OR   H   
1F28   CA 81 1F               JP   Z,expectM_0_2741S50   
1F2B   CD BE 0B               CALL   printStr   
1F2E   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
1F3A   CD BE 0B               CALL   printStr   
1F3D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F4C   21 00 00               LD   hl,FALSE   
1F4F   E5                     PUSH   hl   
1F50   CD 85 0C               CALL   run   
1F53   2E 00                  .CSTR   "."   
1F55   CD BE 0B               CALL   printStr   
1F58   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F65   E1                     POP   hl   
1F66   E5                     PUSH   hl   
1F67   E5                     PUSH   hl   
1F68   CD 85 0C               CALL   run   
1F6B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1F7F   76                     HALT      
1F80   00                     .CSTR      
1F81                EXPECTM_0_2741S50:      
1F81   E1                     POP   HL   
1F82                          ;*Macro unroll:  test "2 3 <", TRUE
1F82   31 80 47               LD   SP,STACK   
1F85   CD C5 0B               CALL   init   
1F88   CD 32 46               CALL   execStr   
1F8B   32 20 33 20 3C 00      .CSTR   "2 3 <"   
1F91                          ;*Macro unroll:  expect "2 3 <",TRUE
1F91   E1                     POP   HL   
1F92   E5                     PUSH   HL   
1F93   11 FF FF               LD   DE,TRUE   
1F96   B7                     OR   A   
1F97   ED 52                  SBC   HL,DE   
1F99   7D                     LD   A,L   
1F9A   B4                     OR   H   
1F9B   CA F4 1F               JP   Z,expectM_0_2742S50   
1F9E   CD BE 0B               CALL   printStr   
1FA1   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
1FAD   CD BE 0B               CALL   printStr   
1FB0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FBF   21 FF FF               LD   hl,TRUE   
1FC2   E5                     PUSH   hl   
1FC3   CD 85 0C               CALL   run   
1FC6   2E 00                  .CSTR   "."   
1FC8   CD BE 0B               CALL   printStr   
1FCB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FD8   E1                     POP   hl   
1FD9   E5                     PUSH   hl   
1FDA   E5                     PUSH   hl   
1FDB   CD 85 0C               CALL   run   
1FDE   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
1FF2   76                     HALT      
1FF3   00                     .CSTR      
1FF4                EXPECTM_0_2742S50:      
1FF4   E1                     POP   HL   
1FF5                          ;*Macro unroll:  test "3 3 <", FALSE
1FF5   31 80 47               LD   SP,STACK   
1FF8   CD C5 0B               CALL   init   
1FFB   CD 32 46               CALL   execStr   
1FFE   33 20 33 20 3C 00      .CSTR   "3 3 <"   
2004                          ;*Macro unroll:  expect "3 3 <",FALSE
2004   E1                     POP   HL   
2005   E5                     PUSH   HL   
2006   11 00 00               LD   DE,FALSE   
2009   B7                     OR   A   
200A   ED 52                  SBC   HL,DE   
200C   7D                     LD   A,L   
200D   B4                     OR   H   
200E   CA 67 20               JP   Z,expectM_0_2743S50   
2011   CD BE 0B               CALL   printStr   
2014   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
2020   CD BE 0B               CALL   printStr   
2023   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2032   21 00 00               LD   hl,FALSE   
2035   E5                     PUSH   hl   
2036   CD 85 0C               CALL   run   
2039   2E 00                  .CSTR   "."   
203B   CD BE 0B               CALL   printStr   
203E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
204B   E1                     POP   hl   
204C   E5                     PUSH   hl   
204D   E5                     PUSH   hl   
204E   CD 85 0C               CALL   run   
2051   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2065   76                     HALT      
2066   00                     .CSTR      
2067                EXPECTM_0_2743S50:      
2067   E1                     POP   HL   
2068                          ;*Macro unroll:  test "1 2 >", FALSE
2068   31 80 47               LD   SP,STACK   
206B   CD C5 0B               CALL   init   
206E   CD 32 46               CALL   execStr   
2071   31 20 32 20 3E 00      .CSTR   "1 2 >"   
2077                          ;*Macro unroll:  expect "1 2 >",FALSE
2077   E1                     POP   HL   
2078   E5                     PUSH   HL   
2079   11 00 00               LD   DE,FALSE   
207C   B7                     OR   A   
207D   ED 52                  SBC   HL,DE   
207F   7D                     LD   A,L   
2080   B4                     OR   H   
2081   CA DA 20               JP   Z,expectM_0_2744S50   
2084   CD BE 0B               CALL   printStr   
2087   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2093   CD BE 0B               CALL   printStr   
2096   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20A5   21 00 00               LD   hl,FALSE   
20A8   E5                     PUSH   hl   
20A9   CD 85 0C               CALL   run   
20AC   2E 00                  .CSTR   "."   
20AE   CD BE 0B               CALL   printStr   
20B1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20BE   E1                     POP   hl   
20BF   E5                     PUSH   hl   
20C0   E5                     PUSH   hl   
20C1   CD 85 0C               CALL   run   
20C4   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
20D8   76                     HALT      
20D9   00                     .CSTR      
20DA                EXPECTM_0_2744S50:      
20DA   E1                     POP   HL   
20DB                          ;*Macro unroll:  test "2 1 >", TRUE
20DB   31 80 47               LD   SP,STACK   
20DE   CD C5 0B               CALL   init   
20E1   CD 32 46               CALL   execStr   
20E4   32 20 31 20 3E 00      .CSTR   "2 1 >"   
20EA                          ;*Macro unroll:  expect "2 1 >",TRUE
20EA   E1                     POP   HL   
20EB   E5                     PUSH   HL   
20EC   11 FF FF               LD   DE,TRUE   
20EF   B7                     OR   A   
20F0   ED 52                  SBC   HL,DE   
20F2   7D                     LD   A,L   
20F3   B4                     OR   H   
20F4   CA 4D 21               JP   Z,expectM_0_2745S50   
20F7   CD BE 0B               CALL   printStr   
20FA   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
2106   CD BE 0B               CALL   printStr   
2109   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2118   21 FF FF               LD   hl,TRUE   
211B   E5                     PUSH   hl   
211C   CD 85 0C               CALL   run   
211F   2E 00                  .CSTR   "."   
2121   CD BE 0B               CALL   printStr   
2124   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2131   E1                     POP   hl   
2132   E5                     PUSH   hl   
2133   E5                     PUSH   hl   
2134   CD 85 0C               CALL   run   
2137   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
214B   76                     HALT      
214C   00                     .CSTR      
214D                EXPECTM_0_2745S50:      
214D   E1                     POP   HL   
214E                          ;*Macro unroll:  test "3 3 >", FALSE
214E   31 80 47               LD   SP,STACK   
2151   CD C5 0B               CALL   init   
2154   CD 32 46               CALL   execStr   
2157   33 20 33 20 3E 00      .CSTR   "3 3 >"   
215D                          ;*Macro unroll:  expect "3 3 >",FALSE
215D   E1                     POP   HL   
215E   E5                     PUSH   HL   
215F   11 00 00               LD   DE,FALSE   
2162   B7                     OR   A   
2163   ED 52                  SBC   HL,DE   
2165   7D                     LD   A,L   
2166   B4                     OR   H   
2167   CA C0 21               JP   Z,expectM_0_2746S50   
216A   CD BE 0B               CALL   printStr   
216D   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
2179   CD BE 0B               CALL   printStr   
217C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
218B   21 00 00               LD   hl,FALSE   
218E   E5                     PUSH   hl   
218F   CD 85 0C               CALL   run   
2192   2E 00                  .CSTR   "."   
2194   CD BE 0B               CALL   printStr   
2197   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21A4   E1                     POP   hl   
21A5   E5                     PUSH   hl   
21A6   E5                     PUSH   hl   
21A7   CD 85 0C               CALL   run   
21AA   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
21BE   76                     HALT      
21BF   00                     .CSTR      
21C0                EXPECTM_0_2746S50:      
21C0   E1                     POP   HL   
21C1                          ;*Macro unroll:  test "4 3 >", TRUE
21C1   31 80 47               LD   SP,STACK   
21C4   CD C5 0B               CALL   init   
21C7   CD 32 46               CALL   execStr   
21CA   34 20 33 20 3E 00      .CSTR   "4 3 >"   
21D0                          ;*Macro unroll:  expect "4 3 >",TRUE
21D0   E1                     POP   HL   
21D1   E5                     PUSH   HL   
21D2   11 FF FF               LD   DE,TRUE   
21D5   B7                     OR   A   
21D6   ED 52                  SBC   HL,DE   
21D8   7D                     LD   A,L   
21D9   B4                     OR   H   
21DA   CA 33 22               JP   Z,expectM_0_2747S50   
21DD   CD BE 0B               CALL   printStr   
21E0   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
21EC   CD BE 0B               CALL   printStr   
21EF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21FE   21 FF FF               LD   hl,TRUE   
2201   E5                     PUSH   hl   
2202   CD 85 0C               CALL   run   
2205   2E 00                  .CSTR   "."   
2207   CD BE 0B               CALL   printStr   
220A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2217   E1                     POP   hl   
2218   E5                     PUSH   hl   
2219   E5                     PUSH   hl   
221A   CD 85 0C               CALL   run   
221D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2231   76                     HALT      
2232   00                     .CSTR      
2233                EXPECTM_0_2747S50:      
2233   E1                     POP   HL   
2234                          ;*Macro unroll:  test "2 2 <=", TRUE
2234   31 80 47               LD   SP,STACK   
2237   CD C5 0B               CALL   init   
223A   CD 32 46               CALL   execStr   
223D   32 20 32 20 3C 3D 00   .CSTR   "2 2 <="   
2244                          ;*Macro unroll:  expect "2 2 <=",TRUE
2244   E1                     POP   HL   
2245   E5                     PUSH   HL   
2246   11 FF FF               LD   DE,TRUE   
2249   B7                     OR   A   
224A   ED 52                  SBC   HL,DE   
224C   7D                     LD   A,L   
224D   B4                     OR   H   
224E   CA A8 22               JP   Z,expectM_0_2748S50   
2251   CD BE 0B               CALL   printStr   
2254   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2261   CD BE 0B               CALL   printStr   
2264   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2273   21 FF FF               LD   hl,TRUE   
2276   E5                     PUSH   hl   
2277   CD 85 0C               CALL   run   
227A   2E 00                  .CSTR   "."   
227C   CD BE 0B               CALL   printStr   
227F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
228C   E1                     POP   hl   
228D   E5                     PUSH   hl   
228E   E5                     PUSH   hl   
228F   CD 85 0C               CALL   run   
2292   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
22A6   76                     HALT      
22A7   00                     .CSTR      
22A8                EXPECTM_0_2748S50:      
22A8   E1                     POP   HL   
22A9                          ;*Macro unroll:  test "2 2 >=", TRUE
22A9   31 80 47               LD   SP,STACK   
22AC   CD C5 0B               CALL   init   
22AF   CD 32 46               CALL   execStr   
22B2   32 20 32 20 3E 3D 00   .CSTR   "2 2 >="   
22B9                          ;*Macro unroll:  expect "2 2 >=",TRUE
22B9   E1                     POP   HL   
22BA   E5                     PUSH   HL   
22BB   11 FF FF               LD   DE,TRUE   
22BE   B7                     OR   A   
22BF   ED 52                  SBC   HL,DE   
22C1   7D                     LD   A,L   
22C2   B4                     OR   H   
22C3   CA 1D 23               JP   Z,expectM_0_2749S50   
22C6   CD BE 0B               CALL   printStr   
22C9   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
22D6   CD BE 0B               CALL   printStr   
22D9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22E8   21 FF FF               LD   hl,TRUE   
22EB   E5                     PUSH   hl   
22EC   CD 85 0C               CALL   run   
22EF   2E 00                  .CSTR   "."   
22F1   CD BE 0B               CALL   printStr   
22F4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2301   E1                     POP   hl   
2302   E5                     PUSH   hl   
2303   E5                     PUSH   hl   
2304   CD 85 0C               CALL   run   
2307   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
231B   76                     HALT      
231C   00                     .CSTR      
231D                EXPECTM_0_2749S50:      
231D   E1                     POP   HL   
231E                          ;*Macro unroll:  test "3 1 <<", 6
231E   31 80 47               LD   SP,STACK   
2321   CD C5 0B               CALL   init   
2324   CD 32 46               CALL   execStr   
2327   33 20 31 20 3C 3C 00   .CSTR   "3 1 <<"   
232E                          ;*Macro unroll:  expect "3 1 <<",6
232E   E1                     POP   HL   
232F   E5                     PUSH   HL   
2330   11 06 00               LD   DE,6   
2333   B7                     OR   A   
2334   ED 52                  SBC   HL,DE   
2336   7D                     LD   A,L   
2337   B4                     OR   H   
2338   CA 92 23               JP   Z,expectM_0_2750S50   
233B   CD BE 0B               CALL   printStr   
233E   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
234B   CD BE 0B               CALL   printStr   
234E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
235D   21 06 00               LD   hl,6   
2360   E5                     PUSH   hl   
2361   CD 85 0C               CALL   run   
2364   2E 00                  .CSTR   "."   
2366   CD BE 0B               CALL   printStr   
2369   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2376   E1                     POP   hl   
2377   E5                     PUSH   hl   
2378   E5                     PUSH   hl   
2379   CD 85 0C               CALL   run   
237C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2390   76                     HALT      
2391   00                     .CSTR      
2392                EXPECTM_0_2750S50:      
2392   E1                     POP   HL   
2393                          ;*Macro unroll:  test "10 1 >>", 5
2393   31 80 47               LD   SP,STACK   
2396   CD C5 0B               CALL   init   
2399   CD 32 46               CALL   execStr   
239C   31 30 20 31 20 3E 3E 00 .CSTR   "10 1 >>"   
23A4                          ;*Macro unroll:  expect "10 1 >>",5
23A4   E1                     POP   HL   
23A5   E5                     PUSH   HL   
23A6   11 05 00               LD   DE,5   
23A9   B7                     OR   A   
23AA   ED 52                  SBC   HL,DE   
23AC   7D                     LD   A,L   
23AD   B4                     OR   H   
23AE   CA 09 24               JP   Z,expectM_0_2751S50   
23B1   CD BE 0B               CALL   printStr   
23B4   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
23C2   CD BE 0B               CALL   printStr   
23C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23D4   21 05 00               LD   hl,5   
23D7   E5                     PUSH   hl   
23D8   CD 85 0C               CALL   run   
23DB   2E 00                  .CSTR   "."   
23DD   CD BE 0B               CALL   printStr   
23E0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23ED   E1                     POP   hl   
23EE   E5                     PUSH   hl   
23EF   E5                     PUSH   hl   
23F0   CD 85 0C               CALL   run   
23F3   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2407   76                     HALT      
2408   00                     .CSTR      
2409                EXPECTM_0_2751S50:      
2409   E1                     POP   HL   
240A                          ;*Macro unroll:  test "1 x = x", 1
240A   31 80 47               LD   SP,STACK   
240D   CD C5 0B               CALL   init   
2410   CD 32 46               CALL   execStr   
2413   31 20 78 20 3D 20 78 00 .CSTR   "1 x = x"   
241B                          ;*Macro unroll:  expect "1 x = x",1
241B   E1                     POP   HL   
241C   E5                     PUSH   HL   
241D   11 01 00               LD   DE,1   
2420   B7                     OR   A   
2421   ED 52                  SBC   HL,DE   
2423   7D                     LD   A,L   
2424   B4                     OR   H   
2425   CA 80 24               JP   Z,expectM_0_2752S50   
2428   CD BE 0B               CALL   printStr   
242B   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2439   CD BE 0B               CALL   printStr   
243C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
244B   21 01 00               LD   hl,1   
244E   E5                     PUSH   hl   
244F   CD 85 0C               CALL   run   
2452   2E 00                  .CSTR   "."   
2454   CD BE 0B               CALL   printStr   
2457   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2464   E1                     POP   hl   
2465   E5                     PUSH   hl   
2466   E5                     PUSH   hl   
2467   CD 85 0C               CALL   run   
246A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
247E   76                     HALT      
247F   00                     .CSTR      
2480                EXPECTM_0_2752S50:      
2480   E1                     POP   HL   
2481                          ;*Macro unroll:  test "1{}^", 1
2481   31 80 47               LD   SP,STACK   
2484   CD C5 0B               CALL   init   
2487   CD 32 46               CALL   execStr   
248A   31 7B 7D 5E 00         .CSTR   "1{}^"   
248F                          ;*Macro unroll:  expect "1{}^",1
248F   E1                     POP   HL   
2490   E5                     PUSH   HL   
2491   11 01 00               LD   DE,1   
2494   B7                     OR   A   
2495   ED 52                  SBC   HL,DE   
2497   7D                     LD   A,L   
2498   B4                     OR   H   
2499   CA F1 24               JP   Z,expectM_0_2753S50   
249C   CD BE 0B               CALL   printStr   
249F   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
24AA   CD BE 0B               CALL   printStr   
24AD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24BC   21 01 00               LD   hl,1   
24BF   E5                     PUSH   hl   
24C0   CD 85 0C               CALL   run   
24C3   2E 00                  .CSTR   "."   
24C5   CD BE 0B               CALL   printStr   
24C8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24D5   E1                     POP   hl   
24D6   E5                     PUSH   hl   
24D7   E5                     PUSH   hl   
24D8   CD 85 0C               CALL   run   
24DB   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
24EF   76                     HALT      
24F0   00                     .CSTR      
24F1                EXPECTM_0_2753S50:      
24F1   E1                     POP   HL   
24F2                          ;*Macro unroll:  test "{1}^", 1
24F2   31 80 47               LD   SP,STACK   
24F5   CD C5 0B               CALL   init   
24F8   CD 32 46               CALL   execStr   
24FB   7B 31 7D 5E 00         .CSTR   "{1}^"   
2500                          ;*Macro unroll:  expect "{1}^",1
2500   E1                     POP   HL   
2501   E5                     PUSH   HL   
2502   11 01 00               LD   DE,1   
2505   B7                     OR   A   
2506   ED 52                  SBC   HL,DE   
2508   7D                     LD   A,L   
2509   B4                     OR   H   
250A   CA 62 25               JP   Z,expectM_0_2754S50   
250D   CD BE 0B               CALL   printStr   
2510   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
251B   CD BE 0B               CALL   printStr   
251E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
252D   21 01 00               LD   hl,1   
2530   E5                     PUSH   hl   
2531   CD 85 0C               CALL   run   
2534   2E 00                  .CSTR   "."   
2536   CD BE 0B               CALL   printStr   
2539   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2546   E1                     POP   hl   
2547   E5                     PUSH   hl   
2548   E5                     PUSH   hl   
2549   CD 85 0C               CALL   run   
254C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2560   76                     HALT      
2561   00                     .CSTR      
2562                EXPECTM_0_2754S50:      
2562   E1                     POP   HL   
2563                          ;*Macro unroll:  test "{{1}^}^", 1
2563   31 80 47               LD   SP,STACK   
2566   CD C5 0B               CALL   init   
2569   CD 32 46               CALL   execStr   
256C   7B 7B 31 7D 5E 7D 5E 00 .CSTR   "{{1}^}^"   
2574                          ;*Macro unroll:  expect "{{1}^}^",1
2574   E1                     POP   HL   
2575   E5                     PUSH   HL   
2576   11 01 00               LD   DE,1   
2579   B7                     OR   A   
257A   ED 52                  SBC   HL,DE   
257C   7D                     LD   A,L   
257D   B4                     OR   H   
257E   CA D9 25               JP   Z,expectM_0_2755S50   
2581   CD BE 0B               CALL   printStr   
2584   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2592   CD BE 0B               CALL   printStr   
2595   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
25A4   21 01 00               LD   hl,1   
25A7   E5                     PUSH   hl   
25A8   CD 85 0C               CALL   run   
25AB   2E 00                  .CSTR   "."   
25AD   CD BE 0B               CALL   printStr   
25B0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25BD   E1                     POP   hl   
25BE   E5                     PUSH   hl   
25BF   E5                     PUSH   hl   
25C0   CD 85 0C               CALL   run   
25C3   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
25D7   76                     HALT      
25D8   00                     .CSTR      
25D9                EXPECTM_0_2755S50:      
25D9   E1                     POP   HL   
25DA                          ;*Macro unroll:  test "{{{1}^}^}^", 1
25DA   31 80 47               LD   SP,STACK   
25DD   CD C5 0B               CALL   init   
25E0   CD 32 46               CALL   execStr   
25E3   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "{{{1}^}^}^"   
25EE                          ;*Macro unroll:  expect "{{{1}^}^}^",1
25EE   E1                     POP   HL   
25EF   E5                     PUSH   HL   
25F0   11 01 00               LD   DE,1   
25F3   B7                     OR   A   
25F4   ED 52                  SBC   HL,DE   
25F6   7D                     LD   A,L   
25F7   B4                     OR   H   
25F8   CA 56 26               JP   Z,expectM_0_2756S50   
25FB   CD BE 0B               CALL   printStr   
25FE   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
260F   CD BE 0B               CALL   printStr   
2612   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2621   21 01 00               LD   hl,1   
2624   E5                     PUSH   hl   
2625   CD 85 0C               CALL   run   
2628   2E 00                  .CSTR   "."   
262A   CD BE 0B               CALL   printStr   
262D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
263A   E1                     POP   hl   
263B   E5                     PUSH   hl   
263C   E5                     PUSH   hl   
263D   CD 85 0C               CALL   run   
2640   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2654   76                     HALT      
2655   00                     .CSTR      
2656                EXPECTM_0_2756S50:      
2656   E1                     POP   HL   
2657                          ;*Macro unroll:  test "5 /f{10} ?", 5
2657   31 80 47               LD   SP,STACK   
265A   CD C5 0B               CALL   init   
265D   CD 32 46               CALL   execStr   
2660   35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "5 /f{10} ?"   
266B                          ;*Macro unroll:  expect "5 /f{10} ?",5
266B   E1                     POP   HL   
266C   E5                     PUSH   HL   
266D   11 05 00               LD   DE,5   
2670   B7                     OR   A   
2671   ED 52                  SBC   HL,DE   
2673   7D                     LD   A,L   
2674   B4                     OR   H   
2675   CA D3 26               JP   Z,expectM_0_2757S50   
2678   CD BE 0B               CALL   printStr   
267B   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
268C   CD BE 0B               CALL   printStr   
268F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
269E   21 05 00               LD   hl,5   
26A1   E5                     PUSH   hl   
26A2   CD 85 0C               CALL   run   
26A5   2E 00                  .CSTR   "."   
26A7   CD BE 0B               CALL   printStr   
26AA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
26B7   E1                     POP   hl   
26B8   E5                     PUSH   hl   
26B9   E5                     PUSH   hl   
26BA   CD 85 0C               CALL   run   
26BD   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
26D1   76                     HALT      
26D2   00                     .CSTR      
26D3                EXPECTM_0_2757S50:      
26D3   E1                     POP   HL   
26D4                          ;*Macro unroll:  test "5 /t{10} ? +", 15
26D4   31 80 47               LD   SP,STACK   
26D7   CD C5 0B               CALL   init   
26DA   CD 32 46               CALL   execStr   
26DD   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "5 /t{10} ? +"   
26EA                          ;*Macro unroll:  expect "5 /t{10} ? +",15
26EA   E1                     POP   HL   
26EB   E5                     PUSH   HL   
26EC   11 0F 00               LD   DE,15   
26EF   B7                     OR   A   
26F0   ED 52                  SBC   HL,DE   
26F2   7D                     LD   A,L   
26F3   B4                     OR   H   
26F4   CA 54 27               JP   Z,expectM_0_2758S50   
26F7   CD BE 0B               CALL   printStr   
26FA   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
270D   CD BE 0B               CALL   printStr   
2710   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
271F   21 0F 00               LD   hl,15   
2722   E5                     PUSH   hl   
2723   CD 85 0C               CALL   run   
2726   2E 00                  .CSTR   "."   
2728   CD BE 0B               CALL   printStr   
272B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2738   E1                     POP   hl   
2739   E5                     PUSH   hl   
273A   E5                     PUSH   hl   
273B   CD 85 0C               CALL   run   
273E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2752   76                     HALT      
2753   00                     .CSTR      
2754                EXPECTM_0_2758S50:      
2754   E1                     POP   HL   
2755                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2755   31 80 47               LD   SP,STACK   
2758   CD C5 0B               CALL   init   
275B   CD 32 46               CALL   execStr   
275E   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /f{10}{20} ?? +"   
2770                          ;*Macro unroll:  expect "1 /f{10}{20} ?? +",21
2770   E1                     POP   HL   
2771   E5                     PUSH   HL   
2772   11 15 00               LD   DE,21   
2775   B7                     OR   A   
2776   ED 52                  SBC   HL,DE   
2778   7D                     LD   A,L   
2779   B4                     OR   H   
277A   CA DF 27               JP   Z,expectM_0_2759S50   
277D   CD BE 0B               CALL   printStr   
2780   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
2798   CD BE 0B               CALL   printStr   
279B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27AA   21 15 00               LD   hl,21   
27AD   E5                     PUSH   hl   
27AE   CD 85 0C               CALL   run   
27B1   2E 00                  .CSTR   "."   
27B3   CD BE 0B               CALL   printStr   
27B6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27C3   E1                     POP   hl   
27C4   E5                     PUSH   hl   
27C5   E5                     PUSH   hl   
27C6   CD 85 0C               CALL   run   
27C9   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
27DD   76                     HALT      
27DE   00                     .CSTR      
27DF                EXPECTM_0_2759S50:      
27DF   E1                     POP   HL   
27E0                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
27E0   31 80 47               LD   SP,STACK   
27E3   CD C5 0B               CALL   init   
27E6   CD 32 46               CALL   execStr   
27E9   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "1 /t{10}{20} ?? +"   
27FB                          ;*Macro unroll:  expect "1 /t{10}{20} ?? +",11
27FB   E1                     POP   HL   
27FC   E5                     PUSH   HL   
27FD   11 0B 00               LD   DE,11   
2800   B7                     OR   A   
2801   ED 52                  SBC   HL,DE   
2803   7D                     LD   A,L   
2804   B4                     OR   H   
2805   CA 6A 28               JP   Z,expectM_0_2760S50   
2808   CD BE 0B               CALL   printStr   
280B   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
2823   CD BE 0B               CALL   printStr   
2826   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2835   21 0B 00               LD   hl,11   
2838   E5                     PUSH   hl   
2839   CD 85 0C               CALL   run   
283C   2E 00                  .CSTR   "."   
283E   CD BE 0B               CALL   printStr   
2841   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
284E   E1                     POP   hl   
284F   E5                     PUSH   hl   
2850   E5                     PUSH   hl   
2851   CD 85 0C               CALL   run   
2854   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2868   76                     HALT      
2869   00                     .CSTR      
286A                EXPECTM_0_2760S50:      
286A   E1                     POP   HL   
286B                          ;*Macro unroll:  test ": -2%", $0000
286B   31 80 47               LD   SP,STACK   
286E   CD C5 0B               CALL   init   
2871   CD 32 46               CALL   execStr   
2874   3A 20 2D 32 25 00      .CSTR   ": -2%"   
287A                          ;*Macro unroll:  expect ": -2%",$0000
287A   E1                     POP   HL   
287B   E5                     PUSH   HL   
287C   11 00 00               LD   DE,$0000   
287F   B7                     OR   A   
2880   ED 52                  SBC   HL,DE   
2882   7D                     LD   A,L   
2883   B4                     OR   H   
2884   CA DD 28               JP   Z,expectM_0_2761S50   
2887   CD BE 0B               CALL   printStr   
288A   43 6F 64 65 3A 20 3A 20 2D 32 25 00 .CSTR   "Code: ",": -2%"   
2896   CD BE 0B               CALL   printStr   
2899   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28A8   21 00 00               LD   hl,$0000   
28AB   E5                     PUSH   hl   
28AC   CD 85 0C               CALL   run   
28AF   2E 00                  .CSTR   "."   
28B1   CD BE 0B               CALL   printStr   
28B4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28C1   E1                     POP   hl   
28C2   E5                     PUSH   hl   
28C3   E5                     PUSH   hl   
28C4   CD 85 0C               CALL   run   
28C7   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
28DB   76                     HALT      
28DC   00                     .CSTR      
28DD                EXPECTM_0_2761S50:      
28DD   E1                     POP   HL   
28DE                          ;*Macro unroll:  test ":a -1%", $0001
28DE   31 80 47               LD   SP,STACK   
28E1   CD C5 0B               CALL   init   
28E4   CD 32 46               CALL   execStr   
28E7   3A 61 20 2D 31 25 00   .CSTR   ":a -1%"   
28EE                          ;*Macro unroll:  expect ":a -1%",$0001
28EE   E1                     POP   HL   
28EF   E5                     PUSH   HL   
28F0   11 01 00               LD   DE,$0001   
28F3   B7                     OR   A   
28F4   ED 52                  SBC   HL,DE   
28F6   7D                     LD   A,L   
28F7   B4                     OR   H   
28F8   CA 52 29               JP   Z,expectM_0_2762S50   
28FB   CD BE 0B               CALL   printStr   
28FE   43 6F 64 65 3A 20 3A 61 20 2D 31 25 00 .CSTR   "Code: ",":a -1%"   
290B   CD BE 0B               CALL   printStr   
290E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
291D   21 01 00               LD   hl,$0001   
2920   E5                     PUSH   hl   
2921   CD 85 0C               CALL   run   
2924   2E 00                  .CSTR   "."   
2926   CD BE 0B               CALL   printStr   
2929   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2936   E1                     POP   hl   
2937   E5                     PUSH   hl   
2938   E5                     PUSH   hl   
2939   CD 85 0C               CALL   run   
293C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2950   76                     HALT      
2951   00                     .CSTR      
2952                EXPECTM_0_2762S50:      
2952   E1                     POP   HL   
2953                          ;*Macro unroll:  test ":a: -1%", $0001
2953   31 80 47               LD   SP,STACK   
2956   CD C5 0B               CALL   init   
2959   CD 32 46               CALL   execStr   
295C   3A 61 3A 20 2D 31 25 00 .CSTR   ":a: -1%"   
2964                          ;*Macro unroll:  expect ":a: -1%",$0001
2964   E1                     POP   HL   
2965   E5                     PUSH   HL   
2966   11 01 00               LD   DE,$0001   
2969   B7                     OR   A   
296A   ED 52                  SBC   HL,DE   
296C   7D                     LD   A,L   
296D   B4                     OR   H   
296E   CA C9 29               JP   Z,expectM_0_2763S50   
2971   CD BE 0B               CALL   printStr   
2974   43 6F 64 65 3A 20 3A 61 3A 20 2D 31 25 00 .CSTR   "Code: ",":a: -1%"   
2982   CD BE 0B               CALL   printStr   
2985   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2994   21 01 00               LD   hl,$0001   
2997   E5                     PUSH   hl   
2998   CD 85 0C               CALL   run   
299B   2E 00                  .CSTR   "."   
299D   CD BE 0B               CALL   printStr   
29A0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29AD   E1                     POP   hl   
29AE   E5                     PUSH   hl   
29AF   E5                     PUSH   hl   
29B0   CD 85 0C               CALL   run   
29B3   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
29C7   76                     HALT      
29C8   00                     .CSTR      
29C9                EXPECTM_0_2763S50:      
29C9   E1                     POP   HL   
29CA                          ;*Macro unroll:  test ":a:b -1%", $0102
29CA   31 80 47               LD   SP,STACK   
29CD   CD C5 0B               CALL   init   
29D0   CD 32 46               CALL   execStr   
29D3   3A 61 3A 62 20 2D 31 25 00 .CSTR   ":a:b -1%"   
29DC                          ;*Macro unroll:  expect ":a:b -1%",$0102
29DC   E1                     POP   HL   
29DD   E5                     PUSH   HL   
29DE   11 02 01               LD   DE,$0102   
29E1   B7                     OR   A   
29E2   ED 52                  SBC   HL,DE   
29E4   7D                     LD   A,L   
29E5   B4                     OR   H   
29E6   CA 42 2A               JP   Z,expectM_0_2764S50   
29E9   CD BE 0B               CALL   printStr   
29EC   43 6F 64 65 3A 20 3A 61 3A 62 20 2D 31 25 00 .CSTR   "Code: ",":a:b -1%"   
29FB   CD BE 0B               CALL   printStr   
29FE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A0D   21 02 01               LD   hl,$0102   
2A10   E5                     PUSH   hl   
2A11   CD 85 0C               CALL   run   
2A14   2E 00                  .CSTR   "."   
2A16   CD BE 0B               CALL   printStr   
2A19   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A26   E1                     POP   hl   
2A27   E5                     PUSH   hl   
2A28   E5                     PUSH   hl   
2A29   CD 85 0C               CALL   run   
2A2C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2A40   76                     HALT      
2A41   00                     .CSTR      
2A42                EXPECTM_0_2764S50:      
2A42   E1                     POP   HL   
2A43                          ;*Macro unroll:  test "::b -1%", $0101
2A43   31 80 47               LD   SP,STACK   
2A46   CD C5 0B               CALL   init   
2A49   CD 32 46               CALL   execStr   
2A4C   3A 3A 62 20 2D 31 25 00 .CSTR   "::b -1%"   
2A54                          ;*Macro unroll:  expect "::b -1%",$0101
2A54   E1                     POP   HL   
2A55   E5                     PUSH   HL   
2A56   11 01 01               LD   DE,$0101   
2A59   B7                     OR   A   
2A5A   ED 52                  SBC   HL,DE   
2A5C   7D                     LD   A,L   
2A5D   B4                     OR   H   
2A5E   CA B9 2A               JP   Z,expectM_0_2765S50   
2A61   CD BE 0B               CALL   printStr   
2A64   43 6F 64 65 3A 20 3A 3A 62 20 2D 31 25 00 .CSTR   "Code: ","::b -1%"   
2A72   CD BE 0B               CALL   printStr   
2A75   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A84   21 01 01               LD   hl,$0101   
2A87   E5                     PUSH   hl   
2A88   CD 85 0C               CALL   run   
2A8B   2E 00                  .CSTR   "."   
2A8D   CD BE 0B               CALL   printStr   
2A90   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A9D   E1                     POP   hl   
2A9E   E5                     PUSH   hl   
2A9F   E5                     PUSH   hl   
2AA0   CD 85 0C               CALL   run   
2AA3   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2AB7   76                     HALT      
2AB8   00                     .CSTR      
2AB9                EXPECTM_0_2765S50:      
2AB9   E1                     POP   HL   
2ABA                          ;*Macro unroll:  test ":{2};^", 2
2ABA   31 80 47               LD   SP,STACK   
2ABD   CD C5 0B               CALL   init   
2AC0   CD 32 46               CALL   execStr   
2AC3   3A 7B 32 7D 3B 5E 00   .CSTR   ":{2};^"   
2ACA                          ;*Macro unroll:  expect ":{2};^",2
2ACA   E1                     POP   HL   
2ACB   E5                     PUSH   HL   
2ACC   11 02 00               LD   DE,2   
2ACF   B7                     OR   A   
2AD0   ED 52                  SBC   HL,DE   
2AD2   7D                     LD   A,L   
2AD3   B4                     OR   H   
2AD4   CA 2E 2B               JP   Z,expectM_0_2766S50   
2AD7   CD BE 0B               CALL   printStr   
2ADA   43 6F 64 65 3A 20 3A 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":{2};^"   
2AE7   CD BE 0B               CALL   printStr   
2AEA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AF9   21 02 00               LD   hl,2   
2AFC   E5                     PUSH   hl   
2AFD   CD 85 0C               CALL   run   
2B00   2E 00                  .CSTR   "."   
2B02   CD BE 0B               CALL   printStr   
2B05   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B12   E1                     POP   hl   
2B13   E5                     PUSH   hl   
2B14   E5                     PUSH   hl   
2B15   CD 85 0C               CALL   run   
2B18   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2B2C   76                     HALT      
2B2D   00                     .CSTR      
2B2E                EXPECTM_0_2766S50:      
2B2E   E1                     POP   HL   
2B2F                          ;*Macro unroll:  test ":a{2};^", 2
2B2F   31 80 47               LD   SP,STACK   
2B32   CD C5 0B               CALL   init   
2B35   CD 32 46               CALL   execStr   
2B38   3A 61 7B 32 7D 3B 5E 00 .CSTR   ":a{2};^"   
2B40                          ;*Macro unroll:  expect ":a{2};^",2
2B40   E1                     POP   HL   
2B41   E5                     PUSH   HL   
2B42   11 02 00               LD   DE,2   
2B45   B7                     OR   A   
2B46   ED 52                  SBC   HL,DE   
2B48   7D                     LD   A,L   
2B49   B4                     OR   H   
2B4A   CA A5 2B               JP   Z,expectM_0_2767S50   
2B4D   CD BE 0B               CALL   printStr   
2B50   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 5E 00 .CSTR   "Code: ",":a{2};^"   
2B5E   CD BE 0B               CALL   printStr   
2B61   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B70   21 02 00               LD   hl,2   
2B73   E5                     PUSH   hl   
2B74   CD 85 0C               CALL   run   
2B77   2E 00                  .CSTR   "."   
2B79   CD BE 0B               CALL   printStr   
2B7C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B89   E1                     POP   hl   
2B8A   E5                     PUSH   hl   
2B8B   E5                     PUSH   hl   
2B8C   CD 85 0C               CALL   run   
2B8F   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2BA3   76                     HALT      
2BA4   00                     .CSTR      
2BA5                EXPECTM_0_2767S50:      
2BA5   E1                     POP   HL   
2BA6                          ;*Macro unroll:  test "5 :a{$a};^", 5
2BA6   31 80 47               LD   SP,STACK   
2BA9   CD C5 0B               CALL   init   
2BAC   CD 32 46               CALL   execStr   
2BAF   35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a{$a};^"   
2BBA                          ;*Macro unroll:  expect "5 :a{$a};^",5
2BBA   E1                     POP   HL   
2BBB   E5                     PUSH   HL   
2BBC   11 05 00               LD   DE,5   
2BBF   B7                     OR   A   
2BC0   ED 52                  SBC   HL,DE   
2BC2   7D                     LD   A,L   
2BC3   B4                     OR   H   
2BC4   CA 22 2C               JP   Z,expectM_0_2768S50   
2BC7   CD BE 0B               CALL   printStr   
2BCA   43 6F 64 65 3A 20 35 20 3A 61 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a{$a};^"   
2BDB   CD BE 0B               CALL   printStr   
2BDE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BED   21 05 00               LD   hl,5   
2BF0   E5                     PUSH   hl   
2BF1   CD 85 0C               CALL   run   
2BF4   2E 00                  .CSTR   "."   
2BF6   CD BE 0B               CALL   printStr   
2BF9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C06   E1                     POP   hl   
2C07   E5                     PUSH   hl   
2C08   E5                     PUSH   hl   
2C09   CD 85 0C               CALL   run   
2C0C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2C20   76                     HALT      
2C21   00                     .CSTR      
2C22                EXPECTM_0_2768S50:      
2C22   E1                     POP   HL   
2C23                          ;*Macro unroll:  test "5 :a:b{$a};^", 5
2C23   31 80 47               LD   SP,STACK   
2C26   CD C5 0B               CALL   init   
2C29   CD 32 46               CALL   execStr   
2C2C   35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "5 :a:b{$a};^"   
2C39                          ;*Macro unroll:  expect "5 :a:b{$a};^",5
2C39   E1                     POP   HL   
2C3A   E5                     PUSH   HL   
2C3B   11 05 00               LD   DE,5   
2C3E   B7                     OR   A   
2C3F   ED 52                  SBC   HL,DE   
2C41   7D                     LD   A,L   
2C42   B4                     OR   H   
2C43   CA A3 2C               JP   Z,expectM_0_2769S50   
2C46   CD BE 0B               CALL   printStr   
2C49   43 6F 64 65 3A 20 35 20 3A 61 3A 62 7B 24 61 7D 3B 5E 00 .CSTR   "Code: ","5 :a:b{$a};^"   
2C5C   CD BE 0B               CALL   printStr   
2C5F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C6E   21 05 00               LD   hl,5   
2C71   E5                     PUSH   hl   
2C72   CD 85 0C               CALL   run   
2C75   2E 00                  .CSTR   "."   
2C77   CD BE 0B               CALL   printStr   
2C7A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C87   E1                     POP   hl   
2C88   E5                     PUSH   hl   
2C89   E5                     PUSH   hl   
2C8A   CD 85 0C               CALL   run   
2C8D   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2CA1   76                     HALT      
2CA2   00                     .CSTR      
2CA3                EXPECTM_0_2769S50:      
2CA3   E1                     POP   HL   
2CA4                          ;*Macro unroll:  test ":a{{2}^};^", 2
2CA4   31 80 47               LD   SP,STACK   
2CA7   CD C5 0B               CALL   init   
2CAA   CD 32 46               CALL   execStr   
2CAD   3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   ":a{{2}^};^"   
2CB8                          ;*Macro unroll:  expect ":a{{2}^};^",2
2CB8   E1                     POP   HL   
2CB9   E5                     PUSH   HL   
2CBA   11 02 00               LD   DE,2   
2CBD   B7                     OR   A   
2CBE   ED 52                  SBC   HL,DE   
2CC0   7D                     LD   A,L   
2CC1   B4                     OR   H   
2CC2   CA 20 2D               JP   Z,expectM_0_2770S50   
2CC5   CD BE 0B               CALL   printStr   
2CC8   43 6F 64 65 3A 20 3A 61 7B 7B 32 7D 5E 7D 3B 5E 00 .CSTR   "Code: ",":a{{2}^};^"   
2CD9   CD BE 0B               CALL   printStr   
2CDC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2CEB   21 02 00               LD   hl,2   
2CEE   E5                     PUSH   hl   
2CEF   CD 85 0C               CALL   run   
2CF2   2E 00                  .CSTR   "."   
2CF4   CD BE 0B               CALL   printStr   
2CF7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D04   E1                     POP   hl   
2D05   E5                     PUSH   hl   
2D06   E5                     PUSH   hl   
2D07   CD 85 0C               CALL   run   
2D0A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2D1E   76                     HALT      
2D1F   00                     .CSTR      
2D20                EXPECTM_0_2770S50:      
2D20   E1                     POP   HL   
2D21                          ;*Macro unroll:  test "1 5 :a{{$a}^};^", 5
2D21   31 80 47               LD   SP,STACK   
2D24   CD C5 0B               CALL   init   
2D27   CD 32 46               CALL   execStr   
2D2A   31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a}^};^"   
2D3A                          ;*Macro unroll:  expect "1 5 :a{{$a}^};^",5
2D3A   E1                     POP   HL   
2D3B   E5                     PUSH   HL   
2D3C   11 05 00               LD   DE,5   
2D3F   B7                     OR   A   
2D40   ED 52                  SBC   HL,DE   
2D42   7D                     LD   A,L   
2D43   B4                     OR   H   
2D44   CA A7 2D               JP   Z,expectM_0_2771S50   
2D47   CD BE 0B               CALL   printStr   
2D4A   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a}^};^"   
2D60   CD BE 0B               CALL   printStr   
2D63   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D72   21 05 00               LD   hl,5   
2D75   E5                     PUSH   hl   
2D76   CD 85 0C               CALL   run   
2D79   2E 00                  .CSTR   "."   
2D7B   CD BE 0B               CALL   printStr   
2D7E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D8B   E1                     POP   hl   
2D8C   E5                     PUSH   hl   
2D8D   E5                     PUSH   hl   
2D8E   CD 85 0C               CALL   run   
2D91   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2DA5   76                     HALT      
2DA6   00                     .CSTR      
2DA7                EXPECTM_0_2771S50:      
2DA7   E1                     POP   HL   
2DA8                          ;*Macro unroll:  test "1 5 :ab{{$a}^};^", 1
2DA8   31 80 47               LD   SP,STACK   
2DAB   CD C5 0B               CALL   init   
2DAE   CD 32 46               CALL   execStr   
2DB1   31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a}^};^"   
2DC2                          ;*Macro unroll:  expect "1 5 :ab{{$a}^};^",1
2DC2   E1                     POP   HL   
2DC3   E5                     PUSH   HL   
2DC4   11 01 00               LD   DE,1   
2DC7   B7                     OR   A   
2DC8   ED 52                  SBC   HL,DE   
2DCA   7D                     LD   A,L   
2DCB   B4                     OR   H   
2DCC   CA 30 2E               JP   Z,expectM_0_2772S50   
2DCF   CD BE 0B               CALL   printStr   
2DD2   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a}^};^"   
2DE9   CD BE 0B               CALL   printStr   
2DEC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DFB   21 01 00               LD   hl,1   
2DFE   E5                     PUSH   hl   
2DFF   CD 85 0C               CALL   run   
2E02   2E 00                  .CSTR   "."   
2E04   CD BE 0B               CALL   printStr   
2E07   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E14   E1                     POP   hl   
2E15   E5                     PUSH   hl   
2E16   E5                     PUSH   hl   
2E17   CD 85 0C               CALL   run   
2E1A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2E2E   76                     HALT      
2E2F   00                     .CSTR      
2E30                EXPECTM_0_2772S50:      
2E30   E1                     POP   HL   
2E31                          ;*Macro unroll:  test "1 5 :a{{$a 2 +}^};^", 7
2E31   31 80 47               LD   SP,STACK   
2E34   CD C5 0B               CALL   init   
2E37   CD 32 46               CALL   execStr   
2E3A   31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :a{{$a 2 +}^};^"   
2E4E                          ;*Macro unroll:  expect "1 5 :a{{$a 2 +}^};^",7
2E4E   E1                     POP   HL   
2E4F   E5                     PUSH   HL   
2E50   11 07 00               LD   DE,7   
2E53   B7                     OR   A   
2E54   ED 52                  SBC   HL,DE   
2E56   7D                     LD   A,L   
2E57   B4                     OR   H   
2E58   CA BF 2E               JP   Z,expectM_0_2773S50   
2E5B   CD BE 0B               CALL   printStr   
2E5E   43 6F 64 65 3A 20 31 20 35 20 3A 61 7B 7B 24 61 20 32 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :a{{$a 2 +}^};^"   
2E78   CD BE 0B               CALL   printStr   
2E7B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E8A   21 07 00               LD   hl,7   
2E8D   E5                     PUSH   hl   
2E8E   CD 85 0C               CALL   run   
2E91   2E 00                  .CSTR   "."   
2E93   CD BE 0B               CALL   printStr   
2E96   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EA3   E1                     POP   hl   
2EA4   E5                     PUSH   hl   
2EA5   E5                     PUSH   hl   
2EA6   CD 85 0C               CALL   run   
2EA9   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2EBD   76                     HALT      
2EBE   00                     .CSTR      
2EBF                EXPECTM_0_2773S50:      
2EBF   E1                     POP   HL   
2EC0                          ;*Macro unroll:  test "1 5 :ab{{$a $b +}^};^", 6
2EC0   31 80 47               LD   SP,STACK   
2EC3   CD C5 0B               CALL   init   
2EC6   CD 32 46               CALL   execStr   
2EC9   31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "1 5 :ab{{$a $b +}^};^"   
2EDF                          ;*Macro unroll:  expect "1 5 :ab{{$a $b +}^};^",6
2EDF   E1                     POP   HL   
2EE0   E5                     PUSH   HL   
2EE1   11 06 00               LD   DE,6   
2EE4   B7                     OR   A   
2EE5   ED 52                  SBC   HL,DE   
2EE7   7D                     LD   A,L   
2EE8   B4                     OR   H   
2EE9   CA 52 2F               JP   Z,expectM_0_2774S50   
2EEC   CD BE 0B               CALL   printStr   
2EEF   43 6F 64 65 3A 20 31 20 35 20 3A 61 62 7B 7B 24 61 20 24 62 20 2B 7D 5E 7D 3B 5E 00 .CSTR   "Code: ","1 5 :ab{{$a $b +}^};^"   
2F0B   CD BE 0B               CALL   printStr   
2F0E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F1D   21 06 00               LD   hl,6   
2F20   E5                     PUSH   hl   
2F21   CD 85 0C               CALL   run   
2F24   2E 00                  .CSTR   "."   
2F26   CD BE 0B               CALL   printStr   
2F29   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F36   E1                     POP   hl   
2F37   E5                     PUSH   hl   
2F38   E5                     PUSH   hl   
2F39   CD 85 0C               CALL   run   
2F3C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2F50   76                     HALT      
2F51   00                     .CSTR      
2F52                EXPECTM_0_2774S50:      
2F52   E1                     POP   HL   
2F53                          ;*Macro unroll:  test ":a{2}; x= 1 x^", 2
2F53   31 80 47               LD   SP,STACK   
2F56   CD C5 0B               CALL   init   
2F59   CD 32 46               CALL   execStr   
2F5C   3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a{2}; x= 1 x^"   
2F6B                          ;*Macro unroll:  expect ":a{2}; x= 1 x^",2
2F6B   E1                     POP   HL   
2F6C   E5                     PUSH   HL   
2F6D   11 02 00               LD   DE,2   
2F70   B7                     OR   A   
2F71   ED 52                  SBC   HL,DE   
2F73   7D                     LD   A,L   
2F74   B4                     OR   H   
2F75   CA D7 2F               JP   Z,expectM_0_2775S50   
2F78   CD BE 0B               CALL   printStr   
2F7B   43 6F 64 65 3A 20 3A 61 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a{2}; x= 1 x^"   
2F90   CD BE 0B               CALL   printStr   
2F93   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FA2   21 02 00               LD   hl,2   
2FA5   E5                     PUSH   hl   
2FA6   CD 85 0C               CALL   run   
2FA9   2E 00                  .CSTR   "."   
2FAB   CD BE 0B               CALL   printStr   
2FAE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FBB   E1                     POP   hl   
2FBC   E5                     PUSH   hl   
2FBD   E5                     PUSH   hl   
2FBE   CD 85 0C               CALL   run   
2FC1   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
2FD5   76                     HALT      
2FD6   00                     .CSTR      
2FD7                EXPECTM_0_2775S50:      
2FD7   E1                     POP   HL   
2FD8                          ;*Macro unroll:  test ":a{$a}; x= 0 1 x^", 1
2FD8   31 80 47               LD   SP,STACK   
2FDB   CD C5 0B               CALL   init   
2FDE   CD 32 46               CALL   execStr   
2FE1   3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   ":a{$a}; x= 0 1 x^"   
2FF3                          ;*Macro unroll:  expect ":a{$a}; x= 0 1 x^",1
2FF3   E1                     POP   HL   
2FF4   E5                     PUSH   HL   
2FF5   11 01 00               LD   DE,1   
2FF8   B7                     OR   A   
2FF9   ED 52                  SBC   HL,DE   
2FFB   7D                     LD   A,L   
2FFC   B4                     OR   H   
2FFD   CA 62 30               JP   Z,expectM_0_2776S50   
3000   CD BE 0B               CALL   printStr   
3003   43 6F 64 65 3A 20 3A 61 7B 24 61 7D 3B 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ",":a{$a}; x= 0 1 x^"   
301B   CD BE 0B               CALL   printStr   
301E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
302D   21 01 00               LD   hl,1   
3030   E5                     PUSH   hl   
3031   CD 85 0C               CALL   run   
3034   2E 00                  .CSTR   "."   
3036   CD BE 0B               CALL   printStr   
3039   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3046   E1                     POP   hl   
3047   E5                     PUSH   hl   
3048   E5                     PUSH   hl   
3049   CD 85 0C               CALL   run   
304C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3060   76                     HALT      
3061   00                     .CSTR      
3062                EXPECTM_0_2776S50:      
3062   E1                     POP   HL   
3063                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
3063   31 80 47               LD   SP,STACK   
3066   CD C5 0B               CALL   init   
3069   CD 32 46               CALL   execStr   
306C   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
307F                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
307F   E1                     POP   HL   
3080   E5                     PUSH   HL   
3081   11 02 00               LD   DE,2   
3084   B7                     OR   A   
3085   ED 52                  SBC   HL,DE   
3087   7D                     LD   A,L   
3088   B4                     OR   H   
3089   CA EF 30               JP   Z,expectM_0_2777S50   
308C   CD BE 0B               CALL   printStr   
308F   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
30A8   CD BE 0B               CALL   printStr   
30AB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30BA   21 02 00               LD   hl,2   
30BD   E5                     PUSH   hl   
30BE   CD 85 0C               CALL   run   
30C1   2E 00                  .CSTR   "."   
30C3   CD BE 0B               CALL   printStr   
30C6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30D3   E1                     POP   hl   
30D4   E5                     PUSH   hl   
30D5   E5                     PUSH   hl   
30D6   CD 85 0C               CALL   run   
30D9   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
30ED   76                     HALT      
30EE   00                     .CSTR      
30EF                EXPECTM_0_2777S50:      
30EF   E1                     POP   HL   
30F0                          ;*Macro unroll:  test ":a:b{$a}; x= 1 2 x^", 2
30F0   31 80 47               LD   SP,STACK   
30F3   CD C5 0B               CALL   init   
30F6   CD 32 46               CALL   execStr   
30F9   3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":a:b{$a}; x= 1 2 x^"   
310D                          ;*Macro unroll:  expect ":a:b{$a}; x= 1 2 x^",2
310D   E1                     POP   HL   
310E   E5                     PUSH   HL   
310F   11 02 00               LD   DE,2   
3112   B7                     OR   A   
3113   ED 52                  SBC   HL,DE   
3115   7D                     LD   A,L   
3116   B4                     OR   H   
3117   CA 7E 31               JP   Z,expectM_0_2778S50   
311A   CD BE 0B               CALL   printStr   
311D   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a}; x= 1 2 x^"   
3137   CD BE 0B               CALL   printStr   
313A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3149   21 02 00               LD   hl,2   
314C   E5                     PUSH   hl   
314D   CD 85 0C               CALL   run   
3150   2E 00                  .CSTR   "."   
3152   CD BE 0B               CALL   printStr   
3155   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3162   E1                     POP   hl   
3163   E5                     PUSH   hl   
3164   E5                     PUSH   hl   
3165   CD 85 0C               CALL   run   
3168   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
317C   76                     HALT      
317D   00                     .CSTR      
317E                EXPECTM_0_2778S50:      
317E   E1                     POP   HL   
317F                          ;*Macro unroll:  test ":ab{$b}; x= 1 2 x^", 2
317F   31 80 47               LD   SP,STACK   
3182   CD C5 0B               CALL   init   
3185   CD 32 46               CALL   execStr   
3188   3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   ":ab{$b}; x= 1 2 x^"   
319B                          ;*Macro unroll:  expect ":ab{$b}; x= 1 2 x^",2
319B   E1                     POP   HL   
319C   E5                     PUSH   HL   
319D   11 02 00               LD   DE,2   
31A0   B7                     OR   A   
31A1   ED 52                  SBC   HL,DE   
31A3   7D                     LD   A,L   
31A4   B4                     OR   H   
31A5   CA 0B 32               JP   Z,expectM_0_2779S50   
31A8   CD BE 0B               CALL   printStr   
31AB   43 6F 64 65 3A 20 3A 61 62 7B 24 62 7D 3B 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ",":ab{$b}; x= 1 2 x^"   
31C4   CD BE 0B               CALL   printStr   
31C7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31D6   21 02 00               LD   hl,2   
31D9   E5                     PUSH   hl   
31DA   CD 85 0C               CALL   run   
31DD   2E 00                  .CSTR   "."   
31DF   CD BE 0B               CALL   printStr   
31E2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31EF   E1                     POP   hl   
31F0   E5                     PUSH   hl   
31F1   E5                     PUSH   hl   
31F2   CD 85 0C               CALL   run   
31F5   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3209   76                     HALT      
320A   00                     .CSTR      
320B                EXPECTM_0_2779S50:      
320B   E1                     POP   HL   
320C                          ;*Macro unroll:  test ":ab{$b $a}; x= 10 15 x^ -", 5
320C   31 80 47               LD   SP,STACK   
320F   CD C5 0B               CALL   init   
3212   CD 32 46               CALL   execStr   
3215   3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   ":ab{$b $a}; x= 10 15 x^ -"   
322F                          ;*Macro unroll:  expect ":ab{$b $a}; x= 10 15 x^ -",5
322F   E1                     POP   HL   
3230   E5                     PUSH   HL   
3231   11 05 00               LD   DE,5   
3234   B7                     OR   A   
3235   ED 52                  SBC   HL,DE   
3237   7D                     LD   A,L   
3238   B4                     OR   H   
3239   CA A6 32               JP   Z,expectM_0_2780S50   
323C   CD BE 0B               CALL   printStr   
323F   43 6F 64 65 3A 20 3A 61 62 7B 24 62 20 24 61 7D 3B 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ",":ab{$b $a}; x= 10 15 x^ -"   
325F   CD BE 0B               CALL   printStr   
3262   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3271   21 05 00               LD   hl,5   
3274   E5                     PUSH   hl   
3275   CD 85 0C               CALL   run   
3278   2E 00                  .CSTR   "."   
327A   CD BE 0B               CALL   printStr   
327D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
328A   E1                     POP   hl   
328B   E5                     PUSH   hl   
328C   E5                     PUSH   hl   
328D   CD 85 0C               CALL   run   
3290   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
32A4   76                     HALT      
32A5   00                     .CSTR      
32A6                EXPECTM_0_2780S50:      
32A6   E1                     POP   HL   
32A7                          ;*Macro unroll:  test ":a:b{2}; x= 1 x^", 2
32A7   31 80 47               LD   SP,STACK   
32AA   CD C5 0B               CALL   init   
32AD   CD 32 46               CALL   execStr   
32B0   3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   ":a:b{2}; x= 1 x^"   
32C1                          ;*Macro unroll:  expect ":a:b{2}; x= 1 x^",2
32C1   E1                     POP   HL   
32C2   E5                     PUSH   HL   
32C3   11 02 00               LD   DE,2   
32C6   B7                     OR   A   
32C7   ED 52                  SBC   HL,DE   
32C9   7D                     LD   A,L   
32CA   B4                     OR   H   
32CB   CA 2F 33               JP   Z,expectM_0_2781S50   
32CE   CD BE 0B               CALL   printStr   
32D1   43 6F 64 65 3A 20 3A 61 3A 62 7B 32 7D 3B 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ",":a:b{2}; x= 1 x^"   
32E8   CD BE 0B               CALL   printStr   
32EB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32FA   21 02 00               LD   hl,2   
32FD   E5                     PUSH   hl   
32FE   CD 85 0C               CALL   run   
3301   2E 00                  .CSTR   "."   
3303   CD BE 0B               CALL   printStr   
3306   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3313   E1                     POP   hl   
3314   E5                     PUSH   hl   
3315   E5                     PUSH   hl   
3316   CD 85 0C               CALL   run   
3319   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
332D   76                     HALT      
332E   00                     .CSTR      
332F                EXPECTM_0_2781S50:      
332F   E1                     POP   HL   
3330                          ;*Macro unroll:  test "::b{100 $b= $b}; x= x^", 100
3330   31 80 47               LD   SP,STACK   
3333   CD C5 0B               CALL   init   
3336   CD 32 46               CALL   execStr   
3339   3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "::b{100 $b= $b}; x= x^"   
3350                          ;*Macro unroll:  expect "::b{100 $b= $b}; x= x^",100
3350   E1                     POP   HL   
3351   E5                     PUSH   HL   
3352   11 64 00               LD   DE,100   
3355   B7                     OR   A   
3356   ED 52                  SBC   HL,DE   
3358   7D                     LD   A,L   
3359   B4                     OR   H   
335A   CA C4 33               JP   Z,expectM_0_2782S50   
335D   CD BE 0B               CALL   printStr   
3360   43 6F 64 65 3A 20 3A 3A 62 7B 31 30 30 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 78 5E 00 .CSTR   "Code: ","::b{100 $b= $b}; x= x^"   
337D   CD BE 0B               CALL   printStr   
3380   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
338F   21 64 00               LD   hl,100   
3392   E5                     PUSH   hl   
3393   CD 85 0C               CALL   run   
3396   2E 00                  .CSTR   "."   
3398   CD BE 0B               CALL   printStr   
339B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33A8   E1                     POP   hl   
33A9   E5                     PUSH   hl   
33AA   E5                     PUSH   hl   
33AB   CD 85 0C               CALL   run   
33AE   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
33C2   76                     HALT      
33C3   00                     .CSTR      
33C4                EXPECTM_0_2782S50:      
33C4   E1                     POP   HL   
33C5                          ;*Macro unroll:  test ":a:b{1 $b= $b}; x= 2 x^", 1
33C5   31 80 47               LD   SP,STACK   
33C8   CD C5 0B               CALL   init   
33CB   CD 32 46               CALL   execStr   
33CE   3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{1 $b= $b}; x= 2 x^"   
33E6                          ;*Macro unroll:  expect ":a:b{1 $b= $b}; x= 2 x^",1
33E6   E1                     POP   HL   
33E7   E5                     PUSH   HL   
33E8   11 01 00               LD   DE,1   
33EB   B7                     OR   A   
33EC   ED 52                  SBC   HL,DE   
33EE   7D                     LD   A,L   
33EF   B4                     OR   H   
33F0   CA 5B 34               JP   Z,expectM_0_2783S50   
33F3   CD BE 0B               CALL   printStr   
33F6   43 6F 64 65 3A 20 3A 61 3A 62 7B 31 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{1 $b= $b}; x= 2 x^"   
3414   CD BE 0B               CALL   printStr   
3417   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3426   21 01 00               LD   hl,1   
3429   E5                     PUSH   hl   
342A   CD 85 0C               CALL   run   
342D   2E 00                  .CSTR   "."   
342F   CD BE 0B               CALL   printStr   
3432   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
343F   E1                     POP   hl   
3440   E5                     PUSH   hl   
3441   E5                     PUSH   hl   
3442   CD 85 0C               CALL   run   
3445   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3459   76                     HALT      
345A   00                     .CSTR      
345B                EXPECTM_0_2783S50:      
345B   E1                     POP   HL   
345C                          ;*Macro unroll:  test ":a:b{$a $b= $b}; x= 2 x^", 2
345C   31 80 47               LD   SP,STACK   
345F   CD C5 0B               CALL   init   
3462   CD 32 46               CALL   execStr   
3465   3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   ":a:b{$a $b= $b}; x= 2 x^"   
347E                          ;*Macro unroll:  expect ":a:b{$a $b= $b}; x= 2 x^",2
347E   E1                     POP   HL   
347F   E5                     PUSH   HL   
3480   11 02 00               LD   DE,2   
3483   B7                     OR   A   
3484   ED 52                  SBC   HL,DE   
3486   7D                     LD   A,L   
3487   B4                     OR   H   
3488   CA F4 34               JP   Z,expectM_0_2784S50   
348B   CD BE 0B               CALL   printStr   
348E   43 6F 64 65 3A 20 3A 61 3A 62 7B 24 61 20 24 62 3D 20 24 62 7D 3B 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ",":a:b{$a $b= $b}; x= 2 x^"   
34AD   CD BE 0B               CALL   printStr   
34B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34BF   21 02 00               LD   hl,2   
34C2   E5                     PUSH   hl   
34C3   CD 85 0C               CALL   run   
34C6   2E 00                  .CSTR   "."   
34C8   CD BE 0B               CALL   printStr   
34CB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34D8   E1                     POP   hl   
34D9   E5                     PUSH   hl   
34DA   E5                     PUSH   hl   
34DB   CD 85 0C               CALL   run   
34DE   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
34F2   76                     HALT      
34F3   00                     .CSTR      
34F4                EXPECTM_0_2784S50:      
34F4   E1                     POP   HL   
34F5                          ;*Macro unroll:  test "1 10 20 :ab{/t{$a}{$b} ??};^ +", 11
34F5   31 80 47               LD   SP,STACK   
34F8   CD C5 0B               CALL   init   
34FB   CD 32 46               CALL   execStr   
34FE   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/t{$a}{$b} ??};^ +"   
351D                          ;*Macro unroll:  expect "1 10 20 :ab{/t{$a}{$b} ??};^ +",11
351D   E1                     POP   HL   
351E   E5                     PUSH   HL   
351F   11 0B 00               LD   DE,11   
3522   B7                     OR   A   
3523   ED 52                  SBC   HL,DE   
3525   7D                     LD   A,L   
3526   B4                     OR   H   
3527   CA 99 35               JP   Z,expectM_0_2785S50   
352A   CD BE 0B               CALL   printStr   
352D   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 74 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/t{$a}{$b} ??};^ +"   
3552   CD BE 0B               CALL   printStr   
3555   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3564   21 0B 00               LD   hl,11   
3567   E5                     PUSH   hl   
3568   CD 85 0C               CALL   run   
356B   2E 00                  .CSTR   "."   
356D   CD BE 0B               CALL   printStr   
3570   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
357D   E1                     POP   hl   
357E   E5                     PUSH   hl   
357F   E5                     PUSH   hl   
3580   CD 85 0C               CALL   run   
3583   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3597   76                     HALT      
3598   00                     .CSTR      
3599                EXPECTM_0_2785S50:      
3599   E1                     POP   HL   
359A                          ;*Macro unroll:  test "1 10 20 :ab{/f{$a}{$b} ??};^ +", 21
359A   31 80 47               LD   SP,STACK   
359D   CD C5 0B               CALL   init   
35A0   CD 32 46               CALL   execStr   
35A3   31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "1 10 20 :ab{/f{$a}{$b} ??};^ +"   
35C2                          ;*Macro unroll:  expect "1 10 20 :ab{/f{$a}{$b} ??};^ +",21
35C2   E1                     POP   HL   
35C3   E5                     PUSH   HL   
35C4   11 15 00               LD   DE,21   
35C7   B7                     OR   A   
35C8   ED 52                  SBC   HL,DE   
35CA   7D                     LD   A,L   
35CB   B4                     OR   H   
35CC   CA 3E 36               JP   Z,expectM_0_2786S50   
35CF   CD BE 0B               CALL   printStr   
35D2   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 61 62 7B 2F 66 7B 24 61 7D 7B 24 62 7D 20 3F 3F 7D 3B 5E 20 2B 00 .CSTR   "Code: ","1 10 20 :ab{/f{$a}{$b} ??};^ +"   
35F7   CD BE 0B               CALL   printStr   
35FA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3609   21 15 00               LD   hl,21   
360C   E5                     PUSH   hl   
360D   CD 85 0C               CALL   run   
3610   2E 00                  .CSTR   "."   
3612   CD BE 0B               CALL   printStr   
3615   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3622   E1                     POP   hl   
3623   E5                     PUSH   hl   
3624   E5                     PUSH   hl   
3625   CD 85 0C               CALL   run   
3628   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
363C   76                     HALT      
363D   00                     .CSTR      
363E                EXPECTM_0_2786S50:      
363E   E1                     POP   HL   
363F                          ;*Macro unroll:  test "[10 20 30] 1%", 20
363F   31 80 47               LD   SP,STACK   
3642   CD C5 0B               CALL   init   
3645   CD 32 46               CALL   execStr   
3648   5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "[10 20 30] 1%"   
3656                          ;*Macro unroll:  expect "[10 20 30] 1%",20
3656   E1                     POP   HL   
3657   E5                     PUSH   HL   
3658   11 14 00               LD   DE,20   
365B   B7                     OR   A   
365C   ED 52                  SBC   HL,DE   
365E   7D                     LD   A,L   
365F   B4                     OR   H   
3660   CA C1 36               JP   Z,expectM_0_2787S50   
3663   CD BE 0B               CALL   printStr   
3666   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 25 00 .CSTR   "Code: ","[10 20 30] 1%"   
367A   CD BE 0B               CALL   printStr   
367D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
368C   21 14 00               LD   hl,20   
368F   E5                     PUSH   hl   
3690   CD 85 0C               CALL   run   
3693   2E 00                  .CSTR   "."   
3695   CD BE 0B               CALL   printStr   
3698   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36A5   E1                     POP   hl   
36A6   E5                     PUSH   hl   
36A7   E5                     PUSH   hl   
36A8   CD 85 0C               CALL   run   
36AB   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
36BF   76                     HALT      
36C0   00                     .CSTR      
36C1                EXPECTM_0_2787S50:      
36C1   E1                     POP   HL   
36C2                          ;*Macro unroll:  test "[10 20 30 40] /s", 4
36C2   31 80 47               LD   SP,STACK   
36C5   CD C5 0B               CALL   init   
36C8   CD 32 46               CALL   execStr   
36CB   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "[10 20 30 40] /s"   
36DC                          ;*Macro unroll:  expect "[10 20 30 40] /s",4
36DC   E1                     POP   HL   
36DD   E5                     PUSH   HL   
36DE   11 04 00               LD   DE,4   
36E1   B7                     OR   A   
36E2   ED 52                  SBC   HL,DE   
36E4   7D                     LD   A,L   
36E5   B4                     OR   H   
36E6   CA 4A 37               JP   Z,expectM_0_2788S50   
36E9   CD BE 0B               CALL   printStr   
36EC   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 73 00 .CSTR   "Code: ","[10 20 30 40] /s"   
3703   CD BE 0B               CALL   printStr   
3706   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3715   21 04 00               LD   hl,4   
3718   E5                     PUSH   hl   
3719   CD 85 0C               CALL   run   
371C   2E 00                  .CSTR   "."   
371E   CD BE 0B               CALL   printStr   
3721   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
372E   E1                     POP   hl   
372F   E5                     PUSH   hl   
3730   E5                     PUSH   hl   
3731   CD 85 0C               CALL   run   
3734   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3748   76                     HALT      
3749   00                     .CSTR      
374A                EXPECTM_0_2788S50:      
374A   E1                     POP   HL   
374B                          ;*Macro unroll:  test "/c [1 2 3] 1%", 2
374B   31 80 47               LD   SP,STACK   
374E   CD C5 0B               CALL   init   
3751   CD 32 46               CALL   execStr   
3754   2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "/c [1 2 3] 1%"   
3762                          ;*Macro unroll:  expect "/c [1 2 3] 1%",2
3762   E1                     POP   HL   
3763   E5                     PUSH   HL   
3764   11 02 00               LD   DE,2   
3767   B7                     OR   A   
3768   ED 52                  SBC   HL,DE   
376A   7D                     LD   A,L   
376B   B4                     OR   H   
376C   CA CD 37               JP   Z,expectM_0_2789S50   
376F   CD BE 0B               CALL   printStr   
3772   43 6F 64 65 3A 20 2F 63 20 5B 31 20 32 20 33 5D 20 31 25 00 .CSTR   "Code: ","/c [1 2 3] 1%"   
3786   CD BE 0B               CALL   printStr   
3789   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3798   21 02 00               LD   hl,2   
379B   E5                     PUSH   hl   
379C   CD 85 0C               CALL   run   
379F   2E 00                  .CSTR   "."   
37A1   CD BE 0B               CALL   printStr   
37A4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37B1   E1                     POP   hl   
37B2   E5                     PUSH   hl   
37B3   E5                     PUSH   hl   
37B4   CD 85 0C               CALL   run   
37B7   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
37CB   76                     HALT      
37CC   00                     .CSTR      
37CD                EXPECTM_0_2789S50:      
37CD   E1                     POP   HL   
37CE                          ;*Macro unroll:  test "/c ['A' 'B' 'C'] 1%", 66
37CE   31 80 47               LD   SP,STACK   
37D1   CD C5 0B               CALL   init   
37D4   CD 32 46               CALL   execStr   
37D7   2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "/c ['A' 'B' 'C'] 1%"   
37EB                          ;*Macro unroll:  expect "/c ['A' 'B' 'C'] 1%",66
37EB   E1                     POP   HL   
37EC   E5                     PUSH   HL   
37ED   11 42 00               LD   DE,66   
37F0   B7                     OR   A   
37F1   ED 52                  SBC   HL,DE   
37F3   7D                     LD   A,L   
37F4   B4                     OR   H   
37F5   CA 5C 38               JP   Z,expectM_0_2790S50   
37F8   CD BE 0B               CALL   printStr   
37FB   43 6F 64 65 3A 20 2F 63 20 5B 27 41 27 20 27 42 27 20 27 43 27 5D 20 31 25 00 .CSTR   "Code: ","/c ['A' 'B' 'C'] 1%"   
3815   CD BE 0B               CALL   printStr   
3818   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3827   21 42 00               LD   hl,66   
382A   E5                     PUSH   hl   
382B   CD 85 0C               CALL   run   
382E   2E 00                  .CSTR   "."   
3830   CD BE 0B               CALL   printStr   
3833   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3840   E1                     POP   hl   
3841   E5                     PUSH   hl   
3842   E5                     PUSH   hl   
3843   CD 85 0C               CALL   run   
3846   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
385A   76                     HALT      
385B   00                     .CSTR      
385C                EXPECTM_0_2790S50:      
385C   E1                     POP   HL   
385D                          ;*Macro unroll:  test "[{10}{20}{30}] 0%^ ", 10
385D   31 80 47               LD   SP,STACK   
3860   CD C5 0B               CALL   init   
3863   CD 32 46               CALL   execStr   
3866   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "[{10}{20}{30}] 0%^ "   
387A                          ;*Macro unroll:  expect "[{10}{20}{30}] 0%^ ",10
387A   E1                     POP   HL   
387B   E5                     PUSH   HL   
387C   11 0A 00               LD   DE,10   
387F   B7                     OR   A   
3880   ED 52                  SBC   HL,DE   
3882   7D                     LD   A,L   
3883   B4                     OR   H   
3884   CA EB 38               JP   Z,expectM_0_2791S50   
3887   CD BE 0B               CALL   printStr   
388A   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 25 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0%^ "   
38A4   CD BE 0B               CALL   printStr   
38A7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38B6   21 0A 00               LD   hl,10   
38B9   E5                     PUSH   hl   
38BA   CD 85 0C               CALL   run   
38BD   2E 00                  .CSTR   "."   
38BF   CD BE 0B               CALL   printStr   
38C2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
38CF   E1                     POP   hl   
38D0   E5                     PUSH   hl   
38D1   E5                     PUSH   hl   
38D2   CD 85 0C               CALL   run   
38D5   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
38E9   76                     HALT      
38EA   00                     .CSTR      
38EB                EXPECTM_0_2791S50:      
38EB   E1                     POP   HL   
38EC                          ;*Macro unroll:  test "10 20 :ab{[{$a}{$b}] 0%^};^", 10
38EC   31 80 47               LD   SP,STACK   
38EF   CD C5 0B               CALL   init   
38F2   CD 32 46               CALL   execStr   
38F5   31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "10 20 :ab{[{$a}{$b}] 0%^};^"   
3911                          ;*Macro unroll:  expect "10 20 :ab{[{$a}{$b}] 0%^};^",10
3911   E1                     POP   HL   
3912   E5                     PUSH   HL   
3913   11 0A 00               LD   DE,10   
3916   B7                     OR   A   
3917   ED 52                  SBC   HL,DE   
3919   7D                     LD   A,L   
391A   B4                     OR   H   
391B   CA 8A 39               JP   Z,expectM_0_2792S50   
391E   CD BE 0B               CALL   printStr   
3921   43 6F 64 65 3A 20 31 30 20 32 30 20 3A 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 30 25 5E 7D 3B 5E 00 .CSTR   "Code: ","10 20 :ab{[{$a}{$b}] 0%^};^"   
3943   CD BE 0B               CALL   printStr   
3946   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3955   21 0A 00               LD   hl,10   
3958   E5                     PUSH   hl   
3959   CD 85 0C               CALL   run   
395C   2E 00                  .CSTR   "."   
395E   CD BE 0B               CALL   printStr   
3961   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
396E   E1                     POP   hl   
396F   E5                     PUSH   hl   
3970   E5                     PUSH   hl   
3971   CD 85 0C               CALL   run   
3974   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3988   76                     HALT      
3989   00                     .CSTR      
398A                EXPECTM_0_2792S50:      
398A   E1                     POP   HL   
398B                          ;*Macro unroll:  test "0 10 20 :iab{[{$a}{$b}] $i%^};^", 10
398B   31 80 47               LD   SP,STACK   
398E   CD C5 0B               CALL   init   
3991   CD 32 46               CALL   execStr   
3994   30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "0 10 20 :iab{[{$a}{$b}] $i%^};^"   
39B4                          ;*Macro unroll:  expect "0 10 20 :iab{[{$a}{$b}] $i%^};^",10
39B4   E1                     POP   HL   
39B5   E5                     PUSH   HL   
39B6   11 0A 00               LD   DE,10   
39B9   B7                     OR   A   
39BA   ED 52                  SBC   HL,DE   
39BC   7D                     LD   A,L   
39BD   B4                     OR   H   
39BE   CA 31 3A               JP   Z,expectM_0_2793S50   
39C1   CD BE 0B               CALL   printStr   
39C4   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","0 10 20 :iab{[{$a}{$b}] $i%^};^"   
39EA   CD BE 0B               CALL   printStr   
39ED   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
39FC   21 0A 00               LD   hl,10   
39FF   E5                     PUSH   hl   
3A00   CD 85 0C               CALL   run   
3A03   2E 00                  .CSTR   "."   
3A05   CD BE 0B               CALL   printStr   
3A08   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A15   E1                     POP   hl   
3A16   E5                     PUSH   hl   
3A17   E5                     PUSH   hl   
3A18   CD 85 0C               CALL   run   
3A1B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3A2F   76                     HALT      
3A30   00                     .CSTR      
3A31                EXPECTM_0_2793S50:      
3A31   E1                     POP   HL   
3A32                          ;*Macro unroll:  test "1 10 20 :iab{[{$a}{$b}] $i%^};^", 20
3A32   31 80 47               LD   SP,STACK   
3A35   CD C5 0B               CALL   init   
3A38   CD 32 46               CALL   execStr   
3A3B   31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "1 10 20 :iab{[{$a}{$b}] $i%^};^"   
3A5B                          ;*Macro unroll:  expect "1 10 20 :iab{[{$a}{$b}] $i%^};^",20
3A5B   E1                     POP   HL   
3A5C   E5                     PUSH   HL   
3A5D   11 14 00               LD   DE,20   
3A60   B7                     OR   A   
3A61   ED 52                  SBC   HL,DE   
3A63   7D                     LD   A,L   
3A64   B4                     OR   H   
3A65   CA D8 3A               JP   Z,expectM_0_2794S50   
3A68   CD BE 0B               CALL   printStr   
3A6B   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 3A 69 61 62 7B 5B 7B 24 61 7D 7B 24 62 7D 5D 20 24 69 25 5E 7D 3B 5E 00 .CSTR   "Code: ","1 10 20 :iab{[{$a}{$b}] $i%^};^"   
3A91   CD BE 0B               CALL   printStr   
3A94   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AA3   21 14 00               LD   hl,20   
3AA6   E5                     PUSH   hl   
3AA7   CD 85 0C               CALL   run   
3AAA   2E 00                  .CSTR   "."   
3AAC   CD BE 0B               CALL   printStr   
3AAF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3ABC   E1                     POP   hl   
3ABD   E5                     PUSH   hl   
3ABE   E5                     PUSH   hl   
3ABF   CD 85 0C               CALL   run   
3AC2   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3AD6   76                     HALT      
3AD7   00                     .CSTR      
3AD8                EXPECTM_0_2794S50:      
3AD8   E1                     POP   HL   
3AD9                          ;*Macro unroll:  test "5 [4] :a{$a}; /pa ^", 4
3AD9   31 80 47               LD   SP,STACK   
3ADC   CD C5 0B               CALL   init   
3ADF   CD 32 46               CALL   execStr   
3AE2   35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :a{$a}; /pa ^"   
3AF6                          ;*Macro unroll:  expect "5 [4] :a{$a}; /pa ^",4
3AF6   E1                     POP   HL   
3AF7   E5                     PUSH   HL   
3AF8   11 04 00               LD   DE,4   
3AFB   B7                     OR   A   
3AFC   ED 52                  SBC   HL,DE   
3AFE   7D                     LD   A,L   
3AFF   B4                     OR   H   
3B00   CA 67 3B               JP   Z,expectM_0_2795S50   
3B03   CD BE 0B               CALL   printStr   
3B06   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 7B 24 61 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :a{$a}; /pa ^"   
3B20   CD BE 0B               CALL   printStr   
3B23   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B32   21 04 00               LD   hl,4   
3B35   E5                     PUSH   hl   
3B36   CD 85 0C               CALL   run   
3B39   2E 00                  .CSTR   "."   
3B3B   CD BE 0B               CALL   printStr   
3B3E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B4B   E1                     POP   hl   
3B4C   E5                     PUSH   hl   
3B4D   E5                     PUSH   hl   
3B4E   CD 85 0C               CALL   run   
3B51   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3B65   76                     HALT      
3B66   00                     .CSTR      
3B67                EXPECTM_0_2795S50:      
3B67   E1                     POP   HL   
3B68                          ;*Macro unroll:  test "5 [4] :ab{$a $b +}; /pa ^", 9
3B68   31 80 47               LD   SP,STACK   
3B6B   CD C5 0B               CALL   init   
3B6E   CD 32 46               CALL   execStr   
3B71   35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "5 [4] :ab{$a $b +}; /pa ^"   
3B8B                          ;*Macro unroll:  expect "5 [4] :ab{$a $b +}; /pa ^",9
3B8B   E1                     POP   HL   
3B8C   E5                     PUSH   HL   
3B8D   11 09 00               LD   DE,9   
3B90   B7                     OR   A   
3B91   ED 52                  SBC   HL,DE   
3B93   7D                     LD   A,L   
3B94   B4                     OR   H   
3B95   CA 02 3C               JP   Z,expectM_0_2796S50   
3B98   CD BE 0B               CALL   printStr   
3B9B   43 6F 64 65 3A 20 35 20 5B 34 5D 20 3A 61 62 7B 24 61 20 24 62 20 2B 7D 3B 20 2F 70 61 20 5E 00 .CSTR   "Code: ","5 [4] :ab{$a $b +}; /pa ^"   
3BBB   CD BE 0B               CALL   printStr   
3BBE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BCD   21 09 00               LD   hl,9   
3BD0   E5                     PUSH   hl   
3BD1   CD 85 0C               CALL   run   
3BD4   2E 00                  .CSTR   "."   
3BD6   CD BE 0B               CALL   printStr   
3BD9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3BE6   E1                     POP   hl   
3BE7   E5                     PUSH   hl   
3BE8   E5                     PUSH   hl   
3BE9   CD 85 0C               CALL   run   
3BEC   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3C00   76                     HALT      
3C01   00                     .CSTR      
3C02                EXPECTM_0_2796S50:      
3C02   E1                     POP   HL   
3C03                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
3C03   31 80 47               LD   SP,STACK   
3C06   CD C5 0B               CALL   init   
3C09   CD 32 46               CALL   execStr   
3C0C   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "3i= ( i i-- i/br )^ + +"   
3C24                          ;*Macro unroll:  expect "3i= ( i i-- i/br )^ + +",6
3C24   E1                     POP   HL   
3C25   E5                     PUSH   HL   
3C26   11 06 00               LD   DE,6   
3C29   B7                     OR   A   
3C2A   ED 52                  SBC   HL,DE   
3C2C   7D                     LD   A,L   
3C2D   B4                     OR   H   
3C2E   CA 99 3C               JP   Z,expectM_0_2797S50   
3C31   CD BE 0B               CALL   printStr   
3C34   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
3C52   CD BE 0B               CALL   printStr   
3C55   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C64   21 06 00               LD   hl,6   
3C67   E5                     PUSH   hl   
3C68   CD 85 0C               CALL   run   
3C6B   2E 00                  .CSTR   "."   
3C6D   CD BE 0B               CALL   printStr   
3C70   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C7D   E1                     POP   hl   
3C7E   E5                     PUSH   hl   
3C7F   E5                     PUSH   hl   
3C80   CD 85 0C               CALL   run   
3C83   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3C97   76                     HALT      
3C98   00                     .CSTR      
3C99                EXPECTM_0_2797S50:      
3C99   E1                     POP   HL   
3C9A                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1%", 2
3C9A   31 80 47               LD   SP,STACK   
3C9D   CD C5 0B               CALL   init   
3CA0   CD 32 46               CALL   execStr   
3CA3   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "3i= [ ( i i-- i/br )^ ] 1%"   
3CBE                          ;*Macro unroll:  expect "3i= [ ( i i-- i/br )^ ] 1%",2
3CBE   E1                     POP   HL   
3CBF   E5                     PUSH   HL   
3CC0   11 02 00               LD   DE,2   
3CC3   B7                     OR   A   
3CC4   ED 52                  SBC   HL,DE   
3CC6   7D                     LD   A,L   
3CC7   B4                     OR   H   
3CC8   CA 36 3D               JP   Z,expectM_0_2798S50   
3CCB   CD BE 0B               CALL   printStr   
3CCE   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 25 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1%"   
3CEF   CD BE 0B               CALL   printStr   
3CF2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D01   21 02 00               LD   hl,2   
3D04   E5                     PUSH   hl   
3D05   CD 85 0C               CALL   run   
3D08   2E 00                  .CSTR   "."   
3D0A   CD BE 0B               CALL   printStr   
3D0D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D1A   E1                     POP   hl   
3D1B   E5                     PUSH   hl   
3D1C   E5                     PUSH   hl   
3D1D   CD 85 0C               CALL   run   
3D20   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3D34   76                     HALT      
3D35   00                     .CSTR      
3D36                EXPECTM_0_2798S50:      
3D36   E1                     POP   HL   
3D37                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
3D37   31 80 47               LD   SP,STACK   
3D3A   CD C5 0B               CALL   init   
3D3D   CD 32 46               CALL   execStr   
3D40   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3D66                          ;*Macro unroll:  expect "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",10
3D66   E1                     POP   HL   
3D67   E5                     PUSH   HL   
3D68   11 0A 00               LD   DE,10   
3D6B   B7                     OR   A   
3D6C   ED 52                  SBC   HL,DE   
3D6E   7D                     LD   A,L   
3D6F   B4                     OR   H   
3D70   CA E9 3D               JP   Z,expectM_0_2799S50   
3D73   CD BE 0B               CALL   printStr   
3D76   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
3DA2   CD BE 0B               CALL   printStr   
3DA5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DB4   21 0A 00               LD   hl,10   
3DB7   E5                     PUSH   hl   
3DB8   CD 85 0C               CALL   run   
3DBB   2E 00                  .CSTR   "."   
3DBD   CD BE 0B               CALL   printStr   
3DC0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3DCD   E1                     POP   hl   
3DCE   E5                     PUSH   hl   
3DCF   E5                     PUSH   hl   
3DD0   CD 85 0C               CALL   run   
3DD3   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3DE7   76                     HALT      
3DE8   00                     .CSTR      
3DE9                EXPECTM_0_2799S50:      
3DE9   E1                     POP   HL   
3DEA                          ;*Macro unroll:  test "3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^", 6
3DEA   31 80 47               LD   SP,STACK   
3DED   CD C5 0B               CALL   init   
3DF0   CD 32 46               CALL   execStr   
3DF3   33 20 3A 61 3A 62 63 7B 24 61 24 63 3D 20 28 20 24 63 20 24 63 2D 2D 20 24 63 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^"   
3E1B                          ;*Macro unroll:  expect "3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^",6
3E1B   E1                     POP   HL   
3E1C   E5                     PUSH   HL   
3E1D   11 06 00               LD   DE,6   
3E20   B7                     OR   A   
3E21   ED 52                  SBC   HL,DE   
3E23   7D                     LD   A,L   
3E24   B4                     OR   H   
3E25   CA A0 3E               JP   Z,expectM_0_2800S50   
3E28   CD BE 0B               CALL   printStr   
3E2B   43 6F 64 65 3A 20 33 20 3A 61 3A 62 63 7B 24 61 24 63 3D 20 28 20 24 63 20 24 63 2D 2D 20 24 63 2F 62 72 20 29 5E 20 2B 20 2B 7D 3B 5E 00 .CSTR   "Code: ","3 :a:bc{$a$c= ( $c $c-- $c/br )^ + +};^"   
3E59   CD BE 0B               CALL   printStr   
3E5C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E6B   21 06 00               LD   hl,6   
3E6E   E5                     PUSH   hl   
3E6F   CD 85 0C               CALL   run   
3E72   2E 00                  .CSTR   "."   
3E74   CD BE 0B               CALL   printStr   
3E77   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E84   E1                     POP   hl   
3E85   E5                     PUSH   hl   
3E86   E5                     PUSH   hl   
3E87   CD 85 0C               CALL   run   
3E8A   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3E9E   76                     HALT      
3E9F   00                     .CSTR      
3EA0                EXPECTM_0_2800S50:      
3EA0   E1                     POP   HL   
3EA1                          ;*Macro unroll:  test "'A' 1 - /ad", NUL
3EA1   31 80 47               LD   SP,STACK   
3EA4   CD C5 0B               CALL   init   
3EA7   CD 32 46               CALL   execStr   
3EAA   27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'A' 1 - /ad"   
3EB6                          ;*Macro unroll:  expect "'A' 1 - /ad",NUL
3EB6   E1                     POP   HL   
3EB7   E5                     PUSH   HL   
3EB8   11 00 00               LD   DE,NUL   
3EBB   B7                     OR   A   
3EBC   ED 52                  SBC   HL,DE   
3EBE   7D                     LD   A,L   
3EBF   B4                     OR   H   
3EC0   CA 1F 3F               JP   Z,expectM_0_2801S50   
3EC3   CD BE 0B               CALL   printStr   
3EC6   43 6F 64 65 3A 20 27 41 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'A' 1 - /ad"   
3ED8   CD BE 0B               CALL   printStr   
3EDB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3EEA   21 00 00               LD   hl,NUL   
3EED   E5                     PUSH   hl   
3EEE   CD 85 0C               CALL   run   
3EF1   2E 00                  .CSTR   "."   
3EF3   CD BE 0B               CALL   printStr   
3EF6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F03   E1                     POP   hl   
3F04   E5                     PUSH   hl   
3F05   E5                     PUSH   hl   
3F06   CD 85 0C               CALL   run   
3F09   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3F1D   76                     HALT      
3F1E   00                     .CSTR      
3F1F                EXPECTM_0_2801S50:      
3F1F   E1                     POP   HL   
3F20                          ;*Macro unroll:  test "'Z' 1 + /ad", NUL
3F20   31 80 47               LD   SP,STACK   
3F23   CD C5 0B               CALL   init   
3F26   CD 32 46               CALL   execStr   
3F29   27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'Z' 1 + /ad"   
3F35                          ;*Macro unroll:  expect "'Z' 1 + /ad",NUL
3F35   E1                     POP   HL   
3F36   E5                     PUSH   HL   
3F37   11 00 00               LD   DE,NUL   
3F3A   B7                     OR   A   
3F3B   ED 52                  SBC   HL,DE   
3F3D   7D                     LD   A,L   
3F3E   B4                     OR   H   
3F3F   CA 9E 3F               JP   Z,expectM_0_2802S50   
3F42   CD BE 0B               CALL   printStr   
3F45   43 6F 64 65 3A 20 27 5A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'Z' 1 + /ad"   
3F57   CD BE 0B               CALL   printStr   
3F5A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F69   21 00 00               LD   hl,NUL   
3F6C   E5                     PUSH   hl   
3F6D   CD 85 0C               CALL   run   
3F70   2E 00                  .CSTR   "."   
3F72   CD BE 0B               CALL   printStr   
3F75   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F82   E1                     POP   hl   
3F83   E5                     PUSH   hl   
3F84   E5                     PUSH   hl   
3F85   CD 85 0C               CALL   run   
3F88   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
3F9C   76                     HALT      
3F9D   00                     .CSTR      
3F9E                EXPECTM_0_2802S50:      
3F9E   E1                     POP   HL   
3F9F                          ;*Macro unroll:  test "'a' 1 - /ad", NUL
3F9F   31 80 47               LD   SP,STACK   
3FA2   CD C5 0B               CALL   init   
3FA5   CD 32 46               CALL   execStr   
3FA8   27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "'a' 1 - /ad"   
3FB4                          ;*Macro unroll:  expect "'a' 1 - /ad",NUL
3FB4   E1                     POP   HL   
3FB5   E5                     PUSH   HL   
3FB6   11 00 00               LD   DE,NUL   
3FB9   B7                     OR   A   
3FBA   ED 52                  SBC   HL,DE   
3FBC   7D                     LD   A,L   
3FBD   B4                     OR   H   
3FBE   CA 1D 40               JP   Z,expectM_0_2803S50   
3FC1   CD BE 0B               CALL   printStr   
3FC4   43 6F 64 65 3A 20 27 61 27 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","'a' 1 - /ad"   
3FD6   CD BE 0B               CALL   printStr   
3FD9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FE8   21 00 00               LD   hl,NUL   
3FEB   E5                     PUSH   hl   
3FEC   CD 85 0C               CALL   run   
3FEF   2E 00                  .CSTR   "."   
3FF1   CD BE 0B               CALL   printStr   
3FF4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4001   E1                     POP   hl   
4002   E5                     PUSH   hl   
4003   E5                     PUSH   hl   
4004   CD 85 0C               CALL   run   
4007   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
401B   76                     HALT      
401C   00                     .CSTR      
401D                EXPECTM_0_2803S50:      
401D   E1                     POP   HL   
401E                          ;*Macro unroll:  test "'z' 1 + /ad", NUL
401E   31 80 47               LD   SP,STACK   
4021   CD C5 0B               CALL   init   
4024   CD 32 46               CALL   execStr   
4027   27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "'z' 1 + /ad"   
4033                          ;*Macro unroll:  expect "'z' 1 + /ad",NUL
4033   E1                     POP   HL   
4034   E5                     PUSH   HL   
4035   11 00 00               LD   DE,NUL   
4038   B7                     OR   A   
4039   ED 52                  SBC   HL,DE   
403B   7D                     LD   A,L   
403C   B4                     OR   H   
403D   CA 9C 40               JP   Z,expectM_0_2804S50   
4040   CD BE 0B               CALL   printStr   
4043   43 6F 64 65 3A 20 27 7A 27 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","'z' 1 + /ad"   
4055   CD BE 0B               CALL   printStr   
4058   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4067   21 00 00               LD   hl,NUL   
406A   E5                     PUSH   hl   
406B   CD 85 0C               CALL   run   
406E   2E 00                  .CSTR   "."   
4070   CD BE 0B               CALL   printStr   
4073   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4080   E1                     POP   hl   
4081   E5                     PUSH   hl   
4082   E5                     PUSH   hl   
4083   CD 85 0C               CALL   run   
4086   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
409A   76                     HALT      
409B   00                     .CSTR      
409C                EXPECTM_0_2804S50:      
409C   E1                     POP   HL   
409D                          ;*Macro unroll:  test "'z' /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
409D   31 80 47               LD   SP,STACK   
40A0   CD C5 0B               CALL   init   
40A3   CD 32 46               CALL   execStr   
40A6   27 7A 27 20 2F 61 64 00 .CSTR   "'z' /ad"   
40AE                          ;*Macro unroll:  expect "'z' /ad",VARS + (("z"-"a")+("Z"-"A")+1)*2
40AE   E1                     POP   HL   
40AF   E5                     PUSH   HL   
40B0   11 66 48               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
40B3   B7                     OR   A   
40B4   ED 52                  SBC   HL,DE   
40B6   7D                     LD   A,L   
40B7   B4                     OR   H   
40B8   CA 13 41               JP   Z,expectM_0_2805S50   
40BB   CD BE 0B               CALL   printStr   
40BE   43 6F 64 65 3A 20 27 7A 27 20 2F 61 64 00 .CSTR   "Code: ","'z' /ad"   
40CC   CD BE 0B               CALL   printStr   
40CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40DE   21 66 48               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
40E1   E5                     PUSH   hl   
40E2   CD 85 0C               CALL   run   
40E5   2E 00                  .CSTR   "."   
40E7   CD BE 0B               CALL   printStr   
40EA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
40F7   E1                     POP   hl   
40F8   E5                     PUSH   hl   
40F9   E5                     PUSH   hl   
40FA   CD 85 0C               CALL   run   
40FD   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4111   76                     HALT      
4112   00                     .CSTR      
4113                EXPECTM_0_2805S50:      
4113   E1                     POP   HL   
4114                          ;*Macro unroll:  test "'a' /ad", VARS + ("Z"-"A"+1)*2
4114   31 80 47               LD   SP,STACK   
4117   CD C5 0B               CALL   init   
411A   CD 32 46               CALL   execStr   
411D   27 61 27 20 2F 61 64 00 .CSTR   "'a' /ad"   
4125                          ;*Macro unroll:  expect "'a' /ad",VARS + ("Z"-"A"+1)*2
4125   E1                     POP   HL   
4126   E5                     PUSH   HL   
4127   11 34 48               LD   DE,VARS + ("Z"-"A"+1)*2   
412A   B7                     OR   A   
412B   ED 52                  SBC   HL,DE   
412D   7D                     LD   A,L   
412E   B4                     OR   H   
412F   CA 8A 41               JP   Z,expectM_0_2806S50   
4132   CD BE 0B               CALL   printStr   
4135   43 6F 64 65 3A 20 27 61 27 20 2F 61 64 00 .CSTR   "Code: ","'a' /ad"   
4143   CD BE 0B               CALL   printStr   
4146   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4155   21 34 48               LD   hl,VARS + ("Z"-"A"+1)*2   
4158   E5                     PUSH   hl   
4159   CD 85 0C               CALL   run   
415C   2E 00                  .CSTR   "."   
415E   CD BE 0B               CALL   printStr   
4161   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
416E   E1                     POP   hl   
416F   E5                     PUSH   hl   
4170   E5                     PUSH   hl   
4171   CD 85 0C               CALL   run   
4174   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4188   76                     HALT      
4189   00                     .CSTR      
418A                EXPECTM_0_2806S50:      
418A   E1                     POP   HL   
418B                          ;*Macro unroll:  test "'Z' /ad", VARS + ("Z"-"A")*2
418B   31 80 47               LD   SP,STACK   
418E   CD C5 0B               CALL   init   
4191   CD 32 46               CALL   execStr   
4194   27 5A 27 20 2F 61 64 00 .CSTR   "'Z' /ad"   
419C                          ;*Macro unroll:  expect "'Z' /ad",VARS + ("Z"-"A")*2
419C   E1                     POP   HL   
419D   E5                     PUSH   HL   
419E   11 32 48               LD   DE,VARS + ("Z"-"A")*2   
41A1   B7                     OR   A   
41A2   ED 52                  SBC   HL,DE   
41A4   7D                     LD   A,L   
41A5   B4                     OR   H   
41A6   CA 01 42               JP   Z,expectM_0_2807S50   
41A9   CD BE 0B               CALL   printStr   
41AC   43 6F 64 65 3A 20 27 5A 27 20 2F 61 64 00 .CSTR   "Code: ","'Z' /ad"   
41BA   CD BE 0B               CALL   printStr   
41BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
41CC   21 32 48               LD   hl,VARS + ("Z"-"A")*2   
41CF   E5                     PUSH   hl   
41D0   CD 85 0C               CALL   run   
41D3   2E 00                  .CSTR   "."   
41D5   CD BE 0B               CALL   printStr   
41D8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41E5   E1                     POP   hl   
41E6   E5                     PUSH   hl   
41E7   E5                     PUSH   hl   
41E8   CD 85 0C               CALL   run   
41EB   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
41FF   76                     HALT      
4200   00                     .CSTR      
4201                EXPECTM_0_2807S50:      
4201   E1                     POP   HL   
4202                          ;*Macro unroll:  test "'A' /ad", VARS
4202   31 80 47               LD   SP,STACK   
4205   CD C5 0B               CALL   init   
4208   CD 32 46               CALL   execStr   
420B   27 41 27 20 2F 61 64 00 .CSTR   "'A' /ad"   
4213                          ;*Macro unroll:  expect "'A' /ad",VARS
4213   E1                     POP   HL   
4214   E5                     PUSH   HL   
4215   11 00 48               LD   DE,VARS   
4218   B7                     OR   A   
4219   ED 52                  SBC   HL,DE   
421B   7D                     LD   A,L   
421C   B4                     OR   H   
421D   CA 78 42               JP   Z,expectM_0_2808S50   
4220   CD BE 0B               CALL   printStr   
4223   43 6F 64 65 3A 20 27 41 27 20 2F 61 64 00 .CSTR   "Code: ","'A' /ad"   
4231   CD BE 0B               CALL   printStr   
4234   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4243   21 00 48               LD   hl,VARS   
4246   E5                     PUSH   hl   
4247   CD 85 0C               CALL   run   
424A   2E 00                  .CSTR   "."   
424C   CD BE 0B               CALL   printStr   
424F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
425C   E1                     POP   hl   
425D   E5                     PUSH   hl   
425E   E5                     PUSH   hl   
425F   CD 85 0C               CALL   run   
4262   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4276   76                     HALT      
4277   00                     .CSTR      
4278                EXPECTM_0_2808S50:      
4278   E1                     POP   HL   
4279                          ;*Macro unroll:  test "-1 /bd/vB/c 0%", $2D
4279   31 80 47               LD   SP,STACK   
427C   CD C5 0B               CALL   init   
427F   CD 32 46               CALL   execStr   
4282   2D 31 20 2F 62 64 2F 76 42 2F 63 20 30 25 00 .CSTR   "-1 /bd/vB/c 0%"   
4291                          ;*Macro unroll:  expect "-1 /bd/vB/c 0%",$2D
4291   E1                     POP   HL   
4292   E5                     PUSH   HL   
4293   11 2D 00               LD   DE,$2D   
4296   B7                     OR   A   
4297   ED 52                  SBC   HL,DE   
4299   7D                     LD   A,L   
429A   B4                     OR   H   
429B   CA FD 42               JP   Z,expectM_0_2809S50   
429E   CD BE 0B               CALL   printStr   
42A1   43 6F 64 65 3A 20 2D 31 20 2F 62 64 2F 76 42 2F 63 20 30 25 00 .CSTR   "Code: ","-1 /bd/vB/c 0%"   
42B6   CD BE 0B               CALL   printStr   
42B9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42C8   21 2D 00               LD   hl,$2D   
42CB   E5                     PUSH   hl   
42CC   CD 85 0C               CALL   run   
42CF   2E 00                  .CSTR   "."   
42D1   CD BE 0B               CALL   printStr   
42D4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
42E1   E1                     POP   hl   
42E2   E5                     PUSH   hl   
42E3   E5                     PUSH   hl   
42E4   CD 85 0C               CALL   run   
42E7   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
42FB   76                     HALT      
42FC   00                     .CSTR      
42FD                EXPECTM_0_2809S50:      
42FD   E1                     POP   HL   
42FE                          ;*Macro unroll:  test "`A` /bs/vB/c 0%", 65
42FE   31 80 47               LD   SP,STACK   
4301   CD C5 0B               CALL   init   
4304   CD 32 46               CALL   execStr   
4307   60 41 60 20 2F 62 73 2F 76 42 2F 63 20 30 25 00 .CSTR   "`A` /bs/vB/c 0%"   
4317                          ;*Macro unroll:  expect "`A` /bs/vB/c 0%",65
4317   E1                     POP   HL   
4318   E5                     PUSH   HL   
4319   11 41 00               LD   DE,65   
431C   B7                     OR   A   
431D   ED 52                  SBC   HL,DE   
431F   7D                     LD   A,L   
4320   B4                     OR   H   
4321   CA 84 43               JP   Z,expectM_0_2810S50   
4324   CD BE 0B               CALL   printStr   
4327   43 6F 64 65 3A 20 60 41 60 20 2F 62 73 2F 76 42 2F 63 20 30 25 00 .CSTR   "Code: ","`A` /bs/vB/c 0%"   
433D   CD BE 0B               CALL   printStr   
4340   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
434F   21 41 00               LD   hl,65   
4352   E5                     PUSH   hl   
4353   CD 85 0C               CALL   run   
4356   2E 00                  .CSTR   "."   
4358   CD BE 0B               CALL   printStr   
435B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4368   E1                     POP   hl   
4369   E5                     PUSH   hl   
436A   E5                     PUSH   hl   
436B   CD 85 0C               CALL   run   
436E   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4382   76                     HALT      
4383   00                     .CSTR      
4384                EXPECTM_0_2810S50:      
4384   E1                     POP   HL   
4385                          ;*Macro unroll:  test "123 /bd", 3
4385   31 80 47               LD   SP,STACK   
4388   CD C5 0B               CALL   init   
438B   CD 32 46               CALL   execStr   
438E   31 32 33 20 2F 62 64 00 .CSTR   "123 /bd"   
4396                          ;*Macro unroll:  expect "123 /bd",3
4396   E1                     POP   HL   
4397   E5                     PUSH   HL   
4398   11 03 00               LD   DE,3   
439B   B7                     OR   A   
439C   ED 52                  SBC   HL,DE   
439E   7D                     LD   A,L   
439F   B4                     OR   H   
43A0   CA FB 43               JP   Z,expectM_0_2811S50   
43A3   CD BE 0B               CALL   printStr   
43A6   43 6F 64 65 3A 20 31 32 33 20 2F 62 64 00 .CSTR   "Code: ","123 /bd"   
43B4   CD BE 0B               CALL   printStr   
43B7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
43C6   21 03 00               LD   hl,3   
43C9   E5                     PUSH   hl   
43CA   CD 85 0C               CALL   run   
43CD   2E 00                  .CSTR   "."   
43CF   CD BE 0B               CALL   printStr   
43D2   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
43DF   E1                     POP   hl   
43E0   E5                     PUSH   hl   
43E1   E5                     PUSH   hl   
43E2   CD 85 0C               CALL   run   
43E5   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
43F9   76                     HALT      
43FA   00                     .CSTR      
43FB                EXPECTM_0_2811S50:      
43FB   E1                     POP   HL   
43FC                          ;*Macro unroll:  test "123 /bd/vB/c 1%", $32
43FC   31 80 47               LD   SP,STACK   
43FF   CD C5 0B               CALL   init   
4402   CD 32 46               CALL   execStr   
4405   31 32 33 20 2F 62 64 2F 76 42 2F 63 20 31 25 00 .CSTR   "123 /bd/vB/c 1%"   
4415                          ;*Macro unroll:  expect "123 /bd/vB/c 1%",$32
4415   E1                     POP   HL   
4416   E5                     PUSH   HL   
4417   11 32 00               LD   DE,$32   
441A   B7                     OR   A   
441B   ED 52                  SBC   HL,DE   
441D   7D                     LD   A,L   
441E   B4                     OR   H   
441F   CA 82 44               JP   Z,expectM_0_2812S50   
4422   CD BE 0B               CALL   printStr   
4425   43 6F 64 65 3A 20 31 32 33 20 2F 62 64 2F 76 42 2F 63 20 31 25 00 .CSTR   "Code: ","123 /bd/vB/c 1%"   
443B   CD BE 0B               CALL   printStr   
443E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
444D   21 32 00               LD   hl,$32   
4450   E5                     PUSH   hl   
4451   CD 85 0C               CALL   run   
4454   2E 00                  .CSTR   "."   
4456   CD BE 0B               CALL   printStr   
4459   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4466   E1                     POP   hl   
4467   E5                     PUSH   hl   
4468   E5                     PUSH   hl   
4469   CD 85 0C               CALL   run   
446C   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4480   76                     HALT      
4481   00                     .CSTR      
4482                EXPECTM_0_2812S50:      
4482   E1                     POP   HL   
4483                          ;*Macro unroll:  test "123/bd ` x `/bs 456/bd + + ", 9
4483   31 80 47               LD   SP,STACK   
4486   CD C5 0B               CALL   init   
4489   CD 32 46               CALL   execStr   
448C   31 32 33 2F 62 64 20 60 20 78 20 60 2F 62 73 20 34 35 36 2F 62 64 20 2B 20 2B 20 00 .CSTR   "123/bd ` x `/bs 456/bd + + "   
44A8                          ;*Macro unroll:  expect "123/bd ` x `/bs 456/bd + + ",9
44A8   E1                     POP   HL   
44A9   E5                     PUSH   HL   
44AA   11 09 00               LD   DE,9   
44AD   B7                     OR   A   
44AE   ED 52                  SBC   HL,DE   
44B0   7D                     LD   A,L   
44B1   B4                     OR   H   
44B2   CA 21 45               JP   Z,expectM_0_2813S50   
44B5   CD BE 0B               CALL   printStr   
44B8   43 6F 64 65 3A 20 31 32 33 2F 62 64 20 60 20 78 20 60 2F 62 73 20 34 35 36 2F 62 64 20 2B 20 2B 20 00 .CSTR   "Code: ","123/bd ` x `/bs 456/bd + + "   
44DA   CD BE 0B               CALL   printStr   
44DD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44EC   21 09 00               LD   hl,9   
44EF   E5                     PUSH   hl   
44F0   CD 85 0C               CALL   run   
44F3   2E 00                  .CSTR   "."   
44F5   CD BE 0B               CALL   printStr   
44F8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4505   E1                     POP   hl   
4506   E5                     PUSH   hl   
4507   E5                     PUSH   hl   
4508   CD 85 0C               CALL   run   
450B   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
451F   76                     HALT      
4520   00                     .CSTR      
4521                EXPECTM_0_2813S50:      
4521   E1                     POP   HL   
4522                          ;*Macro unroll:  test "#4321 /bh", 4
4522   31 80 47               LD   SP,STACK   
4525   CD C5 0B               CALL   init   
4528   CD 32 46               CALL   execStr   
452B   23 34 33 32 31 20 2F 62 68 00 .CSTR   "#4321 /bh"   
4535                          ;*Macro unroll:  expect "#4321 /bh",4
4535   E1                     POP   HL   
4536   E5                     PUSH   HL   
4537   11 04 00               LD   DE,4   
453A   B7                     OR   A   
453B   ED 52                  SBC   HL,DE   
453D   7D                     LD   A,L   
453E   B4                     OR   H   
453F   CA 9C 45               JP   Z,expectM_0_2814S50   
4542   CD BE 0B               CALL   printStr   
4545   43 6F 64 65 3A 20 23 34 33 32 31 20 2F 62 68 00 .CSTR   "Code: ","#4321 /bh"   
4555   CD BE 0B               CALL   printStr   
4558   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4567   21 04 00               LD   hl,4   
456A   E5                     PUSH   hl   
456B   CD 85 0C               CALL   run   
456E   2E 00                  .CSTR   "."   
4570   CD BE 0B               CALL   printStr   
4573   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4580   E1                     POP   hl   
4581   E5                     PUSH   hl   
4582   E5                     PUSH   hl   
4583   CD 85 0C               CALL   run   
4586   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
459A   76                     HALT      
459B   00                     .CSTR      
459C                EXPECTM_0_2814S50:      
459C   E1                     POP   HL   
459D                          ;*Macro unroll:  test "#4321 /bh/vB/c 0%", $34
459D   31 80 47               LD   SP,STACK   
45A0   CD C5 0B               CALL   init   
45A3   CD 32 46               CALL   execStr   
45A6   23 34 33 32 31 20 2F 62 68 2F 76 42 2F 63 20 30 25 00 .CSTR   "#4321 /bh/vB/c 0%"   
45B8                          ;*Macro unroll:  expect "#4321 /bh/vB/c 0%",$34
45B8   E1                     POP   HL   
45B9   E5                     PUSH   HL   
45BA   11 34 00               LD   DE,$34   
45BD   B7                     OR   A   
45BE   ED 52                  SBC   HL,DE   
45C0   7D                     LD   A,L   
45C1   B4                     OR   H   
45C2   CA 27 46               JP   Z,expectM_0_2815S50   
45C5   CD BE 0B               CALL   printStr   
45C8   43 6F 64 65 3A 20 23 34 33 32 31 20 2F 62 68 2F 76 42 2F 63 20 30 25 00 .CSTR   "Code: ","#4321 /bh/vB/c 0%"   
45E0   CD BE 0B               CALL   printStr   
45E3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45F2   21 34 00               LD   hl,$34   
45F5   E5                     PUSH   hl   
45F6   CD 85 0C               CALL   run   
45F9   2E 00                  .CSTR   "."   
45FB   CD BE 0B               CALL   printStr   
45FE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
460B   E1                     POP   hl   
460C   E5                     PUSH   hl   
460D   E5                     PUSH   hl   
460E   CD 85 0C               CALL   run   
4611   2E 20 60 28 23 60 2E 73 20 2E 68 20 60 29 0D 0A 60 2E 73 00 .CSTR   ". `(#`.s .h `)\r\n`.s"   
4625   76                     HALT      
4626   00                     .CSTR      
4627                EXPECTM_0_2815S50:      
4627   E1                     POP   HL   
4628                             ; 
4628   CD BE 0B               CALL   printStr   
462B   44 6F 6E 65 21 00      .CSTR   "Done!"   
4631   76                     HALT      
4632                          ALIGN   2   
4632                             ; printer:
4632                             ;     pop hl
4632                             ;     call prtdec
4632                             ;     jp (ix)
4632                             ; executes a null teminated string (null executes exit_)
4632                             ; the string should be immedaitely following the call
4632                EXECSTR:      ; create a root stack frame
4632   C1                     POP   bc   ; bc = code*
4633   0B                     DEC   bc   ; dec to prepare for next routine
4634   11 00 00               LD   de,0   
4637   D5                     PUSH   de   ; push fake IP
4638   D5                     PUSH   de   ; push null arg_list*
4639   D5                     PUSH   de   ; push null first_arg*
463A   D5                     PUSH   de   ; push fake BP
463B   DD E9                  JP   (ix)   
463D                          ALIGN   $100   
4700                          DS   STKSIZE   
4780                STACK:       
4780                          ALIGN   $100   
4800                VARS:        
4800                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
48D0                RESTARTS:      
48D0                RST08:    DS   2   
48D2                RST10:    DS   2   
48D4                RST18:    DS   2   
48D6                RST20:    DS   2   
48D8                RST28:    DS   2   
48DA                RST30:    DS   2   ; 
48DC                BAUD:     DS   2   ; 
48DE                INTVEC:   DS   2   ; 
48E0                NMIVEC:   DS   2   ; 
48E2                GETCVEC:   DS   2   ; 
48E4                PUTCVEC:   DS   2   ; 
48E6                SYSVARS:      
48E6                             ; initialised sys variables (preserved)
48E6                VDATAWIDTH:   DS   2   ; 
48E8                VNUMBASE:   DS   2   ; 
48EA                VTIBPTR:   DS   2   ; 
48EC                VBUFPTR:   DS   2   ; 
48EE                VNEXT:    DS   2   ; 
48F0                VHEAPPTR:   DS   2   ; 
48F2                             ; uninitialised sys variables (preserved)
48F2                VPOINTER:   DS   2   ; 
48F4                VREMAIN:   DS   2   ; 
48F6                VSAVEDIP:   DS   2   ; 
48F8                VSAVEDSP:   DS   2   ; 
48FA                VSAVEDBP:   DS   2   ; 
48FC                VCHECKSUM:   DS   2   ; 
48FE                             ; uninitialised sys variables (unpreserved)
48FE                VTEMP1:   DS   2   ; 
4900                VTEMP2:   DS   2   ; 
4902                VLASTDEF:   DS   2   ; 
4904                VHASHSTR:   DS   2   ; 
4906                TBPTR:    DS   2   ; reserved for tests
4908                          ALIGN   $100   
4A00                TIB:      DS   TIBSIZE   
4B00                BUF:      DS   BUFSIZE   
4C00                          ALIGN   $100   
4C00                PAD:      DS   $100   
4D00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 49 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0B14 DEFINED AT LINE 1779 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 30 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1751 IN MAIN.asm
                    > USED AT LINE 1983 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1617 IN MAIN.asm
                    > USED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 2028 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
STKSIZE:            0080 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 54 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 55 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
FALSE:              0000 DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
NUL:                0000 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 742 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
                    > USED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
                    > USED AT LINE 795 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
                    > USED AT LINE 1040 IN MAIN.asm
                    > USED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 1325 IN MAIN.asm
                    > USED AT LINE 1330 IN MAIN.asm
                    > USED AT LINE 1570 IN MAIN.asm
                    > USED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 1668 IN MAIN.asm
                    > USED AT LINE 1686 IN MAIN.asm
                    > USED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 1986 IN MAIN.asm
                    > USED AT LINE 2067 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
DQUOTE:             0022 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 1879 IN MAIN.asm
                    > USED AT LINE 2081 IN MAIN.asm
                    > USED AT LINE 2096 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 23 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 24 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 25 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 27 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 28 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 29 IN MAIN.asm
                    > USED AT LINE 1998 IN MAIN.asm
TMAGIC:             00AA DEFINED AT LINE 32 IN MAIN.asm
                    > USED AT LINE 422 IN MAIN.asm
TRESERV:            00A0 DEFINED AT LINE 33 IN MAIN.asm
TNUMBER:            00A1 DEFINED AT LINE 34 IN MAIN.asm
TSTRING:            00A2 DEFINED AT LINE 35 IN MAIN.asm
TPOINTER:           00A3 DEFINED AT LINE 36 IN MAIN.asm
TARRAY:             00A4 DEFINED AT LINE 37 IN MAIN.asm
                    > USED AT LINE 419 IN MAIN.asm
TBLOCK:             00A5 DEFINED AT LINE 38 IN MAIN.asm
TLAMBDA:            00A6 DEFINED AT LINE 39 IN MAIN.asm
TARGLST:            00A7 DEFINED AT LINE 40 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 54 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 59 IN MAIN.asm
                    > USED AT LINE 1937 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 69 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 172 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 174 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 176 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 178 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 180 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 182 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 184 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 186 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 188 IN MAIN.asm
LPAREN_:            0318 DEFINED AT LINE 190 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 191 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 193 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 195 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 197 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 199 IN MAIN.asm
UNDERSCORE_:        0327 DEFINED AT LINE 201 IN MAIN.asm
COLON_:             032A DEFINED AT LINE 203 IN MAIN.asm
UPCASE_:            032D DEFINED AT LINE 205 IN MAIN.asm
LOWCASE_:           0330 DEFINED AT LINE 207 IN MAIN.asm
QUESTION_:          0333 DEFINED AT LINE 209 IN MAIN.asm
STAR_:              0336 DEFINED AT LINE 211 IN MAIN.asm
BANG_:              0339 DEFINED AT LINE 213 IN MAIN.asm
NUM_:               033E DEFINED AT LINE 216 IN MAIN.asm
                    > USED AT LINE 1230 IN MAIN.asm
HASH_:              0341 DEFINED AT LINE 218 IN MAIN.asm
PIPE_:              0344 DEFINED AT LINE 220 IN MAIN.asm
CARET_:             0347 DEFINED AT LINE 222 IN MAIN.asm
COMMA_:             034A DEFINED AT LINE 224 IN MAIN.asm
DBLQUOTE_:          034D DEFINED AT LINE 226 IN MAIN.asm
MINUS_:             0350 DEFINED AT LINE 228 IN MAIN.asm
EQ_:                0353 DEFINED AT LINE 230 IN MAIN.asm
EQ0:                035D DEFINED AT LINE 237 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
EQ1:                035E DEFINED AT LINE 239 IN MAIN.asm
                    > USED AT LINE 215 IN MAIN.asm
GT_:                0362 DEFINED AT LINE 243 IN MAIN.asm
LT_:                036D DEFINED AT LINE 251 IN MAIN.asm
LT1:                0376 DEFINED AT LINE 258 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SLASH_:             037F DEFINED AT LINE 263 IN MAIN.asm
NOP_:               0382 DEFINED AT LINE 265 IN MAIN.asm
RPAREN_:            0384 DEFINED AT LINE 267 IN MAIN.asm
PLUS:               0387 DEFINED AT LINE 273 IN MAIN.asm
                    > USED AT LINE 175 IN MAIN.asm
ADD:                0387 DEFINED AT LINE 274 IN MAIN.asm
ADD1:               0392 DEFINED AT LINE 282 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
ADD3:               0396 DEFINED AT LINE 287 IN MAIN.asm
                    > USED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 1076 IN MAIN.asm
                    > USED AT LINE 1244 IN MAIN.asm
AT:                 0399 DEFINED AT LINE 293 IN MAIN.asm
                    > USED AT LINE 177 IN MAIN.asm
ADDR:               0399 DEFINED AT LINE 294 IN MAIN.asm
AMPER:              03A3 DEFINED AT LINE 299 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
AND:                03A3 DEFINED AT LINE 300 IN MAIN.asm
AND1:               03AA DEFINED AT LINE 308 IN MAIN.asm
                    > USED AT LINE 322 IN MAIN.asm
PIPE:               03AE DEFINED AT LINE 313 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
OR:                 03AE DEFINED AT LINE 314 IN MAIN.asm
XOR:                03B7 DEFINED AT LINE 324 IN MAIN.asm
                    > USED AT LINE 741 IN MAIN.asm
XOR1:               03B8 DEFINED AT LINE 326 IN MAIN.asm
                    > USED AT LINE 338 IN MAIN.asm
INVERT:             03C2 DEFINED AT LINE 336 IN MAIN.asm
                    > USED AT LINE 1569 IN MAIN.asm
DOLLAR:             03C7 DEFINED AT LINE 343 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
ARG:                03C7 DEFINED AT LINE 344 IN MAIN.asm
ARG0:               03E5 DEFINED AT LINE 365 IN MAIN.asm
                    > USED AT LINE 371 IN MAIN.asm
ARG0A:              03EE DEFINED AT LINE 373 IN MAIN.asm
                    > USED AT LINE 350 IN MAIN.asm
                    > USED AT LINE 357 IN MAIN.asm
ARG1:               03F3 DEFINED AT LINE 376 IN MAIN.asm
                    > USED AT LINE 369 IN MAIN.asm
ARG1A:              03FB DEFINED AT LINE 383 IN MAIN.asm
                    > USED AT LINE 375 IN MAIN.asm
LBRACK:             03FE DEFINED AT LINE 387 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
ARRAYSTART:         03FE DEFINED AT LINE 388 IN MAIN.asm
RBRACK:             041A DEFINED AT LINE 402 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
ARRAYEND:           041A DEFINED AT LINE 403 IN MAIN.asm
ARRAYEND1:          043C DEFINED AT LINE 425 IN MAIN.asm
                    > USED AT LINE 441 IN MAIN.asm
ARRAYEND2:          044C DEFINED AT LINE 435 IN MAIN.asm
                    > USED AT LINE 431 IN MAIN.asm
ARRINDEX:           0472 DEFINED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
ARRINDEX0:          047A DEFINED AT LINE 470 IN MAIN.asm
ARRINDEX1:          047B DEFINED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
ARRINDEX2:          0487 DEFINED AT LINE 481 IN MAIN.asm
                    > USED AT LINE 478 IN MAIN.asm
ASSIGN:             048A DEFINED AT LINE 486 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
ASSIGN0:            048C DEFINED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 281 IN MAIN.asm
                    > USED AT LINE 1237 IN MAIN.asm
ASSIGNX:            048D DEFINED AT LINE 491 IN MAIN.asm
ASSIGN1:            0499 DEFINED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
COLON:              049B DEFINED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
ARGLIST:            049B DEFINED AT LINE 507 IN MAIN.asm
ARGLIST1:           04A5 DEFINED AT LINE 514 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
ARGLIST1A:          04AD DEFINED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 517 IN MAIN.asm
ARGLIST2:           04B5 DEFINED AT LINE 525 IN MAIN.asm
ARGLIST3:           04BD DEFINED AT LINE 533 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
                    > USED AT LINE 531 IN MAIN.asm
ARGLIST4:           04C0 DEFINED AT LINE 536 IN MAIN.asm
                    > USED AT LINE 522 IN MAIN.asm
                    > USED AT LINE 524 IN MAIN.asm
ARGLIST5:           04C6 DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
LBRACE:             04D2 DEFINED AT LINE 553 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
BLOCKSTART:         04D2 DEFINED AT LINE 554 IN MAIN.asm
BLOCKSTART1:        04D6 DEFINED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 587 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 596 IN MAIN.asm
BLOCKSTART2:        0502 DEFINED AT LINE 585 IN MAIN.asm
                    > USED AT LINE 572 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
BLOCKSTART3:        0505 DEFINED AT LINE 588 IN MAIN.asm
                    > USED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 583 IN MAIN.asm
BLOCKSTART4:        050D DEFINED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 567 IN MAIN.asm
                    > USED AT LINE 569 IN MAIN.asm
BLOCKSTART5:        0510 DEFINED AT LINE 597 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
BLOCKSTART6:        0538 DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 603 IN MAIN.asm
RBRACE:             053B DEFINED AT LINE 620 IN MAIN.asm
                    > USED AT LINE 194 IN MAIN.asm
BLOCKEND:           053B DEFINED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 1522 IN MAIN.asm
BLOCKEND1:          056D DEFINED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
BLOCKEND2:          0579 DEFINED AT LINE 650 IN MAIN.asm
                    > USED AT LINE 642 IN MAIN.asm
BLOCKEND3:          058B DEFINED AT LINE 664 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
TICK:               0597 DEFINED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
CHAR:               0597 DEFINED AT LINE 672 IN MAIN.asm
CHAR1:              059A DEFINED AT LINE 674 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
CHAR2:              05A6 DEFINED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 680 IN MAIN.asm
CHAR3:              05A9 DEFINED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 678 IN MAIN.asm
BACKSLASH:          05AC DEFINED AT LINE 690 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
COMMA:              05AE DEFINED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 225 IN MAIN.asm
DISCARD:            05AE DEFINED AT LINE 696 IN MAIN.asm
DISCARD1:           05BB DEFINED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 703 IN MAIN.asm
SLASH:              05BD DEFINED AT LINE 708 IN MAIN.asm
                    > USED AT LINE 264 IN MAIN.asm
DIV:                05F3 DEFINED AT LINE 745 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
DOT:                0604 DEFINED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 200 IN MAIN.asm
DOTARRAY:           0616 DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
DOTARRAY_BLOCK:     061F DEFINED AT LINE 774 IN MAIN.asm
                    > USED AT LINE 772 IN MAIN.asm
DOTHEX:             062A DEFINED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
DOTHEX_BLOCK:       0633 DEFINED AT LINE 782 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
DOTSTR:             063E DEFINED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
DOTSTR_BLOCK:       0647 DEFINED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 788 IN MAIN.asm
DOTCHAR:            0652 DEFINED AT LINE 793 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
DOTCHAR_BLOCK:      065B DEFINED AT LINE 798 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
DOTDEC:             0666 DEFINED AT LINE 801 IN MAIN.asm
                    > USED AT LINE 767 IN MAIN.asm
DOTDEC_BLOCK:       066F DEFINED AT LINE 806 IN MAIN.asm
                    > USED AT LINE 804 IN MAIN.asm
DIVIDE:             067A DEFINED AT LINE 812 IN MAIN.asm
                    > USED AT LINE 750 IN MAIN.asm
DIVIDE1:            067F DEFINED AT LINE 815 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
DIVIDE2:            068C DEFINED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 820 IN MAIN.asm
DIVIDE3:            068D DEFINED AT LINE 825 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
EQUALS:             0693 DEFINED AT LINE 833 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
LESSTHANEQ:         069B DEFINED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 260 IN MAIN.asm
LESSTHAN:           06A0 DEFINED AT LINE 848 IN MAIN.asm
                    > USED AT LINE 262 IN MAIN.asm
LESSTHAN1:          06A5 DEFINED AT LINE 853 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
TRUE1:              06A8 DEFINED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
NULL1:              06AE DEFINED AT LINE 860 IN MAIN.asm
FALSE1:             06AE DEFINED AT LINE 861 IN MAIN.asm
                    > USED AT LINE 721 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
                    > USED AT LINE 854 IN MAIN.asm
CARET:              06B4 DEFINED AT LINE 869 IN MAIN.asm
                    > USED AT LINE 223 IN MAIN.asm
GO:                 06B4 DEFINED AT LINE 870 IN MAIN.asm
                    > USED AT LINE 770 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
                    > USED AT LINE 786 IN MAIN.asm
                    > USED AT LINE 794 IN MAIN.asm
                    > USED AT LINE 802 IN MAIN.asm
                    > USED AT LINE 1329 IN MAIN.asm
                    > USED AT LINE 1667 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
GO1:                06B5 DEFINED AT LINE 872 IN MAIN.asm
                    > USED AT LINE 1052 IN MAIN.asm
                    > USED AT LINE 1054 IN MAIN.asm
GO2:                06BB DEFINED AT LINE 877 IN MAIN.asm
                    > USED AT LINE 875 IN MAIN.asm
GOBLOCK:            06C7 DEFINED AT LINE 885 IN MAIN.asm
GOBLOCK1:           06C7 DEFINED AT LINE 886 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
GOBLOCK2:           06EC DEFINED AT LINE 903 IN MAIN.asm
                    > USED AT LINE 989 IN MAIN.asm
GOLAMBDA:           06FA DEFINED AT LINE 912 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
GOLAMBDA1:          0717 DEFINED AT LINE 935 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
GOLAMBDA2:          071D DEFINED AT LINE 942 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
GOLAMBDA3:          0728 DEFINED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
GOLAMBDA4:          0740 DEFINED AT LINE 965 IN MAIN.asm
                    > USED AT LINE 962 IN MAIN.asm
GOLAMBDA5:          0744 DEFINED AT LINE 969 IN MAIN.asm
                    > USED AT LINE 975 IN MAIN.asm
GOLAMBDA6:          0747 DEFINED AT LINE 973 IN MAIN.asm
                    > USED AT LINE 968 IN MAIN.asm
GOLAMBDA7:          074A DEFINED AT LINE 976 IN MAIN.asm
GOLAMBDA8:          074F DEFINED AT LINE 982 IN MAIN.asm
                    > USED AT LINE 897 IN MAIN.asm
                    > USED AT LINE 964 IN MAIN.asm
HASH:               075A DEFINED AT LINE 991 IN MAIN.asm
                    > USED AT LINE 219 IN MAIN.asm
HEXNUM:             075A DEFINED AT LINE 992 IN MAIN.asm
HEXNUM1:            075D DEFINED AT LINE 994 IN MAIN.asm
                    > USED AT LINE 1011 IN MAIN.asm
HEXNUM2:            0765 DEFINED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
UPCASE:             0777 DEFINED AT LINE 1012 IN MAIN.asm
                    > USED AT LINE 206 IN MAIN.asm
LOWCASE:            077C DEFINED AT LINE 1016 IN MAIN.asm
                    > USED AT LINE 208 IN MAIN.asm
IDENT1:             0781 DEFINED AT LINE 1020 IN MAIN.asm
                    > USED AT LINE 1015 IN MAIN.asm
QUESTION:           078E DEFINED AT LINE 1033 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
IF:                 078E DEFINED AT LINE 1034 IN MAIN.asm
IFTE:               079A DEFINED AT LINE 1044 IN MAIN.asm
                    > USED AT LINE 1038 IN MAIN.asm
IFTE1:              079B DEFINED AT LINE 1046 IN MAIN.asm
                    > USED AT LINE 1041 IN MAIN.asm
STAR:               07A7 DEFINED AT LINE 1056 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
MUL:                07A7 DEFINED AT LINE 1057 IN MAIN.asm
MUL2:               07A9 DEFINED AT LINE 1060 IN MAIN.asm
MUL3:               07B1 DEFINED AT LINE 1065 IN MAIN.asm
                    > USED AT LINE 1074 IN MAIN.asm
NUM:                07C3 DEFINED AT LINE 1078 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
NUM0:               07CC DEFINED AT LINE 1084 IN MAIN.asm
                    > USED AT LINE 1082 IN MAIN.asm
NUM1:               07CD DEFINED AT LINE 1086 IN MAIN.asm
                    > USED AT LINE 1103 IN MAIN.asm
NUM2:               07E5 DEFINED AT LINE 1104 IN MAIN.asm
                    > USED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 1004 IN MAIN.asm
                    > USED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 1091 IN MAIN.asm
NUM3:               07F0 DEFINED AT LINE 1112 IN MAIN.asm
                    > USED AT LINE 1107 IN MAIN.asm
UNDERSCORE:         07F3 DEFINED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
REMAIN:             07F3 DEFINED AT LINE 1117 IN MAIN.asm
RPAREN:             07F9 DEFINED AT LINE 1122 IN MAIN.asm
                    > USED AT LINE 268 IN MAIN.asm
SEMICOLON:          0801 DEFINED AT LINE 1128 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
SHIFTLEFT:          081D DEFINED AT LINE 1152 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
SHIFTLEFT1:         0825 DEFINED AT LINE 1159 IN MAIN.asm
                    > USED AT LINE 1162 IN MAIN.asm
SHIFTLEFT2:         0826 DEFINED AT LINE 1161 IN MAIN.asm
                    > USED AT LINE 1158 IN MAIN.asm
SHIFTRIGHT:         082D DEFINED AT LINE 1169 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
SHIFTRIGHT1:        0835 DEFINED AT LINE 1176 IN MAIN.asm
                    > USED AT LINE 1180 IN MAIN.asm
SHIFTRIGHT2:        0839 DEFINED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 1175 IN MAIN.asm
DBLQUOTE:           0840 DEFINED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 227 IN MAIN.asm
STRING:             0840 DEFINED AT LINE 1189 IN MAIN.asm
STRING1:            0849 DEFINED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
STRING2:            084C DEFINED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
STRING3:            0855 DEFINED AT LINE 1206 IN MAIN.asm
                    > USED AT LINE 1203 IN MAIN.asm
MINUS:              0868 DEFINED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
SUB:                0874 DEFINED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1228 IN MAIN.asm
SUB1:               087E DEFINED AT LINE 1238 IN MAIN.asm
                    > USED AT LINE 1234 IN MAIN.asm
ERROR1:             0887 DEFINED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
                    > USED AT LINE 1326 IN MAIN.asm
                    > USED AT LINE 1571 IN MAIN.asm
                    > USED AT LINE 1584 IN MAIN.asm
                    > USED AT LINE 1687 IN MAIN.asm
COMMENT:            088E DEFINED AT LINE 1251 IN MAIN.asm
                    > USED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
COMMAND_A:          0897 DEFINED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 713 IN MAIN.asm
ABSOLUTE:           08A3 DEFINED AT LINE 1270 IN MAIN.asm
                    > USED AT LINE 1262 IN MAIN.asm
ADDROF:             08B0 DEFINED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
ADDROF1:            08C4 DEFINED AT LINE 1297 IN MAIN.asm
                    > USED AT LINE 1293 IN MAIN.asm
ADDROF2:            08CF DEFINED AT LINE 1306 IN MAIN.asm
                    > USED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 1291 IN MAIN.asm
                    > USED AT LINE 1296 IN MAIN.asm
COMMAND_B:          08D1 DEFINED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
BUFFERARRAY:        08EC DEFINED AT LINE 1328 IN MAIN.asm
                    > USED AT LINE 1312 IN MAIN.asm
BUFFERARRAY_BLOCK:  08F5 DEFINED AT LINE 1333 IN MAIN.asm
                    > USED AT LINE 1331 IN MAIN.asm
BUFFERCHAR:         0926 DEFINED AT LINE 1389 IN MAIN.asm
                    > USED AT LINE 1314 IN MAIN.asm
BUFFERDEC:          0935 DEFINED AT LINE 1401 IN MAIN.asm
                    > USED AT LINE 1316 IN MAIN.asm
BUFFERDEC0:         094D DEFINED AT LINE 1418 IN MAIN.asm
                    > USED AT LINE 1405 IN MAIN.asm
BUFFERDEC1:         095D DEFINED AT LINE 1432 IN MAIN.asm
                    > USED AT LINE 1420 IN MAIN.asm
BUFFERDEC2:         097D DEFINED AT LINE 1446 IN MAIN.asm
                    > USED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 1437 IN MAIN.asm
                    > USED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 1441 IN MAIN.asm
                    > USED AT LINE 1444 IN MAIN.asm
BUFFERDEC3:         097F DEFINED AT LINE 1448 IN MAIN.asm
                    > USED AT LINE 1451 IN MAIN.asm
BUFFERDEC4:         098F DEFINED AT LINE 1460 IN MAIN.asm
                    > USED AT LINE 1455 IN MAIN.asm
BUFFERDEC5:         0990 DEFINED AT LINE 1462 IN MAIN.asm
                    > USED AT LINE 1459 IN MAIN.asm
BUFFERHEX:          0996 DEFINED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 1318 IN MAIN.asm
BUFFERHEX1:         09B1 DEFINED AT LINE 1487 IN MAIN.asm
                    > USED AT LINE 1476 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
BUFFERHEX2:         09BA DEFINED AT LINE 1495 IN MAIN.asm
                    > USED AT LINE 1493 IN MAIN.asm
BREAK:              09C5 DEFINED AT LINE 1507 IN MAIN.asm
                    > USED AT LINE 1320 IN MAIN.asm
BREAK1:             09CC DEFINED AT LINE 1513 IN MAIN.asm
                    > USED AT LINE 1511 IN MAIN.asm
BUFFERSTRING:       09DF DEFINED AT LINE 1526 IN MAIN.asm
                    > USED AT LINE 1322 IN MAIN.asm
BUFFERSTRING0:      09E6 DEFINED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1537 IN MAIN.asm
BUFFERSTRING1:      09E9 DEFINED AT LINE 1534 IN MAIN.asm
                    > USED AT LINE 1529 IN MAIN.asm
BUFFERXSPACES:      09FB DEFINED AT LINE 1548 IN MAIN.asm
                    > USED AT LINE 1324 IN MAIN.asm
BUFFERXSPACES1:     0A02 DEFINED AT LINE 1553 IN MAIN.asm
                    > USED AT LINE 1560 IN MAIN.asm
BUFFERXSPACES2:     0A06 DEFINED AT LINE 1557 IN MAIN.asm
                    > USED AT LINE 1552 IN MAIN.asm
COMMAND_I:          0A0F DEFINED AT LINE 1564 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
COMMAND_P:          0A1B DEFINED AT LINE 1573 IN MAIN.asm
                    > USED AT LINE 733 IN MAIN.asm
PARTIAL:            0A2D DEFINED AT LINE 1588 IN MAIN.asm
                    > USED AT LINE 1576 IN MAIN.asm
PRINTCHARS:         0A4D DEFINED AT LINE 1607 IN MAIN.asm
                    > USED AT LINE 1578 IN MAIN.asm
PRINTCHARS1:        0A53 DEFINED AT LINE 1612 IN MAIN.asm
                    > USED AT LINE 1620 IN MAIN.asm
PRINTCHARS2:        0A55 DEFINED AT LINE 1615 IN MAIN.asm
                    > USED AT LINE 1611 IN MAIN.asm
PRINTSTACK:         0A5F DEFINED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 1580 IN MAIN.asm
SIZE:               0A61 DEFINED AT LINE 1655 IN MAIN.asm
                    > USED AT LINE 735 IN MAIN.asm
PRINTX:             0A6B DEFINED AT LINE 1666 IN MAIN.asm
                    > USED AT LINE 1582 IN MAIN.asm
PRINTX_BLOCK:       0A74 DEFINED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 1669 IN MAIN.asm
COMMAND_V:          0A96 DEFINED AT LINE 1674 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
CONSTBUFSTART:      0AAB DEFINED AT LINE 1689 IN MAIN.asm
                    > USED AT LINE 1683 IN MAIN.asm
CONSTHEAPSTART:     0AB0 DEFINED AT LINE 1693 IN MAIN.asm
CONSTTIBSTART:      0AB5 DEFINED AT LINE 1697 IN MAIN.asm
                    > USED AT LINE 1685 IN MAIN.asm
VARBUFPTR:          0ABA DEFINED AT LINE 1701 IN MAIN.asm
                    > USED AT LINE 1677 IN MAIN.asm
VARHEAPPTR:         0AC3 DEFINED AT LINE 1706 IN MAIN.asm
                    > USED AT LINE 1679 IN MAIN.asm
VARTIBPTR:          0ACC DEFINED AT LINE 1711 IN MAIN.asm
                    > USED AT LINE 1681 IN MAIN.asm
VARIABLE:           0AD5 DEFINED AT LINE 1716 IN MAIN.asm
                    > USED AT LINE 297 IN MAIN.asm
                    > USED AT LINE 1704 IN MAIN.asm
                    > USED AT LINE 1709 IN MAIN.asm
                    > USED AT LINE 1714 IN MAIN.asm
CONSTANT:           0AD8 DEFINED AT LINE 1718 IN MAIN.asm
                    > USED AT LINE 1691 IN MAIN.asm
                    > USED AT LINE 1695 IN MAIN.asm
                    > USED AT LINE 1699 IN MAIN.asm
CHARS:              0ADB DEFINED AT LINE 1723 IN MAIN.asm
                    > USED AT LINE 717 IN MAIN.asm
CHARS1:             0ADE DEFINED AT LINE 1725 IN MAIN.asm
                    > USED AT LINE 1770 IN MAIN.asm
DECIMAL:            0AE3 DEFINED AT LINE 1729 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
DECIMAL1:           0AE6 DEFINED AT LINE 1731 IN MAIN.asm
                    > USED AT LINE 1736 IN MAIN.asm
HEXADECIMAL:        0AEB DEFINED AT LINE 1734 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
INPUT:              0AF1 DEFINED AT LINE 1740 IN MAIN.asm
                    > USED AT LINE 1567 IN MAIN.asm
KEY:                0AFC DEFINED AT LINE 1750 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
OUTPUT:             0B05 DEFINED AT LINE 1759 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
NUMBERS:            0B0E DEFINED AT LINE 1768 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
FILTER:             0B14 DEFINED AT LINE 1777 IN MAIN.asm
MAP:                0B14 DEFINED AT LINE 1778 IN MAIN.asm
ZPRT:               0B16 DEFINED AT LINE 1782 IN MAIN.asm
ZPRT_ARGS:          0B21 DEFINED AT LINE 1789 IN MAIN.asm
                    > USED AT LINE 1786 IN MAIN.asm
ZPRT_BLOCK:         0B23 DEFINED AT LINE 1791 IN MAIN.asm
                    > USED AT LINE 1785 IN MAIN.asm
ARGS0A1L_:          0B4A DEFINED AT LINE 1797 IN MAIN.asm
ARGS0A1L:           0B4C DEFINED AT LINE 1800 IN MAIN.asm
ARGS1A0L_:          0B4D DEFINED AT LINE 1803 IN MAIN.asm
ARGS1A0L:           0B4F DEFINED AT LINE 1806 IN MAIN.asm
                    > USED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
                    > USED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 1670 IN MAIN.asm
ARGS1A1L_:          0B50 DEFINED AT LINE 1809 IN MAIN.asm
ARGS1A1L:           0B52 DEFINED AT LINE 1812 IN MAIN.asm
ARGS2A0L_:          0B54 DEFINED AT LINE 1815 IN MAIN.asm
ARGS2A0L:           0B56 DEFINED AT LINE 1818 IN MAIN.asm
ARGS1A2L_:          0B58 DEFINED AT LINE 1821 IN MAIN.asm
ARGS1A2L:           0B5A DEFINED AT LINE 1824 IN MAIN.asm
                    > USED AT LINE 1332 IN MAIN.asm
JUMPTABLE:          0B5D DEFINED AT LINE 1835 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
                    > USED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 1310 IN MAIN.asm
                    > USED AT LINE 1565 IN MAIN.asm
                    > USED AT LINE 1574 IN MAIN.asm
                    > USED AT LINE 1675 IN MAIN.asm
JUMPTABLE0:         0B5F DEFINED AT LINE 1838 IN MAIN.asm
                    > USED AT LINE 1848 IN MAIN.asm
JUMPTABLE1:         0B6C DEFINED AT LINE 1849 IN MAIN.asm
                    > USED AT LINE 1841 IN MAIN.asm
JUMPTABLE2:         0B6D DEFINED AT LINE 1851 IN MAIN.asm
                    > USED AT LINE 1844 IN MAIN.asm
PRTSTR0:            0B73 DEFINED AT LINE 1859 IN MAIN.asm
                    > USED AT LINE 1865 IN MAIN.asm
PRTSTR:             0B77 DEFINED AT LINE 1862 IN MAIN.asm
                    > USED AT LINE 1929 IN MAIN.asm
NESTING:            0B7C DEFINED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 1974 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
NESTING0:           0B86 DEFINED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 1882 IN MAIN.asm
NESTING1A:          0B8D DEFINED AT LINE 1889 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
NESTING1:           0B90 DEFINED AT LINE 1892 IN MAIN.asm
                    > USED AT LINE 1883 IN MAIN.asm
NESTING2:           0B9F DEFINED AT LINE 1901 IN MAIN.asm
                    > USED AT LINE 1896 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
NESTING3:           0BA1 DEFINED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 1900 IN MAIN.asm
NESTING4:           0BAC DEFINED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1906 IN MAIN.asm
                    > USED AT LINE 1908 IN MAIN.asm
PROMPT:             0BAE DEFINED AT LINE 1915 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
CRLF:               0BB7 DEFINED AT LINE 1920 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
PRINTSTR:           0BBE DEFINED AT LINE 1927 IN MAIN.asm
                    > USED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 2089 IN MAIN.asm
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 19
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 12
                    > USED AT LINE 15
                    > USED AT LINE 23
                    > USED AT LINE 141
INIT:               0BC5 DEFINED AT LINE 1934 IN MAIN.asm
                    > USED AT LINE 9
                    > USED AT LINE 1952 IN MAIN.asm
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
                    > USED AT LINE 47
INIT0:              0BDE DEFINED AT LINE 1944 IN MAIN.asm
                    > USED AT LINE 1947 IN MAIN.asm
START:              0BE3 DEFINED AT LINE 1950 IN MAIN.asm
INTERPRET:          0BF9 DEFINED AT LINE 1956 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
                    > USED AT LINE 2082 IN MAIN.asm
                    > USED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2100 IN MAIN.asm
                    > USED AT LINE 2105 IN MAIN.asm
INTERPRET2:         0C05 DEFINED AT LINE 1963 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
                    > USED AT LINE 2087 IN MAIN.asm
                    > USED AT LINE 2091 IN MAIN.asm
INTERPRET3:         0C0D DEFINED AT LINE 1970 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
INTERPRET4:         0C13 DEFINED AT LINE 1976 IN MAIN.asm
                    > USED AT LINE 1968 IN MAIN.asm
INTERPRET5:         0C18 DEFINED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
                    > USED AT LINE 2044 IN MAIN.asm
INTERPRET5A:        0C3B DEFINED AT LINE 2018 IN MAIN.asm
INTERPRET6:         0C3D DEFINED AT LINE 2023 IN MAIN.asm
                    > USED AT LINE 1985 IN MAIN.asm
INTERPRET7:         0C4B DEFINED AT LINE 2032 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
INTERPRET8:         0C5E DEFINED AT LINE 2046 IN MAIN.asm
                    > USED AT LINE 1988 IN MAIN.asm
NEXT:               0C69 DEFINED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 2058 IN MAIN.asm
NEXT1:              0C7A DEFINED AT LINE 2066 IN MAIN.asm
                    > USED AT LINE 2059 IN MAIN.asm
EXIT:               0C81 DEFINED AT LINE 2070 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
RUN:                0C85 DEFINED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 2080 IN MAIN.asm
                    > USED AT LINE 2095 IN MAIN.asm
                    > USED AT LINE 2103 IN MAIN.asm
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
                    > USED AT LINE 20
                    > USED AT LINE 30
ERROR:              0C89 DEFINED AT LINE 2079 IN MAIN.asm
                    > USED AT LINE 1249 IN MAIN.asm
BACKSPACE_:         0C9C DEFINED AT LINE 2084 IN MAIN.asm
                    > USED AT LINE 1995 IN MAIN.asm
EDIT_:              0CAC DEFINED AT LINE 2094 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
REEDIT_:            0CC4 DEFINED AT LINE 2099 IN MAIN.asm
                    > USED AT LINE 1997 IN MAIN.asm
PRINTSTACK_:        0CC7 DEFINED AT LINE 2102 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
TESTSSTART:         0D00 DEFINED AT LINE 15
                    > USED AT LINE 10
EXPECTM_0_2697S50:  0DF4 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2703S50:  0E6B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2704S50:  0ED8 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2705S50:  0F43 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2706S50:  0FAE DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2707S50:  1019 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2708S50:  1084 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2709S50:  10F1 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2710S50:  1160 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2711S50:  11CD DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2712S50:  123A DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2713S50:  12A9 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2714S50:  131A DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2715S50:  1389 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2716S50:  13F8 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2717S50:  146D DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2718S50:  14E2 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2719S50:  1555 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2720S50:  15CC DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2721S50:  1647 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2722S50:  16C0 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2723S50:  1733 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2724S50:  17AE DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2725S50:  1825 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2726S50:  1898 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2727S50:  190B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2728S50:  1986 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2729S50:  19F9 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2730S50:  1A6C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2731S50:  1AE1 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2732S50:  1B66 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2733S50:  1BD9 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2734S50:  1C54 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2735S50:  1CC7 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2736S50:  1D3E DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2737S50:  1DB1 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2738S50:  1E26 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2739S50:  1E9B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2740S50:  1F0E DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2741S50:  1F81 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2742S50:  1FF4 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2743S50:  2067 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2744S50:  20DA DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2745S50:  214D DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2746S50:  21C0 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2747S50:  2233 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2748S50:  22A8 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2749S50:  231D DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2750S50:  2392 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2751S50:  2409 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2752S50:  2480 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2753S50:  24F1 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2754S50:  2562 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2755S50:  25D9 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2756S50:  2656 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2757S50:  26D3 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2758S50:  2754 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2759S50:  27DF DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2760S50:  286A DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2761S50:  28DD DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2762S50:  2952 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2763S50:  29C9 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2764S50:  2A42 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2765S50:  2AB9 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2766S50:  2B2E DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2767S50:  2BA5 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2768S50:  2C22 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2769S50:  2CA3 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2770S50:  2D20 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2771S50:  2DA7 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2772S50:  2E30 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2773S50:  2EBF DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2774S50:  2F52 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2775S50:  2FD7 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2776S50:  3062 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2777S50:  30EF DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2778S50:  317E DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2779S50:  320B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2780S50:  32A6 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2781S50:  332F DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2782S50:  33C4 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2783S50:  345B DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2784S50:  34F4 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2785S50:  3599 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2786S50:  363E DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2787S50:  36C1 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2788S50:  374A DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2789S50:  37CD DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2790S50:  385C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2791S50:  38EB DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2792S50:  398A DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2793S50:  3A31 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2794S50:  3AD8 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2795S50:  3B67 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2796S50:  3C02 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2797S50:  3C99 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2798S50:  3D36 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2799S50:  3DE9 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2800S50:  3EA0 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2801S50:  3F1F DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2802S50:  3F9E DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2803S50:  401D DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2804S50:  409C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2805S50:  4113 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2806S50:  418A DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2807S50:  4201 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2808S50:  4278 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2809S50:  42FD DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2810S50:  4384 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2811S50:  43FB DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2812S50:  4482 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2813S50:  4521 DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2814S50:  459C DEFINED AT LINE 41
                    > USED AT LINE 10
EXPECTM_0_2815S50:  4627 DEFINED AT LINE 41
                    > USED AT LINE 10
EXECSTR:            4632 DEFINED AT LINE 153
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
                    > USED AT LINE 48
STACK:              4780 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 8
                    > USED AT LINE 888 IN MAIN.asm
                    > USED AT LINE 1936 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
                    > USED AT LINE 46
VARS:               4800 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 1299 IN MAIN.asm
                    > USED AT LINE 1941 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
                    > USED AT LINE 5
                    > USED AT LINE 17
RESTARTS:           48D0 DEFINED AT LINE 10 IN ram.asm
RST08:              48D0 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              48D2 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              48D4 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              48D6 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              48D8 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              48DA DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               48DC DEFINED AT LINE 18 IN ram.asm
INTVEC:             48DE DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             48E0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            48E2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            48E4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            48E6 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 1938 IN MAIN.asm
VDATAWIDTH:         48E6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 429 IN MAIN.asm
                    > USED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 1726 IN MAIN.asm
VNUMBASE:           48E8 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 1732 IN MAIN.asm
VTIBPTR:            48EA DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1712 IN MAIN.asm
                    > USED AT LINE 1713 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
                    > USED AT LINE 2049 IN MAIN.asm
VBUFPTR:            48EC DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1391 IN MAIN.asm
                    > USED AT LINE 1394 IN MAIN.asm
                    > USED AT LINE 1402 IN MAIN.asm
                    > USED AT LINE 1407 IN MAIN.asm
                    > USED AT LINE 1408 IN MAIN.asm
                    > USED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1480 IN MAIN.asm
                    > USED AT LINE 1481 IN MAIN.asm
                    > USED AT LINE 1528 IN MAIN.asm
                    > USED AT LINE 1538 IN MAIN.asm
                    > USED AT LINE 1539 IN MAIN.asm
                    > USED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 1702 IN MAIN.asm
                    > USED AT LINE 1703 IN MAIN.asm
VNEXT:              48EE DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1935 IN MAIN.asm
VHEAPPTR:           48F0 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 413 IN MAIN.asm
                    > USED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 544 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
                    > USED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 1145 IN MAIN.asm
                    > USED AT LINE 1147 IN MAIN.asm
                    > USED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 1210 IN MAIN.asm
                    > USED AT LINE 1590 IN MAIN.asm
                    > USED AT LINE 1595 IN MAIN.asm
                    > USED AT LINE 1596 IN MAIN.asm
                    > USED AT LINE 1707 IN MAIN.asm
                    > USED AT LINE 1708 IN MAIN.asm
VPOINTER:           48F2 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 295 IN MAIN.asm
                    > USED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 379 IN MAIN.asm
                    > USED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 1024 IN MAIN.asm
                    > USED AT LINE 1717 IN MAIN.asm
VREMAIN:            48F4 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
VSAVEDIP:           48F6 DEFINED AT LINE 40 IN ram.asm
VSAVEDSP:           48F8 DEFINED AT LINE 41 IN ram.asm
VSAVEDBP:           48FA DEFINED AT LINE 42 IN ram.asm
VCHECKSUM:          48FC DEFINED AT LINE 43 IN ram.asm
VTEMP1:             48FE DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 406 IN MAIN.asm
                    > USED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 624 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
                    > USED AT LINE 921 IN MAIN.asm
                    > USED AT LINE 946 IN MAIN.asm
                    > USED AT LINE 953 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
                    > USED AT LINE 1591 IN MAIN.asm
                    > USED AT LINE 1594 IN MAIN.asm
VTEMP2:             4900 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 922 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
VLASTDEF:           4902 DEFINED AT LINE 49 IN ram.asm
VHASHSTR:           4904 DEFINED AT LINE 50 IN ram.asm
TBPTR:              4906 DEFINED AT LINE 51 IN ram.asm
TIB:                4A00 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 1698 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
                    > USED AT LINE 1967 IN MAIN.asm
                    > USED AT LINE 2024 IN MAIN.asm
                    > USED AT LINE 2033 IN MAIN.asm
                    > USED AT LINE 2047 IN MAIN.asm
                    > USED AT LINE 2050 IN MAIN.asm
BUF:                4B00 DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 1690 IN MAIN.asm
PAD:                4C00 DEFINED AT LINE 58 IN ram.asm
HEAP:               4D00 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 65 IN MAIN.asm
                    > USED AT LINE 599 IN MAIN.asm
                    > USED AT LINE 1694 IN MAIN.asm
