0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                .macro EXPECT,
0000                             ; 
0000                .endm
0000                 
0000                .macro TEST,
0000                             ; 
0000                 ld SP,STACK
0000                 call coldInit
0000                 call execStr
0000                 db %%1,0
0000                 pop HL
0000                 push HL
0000                 ld DE,%%2
0000                 or A
0000                 sbc HL,DE
0000                 ld A,L
0000                 or H
0000                 jp Z,expect%%M
0000                 call printStr
0000                 .cstr "Code: ",%%1
0000                 call printStr
0000                 .cstr "\r\n\r\nExpected: "
0000                 ld hl,%%2
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ".`$`.h"
0000                 call printStr
0000                 .cstr "\r\n\r\nActual: "
0000                 pop hl
0000                 push hl
0000                 push hl
0000                 call run
0000                 .cstr ".`$`.h`\r\n`"
0000                 halt
0000                expect%%M:
0000                 pop HL
0000                .endm
0000                 
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 51               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 51               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 51               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 51               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 51               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 51               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 51               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 51               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 51               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 51               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 4F               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 51               LD   (RST08),HL   
0094   22 D2 51               LD   (RST10),HL   
0097   22 D4 51               LD   (RST18),HL   
009A   22 D6 51               LD   (RST20),HL   
009D   22 D8 51               LD   (RST28),HL   
00A0   22 DA 51               LD   (RST30),HL   
00A3   22 DE 51               LD   (INTVEC),HL   
00A6   22 E0 51               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 51               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 51               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3   C3 00 12               JP   testsStart   
00C6                             ; *************************************************************************
00C6                             ; 
00C6                             ;  Monty programming language for the Z80
00C6                             ; 
00C6                             ;  by John Hardy 2023
00C6                             ; 
00C6                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C6                             ; 
00C6                             ;  see the LICENSE file in this repo for more information
00C6                             ; 
00C6                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C6                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C6                             ; 
00C6                             ; *****************************************************************************
00C6                TRUE:     EQU   -1   ; C-style true
00C6                FALSE:    EQU   0   
00C6                NUL:      EQU   0   ; exit code
00C6                DQ:       EQU   $22   ; " double quote char
00C6                CTRL_C:   EQU   3   
00C6                CTRL_E:   EQU   5   
00C6                CTRL_H:   EQU   8   
00C6                CTRL_J:   EQU   10   
00C6                CTRL_L:   EQU   12   
00C6                CTRL_P:   EQU   16   
00C6                CTRL_S:   EQU   19   
00C6                ESC:      EQU   27   
00C6                             ; macros for inlining a onty function in assembly
00C6                             ; follow immediately with a null terminated block of Monty code
00C6                .macro FUNC,name,numLocals,argsStr
00C6                             ; 
00C6                name:
00C6                 call go
00C6                 dw NUL                      ; NUL closure
00C6                 dw name%%M
00C6                 dw $+2
00C6                 db numLocals                ; num_locals
00C6                 .pstr argsStr
00C6                name%%M:
00C6                .endm
00C6                 
00C6                .macro PERFORM,name
00C6                             ; 
00C6                 ld ix,perform%%M
00C6                 jp name
00C6                perform%%M:
00C6                .endm
00C6                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   21                     DB   lsb(bang_)   ; !     1
0181   04                     DB   lsb(dquote_)   ; "     2
0182   5E                     DB   lsb(hash_)   ; #     1
0183   06                     DB   lsb(dollar_)   ; $     1
0184   09                     DB   lsb(percent_)   ; %     1
0185   7E                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   0F                     DB   lsb(lparen_)   ; (     1
0188   76                     DB   lsb(rparen_)   ; )     1
0189   A6                     DB   lsb(star_)   ; *     1
018A   CA                     DB   lsb(plus_)   ; +     1
018B   04                     DB   lsb(comma_)   ; ,     2
018C   88                     DB   lsb(minus_)   ; -     1
018D   12                     DB   lsb(dot_)   ; .     2
018E   15                     DB   lsb(slash_)   ; /	    1
018F   18                     DB   lsb(num_)   ; 0     1
0190   18                     DB   lsb(num_)   ; 1
0191   18                     DB   lsb(num_)   ; 2
0192   18                     DB   lsb(num_)   ; 3
0193   18                     DB   lsb(num_)   ; 4
0194   18                     DB   lsb(num_)   ; 5
0195   18                     DB   lsb(num_)   ; 6
0196   18                     DB   lsb(num_)   ; 7
0197   18                     DB   lsb(num_)   ; 8
0198   18                     DB   lsb(num_)   ; 9
0199   E6                     DB   lsb(colon_)   ; :     2
019A   1B                     DB   lsb(semicolon_)   ; ;     2
019B   4C                     DB   lsb(lt_)   ; <     1
019C   32                     DB   lsb(eq_)   ; =     1
019D   41                     DB   lsb(gt_)   ; >     1
019E   1E                     DB   lsb(question_)   ; ?     1
019F   FE                     DB   lsb(at_)   ; @     2
01A0   FC                     DB   lsb(upcase_)   ; A     1
01A1   FC                     DB   lsb(upcase_)   ; B
01A2   FC                     DB   lsb(upcase_)   ; C
01A3   FC                     DB   lsb(upcase_)   ; D
01A4   FC                     DB   lsb(upcase_)   ; E
01A5   FC                     DB   lsb(upcase_)   ; F
01A6   FC                     DB   lsb(upcase_)   ; G
01A7   FC                     DB   lsb(upcase_)   ; h
01A8   FC                     DB   lsb(upcase_)   ; I
01A9   FC                     DB   lsb(upcase_)   ; J
01AA   FC                     DB   lsb(upcase_)   ; K
01AB   FC                     DB   lsb(upcase_)   ; L
01AC   FC                     DB   lsb(upcase_)   ; M
01AD   FC                     DB   lsb(upcase_)   ; N
01AE   FC                     DB   lsb(upcase_)   ; O
01AF   FC                     DB   lsb(upcase_)   ; p
01B0   FC                     DB   lsb(upcase_)   ; Q
01B1   FC                     DB   lsb(upcase_)   ; R
01B2   FC                     DB   lsb(upcase_)   ; S
01B3   FC                     DB   lsb(upcase_)   ; T
01B4   FC                     DB   lsb(upcase_)   ; U
01B5   FC                     DB   lsb(upcase_)   ; V
01B6   FC                     DB   lsb(upcase_)   ; W
01B7   FC                     DB   lsb(upcase_)   ; X
01B8   FC                     DB   lsb(upcase_)   ; Y
01B9   FC                     DB   lsb(upcase_)   ; Z
01BA   27                     DB   lsb(lbrack_)   ; [     2
01BB   43                     DB   lsb(backslash_)   ; \     2
01BC   64                     DB   lsb(rbrack_)   ; ]     2
01BD   B4                     DB   lsb(caret_)   ; ^     1
01BE   F6                     DB   lsb(underscore_)   ; _     2
01BF   CA                     DB   lsb(grave_)   ; `     2   	
01C0   15                     DB   lsb(lowcase_)   ; a     1
01C1   15                     DB   lsb(lowcase_)   ; b
01C2   15                     DB   lsb(lowcase_)   ; c
01C3   15                     DB   lsb(lowcase_)   ; d
01C4   15                     DB   lsb(lowcase_)   ; e
01C5   15                     DB   lsb(lowcase_)   ; f
01C6   15                     DB   lsb(lowcase_)   ; g
01C7   15                     DB   lsb(lowcase_)   ; h
01C8   15                     DB   lsb(lowcase_)   ; i
01C9   15                     DB   lsb(lowcase_)   ; j
01CA   15                     DB   lsb(lowcase_)   ; k
01CB   15                     DB   lsb(lowcase_)   ; l
01CC   15                     DB   lsb(lowcase_)   ; m
01CD   15                     DB   lsb(lowcase_)   ; n
01CE   15                     DB   lsb(lowcase_)   ; o
01CF   15                     DB   lsb(lowcase_)   ; p
01D0   15                     DB   lsb(lowcase_)   ; q
01D1   15                     DB   lsb(lowcase_)   ; r
01D2   15                     DB   lsb(lowcase_)   ; s
01D3   15                     DB   lsb(lowcase_)   ; t
01D4   15                     DB   lsb(lowcase_)   ; u
01D5   15                     DB   lsb(lowcase_)   ; v
01D6   15                     DB   lsb(lowcase_)   ; w
01D7   15                     DB   lsb(lowcase_)   ; x
01D8   15                     DB   lsb(lowcase_)   ; y
01D9   15                     DB   lsb(lowcase_)   ; z
01DA   E0                     DB   lsb(lbrace_)   ; {     1
01DB   E5                     DB   lsb(pipe_)   ; |     1
01DC   F0                     DB   lsb(rbrace_)   ; }     1
01DD   F3                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 4F                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 50                  DW   BUFFER   ; vBufPtr pointer into BUF
01E6   B6 10                  DW   next   ; nNext
01E8   22 52                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; vStrMode
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                DQUOTE_:      
0204                COMMA_:      
0204   DD E9                  JP   (ix)   
0206                DOLLAR_:      
0206   C3 B3 0B               JP   dollar   
0209                PERCENT_:      
0209   C3 03 0C               JP   percent   
020C                QUOTE_:      
020C   C3 E9 0B               JP   quote   
020F                LPAREN_:      
020F   C3 E0 03               JP   lbrace   
0212                DOT_:        
0212   C3 00 05               JP   dot   
0215                SLASH_:      
0215   C3 00 06               JP   slash   
0218                NUM_:        
0218   C3 38 0C               JP   num   
021B                SEMICOLON_:      
021B   C3 01 03               JP   semicolon   
021E                QUESTION_:      
021E   C3 D0 0B               JP   question   
0221                BANG_:       
0221                BANG:        ; logical invert, any non zero value
0221   03                     INC   bc   
0222   0A                     LD   a,(bc)   
0223   FE 3D                  CP   "="   
0225   20 05                  JR   nz,not   
0227   E1                     POP   hl   
0228   D1                     POP   de   
0229   C3 7A 0D               JP   notequals   
022C                NOT:         
022C   0B                     DEC   bc   
022D   21 00 00               LD   hl,0   ; is considered true
0230   18 0B                  JR   eq1   
0232                EQ_:         
0232                EQ:          
0232   03                     INC   bc   
0233   0A                     LD   a,(bc)   
0234   FE 3D                  CP   "="   
0236   28 04                  JR   z,eq0   
0238   0B                     DEC   bc   
0239   C3 62 0D               JP   assign   
023C                EQ0:         
023C   E1                     POP   hl   
023D                EQ1:         
023D   D1                     POP   de   
023E   C3 73 0D               JP   equals   
0241                GT_:         
0241                GT:          
0241   03                     INC   bc   
0242   0A                     LD   a,(bc)   
0243   FE 3E                  CP   ">"   
0245   CA CE 0D               JP   z,shiftRight   
0248   D1                     POP   de   
0249   E1                     POP   hl   
024A   18 09                  JR   lt1   
024C                LT_:         
024C                LT:          
024C   03                     INC   bc   
024D   0A                     LD   a,(bc)   
024E   FE 3C                  CP   "<"   
0250   CA BE 0D               JP   z,shiftLeft   
0253   E1                     POP   hl   
0254   D1                     POP   de   
0255                LT1:         
0255   FE 3D                  CP   "="   
0257   CA 81 0D               JP   z,lessthaneq   
025A   0B                     DEC   bc   
025B   C3 86 0D               JP   lessthan   
025E                             ; index of an array, based on vDataWidth 22
025E                             ; array* num -- value    ; also sets vPointer to address
025E                HASH_:       
025E                HASH:        
025E                ARRAYINDEX:      
025E   E1                     POP   hl   ; hl = index
025F   D1                     POP   de   ; de = array
0260   3A E6 51               LD   a,(vDataWidth)   ; a = data width
0263   3D                     DEC   a   
0264   28 01                  JR   z,arrayIndex1   
0266                ARRAYINDEX0:      
0266   29                     ADD   hl,hl   ; if data width = 2 then double
0267                ARRAYINDEX1:      
0267   19                     ADD   hl,de   ; add addr
0268   22 F8 51               LD   (vPointer),hl   ; store address in setter
026B   16 00                  LD   d,0   
026D   5E                     LD   e,(hl)   
026E   B7                     OR   a   ; check data width again
026F   28 02                  JR   z,arrayIndex2   
0271   23                     INC   hl   
0272   56                     LD   d,(hl)   
0273                ARRAYINDEX2:      
0273   D5                     PUSH   de   
0274   DD E9                  JP   (ix)   
0276                             ;                               4
0276                RPAREN_:      
0276                RPAREN:      
0276   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0279   FD 46 09               LD   b,(iy+9)   
027C   DD E9                  JP   (ix)   
027E                             ; & and                          14
027E                             ; a b -- c
027E                AMPER_:      
027E                AMPER:       
027E                AND:         
027E   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
027F   E1                     POP   hl   
0280   7B                     LD   a,e   
0281   A5                     AND   l   
0282   6F                     LD   l,a   
0283   7A                     LD   a,d   
0284   A4                     AND   h   
0285   67                     LD   h,a   
0286   18 51                  JR   add3   
0288                             ; - sub                          23
0288                             ; a b -- c
0288                MINUS_:      
0288                MINUS:       
0288   03                     INC   bc   ; check if sign of a number
0289   0A                     LD   a,(bc)   
028A   0B                     DEC   bc   
028B   FE 30                  CP   "0"   
028D   38 05                  JR   c,sub   
028F   FE 3A                  CP   "9"+1   
0291   DA 38 0C               JP   c,num   
0294                SUB:         ; Subtract the value 2nd on stack from top of stack
0294   03                     INC   bc   
0295   FE 2D                  CP   "-"   
0297   20 05                  JR   nz,sub1   
0299   E1                     POP   hl   
029A   2B                     DEC   hl   
029B   C3 64 0D               JP   assign0   
029E                SUB1:        
029E   0B                     DEC   bc   
029F   D1                     POP   de   
02A0   E1                     POP   hl   
02A1   B7                     OR   a   
02A2   ED 52                  SBC   hl,de   
02A4   18 33                  JR   add3   
02A6                STAR_:       ; 21
02A6                STAR:        
02A6   03                     INC   bc   ; check for ** spread
02A7   0A                     LD   a,(bc)   
02A8   FE 2A                  CP   "*"   
02AA   CA 9A 0D               JP   z,spread   
02AD   0B                     DEC   bc   
02AE                MUL:         
02AE   D1                     POP   de   ; get first value
02AF   E1                     POP   hl   
02B0                MUL2:        
02B0   C5                     PUSH   bc   ; Preserve the IP
02B1   44 4D                  LD   bc,hl   ; bc = 2nd value
02B3   21 00 00               LD   hl,0   
02B6   3E 10                  LD   a,16   
02B8                MUL3:        
02B8   29                     ADD   hl,hl   
02B9   CB 13                  RL   e   
02BB   CB 12                  RL   d   
02BD   30 04                  JR   nc,$+6   
02BF   09                     ADD   hl,bc   
02C0   30 01                  JR   nc,$+3   
02C2   13                     INC   de   
02C3   3D                     DEC   a   
02C4   20 F2                  JR   nz,mul3   
02C6   C1                     POP   bc   ; Restore the IP
02C7   C3 D9 02               JP   add3   
02CA                             ; + add                         25
02CA                             ; a b -- c
02CA                PLUS_:       
02CA                PLUS:        
02CA                ADD:         
02CA   03                     INC   bc   
02CB   0A                     LD   a,(bc)   
02CC   FE 2B                  CP   "+"   ; ++ increment variable
02CE   20 05                  JR   nz,add1   
02D0   E1                     POP   hl   
02D1   23                     INC   hl   
02D2   C3 64 0D               JP   assign0   
02D5                ADD1:        
02D5   0B                     DEC   bc   
02D6   D1                     POP   de   ; second term
02D7   E1                     POP   hl   ; first term
02D8   19                     ADD   hl,de   
02D9                ADD3:        
02D9   03                     INC   bc   
02DA   0A                     LD   a,(bc)   
02DB   FE 3D                  CP   "="   
02DD   28 04                  JR   z,add4   
02DF   0B                     DEC   bc   
02E0   E5                     PUSH   hl   
02E1   DD E9                  JP   (ix)   
02E3                ADD4:        
02E3   C3 64 0D               JP   assign0   
02E6                COLON_:      
02E6                COLON:       
02E6   03                     INC   bc   ; arg_list must ve immediately followed by {
02E7   0A                     LD   a,(bc)   
02E8   FE 3D                  CP   "="   ; := definition
02EA   28 07                  JR   z,defineStart   
02EC   0B                     DEC   bc   
02ED   21 01 00               LD   hl,1   
02F0   C3 DA 10               JP   error   
02F3                DEFINESTART:      
02F3   E1                     POP   hl   ; discard variable value
02F4   2A F8 51               LD   hl,(vPointer)   ; vDefine = vPointer
02F7   22 F4 51               LD   (vDefine),hl   
02FA   DD E9                  JP   (ix)   
02FC                             ;                               18
02FC                UPCASE_:      
02FC                UPCASE:      
02FC   0A                     LD   a,(bc)   ; a = identifier char
02FD   D6 41                  SUB   "A"   ; "A" = 0
02FF   18 19                  JR   ident1   
0301                             ; ;
0301                SEMICOLON:      
0301                DEFINEEND:      
0301   2A F4 51               LD   hl,(vDefine)   ; hl = define*
0304   7D                     LD   a,l   
0305   B4                     OR   h   
0306   28 0B                  JR   z,defineEnd1   
0308   11 00 00               LD   de,NUL   ; set vDefine=NUL
030B   ED 53 F4 51            LD   (vDefine),de   
030F   D1                     POP   de   ; de = value
0310   C3 68 0D               JP   assign1   
0313                DEFINEEND1:      
0313   DD E9                  JP   (ix)   
0315                             ;********************** PAGE 2 END *********************************************
0315                             ; .align $100
0315                             ;********************** PAGE 3 BEGIN *********************************************
0315                LOWCASE_:      
0315                LOWCASE:      
0315   0A                     LD   a,(bc)   
0316   D6 61                  SUB   "a"   
0318   C6 1A                  ADD   a,26   
031A                IDENT1:      
031A   87                     ADD   a,a   ; l = a * 2
031B   6F                     LD   l,a   
031C   26 51                  LD   h,msb(vars)   
031E   22 F8 51               LD   (vPointer),hl   ; store address in setter
0321   5E                     LD   e,(hl)   
0322   23                     INC   hl   
0323   56                     LD   d,(hl)   
0324   D5                     PUSH   de   
0325   DD E9                  JP   (ix)   
0327                             ; [                             14
0327                LBRACK_:      
0327                LBRACK:      
0327                ARRAYSTART:      
0327   11 00 00               LD   de,0   ; create stack frame
032A   D5                     PUSH   de   ; push null for IP
032B   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
032E   FD 56 05               LD   d,(iy+5)   ; 
0331   D5                     PUSH   de   ; 
0332   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0335   FD 56 03               LD   d,(iy+3)   ; 
0338   D5                     PUSH   de   ; 
0339   FD E5                  PUSH   iy   ; push BP
033B   FD 21 00 00            LD   iy,0   ; BP = SP
033F   FD 39                  ADD   iy,sp   
0341   DD E9                  JP   (ix)   
0343                             ; \                             19
0343                BACKSLASH_:      
0343                BACKSLASH:      
0343                LAMBDA:      
0343   DD E5                  PUSH   ix   
0345   CD 14 0E               CALL   parseArgs   
0348                LAMBDA1:      
0348   03                     INC   bc   ; arg_list must ve immediately followed by {
0349   0A                     LD   a,(bc)   
034A   FE 21                  CP   " "+1   ; skip white space
034C   38 FA                  JR   c,lambda1   
034E   FE 7B                  CP   "{"   
0350   28 06                  JR   z,lambda2   
0352   21 02 00               LD   hl,2   ; error 2: parse error
0355   C3 DA 10               JP   error   
0358                LAMBDA2:      
0358   CD 4A 0E               CALL   parseBlock   
035B   CD B4 0E               CALL   createFunc   
035E   E1                     POP   hl   
035F   DD E1                  POP   ix   
0361   E5                     PUSH   hl   
0362   DD E9                  JP   (ix)   
0364                RBRACK_:      
0364                RBRACK:      
0364                ARRAYEND:      ; 53
0364   FD 54                  LD   d,iyh   ; de = BP
0366   FD 5D                  LD   e,iyl   
0368   ED 43 04 52            LD   (vTemp1),bc   ; save IP
036C   62 6B                  LD   hl,de   ; hl = de = BP
036E   B7                     OR   a   
036F   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0371   CB 3C                  SRL   h   ; 
0373   CB 1D                  RR   l   
0375   44 4D                  LD   bc,hl   ; bc = count
0377   2A F0 51               LD   hl,(vHeapPtr)   ; hl = array[-4]
037A   71                     LD   (hl),c   ; write num items in length word
037B   23                     INC   hl   
037C   70                     LD   (hl),b   
037D   23                     INC   hl   ; hl = array[0], bc = count
037E                             ; de = BP, hl = array[0], bc = count
037E   18 15                  JR   arrayEnd3   
0380                ARRAYEND1:      
0380   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0383   77                     LD   (hl),a   ; write lsb of array item
0384   23                     INC   hl   ; move to msb of array item
0385   3A E6 51               LD   a,(vDataWidth)   ; vDataWidth=1?
0388   3D                     DEC   a   
0389   28 05                  JR   z,arrayEnd2   
038B   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
038E   77                     LD   (hl),a   ; write msb of array item
038F   23                     INC   hl   ; move to next word in array
0390                ARRAYEND2:      
0390   FD 2B                  DEC   iy   ; move to next word on stack
0392   FD 2B                  DEC   iy   
0394   0B                     DEC   bc   ; dec items count
0395                ARRAYEND3:      
0395   79                     LD   a,c   ; if not zero loop
0396   B0                     OR   b   
0397   20 E7                  JR   nz,arrayEnd1   
0399   EB                     EX   de,hl   ; de = end of array, hl = BP
039A   F9                     LD   sp,hl   ; sp = BP
039B   E1                     POP   hl   ; de = end of array, hl = old BP
039C   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
039D   FD 62                  LD   iyh,d   
039F   FD 6B                  LD   iyl,e   
03A1   D1                     POP   de   ; pop arg_list (discard)
03A2   D1                     POP   de   ; pop first_arg* (discard)
03A3   D1                     POP   de   ; pop IP (discard)
03A4   ED 5B F0 51            LD   de,(vHeapPtr)   ; de = array[-2]
03A8   13                     INC   de   
03A9   13                     INC   de   
03AA   D5                     PUSH   de   ; return array[0]
03AB   22 F0 51               LD   (vHeapPtr),hl   ; move heap* to end of array
03AE   ED 4B 04 52            LD   bc,(vTemp1)   ; restore IP
03B2   DD E9                  JP   (ix)   
03B4                CARET_:      
03B4                             ; execute a block of code which ends with } 116
03B4                             ; creates a root scope if BP == stack
03B4                             ; else uses outer scope
03B4                CARET:       
03B4                GO:          
03B4   D1                     POP   de   ; de = block*
03B5                GO1:         
03B5   7B                     LD   a,e   ; if block* == null, exit
03B6   B2                     OR   d   
03B7   20 02                  JR   nz,go2   
03B9   DD E9                  JP   (ix)   
03BB                GO2:         
03BB   1A                     LD   a,(de)   
03BC   FE 7B                  CP   "{"   
03BE   CA D5 0C               JP   z,goBlock   
03C1   FE 28                  CP   "("   
03C3   C2 08 0D               JP   nz,goFunc   
03C6   D5                     PUSH   de   ; push de just before stack frame
03C7   CA D5 0C               JP   z,goBlock   
03CA                GRAVE_:      
03CA                GRAVE:       
03CA                PRINTLITERAL:      
03CA   03                     INC   bc   ; move to first char
03CB   ED 5B EC 51            LD   de,(vBufPtr)   ; de = buffer*
03CF   18 03                  JR   printLiteral1   
03D1                PRINTLITERAL0:      
03D1   12                     LD   (de),a   ; a -> buffer*
03D2   13                     INC   de   ; string*++,
03D3   03                     INC   bc   
03D4                PRINTLITERAL1:      
03D4   0A                     LD   a,(bc)   ; a <- string*
03D5   FE 60                  CP   "`"   ; if ` exit loop
03D7   20 F8                  JR   nz,printLiteral0   
03D9   ED 53 EC 51            LD   (vBufPtr),de   ; save buffer*' in pointer
03DD   C3 FA 0D               JP   dotNext   
03E0                LBRACE_:      
03E0                LBRACE:      
03E0   CD 4A 0E               CALL   parseBlock   
03E3   DD E9                  JP   (ix)   
03E5                             ; | or                          11
03E5                             ; a b -- c
03E5                PIPE_:       
03E5                PIPE:        
03E5                OR:          
03E5   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03E6   E1                     POP   hl   
03E7   7B                     LD   a,e   
03E8   B5                     OR   l   
03E9   6F                     LD   l,a   
03EA   7A                     LD   a,d   
03EB   B4                     OR   h   
03EC   67                     LD   h,a   
03ED   C3 D9 02               JP   add3   
03F0                RBRACE_:      
03F0   C3 68 0C               JP   rbrace   
03F3                             ; ~ char                        8
03F3                TILDE_:      
03F3   C3 A9 0B               JP   tilde   
03F6                UNDERSCORE_:      
03F6                CHAR:        
03F6   03                     INC   bc   ; point to next char
03F7   0A                     LD   a,(bc)   
03F8   6F                     LD   l,a   
03F9   26 00                  LD   h,0   
03FB   E5                     PUSH   hl   
03FC   DD E9                  JP   (ix)   
03FE                AT_:         
03FE                AT:          
03FE                ADDR:        
03FE   ED 5B F8 51            LD   de,(vPointer)   
0402   21 F8 51               LD   hl,vPointer   
0405   C3 36 08               JP   variable   
0408                             ;********************** PAGE 3 END *********************************************
0408                          ALIGN   $100   
0500                             ;********************** PAGE 4 BEGIN *********************************************
0500                             ;                               67
0500                DOT:         
0500                PRINT:       
0500   CD 6C 0F               CALL   commandTable   
0503   61                     DB   "a"   ; .a print array
0504   61 0B                  DW   printArray   
0506   63                     DB   "c"   ; .c print char
0507   12 05                  DW   printChar   
0509   68                     DB   "h"   ; .h print hex without $ prefix
050A   A7 05                  DW   printHex0   
050C   73                     DB   "s"   ; .s print string
050D   21 05                  DW   printString   
050F   00                     DB   NUL   ; .  print number, fall through
0510   36 05                  DW   printNumber   
0512                             ; .c print char
0512                             ; char --
0512                PRINTCHAR:      
0512   E1                     POP   hl   ; a = char
0513   7D                     LD   a,l   
0514   ED 5B EC 51            LD   de,(vBufPtr)   ; de = buffer*
0518   12                     LD   (de),a   
0519   13                     INC   de   
051A   ED 53 EC 51            LD   (vBufPtr),de   ; save buffer*'
051E   C3 FA 0D               JP   dotNext   
0521                             ; .s print string
0521                             ; string* --
0521                PRINTSTRING:      
0521   E1                     POP   hl   ; hl = string*
0522   ED 5B EC 51            LD   de,(vBufPtr)   ; de = buffer*
0526   18 03                  JR   printString1   
0528                PRINTSTRING0:      
0528   12                     LD   (de),a   ; a -> buffer*
0529   13                     INC   de   ; string*++,
052A   23                     INC   hl   
052B                PRINTSTRING1:      
052B   7E                     LD   a,(hl)   ; a <- string*
052C   B7                     OR   a   ; if NUL exit loop
052D   20 F9                  JR   nz,printString0   
052F   ED 53 EC 51            LD   (vBufPtr),de   ; save buffer*' in pointer
0533   C3 FA 0D               JP   dotNext   
0536                             ; . print decimal
0536                             ; value --
0536                PRINTNUMBER:      
0536   3A E8 51               LD   a,(vNumBase)   
0539   FE 10                  CP   16   
053B   CA AD 05               JP   z,printHex   ; else falls through
053E   C3 41 05               JP   printDec   
0541                             ; print decimal                 ; 70
0541                             ; value --
0541                PRINTDEC:      
0541   ED 5B EC 51            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0545   D9                     EXX      
0546   E1                     POP   hl   ; hl = value
0547   3A E6 51               LD   a,(vDataWidth)   
054A   3D                     DEC   a   
054B   20 02                  JR   nz,printDec1   
054D   26 00                  LD   h,0   
054F                PRINTDEC1:      
054F   CD 5E 05               CALL   printDec2   
0552   D9                     EXX      ; de = buffer*' bc = IP
0553   3E 20                  LD   a," "   ; append space to buffer
0555   12                     LD   (de),a   
0556   13                     INC   de   ; string*++,
0557   ED 53 EC 51            LD   (vBufPtr),de   ; update buffer* with buffer*'
055B   C3 FA 0D               JP   dotNext   
055E                             ; hl = value
055E                             ; de' = buffer*
055E                             ; a, bc, de, hl destroyed
055E                PRINTDEC2:      
055E   CB 7C                  BIT   7,h   
0560   28 0C                  JR   z,printDec3   
0562   D9                     EXX      
0563   3E 2D                  LD   a,"-"   
0565   12                     LD   (de),a   
0566   13                     INC   de   
0567   D9                     EXX      
0568   AF                     XOR   a   
0569   95                     SUB   l   
056A   6F                     LD   l,a   
056B   9F                     SBC   a,a   
056C   94                     SUB   h   
056D   67                     LD   h,a   
056E                PRINTDEC3:      
056E   0E 00                  LD   c,0   ; leading zeros flag = false
0570   11 F0 D8               LD   de,-10000   
0573   CD 8E 05               CALL   printDec4   
0576   11 18 FC               LD   de,-1000   
0579   CD 8E 05               CALL   printDec4   
057C   11 9C FF               LD   de,-100   
057F   CD 8E 05               CALL   printDec4   
0582   1E F6                  LD   e,-10   
0584   CD 8E 05               CALL   printDec4   
0587   0C                     INC   c   ; flag = true for at least digit
0588   1E FF                  LD   e,-1   
058A   CD 8E 05               CALL   printDec4   
058D   C9                     RET      
058E                PRINTDEC4:      
058E   06 2F                  LD   b,"0"-1   
0590                PRINTDEC5:      
0590   04                     INC   b   
0591   19                     ADD   hl,de   
0592   38 FC                  JR   c,printDec5   
0594   ED 52                  SBC   hl,de   
0596   3E 30                  LD   a,"0"   
0598   B8                     CP   b   
0599   20 05                  JR   nz,printDec6   
059B   AF                     XOR   a   
059C   B1                     OR   c   
059D   C8                     RET   z   
059E   18 01                  JR   printDec7   
05A0                PRINTDEC6:      
05A0   0C                     INC   c   
05A1                PRINTDEC7:      
05A1   78                     LD   a,b   
05A2   D9                     EXX      
05A3   12                     LD   (de),a   
05A4   13                     INC   de   
05A5   D9                     EXX      
05A6   C9                     RET      
05A7                             ; buffer hex                    37
05A7                             ; value --
05A7                PRINTHEX0:      
05A7   ED 5B EC 51            LD   de,(vBufPtr)   
05AB   18 08                  JR   printHex1   
05AD                PRINTHEX:      
05AD   ED 5B EC 51            LD   de,(vBufPtr)   
05B1   3E 24                  LD   a,"$"   ; # prefix
05B3   12                     LD   (de),a   
05B4   13                     INC   de   ; string*++,
05B5                PRINTHEX1:      
05B5   E1                     POP   hl   ; hl = value
05B6   3A E6 51               LD   a,(vDataWidth)   
05B9   3D                     DEC   a   
05BA   28 04                  JR   z,printHex2   
05BC   7C                     LD   a,h   
05BD   CD CF 05               CALL   printHex3   
05C0                PRINTHEX2:      
05C0   7D                     LD   a,l   
05C1   CD CF 05               CALL   printHex3   
05C4   3E 20                  LD   a," "   ; append space to buffer
05C6   12                     LD   (de),a   
05C7   13                     INC   de   ; string*++,
05C8   ED 53 EC 51            LD   (vBufPtr),de   
05CC   C3 FA 0D               JP   dotNext   
05CF                PRINTHEX3:      
05CF   F5                     PUSH   af   
05D0   1F                     RRA      
05D1   1F                     RRA      
05D2   1F                     RRA      
05D3   1F                     RRA      
05D4   CD D8 05               CALL   printHex4   
05D7   F1                     POP   af   
05D8                PRINTHEX4:      
05D8   E6 0F                  AND   0x0F   
05DA   C6 90                  ADD   a,0x90   
05DC   27                     DAA      
05DD   CE 40                  ADC   a,0x40   
05DF   27                     DAA      
05E0   12                     LD   (de),a   
05E1   13                     INC   de   ; string*++,
05E2   C9                     RET      
05E3                             ; unused
05E3                DQUOTE:      
05E3                UNDERSCORE:      
05E3                COMMA:       
05E3   DD E9                  JP   (ix)   
05E5                             ;********************** PAGE 4 END *********************************************
05E5                          ALIGN   $100   
0600                             ;********************** PAGE 5 BEGIN *********************************************
0600                SLASH:       
0600                COMMAND:      
0600   03                     INC   bc   
0601   0A                     LD   a,(bc)   
0602   FE 2F                  CP   "/"   ; // comment
0604   CA 4F 07               JP   z,comment   
0607   0B                     DEC   bc   
0608   CD 56 0F               CALL   lowerCaseTable   
060B   26                     DB   lsb(command_a_)   
060C   38                     DB   lsb(command_b_)   
060D   C8                     DB   lsb(command_nop_)   
060E   44                     DB   lsb(command_d_)   
060F   C8                     DB   lsb(command_nop_)   
0610   4A                     DB   lsb(command_f_)   
0611   C8                     DB   lsb(command_nop_)   
0612   65                     DB   lsb(command_h_)   
0613   6B                     DB   lsb(command_i_)   
0614   C8                     DB   lsb(command_nop_)   
0615   71                     DB   lsb(key_)   
0616   C8                     DB   lsb(command_nop_)   
0617   74                     DB   lsb(command_m_)   
0618   C8                     DB   lsb(command_nop_)   
0619   7A                     DB   lsb(output_)   
061A   7D                     DB   lsb(command_p_)   
061B   80                     DB   lsb(command_q_)   
061C   86                     DB   lsb(command_r_)   
061D   92                     DB   lsb(command_s_)   
061E   A7                     DB   lsb(true_)   
061F   C8                     DB   lsb(command_nop_)   
0620   AA                     DB   lsb(command_v_)   
0621   BF                     DB   lsb(command_w_)   
0622   C5                     DB   lsb(xor_)   
0623   C8                     DB   lsb(command_nop_)   
0624   C8                     DB   lsb(command_nop_)   
0625   CB                     DB   lsb(command_default_)   
0626                             ; 12
0626                COMMAND_A_:      
0626   62                     DB   "b"   ; /ab absolute
0627   E1 06                  DW   absolute   
0629   64                     DB   "d"   ; /ad address of
062A   EF 06                  DW   addrOf   
062C   69                     DB   "i"   ; /ad address of
062D   E1 08                  DW   arrayIter   
062F   6C                     DB   "l"   ; /al array length
0630   10 07                  DW   arrayLength   
0632   73                     DB   "s"   ; /as array size
0633   19 07                  DW   arraySize   
0635   00                     DB   NUL   
0636   72 07                  DW   error1   
0638                COMMAND_B_:      
0638   62                     DB   "b"   ; /bb bye bye cold boot
0639   21 10                  DW   coldStart   
063B   6D                     DB   "m"   ; /bm byte mode
063C   47 07                  DW   byteMode   
063E   72                     DB   "r"   ; /br break from loop
063F   2D 07                  DW   break   
0641   00                     DB   NUL   
0642   72 07                  DW   error1   
0644                COMMAND_D_:      
0644   63                     DB   "c"   ; /dc decimal
0645   6A 07                  DW   decBase   
0647   00                     DB   NUL   
0648   6A 07                  DW   decBase   ; /d decimal
064A                COMMAND_F_:      
064A   64                     DB   "d"   ; /fd fold
064B   8A 0A                  DW   fold   
064D   65                     DB   "e"   ; /fe forEach
064E   DC 0A                  DW   forEach   
0650   73                     DB   "s"   ; /fs funcSrc
0651   28 0B                  DW   funcSrc   
0653   74                     DB   "t"   ; /ft filter
0654   2C 0A                  DW   filter   
0656   31                     DB   "1"   
0657   02 11                  DW   f1   
0659   32                     DB   "2"   
065A   0E 11                  DW   f2   
065C   33                     DB   "3"   
065D   1A 11                  DW   f3   
065F   34                     DB   "4"   
0660   26 11                  DW   f4   
0662   00                     DB   NUL   
0663   94 0D                  DW   false1   
0665                COMMAND_H_:      
0665   62                     DB   "b"   ; /hx hex
0666   78 07                  DW   hexBase   
0668   00                     DB   NUL   
0669   72 07                  DW   error1   
066B                             ; 6
066B                COMMAND_I_:      
066B   6E                     DB   "n"   ; /in input
066C   7E 07                  DW   input   
066E   00                     DB   NUL   
066F   72 07                  DW   error1   
0671                KEY_:        
0671   00                     DB   NUL   
0672   89 07                  DW   key   
0674                COMMAND_M_:      
0674   70                     DB   "p"   ; /mp map
0675   EA 09                  DW   map   
0677   00                     DB   NUL   
0678   72 07                  DW   error1   
067A                OUTPUT_:      
067A   00                     DB   NUL   
067B   92 07                  DW   output   
067D                             ; 4
067D                COMMAND_P_:      
067D   00                     DB   NUL   
067E   72 07                  DW   error1   
0680                             ; 6
0680                COMMAND_Q_:      
0680   74                     DB   "t"   ; /qt quit
0681   9B 07                  DW   quit   
0683   00                     DB   NUL   
0684   72 07                  DW   error1   
0686                COMMAND_R_:      
0686   63                     DB   "c"   ; /rc tail call optimisation
0687   A5 07                  DW   recur   
0689   65                     DB   "e"   ; /re remainder
068A   AB 07                  DW   remain   
068C   67                     DB   "g"   ; /rg range src
068D   4D 08                  DW   rangeSrc   
068F   00                     DB   NUL   
0690   72 07                  DW   error1   
0692                COMMAND_S_:      
0692   62                     DB   "b"   
0693   B1 07                  DW   stringBegin   
0695   63                     DB   "c"   
0696   03 08                  DW   stringCompare   
0698   65                     DB   "e"   
0699   B9 07                  DW   stringEnd   
069B   69                     DB   "i"   
069C   62 09                  DW   stringIter   
069E   6C                     DB   "l"   
069F   E8 07                  DW   stringLength   
06A1   73                     DB   "s"   
06A2   F7 07                  DW   stringSize   
06A4   00                     DB   NUL   
06A5   72 07                  DW   error1   
06A7                TRUE_:       
06A7   00                     DB   NUL   
06A8   8E 0D                  DW   true1   
06AA                COMMAND_V_:      
06AA   62                     DB   "b"   
06AB   1B 08                  DW   varBufPtr   
06AD   68                     DB   "h"   
06AE   24 08                  DW   varHeapPtr   
06B0   74                     DB   "t"   
06B1   2D 08                  DW   varTIBPtr   
06B3   42                     DB   "B"   
06B4   64 07                  DW   constBufStart   
06B6   48                     DB   "H"   
06B7   58 07                  DW   constHeapStart   
06B9   54                     DB   "T"   
06BA   5E 07                  DW   constTIBStart   
06BC   00                     DB   NUL   
06BD   72 07                  DW   error1   
06BF                COMMAND_W_:      
06BF   6D                     DB   "m"   ; /wm word mode
06C0   3C 08                  DW   wordMode   
06C2   00                     DB   NUL   
06C3   72 07                  DW   error1   
06C5                XOR_:        
06C5   00                     DB   NUL   
06C6   42 08                  DW   xor   
06C8                             ; 2
06C8                COMMAND_NOP_:      
06C8   00                     DB   NUL   
06C9   CE 06                  DW   nop   
06CB                             ; 3
06CB                COMMAND_DEFAULT_:      
06CB   00                     DB   NUL   
06CC   D0 06                  DW   div   
06CE                             ;********************** PAGE 5 END *********************************************
06CE                NOP:         
06CE   DD E9                  JP   (ix)   
06D0                             ;                               32
06D0                DIV:         
06D0   D1                     POP   de   
06D1   E1                     POP   hl   
06D2   C5                     PUSH   bc   ; preserve the IP
06D3   44 4D                  LD   bc,hl   
06D5   CD E1 0D               CALL   divide   
06D8   EB                     EX   de,hl   
06D9   ED 53 FA 51            LD   (vRemain),de   
06DD   C1                     POP   bc   
06DE   C3 D9 02               JP   add3   
06E1                             ; /ab absolute
06E1                             ; num -- num
06E1                ABSOLUTE:      
06E1   E1                     POP   hl   
06E2   CB 7C                  BIT   7,h   
06E4   28 06                  JR   z,absolute1   
06E6   AF                     XOR   a   
06E7   95                     SUB   l   
06E8   6F                     LD   l,a   
06E9   9F                     SBC   a,a   
06EA   94                     SUB   h   
06EB   67                     LD   h,a   
06EC                ABSOLUTE1:      
06EC   E5                     PUSH   hl   
06ED   DD E9                  JP   (ix)   
06EF                             ; /ad addrOf                    24
06EF                             ; char -- addr
06EF                ADDROF:      
06EF   E1                     POP   hl   ; a = char
06F0   7D                     LD   a,l   
06F1   FE 7B                  CP   "z"+1   ; if a > z then exit
06F3   30 19                  JR   nc,addrOf2   
06F5   D6 41                  SUB   "A"   ; a - 65
06F7   38 15                  JR   c,addrOf2   ; if < A then exit
06F9   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
06FB   38 06                  JR   c,addrOf1   
06FD   D6 06                  SUB   "a"-("Z"+1)   
06FF   FE 1A                  CP   "Z"-"A"+1   
0701   38 0B                  JR   c,addrOf2   ; if < a then exit
0703                ADDROF1:      
0703   87                     ADD   a,a   ; double a
0704   21 00 51               LD   hl,VARS   ; hl = VARS + a
0707   85                     ADD   a,l   
0708   6F                     LD   l,a   
0709   3E 00                  LD   a,0   
070B   8C                     ADC   a,h   
070C   67                     LD   h,a   
070D   E5                     PUSH   hl   
070E                ADDROF2:      
070E   DD E9                  JP   (ix)   
0710                             ; /al length of an array, num elements
0710                             ; array* -- num
0710                ARRAYLENGTH:      
0710   E1                     POP   hl   
0711   2B                     DEC   hl   ; msb size
0712   56                     LD   d,(hl)   
0713   2B                     DEC   hl   ; lsb size
0714   5E                     LD   e,(hl)   
0715   EB                     EX   de,hl   
0716                ARRAYLENGTH1:      
0716   E5                     PUSH   hl   
0717   DD E9                  JP   (ix)   
0719                             ; /as size in bytes of an array, based on current data width
0719                             ; array* -- num
0719                ARRAYSIZE:      
0719                          ;*Macro unroll:  PERFORM arrayLength
0719   DD 21 20 07            LD   ix,performM_1547S1068   
071D   C3 10 07               JP   arrayLength   
0720                PERFORMM_1547S1068:      
0720   E1                     POP   hl   
0721   3A E6 51               LD   a,(vDataWidth)   
0724   3D                     DEC   a   
0725   28 EF                  JR   z,arrayLength1   
0727   CB 3C                  SRL   h   
0729   CB 1D                  RR   l   
072B   18 E9                  JR   arrayLength1   
072D                             ; 13
072D                             ; /br break from loop
072D                             ; --
072D                BREAK:       
072D   E1                     POP   hl   ; hl = condition, break if false
072E   7D                     LD   a,l   
072F   B4                     OR   h   
0730   28 02                  JR   z,break1   
0732   DD E9                  JP   (ix)   
0734                BREAK1:      
0734   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0736   FD 54                  LD   d,iyh   
0738   21 08 00               LD   hl,8   
073B   19                     ADD   hl,de   
073C   23                     INC   hl   
073D   23                     INC   hl   
073E   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0741   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0744   C3 68 0C               JP   blockEnd   
0747                             ; /b
0747                BYTEMODE:      
0747   21 01 00               LD   hl,1   
074A                BYTEMODE1:      
074A   22 E6 51               LD   (vDataWidth),hl   
074D   DD E9                  JP   (ix)   
074F                             ; //
074F                COMMENT:      
074F   03                     INC   bc   ; point to next char
0750   0A                     LD   a,(bc)   
0751   FE 20                  CP   " "   ; terminate on any char less than SP
0753   30 FA                  JR   nc,comment   
0755   0B                     DEC   bc   
0756   DD E9                  JP   (ix)   
0758                CONSTHEAPSTART:      
0758   11 22 52               LD   de,HEAP   
075B   C3 39 08               JP   constant   
075E                CONSTTIBSTART:      
075E   11 00 4F               LD   de,TIB   
0761   C3 39 08               JP   constant   
0764                CONSTBUFSTART:      
0764   11 00 50               LD   de,BUFFER   
0767   C3 39 08               JP   constant   
076A                DECBASE:      
076A   21 0A 00               LD   hl,10   
076D                DECBASE1:      
076D   22 E8 51               LD   (vNumBase),hl   
0770   DD E9                  JP   (ix)   
0772                ERROR1:      
0772   21 01 00               LD   hl,1   ; error 1: unknown command
0775   C3 DA 10               JP   error   
0778                HEXBASE:      
0778   21 10 00               LD   hl,16   
077B   C3 6D 07               JP   decBase1   
077E                             ; Z80 port input
077E                             ; port -- value
077E                INPUT:       
077E   E1                     POP   hl   
077F   59                     LD   e,c   ; save IP
0780   4D                     LD   c,l   
0781   ED 68                  IN   l,(c)   
0783   26 00                  LD   h,0   
0785   4B                     LD   c,e   ; restore IP
0786   E5                     PUSH   hl   
0787   DD E9                  JP   (ix)   
0789                             ; /k                              6
0789                KEY:         
0789   CD 81 00               CALL   getchar   
078C   26 00                  LD   h,0   
078E   6F                     LD   l,a   
078F   E5                     PUSH   hl   
0790   DD E9                  JP   (ix)   
0792                             ; /o Z80 port output
0792                             ; value port --
0792                OUTPUT:      
0792   E1                     POP   hl   
0793   59                     LD   e,c   ; save IP
0794   4D                     LD   c,l   
0795   E1                     POP   hl   
0796   ED 69                  OUT   (c),l   
0798   4B                     LD   c,e   ; restore IP
0799   DD E9                  JP   (ix)   
079B                             ; /qt
079B                             ; bool --
079B                QUIT:        
079B   E1                     POP   hl   ; hl = condition, exit if true
079C   7D                     LD   a,l   
079D   B4                     OR   h   
079E   20 02                  JR   nz,quit1   
07A0   DD E9                  JP   (ix)   
07A2                QUIT1:       
07A2   C3 68 0C               JP   blockEnd   
07A5                RECUR:       
07A5   E1                     POP   hl   
07A6   22 F2 51               LD   (vRecur),hl   
07A9   DD E9                  JP   (ix)   
07AB                REMAIN:      
07AB   2A FA 51               LD   hl,(vRemain)   
07AE   E5                     PUSH   hl   
07AF   DD E9                  JP   (ix)   
07B1                STRINGBEGIN:      
07B1   21 FF FF               LD   hl,TRUE   ; string mode = true
07B4   22 F6 51               LD   (vStrMode),hl   
07B7   18 27                  JR   stringEnd1   ; save hl in vBufPtr
07B9                STRINGEND:      
07B9   21 00 00               LD   hl,FALSE   ; string mode = false
07BC   22 F6 51               LD   (vStrMode),hl   
07BF   2A EC 51               LD   hl,(vBufPtr)   ; append NUL to string
07C2   AF                     XOR   a   
07C3   77                     LD   (hl),a   
07C4   23                     INC   hl   ; hl = string_end*
07C5   ED 43 04 52            LD   (vTemp1),bc   ; save IP
07C9   11 00 50               LD   de,BUFFER   ; de = string*
07CC   B7                     OR   a   ; bc = size
07CD   ED 52                  SBC   hl,de   
07CF   44 4D                  LD   bc,hl   
07D1   2A F0 51               LD   hl,(vHeapPtr)   ; hl = hstring*
07D4   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
07D5   D5                     PUSH   de   ; return hstring*
07D6   ED B0                  LDIR      ; copy size bytes from string* to hstring*
07D8   ED 53 F0 51            LD   (vHeapPtr),de   ; bump heap to hstring* += size
07DC   ED 4B 04 52            LD   bc,(vTemp1)   ; restore IP
07E0                STRINGEND1:      
07E0   21 00 50               LD   hl,BUFFER   ; reset vBufPtr
07E3   22 EC 51               LD   (vBufPtr),hl   
07E6   DD E9                  JP   (ix)   
07E8                STRINGLENGTH:      
07E8   D1                     POP   de   
07E9   21 00 00               LD   hl,0   
07EC   18 02                  JR   stringLength2   
07EE                STRINGLENGTH1:      
07EE   13                     INC   de   
07EF   23                     INC   hl   
07F0                STRINGLENGTH2:      
07F0   1A                     LD   a,(de)   
07F1   B7                     OR   a   
07F2   20 FA                  JR   nz,stringLength1   
07F4                STRINGLENGTH3:      
07F4   E5                     PUSH   hl   
07F5   DD E9                  JP   (ix)   
07F7                STRINGSIZE:      
07F7                          ;*Macro unroll:  PERFORM stringLength
07F7   DD 21 FE 07            LD   ix,performM_1695S1236   
07FB   C3 E8 07               JP   stringLength   
07FE                PERFORMM_1695S1236:      
07FE   E1                     POP   hl   
07FF   23                     INC   hl   
0800   C3 F4 07               JP   stringLength3   
0803                             ; /sc string compare
0803                             ; string1* string2* -- bool
0803                             ; Compares two null terminated strings.
0803                STRINGCOMPARE:      
0803   D1                     POP   de   
0804   E1                     POP   hl   
0805                STRINGCOMPARE1:      
0805   1A                     LD   a,(de)   
0806   BE                     CP   (hl)   
0807   20 07                  JR   nz,stringCompare2   
0809   B7                     OR   a   
080A   28 09                  JR   z,stringCompare3   
080C   13                     INC   de   
080D   23                     INC   hl   
080E   18 F5                  JR   stringCompare1   
0810                STRINGCOMPARE2:      
0810   21 00 00               LD   hl,FALSE   
0813   18 03                  JR   stringCompare4   
0815                STRINGCOMPARE3:      
0815   21 FF FF               LD   hl,TRUE   
0818                STRINGCOMPARE4:      
0818   E5                     PUSH   hl   
0819   DD E9                  JP   (ix)   
081B                VARBUFPTR:      
081B   ED 5B EC 51            LD   de,(vBufPtr)   
081F   21 EC 51               LD   hl,vBufPtr   
0822   18 12                  JR   variable   
0824                VARHEAPPTR:      
0824   ED 5B F0 51            LD   de,(vHeapPtr)   
0828   21 F0 51               LD   hl,vHeapPtr   
082B   18 09                  JR   variable   
082D                VARTIBPTR:      
082D   ED 5B EA 51            LD   de,(vTIBPtr)   
0831   21 EA 51               LD   hl,vTIBPtr   
0834   18 00                  JR   variable   
0836                VARIABLE:      
0836   22 F8 51               LD   (vPointer),hl   
0839                CONSTANT:      
0839   D5                     PUSH   de   
083A   DD E9                  JP   (ix)   
083C                             ; /wm
083C                WORDMODE:      
083C   21 02 00               LD   hl,2   
083F   C3 4A 07               JP   byteMode1   
0842                             ; /x
0842                XOR:         
0842   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0843                XOR1:        
0843   E1                     POP   hl   
0844   7B                     LD   a,e   
0845   AD                     XOR   l   
0846   6F                     LD   l,a   
0847   7A                     LD   a,d   
0848   AC                     XOR   h   
0849   67                     LD   h,a   
084A   C3 D9 02               JP   add3   
084D                             ;*******************************************************************
084D                             ; Monty implementations
084D                             ;*******************************************************************
084D                             ; /rg rangeSrc
084D                             ; begin end step -- src
084D                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
084D                RANGESRC:      ; range source: begin, end, step, local: L
084D   CD B4 03               CALL   go   
0850   00 00                  DW   NUL   
0852   5C 08                  DW   rangeSrcM_1760S1310   
0854   56 08                  DW   $+2   
0856   01                     DB   1   
0857   04 62 65 73 4C         .PSTR   "besL"   
085C                RANGESRCM_1760S1310:      
085C   7B                     DB   "{"   ; init mutable L [index active inrange_test]
085D   5B 25 62 20 2F 74 20 25 73 30 3E 7B 7B 25 61 25 65 3C 7D 7D 7B 7B 25 61 25 65 3E 7D 7D 3F 3F 5D 20 25 4C 3D 20 DB   "[%b /t %s0>{{%a%e<}}{{%a%e>}}??] %L= "   
0882   5C 6B 74 7B            DB   "\\kt{"   
0886   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
088E   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
0894   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
089C   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
08A4   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
08AE   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
08B6   25 4C 32 23 5E         DB   "%L2#^"   ; ifte: inrange_test?
08BB   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
08CF   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
08D7   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08DE   7D                     DB   "}"   
08DF   7D                     DB   "}"   
08E0   00                     DB   0   
08E1                             ; /ai arrayIter
08E1                             ; array* -- src
08E1                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
08E1                ARRAYITER:      
08E1   CD B4 03               CALL   go   
08E4   00 00                  DW   NUL   
08E6   EE 08                  DW   arrayIterM_1779S1330   
08E8   EA 08                  DW   $+2   
08EA   01                     DB   1   
08EB   02 61 4C               .PSTR   "aL"   
08EE                ARRAYITERM_1779S1330:      
08EE   7B                     DB   "{"   
08EF   5B 30 20 2F 74 20 25 61 2F 61 6C 5D 20 25 4C 3D DB   "[0 /t %a/al] %L="   ; init mutable L [index active size]
08FF   5C 6B 74 7B            DB   "\\kt{"   
0903   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
090B   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
0911   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0919   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
0921   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
0928   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0930   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
0939   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
0950   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
0958   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
095F   7D                     DB   "}"   
0960   7D                     DB   "}"   
0961   00                     DB   0   
0962                             ; /si stringIter
0962                             ; string* -- src
0962                          ;*Macro unroll: FUNC stringIter, 1, "sL"
0962                STRINGITER:      
0962   CD B4 03               CALL   go   
0965   00 00                  DW   NUL   
0967   6F 09                  DW   stringIterM_1798S1350   
0969   6B 09                  DW   $+2   
096B   01                     DB   1   
096C   02 73 4C               .PSTR   "sL"   
096F                STRINGITERM_1798S1350:      
096F   7B                     DB   "{"   
0970   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
097A   5C 6B 74 7B            DB   "\\kt{"   
097E   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0986   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
098D   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0995   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
099D   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
09A4   2F 62 6D 20 25 73 25 69 23 20 2F 77 6D 20 25 63 3D DB   "/bm %s%i# /wm %c="   ; read byte at i, store in c as word
09B5   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
09BD   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
09C4   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
09D8   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
09E0   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
09E7   7D                     DB   "}"   
09E8   7D                     DB   "}"   
09E9   00                     DB   0   
09EA                             ; /mp map
09EA                             ; src func -- src1
09EA                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
09EA                MAP:         ; map: source, function
09EA   CD B4 03               CALL   go   
09ED   00 00                  DW   NUL   
09EF   F7 09                  DW   mapM_1818S1372   
09F1   F3 09                  DW   $+2   
09F3   00                     DB   0   
09F4   02 73 66               .PSTR   "sf"   
09F7                MAPM_1818S1372:      
09F7   7B                     DB   "{"   
09F8   5C 6B 74 7B            DB   "\\kt{"   
09FC   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0A04   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0A08   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0A0D   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
0A19   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0A22   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A29   7D                     DB   "}"   
0A2A   7D                     DB   "}"   
0A2B   00                     DB   0   
0A2C                             ; /ft filter
0A2C                             ; src pred -- src1
0A2C                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
0A2C                FILTER:      ; filter: source, predicate, local: T
0A2C   CD B4 03               CALL   go   
0A2F   00 00                  DW   NUL   
0A31   3A 0A                  DW   filterM_1832S1387   
0A33   35 0A                  DW   $+2   
0A35   01                     DB   1   
0A36   03 73 70 54            .PSTR   "spT"   
0A3A                FILTERM_1832S1387:      
0A3A   7B                     DB   "{"   
0A3B   5B 30 5D 25 54 3D      DB   "[0]%T="   
0A41   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0A45   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0A49   5B                     DB   "["   
0A4A   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
0A57   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
0A5F   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
0A63   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
0A68   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
0A7E   3F 3F                  DB   "??"   
0A80   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A87   7D                     DB   "}"   
0A88   7D                     DB   "}"   
0A89   00                     DB   0   
0A8A                             ; /fd fold
0A8A                             ; reducer is a function like: \\da00bbLi4u
0A8A                             ; src init reducer -- src1
0A8A                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
0A8A                FOLD:        ; src, init, reducer
0A8A   CD B4 03               CALL   go   
0A8D   00 00                  DW   NUL   
0A8F   99 0A                  DW   foldM_1851S1407   
0A91   93 0A                  DW   $+2   
0A93   01                     DB   1   
0A94   04 73 69 72 41         .PSTR   "sirA"   
0A99                FOLDM_1851S1407:      
0A99   7B                     DB   "{"   ; reducer: \\da00bbLi4u
0A9A   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
0AA1   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0AA5   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0AA9   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0AAE   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
0AC9   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0AD2   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0AD9   7D                     DB   "}"   
0ADA   7D                     DB   "}"   
0ADB   00                     DB   0   
0ADC                             ; /fe forEach
0ADC                             ; src proc --
0ADC                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
0ADC                FOREACH:      ; forEach: source, procedure, local: T
0ADC   CD B4 03               CALL   go   
0ADF   00 00                  DW   NUL   
0AE1   EA 0A                  DW   forEachM_1865S1422   
0AE3   E5 0A                  DW   $+2   
0AE5   01                     DB   1   
0AE6   03 73 70 54            .PSTR   "spT"   
0AEA                FOREACHM_1865S1422:      
0AEA   7B                     DB   "{"   
0AEB   5B 30 5D 25 54 3D      DB   "[0]%T="   
0AF1   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
0AF5   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
0AFD   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0B02   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0B14   3F 3F                  DB   "??"   ; ifte:
0B16   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0B1F   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0B26   7D                     DB   "}"   
0B27   00                     DB   0   
0B28                             ; ; /fs funcSrc
0B28                             ; ; func -- src
0B28                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0B28                FUNCSRC:      ; :f func or block
0B28   CD B4 03               CALL   go   
0B2B   00 00                  DW   NUL   
0B2D   34 0B                  DW   funcSrcM_1879S1437   
0B2F   31 0B                  DW   $+2   
0B31   00                     DB   0   
0B32   01 66                  .PSTR   "f"   
0B34                FUNCSRCM_1879S1437:      
0B34   7B                     DB   "{"   
0B35   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0B39   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0B41   5C 64 74 7B            DB   "\\dt{"   
0B45   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0B57   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0B5E   7D                     DB   "}"   
0B5F   7D                     DB   "}"   
0B60   00                     DB   0   
0B61                          ;*Macro unroll: FUNC printArray, 2, "abc"
0B61                PRINTARRAY:      
0B61   CD B4 03               CALL   go   
0B64   00 00                  DW   NUL   
0B66   6F 0B                  DW   printArrayM_1889S1448   
0B68   6A 0B                  DW   $+2   
0B6A   02                     DB   2   
0B6B   03 61 62 63            .PSTR   "abc"   
0B6F                PRINTARRAYM_1889S1448:      
0B6F   7B                     DB   "{"   
0B70   27 5B 20 27 2E 73 20 25 61 2F 61 6C 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/al%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0BA7   7D                     DB   "}"   
0BA8   00                     DB   0   
0BA9                             ;*******************************************************************
0BA9                             ; implementations continued
0BA9                             ;*******************************************************************
0BA9                             ; ~ bitwise invert
0BA9                TILDE:       
0BA9                INVERT:      
0BA9   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
0BAA   7D                     LD   a,l   
0BAB   2F                     CPL      
0BAC   6F                     LD   l,a   
0BAD   7C                     LD   a,h   
0BAE   2F                     CPL      
0BAF   67                     LD   h,a   
0BB0   C3 D9 02               JP   add3   
0BB3                             ; $ hex                         ; 22
0BB3                DOLLAR:      
0BB3                HEXNUM:      
0BB3   21 00 00               LD   hl,0   ; Clear hl to accept the number
0BB6                HEXNUM1:      
0BB6   03                     INC   bc   
0BB7   0A                     LD   a,(bc)   ; Get the character which is a numeral
0BB8   CB 77                  BIT   6,a   ; is it uppercase alpha?
0BBA   28 02                  JR   z,hexnum2   ; no a decimal
0BBC   D6 07                  SUB   7   ; sub 7  to make $a - $F
0BBE                HEXNUM2:      
0BBE   D6 30                  SUB   $30   ; form decimal digit
0BC0   DA 5A 0C               JP   c,num2   
0BC3   FE 10                  CP   $0F+1   
0BC5   D2 5A 0C               JP   nc,num2   
0BC8   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0BC9   29                     ADD   hl,hl   ; 4X
0BCA   29                     ADD   hl,hl   ; 8X
0BCB   29                     ADD   hl,hl   ; 16X
0BCC   85                     ADD   a,l   ; add into bottom of hl
0BCD   6F                     LD   l,a   
0BCE   18 E6                  JR   hexnum1   
0BD0                             ; ? if                            23
0BD0                             ; condition then -- value
0BD0                QUESTION:      
0BD0                IF:          
0BD0   03                     INC   bc   
0BD1   0A                     LD   a,(bc)   
0BD2   FE 3F                  CP   "?"   
0BD4   28 06                  JR   z,ifte   
0BD6   0B                     DEC   bc   
0BD7   11 00 00               LD   de,NUL   ; NUL pointer for else
0BDA   18 01                  JR   ifte1   
0BDC                             ; ?? ifte
0BDC                             ; condition then else -- value
0BDC                IFTE:        
0BDC   D1                     POP   de   ; de = else
0BDD                IFTE1:       
0BDD   E1                     POP   hl   ; hl = then
0BDE   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0BDF   7C                     LD   a,h   
0BE0   B5                     OR   l   
0BE1   E1                     POP   hl   ; hl = then
0BE2   CA B5 03               JP   z,go1   ; if z de = else
0BE5   EB                     EX   de,hl   ; condition = false, de = then
0BE6   C3 B5 03               JP   go1   
0BE9                             ; string                        ;38
0BE9                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0BE9                QUOTE:       
0BE9                STRING:      
0BE9   2A F0 51               LD   hl,(vHeapPtr)   ; hl = heap*
0BEC   E5                     PUSH   hl   ; save start of string
0BED   0A                     LD   a,(bc)   
0BEE   5F                     LD   e,a   ; e = matching terminator
0BEF   03                     INC   bc   ; point to next char
0BF0   18 03                  JR   string2   
0BF2                STRING1:      
0BF2   77                     LD   (hl),a   
0BF3   23                     INC   hl   ; increase count
0BF4   03                     INC   bc   ; point to next char
0BF5                STRING2:      
0BF5   0A                     LD   a,(bc)   
0BF6   BB                     CP   e   ; is it the string terminator
0BF7   28 02                  JR   z,string3   
0BF9   18 F7                  JR   string1   
0BFB                STRING3:      
0BFB   AF                     XOR   a   ; write NUL to terminate string
0BFC   77                     LD   (hl),a   ; hl = end of string
0BFD   23                     INC   hl   
0BFE   22 F0 51               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0C01   DD E9                  JP   (ix)   
0C03                             ; %a .. %z                      43
0C03                             ; -- value
0C03                             ; returns value of arg
0C03                PERCENT:      
0C03                ARG:         
0C03   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0C06   FD 56 05               LD   d,(iy+5)   
0C09   EB                     EX   de,hl   
0C0A   7D                     LD   a,l   ; arg_list* == null, skip
0C0B   B4                     OR   h   
0C0C   28 1A                  JR   z,arg0a   
0C0E   23                     INC   hl   ; a = num_args, hl = arg_list*
0C0F   7E                     LD   a,(hl)   
0C10   23                     INC   hl   
0C11   B7                     OR   a   
0C12   28 14                  JR   z,arg0a   ; num_args == 0, skip
0C14   5F                     LD   e,a   ; e = a = num_args
0C15   03                     INC   bc   ; a = next char = dollar_name
0C16   0A                     LD   a,(bc)   
0C17   C5                     PUSH   bc   ; save IP
0C18   43                     LD   b,e   ; b = e = num_args
0C19   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0C1C   FD 56 03               LD   d,(iy+3)   
0C1F                ARG0:        
0C1F   1B                     DEC   de   ; a = dollar_name, de = next arg*
0C20   1B                     DEC   de   
0C21   BE                     CP   (hl)   
0C22   28 09                  JR   z,arg1   
0C24   23                     INC   hl   ; hl = next arg_list*
0C25   10 F8                  DJNZ   arg0   
0C27   C1                     POP   bc   ; no match, restore IP
0C28                ARG0A:       
0C28   11 00 00               LD   de,0   ; return 0
0C2B   18 08                  JR   arg1a   
0C2D                ARG1:        
0C2D   C1                     POP   bc   ; restore IP
0C2E   EB                     EX   de,hl   ; hl = arg*
0C2F   22 F8 51               LD   (vPointer),hl   ; store arg* in setter
0C32   5E                     LD   e,(hl)   
0C33   23                     INC   hl   
0C34   56                     LD   d,(hl)   ; de = arg
0C35                ARG1A:       
0C35   D5                     PUSH   de   ; push arg
0C36   DD E9                  JP   (ix)   
0C38                             ; 0..9 number                   37
0C38                NUM:         
0C38   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0C3B   0A                     LD   a,(bc)   ; Get numeral or -
0C3C   FE 2D                  CP   "-"   
0C3E   20 01                  JR   nz,num0   
0C40   03                     INC   bc   ; move to next char, no flags affected
0C41                NUM0:        
0C41   08                     EX   af,af'   ; save zero flag = 0 for later
0C42                NUM1:        
0C42   0A                     LD   a,(bc)   ; read digit
0C43   D6 30                  SUB   "0"   ; less than 0?
0C45   38 13                  JR   c,num2   ; not a digit, exit loop
0C47   FE 0A                  CP   10   ; greater that 9?
0C49   30 0F                  JR   nc,num2   ; not a digit, exit loop
0C4B   03                     INC   bc   ; inc IP
0C4C   54 5D                  LD   de,hl   ; multiply hl * 10
0C4E   29                     ADD   hl,hl   
0C4F   29                     ADD   hl,hl   
0C50   19                     ADD   hl,de   
0C51   29                     ADD   hl,hl   
0C52   85                     ADD   a,l   ; add digit in a to hl
0C53   6F                     LD   l,a   
0C54   3E 00                  LD   a,0   
0C56   8C                     ADC   a,h   
0C57   67                     LD   h,a   
0C58   18 E8                  JR   num1   
0C5A                NUM2:        
0C5A   0B                     DEC   bc   
0C5B   08                     EX   af,af'   ; restore zero flag
0C5C   20 07                  JR   nz,num3   
0C5E   EB                     EX   de,hl   ; negate the value of hl
0C5F   21 00 00               LD   hl,0   
0C62   B7                     OR   a   ; jump to sub2
0C63   ED 52                  SBC   hl,de   
0C65                NUM3:        
0C65   E5                     PUSH   hl   ; Put the number on the stack
0C66   DD E9                  JP   (ix)   ; and process the next character
0C68                             ; }                               58
0C68                RBRACE:      
0C68                BLOCKEND:      
0C68   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0C6B   FD 56 01               LD   d,(iy+1)   
0C6E   ED 53 04 52            LD   (vTemp1),de   
0C72   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0C75   FD 56 07               LD   d,(iy+7)   
0C78   ED 53 06 52            LD   (vTemp2),de   
0C7C   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0C7F   FD 56 03               LD   d,(iy+3)   
0C82   EB                     EX   de,hl   
0C83   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0C86   FD 56 01               LD   d,(iy+1)   
0C89   13                     INC   de   ; for carry flag <=
0C8A   B7                     OR   a   
0C8B   ED 52                  SBC   hl,de   
0C8D   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0C8F   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0C91   FD 5D                  LD   e,iyl   
0C93   21 08 00               LD   hl,8   
0C96   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0C97   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0C98   18 0C                  JR   blockEnd2   
0C9A                BLOCKEND1:      ; same scope
0C9A   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0C9D   FD 56 03               LD   d,(iy+3)   
0CA0   EB                     EX   de,hl   
0CA1   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0CA3   FD 5D                  LD   e,iyl   
0CA5   EB                     EX   de,hl   
0CA6                BLOCKEND2:      
0CA6   44 4D                  LD   bc,hl   ; bc = hl = BP
0CA8   B7                     OR   a   ; hl = BP - SP = count
0CA9   ED 72                  SBC   hl,sp   
0CAB   7D                     LD   a,l   
0CAC   B4                     OR   h   
0CAD   28 09                  JR   z,blockEnd3   
0CAF   C5                     PUSH   bc   ; bc = count, hl = BP
0CB0   44 4D                  LD   bc,hl   
0CB2   E1                     POP   hl   
0CB3   2B                     DEC   hl   ; hl = BP-1
0CB4   1B                     DEC   de   ; de = args*-1
0CB5   ED B8                  LDDR      
0CB7   13                     INC   de   
0CB8                BLOCKEND3:      
0CB8   EB                     EX   de,hl   ; sp = de = new tos*
0CB9   F9                     LD   sp,hl   
0CBA   ED 4B 06 52            LD   bc,(vTemp2)   
0CBE   FD 2A 04 52            LD   iy,(vTemp1)   
0CC2   ED 5B F2 51            LD   de,(vRecur)   ; de = recur vector
0CC6   7B                     LD   a,e   ; check for NUL
0CC7   B2                     OR   d   
0CC8   20 02                  JR   nz,blockEnd4   
0CCA   DD E9                  JP   (ix)   
0CCC                BLOCKEND4:      
0CCC   21 00 00               LD   hl,0   ; clear recur vector
0CCF   22 F2 51               LD   (vRecur),hl   
0CD2   C3 B5 03               JP   go1   ; execute de
0CD5                GOBLOCK:      
0CD5   ED 53 04 52            LD   (vTemp1),de   ; save de
0CD9   21 00 4F               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0CDC   FD 54                  LD   d,iyh   
0CDE   FD 5D                  LD   e,iyl   
0CE0   B7                     OR   a   ; if stack* == BP then this is the root_scope
0CE1   ED 52                  SBC   hl,de   
0CE3   ED 5B 04 52            LD   de,(vTemp1)   ; restore de
0CE7   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0CE8   B4                     OR   h   
0CE9   3E 00                  LD   a,0   
0CEB   28 6A                  JR   z,goFunc8   
0CED   C5                     PUSH   bc   ; push IP
0CEE   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0CF1   FD 46 05               LD   b,(iy+5)   
0CF4   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0CF7   FD 66 03               LD   h,(iy+3)   
0CFA                GOBLOCK2:      
0CFA   C5                     PUSH   bc   ; arg_list*
0CFB   E5                     PUSH   hl   ; first_arg*
0CFC   FD E5                  PUSH   iy   ; push BP
0CFE   FD 21 00 00            LD   iy,0   ; BP = SP
0D02   FD 39                  ADD   iy,sp   
0D04                GOBLOCK3:      
0D04   42 4B                  LD   bc,de   ; bc = de = block*-1
0D06   DD E9                  JP   (ix)   
0D08                GOFUNC:      ; execute func
0D08   EB                     EX   de,hl   ; hl = func*
0D09   5E                     LD   e,(hl)   ; de = partial_array*
0D0A   23                     INC   hl   
0D0B   56                     LD   d,(hl)   
0D0C   23                     INC   hl   
0D0D   7B                     LD   a,e   ; if partial_array* == null skip
0D0E   B2                     OR   d   
0D0F   28 21                  JR   z,goFunc3   
0D11   ED 43 04 52            LD   (vTemp1),bc   
0D15   22 06 52               LD   (vTemp2),hl   ; save bc,hl
0D18   EB                     EX   de,hl   ; hl = partial_array*
0D19   2B                     DEC   hl   ; bc = count
0D1A   46                     LD   b,(hl)   
0D1B   2B                     DEC   hl   
0D1C   4E                     LD   c,(hl)   
0D1D   23                     INC   hl   ; hl = array data*
0D1E   23                     INC   hl   
0D1F   18 06                  JR   goFunc2   ; push each item on stack
0D21                GOFUNC1:      
0D21   5E                     LD   e,(hl)   ; de = partial item
0D22   23                     INC   hl   
0D23   56                     LD   d,(hl)   
0D24   23                     INC   hl   
0D25   D5                     PUSH   de   ; push on stack
0D26   0B                     DEC   bc   
0D27                GOFUNC2:      
0D27   79                     LD   a,c   ; if count != 0 then loop
0D28   B0                     OR   b   
0D29   20 F6                  JR   nz,goFunc1   
0D2B   ED 4B 04 52            LD   bc,(vTemp1)   ; restore bc
0D2F   2A 06 52               LD   hl,(vTemp2)   ; restore hl
0D32                GOFUNC3:      
0D32   5E                     LD   e,(hl)   ; de = block*
0D33   23                     INC   hl   
0D34   56                     LD   d,(hl)   
0D35   23                     INC   hl   
0D36   ED 53 04 52            LD   (vTemp1),de   ; save block*
0D3A   5E                     LD   e,(hl)   ; de = arg_list*
0D3B   23                     INC   hl   
0D3C   56                     LD   d,(hl)   
0D3D   23                     INC   hl   
0D3E   EB                     EX   de,hl   ; hl = arg_list*
0D3F   ED 5B 04 52            LD   de,(vTemp1)   ; restore de = block*
0D43   7D                     LD   a,l   ; if arg_list* == null a = 0
0D44   B4                     OR   h   
0D45   20 03                  JR   nz,goFunc4   
0D47   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0D48   18 0D                  JR   goFunc8   
0D4A                GOFUNC4:      ; allocate locals
0D4A   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0D4B   18 03                  JR   goFunc6   
0D4D                GOFUNC5:      ; loop
0D4D   3B                     DEC   sp   
0D4E   3B                     DEC   sp   
0D4F   3D                     DEC   a   
0D50                GOFUNC6:      
0D50   B7                     OR   a   
0D51   20 FA                  JR   nz,goFunc5   ; end loop
0D53                GOFUNC7:      
0D53   23                     INC   hl   ; a = num_args* x 2
0D54   7E                     LD   a,(hl)   
0D55   2B                     DEC   hl   
0D56   87                     ADD   a,a   ; a *= 2
0D57                GOFUNC8:      
0D57   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0D58   44 4D                  LD   bc,hl   
0D5A   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0D5D   85                     ADD   a,l   
0D5E   6F                     LD   l,a   
0D5F   39                     ADD   hl,sp   
0D60   18 98                  JR   goBlock2   
0D62                             ; =                              21
0D62                             ; value _oldValue --            ; uses address in vPointer 15
0D62                ASSIGN:      
0D62   E1                     POP   hl   ; discard last accessed value
0D63   E1                     POP   hl   ; hl = new value
0D64                ASSIGN0:      
0D64   EB                     EX   de,hl   ; de = new value
0D65   2A F8 51               LD   hl,(vPointer)   
0D68                ASSIGN1:      ; entry point from defineEnd
0D68   73                     LD   (hl),e   
0D69   3A E6 51               LD   a,(vDataWidth)   
0D6C   3D                     DEC   a   ; is it byte?
0D6D   28 02                  JR   z,assign2   
0D6F   23                     INC   hl   
0D70   72                     LD   (hl),d   
0D71                ASSIGN2:      
0D71   DD E9                  JP   (ix)   
0D73                             ; hl = value1, de = value2
0D73                             ; hl = result
0D73                EQUALS:      
0D73   B7                     OR   a   ; reset the carry flag
0D74   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0D76   28 16                  JR   z,true1   
0D78   18 1A                  JR   false1   
0D7A                NOTEQUALS:      
0D7A   B7                     OR   a   ; reset the carry flag
0D7B   ED 52                  SBC   hl,de   
0D7D   20 0F                  JR   nz,true1   
0D7F   18 13                  JR   false1   
0D81                             ; hl = value1 de = value2
0D81                             ; hl = result
0D81                LESSTHANEQ:      
0D81   B7                     OR   a   
0D82   ED 52                  SBC   hl,de   
0D84   18 05                  JR   lessthan1   
0D86                             ; hl = value1 de = value2
0D86                             ; hl = result
0D86                LESSTHAN:      
0D86   B7                     OR   a   
0D87   ED 52                  SBC   hl,de   
0D89   28 09                  JR   z,false1   
0D8B                LESSTHAN1:      
0D8B   FA 94 0D               JP   m,false1   
0D8E                TRUE1:       
0D8E   21 FF FF               LD   hl,TRUE   
0D91   E5                     PUSH   hl   
0D92   DD E9                  JP   (ix)   
0D94                NULL1:       
0D94                FALSE1:      
0D94   21 00 00               LD   hl,FALSE   
0D97   E5                     PUSH   hl   
0D98   DD E9                  JP   (ix)   
0D9A                SPREAD:      
0D9A   E1                     POP   hl   ; hl = array*
0D9B   ED 43 04 52            LD   (vTemp1),bc   ; save bc
0D9F   2B                     DEC   hl   ; bc = length
0DA0   46                     LD   b,(hl)   
0DA1   2B                     DEC   hl   
0DA2   4E                     LD   c,(hl)   
0DA3   23                     INC   hl   ; move back to array 0
0DA4   23                     INC   hl   
0DA5   18 0D                  JR   spread3   
0DA7                SPREAD1:      
0DA7   5E                     LD   e,(hl)   ; e = lsb data at hl
0DA8   23                     INC   hl   
0DA9   3A E6 51               LD   a,(vDataWidth)   ; data width = 1, d = 0, skip
0DAC   57                     LD   d,a   
0DAD   15                     DEC   d   
0DAE   28 02                  JR   z,spread2   
0DB0   56                     LD   d,(hl)   ; d = msb data at hl
0DB1   23                     INC   hl   
0DB2                SPREAD2:      
0DB2   D5                     PUSH   de   ; return de
0DB3   0B                     DEC   bc   ; count--
0DB4                SPREAD3:      
0DB4   79                     LD   a,c   ; exit loop if bc == 0
0DB5   B0                     OR   b   
0DB6   20 EF                  JR   nz,spread1   
0DB8   ED 4B 04 52            LD   bc,(vTemp1)   ; restore bc
0DBC   DD E9                  JP   (ix)   
0DBE                             ; shiftLeft                     15
0DBE                             ; value count -- value2          shift left count places
0DBE                SHIFTLEFT:      
0DBE   50 59                  LD   de,bc   ; save IP
0DC0   C1                     POP   bc   ; bc = count
0DC1   41                     LD   b,c   ; b = loop counter
0DC2   E1                     POP   hl   
0DC3   04                     INC   b   ; test for counter=0 case
0DC4   18 01                  JR   shiftLeft2   
0DC6                SHIFTLEFT1:      
0DC6   29                     ADD   hl,hl   ; left shift hl
0DC7                SHIFTLEFT2:      
0DC7   10 FD                  DJNZ   shiftLeft1   
0DC9   E5                     PUSH   hl   
0DCA   42 4B                  LD   bc,de   ; restore IP
0DCC   DD E9                  JP   (ix)   
0DCE                             ; shiftRight                    16
0DCE                             ; value count -- value2          shift left count places
0DCE                SHIFTRIGHT:      
0DCE   50 59                  LD   de,bc   ; save IP
0DD0   C1                     POP   bc   ; bc = count
0DD1   41                     LD   b,c   ; b = loop counter
0DD2   E1                     POP   hl   
0DD3   04                     INC   b   ; test for counter=0 case
0DD4   18 04                  JR   shiftRight2   
0DD6                SHIFTRIGHT1:      
0DD6   CB 3C                  SRL   h   ; right shift hl
0DD8   CB 1D                  RR   l   
0DDA                SHIFTRIGHT2:      
0DDA   10 FA                  DJNZ   shiftRight1   
0DDC   E5                     PUSH   hl   
0DDD   42 4B                  LD   bc,de   ; restore IP
0DDF   DD E9                  JP   (ix)   
0DE1                             ; division subroutine.
0DE1                             ; bc: divisor, de: dividend, hl: remainder
0DE1                DIVIDE:      
0DE1   21 00 00               LD   hl,0   ; zero the remainder
0DE4   3E 10                  LD   a,16   ; loop counter
0DE6                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0DE6   CB 21                  SLA   c   
0DE8   CB 10                  RL   b   
0DEA   ED 6A                  ADC   hl,hl   
0DEC   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0DEE   38 03                  JR   c,divide2   
0DF0   0C                     INC   c   
0DF1   18 01                  JR   divide3   
0DF3                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0DF3   19                     ADD   hl,de   
0DF4                DIVIDE3:      
0DF4   3D                     DEC   a   
0DF5   20 EF                  JR   nz,divide1   
0DF7   50 59                  LD   de,bc   ; result from bc to de
0DF9   C9                     RET      
0DFA                DOTNEXT:      
0DFA   3A F6 51               LD   a,(vStrMode)   ; if string mode then exit
0DFD   3C                     INC   a   
0DFE   20 02                  JR   nz,dotNext1   
0E00   DD E9                  JP   (ix)   
0E02                DOTNEXT1:      
0E02   11 00 50               LD   de,BUFFER   
0E05   2A EC 51               LD   hl,(vBufPtr)   
0E08   36 00                  LD   (hl),0   ; store NUL at end of string
0E0A   ED 53 EC 51            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0E0E   EB                     EX   de,hl   ; hl = BUFFER
0E0F   CD 88 0F               CALL   putstr   
0E12   DD E9                  JP   (ix)   
0E14                             ; arg_list - parses arg_list e.g. ab:c
0E14                             ; -- arg_list*
0E14                PARSEARGS:      
0E14   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0E17   2A F0 51               LD   hl,(vHeapPtr)   ; hl = heap*
0E1A   E5                     PUSH   hl   ; save start of arg_list
0E1B   23                     INC   hl   ; skip length fields to start of string
0E1C   23                     INC   hl   
0E1D   03                     INC   bc   ; point to next char
0E1E                PARSEARGS1:      
0E1E   0A                     LD   a,(bc)   
0E1F   FE 3A                  CP   ":"   ; ":" switches from args to locals
0E21   20 03                  JR   nz,parseArgs1a   
0E23   14                     INC   d   ; non zero value local count acts as flag
0E24   18 10                  JR   parseArgs3   
0E26                PARSEARGS1A:      
0E26   FE 61                  CP   "a"   ; < "a" terminates arg_list
0E28   38 0F                  JR   c,parseArgs4   
0E2A   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0E2C   30 0B                  JR   nc,parseArgs4   
0E2E                PARSEARGS2:      
0E2E   77                     LD   (hl),a   
0E2F   23                     INC   hl   
0E30   1C                     INC   e   ; increase arg count
0E31   AF                     XOR   a   
0E32   B2                     OR   d   
0E33   28 01                  JR   z,parseArgs3   
0E35   14                     INC   d   ; if d > 0 increase local count
0E36                PARSEARGS3:      
0E36   03                     INC   bc   ; point to next char
0E37   18 E5                  JR   parseArgs1   
0E39                PARSEARGS4:      
0E39   0B                     DEC   bc   
0E3A   AF                     XOR   a   
0E3B   B2                     OR   d   
0E3C   28 01                  JR   z,parseArgs5   
0E3E   15                     DEC   d   ; remove initial inc
0E3F                PARSEARGS5:      
0E3F   23                     INC   hl   
0E40   22 F0 51               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0E43   E1                     POP   hl   ; hl = start of arg_list
0E44   72                     LD   (hl),d   ; write number of locals at start - 1
0E45   23                     INC   hl   
0E46   73                     LD   (hl),e   ; write number of args + locals at start - 2
0E47   2B                     DEC   hl   
0E48   E3                     EX   (sp),hl   
0E49   E9                     JP   (hl)   
0E4A                             ; create block: parses block e.g. 00bbIC4uLi4g
0E4A                             ; -- block*
0E4A                PARSEBLOCK:      
0E4A   C5                     PUSH   bc   ; return pointer to first { of block
0E4B   03                     INC   bc   
0E4C   16 01                  LD   d,1   ; nesting: count first parenthesis
0E4E                PARSEBLOCK1:      ; Skip to end of definition
0E4E   0A                     LD   a,(bc)   ; Get the next character
0E4F   03                     INC   bc   ; Point to next character
0E50   FE 21                  CP   " " + 1   ; ignore whitespace
0E52   38 FA                  JR   c,parseBlock1   
0E54   FE 29                  CP   ")"   
0E56   28 2D                  JR   z,parseBlock4   
0E58   FE 7D                  CP   "}"   
0E5A   28 29                  JR   z,parseBlock4   
0E5C   FE 5D                  CP   "]"   
0E5E   28 25                  JR   z,parseBlock4   
0E60   FE 28                  CP   "("   
0E62   28 16                  JR   z,parseBlock2   
0E64   FE 7B                  CP   "{"   
0E66   28 12                  JR   z,parseBlock2   
0E68   FE 5B                  CP   "["   
0E6A   28 0E                  JR   z,parseBlock2   
0E6C   FE 27                  CP   "'"   
0E6E   28 0D                  JR   z,parseBlock3   
0E70   FE 60                  CP   "`"   
0E72   28 09                  JR   z,parseBlock3   
0E74   FE 22                  CP   DQ   
0E76   28 05                  JR   z,parseBlock3   
0E78   18 D4                  JR   parseBlock1   
0E7A                PARSEBLOCK2:      
0E7A   14                     INC   d   
0E7B   18 D1                  JR   parseBlock1   
0E7D                PARSEBLOCK3:      
0E7D   3E 80                  LD   a,$80   
0E7F   AA                     XOR   d   
0E80   57                     LD   d,a   
0E81   20 CB                  JR   nz,parseBlock1   
0E83   18 03                  JR   parseBlock5   
0E85                PARSEBLOCK4:      
0E85   15                     DEC   d   
0E86   20 C6                  JR   nz,parseBlock1   ; get the next element
0E88                PARSEBLOCK5:      
0E88   60 69                  LD   hl,bc   ; hl = IP
0E8A   11 22 52               LD   de,HEAP   ; is IP pointing to object in heap
0E8D   B7                     OR   a   ; IP - HEAP
0E8E   ED 52                  SBC   hl,de   
0E90   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0E92   28 1C                  JR   z,parseBlock6   
0E94   60 69                  LD   hl,bc   ; hl = IP
0E96   D1                     POP   de   ; de = block*
0E97   ED 43 04 52            LD   (vTemp1),bc   ; save IP
0E9B   B7                     OR   a   ; bc = size
0E9C   ED 52                  SBC   hl,de   
0E9E   44 4D                  LD   bc,hl   
0EA0   EB                     EX   de,hl   ; hl = block* de = heap*
0EA1   ED 5B F0 51            LD   de,(vHeapPtr)   
0EA5   D5                     PUSH   de   ; return hblock*
0EA6   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0EA8   ED 53 F0 51            LD   (vHeapPtr),de   ; heap* += size
0EAC   ED 4B 04 52            LD   bc,(vTemp1)   ; restore IP
0EB0                PARSEBLOCK6:      
0EB0   0B                     DEC   bc   ; balanced, exit
0EB1   E1                     POP   hl   ; hl = block*
0EB2   E3                     EX   (sp),hl   ; return to caller
0EB3   E9                     JP   (hl)   
0EB4                             ; create function
0EB4                             ; arg_list* block* -- func*
0EB4                CREATEFUNC:      
0EB4   E1                     POP   hl   ; save retrn address
0EB5   22 08 52               LD   (vTemp3),hl   
0EB8   ED 43 04 52            LD   (vTemp1),bc   ; save IP
0EBC   E1                     POP   hl   ; hl = block*
0EBD   22 06 52               LD   (vTemp2),hl   ; save block*
0EC0   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0EC3   FD 56 05               LD   d,(iy+5)   
0EC6   7B                     LD   a,e   ; if arg_list == null then make a func
0EC7   B2                     OR   d   
0EC8   20 09                  JR   nz,createFunc0   
0ECA   21 00 00               LD   hl,0   ; partial_array = null
0ECD   ED 5B F0 51            LD   de,(vHeapPtr)   ; de = compile*
0ED1   18 65                  JR   createFunc5   
0ED3                CREATEFUNC0:      
0ED3   E1                     POP   hl   ; hl = inner_arg_list*
0ED4   E5                     PUSH   hl   ; save inner_arg_list
0ED5   ED 5B F0 51            LD   de,(vHeapPtr)   ; de = compile*
0ED9   7E                     LD   a,(hl)   ; compile inner_num_locals
0EDA   4F                     LD   c,a   ; b = inner_num_locals
0EDB   12                     LD   (de),a   
0EDC   23                     INC   hl   
0EDD   13                     INC   de   
0EDE   7E                     LD   a,(hl)   ; compile inner_length
0EDF   12                     LD   (de),a   
0EE0   91                     SUB   c   ; a = inner_num args
0EE1   23                     INC   hl   
0EE2   13                     INC   de   
0EE3   B7                     OR   a   ; compile args if inner_length > 0
0EE4   28 05                  JR   z,createFunc1   
0EE6   4F                     LD   c,a   ; bc = a
0EE7   06 00                  LD   b,0   
0EE9   ED B0                  LDIR      
0EEB                CREATEFUNC1:      
0EEB   EB                     EX   de,hl   ; hl = outer_arg_list
0EEC   FD 5E 04               LD   e,(iy+4)   
0EEF   FD 56 05               LD   d,(iy+5)   
0EF2   EB                     EX   de,hl   
0EF3   23                     INC   hl   ; a = outer_length
0EF4   7E                     LD   a,(hl)   
0EF5   23                     INC   hl   
0EF6   B7                     OR   a   
0EF7   28 05                  JR   z,createFunc2   
0EF9   4F                     LD   c,a   
0EFA   06 00                  LD   b,0   
0EFC   ED B0                  LDIR      ; append outer_args
0EFE                CREATEFUNC2:      ; a = outer_length
0EFE   47                     LD   b,a   ; b = a = outer_length
0EFF   2A F0 51               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0F02   23                     INC   hl   
0F03   7E                     LD   a,(hl)   ; add outer_length to new length
0F04   80                     ADD   a,b   
0F05   77                     LD   (hl),a   
0F06   2B                     DEC   hl   
0F07   78                     LD   a,b   ; save outer_length in a'
0F08   08                     EX   af,af'   
0F09   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0F0A   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0F0B   B7                     OR   a   
0F0C   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0F0E   4F                     LD   c,a   ; c = inner_num_locals
0F0F   06 00                  LD   b,0   ; bc = inner_num_locals
0F11   23                     INC   hl   ; a = inner_length
0F12   7E                     LD   a,(hl)   
0F13   91                     SUB   c   ; a = inner_num_args
0F14   23                     INC   hl   ; hl = inner_arg_chars
0F15   85                     ADD   a,l   ; hl += a
0F16   6F                     LD   l,a   
0F17   3E 00                  LD   a,0   
0F19   84                     ADD   a,h   
0F1A   67                     LD   h,a   
0F1B   ED B0                  LDIR      ; append inner_locals
0F1D                CREATEFUNC2A:      
0F1D   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0F1E   12                     LD   (de),a   ; compile partial_array length field
0F1F   13                     INC   de   
0F20   AF                     XOR   a   
0F21   12                     LD   (de),a   
0F22   13                     INC   de   
0F23   D5                     PUSH   de   ; push partial_array*
0F24   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0F25   FD 5E 02               LD   e,(iy+2)   
0F28   FD 56 03               LD   d,(iy+3)   
0F2B   EB                     EX   de,hl   
0F2C                CREATEFUNC3:      
0F2C   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0F2D   4E                     LD   c,(hl)   
0F2E   2B                     DEC   hl   
0F2F   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0F30   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0F31   13                     INC   de   
0F32   79                     LD   a,c   
0F33   12                     LD   (de),a   
0F34   13                     INC   de   
0F35   10 F5                  DJNZ   createFunc3   ; b = outer_length
0F37                CREATEFUNC4:      
0F37   E1                     POP   hl   ; hl = partial_array*
0F38                CREATEFUNC5:      
0F38   C1                     POP   bc   ; bc = new_arg_list*
0F39   D5                     PUSH   de   ; return new func*
0F3A   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0F3B   73                     LD   (hl),e   ; compile partial_array* to func
0F3C   23                     INC   hl   
0F3D   72                     LD   (hl),d   
0F3E   23                     INC   hl   
0F3F   ED 5B 06 52            LD   de,(vTemp2)   ; de = block*
0F43   73                     LD   (hl),e   ; compile block* to func
0F44   23                     INC   hl   
0F45   72                     LD   (hl),d   
0F46   23                     INC   hl   
0F47   71                     LD   (hl),c   ; compile new_arg_list* to func
0F48   23                     INC   hl   
0F49   70                     LD   (hl),b   
0F4A   23                     INC   hl   
0F4B   22 F0 51               LD   (vHeapPtr),hl   ; bump heap ptr
0F4E   ED 4B 04 52            LD   bc,(vTemp1)   ; restore IP
0F52   2A 08 52               LD   hl,(vTemp3)   ; jump to return address
0F55   E9                     JP   (hl)   
0F56                             ;*******************************************************************
0F56                             ; general routines
0F56                             ;*******************************************************************
0F56                             ; followed by a table
0F56                             ; indexed on the 0-25 lowercase letter
0F56                             ; db lsb(addr)
0F56                             ; the final item index 26 matches any other char
0F56                LOWERCASETABLE:      
0F56   03                     INC   bc   
0F57   0A                     LD   a,(bc)   
0F58   FE 7B                  CP   "z"+1   
0F5A   30 0B                  JR   nc,lowerCaseTable2   
0F5C   D6 61                  SUB   "a"   
0F5E   38 07                  JR   c,lowerCaseTable2   
0F60                LOWERCASETABLE1:      
0F60   E1                     POP   hl   
0F61   85                     ADD   a,l   
0F62   6F                     LD   l,a   
0F63   6E                     LD   l,(hl)   ; must have the same msb as the table
0F64   C3 6D 0F               JP   commandTable1   
0F67                LOWERCASETABLE2:      
0F67   3E 1A                  LD   a,26   
0F69   0B                     DEC   bc   
0F6A   18 F4                  JR   lowerCaseTable1   
0F6C                             ; followed by a table
0F6C                             ; db char
0F6C                             ; dw addr
0F6C                             ; the final item must have char == NUL
0F6C                COMMANDTABLE:      
0F6C   E1                     POP   hl   
0F6D                COMMANDTABLE1:      
0F6D   03                     INC   bc   
0F6E                COMMANDTABLE2:      
0F6E   AF                     XOR   a   
0F6F   BE                     CP   (hl)   
0F70   20 03                  JR   nz,commandTable3   
0F72   0B                     DEC   bc   
0F73   18 09                  JR   commandTable4   
0F75                COMMANDTABLE3:      
0F75   0A                     LD   a,(bc)   
0F76   BE                     CP   (hl)   
0F77   28 05                  JR   z,commandTable4   
0F79   23                     INC   hl   
0F7A   23                     INC   hl   
0F7B   23                     INC   hl   
0F7C   18 F0                  JR   commandTable2   
0F7E                COMMANDTABLE4:      
0F7E   23                     INC   hl   
0F7F   5E                     LD   e,(hl)   
0F80   23                     INC   hl   
0F81   56                     LD   d,(hl)   
0F82   EB                     EX   de,hl   
0F83   E9                     JP   (hl)   
0F84                PUTSTR0:      
0F84   CD 85 00               CALL   putchar   
0F87   23                     INC   hl   
0F88                PUTSTR:      
0F88   7E                     LD   a,(hl)   
0F89   B7                     OR   a   
0F8A   20 F8                  JR   nz,putstr0   
0F8C   C9                     RET      
0F8D                             ; **************************************************************************
0F8D                             ; calculate nesting value
0F8D                             ; a is char to be tested,
0F8D                             ; e is the nesting value (initially 0)
0F8D                             ; e is increased by ( and [
0F8D                             ; e is decreased by ) and ]
0F8D                             ; e has its bit 7 toggled by `
0F8D                             ; limited to 127 levels
0F8D                             ; **************************************************************************
0F8D                NESTING:      
0F8D   FE 22                  CP   DQ   ; quote char
0F8F   28 06                  JR   z,nesting0   
0F91   FE 60                  CP   "`"   ; quote char
0F93   28 02                  JR   z,nesting0   
0F95   18 0A                  JR   nesting1   
0F97                NESTING0:      
0F97   CB 7B                  BIT   7,e   
0F99   28 03                  JR   z,nesting1a   
0F9B   CB BB                  RES   7,e   
0F9D   C9                     RET      
0F9E                NESTING1A:      
0F9E   CB FB                  SET   7,e   
0FA0   C9                     RET      
0FA1                NESTING1:      
0FA1   CB 7B                  BIT   7,e   
0FA3   C0                     RET   nz   
0FA4   FE 7B                  CP   "{"   
0FA6   28 08                  JR   z,nesting2   
0FA8   FE 5B                  CP   "["   
0FAA   28 04                  JR   z,nesting2   
0FAC   FE 28                  CP   "("   
0FAE   20 02                  JR   nz,nesting3   
0FB0                NESTING2:      
0FB0   1C                     INC   e   
0FB1   C9                     RET      
0FB2                NESTING3:      
0FB2   FE 7D                  CP   "}"   
0FB4   28 07                  JR   z,nesting4   
0FB6   FE 5D                  CP   "]"   
0FB8   28 03                  JR   z,nesting4   
0FBA   FE 29                  CP   ")"   
0FBC   C0                     RET   nz   
0FBD                NESTING4:      
0FBD   1D                     DEC   e   
0FBE   C9                     RET      
0FBF                PROMPT:      
0FBF   CD CF 0F               CALL   printStr   
0FC2   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0FC7   C9                     RET      
0FC8                CRLF:        
0FC8   CD CF 0F               CALL   printStr   
0FCB   0D 0A 00               .CSTR   "\r\n"   
0FCE   C9                     RET      
0FCF                             ; prints a null teminated string
0FCF                             ; the string should be immediately following the call
0FCF                PRINTSTR:      
0FCF   E3                     EX   (sp),hl   ; swap			
0FD0   CD 88 0F               CALL   putstr   
0FD3   23                     INC   hl   ; inc past NUL
0FD4   E3                     EX   (sp),hl   ; put it back	
0FD5   C9                     RET      
0FD6                INIT:        
0FD6   21 F0 01               LD   hl,titleStr   
0FD9   11 0E 52               LD   de,titleBuf   
0FDC   06 14                  LD   b,20   
0FDE                INIT1:       
0FDE   1A                     LD   a,(de)   
0FDF   BE                     CP   (hl)   
0FE0   20 17                  JR   nz,coldBoot0   
0FE2   13                     INC   de   
0FE3   23                     INC   hl   
0FE4   10 F8                  DJNZ   init1   
0FE6                WARMINIT:      
0FE6   ED 4B FC 51            LD   bc,(vSavedIP)   ; restore IP
0FEA   ED 7B FE 51            LD   sp,(vSavedSP)   ; restore SP
0FEE   DD 2A 00 52            LD   ix,(vSavedNext)   ; restore Next
0FF2   FD 2A 02 52            LD   iy,(vSavedBP)   ; restore BP
0FF6   C3 30 10               JP   start1   
0FF9                COLDBOOT0:      
0FF9   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0FFC   11 0E 52               LD   de,titleBuf   
0FFF   06 14                  LD   b,20   
1001   ED B0                  LDIR      
1003                COLDINIT:      
1003   21 DE 01               LD   hl,isysVars   
1006   11 E6 51               LD   de,sysVars   
1009   01 12 00               LD   bc,9 * 2   
100C   ED B0                  LDIR      
100E   21 00 51               LD   hl,vars   ; 52 vars LO HI
1011   06 34                  LD   b,26*2   
1013   AF                     XOR   a   
1014                COLDBOOT1:      
1014   77                     LD   (hl),a   
1015   23                     INC   hl   
1016   10 FC                  DJNZ   coldBoot1   
1018   DD 2A EE 51            LD   ix,(vNext)   
101C   FD 21 00 4F            LD   iy,STACK   
1020   C9                     RET      
1021                COLDSTART:      
1021   31 00 4F               LD   sp,STACK   
1024   CD F9 0F               CALL   coldBoot0   
1027   C3 30 10               JP   start1   
102A                START:       
102A   31 00 4F               LD   sp,STACK   ; start Monty
102D   CD D6 0F               CALL   init   ; setups
1030                START1:      
1030   21 0E 52               LD   hl,titleBuf   
1033   CD 88 0F               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
1036                INTERPRET:      
1036   CD BF 0F               CALL   prompt   
1039   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
103C   21 00 4F               LD   hl,TIB   
103F   22 EA 51               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
1042                INTERPRET2:      ; calculate nesting
1042   1E 00                  LD   e,0   ; initilize nesting value
1044   C5                     PUSH   bc   ; save offset into TIB,
1045                             ; bc is also the count of chars in TIB
1045   21 00 4F               LD   hl,TIB   ; hl is start of TIB
1048   18 0B                  JR   interpret4   
104A                INTERPRET3:      
104A   3E 33                  LD   a,"3"   
104C   CD 85 00               CALL   putchar   
104F   7E                     LD   a,(hl)   ; a = char in TIB
1050   23                     INC   hl   ; inc pointer into TIB
1051   0B                     DEC   bc   ; dec count of chars in TIB
1052   CD 8D 0F               CALL   nesting   ; update nesting value
1055                INTERPRET4:      
1055   79                     LD   a,c   ; is count zero?
1056   B0                     OR   b   
1057   20 F1                  JR   nz,interpret3   ; if not loop
1059   C1                     POP   bc   ; restore offset into TIB
105A                INTERPRET5:      
105A   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
105D   FE 20                  CP   $20   ; compare to space
105F   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
1061   FE 00                  CP   NUL   ; is it end of string? NUL end of string
1063                             ; ???? NEEDED?
1063   28 36                  JR   z,interpret8   
1065   FE 0D                  CP   "\r"   ; carriage return? ascii 13
1067   28 1F                  JR   z,interpret7   ; if anything else its macro/control
1069   FE 05                  CP   CTRL_E   
106B   CA FC 10               JP   z,edit_   
106E   FE 08                  CP   CTRL_H   
1070   CA EC 10               JP   z,backSpace_   
1073   FE 0A                  CP   CTRL_J   
1075   CA FF 10               JP   z,reEdit_   
1078                             ; cp CTRL_S
1078                             ; jp z,printStack_
1078                             ; DB     lsb(edit_)       ; ENQ ^E  5
1078                             ; DB     lsb(reedit_)     ; LF  ^J 10
1078                             ; DB     lsb(list_)       ; FF  ^L 12
1078                             ; DB     lsb(printStack_) ; DLE ^P 16
1078                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
1078                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
1078                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
1078                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
1078                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
1078                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
1078                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
1078                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
1078                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
1078                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
1078                INTERPRET5A:      
1078                             ; ld (vTIBPtr),bc
1078                             ; ld bc,(vTIBPtr)
1078   18 C8                  JR   interpret2   
107A                INTERPRET6:      
107A   21 00 4F               LD   hl,TIB   
107D   09                     ADD   hl,bc   
107E   77                     LD   (hl),a   ; store the character in textbuf
107F   03                     INC   bc   
1080   CD 85 00               CALL   putchar   ; echo character to screen
1083   CD 8D 0F               CALL   nesting   
1086   18 D2                  JR   interpret5   ; wait for next character
1088                INTERPRET7:      
1088   21 00 4F               LD   hl,TIB   
108B   09                     ADD   hl,bc   
108C   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
108E   23                     INC   hl   
108F   36 0A                  LD   (hl),"\n"   
1091   23                     INC   hl   
1092   03                     INC   bc   
1093   03                     INC   bc   
1094   CD C8 0F               CALL   crlf   ; echo character to screen
1097   7B                     LD   a,e   ; if zero nesting append and ETX after \r
1098   B7                     OR   a   
1099   20 BF                  JR   nz,interpret5   
109B                INTERPRET8:      
109B   21 00 4F               LD   hl,TIB   
109E   09                     ADD   hl,bc   
109F   22 EA 51               LD   (vTIBPtr),hl   
10A2   01 00 4F               LD   bc,TIB   
10A5   ED 43 FC 51            LD   (vSavedIP),bc   ; save IP
10A9   ED 73 FE 51            LD   (vSavedSP),sp   ; save SP
10AD   DD 22 00 52            LD   (vSavedNext),ix   ; save Next
10B1   FD 22 02 52            LD   (vSavedBP),iy   ; save BP
10B5   0B                     DEC   bc   
10B6                NEXT:        
10B6   03                     INC   bc   ; Increment the IP
10B7   0A                     LD   a,(bc)   ; Get the next character and dispatch
10B8   FE 20                  CP   " "   ; whitespace?
10BA   28 FA                  JR   z,next   ; space? ignore
10BC   38 0D                  JR   c,next1   
10BE   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
10C0   6F                     LD   l,a   ; index into table
10C1   26 01                  LD   h,msb(opcodes)   ; start address of jump table
10C3   6E                     LD   l,(hl)   ; get low jump address
10C4   24                     INC   h   ; page 2
10C5   FE BA                  CP   "Z" - "!" + 1 + $80   
10C7   38 01                  JR   c,next0   
10C9   24                     INC   h   ; page 3
10CA                NEXT0:       
10CA   E9                     JP   (hl)   ; Jump to routine
10CB                NEXT1:       
10CB   FE 00                  CP   NUL   ; end of input string?
10CD   28 03                  JR   z,exit   
10CF   C3 36 10               JP   interpret   ; no, other whitespace, macros?
10D2                EXIT:        
10D2   03                     INC   bc   
10D3   60 69                  LD   hl,bc   
10D5   E9                     JP   (hl)   
10D6                RUN:         
10D6   C1                     POP   bc   
10D7   0B                     DEC   bc   
10D8   DD E9                  JP   (ix)   
10DA                ERROR:       
10DA   E5                     PUSH   hl   
10DB   CD D6 10               CALL   run   
10DE   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
10E9   C3 36 10               JP   interpret   
10EC                BACKSPACE_:      
10EC   79                     LD   a,c   
10ED   B0                     OR   b   
10EE   CA 42 10               JP   z,interpret2   
10F1   0B                     DEC   bc   
10F2   CD CF 0F               CALL   printStr   
10F5   08 20 08 00            .CSTR   "\b \b"   
10F9   C3 42 10               JP   interpret2   
10FC                             ; edit
10FC                EDIT_:       
10FC   C3 36 10               JP   interpret   
10FF                REEDIT_:      
10FF   C3 36 10               JP   interpret   
1102                             ; editDef:
1102                             ;     pop hl                      ; pop ret address
1102                             ;     ex (sp),hl                  ; swap with TOS
1102                             ;     push hl                     ; dup TOS
1102                             ;     ld a,l                      ; a = ident
1102                             ;     ld de,TIB                   ; de = start of TIB
1102                             ;     ld (vTIBPtr),de             ; update TIB*
1102                             ;     push ix                     ; save NEXT
1102                             ;     ld ix,editDef0              ; NEXT = editDef0
1102                             ;     jp lookupRef                ; convert letter into address
1102                             ; editDef0:
1102                             ;     ld e,(hl)                   ; de = (hl++)
1102                             ;     inc hl
1102                             ;     ld d,(hl)
1102                             ;     ld a,d                      ; de == 0 ?
1102                             ;     or e
1102                             ;     jr z,editDef4
1102                             ;     ld ix,editDef3              ; NEXT = editDef3
1102                             ;     ex de,hl
1102                             ;     ld a,(hl)
1102                             ;     cp "{"
1102                             ;     jr nz,editDef1
1102                             ;     jp editBlock0               ; convert letter into address
1102                             ; editDef1:
1102                             ;     cp "("
1102                             ;     jr nz,editDef2
1102                             ;     jp editBlock0               ; convert letter into address
1102                             ; editDef2:
1102                             ;     jp editFunc
1102                             ; editDef3:
1102                             ;     ld a," "                    ; write assign
1102                             ;     call writeChar
1102                             ;     pop hl                      ; a = ident
1102                             ;     ld a,l
1102                             ;     call writeChar
1102                             ;     ld a,"="                    ; write assign
1102                             ;     call writeChar
1102                             ;     ld ix,editDef4              ; NEXT = editDef4
1102                             ;     jp printTIB
1102                             ; editDef4:
1102                             ;     pop ix                      ; restore NEXT
1102                             ;     jp (ix)
1102                             ; writeChar:
1102                             ;     ld de,(vTIBPtr)             ; de = TIB*
1102                             ;     ld (de),a                   ; write ident
1102                             ;     inc de
1102                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
1102                             ;     ret
1102                             ; ; printTIB
1102                             ; printTIB:
1102                             ;     ld hl,(vTIBPtr)
1102                             ;     ld de,TIB
1102                             ;     or a
1102                             ;     sbc hl,de
1102                             ;     jp printTIB2
1102                             ; printTIB1:
1102                             ;     ld a,(de)
1102                             ;     call putchar
1102                             ; printTIB2:
1102                             ;     ld a,l
1102                             ;     or h
1102                             ;     jr nz,printTIB1
1102                             ;     jp (ix)
1102                             ; editBlock:
1102                             ;     pop hl                      ; hl = block*
1102                             ; editBlock0:
1102                             ;     push ix                     ; save next
1102                             ;     push hl                     ; push block*
1102                             ;     push hl                     ; push block*
1102                             ;     ld ix,(editBlock2)
1102                             ;     jp blockLength
1102                             ; editBlock1:
1102                             ;     pop hl                      ; bc = length, (sp) = IP
1102                             ;     pop de                      ; de = block*
1102                             ;     ld a,l
1102                             ;     or h
1102                             ;     jr z,editBlock2
1102                             ;     push bc
1102                             ;     ld bc,hl
1102                             ;     ex de,hl                    ; hl = block*
1102                             ;     ld de,(vTIBPtr)              ; de = TIB*
1102                             ;     ldir                        ; copy block to TIB
1102                             ;     ld (vTIBPtr),de              ; save TIB*
1102                             ;     pop bc
1102                             ; editBlock2:
1102                             ;     pop ix                      ; restore next
1102                             ;     jp (ix)
1102                             ; editFunc:
1102                             ;     jp (ix)
1102                             ; editArray:
1102                             ;     jp (ix)
1102                             ; editparseArgs:
1102                             ;     jp (ix)
1102                             ; ; blockLength
1102                             ; ; addr1 -- length
1102                             ; blockLength:
1102                             ;     pop hl                      ; block*
1102                             ;     push hl                     ; save block*
1102                             ;     inc hl                      ; skip first char
1102                             ;     ld d,1                      ; increase nesting
1102                             ; blockLength1:                   ; Skip to end of definition
1102                             ;     ld a,(hl)                   ; Get the next character
1102                             ;     inc hl                      ; Point to next character
1102                             ;     cp " " + 1                  ; ignore whitespace
1102                             ;     jr c,blockLength1
1102                             ;     cp ")"
1102                             ;     jr z,blockLength4
1102                             ;     cp "}"
1102                             ;     jr z,blockLength4
1102                             ;     cp "]"
1102                             ;     jr z,blockLength4
1102                             ;     cp "("
1102                             ;     jr z,blockLength2
1102                             ;     cp "{"
1102                             ;     jr z,blockLength2
1102                             ;     cp "["
1102                             ;     jr z,blockLength2
1102                             ;     cp "'"
1102                             ;     jr z,blockLength3
1102                             ;     cp "`"
1102                             ;     jr z,blockLength3
1102                             ;     cp DQ
1102                             ;     jr z,blockLength3
1102                             ;     jr blockLength1
1102                             ; blockLength2:
1102                             ;     inc d
1102                             ;     jr blockLength1
1102                             ; blockLength4:
1102                             ;     dec d
1102                             ;     jr nz, blockLength1         ; get the next element
1102                             ; blockLength3:
1102                             ;     ld a,$80
1102                             ;     xor d
1102                             ;     ld d,a
1102                             ;     jr nz, blockLength1
1102                             ;     pop hl                      ; hl = block*
1102                             ;     or a
1102                             ;     sbc hl,de
1102                             ;     push hl
1102                             ;     jp (ix)
1102                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
1102                             ; \a start of stack \#3 depth \b base \$ prompt
1102                             ; DW dStack               ; a vS0 start of datastack			
1102                             ; DW FALSE                ; b vBase16
1102                             ; DW 0                    ; c vTIBPtr an offset to the tib
1102                             ; DW 0                    ; d
1102                             ; DW 65                   ; e vLastDef "A" last command u defined
1102                             ; DW 0                    ; f
1102                             ; DW page6                ; g 256 bytes limits
1102                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
1102                          ;*Macro unroll: FUNC f1, 0, ""
1102                F1:          
1102   CD B4 03               CALL   go   
1105   00 00                  DW   NUL   
1107   0D 11                  DW   f1M_3051S12   
1109   0B 11                  DW   $+2   
110B   00                     DB   0   
110C   00                     .PSTR   ""   
110D                F1M_3051S12:      
110D   00                     DB   0   
110E                          ;*Macro unroll: FUNC f2, 0, ""
110E                F2:          
110E   CD B4 03               CALL   go   
1111   00 00                  DW   NUL   
1113   19 11                  DW   f2M_3053S15   
1115   17 11                  DW   $+2   
1117   00                     DB   0   
1118   00                     .PSTR   ""   
1119                F2M_3053S15:      
1119   00                     DB   0   
111A                          ;*Macro unroll: FUNC f3, 0, ""
111A                F3:          
111A   CD B4 03               CALL   go   
111D   00 00                  DW   NUL   
111F   25 11                  DW   f3M_3055S18   
1121   23 11                  DW   $+2   
1123   00                     DB   0   
1124   00                     .PSTR   ""   
1125                F3M_3055S18:      
1125   00                     DB   0   
1126                          ;*Macro unroll: FUNC f4, 0, ""
1126                F4:          
1126   CD B4 03               CALL   go   
1129   00 00                  DW   NUL   
112B   31 11                  DW   f4M_3057S21   
112D   2F 11                  DW   $+2   
112F   00                     DB   0   
1130   00                     .PSTR   ""   
1131                F4M_3057S21:      
1131   00                     DB   0   
1132                          ALIGN   $100   
1200                TESTSSTART:      
1200                             ; test "0 10 1 /rg \\a{%a.} /fe", 0
1200                             ; test "0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", 0
1200                             ; test "0 10 1 /rg \\a{%a 3<}/ft \\a{%a.} /fe", 0
1200                             ; test "0 10 1 /rg  0 \\da{%d%a+}/fd \\a{%a 24<}/ft \\a{%a.} /fe", 0
1200                             ; test "[10 20 30] /ai \\a{%a.} /fe", 0
1200                             ; test "[1 2 3].a", 0
1200                             ; test "/sb `hello:` 65.c 1. 2. 3. /se .s", FALSE
1200                             ; test "`hello:` 65.c 1. 2. 3.", FALSE
1200                             ; test "/hx/bm$1234.",0
1200                             ; test "/bm257.",0
1200                             ; test "$1000 'hello there!' /si \\a{%a.c} /fe", $1000
1200                             ; test "10 0 -1 /rg \\a{%a.} /fe", 0
1200                             ; test "0 10 1 /f1 \\a{%a.} /fe", 0
1200                          ;*Macro unroll:  test "[1 2 3]** + +", 6
1200   31 00 4F               LD   SP,STACK   
1203   CD 03 10               CALL   coldInit   
1206   CD B2 4D               CALL   execStr   
1209   5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 DB   "[1 2 3]** + +",0   
1217   E1                     POP   HL   
1218   E5                     PUSH   HL   
1219   11 06 00               LD   DE,6   
121C   B7                     OR   A   
121D   ED 52                  SBC   HL,DE   
121F   7D                     LD   A,L   
1220   B4                     OR   H   
1221   CA 7E 12               JP   Z,expectM_3074S43   
1224   CD CF 0F               CALL   printStr   
1227   43 6F 64 65 3A 20 5B 31 20 32 20 33 5D 2A 2A 20 2B 20 2B 00 .CSTR   "Code: ","[1 2 3]** + +"   
123B   CD CF 0F               CALL   printStr   
123E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
124D   21 06 00               LD   hl,6   
1250   E5                     PUSH   hl   
1251   E5                     PUSH   hl   
1252   CD D6 10               CALL   run   
1255   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
125C   CD CF 0F               CALL   printStr   
125F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
126C   E1                     POP   hl   
126D   E5                     PUSH   hl   
126E   E5                     PUSH   hl   
126F   CD D6 10               CALL   run   
1272   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
127D   76                     HALT      
127E                EXPECTM_3074S43:      
127E   E1                     POP   HL   
127F                          ;*Macro unroll:  test "/bm[_a [_b _c]** _d]2#", $62
127F   31 00 4F               LD   SP,STACK   
1282   CD 03 10               CALL   coldInit   
1285   CD B2 4D               CALL   execStr   
1288   2F 62 6D 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 23 00 DB   "/bm[_a [_b _c]** _d]2#",0   
129F   E1                     POP   HL   
12A0   E5                     PUSH   HL   
12A1   11 62 00               LD   DE,$62   
12A4   B7                     OR   A   
12A5   ED 52                  SBC   HL,DE   
12A7   7D                     LD   A,L   
12A8   B4                     OR   H   
12A9   CA 0F 13               JP   Z,expectM_3075S44   
12AC   CD CF 0F               CALL   printStr   
12AF   43 6F 64 65 3A 20 2F 62 6D 5B 5F 61 20 5B 5F 62 20 5F 63 5D 2A 2A 20 5F 64 5D 32 23 00 .CSTR   "Code: ","/bm[_a [_b _c]** _d]2#"   
12CC   CD CF 0F               CALL   printStr   
12CF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
12DE   21 62 00               LD   hl,$62   
12E1   E5                     PUSH   hl   
12E2   E5                     PUSH   hl   
12E3   CD D6 10               CALL   run   
12E6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
12ED   CD CF 0F               CALL   printStr   
12F0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
12FD   E1                     POP   hl   
12FE   E5                     PUSH   hl   
12FF   E5                     PUSH   hl   
1300   CD D6 10               CALL   run   
1303   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
130E   76                     HALT      
130F                EXPECTM_3075S44:      
130F   E1                     POP   HL   
1310   CD CF 0F               CALL   printStr   
1313   44 6F 6E 65 21 00      .CSTR   "Done!"   
1319   76                     HALT      
131A                          ;*Macro unroll:  test "/f", false
131A   31 00 4F               LD   SP,STACK   
131D   CD 03 10               CALL   coldInit   
1320   CD B2 4D               CALL   execStr   
1323   2F 66 00               DB   "/f",0   
1326   E1                     POP   HL   
1327   E5                     PUSH   HL   
1328   11 00 00               LD   DE,false   
132B   B7                     OR   A   
132C   ED 52                  SBC   HL,DE   
132E   7D                     LD   A,L   
132F   B4                     OR   H   
1330   CA 82 13               JP   Z,expectM_3079S49   
1333   CD CF 0F               CALL   printStr   
1336   43 6F 64 65 3A 20 2F 66 00 .CSTR   "Code: ","/f"   
133F   CD CF 0F               CALL   printStr   
1342   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1351   21 00 00               LD   hl,false   
1354   E5                     PUSH   hl   
1355   E5                     PUSH   hl   
1356   CD D6 10               CALL   run   
1359   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1360   CD CF 0F               CALL   printStr   
1363   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1370   E1                     POP   hl   
1371   E5                     PUSH   hl   
1372   E5                     PUSH   hl   
1373   CD D6 10               CALL   run   
1376   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1381   76                     HALT      
1382                EXPECTM_3079S49:      
1382   E1                     POP   HL   
1383                          ;*Macro unroll:  test "/t", true
1383   31 00 4F               LD   SP,STACK   
1386   CD 03 10               CALL   coldInit   
1389   CD B2 4D               CALL   execStr   
138C   2F 74 00               DB   "/t",0   
138F   E1                     POP   HL   
1390   E5                     PUSH   HL   
1391   11 FF FF               LD   DE,true   
1394   B7                     OR   A   
1395   ED 52                  SBC   HL,DE   
1397   7D                     LD   A,L   
1398   B4                     OR   H   
1399   CA EB 13               JP   Z,expectM_3080S50   
139C   CD CF 0F               CALL   printStr   
139F   43 6F 64 65 3A 20 2F 74 00 .CSTR   "Code: ","/t"   
13A8   CD CF 0F               CALL   printStr   
13AB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
13BA   21 FF FF               LD   hl,true   
13BD   E5                     PUSH   hl   
13BE   E5                     PUSH   hl   
13BF   CD D6 10               CALL   run   
13C2   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
13C9   CD CF 0F               CALL   printStr   
13CC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
13D9   E1                     POP   hl   
13DA   E5                     PUSH   hl   
13DB   E5                     PUSH   hl   
13DC   CD D6 10               CALL   run   
13DF   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
13EA   76                     HALT      
13EB                EXPECTM_3080S50:      
13EB   E1                     POP   HL   
13EC                          ;*Macro unroll:  test "1", 1
13EC   31 00 4F               LD   SP,STACK   
13EF   CD 03 10               CALL   coldInit   
13F2   CD B2 4D               CALL   execStr   
13F5   31 00                  DB   "1",0   
13F7   E1                     POP   HL   
13F8   E5                     PUSH   HL   
13F9   11 01 00               LD   DE,1   
13FC   B7                     OR   A   
13FD   ED 52                  SBC   HL,DE   
13FF   7D                     LD   A,L   
1400   B4                     OR   H   
1401   CA 52 14               JP   Z,expectM_3081S51   
1404   CD CF 0F               CALL   printStr   
1407   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
140F   CD CF 0F               CALL   printStr   
1412   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1421   21 01 00               LD   hl,1   
1424   E5                     PUSH   hl   
1425   E5                     PUSH   hl   
1426   CD D6 10               CALL   run   
1429   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1430   CD CF 0F               CALL   printStr   
1433   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1440   E1                     POP   hl   
1441   E5                     PUSH   hl   
1442   E5                     PUSH   hl   
1443   CD D6 10               CALL   run   
1446   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1451   76                     HALT      
1452                EXPECTM_3081S51:      
1452   E1                     POP   HL   
1453                          ;*Macro unroll:  test "2", 2
1453   31 00 4F               LD   SP,STACK   
1456   CD 03 10               CALL   coldInit   
1459   CD B2 4D               CALL   execStr   
145C   32 00                  DB   "2",0   
145E   E1                     POP   HL   
145F   E5                     PUSH   HL   
1460   11 02 00               LD   DE,2   
1463   B7                     OR   A   
1464   ED 52                  SBC   HL,DE   
1466   7D                     LD   A,L   
1467   B4                     OR   H   
1468   CA B9 14               JP   Z,expectM_3082S52   
146B   CD CF 0F               CALL   printStr   
146E   43 6F 64 65 3A 20 32 00 .CSTR   "Code: ","2"   
1476   CD CF 0F               CALL   printStr   
1479   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1488   21 02 00               LD   hl,2   
148B   E5                     PUSH   hl   
148C   E5                     PUSH   hl   
148D   CD D6 10               CALL   run   
1490   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1497   CD CF 0F               CALL   printStr   
149A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
14A7   E1                     POP   hl   
14A8   E5                     PUSH   hl   
14A9   E5                     PUSH   hl   
14AA   CD D6 10               CALL   run   
14AD   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
14B8   76                     HALT      
14B9                EXPECTM_3082S52:      
14B9   E1                     POP   HL   
14BA                          ;*Macro unroll:  test "1", 1
14BA   31 00 4F               LD   SP,STACK   
14BD   CD 03 10               CALL   coldInit   
14C0   CD B2 4D               CALL   execStr   
14C3   31 00                  DB   "1",0   
14C5   E1                     POP   HL   
14C6   E5                     PUSH   HL   
14C7   11 01 00               LD   DE,1   
14CA   B7                     OR   A   
14CB   ED 52                  SBC   HL,DE   
14CD   7D                     LD   A,L   
14CE   B4                     OR   H   
14CF   CA 20 15               JP   Z,expectM_3083S53   
14D2   CD CF 0F               CALL   printStr   
14D5   43 6F 64 65 3A 20 31 00 .CSTR   "Code: ","1"   
14DD   CD CF 0F               CALL   printStr   
14E0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
14EF   21 01 00               LD   hl,1   
14F2   E5                     PUSH   hl   
14F3   E5                     PUSH   hl   
14F4   CD D6 10               CALL   run   
14F7   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
14FE   CD CF 0F               CALL   printStr   
1501   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
150E   E1                     POP   hl   
150F   E5                     PUSH   hl   
1510   E5                     PUSH   hl   
1511   CD D6 10               CALL   run   
1514   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
151F   76                     HALT      
1520                EXPECTM_3083S53:      
1520   E1                     POP   HL   
1521                          ;*Macro unroll:  test "0", 0
1521   31 00 4F               LD   SP,STACK   
1524   CD 03 10               CALL   coldInit   
1527   CD B2 4D               CALL   execStr   
152A   30 00                  DB   "0",0   
152C   E1                     POP   HL   
152D   E5                     PUSH   HL   
152E   11 00 00               LD   DE,0   
1531   B7                     OR   A   
1532   ED 52                  SBC   HL,DE   
1534   7D                     LD   A,L   
1535   B4                     OR   H   
1536   CA 87 15               JP   Z,expectM_3084S54   
1539   CD CF 0F               CALL   printStr   
153C   43 6F 64 65 3A 20 30 00 .CSTR   "Code: ","0"   
1544   CD CF 0F               CALL   printStr   
1547   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1556   21 00 00               LD   hl,0   
1559   E5                     PUSH   hl   
155A   E5                     PUSH   hl   
155B   CD D6 10               CALL   run   
155E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1565   CD CF 0F               CALL   printStr   
1568   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1575   E1                     POP   hl   
1576   E5                     PUSH   hl   
1577   E5                     PUSH   hl   
1578   CD D6 10               CALL   run   
157B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1586   76                     HALT      
1587                EXPECTM_3084S54:      
1587   E1                     POP   HL   
1588                          ;*Macro unroll:  test "10", 10
1588   31 00 4F               LD   SP,STACK   
158B   CD 03 10               CALL   coldInit   
158E   CD B2 4D               CALL   execStr   
1591   31 30 00               DB   "10",0   
1594   E1                     POP   HL   
1595   E5                     PUSH   HL   
1596   11 0A 00               LD   DE,10   
1599   B7                     OR   A   
159A   ED 52                  SBC   HL,DE   
159C   7D                     LD   A,L   
159D   B4                     OR   H   
159E   CA F0 15               JP   Z,expectM_3085S55   
15A1   CD CF 0F               CALL   printStr   
15A4   43 6F 64 65 3A 20 31 30 00 .CSTR   "Code: ","10"   
15AD   CD CF 0F               CALL   printStr   
15B0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
15BF   21 0A 00               LD   hl,10   
15C2   E5                     PUSH   hl   
15C3   E5                     PUSH   hl   
15C4   CD D6 10               CALL   run   
15C7   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
15CE   CD CF 0F               CALL   printStr   
15D1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
15DE   E1                     POP   hl   
15DF   E5                     PUSH   hl   
15E0   E5                     PUSH   hl   
15E1   CD D6 10               CALL   run   
15E4   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
15EF   76                     HALT      
15F0                EXPECTM_3085S55:      
15F0   E1                     POP   HL   
15F1                          ;*Macro unroll:  test "123", 123
15F1   31 00 4F               LD   SP,STACK   
15F4   CD 03 10               CALL   coldInit   
15F7   CD B2 4D               CALL   execStr   
15FA   31 32 33 00            DB   "123",0   
15FE   E1                     POP   HL   
15FF   E5                     PUSH   HL   
1600   11 7B 00               LD   DE,123   
1603   B7                     OR   A   
1604   ED 52                  SBC   HL,DE   
1606   7D                     LD   A,L   
1607   B4                     OR   H   
1608   CA 5B 16               JP   Z,expectM_3086S56   
160B   CD CF 0F               CALL   printStr   
160E   43 6F 64 65 3A 20 31 32 33 00 .CSTR   "Code: ","123"   
1618   CD CF 0F               CALL   printStr   
161B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
162A   21 7B 00               LD   hl,123   
162D   E5                     PUSH   hl   
162E   E5                     PUSH   hl   
162F   CD D6 10               CALL   run   
1632   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1639   CD CF 0F               CALL   printStr   
163C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1649   E1                     POP   hl   
164A   E5                     PUSH   hl   
164B   E5                     PUSH   hl   
164C   CD D6 10               CALL   run   
164F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
165A   76                     HALT      
165B                EXPECTM_3086S56:      
165B   E1                     POP   HL   
165C                          ;*Macro unroll:  test "-1",-1
165C   31 00 4F               LD   SP,STACK   
165F   CD 03 10               CALL   coldInit   
1662   CD B2 4D               CALL   execStr   
1665   2D 31 00               DB   "-1",0   
1668   E1                     POP   HL   
1669   E5                     PUSH   HL   
166A   11 FF FF               LD   DE,-1   
166D   B7                     OR   A   
166E   ED 52                  SBC   HL,DE   
1670   7D                     LD   A,L   
1671   B4                     OR   H   
1672   CA C4 16               JP   Z,expectM_3087S57   
1675   CD CF 0F               CALL   printStr   
1678   43 6F 64 65 3A 20 2D 31 00 .CSTR   "Code: ","-1"   
1681   CD CF 0F               CALL   printStr   
1684   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1693   21 FF FF               LD   hl,-1   
1696   E5                     PUSH   hl   
1697   E5                     PUSH   hl   
1698   CD D6 10               CALL   run   
169B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
16A2   CD CF 0F               CALL   printStr   
16A5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
16B2   E1                     POP   hl   
16B3   E5                     PUSH   hl   
16B4   E5                     PUSH   hl   
16B5   CD D6 10               CALL   run   
16B8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
16C3   76                     HALT      
16C4                EXPECTM_3087S57:      
16C4   E1                     POP   HL   
16C5                          ;*Macro unroll:  test "-1/ab",1
16C5   31 00 4F               LD   SP,STACK   
16C8   CD 03 10               CALL   coldInit   
16CB   CD B2 4D               CALL   execStr   
16CE   2D 31 2F 61 62 00      DB   "-1/ab",0   
16D4   E1                     POP   HL   
16D5   E5                     PUSH   HL   
16D6   11 01 00               LD   DE,1   
16D9   B7                     OR   A   
16DA   ED 52                  SBC   HL,DE   
16DC   7D                     LD   A,L   
16DD   B4                     OR   H   
16DE   CA 33 17               JP   Z,expectM_3088S58   
16E1   CD CF 0F               CALL   printStr   
16E4   43 6F 64 65 3A 20 2D 31 2F 61 62 00 .CSTR   "Code: ","-1/ab"   
16F0   CD CF 0F               CALL   printStr   
16F3   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1702   21 01 00               LD   hl,1   
1705   E5                     PUSH   hl   
1706   E5                     PUSH   hl   
1707   CD D6 10               CALL   run   
170A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1711   CD CF 0F               CALL   printStr   
1714   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1721   E1                     POP   hl   
1722   E5                     PUSH   hl   
1723   E5                     PUSH   hl   
1724   CD D6 10               CALL   run   
1727   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1732   76                     HALT      
1733                EXPECTM_3088S58:      
1733   E1                     POP   HL   
1734                          ;*Macro unroll:  test "_a", $61
1734   31 00 4F               LD   SP,STACK   
1737   CD 03 10               CALL   coldInit   
173A   CD B2 4D               CALL   execStr   
173D   5F 61 00               DB   "_a",0   
1740   E1                     POP   HL   
1741   E5                     PUSH   HL   
1742   11 61 00               LD   DE,$61   
1745   B7                     OR   A   
1746   ED 52                  SBC   HL,DE   
1748   7D                     LD   A,L   
1749   B4                     OR   H   
174A   CA 9C 17               JP   Z,expectM_3089S59   
174D   CD CF 0F               CALL   printStr   
1750   43 6F 64 65 3A 20 5F 61 00 .CSTR   "Code: ","_a"   
1759   CD CF 0F               CALL   printStr   
175C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
176B   21 61 00               LD   hl,$61   
176E   E5                     PUSH   hl   
176F   E5                     PUSH   hl   
1770   CD D6 10               CALL   run   
1773   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
177A   CD CF 0F               CALL   printStr   
177D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
178A   E1                     POP   hl   
178B   E5                     PUSH   hl   
178C   E5                     PUSH   hl   
178D   CD D6 10               CALL   run   
1790   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
179B   76                     HALT      
179C                EXPECTM_3089S59:      
179C   E1                     POP   HL   
179D                          ;*Macro unroll:  test "__", $5F
179D   31 00 4F               LD   SP,STACK   
17A0   CD 03 10               CALL   coldInit   
17A3   CD B2 4D               CALL   execStr   
17A6   5F 5F 00               DB   "__",0   
17A9   E1                     POP   HL   
17AA   E5                     PUSH   HL   
17AB   11 5F 00               LD   DE,$5F   
17AE   B7                     OR   A   
17AF   ED 52                  SBC   HL,DE   
17B1   7D                     LD   A,L   
17B2   B4                     OR   H   
17B3   CA 05 18               JP   Z,expectM_3090S60   
17B6   CD CF 0F               CALL   printStr   
17B9   43 6F 64 65 3A 20 5F 5F 00 .CSTR   "Code: ","__"   
17C2   CD CF 0F               CALL   printStr   
17C5   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
17D4   21 5F 00               LD   hl,$5F   
17D7   E5                     PUSH   hl   
17D8   E5                     PUSH   hl   
17D9   CD D6 10               CALL   run   
17DC   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
17E3   CD CF 0F               CALL   printStr   
17E6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
17F3   E1                     POP   hl   
17F4   E5                     PUSH   hl   
17F5   E5                     PUSH   hl   
17F6   CD D6 10               CALL   run   
17F9   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1804   76                     HALT      
1805                EXPECTM_3090S60:      
1805   E1                     POP   HL   
1806                          ;*Macro unroll:  test "$10", $10
1806   31 00 4F               LD   SP,STACK   
1809   CD 03 10               CALL   coldInit   
180C   CD B2 4D               CALL   execStr   
180F   24 31 30 00            DB   "$10",0   
1813   E1                     POP   HL   
1814   E5                     PUSH   HL   
1815   11 10 00               LD   DE,$10   
1818   B7                     OR   A   
1819   ED 52                  SBC   HL,DE   
181B   7D                     LD   A,L   
181C   B4                     OR   H   
181D   CA 70 18               JP   Z,expectM_3091S61   
1820   CD CF 0F               CALL   printStr   
1823   43 6F 64 65 3A 20 24 31 30 00 .CSTR   "Code: ","$10"   
182D   CD CF 0F               CALL   printStr   
1830   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
183F   21 10 00               LD   hl,$10   
1842   E5                     PUSH   hl   
1843   E5                     PUSH   hl   
1844   CD D6 10               CALL   run   
1847   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
184E   CD CF 0F               CALL   printStr   
1851   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
185E   E1                     POP   hl   
185F   E5                     PUSH   hl   
1860   E5                     PUSH   hl   
1861   CD D6 10               CALL   run   
1864   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
186F   76                     HALT      
1870                EXPECTM_3091S61:      
1870   E1                     POP   HL   
1871                          ;*Macro unroll:  test "$FF", $FF
1871   31 00 4F               LD   SP,STACK   
1874   CD 03 10               CALL   coldInit   
1877   CD B2 4D               CALL   execStr   
187A   24 46 46 00            DB   "$FF",0   
187E   E1                     POP   HL   
187F   E5                     PUSH   HL   
1880   11 FF 00               LD   DE,$FF   
1883   B7                     OR   A   
1884   ED 52                  SBC   HL,DE   
1886   7D                     LD   A,L   
1887   B4                     OR   H   
1888   CA DB 18               JP   Z,expectM_3092S62   
188B   CD CF 0F               CALL   printStr   
188E   43 6F 64 65 3A 20 24 46 46 00 .CSTR   "Code: ","$FF"   
1898   CD CF 0F               CALL   printStr   
189B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
18AA   21 FF 00               LD   hl,$FF   
18AD   E5                     PUSH   hl   
18AE   E5                     PUSH   hl   
18AF   CD D6 10               CALL   run   
18B2   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
18B9   CD CF 0F               CALL   printStr   
18BC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
18C9   E1                     POP   hl   
18CA   E5                     PUSH   hl   
18CB   E5                     PUSH   hl   
18CC   CD D6 10               CALL   run   
18CF   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
18DA   76                     HALT      
18DB                EXPECTM_3092S62:      
18DB   E1                     POP   HL   
18DC                          ;*Macro unroll:  test "-1 2 +",1
18DC   31 00 4F               LD   SP,STACK   
18DF   CD 03 10               CALL   coldInit   
18E2   CD B2 4D               CALL   execStr   
18E5   2D 31 20 32 20 2B 00   DB   "-1 2 +",0   
18EC   E1                     POP   HL   
18ED   E5                     PUSH   HL   
18EE   11 01 00               LD   DE,1   
18F1   B7                     OR   A   
18F2   ED 52                  SBC   HL,DE   
18F4   7D                     LD   A,L   
18F5   B4                     OR   H   
18F6   CA 4C 19               JP   Z,expectM_3093S63   
18F9   CD CF 0F               CALL   printStr   
18FC   43 6F 64 65 3A 20 2D 31 20 32 20 2B 00 .CSTR   "Code: ","-1 2 +"   
1909   CD CF 0F               CALL   printStr   
190C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
191B   21 01 00               LD   hl,1   
191E   E5                     PUSH   hl   
191F   E5                     PUSH   hl   
1920   CD D6 10               CALL   run   
1923   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
192A   CD CF 0F               CALL   printStr   
192D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
193A   E1                     POP   hl   
193B   E5                     PUSH   hl   
193C   E5                     PUSH   hl   
193D   CD D6 10               CALL   run   
1940   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
194B   76                     HALT      
194C                EXPECTM_3093S63:      
194C   E1                     POP   HL   
194D                          ;*Macro unroll:  test "-1 1 +",0
194D   31 00 4F               LD   SP,STACK   
1950   CD 03 10               CALL   coldInit   
1953   CD B2 4D               CALL   execStr   
1956   2D 31 20 31 20 2B 00   DB   "-1 1 +",0   
195D   E1                     POP   HL   
195E   E5                     PUSH   HL   
195F   11 00 00               LD   DE,0   
1962   B7                     OR   A   
1963   ED 52                  SBC   HL,DE   
1965   7D                     LD   A,L   
1966   B4                     OR   H   
1967   CA BD 19               JP   Z,expectM_3094S64   
196A   CD CF 0F               CALL   printStr   
196D   43 6F 64 65 3A 20 2D 31 20 31 20 2B 00 .CSTR   "Code: ","-1 1 +"   
197A   CD CF 0F               CALL   printStr   
197D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
198C   21 00 00               LD   hl,0   
198F   E5                     PUSH   hl   
1990   E5                     PUSH   hl   
1991   CD D6 10               CALL   run   
1994   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
199B   CD CF 0F               CALL   printStr   
199E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
19AB   E1                     POP   hl   
19AC   E5                     PUSH   hl   
19AD   E5                     PUSH   hl   
19AE   CD D6 10               CALL   run   
19B1   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
19BC   76                     HALT      
19BD                EXPECTM_3094S64:      
19BD   E1                     POP   HL   
19BE                          ;*Macro unroll:  test "1 2 +", 3
19BE   31 00 4F               LD   SP,STACK   
19C1   CD 03 10               CALL   coldInit   
19C4   CD B2 4D               CALL   execStr   
19C7   31 20 32 20 2B 00      DB   "1 2 +",0   
19CD   E1                     POP   HL   
19CE   E5                     PUSH   HL   
19CF   11 03 00               LD   DE,3   
19D2   B7                     OR   A   
19D3   ED 52                  SBC   HL,DE   
19D5   7D                     LD   A,L   
19D6   B4                     OR   H   
19D7   CA 2C 1A               JP   Z,expectM_3095S65   
19DA   CD CF 0F               CALL   printStr   
19DD   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
19E9   CD CF 0F               CALL   printStr   
19EC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
19FB   21 03 00               LD   hl,3   
19FE   E5                     PUSH   hl   
19FF   E5                     PUSH   hl   
1A00   CD D6 10               CALL   run   
1A03   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1A0A   CD CF 0F               CALL   printStr   
1A0D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A1A   E1                     POP   hl   
1A1B   E5                     PUSH   hl   
1A1C   E5                     PUSH   hl   
1A1D   CD D6 10               CALL   run   
1A20   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1A2B   76                     HALT      
1A2C                EXPECTM_3095S65:      
1A2C   E1                     POP   HL   
1A2D                          ;*Macro unroll:  test "4 1 2 +", 3
1A2D   31 00 4F               LD   SP,STACK   
1A30   CD 03 10               CALL   coldInit   
1A33   CD B2 4D               CALL   execStr   
1A36   34 20 31 20 32 20 2B 00 DB   "4 1 2 +",0   
1A3E   E1                     POP   HL   
1A3F   E5                     PUSH   HL   
1A40   11 03 00               LD   DE,3   
1A43   B7                     OR   A   
1A44   ED 52                  SBC   HL,DE   
1A46   7D                     LD   A,L   
1A47   B4                     OR   H   
1A48   CA 9F 1A               JP   Z,expectM_3096S66   
1A4B   CD CF 0F               CALL   printStr   
1A4E   43 6F 64 65 3A 20 34 20 31 20 32 20 2B 00 .CSTR   "Code: ","4 1 2 +"   
1A5C   CD CF 0F               CALL   printStr   
1A5F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1A6E   21 03 00               LD   hl,3   
1A71   E5                     PUSH   hl   
1A72   E5                     PUSH   hl   
1A73   CD D6 10               CALL   run   
1A76   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1A7D   CD CF 0F               CALL   printStr   
1A80   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1A8D   E1                     POP   hl   
1A8E   E5                     PUSH   hl   
1A8F   E5                     PUSH   hl   
1A90   CD D6 10               CALL   run   
1A93   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1A9E   76                     HALT      
1A9F                EXPECTM_3096S66:      
1A9F   E1                     POP   HL   
1AA0                          ;*Macro unroll:  test "123 456 +", 123+456
1AA0   31 00 4F               LD   SP,STACK   
1AA3   CD 03 10               CALL   coldInit   
1AA6   CD B2 4D               CALL   execStr   
1AA9   31 32 33 20 34 35 36 20 2B 00 DB   "123 456 +",0   
1AB3   E1                     POP   HL   
1AB4   E5                     PUSH   HL   
1AB5   11 43 02               LD   DE,123+456   
1AB8   B7                     OR   A   
1AB9   ED 52                  SBC   HL,DE   
1ABB   7D                     LD   A,L   
1ABC   B4                     OR   H   
1ABD   CA 16 1B               JP   Z,expectM_3097S67   
1AC0   CD CF 0F               CALL   printStr   
1AC3   43 6F 64 65 3A 20 31 32 33 20 34 35 36 20 2B 00 .CSTR   "Code: ","123 456 +"   
1AD3   CD CF 0F               CALL   printStr   
1AD6   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1AE5   21 43 02               LD   hl,123+456   
1AE8   E5                     PUSH   hl   
1AE9   E5                     PUSH   hl   
1AEA   CD D6 10               CALL   run   
1AED   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1AF4   CD CF 0F               CALL   printStr   
1AF7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B04   E1                     POP   hl   
1B05   E5                     PUSH   hl   
1B06   E5                     PUSH   hl   
1B07   CD D6 10               CALL   run   
1B0A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1B15   76                     HALT      
1B16                EXPECTM_3097S67:      
1B16   E1                     POP   HL   
1B17                          ;*Macro unroll:  test "64 128 +", 64+128
1B17   31 00 4F               LD   SP,STACK   
1B1A   CD 03 10               CALL   coldInit   
1B1D   CD B2 4D               CALL   execStr   
1B20   36 34 20 31 32 38 20 2B 00 DB   "64 128 +",0   
1B29   E1                     POP   HL   
1B2A   E5                     PUSH   HL   
1B2B   11 C0 00               LD   DE,64+128   
1B2E   B7                     OR   A   
1B2F   ED 52                  SBC   HL,DE   
1B31   7D                     LD   A,L   
1B32   B4                     OR   H   
1B33   CA 8B 1B               JP   Z,expectM_3098S68   
1B36   CD CF 0F               CALL   printStr   
1B39   43 6F 64 65 3A 20 36 34 20 31 32 38 20 2B 00 .CSTR   "Code: ","64 128 +"   
1B48   CD CF 0F               CALL   printStr   
1B4B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1B5A   21 C0 00               LD   hl,64+128   
1B5D   E5                     PUSH   hl   
1B5E   E5                     PUSH   hl   
1B5F   CD D6 10               CALL   run   
1B62   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1B69   CD CF 0F               CALL   printStr   
1B6C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1B79   E1                     POP   hl   
1B7A   E5                     PUSH   hl   
1B7B   E5                     PUSH   hl   
1B7C   CD D6 10               CALL   run   
1B7F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1B8A   76                     HALT      
1B8B                EXPECTM_3098S68:      
1B8B   E1                     POP   HL   
1B8C                          ;*Macro unroll:  test "1 2 +", 3
1B8C   31 00 4F               LD   SP,STACK   
1B8F   CD 03 10               CALL   coldInit   
1B92   CD B2 4D               CALL   execStr   
1B95   31 20 32 20 2B 00      DB   "1 2 +",0   
1B9B   E1                     POP   HL   
1B9C   E5                     PUSH   HL   
1B9D   11 03 00               LD   DE,3   
1BA0   B7                     OR   A   
1BA1   ED 52                  SBC   HL,DE   
1BA3   7D                     LD   A,L   
1BA4   B4                     OR   H   
1BA5   CA FA 1B               JP   Z,expectM_3099S69   
1BA8   CD CF 0F               CALL   printStr   
1BAB   43 6F 64 65 3A 20 31 20 32 20 2B 00 .CSTR   "Code: ","1 2 +"   
1BB7   CD CF 0F               CALL   printStr   
1BBA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1BC9   21 03 00               LD   hl,3   
1BCC   E5                     PUSH   hl   
1BCD   E5                     PUSH   hl   
1BCE   CD D6 10               CALL   run   
1BD1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1BD8   CD CF 0F               CALL   printStr   
1BDB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1BE8   E1                     POP   hl   
1BE9   E5                     PUSH   hl   
1BEA   E5                     PUSH   hl   
1BEB   CD D6 10               CALL   run   
1BEE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1BF9   76                     HALT      
1BFA                EXPECTM_3099S69:      
1BFA   E1                     POP   HL   
1BFB                          ;*Macro unroll:  test "1a= a++ a",2
1BFB   31 00 4F               LD   SP,STACK   
1BFE   CD 03 10               CALL   coldInit   
1C01   CD B2 4D               CALL   execStr   
1C04   31 61 3D 20 61 2B 2B 20 61 00 DB   "1a= a++ a",0   
1C0E   E1                     POP   HL   
1C0F   E5                     PUSH   HL   
1C10   11 02 00               LD   DE,2   
1C13   B7                     OR   A   
1C14   ED 52                  SBC   HL,DE   
1C16   7D                     LD   A,L   
1C17   B4                     OR   H   
1C18   CA 71 1C               JP   Z,expectM_3100S70   
1C1B   CD CF 0F               CALL   printStr   
1C1E   43 6F 64 65 3A 20 31 61 3D 20 61 2B 2B 20 61 00 .CSTR   "Code: ","1a= a++ a"   
1C2E   CD CF 0F               CALL   printStr   
1C31   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1C40   21 02 00               LD   hl,2   
1C43   E5                     PUSH   hl   
1C44   E5                     PUSH   hl   
1C45   CD D6 10               CALL   run   
1C48   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1C4F   CD CF 0F               CALL   printStr   
1C52   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1C5F   E1                     POP   hl   
1C60   E5                     PUSH   hl   
1C61   E5                     PUSH   hl   
1C62   CD D6 10               CALL   run   
1C65   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1C70   76                     HALT      
1C71                EXPECTM_3100S70:      
1C71   E1                     POP   HL   
1C72                          ;*Macro unroll:  test "-1 -1 -",0
1C72   31 00 4F               LD   SP,STACK   
1C75   CD 03 10               CALL   coldInit   
1C78   CD B2 4D               CALL   execStr   
1C7B   2D 31 20 2D 31 20 2D 00 DB   "-1 -1 -",0   
1C83   E1                     POP   HL   
1C84   E5                     PUSH   HL   
1C85   11 00 00               LD   DE,0   
1C88   B7                     OR   A   
1C89   ED 52                  SBC   HL,DE   
1C8B   7D                     LD   A,L   
1C8C   B4                     OR   H   
1C8D   CA E4 1C               JP   Z,expectM_3101S71   
1C90   CD CF 0F               CALL   printStr   
1C93   43 6F 64 65 3A 20 2D 31 20 2D 31 20 2D 00 .CSTR   "Code: ","-1 -1 -"   
1CA1   CD CF 0F               CALL   printStr   
1CA4   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1CB3   21 00 00               LD   hl,0   
1CB6   E5                     PUSH   hl   
1CB7   E5                     PUSH   hl   
1CB8   CD D6 10               CALL   run   
1CBB   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1CC2   CD CF 0F               CALL   printStr   
1CC5   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1CD2   E1                     POP   hl   
1CD3   E5                     PUSH   hl   
1CD4   E5                     PUSH   hl   
1CD5   CD D6 10               CALL   run   
1CD8   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1CE3   76                     HALT      
1CE4                EXPECTM_3101S71:      
1CE4   E1                     POP   HL   
1CE5                          ;*Macro unroll:  test "5 3 -", 2
1CE5   31 00 4F               LD   SP,STACK   
1CE8   CD 03 10               CALL   coldInit   
1CEB   CD B2 4D               CALL   execStr   
1CEE   35 20 33 20 2D 00      DB   "5 3 -",0   
1CF4   E1                     POP   HL   
1CF5   E5                     PUSH   HL   
1CF6   11 02 00               LD   DE,2   
1CF9   B7                     OR   A   
1CFA   ED 52                  SBC   HL,DE   
1CFC   7D                     LD   A,L   
1CFD   B4                     OR   H   
1CFE   CA 53 1D               JP   Z,expectM_3102S72   
1D01   CD CF 0F               CALL   printStr   
1D04   43 6F 64 65 3A 20 35 20 33 20 2D 00 .CSTR   "Code: ","5 3 -"   
1D10   CD CF 0F               CALL   printStr   
1D13   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D22   21 02 00               LD   hl,2   
1D25   E5                     PUSH   hl   
1D26   E5                     PUSH   hl   
1D27   CD D6 10               CALL   run   
1D2A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1D31   CD CF 0F               CALL   printStr   
1D34   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1D41   E1                     POP   hl   
1D42   E5                     PUSH   hl   
1D43   E5                     PUSH   hl   
1D44   CD D6 10               CALL   run   
1D47   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1D52   76                     HALT      
1D53                EXPECTM_3102S72:      
1D53   E1                     POP   HL   
1D54                          ;*Macro unroll:  test "2 1 -",1
1D54   31 00 4F               LD   SP,STACK   
1D57   CD 03 10               CALL   coldInit   
1D5A   CD B2 4D               CALL   execStr   
1D5D   32 20 31 20 2D 00      DB   "2 1 -",0   
1D63   E1                     POP   HL   
1D64   E5                     PUSH   HL   
1D65   11 01 00               LD   DE,1   
1D68   B7                     OR   A   
1D69   ED 52                  SBC   HL,DE   
1D6B   7D                     LD   A,L   
1D6C   B4                     OR   H   
1D6D   CA C2 1D               JP   Z,expectM_3103S73   
1D70   CD CF 0F               CALL   printStr   
1D73   43 6F 64 65 3A 20 32 20 31 20 2D 00 .CSTR   "Code: ","2 1 -"   
1D7F   CD CF 0F               CALL   printStr   
1D82   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1D91   21 01 00               LD   hl,1   
1D94   E5                     PUSH   hl   
1D95   E5                     PUSH   hl   
1D96   CD D6 10               CALL   run   
1D99   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1DA0   CD CF 0F               CALL   printStr   
1DA3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1DB0   E1                     POP   hl   
1DB1   E5                     PUSH   hl   
1DB2   E5                     PUSH   hl   
1DB3   CD D6 10               CALL   run   
1DB6   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1DC1   76                     HALT      
1DC2                EXPECTM_3103S73:      
1DC2   E1                     POP   HL   
1DC3                          ;*Macro unroll:  test "3a= a-- a",2
1DC3   31 00 4F               LD   SP,STACK   
1DC6   CD 03 10               CALL   coldInit   
1DC9   CD B2 4D               CALL   execStr   
1DCC   33 61 3D 20 61 2D 2D 20 61 00 DB   "3a= a-- a",0   
1DD6   E1                     POP   HL   
1DD7   E5                     PUSH   HL   
1DD8   11 02 00               LD   DE,2   
1DDB   B7                     OR   A   
1DDC   ED 52                  SBC   HL,DE   
1DDE   7D                     LD   A,L   
1DDF   B4                     OR   H   
1DE0   CA 39 1E               JP   Z,expectM_3104S74   
1DE3   CD CF 0F               CALL   printStr   
1DE6   43 6F 64 65 3A 20 33 61 3D 20 61 2D 2D 20 61 00 .CSTR   "Code: ","3a= a-- a"   
1DF6   CD CF 0F               CALL   printStr   
1DF9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E08   21 02 00               LD   hl,2   
1E0B   E5                     PUSH   hl   
1E0C   E5                     PUSH   hl   
1E0D   CD D6 10               CALL   run   
1E10   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1E17   CD CF 0F               CALL   printStr   
1E1A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E27   E1                     POP   hl   
1E28   E5                     PUSH   hl   
1E29   E5                     PUSH   hl   
1E2A   CD D6 10               CALL   run   
1E2D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1E38   76                     HALT      
1E39                EXPECTM_3104S74:      
1E39   E1                     POP   HL   
1E3A                          ;*Macro unroll:  test "3 5 &", 1
1E3A   31 00 4F               LD   SP,STACK   
1E3D   CD 03 10               CALL   coldInit   
1E40   CD B2 4D               CALL   execStr   
1E43   33 20 35 20 26 00      DB   "3 5 &",0   
1E49   E1                     POP   HL   
1E4A   E5                     PUSH   HL   
1E4B   11 01 00               LD   DE,1   
1E4E   B7                     OR   A   
1E4F   ED 52                  SBC   HL,DE   
1E51   7D                     LD   A,L   
1E52   B4                     OR   H   
1E53   CA A8 1E               JP   Z,expectM_3105S75   
1E56   CD CF 0F               CALL   printStr   
1E59   43 6F 64 65 3A 20 33 20 35 20 26 00 .CSTR   "Code: ","3 5 &"   
1E65   CD CF 0F               CALL   printStr   
1E68   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1E77   21 01 00               LD   hl,1   
1E7A   E5                     PUSH   hl   
1E7B   E5                     PUSH   hl   
1E7C   CD D6 10               CALL   run   
1E7F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1E86   CD CF 0F               CALL   printStr   
1E89   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1E96   E1                     POP   hl   
1E97   E5                     PUSH   hl   
1E98   E5                     PUSH   hl   
1E99   CD D6 10               CALL   run   
1E9C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1EA7   76                     HALT      
1EA8                EXPECTM_3105S75:      
1EA8   E1                     POP   HL   
1EA9                          ;*Macro unroll:  test "3 5 |", 7
1EA9   31 00 4F               LD   SP,STACK   
1EAC   CD 03 10               CALL   coldInit   
1EAF   CD B2 4D               CALL   execStr   
1EB2   33 20 35 20 7C 00      DB   "3 5 |",0   
1EB8   E1                     POP   HL   
1EB9   E5                     PUSH   HL   
1EBA   11 07 00               LD   DE,7   
1EBD   B7                     OR   A   
1EBE   ED 52                  SBC   HL,DE   
1EC0   7D                     LD   A,L   
1EC1   B4                     OR   H   
1EC2   CA 17 1F               JP   Z,expectM_3106S76   
1EC5   CD CF 0F               CALL   printStr   
1EC8   43 6F 64 65 3A 20 33 20 35 20 7C 00 .CSTR   "Code: ","3 5 |"   
1ED4   CD CF 0F               CALL   printStr   
1ED7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1EE6   21 07 00               LD   hl,7   
1EE9   E5                     PUSH   hl   
1EEA   E5                     PUSH   hl   
1EEB   CD D6 10               CALL   run   
1EEE   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1EF5   CD CF 0F               CALL   printStr   
1EF8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F05   E1                     POP   hl   
1F06   E5                     PUSH   hl   
1F07   E5                     PUSH   hl   
1F08   CD D6 10               CALL   run   
1F0B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1F16   76                     HALT      
1F17                EXPECTM_3106S76:      
1F17   E1                     POP   HL   
1F18                          ;*Macro unroll:  test "3 5 /x", 6
1F18   31 00 4F               LD   SP,STACK   
1F1B   CD 03 10               CALL   coldInit   
1F1E   CD B2 4D               CALL   execStr   
1F21   33 20 35 20 2F 78 00   DB   "3 5 /x",0   
1F28   E1                     POP   HL   
1F29   E5                     PUSH   HL   
1F2A   11 06 00               LD   DE,6   
1F2D   B7                     OR   A   
1F2E   ED 52                  SBC   HL,DE   
1F30   7D                     LD   A,L   
1F31   B4                     OR   H   
1F32   CA 88 1F               JP   Z,expectM_3107S77   
1F35   CD CF 0F               CALL   printStr   
1F38   43 6F 64 65 3A 20 33 20 35 20 2F 78 00 .CSTR   "Code: ","3 5 /x"   
1F45   CD CF 0F               CALL   printStr   
1F48   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1F57   21 06 00               LD   hl,6   
1F5A   E5                     PUSH   hl   
1F5B   E5                     PUSH   hl   
1F5C   CD D6 10               CALL   run   
1F5F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1F66   CD CF 0F               CALL   printStr   
1F69   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1F76   E1                     POP   hl   
1F77   E5                     PUSH   hl   
1F78   E5                     PUSH   hl   
1F79   CD D6 10               CALL   run   
1F7C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
1F87   76                     HALT      
1F88                EXPECTM_3107S77:      
1F88   E1                     POP   HL   
1F89                          ;*Macro unroll:  test "3a= 5 a/x a= a",6
1F89   31 00 4F               LD   SP,STACK   
1F8C   CD 03 10               CALL   coldInit   
1F8F   CD B2 4D               CALL   execStr   
1F92   33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 DB   "3a= 5 a/x a= a",0   
1FA1   E1                     POP   HL   
1FA2   E5                     PUSH   HL   
1FA3   11 06 00               LD   DE,6   
1FA6   B7                     OR   A   
1FA7   ED 52                  SBC   HL,DE   
1FA9   7D                     LD   A,L   
1FAA   B4                     OR   H   
1FAB   CA 09 20               JP   Z,expectM_3108S78   
1FAE   CD CF 0F               CALL   printStr   
1FB1   43 6F 64 65 3A 20 33 61 3D 20 35 20 61 2F 78 20 61 3D 20 61 00 .CSTR   "Code: ","3a= 5 a/x a= a"   
1FC6   CD CF 0F               CALL   printStr   
1FC9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
1FD8   21 06 00               LD   hl,6   
1FDB   E5                     PUSH   hl   
1FDC   E5                     PUSH   hl   
1FDD   CD D6 10               CALL   run   
1FE0   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
1FE7   CD CF 0F               CALL   printStr   
1FEA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
1FF7   E1                     POP   hl   
1FF8   E5                     PUSH   hl   
1FF9   E5                     PUSH   hl   
1FFA   CD D6 10               CALL   run   
1FFD   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2008   76                     HALT      
2009                EXPECTM_3108S78:      
2009   E1                     POP   HL   
200A                          ;*Macro unroll:  test "2 3 *", 6
200A   31 00 4F               LD   SP,STACK   
200D   CD 03 10               CALL   coldInit   
2010   CD B2 4D               CALL   execStr   
2013   32 20 33 20 2A 00      DB   "2 3 *",0   
2019   E1                     POP   HL   
201A   E5                     PUSH   HL   
201B   11 06 00               LD   DE,6   
201E   B7                     OR   A   
201F   ED 52                  SBC   HL,DE   
2021   7D                     LD   A,L   
2022   B4                     OR   H   
2023   CA 78 20               JP   Z,expectM_3109S79   
2026   CD CF 0F               CALL   printStr   
2029   43 6F 64 65 3A 20 32 20 33 20 2A 00 .CSTR   "Code: ","2 3 *"   
2035   CD CF 0F               CALL   printStr   
2038   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2047   21 06 00               LD   hl,6   
204A   E5                     PUSH   hl   
204B   E5                     PUSH   hl   
204C   CD D6 10               CALL   run   
204F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2056   CD CF 0F               CALL   printStr   
2059   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2066   E1                     POP   hl   
2067   E5                     PUSH   hl   
2068   E5                     PUSH   hl   
2069   CD D6 10               CALL   run   
206C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2077   76                     HALT      
2078                EXPECTM_3109S79:      
2078   E1                     POP   HL   
2079                          ;*Macro unroll:  test "1 2 3 + *", 5
2079   31 00 4F               LD   SP,STACK   
207C   CD 03 10               CALL   coldInit   
207F   CD B2 4D               CALL   execStr   
2082   31 20 32 20 33 20 2B 20 2A 00 DB   "1 2 3 + *",0   
208C   E1                     POP   HL   
208D   E5                     PUSH   HL   
208E   11 05 00               LD   DE,5   
2091   B7                     OR   A   
2092   ED 52                  SBC   HL,DE   
2094   7D                     LD   A,L   
2095   B4                     OR   H   
2096   CA EF 20               JP   Z,expectM_3110S80   
2099   CD CF 0F               CALL   printStr   
209C   43 6F 64 65 3A 20 31 20 32 20 33 20 2B 20 2A 00 .CSTR   "Code: ","1 2 3 + *"   
20AC   CD CF 0F               CALL   printStr   
20AF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
20BE   21 05 00               LD   hl,5   
20C1   E5                     PUSH   hl   
20C2   E5                     PUSH   hl   
20C3   CD D6 10               CALL   run   
20C6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
20CD   CD CF 0F               CALL   printStr   
20D0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
20DD   E1                     POP   hl   
20DE   E5                     PUSH   hl   
20DF   E5                     PUSH   hl   
20E0   CD D6 10               CALL   run   
20E3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
20EE   76                     HALT      
20EF                EXPECTM_3110S80:      
20EF   E1                     POP   HL   
20F0                          ;*Macro unroll:  test "7 3 /", 2
20F0   31 00 4F               LD   SP,STACK   
20F3   CD 03 10               CALL   coldInit   
20F6   CD B2 4D               CALL   execStr   
20F9   37 20 33 20 2F 00      DB   "7 3 /",0   
20FF   E1                     POP   HL   
2100   E5                     PUSH   HL   
2101   11 02 00               LD   DE,2   
2104   B7                     OR   A   
2105   ED 52                  SBC   HL,DE   
2107   7D                     LD   A,L   
2108   B4                     OR   H   
2109   CA 5E 21               JP   Z,expectM_3111S81   
210C   CD CF 0F               CALL   printStr   
210F   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
211B   CD CF 0F               CALL   printStr   
211E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
212D   21 02 00               LD   hl,2   
2130   E5                     PUSH   hl   
2131   E5                     PUSH   hl   
2132   CD D6 10               CALL   run   
2135   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
213C   CD CF 0F               CALL   printStr   
213F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
214C   E1                     POP   hl   
214D   E5                     PUSH   hl   
214E   E5                     PUSH   hl   
214F   CD D6 10               CALL   run   
2152   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
215D   76                     HALT      
215E                EXPECTM_3111S81:      
215E   E1                     POP   HL   
215F                          ;*Macro unroll:  test "100a= 1a+= a", 101
215F   31 00 4F               LD   SP,STACK   
2162   CD 03 10               CALL   coldInit   
2165   CD B2 4D               CALL   execStr   
2168   31 30 30 61 3D 20 31 61 2B 3D 20 61 00 DB   "100a= 1a+= a",0   
2175   E1                     POP   HL   
2176   E5                     PUSH   HL   
2177   11 65 00               LD   DE,101   
217A   B7                     OR   A   
217B   ED 52                  SBC   HL,DE   
217D   7D                     LD   A,L   
217E   B4                     OR   H   
217F   CA DB 21               JP   Z,expectM_3112S82   
2182   CD CF 0F               CALL   printStr   
2185   43 6F 64 65 3A 20 31 30 30 61 3D 20 31 61 2B 3D 20 61 00 .CSTR   "Code: ","100a= 1a+= a"   
2198   CD CF 0F               CALL   printStr   
219B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
21AA   21 65 00               LD   hl,101   
21AD   E5                     PUSH   hl   
21AE   E5                     PUSH   hl   
21AF   CD D6 10               CALL   run   
21B2   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
21B9   CD CF 0F               CALL   printStr   
21BC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
21C9   E1                     POP   hl   
21CA   E5                     PUSH   hl   
21CB   E5                     PUSH   hl   
21CC   CD D6 10               CALL   run   
21CF   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
21DA   76                     HALT      
21DB                EXPECTM_3112S82:      
21DB   E1                     POP   HL   
21DC                          ;*Macro unroll:  test "100a= a1-= a", 99
21DC   31 00 4F               LD   SP,STACK   
21DF   CD 03 10               CALL   coldInit   
21E2   CD B2 4D               CALL   execStr   
21E5   31 30 30 61 3D 20 61 31 2D 3D 20 61 00 DB   "100a= a1-= a",0   
21F2   E1                     POP   HL   
21F3   E5                     PUSH   HL   
21F4   11 63 00               LD   DE,99   
21F7   B7                     OR   A   
21F8   ED 52                  SBC   HL,DE   
21FA   7D                     LD   A,L   
21FB   B4                     OR   H   
21FC   CA 58 22               JP   Z,expectM_3113S83   
21FF   CD CF 0F               CALL   printStr   
2202   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 31 2D 3D 20 61 00 .CSTR   "Code: ","100a= a1-= a"   
2215   CD CF 0F               CALL   printStr   
2218   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2227   21 63 00               LD   hl,99   
222A   E5                     PUSH   hl   
222B   E5                     PUSH   hl   
222C   CD D6 10               CALL   run   
222F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2236   CD CF 0F               CALL   printStr   
2239   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2246   E1                     POP   hl   
2247   E5                     PUSH   hl   
2248   E5                     PUSH   hl   
2249   CD D6 10               CALL   run   
224C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2257   76                     HALT      
2258                EXPECTM_3113S83:      
2258   E1                     POP   HL   
2259                          ;*Macro unroll:  test "100a= a2*= a", 200
2259   31 00 4F               LD   SP,STACK   
225C   CD 03 10               CALL   coldInit   
225F   CD B2 4D               CALL   execStr   
2262   31 30 30 61 3D 20 61 32 2A 3D 20 61 00 DB   "100a= a2*= a",0   
226F   E1                     POP   HL   
2270   E5                     PUSH   HL   
2271   11 C8 00               LD   DE,200   
2274   B7                     OR   A   
2275   ED 52                  SBC   HL,DE   
2277   7D                     LD   A,L   
2278   B4                     OR   H   
2279   CA D5 22               JP   Z,expectM_3114S84   
227C   CD CF 0F               CALL   printStr   
227F   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2A 3D 20 61 00 .CSTR   "Code: ","100a= a2*= a"   
2292   CD CF 0F               CALL   printStr   
2295   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
22A4   21 C8 00               LD   hl,200   
22A7   E5                     PUSH   hl   
22A8   E5                     PUSH   hl   
22A9   CD D6 10               CALL   run   
22AC   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
22B3   CD CF 0F               CALL   printStr   
22B6   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
22C3   E1                     POP   hl   
22C4   E5                     PUSH   hl   
22C5   E5                     PUSH   hl   
22C6   CD D6 10               CALL   run   
22C9   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
22D4   76                     HALT      
22D5                EXPECTM_3114S84:      
22D5   E1                     POP   HL   
22D6                          ;*Macro unroll:  test "100a= a2/= a", 50
22D6   31 00 4F               LD   SP,STACK   
22D9   CD 03 10               CALL   coldInit   
22DC   CD B2 4D               CALL   execStr   
22DF   31 30 30 61 3D 20 61 32 2F 3D 20 61 00 DB   "100a= a2/= a",0   
22EC   E1                     POP   HL   
22ED   E5                     PUSH   HL   
22EE   11 32 00               LD   DE,50   
22F1   B7                     OR   A   
22F2   ED 52                  SBC   HL,DE   
22F4   7D                     LD   A,L   
22F5   B4                     OR   H   
22F6   CA 52 23               JP   Z,expectM_3115S85   
22F9   CD CF 0F               CALL   printStr   
22FC   43 6F 64 65 3A 20 31 30 30 61 3D 20 61 32 2F 3D 20 61 00 .CSTR   "Code: ","100a= a2/= a"   
230F   CD CF 0F               CALL   printStr   
2312   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2321   21 32 00               LD   hl,50   
2324   E5                     PUSH   hl   
2325   E5                     PUSH   hl   
2326   CD D6 10               CALL   run   
2329   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2330   CD CF 0F               CALL   printStr   
2333   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2340   E1                     POP   hl   
2341   E5                     PUSH   hl   
2342   E5                     PUSH   hl   
2343   CD D6 10               CALL   run   
2346   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2351   76                     HALT      
2352                EXPECTM_3115S85:      
2352   E1                     POP   HL   
2353                          ;*Macro unroll:  test "$55a= $AAa&= a",0
2353   31 00 4F               LD   SP,STACK   
2356   CD 03 10               CALL   coldInit   
2359   CD B2 4D               CALL   execStr   
235C   24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 DB   "$55a= $AAa&= a",0   
236B   E1                     POP   HL   
236C   E5                     PUSH   HL   
236D   11 00 00               LD   DE,0   
2370   B7                     OR   A   
2371   ED 52                  SBC   HL,DE   
2373   7D                     LD   A,L   
2374   B4                     OR   H   
2375   CA D3 23               JP   Z,expectM_3116S86   
2378   CD CF 0F               CALL   printStr   
237B   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 26 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa&= a"   
2390   CD CF 0F               CALL   printStr   
2393   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
23A2   21 00 00               LD   hl,0   
23A5   E5                     PUSH   hl   
23A6   E5                     PUSH   hl   
23A7   CD D6 10               CALL   run   
23AA   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
23B1   CD CF 0F               CALL   printStr   
23B4   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
23C1   E1                     POP   hl   
23C2   E5                     PUSH   hl   
23C3   E5                     PUSH   hl   
23C4   CD D6 10               CALL   run   
23C7   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
23D2   76                     HALT      
23D3                EXPECTM_3116S86:      
23D3   E1                     POP   HL   
23D4                          ;*Macro unroll:  test "$55a= $AAa|= a",$FF
23D4   31 00 4F               LD   SP,STACK   
23D7   CD 03 10               CALL   coldInit   
23DA   CD B2 4D               CALL   execStr   
23DD   24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 DB   "$55a= $AAa|= a",0   
23EC   E1                     POP   HL   
23ED   E5                     PUSH   HL   
23EE   11 FF 00               LD   DE,$FF   
23F1   B7                     OR   A   
23F2   ED 52                  SBC   HL,DE   
23F4   7D                     LD   A,L   
23F5   B4                     OR   H   
23F6   CA 54 24               JP   Z,expectM_3117S87   
23F9   CD CF 0F               CALL   printStr   
23FC   43 6F 64 65 3A 20 24 35 35 61 3D 20 24 41 41 61 7C 3D 20 61 00 .CSTR   "Code: ","$55a= $AAa|= a"   
2411   CD CF 0F               CALL   printStr   
2414   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2423   21 FF 00               LD   hl,$FF   
2426   E5                     PUSH   hl   
2427   E5                     PUSH   hl   
2428   CD D6 10               CALL   run   
242B   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2432   CD CF 0F               CALL   printStr   
2435   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2442   E1                     POP   hl   
2443   E5                     PUSH   hl   
2444   E5                     PUSH   hl   
2445   CD D6 10               CALL   run   
2448   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2453   76                     HALT      
2454                EXPECTM_3117S87:      
2454   E1                     POP   HL   
2455                          ;*Macro unroll:  test "$A5a= $AAa /x= a",$0F
2455   31 00 4F               LD   SP,STACK   
2458   CD 03 10               CALL   coldInit   
245B   CD B2 4D               CALL   execStr   
245E   24 41 35 61 3D 20 24 41 41 61 20 2F 78 3D 20 61 00 DB   "$A5a= $AAa /x= a",0   
246F   E1                     POP   HL   
2470   E5                     PUSH   HL   
2471   11 0F 00               LD   DE,$0F   
2474   B7                     OR   A   
2475   ED 52                  SBC   HL,DE   
2477   7D                     LD   A,L   
2478   B4                     OR   H   
2479   CA D9 24               JP   Z,expectM_3118S88   
247C   CD CF 0F               CALL   printStr   
247F   43 6F 64 65 3A 20 24 41 35 61 3D 20 24 41 41 61 20 2F 78 3D 20 61 00 .CSTR   "Code: ","$A5a= $AAa /x= a"   
2496   CD CF 0F               CALL   printStr   
2499   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
24A8   21 0F 00               LD   hl,$0F   
24AB   E5                     PUSH   hl   
24AC   E5                     PUSH   hl   
24AD   CD D6 10               CALL   run   
24B0   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
24B7   CD CF 0F               CALL   printStr   
24BA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
24C7   E1                     POP   hl   
24C8   E5                     PUSH   hl   
24C9   E5                     PUSH   hl   
24CA   CD D6 10               CALL   run   
24CD   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
24D8   76                     HALT      
24D9                EXPECTM_3118S88:      
24D9   E1                     POP   HL   
24DA                          ;*Macro unroll:  test "$00AA~",$FF55
24DA   31 00 4F               LD   SP,STACK   
24DD   CD 03 10               CALL   coldInit   
24E0   CD B2 4D               CALL   execStr   
24E3   24 30 30 41 41 7E 00   DB   "$00AA~",0   
24EA   E1                     POP   HL   
24EB   E5                     PUSH   HL   
24EC   11 55 FF               LD   DE,$FF55   
24EF   B7                     OR   A   
24F0   ED 52                  SBC   HL,DE   
24F2   7D                     LD   A,L   
24F3   B4                     OR   H   
24F4   CA 4A 25               JP   Z,expectM_3119S89   
24F7   CD CF 0F               CALL   printStr   
24FA   43 6F 64 65 3A 20 24 30 30 41 41 7E 00 .CSTR   "Code: ","$00AA~"   
2507   CD CF 0F               CALL   printStr   
250A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2519   21 55 FF               LD   hl,$FF55   
251C   E5                     PUSH   hl   
251D   E5                     PUSH   hl   
251E   CD D6 10               CALL   run   
2521   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2528   CD CF 0F               CALL   printStr   
252B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2538   E1                     POP   hl   
2539   E5                     PUSH   hl   
253A   E5                     PUSH   hl   
253B   CD D6 10               CALL   run   
253E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2549   76                     HALT      
254A                EXPECTM_3119S89:      
254A   E1                     POP   HL   
254B                          ;*Macro unroll:  test "$AAAAa= a~= a",$5555
254B   31 00 4F               LD   SP,STACK   
254E   CD 03 10               CALL   coldInit   
2551   CD B2 4D               CALL   execStr   
2554   24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 DB   "$AAAAa= a~= a",0   
2562   E1                     POP   HL   
2563   E5                     PUSH   HL   
2564   11 55 55               LD   DE,$5555   
2567   B7                     OR   A   
2568   ED 52                  SBC   HL,DE   
256A   7D                     LD   A,L   
256B   B4                     OR   H   
256C   CA C9 25               JP   Z,expectM_3120S90   
256F   CD CF 0F               CALL   printStr   
2572   43 6F 64 65 3A 20 24 41 41 41 41 61 3D 20 61 7E 3D 20 61 00 .CSTR   "Code: ","$AAAAa= a~= a"   
2586   CD CF 0F               CALL   printStr   
2589   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2598   21 55 55               LD   hl,$5555   
259B   E5                     PUSH   hl   
259C   E5                     PUSH   hl   
259D   CD D6 10               CALL   run   
25A0   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
25A7   CD CF 0F               CALL   printStr   
25AA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
25B7   E1                     POP   hl   
25B8   E5                     PUSH   hl   
25B9   E5                     PUSH   hl   
25BA   CD D6 10               CALL   run   
25BD   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
25C8   76                     HALT      
25C9                EXPECTM_3120S90:      
25C9   E1                     POP   HL   
25CA                          ;*Macro unroll:  test "7 3 / /re", 1
25CA   31 00 4F               LD   SP,STACK   
25CD   CD 03 10               CALL   coldInit   
25D0   CD B2 4D               CALL   execStr   
25D3   37 20 33 20 2F 20 2F 72 65 00 DB   "7 3 / /re",0   
25DD   E1                     POP   HL   
25DE   E5                     PUSH   HL   
25DF   11 01 00               LD   DE,1   
25E2   B7                     OR   A   
25E3   ED 52                  SBC   HL,DE   
25E5   7D                     LD   A,L   
25E6   B4                     OR   H   
25E7   CA 40 26               JP   Z,expectM_3121S91   
25EA   CD CF 0F               CALL   printStr   
25ED   43 6F 64 65 3A 20 37 20 33 20 2F 20 2F 72 65 00 .CSTR   "Code: ","7 3 / /re"   
25FD   CD CF 0F               CALL   printStr   
2600   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
260F   21 01 00               LD   hl,1   
2612   E5                     PUSH   hl   
2613   E5                     PUSH   hl   
2614   CD D6 10               CALL   run   
2617   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
261E   CD CF 0F               CALL   printStr   
2621   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
262E   E1                     POP   hl   
262F   E5                     PUSH   hl   
2630   E5                     PUSH   hl   
2631   CD D6 10               CALL   run   
2634   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
263F   76                     HALT      
2640                EXPECTM_3121S91:      
2640   E1                     POP   HL   
2641                          ;*Macro unroll:  test "7 3 /", 2
2641   31 00 4F               LD   SP,STACK   
2644   CD 03 10               CALL   coldInit   
2647   CD B2 4D               CALL   execStr   
264A   37 20 33 20 2F 00      DB   "7 3 /",0   
2650   E1                     POP   HL   
2651   E5                     PUSH   HL   
2652   11 02 00               LD   DE,2   
2655   B7                     OR   A   
2656   ED 52                  SBC   HL,DE   
2658   7D                     LD   A,L   
2659   B4                     OR   H   
265A   CA AF 26               JP   Z,expectM_3122S92   
265D   CD CF 0F               CALL   printStr   
2660   43 6F 64 65 3A 20 37 20 33 20 2F 00 .CSTR   "Code: ","7 3 /"   
266C   CD CF 0F               CALL   printStr   
266F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
267E   21 02 00               LD   hl,2   
2681   E5                     PUSH   hl   
2682   E5                     PUSH   hl   
2683   CD D6 10               CALL   run   
2686   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
268D   CD CF 0F               CALL   printStr   
2690   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
269D   E1                     POP   hl   
269E   E5                     PUSH   hl   
269F   E5                     PUSH   hl   
26A0   CD D6 10               CALL   run   
26A3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
26AE   76                     HALT      
26AF                EXPECTM_3122S92:      
26AF   E1                     POP   HL   
26B0                          ;*Macro unroll:  test "2 3 ==", FALSE
26B0   31 00 4F               LD   SP,STACK   
26B3   CD 03 10               CALL   coldInit   
26B6   CD B2 4D               CALL   execStr   
26B9   32 20 33 20 3D 3D 00   DB   "2 3 ==",0   
26C0   E1                     POP   HL   
26C1   E5                     PUSH   HL   
26C2   11 00 00               LD   DE,FALSE   
26C5   B7                     OR   A   
26C6   ED 52                  SBC   HL,DE   
26C8   7D                     LD   A,L   
26C9   B4                     OR   H   
26CA   CA 20 27               JP   Z,expectM_3123S93   
26CD   CD CF 0F               CALL   printStr   
26D0   43 6F 64 65 3A 20 32 20 33 20 3D 3D 00 .CSTR   "Code: ","2 3 =="   
26DD   CD CF 0F               CALL   printStr   
26E0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
26EF   21 00 00               LD   hl,FALSE   
26F2   E5                     PUSH   hl   
26F3   E5                     PUSH   hl   
26F4   CD D6 10               CALL   run   
26F7   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
26FE   CD CF 0F               CALL   printStr   
2701   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
270E   E1                     POP   hl   
270F   E5                     PUSH   hl   
2710   E5                     PUSH   hl   
2711   CD D6 10               CALL   run   
2714   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
271F   76                     HALT      
2720                EXPECTM_3123S93:      
2720   E1                     POP   HL   
2721                          ;*Macro unroll:  test "3 3 ==", TRUE
2721   31 00 4F               LD   SP,STACK   
2724   CD 03 10               CALL   coldInit   
2727   CD B2 4D               CALL   execStr   
272A   33 20 33 20 3D 3D 00   DB   "3 3 ==",0   
2731   E1                     POP   HL   
2732   E5                     PUSH   HL   
2733   11 FF FF               LD   DE,TRUE   
2736   B7                     OR   A   
2737   ED 52                  SBC   HL,DE   
2739   7D                     LD   A,L   
273A   B4                     OR   H   
273B   CA 91 27               JP   Z,expectM_3124S94   
273E   CD CF 0F               CALL   printStr   
2741   43 6F 64 65 3A 20 33 20 33 20 3D 3D 00 .CSTR   "Code: ","3 3 =="   
274E   CD CF 0F               CALL   printStr   
2751   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2760   21 FF FF               LD   hl,TRUE   
2763   E5                     PUSH   hl   
2764   E5                     PUSH   hl   
2765   CD D6 10               CALL   run   
2768   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
276F   CD CF 0F               CALL   printStr   
2772   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
277F   E1                     POP   hl   
2780   E5                     PUSH   hl   
2781   E5                     PUSH   hl   
2782   CD D6 10               CALL   run   
2785   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2790   76                     HALT      
2791                EXPECTM_3124S94:      
2791   E1                     POP   HL   
2792                          ;*Macro unroll:  test "1 2 <", TRUE
2792   31 00 4F               LD   SP,STACK   
2795   CD 03 10               CALL   coldInit   
2798   CD B2 4D               CALL   execStr   
279B   31 20 32 20 3C 00      DB   "1 2 <",0   
27A1   E1                     POP   HL   
27A2   E5                     PUSH   HL   
27A3   11 FF FF               LD   DE,TRUE   
27A6   B7                     OR   A   
27A7   ED 52                  SBC   HL,DE   
27A9   7D                     LD   A,L   
27AA   B4                     OR   H   
27AB   CA 00 28               JP   Z,expectM_3125S95   
27AE   CD CF 0F               CALL   printStr   
27B1   43 6F 64 65 3A 20 31 20 32 20 3C 00 .CSTR   "Code: ","1 2 <"   
27BD   CD CF 0F               CALL   printStr   
27C0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
27CF   21 FF FF               LD   hl,TRUE   
27D2   E5                     PUSH   hl   
27D3   E5                     PUSH   hl   
27D4   CD D6 10               CALL   run   
27D7   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
27DE   CD CF 0F               CALL   printStr   
27E1   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
27EE   E1                     POP   hl   
27EF   E5                     PUSH   hl   
27F0   E5                     PUSH   hl   
27F1   CD D6 10               CALL   run   
27F4   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
27FF   76                     HALT      
2800                EXPECTM_3125S95:      
2800   E1                     POP   HL   
2801                          ;*Macro unroll:  test "2 1 <", FALSE
2801   31 00 4F               LD   SP,STACK   
2804   CD 03 10               CALL   coldInit   
2807   CD B2 4D               CALL   execStr   
280A   32 20 31 20 3C 00      DB   "2 1 <",0   
2810   E1                     POP   HL   
2811   E5                     PUSH   HL   
2812   11 00 00               LD   DE,FALSE   
2815   B7                     OR   A   
2816   ED 52                  SBC   HL,DE   
2818   7D                     LD   A,L   
2819   B4                     OR   H   
281A   CA 6F 28               JP   Z,expectM_3126S96   
281D   CD CF 0F               CALL   printStr   
2820   43 6F 64 65 3A 20 32 20 31 20 3C 00 .CSTR   "Code: ","2 1 <"   
282C   CD CF 0F               CALL   printStr   
282F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
283E   21 00 00               LD   hl,FALSE   
2841   E5                     PUSH   hl   
2842   E5                     PUSH   hl   
2843   CD D6 10               CALL   run   
2846   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
284D   CD CF 0F               CALL   printStr   
2850   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
285D   E1                     POP   hl   
285E   E5                     PUSH   hl   
285F   E5                     PUSH   hl   
2860   CD D6 10               CALL   run   
2863   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
286E   76                     HALT      
286F                EXPECTM_3126S96:      
286F   E1                     POP   HL   
2870                          ;*Macro unroll:  test "2 3 <", TRUE
2870   31 00 4F               LD   SP,STACK   
2873   CD 03 10               CALL   coldInit   
2876   CD B2 4D               CALL   execStr   
2879   32 20 33 20 3C 00      DB   "2 3 <",0   
287F   E1                     POP   HL   
2880   E5                     PUSH   HL   
2881   11 FF FF               LD   DE,TRUE   
2884   B7                     OR   A   
2885   ED 52                  SBC   HL,DE   
2887   7D                     LD   A,L   
2888   B4                     OR   H   
2889   CA DE 28               JP   Z,expectM_3127S97   
288C   CD CF 0F               CALL   printStr   
288F   43 6F 64 65 3A 20 32 20 33 20 3C 00 .CSTR   "Code: ","2 3 <"   
289B   CD CF 0F               CALL   printStr   
289E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
28AD   21 FF FF               LD   hl,TRUE   
28B0   E5                     PUSH   hl   
28B1   E5                     PUSH   hl   
28B2   CD D6 10               CALL   run   
28B5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
28BC   CD CF 0F               CALL   printStr   
28BF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
28CC   E1                     POP   hl   
28CD   E5                     PUSH   hl   
28CE   E5                     PUSH   hl   
28CF   CD D6 10               CALL   run   
28D2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
28DD   76                     HALT      
28DE                EXPECTM_3127S97:      
28DE   E1                     POP   HL   
28DF                          ;*Macro unroll:  test "3 3 <", FALSE
28DF   31 00 4F               LD   SP,STACK   
28E2   CD 03 10               CALL   coldInit   
28E5   CD B2 4D               CALL   execStr   
28E8   33 20 33 20 3C 00      DB   "3 3 <",0   
28EE   E1                     POP   HL   
28EF   E5                     PUSH   HL   
28F0   11 00 00               LD   DE,FALSE   
28F3   B7                     OR   A   
28F4   ED 52                  SBC   HL,DE   
28F6   7D                     LD   A,L   
28F7   B4                     OR   H   
28F8   CA 4D 29               JP   Z,expectM_3128S98   
28FB   CD CF 0F               CALL   printStr   
28FE   43 6F 64 65 3A 20 33 20 33 20 3C 00 .CSTR   "Code: ","3 3 <"   
290A   CD CF 0F               CALL   printStr   
290D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
291C   21 00 00               LD   hl,FALSE   
291F   E5                     PUSH   hl   
2920   E5                     PUSH   hl   
2921   CD D6 10               CALL   run   
2924   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
292B   CD CF 0F               CALL   printStr   
292E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
293B   E1                     POP   hl   
293C   E5                     PUSH   hl   
293D   E5                     PUSH   hl   
293E   CD D6 10               CALL   run   
2941   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
294C   76                     HALT      
294D                EXPECTM_3128S98:      
294D   E1                     POP   HL   
294E                          ;*Macro unroll:  test "1 2 >", FALSE
294E   31 00 4F               LD   SP,STACK   
2951   CD 03 10               CALL   coldInit   
2954   CD B2 4D               CALL   execStr   
2957   31 20 32 20 3E 00      DB   "1 2 >",0   
295D   E1                     POP   HL   
295E   E5                     PUSH   HL   
295F   11 00 00               LD   DE,FALSE   
2962   B7                     OR   A   
2963   ED 52                  SBC   HL,DE   
2965   7D                     LD   A,L   
2966   B4                     OR   H   
2967   CA BC 29               JP   Z,expectM_3129S99   
296A   CD CF 0F               CALL   printStr   
296D   43 6F 64 65 3A 20 31 20 32 20 3E 00 .CSTR   "Code: ","1 2 >"   
2979   CD CF 0F               CALL   printStr   
297C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
298B   21 00 00               LD   hl,FALSE   
298E   E5                     PUSH   hl   
298F   E5                     PUSH   hl   
2990   CD D6 10               CALL   run   
2993   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
299A   CD CF 0F               CALL   printStr   
299D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
29AA   E1                     POP   hl   
29AB   E5                     PUSH   hl   
29AC   E5                     PUSH   hl   
29AD   CD D6 10               CALL   run   
29B0   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
29BB   76                     HALT      
29BC                EXPECTM_3129S99:      
29BC   E1                     POP   HL   
29BD                          ;*Macro unroll:  test "2 1 >", TRUE
29BD   31 00 4F               LD   SP,STACK   
29C0   CD 03 10               CALL   coldInit   
29C3   CD B2 4D               CALL   execStr   
29C6   32 20 31 20 3E 00      DB   "2 1 >",0   
29CC   E1                     POP   HL   
29CD   E5                     PUSH   HL   
29CE   11 FF FF               LD   DE,TRUE   
29D1   B7                     OR   A   
29D2   ED 52                  SBC   HL,DE   
29D4   7D                     LD   A,L   
29D5   B4                     OR   H   
29D6   CA 2B 2A               JP   Z,expectM_3130S100   
29D9   CD CF 0F               CALL   printStr   
29DC   43 6F 64 65 3A 20 32 20 31 20 3E 00 .CSTR   "Code: ","2 1 >"   
29E8   CD CF 0F               CALL   printStr   
29EB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
29FA   21 FF FF               LD   hl,TRUE   
29FD   E5                     PUSH   hl   
29FE   E5                     PUSH   hl   
29FF   CD D6 10               CALL   run   
2A02   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2A09   CD CF 0F               CALL   printStr   
2A0C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A19   E1                     POP   hl   
2A1A   E5                     PUSH   hl   
2A1B   E5                     PUSH   hl   
2A1C   CD D6 10               CALL   run   
2A1F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2A2A   76                     HALT      
2A2B                EXPECTM_3130S100:      
2A2B   E1                     POP   HL   
2A2C                          ;*Macro unroll:  test "3 3 >", FALSE
2A2C   31 00 4F               LD   SP,STACK   
2A2F   CD 03 10               CALL   coldInit   
2A32   CD B2 4D               CALL   execStr   
2A35   33 20 33 20 3E 00      DB   "3 3 >",0   
2A3B   E1                     POP   HL   
2A3C   E5                     PUSH   HL   
2A3D   11 00 00               LD   DE,FALSE   
2A40   B7                     OR   A   
2A41   ED 52                  SBC   HL,DE   
2A43   7D                     LD   A,L   
2A44   B4                     OR   H   
2A45   CA 9A 2A               JP   Z,expectM_3131S101   
2A48   CD CF 0F               CALL   printStr   
2A4B   43 6F 64 65 3A 20 33 20 33 20 3E 00 .CSTR   "Code: ","3 3 >"   
2A57   CD CF 0F               CALL   printStr   
2A5A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2A69   21 00 00               LD   hl,FALSE   
2A6C   E5                     PUSH   hl   
2A6D   E5                     PUSH   hl   
2A6E   CD D6 10               CALL   run   
2A71   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2A78   CD CF 0F               CALL   printStr   
2A7B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2A88   E1                     POP   hl   
2A89   E5                     PUSH   hl   
2A8A   E5                     PUSH   hl   
2A8B   CD D6 10               CALL   run   
2A8E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2A99   76                     HALT      
2A9A                EXPECTM_3131S101:      
2A9A   E1                     POP   HL   
2A9B                          ;*Macro unroll:  test "4 3 >", TRUE
2A9B   31 00 4F               LD   SP,STACK   
2A9E   CD 03 10               CALL   coldInit   
2AA1   CD B2 4D               CALL   execStr   
2AA4   34 20 33 20 3E 00      DB   "4 3 >",0   
2AAA   E1                     POP   HL   
2AAB   E5                     PUSH   HL   
2AAC   11 FF FF               LD   DE,TRUE   
2AAF   B7                     OR   A   
2AB0   ED 52                  SBC   HL,DE   
2AB2   7D                     LD   A,L   
2AB3   B4                     OR   H   
2AB4   CA 09 2B               JP   Z,expectM_3132S102   
2AB7   CD CF 0F               CALL   printStr   
2ABA   43 6F 64 65 3A 20 34 20 33 20 3E 00 .CSTR   "Code: ","4 3 >"   
2AC6   CD CF 0F               CALL   printStr   
2AC9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2AD8   21 FF FF               LD   hl,TRUE   
2ADB   E5                     PUSH   hl   
2ADC   E5                     PUSH   hl   
2ADD   CD D6 10               CALL   run   
2AE0   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2AE7   CD CF 0F               CALL   printStr   
2AEA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2AF7   E1                     POP   hl   
2AF8   E5                     PUSH   hl   
2AF9   E5                     PUSH   hl   
2AFA   CD D6 10               CALL   run   
2AFD   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2B08   76                     HALT      
2B09                EXPECTM_3132S102:      
2B09   E1                     POP   HL   
2B0A                          ;*Macro unroll:  test "2 2 <=", TRUE
2B0A   31 00 4F               LD   SP,STACK   
2B0D   CD 03 10               CALL   coldInit   
2B10   CD B2 4D               CALL   execStr   
2B13   32 20 32 20 3C 3D 00   DB   "2 2 <=",0   
2B1A   E1                     POP   HL   
2B1B   E5                     PUSH   HL   
2B1C   11 FF FF               LD   DE,TRUE   
2B1F   B7                     OR   A   
2B20   ED 52                  SBC   HL,DE   
2B22   7D                     LD   A,L   
2B23   B4                     OR   H   
2B24   CA 7A 2B               JP   Z,expectM_3133S103   
2B27   CD CF 0F               CALL   printStr   
2B2A   43 6F 64 65 3A 20 32 20 32 20 3C 3D 00 .CSTR   "Code: ","2 2 <="   
2B37   CD CF 0F               CALL   printStr   
2B3A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2B49   21 FF FF               LD   hl,TRUE   
2B4C   E5                     PUSH   hl   
2B4D   E5                     PUSH   hl   
2B4E   CD D6 10               CALL   run   
2B51   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2B58   CD CF 0F               CALL   printStr   
2B5B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2B68   E1                     POP   hl   
2B69   E5                     PUSH   hl   
2B6A   E5                     PUSH   hl   
2B6B   CD D6 10               CALL   run   
2B6E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2B79   76                     HALT      
2B7A                EXPECTM_3133S103:      
2B7A   E1                     POP   HL   
2B7B                          ;*Macro unroll:  test "2 2 >=", TRUE
2B7B   31 00 4F               LD   SP,STACK   
2B7E   CD 03 10               CALL   coldInit   
2B81   CD B2 4D               CALL   execStr   
2B84   32 20 32 20 3E 3D 00   DB   "2 2 >=",0   
2B8B   E1                     POP   HL   
2B8C   E5                     PUSH   HL   
2B8D   11 FF FF               LD   DE,TRUE   
2B90   B7                     OR   A   
2B91   ED 52                  SBC   HL,DE   
2B93   7D                     LD   A,L   
2B94   B4                     OR   H   
2B95   CA EB 2B               JP   Z,expectM_3134S104   
2B98   CD CF 0F               CALL   printStr   
2B9B   43 6F 64 65 3A 20 32 20 32 20 3E 3D 00 .CSTR   "Code: ","2 2 >="   
2BA8   CD CF 0F               CALL   printStr   
2BAB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2BBA   21 FF FF               LD   hl,TRUE   
2BBD   E5                     PUSH   hl   
2BBE   E5                     PUSH   hl   
2BBF   CD D6 10               CALL   run   
2BC2   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2BC9   CD CF 0F               CALL   printStr   
2BCC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2BD9   E1                     POP   hl   
2BDA   E5                     PUSH   hl   
2BDB   E5                     PUSH   hl   
2BDC   CD D6 10               CALL   run   
2BDF   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2BEA   76                     HALT      
2BEB                EXPECTM_3134S104:      
2BEB   E1                     POP   HL   
2BEC                          ;*Macro unroll:  test "3 1 <<", 6
2BEC   31 00 4F               LD   SP,STACK   
2BEF   CD 03 10               CALL   coldInit   
2BF2   CD B2 4D               CALL   execStr   
2BF5   33 20 31 20 3C 3C 00   DB   "3 1 <<",0   
2BFC   E1                     POP   HL   
2BFD   E5                     PUSH   HL   
2BFE   11 06 00               LD   DE,6   
2C01   B7                     OR   A   
2C02   ED 52                  SBC   HL,DE   
2C04   7D                     LD   A,L   
2C05   B4                     OR   H   
2C06   CA 5C 2C               JP   Z,expectM_3135S105   
2C09   CD CF 0F               CALL   printStr   
2C0C   43 6F 64 65 3A 20 33 20 31 20 3C 3C 00 .CSTR   "Code: ","3 1 <<"   
2C19   CD CF 0F               CALL   printStr   
2C1C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C2B   21 06 00               LD   hl,6   
2C2E   E5                     PUSH   hl   
2C2F   E5                     PUSH   hl   
2C30   CD D6 10               CALL   run   
2C33   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2C3A   CD CF 0F               CALL   printStr   
2C3D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2C4A   E1                     POP   hl   
2C4B   E5                     PUSH   hl   
2C4C   E5                     PUSH   hl   
2C4D   CD D6 10               CALL   run   
2C50   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2C5B   76                     HALT      
2C5C                EXPECTM_3135S105:      
2C5C   E1                     POP   HL   
2C5D                          ;*Macro unroll:  test "10 1 >>", 5
2C5D   31 00 4F               LD   SP,STACK   
2C60   CD 03 10               CALL   coldInit   
2C63   CD B2 4D               CALL   execStr   
2C66   31 30 20 31 20 3E 3E 00 DB   "10 1 >>",0   
2C6E   E1                     POP   HL   
2C6F   E5                     PUSH   HL   
2C70   11 05 00               LD   DE,5   
2C73   B7                     OR   A   
2C74   ED 52                  SBC   HL,DE   
2C76   7D                     LD   A,L   
2C77   B4                     OR   H   
2C78   CA CF 2C               JP   Z,expectM_3136S106   
2C7B   CD CF 0F               CALL   printStr   
2C7E   43 6F 64 65 3A 20 31 30 20 31 20 3E 3E 00 .CSTR   "Code: ","10 1 >>"   
2C8C   CD CF 0F               CALL   printStr   
2C8F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2C9E   21 05 00               LD   hl,5   
2CA1   E5                     PUSH   hl   
2CA2   E5                     PUSH   hl   
2CA3   CD D6 10               CALL   run   
2CA6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2CAD   CD CF 0F               CALL   printStr   
2CB0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2CBD   E1                     POP   hl   
2CBE   E5                     PUSH   hl   
2CBF   E5                     PUSH   hl   
2CC0   CD D6 10               CALL   run   
2CC3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2CCE   76                     HALT      
2CCF                EXPECTM_3136S106:      
2CCF   E1                     POP   HL   
2CD0                          ;*Macro unroll:  test "1 x = x", 1
2CD0   31 00 4F               LD   SP,STACK   
2CD3   CD 03 10               CALL   coldInit   
2CD6   CD B2 4D               CALL   execStr   
2CD9   31 20 78 20 3D 20 78 00 DB   "1 x = x",0   
2CE1   E1                     POP   HL   
2CE2   E5                     PUSH   HL   
2CE3   11 01 00               LD   DE,1   
2CE6   B7                     OR   A   
2CE7   ED 52                  SBC   HL,DE   
2CE9   7D                     LD   A,L   
2CEA   B4                     OR   H   
2CEB   CA 42 2D               JP   Z,expectM_3137S107   
2CEE   CD CF 0F               CALL   printStr   
2CF1   43 6F 64 65 3A 20 31 20 78 20 3D 20 78 00 .CSTR   "Code: ","1 x = x"   
2CFF   CD CF 0F               CALL   printStr   
2D02   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D11   21 01 00               LD   hl,1   
2D14   E5                     PUSH   hl   
2D15   E5                     PUSH   hl   
2D16   CD D6 10               CALL   run   
2D19   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2D20   CD CF 0F               CALL   printStr   
2D23   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D30   E1                     POP   hl   
2D31   E5                     PUSH   hl   
2D32   E5                     PUSH   hl   
2D33   CD D6 10               CALL   run   
2D36   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2D41   76                     HALT      
2D42                EXPECTM_3137S107:      
2D42   E1                     POP   HL   
2D43                          ;*Macro unroll:  test "1{}^", 1
2D43   31 00 4F               LD   SP,STACK   
2D46   CD 03 10               CALL   coldInit   
2D49   CD B2 4D               CALL   execStr   
2D4C   31 7B 7D 5E 00         DB   "1{}^",0   
2D51   E1                     POP   HL   
2D52   E5                     PUSH   HL   
2D53   11 01 00               LD   DE,1   
2D56   B7                     OR   A   
2D57   ED 52                  SBC   HL,DE   
2D59   7D                     LD   A,L   
2D5A   B4                     OR   H   
2D5B   CA AF 2D               JP   Z,expectM_3138S108   
2D5E   CD CF 0F               CALL   printStr   
2D61   43 6F 64 65 3A 20 31 7B 7D 5E 00 .CSTR   "Code: ","1{}^"   
2D6C   CD CF 0F               CALL   printStr   
2D6F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2D7E   21 01 00               LD   hl,1   
2D81   E5                     PUSH   hl   
2D82   E5                     PUSH   hl   
2D83   CD D6 10               CALL   run   
2D86   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2D8D   CD CF 0F               CALL   printStr   
2D90   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2D9D   E1                     POP   hl   
2D9E   E5                     PUSH   hl   
2D9F   E5                     PUSH   hl   
2DA0   CD D6 10               CALL   run   
2DA3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2DAE   76                     HALT      
2DAF                EXPECTM_3138S108:      
2DAF   E1                     POP   HL   
2DB0                          ;*Macro unroll:  test "{1}^", 1
2DB0   31 00 4F               LD   SP,STACK   
2DB3   CD 03 10               CALL   coldInit   
2DB6   CD B2 4D               CALL   execStr   
2DB9   7B 31 7D 5E 00         DB   "{1}^",0   
2DBE   E1                     POP   HL   
2DBF   E5                     PUSH   HL   
2DC0   11 01 00               LD   DE,1   
2DC3   B7                     OR   A   
2DC4   ED 52                  SBC   HL,DE   
2DC6   7D                     LD   A,L   
2DC7   B4                     OR   H   
2DC8   CA 1C 2E               JP   Z,expectM_3139S109   
2DCB   CD CF 0F               CALL   printStr   
2DCE   43 6F 64 65 3A 20 7B 31 7D 5E 00 .CSTR   "Code: ","{1}^"   
2DD9   CD CF 0F               CALL   printStr   
2DDC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2DEB   21 01 00               LD   hl,1   
2DEE   E5                     PUSH   hl   
2DEF   E5                     PUSH   hl   
2DF0   CD D6 10               CALL   run   
2DF3   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2DFA   CD CF 0F               CALL   printStr   
2DFD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E0A   E1                     POP   hl   
2E0B   E5                     PUSH   hl   
2E0C   E5                     PUSH   hl   
2E0D   CD D6 10               CALL   run   
2E10   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2E1B   76                     HALT      
2E1C                EXPECTM_3139S109:      
2E1C   E1                     POP   HL   
2E1D                          ;*Macro unroll:  test "{{1}^}^", 1
2E1D   31 00 4F               LD   SP,STACK   
2E20   CD 03 10               CALL   coldInit   
2E23   CD B2 4D               CALL   execStr   
2E26   7B 7B 31 7D 5E 7D 5E 00 DB   "{{1}^}^",0   
2E2E   E1                     POP   HL   
2E2F   E5                     PUSH   HL   
2E30   11 01 00               LD   DE,1   
2E33   B7                     OR   A   
2E34   ED 52                  SBC   HL,DE   
2E36   7D                     LD   A,L   
2E37   B4                     OR   H   
2E38   CA 8F 2E               JP   Z,expectM_3140S110   
2E3B   CD CF 0F               CALL   printStr   
2E3E   43 6F 64 65 3A 20 7B 7B 31 7D 5E 7D 5E 00 .CSTR   "Code: ","{{1}^}^"   
2E4C   CD CF 0F               CALL   printStr   
2E4F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2E5E   21 01 00               LD   hl,1   
2E61   E5                     PUSH   hl   
2E62   E5                     PUSH   hl   
2E63   CD D6 10               CALL   run   
2E66   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2E6D   CD CF 0F               CALL   printStr   
2E70   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2E7D   E1                     POP   hl   
2E7E   E5                     PUSH   hl   
2E7F   E5                     PUSH   hl   
2E80   CD D6 10               CALL   run   
2E83   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2E8E   76                     HALT      
2E8F                EXPECTM_3140S110:      
2E8F   E1                     POP   HL   
2E90                          ;*Macro unroll:  test "{{{1}^}^}^", 1
2E90   31 00 4F               LD   SP,STACK   
2E93   CD 03 10               CALL   coldInit   
2E96   CD B2 4D               CALL   execStr   
2E99   7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 DB   "{{{1}^}^}^",0   
2EA4   E1                     POP   HL   
2EA5   E5                     PUSH   HL   
2EA6   11 01 00               LD   DE,1   
2EA9   B7                     OR   A   
2EAA   ED 52                  SBC   HL,DE   
2EAC   7D                     LD   A,L   
2EAD   B4                     OR   H   
2EAE   CA 08 2F               JP   Z,expectM_3141S111   
2EB1   CD CF 0F               CALL   printStr   
2EB4   43 6F 64 65 3A 20 7B 7B 7B 31 7D 5E 7D 5E 7D 5E 00 .CSTR   "Code: ","{{{1}^}^}^"   
2EC5   CD CF 0F               CALL   printStr   
2EC8   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2ED7   21 01 00               LD   hl,1   
2EDA   E5                     PUSH   hl   
2EDB   E5                     PUSH   hl   
2EDC   CD D6 10               CALL   run   
2EDF   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2EE6   CD CF 0F               CALL   printStr   
2EE9   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2EF6   E1                     POP   hl   
2EF7   E5                     PUSH   hl   
2EF8   E5                     PUSH   hl   
2EF9   CD D6 10               CALL   run   
2EFC   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2F07   76                     HALT      
2F08                EXPECTM_3141S111:      
2F08   E1                     POP   HL   
2F09                          ;*Macro unroll:  test "5 /f{10} ?", 5
2F09   31 00 4F               LD   SP,STACK   
2F0C   CD 03 10               CALL   coldInit   
2F0F   CD B2 4D               CALL   execStr   
2F12   35 20 2F 66 7B 31 30 7D 20 3F 00 DB   "5 /f{10} ?",0   
2F1D   E1                     POP   HL   
2F1E   E5                     PUSH   HL   
2F1F   11 05 00               LD   DE,5   
2F22   B7                     OR   A   
2F23   ED 52                  SBC   HL,DE   
2F25   7D                     LD   A,L   
2F26   B4                     OR   H   
2F27   CA 81 2F               JP   Z,expectM_3142S112   
2F2A   CD CF 0F               CALL   printStr   
2F2D   43 6F 64 65 3A 20 35 20 2F 66 7B 31 30 7D 20 3F 00 .CSTR   "Code: ","5 /f{10} ?"   
2F3E   CD CF 0F               CALL   printStr   
2F41   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2F50   21 05 00               LD   hl,5   
2F53   E5                     PUSH   hl   
2F54   E5                     PUSH   hl   
2F55   CD D6 10               CALL   run   
2F58   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2F5F   CD CF 0F               CALL   printStr   
2F62   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2F6F   E1                     POP   hl   
2F70   E5                     PUSH   hl   
2F71   E5                     PUSH   hl   
2F72   CD D6 10               CALL   run   
2F75   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2F80   76                     HALT      
2F81                EXPECTM_3142S112:      
2F81   E1                     POP   HL   
2F82                          ;*Macro unroll:  test "5 /t{10} ? +", 15
2F82   31 00 4F               LD   SP,STACK   
2F85   CD 03 10               CALL   coldInit   
2F88   CD B2 4D               CALL   execStr   
2F8B   35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 DB   "5 /t{10} ? +",0   
2F98   E1                     POP   HL   
2F99   E5                     PUSH   HL   
2F9A   11 0F 00               LD   DE,15   
2F9D   B7                     OR   A   
2F9E   ED 52                  SBC   HL,DE   
2FA0   7D                     LD   A,L   
2FA1   B4                     OR   H   
2FA2   CA FE 2F               JP   Z,expectM_3143S113   
2FA5   CD CF 0F               CALL   printStr   
2FA8   43 6F 64 65 3A 20 35 20 2F 74 7B 31 30 7D 20 3F 20 2B 00 .CSTR   "Code: ","5 /t{10} ? +"   
2FBB   CD CF 0F               CALL   printStr   
2FBE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
2FCD   21 0F 00               LD   hl,15   
2FD0   E5                     PUSH   hl   
2FD1   E5                     PUSH   hl   
2FD2   CD D6 10               CALL   run   
2FD5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
2FDC   CD CF 0F               CALL   printStr   
2FDF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
2FEC   E1                     POP   hl   
2FED   E5                     PUSH   hl   
2FEE   E5                     PUSH   hl   
2FEF   CD D6 10               CALL   run   
2FF2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
2FFD   76                     HALT      
2FFE                EXPECTM_3143S113:      
2FFE   E1                     POP   HL   
2FFF                          ;*Macro unroll:  test "1 /f{10}{20} ?? +", 21
2FFF   31 00 4F               LD   SP,STACK   
3002   CD 03 10               CALL   coldInit   
3005   CD B2 4D               CALL   execStr   
3008   31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /f{10}{20} ?? +",0   
301A   E1                     POP   HL   
301B   E5                     PUSH   HL   
301C   11 15 00               LD   DE,21   
301F   B7                     OR   A   
3020   ED 52                  SBC   HL,DE   
3022   7D                     LD   A,L   
3023   B4                     OR   H   
3024   CA 85 30               JP   Z,expectM_3144S114   
3027   CD CF 0F               CALL   printStr   
302A   43 6F 64 65 3A 20 31 20 2F 66 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /f{10}{20} ?? +"   
3042   CD CF 0F               CALL   printStr   
3045   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3054   21 15 00               LD   hl,21   
3057   E5                     PUSH   hl   
3058   E5                     PUSH   hl   
3059   CD D6 10               CALL   run   
305C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3063   CD CF 0F               CALL   printStr   
3066   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3073   E1                     POP   hl   
3074   E5                     PUSH   hl   
3075   E5                     PUSH   hl   
3076   CD D6 10               CALL   run   
3079   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3084   76                     HALT      
3085                EXPECTM_3144S114:      
3085   E1                     POP   HL   
3086                          ;*Macro unroll:  test "1 /t{10}{20} ?? +", 11
3086   31 00 4F               LD   SP,STACK   
3089   CD 03 10               CALL   coldInit   
308C   CD B2 4D               CALL   execStr   
308F   31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 DB   "1 /t{10}{20} ?? +",0   
30A1   E1                     POP   HL   
30A2   E5                     PUSH   HL   
30A3   11 0B 00               LD   DE,11   
30A6   B7                     OR   A   
30A7   ED 52                  SBC   HL,DE   
30A9   7D                     LD   A,L   
30AA   B4                     OR   H   
30AB   CA 0C 31               JP   Z,expectM_3145S115   
30AE   CD CF 0F               CALL   printStr   
30B1   43 6F 64 65 3A 20 31 20 2F 74 7B 31 30 7D 7B 32 30 7D 20 3F 3F 20 2B 00 .CSTR   "Code: ","1 /t{10}{20} ?? +"   
30C9   CD CF 0F               CALL   printStr   
30CC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
30DB   21 0B 00               LD   hl,11   
30DE   E5                     PUSH   hl   
30DF   E5                     PUSH   hl   
30E0   CD D6 10               CALL   run   
30E3   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
30EA   CD CF 0F               CALL   printStr   
30ED   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
30FA   E1                     POP   hl   
30FB   E5                     PUSH   hl   
30FC   E5                     PUSH   hl   
30FD   CD D6 10               CALL   run   
3100   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
310B   76                     HALT      
310C                EXPECTM_3145S115:      
310C   E1                     POP   HL   
310D                          ;*Macro unroll:  test "\\{2}^", 2
310D   31 00 4F               LD   SP,STACK   
3110   CD 03 10               CALL   coldInit   
3113   CD B2 4D               CALL   execStr   
3116   5C 7B 32 7D 5E 00      DB   "\\{2}^",0   
311C   E1                     POP   HL   
311D   E5                     PUSH   HL   
311E   11 02 00               LD   DE,2   
3121   B7                     OR   A   
3122   ED 52                  SBC   HL,DE   
3124   7D                     LD   A,L   
3125   B4                     OR   H   
3126   CA 7B 31               JP   Z,expectM_3146S116   
3129   CD CF 0F               CALL   printStr   
312C   43 6F 64 65 3A 20 5C 7B 32 7D 5E 00 .CSTR   "Code: ","\\{2}^"   
3138   CD CF 0F               CALL   printStr   
313B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
314A   21 02 00               LD   hl,2   
314D   E5                     PUSH   hl   
314E   E5                     PUSH   hl   
314F   CD D6 10               CALL   run   
3152   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3159   CD CF 0F               CALL   printStr   
315C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3169   E1                     POP   hl   
316A   E5                     PUSH   hl   
316B   E5                     PUSH   hl   
316C   CD D6 10               CALL   run   
316F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
317A   76                     HALT      
317B                EXPECTM_3146S116:      
317B   E1                     POP   HL   
317C                          ;*Macro unroll:  test "\\a{2}^", 2
317C   31 00 4F               LD   SP,STACK   
317F   CD 03 10               CALL   coldInit   
3182   CD B2 4D               CALL   execStr   
3185   5C 61 7B 32 7D 5E 00   DB   "\\a{2}^",0   
318C   E1                     POP   HL   
318D   E5                     PUSH   HL   
318E   11 02 00               LD   DE,2   
3191   B7                     OR   A   
3192   ED 52                  SBC   HL,DE   
3194   7D                     LD   A,L   
3195   B4                     OR   H   
3196   CA EC 31               JP   Z,expectM_3147S117   
3199   CD CF 0F               CALL   printStr   
319C   43 6F 64 65 3A 20 5C 61 7B 32 7D 5E 00 .CSTR   "Code: ","\\a{2}^"   
31A9   CD CF 0F               CALL   printStr   
31AC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
31BB   21 02 00               LD   hl,2   
31BE   E5                     PUSH   hl   
31BF   E5                     PUSH   hl   
31C0   CD D6 10               CALL   run   
31C3   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
31CA   CD CF 0F               CALL   printStr   
31CD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
31DA   E1                     POP   hl   
31DB   E5                     PUSH   hl   
31DC   E5                     PUSH   hl   
31DD   CD D6 10               CALL   run   
31E0   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
31EB   76                     HALT      
31EC                EXPECTM_3147S117:      
31EC   E1                     POP   HL   
31ED                          ;*Macro unroll:  test "5 \\a{%a}^", 5
31ED   31 00 4F               LD   SP,STACK   
31F0   CD 03 10               CALL   coldInit   
31F3   CD B2 4D               CALL   execStr   
31F6   35 20 5C 61 7B 25 61 7D 5E 00 DB   "5 \\a{%a}^",0   
3200   E1                     POP   HL   
3201   E5                     PUSH   HL   
3202   11 05 00               LD   DE,5   
3205   B7                     OR   A   
3206   ED 52                  SBC   HL,DE   
3208   7D                     LD   A,L   
3209   B4                     OR   H   
320A   CA 63 32               JP   Z,expectM_3148S118   
320D   CD CF 0F               CALL   printStr   
3210   43 6F 64 65 3A 20 35 20 5C 61 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a{%a}^"   
3220   CD CF 0F               CALL   printStr   
3223   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3232   21 05 00               LD   hl,5   
3235   E5                     PUSH   hl   
3236   E5                     PUSH   hl   
3237   CD D6 10               CALL   run   
323A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3241   CD CF 0F               CALL   printStr   
3244   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3251   E1                     POP   hl   
3252   E5                     PUSH   hl   
3253   E5                     PUSH   hl   
3254   CD D6 10               CALL   run   
3257   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3262   76                     HALT      
3263                EXPECTM_3148S118:      
3263   E1                     POP   HL   
3264                          ;*Macro unroll:  test "5 \\a:b{%a}^", 5
3264   31 00 4F               LD   SP,STACK   
3267   CD 03 10               CALL   coldInit   
326A   CD B2 4D               CALL   execStr   
326D   35 20 5C 61 3A 62 7B 25 61 7D 5E 00 DB   "5 \\a:b{%a}^",0   
3279   E1                     POP   HL   
327A   E5                     PUSH   HL   
327B   11 05 00               LD   DE,5   
327E   B7                     OR   A   
327F   ED 52                  SBC   HL,DE   
3281   7D                     LD   A,L   
3282   B4                     OR   H   
3283   CA DE 32               JP   Z,expectM_3149S119   
3286   CD CF 0F               CALL   printStr   
3289   43 6F 64 65 3A 20 35 20 5C 61 3A 62 7B 25 61 7D 5E 00 .CSTR   "Code: ","5 \\a:b{%a}^"   
329B   CD CF 0F               CALL   printStr   
329E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
32AD   21 05 00               LD   hl,5   
32B0   E5                     PUSH   hl   
32B1   E5                     PUSH   hl   
32B2   CD D6 10               CALL   run   
32B5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
32BC   CD CF 0F               CALL   printStr   
32BF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
32CC   E1                     POP   hl   
32CD   E5                     PUSH   hl   
32CE   E5                     PUSH   hl   
32CF   CD D6 10               CALL   run   
32D2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
32DD   76                     HALT      
32DE                EXPECTM_3149S119:      
32DE   E1                     POP   HL   
32DF                          ;*Macro unroll:  test "\\a{{2}^}^", 2
32DF   31 00 4F               LD   SP,STACK   
32E2   CD 03 10               CALL   coldInit   
32E5   CD B2 4D               CALL   execStr   
32E8   5C 61 7B 7B 32 7D 5E 7D 5E 00 DB   "\\a{{2}^}^",0   
32F2   E1                     POP   HL   
32F3   E5                     PUSH   HL   
32F4   11 02 00               LD   DE,2   
32F7   B7                     OR   A   
32F8   ED 52                  SBC   HL,DE   
32FA   7D                     LD   A,L   
32FB   B4                     OR   H   
32FC   CA 55 33               JP   Z,expectM_3150S120   
32FF   CD CF 0F               CALL   printStr   
3302   43 6F 64 65 3A 20 5C 61 7B 7B 32 7D 5E 7D 5E 00 .CSTR   "Code: ","\\a{{2}^}^"   
3312   CD CF 0F               CALL   printStr   
3315   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3324   21 02 00               LD   hl,2   
3327   E5                     PUSH   hl   
3328   E5                     PUSH   hl   
3329   CD D6 10               CALL   run   
332C   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3333   CD CF 0F               CALL   printStr   
3336   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3343   E1                     POP   hl   
3344   E5                     PUSH   hl   
3345   E5                     PUSH   hl   
3346   CD D6 10               CALL   run   
3349   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3354   76                     HALT      
3355                EXPECTM_3150S120:      
3355   E1                     POP   HL   
3356                          ;*Macro unroll:  test "1 5 \\a{{%a}^}^", 5
3356   31 00 4F               LD   SP,STACK   
3359   CD 03 10               CALL   coldInit   
335C   CD B2 4D               CALL   execStr   
335F   31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a}^}^",0   
336E   E1                     POP   HL   
336F   E5                     PUSH   HL   
3370   11 05 00               LD   DE,5   
3373   B7                     OR   A   
3374   ED 52                  SBC   HL,DE   
3376   7D                     LD   A,L   
3377   B4                     OR   H   
3378   CA D6 33               JP   Z,expectM_3151S121   
337B   CD CF 0F               CALL   printStr   
337E   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a}^}^"   
3393   CD CF 0F               CALL   printStr   
3396   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
33A5   21 05 00               LD   hl,5   
33A8   E5                     PUSH   hl   
33A9   E5                     PUSH   hl   
33AA   CD D6 10               CALL   run   
33AD   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
33B4   CD CF 0F               CALL   printStr   
33B7   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
33C4   E1                     POP   hl   
33C5   E5                     PUSH   hl   
33C6   E5                     PUSH   hl   
33C7   CD D6 10               CALL   run   
33CA   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
33D5   76                     HALT      
33D6                EXPECTM_3151S121:      
33D6   E1                     POP   HL   
33D7                          ;*Macro unroll:  test "1 5 \\ab{{%a}^}^", 1
33D7   31 00 4F               LD   SP,STACK   
33DA   CD 03 10               CALL   coldInit   
33DD   CD B2 4D               CALL   execStr   
33E0   31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a}^}^",0   
33F0   E1                     POP   HL   
33F1   E5                     PUSH   HL   
33F2   11 01 00               LD   DE,1   
33F5   B7                     OR   A   
33F6   ED 52                  SBC   HL,DE   
33F8   7D                     LD   A,L   
33F9   B4                     OR   H   
33FA   CA 59 34               JP   Z,expectM_3152S122   
33FD   CD CF 0F               CALL   printStr   
3400   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a}^}^"   
3416   CD CF 0F               CALL   printStr   
3419   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3428   21 01 00               LD   hl,1   
342B   E5                     PUSH   hl   
342C   E5                     PUSH   hl   
342D   CD D6 10               CALL   run   
3430   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3437   CD CF 0F               CALL   printStr   
343A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3447   E1                     POP   hl   
3448   E5                     PUSH   hl   
3449   E5                     PUSH   hl   
344A   CD D6 10               CALL   run   
344D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3458   76                     HALT      
3459                EXPECTM_3152S122:      
3459   E1                     POP   HL   
345A                          ;*Macro unroll:  test "1 5 \\a{{%a 2 +}^}^", 7
345A   31 00 4F               LD   SP,STACK   
345D   CD 03 10               CALL   coldInit   
3460   CD B2 4D               CALL   execStr   
3463   31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\a{{%a 2 +}^}^",0   
3476   E1                     POP   HL   
3477   E5                     PUSH   HL   
3478   11 07 00               LD   DE,7   
347B   B7                     OR   A   
347C   ED 52                  SBC   HL,DE   
347E   7D                     LD   A,L   
347F   B4                     OR   H   
3480   CA E2 34               JP   Z,expectM_3153S123   
3483   CD CF 0F               CALL   printStr   
3486   43 6F 64 65 3A 20 31 20 35 20 5C 61 7B 7B 25 61 20 32 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\a{{%a 2 +}^}^"   
349F   CD CF 0F               CALL   printStr   
34A2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
34B1   21 07 00               LD   hl,7   
34B4   E5                     PUSH   hl   
34B5   E5                     PUSH   hl   
34B6   CD D6 10               CALL   run   
34B9   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
34C0   CD CF 0F               CALL   printStr   
34C3   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
34D0   E1                     POP   hl   
34D1   E5                     PUSH   hl   
34D2   E5                     PUSH   hl   
34D3   CD D6 10               CALL   run   
34D6   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
34E1   76                     HALT      
34E2                EXPECTM_3153S123:      
34E2   E1                     POP   HL   
34E3                          ;*Macro unroll:  test "1 5 \\ab{{%a %b +}^}^", 6
34E3   31 00 4F               LD   SP,STACK   
34E6   CD 03 10               CALL   coldInit   
34E9   CD B2 4D               CALL   execStr   
34EC   31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 DB   "1 5 \\ab{{%a %b +}^}^",0   
3501   E1                     POP   HL   
3502   E5                     PUSH   HL   
3503   11 06 00               LD   DE,6   
3506   B7                     OR   A   
3507   ED 52                  SBC   HL,DE   
3509   7D                     LD   A,L   
350A   B4                     OR   H   
350B   CA 6F 35               JP   Z,expectM_3154S124   
350E   CD CF 0F               CALL   printStr   
3511   43 6F 64 65 3A 20 31 20 35 20 5C 61 62 7B 7B 25 61 20 25 62 20 2B 7D 5E 7D 5E 00 .CSTR   "Code: ","1 5 \\ab{{%a %b +}^}^"   
352C   CD CF 0F               CALL   printStr   
352F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
353E   21 06 00               LD   hl,6   
3541   E5                     PUSH   hl   
3542   E5                     PUSH   hl   
3543   CD D6 10               CALL   run   
3546   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
354D   CD CF 0F               CALL   printStr   
3550   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
355D   E1                     POP   hl   
355E   E5                     PUSH   hl   
355F   E5                     PUSH   hl   
3560   CD D6 10               CALL   run   
3563   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
356E   76                     HALT      
356F                EXPECTM_3154S124:      
356F   E1                     POP   HL   
3570                          ;*Macro unroll:  test "\\a{2} x= 1 x^", 2
3570   31 00 4F               LD   SP,STACK   
3573   CD 03 10               CALL   coldInit   
3576   CD B2 4D               CALL   execStr   
3579   5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a{2} x= 1 x^",0   
3587   E1                     POP   HL   
3588   E5                     PUSH   HL   
3589   11 02 00               LD   DE,2   
358C   B7                     OR   A   
358D   ED 52                  SBC   HL,DE   
358F   7D                     LD   A,L   
3590   B4                     OR   H   
3591   CA EE 35               JP   Z,expectM_3155S125   
3594   CD CF 0F               CALL   printStr   
3597   43 6F 64 65 3A 20 5C 61 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{2} x= 1 x^"   
35AB   CD CF 0F               CALL   printStr   
35AE   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
35BD   21 02 00               LD   hl,2   
35C0   E5                     PUSH   hl   
35C1   E5                     PUSH   hl   
35C2   CD D6 10               CALL   run   
35C5   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
35CC   CD CF 0F               CALL   printStr   
35CF   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
35DC   E1                     POP   hl   
35DD   E5                     PUSH   hl   
35DE   E5                     PUSH   hl   
35DF   CD D6 10               CALL   run   
35E2   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
35ED   76                     HALT      
35EE                EXPECTM_3155S125:      
35EE   E1                     POP   HL   
35EF                          ;*Macro unroll:  test "\\a{%a} x= 0 1 x^", 1
35EF   31 00 4F               LD   SP,STACK   
35F2   CD 03 10               CALL   coldInit   
35F5   CD B2 4D               CALL   execStr   
35F8   5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 DB   "\\a{%a} x= 0 1 x^",0   
3609   E1                     POP   HL   
360A   E5                     PUSH   HL   
360B   11 01 00               LD   DE,1   
360E   B7                     OR   A   
360F   ED 52                  SBC   HL,DE   
3611   7D                     LD   A,L   
3612   B4                     OR   H   
3613   CA 73 36               JP   Z,expectM_3156S126   
3616   CD CF 0F               CALL   printStr   
3619   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 78 3D 20 30 20 31 20 78 5E 00 .CSTR   "Code: ","\\a{%a} x= 0 1 x^"   
3630   CD CF 0F               CALL   printStr   
3633   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3642   21 01 00               LD   hl,1   
3645   E5                     PUSH   hl   
3646   E5                     PUSH   hl   
3647   CD D6 10               CALL   run   
364A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3651   CD CF 0F               CALL   printStr   
3654   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3661   E1                     POP   hl   
3662   E5                     PUSH   hl   
3663   E5                     PUSH   hl   
3664   CD D6 10               CALL   run   
3667   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3672   76                     HALT      
3673                EXPECTM_3156S126:      
3673   E1                     POP   HL   
3674                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3674   31 00 4F               LD   SP,STACK   
3677   CD 03 10               CALL   coldInit   
367A   CD B2 4D               CALL   execStr   
367D   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
368F   E1                     POP   HL   
3690   E5                     PUSH   HL   
3691   11 02 00               LD   DE,2   
3694   B7                     OR   A   
3695   ED 52                  SBC   HL,DE   
3697   7D                     LD   A,L   
3698   B4                     OR   H   
3699   CA FA 36               JP   Z,expectM_3157S127   
369C   CD CF 0F               CALL   printStr   
369F   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
36B7   CD CF 0F               CALL   printStr   
36BA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
36C9   21 02 00               LD   hl,2   
36CC   E5                     PUSH   hl   
36CD   E5                     PUSH   hl   
36CE   CD D6 10               CALL   run   
36D1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
36D8   CD CF 0F               CALL   printStr   
36DB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
36E8   E1                     POP   hl   
36E9   E5                     PUSH   hl   
36EA   E5                     PUSH   hl   
36EB   CD D6 10               CALL   run   
36EE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
36F9   76                     HALT      
36FA                EXPECTM_3157S127:      
36FA   E1                     POP   HL   
36FB                          ;*Macro unroll:  test "\\a:b{%a} x= 1 2 x^", 2
36FB   31 00 4F               LD   SP,STACK   
36FE   CD 03 10               CALL   coldInit   
3701   CD B2 4D               CALL   execStr   
3704   5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\a:b{%a} x= 1 2 x^",0   
3717   E1                     POP   HL   
3718   E5                     PUSH   HL   
3719   11 02 00               LD   DE,2   
371C   B7                     OR   A   
371D   ED 52                  SBC   HL,DE   
371F   7D                     LD   A,L   
3720   B4                     OR   H   
3721   CA 83 37               JP   Z,expectM_3158S128   
3724   CD CF 0F               CALL   printStr   
3727   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a} x= 1 2 x^"   
3740   CD CF 0F               CALL   printStr   
3743   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3752   21 02 00               LD   hl,2   
3755   E5                     PUSH   hl   
3756   E5                     PUSH   hl   
3757   CD D6 10               CALL   run   
375A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3761   CD CF 0F               CALL   printStr   
3764   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3771   E1                     POP   hl   
3772   E5                     PUSH   hl   
3773   E5                     PUSH   hl   
3774   CD D6 10               CALL   run   
3777   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3782   76                     HALT      
3783                EXPECTM_3158S128:      
3783   E1                     POP   HL   
3784                          ;*Macro unroll:  test "\\ab{%b} x= 1 2 x^", 2
3784   31 00 4F               LD   SP,STACK   
3787   CD 03 10               CALL   coldInit   
378A   CD B2 4D               CALL   execStr   
378D   5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 DB   "\\ab{%b} x= 1 2 x^",0   
379F   E1                     POP   HL   
37A0   E5                     PUSH   HL   
37A1   11 02 00               LD   DE,2   
37A4   B7                     OR   A   
37A5   ED 52                  SBC   HL,DE   
37A7   7D                     LD   A,L   
37A8   B4                     OR   H   
37A9   CA 0A 38               JP   Z,expectM_3159S129   
37AC   CD CF 0F               CALL   printStr   
37AF   43 6F 64 65 3A 20 5C 61 62 7B 25 62 7D 20 78 3D 20 31 20 32 20 78 5E 00 .CSTR   "Code: ","\\ab{%b} x= 1 2 x^"   
37C7   CD CF 0F               CALL   printStr   
37CA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
37D9   21 02 00               LD   hl,2   
37DC   E5                     PUSH   hl   
37DD   E5                     PUSH   hl   
37DE   CD D6 10               CALL   run   
37E1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
37E8   CD CF 0F               CALL   printStr   
37EB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
37F8   E1                     POP   hl   
37F9   E5                     PUSH   hl   
37FA   E5                     PUSH   hl   
37FB   CD D6 10               CALL   run   
37FE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3809   76                     HALT      
380A                EXPECTM_3159S129:      
380A   E1                     POP   HL   
380B                          ;*Macro unroll:  test "\\ab{%b %a} x= 10 15 x^ -", 5
380B   31 00 4F               LD   SP,STACK   
380E   CD 03 10               CALL   coldInit   
3811   CD B2 4D               CALL   execStr   
3814   5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 DB   "\\ab{%b %a} x= 10 15 x^ -",0   
382D   E1                     POP   HL   
382E   E5                     PUSH   HL   
382F   11 05 00               LD   DE,5   
3832   B7                     OR   A   
3833   ED 52                  SBC   HL,DE   
3835   7D                     LD   A,L   
3836   B4                     OR   H   
3837   CA 9F 38               JP   Z,expectM_3160S130   
383A   CD CF 0F               CALL   printStr   
383D   43 6F 64 65 3A 20 5C 61 62 7B 25 62 20 25 61 7D 20 78 3D 20 31 30 20 31 35 20 78 5E 20 2D 00 .CSTR   "Code: ","\\ab{%b %a} x= 10 15 x^ -"   
385C   CD CF 0F               CALL   printStr   
385F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
386E   21 05 00               LD   hl,5   
3871   E5                     PUSH   hl   
3872   E5                     PUSH   hl   
3873   CD D6 10               CALL   run   
3876   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
387D   CD CF 0F               CALL   printStr   
3880   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
388D   E1                     POP   hl   
388E   E5                     PUSH   hl   
388F   E5                     PUSH   hl   
3890   CD D6 10               CALL   run   
3893   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
389E   76                     HALT      
389F                EXPECTM_3160S130:      
389F   E1                     POP   HL   
38A0                          ;*Macro unroll:  test "\\a:b{2} x= 1 x^", 2
38A0   31 00 4F               LD   SP,STACK   
38A3   CD 03 10               CALL   coldInit   
38A6   CD B2 4D               CALL   execStr   
38A9   5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 DB   "\\a:b{2} x= 1 x^",0   
38B9   E1                     POP   HL   
38BA   E5                     PUSH   HL   
38BB   11 02 00               LD   DE,2   
38BE   B7                     OR   A   
38BF   ED 52                  SBC   HL,DE   
38C1   7D                     LD   A,L   
38C2   B4                     OR   H   
38C3   CA 22 39               JP   Z,expectM_3161S131   
38C6   CD CF 0F               CALL   printStr   
38C9   43 6F 64 65 3A 20 5C 61 3A 62 7B 32 7D 20 78 3D 20 31 20 78 5E 00 .CSTR   "Code: ","\\a:b{2} x= 1 x^"   
38DF   CD CF 0F               CALL   printStr   
38E2   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
38F1   21 02 00               LD   hl,2   
38F4   E5                     PUSH   hl   
38F5   E5                     PUSH   hl   
38F6   CD D6 10               CALL   run   
38F9   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3900   CD CF 0F               CALL   printStr   
3903   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3910   E1                     POP   hl   
3911   E5                     PUSH   hl   
3912   E5                     PUSH   hl   
3913   CD D6 10               CALL   run   
3916   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3921   76                     HALT      
3922                EXPECTM_3161S131:      
3922   E1                     POP   HL   
3923                          ;*Macro unroll:  test "\\:b{100 %b = %b} x= x^", 100
3923   31 00 4F               LD   SP,STACK   
3926   CD 03 10               CALL   coldInit   
3929   CD B2 4D               CALL   execStr   
392C   5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 DB   "\\:b{100 %b = %b} x= x^",0   
3943   E1                     POP   HL   
3944   E5                     PUSH   HL   
3945   11 64 00               LD   DE,100   
3948   B7                     OR   A   
3949   ED 52                  SBC   HL,DE   
394B   7D                     LD   A,L   
394C   B4                     OR   H   
394D   CA B3 39               JP   Z,expectM_3162S132   
3950   CD CF 0F               CALL   printStr   
3953   43 6F 64 65 3A 20 5C 3A 62 7B 31 30 30 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 78 5E 00 .CSTR   "Code: ","\\:b{100 %b = %b} x= x^"   
3970   CD CF 0F               CALL   printStr   
3973   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3982   21 64 00               LD   hl,100   
3985   E5                     PUSH   hl   
3986   E5                     PUSH   hl   
3987   CD D6 10               CALL   run   
398A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3991   CD CF 0F               CALL   printStr   
3994   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
39A1   E1                     POP   hl   
39A2   E5                     PUSH   hl   
39A3   E5                     PUSH   hl   
39A4   CD D6 10               CALL   run   
39A7   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
39B2   76                     HALT      
39B3                EXPECTM_3162S132:      
39B3   E1                     POP   HL   
39B4                          ;*Macro unroll:  test "\\a:b{1 %b = %b} x= 2 x^", 1
39B4   31 00 4F               LD   SP,STACK   
39B7   CD 03 10               CALL   coldInit   
39BA   CD B2 4D               CALL   execStr   
39BD   5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{1 %b = %b} x= 2 x^",0   
39D5   E1                     POP   HL   
39D6   E5                     PUSH   HL   
39D7   11 01 00               LD   DE,1   
39DA   B7                     OR   A   
39DB   ED 52                  SBC   HL,DE   
39DD   7D                     LD   A,L   
39DE   B4                     OR   H   
39DF   CA 46 3A               JP   Z,expectM_3163S133   
39E2   CD CF 0F               CALL   printStr   
39E5   43 6F 64 65 3A 20 5C 61 3A 62 7B 31 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{1 %b = %b} x= 2 x^"   
3A03   CD CF 0F               CALL   printStr   
3A06   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3A15   21 01 00               LD   hl,1   
3A18   E5                     PUSH   hl   
3A19   E5                     PUSH   hl   
3A1A   CD D6 10               CALL   run   
3A1D   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3A24   CD CF 0F               CALL   printStr   
3A27   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3A34   E1                     POP   hl   
3A35   E5                     PUSH   hl   
3A36   E5                     PUSH   hl   
3A37   CD D6 10               CALL   run   
3A3A   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3A45   76                     HALT      
3A46                EXPECTM_3163S133:      
3A46   E1                     POP   HL   
3A47                          ;*Macro unroll:  test "\\a:b{%a %b = %b} x= 2 x^", 2
3A47   31 00 4F               LD   SP,STACK   
3A4A   CD 03 10               CALL   coldInit   
3A4D   CD B2 4D               CALL   execStr   
3A50   5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 DB   "\\a:b{%a %b = %b} x= 2 x^",0   
3A69   E1                     POP   HL   
3A6A   E5                     PUSH   HL   
3A6B   11 02 00               LD   DE,2   
3A6E   B7                     OR   A   
3A6F   ED 52                  SBC   HL,DE   
3A71   7D                     LD   A,L   
3A72   B4                     OR   H   
3A73   CA DB 3A               JP   Z,expectM_3164S134   
3A76   CD CF 0F               CALL   printStr   
3A79   43 6F 64 65 3A 20 5C 61 3A 62 7B 25 61 20 25 62 20 3D 20 25 62 7D 20 78 3D 20 32 20 78 5E 00 .CSTR   "Code: ","\\a:b{%a %b = %b} x= 2 x^"   
3A98   CD CF 0F               CALL   printStr   
3A9B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3AAA   21 02 00               LD   hl,2   
3AAD   E5                     PUSH   hl   
3AAE   E5                     PUSH   hl   
3AAF   CD D6 10               CALL   run   
3AB2   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3AB9   CD CF 0F               CALL   printStr   
3ABC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3AC9   E1                     POP   hl   
3ACA   E5                     PUSH   hl   
3ACB   E5                     PUSH   hl   
3ACC   CD D6 10               CALL   run   
3ACF   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3ADA   76                     HALT      
3ADB                EXPECTM_3164S134:      
3ADB   E1                     POP   HL   
3ADC                          ;*Macro unroll:  test "1 10 20 \\ab{/t{%a}{%b} ??}^ +", 11
3ADC   31 00 4F               LD   SP,STACK   
3ADF   CD 03 10               CALL   coldInit   
3AE2   CD B2 4D               CALL   execStr   
3AE5   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/t{%a}{%b} ??}^ +",0   
3B03   E1                     POP   HL   
3B04   E5                     PUSH   HL   
3B05   11 0B 00               LD   DE,11   
3B08   B7                     OR   A   
3B09   ED 52                  SBC   HL,DE   
3B0B   7D                     LD   A,L   
3B0C   B4                     OR   H   
3B0D   CA 7A 3B               JP   Z,expectM_3165S135   
3B10   CD CF 0F               CALL   printStr   
3B13   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 74 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/t{%a}{%b} ??}^ +"   
3B37   CD CF 0F               CALL   printStr   
3B3A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3B49   21 0B 00               LD   hl,11   
3B4C   E5                     PUSH   hl   
3B4D   E5                     PUSH   hl   
3B4E   CD D6 10               CALL   run   
3B51   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3B58   CD CF 0F               CALL   printStr   
3B5B   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3B68   E1                     POP   hl   
3B69   E5                     PUSH   hl   
3B6A   E5                     PUSH   hl   
3B6B   CD D6 10               CALL   run   
3B6E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3B79   76                     HALT      
3B7A                EXPECTM_3165S135:      
3B7A   E1                     POP   HL   
3B7B                          ;*Macro unroll:  test "1 10 20 \\ab{/f{%a}{%b} ??}^ +", 21
3B7B   31 00 4F               LD   SP,STACK   
3B7E   CD 03 10               CALL   coldInit   
3B81   CD B2 4D               CALL   execStr   
3B84   31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 DB   "1 10 20 \\ab{/f{%a}{%b} ??}^ +",0   
3BA2   E1                     POP   HL   
3BA3   E5                     PUSH   HL   
3BA4   11 15 00               LD   DE,21   
3BA7   B7                     OR   A   
3BA8   ED 52                  SBC   HL,DE   
3BAA   7D                     LD   A,L   
3BAB   B4                     OR   H   
3BAC   CA 19 3C               JP   Z,expectM_3166S136   
3BAF   CD CF 0F               CALL   printStr   
3BB2   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 61 62 7B 2F 66 7B 25 61 7D 7B 25 62 7D 20 3F 3F 7D 5E 20 2B 00 .CSTR   "Code: ","1 10 20 \\ab{/f{%a}{%b} ??}^ +"   
3BD6   CD CF 0F               CALL   printStr   
3BD9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3BE8   21 15 00               LD   hl,21   
3BEB   E5                     PUSH   hl   
3BEC   E5                     PUSH   hl   
3BED   CD D6 10               CALL   run   
3BF0   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3BF7   CD CF 0F               CALL   printStr   
3BFA   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C07   E1                     POP   hl   
3C08   E5                     PUSH   hl   
3C09   E5                     PUSH   hl   
3C0A   CD D6 10               CALL   run   
3C0D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3C18   76                     HALT      
3C19                EXPECTM_3166S136:      
3C19   E1                     POP   HL   
3C1A                          ;*Macro unroll:  test "[10 20 30] 1#", 20
3C1A   31 00 4F               LD   SP,STACK   
3C1D   CD 03 10               CALL   coldInit   
3C20   CD B2 4D               CALL   execStr   
3C23   5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 DB   "[10 20 30] 1#",0   
3C31   E1                     POP   HL   
3C32   E5                     PUSH   HL   
3C33   11 14 00               LD   DE,20   
3C36   B7                     OR   A   
3C37   ED 52                  SBC   HL,DE   
3C39   7D                     LD   A,L   
3C3A   B4                     OR   H   
3C3B   CA 98 3C               JP   Z,expectM_3167S137   
3C3E   CD CF 0F               CALL   printStr   
3C41   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 5D 20 31 23 00 .CSTR   "Code: ","[10 20 30] 1#"   
3C55   CD CF 0F               CALL   printStr   
3C58   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3C67   21 14 00               LD   hl,20   
3C6A   E5                     PUSH   hl   
3C6B   E5                     PUSH   hl   
3C6C   CD D6 10               CALL   run   
3C6F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3C76   CD CF 0F               CALL   printStr   
3C79   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3C86   E1                     POP   hl   
3C87   E5                     PUSH   hl   
3C88   E5                     PUSH   hl   
3C89   CD D6 10               CALL   run   
3C8C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3C97   76                     HALT      
3C98                EXPECTM_3167S137:      
3C98   E1                     POP   HL   
3C99                          ;*Macro unroll:  test "[10 20 30 40] /al", 4
3C99   31 00 4F               LD   SP,STACK   
3C9C   CD 03 10               CALL   coldInit   
3C9F   CD B2 4D               CALL   execStr   
3CA2   5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 00 DB   "[10 20 30 40] /al",0   
3CB4   E1                     POP   HL   
3CB5   E5                     PUSH   HL   
3CB6   11 04 00               LD   DE,4   
3CB9   B7                     OR   A   
3CBA   ED 52                  SBC   HL,DE   
3CBC   7D                     LD   A,L   
3CBD   B4                     OR   H   
3CBE   CA 1F 3D               JP   Z,expectM_3168S138   
3CC1   CD CF 0F               CALL   printStr   
3CC4   43 6F 64 65 3A 20 5B 31 30 20 32 30 20 33 30 20 34 30 5D 20 2F 61 6C 00 .CSTR   "Code: ","[10 20 30 40] /al"   
3CDC   CD CF 0F               CALL   printStr   
3CDF   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3CEE   21 04 00               LD   hl,4   
3CF1   E5                     PUSH   hl   
3CF2   E5                     PUSH   hl   
3CF3   CD D6 10               CALL   run   
3CF6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3CFD   CD CF 0F               CALL   printStr   
3D00   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D0D   E1                     POP   hl   
3D0E   E5                     PUSH   hl   
3D0F   E5                     PUSH   hl   
3D10   CD D6 10               CALL   run   
3D13   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3D1E   76                     HALT      
3D1F                EXPECTM_3168S138:      
3D1F   E1                     POP   HL   
3D20                          ;*Macro unroll:  test "/bm [1 2 3] 1#", 2
3D20   31 00 4F               LD   SP,STACK   
3D23   CD 03 10               CALL   coldInit   
3D26   CD B2 4D               CALL   execStr   
3D29   2F 62 6D 20 5B 31 20 32 20 33 5D 20 31 23 00 DB   "/bm [1 2 3] 1#",0   
3D38   E1                     POP   HL   
3D39   E5                     PUSH   HL   
3D3A   11 02 00               LD   DE,2   
3D3D   B7                     OR   A   
3D3E   ED 52                  SBC   HL,DE   
3D40   7D                     LD   A,L   
3D41   B4                     OR   H   
3D42   CA A0 3D               JP   Z,expectM_3169S139   
3D45   CD CF 0F               CALL   printStr   
3D48   43 6F 64 65 3A 20 2F 62 6D 20 5B 31 20 32 20 33 5D 20 31 23 00 .CSTR   "Code: ","/bm [1 2 3] 1#"   
3D5D   CD CF 0F               CALL   printStr   
3D60   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3D6F   21 02 00               LD   hl,2   
3D72   E5                     PUSH   hl   
3D73   E5                     PUSH   hl   
3D74   CD D6 10               CALL   run   
3D77   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3D7E   CD CF 0F               CALL   printStr   
3D81   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3D8E   E1                     POP   hl   
3D8F   E5                     PUSH   hl   
3D90   E5                     PUSH   hl   
3D91   CD D6 10               CALL   run   
3D94   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3D9F   76                     HALT      
3DA0                EXPECTM_3169S139:      
3DA0   E1                     POP   HL   
3DA1                          ;*Macro unroll:  test "/bm [_A _B _C] 1#", 66
3DA1   31 00 4F               LD   SP,STACK   
3DA4   CD 03 10               CALL   coldInit   
3DA7   CD B2 4D               CALL   execStr   
3DAA   2F 62 6D 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 23 00 DB   "/bm [_A _B _C] 1#",0   
3DBC   E1                     POP   HL   
3DBD   E5                     PUSH   HL   
3DBE   11 42 00               LD   DE,66   
3DC1   B7                     OR   A   
3DC2   ED 52                  SBC   HL,DE   
3DC4   7D                     LD   A,L   
3DC5   B4                     OR   H   
3DC6   CA 27 3E               JP   Z,expectM_3170S140   
3DC9   CD CF 0F               CALL   printStr   
3DCC   43 6F 64 65 3A 20 2F 62 6D 20 5B 5F 41 20 5F 42 20 5F 43 5D 20 31 23 00 .CSTR   "Code: ","/bm [_A _B _C] 1#"   
3DE4   CD CF 0F               CALL   printStr   
3DE7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3DF6   21 42 00               LD   hl,66   
3DF9   E5                     PUSH   hl   
3DFA   E5                     PUSH   hl   
3DFB   CD D6 10               CALL   run   
3DFE   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3E05   CD CF 0F               CALL   printStr   
3E08   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3E15   E1                     POP   hl   
3E16   E5                     PUSH   hl   
3E17   E5                     PUSH   hl   
3E18   CD D6 10               CALL   run   
3E1B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3E26   76                     HALT      
3E27                EXPECTM_3170S140:      
3E27   E1                     POP   HL   
3E28                          ;*Macro unroll:  test "[{10}{20}{30}] 0#^ ", 10
3E28   31 00 4F               LD   SP,STACK   
3E2B   CD 03 10               CALL   coldInit   
3E2E   CD B2 4D               CALL   execStr   
3E31   5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 DB   "[{10}{20}{30}] 0#^ ",0   
3E45   E1                     POP   HL   
3E46   E5                     PUSH   HL   
3E47   11 0A 00               LD   DE,10   
3E4A   B7                     OR   A   
3E4B   ED 52                  SBC   HL,DE   
3E4D   7D                     LD   A,L   
3E4E   B4                     OR   H   
3E4F   CA B2 3E               JP   Z,expectM_3171S141   
3E52   CD CF 0F               CALL   printStr   
3E55   43 6F 64 65 3A 20 5B 7B 31 30 7D 7B 32 30 7D 7B 33 30 7D 5D 20 30 23 5E 20 00 .CSTR   "Code: ","[{10}{20}{30}] 0#^ "   
3E6F   CD CF 0F               CALL   printStr   
3E72   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3E81   21 0A 00               LD   hl,10   
3E84   E5                     PUSH   hl   
3E85   E5                     PUSH   hl   
3E86   CD D6 10               CALL   run   
3E89   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3E90   CD CF 0F               CALL   printStr   
3E93   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3EA0   E1                     POP   hl   
3EA1   E5                     PUSH   hl   
3EA2   E5                     PUSH   hl   
3EA3   CD D6 10               CALL   run   
3EA6   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3EB1   76                     HALT      
3EB2                EXPECTM_3171S141:      
3EB2   E1                     POP   HL   
3EB3                          ;*Macro unroll:  test "10 20 \\ab{[{%a}{%b}] 0#^}^", 10
3EB3   31 00 4F               LD   SP,STACK   
3EB6   CD 03 10               CALL   coldInit   
3EB9   CD B2 4D               CALL   execStr   
3EBC   31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 DB   "10 20 \\ab{[{%a}{%b}] 0#^}^",0   
3ED7   E1                     POP   HL   
3ED8   E5                     PUSH   HL   
3ED9   11 0A 00               LD   DE,10   
3EDC   B7                     OR   A   
3EDD   ED 52                  SBC   HL,DE   
3EDF   7D                     LD   A,L   
3EE0   B4                     OR   H   
3EE1   CA 4B 3F               JP   Z,expectM_3172S142   
3EE4   CD CF 0F               CALL   printStr   
3EE7   43 6F 64 65 3A 20 31 30 20 32 30 20 5C 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 30 23 5E 7D 5E 00 .CSTR   "Code: ","10 20 \\ab{[{%a}{%b}] 0#^}^"   
3F08   CD CF 0F               CALL   printStr   
3F0B   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3F1A   21 0A 00               LD   hl,10   
3F1D   E5                     PUSH   hl   
3F1E   E5                     PUSH   hl   
3F1F   CD D6 10               CALL   run   
3F22   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3F29   CD CF 0F               CALL   printStr   
3F2C   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3F39   E1                     POP   hl   
3F3A   E5                     PUSH   hl   
3F3B   E5                     PUSH   hl   
3F3C   CD D6 10               CALL   run   
3F3F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3F4A   76                     HALT      
3F4B                EXPECTM_3172S142:      
3F4B   E1                     POP   HL   
3F4C                          ;*Macro unroll:  test "0 10 20 \\iab{[{%a}{%b}] %i#^}^", 10
3F4C   31 00 4F               LD   SP,STACK   
3F4F   CD 03 10               CALL   coldInit   
3F52   CD B2 4D               CALL   execStr   
3F55   30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "0 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
3F74   E1                     POP   HL   
3F75   E5                     PUSH   HL   
3F76   11 0A 00               LD   DE,10   
3F79   B7                     OR   A   
3F7A   ED 52                  SBC   HL,DE   
3F7C   7D                     LD   A,L   
3F7D   B4                     OR   H   
3F7E   CA EC 3F               JP   Z,expectM_3173S143   
3F81   CD CF 0F               CALL   printStr   
3F84   43 6F 64 65 3A 20 30 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","0 10 20 \\iab{[{%a}{%b}] %i#^}^"   
3FA9   CD CF 0F               CALL   printStr   
3FAC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
3FBB   21 0A 00               LD   hl,10   
3FBE   E5                     PUSH   hl   
3FBF   E5                     PUSH   hl   
3FC0   CD D6 10               CALL   run   
3FC3   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
3FCA   CD CF 0F               CALL   printStr   
3FCD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
3FDA   E1                     POP   hl   
3FDB   E5                     PUSH   hl   
3FDC   E5                     PUSH   hl   
3FDD   CD D6 10               CALL   run   
3FE0   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
3FEB   76                     HALT      
3FEC                EXPECTM_3173S143:      
3FEC   E1                     POP   HL   
3FED                          ;*Macro unroll:  test "1 10 20 \\iab{[{%a}{%b}] %i#^}^", 20
3FED   31 00 4F               LD   SP,STACK   
3FF0   CD 03 10               CALL   coldInit   
3FF3   CD B2 4D               CALL   execStr   
3FF6   31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 DB   "1 10 20 \\iab{[{%a}{%b}] %i#^}^",0   
4015   E1                     POP   HL   
4016   E5                     PUSH   HL   
4017   11 14 00               LD   DE,20   
401A   B7                     OR   A   
401B   ED 52                  SBC   HL,DE   
401D   7D                     LD   A,L   
401E   B4                     OR   H   
401F   CA 8D 40               JP   Z,expectM_3174S144   
4022   CD CF 0F               CALL   printStr   
4025   43 6F 64 65 3A 20 31 20 31 30 20 32 30 20 5C 69 61 62 7B 5B 7B 25 61 7D 7B 25 62 7D 5D 20 25 69 23 5E 7D 5E 00 .CSTR   "Code: ","1 10 20 \\iab{[{%a}{%b}] %i#^}^"   
404A   CD CF 0F               CALL   printStr   
404D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
405C   21 14 00               LD   hl,20   
405F   E5                     PUSH   hl   
4060   E5                     PUSH   hl   
4061   CD D6 10               CALL   run   
4064   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
406B   CD CF 0F               CALL   printStr   
406E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
407B   E1                     POP   hl   
407C   E5                     PUSH   hl   
407D   E5                     PUSH   hl   
407E   CD D6 10               CALL   run   
4081   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
408C   76                     HALT      
408D                EXPECTM_3174S144:      
408D   E1                     POP   HL   
408E                          ;*Macro unroll:  test "3i= ( i i-- i/br )^ + +", 6
408E   31 00 4F               LD   SP,STACK   
4091   CD 03 10               CALL   coldInit   
4094   CD B2 4D               CALL   execStr   
4097   33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 DB   "3i= ( i i-- i/br )^ + +",0   
40AF   E1                     POP   HL   
40B0   E5                     PUSH   HL   
40B1   11 06 00               LD   DE,6   
40B4   B7                     OR   A   
40B5   ED 52                  SBC   HL,DE   
40B7   7D                     LD   A,L   
40B8   B4                     OR   H   
40B9   CA 20 41               JP   Z,expectM_3175S145   
40BC   CD CF 0F               CALL   printStr   
40BF   43 6F 64 65 3A 20 33 69 3D 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 2B 20 2B 00 .CSTR   "Code: ","3i= ( i i-- i/br )^ + +"   
40DD   CD CF 0F               CALL   printStr   
40E0   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
40EF   21 06 00               LD   hl,6   
40F2   E5                     PUSH   hl   
40F3   E5                     PUSH   hl   
40F4   CD D6 10               CALL   run   
40F7   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
40FE   CD CF 0F               CALL   printStr   
4101   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
410E   E1                     POP   hl   
410F   E5                     PUSH   hl   
4110   E5                     PUSH   hl   
4111   CD D6 10               CALL   run   
4114   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
411F   76                     HALT      
4120                EXPECTM_3175S145:      
4120   E1                     POP   HL   
4121                          ;*Macro unroll:  test "3i= [ ( i i-- i/br )^ ] 1#", 2
4121   31 00 4F               LD   SP,STACK   
4124   CD 03 10               CALL   coldInit   
4127   CD B2 4D               CALL   execStr   
412A   33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 DB   "3i= [ ( i i-- i/br )^ ] 1#",0   
4145   E1                     POP   HL   
4146   E5                     PUSH   HL   
4147   11 02 00               LD   DE,2   
414A   B7                     OR   A   
414B   ED 52                  SBC   HL,DE   
414D   7D                     LD   A,L   
414E   B4                     OR   H   
414F   CA B9 41               JP   Z,expectM_3176S146   
4152   CD CF 0F               CALL   printStr   
4155   43 6F 64 65 3A 20 33 69 3D 20 5B 20 28 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 5D 20 31 23 00 .CSTR   "Code: ","3i= [ ( i i-- i/br )^ ] 1#"   
4176   CD CF 0F               CALL   printStr   
4179   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4188   21 02 00               LD   hl,2   
418B   E5                     PUSH   hl   
418C   E5                     PUSH   hl   
418D   CD D6 10               CALL   run   
4190   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4197   CD CF 0F               CALL   printStr   
419A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
41A7   E1                     POP   hl   
41A8   E5                     PUSH   hl   
41A9   E5                     PUSH   hl   
41AA   CD D6 10               CALL   run   
41AD   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
41B8   76                     HALT      
41B9                EXPECTM_3176S146:      
41B9   E1                     POP   HL   
41BA                          ;*Macro unroll:  test "0 j= 4 i= ( i j + j= i i-- i/br )^ j ", 10
41BA   31 00 4F               LD   SP,STACK   
41BD   CD 03 10               CALL   coldInit   
41C0   CD B2 4D               CALL   execStr   
41C3   30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 DB   "0 j= 4 i= ( i j + j= i i-- i/br )^ j ",0   
41E9   E1                     POP   HL   
41EA   E5                     PUSH   HL   
41EB   11 0A 00               LD   DE,10   
41EE   B7                     OR   A   
41EF   ED 52                  SBC   HL,DE   
41F1   7D                     LD   A,L   
41F2   B4                     OR   H   
41F3   CA 68 42               JP   Z,expectM_3177S147   
41F6   CD CF 0F               CALL   printStr   
41F9   43 6F 64 65 3A 20 30 20 6A 3D 20 34 20 69 3D 20 28 20 69 20 6A 20 2B 20 6A 3D 20 69 20 69 2D 2D 20 69 2F 62 72 20 29 5E 20 6A 20 00 .CSTR   "Code: ","0 j= 4 i= ( i j + j= i i-- i/br )^ j "   
4225   CD CF 0F               CALL   printStr   
4228   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4237   21 0A 00               LD   hl,10   
423A   E5                     PUSH   hl   
423B   E5                     PUSH   hl   
423C   CD D6 10               CALL   run   
423F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4246   CD CF 0F               CALL   printStr   
4249   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4256   E1                     POP   hl   
4257   E5                     PUSH   hl   
4258   E5                     PUSH   hl   
4259   CD D6 10               CALL   run   
425C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4267   76                     HALT      
4268                EXPECTM_3177S147:      
4268   E1                     POP   HL   
4269                          ;*Macro unroll:  test "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^", 6
4269   31 00 4F               LD   SP,STACK   
426C   CD 03 10               CALL   coldInit   
426F   CD B2 4D               CALL   execStr   
4272   33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 DB   "3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^",0   
429D   E1                     POP   HL   
429E   E5                     PUSH   HL   
429F   11 06 00               LD   DE,6   
42A2   B7                     OR   A   
42A3   ED 52                  SBC   HL,DE   
42A5   7D                     LD   A,L   
42A6   B4                     OR   H   
42A7   CA 21 43               JP   Z,expectM_3178S148   
42AA   CD CF 0F               CALL   printStr   
42AD   43 6F 64 65 3A 20 33 20 5C 61 3A 62 63 7B 25 61 20 25 63 20 3D 20 28 20 25 63 20 25 63 20 2D 2D 20 25 63 20 2F 62 72 20 29 5E 20 2B 20 2B 7D 5E 00 .CSTR   "Code: ","3 \\a:bc{%a %c = ( %c %c -- %c /br )^ + +}^"   
42DE   CD CF 0F               CALL   printStr   
42E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
42F0   21 06 00               LD   hl,6   
42F3   E5                     PUSH   hl   
42F4   E5                     PUSH   hl   
42F5   CD D6 10               CALL   run   
42F8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
42FF   CD CF 0F               CALL   printStr   
4302   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
430F   E1                     POP   hl   
4310   E5                     PUSH   hl   
4311   E5                     PUSH   hl   
4312   CD D6 10               CALL   run   
4315   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4320   76                     HALT      
4321                EXPECTM_3178S148:      
4321   E1                     POP   HL   
4322                          ;*Macro unroll:  test "/t \\f{1 %f/br 2 +}^",3
4322   31 00 4F               LD   SP,STACK   
4325   CD 03 10               CALL   coldInit   
4328   CD B2 4D               CALL   execStr   
432B   2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/t \\f{1 %f/br 2 +}^",0   
433F   E1                     POP   HL   
4340   E5                     PUSH   HL   
4341   11 03 00               LD   DE,3   
4344   B7                     OR   A   
4345   ED 52                  SBC   HL,DE   
4347   7D                     LD   A,L   
4348   B4                     OR   H   
4349   CA AC 43               JP   Z,expectM_3179S149   
434C   CD CF 0F               CALL   printStr   
434F   43 6F 64 65 3A 20 2F 74 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/t \\f{1 %f/br 2 +}^"   
4369   CD CF 0F               CALL   printStr   
436C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
437B   21 03 00               LD   hl,3   
437E   E5                     PUSH   hl   
437F   E5                     PUSH   hl   
4380   CD D6 10               CALL   run   
4383   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
438A   CD CF 0F               CALL   printStr   
438D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
439A   E1                     POP   hl   
439B   E5                     PUSH   hl   
439C   E5                     PUSH   hl   
439D   CD D6 10               CALL   run   
43A0   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
43AB   76                     HALT      
43AC                EXPECTM_3179S149:      
43AC   E1                     POP   HL   
43AD                          ;*Macro unroll:  test "/f \\f{1 %f/br 2 +}^",1
43AD   31 00 4F               LD   SP,STACK   
43B0   CD 03 10               CALL   coldInit   
43B3   CD B2 4D               CALL   execStr   
43B6   2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 DB   "/f \\f{1 %f/br 2 +}^",0   
43CA   E1                     POP   HL   
43CB   E5                     PUSH   HL   
43CC   11 01 00               LD   DE,1   
43CF   B7                     OR   A   
43D0   ED 52                  SBC   HL,DE   
43D2   7D                     LD   A,L   
43D3   B4                     OR   H   
43D4   CA 37 44               JP   Z,expectM_3180S150   
43D7   CD CF 0F               CALL   printStr   
43DA   43 6F 64 65 3A 20 2F 66 20 5C 66 7B 31 20 25 66 2F 62 72 20 32 20 2B 7D 5E 00 .CSTR   "Code: ","/f \\f{1 %f/br 2 +}^"   
43F4   CD CF 0F               CALL   printStr   
43F7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4406   21 01 00               LD   hl,1   
4409   E5                     PUSH   hl   
440A   E5                     PUSH   hl   
440B   CD D6 10               CALL   run   
440E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4415   CD CF 0F               CALL   printStr   
4418   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4425   E1                     POP   hl   
4426   E5                     PUSH   hl   
4427   E5                     PUSH   hl   
4428   CD D6 10               CALL   run   
442B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4436   76                     HALT      
4437                EXPECTM_3180S150:      
4437   E1                     POP   HL   
4438                          ;*Macro unroll:  test "_A 1 - /ad", NUL
4438   31 00 4F               LD   SP,STACK   
443B   CD 03 10               CALL   coldInit   
443E   CD B2 4D               CALL   execStr   
4441   5F 41 20 31 20 2D 20 2F 61 64 00 DB   "_A 1 - /ad",0   
444C   E1                     POP   HL   
444D   E5                     PUSH   HL   
444E   11 00 00               LD   DE,NUL   
4451   B7                     OR   A   
4452   ED 52                  SBC   HL,DE   
4454   7D                     LD   A,L   
4455   B4                     OR   H   
4456   CA B0 44               JP   Z,expectM_3181S151   
4459   CD CF 0F               CALL   printStr   
445C   43 6F 64 65 3A 20 5F 41 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","_A 1 - /ad"   
446D   CD CF 0F               CALL   printStr   
4470   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
447F   21 00 00               LD   hl,NUL   
4482   E5                     PUSH   hl   
4483   E5                     PUSH   hl   
4484   CD D6 10               CALL   run   
4487   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
448E   CD CF 0F               CALL   printStr   
4491   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
449E   E1                     POP   hl   
449F   E5                     PUSH   hl   
44A0   E5                     PUSH   hl   
44A1   CD D6 10               CALL   run   
44A4   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
44AF   76                     HALT      
44B0                EXPECTM_3181S151:      
44B0   E1                     POP   HL   
44B1                          ;*Macro unroll:  test "_Z 1 + /ad", NUL
44B1   31 00 4F               LD   SP,STACK   
44B4   CD 03 10               CALL   coldInit   
44B7   CD B2 4D               CALL   execStr   
44BA   5F 5A 20 31 20 2B 20 2F 61 64 00 DB   "_Z 1 + /ad",0   
44C5   E1                     POP   HL   
44C6   E5                     PUSH   HL   
44C7   11 00 00               LD   DE,NUL   
44CA   B7                     OR   A   
44CB   ED 52                  SBC   HL,DE   
44CD   7D                     LD   A,L   
44CE   B4                     OR   H   
44CF   CA 29 45               JP   Z,expectM_3182S152   
44D2   CD CF 0F               CALL   printStr   
44D5   43 6F 64 65 3A 20 5F 5A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","_Z 1 + /ad"   
44E6   CD CF 0F               CALL   printStr   
44E9   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
44F8   21 00 00               LD   hl,NUL   
44FB   E5                     PUSH   hl   
44FC   E5                     PUSH   hl   
44FD   CD D6 10               CALL   run   
4500   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4507   CD CF 0F               CALL   printStr   
450A   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4517   E1                     POP   hl   
4518   E5                     PUSH   hl   
4519   E5                     PUSH   hl   
451A   CD D6 10               CALL   run   
451D   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4528   76                     HALT      
4529                EXPECTM_3182S152:      
4529   E1                     POP   HL   
452A                          ;*Macro unroll:  test "_a 1 - /ad", NUL
452A   31 00 4F               LD   SP,STACK   
452D   CD 03 10               CALL   coldInit   
4530   CD B2 4D               CALL   execStr   
4533   5F 61 20 31 20 2D 20 2F 61 64 00 DB   "_a 1 - /ad",0   
453E   E1                     POP   HL   
453F   E5                     PUSH   HL   
4540   11 00 00               LD   DE,NUL   
4543   B7                     OR   A   
4544   ED 52                  SBC   HL,DE   
4546   7D                     LD   A,L   
4547   B4                     OR   H   
4548   CA A2 45               JP   Z,expectM_3183S153   
454B   CD CF 0F               CALL   printStr   
454E   43 6F 64 65 3A 20 5F 61 20 31 20 2D 20 2F 61 64 00 .CSTR   "Code: ","_a 1 - /ad"   
455F   CD CF 0F               CALL   printStr   
4562   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4571   21 00 00               LD   hl,NUL   
4574   E5                     PUSH   hl   
4575   E5                     PUSH   hl   
4576   CD D6 10               CALL   run   
4579   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4580   CD CF 0F               CALL   printStr   
4583   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4590   E1                     POP   hl   
4591   E5                     PUSH   hl   
4592   E5                     PUSH   hl   
4593   CD D6 10               CALL   run   
4596   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
45A1   76                     HALT      
45A2                EXPECTM_3183S153:      
45A2   E1                     POP   HL   
45A3                          ;*Macro unroll:  test "_z 1 + /ad", NUL
45A3   31 00 4F               LD   SP,STACK   
45A6   CD 03 10               CALL   coldInit   
45A9   CD B2 4D               CALL   execStr   
45AC   5F 7A 20 31 20 2B 20 2F 61 64 00 DB   "_z 1 + /ad",0   
45B7   E1                     POP   HL   
45B8   E5                     PUSH   HL   
45B9   11 00 00               LD   DE,NUL   
45BC   B7                     OR   A   
45BD   ED 52                  SBC   HL,DE   
45BF   7D                     LD   A,L   
45C0   B4                     OR   H   
45C1   CA 1B 46               JP   Z,expectM_3184S154   
45C4   CD CF 0F               CALL   printStr   
45C7   43 6F 64 65 3A 20 5F 7A 20 31 20 2B 20 2F 61 64 00 .CSTR   "Code: ","_z 1 + /ad"   
45D8   CD CF 0F               CALL   printStr   
45DB   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
45EA   21 00 00               LD   hl,NUL   
45ED   E5                     PUSH   hl   
45EE   E5                     PUSH   hl   
45EF   CD D6 10               CALL   run   
45F2   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
45F9   CD CF 0F               CALL   printStr   
45FC   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4609   E1                     POP   hl   
460A   E5                     PUSH   hl   
460B   E5                     PUSH   hl   
460C   CD D6 10               CALL   run   
460F   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
461A   76                     HALT      
461B                EXPECTM_3184S154:      
461B   E1                     POP   HL   
461C                          ;*Macro unroll:  test "_z /ad", VARS + (("z"-"a")+("Z"-"A")+1)*2
461C   31 00 4F               LD   SP,STACK   
461F   CD 03 10               CALL   coldInit   
4622   CD B2 4D               CALL   execStr   
4625   5F 7A 20 2F 61 64 00   DB   "_z /ad",0   
462C   E1                     POP   HL   
462D   E5                     PUSH   HL   
462E   11 66 51               LD   DE,VARS + (("z"-"a")+("Z"-"A")+1)*2   
4631   B7                     OR   A   
4632   ED 52                  SBC   HL,DE   
4634   7D                     LD   A,L   
4635   B4                     OR   H   
4636   CA 8C 46               JP   Z,expectM_3185S155   
4639   CD CF 0F               CALL   printStr   
463C   43 6F 64 65 3A 20 5F 7A 20 2F 61 64 00 .CSTR   "Code: ","_z /ad"   
4649   CD CF 0F               CALL   printStr   
464C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
465B   21 66 51               LD   hl,VARS + (("z"-"a")+("Z"-"A")+1)*2   
465E   E5                     PUSH   hl   
465F   E5                     PUSH   hl   
4660   CD D6 10               CALL   run   
4663   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
466A   CD CF 0F               CALL   printStr   
466D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
467A   E1                     POP   hl   
467B   E5                     PUSH   hl   
467C   E5                     PUSH   hl   
467D   CD D6 10               CALL   run   
4680   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
468B   76                     HALT      
468C                EXPECTM_3185S155:      
468C   E1                     POP   HL   
468D                          ;*Macro unroll:  test "_a /ad", VARS + ("Z"-"A"+1)*2
468D   31 00 4F               LD   SP,STACK   
4690   CD 03 10               CALL   coldInit   
4693   CD B2 4D               CALL   execStr   
4696   5F 61 20 2F 61 64 00   DB   "_a /ad",0   
469D   E1                     POP   HL   
469E   E5                     PUSH   HL   
469F   11 34 51               LD   DE,VARS + ("Z"-"A"+1)*2   
46A2   B7                     OR   A   
46A3   ED 52                  SBC   HL,DE   
46A5   7D                     LD   A,L   
46A6   B4                     OR   H   
46A7   CA FD 46               JP   Z,expectM_3186S156   
46AA   CD CF 0F               CALL   printStr   
46AD   43 6F 64 65 3A 20 5F 61 20 2F 61 64 00 .CSTR   "Code: ","_a /ad"   
46BA   CD CF 0F               CALL   printStr   
46BD   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
46CC   21 34 51               LD   hl,VARS + ("Z"-"A"+1)*2   
46CF   E5                     PUSH   hl   
46D0   E5                     PUSH   hl   
46D1   CD D6 10               CALL   run   
46D4   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
46DB   CD CF 0F               CALL   printStr   
46DE   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
46EB   E1                     POP   hl   
46EC   E5                     PUSH   hl   
46ED   E5                     PUSH   hl   
46EE   CD D6 10               CALL   run   
46F1   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
46FC   76                     HALT      
46FD                EXPECTM_3186S156:      
46FD   E1                     POP   HL   
46FE                          ;*Macro unroll:  test "_Z /ad", VARS + ("Z"-"A")*2
46FE   31 00 4F               LD   SP,STACK   
4701   CD 03 10               CALL   coldInit   
4704   CD B2 4D               CALL   execStr   
4707   5F 5A 20 2F 61 64 00   DB   "_Z /ad",0   
470E   E1                     POP   HL   
470F   E5                     PUSH   HL   
4710   11 32 51               LD   DE,VARS + ("Z"-"A")*2   
4713   B7                     OR   A   
4714   ED 52                  SBC   HL,DE   
4716   7D                     LD   A,L   
4717   B4                     OR   H   
4718   CA 6E 47               JP   Z,expectM_3187S157   
471B   CD CF 0F               CALL   printStr   
471E   43 6F 64 65 3A 20 5F 5A 20 2F 61 64 00 .CSTR   "Code: ","_Z /ad"   
472B   CD CF 0F               CALL   printStr   
472E   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
473D   21 32 51               LD   hl,VARS + ("Z"-"A")*2   
4740   E5                     PUSH   hl   
4741   E5                     PUSH   hl   
4742   CD D6 10               CALL   run   
4745   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
474C   CD CF 0F               CALL   printStr   
474F   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
475C   E1                     POP   hl   
475D   E5                     PUSH   hl   
475E   E5                     PUSH   hl   
475F   CD D6 10               CALL   run   
4762   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
476D   76                     HALT      
476E                EXPECTM_3187S157:      
476E   E1                     POP   HL   
476F                          ;*Macro unroll:  test "_A /ad", VARS
476F   31 00 4F               LD   SP,STACK   
4772   CD 03 10               CALL   coldInit   
4775   CD B2 4D               CALL   execStr   
4778   5F 41 20 2F 61 64 00   DB   "_A /ad",0   
477F   E1                     POP   HL   
4780   E5                     PUSH   HL   
4781   11 00 51               LD   DE,VARS   
4784   B7                     OR   A   
4785   ED 52                  SBC   HL,DE   
4787   7D                     LD   A,L   
4788   B4                     OR   H   
4789   CA DF 47               JP   Z,expectM_3188S158   
478C   CD CF 0F               CALL   printStr   
478F   43 6F 64 65 3A 20 5F 41 20 2F 61 64 00 .CSTR   "Code: ","_A /ad"   
479C   CD CF 0F               CALL   printStr   
479F   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
47AE   21 00 51               LD   hl,VARS   
47B1   E5                     PUSH   hl   
47B2   E5                     PUSH   hl   
47B3   CD D6 10               CALL   run   
47B6   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
47BD   CD CF 0F               CALL   printStr   
47C0   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
47CD   E1                     POP   hl   
47CE   E5                     PUSH   hl   
47CF   E5                     PUSH   hl   
47D0   CD D6 10               CALL   run   
47D3   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
47DE   76                     HALT      
47DF                EXPECTM_3188S158:      
47DF   E1                     POP   HL   
47E0                          ;*Macro unroll:  test "\\a{%a} F=1F^", 1
47E0   31 00 4F               LD   SP,STACK   
47E3   CD 03 10               CALL   coldInit   
47E6   CD B2 4D               CALL   execStr   
47E9   5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 DB   "\\a{%a} F=1F^",0   
47F6   E1                     POP   HL   
47F7   E5                     PUSH   HL   
47F8   11 01 00               LD   DE,1   
47FB   B7                     OR   A   
47FC   ED 52                  SBC   HL,DE   
47FE   7D                     LD   A,L   
47FF   B4                     OR   H   
4800   CA 5C 48               JP   Z,expectM_3189S159   
4803   CD CF 0F               CALL   printStr   
4806   43 6F 64 65 3A 20 5C 61 7B 25 61 7D 20 46 3D 31 46 5E 00 .CSTR   "Code: ","\\a{%a} F=1F^"   
4819   CD CF 0F               CALL   printStr   
481C   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
482B   21 01 00               LD   hl,1   
482E   E5                     PUSH   hl   
482F   E5                     PUSH   hl   
4830   CD D6 10               CALL   run   
4833   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
483A   CD CF 0F               CALL   printStr   
483D   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
484A   E1                     POP   hl   
484B   E5                     PUSH   hl   
484C   E5                     PUSH   hl   
484D   CD D6 10               CALL   run   
4850   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
485B   76                     HALT      
485C                EXPECTM_3189S159:      
485C   E1                     POP   HL   
485D                          ;*Macro unroll:  test "1 \\b{\\a{%a}}^F= 3F^",3
485D   31 00 4F               LD   SP,STACK   
4860   CD 03 10               CALL   coldInit   
4863   CD B2 4D               CALL   execStr   
4866   31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a}}^F= 3F^",0   
487A   E1                     POP   HL   
487B   E5                     PUSH   HL   
487C   11 03 00               LD   DE,3   
487F   B7                     OR   A   
4880   ED 52                  SBC   HL,DE   
4882   7D                     LD   A,L   
4883   B4                     OR   H   
4884   CA E7 48               JP   Z,expectM_3190S160   
4887   CD CF 0F               CALL   printStr   
488A   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a}}^F= 3F^"   
48A4   CD CF 0F               CALL   printStr   
48A7   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
48B6   21 03 00               LD   hl,3   
48B9   E5                     PUSH   hl   
48BA   E5                     PUSH   hl   
48BB   CD D6 10               CALL   run   
48BE   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
48C5   CD CF 0F               CALL   printStr   
48C8   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
48D5   E1                     POP   hl   
48D6   E5                     PUSH   hl   
48D7   E5                     PUSH   hl   
48D8   CD D6 10               CALL   run   
48DB   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
48E6   76                     HALT      
48E7                EXPECTM_3190S160:      
48E7   E1                     POP   HL   
48E8                          ;*Macro unroll:  test "1 \\b{\\a{%a%b-}}^F= 3F^",2
48E8   31 00 4F               LD   SP,STACK   
48EB   CD 03 10               CALL   coldInit   
48EE   CD B2 4D               CALL   execStr   
48F1   31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a{%a%b-}}^F= 3F^",0   
4908   E1                     POP   HL   
4909   E5                     PUSH   HL   
490A   11 02 00               LD   DE,2   
490D   B7                     OR   A   
490E   ED 52                  SBC   HL,DE   
4910   7D                     LD   A,L   
4911   B4                     OR   H   
4912   CA 78 49               JP   Z,expectM_3191S161   
4915   CD CF 0F               CALL   printStr   
4918   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 7B 25 61 25 62 2D 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a{%a%b-}}^F= 3F^"   
4935   CD CF 0F               CALL   printStr   
4938   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4947   21 02 00               LD   hl,2   
494A   E5                     PUSH   hl   
494B   E5                     PUSH   hl   
494C   CD D6 10               CALL   run   
494F   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4956   CD CF 0F               CALL   printStr   
4959   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4966   E1                     POP   hl   
4967   E5                     PUSH   hl   
4968   E5                     PUSH   hl   
4969   CD D6 10               CALL   run   
496C   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4977   76                     HALT      
4978                EXPECTM_3191S161:      
4978   E1                     POP   HL   
4979                          ;*Macro unroll:  test "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",1
4979   31 00 4F               LD   SP,STACK   
497C   CD 03 10               CALL   coldInit   
497F   CD B2 4D               CALL   execStr   
4982   31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^",0   
49A5   E1                     POP   HL   
49A6   E5                     PUSH   HL   
49A7   11 01 00               LD   DE,1   
49AA   B7                     OR   A   
49AB   ED 52                  SBC   HL,DE   
49AD   7D                     LD   A,L   
49AE   B4                     OR   H   
49AF   CA 21 4A               JP   Z,expectM_3192S162   
49B2   CD CF 0F               CALL   printStr   
49B5   43 6F 64 65 3A 20 31 20 5C 62 7B 5C 61 3A 63 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b{\\a:c{%a%b-%c= %c--%c}}^F= 3F^"   
49DE   CD CF 0F               CALL   printStr   
49E1   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
49F0   21 01 00               LD   hl,1   
49F3   E5                     PUSH   hl   
49F4   E5                     PUSH   hl   
49F5   CD D6 10               CALL   run   
49F8   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
49FF   CD CF 0F               CALL   printStr   
4A02   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4A0F   E1                     POP   hl   
4A10   E5                     PUSH   hl   
4A11   E5                     PUSH   hl   
4A12   CD D6 10               CALL   run   
4A15   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4A20   76                     HALT      
4A21                EXPECTM_3192S162:      
4A21   E1                     POP   HL   
4A22                          ;*Macro unroll:  test "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",1
4A22   31 00 4F               LD   SP,STACK   
4A25   CD 03 10               CALL   coldInit   
4A28   CD B2 4D               CALL   execStr   
4A2B   31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^",0   
4A4E   E1                     POP   HL   
4A4F   E5                     PUSH   HL   
4A50   11 01 00               LD   DE,1   
4A53   B7                     OR   A   
4A54   ED 52                  SBC   HL,DE   
4A56   7D                     LD   A,L   
4A57   B4                     OR   H   
4A58   CA CA 4A               JP   Z,expectM_3193S163   
4A5B   CD CF 0F               CALL   printStr   
4A5E   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a{%a%b-%c= %c--%c}}^F= 3F^"   
4A87   CD CF 0F               CALL   printStr   
4A8A   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4A99   21 01 00               LD   hl,1   
4A9C   E5                     PUSH   hl   
4A9D   E5                     PUSH   hl   
4A9E   CD D6 10               CALL   run   
4AA1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4AA8   CD CF 0F               CALL   printStr   
4AAB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4AB8   E1                     POP   hl   
4AB9   E5                     PUSH   hl   
4ABA   E5                     PUSH   hl   
4ABB   CD D6 10               CALL   run   
4ABE   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4AC9   76                     HALT      
4ACA                EXPECTM_3193S163:      
4ACA   E1                     POP   HL   
4ACB                          ;*Macro unroll:  test "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",2
4ACB   31 00 4F               LD   SP,STACK   
4ACE   CD 03 10               CALL   coldInit   
4AD1   CD B2 4D               CALL   execStr   
4AD4   31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 DB   "1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^",0   
4B04   E1                     POP   HL   
4B05   E5                     PUSH   HL   
4B06   11 02 00               LD   DE,2   
4B09   B7                     OR   A   
4B0A   ED 52                  SBC   HL,DE   
4B0C   7D                     LD   A,L   
4B0D   B4                     OR   H   
4B0E   CA 8D 4B               JP   Z,expectM_3194S164   
4B11   CD CF 0F               CALL   printStr   
4B14   43 6F 64 65 3A 20 31 20 5C 62 3A 63 7B 5C 61 3A 64 7B 25 61 25 62 2D 25 63 3D 20 25 63 2D 2D 25 63 20 25 64 3D 20 25 64 2B 2B 25 64 7D 7D 5E 46 3D 20 33 46 5E 00 .CSTR   "Code: ","1 \\b:c{\\a:d{%a%b-%c= %c--%c %d= %d++%d}}^F= 3F^"   
4B4A   CD CF 0F               CALL   printStr   
4B4D   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4B5C   21 02 00               LD   hl,2   
4B5F   E5                     PUSH   hl   
4B60   E5                     PUSH   hl   
4B61   CD D6 10               CALL   run   
4B64   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4B6B   CD CF 0F               CALL   printStr   
4B6E   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4B7B   E1                     POP   hl   
4B7C   E5                     PUSH   hl   
4B7D   E5                     PUSH   hl   
4B7E   CD D6 10               CALL   run   
4B81   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4B8C   76                     HALT      
4B8D                EXPECTM_3194S164:      
4B8D   E1                     POP   HL   
4B8E                          ;*Macro unroll:  test "F := \\a{%a 1+} ; 1F^", 2
4B8E   31 00 4F               LD   SP,STACK   
4B91   CD 03 10               CALL   coldInit   
4B94   CD B2 4D               CALL   execStr   
4B97   46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 DB   "F := \\a{%a 1+} ; 1F^",0   
4BAC   E1                     POP   HL   
4BAD   E5                     PUSH   HL   
4BAE   11 02 00               LD   DE,2   
4BB1   B7                     OR   A   
4BB2   ED 52                  SBC   HL,DE   
4BB4   7D                     LD   A,L   
4BB5   B4                     OR   H   
4BB6   CA 1A 4C               JP   Z,expectM_3195S165   
4BB9   CD CF 0F               CALL   printStr   
4BBC   43 6F 64 65 3A 20 46 20 3A 3D 20 5C 61 7B 25 61 20 31 2B 7D 20 3B 20 31 46 5E 00 .CSTR   "Code: ","F := \\a{%a 1+} ; 1F^"   
4BD7   CD CF 0F               CALL   printStr   
4BDA   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4BE9   21 02 00               LD   hl,2   
4BEC   E5                     PUSH   hl   
4BED   E5                     PUSH   hl   
4BEE   CD D6 10               CALL   run   
4BF1   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4BF8   CD CF 0F               CALL   printStr   
4BFB   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C08   E1                     POP   hl   
4C09   E5                     PUSH   hl   
4C0A   E5                     PUSH   hl   
4C0B   CD D6 10               CALL   run   
4C0E   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4C19   76                     HALT      
4C1A                EXPECTM_3195S165:      
4C1A   E1                     POP   HL   
4C1B                          ;*Macro unroll:  test "'hello'/sl",5
4C1B   31 00 4F               LD   SP,STACK   
4C1E   CD 03 10               CALL   coldInit   
4C21   CD B2 4D               CALL   execStr   
4C24   27 68 65 6C 6C 6F 27 2F 73 6C 00 DB   "'hello'/sl",0   
4C2F   E1                     POP   HL   
4C30   E5                     PUSH   HL   
4C31   11 05 00               LD   DE,5   
4C34   B7                     OR   A   
4C35   ED 52                  SBC   HL,DE   
4C37   7D                     LD   A,L   
4C38   B4                     OR   H   
4C39   CA 93 4C               JP   Z,expectM_3196S166   
4C3C   CD CF 0F               CALL   printStr   
4C3F   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 2F 73 6C 00 .CSTR   "Code: ","'hello'/sl"   
4C50   CD CF 0F               CALL   printStr   
4C53   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4C62   21 05 00               LD   hl,5   
4C65   E5                     PUSH   hl   
4C66   E5                     PUSH   hl   
4C67   CD D6 10               CALL   run   
4C6A   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4C71   CD CF 0F               CALL   printStr   
4C74   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4C81   E1                     POP   hl   
4C82   E5                     PUSH   hl   
4C83   E5                     PUSH   hl   
4C84   CD D6 10               CALL   run   
4C87   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4C92   76                     HALT      
4C93                EXPECTM_3196S166:      
4C93   E1                     POP   HL   
4C94                          ;*Macro unroll:  test "'hello' 'hell' /sc", false
4C94   31 00 4F               LD   SP,STACK   
4C97   CD 03 10               CALL   coldInit   
4C9A   CD B2 4D               CALL   execStr   
4C9D   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 00 DB   "'hello' 'hell' /sc",0   
4CB0   E1                     POP   HL   
4CB1   E5                     PUSH   HL   
4CB2   11 00 00               LD   DE,false   
4CB5   B7                     OR   A   
4CB6   ED 52                  SBC   HL,DE   
4CB8   7D                     LD   A,L   
4CB9   B4                     OR   H   
4CBA   CA 1C 4D               JP   Z,expectM_3197S167   
4CBD   CD CF 0F               CALL   printStr   
4CC0   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 27 20 2F 73 63 00 .CSTR   "Code: ","'hello' 'hell' /sc"   
4CD9   CD CF 0F               CALL   printStr   
4CDC   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4CEB   21 00 00               LD   hl,false   
4CEE   E5                     PUSH   hl   
4CEF   E5                     PUSH   hl   
4CF0   CD D6 10               CALL   run   
4CF3   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4CFA   CD CF 0F               CALL   printStr   
4CFD   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D0A   E1                     POP   hl   
4D0B   E5                     PUSH   hl   
4D0C   E5                     PUSH   hl   
4D0D   CD D6 10               CALL   run   
4D10   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4D1B   76                     HALT      
4D1C                EXPECTM_3197S167:      
4D1C   E1                     POP   HL   
4D1D                          ;*Macro unroll:  test "'hello' 'hello' /sc", true
4D1D   31 00 4F               LD   SP,STACK   
4D20   CD 03 10               CALL   coldInit   
4D23   CD B2 4D               CALL   execStr   
4D26   27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 00 DB   "'hello' 'hello' /sc",0   
4D3A   E1                     POP   HL   
4D3B   E5                     PUSH   HL   
4D3C   11 FF FF               LD   DE,true   
4D3F   B7                     OR   A   
4D40   ED 52                  SBC   HL,DE   
4D42   7D                     LD   A,L   
4D43   B4                     OR   H   
4D44   CA A7 4D               JP   Z,expectM_3198S168   
4D47   CD CF 0F               CALL   printStr   
4D4A   43 6F 64 65 3A 20 27 68 65 6C 6C 6F 27 20 27 68 65 6C 6C 6F 27 20 2F 73 63 00 .CSTR   "Code: ","'hello' 'hello' /sc"   
4D64   CD CF 0F               CALL   printStr   
4D67   0D 0A 0D 0A 45 78 70 65 63 74 65 64 3A 20 00 .CSTR   "\r\n\r\nExpected: "   
4D76   21 FF FF               LD   hl,true   
4D79   E5                     PUSH   hl   
4D7A   E5                     PUSH   hl   
4D7B   CD D6 10               CALL   run   
4D7E   2E 60 24 60 2E 68 00   .CSTR   ".`$`.h"   
4D85   CD CF 0F               CALL   printStr   
4D88   0D 0A 0D 0A 41 63 74 75 61 6C 3A 20 00 .CSTR   "\r\n\r\nActual: "   
4D95   E1                     POP   hl   
4D96   E5                     PUSH   hl   
4D97   E5                     PUSH   hl   
4D98   CD D6 10               CALL   run   
4D9B   2E 60 24 60 2E 68 60 0D 0A 60 00 .CSTR   ".`$`.h`\r\n`"   
4DA6   76                     HALT      
4DA7                EXPECTM_3198S168:      
4DA7   E1                     POP   HL   
4DA8                             ; ; test "$1000 0 10 1 /rg \\a{%a 1 + 10 *} /mp \\a{%a.} /fe", $1000
4DA8                             ; 
4DA8   CD CF 0F               CALL   printStr   
4DAB   44 6F 6E 65 21 00      .CSTR   "Done!"   
4DB1   76                     HALT      
4DB2                             ; executes a null teminated string (null executes exit_)
4DB2                             ; the string should be immedaitely following the call
4DB2                EXECSTR:      ; create a root stack frame
4DB2   C1                     POP   bc   ; bc = code*
4DB3   0B                     DEC   bc   ; dec to prepare for next routine
4DB4   11 00 00               LD   de,0   
4DB7   D5                     PUSH   de   ; push fake IP
4DB8   D5                     PUSH   de   ; push null arg_list*
4DB9   D5                     PUSH   de   ; push null first_arg*
4DBA   D5                     PUSH   de   ; push fake BP
4DBB   DD E9                  JP   (ix)   
4DBD                STKSIZE:   EQU   $100   ; Stack size
4DBD                TIBSIZE:   EQU   $100   ; 256 bytes
4DBD                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
4DBD                          ALIGN   $100   
4E00                          DS   STKSIZE   
4F00                STACK:       
4F00                          ALIGN   $100   
4F00                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
5000                          ALIGN   $100   
5000                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
5100                          ALIGN   $100   
5100                VARS:        
5100                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
51D0                RESTARTS:      
51D0                RST08:    DS   2   
51D2                RST10:    DS   2   
51D4                RST18:    DS   2   
51D6                RST20:    DS   2   
51D8                RST28:    DS   2   
51DA                RST30:    DS   2   ; 
51DC                BAUD:     DS   2   ; 
51DE                INTVEC:   DS   2   ; 
51E0                NMIVEC:   DS   2   ; 
51E2                GETCVEC:   DS   2   ; 
51E4                PUTCVEC:   DS   2   ; 
51E6                SYSVARS:      
51E6                             ; initialised sys variables (preserved)
51E6                VDATAWIDTH:   DS   2   ; 
51E8                VNUMBASE:   DS   2   ; 
51EA                VTIBPTR:   DS   2   ; 
51EC                VBUFPTR:   DS   2   ; 
51EE                VNEXT:    DS   2   ; 
51F0                VHEAPPTR:   DS   2   ; 
51F2                VRECUR:   DS   2   ; 
51F4                VDEFINE:   DS   2   ; 
51F6                VSTRMODE:   DS   2   ; 
51F8                             ; uninitialised sys variables (preserved)
51F8                VPOINTER:   DS   2   ; 
51FA                VREMAIN:   DS   2   ; 
51FC                VSAVEDIP:   DS   2   ; 
51FE                VSAVEDSP:   DS   2   ; 
5200                VSAVEDNEXT:   DS   2   ; 
5202                VSAVEDBP:   DS   2   ; 
5204                             ; uninitialised sys variables (unpreserved)
5204                VTEMP1:   DS   2   ; 
5206                VTEMP2:   DS   2   ; 
5208                VTEMP3:   DS   2   ; 
520A                VLASTDEF:   DS   2   ; 
520C                TBPTR:    DS   2   ; reserved for tests
520E                TITLEBUF:   DS   20   
5222                HEAP:        
5222                             ; FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
5222                             ; db "{"
5222                             ; db    "[%b /t] %L="                 ; init mutable L [index active]
5222                             ; db    "\\kt{"
5222                             ; db      "0%t!=/qt"                  ; break if type != 0
5222                             ; db      "\\dt:a{"                   ; return talkback to receive data
5222                             ; db        "%L1#!/qt"                ; if not active don't send
5222                             ; db        "%L0# %a="                ; store current index in A
5222                             ; db        "%s %L0# +="              ; inc value of index by step
5222                             ; db        "1%t!=/qt"                ; break if type != 0
5222                             ; db        "%a %e <"                 ; ifte: in range?
5222                             ; db          "{%a 1}{/f %L1#= 0 2}"  ; ifte: /t index, /f active = false, quit
5222                             ; db          "?? %k/rc"              ; ifte: send to sink note: /rc recur
5222                             ; db      "} 0 %k^"                   ; init sink
5222                             ; db    "}"
5222                             ; db "}"
5222                             ; db 0
5222                             ; FUNC map, 0, "sf"                   ; map
5222                             ; db "{"
5222                             ; db    "\\kt{"
5222                             ; db      "0%t!=/qt"                  ; break if type != 0
5222                             ; db      "\\dt{"                     ; call source with tb
5222                             ; db        "1%t=="                   ; ifte: type == 1 ?
5222                             ; db        "{%d %f^}{%d}"            ; ifte: func(data) or data
5222                             ; db        "?? %t %k^"               ; ifte: send to sink
5222                             ; db      "} 0 %s^"
5222                             ; db    "}"
5222                             ; db "}"
5222                             ; db 0
5222                             ; ; /ft filter
5222                             ; ; src pred -- src1
5222                             ; FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
5222                             ; db "{"
5222                             ; db    "[0]%T="
5222                             ; db    "\\kt{"                       ; return talkback to receive data
5222                             ; db      "\\dt{"                     ; call source with tb
5222                             ; db        "["
5222                             ; db          "{%d %T0#= /t}"         ; case 0: store talkback in T[0], return true
5222                             ; db          "{%d %p^}"              ; case 1: return boolean based on predicate
5222                             ; db          "{/t}"                  ; case 2: return true
5222                             ; db        "]%t#^"                   ; select on %t
5222                             ; db        "{%d %t %k^}{0 1 %T0#^}"  ; ifte: true send d to sink, false send 1 to talkback
5222                             ; db        "??"
5222                             ; db      "} 0 %s^"
5222                             ; db    "}"
5222                             ; db "}"
5222                             ; db 0
5222                             ; FUNC forEach, 1, "spT"
5222                             ; db "{"
5222                             ; db    "[0]%T="
5222                             ; db    "\\dt{"                       ; return talkback to receive data ; $56AA
5222                             ; db      "2%t==/qt"                    ; if type == 2 skip
5222                             ; db      "0%t=="                   ; ifte: type = 0 ?
5222                             ; db      "{%d %T0#=}{%d %p^}"      ; ifte: 0: store talkback, 1: send data
5222                             ; db      "??"                      ; ifte:
5222                             ; db      "0 1 %T0#^"               ; 0 or 1: get next src data item
5222                             ; db    "} 0 %s^"
5222                             ; db "}"
5222                             ; db 0
5222                             ; FUNC fold, 1, "sirA"                       ; src, init, reducer
5222                             ; db "{"                                  ; reducer: \\da00bbLi4u
5222                             ; db    "[%i]%A="
5222                             ; db    "\\kt{"                         ; return talkback to receive data
5222                             ; db      "\\dt{"                         ; call source with tb
5222                             ; db        "1%t=="                       ; ifte: type == 1 ?
5222                             ; db        "{ %d %A0# %r^ %A0#= %A0#}{%d}"      ; ifte: reduce -> acc, acc or data
5222                             ; db        "?? %t %k^"                    ; ifte: send to sink
5222                             ; db      "} 0 %s^"
5222                             ; db    "}"
5222                             ; db "}"
5222                             ; db 0
5222                             ; 


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 2406 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 2244 IN MAIN.asm
                    > USED AT LINE 2390 IN MAIN.asm
                    > USED AT LINE 2452 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 1839 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
                    > USED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1844 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 412 IN MAIN.asm
                    > USED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 860 IN MAIN.asm
                    > USED AT LINE 866 IN MAIN.asm
                    > USED AT LINE 886 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 899 IN MAIN.asm
                    > USED AT LINE 903 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 917 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
                    > USED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 980 IN MAIN.asm
                    > USED AT LINE 985 IN MAIN.asm
                    > USED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1502 IN MAIN.asm
                    > USED AT LINE 2409 IN MAIN.asm
                    > USED AT LINE 2501 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 2026 IN MAIN.asm
                    > USED AT LINE 2263 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2415 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2417 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2419 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2344 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2319 IN MAIN.asm
                    > USED AT LINE 2338 IN MAIN.asm
DQUOTE_:            0204 DEFINED AT LINE 173 IN MAIN.asm
COMMA_:             0204 DEFINED AT LINE 174 IN MAIN.asm
DOLLAR_:            0206 DEFINED AT LINE 177 IN MAIN.asm
PERCENT_:           0209 DEFINED AT LINE 180 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 183 IN MAIN.asm
LPAREN_:            020F DEFINED AT LINE 186 IN MAIN.asm
DOT_:               0212 DEFINED AT LINE 189 IN MAIN.asm
SLASH_:             0215 DEFINED AT LINE 192 IN MAIN.asm
NUM_:               0218 DEFINED AT LINE 195 IN MAIN.asm
SEMICOLON_:         021B DEFINED AT LINE 198 IN MAIN.asm
QUESTION_:          021E DEFINED AT LINE 201 IN MAIN.asm
BANG_:              0221 DEFINED AT LINE 204 IN MAIN.asm
BANG:               0221 DEFINED AT LINE 205 IN MAIN.asm
NOT:                022C DEFINED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
EQ_:                0232 DEFINED AT LINE 217 IN MAIN.asm
EQ:                 0232 DEFINED AT LINE 218 IN MAIN.asm
EQ0:                023C DEFINED AT LINE 225 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
EQ1:                023D DEFINED AT LINE 227 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
GT_:                0241 DEFINED AT LINE 231 IN MAIN.asm
GT:                 0241 DEFINED AT LINE 232 IN MAIN.asm
LT_:                024C DEFINED AT LINE 240 IN MAIN.asm
LT:                 024C DEFINED AT LINE 241 IN MAIN.asm
LT1:                0255 DEFINED AT LINE 248 IN MAIN.asm
                    > USED AT LINE 239 IN MAIN.asm
HASH_:              025E DEFINED AT LINE 256 IN MAIN.asm
HASH:               025E DEFINED AT LINE 257 IN MAIN.asm
ARRAYINDEX:         025E DEFINED AT LINE 258 IN MAIN.asm
ARRAYINDEX0:        0266 DEFINED AT LINE 264 IN MAIN.asm
ARRAYINDEX1:        0267 DEFINED AT LINE 266 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
ARRAYINDEX2:        0273 DEFINED AT LINE 275 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
RPAREN_:            0276 DEFINED AT LINE 280 IN MAIN.asm
RPAREN:             0276 DEFINED AT LINE 281 IN MAIN.asm
AMPER_:             027E DEFINED AT LINE 288 IN MAIN.asm
AMPER:              027E DEFINED AT LINE 289 IN MAIN.asm
AND:                027E DEFINED AT LINE 290 IN MAIN.asm
MINUS_:             0288 DEFINED AT LINE 303 IN MAIN.asm
MINUS:              0288 DEFINED AT LINE 304 IN MAIN.asm
SUB:                0294 DEFINED AT LINE 312 IN MAIN.asm
                    > USED AT LINE 309 IN MAIN.asm
SUB1:               029E DEFINED AT LINE 319 IN MAIN.asm
                    > USED AT LINE 315 IN MAIN.asm
STAR_:              02A6 DEFINED AT LINE 327 IN MAIN.asm
STAR:               02A6 DEFINED AT LINE 328 IN MAIN.asm
MUL:                02AE DEFINED AT LINE 334 IN MAIN.asm
MUL2:               02B0 DEFINED AT LINE 337 IN MAIN.asm
MUL3:               02B8 DEFINED AT LINE 342 IN MAIN.asm
                    > USED AT LINE 351 IN MAIN.asm
PLUS_:              02CA DEFINED AT LINE 357 IN MAIN.asm
PLUS:               02CA DEFINED AT LINE 358 IN MAIN.asm
ADD:                02CA DEFINED AT LINE 359 IN MAIN.asm
ADD1:               02D5 DEFINED AT LINE 367 IN MAIN.asm
                    > USED AT LINE 363 IN MAIN.asm
ADD3:               02D9 DEFINED AT LINE 372 IN MAIN.asm
                    > USED AT LINE 299 IN MAIN.asm
                    > USED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 353 IN MAIN.asm
                    > USED AT LINE 590 IN MAIN.asm
                    > USED AT LINE 1008 IN MAIN.asm
                    > USED AT LINE 1302 IN MAIN.asm
                    > USED AT LINE 1468 IN MAIN.asm
ADD4:               02E3 DEFINED AT LINE 380 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
COLON_:             02E6 DEFINED AT LINE 383 IN MAIN.asm
COLON:              02E6 DEFINED AT LINE 384 IN MAIN.asm
DEFINESTART:        02F3 DEFINED AT LINE 392 IN MAIN.asm
                    > USED AT LINE 388 IN MAIN.asm
UPCASE_:            02FC DEFINED AT LINE 399 IN MAIN.asm
UPCASE:             02FC DEFINED AT LINE 400 IN MAIN.asm
SEMICOLON:          0301 DEFINED AT LINE 406 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
DEFINEEND:          0301 DEFINED AT LINE 407 IN MAIN.asm
DEFINEEND1:         0313 DEFINED AT LINE 416 IN MAIN.asm
                    > USED AT LINE 411 IN MAIN.asm
LOWCASE_:           0315 DEFINED AT LINE 424 IN MAIN.asm
LOWCASE:            0315 DEFINED AT LINE 425 IN MAIN.asm
IDENT1:             031A DEFINED AT LINE 429 IN MAIN.asm
                    > USED AT LINE 403 IN MAIN.asm
LBRACK_:            0327 DEFINED AT LINE 441 IN MAIN.asm
LBRACK:             0327 DEFINED AT LINE 442 IN MAIN.asm
ARRAYSTART:         0327 DEFINED AT LINE 443 IN MAIN.asm
BACKSLASH_:         0343 DEFINED AT LINE 458 IN MAIN.asm
BACKSLASH:          0343 DEFINED AT LINE 459 IN MAIN.asm
LAMBDA:             0343 DEFINED AT LINE 460 IN MAIN.asm
LAMBDA1:            0348 DEFINED AT LINE 463 IN MAIN.asm
                    > USED AT LINE 467 IN MAIN.asm
LAMBDA2:            0358 DEFINED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
RBRACK_:            0364 DEFINED AT LINE 480 IN MAIN.asm
RBRACK:             0364 DEFINED AT LINE 481 IN MAIN.asm
ARRAYEND:           0364 DEFINED AT LINE 482 IN MAIN.asm
ARRAYEND1:          0380 DEFINED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 516 IN MAIN.asm
ARRAYEND2:          0390 DEFINED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 505 IN MAIN.asm
ARRAYEND3:          0395 DEFINED AT LINE 513 IN MAIN.asm
                    > USED AT LINE 498 IN MAIN.asm
CARET_:             03B4 DEFINED AT LINE 534 IN MAIN.asm
CARET:              03B4 DEFINED AT LINE 538 IN MAIN.asm
GO:                 03B4 DEFINED AT LINE 539 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03B5 DEFINED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 1515 IN MAIN.asm
                    > USED AT LINE 1517 IN MAIN.asm
                    > USED AT LINE 1687 IN MAIN.asm
GO2:                03BB DEFINED AT LINE 546 IN MAIN.asm
                    > USED AT LINE 544 IN MAIN.asm
GRAVE_:             03CA DEFINED AT LINE 555 IN MAIN.asm
GRAVE:              03CA DEFINED AT LINE 556 IN MAIN.asm
PRINTLITERAL:       03CA DEFINED AT LINE 557 IN MAIN.asm
PRINTLITERAL0:      03D1 DEFINED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 568 IN MAIN.asm
PRINTLITERAL1:      03D4 DEFINED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 560 IN MAIN.asm
LBRACE_:            03E0 DEFINED AT LINE 572 IN MAIN.asm
LBRACE:             03E0 DEFINED AT LINE 573 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
PIPE_:              03E5 DEFINED AT LINE 579 IN MAIN.asm
PIPE:               03E5 DEFINED AT LINE 580 IN MAIN.asm
OR:                 03E5 DEFINED AT LINE 581 IN MAIN.asm
RBRACE_:            03F0 DEFINED AT LINE 592 IN MAIN.asm
TILDE_:             03F3 DEFINED AT LINE 596 IN MAIN.asm
UNDERSCORE_:        03F6 DEFINED AT LINE 599 IN MAIN.asm
CHAR:               03F6 DEFINED AT LINE 600 IN MAIN.asm
AT_:                03FE DEFINED AT LINE 608 IN MAIN.asm
AT:                 03FE DEFINED AT LINE 609 IN MAIN.asm
ADDR:               03FE DEFINED AT LINE 610 IN MAIN.asm
DOT:                0500 DEFINED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
PRINT:              0500 DEFINED AT LINE 622 IN MAIN.asm
PRINTCHAR:          0512 DEFINED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 627 IN MAIN.asm
PRINTSTRING:        0521 DEFINED AT LINE 648 IN MAIN.asm
                    > USED AT LINE 631 IN MAIN.asm
PRINTSTRING0:       0528 DEFINED AT LINE 652 IN MAIN.asm
                    > USED AT LINE 659 IN MAIN.asm
PRINTSTRING1:       052B DEFINED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
PRINTNUMBER:        0536 DEFINED AT LINE 665 IN MAIN.asm
                    > USED AT LINE 633 IN MAIN.asm
PRINTDEC:           0541 DEFINED AT LINE 673 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
PRINTDEC1:          054F DEFINED AT LINE 681 IN MAIN.asm
                    > USED AT LINE 679 IN MAIN.asm
PRINTDEC2:          055E DEFINED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 682 IN MAIN.asm
PRINTDEC3:          056E DEFINED AT LINE 707 IN MAIN.asm
                    > USED AT LINE 695 IN MAIN.asm
PRINTDEC4:          058E DEFINED AT LINE 721 IN MAIN.asm
                    > USED AT LINE 710 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
                    > USED AT LINE 714 IN MAIN.asm
                    > USED AT LINE 716 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
PRINTDEC5:          0590 DEFINED AT LINE 723 IN MAIN.asm
                    > USED AT LINE 726 IN MAIN.asm
PRINTDEC6:          05A0 DEFINED AT LINE 735 IN MAIN.asm
                    > USED AT LINE 730 IN MAIN.asm
PRINTDEC7:          05A1 DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
PRINTHEX0:          05A7 DEFINED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
PRINTHEX:           05AD DEFINED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
PRINTHEX1:          05B5 DEFINED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 750 IN MAIN.asm
PRINTHEX2:          05C0 DEFINED AT LINE 763 IN MAIN.asm
                    > USED AT LINE 760 IN MAIN.asm
PRINTHEX3:          05CF DEFINED AT LINE 772 IN MAIN.asm
                    > USED AT LINE 762 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
PRINTHEX4:          05D8 DEFINED AT LINE 780 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
DQUOTE:             05E3 DEFINED AT LINE 792 IN MAIN.asm
UNDERSCORE:         05E3 DEFINED AT LINE 793 IN MAIN.asm
COMMA:              05E3 DEFINED AT LINE 794 IN MAIN.asm
SLASH:              0600 DEFINED AT LINE 802 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
COMMAND:            0600 DEFINED AT LINE 803 IN MAIN.asm
COMMAND_A_:         0626 DEFINED AT LINE 839 IN MAIN.asm
COMMAND_B_:         0638 DEFINED AT LINE 853 IN MAIN.asm
COMMAND_D_:         0644 DEFINED AT LINE 863 IN MAIN.asm
COMMAND_F_:         064A DEFINED AT LINE 869 IN MAIN.asm
COMMAND_H_:         0665 DEFINED AT LINE 889 IN MAIN.asm
COMMAND_I_:         066B DEFINED AT LINE 896 IN MAIN.asm
KEY_:               0671 DEFINED AT LINE 902 IN MAIN.asm
COMMAND_M_:         0674 DEFINED AT LINE 906 IN MAIN.asm
OUTPUT_:            067A DEFINED AT LINE 912 IN MAIN.asm
COMMAND_P_:         067D DEFINED AT LINE 916 IN MAIN.asm
COMMAND_Q_:         0680 DEFINED AT LINE 921 IN MAIN.asm
COMMAND_R_:         0686 DEFINED AT LINE 927 IN MAIN.asm
COMMAND_S_:         0692 DEFINED AT LINE 937 IN MAIN.asm
TRUE_:              06A7 DEFINED AT LINE 953 IN MAIN.asm
COMMAND_V_:         06AA DEFINED AT LINE 957 IN MAIN.asm
COMMAND_W_:         06BF DEFINED AT LINE 973 IN MAIN.asm
XOR_:               06C5 DEFINED AT LINE 979 IN MAIN.asm
COMMAND_NOP_:       06C8 DEFINED AT LINE 984 IN MAIN.asm
COMMAND_DEFAULT_:   06CB DEFINED AT LINE 989 IN MAIN.asm
NOP:                06CE DEFINED AT LINE 995 IN MAIN.asm
                    > USED AT LINE 986 IN MAIN.asm
DIV:                06D0 DEFINED AT LINE 999 IN MAIN.asm
                    > USED AT LINE 991 IN MAIN.asm
ABSOLUTE:           06E1 DEFINED AT LINE 1012 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
ABSOLUTE1:          06EC DEFINED AT LINE 1022 IN MAIN.asm
                    > USED AT LINE 1015 IN MAIN.asm
ADDROF:             06EF DEFINED AT LINE 1028 IN MAIN.asm
                    > USED AT LINE 843 IN MAIN.asm
ADDROF1:            0703 DEFINED AT LINE 1040 IN MAIN.asm
                    > USED AT LINE 1036 IN MAIN.asm
ADDROF2:            070E DEFINED AT LINE 1049 IN MAIN.asm
                    > USED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1034 IN MAIN.asm
                    > USED AT LINE 1039 IN MAIN.asm
ARRAYLENGTH:        0710 DEFINED AT LINE 1054 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 44
ARRAYLENGTH1:       0716 DEFINED AT LINE 1061 IN MAIN.asm
                    > USED AT LINE 1072 IN MAIN.asm
                    > USED AT LINE 1075 IN MAIN.asm
ARRAYSIZE:          0719 DEFINED AT LINE 1067 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
PERFORMM_1547S1068: 0720 DEFINED AT LINE 45
                    > USED AT LINE 43
BREAK:              072D DEFINED AT LINE 1080 IN MAIN.asm
                    > USED AT LINE 859 IN MAIN.asm
BREAK1:             0734 DEFINED AT LINE 1086 IN MAIN.asm
                    > USED AT LINE 1084 IN MAIN.asm
BYTEMODE:           0747 DEFINED AT LINE 1098 IN MAIN.asm
                    > USED AT LINE 857 IN MAIN.asm
BYTEMODE1:          074A DEFINED AT LINE 1100 IN MAIN.asm
                    > USED AT LINE 1289 IN MAIN.asm
COMMENT:            074F DEFINED AT LINE 1105 IN MAIN.asm
                    > USED AT LINE 807 IN MAIN.asm
                    > USED AT LINE 1109 IN MAIN.asm
CONSTHEAPSTART:     0758 DEFINED AT LINE 1113 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
CONSTTIBSTART:      075E DEFINED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
CONSTBUFSTART:      0764 DEFINED AT LINE 1121 IN MAIN.asm
                    > USED AT LINE 965 IN MAIN.asm
DECBASE:            076A DEFINED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 865 IN MAIN.asm
                    > USED AT LINE 867 IN MAIN.asm
DECBASE1:           076D DEFINED AT LINE 1127 IN MAIN.asm
                    > USED AT LINE 1137 IN MAIN.asm
ERROR1:             0772 DEFINED AT LINE 1131 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
                    > USED AT LINE 861 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
                    > USED AT LINE 918 IN MAIN.asm
                    > USED AT LINE 925 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
                    > USED AT LINE 951 IN MAIN.asm
                    > USED AT LINE 971 IN MAIN.asm
                    > USED AT LINE 977 IN MAIN.asm
HEXBASE:            0778 DEFINED AT LINE 1135 IN MAIN.asm
                    > USED AT LINE 891 IN MAIN.asm
INPUT:              077E DEFINED AT LINE 1141 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
KEY:                0789 DEFINED AT LINE 1152 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
OUTPUT:             0792 DEFINED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
QUIT:               079B DEFINED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 923 IN MAIN.asm
QUIT1:              07A2 DEFINED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
RECUR:              07A5 DEFINED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 929 IN MAIN.asm
REMAIN:             07AB DEFINED AT LINE 1187 IN MAIN.asm
                    > USED AT LINE 931 IN MAIN.asm
STRINGBEGIN:        07B1 DEFINED AT LINE 1192 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
STRINGEND:          07B9 DEFINED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
STRINGEND1:         07E0 DEFINED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
STRINGLENGTH:       07E8 DEFINED AT LINE 1220 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
                    > USED AT LINE 44
STRINGLENGTH1:      07EE DEFINED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1230 IN MAIN.asm
STRINGLENGTH2:      07F0 DEFINED AT LINE 1227 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
STRINGLENGTH3:      07F4 DEFINED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1239 IN MAIN.asm
STRINGSIZE:         07F7 DEFINED AT LINE 1235 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
PERFORMM_1695S1236: 07FE DEFINED AT LINE 45
                    > USED AT LINE 43
STRINGCOMPARE:      0803 DEFINED AT LINE 1244 IN MAIN.asm
                    > USED AT LINE 941 IN MAIN.asm
STRINGCOMPARE1:     0805 DEFINED AT LINE 1247 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
STRINGCOMPARE2:     0810 DEFINED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
STRINGCOMPARE3:     0815 DEFINED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
STRINGCOMPARE4:     0818 DEFINED AT LINE 1261 IN MAIN.asm
                    > USED AT LINE 1258 IN MAIN.asm
VARBUFPTR:          081B DEFINED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
VARHEAPPTR:         0824 DEFINED AT LINE 1270 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
VARTIBPTR:          082D DEFINED AT LINE 1275 IN MAIN.asm
                    > USED AT LINE 963 IN MAIN.asm
VARIABLE:           0836 DEFINED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
                    > USED AT LINE 1268 IN MAIN.asm
                    > USED AT LINE 1273 IN MAIN.asm
                    > USED AT LINE 1278 IN MAIN.asm
CONSTANT:           0839 DEFINED AT LINE 1282 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 1123 IN MAIN.asm
WORDMODE:           083C DEFINED AT LINE 1287 IN MAIN.asm
                    > USED AT LINE 975 IN MAIN.asm
XOR:                0842 DEFINED AT LINE 1292 IN MAIN.asm
                    > USED AT LINE 981 IN MAIN.asm
XOR1:               0843 DEFINED AT LINE 1294 IN MAIN.asm
RANGESRC:           084D DEFINED AT LINE 32
                    > USED AT LINE 933 IN MAIN.asm
RANGESRCM_1760S1310: 085C DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          08E1 DEFINED AT LINE 32
                    > USED AT LINE 845 IN MAIN.asm
ARRAYITERM_1779S1330: 08EE DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         0962 DEFINED AT LINE 32
                    > USED AT LINE 945 IN MAIN.asm
STRINGITERM_1798S1350: 096F DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                09EA DEFINED AT LINE 32
                    > USED AT LINE 908 IN MAIN.asm
MAPM_1818S1372:     09F7 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             0A2C DEFINED AT LINE 32
                    > USED AT LINE 877 IN MAIN.asm
FILTERM_1832S1387:  0A3A DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               0A8A DEFINED AT LINE 32
                    > USED AT LINE 871 IN MAIN.asm
FOLDM_1851S1407:    0A99 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            0ADC DEFINED AT LINE 32
                    > USED AT LINE 873 IN MAIN.asm
FOREACHM_1865S1422: 0AEA DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0B28 DEFINED AT LINE 32
                    > USED AT LINE 875 IN MAIN.asm
FUNCSRCM_1879S1437: 0B34 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0B61 DEFINED AT LINE 32
                    > USED AT LINE 625 IN MAIN.asm
PRINTARRAYM_1889S1448: 0B6F DEFINED AT LINE 39
                    > USED AT LINE 35
TILDE:              0BA9 DEFINED AT LINE 1459 IN MAIN.asm
                    > USED AT LINE 597 IN MAIN.asm
INVERT:             0BA9 DEFINED AT LINE 1460 IN MAIN.asm
DOLLAR:             0BB3 DEFINED AT LINE 1471 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
HEXNUM:             0BB3 DEFINED AT LINE 1472 IN MAIN.asm
HEXNUM1:            0BB6 DEFINED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1491 IN MAIN.asm
HEXNUM2:            0BBE DEFINED AT LINE 1480 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
QUESTION:           0BD0 DEFINED AT LINE 1495 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
IF:                 0BD0 DEFINED AT LINE 1496 IN MAIN.asm
IFTE:               0BDC DEFINED AT LINE 1507 IN MAIN.asm
                    > USED AT LINE 1500 IN MAIN.asm
IFTE1:              0BDD DEFINED AT LINE 1509 IN MAIN.asm
                    > USED AT LINE 1503 IN MAIN.asm
QUOTE:              0BE9 DEFINED AT LINE 1521 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
STRING:             0BE9 DEFINED AT LINE 1522 IN MAIN.asm
STRING1:            0BF2 DEFINED AT LINE 1529 IN MAIN.asm
                    > USED AT LINE 1537 IN MAIN.asm
STRING2:            0BF5 DEFINED AT LINE 1533 IN MAIN.asm
                    > USED AT LINE 1528 IN MAIN.asm
STRING3:            0BFB DEFINED AT LINE 1538 IN MAIN.asm
                    > USED AT LINE 1536 IN MAIN.asm
PERCENT:            0C03 DEFINED AT LINE 1548 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
ARG:                0C03 DEFINED AT LINE 1549 IN MAIN.asm
ARG0:               0C1F DEFINED AT LINE 1568 IN MAIN.asm
                    > USED AT LINE 1574 IN MAIN.asm
ARG0A:              0C28 DEFINED AT LINE 1576 IN MAIN.asm
                    > USED AT LINE 1555 IN MAIN.asm
                    > USED AT LINE 1560 IN MAIN.asm
ARG1:               0C2D DEFINED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 1572 IN MAIN.asm
ARG1A:              0C35 DEFINED AT LINE 1586 IN MAIN.asm
                    > USED AT LINE 1578 IN MAIN.asm
NUM:                0C38 DEFINED AT LINE 1591 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
                    > USED AT LINE 311 IN MAIN.asm
NUM0:               0C41 DEFINED AT LINE 1597 IN MAIN.asm
                    > USED AT LINE 1595 IN MAIN.asm
NUM1:               0C42 DEFINED AT LINE 1599 IN MAIN.asm
                    > USED AT LINE 1616 IN MAIN.asm
NUM2:               0C5A DEFINED AT LINE 1617 IN MAIN.asm
                    > USED AT LINE 1482 IN MAIN.asm
                    > USED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 1604 IN MAIN.asm
NUM3:               0C65 DEFINED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 1620 IN MAIN.asm
RBRACE:             0C68 DEFINED AT LINE 1630 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
BLOCKEND:           0C68 DEFINED AT LINE 1631 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
                    > USED AT LINE 1180 IN MAIN.asm
BLOCKEND1:          0C9A DEFINED AT LINE 1653 IN MAIN.asm
                    > USED AT LINE 1646 IN MAIN.asm
BLOCKEND2:          0CA6 DEFINED AT LINE 1660 IN MAIN.asm
                    > USED AT LINE 1652 IN MAIN.asm
BLOCKEND3:          0CB8 DEFINED AT LINE 1674 IN MAIN.asm
                    > USED AT LINE 1666 IN MAIN.asm
BLOCKEND4:          0CCC DEFINED AT LINE 1684 IN MAIN.asm
                    > USED AT LINE 1682 IN MAIN.asm
GOBLOCK:            0CD5 DEFINED AT LINE 1689 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
                    > USED AT LINE 553 IN MAIN.asm
GOBLOCK2:           0CFA DEFINED AT LINE 1706 IN MAIN.asm
                    > USED AT LINE 1787 IN MAIN.asm
GOBLOCK3:           0D04 DEFINED AT LINE 1712 IN MAIN.asm
GOFUNC:             0D08 DEFINED AT LINE 1716 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
GOFUNC1:            0D21 DEFINED AT LINE 1735 IN MAIN.asm
                    > USED AT LINE 1745 IN MAIN.asm
GOFUNC2:            0D27 DEFINED AT LINE 1742 IN MAIN.asm
                    > USED AT LINE 1734 IN MAIN.asm
GOFUNC3:            0D32 DEFINED AT LINE 1748 IN MAIN.asm
                    > USED AT LINE 1724 IN MAIN.asm
GOFUNC4:            0D4A DEFINED AT LINE 1765 IN MAIN.asm
                    > USED AT LINE 1762 IN MAIN.asm
GOFUNC5:            0D4D DEFINED AT LINE 1768 IN MAIN.asm
                    > USED AT LINE 1774 IN MAIN.asm
GOFUNC6:            0D50 DEFINED AT LINE 1772 IN MAIN.asm
                    > USED AT LINE 1767 IN MAIN.asm
GOFUNC7:            0D53 DEFINED AT LINE 1775 IN MAIN.asm
GOFUNC8:            0D57 DEFINED AT LINE 1780 IN MAIN.asm
                    > USED AT LINE 1700 IN MAIN.asm
                    > USED AT LINE 1764 IN MAIN.asm
ASSIGN:             0D62 DEFINED AT LINE 1791 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
ASSIGN0:            0D64 DEFINED AT LINE 1794 IN MAIN.asm
                    > USED AT LINE 318 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
                    > USED AT LINE 381 IN MAIN.asm
ASSIGN1:            0D68 DEFINED AT LINE 1797 IN MAIN.asm
                    > USED AT LINE 415 IN MAIN.asm
ASSIGN2:            0D71 DEFINED AT LINE 1804 IN MAIN.asm
                    > USED AT LINE 1801 IN MAIN.asm
EQUALS:             0D73 DEFINED AT LINE 1809 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
NOTEQUALS:          0D7A DEFINED AT LINE 1815 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
LESSTHANEQ:         0D81 DEFINED AT LINE 1823 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
LESSTHAN:           0D86 DEFINED AT LINE 1830 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
LESSTHAN1:          0D8B DEFINED AT LINE 1835 IN MAIN.asm
                    > USED AT LINE 1826 IN MAIN.asm
TRUE1:              0D8E DEFINED AT LINE 1838 IN MAIN.asm
                    > USED AT LINE 955 IN MAIN.asm
                    > USED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 1818 IN MAIN.asm
NULL1:              0D94 DEFINED AT LINE 1842 IN MAIN.asm
FALSE1:             0D94 DEFINED AT LINE 1843 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 1819 IN MAIN.asm
                    > USED AT LINE 1833 IN MAIN.asm
                    > USED AT LINE 1836 IN MAIN.asm
SPREAD:             0D9A DEFINED AT LINE 1848 IN MAIN.asm
                    > USED AT LINE 332 IN MAIN.asm
SPREAD1:            0DA7 DEFINED AT LINE 1858 IN MAIN.asm
                    > USED AT LINE 1873 IN MAIN.asm
SPREAD2:            0DB2 DEFINED AT LINE 1867 IN MAIN.asm
                    > USED AT LINE 1864 IN MAIN.asm
SPREAD3:            0DB4 DEFINED AT LINE 1870 IN MAIN.asm
                    > USED AT LINE 1857 IN MAIN.asm
SHIFTLEFT:          0DBE DEFINED AT LINE 1879 IN MAIN.asm
                    > USED AT LINE 245 IN MAIN.asm
SHIFTLEFT1:         0DC6 DEFINED AT LINE 1886 IN MAIN.asm
                    > USED AT LINE 1889 IN MAIN.asm
SHIFTLEFT2:         0DC7 DEFINED AT LINE 1888 IN MAIN.asm
                    > USED AT LINE 1885 IN MAIN.asm
SHIFTRIGHT:         0DCE DEFINED AT LINE 1896 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
SHIFTRIGHT1:        0DD6 DEFINED AT LINE 1903 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
SHIFTRIGHT2:        0DDA DEFINED AT LINE 1906 IN MAIN.asm
                    > USED AT LINE 1902 IN MAIN.asm
DIVIDE:             0DE1 DEFINED AT LINE 1915 IN MAIN.asm
                    > USED AT LINE 1004 IN MAIN.asm
DIVIDE1:            0DE6 DEFINED AT LINE 1918 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
DIVIDE2:            0DF3 DEFINED AT LINE 1926 IN MAIN.asm
                    > USED AT LINE 1923 IN MAIN.asm
DIVIDE3:            0DF4 DEFINED AT LINE 1928 IN MAIN.asm
                    > USED AT LINE 1925 IN MAIN.asm
DOTNEXT:            0DFA DEFINED AT LINE 1934 IN MAIN.asm
                    > USED AT LINE 570 IN MAIN.asm
                    > USED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 661 IN MAIN.asm
                    > USED AT LINE 688 IN MAIN.asm
                    > USED AT LINE 770 IN MAIN.asm
DOTNEXT1:           0E02 DEFINED AT LINE 1939 IN MAIN.asm
                    > USED AT LINE 1937 IN MAIN.asm
PARSEARGS:          0E14 DEFINED AT LINE 1950 IN MAIN.asm
                    > USED AT LINE 462 IN MAIN.asm
PARSEARGS1:         0E1E DEFINED AT LINE 1957 IN MAIN.asm
                    > USED AT LINE 1978 IN MAIN.asm
PARSEARGS1A:        0E26 DEFINED AT LINE 1963 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
PARSEARGS2:         0E2E DEFINED AT LINE 1968 IN MAIN.asm
PARSEARGS3:         0E36 DEFINED AT LINE 1976 IN MAIN.asm
                    > USED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 1974 IN MAIN.asm
PARSEARGS4:         0E39 DEFINED AT LINE 1979 IN MAIN.asm
                    > USED AT LINE 1965 IN MAIN.asm
                    > USED AT LINE 1967 IN MAIN.asm
PARSEARGS5:         0E3F DEFINED AT LINE 1985 IN MAIN.asm
                    > USED AT LINE 1983 IN MAIN.asm
PARSEBLOCK:         0E4A DEFINED AT LINE 1998 IN MAIN.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
PARSEBLOCK1:        0E4E DEFINED AT LINE 2002 IN MAIN.asm
                    > USED AT LINE 2006 IN MAIN.asm
                    > USED AT LINE 2028 IN MAIN.asm
                    > USED AT LINE 2031 IN MAIN.asm
                    > USED AT LINE 2036 IN MAIN.asm
                    > USED AT LINE 2040 IN MAIN.asm
PARSEBLOCK2:        0E7A DEFINED AT LINE 2029 IN MAIN.asm
                    > USED AT LINE 2016 IN MAIN.asm
                    > USED AT LINE 2018 IN MAIN.asm
                    > USED AT LINE 2020 IN MAIN.asm
PARSEBLOCK3:        0E7D DEFINED AT LINE 2032 IN MAIN.asm
                    > USED AT LINE 2023 IN MAIN.asm
                    > USED AT LINE 2025 IN MAIN.asm
                    > USED AT LINE 2027 IN MAIN.asm
PARSEBLOCK4:        0E85 DEFINED AT LINE 2038 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
                    > USED AT LINE 2013 IN MAIN.asm
PARSEBLOCK5:        0E88 DEFINED AT LINE 2041 IN MAIN.asm
                    > USED AT LINE 2037 IN MAIN.asm
PARSEBLOCK6:        0EB0 DEFINED AT LINE 2060 IN MAIN.asm
                    > USED AT LINE 2047 IN MAIN.asm
CREATEFUNC:         0EB4 DEFINED AT LINE 2068 IN MAIN.asm
                    > USED AT LINE 474 IN MAIN.asm
CREATEFUNC0:        0ED3 DEFINED AT LINE 2082 IN MAIN.asm
                    > USED AT LINE 2078 IN MAIN.asm
CREATEFUNC1:        0EEB DEFINED AT LINE 2101 IN MAIN.asm
                    > USED AT LINE 2097 IN MAIN.asm
CREATEFUNC2:        0EFE DEFINED AT LINE 2114 IN MAIN.asm
                    > USED AT LINE 2110 IN MAIN.asm
CREATEFUNC2A:       0F1D DEFINED AT LINE 2140 IN MAIN.asm
                    > USED AT LINE 2127 IN MAIN.asm
CREATEFUNC3:        0F2C DEFINED AT LINE 2152 IN MAIN.asm
                    > USED AT LINE 2162 IN MAIN.asm
CREATEFUNC4:        0F37 DEFINED AT LINE 2163 IN MAIN.asm
CREATEFUNC5:        0F38 DEFINED AT LINE 2165 IN MAIN.asm
                    > USED AT LINE 2081 IN MAIN.asm
LOWERCASETABLE:     0F56 DEFINED AT LINE 2195 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
LOWERCASETABLE1:    0F60 DEFINED AT LINE 2202 IN MAIN.asm
                    > USED AT LINE 2211 IN MAIN.asm
LOWERCASETABLE2:    0F67 DEFINED AT LINE 2208 IN MAIN.asm
                    > USED AT LINE 2199 IN MAIN.asm
                    > USED AT LINE 2201 IN MAIN.asm
COMMANDTABLE:       0F6C DEFINED AT LINE 2217 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
COMMANDTABLE1:      0F6D DEFINED AT LINE 2219 IN MAIN.asm
                    > USED AT LINE 2207 IN MAIN.asm
COMMANDTABLE2:      0F6E DEFINED AT LINE 2221 IN MAIN.asm
                    > USED AT LINE 2234 IN MAIN.asm
COMMANDTABLE3:      0F75 DEFINED AT LINE 2227 IN MAIN.asm
                    > USED AT LINE 2224 IN MAIN.asm
COMMANDTABLE4:      0F7E DEFINED AT LINE 2235 IN MAIN.asm
                    > USED AT LINE 2226 IN MAIN.asm
                    > USED AT LINE 2230 IN MAIN.asm
PUTSTR0:            0F84 DEFINED AT LINE 2243 IN MAIN.asm
                    > USED AT LINE 2249 IN MAIN.asm
PUTSTR:             0F88 DEFINED AT LINE 2246 IN MAIN.asm
                    > USED AT LINE 1945 IN MAIN.asm
                    > USED AT LINE 2313 IN MAIN.asm
                    > USED AT LINE 2370 IN MAIN.asm
NESTING:            0F8D DEFINED AT LINE 2262 IN MAIN.asm
                    > USED AT LINE 2395 IN MAIN.asm
                    > USED AT LINE 2453 IN MAIN.asm
NESTING0:           0F97 DEFINED AT LINE 2268 IN MAIN.asm
                    > USED AT LINE 2264 IN MAIN.asm
                    > USED AT LINE 2266 IN MAIN.asm
NESTING1A:          0F9E DEFINED AT LINE 2273 IN MAIN.asm
                    > USED AT LINE 2270 IN MAIN.asm
NESTING1:           0FA1 DEFINED AT LINE 2276 IN MAIN.asm
                    > USED AT LINE 2267 IN MAIN.asm
NESTING2:           0FB0 DEFINED AT LINE 2285 IN MAIN.asm
                    > USED AT LINE 2280 IN MAIN.asm
                    > USED AT LINE 2282 IN MAIN.asm
NESTING3:           0FB2 DEFINED AT LINE 2288 IN MAIN.asm
                    > USED AT LINE 2284 IN MAIN.asm
NESTING4:           0FBD DEFINED AT LINE 2295 IN MAIN.asm
                    > USED AT LINE 2290 IN MAIN.asm
                    > USED AT LINE 2292 IN MAIN.asm
PROMPT:             0FBF DEFINED AT LINE 2299 IN MAIN.asm
                    > USED AT LINE 2374 IN MAIN.asm
CRLF:               0FC8 DEFINED AT LINE 2304 IN MAIN.asm
                    > USED AT LINE 2466 IN MAIN.asm
PRINTSTR:           0FCF DEFINED AT LINE 2311 IN MAIN.asm
                    > USED AT LINE 2300 IN MAIN.asm
                    > USED AT LINE 2305 IN MAIN.asm
                    > USED AT LINE 2526 IN MAIN.asm
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 45
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 18
                    > USED AT LINE 21
                    > USED AT LINE 29
                    > USED AT LINE 174
INIT:               0FD6 DEFINED AT LINE 2318 IN MAIN.asm
                    > USED AT LINE 2367 IN MAIN.asm
INIT1:              0FDE DEFINED AT LINE 2322 IN MAIN.asm
                    > USED AT LINE 2328 IN MAIN.asm
WARMINIT:           0FE6 DEFINED AT LINE 2330 IN MAIN.asm
COLDBOOT0:          0FF9 DEFINED AT LINE 2337 IN MAIN.asm
                    > USED AT LINE 2325 IN MAIN.asm
                    > USED AT LINE 2363 IN MAIN.asm
COLDINIT:           1003 DEFINED AT LINE 2343 IN MAIN.asm
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
                    > USED AT LINE 6
COLDBOOT1:          1014 DEFINED AT LINE 2352 IN MAIN.asm
                    > USED AT LINE 2355 IN MAIN.asm
COLDSTART:          1021 DEFINED AT LINE 2361 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
START:              102A DEFINED AT LINE 2365 IN MAIN.asm
START1:             1030 DEFINED AT LINE 2368 IN MAIN.asm
                    > USED AT LINE 2335 IN MAIN.asm
                    > USED AT LINE 2364 IN MAIN.asm
INTERPRET:          1036 DEFINED AT LINE 2372 IN MAIN.asm
                    > USED AT LINE 2503 IN MAIN.asm
                    > USED AT LINE 2519 IN MAIN.asm
                    > USED AT LINE 2532 IN MAIN.asm
                    > USED AT LINE 2535 IN MAIN.asm
INTERPRET2:         1042 DEFINED AT LINE 2380 IN MAIN.asm
                    > USED AT LINE 2444 IN MAIN.asm
                    > USED AT LINE 2524 IN MAIN.asm
                    > USED AT LINE 2528 IN MAIN.asm
INTERPRET3:         104A DEFINED AT LINE 2388 IN MAIN.asm
                    > USED AT LINE 2401 IN MAIN.asm
INTERPRET4:         1055 DEFINED AT LINE 2397 IN MAIN.asm
                    > USED AT LINE 2386 IN MAIN.asm
INTERPRET5:         105A DEFINED AT LINE 2404 IN MAIN.asm
                    > USED AT LINE 2454 IN MAIN.asm
                    > USED AT LINE 2469 IN MAIN.asm
INTERPRET5A:        1078 DEFINED AT LINE 2441 IN MAIN.asm
INTERPRET6:         107A DEFINED AT LINE 2446 IN MAIN.asm
                    > USED AT LINE 2408 IN MAIN.asm
INTERPRET7:         1088 DEFINED AT LINE 2456 IN MAIN.asm
                    > USED AT LINE 2413 IN MAIN.asm
INTERPRET8:         109B DEFINED AT LINE 2471 IN MAIN.asm
                    > USED AT LINE 2411 IN MAIN.asm
NEXT:               10B6 DEFINED AT LINE 2484 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2488 IN MAIN.asm
NEXT0:              10CA DEFINED AT LINE 2498 IN MAIN.asm
                    > USED AT LINE 2496 IN MAIN.asm
NEXT1:              10CB DEFINED AT LINE 2500 IN MAIN.asm
                    > USED AT LINE 2489 IN MAIN.asm
EXIT:               10D2 DEFINED AT LINE 2505 IN MAIN.asm
                    > USED AT LINE 2502 IN MAIN.asm
RUN:                10D6 DEFINED AT LINE 2510 IN MAIN.asm
                    > USED AT LINE 2517 IN MAIN.asm
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
                    > USED AT LINE 26
                    > USED AT LINE 34
ERROR:              10DA DEFINED AT LINE 2515 IN MAIN.asm
                    > USED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 471 IN MAIN.asm
                    > USED AT LINE 1133 IN MAIN.asm
BACKSPACE_:         10EC DEFINED AT LINE 2521 IN MAIN.asm
                    > USED AT LINE 2418 IN MAIN.asm
EDIT_:              10FC DEFINED AT LINE 2531 IN MAIN.asm
                    > USED AT LINE 2416 IN MAIN.asm
REEDIT_:            10FF DEFINED AT LINE 2534 IN MAIN.asm
                    > USED AT LINE 2420 IN MAIN.asm
F1:                 1102 DEFINED AT LINE 32
                    > USED AT LINE 879 IN MAIN.asm
F1M_3051S12:        110D DEFINED AT LINE 39
                    > USED AT LINE 35
F2:                 110E DEFINED AT LINE 32
                    > USED AT LINE 881 IN MAIN.asm
F2M_3053S15:        1119 DEFINED AT LINE 39
                    > USED AT LINE 35
F3:                 111A DEFINED AT LINE 32
                    > USED AT LINE 883 IN MAIN.asm
F3M_3055S18:        1125 DEFINED AT LINE 39
                    > USED AT LINE 35
F4:                 1126 DEFINED AT LINE 32
                    > USED AT LINE 885 IN MAIN.asm
F4M_3057S21:        1131 DEFINED AT LINE 39
                    > USED AT LINE 35
TESTSSTART:         1200 DEFINED AT LINE 25
                    > USED AT LINE 8
EXPECTM_3074S43:    127E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3075S44:    130F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3079S49:    1382 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3080S50:    13EB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3081S51:    1452 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3082S52:    14B9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3083S53:    1520 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3084S54:    1587 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3085S55:    15F0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3086S56:    165B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3087S57:    16C4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3088S58:    1733 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3089S59:    179C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3090S60:    1805 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3091S61:    1870 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3092S62:    18DB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3093S63:    194C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3094S64:    19BD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3095S65:    1A2C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3096S66:    1A9F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3097S67:    1B16 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3098S68:    1B8B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3099S69:    1BFA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3100S70:    1C71 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3101S71:    1CE4 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3102S72:    1D53 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3103S73:    1DC2 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3104S74:    1E39 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3105S75:    1EA8 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3106S76:    1F17 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3107S77:    1F88 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3108S78:    2009 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3109S79:    2078 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3110S80:    20EF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3111S81:    215E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3112S82:    21DB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3113S83:    2258 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3114S84:    22D5 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3115S85:    2352 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3116S86:    23D3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3117S87:    2454 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3118S88:    24D9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3119S89:    254A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3120S90:    25C9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3121S91:    2640 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3122S92:    26AF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3123S93:    2720 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3124S94:    2791 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3125S95:    2800 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3126S96:    286F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3127S97:    28DE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3128S98:    294D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3129S99:    29BC DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3130S100:   2A2B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3131S101:   2A9A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3132S102:   2B09 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3133S103:   2B7A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3134S104:   2BEB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3135S105:   2C5C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3136S106:   2CCF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3137S107:   2D42 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3138S108:   2DAF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3139S109:   2E1C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3140S110:   2E8F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3141S111:   2F08 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3142S112:   2F81 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3143S113:   2FFE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3144S114:   3085 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3145S115:   310C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3146S116:   317B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3147S117:   31EC DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3148S118:   3263 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3149S119:   32DE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3150S120:   3355 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3151S121:   33D6 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3152S122:   3459 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3153S123:   34E2 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3154S124:   356F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3155S125:   35EE DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3156S126:   3673 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3157S127:   36FA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3158S128:   3783 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3159S129:   380A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3160S130:   389F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3161S131:   3922 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3162S132:   39B3 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3163S133:   3A46 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3164S134:   3ADB DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3165S135:   3B7A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3166S136:   3C19 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3167S137:   3C98 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3168S138:   3D1F DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3169S139:   3DA0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3170S140:   3E27 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3171S141:   3EB2 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3172S142:   3F4B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3173S143:   3FEC DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3174S144:   408D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3175S145:   4120 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3176S146:   41B9 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3177S147:   4268 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3178S148:   4321 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3179S149:   43AC DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3180S150:   4437 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3181S151:   44B0 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3182S152:   4529 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3183S153:   45A2 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3184S154:   461B DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3185S155:   468C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3186S156:   46FD DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3187S157:   476E DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3188S158:   47DF DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3189S159:   485C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3190S160:   48E7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3191S161:   4978 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3192S162:   4A21 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3193S163:   4ACA DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3194S164:   4B8D DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3195S165:   4C1A DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3196S166:   4C93 DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3197S167:   4D1C DEFINED AT LINE 37
                    > USED AT LINE 16
EXPECTM_3198S168:   4DA7 DEFINED AT LINE 37
                    > USED AT LINE 16
EXECSTR:            4DB2 DEFINED AT LINE 3 IN test.fast.util.asm
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
                    > USED AT LINE 7
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              4F00 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 1691 IN MAIN.asm
                    > USED AT LINE 2358 IN MAIN.asm
                    > USED AT LINE 2362 IN MAIN.asm
                    > USED AT LINE 2366 IN MAIN.asm
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
                    > USED AT LINE 5
TIB:                4F00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 2377 IN MAIN.asm
                    > USED AT LINE 2385 IN MAIN.asm
                    > USED AT LINE 2448 IN MAIN.asm
                    > USED AT LINE 2458 IN MAIN.asm
                    > USED AT LINE 2473 IN MAIN.asm
                    > USED AT LINE 2476 IN MAIN.asm
BUFFER:             5000 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 1122 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1216 IN MAIN.asm
                    > USED AT LINE 1940 IN MAIN.asm
VARS:               5100 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1042 IN MAIN.asm
                    > USED AT LINE 2349 IN MAIN.asm
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
                    > USED AT LINE 11
                    > USED AT LINE 23
RESTARTS:           51D0 DEFINED AT LINE 18 IN ram.asm
RST08:              51D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              51D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              51D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              51D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              51D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              51DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               51DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             51DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             51E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            51E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            51E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            51E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2345 IN MAIN.asm
VDATAWIDTH:         51E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 261 IN MAIN.asm
                    > USED AT LINE 503 IN MAIN.asm
                    > USED AT LINE 677 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 1799 IN MAIN.asm
                    > USED AT LINE 1861 IN MAIN.asm
VNUMBASE:           51E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 1128 IN MAIN.asm
VTIBPTR:            51EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1276 IN MAIN.asm
                    > USED AT LINE 1277 IN MAIN.asm
                    > USED AT LINE 2378 IN MAIN.asm
                    > USED AT LINE 2475 IN MAIN.asm
VBUFPTR:            51EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 559 IN MAIN.asm
                    > USED AT LINE 569 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 650 IN MAIN.asm
                    > USED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 674 IN MAIN.asm
                    > USED AT LINE 687 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 1941 IN MAIN.asm
                    > USED AT LINE 1943 IN MAIN.asm
VNEXT:              51EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2357 IN MAIN.asm
VHEAPPTR:           51F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 526 IN MAIN.asm
                    > USED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 1271 IN MAIN.asm
                    > USED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 1523 IN MAIN.asm
                    > USED AT LINE 1542 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
                    > USED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 2055 IN MAIN.asm
                    > USED AT LINE 2058 IN MAIN.asm
                    > USED AT LINE 2080 IN MAIN.asm
                    > USED AT LINE 2085 IN MAIN.asm
                    > USED AT LINE 2116 IN MAIN.asm
                    > USED AT LINE 2182 IN MAIN.asm
VRECUR:             51F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1184 IN MAIN.asm
                    > USED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 1686 IN MAIN.asm
VDEFINE:            51F4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 395 IN MAIN.asm
                    > USED AT LINE 408 IN MAIN.asm
                    > USED AT LINE 413 IN MAIN.asm
VSTRMODE:           51F6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1194 IN MAIN.asm
                    > USED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 1935 IN MAIN.asm
VPOINTER:           51F8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 394 IN MAIN.asm
                    > USED AT LINE 433 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 1582 IN MAIN.asm
                    > USED AT LINE 1796 IN MAIN.asm
VREMAIN:            51FA DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1006 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
VSAVEDIP:           51FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2331 IN MAIN.asm
                    > USED AT LINE 2478 IN MAIN.asm
VSAVEDSP:           51FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2332 IN MAIN.asm
                    > USED AT LINE 2479 IN MAIN.asm
VSAVEDNEXT:         5200 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2333 IN MAIN.asm
                    > USED AT LINE 2480 IN MAIN.asm
VSAVEDBP:           5202 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 2334 IN MAIN.asm
                    > USED AT LINE 2481 IN MAIN.asm
VTEMP1:             5204 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 485 IN MAIN.asm
                    > USED AT LINE 531 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 1678 IN MAIN.asm
                    > USED AT LINE 1690 IN MAIN.asm
                    > USED AT LINE 1696 IN MAIN.asm
                    > USED AT LINE 1725 IN MAIN.asm
                    > USED AT LINE 1746 IN MAIN.asm
                    > USED AT LINE 1753 IN MAIN.asm
                    > USED AT LINE 1759 IN MAIN.asm
                    > USED AT LINE 1850 IN MAIN.asm
                    > USED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 2050 IN MAIN.asm
                    > USED AT LINE 2059 IN MAIN.asm
                    > USED AT LINE 2071 IN MAIN.asm
                    > USED AT LINE 2183 IN MAIN.asm
VTEMP2:             5206 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 1637 IN MAIN.asm
                    > USED AT LINE 1677 IN MAIN.asm
                    > USED AT LINE 1726 IN MAIN.asm
                    > USED AT LINE 1747 IN MAIN.asm
                    > USED AT LINE 2073 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
VTEMP3:             5208 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 2070 IN MAIN.asm
                    > USED AT LINE 2184 IN MAIN.asm
VLASTDEF:           520A DEFINED AT LINE 61 IN ram.asm
TBPTR:              520C DEFINED AT LINE 62 IN ram.asm
TITLEBUF:           520E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 2320 IN MAIN.asm
                    > USED AT LINE 2339 IN MAIN.asm
                    > USED AT LINE 2369 IN MAIN.asm
HEAP:               5222 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 2043 IN MAIN.asm
