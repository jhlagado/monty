0000                             ; .engine mycomputer
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 0C               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 0C               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 0C               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 0C               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 0C               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 0C               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 0C               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 0C               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 0C               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 0C               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 0B               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 0C               LD   (RST08),HL   
0094   22 D2 0C               LD   (RST10),HL   
0097   22 D4 0C               LD   (RST18),HL   
009A   22 D6 0C               LD   (RST20),HL   
009D   22 D8 0C               LD   (RST28),HL   
00A0   22 DA 0C               LD   (RST30),HL   
00A3   22 DE 0C               LD   (INTVEC),HL   
00A6   22 E0 0C               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 0C               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 0C               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                .macro TESTINPUT,s1
00C3                             ; 
00C3                 ld HL,buf1%%M
00C3                 ld (tbPtr),HL
00C3                 jr buf2%%M
00C3                buf1%%M:
00C3                 DB s1,$0D
00C3                buf2%%M:
00C3                .endm
00C3                 
00C3   31 80 0B               LD   sp,STACK   
00C6   CD C6 09               CALL   init   
00C9   21 E3 00               LD   hl,testGetCharImpl   ; change getchar implmentation to use tbuf
00CC   22 E2 0C               LD   (GETCVEC),hl   
00CF                          ;*Macro unroll: testInput "1 2 3 .k"
00CF   21 D7 00               LD   HL,buf1M_537S20   
00D2   22 02 0D               LD   (tbPtr),HL   
00D5   18 09                  JR   buf2M_537S20   
00D7                BUF1M_537S20:      
00D7   31 20 32 20 33 20 2E 6B 0D DB   "1 2 3 .k",$0D   
00E0                BUF2M_537S20:      
00E0   C3 FA 09               JP   interpret   
00E3                TESTGETCHARIMPL:      
00E3   E5                     PUSH   HL   
00E4   2A 02 0D               LD   HL,(tbPtr)   
00E7   7E                     LD   A,(HL)   
00E8   23                     INC   HL   
00E9   22 02 0D               LD   (tbPtr),HL   
00EC   E1                     POP   HL   
00ED   C9                     RET      
00EE                             ; *************************************************************************
00EE                             ; 
00EE                             ;  Monty programming language for the Z80
00EE                             ; 
00EE                             ;  by John Hardy 2023
00EE                             ; 
00EE                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00EE                             ; 
00EE                             ;  see the LICENSE file in this repo for more information
00EE                             ; 
00EE                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00EE                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00EE                             ; 
00EE                             ; *****************************************************************************
00EE                DSIZE:    EQU   $80   
00EE                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00EE                TRUE:     EQU   -1   ; C-style true
00EE                FALSE:    EQU   0   
00EE                NUL:      EQU   0   ; exit code
00EE                DQUOTE:   EQU   $22   ; " double quote char
00EE                CTRL_C:   EQU   3   
00EE                CTRL_E:   EQU   5   
00EE                CTRL_H:   EQU   8   
00EE                CTRL_J:   EQU   10   
00EE                CTRL_L:   EQU   12   
00EE                ESC:      EQU   27   
00EE                Z80_RST8:   EQU   $CF   
00EE                             ; **************************************************************************
00EE                             ; stack frame
00EE                             ; 
00EE                             ; arg0                              -- 0th arg
00EE                             ; arg1
00EE                             ;  :
00EE                             ; argn                              -- nth arg
00EE                             ; loc0                              -- 0th local
00EE                             ; loc1
00EE                             ;  :
00EE                             ; locn                              -- last local
00EE                             ; IP                                -- IP (saved interpreter ptr, return)
00EE                             ; arg_list*                         -- arg_list*
00EE                             ; first_arg*                        -- first_arg*
00EE                             ; BP                                -- BP (saved base ptr)           <-- iy
00EE                             ; res0                              -- 0th result
00EE                             ; res1
00EE                             ;  :
00EE                             ; resn                              -- last result.             <-- sp
00EE                             ; 
00EE                             ; **************************************************************************
00EE                             ; **************************************************************************
00EE                             ; Page 0  Initialisation
00EE                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; vTIBPtr an offset to the tib
0184   5D 0A                  DW   next   ; nNext
0186   00 10                  DW   heap   ; vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   0   ; ^@  0 NUL
0201   00                     DB   0   ; ^A  1 SOH
0202   00                     DB   0   ; ^B  2 STX
0203   00                     DB   0   ; ^C  3 ETX
0204   00                     DB   0   ; ^D  4 EOT
0205   00                     DB   0   ; ^E  5 ENQ
0206   00                     DB   0   ; ^F  6 ACK
0207   00                     DB   0   ; ^G  7 BEL
0208   00                     DB   0   ; ^H  8 BS
0209   00                     DB   0   ; ^I  9 TAB
020A   00                     DB   0   ; ^J 10 LF
020B   00                     DB   0   ; ^K 11 VT
020C   00                     DB   0   ; ^L 12 FF
020D   00                     DB   0   ; ^M 13 CR
020E   00                     DB   0   ; ^N 14 SO
020F   00                     DB   0   ; ^O 15 SI
0210   00                     DB   0   ; ^P 16 DLE
0211   00                     DB   0   ; ^Q 17 DC1
0212   00                     DB   0   ; ^R 18 DC2
0213   00                     DB   0   ; ^S 19 DC3
0214   00                     DB   0   ; ^T 20 DC4
0215   00                     DB   0   ; ^U 21 NAK
0216   00                     DB   0   ; ^V 22 SYN
0217   00                     DB   0   ; ^W 23 ETB
0218   00                     DB   0   ; ^X 24 CAN
0219   00                     DB   0   ; ^Y 25 EM
021A   00                     DB   0   ; ^Z 26 SUB
021B   00                     DB   0   ; ^[ 27 ESC
021C   00                     DB   0   ; ^\ 28 FS
021D   00                     DB   0   ; ^] 29 GS
021E   00                     DB   0   ; ^^ 30 RS
021F   00                     DB   0   ; ^_ 31 US
0220                OPCODES:      ; still available ~ `
0220   85                     DB   lsb(nop_)   ; SP
0221   39                     DB   lsb(bang_)   ; !
0222   4D                     DB   lsb(dblquote_)   ; "
0223   41                     DB   lsb(hash_)   ; #
0224   09                     DB   lsb(dollar_)   ; $
0225   12                     DB   lsb(percent_)   ; %
0226   06                     DB   lsb(amper_)   ; &
0227   1E                     DB   lsb(tick_)   ; '
0228   6D                     DB   lsb(lparen_)   ; (
0229   87                     DB   lsb(rparen_)   ; )
022A   36                     DB   lsb(star_)   ; *
022B   00                     DB   lsb(plus_)   ; +
022C   4A                     DB   lsb(comma_)   ; ,
022D   50                     DB   lsb(minus_)   ; -
022E   24                     DB   lsb(dot_)   ; .
022F   82                     DB   lsb(slash_)   ; /	
0230   3E                     DB   lsb(num_)   ; 0
0231   3E                     DB   lsb(num_)   ; 1
0232   3E                     DB   lsb(num_)   ; 2
0233   3E                     DB   lsb(num_)   ; 3
0234   3E                     DB   lsb(num_)   ; 4
0235   3E                     DB   lsb(num_)   ; 5
0236   3E                     DB   lsb(num_)   ; 6
0237   3E                     DB   lsb(num_)   ; 7
0238   3E                     DB   lsb(num_)   ; 8
0239   3E                     DB   lsb(num_)   ; 9
023A   2A                     DB   lsb(colon_)   ; :
023B   21                     DB   lsb(semicolon_)   ; ;
023C   70                     DB   lsb(lt_)   ; <
023D   53                     DB   lsb(eq_)   ; =
023E   62                     DB   lsb(gt_)   ; >
023F   33                     DB   lsb(question_)   ; ?
0240   03                     DB   lsb(at_)   ; @
0241   2D                     DB   lsb(upcase_)   ; A
0242   2D                     DB   lsb(upcase_)   ; B
0243   2D                     DB   lsb(upcase_)   ; C
0244   2D                     DB   lsb(upcase_)   ; D
0245   2D                     DB   lsb(upcase_)   ; E
0246   2D                     DB   lsb(upcase_)   ; F
0247   2D                     DB   lsb(upcase_)   ; G
0248   2D                     DB   lsb(upcase_)   ; h
0249   2D                     DB   lsb(upcase_)   ; I
024A   2D                     DB   lsb(upcase_)   ; J
024B   2D                     DB   lsb(upcase_)   ; K
024C   2D                     DB   lsb(upcase_)   ; L
024D   2D                     DB   lsb(upcase_)   ; M
024E   2D                     DB   lsb(upcase_)   ; N
024F   2D                     DB   lsb(upcase_)   ; O
0250   2D                     DB   lsb(upcase_)   ; p
0251   2D                     DB   lsb(upcase_)   ; Q
0252   2D                     DB   lsb(upcase_)   ; R
0253   2D                     DB   lsb(upcase_)   ; S
0254   2D                     DB   lsb(upcase_)   ; T
0255   2D                     DB   lsb(upcase_)   ; U
0256   2D                     DB   lsb(upcase_)   ; V
0257   2D                     DB   lsb(upcase_)   ; W
0258   2D                     DB   lsb(upcase_)   ; X
0259   2D                     DB   lsb(upcase_)   ; Y
025A   2D                     DB   lsb(upcase_)   ; Z
025B   0C                     DB   lsb(lbrack_)   ; [
025C   15                     DB   lsb(backslash_)   ; \
025D   0F                     DB   lsb(rbrack_)   ; ]
025E   47                     DB   lsb(caret_)   ; ^
025F   27                     DB   lsb(underscore_)   ; _
0260   85                     DB   lsb(nop_)   ; `     used for testing string   	
0261   30                     DB   lsb(lowcase_)   ; a
0262   30                     DB   lsb(lowcase_)   ; b
0263   30                     DB   lsb(lowcase_)   ; c
0264   30                     DB   lsb(lowcase_)   ; d
0265   30                     DB   lsb(lowcase_)   ; e
0266   30                     DB   lsb(lowcase_)   ; f
0267   30                     DB   lsb(lowcase_)   ; g
0268   30                     DB   lsb(lowcase_)   ; h
0269   30                     DB   lsb(lowcase_)   ; i
026A   30                     DB   lsb(lowcase_)   ; j
026B   30                     DB   lsb(lowcase_)   ; k
026C   30                     DB   lsb(lowcase_)   ; l
026D   30                     DB   lsb(lowcase_)   ; m
026E   30                     DB   lsb(lowcase_)   ; n
026F   30                     DB   lsb(lowcase_)   ; o
0270   30                     DB   lsb(lowcase_)   ; p
0271   30                     DB   lsb(lowcase_)   ; q
0272   30                     DB   lsb(lowcase_)   ; r
0273   30                     DB   lsb(lowcase_)   ; s
0274   30                     DB   lsb(lowcase_)   ; t
0275   30                     DB   lsb(lowcase_)   ; u
0276   30                     DB   lsb(lowcase_)   ; v
0277   30                     DB   lsb(lowcase_)   ; w
0278   30                     DB   lsb(lowcase_)   ; x
0279   30                     DB   lsb(lowcase_)   ; y
027A   30                     DB   lsb(lowcase_)   ; z
027B   18                     DB   lsb(lbrace_)   ; {
027C   44                     DB   lsb(pipe_)   ; |
027D   1B                     DB   lsb(rbrace_)   ; }
027E   85                     DB   lsb(nop_)   ; ~
027F   85                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 8A 03               JP   plus   
0303                AT_:         
0303   C3 A4 03               JP   at   
0306                AMPER_:      
0306   C3 B0 03               JP   amper   
0309                DOLLAR_:      
0309   C3 D4 03               JP   dollar   
030C                LBRACK_:      
030C   C3 0B 04               JP   lbrack   
030F                RBRACK_:      
030F   C3 27 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 75 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 A8 05               JP   backslash   
0318                LBRACE_:      
0318   C3 D5 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 3E 05               JP   rbrace   
031E                TICK_:       
031E   C3 93 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 90 07               JP   semicolon   
0324                DOT_:        
0324   C3 D7 05               JP   dot   
0327                UNDERSCORE_:      
0327   C3 82 07               JP   underscore   
032A                COLON_:      
032A   C3 9E 04               JP   colon   
032D                UPCASE_:      
032D   C3 06 07               JP   upcase   
0330                LOWCASE_:      
0330   C3 0B 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 1D 07               JP   question   
0336                STAR_:       
0336   C3 36 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 52 07               JP   num   
0341                HASH_:       
0341   C3 E9 06               JP   hash   
0344                PIPE_:       
0344   C3 BB 03               JP   pipe   
0347                CARET_:      
0347   C3 47 06               JP   caret   
034A                COMMA_:      
034A   C3 AA 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 CF 07               JP   dblquote   
0350                MINUS_:      
0350   C3 F7 07               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 8D 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 23 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA BC 07               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 0C                  JR   lt1   
036D                LPAREN_:      
036D   C3 44 06               JP   lparen   
0370                LT_:         
0370   03                     INC   bc   
0371   0A                     LD   a,(bc)   
0372   FE 3C                  CP   "<"   
0374   CA AC 07               JP   z,shiftLeft   
0377   E1                     POP   hl   
0378   D1                     POP   de   
0379                LT1:         
0379   FE 3D                  CP   "="   
037B   CA 2B 06               JP   z,lessthaneq   
037E   0B                     DEC   bc   
037F   C3 30 06               JP   lessthan   
0382                SLASH_:      
0382   C3 B9 05               JP   slash   
0385                NOP_:        
0385   DD E9                  JP   (ix)   
0387                RPAREN_:      
0387   C3 88 07               JP   rparen   
038A                             ;*******************************************************************
038A                             ; word operators
038A                             ;*******************************************************************
038A                PLUS:        
038A                ADD:         
038A   03                     INC   bc   
038B   0A                     LD   a,(bc)   
038C   FE 2B                  CP   "+"   ; ++ increment variable
038E   20 05                  JR   nz,add1   
0390   E1                     POP   hl   
0391   23                     INC   hl   
0392   C3 8F 04               JP   assign0   
0395                ADD1:        
0395   0B                     DEC   bc   
0396   D1                     POP   de   ; second term
0397   E1                     POP   hl   ; first term
0398   19                     ADD   hl,de   
0399                ADD3:        
0399   03                     INC   bc   
039A   0A                     LD   a,(bc)   
039B   FE 3D                  CP   "="   ; += add to variable
039D   CA 8F 04               JP   z,assign0   
03A0   E5                     PUSH   hl   
03A1   0B                     DEC   bc   
03A2   DD E9                  JP   (ix)   
03A4                             ; @ addr
03A4                             ; -- ptr
03A4                AT:          
03A4                ADDR:        
03A4   2A EE 0C               LD   hl,(vPointer)   
03A7   E5                     PUSH   hl   
03A8   21 EE 0C               LD   hl,vPointer   
03AB   22 EE 0C               LD   (vPointer),hl   
03AE   DD E9                  JP   (ix)   
03B0                AMPER:       
03B0                AND:         
03B0   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B1   E1                     POP   hl   
03B2   7B                     LD   a,e   
03B3   A5                     AND   l   
03B4   6F                     LD   l,a   
03B5   7A                     LD   a,d   
03B6   A4                     AND   h   
03B7                AND1:        
03B7   67                     LD   h,a   
03B8   C3 99 03               JP   add3   
03BB                PIPE:        
03BB                OR:          
03BB   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03BC   E1                     POP   hl   
03BD   7B                     LD   a,e   
03BE   B5                     OR   l   
03BF   6F                     LD   l,a   
03C0   7A                     LD   a,d   
03C1   B4                     OR   h   
03C2   18 F3                  JR   and1   
03C4                XOR:         
03C4   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03C5                XOR1:        
03C5   E1                     POP   hl   
03C6   7B                     LD   a,e   
03C7   AD                     XOR   l   
03C8   6F                     LD   l,a   
03C9   7A                     LD   a,d   
03CA   AC                     XOR   h   
03CB   67                     LD   h,a   
03CC   E5                     PUSH   hl   
03CD   DD E9                  JP   (ix)   
03CF                INVERT:      ; Bitwise INVert the top member of the stack
03CF   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03D2   18 F1                  JR   xor1   
03D4                             ; $a .. $z
03D4                             ; -- value
03D4                             ; returns value of arg
03D4                DOLLAR:      
03D4                ARG:         
03D4   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03D7   FD 56 05               LD   d,(iy+5)   
03DA   EB                     EX   de,hl   
03DB   7D                     LD   a,l   ; arg_list* == null, skip
03DC   B4                     OR   h   
03DD   28 1C                  JR   z,arg0a   
03DF   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03E0   2B                     DEC   hl   
03E1   7E                     LD   a,(hl)   
03E2   23                     INC   hl   
03E3   23                     INC   hl   
03E4   B7                     OR   a   
03E5   28 14                  JR   z,arg0a   ; num_args == 0, skip
03E7   5F                     LD   e,a   ; e = a = num_args
03E8   03                     INC   bc   ; a = next char = dollar_name
03E9   0A                     LD   a,(bc)   
03EA   C5                     PUSH   bc   ; save IP
03EB   43                     LD   b,e   ; b = e = num_args
03EC   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03EF   FD 56 03               LD   d,(iy+3)   
03F2                ARG0:        
03F2   1B                     DEC   de   ; a = dollar_name, de = next arg*
03F3   1B                     DEC   de   
03F4   BE                     CP   (hl)   
03F5   28 09                  JR   z,arg1   
03F7   23                     INC   hl   ; hl = next arg_list*
03F8   10 F8                  DJNZ   arg0   
03FA   C1                     POP   bc   ; no match, restore IP
03FB                ARG0A:       
03FB   11 00 00               LD   de,0   ; return 0
03FE   18 08                  JR   arg1a   
0400                ARG1:        
0400   C1                     POP   bc   ; restore IP
0401   EB                     EX   de,hl   ; hl = arg*
0402   22 EE 0C               LD   (vPointer),hl   ; store arg* in setter
0405   5E                     LD   e,(hl)   
0406   23                     INC   hl   
0407   56                     LD   d,(hl)   ; de = arg
0408                ARG1A:       
0408   D5                     PUSH   de   ; push arg
0409   DD E9                  JP   (ix)   
040B                LBRACK:      
040B                ARRBEGIN:      
040B   11 00 00               LD   de,0   ; create stack frame
040E   D5                     PUSH   de   ; push null for IP
040F   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0412   FD 56 05               LD   d,(iy+5)   ; 
0415   D5                     PUSH   de   ; 
0416   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0419   FD 56 03               LD   d,(iy+3)   ; 
041C   D5                     PUSH   de   ; 
041D   FD E5                  PUSH   iy   ; push BP
041F   FD 21 00 00            LD   iy,0   ; BP = SP
0423   FD 39                  ADD   iy,sp   
0425   DD E9                  JP   (ix)   
0427                RBRACK:      
0427                ARREND:      
0427   FD 54                  LD   d,iyh   ; de = BP
0429   FD 5D                  LD   e,iyl   
042B   ED 43 FA 0C            LD   (vTemp1),bc   ; save IP
042F   62 6B                  LD   hl,de   ; hl = de = BP
0431   B7                     OR   a   
0432   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0434   CB 3C                  SRL   h   ; 
0436   CB 1D                  RR   l   
0438   44 4D                  LD   bc,hl   ; bc = count
043A   2A EC 0C               LD   hl,(vHeapPtr)   ; hl = array[-2]
043D   71                     LD   (hl),c   ; write num items in length word
043E   23                     INC   hl   
043F   70                     LD   (hl),b   
0440   23                     INC   hl   ; hl = array[0], bc = count
0441                             ; de = BP, hl = array[0], bc = count
0441                ARREND1:      
0441   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0444   77                     LD   (hl),a   ; write lsb of array item
0445   23                     INC   hl   ; move to msb of array item
0446   3A E6 0C               LD   a,(vDataWidth)   ; vDataWidth=1?
0449   3D                     DEC   a   
044A   28 05                  JR   z,arrEnd2   
044C   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
044F   77                     LD   (hl),a   ; write msb of array item
0450   23                     INC   hl   ; move to next word in array
0451                ARREND2:      
0451   FD 2B                  DEC   iy   ; move to next word on stack
0453   FD 2B                  DEC   iy   
0455   0B                     DEC   bc   ; dec items count
0456   79                     LD   a,c   ; if not zero loop
0457   B0                     OR   b   
0458   20 E7                  JR   nz,arrEnd1   
045A   EB                     EX   de,hl   ; de = end of array, hl = BP
045B   F9                     LD   sp,hl   ; sp = BP
045C   E1                     POP   hl   ; de = end of array, hl = old BP
045D   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
045E   FD 62                  LD   iyh,d   
0460   FD 6B                  LD   iyl,e   
0462   D1                     POP   de   ; pop arg_list (discard)
0463   D1                     POP   de   ; pop first_arg* (discard)
0464   D1                     POP   de   ; pop IP (discard)
0465   ED 5B EC 0C            LD   de,(vHeapPtr)   ; de = array[-2]
0469   22 EC 0C               LD   (vHeapPtr),hl   ; move heap* to end of array
046C   ED 4B FA 0C            LD   bc,(vTemp1)   ; restore IP
0470   13                     INC   de   ; de = array[0]
0471   13                     INC   de   
0472   D5                     PUSH   de   ; return array[0]
0473   DD E9                  JP   (ix)   
0475                             ; index of an array, based on vDataWidth
0475                             ; array num -- value    ; also sets vPointer to address
0475                ARRINDEX:      
0475   E1                     POP   hl   ; hl = index
0476   D1                     POP   de   ; de = array
0477   3A E6 0C               LD   a,(vDataWidth)   ; a = data width
047A   3D                     DEC   a   
047B   28 01                  JR   z,arrIndex1   
047D                ARRINDEX0:      
047D   29                     ADD   hl,hl   ; if data width = 2 then double
047E                ARRINDEX1:      
047E   19                     ADD   hl,de   ; add addr
047F   22 EE 0C               LD   (vPointer),hl   ; store address in setter
0482   16 00                  LD   d,0   
0484   5E                     LD   e,(hl)   
0485   B7                     OR   a   ; check data width again
0486   28 02                  JR   z,arrIndex2   
0488   23                     INC   hl   
0489   56                     LD   d,(hl)   
048A                ARRINDEX2:      
048A   D5                     PUSH   de   
048B   DD E9                  JP   (ix)   
048D                             ; value _oldValue --            ; uses address in vPointer
048D                ASSIGN:      
048D   E1                     POP   hl   ; discard last accessed value
048E   E1                     POP   hl   ; hl = new value
048F                ASSIGN0:      
048F   EB                     EX   de,hl   ; de = new value
0490                ASSIGNX:      
0490   2A EE 0C               LD   hl,(vPointer)   
0493   73                     LD   (hl),e   
0494   3A E6 0C               LD   a,(vDataWidth)   
0497   3D                     DEC   a   ; is it byte?
0498   28 02                  JR   z,assign1   
049A   23                     INC   hl   
049B   72                     LD   (hl),d   
049C                ASSIGN1:      
049C   DD E9                  JP   (ix)   
049E                             ; arg_list - parses input (ab:c)
049E                             ; names after the : represent uninitialised locals
049E                             ; return values are the state of the stack after the block ends
049E                COLON:       
049E                ARGLIST:      
049E   11 00 00               LD   de,0   ; d = count locals, e = count args ()
04A1   2A EC 0C               LD   hl,(vHeapPtr)   ; hl = heap*
04A4   23                     INC   hl   ; skip length field to start
04A5   23                     INC   hl   
04A6   E5                     PUSH   hl   ; save start of arg_list
04A7   03                     INC   bc   ; point to next char
04A8                ARGLIST1:      
04A8   0A                     LD   a,(bc)   
04A9   FE 3A                  CP   ":"   ; ":" switches from args to locals
04AB   20 03                  JR   nz,arglist1a   
04AD   14                     INC   d   ; non zero value local count acts as flag
04AE   18 10                  JR   arglist3   
04B0                ARGLIST1A:      
04B0   FE 41                  CP   "A"   ; < "A" terminates arg_list
04B2   38 0F                  JR   c,arglist4   
04B4   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B6   30 0B                  JR   nc,arglist4   
04B8                ARGLIST2:      
04B8   77                     LD   (hl),a   
04B9   23                     INC   hl   
04BA   1C                     INC   e   ; increase arg count
04BB   AF                     XOR   a   
04BC   B2                     OR   d   
04BD   28 01                  JR   z,arglist3   
04BF   14                     INC   d   ; if d > 0 increase local count
04C0                ARGLIST3:      
04C0   03                     INC   bc   ; point to next char
04C1   18 E5                  JR   arglist1   
04C3                ARGLIST4:      
04C3   0B                     DEC   bc   
04C4   AF                     XOR   a   
04C5   B2                     OR   d   
04C6   28 01                  JR   z,arglist5   
04C8   15                     DEC   d   ; remove initial inc
04C9                ARGLIST5:      
04C9   23                     INC   hl   
04CA   22 EC 0C               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04CD   E1                     POP   hl   ; hl = start of arg_list
04CE   E5                     PUSH   hl   ; return start of arg_list
04CF   2B                     DEC   hl   ; write number of locals at start - 1
04D0   72                     LD   (hl),d   
04D1   2B                     DEC   hl   ; write number of args + locals at start - 2
04D2   73                     LD   (hl),e   
04D3   DD E9                  JP   (ix)   
04D5                LBRACE:      
04D5                BLOCK:       
04D5   C5                     PUSH   bc   ; return pointer to first { of block
04D6   03                     INC   bc   
04D7   16 01                  LD   d,1   ; nesting: count first parenthesis
04D9                BLOCK1:      ; Skip to end of definition
04D9   0A                     LD   a,(bc)   ; Get the next character
04DA   03                     INC   bc   ; Point to next character
04DB   FE 21                  CP   " " + 1   ; ignore whitespace
04DD   38 FA                  JR   c,block1   
04DF   FE 29                  CP   ")"   
04E1   28 2D                  JR   z,block4   
04E3   FE 7D                  CP   "}"   
04E5   28 29                  JR   z,block4   
04E7   FE 5D                  CP   "]"   
04E9   28 25                  JR   z,block4   
04EB   FE 28                  CP   "("   
04ED   28 16                  JR   z,block2   
04EF   FE 7B                  CP   "{"   
04F1   28 12                  JR   z,block2   
04F3   FE 5B                  CP   "["   
04F5   28 0E                  JR   z,block2   
04F7   FE 27                  CP   "'"   
04F9   28 0D                  JR   z,block3   
04FB   FE 60                  CP   "`"   
04FD   28 09                  JR   z,block3   
04FF   FE 22                  CP   DQUOTE   
0501   28 05                  JR   z,block3   
0503   18 D4                  JR   block1   
0505                BLOCK2:      
0505   14                     INC   d   
0506   18 D1                  JR   block1   
0508                BLOCK3:      
0508   3E 80                  LD   a,$80   
050A   AA                     XOR   d   
050B   47                     LD   b,a   
050C   20 CB                  JR   nz,block1   
050E   18 03                  JR   block5   
0510                BLOCK4:      
0510   15                     DEC   d   
0511   20 C6                  JR   nz,block1   ; get the next element
0513                BLOCK5:      
0513   60 69                  LD   hl,bc   ; hl = IP
0515   11 00 10               LD   de,HEAP   ; is IP pointing to object in heap
0518   B7                     OR   a   ; IP - HEAP
0519   ED 52                  SBC   hl,de   
051B   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
051D   28 1C                  JR   z,block6   
051F   60 69                  LD   hl,bc   ; hl = IP
0521   D1                     POP   de   ; de = block*
0522   ED 43 FA 0C            LD   (vTemp1),bc   ; save IP
0526   B7                     OR   a   ; bc = size
0527   ED 52                  SBC   hl,de   
0529   44 4D                  LD   bc,hl   
052B   EB                     EX   de,hl   ; hl = block* de = heap*
052C   ED 5B EC 0C            LD   de,(vHeapPtr)   
0530   D5                     PUSH   de   ; return hblock*
0531   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0533   ED 53 EC 0C            LD   (vHeapPtr),de   ; heap* += size
0537   ED 4B FA 0C            LD   bc,(vTemp1)   ; restore IP
053B                BLOCK6:      
053B   0B                     DEC   bc   ; balanced, exit
053C   DD E9                  JP   (ix)   
053E                RBRACE:      
053E                BLOCKEND:      
053E   D9                     EXX      ; de" = oldBP bc" = oldIP
053F   FD 5E 00               LD   e,(iy+0)   
0542   FD 56 01               LD   d,(iy+1)   
0545   FD 4E 06               LD   c,(iy+6)   
0548   FD 46 07               LD   b,(iy+7)   
054B   D9                     EXX      
054C   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
054F   FD 56 03               LD   d,(iy+3)   
0552   EB                     EX   de,hl   
0553   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0556   FD 56 01               LD   d,(iy+1)   
0559   13                     INC   de   ; for carry flag <=
055A   B7                     OR   a   
055B   ED 52                  SBC   hl,de   
055D   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
055F   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0561   FD 5D                  LD   e,iyl   
0563   21 08 00               LD   hl,8   
0566   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0567   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0568   18 0C                  JR   blockEnd2   
056A                BLOCKEND1:      ; same scope
056A   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
056D   FD 56 03               LD   d,(iy+3)   
0570   EB                     EX   de,hl   
0571   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0573   FD 5D                  LD   e,iyl   
0575   EB                     EX   de,hl   
0576                BLOCKEND2:      
0576   44 4D                  LD   bc,hl   ; bc = hl = BP
0578   B7                     OR   a   ; hl = BP - SP = count
0579   ED 72                  SBC   hl,sp   
057B   7D                     LD   a,l   
057C   B4                     OR   h   
057D   28 09                  JR   z,blockEnd3   
057F   C5                     PUSH   bc   ; bc = count, hl = BP
0580   44 4D                  LD   bc,hl   
0582   E1                     POP   hl   
0583   2B                     DEC   hl   ; hl = BP-1
0584   1B                     DEC   de   ; de = args*-1
0585   ED B8                  LDDR      
0587   13                     INC   de   
0588                BLOCKEND3:      
0588   EB                     EX   de,hl   ; hl = new tos
0589   F9                     LD   sp,hl   ; sp = new tos
058A   D9                     EXX      ; bc = IP, iy = oldBP
058B   D5                     PUSH   de   
058C   C5                     PUSH   bc   
058D   D9                     EXX      
058E   C1                     POP   bc   
058F   FD E1                  POP   iy   
0591   DD E9                  JP   (ix)   
0593                TICK:        
0593                CHAR:        
0593   21 00 00               LD   hl,0   ; if "" is empty or null
0596                CHAR1:       
0596   03                     INC   bc   ; point to next char
0597   0A                     LD   a,(bc)   
0598   FE 27                  CP   "'"   ; ' is the terminator
059A   28 09                  JR   z,char3   
059C   FE 5C                  CP   $5c   ; \ is the escape
059E   20 02                  JR   nz,char2   
05A0   03                     INC   bc   
05A1   0A                     LD   a,(bc)   
05A2                CHAR2:       
05A2   6F                     LD   l,a   
05A3   18 F1                  JR   char1   
05A5                CHAR3:       
05A5   E5                     PUSH   hl   
05A6   DD E9                  JP   (ix)   
05A8                BACKSLASH:      
05A8   DD E9                  JP   (ix)   
05AA                             ; , discard stack item
05AA                             ; x y -- x
05AA                COMMA:       
05AA                DISCARD:      
05AA   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05AC   FD 5D                  LD   e,iyl   
05AE   EB                     EX   de,hl   
05AF   B7                     OR   a   
05B0   ED 72                  SBC   hl,sp   
05B2   CB 7C                  BIT   7,h   
05B4   20 01                  JR   nz,discard1   
05B6   E1                     POP   hl   
05B7                DISCARD1:      
05B7   DD E9                  JP   (ix)   
05B9                SLASH:       
05B9   03                     INC   bc   
05BA   0A                     LD   a,(bc)   
05BB   FE 5C                  CP   $5C   
05BD   CA 8A 08               JP   z,comment   
05C0   FE 41                  CP   "A"   
05C2   D2 16 08               JP   nc,command   
05C5   0B                     DEC   bc   
05C6   D1                     POP   de   
05C7   E1                     POP   hl   
05C8   C5                     PUSH   bc   ; preserve the IP
05C9   44 4D                  LD   bc,hl   
05CB   CD 0A 06               CALL   divide   
05CE   EB                     EX   de,hl   
05CF   ED 53 F0 0C            LD   (vRemain),de   
05D3   C1                     POP   bc   
05D4   C3 99 03               JP   add3   
05D7                DOT:         
05D7   E1                     POP   hl   
05D8   03                     INC   bc   
05D9   0A                     LD   a,(bc)   
05DA   FE 68                  CP   "h"   
05DC   20 05                  JR   nz,dot1   
05DE   CD 2E 09               CALL   prthex   
05E1   18 20                  JR   dot4   
05E3                DOT1:        
05E3   FE 73                  CP   "s"   
05E5   20 05                  JR   nz,dot2   
05E7   CD 51 09               CALL   prtstr   
05EA   18 17                  JR   dot4   
05EC                DOT2:        
05EC   FE 63                  CP   "c"   
05EE   20 06                  JR   nz,dot3   
05F0   7D                     LD   a,l   
05F1   CD 85 00               CALL   putchar   
05F4   18 0D                  JR   dot4   
05F6                DOT3:        
05F6   FE 6B                  CP   "k"   
05F8   20 05                  JR   nz,dot3a   
05FA   CD 56 09               CALL   prtStk   
05FD   18 04                  JR   dot4   
05FF                DOT3A:       
05FF   0B                     DEC   bc   
0600   CD E6 08               CALL   prtdec   
0603                DOT4:        
0603   3E 20                  LD   a," "   
0605   CD 85 00               CALL   putchar   
0608   DD E9                  JP   (ix)   
060A                             ; division subroutine.
060A                             ; bc: divisor, de: dividend, hl: remainder
060A                DIVIDE:      
060A   21 00 00               LD   hl,0   ; zero the remainder
060D   3E 10                  LD   a,16   ; loop counter
060F                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
060F   CB 21                  SLA   c   
0611   CB 10                  RL   b   
0613   ED 6A                  ADC   hl,hl   
0615   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0617   38 03                  JR   c,divide2   
0619   0C                     INC   c   
061A   18 01                  JR   divide3   
061C                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
061C   19                     ADD   hl,de   
061D                DIVIDE3:      
061D   3D                     DEC   a   
061E   20 EF                  JR   nz,divide1   
0620   50 59                  LD   de,bc   ; result from bc to de
0622   C9                     RET      
0623                             ; hl = value1, de = value2
0623                             ; hl = result
0623                EQUALS:      
0623   B7                     OR   a   ; reset the carry flag
0624   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0626   28 10                  JR   z,true1   
0628   C3 3E 06               JP   false1   
062B                             ; hl = value1 de = value2
062B                             ; hl = result
062B                LESSTHANEQ:      
062B   B7                     OR   a   
062C   ED 52                  SBC   hl,de   
062E   18 05                  JR   lessthan1   
0630                             ; hl = value1 de = value2
0630                             ; hl = result
0630                LESSTHAN:      
0630   B7                     OR   a   
0631   ED 52                  SBC   hl,de   
0633   28 09                  JR   z,false1   
0635                LESSTHAN1:      
0635   FA 3E 06               JP   m,false1   
0638                TRUE1:       
0638   21 FF FF               LD   hl,TRUE   
063B   E5                     PUSH   hl   
063C   DD E9                  JP   (ix)   
063E                NULL1:       
063E                FALSE1:      
063E   21 00 00               LD   hl,FALSE   
0641   E5                     PUSH   hl   
0642   DD E9                  JP   (ix)   
0644                LPAREN:      
0644   C3 D5 04               JP   block   
0647                             ; execute a block of code which ends with }
0647                             ; creates a root scope if BP == stack
0647                             ; else uses outer scope
0647                CARET:       
0647                GO:          
0647   D1                     POP   de   ; de = block*
0648                GO1:         
0648   7B                     LD   a,e   ; if block* == null, exit
0649   B2                     OR   d   
064A   20 02                  JR   nz,go2   
064C   DD E9                  JP   (ix)   
064E                GO2:         
064E   1A                     LD   a,(de)   
064F   FE 7B                  CP   "{"   
0651   28 07                  JR   z,goBlock1   
0653   FE 28                  CP   "("   
0655   C2 8D 06               JP   nz,goFunc   
0658   13                     INC   de   ; de is the address to jump back to
0659   D5                     PUSH   de   ; push de just before stack frame
065A                GOBLOCK:      
065A                GOBLOCK1:      
065A   ED 53 FA 0C            LD   (vTemp1),de   ; save de
065E   21 80 0B               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0661   FD 54                  LD   d,iyh   
0663   FD 5D                  LD   e,iyl   
0665   B7                     OR   a   ; if stack* == BP then this is the root_scope
0666   ED 52                  SBC   hl,de   
0668   ED 5B FA 0C            LD   de,(vTemp1)   ; restore de
066C   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
066D   B4                     OR   h   
066E   3E 00                  LD   a,0   
0670   28 6C                  JR   z,goFunc8   
0672   C5                     PUSH   bc   ; push IP
0673   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0676   FD 46 05               LD   b,(iy+5)   
0679   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
067C   FD 66 03               LD   h,(iy+3)   
067F                GOBLOCK2:      
067F   C5                     PUSH   bc   ; arg_list*
0680   E5                     PUSH   hl   ; first_arg*
0681   FD E5                  PUSH   iy   ; push BP
0683   FD 21 00 00            LD   iy,0   ; BP = SP
0687   FD 39                  ADD   iy,sp   
0689   42 4B                  LD   bc,de   ; bc = de = block*-1
068B   DD E9                  JP   (ix)   
068D                GOFUNC:      ; execute function
068D   EB                     EX   de,hl   ; hl = func*
068E   5E                     LD   e,(hl)   ; de = partial_array*
068F   23                     INC   hl   
0690   56                     LD   d,(hl)   
0691   23                     INC   hl   
0692   7B                     LD   a,e   ; if partial_array* == null skip
0693   B2                     OR   d   
0694   28 21                  JR   z,goFunc3   
0696   ED 43 FA 0C            LD   (vTemp1),bc   
069A   22 FC 0C               LD   (vTemp2),hl   ; save bc,hl
069D   EB                     EX   de,hl   ; hl = partial_array*
069E   2B                     DEC   hl   ; bc = count
069F   46                     LD   b,(hl)   
06A0   2B                     DEC   hl   
06A1   4E                     LD   c,(hl)   
06A2   23                     INC   hl   ; push each item on stack
06A3   23                     INC   hl   
06A4   18 06                  JR   goFunc2   
06A6                GOFUNC1:      
06A6   5E                     LD   e,(hl)   ; de = partial item
06A7   23                     INC   hl   
06A8   56                     LD   d,(hl)   
06A9   23                     INC   hl   
06AA   D5                     PUSH   de   ; push on stack
06AB   0B                     DEC   bc   
06AC                GOFUNC2:      
06AC   79                     LD   a,c   ; if count != 0 then loop
06AD   B0                     OR   b   
06AE   20 F6                  JR   nz,goFunc1   
06B0   ED 4B FA 0C            LD   bc,(vTemp1)   ; restore bc
06B4   2A FC 0C               LD   hl,(vTemp2)   ; restore hl
06B7                GOFUNC3:      
06B7   5E                     LD   e,(hl)   ; de = block*
06B8   23                     INC   hl   
06B9   56                     LD   d,(hl)   
06BA   23                     INC   hl   
06BB   ED 53 FA 0C            LD   (vTemp1),de   ; save block*
06BF   5E                     LD   e,(hl)   ; de = arg_list*
06C0   23                     INC   hl   
06C1   56                     LD   d,(hl)   
06C2   23                     INC   hl   
06C3   EB                     EX   de,hl   ; hl = arg_list*
06C4   ED 5B FA 0C            LD   de,(vTemp1)   ; restore de = block*
06C8   7D                     LD   a,l   ; if arg_list* == null a = 0
06C9   B4                     OR   h   
06CA   20 03                  JR   nz,goFunc4   
06CC   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06CD   18 0F                  JR   goFunc8   
06CF                GOFUNC4:      ; allocate locals
06CF   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
06D0   7E                     LD   a,(hl)   
06D1   18 03                  JR   goFunc6   
06D3                GOFUNC5:      ; loop
06D3   3B                     DEC   sp   
06D4   3B                     DEC   sp   
06D5   3D                     DEC   a   
06D6                GOFUNC6:      
06D6   B7                     OR   a   
06D7   20 FA                  JR   nz,goFunc5   ; end loop
06D9                GOFUNC7:      
06D9   2B                     DEC   hl   ; a = num_args* x 2
06DA   7E                     LD   a,(hl)   
06DB   23                     INC   hl   
06DC   23                     INC   hl   
06DD   87                     ADD   a,a   ; a *= 2
06DE                GOFUNC8:      
06DE   C5                     PUSH   bc   ; push IP
06DF   44 4D                  LD   bc,hl   
06E1   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06E4   85                     ADD   a,l   
06E5   6F                     LD   l,a   
06E6   39                     ADD   hl,sp   
06E7   18 96                  JR   goBlock2   
06E9                HASH:        
06E9                HEXNUM:      
06E9   21 00 00               LD   hl,0   ; Clear hl to accept the number
06EC                HEXNUM1:      
06EC   03                     INC   bc   
06ED   0A                     LD   a,(bc)   ; Get the character which is a numeral
06EE   CB 77                  BIT   6,a   ; is it uppercase alpha?
06F0   28 02                  JR   z,hexnum2   ; no a decimal
06F2   D6 07                  SUB   7   ; sub 7  to make $a - $F
06F4                HEXNUM2:      
06F4   D6 30                  SUB   $30   ; form decimal digit
06F6   DA 74 07               JP   c,num2   
06F9   FE 10                  CP   $0F+1   
06FB   D2 74 07               JP   nc,num2   
06FE   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06FF   29                     ADD   hl,hl   ; 4X
0700   29                     ADD   hl,hl   ; 8X
0701   29                     ADD   hl,hl   ; 16X
0702   85                     ADD   a,l   ; add into bottom of hl
0703   6F                     LD   l,a   
0704   18 E6                  JR   hexnum1   
0706                UPCASE:      
0706   0A                     LD   a,(bc)   ; a = identifier char
0707   D6 41                  SUB   "A"   ; "A" = 0
0709   18 05                  JR   ident1   
070B                LOWCASE:      
070B   0A                     LD   a,(bc)   
070C   D6 61                  SUB   "a"   
070E   C6 1A                  ADD   a,26   
0710                IDENT1:      
0710   87                     ADD   a,a   ; l = a * 2
0711   6F                     LD   l,a   
0712   26 0C                  LD   h,msb(vars)   
0714   22 EE 0C               LD   (vPointer),hl   ; store address in setter
0717   5E                     LD   e,(hl)   
0718   23                     INC   hl   
0719   56                     LD   d,(hl)   
071A   D5                     PUSH   de   
071B   DD E9                  JP   (ix)   
071D                             ; if
071D                             ; condition then -- value
071D                QUESTION:      
071D                IF:          
071D   03                     INC   bc   
071E   0A                     LD   a,(bc)   
071F   FE 3F                  CP   "?"   
0721   28 06                  JR   z,ifte   
0723   0B                     DEC   bc   
0724   11 00 00               LD   de,NUL   ; NUL pointer for else
0727   18 01                  JR   ifte1   
0729                             ; ifte
0729                             ; condition then else -- value
0729                IFTE:        
0729   D1                     POP   de   ; de = else
072A                IFTE1:       
072A   E1                     POP   hl   ; hl = then
072B   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
072C   7C                     LD   a,h   
072D   B5                     OR   l   
072E   E1                     POP   hl   ; hl = then
072F   CA 48 06               JP   z,go1   ; if z de = else
0732   EB                     EX   de,hl   ; condition = false, de = then
0733   C3 48 06               JP   go1   
0736                STAR:        
0736                MUL:         
0736   D1                     POP   de   ; get first value
0737   E1                     POP   hl   
0738                MUL2:        
0738   C5                     PUSH   bc   ; Preserve the IP
0739   44 4D                  LD   bc,hl   ; bc = 2nd value
073B   21 00 00               LD   hl,0   
073E   3E 10                  LD   a,16   
0740                MUL3:        
0740   29                     ADD   hl,hl   
0741   CB 13                  RL   e   
0743   CB 12                  RL   d   
0745   30 04                  JR   nc,$+6   
0747   09                     ADD   hl,bc   
0748   30 01                  JR   nc,$+3   
074A   13                     INC   de   
074B   3D                     DEC   a   
074C   20 F2                  JR   nz,mul3   
074E   C1                     POP   bc   ; Restore the IP
074F   C3 99 03               JP   add3   
0752                NUM:         
0752   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0755   0A                     LD   a,(bc)   ; Get numeral or -
0756   FE 2D                  CP   "-"   
0758   20 01                  JR   nz,num0   
075A   03                     INC   bc   ; move to next char, no flags affected
075B                NUM0:        
075B   08                     EX   af,af'   ; save zero flag = 0 for later
075C                NUM1:        
075C   0A                     LD   a,(bc)   ; read digit
075D   D6 30                  SUB   "0"   ; less than 0?
075F   38 13                  JR   c,num2   ; not a digit, exit loop
0761   FE 0A                  CP   10   ; greater that 9?
0763   30 0F                  JR   nc,num2   ; not a digit, exit loop
0765   03                     INC   bc   ; inc IP
0766   54 5D                  LD   de,hl   ; multiply hl * 10
0768   29                     ADD   hl,hl   
0769   29                     ADD   hl,hl   
076A   19                     ADD   hl,de   
076B   29                     ADD   hl,hl   
076C   85                     ADD   a,l   ; add digit in a to hl
076D   6F                     LD   l,a   
076E   3E 00                  LD   a,0   
0770   8C                     ADC   a,h   
0771   67                     LD   h,a   
0772   18 E8                  JR   num1   
0774                NUM2:        
0774   0B                     DEC   bc   
0775   08                     EX   af,af'   ; restore zero flag
0776   20 07                  JR   nz,num3   
0778   EB                     EX   de,hl   ; negate the value of hl
0779   21 00 00               LD   hl,0   
077C   B7                     OR   a   ; jump to sub2
077D   ED 52                  SBC   hl,de   
077F                NUM3:        
077F   E5                     PUSH   hl   ; Put the number on the stack
0780   DD E9                  JP   (ix)   ; and process the next character
0782                UNDERSCORE:      
0782                REMAIN:      
0782   2A F0 0C               LD   hl,(vRemain)   
0785   E5                     PUSH   hl   
0786   DD E9                  JP   (ix)   
0788                RPAREN:      
0788   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
078B   FD 46 09               LD   b,(iy+9)   
078E   DD E9                  JP   (ix)   
0790                             ; arg_list* block* -- ptr
0790                SEMICOLON:      
0790   D1                     POP   de   ; de = block* hl = heap*
0791   2A EC 0C               LD   hl,(vHeapPtr)   
0794   AF                     XOR   a   
0795   77                     LD   (hl),a   ; compile null partial_array*
0796   23                     INC   hl   
0797   77                     LD   (hl),a   
0798   23                     INC   hl   
0799   73                     LD   (hl),e   ; compile block*
079A   23                     INC   hl   
079B   72                     LD   (hl),d   
079C   23                     INC   hl   
079D   D1                     POP   de   ; de = block*
079E   73                     LD   (hl),e   ; compile arg_list*
079F   23                     INC   hl   
07A0   72                     LD   (hl),d   
07A1   23                     INC   hl   
07A2   ED 5B EC 0C            LD   de,(vHeapPtr)   ; return func*
07A6   D5                     PUSH   de   
07A7   22 EC 0C               LD   (vHeapPtr),hl   ; heap* += 4
07AA   DD E9                  JP   (ix)   
07AC                             ; shiftLeft
07AC                             ; value count -- value2          shift left count places
07AC                SHIFTLEFT:      
07AC   50 59                  LD   de,bc   ; save IP
07AE   C1                     POP   bc   ; bc = count
07AF   41                     LD   b,c   ; b = loop counter
07B0   E1                     POP   hl   
07B1   04                     INC   b   ; test for counter=0 case
07B2   18 01                  JR   shiftLeft2   
07B4                SHIFTLEFT1:      
07B4   29                     ADD   hl,hl   ; left shift hl
07B5                SHIFTLEFT2:      
07B5   10 FD                  DJNZ   shiftLeft1   
07B7   E5                     PUSH   hl   
07B8   42 4B                  LD   bc,de   ; restore IP
07BA   DD E9                  JP   (ix)   
07BC                             ; shiftRight
07BC                             ; value count -- value2          shift left count places
07BC                SHIFTRIGHT:      
07BC   50 59                  LD   de,bc   ; save IP
07BE   C1                     POP   bc   ; bc = count
07BF   41                     LD   b,c   ; b = loop counter
07C0   E1                     POP   hl   
07C1   04                     INC   b   ; test for counter=0 case
07C2   18 04                  JR   shiftRight2   
07C4                SHIFTRIGHT1:      
07C4   CB 3C                  SRL   h   ; right shift hl
07C6   CB 1D                  RR   l   
07C8                SHIFTRIGHT2:      
07C8   10 FA                  DJNZ   shiftRight1   
07CA   E5                     PUSH   hl   
07CB   42 4B                  LD   bc,de   ; restore IP
07CD   DD E9                  JP   (ix)   
07CF                             ; string
07CF                             ; -- ptr                        ; points to start of string chars,
07CF                             ; length is stored at start - 2 bytes
07CF                DBLQUOTE:      
07CF                STRING:      
07CF   2A EC 0C               LD   hl,(vHeapPtr)   ; hl = heap*
07D2   23                     INC   hl   ; skip length field to start
07D3   23                     INC   hl   
07D4   E5                     PUSH   hl   ; save start of string
07D5   03                     INC   bc   ; point to next char
07D6   18 03                  JR   string2   
07D8                STRING1:      
07D8   77                     LD   (hl),a   
07D9   23                     INC   hl   ; increase count
07DA   03                     INC   bc   ; point to next char
07DB                STRING2:      
07DB   0A                     LD   a,(bc)   
07DC   FE 22                  CP   DQUOTE   ; " is the string terminator
07DE   20 F8                  JR   nz,string1   
07E0   FE 60                  CP   "`"   ; ` is the string terminator used in testing
07E2   20 F4                  JR   nz,string1   
07E4   AF                     XOR   a   ; write NUL to terminate string
07E5   77                     LD   (hl),a   ; hl = end of string
07E6   23                     INC   hl   
07E7   22 EC 0C               LD   (vHeapPtr),hl   ; bump heap* to after end of string
07EA   2B                     DEC   hl   ; hl = end of string without terminator
07EB   D1                     POP   de   ; de = start of string
07EC   D5                     PUSH   de   ; return start of string
07ED   B7                     OR   a   ; hl = length bytes, de = start of string
07EE   ED 52                  SBC   hl,de   
07F0   EB                     EX   de,hl   
07F1   2B                     DEC   hl   ; write length bytes to length field at start - 2
07F2   72                     LD   (hl),d   
07F3   2B                     DEC   hl   
07F4   73                     LD   (hl),e   
07F5   DD E9                  JP   (ix)   
07F7                MINUS:       ; negative sign or subtract
07F7   03                     INC   bc   ; check if sign of a number
07F8   0A                     LD   a,(bc)   
07F9   0B                     DEC   bc   
07FA   FE 30                  CP   "0"   
07FC   38 05                  JR   c,sub   
07FE   FE 3A                  CP   "9"+1   
0800   DA 3E 03               JP   c,num_   
0803                SUB:         ; Subtract the value 2nd on stack from top of stack
0803   03                     INC   bc   
0804   FE 2D                  CP   "-"   
0806   20 05                  JR   nz,sub1   
0808   E1                     POP   hl   
0809   2B                     DEC   hl   
080A   C3 8F 04               JP   assign0   
080D                SUB1:        
080D   0B                     DEC   bc   
080E   D1                     POP   de   
080F   E1                     POP   hl   
0810   B7                     OR   a   
0811   ED 52                  SBC   hl,de   
0813   C3 99 03               JP   add3   
0816                             ;*******************************************************************
0816                             ; commands
0816                             ; a contains command letter
0816                             ; bc points to command letter
0816                             ;*******************************************************************
0816                COMMAND:      
0816   FE 61                  CP   "a"   ; \a absolute
0818   CA 5D 08               JP   z,abs1   
081B   FE 62                  CP   "b"   ; \x break
081D   CA 93 08               JP   z,break   
0820   FE 63                  CP   "c"   ; \c chars
0822   CA AD 08               JP   z,chars   
0825   FE 70                  CP   "p"   ; \p partial
0827   CA 6A 08               JP   z,partial   
082A   FE 66                  CP   "f"   ; \f false
082C   CA 3E 06               JP   z,false1   
082F   FE 68                  CP   "h"   ; \h heap pointer
0831   CA B5 08               JP   z,heapPtr   
0834   FE 69                  CP   "i"   ; \i input
0836   CA C1 08               JP   z,input   
0839   FE 6B                  CP   "k"   ; \k key
083B   CA CC 08               JP   z,key   
083E   FE 6E                  CP   "n"   ; \n numbers
0840   CA DE 08               JP   z,numbers   
0843   FE 6F                  CP   "o"   ; \o output
0845   CA D5 08               JP   z,output   
0848   FE 74                  CP   "t"   ; \t true
084A   CA 38 06               JP   z,true1   
084D   FE 76                  CP   "v"   ; \v invert
084F   CA CF 03               JP   z,invert   
0852   FE 78                  CP   "x"   ; \x xor
0854   CA C4 03               JP   z,xor   
0857                ERROR1:      
0857   21 01 00               LD   hl,1   ; error 1: unknown command
085A   C3 8B 0A               JP   error   
085D                ABS1:        
085D   E1                     POP   hl   
085E   CB 7C                  BIT   7,h   
0860   C8                     RET   z   
0861   AF                     XOR   a   
0862   95                     SUB   l   
0863   6F                     LD   l,a   
0864   9F                     SBC   a,a   
0865   94                     SUB   h   
0866   67                     LD   h,a   
0867   E5                     PUSH   hl   
0868   DD E9                  JP   (ix)   
086A                             ; partial
086A                             ; array* func* -- func1*
086A                PARTIAL:      
086A   E1                     POP   hl   ; h1 = func*
086B   ED 5B EC 0C            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
086F   ED 43 FA 0C            LD   (vTemp1),bc   ; save IP
0873   01 06 00               LD   bc,6   ; bc = count
0876   ED B0                  LDIR      ; clone func
0878   ED 4B FA 0C            LD   bc,(vTemp1)   ; restore IP
087C   2A EC 0C               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
087F   ED 53 EC 0C            LD   (vHeapPtr),de   ; heap* += 6
0883   D1                     POP   de   ; de = array*
0884   E5                     PUSH   hl   ; return partial_array*
0885   73                     LD   (hl),e   ; compile array*
0886   23                     INC   hl   
0887   72                     LD   (hl),d   
0888   DD E9                  JP   (ix)   
088A                COMMENT:      
088A   03                     INC   bc   ; point to next char
088B   0A                     LD   a,(bc)   
088C   FE 20                  CP   " "   ; terminate on any char less than SP
088E   30 FA                  JR   nc,comment   
0890   0B                     DEC   bc   
0891   DD E9                  JP   (ix)   
0893                BREAK:       
0893   E1                     POP   hl   
0894   7D                     LD   a,l   
0895   B4                     OR   h   
0896   28 02                  JR   z,break1   
0898   DD E9                  JP   (ix)   
089A                BREAK1:      
089A   FD 5D                  LD   e,iyl   ; get block* just under stack frame
089C   FD 54                  LD   d,iyh   
089E   21 08 00               LD   hl,8   
08A1   19                     ADD   hl,de   
08A2   23                     INC   hl   
08A3   23                     INC   hl   
08A4   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
08A7   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
08AA   C3 3E 05               JP   blockEnd   
08AD                CHARS:       
08AD   21 01 00               LD   hl,1   
08B0                CHARS1:      
08B0   22 E6 0C               LD   (vDataWidth),hl   
08B3   DD E9                  JP   (ix)   
08B5                HEAPPTR:      
08B5   2A EC 0C               LD   hl,(vHeapPtr)   
08B8   E5                     PUSH   hl   
08B9   21 EC 0C               LD   hl,vHeapPtr   
08BC   22 EE 0C               LD   (vPointer),hl   
08BF   DD E9                  JP   (ix)   
08C1                             ; Z80 port input
08C1                             ; port -- value
08C1                INPUT:       
08C1   E1                     POP   hl   
08C2   59                     LD   e,c   ; save IP
08C3   4D                     LD   c,l   
08C4   ED 68                  IN   l,(c)   
08C6   26 00                  LD   h,0   
08C8   4B                     LD   c,e   ; restore IP
08C9   E5                     PUSH   hl   
08CA   DD E9                  JP   (ix)   
08CC                KEY:         
08CC   CD 81 00               CALL   getchar   
08CF   26 00                  LD   h,0   
08D1   6F                     LD   l,a   
08D2   E5                     PUSH   hl   
08D3   DD E9                  JP   (ix)   
08D5                             ; Z80 port output
08D5                             ; value port --
08D5                OUTPUT:      
08D5   E1                     POP   hl   
08D6   59                     LD   e,c   ; save IP
08D7   4D                     LD   c,l   
08D8   E1                     POP   hl   
08D9   ED 69                  OUT   (c),l   
08DB   4B                     LD   c,e   ; restore IP
08DC   DD E9                  JP   (ix)   
08DE                NUMBERS:      
08DE   21 02 00               LD   hl,2   
08E1   C3 B0 08               JP   chars1   
08E4                             ; 
08E4                             ; 
08E4                             ; 
08E4                             ; 
08E4                FILTER:      
08E4                MAP:         
08E4                SCAN:        
08E4   DD E9                  JP   (ix)   
08E6                             ; print decimal
08E6                             ; hl = value
08E6                PRTDEC:      
08E6   CB 7C                  BIT   7,h   
08E8   28 0B                  JR   z,prtdec0   
08EA   3E 2D                  LD   a,"-"   
08EC   CD 85 00               CALL   putchar   
08EF   AF                     XOR   a   
08F0   95                     SUB   l   
08F1   6F                     LD   l,a   
08F2   9F                     SBC   a,a   
08F3   94                     SUB   h   
08F4   67                     LD   h,a   
08F5                PRTDEC0:      
08F5   C5                     PUSH   bc   
08F6   0E 00                  LD   c,0   ; leading zeros flag = false
08F8   11 F0 D8               LD   de,-10000   
08FB   CD 17 09               CALL   prtdec1   
08FE   11 18 FC               LD   de,-1000   
0901   CD 17 09               CALL   prtdec1   
0904   11 9C FF               LD   de,-100   
0907   CD 17 09               CALL   prtdec1   
090A   1E F6                  LD   e,-10   
090C   CD 17 09               CALL   prtdec1   
090F   0C                     INC   c   ; flag = true for at least digit
0910   1E FF                  LD   e,-1   
0912   CD 17 09               CALL   prtdec1   
0915   C1                     POP   bc   
0916   C9                     RET      
0917                PRTDEC1:      
0917   06 2F                  LD   b,"0"-1   
0919                PRTDEC2:      
0919   04                     INC   b   
091A   19                     ADD   hl,de   
091B   38 FC                  JR   c,prtdec2   
091D   ED 52                  SBC   hl,de   
091F   3E 30                  LD   a,"0"   
0921   B8                     CP   b   
0922   20 05                  JR   nz,prtdec3   
0924   AF                     XOR   a   
0925   B1                     OR   c   
0926   C8                     RET   z   
0927   18 01                  JR   prtdec4   
0929                PRTDEC3:      
0929   0C                     INC   c   
092A                PRTDEC4:      
092A   78                     LD   a,b   
092B   C3 85 00               JP   putchar   
092E                PRTHEX:      ; display hl as a 16-bit number in hex.
092E   C5                     PUSH   bc   ; preserve the IP
092F   7C                     LD   a,h   
0930   CD 39 09               CALL   prthex2   
0933   7D                     LD   a,l   
0934   CD 39 09               CALL   prthex2   
0937   C1                     POP   bc   
0938   C9                     RET      
0939                PRTHEX2:      
0939   4F                     LD   c,a   
093A   1F                     RRA      
093B   1F                     RRA      
093C   1F                     RRA      
093D   1F                     RRA      
093E   CD 42 09               CALL   prthex3   
0941   79                     LD   a,c   
0942                PRTHEX3:      
0942   E6 0F                  AND   0x0F   
0944   C6 90                  ADD   a,0x90   
0946   27                     DAA      
0947   CE 40                  ADC   a,0x40   
0949   27                     DAA      
094A   C3 85 00               JP   putchar   
094D                PRTSTR0:      
094D   CD 85 00               CALL   putchar   
0950   23                     INC   hl   
0951                PRTSTR:      
0951   7E                     LD   a,(hl)   
0952   B7                     OR   a   
0953   20 F8                  JR   nz,prtstr0   
0955   C9                     RET      
0956                PRTSTK:      
0956   ED 43 FA 0C            LD   (vTemp1),bc   
095A                             ; call printStr
095A                             ; .cstr "=> "
095A   21 80 0B               LD   hl,STACK   
095D   ED 72                  SBC   hl,sp   
095F   CB 3C                  SRL   h   
0961   CB 1D                  RR   l   
0963   44 4D                  LD   bc,hl   
0965   21 80 0B               LD   hl,STACK   
0968   18 0A                  JR   prtStk2   
096A                PRTSTK1:      
096A   0B                     DEC   bc   
096B   2B                     DEC   hl   
096C   56                     LD   d,(hl)   
096D   2B                     DEC   hl   
096E   5E                     LD   e,(hl)   
096F   EB                     EX   de,hl   
0970   CD 2E 09               CALL   prthex   
0973   EB                     EX   de,hl   
0974                             ; ld a," "
0974                             ; call putchar
0974                PRTSTK2:      
0974   79                     LD   a,c   
0975   B0                     OR   b   
0976   20 F2                  JR   nz,prtStk1   
0978                             ; call prompt
0978   ED 4B FA 0C            LD   bc,(vTemp1)   
097C   C9                     RET      
097D                             ; **************************************************************************
097D                             ; calculate nesting value
097D                             ; a is char to be tested,
097D                             ; e is the nesting value (initially 0)
097D                             ; e is increased by ( and [
097D                             ; e is decreased by ) and ]
097D                             ; e has its bit 7 toggled by `
097D                             ; limited to 127 levels
097D                             ; **************************************************************************
097D                NESTING:      
097D   FE 22                  CP   DQUOTE   ; quote char
097F   28 06                  JR   z,nesting0   
0981   FE 60                  CP   "`"   ; quote char
0983   28 02                  JR   z,nesting0   
0985   18 0A                  JR   nesting1   
0987                NESTING0:      
0987   CB 7B                  BIT   7,e   
0989   28 03                  JR   z,nesting1a   
098B   CB BB                  RES   7,e   
098D   C9                     RET      
098E                NESTING1A:      
098E   CB FB                  SET   7,e   
0990   C9                     RET      
0991                NESTING1:      
0991   CB 7B                  BIT   7,e   
0993   C0                     RET   nz   
0994   FE 7B                  CP   "{"   
0996   28 08                  JR   z,nesting2   
0998   FE 5B                  CP   "["   
099A   28 04                  JR   z,nesting2   
099C   FE 28                  CP   "("   
099E   20 02                  JR   nz,nesting3   
09A0                NESTING2:      
09A0   1C                     INC   e   
09A1   C9                     RET      
09A2                NESTING3:      
09A2   FE 7D                  CP   "}"   
09A4   28 07                  JR   z,nesting4   
09A6   FE 5D                  CP   "]"   
09A8   28 03                  JR   z,nesting4   
09AA   FE 29                  CP   ")"   
09AC   C0                     RET   nz   
09AD                NESTING4:      
09AD   1D                     DEC   e   
09AE   C9                     RET      
09AF                PROMPT:      
09AF   CD BF 09               CALL   printStr   
09B2   0D 0A 3E 20 00         .CSTR   "\r\n> "   
09B7   C9                     RET      
09B8                CRLF:        
09B8   CD BF 09               CALL   printStr   
09BB   0D 0A 00               .CSTR   "\r\n"   
09BE   C9                     RET      
09BF                             ; prints a null teminated string
09BF                             ; the string should be immedaitely following the call
09BF                PRINTSTR:      
09BF   E3                     EX   (sp),hl   ; swap			
09C0   CD 51 09               CALL   prtstr   
09C3   23                     INC   hl   ; inc past NUL
09C4   E3                     EX   (sp),hl   ; put it back	
09C5   C9                     RET      
09C6                INIT:        
09C6   DD 2A EA 0C            LD   ix,(vNext)   
09CA   FD 21 80 0B            LD   iy,STACK   
09CE   21 80 01               LD   hl,isysVars   
09D1   11 E6 0C               LD   de,sysVars   
09D4   01 10 00               LD   bc,8 * 2   
09D7   ED B0                  LDIR      
09D9   21 00 0C               LD   hl,vars   ; 52 vars LO HI
09DC   06 34                  LD   b,26*2   
09DE   AF                     XOR   a   
09DF                INIT0:       
09DF   77                     LD   (hl),a   
09E0   23                     INC   hl   
09E1   10 FC                  DJNZ   init0   
09E3   C9                     RET      
09E4                START:       
09E4   31 80 0B               LD   sp,STACK   ; start of monty
09E7   CD C6 09               CALL   init   ; setups
09EA   CD BF 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
09ED   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
09FA                INTERPRET:      
09FA   CD AF 09               CALL   prompt   
09FD   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0A00   ED 43 E8 0C            LD   (vTIBPtr),bc   
0A04                INTERPRET2:      ; calc nesting (a macro might have changed it)
0A04   1E 00                  LD   e,0   ; initilize nesting value
0A06   C5                     PUSH   bc   ; save offset into TIB,
0A07                             ; bc is also the count of chars in TIB
0A07   21 00 0E               LD   hl,TIB   ; hl is start of TIB
0A0A   18 06                  JR   interpret4   
0A0C                INTERPRET3:      
0A0C   7E                     LD   a,(hl)   ; a = char in TIB
0A0D   23                     INC   hl   ; inc pointer into TIB
0A0E   0B                     DEC   bc   ; dec count of chars in TIB
0A0F   CD 7D 09               CALL   nesting   ; update nesting value
0A12                INTERPRET4:      
0A12   79                     LD   a,c   ; is count zero?
0A13   B0                     OR   b   
0A14   20 F6                  JR   nz,interpret3   ; if not loop
0A16   C1                     POP   bc   ; restore offset into TIB
0A17                INTERPRET5:      
0A17   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0A1A   FE 20                  CP   $20   ; compare to space
0A1C   30 16                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0A1E   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0A20                             ; ???? NEEDED?
0A20   28 33                  JR   z,interpret8   
0A22   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0A24   28 1C                  JR   z,interpret7   ; if anything else its macro/control
0A26   FE 05                  CP   CTRL_E   
0A28   28 4C                  JR   z,edit   
0A2A   FE 08                  CP   CTRL_H   
0A2C   28 4E                  JR   z,backSpace   
0A2E   FE 0A                  CP   CTRL_J   
0A30   28 47                  JR   z,reEdit   
0A32                             ; DB     lsb(edit_)       ; ENQ ^E  5
0A32                             ; DB     lsb(reedit_)     ; LF  ^J 10
0A32                             ; DB     lsb(list_)       ; FF  ^L 12
0A32                             ; DB     lsb(printStack_) ; DLE ^P 16
0A32                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0A32                             ; DB lsb(prtStk_)   ;\#4    ( -- )        non-destructively prints stack
0A32                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0A32                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0A32                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0A32                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0A32                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0A32                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0A32                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0A32                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0A32                INTERPRET5A:      
0A32                             ; ld (vTIBPtr),bc
0A32                             ; ld bc,(vTIBPtr)
0A32   18 D0                  JR   interpret2   
0A34                INTERPRET6:      
0A34   21 00 0E               LD   hl,TIB   
0A37   09                     ADD   hl,bc   
0A38   77                     LD   (hl),a   ; store the character in textbuf
0A39   03                     INC   bc   
0A3A   CD 85 00               CALL   putchar   ; echo character to screen
0A3D   CD 7D 09               CALL   nesting   
0A40   18 D5                  JR   interpret5   ; wait for next character
0A42                INTERPRET7:      
0A42   21 00 0E               LD   hl,TIB   
0A45   09                     ADD   hl,bc   
0A46   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0A48   23                     INC   hl   
0A49   36 0A                  LD   (hl),"\n"   
0A4B   23                     INC   hl   
0A4C   03                     INC   bc   
0A4D   03                     INC   bc   
0A4E   CD B8 09               CALL   crlf   ; echo character to screen
0A51   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0A52   B7                     OR   a   
0A53   20 C2                  JR   nz,interpret5   
0A55                INTERPRET8:      
0A55   ED 43 E8 0C            LD   (vTIBPtr),bc   
0A59   01 00 0E               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0A5C                             ; we pressed enter
0A5C   0B                     DEC   bc   
0A5D                NEXT:        
0A5D   03                     INC   bc   ; Increment the IP
0A5E   0A                     LD   a,(bc)   ; Get the next character and dispatch
0A5F   FE 20                  CP   " "   ; whitespace?
0A61   28 FA                  JR   z,next   ; space? ignore
0A63   38 07                  JR   c,next1   
0A65   6F                     LD   l,a   ; index into table
0A66   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0A68   6E                     LD   l,(hl)   ; get low jump address
0A69   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0A6B   E9                     JP   (hl)   ; Jump to routine
0A6C                NEXT1:       
0A6C   FE 00                  CP   NUL   ; end of input string?
0A6E   28 03                  JR   z,exit_   
0A70   C3 FA 09               JP   interpret   ; no, other whitespace, macros?
0A73                EXIT_:       
0A73   60 69                  LD   hl,bc   
0A75   E9                     JP   (hl)   
0A76                EDIT:        
0A76   C3 04 0A               JP   interpret2   
0A79                REEDIT:      
0A79   C3 04 0A               JP   interpret2   
0A7C                BACKSPACE:      
0A7C   79                     LD   a,c   
0A7D   B0                     OR   b   
0A7E   28 84                  JR   z,interpret2   
0A80   0B                     DEC   bc   
0A81   CD BF 09               CALL   printStr   
0A84   08 20 08 00            .CSTR   "\b \b"   
0A88   C3 04 0A               JP   interpret2   
0A8B                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0A8B                             ; \a start of stack \#3 depth \b base \$ prompt
0A8B                             ; DW dStack               ; a vS0 start of datastack			
0A8B                             ; DW FALSE                ; b vBase16
0A8B                             ; DW 0                    ; c vTIBPtr an offset to the tib
0A8B                             ; DW 0                    ; d
0A8B                             ; DW 65                   ; e vLastDef "A" last command u defined
0A8B                             ; DW 0                    ; f
0A8B                             ; DW page6                ; g 256 bytes limits
0A8B                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0A8B                ERROR:       
0A8B   CD BF 09               CALL   printStr   
0A8E   45 72 72 6F 72 20 00   .CSTR   "Error "   
0A95   CD E6 08               CALL   prtdec   
0A98   C3 FA 09               JP   interpret   
0A9B                          ALIGN   $100   
0B00                             ; .org RAMSTART
0B00                          DS   DSIZE   
0B80                STACK:       
0B80                          ALIGN   $100   
0C00                VARS:        
0C00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
0CD0                RESTARTS:      
0CD0                RST08:    DS   2   
0CD2                RST10:    DS   2   
0CD4                RST18:    DS   2   
0CD6                RST20:    DS   2   
0CD8                RST28:    DS   2   
0CDA                RST30:    DS   2   ; 
0CDC                BAUD:     DS   2   ; 
0CDE                INTVEC:   DS   2   ; 
0CE0                NMIVEC:   DS   2   ; 
0CE2                GETCVEC:   DS   2   ; 
0CE4                PUTCVEC:   DS   2   ; 
0CE6                SYSVARS:      
0CE6                             ; initialised sys variables (preserved)
0CE6                VDATAWIDTH:   DS   2   ; 
0CE8                VTIBPTR:   DS   2   ; 
0CEA                VNEXT:    DS   2   ; 
0CEC                VHEAPPTR:   DS   2   ; 
0CEE                             ; uninitialised sys variables (preserved)
0CEE                VPOINTER:   DS   2   ; 
0CF0                VREMAIN:   DS   2   ; 
0CF2                VSAVEDIP:   DS   2   ; 
0CF4                VSAVEDSP:   DS   2   ; 
0CF6                VSAVEDBP:   DS   2   ; 
0CF8                VCHECKSUM:   DS   2   ; 
0CFA                             ; uninitialised sys variables (unpreserved)
0CFA                VTEMP1:   DS   2   ; 
0CFC                VTEMP2:   DS   2   ; 
0CFE                VLASTDEF:   DS   2   ; 
0D00                VHASHSTR:   DS   2   ; 
0D02                TBPTR:    DS   2   ; reserved for tests
0D04                          ALIGN   $100   
0E00                TIB:      DS   TIBSIZE   
0F00                          ALIGN   $100   
0F00                PAD:      DS   $100   
1000                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 56 IN MAIN.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               08E4 DEFINED AT LINE 1384 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1356 IN MAIN.asm
                    > USED AT LINE 1615 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 788 IN MAIN.asm
                    > USED AT LINE 800 IN MAIN.asm
                    > USED AT LINE 1395 IN MAIN.asm
                    > USED AT LINE 1436 IN MAIN.asm
                    > USED AT LINE 1460 IN MAIN.asm
                    > USED AT LINE 1463 IN MAIN.asm
                    > USED AT LINE 1658 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
BUF1M_537S20:       00D7 DEFINED AT LINE 10
                    > USED AT LINE 7
BUF2M_537S20:       00E0 DEFINED AT LINE 12
                    > USED AT LINE 9
TESTGETCHARIMPL:    00E3 DEFINED AT LINE 23
                    > USED AT LINE 17
DSIZE:              0080 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 53 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 856 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 1033 IN MAIN.asm
                    > USED AT LINE 1618 IN MAIN.asm
                    > USED AT LINE 1694 IN MAIN.asm
DQUOTE:             0022 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 1512 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 22 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 1624 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 24 IN MAIN.asm
                    > USED AT LINE 1626 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 25 IN MAIN.asm
                    > USED AT LINE 1628 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 26 IN MAIN.asm
Z80_RST8:           00CF DEFINED AT LINE 29 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 61 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 66 IN MAIN.asm
                    > USED AT LINE 1570 IN MAIN.asm
OPCODESBASE:        0200 DEFINED AT LINE 74 IN MAIN.asm
CTRLCODES:          0200 DEFINED AT LINE 76 IN MAIN.asm
OPCODES:            0220 DEFINED AT LINE 110 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 213 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 215 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 217 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 219 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 221 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 223 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 225 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 227 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 229 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 231 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 233 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 235 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 237 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 239 IN MAIN.asm
UNDERSCORE_:        0327 DEFINED AT LINE 241 IN MAIN.asm
COLON_:             032A DEFINED AT LINE 243 IN MAIN.asm
UPCASE_:            032D DEFINED AT LINE 245 IN MAIN.asm
LOWCASE_:           0330 DEFINED AT LINE 247 IN MAIN.asm
QUESTION_:          0333 DEFINED AT LINE 249 IN MAIN.asm
STAR_:              0336 DEFINED AT LINE 251 IN MAIN.asm
BANG_:              0339 DEFINED AT LINE 253 IN MAIN.asm
NUM_:               033E DEFINED AT LINE 256 IN MAIN.asm
                    > USED AT LINE 1222 IN MAIN.asm
HASH_:              0341 DEFINED AT LINE 258 IN MAIN.asm
PIPE_:              0344 DEFINED AT LINE 260 IN MAIN.asm
CARET_:             0347 DEFINED AT LINE 262 IN MAIN.asm
COMMA_:             034A DEFINED AT LINE 264 IN MAIN.asm
DBLQUOTE_:          034D DEFINED AT LINE 266 IN MAIN.asm
MINUS_:             0350 DEFINED AT LINE 268 IN MAIN.asm
EQ_:                0353 DEFINED AT LINE 270 IN MAIN.asm
EQ0:                035D DEFINED AT LINE 277 IN MAIN.asm
                    > USED AT LINE 274 IN MAIN.asm
EQ1:                035E DEFINED AT LINE 279 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
GT_:                0362 DEFINED AT LINE 283 IN MAIN.asm
LPAREN_:            036D DEFINED AT LINE 291 IN MAIN.asm
LT_:                0370 DEFINED AT LINE 293 IN MAIN.asm
LT1:                0379 DEFINED AT LINE 300 IN MAIN.asm
                    > USED AT LINE 290 IN MAIN.asm
SLASH_:             0382 DEFINED AT LINE 305 IN MAIN.asm
NOP_:               0385 DEFINED AT LINE 307 IN MAIN.asm
RPAREN_:            0387 DEFINED AT LINE 309 IN MAIN.asm
PLUS:               038A DEFINED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
ADD:                038A DEFINED AT LINE 317 IN MAIN.asm
ADD1:               0395 DEFINED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 321 IN MAIN.asm
ADD3:               0399 DEFINED AT LINE 330 IN MAIN.asm
                    > USED AT LINE 360 IN MAIN.asm
                    > USED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 1069 IN MAIN.asm
                    > USED AT LINE 1236 IN MAIN.asm
AT:                 03A4 DEFINED AT LINE 341 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
ADDR:               03A4 DEFINED AT LINE 342 IN MAIN.asm
AMPER:              03B0 DEFINED AT LINE 349 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
AND:                03B0 DEFINED AT LINE 350 IN MAIN.asm
AND1:               03B7 DEFINED AT LINE 358 IN MAIN.asm
                    > USED AT LINE 371 IN MAIN.asm
PIPE:               03BB DEFINED AT LINE 362 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
OR:                 03BB DEFINED AT LINE 363 IN MAIN.asm
XOR:                03C4 DEFINED AT LINE 373 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
XOR1:               03C5 DEFINED AT LINE 375 IN MAIN.asm
                    > USED AT LINE 387 IN MAIN.asm
INVERT:             03CF DEFINED AT LINE 385 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
DOLLAR:             03D4 DEFINED AT LINE 392 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
ARG:                03D4 DEFINED AT LINE 393 IN MAIN.asm
ARG0:               03F2 DEFINED AT LINE 414 IN MAIN.asm
                    > USED AT LINE 420 IN MAIN.asm
ARG0A:              03FB DEFINED AT LINE 422 IN MAIN.asm
                    > USED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 406 IN MAIN.asm
ARG1:               0400 DEFINED AT LINE 425 IN MAIN.asm
                    > USED AT LINE 418 IN MAIN.asm
ARG1A:              0408 DEFINED AT LINE 432 IN MAIN.asm
                    > USED AT LINE 424 IN MAIN.asm
LBRACK:             040B DEFINED AT LINE 436 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
ARRBEGIN:           040B DEFINED AT LINE 437 IN MAIN.asm
RBRACK:             0427 DEFINED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
ARREND:             0427 DEFINED AT LINE 452 IN MAIN.asm
ARREND1:            0441 DEFINED AT LINE 468 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
ARREND2:            0451 DEFINED AT LINE 478 IN MAIN.asm
                    > USED AT LINE 474 IN MAIN.asm
ARRINDEX:           0475 DEFINED AT LINE 505 IN MAIN.asm
                    > USED AT LINE 228 IN MAIN.asm
ARRINDEX0:          047D DEFINED AT LINE 511 IN MAIN.asm
ARRINDEX1:          047E DEFINED AT LINE 513 IN MAIN.asm
                    > USED AT LINE 510 IN MAIN.asm
ARRINDEX2:          048A DEFINED AT LINE 522 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
ASSIGN:             048D DEFINED AT LINE 527 IN MAIN.asm
                    > USED AT LINE 276 IN MAIN.asm
ASSIGN0:            048F DEFINED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 324 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
ASSIGNX:            0490 DEFINED AT LINE 532 IN MAIN.asm
ASSIGN1:            049C DEFINED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 537 IN MAIN.asm
COLON:              049E DEFINED AT LINE 547 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
ARGLIST:            049E DEFINED AT LINE 548 IN MAIN.asm
ARGLIST1:           04A8 DEFINED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
ARGLIST1A:          04B0 DEFINED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
ARGLIST2:           04B8 DEFINED AT LINE 566 IN MAIN.asm
ARGLIST3:           04C0 DEFINED AT LINE 574 IN MAIN.asm
                    > USED AT LINE 560 IN MAIN.asm
                    > USED AT LINE 572 IN MAIN.asm
ARGLIST4:           04C3 DEFINED AT LINE 577 IN MAIN.asm
                    > USED AT LINE 563 IN MAIN.asm
                    > USED AT LINE 565 IN MAIN.asm
ARGLIST5:           04C9 DEFINED AT LINE 583 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
LBRACE:             04D5 DEFINED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 232 IN MAIN.asm
BLOCK:              04D5 DEFINED AT LINE 595 IN MAIN.asm
                    > USED AT LINE 861 IN MAIN.asm
BLOCK1:             04D9 DEFINED AT LINE 599 IN MAIN.asm
                    > USED AT LINE 603 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
                    > USED AT LINE 633 IN MAIN.asm
                    > USED AT LINE 637 IN MAIN.asm
BLOCK2:             0505 DEFINED AT LINE 626 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
                    > USED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 617 IN MAIN.asm
BLOCK3:             0508 DEFINED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 620 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 624 IN MAIN.asm
BLOCK4:             0510 DEFINED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
BLOCK5:             0513 DEFINED AT LINE 638 IN MAIN.asm
                    > USED AT LINE 634 IN MAIN.asm
BLOCK6:             053B DEFINED AT LINE 657 IN MAIN.asm
                    > USED AT LINE 644 IN MAIN.asm
RBRACE:             053E DEFINED AT LINE 661 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
BLOCKEND:           053E DEFINED AT LINE 662 IN MAIN.asm
                    > USED AT LINE 1328 IN MAIN.asm
BLOCKEND1:          056A DEFINED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 677 IN MAIN.asm
BLOCKEND2:          0576 DEFINED AT LINE 691 IN MAIN.asm
                    > USED AT LINE 683 IN MAIN.asm
BLOCKEND3:          0588 DEFINED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 697 IN MAIN.asm
TICK:               0593 DEFINED AT LINE 716 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
CHAR:               0593 DEFINED AT LINE 717 IN MAIN.asm
CHAR1:              0596 DEFINED AT LINE 719 IN MAIN.asm
                    > USED AT LINE 730 IN MAIN.asm
CHAR2:              05A2 DEFINED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
CHAR3:              05A5 DEFINED AT LINE 731 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
BACKSLASH:          05A8 DEFINED AT LINE 735 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
COMMA:              05AA DEFINED AT LINE 740 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
DISCARD:            05AA DEFINED AT LINE 741 IN MAIN.asm
DISCARD1:           05B7 DEFINED AT LINE 750 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
SLASH:              05B9 DEFINED AT LINE 753 IN MAIN.asm
                    > USED AT LINE 306 IN MAIN.asm
DOT:                05D7 DEFINED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 240 IN MAIN.asm
DOT1:               05E3 DEFINED AT LINE 779 IN MAIN.asm
                    > USED AT LINE 776 IN MAIN.asm
DOT2:               05EC DEFINED AT LINE 784 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
DOT3:               05F6 DEFINED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 786 IN MAIN.asm
DOT3A:              05FF DEFINED AT LINE 795 IN MAIN.asm
                    > USED AT LINE 792 IN MAIN.asm
DOT4:               0603 DEFINED AT LINE 798 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
                    > USED AT LINE 783 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 794 IN MAIN.asm
DIVIDE:             060A DEFINED AT LINE 806 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
DIVIDE1:            060F DEFINED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 821 IN MAIN.asm
DIVIDE2:            061C DEFINED AT LINE 817 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
DIVIDE3:            061D DEFINED AT LINE 819 IN MAIN.asm
                    > USED AT LINE 816 IN MAIN.asm
EQUALS:             0623 DEFINED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 281 IN MAIN.asm
LESSTHANEQ:         062B DEFINED AT LINE 835 IN MAIN.asm
                    > USED AT LINE 302 IN MAIN.asm
LESSTHAN:           0630 DEFINED AT LINE 842 IN MAIN.asm
                    > USED AT LINE 304 IN MAIN.asm
LESSTHAN1:          0635 DEFINED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 838 IN MAIN.asm
TRUE1:              0638 DEFINED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
                    > USED AT LINE 1265 IN MAIN.asm
NULL1:              063E DEFINED AT LINE 854 IN MAIN.asm
FALSE1:             063E DEFINED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 831 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 848 IN MAIN.asm
                    > USED AT LINE 1253 IN MAIN.asm
LPAREN:             0644 DEFINED AT LINE 860 IN MAIN.asm
                    > USED AT LINE 292 IN MAIN.asm
CARET:              0647 DEFINED AT LINE 866 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
GO:                 0647 DEFINED AT LINE 867 IN MAIN.asm
GO1:                0648 DEFINED AT LINE 869 IN MAIN.asm
                    > USED AT LINE 1045 IN MAIN.asm
                    > USED AT LINE 1047 IN MAIN.asm
GO2:                064E DEFINED AT LINE 874 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
GOBLOCK:            065A DEFINED AT LINE 882 IN MAIN.asm
GOBLOCK1:           065A DEFINED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 877 IN MAIN.asm
GOBLOCK2:           067F DEFINED AT LINE 900 IN MAIN.asm
                    > USED AT LINE 982 IN MAIN.asm
GOFUNC:             068D DEFINED AT LINE 909 IN MAIN.asm
                    > USED AT LINE 879 IN MAIN.asm
GOFUNC1:            06A6 DEFINED AT LINE 928 IN MAIN.asm
                    > USED AT LINE 938 IN MAIN.asm
GOFUNC2:            06AC DEFINED AT LINE 935 IN MAIN.asm
                    > USED AT LINE 927 IN MAIN.asm
GOFUNC3:            06B7 DEFINED AT LINE 941 IN MAIN.asm
                    > USED AT LINE 917 IN MAIN.asm
GOFUNC4:            06CF DEFINED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 955 IN MAIN.asm
GOFUNC5:            06D3 DEFINED AT LINE 962 IN MAIN.asm
                    > USED AT LINE 968 IN MAIN.asm
GOFUNC6:            06D6 DEFINED AT LINE 966 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
GOFUNC7:            06D9 DEFINED AT LINE 969 IN MAIN.asm
GOFUNC8:            06DE DEFINED AT LINE 975 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 957 IN MAIN.asm
HASH:               06E9 DEFINED AT LINE 984 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
HEXNUM:             06E9 DEFINED AT LINE 985 IN MAIN.asm
HEXNUM1:            06EC DEFINED AT LINE 987 IN MAIN.asm
                    > USED AT LINE 1004 IN MAIN.asm
HEXNUM2:            06F4 DEFINED AT LINE 993 IN MAIN.asm
                    > USED AT LINE 991 IN MAIN.asm
UPCASE:             0706 DEFINED AT LINE 1005 IN MAIN.asm
                    > USED AT LINE 246 IN MAIN.asm
LOWCASE:            070B DEFINED AT LINE 1009 IN MAIN.asm
                    > USED AT LINE 248 IN MAIN.asm
IDENT1:             0710 DEFINED AT LINE 1013 IN MAIN.asm
                    > USED AT LINE 1008 IN MAIN.asm
QUESTION:           071D DEFINED AT LINE 1026 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
IF:                 071D DEFINED AT LINE 1027 IN MAIN.asm
IFTE:               0729 DEFINED AT LINE 1037 IN MAIN.asm
                    > USED AT LINE 1031 IN MAIN.asm
IFTE1:              072A DEFINED AT LINE 1039 IN MAIN.asm
                    > USED AT LINE 1034 IN MAIN.asm
STAR:               0736 DEFINED AT LINE 1049 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
MUL:                0736 DEFINED AT LINE 1050 IN MAIN.asm
MUL2:               0738 DEFINED AT LINE 1053 IN MAIN.asm
MUL3:               0740 DEFINED AT LINE 1058 IN MAIN.asm
                    > USED AT LINE 1067 IN MAIN.asm
NUM:                0752 DEFINED AT LINE 1071 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
NUM0:               075B DEFINED AT LINE 1077 IN MAIN.asm
                    > USED AT LINE 1075 IN MAIN.asm
NUM1:               075C DEFINED AT LINE 1079 IN MAIN.asm
                    > USED AT LINE 1096 IN MAIN.asm
NUM2:               0774 DEFINED AT LINE 1097 IN MAIN.asm
                    > USED AT LINE 995 IN MAIN.asm
                    > USED AT LINE 997 IN MAIN.asm
                    > USED AT LINE 1082 IN MAIN.asm
                    > USED AT LINE 1084 IN MAIN.asm
NUM3:               077F DEFINED AT LINE 1105 IN MAIN.asm
                    > USED AT LINE 1100 IN MAIN.asm
UNDERSCORE:         0782 DEFINED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
REMAIN:             0782 DEFINED AT LINE 1110 IN MAIN.asm
RPAREN:             0788 DEFINED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 310 IN MAIN.asm
SEMICOLON:          0790 DEFINED AT LINE 1121 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
SHIFTLEFT:          07AC DEFINED AT LINE 1145 IN MAIN.asm
                    > USED AT LINE 297 IN MAIN.asm
SHIFTLEFT1:         07B4 DEFINED AT LINE 1152 IN MAIN.asm
                    > USED AT LINE 1155 IN MAIN.asm
SHIFTLEFT2:         07B5 DEFINED AT LINE 1154 IN MAIN.asm
                    > USED AT LINE 1151 IN MAIN.asm
SHIFTRIGHT:         07BC DEFINED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 287 IN MAIN.asm
SHIFTRIGHT1:        07C4 DEFINED AT LINE 1169 IN MAIN.asm
                    > USED AT LINE 1173 IN MAIN.asm
SHIFTRIGHT2:        07C8 DEFINED AT LINE 1172 IN MAIN.asm
                    > USED AT LINE 1168 IN MAIN.asm
DBLQUOTE:           07CF DEFINED AT LINE 1181 IN MAIN.asm
                    > USED AT LINE 267 IN MAIN.asm
STRING:             07CF DEFINED AT LINE 1182 IN MAIN.asm
STRING1:            07D8 DEFINED AT LINE 1189 IN MAIN.asm
                    > USED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
STRING2:            07DB DEFINED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
MINUS:              07F7 DEFINED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
SUB:                0803 DEFINED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 1220 IN MAIN.asm
SUB1:               080D DEFINED AT LINE 1230 IN MAIN.asm
                    > USED AT LINE 1226 IN MAIN.asm
COMMAND:            0816 DEFINED AT LINE 1243 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
ERROR1:             0857 DEFINED AT LINE 1270 IN MAIN.asm
ABS1:               085D DEFINED AT LINE 1274 IN MAIN.asm
                    > USED AT LINE 1245 IN MAIN.asm
PARTIAL:            086A DEFINED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 1251 IN MAIN.asm
COMMENT:            088A DEFINED AT LINE 1305 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
                    > USED AT LINE 1309 IN MAIN.asm
BREAK:              0893 DEFINED AT LINE 1313 IN MAIN.asm
                    > USED AT LINE 1247 IN MAIN.asm
BREAK1:             089A DEFINED AT LINE 1319 IN MAIN.asm
                    > USED AT LINE 1317 IN MAIN.asm
CHARS:              08AD DEFINED AT LINE 1330 IN MAIN.asm
                    > USED AT LINE 1249 IN MAIN.asm
CHARS1:             08B0 DEFINED AT LINE 1332 IN MAIN.asm
                    > USED AT LINE 1375 IN MAIN.asm
HEAPPTR:            08B5 DEFINED AT LINE 1336 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
INPUT:              08C1 DEFINED AT LINE 1345 IN MAIN.asm
                    > USED AT LINE 1257 IN MAIN.asm
KEY:                08CC DEFINED AT LINE 1355 IN MAIN.asm
                    > USED AT LINE 1259 IN MAIN.asm
OUTPUT:             08D5 DEFINED AT LINE 1364 IN MAIN.asm
                    > USED AT LINE 1263 IN MAIN.asm
NUMBERS:            08DE DEFINED AT LINE 1373 IN MAIN.asm
                    > USED AT LINE 1261 IN MAIN.asm
FILTER:             08E4 DEFINED AT LINE 1382 IN MAIN.asm
MAP:                08E4 DEFINED AT LINE 1383 IN MAIN.asm
PRTDEC:             08E6 DEFINED AT LINE 1391 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
                    > USED AT LINE 1729 IN MAIN.asm
PRTDEC0:            08F5 DEFINED AT LINE 1402 IN MAIN.asm
                    > USED AT LINE 1393 IN MAIN.asm
PRTDEC1:            0917 DEFINED AT LINE 1418 IN MAIN.asm
                    > USED AT LINE 1406 IN MAIN.asm
                    > USED AT LINE 1408 IN MAIN.asm
                    > USED AT LINE 1410 IN MAIN.asm
                    > USED AT LINE 1412 IN MAIN.asm
                    > USED AT LINE 1415 IN MAIN.asm
PRTDEC2:            0919 DEFINED AT LINE 1420 IN MAIN.asm
                    > USED AT LINE 1423 IN MAIN.asm
PRTDEC3:            0929 DEFINED AT LINE 1432 IN MAIN.asm
                    > USED AT LINE 1427 IN MAIN.asm
PRTDEC4:            092A DEFINED AT LINE 1434 IN MAIN.asm
                    > USED AT LINE 1431 IN MAIN.asm
PRTHEX:             092E DEFINED AT LINE 1438 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 1489 IN MAIN.asm
PRTHEX2:            0939 DEFINED AT LINE 1446 IN MAIN.asm
                    > USED AT LINE 1441 IN MAIN.asm
                    > USED AT LINE 1443 IN MAIN.asm
PRTHEX3:            0942 DEFINED AT LINE 1454 IN MAIN.asm
                    > USED AT LINE 1452 IN MAIN.asm
PRTSTR0:            094D DEFINED AT LINE 1462 IN MAIN.asm
                    > USED AT LINE 1468 IN MAIN.asm
PRTSTR:             0951 DEFINED AT LINE 1465 IN MAIN.asm
                    > USED AT LINE 782 IN MAIN.asm
                    > USED AT LINE 1562 IN MAIN.asm
PRTSTK:             0956 DEFINED AT LINE 1471 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
PRTSTK1:            096A DEFINED AT LINE 1482 IN MAIN.asm
                    > USED AT LINE 1496 IN MAIN.asm
PRTSTK2:            0974 DEFINED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 1481 IN MAIN.asm
NESTING:            097D DEFINED AT LINE 1511 IN MAIN.asm
                    > USED AT LINE 1606 IN MAIN.asm
                    > USED AT LINE 1659 IN MAIN.asm
NESTING0:           0987 DEFINED AT LINE 1517 IN MAIN.asm
                    > USED AT LINE 1513 IN MAIN.asm
                    > USED AT LINE 1515 IN MAIN.asm
NESTING1A:          098E DEFINED AT LINE 1522 IN MAIN.asm
                    > USED AT LINE 1519 IN MAIN.asm
NESTING1:           0991 DEFINED AT LINE 1525 IN MAIN.asm
                    > USED AT LINE 1516 IN MAIN.asm
NESTING2:           09A0 DEFINED AT LINE 1534 IN MAIN.asm
                    > USED AT LINE 1529 IN MAIN.asm
                    > USED AT LINE 1531 IN MAIN.asm
NESTING3:           09A2 DEFINED AT LINE 1537 IN MAIN.asm
                    > USED AT LINE 1533 IN MAIN.asm
NESTING4:           09AD DEFINED AT LINE 1544 IN MAIN.asm
                    > USED AT LINE 1539 IN MAIN.asm
                    > USED AT LINE 1541 IN MAIN.asm
PROMPT:             09AF DEFINED AT LINE 1548 IN MAIN.asm
                    > USED AT LINE 1590 IN MAIN.asm
CRLF:               09B8 DEFINED AT LINE 1553 IN MAIN.asm
                    > USED AT LINE 1671 IN MAIN.asm
PRINTSTR:           09BF DEFINED AT LINE 1560 IN MAIN.asm
                    > USED AT LINE 1549 IN MAIN.asm
                    > USED AT LINE 1554 IN MAIN.asm
                    > USED AT LINE 1586 IN MAIN.asm
                    > USED AT LINE 1710 IN MAIN.asm
                    > USED AT LINE 1727 IN MAIN.asm
INIT:               09C6 DEFINED AT LINE 1567 IN MAIN.asm
                    > USED AT LINE 16
                    > USED AT LINE 1585 IN MAIN.asm
INIT0:              09DF DEFINED AT LINE 1577 IN MAIN.asm
                    > USED AT LINE 1580 IN MAIN.asm
START:              09E4 DEFINED AT LINE 1583 IN MAIN.asm
INTERPRET:          09FA DEFINED AT LINE 1589 IN MAIN.asm
                    > USED AT LINE 21
                    > USED AT LINE 1696 IN MAIN.asm
                    > USED AT LINE 1730 IN MAIN.asm
INTERPRET2:         0A04 DEFINED AT LINE 1595 IN MAIN.asm
                    > USED AT LINE 1651 IN MAIN.asm
                    > USED AT LINE 1702 IN MAIN.asm
                    > USED AT LINE 1704 IN MAIN.asm
                    > USED AT LINE 1708 IN MAIN.asm
                    > USED AT LINE 1712 IN MAIN.asm
INTERPRET3:         0A0C DEFINED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 1611 IN MAIN.asm
INTERPRET4:         0A12 DEFINED AT LINE 1608 IN MAIN.asm
                    > USED AT LINE 1600 IN MAIN.asm
INTERPRET5:         0A17 DEFINED AT LINE 1614 IN MAIN.asm
                    > USED AT LINE 1660 IN MAIN.asm
                    > USED AT LINE 1674 IN MAIN.asm
INTERPRET5A:        0A32 DEFINED AT LINE 1648 IN MAIN.asm
INTERPRET6:         0A34 DEFINED AT LINE 1653 IN MAIN.asm
                    > USED AT LINE 1617 IN MAIN.asm
INTERPRET7:         0A42 DEFINED AT LINE 1662 IN MAIN.asm
                    > USED AT LINE 1622 IN MAIN.asm
INTERPRET8:         0A55 DEFINED AT LINE 1676 IN MAIN.asm
                    > USED AT LINE 1620 IN MAIN.asm
NEXT:               0A5D DEFINED AT LINE 1682 IN MAIN.asm
                    > USED AT LINE 69 IN MAIN.asm
                    > USED AT LINE 1686 IN MAIN.asm
NEXT1:              0A6C DEFINED AT LINE 1693 IN MAIN.asm
                    > USED AT LINE 1687 IN MAIN.asm
EXIT_:              0A73 DEFINED AT LINE 1697 IN MAIN.asm
                    > USED AT LINE 1695 IN MAIN.asm
EDIT:               0A76 DEFINED AT LINE 1701 IN MAIN.asm
                    > USED AT LINE 1625 IN MAIN.asm
REEDIT:             0A79 DEFINED AT LINE 1703 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
BACKSPACE:          0A7C DEFINED AT LINE 1705 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
ERROR:              0A8B DEFINED AT LINE 1726 IN MAIN.asm
                    > USED AT LINE 1272 IN MAIN.asm
STACK:              0B80 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 15
                    > USED AT LINE 885 IN MAIN.asm
                    > USED AT LINE 1475 IN MAIN.asm
                    > USED AT LINE 1480 IN MAIN.asm
                    > USED AT LINE 1569 IN MAIN.asm
                    > USED AT LINE 1584 IN MAIN.asm
VARS:               0C00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1574 IN MAIN.asm
RESTARTS:           0CD0 DEFINED AT LINE 11 IN ram.asm
RST08:              0CD0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              0CD2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              0CD4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              0CD6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              0CD8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              0CDA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               0CDC DEFINED AT LINE 19 IN ram.asm
INTVEC:             0CDE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             0CE0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            0CE2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
                    > USED AT LINE 18
PUTCVEC:            0CE4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            0CE6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1571 IN MAIN.asm
VDATAWIDTH:         0CE6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 508 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
                    > USED AT LINE 1333 IN MAIN.asm
VTIBPTR:            0CE8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1593 IN MAIN.asm
                    > USED AT LINE 1677 IN MAIN.asm
VNEXT:              0CEA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1568 IN MAIN.asm
VHEAPPTR:           0CEC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 462 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 495 IN MAIN.asm
                    > USED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 585 IN MAIN.asm
                    > USED AT LINE 652 IN MAIN.asm
                    > USED AT LINE 655 IN MAIN.asm
                    > USED AT LINE 1123 IN MAIN.asm
                    > USED AT LINE 1138 IN MAIN.asm
                    > USED AT LINE 1140 IN MAIN.asm
                    > USED AT LINE 1183 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 1291 IN MAIN.asm
                    > USED AT LINE 1296 IN MAIN.asm
                    > USED AT LINE 1297 IN MAIN.asm
                    > USED AT LINE 1337 IN MAIN.asm
                    > USED AT LINE 1339 IN MAIN.asm
VPOINTER:           0CEE DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 343 IN MAIN.asm
                    > USED AT LINE 345 IN MAIN.asm
                    > USED AT LINE 346 IN MAIN.asm
                    > USED AT LINE 428 IN MAIN.asm
                    > USED AT LINE 515 IN MAIN.asm
                    > USED AT LINE 533 IN MAIN.asm
                    > USED AT LINE 1017 IN MAIN.asm
                    > USED AT LINE 1340 IN MAIN.asm
VREMAIN:            0CF0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 1111 IN MAIN.asm
VSAVEDIP:           0CF2 DEFINED AT LINE 39 IN ram.asm
VSAVEDSP:           0CF4 DEFINED AT LINE 40 IN ram.asm
VSAVEDBP:           0CF6 DEFINED AT LINE 41 IN ram.asm
VCHECKSUM:          0CF8 DEFINED AT LINE 42 IN ram.asm
VTEMP1:             0CFA DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 455 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 647 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 884 IN MAIN.asm
                    > USED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 918 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
                    > USED AT LINE 946 IN MAIN.asm
                    > USED AT LINE 952 IN MAIN.asm
                    > USED AT LINE 1292 IN MAIN.asm
                    > USED AT LINE 1295 IN MAIN.asm
                    > USED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 1498 IN MAIN.asm
VTEMP2:             0CFC DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 919 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
VLASTDEF:           0CFE DEFINED AT LINE 48 IN ram.asm
VHASHSTR:           0D00 DEFINED AT LINE 49 IN ram.asm
TBPTR:              0D02 DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 8
                    > USED AT LINE 25
                    > USED AT LINE 28
TIB:                0E00 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 1599 IN MAIN.asm
                    > USED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 1663 IN MAIN.asm
                    > USED AT LINE 1678 IN MAIN.asm
PAD:                0F00 DEFINED AT LINE 56 IN ram.asm
HEAP:               1000 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 70 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
