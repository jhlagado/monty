0000                          .ENGINE   mycomputer   
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 0C               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 0C               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 0C               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 0C               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 0C               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 0C               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 0C               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 0C               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 0C               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 0C               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 0B               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 0C               LD   (RST08),HL   
0094   22 D2 0C               LD   (RST10),HL   
0097   22 D4 0C               LD   (RST18),HL   
009A   22 D6 0C               LD   (RST20),HL   
009D   22 D8 0C               LD   (RST28),HL   
00A0   22 DA 0C               LD   (RST30),HL   
00A3   22 DE 0C               LD   (INTVEC),HL   
00A6   22 E0 0C               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 0C               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 0C               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                .macro TESTINPUT,s1
00C3                             ; 
00C3                 ld HL,buf1%%M
00C3                 ld (tbPtr),HL
00C3                 jr buf2%%M
00C3                buf1%%M:
00C3                 DB s1,$0D
00C3                buf2%%M:
00C3                .endm
00C3                 
00C3   31 80 0B               LD   sp,STACK   
00C6   CD 96 09               CALL   init   
00C9   21 E6 00               LD   hl,testGetCharImpl   ; change getchar implmentation to use tbuf
00CC   22 E2 0C               LD   (GETCVEC),hl   
00CF                          ;*Macro unroll: testInput "3 2 1 + + ."
00CF   21 D7 00               LD   HL,buf1M_537S20   
00D2   22 02 0D               LD   (tbPtr),HL   
00D5   18 0C                  JR   buf2M_537S20   
00D7                BUF1M_537S20:      
00D7   33 20 32 20 31 20 2B 20 2B 20 2E 0D DB   "3 2 1 + + .",$0D   
00E3                BUF2M_537S20:      
00E3   C3 CA 09               JP   interpret   
00E6                TESTGETCHARIMPL:      
00E6   E5                     PUSH   HL   
00E7   2A 02 0D               LD   HL,(tbPtr)   
00EA   7E                     LD   A,(HL)   
00EB   23                     INC   HL   
00EC   22 02 0D               LD   (tbPtr),HL   
00EF   E1                     POP   HL   
00F0   C9                     RET      
00F1                             ; *************************************************************************
00F1                             ; 
00F1                             ;  Monty programming language for the Z80
00F1                             ; 
00F1                             ;  by John Hardy 2023
00F1                             ; 
00F1                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00F1                             ; 
00F1                             ;  see the LICENSE file in this repo for more information
00F1                             ; 
00F1                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00F1                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00F1                             ; 
00F1                             ; *****************************************************************************
00F1                DSIZE:    EQU   $80   
00F1                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00F1                TRUE:     EQU   -1   ; C-style true
00F1                FALSE:    EQU   0   
00F1                EMPTY:    EQU   0   
00F1                UNUSED:   EQU   $ff   
00F1                NUL:      EQU   0   ; exit code
00F1                DC1:      EQU   17   ; ?
00F1                DC2:      EQU   18   ; ?
00F1                DC3:      EQU   19   ; ?
00F1                ESC:      EQU   27   ; ?
00F1                DQUOTE:   EQU   $22   ; " double quote char
00F1                Z80_RST8:   EQU   $CF   
00F1                             ; **************************************************************************
00F1                             ; stack frame
00F1                             ; 
00F1                             ; arg0                              -- 0th arg
00F1                             ; arg1
00F1                             ;  :
00F1                             ; argn                              -- nth arg
00F1                             ; loc0                              -- 0th local
00F1                             ; loc1
00F1                             ;  :
00F1                             ; locn                              -- last local
00F1                             ; IP                                -- IP (saved interpreter ptr, return)
00F1                             ; arg_list*                         -- arg_list*
00F1                             ; first_arg*                        -- first_arg*
00F1                             ; BP                                -- BP (saved base ptr)           <-- iy
00F1                             ; res0                              -- 0th result
00F1                             ; res1
00F1                             ;  :
00F1                             ; resn                              -- last result.             <-- sp
00F1                             ; 
00F1                             ; **************************************************************************
00F1                             ; **************************************************************************
00F1                             ; Page 0  Initialisation
00F1                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0184   21 0A                  DW   next   ; g nNext
0186   00 10                  DW   heap   ; h vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available ~ `
0220   85                     DB   lsb(nop_)   ; SP
0221   39                     DB   lsb(bang_)   ; !
0222   4D                     DB   lsb(dblquote_)   ; "
0223   41                     DB   lsb(hash_)   ; #
0224   09                     DB   lsb(dollar_)   ; $
0225   12                     DB   lsb(percent_)   ; %
0226   06                     DB   lsb(amper_)   ; &
0227   1E                     DB   lsb(tick_)   ; '
0228   6D                     DB   lsb(lparen_)   ; (
0229   87                     DB   lsb(rparen_)   ; )
022A   36                     DB   lsb(star_)   ; *
022B   00                     DB   lsb(plus_)   ; +
022C   4A                     DB   lsb(comma_)   ; ,
022D   50                     DB   lsb(minus_)   ; -
022E   24                     DB   lsb(dot_)   ; .
022F   82                     DB   lsb(slash_)   ; /	
0230   3E                     DB   lsb(num_)   ; 0
0231   3E                     DB   lsb(num_)   ; 1
0232   3E                     DB   lsb(num_)   ; 2
0233   3E                     DB   lsb(num_)   ; 3
0234   3E                     DB   lsb(num_)   ; 4
0235   3E                     DB   lsb(num_)   ; 5
0236   3E                     DB   lsb(num_)   ; 6
0237   3E                     DB   lsb(num_)   ; 7
0238   3E                     DB   lsb(num_)   ; 8
0239   3E                     DB   lsb(num_)   ; 9
023A   2A                     DB   lsb(colon_)   ; :
023B   21                     DB   lsb(semicolon_)   ; ;
023C   70                     DB   lsb(lt_)   ; <
023D   53                     DB   lsb(eq_)   ; =
023E   62                     DB   lsb(gt_)   ; >
023F   33                     DB   lsb(question_)   ; ?
0240   03                     DB   lsb(at_)   ; @
0241   2D                     DB   lsb(upcase_)   ; A
0242   2D                     DB   lsb(upcase_)   ; B
0243   2D                     DB   lsb(upcase_)   ; C
0244   2D                     DB   lsb(upcase_)   ; D
0245   2D                     DB   lsb(upcase_)   ; E
0246   2D                     DB   lsb(upcase_)   ; F
0247   2D                     DB   lsb(upcase_)   ; G
0248   2D                     DB   lsb(upcase_)   ; h
0249   2D                     DB   lsb(upcase_)   ; I
024A   2D                     DB   lsb(upcase_)   ; J
024B   2D                     DB   lsb(upcase_)   ; K
024C   2D                     DB   lsb(upcase_)   ; L
024D   2D                     DB   lsb(upcase_)   ; M
024E   2D                     DB   lsb(upcase_)   ; N
024F   2D                     DB   lsb(upcase_)   ; O
0250   2D                     DB   lsb(upcase_)   ; p
0251   2D                     DB   lsb(upcase_)   ; Q
0252   2D                     DB   lsb(upcase_)   ; R
0253   2D                     DB   lsb(upcase_)   ; S
0254   2D                     DB   lsb(upcase_)   ; T
0255   2D                     DB   lsb(upcase_)   ; U
0256   2D                     DB   lsb(upcase_)   ; V
0257   2D                     DB   lsb(upcase_)   ; W
0258   2D                     DB   lsb(upcase_)   ; X
0259   2D                     DB   lsb(upcase_)   ; Y
025A   2D                     DB   lsb(upcase_)   ; Z
025B   0C                     DB   lsb(lbrack_)   ; [
025C   15                     DB   lsb(backslash_)   ; \
025D   0F                     DB   lsb(rbrack_)   ; ]
025E   47                     DB   lsb(caret_)   ; ^
025F   27                     DB   lsb(underscore_)   ; _
0260   85                     DB   lsb(nop_)   ; `     used for testing string   	
0261   30                     DB   lsb(lowcase_)   ; a
0262   30                     DB   lsb(lowcase_)   ; b
0263   30                     DB   lsb(lowcase_)   ; c
0264   30                     DB   lsb(lowcase_)   ; d
0265   30                     DB   lsb(lowcase_)   ; e
0266   30                     DB   lsb(lowcase_)   ; f
0267   30                     DB   lsb(lowcase_)   ; g
0268   30                     DB   lsb(lowcase_)   ; h
0269   30                     DB   lsb(lowcase_)   ; i
026A   30                     DB   lsb(lowcase_)   ; j
026B   30                     DB   lsb(lowcase_)   ; k
026C   30                     DB   lsb(lowcase_)   ; l
026D   30                     DB   lsb(lowcase_)   ; m
026E   30                     DB   lsb(lowcase_)   ; n
026F   30                     DB   lsb(lowcase_)   ; o
0270   30                     DB   lsb(lowcase_)   ; p
0271   30                     DB   lsb(lowcase_)   ; q
0272   30                     DB   lsb(lowcase_)   ; r
0273   30                     DB   lsb(lowcase_)   ; s
0274   30                     DB   lsb(lowcase_)   ; t
0275   30                     DB   lsb(lowcase_)   ; u
0276   30                     DB   lsb(lowcase_)   ; v
0277   30                     DB   lsb(lowcase_)   ; w
0278   30                     DB   lsb(lowcase_)   ; x
0279   30                     DB   lsb(lowcase_)   ; y
027A   30                     DB   lsb(lowcase_)   ; z
027B   18                     DB   lsb(lbrace_)   ; {
027C   44                     DB   lsb(pipe_)   ; |
027D   1B                     DB   lsb(rbrace_)   ; }
027E   85                     DB   lsb(nop_)   ; ~
027F   85                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 8A 03               JP   plus   
0303                AT_:         
0303   C3 A4 03               JP   at   
0306                AMPER_:      
0306   C3 B0 03               JP   amper   
0309                DOLLAR_:      
0309   C3 D4 03               JP   dollar   
030C                LBRACK_:      
030C   C3 0B 04               JP   lbrack   
030F                RBRACK_:      
030F   C3 27 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 75 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 A8 05               JP   backslash   
0318                LBRACE_:      
0318   C3 D5 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 3E 05               JP   rbrace   
031E                TICK_:       
031E   C3 93 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 87 07               JP   semicolon   
0324                DOT_:        
0324   C3 D7 05               JP   dot   
0327                UNDERSCORE_:      
0327   C3 79 07               JP   underscore   
032A                COLON_:      
032A   C3 9E 04               JP   colon   
032D                UPCASE_:      
032D   C3 FD 06               JP   upcase   
0330                LOWCASE_:      
0330   C3 02 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 14 07               JP   question   
0336                STAR_:       
0336   C3 2D 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 49 07               JP   num   
0341                HASH_:       
0341   C3 E0 06               JP   hash   
0344                PIPE_:       
0344   C3 BB 03               JP   pipe   
0347                CARET_:      
0347   C3 3E 06               JP   caret   
034A                COMMA_:      
034A   C3 AA 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 C6 07               JP   dblquote   
0350                MINUS_:      
0350   C3 EE 07               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 8D 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 1A 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA B3 07               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 0C                  JR   lt1   
036D                LPAREN_:      
036D   C3 3B 06               JP   lparen   
0370                LT_:         
0370   03                     INC   bc   
0371   0A                     LD   a,(bc)   
0372   FE 3C                  CP   "<"   
0374   CA A3 07               JP   z,shiftLeft   
0377   E1                     POP   hl   
0378   D1                     POP   de   
0379                LT1:         
0379   FE 3D                  CP   "="   
037B   CA 22 06               JP   z,lessthaneq   
037E   0B                     DEC   bc   
037F   C3 27 06               JP   lessthan   
0382                SLASH_:      
0382   C3 B9 05               JP   slash   
0385                NOP_:        
0385   DD E9                  JP   (ix)   
0387                RPAREN_:      
0387   C3 7F 07               JP   rparen   
038A                             ;*******************************************************************
038A                             ; word operators
038A                             ;*******************************************************************
038A                PLUS:        
038A                ADD:         
038A   03                     INC   bc   
038B   0A                     LD   a,(bc)   
038C   FE 2B                  CP   "+"   ; ++ increment variable
038E   20 05                  JR   nz,add1   
0390   E1                     POP   hl   
0391   23                     INC   hl   
0392   C3 8F 04               JP   assign0   
0395                ADD1:        
0395   0B                     DEC   bc   
0396   D1                     POP   de   ; second term
0397   E1                     POP   hl   ; first term
0398   19                     ADD   hl,de   
0399                ADD3:        
0399   03                     INC   bc   
039A   0A                     LD   a,(bc)   
039B   FE 3D                  CP   "="   ; += add to variable
039D   CA 8F 04               JP   z,assign0   
03A0   E5                     PUSH   hl   
03A1   0B                     DEC   bc   
03A2   DD E9                  JP   (ix)   
03A4                             ; @ addr
03A4                             ; -- ptr
03A4                AT:          
03A4                ADDR:        
03A4   2A EE 0C               LD   hl,(vPointer)   
03A7   E5                     PUSH   hl   
03A8   21 EE 0C               LD   hl,vPointer   
03AB   22 EE 0C               LD   (vPointer),hl   
03AE   DD E9                  JP   (ix)   
03B0                AMPER:       
03B0                AND:         
03B0   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B1   E1                     POP   hl   
03B2   7B                     LD   a,e   
03B3   A5                     AND   l   
03B4   6F                     LD   l,a   
03B5   7A                     LD   a,d   
03B6   A4                     AND   h   
03B7                AND1:        
03B7   67                     LD   h,a   
03B8   C3 99 03               JP   add3   
03BB                PIPE:        
03BB                OR:          
03BB   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03BC   E1                     POP   hl   
03BD   7B                     LD   a,e   
03BE   B5                     OR   l   
03BF   6F                     LD   l,a   
03C0   7A                     LD   a,d   
03C1   B4                     OR   h   
03C2   18 F3                  JR   and1   
03C4                XOR:         
03C4   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03C5                XOR1:        
03C5   E1                     POP   hl   
03C6   7B                     LD   a,e   
03C7   AD                     XOR   l   
03C8   6F                     LD   l,a   
03C9   7A                     LD   a,d   
03CA   AC                     XOR   h   
03CB   67                     LD   h,a   
03CC   E5                     PUSH   hl   
03CD   DD E9                  JP   (ix)   
03CF                INVERT:      ; Bitwise INVert the top member of the stack
03CF   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03D2   18 F1                  JR   xor1   
03D4                             ; $a .. $z
03D4                             ; -- value
03D4                             ; returns value of arg
03D4                DOLLAR:      
03D4                ARG:         
03D4   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03D7   FD 56 05               LD   d,(iy+5)   
03DA   EB                     EX   de,hl   
03DB   7D                     LD   a,l   ; arg_list* == null, skip
03DC   B4                     OR   h   
03DD   28 1C                  JR   z,arg0a   
03DF   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03E0   2B                     DEC   hl   
03E1   7E                     LD   a,(hl)   
03E2   23                     INC   hl   
03E3   23                     INC   hl   
03E4   B7                     OR   a   
03E5   28 14                  JR   z,arg0a   ; num_args == 0, skip
03E7   5F                     LD   e,a   ; e = a = num_args
03E8   03                     INC   bc   ; a = next char = dollar_name
03E9   0A                     LD   a,(bc)   
03EA   C5                     PUSH   bc   ; save IP
03EB   43                     LD   b,e   ; b = e = num_args
03EC   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03EF   FD 56 03               LD   d,(iy+3)   
03F2                ARG0:        
03F2   1B                     DEC   de   ; a = dollar_name, de = next arg*
03F3   1B                     DEC   de   
03F4   BE                     CP   (hl)   
03F5   28 09                  JR   z,arg1   
03F7   23                     INC   hl   ; hl = next arg_list*
03F8   10 F8                  DJNZ   arg0   
03FA   C1                     POP   bc   ; no match, restore IP
03FB                ARG0A:       
03FB   11 00 00               LD   de,0   ; return 0
03FE   18 08                  JR   arg1a   
0400                ARG1:        
0400   C1                     POP   bc   ; restore IP
0401   EB                     EX   de,hl   ; hl = arg*
0402   22 EE 0C               LD   (vPointer),hl   ; store arg* in setter
0405   5E                     LD   e,(hl)   
0406   23                     INC   hl   
0407   56                     LD   d,(hl)   ; de = arg
0408                ARG1A:       
0408   D5                     PUSH   de   ; push arg
0409   DD E9                  JP   (ix)   
040B                LBRACK:      
040B                ARRBEGIN:      
040B   11 00 00               LD   de,0   ; create stack frame
040E   D5                     PUSH   de   ; push null for IP
040F   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0412   FD 56 05               LD   d,(iy+5)   ; 
0415   D5                     PUSH   de   ; 
0416   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0419   FD 56 03               LD   d,(iy+3)   ; 
041C   D5                     PUSH   de   ; 
041D   FD E5                  PUSH   iy   ; push BP
041F   FD 21 00 00            LD   iy,0   ; BP = SP
0423   FD 39                  ADD   iy,sp   
0425   DD E9                  JP   (ix)   
0427                RBRACK:      
0427                ARREND:      
0427   FD 54                  LD   d,iyh   ; de = BP
0429   FD 5D                  LD   e,iyl   
042B   ED 43 FA 0C            LD   (vTemp1),bc   ; save IP
042F   62 6B                  LD   hl,de   ; hl = de = BP
0431   B7                     OR   a   
0432   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0434   CB 3C                  SRL   h   ; 
0436   CB 1D                  RR   l   
0438   44 4D                  LD   bc,hl   ; bc = count
043A   2A EC 0C               LD   hl,(vHeapPtr)   ; hl = array[-2]
043D   71                     LD   (hl),c   ; write num items in length word
043E   23                     INC   hl   
043F   70                     LD   (hl),b   
0440   23                     INC   hl   ; hl = array[0], bc = count
0441                             ; de = BP, hl = array[0], bc = count
0441                ARREND1:      
0441   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0444   77                     LD   (hl),a   ; write lsb of array item
0445   23                     INC   hl   ; move to msb of array item
0446   3A E6 0C               LD   a,(vDataWidth)   ; vDataWidth=1?
0449   3D                     DEC   a   
044A   28 05                  JR   z,arrEnd2   
044C   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
044F   77                     LD   (hl),a   ; write msb of array item
0450   23                     INC   hl   ; move to next word in array
0451                ARREND2:      
0451   FD 2B                  DEC   iy   ; move to next word on stack
0453   FD 2B                  DEC   iy   
0455   0B                     DEC   bc   ; dec items count
0456   79                     LD   a,c   ; if not zero loop
0457   B0                     OR   b   
0458   20 E7                  JR   nz,arrEnd1   
045A   EB                     EX   de,hl   ; de = end of array, hl = BP
045B   F9                     LD   sp,hl   ; sp = BP
045C   E1                     POP   hl   ; de = end of array, hl = old BP
045D   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
045E   FD 62                  LD   iyh,d   
0460   FD 6B                  LD   iyl,e   
0462   D1                     POP   de   ; pop arg_list (discard)
0463   D1                     POP   de   ; pop first_arg* (discard)
0464   D1                     POP   de   ; pop IP (discard)
0465   ED 5B EC 0C            LD   de,(vHeapPtr)   ; de = array[-2]
0469   22 EC 0C               LD   (vHeapPtr),hl   ; move heap* to end of array
046C   ED 4B FA 0C            LD   bc,(vTemp1)   ; restore IP
0470   13                     INC   de   ; de = array[0]
0471   13                     INC   de   
0472   D5                     PUSH   de   ; return array[0]
0473   DD E9                  JP   (ix)   
0475                             ; index of an array, based on vDataWidth
0475                             ; array num -- value    ; also sets vPointer to address
0475                ARRINDEX:      
0475   E1                     POP   hl   ; hl = index
0476   D1                     POP   de   ; de = array
0477   3A E6 0C               LD   a,(vDataWidth)   ; a = data width
047A   3D                     DEC   a   
047B   28 01                  JR   z,arrIndex1   
047D                ARRINDEX0:      
047D   29                     ADD   hl,hl   ; if data width = 2 then double
047E                ARRINDEX1:      
047E   19                     ADD   hl,de   ; add addr
047F   22 EE 0C               LD   (vPointer),hl   ; store address in setter
0482   16 00                  LD   d,0   
0484   5E                     LD   e,(hl)   
0485   B7                     OR   a   ; check data width again
0486   28 02                  JR   z,arrIndex2   
0488   23                     INC   hl   
0489   56                     LD   d,(hl)   
048A                ARRINDEX2:      
048A   D5                     PUSH   de   
048B   DD E9                  JP   (ix)   
048D                             ; value _oldValue --            ; uses address in vPointer
048D                ASSIGN:      
048D   E1                     POP   hl   ; discard last accessed value
048E   E1                     POP   hl   ; hl = new value
048F                ASSIGN0:      
048F   EB                     EX   de,hl   ; de = new value
0490                ASSIGNX:      
0490   2A EE 0C               LD   hl,(vPointer)   
0493   73                     LD   (hl),e   
0494   3A E6 0C               LD   a,(vDataWidth)   
0497   3D                     DEC   a   ; is it byte?
0498   28 02                  JR   z,assign1   
049A   23                     INC   hl   
049B   72                     LD   (hl),d   
049C                ASSIGN1:      
049C   DD E9                  JP   (ix)   
049E                             ; arg_list - parses input (ab:c)
049E                             ; names after the : represent uninitialised locals
049E                             ; return values are the state of the stack after the block ends
049E                COLON:       
049E                ARGLIST:      
049E   11 00 00               LD   de,0   ; d = count locals, e = count args ()
04A1   2A EC 0C               LD   hl,(vHeapPtr)   ; hl = heap*
04A4   23                     INC   hl   ; skip length field to start
04A5   23                     INC   hl   
04A6   E5                     PUSH   hl   ; save start of arg_list
04A7   03                     INC   bc   ; point to next char
04A8                ARGLIST1:      
04A8   0A                     LD   a,(bc)   
04A9   FE 3A                  CP   ":"   ; ":" switches from args to locals
04AB   20 03                  JR   nz,arglist1a   
04AD   14                     INC   d   ; non zero value local count acts as flag
04AE   18 10                  JR   arglist3   
04B0                ARGLIST1A:      
04B0   FE 41                  CP   "A"   ; < "A" terminates arg_list
04B2   38 0F                  JR   c,arglist4   
04B4   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B6   30 0B                  JR   nc,arglist4   
04B8                ARGLIST2:      
04B8   77                     LD   (hl),a   
04B9   23                     INC   hl   
04BA   1C                     INC   e   ; increase arg count
04BB   AF                     XOR   a   
04BC   B2                     OR   d   
04BD   28 01                  JR   z,arglist3   
04BF   14                     INC   d   ; if d > 0 increase local count
04C0                ARGLIST3:      
04C0   03                     INC   bc   ; point to next char
04C1   18 E5                  JR   arglist1   
04C3                ARGLIST4:      
04C3   0B                     DEC   bc   
04C4   AF                     XOR   a   
04C5   B2                     OR   d   
04C6   28 01                  JR   z,arglist5   
04C8   15                     DEC   d   ; remove initial inc
04C9                ARGLIST5:      
04C9   23                     INC   hl   
04CA   22 EC 0C               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04CD   E1                     POP   hl   ; hl = start of arg_list
04CE   E5                     PUSH   hl   ; return start of arg_list
04CF   2B                     DEC   hl   ; write number of locals at start - 1
04D0   72                     LD   (hl),d   
04D1   2B                     DEC   hl   ; write number of args + locals at start - 2
04D2   73                     LD   (hl),e   
04D3   DD E9                  JP   (ix)   
04D5                LBRACE:      
04D5                BLOCK:       
04D5   C5                     PUSH   bc   ; return pointer to first { of block
04D6   03                     INC   bc   
04D7   16 01                  LD   d,1   ; nesting: count first parenthesis
04D9                BLOCK1:      ; Skip to end of definition
04D9   0A                     LD   a,(bc)   ; Get the next character
04DA   03                     INC   bc   ; Point to next character
04DB   FE 21                  CP   " " + 1   ; ignore whitespace
04DD   38 FA                  JR   c,block1   
04DF   FE 29                  CP   ")"   
04E1   28 2D                  JR   z,block4   
04E3   FE 7D                  CP   "}"   
04E5   28 29                  JR   z,block4   
04E7   FE 5D                  CP   "]"   
04E9   28 25                  JR   z,block4   
04EB   FE 28                  CP   "("   
04ED   28 16                  JR   z,block2   
04EF   FE 7B                  CP   "{"   
04F1   28 12                  JR   z,block2   
04F3   FE 5B                  CP   "["   
04F5   28 0E                  JR   z,block2   
04F7   FE 27                  CP   "'"   
04F9   28 0D                  JR   z,block3   
04FB   FE 60                  CP   "`"   
04FD   28 09                  JR   z,block3   
04FF   FE 22                  CP   $22   
0501   28 05                  JR   z,block3   
0503   18 D4                  JR   block1   
0505                BLOCK2:      
0505   14                     INC   d   
0506   18 D1                  JR   block1   
0508                BLOCK3:      
0508   3E 80                  LD   a,$80   
050A   AA                     XOR   d   
050B   47                     LD   b,a   
050C   20 CB                  JR   nz,block1   
050E   18 03                  JR   block5   
0510                BLOCK4:      
0510   15                     DEC   d   
0511   20 C6                  JR   nz,block1   ; get the next element
0513                BLOCK5:      
0513   60 69                  LD   hl,bc   ; hl = IP
0515   11 00 10               LD   de,HEAP   ; is IP pointing to object in heap
0518   B7                     OR   a   ; IP - HEAP
0519   ED 52                  SBC   hl,de   
051B   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
051D   28 1C                  JR   z,block6   
051F   60 69                  LD   hl,bc   ; hl = IP
0521   D1                     POP   de   ; de = block*
0522   ED 43 FA 0C            LD   (vTemp1),bc   ; save IP
0526   B7                     OR   a   ; bc = size
0527   ED 52                  SBC   hl,de   
0529   44 4D                  LD   bc,hl   
052B   EB                     EX   de,hl   ; hl = block* de = heap*
052C   ED 5B EC 0C            LD   de,(vHeapPtr)   
0530   D5                     PUSH   de   ; return hblock*
0531   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0533   ED 53 EC 0C            LD   (vHeapPtr),de   ; heap* += size
0537   ED 4B FA 0C            LD   bc,(vTemp1)   ; restore IP
053B                BLOCK6:      
053B   0B                     DEC   bc   ; balanced, exit
053C   DD E9                  JP   (ix)   
053E                RBRACE:      
053E                BLOCKEND:      
053E   D9                     EXX      ; de" = oldBP bc" = oldIP
053F   FD 5E 00               LD   e,(iy+0)   
0542   FD 56 01               LD   d,(iy+1)   
0545   FD 4E 06               LD   c,(iy+6)   
0548   FD 46 07               LD   b,(iy+7)   
054B   D9                     EXX      
054C   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
054F   FD 56 03               LD   d,(iy+3)   
0552   EB                     EX   de,hl   
0553   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0556   FD 56 01               LD   d,(iy+1)   
0559   13                     INC   de   ; for carry flag <=
055A   B7                     OR   a   
055B   ED 52                  SBC   hl,de   
055D   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
055F   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0561   FD 5D                  LD   e,iyl   
0563   21 08 00               LD   hl,8   
0566   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0567   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0568   18 0C                  JR   blockEnd2   
056A                BLOCKEND1:      ; same scope
056A   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
056D   FD 56 03               LD   d,(iy+3)   
0570   EB                     EX   de,hl   
0571   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0573   FD 5D                  LD   e,iyl   
0575   EB                     EX   de,hl   
0576                BLOCKEND2:      
0576   44 4D                  LD   bc,hl   ; bc = hl = BP
0578   B7                     OR   a   ; hl = BP - SP = count
0579   ED 72                  SBC   hl,sp   
057B   7D                     LD   a,l   
057C   B4                     OR   h   
057D   28 09                  JR   z,blockEnd3   
057F   C5                     PUSH   bc   ; bc = count, hl = BP
0580   44 4D                  LD   bc,hl   
0582   E1                     POP   hl   
0583   2B                     DEC   hl   ; hl = BP-1
0584   1B                     DEC   de   ; de = args*-1
0585   ED B8                  LDDR      
0587   13                     INC   de   
0588                BLOCKEND3:      
0588   EB                     EX   de,hl   ; hl = new tos
0589   F9                     LD   sp,hl   ; sp = new tos
058A   D9                     EXX      ; bc = IP, iy = oldBP
058B   D5                     PUSH   de   
058C   C5                     PUSH   bc   
058D   D9                     EXX      
058E   C1                     POP   bc   
058F   FD E1                  POP   iy   
0591   DD E9                  JP   (ix)   
0593                TICK:        
0593                CHAR:        
0593   21 00 00               LD   hl,0   ; if "" is empty or null
0596                CHAR1:       
0596   03                     INC   bc   ; point to next char
0597   0A                     LD   a,(bc)   
0598   FE 27                  CP   "'"   ; ' is the terminator
059A   28 09                  JR   z,char3   
059C   FE 5C                  CP   $5c   ; \ is the escape
059E   20 02                  JR   nz,char2   
05A0   03                     INC   bc   
05A1   0A                     LD   a,(bc)   
05A2                CHAR2:       
05A2   6F                     LD   l,a   
05A3   18 F1                  JR   char1   
05A5                CHAR3:       
05A5   E5                     PUSH   hl   
05A6   DD E9                  JP   (ix)   
05A8                BACKSLASH:      
05A8   DD E9                  JP   (ix)   
05AA                             ; , discard stack item
05AA                             ; x y -- x
05AA                COMMA:       
05AA                DISCARD:      
05AA   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05AC   FD 5D                  LD   e,iyl   
05AE   EB                     EX   de,hl   
05AF   B7                     OR   a   
05B0   ED 72                  SBC   hl,sp   
05B2   CB 7C                  BIT   7,h   
05B4   20 01                  JR   nz,discard1   
05B6   E1                     POP   hl   
05B7                DISCARD1:      
05B7   DD E9                  JP   (ix)   
05B9                SLASH:       
05B9   03                     INC   bc   
05BA   0A                     LD   a,(bc)   
05BB   FE 5C                  CP   $5C   
05BD   CA 81 08               JP   z,comment   
05C0   FE 41                  CP   "A"   
05C2   D2 0D 08               JP   nc,command   
05C5   0B                     DEC   bc   
05C6   D1                     POP   de   
05C7   E1                     POP   hl   
05C8   C5                     PUSH   bc   ; preserve the IP
05C9   44 4D                  LD   bc,hl   
05CB   CD 01 06               CALL   divide   
05CE   EB                     EX   de,hl   
05CF   ED 53 F0 0C            LD   (vRemain),de   
05D3   C1                     POP   bc   
05D4   C3 99 03               JP   add3   
05D7                DOT:         
05D7   E1                     POP   hl   
05D8   03                     INC   bc   
05D9   0A                     LD   a,(bc)   
05DA   FE 68                  CP   "h"   
05DC   20 05                  JR   nz,dot1   
05DE   CD 25 09               CALL   prthex   
05E1   18 17                  JR   dot4   
05E3                DOT1:        
05E3   FE 73                  CP   "s"   
05E5   20 05                  JR   nz,dot2   
05E7   CD 48 09               CALL   prtstr   
05EA   18 0E                  JR   dot4   
05EC                DOT2:        
05EC   FE 63                  CP   "c"   
05EE   20 06                  JR   nz,dot3   
05F0   7D                     LD   a,l   
05F1   CD 85 00               CALL   putchar   
05F4   18 04                  JR   dot4   
05F6                DOT3:        
05F6   0B                     DEC   bc   
05F7   CD DD 08               CALL   prtdec   
05FA                DOT4:        
05FA   3E 20                  LD   a," "   
05FC   CD 85 00               CALL   putchar   
05FF   DD E9                  JP   (ix)   
0601                             ; division subroutine.
0601                             ; bc: divisor, de: dividend, hl: remainder
0601                DIVIDE:      
0601   21 00 00               LD   hl,0   ; zero the remainder
0604   3E 10                  LD   a,16   ; loop counter
0606                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0606   CB 21                  SLA   c   
0608   CB 10                  RL   b   
060A   ED 6A                  ADC   hl,hl   
060C   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
060E   38 03                  JR   c,divide2   
0610   0C                     INC   c   
0611   18 01                  JR   divide3   
0613                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0613   19                     ADD   hl,de   
0614                DIVIDE3:      
0614   3D                     DEC   a   
0615   20 EF                  JR   nz,divide1   
0617   50 59                  LD   de,bc   ; result from bc to de
0619   C9                     RET      
061A                             ; hl = value1, de = value2
061A                             ; hl = result
061A                EQUALS:      
061A   B7                     OR   a   ; reset the carry flag
061B   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
061D   28 10                  JR   z,true1   
061F   C3 35 06               JP   false1   
0622                             ; hl = value1 de = value2
0622                             ; hl = result
0622                LESSTHANEQ:      
0622   B7                     OR   a   
0623   ED 52                  SBC   hl,de   
0625   18 05                  JR   lessthan1   
0627                             ; hl = value1 de = value2
0627                             ; hl = result
0627                LESSTHAN:      
0627   B7                     OR   a   
0628   ED 52                  SBC   hl,de   
062A   28 09                  JR   z,false1   
062C                LESSTHAN1:      
062C   FA 35 06               JP   m,false1   
062F                TRUE1:       
062F   21 FF FF               LD   hl,TRUE   
0632   E5                     PUSH   hl   
0633   DD E9                  JP   (ix)   
0635                NULL1:       
0635                FALSE1:      
0635   21 00 00               LD   hl,FALSE   
0638   E5                     PUSH   hl   
0639   DD E9                  JP   (ix)   
063B                LPAREN:      
063B   C3 D5 04               JP   block   
063E                             ; execute a block of code which ends with }
063E                             ; creates a root scope if BP == stack
063E                             ; else uses outer scope
063E                CARET:       
063E                GO:          
063E   D1                     POP   de   ; de = block*
063F                GO1:         
063F   7B                     LD   a,e   ; if block* == null, exit
0640   B2                     OR   d   
0641   20 02                  JR   nz,go2   
0643   DD E9                  JP   (ix)   
0645                GO2:         
0645   1A                     LD   a,(de)   
0646   FE 7B                  CP   "{"   
0648   28 07                  JR   z,goBlock1   
064A   FE 28                  CP   "("   
064C   C2 84 06               JP   nz,goFunc   
064F   13                     INC   de   ; de is the address to jump back to
0650   D5                     PUSH   de   ; push de just before stack frame
0651                GOBLOCK:      
0651                GOBLOCK1:      
0651   ED 53 FA 0C            LD   (vTemp1),de   ; save de
0655   21 80 0B               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0658   FD 54                  LD   d,iyh   
065A   FD 5D                  LD   e,iyl   
065C   B7                     OR   a   ; if stack* == BP then this is the root_scope
065D   ED 52                  SBC   hl,de   
065F   ED 5B FA 0C            LD   de,(vTemp1)   ; restore de
0663   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0664   B4                     OR   h   
0665   3E 00                  LD   a,0   
0667   28 6C                  JR   z,goFunc8   
0669   C5                     PUSH   bc   ; push IP
066A   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
066D   FD 46 05               LD   b,(iy+5)   
0670   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0673   FD 66 03               LD   h,(iy+3)   
0676                GOBLOCK2:      
0676   C5                     PUSH   bc   ; arg_list*
0677   E5                     PUSH   hl   ; first_arg*
0678   FD E5                  PUSH   iy   ; push BP
067A   FD 21 00 00            LD   iy,0   ; BP = SP
067E   FD 39                  ADD   iy,sp   
0680   42 4B                  LD   bc,de   ; bc = de = block*-1
0682   DD E9                  JP   (ix)   
0684                GOFUNC:      ; execute function
0684   EB                     EX   de,hl   ; hl = func*
0685   5E                     LD   e,(hl)   ; de = partial_array*
0686   23                     INC   hl   
0687   56                     LD   d,(hl)   
0688   23                     INC   hl   
0689   7B                     LD   a,e   ; if partial_array* == null skip
068A   B2                     OR   d   
068B   28 21                  JR   z,goFunc3   
068D   ED 43 FA 0C            LD   (vTemp1),bc   
0691   22 FC 0C               LD   (vTemp2),hl   ; save bc,hl
0694   EB                     EX   de,hl   ; hl = partial_array*
0695   2B                     DEC   hl   ; bc = count
0696   46                     LD   b,(hl)   
0697   2B                     DEC   hl   
0698   4E                     LD   c,(hl)   
0699   23                     INC   hl   ; push each item on stack
069A   23                     INC   hl   
069B   18 06                  JR   goFunc2   
069D                GOFUNC1:      
069D   5E                     LD   e,(hl)   ; de = partial item
069E   23                     INC   hl   
069F   56                     LD   d,(hl)   
06A0   23                     INC   hl   
06A1   D5                     PUSH   de   ; push on stack
06A2   0B                     DEC   bc   
06A3                GOFUNC2:      
06A3   79                     LD   a,c   ; if count != 0 then loop
06A4   B0                     OR   b   
06A5   20 F6                  JR   nz,goFunc1   
06A7   ED 4B FA 0C            LD   bc,(vTemp1)   ; restore bc
06AB   2A FC 0C               LD   hl,(vTemp2)   ; restore hl
06AE                GOFUNC3:      
06AE   5E                     LD   e,(hl)   ; de = block*
06AF   23                     INC   hl   
06B0   56                     LD   d,(hl)   
06B1   23                     INC   hl   
06B2   ED 53 FA 0C            LD   (vTemp1),de   ; save block*
06B6   5E                     LD   e,(hl)   ; de = arg_list*
06B7   23                     INC   hl   
06B8   56                     LD   d,(hl)   
06B9   23                     INC   hl   
06BA   EB                     EX   de,hl   ; hl = arg_list*
06BB   ED 5B FA 0C            LD   de,(vTemp1)   ; restore de = block*
06BF   7D                     LD   a,l   ; if arg_list* == null a = 0
06C0   B4                     OR   h   
06C1   20 03                  JR   nz,goFunc4   
06C3   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06C4   18 0F                  JR   goFunc8   
06C6                GOFUNC4:      ; allocate locals
06C6   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
06C7   7E                     LD   a,(hl)   
06C8   18 03                  JR   goFunc6   
06CA                GOFUNC5:      ; loop
06CA   3B                     DEC   sp   
06CB   3B                     DEC   sp   
06CC   3D                     DEC   a   
06CD                GOFUNC6:      
06CD   B7                     OR   a   
06CE   20 FA                  JR   nz,goFunc5   ; end loop
06D0                GOFUNC7:      
06D0   2B                     DEC   hl   ; a = num_args* x 2
06D1   7E                     LD   a,(hl)   
06D2   23                     INC   hl   
06D3   23                     INC   hl   
06D4   87                     ADD   a,a   ; a *= 2
06D5                GOFUNC8:      
06D5   C5                     PUSH   bc   ; push IP
06D6   44 4D                  LD   bc,hl   
06D8   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06DB   85                     ADD   a,l   
06DC   6F                     LD   l,a   
06DD   39                     ADD   hl,sp   
06DE   18 96                  JR   goBlock2   
06E0                HASH:        
06E0                HEXNUM:      
06E0   21 00 00               LD   hl,0   ; Clear hl to accept the number
06E3                HEXNUM1:      
06E3   03                     INC   bc   
06E4   0A                     LD   a,(bc)   ; Get the character which is a numeral
06E5   CB 77                  BIT   6,a   ; is it uppercase alpha?
06E7   28 02                  JR   z,hexnum2   ; no a decimal
06E9   D6 07                  SUB   7   ; sub 7  to make $a - $F
06EB                HEXNUM2:      
06EB   D6 30                  SUB   $30   ; form decimal digit
06ED   DA 6B 07               JP   c,num2   
06F0   FE 10                  CP   $0F+1   
06F2   D2 6B 07               JP   nc,num2   
06F5   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06F6   29                     ADD   hl,hl   ; 4X
06F7   29                     ADD   hl,hl   ; 8X
06F8   29                     ADD   hl,hl   ; 16X
06F9   85                     ADD   a,l   ; add into bottom of hl
06FA   6F                     LD   l,a   
06FB   18 E6                  JR   hexnum1   
06FD                UPCASE:      
06FD   0A                     LD   a,(bc)   ; a = identifier char
06FE   D6 41                  SUB   "A"   ; "A" = 0
0700   18 05                  JR   ident1   
0702                LOWCASE:      
0702   0A                     LD   a,(bc)   
0703   D6 61                  SUB   "a"   
0705   C6 1A                  ADD   a,26   
0707                IDENT1:      
0707   87                     ADD   a,a   ; l = a * 2
0708   6F                     LD   l,a   
0709   26 0C                  LD   h,msb(vars)   
070B   22 EE 0C               LD   (vPointer),hl   ; store address in setter
070E   5E                     LD   e,(hl)   
070F   23                     INC   hl   
0710   56                     LD   d,(hl)   
0711   D5                     PUSH   de   
0712   DD E9                  JP   (ix)   
0714                             ; if
0714                             ; condition then -- value
0714                QUESTION:      
0714                IF:          
0714   03                     INC   bc   
0715   0A                     LD   a,(bc)   
0716   FE 3F                  CP   "?"   
0718   28 06                  JR   z,ifte   
071A   0B                     DEC   bc   
071B   11 00 00               LD   de,0   ; NUL pointer for else
071E   18 01                  JR   ifte1   
0720                             ; ifte
0720                             ; condition then else -- value
0720                IFTE:        
0720   D1                     POP   de   ; de = else
0721                IFTE1:       
0721   E1                     POP   hl   ; hl = then
0722   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0723   7C                     LD   a,h   
0724   B5                     OR   l   
0725   E1                     POP   hl   ; hl = then
0726   CA 3F 06               JP   z,go1   ; if z de = else
0729   EB                     EX   de,hl   ; condition = false, de = then
072A   C3 3F 06               JP   go1   
072D                STAR:        
072D                MUL:         
072D   D1                     POP   de   ; get first value
072E   E1                     POP   hl   
072F                MUL2:        
072F   C5                     PUSH   bc   ; Preserve the IP
0730   44 4D                  LD   bc,hl   ; bc = 2nd value
0732   21 00 00               LD   hl,0   
0735   3E 10                  LD   a,16   
0737                MUL3:        
0737   29                     ADD   hl,hl   
0738   CB 13                  RL   e   
073A   CB 12                  RL   d   
073C   30 04                  JR   nc,$+6   
073E   09                     ADD   hl,bc   
073F   30 01                  JR   nc,$+3   
0741   13                     INC   de   
0742   3D                     DEC   a   
0743   20 F2                  JR   nz,mul3   
0745   C1                     POP   bc   ; Restore the IP
0746   C3 99 03               JP   add3   
0749                NUM:         
0749   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
074C   0A                     LD   a,(bc)   ; Get numeral or -
074D   FE 2D                  CP   "-"   
074F   20 01                  JR   nz,num0   
0751   03                     INC   bc   ; move to next char, no flags affected
0752                NUM0:        
0752   08                     EX   af,af'   ; save zero flag = 0 for later
0753                NUM1:        
0753   0A                     LD   a,(bc)   ; read digit
0754   D6 30                  SUB   "0"   ; less than 0?
0756   38 13                  JR   c,num2   ; not a digit, exit loop
0758   FE 0A                  CP   10   ; greater that 9?
075A   30 0F                  JR   nc,num2   ; not a digit, exit loop
075C   03                     INC   bc   ; inc IP
075D   54 5D                  LD   de,hl   ; multiply hl * 10
075F   29                     ADD   hl,hl   
0760   29                     ADD   hl,hl   
0761   19                     ADD   hl,de   
0762   29                     ADD   hl,hl   
0763   85                     ADD   a,l   ; add digit in a to hl
0764   6F                     LD   l,a   
0765   3E 00                  LD   a,0   
0767   8C                     ADC   a,h   
0768   67                     LD   h,a   
0769   18 E8                  JR   num1   
076B                NUM2:        
076B   0B                     DEC   bc   
076C   08                     EX   af,af'   ; restore zero flag
076D   20 07                  JR   nz,num3   
076F   EB                     EX   de,hl   ; negate the value of hl
0770   21 00 00               LD   hl,0   
0773   B7                     OR   a   ; jump to sub2
0774   ED 52                  SBC   hl,de   
0776                NUM3:        
0776   E5                     PUSH   hl   ; Put the number on the stack
0777   DD E9                  JP   (ix)   ; and process the next character
0779                UNDERSCORE:      
0779                REMAIN:      
0779   2A F0 0C               LD   hl,(vRemain)   
077C   E5                     PUSH   hl   
077D   DD E9                  JP   (ix)   
077F                RPAREN:      
077F   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0782   FD 46 09               LD   b,(iy+9)   
0785   DD E9                  JP   (ix)   
0787                             ; arg_list* block* -- ptr
0787                SEMICOLON:      
0787   D1                     POP   de   ; de = block* hl = heap*
0788   2A EC 0C               LD   hl,(vHeapPtr)   
078B   AF                     XOR   a   
078C   77                     LD   (hl),a   ; compile null partial_array*
078D   23                     INC   hl   
078E   77                     LD   (hl),a   
078F   23                     INC   hl   
0790   73                     LD   (hl),e   ; compile block*
0791   23                     INC   hl   
0792   72                     LD   (hl),d   
0793   23                     INC   hl   
0794   D1                     POP   de   ; de = block*
0795   73                     LD   (hl),e   ; compile arg_list*
0796   23                     INC   hl   
0797   72                     LD   (hl),d   
0798   23                     INC   hl   
0799   ED 5B EC 0C            LD   de,(vHeapPtr)   ; return func*
079D   D5                     PUSH   de   
079E   22 EC 0C               LD   (vHeapPtr),hl   ; heap* += 4
07A1   DD E9                  JP   (ix)   
07A3                             ; shiftLeft
07A3                             ; value count -- value2          shift left count places
07A3                SHIFTLEFT:      
07A3   50 59                  LD   de,bc   ; save IP
07A5   C1                     POP   bc   ; bc = count
07A6   41                     LD   b,c   ; b = loop counter
07A7   E1                     POP   hl   
07A8   04                     INC   b   ; test for counter=0 case
07A9   18 01                  JR   shiftLeft2   
07AB                SHIFTLEFT1:      
07AB   29                     ADD   hl,hl   ; left shift hl
07AC                SHIFTLEFT2:      
07AC   10 FD                  DJNZ   shiftLeft1   
07AE   E5                     PUSH   hl   
07AF   42 4B                  LD   bc,de   ; restore IP
07B1   DD E9                  JP   (ix)   
07B3                             ; shiftRight
07B3                             ; value count -- value2          shift left count places
07B3                SHIFTRIGHT:      
07B3   50 59                  LD   de,bc   ; save IP
07B5   C1                     POP   bc   ; bc = count
07B6   41                     LD   b,c   ; b = loop counter
07B7   E1                     POP   hl   
07B8   04                     INC   b   ; test for counter=0 case
07B9   18 04                  JR   shiftRight2   
07BB                SHIFTRIGHT1:      
07BB   CB 3C                  SRL   h   ; right shift hl
07BD   CB 1D                  RR   l   
07BF                SHIFTRIGHT2:      
07BF   10 FA                  DJNZ   shiftRight1   
07C1   E5                     PUSH   hl   
07C2   42 4B                  LD   bc,de   ; restore IP
07C4   DD E9                  JP   (ix)   
07C6                             ; string
07C6                             ; -- ptr                        ; points to start of string chars,
07C6                             ; length is stored at start - 2 bytes
07C6                DBLQUOTE:      
07C6                STRING:      
07C6   2A EC 0C               LD   hl,(vHeapPtr)   ; hl = heap*
07C9   23                     INC   hl   ; skip length field to start
07CA   23                     INC   hl   
07CB   E5                     PUSH   hl   ; save start of string
07CC   03                     INC   bc   ; point to next char
07CD   18 03                  JR   string2   
07CF                STRING1:      
07CF   77                     LD   (hl),a   
07D0   23                     INC   hl   ; increase count
07D1   03                     INC   bc   ; point to next char
07D2                STRING2:      
07D2   0A                     LD   a,(bc)   
07D3   FE 22                  CP   DQUOTE   ; " is the string terminator
07D5   20 F8                  JR   nz,string1   
07D7   FE 60                  CP   "`"   ; ` is the string terminator used in testing
07D9   20 F4                  JR   nz,string1   
07DB   AF                     XOR   a   ; write NUL to terminate string
07DC   77                     LD   (hl),a   ; hl = end of string
07DD   23                     INC   hl   
07DE   22 EC 0C               LD   (vHeapPtr),hl   ; bump heap* to after end of string
07E1   2B                     DEC   hl   ; hl = end of string without terminator
07E2   D1                     POP   de   ; de = start of string
07E3   D5                     PUSH   de   ; return start of string
07E4   B7                     OR   a   ; hl = length bytes, de = start of string
07E5   ED 52                  SBC   hl,de   
07E7   EB                     EX   de,hl   
07E8   2B                     DEC   hl   ; write length bytes to length field at start - 2
07E9   72                     LD   (hl),d   
07EA   2B                     DEC   hl   
07EB   73                     LD   (hl),e   
07EC   DD E9                  JP   (ix)   
07EE                MINUS:       ; negative sign or subtract
07EE   03                     INC   bc   ; check if sign of a number
07EF   0A                     LD   a,(bc)   
07F0   0B                     DEC   bc   
07F1   FE 30                  CP   "0"   
07F3   38 05                  JR   c,sub   
07F5   FE 3A                  CP   "9"+1   
07F7   DA 3E 03               JP   c,num_   
07FA                SUB:         ; Subtract the value 2nd on stack from top of stack
07FA   03                     INC   bc   
07FB   FE 2D                  CP   "-"   
07FD   20 05                  JR   nz,sub1   
07FF   E1                     POP   hl   
0800   2B                     DEC   hl   
0801   C3 8F 04               JP   assign0   
0804                SUB1:        
0804   0B                     DEC   bc   
0805   D1                     POP   de   
0806   E1                     POP   hl   
0807   B7                     OR   a   
0808   ED 52                  SBC   hl,de   
080A   C3 99 03               JP   add3   
080D                             ;*******************************************************************
080D                             ; commands
080D                             ; a contains command letter
080D                             ; bc points to command letter
080D                             ;*******************************************************************
080D                COMMAND:      
080D   FE 61                  CP   "a"   ; \a absolute
080F   CA 54 08               JP   z,abs1   
0812   FE 62                  CP   "b"   ; \x break
0814   CA 8A 08               JP   z,break   
0817   FE 63                  CP   "c"   ; \c chars
0819   CA A4 08               JP   z,chars   
081C   FE 70                  CP   "p"   ; \p partial
081E   CA 61 08               JP   z,partial   
0821   FE 66                  CP   "f"   ; \f false
0823   CA 35 06               JP   z,false1   
0826   FE 68                  CP   "h"   ; \h heap pointer
0828   CA AC 08               JP   z,heapPtr   
082B   FE 69                  CP   "i"   ; \i input
082D   CA B8 08               JP   z,input   
0830   FE 6B                  CP   "k"   ; \k key
0832   CA C3 08               JP   z,key   
0835   FE 6E                  CP   "n"   ; \n numbers
0837   CA D5 08               JP   z,numbers   
083A   FE 6F                  CP   "o"   ; \o output
083C   CA CC 08               JP   z,output   
083F   FE 74                  CP   "t"   ; \t true
0841   CA 2F 06               JP   z,true1   
0844   FE 76                  CP   "v"   ; \v invert
0846   CA CF 03               JP   z,invert   
0849   FE 78                  CP   "x"   ; \x xor
084B   CA C4 03               JP   z,xor   
084E                ERROR1:      
084E   21 01 00               LD   hl,1   ; error 1: unknown command
0851   C3 3A 0A               JP   error   
0854                ABS1:        
0854   E1                     POP   hl   
0855   CB 7C                  BIT   7,h   
0857   C8                     RET   z   
0858   AF                     XOR   a   
0859   95                     SUB   l   
085A   6F                     LD   l,a   
085B   9F                     SBC   a,a   
085C   94                     SUB   h   
085D   67                     LD   h,a   
085E   E5                     PUSH   hl   
085F   DD E9                  JP   (ix)   
0861                             ; partial
0861                             ; array* func* -- func1*
0861                PARTIAL:      
0861   E1                     POP   hl   ; h1 = func*
0862   ED 5B EC 0C            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
0866   ED 43 FA 0C            LD   (vTemp1),bc   ; save IP
086A   01 06 00               LD   bc,6   ; bc = count
086D   ED B0                  LDIR      ; clone func
086F   ED 4B FA 0C            LD   bc,(vTemp1)   ; restore IP
0873   2A EC 0C               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
0876   ED 53 EC 0C            LD   (vHeapPtr),de   ; heap* += 6
087A   D1                     POP   de   ; de = array*
087B   E5                     PUSH   hl   ; return partial_array*
087C   73                     LD   (hl),e   ; compile array*
087D   23                     INC   hl   
087E   72                     LD   (hl),d   
087F   DD E9                  JP   (ix)   
0881                COMMENT:      
0881   03                     INC   bc   ; point to next char
0882   0A                     LD   a,(bc)   
0883   FE 20                  CP   " "   ; terminate on any char less than SP
0885   30 FA                  JR   nc,comment   
0887   0B                     DEC   bc   
0888   DD E9                  JP   (ix)   
088A                BREAK:       
088A   E1                     POP   hl   
088B   7D                     LD   a,l   
088C   B4                     OR   h   
088D   28 02                  JR   z,break1   
088F   DD E9                  JP   (ix)   
0891                BREAK1:      
0891   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0893   FD 54                  LD   d,iyh   
0895   21 08 00               LD   hl,8   
0898   19                     ADD   hl,de   
0899   23                     INC   hl   
089A   23                     INC   hl   
089B   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
089E   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
08A1   C3 3E 05               JP   blockEnd   
08A4                CHARS:       
08A4   21 01 00               LD   hl,1   
08A7                CHARS1:      
08A7   22 E6 0C               LD   (vDataWidth),hl   
08AA   DD E9                  JP   (ix)   
08AC                HEAPPTR:      
08AC   2A EC 0C               LD   hl,(vHeapPtr)   
08AF   E5                     PUSH   hl   
08B0   21 EC 0C               LD   hl,vHeapPtr   
08B3   22 EE 0C               LD   (vPointer),hl   
08B6   DD E9                  JP   (ix)   
08B8                             ; Z80 port input
08B8                             ; port -- value
08B8                INPUT:       
08B8   E1                     POP   hl   
08B9   59                     LD   e,c   ; save IP
08BA   4D                     LD   c,l   
08BB   ED 68                  IN   l,(c)   
08BD   26 00                  LD   h,0   
08BF   4B                     LD   c,e   ; restore IP
08C0   E5                     PUSH   hl   
08C1   DD E9                  JP   (ix)   
08C3                KEY:         
08C3   CD 81 00               CALL   getchar   
08C6   26 00                  LD   h,0   
08C8   6F                     LD   l,a   
08C9   E5                     PUSH   hl   
08CA   DD E9                  JP   (ix)   
08CC                             ; Z80 port output
08CC                             ; value port --
08CC                OUTPUT:      
08CC   E1                     POP   hl   
08CD   59                     LD   e,c   ; save IP
08CE   4D                     LD   c,l   
08CF   E1                     POP   hl   
08D0   ED 69                  OUT   (c),l   
08D2   4B                     LD   c,e   ; restore IP
08D3   DD E9                  JP   (ix)   
08D5                NUMBERS:      
08D5   21 02 00               LD   hl,2   
08D8   C3 A7 08               JP   chars1   
08DB                             ; 
08DB                             ; 
08DB                             ; 
08DB                             ; 
08DB                FILTER:      
08DB                MAP:         
08DB                SCAN:        
08DB   DD E9                  JP   (ix)   
08DD                             ; print decimal
08DD                             ; hl = value
08DD                PRTDEC:      
08DD   CB 7C                  BIT   7,h   
08DF   28 0B                  JR   z,prtdec0   
08E1   3E 2D                  LD   a,"-"   
08E3   CD 85 00               CALL   putchar   
08E6   AF                     XOR   a   
08E7   95                     SUB   l   
08E8   6F                     LD   l,a   
08E9   9F                     SBC   a,a   
08EA   94                     SUB   h   
08EB   67                     LD   h,a   
08EC                PRTDEC0:      
08EC   C5                     PUSH   bc   
08ED   0E 00                  LD   c,0   ; leading zeros flag = false
08EF   11 F0 D8               LD   de,-10000   
08F2   CD 0E 09               CALL   prtdec1   
08F5   11 18 FC               LD   de,-1000   
08F8   CD 0E 09               CALL   prtdec1   
08FB   11 9C FF               LD   de,-100   
08FE   CD 0E 09               CALL   prtdec1   
0901   1E F6                  LD   e,-10   
0903   CD 0E 09               CALL   prtdec1   
0906   0C                     INC   c   ; flag = true for at least digit
0907   1E FF                  LD   e,-1   
0909   CD 0E 09               CALL   prtdec1   
090C   C1                     POP   bc   
090D   C9                     RET      
090E                PRTDEC1:      
090E   06 2F                  LD   b,"0"-1   
0910                PRTDEC2:      
0910   04                     INC   b   
0911   19                     ADD   hl,de   
0912   38 FC                  JR   c,prtdec2   
0914   ED 52                  SBC   hl,de   
0916   3E 30                  LD   a,"0"   
0918   B8                     CP   b   
0919   20 05                  JR   nz,prtdec3   
091B   AF                     XOR   a   
091C   B1                     OR   c   
091D   C8                     RET   z   
091E   18 01                  JR   prtdec4   
0920                PRTDEC3:      
0920   0C                     INC   c   
0921                PRTDEC4:      
0921   78                     LD   a,b   
0922   C3 85 00               JP   putchar   
0925                PRTHEX:      ; display hl as a 16-bit number in hex.
0925   C5                     PUSH   bc   ; preserve the IP
0926   7C                     LD   a,h   
0927   CD 30 09               CALL   prthex2   
092A   7D                     LD   a,l   
092B   CD 30 09               CALL   prthex2   
092E   C1                     POP   bc   
092F   C9                     RET      
0930                PRTHEX2:      
0930   4F                     LD   c,a   
0931   1F                     RRA      
0932   1F                     RRA      
0933   1F                     RRA      
0934   1F                     RRA      
0935   CD 39 09               CALL   prthex3   
0938   79                     LD   a,c   
0939                PRTHEX3:      
0939   E6 0F                  AND   0x0F   
093B   C6 90                  ADD   a,0x90   
093D   27                     DAA      
093E   CE 40                  ADC   a,0x40   
0940   27                     DAA      
0941   C3 85 00               JP   putchar   
0944                PRTSTR0:      
0944   CD 85 00               CALL   putchar   
0947   23                     INC   hl   
0948                PRTSTR:      
0948   7E                     LD   a,(hl)   
0949   B7                     OR   a   
094A   20 F8                  JR   nz,prtstr0   
094C   C9                     RET      
094D                             ; **************************************************************************
094D                             ; calculate nesting value
094D                             ; a is char to be tested,
094D                             ; e is the nesting value (initially 0)
094D                             ; e is increased by ( and [
094D                             ; e is decreased by ) and ]
094D                             ; e has its bit 7 toggled by `
094D                             ; limited to 127 levels
094D                             ; **************************************************************************
094D                NESTING:      
094D   FE 22                  CP   DQUOTE   ; quote char
094F   28 06                  JR   z,nesting0   
0951   FE 60                  CP   "`"   ; quote char
0953   28 02                  JR   z,nesting0   
0955   18 0A                  JR   nesting1   
0957                NESTING0:      
0957   CB 7B                  BIT   7,e   
0959   28 03                  JR   z,nesting1a   
095B   CB BB                  RES   7,e   
095D   C9                     RET      
095E                NESTING1A:      
095E   CB FB                  SET   7,e   
0960   C9                     RET      
0961                NESTING1:      
0961   CB 7B                  BIT   7,e   
0963   C0                     RET   nz   
0964   FE 7B                  CP   "{"   
0966   28 08                  JR   z,nesting2   
0968   FE 5B                  CP   "["   
096A   28 04                  JR   z,nesting2   
096C   FE 28                  CP   "("   
096E   20 02                  JR   nz,nesting3   
0970                NESTING2:      
0970   1C                     INC   e   
0971   C9                     RET      
0972                NESTING3:      
0972   FE 7D                  CP   "}"   
0974   28 07                  JR   z,nesting4   
0976   FE 5D                  CP   "]"   
0978   28 03                  JR   z,nesting4   
097A   FE 29                  CP   ")"   
097C   C0                     RET   nz   
097D                NESTING4:      
097D   1D                     DEC   e   
097E   C9                     RET      
097F                PROMPT:      
097F   CD 8F 09               CALL   printStr   
0982   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0987   C9                     RET      
0988                CRLF:        
0988   CD 8F 09               CALL   printStr   
098B   0D 0A 00               .CSTR   "\r\n"   
098E   C9                     RET      
098F                             ; prints a null teminated string
098F                             ; the string should be immedaitely following the call
098F                PRINTSTR:      
098F   E3                     EX   (sp),hl   ; swap			
0990   CD 48 09               CALL   prtstr   
0993   23                     INC   hl   ; inc past NUL
0994   E3                     EX   (sp),hl   ; put it back	
0995   C9                     RET      
0996                INIT:        
0996   DD 2A EA 0C            LD   ix,(vNext)   
099A   FD 21 80 0B            LD   iy,STACK   
099E   21 80 01               LD   hl,isysVars   
09A1   11 E6 0C               LD   de,sysVars   
09A4   01 10 00               LD   bc,8 * 2   
09A7   ED B0                  LDIR      
09A9   21 00 0C               LD   hl,vars   ; 52 vars LO HI
09AC   06 34                  LD   b,26*2   
09AE   AF                     XOR   a   
09AF                INIT0:       
09AF   77                     LD   (hl),a   
09B0   23                     INC   hl   
09B1   10 FC                  DJNZ   init0   
09B3   C9                     RET      
09B4                START:       
09B4   31 80 0B               LD   sp,STACK   ; start of monty
09B7   CD 96 09               CALL   init   ; setups
09BA   CD 8F 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
09BD   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
09CA                INTERPRET:      
09CA   CD 7F 09               CALL   prompt   
09CD   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
09D0   ED 43 E8 0C            LD   (vTIBPtr),bc   
09D4                INTERPRET2:      ; calc nesting (a macro might have changed it)
09D4   1E 00                  LD   e,0   ; initilize nesting value
09D6   C5                     PUSH   bc   ; save offset into TIB,
09D7                             ; bc is also the count of chars in TIB
09D7   21 00 0E               LD   hl,TIB   ; hl is start of TIB
09DA   18 06                  JR   interpret4   
09DC                INTERPRET3:      
09DC   7E                     LD   a,(hl)   ; a = char in TIB
09DD   23                     INC   hl   ; inc pointer into TIB
09DE   0B                     DEC   bc   ; dec count of chars in TIB
09DF   CD 4D 09               CALL   nesting   ; update nesting value
09E2                INTERPRET4:      
09E2   79                     LD   a,c   ; is count zero?
09E3   B0                     OR   b   
09E4   20 F6                  JR   nz,interpret3   ; if not loop
09E6   C1                     POP   bc   ; restore offset into TIB
09E7                INTERPRET5:      
09E7   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
09EA   FE 20                  CP   $20   ; compare to space
09EC   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
09EE   FE 00                  CP   $0   ; is it end of string? NUL end of string
09F0                             ; ???? NEEDED?
09F0   28 27                  JR   z,interpret8   
09F2   FE 0D                  CP   "\r"   ; carriage return? ascii 13
09F4   28 10                  JR   z,interpret7   ; if anything else its macro/control
09F6                             ; macro
09F6                             ;  ld (vTIBPtr),bc
09F6                             ;  ld hl,ctrlCodes
09F6                             ;  add a,l			            ; look up key of macros
09F6                             ;  ld l,a
09F6                             ;  ld e,(hl)
09F6                             ;  ld a,e
09F6                             ;  or a
09F6                             ;  jr z,macro1
09F6                             ;  ld d,msb(macros)
09F6                             ;  push de
09F6                             ;  call call		            ; monty exec_ operation and jump to it
09F6                             ;  db DC1,0
09F6                             ; macro1:
09F6                             ;  ld bc,(vTIBPtr)
09F6   18 DC                  JR   interpret2   
09F8                INTERPRET6:      
09F8   21 00 0E               LD   hl,TIB   
09FB   09                     ADD   hl,bc   
09FC   77                     LD   (hl),a   ; store the character in textbuf
09FD   03                     INC   bc   
09FE   CD 85 00               CALL   putchar   ; echo character to screen
0A01   CD 4D 09               CALL   nesting   
0A04   18 E1                  JR   interpret5   ; wait for next character
0A06                INTERPRET7:      
0A06   21 00 0E               LD   hl,TIB   
0A09   09                     ADD   hl,bc   
0A0A   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0A0C   23                     INC   hl   
0A0D   36 0A                  LD   (hl),"\n"   
0A0F   23                     INC   hl   
0A10   03                     INC   bc   
0A11   03                     INC   bc   
0A12   CD 88 09               CALL   crlf   ; echo character to screen
0A15   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0A16   B7                     OR   a   
0A17   20 CE                  JR   nz,interpret5   
0A19                INTERPRET8:      
0A19   ED 43 E8 0C            LD   (vTIBPtr),bc   
0A1D   01 00 0E               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0A20                             ; we pressed enter
0A20   0B                     DEC   bc   
0A21                NEXT:        
0A21   03                     INC   bc   ; Increment the IP
0A22   0A                     LD   a,(bc)   ; Get the next character and dispatch
0A23   FE 20                  CP   " "   ; whitespace?
0A25   28 FA                  JR   z,next   ; space? ignore
0A27   38 07                  JR   c,next1   
0A29   6F                     LD   l,a   ; index into table
0A2A   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0A2C   6E                     LD   l,(hl)   ; get low jump address
0A2D   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0A2F   E9                     JP   (hl)   ; Jump to routine
0A30                NEXT1:       
0A30   FE 00                  CP   NUL   ; end of input string?
0A32   28 03                  JR   z,exit_   
0A34   C3 CA 09               JP   interpret   ; no, other whitespace, macros?
0A37                EXIT_:       
0A37   60 69                  LD   hl,bc   
0A39   E9                     JP   (hl)   
0A3A                ERROR:       
0A3A   CD 8F 09               CALL   printStr   
0A3D   45 72 72 6F 72 20 00   .CSTR   "Error "   
0A44   CD DD 08               CALL   prtdec   
0A47   C3 CA 09               JP   interpret   
0A4A                          ALIGN   $100   
0B00                             ; .org RAMSTART
0B00                          DS   DSIZE   
0B80                STACK:       
0B80                          ALIGN   $100   
0C00                VARS:        
0C00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
0CD0                RESTARTS:      
0CD0                RST08:    DS   2   
0CD2                RST10:    DS   2   
0CD4                RST18:    DS   2   
0CD6                RST20:    DS   2   
0CD8                RST28:    DS   2   
0CDA                RST30:    DS   2   ; 
0CDC                BAUD:     DS   2   ; 
0CDE                INTVEC:   DS   2   ; 
0CE0                NMIVEC:   DS   2   ; 
0CE2                GETCVEC:   DS   2   ; 
0CE4                PUTCVEC:   DS   2   ; 
0CE6                SYSVARS:      
0CE6                             ; initialised sys variables (preserved)
0CE6                VDATAWIDTH:   DS   2   ; 
0CE8                VTIBPTR:   DS   2   ; 
0CEA                VNEXT:    DS   2   ; 
0CEC                VHEAPPTR:   DS   2   ; 
0CEE                             ; uninitialised sys variables (preserved)
0CEE                VPOINTER:   DS   2   ; 
0CF0                VREMAIN:   DS   2   ; 
0CF2                VSAVEDIP:   DS   2   ; 
0CF4                VSAVEDSP:   DS   2   ; 
0CF6                VSAVEDBP:   DS   2   ; 
0CF8                VCHECKSUM:   DS   2   ; 
0CFA                             ; uninitialised sys variables (unpreserved)
0CFA                VTEMP1:   DS   2   ; 
0CFC                VTEMP2:   DS   2   ; 
0CFE                VLASTDEF:   DS   2   ; 
0D00                VHASHSTR:   DS   2   ; 
0D02                TBPTR:    DS   2   ; reserved for tests
0D04                          ALIGN   $100   
0E00                TIB:      DS   TIBSIZE   
0F00                          ALIGN   $100   
0F00                PAD:      DS   $100   
1000                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 56 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               08DB DEFINED AT LINE 1379 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1351 IN monty.asm
                    > USED AT LINE 1580 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 788 IN monty.asm
                    > USED AT LINE 795 IN monty.asm
                    > USED AT LINE 1390 IN monty.asm
                    > USED AT LINE 1431 IN monty.asm
                    > USED AT LINE 1455 IN monty.asm
                    > USED AT LINE 1458 IN monty.asm
                    > USED AT LINE 1611 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
BUF1M_537S20:       00D7 DEFINED AT LINE 10
                    > USED AT LINE 7
BUF2M_537S20:       00E3 DEFINED AT LINE 12
                    > USED AT LINE 9
TESTGETCHARIMPL:    00E6 DEFINED AT LINE 23
                    > USED AT LINE 17
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 53 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 846 IN monty.asm
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 851 IN monty.asm
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1647 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
DQUOTE:             0022 DEFINED AT LINE 27 IN monty.asm
                    > USED AT LINE 1190 IN monty.asm
                    > USED AT LINE 1477 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 29 IN monty.asm
MACROS:             0180 DEFINED AT LINE 61 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 66 IN monty.asm
                    > USED AT LINE 1535 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 74 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 76 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 110 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 213 IN monty.asm
PLUS_:              0300 DEFINED AT LINE 215 IN monty.asm
AT_:                0303 DEFINED AT LINE 217 IN monty.asm
AMPER_:             0306 DEFINED AT LINE 219 IN monty.asm
DOLLAR_:            0309 DEFINED AT LINE 221 IN monty.asm
LBRACK_:            030C DEFINED AT LINE 223 IN monty.asm
RBRACK_:            030F DEFINED AT LINE 225 IN monty.asm
PERCENT_:           0312 DEFINED AT LINE 227 IN monty.asm
BACKSLASH_:         0315 DEFINED AT LINE 229 IN monty.asm
LBRACE_:            0318 DEFINED AT LINE 231 IN monty.asm
RBRACE_:            031B DEFINED AT LINE 233 IN monty.asm
TICK_:              031E DEFINED AT LINE 235 IN monty.asm
SEMICOLON_:         0321 DEFINED AT LINE 237 IN monty.asm
DOT_:               0324 DEFINED AT LINE 239 IN monty.asm
UNDERSCORE_:        0327 DEFINED AT LINE 241 IN monty.asm
COLON_:             032A DEFINED AT LINE 243 IN monty.asm
UPCASE_:            032D DEFINED AT LINE 245 IN monty.asm
LOWCASE_:           0330 DEFINED AT LINE 247 IN monty.asm
QUESTION_:          0333 DEFINED AT LINE 249 IN monty.asm
STAR_:              0336 DEFINED AT LINE 251 IN monty.asm
BANG_:              0339 DEFINED AT LINE 253 IN monty.asm
NUM_:               033E DEFINED AT LINE 256 IN monty.asm
                    > USED AT LINE 1217 IN monty.asm
HASH_:              0341 DEFINED AT LINE 258 IN monty.asm
PIPE_:              0344 DEFINED AT LINE 260 IN monty.asm
CARET_:             0347 DEFINED AT LINE 262 IN monty.asm
COMMA_:             034A DEFINED AT LINE 264 IN monty.asm
DBLQUOTE_:          034D DEFINED AT LINE 266 IN monty.asm
MINUS_:             0350 DEFINED AT LINE 268 IN monty.asm
EQ_:                0353 DEFINED AT LINE 270 IN monty.asm
EQ0:                035D DEFINED AT LINE 277 IN monty.asm
                    > USED AT LINE 274 IN monty.asm
EQ1:                035E DEFINED AT LINE 279 IN monty.asm
                    > USED AT LINE 255 IN monty.asm
GT_:                0362 DEFINED AT LINE 283 IN monty.asm
LPAREN_:            036D DEFINED AT LINE 291 IN monty.asm
LT_:                0370 DEFINED AT LINE 293 IN monty.asm
LT1:                0379 DEFINED AT LINE 300 IN monty.asm
                    > USED AT LINE 290 IN monty.asm
SLASH_:             0382 DEFINED AT LINE 305 IN monty.asm
NOP_:               0385 DEFINED AT LINE 307 IN monty.asm
RPAREN_:            0387 DEFINED AT LINE 309 IN monty.asm
PLUS:               038A DEFINED AT LINE 316 IN monty.asm
                    > USED AT LINE 216 IN monty.asm
ADD:                038A DEFINED AT LINE 317 IN monty.asm
ADD1:               0395 DEFINED AT LINE 325 IN monty.asm
                    > USED AT LINE 321 IN monty.asm
ADD3:               0399 DEFINED AT LINE 330 IN monty.asm
                    > USED AT LINE 360 IN monty.asm
                    > USED AT LINE 769 IN monty.asm
                    > USED AT LINE 1064 IN monty.asm
                    > USED AT LINE 1231 IN monty.asm
AT:                 03A4 DEFINED AT LINE 341 IN monty.asm
                    > USED AT LINE 218 IN monty.asm
ADDR:               03A4 DEFINED AT LINE 342 IN monty.asm
AMPER:              03B0 DEFINED AT LINE 349 IN monty.asm
                    > USED AT LINE 220 IN monty.asm
AND:                03B0 DEFINED AT LINE 350 IN monty.asm
AND1:               03B7 DEFINED AT LINE 358 IN monty.asm
                    > USED AT LINE 371 IN monty.asm
PIPE:               03BB DEFINED AT LINE 362 IN monty.asm
                    > USED AT LINE 261 IN monty.asm
OR:                 03BB DEFINED AT LINE 363 IN monty.asm
XOR:                03C4 DEFINED AT LINE 373 IN monty.asm
                    > USED AT LINE 1264 IN monty.asm
XOR1:               03C5 DEFINED AT LINE 375 IN monty.asm
                    > USED AT LINE 387 IN monty.asm
INVERT:             03CF DEFINED AT LINE 385 IN monty.asm
                    > USED AT LINE 1262 IN monty.asm
DOLLAR:             03D4 DEFINED AT LINE 392 IN monty.asm
                    > USED AT LINE 222 IN monty.asm
ARG:                03D4 DEFINED AT LINE 393 IN monty.asm
ARG0:               03F2 DEFINED AT LINE 414 IN monty.asm
                    > USED AT LINE 420 IN monty.asm
ARG0A:              03FB DEFINED AT LINE 422 IN monty.asm
                    > USED AT LINE 399 IN monty.asm
                    > USED AT LINE 406 IN monty.asm
ARG1:               0400 DEFINED AT LINE 425 IN monty.asm
                    > USED AT LINE 418 IN monty.asm
ARG1A:              0408 DEFINED AT LINE 432 IN monty.asm
                    > USED AT LINE 424 IN monty.asm
LBRACK:             040B DEFINED AT LINE 436 IN monty.asm
                    > USED AT LINE 224 IN monty.asm
ARRBEGIN:           040B DEFINED AT LINE 437 IN monty.asm
RBRACK:             0427 DEFINED AT LINE 451 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
ARREND:             0427 DEFINED AT LINE 452 IN monty.asm
ARREND1:            0441 DEFINED AT LINE 468 IN monty.asm
                    > USED AT LINE 484 IN monty.asm
ARREND2:            0451 DEFINED AT LINE 478 IN monty.asm
                    > USED AT LINE 474 IN monty.asm
ARRINDEX:           0475 DEFINED AT LINE 505 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
ARRINDEX0:          047D DEFINED AT LINE 511 IN monty.asm
ARRINDEX1:          047E DEFINED AT LINE 513 IN monty.asm
                    > USED AT LINE 510 IN monty.asm
ARRINDEX2:          048A DEFINED AT LINE 522 IN monty.asm
                    > USED AT LINE 519 IN monty.asm
ASSIGN:             048D DEFINED AT LINE 527 IN monty.asm
                    > USED AT LINE 276 IN monty.asm
ASSIGN0:            048F DEFINED AT LINE 530 IN monty.asm
                    > USED AT LINE 324 IN monty.asm
                    > USED AT LINE 334 IN monty.asm
                    > USED AT LINE 1224 IN monty.asm
ASSIGNX:            0490 DEFINED AT LINE 532 IN monty.asm
ASSIGN1:            049C DEFINED AT LINE 540 IN monty.asm
                    > USED AT LINE 537 IN monty.asm
COLON:              049E DEFINED AT LINE 547 IN monty.asm
                    > USED AT LINE 244 IN monty.asm
ARGLIST:            049E DEFINED AT LINE 548 IN monty.asm
ARGLIST1:           04A8 DEFINED AT LINE 555 IN monty.asm
                    > USED AT LINE 576 IN monty.asm
ARGLIST1A:          04B0 DEFINED AT LINE 561 IN monty.asm
                    > USED AT LINE 558 IN monty.asm
ARGLIST2:           04B8 DEFINED AT LINE 566 IN monty.asm
ARGLIST3:           04C0 DEFINED AT LINE 574 IN monty.asm
                    > USED AT LINE 560 IN monty.asm
                    > USED AT LINE 572 IN monty.asm
ARGLIST4:           04C3 DEFINED AT LINE 577 IN monty.asm
                    > USED AT LINE 563 IN monty.asm
                    > USED AT LINE 565 IN monty.asm
ARGLIST5:           04C9 DEFINED AT LINE 583 IN monty.asm
                    > USED AT LINE 581 IN monty.asm
LBRACE:             04D5 DEFINED AT LINE 594 IN monty.asm
                    > USED AT LINE 232 IN monty.asm
BLOCK:              04D5 DEFINED AT LINE 595 IN monty.asm
                    > USED AT LINE 856 IN monty.asm
BLOCK1:             04D9 DEFINED AT LINE 599 IN monty.asm
                    > USED AT LINE 603 IN monty.asm
                    > USED AT LINE 625 IN monty.asm
                    > USED AT LINE 628 IN monty.asm
                    > USED AT LINE 633 IN monty.asm
                    > USED AT LINE 637 IN monty.asm
BLOCK2:             0505 DEFINED AT LINE 626 IN monty.asm
                    > USED AT LINE 613 IN monty.asm
                    > USED AT LINE 615 IN monty.asm
                    > USED AT LINE 617 IN monty.asm
BLOCK3:             0508 DEFINED AT LINE 629 IN monty.asm
                    > USED AT LINE 620 IN monty.asm
                    > USED AT LINE 622 IN monty.asm
                    > USED AT LINE 624 IN monty.asm
BLOCK4:             0510 DEFINED AT LINE 635 IN monty.asm
                    > USED AT LINE 606 IN monty.asm
                    > USED AT LINE 608 IN monty.asm
                    > USED AT LINE 610 IN monty.asm
BLOCK5:             0513 DEFINED AT LINE 638 IN monty.asm
                    > USED AT LINE 634 IN monty.asm
BLOCK6:             053B DEFINED AT LINE 657 IN monty.asm
                    > USED AT LINE 644 IN monty.asm
RBRACE:             053E DEFINED AT LINE 661 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
BLOCKEND:           053E DEFINED AT LINE 662 IN monty.asm
                    > USED AT LINE 1323 IN monty.asm
BLOCKEND1:          056A DEFINED AT LINE 684 IN monty.asm
                    > USED AT LINE 677 IN monty.asm
BLOCKEND2:          0576 DEFINED AT LINE 691 IN monty.asm
                    > USED AT LINE 683 IN monty.asm
BLOCKEND3:          0588 DEFINED AT LINE 705 IN monty.asm
                    > USED AT LINE 697 IN monty.asm
TICK:               0593 DEFINED AT LINE 716 IN monty.asm
                    > USED AT LINE 236 IN monty.asm
CHAR:               0593 DEFINED AT LINE 717 IN monty.asm
CHAR1:              0596 DEFINED AT LINE 719 IN monty.asm
                    > USED AT LINE 730 IN monty.asm
CHAR2:              05A2 DEFINED AT LINE 728 IN monty.asm
                    > USED AT LINE 725 IN monty.asm
CHAR3:              05A5 DEFINED AT LINE 731 IN monty.asm
                    > USED AT LINE 723 IN monty.asm
BACKSLASH:          05A8 DEFINED AT LINE 735 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
COMMA:              05AA DEFINED AT LINE 740 IN monty.asm
                    > USED AT LINE 265 IN monty.asm
DISCARD:            05AA DEFINED AT LINE 741 IN monty.asm
DISCARD1:           05B7 DEFINED AT LINE 750 IN monty.asm
                    > USED AT LINE 748 IN monty.asm
SLASH:              05B9 DEFINED AT LINE 753 IN monty.asm
                    > USED AT LINE 306 IN monty.asm
DOT:                05D7 DEFINED AT LINE 771 IN monty.asm
                    > USED AT LINE 240 IN monty.asm
DOT1:               05E3 DEFINED AT LINE 779 IN monty.asm
                    > USED AT LINE 776 IN monty.asm
DOT2:               05EC DEFINED AT LINE 784 IN monty.asm
                    > USED AT LINE 781 IN monty.asm
DOT3:               05F6 DEFINED AT LINE 790 IN monty.asm
                    > USED AT LINE 786 IN monty.asm
DOT4:               05FA DEFINED AT LINE 793 IN monty.asm
                    > USED AT LINE 778 IN monty.asm
                    > USED AT LINE 783 IN monty.asm
                    > USED AT LINE 789 IN monty.asm
DIVIDE:             0601 DEFINED AT LINE 801 IN monty.asm
                    > USED AT LINE 765 IN monty.asm
DIVIDE1:            0606 DEFINED AT LINE 804 IN monty.asm
                    > USED AT LINE 816 IN monty.asm
DIVIDE2:            0613 DEFINED AT LINE 812 IN monty.asm
                    > USED AT LINE 809 IN monty.asm
DIVIDE3:            0614 DEFINED AT LINE 814 IN monty.asm
                    > USED AT LINE 811 IN monty.asm
EQUALS:             061A DEFINED AT LINE 822 IN monty.asm
                    > USED AT LINE 281 IN monty.asm
LESSTHANEQ:         0622 DEFINED AT LINE 830 IN monty.asm
                    > USED AT LINE 302 IN monty.asm
LESSTHAN:           0627 DEFINED AT LINE 837 IN monty.asm
                    > USED AT LINE 304 IN monty.asm
LESSTHAN1:          062C DEFINED AT LINE 842 IN monty.asm
                    > USED AT LINE 833 IN monty.asm
TRUE1:              062F DEFINED AT LINE 845 IN monty.asm
                    > USED AT LINE 825 IN monty.asm
                    > USED AT LINE 1260 IN monty.asm
NULL1:              0635 DEFINED AT LINE 849 IN monty.asm
FALSE1:             0635 DEFINED AT LINE 850 IN monty.asm
                    > USED AT LINE 826 IN monty.asm
                    > USED AT LINE 840 IN monty.asm
                    > USED AT LINE 843 IN monty.asm
                    > USED AT LINE 1248 IN monty.asm
LPAREN:             063B DEFINED AT LINE 855 IN monty.asm
                    > USED AT LINE 292 IN monty.asm
CARET:              063E DEFINED AT LINE 861 IN monty.asm
                    > USED AT LINE 263 IN monty.asm
GO:                 063E DEFINED AT LINE 862 IN monty.asm
GO1:                063F DEFINED AT LINE 864 IN monty.asm
                    > USED AT LINE 1040 IN monty.asm
                    > USED AT LINE 1042 IN monty.asm
GO2:                0645 DEFINED AT LINE 869 IN monty.asm
                    > USED AT LINE 867 IN monty.asm
GOBLOCK:            0651 DEFINED AT LINE 877 IN monty.asm
GOBLOCK1:           0651 DEFINED AT LINE 878 IN monty.asm
                    > USED AT LINE 872 IN monty.asm
GOBLOCK2:           0676 DEFINED AT LINE 895 IN monty.asm
                    > USED AT LINE 977 IN monty.asm
GOFUNC:             0684 DEFINED AT LINE 904 IN monty.asm
                    > USED AT LINE 874 IN monty.asm
GOFUNC1:            069D DEFINED AT LINE 923 IN monty.asm
                    > USED AT LINE 933 IN monty.asm
GOFUNC2:            06A3 DEFINED AT LINE 930 IN monty.asm
                    > USED AT LINE 922 IN monty.asm
GOFUNC3:            06AE DEFINED AT LINE 936 IN monty.asm
                    > USED AT LINE 912 IN monty.asm
GOFUNC4:            06C6 DEFINED AT LINE 953 IN monty.asm
                    > USED AT LINE 950 IN monty.asm
GOFUNC5:            06CA DEFINED AT LINE 957 IN monty.asm
                    > USED AT LINE 963 IN monty.asm
GOFUNC6:            06CD DEFINED AT LINE 961 IN monty.asm
                    > USED AT LINE 956 IN monty.asm
GOFUNC7:            06D0 DEFINED AT LINE 964 IN monty.asm
GOFUNC8:            06D5 DEFINED AT LINE 970 IN monty.asm
                    > USED AT LINE 889 IN monty.asm
                    > USED AT LINE 952 IN monty.asm
HASH:               06E0 DEFINED AT LINE 979 IN monty.asm
                    > USED AT LINE 259 IN monty.asm
HEXNUM:             06E0 DEFINED AT LINE 980 IN monty.asm
HEXNUM1:            06E3 DEFINED AT LINE 982 IN monty.asm
                    > USED AT LINE 999 IN monty.asm
HEXNUM2:            06EB DEFINED AT LINE 988 IN monty.asm
                    > USED AT LINE 986 IN monty.asm
UPCASE:             06FD DEFINED AT LINE 1000 IN monty.asm
                    > USED AT LINE 246 IN monty.asm
LOWCASE:            0702 DEFINED AT LINE 1004 IN monty.asm
                    > USED AT LINE 248 IN monty.asm
IDENT1:             0707 DEFINED AT LINE 1008 IN monty.asm
                    > USED AT LINE 1003 IN monty.asm
QUESTION:           0714 DEFINED AT LINE 1021 IN monty.asm
                    > USED AT LINE 250 IN monty.asm
IF:                 0714 DEFINED AT LINE 1022 IN monty.asm
IFTE:               0720 DEFINED AT LINE 1032 IN monty.asm
                    > USED AT LINE 1026 IN monty.asm
IFTE1:              0721 DEFINED AT LINE 1034 IN monty.asm
                    > USED AT LINE 1029 IN monty.asm
STAR:               072D DEFINED AT LINE 1044 IN monty.asm
                    > USED AT LINE 252 IN monty.asm
MUL:                072D DEFINED AT LINE 1045 IN monty.asm
MUL2:               072F DEFINED AT LINE 1048 IN monty.asm
MUL3:               0737 DEFINED AT LINE 1053 IN monty.asm
                    > USED AT LINE 1062 IN monty.asm
NUM:                0749 DEFINED AT LINE 1066 IN monty.asm
                    > USED AT LINE 257 IN monty.asm
NUM0:               0752 DEFINED AT LINE 1072 IN monty.asm
                    > USED AT LINE 1070 IN monty.asm
NUM1:               0753 DEFINED AT LINE 1074 IN monty.asm
                    > USED AT LINE 1091 IN monty.asm
NUM2:               076B DEFINED AT LINE 1092 IN monty.asm
                    > USED AT LINE 990 IN monty.asm
                    > USED AT LINE 992 IN monty.asm
                    > USED AT LINE 1077 IN monty.asm
                    > USED AT LINE 1079 IN monty.asm
NUM3:               0776 DEFINED AT LINE 1100 IN monty.asm
                    > USED AT LINE 1095 IN monty.asm
UNDERSCORE:         0779 DEFINED AT LINE 1104 IN monty.asm
                    > USED AT LINE 242 IN monty.asm
REMAIN:             0779 DEFINED AT LINE 1105 IN monty.asm
RPAREN:             077F DEFINED AT LINE 1110 IN monty.asm
                    > USED AT LINE 310 IN monty.asm
SEMICOLON:          0787 DEFINED AT LINE 1116 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
SHIFTLEFT:          07A3 DEFINED AT LINE 1140 IN monty.asm
                    > USED AT LINE 297 IN monty.asm
SHIFTLEFT1:         07AB DEFINED AT LINE 1147 IN monty.asm
                    > USED AT LINE 1150 IN monty.asm
SHIFTLEFT2:         07AC DEFINED AT LINE 1149 IN monty.asm
                    > USED AT LINE 1146 IN monty.asm
SHIFTRIGHT:         07B3 DEFINED AT LINE 1157 IN monty.asm
                    > USED AT LINE 287 IN monty.asm
SHIFTRIGHT1:        07BB DEFINED AT LINE 1164 IN monty.asm
                    > USED AT LINE 1168 IN monty.asm
SHIFTRIGHT2:        07BF DEFINED AT LINE 1167 IN monty.asm
                    > USED AT LINE 1163 IN monty.asm
DBLQUOTE:           07C6 DEFINED AT LINE 1176 IN monty.asm
                    > USED AT LINE 267 IN monty.asm
STRING:             07C6 DEFINED AT LINE 1177 IN monty.asm
STRING1:            07CF DEFINED AT LINE 1184 IN monty.asm
                    > USED AT LINE 1191 IN monty.asm
                    > USED AT LINE 1193 IN monty.asm
STRING2:            07D2 DEFINED AT LINE 1188 IN monty.asm
                    > USED AT LINE 1183 IN monty.asm
MINUS:              07EE DEFINED AT LINE 1210 IN monty.asm
                    > USED AT LINE 269 IN monty.asm
SUB:                07FA DEFINED AT LINE 1218 IN monty.asm
                    > USED AT LINE 1215 IN monty.asm
SUB1:               0804 DEFINED AT LINE 1225 IN monty.asm
                    > USED AT LINE 1221 IN monty.asm
COMMAND:            080D DEFINED AT LINE 1238 IN monty.asm
                    > USED AT LINE 759 IN monty.asm
ERROR1:             084E DEFINED AT LINE 1265 IN monty.asm
ABS1:               0854 DEFINED AT LINE 1269 IN monty.asm
                    > USED AT LINE 1240 IN monty.asm
PARTIAL:            0861 DEFINED AT LINE 1284 IN monty.asm
                    > USED AT LINE 1246 IN monty.asm
COMMENT:            0881 DEFINED AT LINE 1300 IN monty.asm
                    > USED AT LINE 757 IN monty.asm
                    > USED AT LINE 1304 IN monty.asm
BREAK:              088A DEFINED AT LINE 1308 IN monty.asm
                    > USED AT LINE 1242 IN monty.asm
BREAK1:             0891 DEFINED AT LINE 1314 IN monty.asm
                    > USED AT LINE 1312 IN monty.asm
CHARS:              08A4 DEFINED AT LINE 1325 IN monty.asm
                    > USED AT LINE 1244 IN monty.asm
CHARS1:             08A7 DEFINED AT LINE 1327 IN monty.asm
                    > USED AT LINE 1370 IN monty.asm
HEAPPTR:            08AC DEFINED AT LINE 1331 IN monty.asm
                    > USED AT LINE 1250 IN monty.asm
INPUT:              08B8 DEFINED AT LINE 1340 IN monty.asm
                    > USED AT LINE 1252 IN monty.asm
KEY:                08C3 DEFINED AT LINE 1350 IN monty.asm
                    > USED AT LINE 1254 IN monty.asm
OUTPUT:             08CC DEFINED AT LINE 1359 IN monty.asm
                    > USED AT LINE 1258 IN monty.asm
NUMBERS:            08D5 DEFINED AT LINE 1368 IN monty.asm
                    > USED AT LINE 1256 IN monty.asm
FILTER:             08DB DEFINED AT LINE 1377 IN monty.asm
MAP:                08DB DEFINED AT LINE 1378 IN monty.asm
PRTDEC:             08DD DEFINED AT LINE 1386 IN monty.asm
                    > USED AT LINE 792 IN monty.asm
                    > USED AT LINE 1657 IN monty.asm
PRTDEC0:            08EC DEFINED AT LINE 1397 IN monty.asm
                    > USED AT LINE 1388 IN monty.asm
PRTDEC1:            090E DEFINED AT LINE 1413 IN monty.asm
                    > USED AT LINE 1401 IN monty.asm
                    > USED AT LINE 1403 IN monty.asm
                    > USED AT LINE 1405 IN monty.asm
                    > USED AT LINE 1407 IN monty.asm
                    > USED AT LINE 1410 IN monty.asm
PRTDEC2:            0910 DEFINED AT LINE 1415 IN monty.asm
                    > USED AT LINE 1418 IN monty.asm
PRTDEC3:            0920 DEFINED AT LINE 1427 IN monty.asm
                    > USED AT LINE 1422 IN monty.asm
PRTDEC4:            0921 DEFINED AT LINE 1429 IN monty.asm
                    > USED AT LINE 1426 IN monty.asm
PRTHEX:             0925 DEFINED AT LINE 1433 IN monty.asm
                    > USED AT LINE 777 IN monty.asm
PRTHEX2:            0930 DEFINED AT LINE 1441 IN monty.asm
                    > USED AT LINE 1436 IN monty.asm
                    > USED AT LINE 1438 IN monty.asm
PRTHEX3:            0939 DEFINED AT LINE 1449 IN monty.asm
                    > USED AT LINE 1447 IN monty.asm
PRTSTR0:            0944 DEFINED AT LINE 1457 IN monty.asm
                    > USED AT LINE 1463 IN monty.asm
PRTSTR:             0948 DEFINED AT LINE 1460 IN monty.asm
                    > USED AT LINE 782 IN monty.asm
                    > USED AT LINE 1527 IN monty.asm
NESTING:            094D DEFINED AT LINE 1476 IN monty.asm
                    > USED AT LINE 1571 IN monty.asm
                    > USED AT LINE 1612 IN monty.asm
NESTING0:           0957 DEFINED AT LINE 1482 IN monty.asm
                    > USED AT LINE 1478 IN monty.asm
                    > USED AT LINE 1480 IN monty.asm
NESTING1A:          095E DEFINED AT LINE 1487 IN monty.asm
                    > USED AT LINE 1484 IN monty.asm
NESTING1:           0961 DEFINED AT LINE 1490 IN monty.asm
                    > USED AT LINE 1481 IN monty.asm
NESTING2:           0970 DEFINED AT LINE 1499 IN monty.asm
                    > USED AT LINE 1494 IN monty.asm
                    > USED AT LINE 1496 IN monty.asm
NESTING3:           0972 DEFINED AT LINE 1502 IN monty.asm
                    > USED AT LINE 1498 IN monty.asm
NESTING4:           097D DEFINED AT LINE 1509 IN monty.asm
                    > USED AT LINE 1504 IN monty.asm
                    > USED AT LINE 1506 IN monty.asm
PROMPT:             097F DEFINED AT LINE 1513 IN monty.asm
                    > USED AT LINE 1555 IN monty.asm
CRLF:               0988 DEFINED AT LINE 1518 IN monty.asm
                    > USED AT LINE 1624 IN monty.asm
PRINTSTR:           098F DEFINED AT LINE 1525 IN monty.asm
                    > USED AT LINE 1514 IN monty.asm
                    > USED AT LINE 1519 IN monty.asm
                    > USED AT LINE 1551 IN monty.asm
                    > USED AT LINE 1655 IN monty.asm
INIT:               0996 DEFINED AT LINE 1532 IN monty.asm
                    > USED AT LINE 16
                    > USED AT LINE 1550 IN monty.asm
INIT0:              09AF DEFINED AT LINE 1542 IN monty.asm
                    > USED AT LINE 1545 IN monty.asm
START:              09B4 DEFINED AT LINE 1548 IN monty.asm
INTERPRET:          09CA DEFINED AT LINE 1554 IN monty.asm
                    > USED AT LINE 21
                    > USED AT LINE 1649 IN monty.asm
                    > USED AT LINE 1658 IN monty.asm
INTERPRET2:         09D4 DEFINED AT LINE 1560 IN monty.asm
                    > USED AT LINE 1604 IN monty.asm
INTERPRET3:         09DC DEFINED AT LINE 1567 IN monty.asm
                    > USED AT LINE 1576 IN monty.asm
INTERPRET4:         09E2 DEFINED AT LINE 1573 IN monty.asm
                    > USED AT LINE 1565 IN monty.asm
INTERPRET5:         09E7 DEFINED AT LINE 1579 IN monty.asm
                    > USED AT LINE 1613 IN monty.asm
                    > USED AT LINE 1627 IN monty.asm
INTERPRET6:         09F8 DEFINED AT LINE 1606 IN monty.asm
                    > USED AT LINE 1582 IN monty.asm
INTERPRET7:         0A06 DEFINED AT LINE 1615 IN monty.asm
                    > USED AT LINE 1587 IN monty.asm
INTERPRET8:         0A19 DEFINED AT LINE 1629 IN monty.asm
                    > USED AT LINE 1585 IN monty.asm
NEXT:               0A21 DEFINED AT LINE 1635 IN monty.asm
                    > USED AT LINE 69 IN monty.asm
                    > USED AT LINE 1639 IN monty.asm
NEXT1:              0A30 DEFINED AT LINE 1646 IN monty.asm
                    > USED AT LINE 1640 IN monty.asm
EXIT_:              0A37 DEFINED AT LINE 1650 IN monty.asm
                    > USED AT LINE 1648 IN monty.asm
ERROR:              0A3A DEFINED AT LINE 1654 IN monty.asm
                    > USED AT LINE 1267 IN monty.asm
STACK:              0B80 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 15
                    > USED AT LINE 880 IN monty.asm
                    > USED AT LINE 1534 IN monty.asm
                    > USED AT LINE 1549 IN monty.asm
VARS:               0C00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1539 IN monty.asm
RESTARTS:           0CD0 DEFINED AT LINE 11 IN ram.asm
RST08:              0CD0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              0CD2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              0CD4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              0CD6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              0CD8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              0CDA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               0CDC DEFINED AT LINE 19 IN ram.asm
INTVEC:             0CDE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             0CE0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            0CE2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
                    > USED AT LINE 18
PUTCVEC:            0CE4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            0CE6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1536 IN monty.asm
VDATAWIDTH:         0CE6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 472 IN monty.asm
                    > USED AT LINE 508 IN monty.asm
                    > USED AT LINE 535 IN monty.asm
                    > USED AT LINE 1328 IN monty.asm
VTIBPTR:            0CE8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1558 IN monty.asm
                    > USED AT LINE 1630 IN monty.asm
VNEXT:              0CEA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1533 IN monty.asm
VHEAPPTR:           0CEC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 462 IN monty.asm
                    > USED AT LINE 494 IN monty.asm
                    > USED AT LINE 495 IN monty.asm
                    > USED AT LINE 550 IN monty.asm
                    > USED AT LINE 585 IN monty.asm
                    > USED AT LINE 652 IN monty.asm
                    > USED AT LINE 655 IN monty.asm
                    > USED AT LINE 1118 IN monty.asm
                    > USED AT LINE 1133 IN monty.asm
                    > USED AT LINE 1135 IN monty.asm
                    > USED AT LINE 1178 IN monty.asm
                    > USED AT LINE 1197 IN monty.asm
                    > USED AT LINE 1286 IN monty.asm
                    > USED AT LINE 1291 IN monty.asm
                    > USED AT LINE 1292 IN monty.asm
                    > USED AT LINE 1332 IN monty.asm
                    > USED AT LINE 1334 IN monty.asm
VPOINTER:           0CEE DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 343 IN monty.asm
                    > USED AT LINE 345 IN monty.asm
                    > USED AT LINE 346 IN monty.asm
                    > USED AT LINE 428 IN monty.asm
                    > USED AT LINE 515 IN monty.asm
                    > USED AT LINE 533 IN monty.asm
                    > USED AT LINE 1012 IN monty.asm
                    > USED AT LINE 1335 IN monty.asm
VREMAIN:            0CF0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 767 IN monty.asm
                    > USED AT LINE 1106 IN monty.asm
VSAVEDIP:           0CF2 DEFINED AT LINE 39 IN ram.asm
VSAVEDSP:           0CF4 DEFINED AT LINE 40 IN ram.asm
VSAVEDBP:           0CF6 DEFINED AT LINE 41 IN ram.asm
VCHECKSUM:          0CF8 DEFINED AT LINE 42 IN ram.asm
VTEMP1:             0CFA DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 455 IN monty.asm
                    > USED AT LINE 496 IN monty.asm
                    > USED AT LINE 647 IN monty.asm
                    > USED AT LINE 656 IN monty.asm
                    > USED AT LINE 879 IN monty.asm
                    > USED AT LINE 885 IN monty.asm
                    > USED AT LINE 913 IN monty.asm
                    > USED AT LINE 934 IN monty.asm
                    > USED AT LINE 941 IN monty.asm
                    > USED AT LINE 947 IN monty.asm
                    > USED AT LINE 1287 IN monty.asm
                    > USED AT LINE 1290 IN monty.asm
VTEMP2:             0CFC DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 914 IN monty.asm
                    > USED AT LINE 935 IN monty.asm
VLASTDEF:           0CFE DEFINED AT LINE 48 IN ram.asm
VHASHSTR:           0D00 DEFINED AT LINE 49 IN ram.asm
TBPTR:              0D02 DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 8
                    > USED AT LINE 25
                    > USED AT LINE 28
TIB:                0E00 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 1564 IN monty.asm
                    > USED AT LINE 1607 IN monty.asm
                    > USED AT LINE 1616 IN monty.asm
                    > USED AT LINE 1631 IN monty.asm
PAD:                0F00 DEFINED AT LINE 56 IN ram.asm
HEAP:               1000 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 70 IN monty.asm
                    > USED AT LINE 640 IN monty.asm
