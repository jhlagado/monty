0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 D5 0F               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQ:       EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of Monty code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num_locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
00C9                .macro PERFORM,name
00C9                             ; 
00C9                 ld ix,perform%%M
00C9                 jp name
00C9                perform%%M:
00C9                .endm
00C9                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   25                     DB   lsb(bang_)   ; !     1
0181   0D                     DB   lsb(dquote_)   ; "     2
0182   62                     DB   lsb(hash_)   ; #     1
0183   0A                     DB   lsb(dollar_)   ; $     1
0184   13                     DB   lsb(percent_)   ; %     1
0185   82                     DB   lsb(amper_)   ; &     1
0186   0D                     DB   lsb(quote_)   ; '     2
0187   19                     DB   lsb(lparen_)   ; (     1
0188   7A                     DB   lsb(rparen_)   ; )     1
0189   B4                     DB   lsb(star_)   ; *     1
018A   D8                     DB   lsb(plus_)   ; +     1
018B   07                     DB   lsb(comma_)   ; ,     2
018C   8C                     DB   lsb(minus_)   ; -     1
018D   10                     DB   lsb(dot_)   ; .     2
018E   1C                     DB   lsb(slash_)   ; /	    1
018F   1F                     DB   lsb(num_)   ; 0     1
0190   1F                     DB   lsb(num_)   ; 1
0191   1F                     DB   lsb(num_)   ; 2
0192   1F                     DB   lsb(num_)   ; 3
0193   1F                     DB   lsb(num_)   ; 4
0194   1F                     DB   lsb(num_)   ; 5
0195   1F                     DB   lsb(num_)   ; 6
0196   1F                     DB   lsb(num_)   ; 7
0197   1F                     DB   lsb(num_)   ; 8
0198   1F                     DB   lsb(num_)   ; 9
0199   04                     DB   lsb(colon_)   ; :     2
019A   22                     DB   lsb(semicolon_)   ; ;     2
019B   50                     DB   lsb(lt_)   ; <     1
019C   36                     DB   lsb(eq_)   ; =     1
019D   45                     DB   lsb(gt_)   ; >     1
019E   16                     DB   lsb(question_)   ; ?     1
019F   E9                     DB   lsb(at_)   ; @     2
01A0   F4                     DB   lsb(upcase_)   ; A     1
01A1   F4                     DB   lsb(upcase_)   ; B
01A2   F4                     DB   lsb(upcase_)   ; C
01A3   F4                     DB   lsb(upcase_)   ; D
01A4   F4                     DB   lsb(upcase_)   ; E
01A5   F4                     DB   lsb(upcase_)   ; F
01A6   F4                     DB   lsb(upcase_)   ; G
01A7   F4                     DB   lsb(upcase_)   ; h
01A8   F4                     DB   lsb(upcase_)   ; I
01A9   F4                     DB   lsb(upcase_)   ; J
01AA   F4                     DB   lsb(upcase_)   ; K
01AB   F4                     DB   lsb(upcase_)   ; L
01AC   F4                     DB   lsb(upcase_)   ; M
01AD   F4                     DB   lsb(upcase_)   ; N
01AE   F4                     DB   lsb(upcase_)   ; O
01AF   F4                     DB   lsb(upcase_)   ; p
01B0   F4                     DB   lsb(upcase_)   ; Q
01B1   F4                     DB   lsb(upcase_)   ; R
01B2   F4                     DB   lsb(upcase_)   ; S
01B3   F4                     DB   lsb(upcase_)   ; T
01B4   F4                     DB   lsb(upcase_)   ; U
01B5   F4                     DB   lsb(upcase_)   ; V
01B6   F4                     DB   lsb(upcase_)   ; W
01B7   F4                     DB   lsb(upcase_)   ; X
01B8   F4                     DB   lsb(upcase_)   ; Y
01B9   F4                     DB   lsb(upcase_)   ; Z
01BA   12                     DB   lsb(lbrack_)   ; [     2
01BB   2E                     DB   lsb(backslash_)   ; \     2
01BC   4F                     DB   lsb(rbrack_)   ; ]     2
01BD   9F                     DB   lsb(caret_)   ; ^     1
01BE   E1                     DB   lsb(underscore_)   ; _     2
01BF   B5                     DB   lsb(grave_)   ; `     2   	
01C0   00                     DB   lsb(lowcase_)   ; a     1
01C1   00                     DB   lsb(lowcase_)   ; b
01C2   00                     DB   lsb(lowcase_)   ; c
01C3   00                     DB   lsb(lowcase_)   ; d
01C4   00                     DB   lsb(lowcase_)   ; e
01C5   00                     DB   lsb(lowcase_)   ; f
01C6   00                     DB   lsb(lowcase_)   ; g
01C7   00                     DB   lsb(lowcase_)   ; h
01C8   00                     DB   lsb(lowcase_)   ; i
01C9   00                     DB   lsb(lowcase_)   ; j
01CA   00                     DB   lsb(lowcase_)   ; k
01CB   00                     DB   lsb(lowcase_)   ; l
01CC   00                     DB   lsb(lowcase_)   ; m
01CD   00                     DB   lsb(lowcase_)   ; n
01CE   00                     DB   lsb(lowcase_)   ; o
01CF   00                     DB   lsb(lowcase_)   ; p
01D0   00                     DB   lsb(lowcase_)   ; q
01D1   00                     DB   lsb(lowcase_)   ; r
01D2   00                     DB   lsb(lowcase_)   ; s
01D3   00                     DB   lsb(lowcase_)   ; t
01D4   00                     DB   lsb(lowcase_)   ; u
01D5   00                     DB   lsb(lowcase_)   ; v
01D6   00                     DB   lsb(lowcase_)   ; w
01D7   00                     DB   lsb(lowcase_)   ; x
01D8   00                     DB   lsb(lowcase_)   ; y
01D9   00                     DB   lsb(lowcase_)   ; z
01DA   CB                     DB   lsb(lbrace_)   ; {     1
01DB   D0                     DB   lsb(pipe_)   ; |     1
01DC   DB                     DB   lsb(rbrace_)   ; }     1
01DD   DE                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
01E0   00 22                  DW   BUFFER   ; vBufPtr pointer into BUF
01E2   57 10                  DW   next   ; nNext
01E4   23 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
01E6   00 00                  DW   0   ; 
01E8   00 00                  DW   0   ; vRecur
01EA   02                     DB   2   ; vDataWidth in bytes of array operations (default 1 byte)
01EB   0A                     DB   10   ; vNumBase = 10
01EC   00                     DB   0   ; vStrMode
01ED   24                     DB   "$"   ; vHexPrefix
01EE   00                     DB   0   
01EF   00                     DB   0   
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                COLON_:      
0204   C3 00 0B               JP   colon   
0207                COMMA_:      
0207   C3 8D 0A               JP   comma   
020A                DOLLAR_:      
020A   C3 1A 0B               JP   dollar   
020D                DQUOTE_:      
020D                QUOTE_:      
020D   C3 44 0B               JP   quote   
0210                DOT_:        
0210   C3 00 04               JP   dot   
0213                PERCENT_:      
0213   C3 5E 0B               JP   percent   
0216                QUESTION_:      
0216   C3 37 0B               JP   question   
0219                LPAREN_:      
0219   C3 CB 03               JP   lbrace   
021C                SLASH_:      
021C   C3 00 05               JP   slash   
021F                NUM_:        
021F   C3 93 0B               JP   num   
0222                SEMICOLON_:      
0222   C3 0E 0B               JP   semicolon   
0225                BANG_:       
0225                BANG:        ; logical invert, any non zero value
0225   03                     INC   bc   
0226   0A                     LD   a,(bc)   
0227   FE 3D                  CP   "="   
0229   20 05                  JR   nz,not   
022B   E1                     POP   hl   
022C   D1                     POP   de   
022D   C3 D5 0C               JP   notequals   
0230                NOT:         
0230   0B                     DEC   bc   
0231   21 00 00               LD   hl,0   ; is considered true
0234   18 0B                  JR   eq1   
0236                EQ_:         
0236                EQ:          
0236   03                     INC   bc   
0237   0A                     LD   a,(bc)   
0238   FE 3D                  CP   "="   
023A   28 04                  JR   z,eq0   
023C   0B                     DEC   bc   
023D   C3 BD 0C               JP   assign   
0240                EQ0:         
0240   E1                     POP   hl   
0241                EQ1:         
0241   D1                     POP   de   
0242   C3 CE 0C               JP   equals   
0245                GT_:         
0245                GT:          
0245   03                     INC   bc   
0246   0A                     LD   a,(bc)   
0247   FE 3E                  CP   ">"   
0249   CA 35 0D               JP   z,shiftRight   
024C   D1                     POP   de   
024D   E1                     POP   hl   
024E   18 09                  JR   lt1   
0250                LT_:         
0250                LT:          
0250   03                     INC   bc   
0251   0A                     LD   a,(bc)   
0252   FE 3C                  CP   "<"   
0254   CA 19 0D               JP   z,shiftLeft   
0257   E1                     POP   hl   
0258   D1                     POP   de   
0259                LT1:         
0259   FE 3D                  CP   "="   
025B   CA DC 0C               JP   z,lessthaneq   
025E   0B                     DEC   bc   
025F   C3 E1 0C               JP   lessthan   
0262                             ; index of an array, based on vDataWidth 22
0262                             ; array* num -- value    ; also sets vPointer to address
0262                HASH_:       
0262                HASH:        
0262                ARRAYINDEX:      
0262   E1                     POP   hl   ; hl = index
0263   D1                     POP   de   ; de = array
0264   3A F2 23               LD   a,(vDataWidth)   ; a = data width
0267   3D                     DEC   a   
0268   28 01                  JR   z,arrayIndex1   
026A                ARRAYINDEX0:      
026A   29                     ADD   hl,hl   ; if data width = 2 then double
026B                ARRAYINDEX1:      
026B   19                     ADD   hl,de   ; add addr
026C   22 F9 23               LD   (vPointer),hl   ; store address in setter
026F   16 00                  LD   d,0   
0271   5E                     LD   e,(hl)   
0272   B7                     OR   a   ; check data width again
0273   28 02                  JR   z,arrayIndex2   
0275   23                     INC   hl   
0276   56                     LD   d,(hl)   
0277                ARRAYINDEX2:      
0277   D5                     PUSH   de   
0278   DD E9                  JP   (ix)   
027A                             ;                               4
027A                RPAREN_:      
027A                             ; jp rparen
027A                RPAREN:      
027A   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
027D   FD 46 09               LD   b,(iy+9)   
0280   DD E9                  JP   (ix)   
0282                             ; & and                          14
0282                             ; a b -- c
0282                AMPER_:      
0282                AMPER:       
0282                AND:         
0282   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0283   E1                     POP   hl   
0284   7B                     LD   a,e   
0285   A5                     AND   l   
0286   6F                     LD   l,a   
0287   7A                     LD   a,d   
0288   A4                     AND   h   
0289   67                     LD   h,a   
028A   18 5B                  JR   add3   
028C                             ; - sub
028C                             ; a b -- c
028C                             ; -- sub
028C                             ; b1 -- b2
028C                             ; -= sub
028C                             ; a b1 -- b2
028C                MINUS_:      
028C                MINUS:       
028C   03                     INC   bc   ; check if sign of a number
028D   0A                     LD   a,(bc)   
028E   0B                     DEC   bc   
028F   FE 30                  CP   "0"   
0291   38 05                  JR   c,sub   
0293   FE 3A                  CP   "9"+1   
0295   DA 93 0B               JP   c,num   
0298                SUB:         ; Subtract the value 2nd on stack from top of stack
0298   E1                     POP   hl   ; hl = arg_b
0299   03                     INC   bc   
029A   FE 2D                  CP   "-"   
029C   20 04                  JR   nz,sub1   
029E   2B                     DEC   hl   ; --
029F   C3 BF 0C               JP   assign0   
02A2                SUB1:        
02A2   D1                     POP   de   ; de = arg_a
02A3   FE 3D                  CP   "="   
02A5   28 02                  JR   z,sub2   
02A7   0B                     DEC   bc   ; -
02A8   EB                     EX   de,hl   
02A9                SUB2:        
02A9   B7                     OR   a   ; -=
02AA   ED 52                  SBC   hl,de   
02AC                SUB3:        
02AC   FE 3D                  CP   "="   
02AE   CA BF 0C               JP   z,assign0   
02B1   E5                     PUSH   hl   
02B2   DD E9                  JP   (ix)   
02B4                STAR_:       ; 21
02B4                STAR:        
02B4   03                     INC   bc   ; check for ** spread
02B5   0A                     LD   a,(bc)   
02B6   FE 2A                  CP   "*"   
02B8   CA F5 0C               JP   z,spread   
02BB   0B                     DEC   bc   
02BC                MUL:         
02BC   D1                     POP   de   ; get first value
02BD   E1                     POP   hl   
02BE                MUL2:        
02BE   C5                     PUSH   bc   ; Preserve the IP
02BF   44 4D                  LD   bc,hl   ; bc = 2nd value
02C1   21 00 00               LD   hl,0   
02C4   3E 10                  LD   a,16   
02C6                MUL3:        
02C6   29                     ADD   hl,hl   
02C7   CB 13                  RL   e   
02C9   CB 12                  RL   d   
02CB   30 04                  JR   nc,$+6   
02CD   09                     ADD   hl,bc   
02CE   30 01                  JR   nc,$+3   
02D0   13                     INC   de   
02D1   3D                     DEC   a   
02D2   20 F2                  JR   nz,mul3   
02D4   C1                     POP   bc   ; Restore the IP
02D5   C3 E7 02               JP   add3   
02D8                             ; + add                         25
02D8                             ; a b -- c
02D8                PLUS_:       
02D8                PLUS:        
02D8                ADD:         
02D8   03                     INC   bc   
02D9   0A                     LD   a,(bc)   
02DA   FE 2B                  CP   "+"   ; ++ increment variable
02DC   20 05                  JR   nz,add1   
02DE   E1                     POP   hl   
02DF   23                     INC   hl   
02E0   C3 BF 0C               JP   assign0   
02E3                ADD1:        
02E3   0B                     DEC   bc   
02E4   D1                     POP   de   ; second term
02E5   E1                     POP   hl   ; first term
02E6   19                     ADD   hl,de   
02E7                ADD3:        
02E7   03                     INC   bc   
02E8   0A                     LD   a,(bc)   
02E9   FE 3D                  CP   "="   
02EB   28 04                  JR   z,add4   
02ED   0B                     DEC   bc   
02EE   E5                     PUSH   hl   
02EF   DD E9                  JP   (ix)   
02F1                ADD4:        
02F1   C3 BF 0C               JP   assign0   
02F4                             ;                               18
02F4                UPCASE_:      
02F4                UPCASE:      
02F4   0A                     LD   a,(bc)   ; a = identifier char
02F5   D6 41                  SUB   "A"   ; "A" = 0
02F7   18 0C                  JR   ident1   
02F9                             ;********************** PAGE 2 END *********************************************
02F9                          ALIGN   $100   
0300                             ;********************** PAGE 3 BEGIN *********************************************
0300                LOWCASE_:      
0300                LOWCASE:      
0300   0A                     LD   a,(bc)   
0301   D6 61                  SUB   "a"   
0303   C6 1A                  ADD   a,26   
0305                IDENT1:      
0305   87                     ADD   a,a   ; l = a * 2
0306   6F                     LD   l,a   
0307   26 23                  LD   h,msb(VARS)   
0309   22 F9 23               LD   (vPointer),hl   ; store address in setter
030C   5E                     LD   e,(hl)   
030D   23                     INC   hl   
030E   56                     LD   d,(hl)   
030F   D5                     PUSH   de   
0310   DD E9                  JP   (ix)   
0312                             ; [                             14
0312                LBRACK_:      
0312                LBRACK:      
0312                ARRAYSTART:      
0312   11 00 00               LD   de,0   ; create stack frame
0315   D5                     PUSH   de   ; push null for IP
0316   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0319   FD 56 05               LD   d,(iy+5)   ; 
031C   D5                     PUSH   de   ; 
031D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0320   FD 56 03               LD   d,(iy+3)   ; 
0323   D5                     PUSH   de   ; 
0324   FD E5                  PUSH   iy   ; push BP
0326   FD 21 00 00            LD   iy,0   ; BP = SP
032A   FD 39                  ADD   iy,sp   
032C   DD E9                  JP   (ix)   
032E                             ; \                             19
032E                BACKSLASH_:      
032E                BACKSLASH:      
032E                LAMBDA:      
032E   DD E5                  PUSH   ix   
0330   CD 87 0D               CALL   parseArgs   
0333                LAMBDA1:      
0333   03                     INC   bc   ; arg_list must ve immediately followed by {
0334   0A                     LD   a,(bc)   
0335   FE 21                  CP   " "+1   ; skip white space
0337   38 FA                  JR   c,lambda1   
0339   FE 7B                  CP   "{"   
033B   28 06                  JR   z,lambda2   
033D   21 02 00               LD   hl,2   ; error 2: parse error
0340   C3 7B 10               JP   error   
0343                LAMBDA2:      
0343   CD BD 0D               CALL   parseBlock   
0346   CD 27 0E               CALL   createFunc   
0349   E1                     POP   hl   
034A   DD E1                  POP   ix   
034C   E5                     PUSH   hl   
034D   DD E9                  JP   (ix)   
034F                RBRACK_:      
034F                RBRACK:      
034F                ARRAYEND:      ; 53
034F   FD 54                  LD   d,iyh   ; de = BP
0351   FD 5D                  LD   e,iyl   
0353   ED 43 05 24            LD   (vTemp1),bc   ; save IP
0357   62 6B                  LD   hl,de   ; hl = de = BP
0359   B7                     OR   a   
035A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
035C   CB 3C                  SRL   h   ; 
035E   CB 1D                  RR   l   
0360   44 4D                  LD   bc,hl   ; bc = count
0362   2A EC 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
0365   71                     LD   (hl),c   ; write num items in length word
0366   23                     INC   hl   
0367   70                     LD   (hl),b   
0368   23                     INC   hl   ; hl = array[0], bc = count
0369                             ; de = BP, hl = array[0], bc = count
0369   18 15                  JR   arrayEnd3   
036B                ARRAYEND1:      
036B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
036E   77                     LD   (hl),a   ; write lsb of array item
036F   23                     INC   hl   ; move to msb of array item
0370   3A F2 23               LD   a,(vDataWidth)   ; vDataWidth=1?
0373   3D                     DEC   a   
0374   28 05                  JR   z,arrayEnd2   
0376   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0379   77                     LD   (hl),a   ; write msb of array item
037A   23                     INC   hl   ; move to next word in array
037B                ARRAYEND2:      
037B   FD 2B                  DEC   iy   ; move to next word on stack
037D   FD 2B                  DEC   iy   
037F   0B                     DEC   bc   ; dec items count
0380                ARRAYEND3:      
0380   79                     LD   a,c   ; if not zero loop
0381   B0                     OR   b   
0382   20 E7                  JR   nz,arrayEnd1   
0384   EB                     EX   de,hl   ; de = end of array, hl = BP
0385   F9                     LD   sp,hl   ; sp = BP
0386   E1                     POP   hl   ; de = end of array, hl = old BP
0387   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0388   FD 62                  LD   iyh,d   
038A   FD 6B                  LD   iyl,e   
038C   D1                     POP   de   ; pop arg_list (discard)
038D   D1                     POP   de   ; pop first_arg* (discard)
038E   D1                     POP   de   ; pop IP (discard)
038F   ED 5B EC 23            LD   de,(vHeapPtr)   ; de = array[-2]
0393   13                     INC   de   
0394   13                     INC   de   
0395   D5                     PUSH   de   ; return array[0]
0396   22 EC 23               LD   (vHeapPtr),hl   ; move heap* to end of array
0399   ED 4B 05 24            LD   bc,(vTemp1)   ; restore IP
039D   DD E9                  JP   (ix)   
039F                CARET_:      
039F                             ; execute a block of code which ends with } 116
039F                             ; creates a root scope if BP == stack
039F                             ; else uses outer scope
039F                CARET:       
039F                GO:          
039F   D1                     POP   de   ; de = block*
03A0                GO1:         
03A0   7B                     LD   a,e   ; if block* == null, exit
03A1   B2                     OR   d   
03A2   20 02                  JR   nz,go2   
03A4   DD E9                  JP   (ix)   
03A6                GO2:         
03A6   1A                     LD   a,(de)   
03A7   FE 7B                  CP   "{"   
03A9   CA 30 0C               JP   z,goBlock   
03AC   FE 28                  CP   "("   
03AE   C2 63 0C               JP   nz,goFunc   
03B1   D5                     PUSH   de   ; push de just before stack frame
03B2   CA 30 0C               JP   z,goBlock   
03B5                GRAVE_:      
03B5                GRAVE:       
03B5                PRINTLITERAL:      
03B5   03                     INC   bc   ; move to first char
03B6   ED 5B E8 23            LD   de,(vBufPtr)   ; de = buffer*
03BA   18 03                  JR   printLiteral1   
03BC                PRINTLITERAL0:      
03BC   12                     LD   (de),a   ; a -> buffer*
03BD   13                     INC   de   ; string*++,
03BE   03                     INC   bc   
03BF                PRINTLITERAL1:      
03BF   0A                     LD   a,(bc)   ; a <- string*
03C0   FE 60                  CP   "`"   ; if ` exit loop
03C2   20 F8                  JR   nz,printLiteral0   
03C4   ED 53 E8 23            LD   (vBufPtr),de   ; save buffer*' in pointer
03C8   C3 6D 0D               JP   dotNext   
03CB                LBRACE_:      
03CB                LBRACE:      
03CB   CD BD 0D               CALL   parseBlock   
03CE   DD E9                  JP   (ix)   
03D0                             ; | or                          11
03D0                             ; a b -- c
03D0                PIPE_:       
03D0                PIPE:        
03D0                OR:          
03D0   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03D1   E1                     POP   hl   
03D2   7B                     LD   a,e   
03D3   B5                     OR   l   
03D4   6F                     LD   l,a   
03D5   7A                     LD   a,d   
03D6   B4                     OR   h   
03D7   67                     LD   h,a   
03D8   C3 E7 02               JP   add3   
03DB                RBRACE_:      
03DB   C3 C3 0B               JP   rbrace   
03DE                             ; ~ char                        8
03DE                TILDE_:      
03DE   C3 10 0B               JP   tilde   
03E1                UNDERSCORE_:      
03E1                CHAR:        
03E1   03                     INC   bc   ; point to next char
03E2   0A                     LD   a,(bc)   
03E3   6F                     LD   l,a   
03E4   26 00                  LD   h,0   
03E6   E5                     PUSH   hl   
03E7   DD E9                  JP   (ix)   
03E9                AT_:         
03E9                AT:          
03E9                ADDR:        
03E9   ED 5B F9 23            LD   de,(vPointer)   
03ED   21 F9 23               LD   hl,vPointer   
03F0   C3 23 07               JP   variable   
03F3                             ;********************** PAGE 3 END *********************************************
03F3                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   CD DF 0E               CALL   commandTable   
0403   61                     DB   "a"   ; .a print array
0404   45 0A                  DW   printArray   
0406   63                     DB   "c"   ; .c print char
0407   0F 04                  DW   printChar   
0409   73                     DB   "s"   ; .s print string
040A   1E 04                  DW   printString   
040C   00                     DB   NUL   ; .  print number, fall through
040D   33 04                  DW   printNumber   
040F                             ; .c print char
040F                             ; char --
040F                PRINTCHAR:      
040F   E1                     POP   hl   ; a = char
0410   7D                     LD   a,l   
0411   ED 5B E8 23            LD   de,(vBufPtr)   ; de = buffer*
0415   12                     LD   (de),a   
0416   13                     INC   de   
0417   ED 53 E8 23            LD   (vBufPtr),de   ; save buffer*'
041B   C3 6D 0D               JP   dotNext   
041E                             ; .s print string
041E                             ; string* --
041E                PRINTSTRING:      
041E   E1                     POP   hl   ; hl = string*
041F   ED 5B E8 23            LD   de,(vBufPtr)   ; de = buffer*
0423   18 03                  JR   printString1   
0425                PRINTSTRING0:      
0425   12                     LD   (de),a   ; a -> buffer*
0426   13                     INC   de   ; string*++,
0427   23                     INC   hl   
0428                PRINTSTRING1:      
0428   7E                     LD   a,(hl)   ; a <- string*
0429   B7                     OR   a   ; if NUL exit loop
042A   20 F9                  JR   nz,printString0   
042C   ED 53 E8 23            LD   (vBufPtr),de   ; save buffer*' in pointer
0430   C3 6D 0D               JP   dotNext   
0433                             ; . print decimal
0433                             ; value --
0433                PRINTNUMBER:      
0433   3A F3 23               LD   a,(vNumBase)   
0436   FE 10                  CP   16   
0438   CA A4 04               JP   z,printHex   ; else falls through
043B   C3 3E 04               JP   printDec   
043E                             ; print decimal                 ; 70
043E                             ; value --
043E                PRINTDEC:      
043E   ED 5B E8 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0442   D9                     EXX      
0443   E1                     POP   hl   ; hl = value
0444   3A F2 23               LD   a,(vDataWidth)   
0447   3D                     DEC   a   
0448   20 02                  JR   nz,printDec1   
044A   26 00                  LD   h,0   
044C                PRINTDEC1:      
044C   CD 5B 04               CALL   printDec2   
044F   D9                     EXX      ; de = buffer*' bc = IP
0450   3E 20                  LD   a," "   ; append space to buffer
0452   12                     LD   (de),a   
0453   13                     INC   de   ; string*++,
0454   ED 53 E8 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
0458   C3 6D 0D               JP   dotNext   
045B                             ; hl = value
045B                             ; de' = buffer*
045B                             ; a, bc, de, hl destroyed
045B                PRINTDEC2:      
045B   CB 7C                  BIT   7,h   
045D   28 0C                  JR   z,printDec3   
045F   D9                     EXX      
0460   3E 2D                  LD   a,"-"   
0462   12                     LD   (de),a   
0463   13                     INC   de   
0464   D9                     EXX      
0465   AF                     XOR   a   
0466   95                     SUB   l   
0467   6F                     LD   l,a   
0468   9F                     SBC   a,a   
0469   94                     SUB   h   
046A   67                     LD   h,a   
046B                PRINTDEC3:      
046B   0E 00                  LD   c,0   ; leading zeros flag = false
046D   11 F0 D8               LD   de,-10000   
0470   CD 8B 04               CALL   printDec4   
0473   11 18 FC               LD   de,-1000   
0476   CD 8B 04               CALL   printDec4   
0479   11 9C FF               LD   de,-100   
047C   CD 8B 04               CALL   printDec4   
047F   1E F6                  LD   e,-10   
0481   CD 8B 04               CALL   printDec4   
0484   0C                     INC   c   ; flag = true for at least digit
0485   1E FF                  LD   e,-1   
0487   CD 8B 04               CALL   printDec4   
048A   C9                     RET      
048B                PRINTDEC4:      
048B   06 2F                  LD   b,"0"-1   
048D                PRINTDEC5:      
048D   04                     INC   b   
048E   19                     ADD   hl,de   
048F   38 FC                  JR   c,printDec5   
0491   ED 52                  SBC   hl,de   
0493   3E 30                  LD   a,"0"   
0495   B8                     CP   b   
0496   20 05                  JR   nz,printDec6   
0498   AF                     XOR   a   
0499   B1                     OR   c   
049A   C8                     RET   z   
049B   18 01                  JR   printDec7   
049D                PRINTDEC6:      
049D   0C                     INC   c   
049E                PRINTDEC7:      
049E   78                     LD   a,b   
049F   D9                     EXX      
04A0   12                     LD   (de),a   
04A1   13                     INC   de   
04A2   D9                     EXX      
04A3   C9                     RET      
04A4                             ; buffer hex                    37
04A4                             ; value --
04A4                PRINTHEX:      
04A4   ED 5B E8 23            LD   de,(vBufPtr)   
04A8   3A F5 23               LD   a,(vHexPrefix)   ; "$"
04AB   B7                     OR   a   ; skip if null
04AC   28 02                  JR   z,printHex1   
04AE   12                     LD   (de),a   
04AF   13                     INC   de   ; string*++,
04B0                PRINTHEX1:      
04B0   E1                     POP   hl   ; hl = value
04B1   3A F2 23               LD   a,(vDataWidth)   
04B4   3D                     DEC   a   
04B5   28 04                  JR   z,printHex2   
04B7   7C                     LD   a,h   
04B8   CD CA 04               CALL   printHex3   
04BB                PRINTHEX2:      
04BB   7D                     LD   a,l   
04BC   CD CA 04               CALL   printHex3   
04BF   3E 20                  LD   a," "   ; append space to buffer
04C1   12                     LD   (de),a   
04C2   13                     INC   de   ; string*++,
04C3   ED 53 E8 23            LD   (vBufPtr),de   
04C7   C3 6D 0D               JP   dotNext   
04CA                PRINTHEX3:      
04CA   F5                     PUSH   af   
04CB   1F                     RRA      
04CC   1F                     RRA      
04CD   1F                     RRA      
04CE   1F                     RRA      
04CF   CD D3 04               CALL   printHex4   
04D2   F1                     POP   af   
04D3                PRINTHEX4:      
04D3   E6 0F                  AND   0x0F   
04D5   C6 90                  ADD   a,0x90   
04D7   27                     DAA      
04D8   CE 40                  ADC   a,0x40   
04DA   27                     DAA      
04DB   12                     LD   (de),a   
04DC   13                     INC   de   ; string*++,
04DD   C9                     RET      
04DE                             ;********************** PAGE 4 END *********************************************
04DE                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA 3F 06               JP   z,comment   
0507   0B                     DEC   bc   
0508   CD C9 0E               CALL   lowerCaseTable   
050B   26                     DB   lsb(command_a_)   
050C   38                     DB   lsb(command_b_)   
050D   C8                     DB   lsb(command_nop_)   
050E   44                     DB   lsb(command_d_)   
050F   C8                     DB   lsb(command_nop_)   
0510   4A                     DB   lsb(command_f_)   
0511   C8                     DB   lsb(command_nop_)   
0512   65                     DB   lsb(command_h_)   
0513   6E                     DB   lsb(command_i_)   
0514   C8                     DB   lsb(command_nop_)   
0515   C8                     DB   lsb(command_nop_)   
0516   C8                     DB   lsb(command_nop_)   
0517   74                     DB   lsb(command_m_)   
0518   C8                     DB   lsb(command_nop_)   
0519   7A                     DB   lsb(output_)   
051A   7D                     DB   lsb(command_p_)   
051B   80                     DB   lsb(command_q_)   
051C   86                     DB   lsb(command_r_)   
051D   92                     DB   lsb(command_s_)   
051E   A7                     DB   lsb(true_)   
051F   C8                     DB   lsb(command_nop_)   
0520   AA                     DB   lsb(command_v_)   
0521   BF                     DB   lsb(command_w_)   
0522   C5                     DB   lsb(xor_)   
0523   C8                     DB   lsb(command_nop_)   
0524   C8                     DB   lsb(command_nop_)   
0525   CB                     DB   lsb(command_default_)   
0526                             ; 12
0526                COMMAND_A_:      
0526   62                     DB   "b"   ; /ab absolute
0527   EB 05                  DW   absolute   
0529   64                     DB   "d"   ; /ad address of
052A   F9 05                  DW   addrOf   
052C   69                     DB   "i"   ; /ai array iterator
052D   CB 07                  DW   arrayIter   
052F   6C                     DB   "l"   ; /al array length
0530   01 06                  DW   arrayLength   
0532   73                     DB   "s"   ; /as array size
0533   0A 06                  DW   arraySize   
0535   00                     DB   NUL   
0536   6E 06                  DW   error1   
0538                COMMAND_B_:      
0538   62                     DB   "b"   ; /bb bye bye cold boot
0539   CC 0F                  DW   coldStart   
053B   6D                     DB   "m"   ; /bm byte mode
053C   38 06                  DW   byteMode   
053E   72                     DB   "r"   ; /br break from loop
053F   1E 06                  DW   break   
0541   00                     DB   NUL   
0542   6E 06                  DW   error1   
0544                COMMAND_D_:      
0544   63                     DB   "c"   ; /dc decimal
0545   5A 06                  DW   decBase   
0547   00                     DB   NUL   
0548   6E 06                  DW   error1   
054A                COMMAND_F_:      
054A   64                     DB   "d"   ; /fd fold
054B   70 09                  DW   fold   
054D   65                     DB   "e"   ; /fe forEach
054E   C1 09                  DW   forEach   
0550   73                     DB   "s"   ; /fs funcSrc
0551   0C 0A                  DW   funcSrc   
0553   74                     DB   "t"   ; /ft filter
0554   13 09                  DW   filter   
0556   31                     DB   "1"   
0557   BD 10                  DW   f1   
0559   32                     DB   "2"   
055A   BD 10                  DW   f2   
055C   33                     DB   "3"   
055D   BD 10                  DW   f3   
055F   34                     DB   "4"   
0560   BD 10                  DW   f4   
0562   00                     DB   NUL   
0563   EF 0C                  DW   false1   
0565                COMMAND_H_:      
0565   70                     DB   "p"   ; /hp hex prefix
0566   66 06                  DW   hexPrefix   
0568   78                     DB   "x"   ; /hx hex
0569   61 06                  DW   hexBase   
056B   00                     DB   NUL   
056C   6E 06                  DW   error1   
056E                             ; 6
056E                COMMAND_I_:      
056E   6E                     DB   "n"   ; /in input
056F   74 06                  DW   input   
0571   00                     DB   NUL   
0572   6E 06                  DW   error1   
0574                COMMAND_M_:      
0574   70                     DB   "p"   ; /mp map
0575   D2 08                  DW   map   
0577   00                     DB   NUL   
0578   6E 06                  DW   error1   
057A                OUTPUT_:      
057A   00                     DB   NUL   
057B   7F 06                  DW   output   
057D                             ; 4
057D                COMMAND_P_:      
057D   00                     DB   NUL   
057E   6E 06                  DW   error1   
0580                             ; 6
0580                COMMAND_Q_:      
0580   74                     DB   "t"   ; /qt quit
0581   88 06                  DW   quit   
0583   00                     DB   NUL   
0584   6E 06                  DW   error1   
0586                COMMAND_R_:      
0586   63                     DB   "c"   ; /rc tail call optimisation
0587   92 06                  DW   recur   
0589   65                     DB   "e"   ; /re remainder
058A   98 06                  DW   remain   
058C   67                     DB   "g"   ; /rg range src
058D   39 07                  DW   rangeSrc   
058F   00                     DB   NUL   
0590   6E 06                  DW   error1   
0592                COMMAND_S_:      
0592   62                     DB   "b"   
0593   9E 06                  DW   stringBegin   
0595   63                     DB   "c"   
0596   F0 06                  DW   stringCompare   
0598   65                     DB   "e"   
0599   A6 06                  DW   stringEnd   
059B   69                     DB   "i"   
059C   4B 08                  DW   stringIter   
059E   6C                     DB   "l"   
059F   D5 06                  DW   stringLength   
05A1   73                     DB   "s"   
05A2   E4 06                  DW   stringSize   
05A4   00                     DB   NUL   
05A5   6E 06                  DW   error1   
05A7                TRUE_:       
05A7   00                     DB   NUL   
05A8   E9 0C                  DW   true1   
05AA                COMMAND_V_:      
05AA   62                     DB   "b"   
05AB   08 07                  DW   varBufPtr   
05AD   68                     DB   "h"   
05AE   11 07                  DW   varHeapPtr   
05B0   74                     DB   "t"   
05B1   1A 07                  DW   varTIBPtr   
05B3   42                     DB   "B"   
05B4   54 06                  DW   constBufStart   
05B6   48                     DB   "H"   
05B7   48 06                  DW   constHeapStart   
05B9   54                     DB   "T"   
05BA   4E 06                  DW   constTIBStart   
05BC   00                     DB   NUL   
05BD   6E 06                  DW   error1   
05BF                COMMAND_W_:      
05BF   6D                     DB   "m"   ; /wm word mode
05C0   29 07                  DW   wordMode   
05C2   00                     DB   NUL   
05C3   6E 06                  DW   error1   
05C5                XOR_:        
05C5   00                     DB   NUL   
05C6   2E 07                  DW   xor   
05C8                             ; 2
05C8                COMMAND_NOP_:      
05C8   00                     DB   NUL   
05C9   CE 05                  DW   nop   
05CB                             ; 3
05CB                COMMAND_DEFAULT_:      
05CB   00                     DB   NUL   
05CC   D0 05                  DW   div   
05CE                             ;********************** PAGE 5 END *********************************************
05CE                NOP:         
05CE   DD E9                  JP   (ix)   
05D0                             ;                               32
05D0                DIV:         
05D0   E1                     POP   hl   ; hl = arg_b
05D1   D1                     POP   de   ; de = arg_a
05D2   03                     INC   bc   
05D3   0A                     LD   a,(bc)   
05D4   FE 3D                  CP   "="   
05D6   28 02                  JR   z,div2   
05D8   0B                     DEC   bc   ; /
05D9   EB                     EX   de,hl   
05DA                DIV2:        
05DA   F5                     PUSH   af   ; preserve af, bc
05DB   C5                     PUSH   bc   
05DC   44 4D                  LD   bc,hl   
05DE   CD 54 0D               CALL   divide   
05E1   EB                     EX   de,hl   
05E2   ED 53 FB 23            LD   (vRemain),de   
05E6   C1                     POP   bc   ; restore
05E7   F1                     POP   af   
05E8   C3 AC 02               JP   sub3   
05EB                             ; /ab absolute
05EB                             ; num -- num
05EB                ABSOLUTE:      
05EB   E1                     POP   hl   
05EC   CB 7C                  BIT   7,h   
05EE   28 06                  JR   z,absolute1   
05F0   AF                     XOR   a   
05F1   95                     SUB   l   
05F2   6F                     LD   l,a   
05F3   9F                     SBC   a,a   
05F4   94                     SUB   h   
05F5   67                     LD   h,a   
05F6                ABSOLUTE1:      
05F6   E5                     PUSH   hl   
05F7   DD E9                  JP   (ix)   
05F9                             ; /ad addrOf                    24
05F9                             ; char -- addr
05F9                ADDROF:      
05F9   E1                     POP   hl   ; a = char
05FA   7D                     LD   a,l   
05FB   CD 18 0F               CALL   getVarAddr   
05FE   E5                     PUSH   hl   
05FF                ADDROF2:      
05FF   DD E9                  JP   (ix)   
0601                             ; /al length of an array, num elements
0601                             ; array* -- num
0601                ARRAYLENGTH:      
0601   E1                     POP   hl   
0602   2B                     DEC   hl   ; msb size
0603   56                     LD   d,(hl)   
0604   2B                     DEC   hl   ; lsb size
0605   5E                     LD   e,(hl)   
0606   EB                     EX   de,hl   
0607                ARRAYLENGTH1:      
0607   E5                     PUSH   hl   
0608   DD E9                  JP   (ix)   
060A                             ; /as size in bytes of an array, based on current data width
060A                             ; array* -- num
060A                ARRAYSIZE:      
060A                          ;*Macro unroll:  PERFORM arrayLength
060A   DD 21 11 06            LD   ix,performM_1486S1039   
060E   C3 01 06               JP   arrayLength   
0611                PERFORMM_1486S1039:      
0611   E1                     POP   hl   
0612   3A F2 23               LD   a,(vDataWidth)   
0615   3D                     DEC   a   
0616   28 EF                  JR   z,arrayLength1   
0618   CB 3C                  SRL   h   
061A   CB 1D                  RR   l   
061C   18 E9                  JR   arrayLength1   
061E                             ; 13
061E                             ; /br break from loop
061E                             ; --
061E                BREAK:       
061E   E1                     POP   hl   ; hl = condition, break if false
061F   7D                     LD   a,l   
0620   B4                     OR   h   
0621   28 02                  JR   z,break1   
0623   DD E9                  JP   (ix)   
0625                BREAK1:      
0625   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0627   FD 54                  LD   d,iyh   
0629   21 08 00               LD   hl,8   
062C   19                     ADD   hl,de   
062D   23                     INC   hl   
062E   23                     INC   hl   
062F   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0632   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0635   C3 C3 0B               JP   blockEnd   
0638                             ; /b
0638                BYTEMODE:      
0638   3E 01                  LD   a,1   
063A                BYTEMODE1:      
063A   32 F2 23               LD   (vDataWidth),a   
063D   DD E9                  JP   (ix)   
063F                             ; //
063F                COMMENT:      
063F   03                     INC   bc   ; point to next char
0640   0A                     LD   a,(bc)   
0641   FE 20                  CP   " "   ; terminate on any char less than SP
0643   30 FA                  JR   nc,comment   
0645   0B                     DEC   bc   
0646   DD E9                  JP   (ix)   
0648                CONSTHEAPSTART:      
0648   11 23 24               LD   de,HEAP   
064B   C3 26 07               JP   constant   
064E                CONSTTIBSTART:      
064E   11 00 21               LD   de,TIB   
0651   C3 26 07               JP   constant   
0654                CONSTBUFSTART:      
0654   11 00 22               LD   de,BUFFER   
0657   C3 26 07               JP   constant   
065A                DECBASE:      
065A   3E 0A                  LD   a,10   
065C                DECBASE1:      
065C   32 F3 23               LD   (vNumBase),a   
065F   DD E9                  JP   (ix)   
0661                HEXBASE:      
0661   3E 10                  LD   a,16   
0663   C3 5C 06               JP   decBase1   
0666                HEXPREFIX:      
0666   E1                     POP   hl   
0667   7D                     LD   a,l   
0668   32 F5 23               LD   (vHexPrefix),a   
066B   C3 5C 06               JP   decBase1   
066E                ERROR1:      
066E   21 01 00               LD   hl,1   ; error 1: unknown command
0671   C3 7B 10               JP   error   
0674                             ; Z80 port input
0674                             ; port -- value
0674                INPUT:       
0674   E1                     POP   hl   
0675   59                     LD   e,c   ; save IP
0676   4D                     LD   c,l   
0677   ED 68                  IN   l,(c)   
0679   26 00                  LD   h,0   
067B   4B                     LD   c,e   ; restore IP
067C   E5                     PUSH   hl   
067D   DD E9                  JP   (ix)   
067F                             ; /o Z80 port output
067F                             ; value port --
067F                OUTPUT:      
067F   E1                     POP   hl   
0680   59                     LD   e,c   ; save IP
0681   4D                     LD   c,l   
0682   E1                     POP   hl   
0683   ED 69                  OUT   (c),l   
0685   4B                     LD   c,e   ; restore IP
0686   DD E9                  JP   (ix)   
0688                             ; /qt
0688                             ; bool --
0688                QUIT:        
0688   E1                     POP   hl   ; hl = condition, exit if true
0689   7D                     LD   a,l   
068A   B4                     OR   h   
068B   20 02                  JR   nz,quit1   
068D   DD E9                  JP   (ix)   
068F                QUIT1:       
068F   C3 C3 0B               JP   blockEnd   
0692                RECUR:       
0692   E1                     POP   hl   
0693   22 F0 23               LD   (vRecur),hl   
0696   DD E9                  JP   (ix)   
0698                REMAIN:      
0698   2A FB 23               LD   hl,(vRemain)   
069B   E5                     PUSH   hl   
069C   DD E9                  JP   (ix)   
069E                STRINGBEGIN:      
069E   21 FF FF               LD   hl,TRUE   ; string mode = true
06A1   22 F4 23               LD   (vStrMode),hl   
06A4   18 27                  JR   stringEnd1   ; save hl in vBufPtr
06A6                STRINGEND:      
06A6   21 00 00               LD   hl,FALSE   ; string mode = false
06A9   22 F4 23               LD   (vStrMode),hl   
06AC   2A E8 23               LD   hl,(vBufPtr)   ; append NUL to string
06AF   AF                     XOR   a   
06B0   77                     LD   (hl),a   
06B1   23                     INC   hl   ; hl = string_end*
06B2   ED 43 05 24            LD   (vTemp1),bc   ; save IP
06B6   11 00 22               LD   de,BUFFER   ; de = string*
06B9   B7                     OR   a   ; bc = size
06BA   ED 52                  SBC   hl,de   
06BC   44 4D                  LD   bc,hl   
06BE   2A EC 23               LD   hl,(vHeapPtr)   ; hl = hstring*
06C1   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
06C2   D5                     PUSH   de   ; return hstring*
06C3   ED B0                  LDIR      ; copy size bytes from string* to hstring*
06C5   ED 53 EC 23            LD   (vHeapPtr),de   ; bump heap to hstring* += size
06C9   ED 4B 05 24            LD   bc,(vTemp1)   ; restore IP
06CD                STRINGEND1:      
06CD   21 00 22               LD   hl,BUFFER   ; reset vBufPtr
06D0   22 E8 23               LD   (vBufPtr),hl   
06D3   DD E9                  JP   (ix)   
06D5                STRINGLENGTH:      
06D5   D1                     POP   de   
06D6   21 00 00               LD   hl,0   
06D9   18 02                  JR   stringLength2   
06DB                STRINGLENGTH1:      
06DB   13                     INC   de   
06DC   23                     INC   hl   
06DD                STRINGLENGTH2:      
06DD   1A                     LD   a,(de)   
06DE   B7                     OR   a   
06DF   20 FA                  JR   nz,stringLength1   
06E1                STRINGLENGTH3:      
06E1   E5                     PUSH   hl   
06E2   DD E9                  JP   (ix)   
06E4                STRINGSIZE:      
06E4                          ;*Macro unroll:  PERFORM stringLength
06E4   DD 21 EB 06            LD   ix,performM_1632S1204   
06E8   C3 D5 06               JP   stringLength   
06EB                PERFORMM_1632S1204:      
06EB   E1                     POP   hl   
06EC   23                     INC   hl   
06ED   C3 E1 06               JP   stringLength3   
06F0                             ; /sc string compare
06F0                             ; string1* string2* -- bool
06F0                             ; Compares two null terminated strings.
06F0                STRINGCOMPARE:      
06F0   D1                     POP   de   
06F1   E1                     POP   hl   
06F2                STRINGCOMPARE1:      
06F2   1A                     LD   a,(de)   
06F3   BE                     CP   (hl)   
06F4   20 07                  JR   nz,stringCompare2   
06F6   B7                     OR   a   
06F7   28 09                  JR   z,stringCompare3   
06F9   13                     INC   de   
06FA   23                     INC   hl   
06FB   18 F5                  JR   stringCompare1   
06FD                STRINGCOMPARE2:      
06FD   21 00 00               LD   hl,FALSE   
0700   18 03                  JR   stringCompare4   
0702                STRINGCOMPARE3:      
0702   21 FF FF               LD   hl,TRUE   
0705                STRINGCOMPARE4:      
0705   E5                     PUSH   hl   
0706   DD E9                  JP   (ix)   
0708                VARBUFPTR:      
0708   ED 5B E8 23            LD   de,(vBufPtr)   
070C   21 E8 23               LD   hl,vBufPtr   
070F   18 12                  JR   variable   
0711                VARHEAPPTR:      
0711   ED 5B EC 23            LD   de,(vHeapPtr)   
0715   21 EC 23               LD   hl,vHeapPtr   
0718   18 09                  JR   variable   
071A                VARTIBPTR:      
071A   ED 5B E6 23            LD   de,(vTIBPtr)   
071E   21 E6 23               LD   hl,vTIBPtr   
0721   18 00                  JR   variable   
0723                VARIABLE:      
0723   22 F9 23               LD   (vPointer),hl   
0726                CONSTANT:      
0726   D5                     PUSH   de   
0727   DD E9                  JP   (ix)   
0729                             ; /wm
0729                WORDMODE:      
0729   3E 02                  LD   a,2   
072B   C3 3A 06               JP   byteMode1   
072E                             ; /x
072E                XOR:         
072E   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
072F                XOR1:        
072F   E1                     POP   hl   
0730   7B                     LD   a,e   
0731   AD                     XOR   l   
0732   6F                     LD   l,a   
0733   7A                     LD   a,d   
0734   AC                     XOR   h   
0735   67                     LD   h,a   
0736   C3 E7 02               JP   add3   
0739                             ;*******************************************************************
0739                             ; Monty implementations
0739                             ;*******************************************************************
0739                             ; /rg rangeSrc
0739                             ; begin end step -- src
0739                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
0739                RANGESRC:      ; range source: begin, end, step, local: L
0739   CD 9F 03               CALL   go   
073C   00 00                  DW   NUL   
073E   48 07                  DW   rangeSrcM_1697S1278   
0740   42 07                  DW   $+2   
0742   01                     DB   1   
0743   04 62 65 73 4C         .PSTR   "besL"   
0748                RANGESRCM_1697S1278:      
0748   7B                     DB   "{"   ; init mutable L [index active inrange_test]
0749   5B 25 62 20 2F 74 20 25 73 30 3E 7B 7B 25 61 25 65 3C 7D 7D 7B 7B 25 61 25 65 3E 7D 7D 3F 5D 20 25 4C 3D 20 DB   "[%b /t %s0>{{%a%e<}}{{%a%e>}}?] %L= "   
076D   5C 6B 74 7B            DB   "\\kt{"   
0771   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0779   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
077F   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0787   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
078F   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
0799   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
07A1   25 4C 32 23 5E         DB   "%L2#^"   ; ifte: inrange_test?
07A6   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
07BA   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
07C1   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
07C8   7D                     DB   "}"   
07C9   7D                     DB   "}"   
07CA   00                     DB   0   
07CB                             ; /ai arrayIter
07CB                             ; array* -- src
07CB                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
07CB                ARRAYITER:      
07CB   CD 9F 03               CALL   go   
07CE   00 00                  DW   NUL   
07D0   D8 07                  DW   arrayIterM_1716S1298   
07D2   D4 07                  DW   $+2   
07D4   01                     DB   1   
07D5   02 61 4C               .PSTR   "aL"   
07D8                ARRAYITERM_1716S1298:      
07D8   7B                     DB   "{"   
07D9   5B 30 20 2F 74 20 25 61 2F 61 6C 5D 20 25 4C 3D DB   "[0 /t %a/al] %L="   ; init mutable L [index active size]
07E9   5C 6B 74 7B            DB   "\\kt{"   
07ED   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
07F5   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
07FB   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0803   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
080B   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
0812   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
081A   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
0823   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
083A   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
0841   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0848   7D                     DB   "}"   
0849   7D                     DB   "}"   
084A   00                     DB   0   
084B                             ; /si stringIter
084B                             ; string* -- src
084B                          ;*Macro unroll: FUNC stringIter, 1, "sL"
084B                STRINGITER:      
084B   CD 9F 03               CALL   go   
084E   00 00                  DW   NUL   
0850   58 08                  DW   stringIterM_1735S1318   
0852   54 08                  DW   $+2   
0854   01                     DB   1   
0855   02 73 4C               .PSTR   "sL"   
0858                STRINGITERM_1735S1318:      
0858   7B                     DB   "{"   
0859   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
0863   5C 6B 74 7B            DB   "\\kt{"   
0867   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
086F   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
0876   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
087E   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
0886   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
088D   2F 62 6D 20 25 73 25 69 23 20 2F 77 6D 20 25 63 3D DB   "/bm %s%i# /wm %c="   ; read byte at i, store in c as word
089E   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
08A6   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
08AD   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
08C1   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: call sink note: /rc recur
08C8   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08CF   7D                     DB   "}"   
08D0   7D                     DB   "}"   
08D1   00                     DB   0   
08D2                             ; /mp map
08D2                             ; src func -- src1
08D2                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
08D2                MAP:         ; map: source, function
08D2   CD 9F 03               CALL   go   
08D5   00 00                  DW   NUL   
08D7   DF 08                  DW   mapM_1755S1340   
08D9   DB 08                  DW   $+2   
08DB   00                     DB   0   
08DC   02 73 66               .PSTR   "sf"   
08DF                MAPM_1755S1340:      
08DF   7B                     DB   "{"   
08E0   5C 6B 74 7B            DB   "\\kt{"   
08E4   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
08EC   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
08F0   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
08F5   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
0901   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
0909   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0910   7D                     DB   "}"   
0911   7D                     DB   "}"   
0912   00                     DB   0   
0913                             ; /ft filter
0913                             ; src pred -- src1
0913                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
0913                FILTER:      ; filter: source, predicate, local: T
0913   CD 9F 03               CALL   go   
0916   00 00                  DW   NUL   
0918   21 09                  DW   filterM_1769S1355   
091A   1C 09                  DW   $+2   
091C   01                     DB   1   
091D   03 73 70 54            .PSTR   "spT"   
0921                FILTERM_1769S1355:      
0921   7B                     DB   "{"   
0922   5B 30 5D 25 54 3D      DB   "[0]%T="   
0928   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
092C   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0930   5B                     DB   "["   
0931   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
093E   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
0946   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
094A   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
094F   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
0965   3F                     DB   "?"   
0966   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
096D   7D                     DB   "}"   
096E   7D                     DB   "}"   
096F   00                     DB   0   
0970                             ; /fd fold
0970                             ; reducer is a function like: \\da00bbLi4u
0970                             ; src init reducer -- src1
0970                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
0970                FOLD:        ; src, init, reducer
0970   CD 9F 03               CALL   go   
0973   00 00                  DW   NUL   
0975   7F 09                  DW   foldM_1788S1375   
0977   79 09                  DW   $+2   
0979   01                     DB   1   
097A   04 73 69 72 41         .PSTR   "sirA"   
097F                FOLDM_1788S1375:      
097F   7B                     DB   "{"   ; reducer: \\da00bbLi4u
0980   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
0987   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
098B   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
098F   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0994   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
09AF   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
09B7   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09BE   7D                     DB   "}"   
09BF   7D                     DB   "}"   
09C0   00                     DB   0   
09C1                             ; /fe forEach
09C1                             ; src proc --
09C1                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
09C1                FOREACH:      ; forEach: source, procedure, local: T
09C1   CD 9F 03               CALL   go   
09C4   00 00                  DW   NUL   
09C6   CF 09                  DW   forEachM_1802S1390   
09C8   CA 09                  DW   $+2   
09CA   01                     DB   1   
09CB   03 73 70 54            .PSTR   "spT"   
09CF                FOREACHM_1802S1390:      
09CF   7B                     DB   "{"   
09D0   5B 30 5D 25 54 3D      DB   "[0]%T="   
09D6   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
09DA   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
09E2   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
09E7   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
09F9   3F                     DB   "?"   ; ifte:
09FA   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0A03   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A0A   7D                     DB   "}"   
0A0B   00                     DB   0   
0A0C                             ; ; /fs funcSrc
0A0C                             ; ; func -- src
0A0C                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0A0C                FUNCSRC:      ; :f func or block
0A0C   CD 9F 03               CALL   go   
0A0F   00 00                  DW   NUL   
0A11   18 0A                  DW   funcSrcM_1816S1405   
0A13   15 0A                  DW   $+2   
0A15   00                     DB   0   
0A16   01 66                  .PSTR   "f"   
0A18                FUNCSRCM_1816S1405:      
0A18   7B                     DB   "{"   
0A19   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0A1D   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0A25   5C 64 74 7B            DB   "\\dt{"   
0A29   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0A3B   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0A42   7D                     DB   "}"   
0A43   7D                     DB   "}"   
0A44   00                     DB   0   
0A45                          ;*Macro unroll: FUNC printArray, 2, "abc"
0A45                PRINTARRAY:      
0A45   CD 9F 03               CALL   go   
0A48   00 00                  DW   NUL   
0A4A   53 0A                  DW   printArrayM_1826S1416   
0A4C   4E 0A                  DW   $+2   
0A4E   02                     DB   2   
0A4F   03 61 62 63            .PSTR   "abc"   
0A53                PRINTARRAYM_1826S1416:      
0A53   7B                     DB   "{"   
0A54   27 5B 20 27 2E 73 20 25 61 2F 61 6C 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/al%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0A8B   7D                     DB   "}"   
0A8C   00                     DB   0   
0A8D                             ;*******************************************************************
0A8D                             ; implementations continued
0A8D                             ;*******************************************************************
0A8D                COMMA:       
0A8D   CD F7 0E               CALL   cmdTable   
0A90   63 00                  DB   "c",NUL   ; .c print char
0A92   9C 0A                  DW   readChar   
0A94   73 00                  DB   "s",NUL   ; .s print string
0A96   A5 0A                  DW   readString   
0A98   00 00                  DW   NUL   ; .  print number, fall through
0A9A   C1 0A                  DW   readNumber   
0A9C                READCHAR:      
0A9C   CD 81 00               CALL   getchar   
0A9F   26 00                  LD   h,0   
0AA1   6F                     LD   l,a   
0AA2   E5                     PUSH   hl   
0AA3   DD E9                  JP   (ix)   
0AA5                READSTRING:      
0AA5   ED 5B EC 23            LD   de,(vHeapPtr)   
0AA9   D5                     PUSH   de   ; return start of string
0AAA                READSTRING1:      
0AAA   CD 81 00               CALL   getchar   
0AAD   FE 0D                  CP   "\r"   
0AAF   28 07                  JR   z,readString2   
0AB1   12                     LD   (de),a   
0AB2   13                     INC   de   
0AB3   CD 85 00               CALL   putchar   
0AB6   18 F2                  JR   readString1   
0AB8                READSTRING2:      
0AB8   AF                     XOR   a   
0AB9   12                     LD   (de),a   
0ABA   13                     INC   de   
0ABB   ED 53 EC 23            LD   (vHeapPtr),de   
0ABF   DD E9                  JP   (ix)   
0AC1                READNUMBER:      
0AC1   DD E5                  PUSH   ix   
0AC3                          ;*Macro unroll:  PERFORM readString
0AC3   DD 21 CA 0A            LD   ix,performM_1867S1462   
0AC7   C3 A5 0A               JP   readString   
0ACA                PERFORMM_1867S1462:      
0ACA   60 69                  LD   hl,bc   ; save bc, hl = string*
0ACC   E3                     EX   (sp),hl   
0ACD   22 EC 23               LD   (vHeapPtr),hl   ; restore heap* to before string
0AD0   44 4D                  LD   bc,hl   
0AD2   0A                     LD   a,(bc)   
0AD3   FE 2D                  CP   "-"   
0AD5   28 11                  JR   z,readNumber1   
0AD7   FE 24                  CP   "$"   
0AD9   28 17                  JR   z,readNumber2   
0ADB   FE 30                  CP   "0"   
0ADD   30 09                  JR   nc,readNumber1   
0ADF   FE 3A                  CP   "9"+1   
0AE1   38 05                  JR   c,readNumber1   
0AE3   21 00 00               LD   hl,0   
0AE6   18 12                  JR   readNumber3   
0AE8                READNUMBER1:      
0AE8                          ;*Macro unroll:  PERFORM num
0AE8   DD 21 EF 0A            LD   ix,performM_1884S1479   
0AEC   C3 93 0B               JP   num   
0AEF                PERFORMM_1884S1479:      
0AEF   E1                     POP   hl   
0AF0   18 08                  JR   readNumber3   
0AF2                READNUMBER2:      
0AF2                          ;*Macro unroll:  PERFORM hexNum
0AF2   DD 21 F9 0A            LD   ix,performM_1888S1483   
0AF6   C3 1A 0B               JP   hexNum   
0AF9                PERFORMM_1888S1483:      
0AF9   E1                     POP   hl   
0AFA                READNUMBER3:      
0AFA   C1                     POP   bc   
0AFB   DD E1                  POP   ix   
0AFD   E5                     PUSH   hl   
0AFE   DD E9                  JP   (ix)   
0B00                COLON:       
0B00                VARREF:      
0B00   03                     INC   bc   
0B01   0A                     LD   a,(bc)   
0B02   CD 18 0F               CALL   getVarAddr   
0B05   22 F9 23               LD   (vPointer),hl   ; store address in setter
0B08   5E                     LD   e,(hl)   
0B09   23                     INC   hl   
0B0A   56                     LD   d,(hl)   
0B0B   D5                     PUSH   de   
0B0C   DD E9                  JP   (ix)   
0B0E                SEMICOLON:      
0B0E   DD E9                  JP   (ix)   
0B10                             ; ~ bitwise invert
0B10                TILDE:       
0B10                INVERT:      
0B10   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
0B11   7D                     LD   a,l   
0B12   2F                     CPL      
0B13   6F                     LD   l,a   
0B14   7C                     LD   a,h   
0B15   2F                     CPL      
0B16   67                     LD   h,a   
0B17   C3 E7 02               JP   add3   
0B1A                             ; $ hex                         ; 22
0B1A                DOLLAR:      
0B1A                HEXNUM:      
0B1A   21 00 00               LD   hl,0   ; Clear hl to accept the number
0B1D                HEXNUM1:      
0B1D   03                     INC   bc   
0B1E   0A                     LD   a,(bc)   ; Get the character which is a numeral
0B1F   CB 77                  BIT   6,a   ; is it uppercase alpha?
0B21   28 02                  JR   z,hexnum2   ; no a decimal
0B23   D6 07                  SUB   7   ; sub 7  to make $a - $F
0B25                HEXNUM2:      
0B25   D6 30                  SUB   $30   ; form decimal digit
0B27   DA B5 0B               JP   c,num2   
0B2A   FE 10                  CP   $0F+1   
0B2C   D2 B5 0B               JP   nc,num2   
0B2F   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0B30   29                     ADD   hl,hl   ; 4X
0B31   29                     ADD   hl,hl   ; 8X
0B32   29                     ADD   hl,hl   ; 16X
0B33   85                     ADD   a,l   ; add into bottom of hl
0B34   6F                     LD   l,a   
0B35   18 E6                  JR   hexnum1   
0B37                             ; ? if                            23
0B37                             ; condition then else -- value
0B37                QUESTION:      
0B37                IF:          
0B37   D1                     POP   de   ; de = else
0B38   E1                     POP   hl   ; hl = then
0B39   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0B3A   7C                     LD   a,h   
0B3B   B5                     OR   l   
0B3C   E1                     POP   hl   ; hl = then
0B3D   CA A0 03               JP   z,go1   ; if z de = else
0B40   EB                     EX   de,hl   ; condition = false, de = then
0B41   C3 A0 03               JP   go1   
0B44                             ; string                        ;38
0B44                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0B44                QUOTE:       
0B44                STRING:      
0B44   2A EC 23               LD   hl,(vHeapPtr)   ; hl = heap*
0B47   E5                     PUSH   hl   ; save start of string
0B48   0A                     LD   a,(bc)   
0B49   5F                     LD   e,a   ; e = matching terminator
0B4A   03                     INC   bc   ; point to next char
0B4B   18 03                  JR   string2   
0B4D                STRING1:      
0B4D   77                     LD   (hl),a   
0B4E   23                     INC   hl   ; increase count
0B4F   03                     INC   bc   ; point to next char
0B50                STRING2:      
0B50   0A                     LD   a,(bc)   
0B51   BB                     CP   e   ; is it the string terminator
0B52   28 02                  JR   z,string3   
0B54   18 F7                  JR   string1   
0B56                STRING3:      
0B56   AF                     XOR   a   ; write NUL to terminate string
0B57   77                     LD   (hl),a   ; hl = end of string
0B58   23                     INC   hl   
0B59   22 EC 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0B5C   DD E9                  JP   (ix)   
0B5E                             ; %a .. %z                      43
0B5E                             ; -- value
0B5E                             ; returns value of arg
0B5E                PERCENT:      
0B5E                ARG:         
0B5E   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0B61   FD 56 05               LD   d,(iy+5)   
0B64   EB                     EX   de,hl   
0B65   7D                     LD   a,l   ; arg_list* == null, skip
0B66   B4                     OR   h   
0B67   28 1A                  JR   z,arg0a   
0B69   23                     INC   hl   ; a = num_args, hl = arg_list*
0B6A   7E                     LD   a,(hl)   
0B6B   23                     INC   hl   
0B6C   B7                     OR   a   
0B6D   28 14                  JR   z,arg0a   ; num_args == 0, skip
0B6F   5F                     LD   e,a   ; e = a = num_args
0B70   03                     INC   bc   ; a = next char = dollar_name
0B71   0A                     LD   a,(bc)   
0B72   C5                     PUSH   bc   ; save IP
0B73   43                     LD   b,e   ; b = e = num_args
0B74   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0B77   FD 56 03               LD   d,(iy+3)   
0B7A                ARG0:        
0B7A   1B                     DEC   de   ; a = dollar_name, de = next arg*
0B7B   1B                     DEC   de   
0B7C   BE                     CP   (hl)   
0B7D   28 09                  JR   z,arg1   
0B7F   23                     INC   hl   ; hl = next arg_list*
0B80   10 F8                  DJNZ   arg0   
0B82   C1                     POP   bc   ; no match, restore IP
0B83                ARG0A:       
0B83   11 00 00               LD   de,0   ; return 0
0B86   18 08                  JR   arg1a   
0B88                ARG1:        
0B88   C1                     POP   bc   ; restore IP
0B89   EB                     EX   de,hl   ; hl = arg*
0B8A   22 F9 23               LD   (vPointer),hl   ; store arg* in setter
0B8D   5E                     LD   e,(hl)   
0B8E   23                     INC   hl   
0B8F   56                     LD   d,(hl)   ; de = arg
0B90                ARG1A:       
0B90   D5                     PUSH   de   ; push arg
0B91   DD E9                  JP   (ix)   
0B93                             ; 0..9 number                   37
0B93                NUM:         
0B93   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B96   0A                     LD   a,(bc)   ; Get numeral or -
0B97   FE 2D                  CP   "-"   
0B99   20 01                  JR   nz,num0   
0B9B   03                     INC   bc   ; move to next char, no flags affected
0B9C                NUM0:        
0B9C   08                     EX   af,af'   ; save zero flag = 0 for later
0B9D                NUM1:        
0B9D   0A                     LD   a,(bc)   ; read digit
0B9E   D6 30                  SUB   "0"   ; less than 0?
0BA0   38 13                  JR   c,num2   ; not a digit, exit loop
0BA2   FE 0A                  CP   10   ; greater that 9?
0BA4   30 0F                  JR   nc,num2   ; not a digit, exit loop
0BA6   03                     INC   bc   ; inc IP
0BA7   54 5D                  LD   de,hl   ; multiply hl * 10
0BA9   29                     ADD   hl,hl   
0BAA   29                     ADD   hl,hl   
0BAB   19                     ADD   hl,de   
0BAC   29                     ADD   hl,hl   
0BAD   85                     ADD   a,l   ; add digit in a to hl
0BAE   6F                     LD   l,a   
0BAF   3E 00                  LD   a,0   
0BB1   8C                     ADC   a,h   
0BB2   67                     LD   h,a   
0BB3   18 E8                  JR   num1   
0BB5                NUM2:        
0BB5   0B                     DEC   bc   
0BB6   08                     EX   af,af'   ; restore zero flag
0BB7   20 07                  JR   nz,num3   
0BB9   EB                     EX   de,hl   ; negate the value of hl
0BBA   21 00 00               LD   hl,0   
0BBD   B7                     OR   a   ; jump to sub2
0BBE   ED 52                  SBC   hl,de   
0BC0                NUM3:        
0BC0   E5                     PUSH   hl   ; Put the number on the stack
0BC1   DD E9                  JP   (ix)   ; and process the next character
0BC3                             ; }                               58
0BC3                RBRACE:      
0BC3                BLOCKEND:      
0BC3   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0BC6   FD 56 01               LD   d,(iy+1)   
0BC9   ED 53 05 24            LD   (vTemp1),de   
0BCD   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0BD0   FD 56 07               LD   d,(iy+7)   
0BD3   ED 53 07 24            LD   (vTemp2),de   
0BD7   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0BDA   FD 56 03               LD   d,(iy+3)   
0BDD   EB                     EX   de,hl   
0BDE   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0BE1   FD 56 01               LD   d,(iy+1)   
0BE4   13                     INC   de   ; for carry flag <=
0BE5   B7                     OR   a   
0BE6   ED 52                  SBC   hl,de   
0BE8   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0BEA   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0BEC   FD 5D                  LD   e,iyl   
0BEE   21 08 00               LD   hl,8   
0BF1   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0BF2   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0BF3   18 0C                  JR   blockEnd2   
0BF5                BLOCKEND1:      ; same scope
0BF5   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0BF8   FD 56 03               LD   d,(iy+3)   
0BFB   EB                     EX   de,hl   
0BFC   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0BFE   FD 5D                  LD   e,iyl   
0C00   EB                     EX   de,hl   
0C01                BLOCKEND2:      
0C01   44 4D                  LD   bc,hl   ; bc = hl = BP
0C03   B7                     OR   a   ; hl = BP - SP = count
0C04   ED 72                  SBC   hl,sp   
0C06   7D                     LD   a,l   
0C07   B4                     OR   h   
0C08   28 09                  JR   z,blockEnd3   
0C0A   C5                     PUSH   bc   ; bc = count, hl = BP
0C0B   44 4D                  LD   bc,hl   
0C0D   E1                     POP   hl   
0C0E   2B                     DEC   hl   ; hl = BP-1
0C0F   1B                     DEC   de   ; de = args*-1
0C10   ED B8                  LDDR      
0C12   13                     INC   de   
0C13                BLOCKEND3:      
0C13   EB                     EX   de,hl   ; sp = de = new tos*
0C14   F9                     LD   sp,hl   
0C15   ED 4B 07 24            LD   bc,(vTemp2)   
0C19   FD 2A 05 24            LD   iy,(vTemp1)   
0C1D   ED 5B F0 23            LD   de,(vRecur)   ; de = recur vector
0C21   7B                     LD   a,e   ; check for NUL
0C22   B2                     OR   d   
0C23   20 02                  JR   nz,blockEnd4   
0C25   DD E9                  JP   (ix)   
0C27                BLOCKEND4:      
0C27   21 00 00               LD   hl,0   ; clear recur vector
0C2A   22 F0 23               LD   (vRecur),hl   
0C2D   C3 A0 03               JP   go1   ; execute de
0C30                GOBLOCK:      
0C30   ED 53 05 24            LD   (vTemp1),de   ; save de
0C34   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0C37   FD 54                  LD   d,iyh   
0C39   FD 5D                  LD   e,iyl   
0C3B   B7                     OR   a   ; if stack* == BP then this is the root_scope
0C3C   ED 52                  SBC   hl,de   
0C3E   ED 5B 05 24            LD   de,(vTemp1)   ; restore de
0C42   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0C43   B4                     OR   h   
0C44   3E 00                  LD   a,0   
0C46   28 6A                  JR   z,goFunc8   
0C48   C5                     PUSH   bc   ; push IP
0C49   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0C4C   FD 46 05               LD   b,(iy+5)   
0C4F   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0C52   FD 66 03               LD   h,(iy+3)   
0C55                GOBLOCK2:      
0C55   C5                     PUSH   bc   ; arg_list*
0C56   E5                     PUSH   hl   ; first_arg*
0C57   FD E5                  PUSH   iy   ; push BP
0C59   FD 21 00 00            LD   iy,0   ; BP = SP
0C5D   FD 39                  ADD   iy,sp   
0C5F                GOBLOCK3:      
0C5F   42 4B                  LD   bc,de   ; bc = de = block*-1
0C61   DD E9                  JP   (ix)   
0C63                GOFUNC:      ; execute func
0C63   EB                     EX   de,hl   ; hl = func*
0C64   5E                     LD   e,(hl)   ; de = partial_array*
0C65   23                     INC   hl   
0C66   56                     LD   d,(hl)   
0C67   23                     INC   hl   
0C68   7B                     LD   a,e   ; if partial_array* == null skip
0C69   B2                     OR   d   
0C6A   28 21                  JR   z,goFunc3   
0C6C   ED 43 05 24            LD   (vTemp1),bc   
0C70   22 07 24               LD   (vTemp2),hl   ; save bc,hl
0C73   EB                     EX   de,hl   ; hl = partial_array*
0C74   2B                     DEC   hl   ; bc = count
0C75   46                     LD   b,(hl)   
0C76   2B                     DEC   hl   
0C77   4E                     LD   c,(hl)   
0C78   23                     INC   hl   ; hl = array data*
0C79   23                     INC   hl   
0C7A   18 06                  JR   goFunc2   ; push each item on stack
0C7C                GOFUNC1:      
0C7C   5E                     LD   e,(hl)   ; de = partial item
0C7D   23                     INC   hl   
0C7E   56                     LD   d,(hl)   
0C7F   23                     INC   hl   
0C80   D5                     PUSH   de   ; push on stack
0C81   0B                     DEC   bc   
0C82                GOFUNC2:      
0C82   79                     LD   a,c   ; if count != 0 then loop
0C83   B0                     OR   b   
0C84   20 F6                  JR   nz,goFunc1   
0C86   ED 4B 05 24            LD   bc,(vTemp1)   ; restore bc
0C8A   2A 07 24               LD   hl,(vTemp2)   ; restore hl
0C8D                GOFUNC3:      
0C8D   5E                     LD   e,(hl)   ; de = block*
0C8E   23                     INC   hl   
0C8F   56                     LD   d,(hl)   
0C90   23                     INC   hl   
0C91   ED 53 05 24            LD   (vTemp1),de   ; save block*
0C95   5E                     LD   e,(hl)   ; de = arg_list*
0C96   23                     INC   hl   
0C97   56                     LD   d,(hl)   
0C98   23                     INC   hl   
0C99   EB                     EX   de,hl   ; hl = arg_list*
0C9A   ED 5B 05 24            LD   de,(vTemp1)   ; restore de = block*
0C9E   7D                     LD   a,l   ; if arg_list* == null a = 0
0C9F   B4                     OR   h   
0CA0   20 03                  JR   nz,goFunc4   
0CA2   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0CA3   18 0D                  JR   goFunc8   
0CA5                GOFUNC4:      ; allocate locals
0CA5   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0CA6   18 03                  JR   goFunc6   
0CA8                GOFUNC5:      ; loop
0CA8   3B                     DEC   sp   
0CA9   3B                     DEC   sp   
0CAA   3D                     DEC   a   
0CAB                GOFUNC6:      
0CAB   B7                     OR   a   
0CAC   20 FA                  JR   nz,goFunc5   ; end loop
0CAE                GOFUNC7:      
0CAE   23                     INC   hl   ; a = num_args* x 2
0CAF   7E                     LD   a,(hl)   
0CB0   2B                     DEC   hl   
0CB1   87                     ADD   a,a   ; a *= 2
0CB2                GOFUNC8:      
0CB2   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0CB3   44 4D                  LD   bc,hl   
0CB5   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0CB8   85                     ADD   a,l   
0CB9   6F                     LD   l,a   
0CBA   39                     ADD   hl,sp   
0CBB   18 98                  JR   goBlock2   
0CBD                             ; =                              21
0CBD                             ; value _oldValue --            ; uses address in vPointer 15
0CBD                ASSIGN:      
0CBD   E1                     POP   hl   ; discard last accessed value
0CBE   E1                     POP   hl   ; hl = new value
0CBF                ASSIGN0:      
0CBF   EB                     EX   de,hl   ; de = new value
0CC0   2A F9 23               LD   hl,(vPointer)   
0CC3                ASSIGN1:      ; entry point from defineEnd
0CC3   73                     LD   (hl),e   
0CC4   3A F2 23               LD   a,(vDataWidth)   
0CC7   3D                     DEC   a   ; is it byte?
0CC8   28 02                  JR   z,assign2   
0CCA   23                     INC   hl   
0CCB   72                     LD   (hl),d   
0CCC                ASSIGN2:      
0CCC   DD E9                  JP   (ix)   
0CCE                             ; hl = value1, de = value2
0CCE                             ; hl = result
0CCE                EQUALS:      
0CCE   B7                     OR   a   ; reset the carry flag
0CCF   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0CD1   28 16                  JR   z,true1   
0CD3   18 1A                  JR   false1   
0CD5                NOTEQUALS:      
0CD5   B7                     OR   a   ; reset the carry flag
0CD6   ED 52                  SBC   hl,de   
0CD8   20 0F                  JR   nz,true1   
0CDA   18 13                  JR   false1   
0CDC                             ; hl = value1 de = value2
0CDC                             ; hl = result
0CDC                LESSTHANEQ:      
0CDC   B7                     OR   a   
0CDD   ED 52                  SBC   hl,de   
0CDF   18 05                  JR   lessthan1   
0CE1                             ; hl = value1 de = value2
0CE1                             ; hl = result
0CE1                LESSTHAN:      
0CE1   B7                     OR   a   
0CE2   ED 52                  SBC   hl,de   
0CE4   28 09                  JR   z,false1   
0CE6                LESSTHAN1:      
0CE6   FA EF 0C               JP   m,false1   
0CE9                TRUE1:       
0CE9   21 FF FF               LD   hl,TRUE   
0CEC   E5                     PUSH   hl   
0CED   DD E9                  JP   (ix)   
0CEF                NULL1:       
0CEF                FALSE1:      
0CEF   21 00 00               LD   hl,FALSE   
0CF2   E5                     PUSH   hl   
0CF3   DD E9                  JP   (ix)   
0CF5                SPREAD:      
0CF5   E1                     POP   hl   ; hl = array*
0CF6   ED 43 05 24            LD   (vTemp1),bc   ; save bc
0CFA   2B                     DEC   hl   ; bc = length
0CFB   46                     LD   b,(hl)   
0CFC   2B                     DEC   hl   
0CFD   4E                     LD   c,(hl)   
0CFE   23                     INC   hl   ; move back to array 0
0CFF   23                     INC   hl   
0D00   18 0D                  JR   spread3   
0D02                SPREAD1:      
0D02   5E                     LD   e,(hl)   ; e = lsb data at hl
0D03   23                     INC   hl   
0D04   3A F2 23               LD   a,(vDataWidth)   ; data width = 1, d = 0, skip
0D07   57                     LD   d,a   
0D08   15                     DEC   d   
0D09   28 02                  JR   z,spread2   
0D0B   56                     LD   d,(hl)   ; d = msb data at hl
0D0C   23                     INC   hl   
0D0D                SPREAD2:      
0D0D   D5                     PUSH   de   ; return de
0D0E   0B                     DEC   bc   ; count--
0D0F                SPREAD3:      
0D0F   79                     LD   a,c   ; exit loop if bc == 0
0D10   B0                     OR   b   
0D11   20 EF                  JR   nz,spread1   
0D13   ED 4B 05 24            LD   bc,(vTemp1)   ; restore bc
0D17   DD E9                  JP   (ix)   
0D19                             ; shiftLeft
0D19                             ; value count <<
0D19                             ; count variable <<=
0D19                SHIFTLEFT:      
0D19   E1                     POP   hl   ; de = arg_a, hl = arg_b
0D1A   D1                     POP   de   
0D1B   03                     INC   bc   
0D1C   0A                     LD   a,(bc)   
0D1D   FE 3D                  CP   "="   
0D1F   28 02                  JR   z,shiftLeft2   
0D21   0B                     DEC   bc   
0D22   EB                     EX   de,hl   ; de = arg_b, hl = arg_a
0D23                SHIFTLEFT2:      
0D23   ED 43 05 24            LD   (vTemp1),bc   ; save IP
0D27   43                     LD   b,e   ; b = loop counter
0D28   04                     INC   b   ; test for counter=0 case
0D29   18 01                  JR   shiftLeft4   
0D2B                SHIFTLEFT3:      
0D2B   29                     ADD   hl,hl   ; left shift hl
0D2C                SHIFTLEFT4:      
0D2C   10 FD                  DJNZ   shiftLeft3   
0D2E   ED 4B 05 24            LD   bc,(vTemp1)   ; restore IP
0D32   C3 AC 02               JP   sub3   
0D35                             ; shiftRight
0D35                             ; value count >>
0D35                             ; count variable >>=
0D35                SHIFTRIGHT:      
0D35   E1                     POP   hl   ; de = arg_a, hl = arg_b
0D36   D1                     POP   de   
0D37   03                     INC   bc   
0D38   0A                     LD   a,(bc)   
0D39   FE 3D                  CP   "="   
0D3B   28 02                  JR   z,shiftRight2   
0D3D   0B                     DEC   bc   
0D3E   EB                     EX   de,hl   ; de = arg_a, hl = arg_b
0D3F                SHIFTRIGHT2:      
0D3F   ED 43 05 24            LD   (vTemp1),bc   ; save IP
0D43   43                     LD   b,e   ; b = loop counter
0D44   04                     INC   b   ; test for counter=0 case
0D45   18 04                  JR   shiftRight4   
0D47                SHIFTRIGHT3:      
0D47   CB 3C                  SRL   h   ; right shift hl
0D49   CB 1D                  RR   l   
0D4B                SHIFTRIGHT4:      
0D4B   10 FA                  DJNZ   shiftRight3   
0D4D   ED 4B 05 24            LD   bc,(vTemp1)   ; restore IP
0D51   C3 AC 02               JP   sub3   
0D54                             ; division subroutine.
0D54                             ; bc: divisor, de: dividend, hl: remainder
0D54                DIVIDE:      
0D54   21 00 00               LD   hl,0   ; zero the remainder
0D57   3E 10                  LD   a,16   ; loop counter
0D59                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0D59   CB 21                  SLA   c   
0D5B   CB 10                  RL   b   
0D5D   ED 6A                  ADC   hl,hl   
0D5F   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0D61   38 03                  JR   c,divide2   
0D63   0C                     INC   c   
0D64   18 01                  JR   divide3   
0D66                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0D66   19                     ADD   hl,de   
0D67                DIVIDE3:      
0D67   3D                     DEC   a   
0D68   20 EF                  JR   nz,divide1   
0D6A   50 59                  LD   de,bc   ; result from bc to de
0D6C   C9                     RET      
0D6D                DOTNEXT:      
0D6D   3A F4 23               LD   a,(vStrMode)   ; if string mode then exit
0D70   3C                     INC   a   
0D71   20 02                  JR   nz,dotNext1   
0D73   DD E9                  JP   (ix)   
0D75                DOTNEXT1:      
0D75   11 00 22               LD   de,BUFFER   
0D78   2A E8 23               LD   hl,(vBufPtr)   
0D7B   36 00                  LD   (hl),0   ; store NUL at end of string
0D7D   ED 53 E8 23            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0D81   EB                     EX   de,hl   ; hl = BUFFER
0D82   CD 33 0F               CALL   putstr   
0D85   DD E9                  JP   (ix)   
0D87                             ; arg_list - parses arg_list e.g. ab:c
0D87                             ; -- arg_list*
0D87                PARSEARGS:      
0D87   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0D8A   2A EC 23               LD   hl,(vHeapPtr)   ; hl = heap*
0D8D   E5                     PUSH   hl   ; save start of arg_list
0D8E   23                     INC   hl   ; skip length fields to start of string
0D8F   23                     INC   hl   
0D90   03                     INC   bc   ; point to next char
0D91                PARSEARGS1:      
0D91   0A                     LD   a,(bc)   
0D92   FE 3A                  CP   ":"   ; ":" switches from args to locals
0D94   20 03                  JR   nz,parseArgs1a   
0D96   14                     INC   d   ; non zero value local count acts as flag
0D97   18 10                  JR   parseArgs3   
0D99                PARSEARGS1A:      
0D99   FE 61                  CP   "a"   ; < "a" terminates arg_list
0D9B   38 0F                  JR   c,parseArgs4   
0D9D   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0D9F   30 0B                  JR   nc,parseArgs4   
0DA1                PARSEARGS2:      
0DA1   77                     LD   (hl),a   
0DA2   23                     INC   hl   
0DA3   1C                     INC   e   ; increase arg count
0DA4   AF                     XOR   a   
0DA5   B2                     OR   d   
0DA6   28 01                  JR   z,parseArgs3   
0DA8   14                     INC   d   ; if d > 0 increase local count
0DA9                PARSEARGS3:      
0DA9   03                     INC   bc   ; point to next char
0DAA   18 E5                  JR   parseArgs1   
0DAC                PARSEARGS4:      
0DAC   0B                     DEC   bc   
0DAD   AF                     XOR   a   
0DAE   B2                     OR   d   
0DAF   28 01                  JR   z,parseArgs5   
0DB1   15                     DEC   d   ; remove initial inc
0DB2                PARSEARGS5:      
0DB2   23                     INC   hl   
0DB3   22 EC 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0DB6   E1                     POP   hl   ; hl = start of arg_list
0DB7   72                     LD   (hl),d   ; write number of locals at start - 1
0DB8   23                     INC   hl   
0DB9   73                     LD   (hl),e   ; write number of args + locals at start - 2
0DBA   2B                     DEC   hl   
0DBB   E3                     EX   (sp),hl   
0DBC   E9                     JP   (hl)   
0DBD                             ; create block: parses block e.g. 00bbIC4uLi4g
0DBD                             ; -- block*
0DBD                PARSEBLOCK:      
0DBD   C5                     PUSH   bc   ; return pointer to first { of block
0DBE   03                     INC   bc   
0DBF   16 01                  LD   d,1   ; nesting: count first parenthesis
0DC1                PARSEBLOCK1:      ; Skip to end of definition
0DC1   0A                     LD   a,(bc)   ; Get the next character
0DC2   03                     INC   bc   ; Point to next character
0DC3   FE 21                  CP   " " + 1   ; ignore whitespace
0DC5   38 FA                  JR   c,parseBlock1   
0DC7   FE 29                  CP   ")"   
0DC9   28 2D                  JR   z,parseBlock4   
0DCB   FE 7D                  CP   "}"   
0DCD   28 29                  JR   z,parseBlock4   
0DCF   FE 5D                  CP   "]"   
0DD1   28 25                  JR   z,parseBlock4   
0DD3   FE 28                  CP   "("   
0DD5   28 16                  JR   z,parseBlock2   
0DD7   FE 7B                  CP   "{"   
0DD9   28 12                  JR   z,parseBlock2   
0DDB   FE 5B                  CP   "["   
0DDD   28 0E                  JR   z,parseBlock2   
0DDF   FE 27                  CP   "'"   
0DE1   28 0D                  JR   z,parseBlock3   
0DE3   FE 60                  CP   "`"   
0DE5   28 09                  JR   z,parseBlock3   
0DE7   FE 22                  CP   DQ   
0DE9   28 05                  JR   z,parseBlock3   
0DEB   18 D4                  JR   parseBlock1   
0DED                PARSEBLOCK2:      
0DED   14                     INC   d   
0DEE   18 D1                  JR   parseBlock1   
0DF0                PARSEBLOCK3:      
0DF0   3E 80                  LD   a,$80   
0DF2   AA                     XOR   d   
0DF3   57                     LD   d,a   
0DF4   20 CB                  JR   nz,parseBlock1   
0DF6   18 03                  JR   parseBlock5   
0DF8                PARSEBLOCK4:      
0DF8   15                     DEC   d   
0DF9   20 C6                  JR   nz,parseBlock1   ; get the next element
0DFB                PARSEBLOCK5:      
0DFB   60 69                  LD   hl,bc   ; hl = IP
0DFD   11 23 24               LD   de,HEAP   ; is IP pointing to object in heap
0E00   B7                     OR   a   ; IP - HEAP
0E01   ED 52                  SBC   hl,de   
0E03   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0E05   28 1C                  JR   z,parseBlock6   
0E07   60 69                  LD   hl,bc   ; hl = IP
0E09   D1                     POP   de   ; de = block*
0E0A   ED 43 05 24            LD   (vTemp1),bc   ; save IP
0E0E   B7                     OR   a   ; bc = size
0E0F   ED 52                  SBC   hl,de   
0E11   44 4D                  LD   bc,hl   
0E13   EB                     EX   de,hl   ; hl = block* de = heap*
0E14   ED 5B EC 23            LD   de,(vHeapPtr)   
0E18   D5                     PUSH   de   ; return hblock*
0E19   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0E1B   ED 53 EC 23            LD   (vHeapPtr),de   ; heap* += size
0E1F   ED 4B 05 24            LD   bc,(vTemp1)   ; restore IP
0E23                PARSEBLOCK6:      
0E23   0B                     DEC   bc   ; balanced, exit
0E24   E1                     POP   hl   ; hl = block*
0E25   E3                     EX   (sp),hl   ; return to caller
0E26   E9                     JP   (hl)   
0E27                             ; create function
0E27                             ; arg_list* block* -- func*
0E27                CREATEFUNC:      
0E27   E1                     POP   hl   ; save retrn address
0E28   22 09 24               LD   (vTemp3),hl   
0E2B   ED 43 05 24            LD   (vTemp1),bc   ; save IP
0E2F   E1                     POP   hl   ; hl = block*
0E30   22 07 24               LD   (vTemp2),hl   ; save block*
0E33   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0E36   FD 56 05               LD   d,(iy+5)   
0E39   7B                     LD   a,e   ; if arg_list == null then make a func
0E3A   B2                     OR   d   
0E3B   20 09                  JR   nz,createFunc0   
0E3D   21 00 00               LD   hl,0   ; partial_array = null
0E40   ED 5B EC 23            LD   de,(vHeapPtr)   ; de = compile*
0E44   18 65                  JR   createFunc5   
0E46                CREATEFUNC0:      
0E46   E1                     POP   hl   ; hl = inner_arg_list*
0E47   E5                     PUSH   hl   ; save inner_arg_list
0E48   ED 5B EC 23            LD   de,(vHeapPtr)   ; de = compile*
0E4C   7E                     LD   a,(hl)   ; compile inner_num_locals
0E4D   4F                     LD   c,a   ; b = inner_num_locals
0E4E   12                     LD   (de),a   
0E4F   23                     INC   hl   
0E50   13                     INC   de   
0E51   7E                     LD   a,(hl)   ; compile inner_length
0E52   12                     LD   (de),a   
0E53   91                     SUB   c   ; a = inner_num args
0E54   23                     INC   hl   
0E55   13                     INC   de   
0E56   B7                     OR   a   ; compile args if inner_length > 0
0E57   28 05                  JR   z,createFunc1   
0E59   4F                     LD   c,a   ; bc = a
0E5A   06 00                  LD   b,0   
0E5C   ED B0                  LDIR      
0E5E                CREATEFUNC1:      
0E5E   EB                     EX   de,hl   ; hl = outer_arg_list
0E5F   FD 5E 04               LD   e,(iy+4)   
0E62   FD 56 05               LD   d,(iy+5)   
0E65   EB                     EX   de,hl   
0E66   23                     INC   hl   ; a = outer_length
0E67   7E                     LD   a,(hl)   
0E68   23                     INC   hl   
0E69   B7                     OR   a   
0E6A   28 05                  JR   z,createFunc2   
0E6C   4F                     LD   c,a   
0E6D   06 00                  LD   b,0   
0E6F   ED B0                  LDIR      ; append outer_args
0E71                CREATEFUNC2:      ; a = outer_length
0E71   47                     LD   b,a   ; b = a = outer_length
0E72   2A EC 23               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0E75   23                     INC   hl   
0E76   7E                     LD   a,(hl)   ; add outer_length to new length
0E77   80                     ADD   a,b   
0E78   77                     LD   (hl),a   
0E79   2B                     DEC   hl   
0E7A   78                     LD   a,b   ; save outer_length in a'
0E7B   08                     EX   af,af'   
0E7C   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0E7D   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0E7E   B7                     OR   a   
0E7F   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0E81   4F                     LD   c,a   ; c = inner_num_locals
0E82   06 00                  LD   b,0   ; bc = inner_num_locals
0E84   23                     INC   hl   ; a = inner_length
0E85   7E                     LD   a,(hl)   
0E86   91                     SUB   c   ; a = inner_num_args
0E87   23                     INC   hl   ; hl = inner_arg_chars
0E88   85                     ADD   a,l   ; hl += a
0E89   6F                     LD   l,a   
0E8A   3E 00                  LD   a,0   
0E8C   84                     ADD   a,h   
0E8D   67                     LD   h,a   
0E8E   ED B0                  LDIR      ; append inner_locals
0E90                CREATEFUNC2A:      
0E90   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0E91   12                     LD   (de),a   ; compile partial_array length field
0E92   13                     INC   de   
0E93   AF                     XOR   a   
0E94   12                     LD   (de),a   
0E95   13                     INC   de   
0E96   D5                     PUSH   de   ; push partial_array*
0E97   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0E98   FD 5E 02               LD   e,(iy+2)   
0E9B   FD 56 03               LD   d,(iy+3)   
0E9E   EB                     EX   de,hl   
0E9F                CREATEFUNC3:      
0E9F   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0EA0   4E                     LD   c,(hl)   
0EA1   2B                     DEC   hl   
0EA2   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0EA3   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0EA4   13                     INC   de   
0EA5   79                     LD   a,c   
0EA6   12                     LD   (de),a   
0EA7   13                     INC   de   
0EA8   10 F5                  DJNZ   createFunc3   ; b = outer_length
0EAA                CREATEFUNC4:      
0EAA   E1                     POP   hl   ; hl = partial_array*
0EAB                CREATEFUNC5:      
0EAB   C1                     POP   bc   ; bc = new_arg_list*
0EAC   D5                     PUSH   de   ; return new func*
0EAD   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0EAE   73                     LD   (hl),e   ; compile partial_array* to func
0EAF   23                     INC   hl   
0EB0   72                     LD   (hl),d   
0EB1   23                     INC   hl   
0EB2   ED 5B 07 24            LD   de,(vTemp2)   ; de = block*
0EB6   73                     LD   (hl),e   ; compile block* to func
0EB7   23                     INC   hl   
0EB8   72                     LD   (hl),d   
0EB9   23                     INC   hl   
0EBA   71                     LD   (hl),c   ; compile new_arg_list* to func
0EBB   23                     INC   hl   
0EBC   70                     LD   (hl),b   
0EBD   23                     INC   hl   
0EBE   22 EC 23               LD   (vHeapPtr),hl   ; bump heap ptr
0EC1   ED 4B 05 24            LD   bc,(vTemp1)   ; restore IP
0EC5   2A 09 24               LD   hl,(vTemp3)   ; jump to return address
0EC8   E9                     JP   (hl)   
0EC9                             ;*******************************************************************
0EC9                             ; general routines
0EC9                             ;*******************************************************************
0EC9                             ; followed by a table
0EC9                             ; indexed on the 0-25 lowercase letter
0EC9                             ; db lsb(addr)
0EC9                             ; the final item index 26 matches any other char
0EC9                LOWERCASETABLE:      
0EC9   03                     INC   bc   
0ECA   0A                     LD   a,(bc)   
0ECB   FE 7B                  CP   "z"+1   
0ECD   30 0B                  JR   nc,lowerCaseTable2   
0ECF   D6 61                  SUB   "a"   
0ED1   38 07                  JR   c,lowerCaseTable2   
0ED3                LOWERCASETABLE1:      
0ED3   E1                     POP   hl   
0ED4   85                     ADD   a,l   
0ED5   6F                     LD   l,a   
0ED6   6E                     LD   l,(hl)   ; must have the same msb as the table
0ED7   C3 E0 0E               JP   commandTable1   
0EDA                LOWERCASETABLE2:      
0EDA   3E 1A                  LD   a,26   
0EDC   0B                     DEC   bc   
0EDD   18 F4                  JR   lowerCaseTable1   
0EDF                             ; followed by a table
0EDF                             ; db char
0EDF                             ; dw addr
0EDF                             ; the final item must have char == NUL
0EDF                COMMANDTABLE:      
0EDF   E1                     POP   hl   
0EE0                COMMANDTABLE1:      
0EE0   03                     INC   bc   
0EE1                COMMANDTABLE2:      
0EE1   AF                     XOR   a   
0EE2   BE                     CP   (hl)   
0EE3   20 03                  JR   nz,commandTable3   
0EE5   0B                     DEC   bc   
0EE6   18 09                  JR   commandTable4   
0EE8                COMMANDTABLE3:      
0EE8   0A                     LD   a,(bc)   
0EE9   BE                     CP   (hl)   
0EEA   28 05                  JR   z,commandTable4   
0EEC   23                     INC   hl   
0EED   23                     INC   hl   
0EEE   23                     INC   hl   
0EEF   18 F0                  JR   commandTable2   
0EF1                COMMANDTABLE4:      
0EF1   23                     INC   hl   
0EF2   5E                     LD   e,(hl)   
0EF3   23                     INC   hl   
0EF4   56                     LD   d,(hl)   
0EF5   EB                     EX   de,hl   
0EF6   E9                     JP   (hl)   
0EF7                             ; followed by a table
0EF7                             ; db char
0EF7                             ; db char - if null only match on first char
0EF7                             ; dw addr
0EF7                             ; the final item must have char == NUL
0EF7                CMDTABLE:      
0EF7   E1                     POP   hl   
0EF8                CMDTABLE1:      
0EF8                CMDTABLE2:      
0EF8   56                     LD   d,(hl)   
0EF9   23                     INC   hl   
0EFA   5E                     LD   e,(hl)   
0EFB   23                     INC   hl   
0EFC   AF                     XOR   a   ; if d == 0, matched
0EFD   BA                     CP   d   
0EFE   28 13                  JR   z,cmdTable5   
0F00   03                     INC   bc   ; match?
0F01   0A                     LD   a,(bc)   
0F02   BA                     CP   d   
0F03   20 09                  JR   nz,cmdTable4   
0F05                CMDTABLE3:      
0F05   AF                     XOR   a   ; if e == 0, matched
0F06   BB                     CP   e   
0F07   28 0A                  JR   z,cmdTable5   
0F09   03                     INC   bc   
0F0A   0A                     LD   a,(bc)   ; match?
0F0B   BB                     CP   e   
0F0C   28 05                  JR   z,cmdTable5   
0F0E                CMDTABLE4:      ; no match, restore bc, go to next table entry
0F0E   0B                     DEC   bc   
0F0F   23                     INC   hl   
0F10   23                     INC   hl   
0F11   18 E5                  JR   cmdTable2   
0F13                CMDTABLE5:      ; matched, jump to addr
0F13   5E                     LD   e,(hl)   
0F14   23                     INC   hl   
0F15   56                     LD   d,(hl)   
0F16   EB                     EX   de,hl   
0F17   E9                     JP   (hl)   
0F18                GETVARADDR:      
0F18   21 00 00               LD   hl,0   
0F1B   FE 7B                  CP   "z"+1   ; if a > z then exit
0F1D   D0                     RET   nc   
0F1E   D6 41                  SUB   "A"   ; a - 65
0F20   D8                     RET   c   ; if < A then exit
0F21   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0F23   38 05                  JR   c,getVarAddr1   
0F25   D6 06                  SUB   "a"-("Z"+1)   
0F27   FE 1A                  CP   "Z"-"A"+1   
0F29   D8                     RET   c   ; if < a then exit
0F2A                GETVARADDR1:      
0F2A   87                     ADD   a,a   ; double a
0F2B   6F                     LD   l,a   
0F2C   26 23                  LD   h,msb(VARS)   
0F2E   C9                     RET      
0F2F                PUTSTR0:      
0F2F   CD 85 00               CALL   putchar   
0F32   23                     INC   hl   
0F33                PUTSTR:      
0F33   7E                     LD   a,(hl)   
0F34   B7                     OR   a   
0F35   20 F8                  JR   nz,putstr0   
0F37   C9                     RET      
0F38                             ; **************************************************************************
0F38                             ; calculate nesting value
0F38                             ; a is char to be tested,
0F38                             ; e is the nesting value (initially 0)
0F38                             ; e is increased by ( and [
0F38                             ; e is decreased by ) and ]
0F38                             ; e has its bit 7 toggled by `
0F38                             ; limited to 127 levels
0F38                             ; **************************************************************************
0F38                NESTING:      
0F38   FE 22                  CP   DQ   ; quote char
0F3A   28 06                  JR   z,nesting0   
0F3C   FE 60                  CP   "`"   ; quote char
0F3E   28 02                  JR   z,nesting0   
0F40   18 0A                  JR   nesting1   
0F42                NESTING0:      
0F42   CB 7B                  BIT   7,e   
0F44   28 03                  JR   z,nesting1a   
0F46   CB BB                  RES   7,e   
0F48   C9                     RET      
0F49                NESTING1A:      
0F49   CB FB                  SET   7,e   
0F4B   C9                     RET      
0F4C                NESTING1:      
0F4C   CB 7B                  BIT   7,e   
0F4E   C0                     RET   nz   
0F4F   FE 7B                  CP   "{"   
0F51   28 08                  JR   z,nesting2   
0F53   FE 5B                  CP   "["   
0F55   28 04                  JR   z,nesting2   
0F57   FE 28                  CP   "("   
0F59   20 02                  JR   nz,nesting3   
0F5B                NESTING2:      
0F5B   1C                     INC   e   
0F5C   C9                     RET      
0F5D                NESTING3:      
0F5D   FE 7D                  CP   "}"   
0F5F   28 07                  JR   z,nesting4   
0F61   FE 5D                  CP   "]"   
0F63   28 03                  JR   z,nesting4   
0F65   FE 29                  CP   ")"   
0F67   C0                     RET   nz   
0F68                NESTING4:      
0F68   1D                     DEC   e   
0F69   C9                     RET      
0F6A                PROMPT:      
0F6A   CD 7A 0F               CALL   printStr   
0F6D   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0F72   C9                     RET      
0F73                CRLF:        
0F73   CD 7A 0F               CALL   printStr   
0F76   0D 0A 00               .CSTR   "\r\n"   
0F79   C9                     RET      
0F7A                             ; prints a null teminated string
0F7A                             ; the string should be immediately following the call
0F7A                PRINTSTR:      
0F7A   E3                     EX   (sp),hl   ; swap			
0F7B   CD 33 0F               CALL   putstr   
0F7E   23                     INC   hl   ; inc past NUL
0F7F   E3                     EX   (sp),hl   ; put it back	
0F80   C9                     RET      
0F81                INIT:        
0F81   21 F0 01               LD   hl,titleStr   
0F84   11 0F 24               LD   de,titleBuf   
0F87   06 14                  LD   b,20   
0F89                INIT1:       
0F89   1A                     LD   a,(de)   
0F8A   BE                     CP   (hl)   
0F8B   20 17                  JR   nz,coldBoot0   
0F8D   13                     INC   de   
0F8E   23                     INC   hl   
0F8F   10 F8                  DJNZ   init1   
0F91                WARMINIT:      
0F91   ED 4B FD 23            LD   bc,(vSavedIP)   ; restore IP
0F95   ED 7B FF 23            LD   sp,(vSavedSP)   ; restore SP
0F99   DD 2A 01 24            LD   ix,(vSavedNext)   ; restore Next
0F9D   FD 2A 03 24            LD   iy,(vSavedBP)   ; restore BP
0FA1   C3 DB 0F               JP   start1   
0FA4                COLDBOOT0:      
0FA4   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0FA7   11 0F 24               LD   de,titleBuf   
0FAA   06 14                  LD   b,20   
0FAC   ED B0                  LDIR      
0FAE                COLDINIT:      
0FAE   21 DE 01               LD   hl,isysVars   
0FB1   11 E6 23               LD   de,sysVars   
0FB4   01 12 00               LD   bc,6 * 2 + 6   
0FB7   ED B0                  LDIR      
0FB9   21 00 23               LD   hl,vars   ; 52 vars LO HI
0FBC   06 34                  LD   b,26*2   
0FBE   AF                     XOR   a   
0FBF                COLDBOOT1:      
0FBF   77                     LD   (hl),a   
0FC0   23                     INC   hl   
0FC1   10 FC                  DJNZ   coldBoot1   
0FC3   DD 2A EA 23            LD   ix,(vNext)   
0FC7   FD 21 00 21            LD   iy,STACK   
0FCB   C9                     RET      
0FCC                COLDSTART:      
0FCC   31 00 21               LD   sp,STACK   
0FCF   CD A4 0F               CALL   coldBoot0   
0FD2   C3 DB 0F               JP   start1   
0FD5                START:       
0FD5   31 00 21               LD   sp,STACK   ; start Monty
0FD8   CD 81 0F               CALL   init   ; setups
0FDB                START1:      
0FDB   21 0F 24               LD   hl,titleBuf   
0FDE   CD 33 0F               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
0FE1                INTERPRET:      
0FE1   CD 6A 0F               CALL   prompt   
0FE4   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0FE7   21 00 21               LD   hl,TIB   
0FEA   22 E6 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0FED                INTERPRET2:      ; calculate nesting
0FED   1E 00                  LD   e,0   ; initilize nesting value
0FEF   C5                     PUSH   bc   ; save offset into TIB,
0FF0                             ; bc is also the count of chars in TIB
0FF0   21 00 21               LD   hl,TIB   ; hl is start of TIB
0FF3   18 06                  JR   interpret4   
0FF5                INTERPRET3:      
0FF5   7E                     LD   a,(hl)   ; a = char in TIB
0FF6   23                     INC   hl   ; inc pointer into TIB
0FF7   0B                     DEC   bc   ; dec count of chars in TIB
0FF8   CD 38 0F               CALL   nesting   ; update nesting value
0FFB                INTERPRET4:      
0FFB   79                     LD   a,c   ; is count zero?
0FFC   B0                     OR   b   
0FFD   20 F6                  JR   nz,interpret3   ; if not loop
0FFF   C1                     POP   bc   ; restore offset into TIB
1000                INTERPRET5:      
1000   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
1003   FE 20                  CP   $20   ; compare to space
1005   30 14                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
1007   FE 00                  CP   NUL   ; is it end of string? NUL end of string
1009   28 31                  JR   z,interpret8   
100B   FE 0D                  CP   "\r"   ; carriage return? ascii 13
100D   28 1A                  JR   z,interpret7   ; if anything else its macro/control
100F   FE 08                  CP   CTRL_H   
1011   CA 8D 10               JP   z,backSpace_   
1014   FE 0A                  CP   CTRL_J   
1016   CA 9D 10               JP   z,reEdit_   
1019                INTERPRET5A:      
1019   18 D2                  JR   interpret2   
101B                INTERPRET6:      
101B   21 00 21               LD   hl,TIB   
101E   09                     ADD   hl,bc   
101F   77                     LD   (hl),a   ; store the character in textbuf
1020   03                     INC   bc   
1021   CD 85 00               CALL   putchar   ; echo character to screen
1024   CD 38 0F               CALL   nesting   
1027   18 D7                  JR   interpret5   ; wait for next character
1029                INTERPRET7:      
1029   21 00 21               LD   hl,TIB   
102C   09                     ADD   hl,bc   
102D   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
102F   23                     INC   hl   
1030   36 0A                  LD   (hl),"\n"   
1032   23                     INC   hl   
1033   03                     INC   bc   
1034   03                     INC   bc   
1035   CD 73 0F               CALL   crlf   ; echo character to screen
1038   7B                     LD   a,e   ; if zero nesting append and ETX after \r
1039   B7                     OR   a   
103A   20 C4                  JR   nz,interpret5   
103C                INTERPRET8:      
103C   21 00 21               LD   hl,TIB   
103F   09                     ADD   hl,bc   
1040   22 E6 23               LD   (vTIBPtr),hl   
1043   01 00 21               LD   bc,TIB   
1046   ED 43 FD 23            LD   (vSavedIP),bc   ; save IP
104A   ED 73 FF 23            LD   (vSavedSP),sp   ; save SP
104E   DD 22 01 24            LD   (vSavedNext),ix   ; save Next
1052   FD 22 03 24            LD   (vSavedBP),iy   ; save BP
1056   0B                     DEC   bc   
1057                NEXT:        
1057   03                     INC   bc   ; Increment the IP
1058   0A                     LD   a,(bc)   ; Get the next character and dispatch
1059   FE 20                  CP   " "   ; whitespace?
105B   28 FA                  JR   z,next   ; space? ignore
105D   38 0D                  JR   c,next1   
105F   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
1061   6F                     LD   l,a   ; index into table
1062   26 01                  LD   h,msb(opcodes)   ; start address of jump table
1064   6E                     LD   l,(hl)   ; get low jump address
1065   24                     INC   h   ; page 2
1066   FE BA                  CP   "Z" - "!" + 1 + $80   
1068   38 01                  JR   c,next0   
106A   24                     INC   h   ; page 3
106B                NEXT0:       
106B   E9                     JP   (hl)   ; Jump to routine
106C                NEXT1:       
106C   FE 00                  CP   NUL   ; end of input string?
106E   28 03                  JR   z,exit   
1070   C3 E1 0F               JP   interpret   ; no, other whitespace, macros?
1073                EXIT:        
1073   03                     INC   bc   
1074   60 69                  LD   hl,bc   
1076   E9                     JP   (hl)   
1077                RUN:         
1077   C1                     POP   bc   
1078   0B                     DEC   bc   
1079   DD E9                  JP   (ix)   
107B                ERROR:       
107B   E5                     PUSH   hl   
107C   CD 77 10               CALL   run   
107F   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
108A   C3 E1 0F               JP   interpret   
108D                BACKSPACE_:      
108D   79                     LD   a,c   
108E   B0                     OR   b   
108F   CA ED 0F               JP   z,interpret2   
1092   0B                     DEC   bc   
1093   CD 7A 0F               CALL   printStr   
1096   08 20 08 00            .CSTR   "\b \b"   
109A   C3 ED 0F               JP   interpret2   
109D                REEDIT_:      
109D   CD 7A 0F               CALL   printStr   
10A0   0D 3E 20 00            .CSTR   "\r> "   
10A4   21 00 21               LD   hl,TIB   
10A7   18 04                  JR   reEdit1   
10A9                REEDIT0:      
10A9   CD 85 00               CALL   putchar   
10AC   23                     INC   hl   
10AD                REEDIT1:      
10AD   7E                     LD   a,(hl)   
10AE   FE 0D                  CP   "\r"   
10B0   20 F7                  JR   nz,reEdit0   
10B2   11 00 21               LD   de,TIB   
10B5   B7                     OR   a   
10B6   ED 52                  SBC   hl,de   
10B8   44 4D                  LD   bc,hl   
10BA   C3 ED 0F               JP   interpret2   
10BD                F1:          
10BD                F2:          
10BD                F3:          
10BD                F4:          
10BD                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VTIBPTR:   DS   2   ; 
23E8                VBUFPTR:   DS   2   ; 
23EA                VNEXT:    DS   2   ; 
23EC                VHEAPPTR:   DS   2   ; 
23EE                VDEFINE:   DS   2   ; 
23F0                VRECUR:   DS   2   ; 
23F2                VDATAWIDTH:   DS   1   ; 
23F3                VNUMBASE:   DS   1   ; 
23F4                VSTRMODE:   DS   1   ; 
23F5                VHEXPREFIX:   DS   1   
23F6                          DS   1   
23F7                          DS   1   
23F8                          DS   1   
23F9                             ; uninitialised sys variables (preserved)
23F9                VPOINTER:   DS   2   ; 
23FB                VREMAIN:   DS   2   ; 
23FD                VSAVEDIP:   DS   2   ; 
23FF                VSAVEDSP:   DS   2   ; 
2401                VSAVEDNEXT:   DS   2   ; 
2403                VSAVEDBP:   DS   2   ; 
2405                             ; uninitialised sys variables (unpreserved)
2405                VTEMP1:   DS   2   ; 
2407                VTEMP2:   DS   2   ; 
2409                VTEMP3:   DS   2   ; 
240B                VLASTDEF:   DS   2   ; 
240D                TBPTR:    DS   2   ; reserved for tests
240F                TITLEBUF:   DS   20   
2423                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 15
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 172 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1436 IN MAIN.asm
                    > USED AT LINE 1446 IN MAIN.asm
                    > USED AT LINE 2511 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1451 IN MAIN.asm
                    > USED AT LINE 2352 IN MAIN.asm
                    > USED AT LINE 2533 IN MAIN.asm
                    > USED AT LINE 2617 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1161 IN MAIN.asm
                    > USED AT LINE 1228 IN MAIN.asm
                    > USED AT LINE 1875 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1166 IN MAIN.asm
                    > USED AT LINE 1225 IN MAIN.asm
                    > USED AT LINE 1880 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 620 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
                    > USED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
                    > USED AT LINE 866 IN MAIN.asm
                    > USED AT LINE 874 IN MAIN.asm
                    > USED AT LINE 881 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 891 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
                    > USED AT LINE 928 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
                    > USED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 963 IN MAIN.asm
                    > USED AT LINE 968 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1428 IN MAIN.asm
                    > USED AT LINE 1430 IN MAIN.asm
                    > USED AT LINE 1432 IN MAIN.asm
                    > USED AT LINE 2514 IN MAIN.asm
                    > USED AT LINE 2582 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 2077 IN MAIN.asm
                    > USED AT LINE 2371 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2519 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2521 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2452 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 171 IN MAIN.asm
                    > USED AT LINE 2427 IN MAIN.asm
                    > USED AT LINE 2446 IN MAIN.asm
COLON_:             0204 DEFINED AT LINE 176 IN MAIN.asm
COMMA_:             0207 DEFINED AT LINE 179 IN MAIN.asm
DOLLAR_:            020A DEFINED AT LINE 182 IN MAIN.asm
DQUOTE_:            020D DEFINED AT LINE 185 IN MAIN.asm
QUOTE_:             020D DEFINED AT LINE 186 IN MAIN.asm
DOT_:               0210 DEFINED AT LINE 189 IN MAIN.asm
PERCENT_:           0213 DEFINED AT LINE 192 IN MAIN.asm
QUESTION_:          0216 DEFINED AT LINE 195 IN MAIN.asm
LPAREN_:            0219 DEFINED AT LINE 198 IN MAIN.asm
SLASH_:             021C DEFINED AT LINE 201 IN MAIN.asm
NUM_:               021F DEFINED AT LINE 204 IN MAIN.asm
SEMICOLON_:         0222 DEFINED AT LINE 207 IN MAIN.asm
BANG_:              0225 DEFINED AT LINE 210 IN MAIN.asm
BANG:               0225 DEFINED AT LINE 211 IN MAIN.asm
NOT:                0230 DEFINED AT LINE 219 IN MAIN.asm
                    > USED AT LINE 215 IN MAIN.asm
EQ_:                0236 DEFINED AT LINE 223 IN MAIN.asm
EQ:                 0236 DEFINED AT LINE 224 IN MAIN.asm
EQ0:                0240 DEFINED AT LINE 231 IN MAIN.asm
                    > USED AT LINE 228 IN MAIN.asm
EQ1:                0241 DEFINED AT LINE 233 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
GT_:                0245 DEFINED AT LINE 237 IN MAIN.asm
GT:                 0245 DEFINED AT LINE 238 IN MAIN.asm
LT_:                0250 DEFINED AT LINE 246 IN MAIN.asm
LT:                 0250 DEFINED AT LINE 247 IN MAIN.asm
LT1:                0259 DEFINED AT LINE 254 IN MAIN.asm
                    > USED AT LINE 245 IN MAIN.asm
HASH_:              0262 DEFINED AT LINE 262 IN MAIN.asm
HASH:               0262 DEFINED AT LINE 263 IN MAIN.asm
ARRAYINDEX:         0262 DEFINED AT LINE 264 IN MAIN.asm
ARRAYINDEX0:        026A DEFINED AT LINE 270 IN MAIN.asm
ARRAYINDEX1:        026B DEFINED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
ARRAYINDEX2:        0277 DEFINED AT LINE 281 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
RPAREN_:            027A DEFINED AT LINE 286 IN MAIN.asm
RPAREN:             027A DEFINED AT LINE 288 IN MAIN.asm
AMPER_:             0282 DEFINED AT LINE 296 IN MAIN.asm
AMPER:              0282 DEFINED AT LINE 297 IN MAIN.asm
AND:                0282 DEFINED AT LINE 298 IN MAIN.asm
MINUS_:             028C DEFINED AT LINE 316 IN MAIN.asm
MINUS:              028C DEFINED AT LINE 317 IN MAIN.asm
SUB:                0298 DEFINED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 322 IN MAIN.asm
SUB1:               02A2 DEFINED AT LINE 332 IN MAIN.asm
                    > USED AT LINE 329 IN MAIN.asm
SUB2:               02A9 DEFINED AT LINE 338 IN MAIN.asm
                    > USED AT LINE 335 IN MAIN.asm
SUB3:               02AC DEFINED AT LINE 341 IN MAIN.asm
                    > USED AT LINE 995 IN MAIN.asm
                    > USED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
STAR_:              02B4 DEFINED AT LINE 347 IN MAIN.asm
STAR:               02B4 DEFINED AT LINE 348 IN MAIN.asm
MUL:                02BC DEFINED AT LINE 354 IN MAIN.asm
MUL2:               02BE DEFINED AT LINE 357 IN MAIN.asm
MUL3:               02C6 DEFINED AT LINE 362 IN MAIN.asm
                    > USED AT LINE 371 IN MAIN.asm
PLUS_:              02D8 DEFINED AT LINE 377 IN MAIN.asm
PLUS:               02D8 DEFINED AT LINE 378 IN MAIN.asm
ADD:                02D8 DEFINED AT LINE 379 IN MAIN.asm
ADD1:               02E3 DEFINED AT LINE 387 IN MAIN.asm
                    > USED AT LINE 383 IN MAIN.asm
ADD3:               02E7 DEFINED AT LINE 392 IN MAIN.asm
                    > USED AT LINE 307 IN MAIN.asm
                    > USED AT LINE 373 IN MAIN.asm
                    > USED AT LINE 580 IN MAIN.asm
                    > USED AT LINE 1270 IN MAIN.asm
                    > USED AT LINE 1516 IN MAIN.asm
ADD4:               02F1 DEFINED AT LINE 400 IN MAIN.asm
                    > USED AT LINE 396 IN MAIN.asm
UPCASE_:            02F4 DEFINED AT LINE 404 IN MAIN.asm
UPCASE:             02F4 DEFINED AT LINE 405 IN MAIN.asm
LOWCASE_:           0300 DEFINED AT LINE 414 IN MAIN.asm
LOWCASE:            0300 DEFINED AT LINE 415 IN MAIN.asm
IDENT1:             0305 DEFINED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 408 IN MAIN.asm
LBRACK_:            0312 DEFINED AT LINE 431 IN MAIN.asm
LBRACK:             0312 DEFINED AT LINE 432 IN MAIN.asm
ARRAYSTART:         0312 DEFINED AT LINE 433 IN MAIN.asm
BACKSLASH_:         032E DEFINED AT LINE 448 IN MAIN.asm
BACKSLASH:          032E DEFINED AT LINE 449 IN MAIN.asm
LAMBDA:             032E DEFINED AT LINE 450 IN MAIN.asm
LAMBDA1:            0333 DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
LAMBDA2:            0343 DEFINED AT LINE 462 IN MAIN.asm
                    > USED AT LINE 459 IN MAIN.asm
RBRACK_:            034F DEFINED AT LINE 470 IN MAIN.asm
RBRACK:             034F DEFINED AT LINE 471 IN MAIN.asm
ARRAYEND:           034F DEFINED AT LINE 472 IN MAIN.asm
ARRAYEND1:          036B DEFINED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
ARRAYEND2:          037B DEFINED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 495 IN MAIN.asm
ARRAYEND3:          0380 DEFINED AT LINE 503 IN MAIN.asm
                    > USED AT LINE 488 IN MAIN.asm
CARET_:             039F DEFINED AT LINE 524 IN MAIN.asm
CARET:              039F DEFINED AT LINE 528 IN MAIN.asm
GO:                 039F DEFINED AT LINE 529 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03A0 DEFINED AT LINE 531 IN MAIN.asm
                    > USED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 1553 IN MAIN.asm
                    > USED AT LINE 1723 IN MAIN.asm
GO2:                03A6 DEFINED AT LINE 536 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
GRAVE_:             03B5 DEFINED AT LINE 545 IN MAIN.asm
GRAVE:              03B5 DEFINED AT LINE 546 IN MAIN.asm
PRINTLITERAL:       03B5 DEFINED AT LINE 547 IN MAIN.asm
PRINTLITERAL0:      03BC DEFINED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
PRINTLITERAL1:      03BF DEFINED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 550 IN MAIN.asm
LBRACE_:            03CB DEFINED AT LINE 562 IN MAIN.asm
LBRACE:             03CB DEFINED AT LINE 563 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
PIPE_:              03D0 DEFINED AT LINE 569 IN MAIN.asm
PIPE:               03D0 DEFINED AT LINE 570 IN MAIN.asm
OR:                 03D0 DEFINED AT LINE 571 IN MAIN.asm
RBRACE_:            03DB DEFINED AT LINE 582 IN MAIN.asm
TILDE_:             03DE DEFINED AT LINE 586 IN MAIN.asm
UNDERSCORE_:        03E1 DEFINED AT LINE 589 IN MAIN.asm
CHAR:               03E1 DEFINED AT LINE 590 IN MAIN.asm
AT_:                03E9 DEFINED AT LINE 598 IN MAIN.asm
AT:                 03E9 DEFINED AT LINE 599 IN MAIN.asm
ADDR:               03E9 DEFINED AT LINE 600 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 611 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 612 IN MAIN.asm
PRINTCHAR:          040F DEFINED AT LINE 625 IN MAIN.asm
                    > USED AT LINE 617 IN MAIN.asm
PRINTSTRING:        041E DEFINED AT LINE 636 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
PRINTSTRING0:       0425 DEFINED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 647 IN MAIN.asm
PRINTSTRING1:       0428 DEFINED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
PRINTNUMBER:        0433 DEFINED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 621 IN MAIN.asm
PRINTDEC:           043E DEFINED AT LINE 661 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
PRINTDEC1:          044C DEFINED AT LINE 669 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
PRINTDEC2:          045B DEFINED AT LINE 681 IN MAIN.asm
                    > USED AT LINE 670 IN MAIN.asm
PRINTDEC3:          046B DEFINED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 683 IN MAIN.asm
PRINTDEC4:          048B DEFINED AT LINE 709 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
                    > USED AT LINE 700 IN MAIN.asm
                    > USED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 704 IN MAIN.asm
                    > USED AT LINE 707 IN MAIN.asm
PRINTDEC5:          048D DEFINED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 714 IN MAIN.asm
PRINTDEC6:          049D DEFINED AT LINE 723 IN MAIN.asm
                    > USED AT LINE 718 IN MAIN.asm
PRINTDEC7:          049E DEFINED AT LINE 725 IN MAIN.asm
                    > USED AT LINE 722 IN MAIN.asm
PRINTHEX:           04A4 DEFINED AT LINE 736 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
PRINTHEX1:          04B0 DEFINED AT LINE 743 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
PRINTHEX2:          04BB DEFINED AT LINE 750 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
PRINTHEX3:          04CA DEFINED AT LINE 759 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 752 IN MAIN.asm
PRINTHEX4:          04D3 DEFINED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 782 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 783 IN MAIN.asm
COMMAND_A_:         0526 DEFINED AT LINE 819 IN MAIN.asm
COMMAND_B_:         0538 DEFINED AT LINE 833 IN MAIN.asm
COMMAND_D_:         0544 DEFINED AT LINE 843 IN MAIN.asm
COMMAND_F_:         054A DEFINED AT LINE 849 IN MAIN.asm
COMMAND_H_:         0565 DEFINED AT LINE 869 IN MAIN.asm
COMMAND_I_:         056E DEFINED AT LINE 878 IN MAIN.asm
COMMAND_M_:         0574 DEFINED AT LINE 884 IN MAIN.asm
OUTPUT_:            057A DEFINED AT LINE 890 IN MAIN.asm
COMMAND_P_:         057D DEFINED AT LINE 894 IN MAIN.asm
COMMAND_Q_:         0580 DEFINED AT LINE 899 IN MAIN.asm
COMMAND_R_:         0586 DEFINED AT LINE 905 IN MAIN.asm
COMMAND_S_:         0592 DEFINED AT LINE 915 IN MAIN.asm
TRUE_:              05A7 DEFINED AT LINE 931 IN MAIN.asm
COMMAND_V_:         05AA DEFINED AT LINE 935 IN MAIN.asm
COMMAND_W_:         05BF DEFINED AT LINE 951 IN MAIN.asm
XOR_:               05C5 DEFINED AT LINE 957 IN MAIN.asm
COMMAND_NOP_:       05C8 DEFINED AT LINE 962 IN MAIN.asm
COMMAND_DEFAULT_:   05CB DEFINED AT LINE 967 IN MAIN.asm
NOP:                05CE DEFINED AT LINE 973 IN MAIN.asm
                    > USED AT LINE 964 IN MAIN.asm
DIV:                05D0 DEFINED AT LINE 977 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
DIV2:               05DA DEFINED AT LINE 986 IN MAIN.asm
                    > USED AT LINE 983 IN MAIN.asm
ABSOLUTE:           05EB DEFINED AT LINE 999 IN MAIN.asm
                    > USED AT LINE 821 IN MAIN.asm
ABSOLUTE1:          05F6 DEFINED AT LINE 1009 IN MAIN.asm
                    > USED AT LINE 1002 IN MAIN.asm
ADDROF:             05F9 DEFINED AT LINE 1015 IN MAIN.asm
                    > USED AT LINE 823 IN MAIN.asm
ADDROF2:            05FF DEFINED AT LINE 1020 IN MAIN.asm
ARRAYLENGTH:        0601 DEFINED AT LINE 1025 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 44
ARRAYLENGTH1:       0607 DEFINED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1043 IN MAIN.asm
                    > USED AT LINE 1046 IN MAIN.asm
ARRAYSIZE:          060A DEFINED AT LINE 1038 IN MAIN.asm
                    > USED AT LINE 829 IN MAIN.asm
PERFORMM_1486S1039: 0611 DEFINED AT LINE 45
                    > USED AT LINE 43
BREAK:              061E DEFINED AT LINE 1051 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
BREAK1:             0625 DEFINED AT LINE 1057 IN MAIN.asm
                    > USED AT LINE 1055 IN MAIN.asm
BYTEMODE:           0638 DEFINED AT LINE 1069 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
BYTEMODE1:          063A DEFINED AT LINE 1071 IN MAIN.asm
                    > USED AT LINE 1257 IN MAIN.asm
COMMENT:            063F DEFINED AT LINE 1076 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
                    > USED AT LINE 1080 IN MAIN.asm
CONSTHEAPSTART:     0648 DEFINED AT LINE 1084 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
CONSTTIBSTART:      064E DEFINED AT LINE 1088 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
CONSTBUFSTART:      0654 DEFINED AT LINE 1092 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
DECBASE:            065A DEFINED AT LINE 1096 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
DECBASE1:           065C DEFINED AT LINE 1098 IN MAIN.asm
                    > USED AT LINE 1104 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
HEXBASE:            0661 DEFINED AT LINE 1102 IN MAIN.asm
                    > USED AT LINE 873 IN MAIN.asm
HEXPREFIX:          0666 DEFINED AT LINE 1106 IN MAIN.asm
                    > USED AT LINE 871 IN MAIN.asm
ERROR1:             066E DEFINED AT LINE 1112 IN MAIN.asm
                    > USED AT LINE 831 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 888 IN MAIN.asm
                    > USED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 903 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 929 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
                    > USED AT LINE 955 IN MAIN.asm
INPUT:              0674 DEFINED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
OUTPUT:             067F DEFINED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
QUIT:               0688 DEFINED AT LINE 1141 IN MAIN.asm
                    > USED AT LINE 901 IN MAIN.asm
QUIT1:              068F DEFINED AT LINE 1147 IN MAIN.asm
                    > USED AT LINE 1145 IN MAIN.asm
RECUR:              0692 DEFINED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
REMAIN:             0698 DEFINED AT LINE 1155 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
STRINGBEGIN:        069E DEFINED AT LINE 1160 IN MAIN.asm
                    > USED AT LINE 917 IN MAIN.asm
STRINGEND:          06A6 DEFINED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 921 IN MAIN.asm
STRINGEND1:         06CD DEFINED AT LINE 1183 IN MAIN.asm
                    > USED AT LINE 1163 IN MAIN.asm
STRINGLENGTH:       06D5 DEFINED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 925 IN MAIN.asm
                    > USED AT LINE 44
STRINGLENGTH1:      06DB DEFINED AT LINE 1192 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
STRINGLENGTH2:      06DD DEFINED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 1191 IN MAIN.asm
STRINGLENGTH3:      06E1 DEFINED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 1207 IN MAIN.asm
STRINGSIZE:         06E4 DEFINED AT LINE 1203 IN MAIN.asm
                    > USED AT LINE 927 IN MAIN.asm
PERFORMM_1632S1204: 06EB DEFINED AT LINE 45
                    > USED AT LINE 43
STRINGCOMPARE:      06F0 DEFINED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
STRINGCOMPARE1:     06F2 DEFINED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
STRINGCOMPARE2:     06FD DEFINED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1218 IN MAIN.asm
STRINGCOMPARE3:     0702 DEFINED AT LINE 1227 IN MAIN.asm
                    > USED AT LINE 1220 IN MAIN.asm
STRINGCOMPARE4:     0705 DEFINED AT LINE 1229 IN MAIN.asm
                    > USED AT LINE 1226 IN MAIN.asm
VARBUFPTR:          0708 DEFINED AT LINE 1233 IN MAIN.asm
                    > USED AT LINE 937 IN MAIN.asm
VARHEAPPTR:         0711 DEFINED AT LINE 1238 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
VARTIBPTR:          071A DEFINED AT LINE 1243 IN MAIN.asm
                    > USED AT LINE 941 IN MAIN.asm
VARIABLE:           0723 DEFINED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 603 IN MAIN.asm
                    > USED AT LINE 1236 IN MAIN.asm
                    > USED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 1246 IN MAIN.asm
CONSTANT:           0726 DEFINED AT LINE 1250 IN MAIN.asm
                    > USED AT LINE 1086 IN MAIN.asm
                    > USED AT LINE 1090 IN MAIN.asm
                    > USED AT LINE 1094 IN MAIN.asm
WORDMODE:           0729 DEFINED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 953 IN MAIN.asm
XOR:                072E DEFINED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
XOR1:               072F DEFINED AT LINE 1262 IN MAIN.asm
RANGESRC:           0739 DEFINED AT LINE 32
                    > USED AT LINE 911 IN MAIN.asm
RANGESRCM_1697S1278: 0748 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          07CB DEFINED AT LINE 32
                    > USED AT LINE 825 IN MAIN.asm
ARRAYITERM_1716S1298: 07D8 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         084B DEFINED AT LINE 32
                    > USED AT LINE 923 IN MAIN.asm
STRINGITERM_1735S1318: 0858 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                08D2 DEFINED AT LINE 32
                    > USED AT LINE 886 IN MAIN.asm
MAPM_1755S1340:     08DF DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             0913 DEFINED AT LINE 32
                    > USED AT LINE 857 IN MAIN.asm
FILTERM_1769S1355:  0921 DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               0970 DEFINED AT LINE 32
                    > USED AT LINE 851 IN MAIN.asm
FOLDM_1788S1375:    097F DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            09C1 DEFINED AT LINE 32
                    > USED AT LINE 853 IN MAIN.asm
FOREACHM_1802S1390: 09CF DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0A0C DEFINED AT LINE 32
                    > USED AT LINE 855 IN MAIN.asm
FUNCSRCM_1816S1405: 0A18 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0A45 DEFINED AT LINE 32
                    > USED AT LINE 615 IN MAIN.asm
PRINTARRAYM_1826S1416: 0A53 DEFINED AT LINE 39
                    > USED AT LINE 35
COMMA:              0A8D DEFINED AT LINE 1426 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
READCHAR:           0A9C DEFINED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 1429 IN MAIN.asm
READSTRING:         0AA5 DEFINED AT LINE 1442 IN MAIN.asm
                    > USED AT LINE 1431 IN MAIN.asm
                    > USED AT LINE 44
READSTRING1:        0AAA DEFINED AT LINE 1445 IN MAIN.asm
                    > USED AT LINE 1452 IN MAIN.asm
READSTRING2:        0AB8 DEFINED AT LINE 1453 IN MAIN.asm
                    > USED AT LINE 1448 IN MAIN.asm
READNUMBER:         0AC1 DEFINED AT LINE 1460 IN MAIN.asm
                    > USED AT LINE 1433 IN MAIN.asm
PERFORMM_1867S1462: 0ACA DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER1:        0AE8 DEFINED AT LINE 1478 IN MAIN.asm
                    > USED AT LINE 1469 IN MAIN.asm
                    > USED AT LINE 1473 IN MAIN.asm
                    > USED AT LINE 1475 IN MAIN.asm
PERFORMM_1884S1479: 0AEF DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER2:        0AF2 DEFINED AT LINE 1482 IN MAIN.asm
                    > USED AT LINE 1471 IN MAIN.asm
PERFORMM_1888S1483: 0AF9 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER3:        0AFA DEFINED AT LINE 1485 IN MAIN.asm
                    > USED AT LINE 1477 IN MAIN.asm
                    > USED AT LINE 1481 IN MAIN.asm
COLON:              0B00 DEFINED AT LINE 1491 IN MAIN.asm
                    > USED AT LINE 177 IN MAIN.asm
VARREF:             0B00 DEFINED AT LINE 1492 IN MAIN.asm
SEMICOLON:          0B0E DEFINED AT LINE 1503 IN MAIN.asm
                    > USED AT LINE 208 IN MAIN.asm
TILDE:              0B10 DEFINED AT LINE 1507 IN MAIN.asm
                    > USED AT LINE 587 IN MAIN.asm
INVERT:             0B10 DEFINED AT LINE 1508 IN MAIN.asm
DOLLAR:             0B1A DEFINED AT LINE 1519 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
HEXNUM:             0B1A DEFINED AT LINE 1520 IN MAIN.asm
                    > USED AT LINE 44
HEXNUM1:            0B1D DEFINED AT LINE 1522 IN MAIN.asm
                    > USED AT LINE 1539 IN MAIN.asm
HEXNUM2:            0B25 DEFINED AT LINE 1528 IN MAIN.asm
                    > USED AT LINE 1526 IN MAIN.asm
QUESTION:           0B37 DEFINED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
IF:                 0B37 DEFINED AT LINE 1544 IN MAIN.asm
QUOTE:              0B44 DEFINED AT LINE 1557 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
STRING:             0B44 DEFINED AT LINE 1558 IN MAIN.asm
STRING1:            0B4D DEFINED AT LINE 1565 IN MAIN.asm
                    > USED AT LINE 1573 IN MAIN.asm
STRING2:            0B50 DEFINED AT LINE 1569 IN MAIN.asm
                    > USED AT LINE 1564 IN MAIN.asm
STRING3:            0B56 DEFINED AT LINE 1574 IN MAIN.asm
                    > USED AT LINE 1572 IN MAIN.asm
PERCENT:            0B5E DEFINED AT LINE 1584 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
ARG:                0B5E DEFINED AT LINE 1585 IN MAIN.asm
ARG0:               0B7A DEFINED AT LINE 1604 IN MAIN.asm
                    > USED AT LINE 1610 IN MAIN.asm
ARG0A:              0B83 DEFINED AT LINE 1612 IN MAIN.asm
                    > USED AT LINE 1591 IN MAIN.asm
                    > USED AT LINE 1596 IN MAIN.asm
ARG1:               0B88 DEFINED AT LINE 1615 IN MAIN.asm
                    > USED AT LINE 1608 IN MAIN.asm
ARG1A:              0B90 DEFINED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 1614 IN MAIN.asm
NUM:                0B93 DEFINED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
                    > USED AT LINE 324 IN MAIN.asm
                    > USED AT LINE 44
NUM0:               0B9C DEFINED AT LINE 1633 IN MAIN.asm
                    > USED AT LINE 1631 IN MAIN.asm
NUM1:               0B9D DEFINED AT LINE 1635 IN MAIN.asm
                    > USED AT LINE 1652 IN MAIN.asm
NUM2:               0BB5 DEFINED AT LINE 1653 IN MAIN.asm
                    > USED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1532 IN MAIN.asm
                    > USED AT LINE 1638 IN MAIN.asm
                    > USED AT LINE 1640 IN MAIN.asm
NUM3:               0BC0 DEFINED AT LINE 1661 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
RBRACE:             0BC3 DEFINED AT LINE 1666 IN MAIN.asm
                    > USED AT LINE 583 IN MAIN.asm
BLOCKEND:           0BC3 DEFINED AT LINE 1667 IN MAIN.asm
                    > USED AT LINE 1066 IN MAIN.asm
                    > USED AT LINE 1148 IN MAIN.asm
BLOCKEND1:          0BF5 DEFINED AT LINE 1689 IN MAIN.asm
                    > USED AT LINE 1682 IN MAIN.asm
BLOCKEND2:          0C01 DEFINED AT LINE 1696 IN MAIN.asm
                    > USED AT LINE 1688 IN MAIN.asm
BLOCKEND3:          0C13 DEFINED AT LINE 1710 IN MAIN.asm
                    > USED AT LINE 1702 IN MAIN.asm
BLOCKEND4:          0C27 DEFINED AT LINE 1720 IN MAIN.asm
                    > USED AT LINE 1718 IN MAIN.asm
GOBLOCK:            0C30 DEFINED AT LINE 1725 IN MAIN.asm
                    > USED AT LINE 539 IN MAIN.asm
                    > USED AT LINE 543 IN MAIN.asm
GOBLOCK2:           0C55 DEFINED AT LINE 1742 IN MAIN.asm
                    > USED AT LINE 1823 IN MAIN.asm
GOBLOCK3:           0C5F DEFINED AT LINE 1748 IN MAIN.asm
GOFUNC:             0C63 DEFINED AT LINE 1752 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
GOFUNC1:            0C7C DEFINED AT LINE 1771 IN MAIN.asm
                    > USED AT LINE 1781 IN MAIN.asm
GOFUNC2:            0C82 DEFINED AT LINE 1778 IN MAIN.asm
                    > USED AT LINE 1770 IN MAIN.asm
GOFUNC3:            0C8D DEFINED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 1760 IN MAIN.asm
GOFUNC4:            0CA5 DEFINED AT LINE 1801 IN MAIN.asm
                    > USED AT LINE 1798 IN MAIN.asm
GOFUNC5:            0CA8 DEFINED AT LINE 1804 IN MAIN.asm
                    > USED AT LINE 1810 IN MAIN.asm
GOFUNC6:            0CAB DEFINED AT LINE 1808 IN MAIN.asm
                    > USED AT LINE 1803 IN MAIN.asm
GOFUNC7:            0CAE DEFINED AT LINE 1811 IN MAIN.asm
GOFUNC8:            0CB2 DEFINED AT LINE 1816 IN MAIN.asm
                    > USED AT LINE 1736 IN MAIN.asm
                    > USED AT LINE 1800 IN MAIN.asm
ASSIGN:             0CBD DEFINED AT LINE 1827 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
ASSIGN0:            0CBF DEFINED AT LINE 1830 IN MAIN.asm
                    > USED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 343 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
                    > USED AT LINE 401 IN MAIN.asm
ASSIGN1:            0CC3 DEFINED AT LINE 1833 IN MAIN.asm
ASSIGN2:            0CCC DEFINED AT LINE 1840 IN MAIN.asm
                    > USED AT LINE 1837 IN MAIN.asm
EQUALS:             0CCE DEFINED AT LINE 1845 IN MAIN.asm
                    > USED AT LINE 235 IN MAIN.asm
NOTEQUALS:          0CD5 DEFINED AT LINE 1851 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
LESSTHANEQ:         0CDC DEFINED AT LINE 1859 IN MAIN.asm
                    > USED AT LINE 256 IN MAIN.asm
LESSTHAN:           0CE1 DEFINED AT LINE 1866 IN MAIN.asm
                    > USED AT LINE 258 IN MAIN.asm
LESSTHAN1:          0CE6 DEFINED AT LINE 1871 IN MAIN.asm
                    > USED AT LINE 1862 IN MAIN.asm
TRUE1:              0CE9 DEFINED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 1848 IN MAIN.asm
                    > USED AT LINE 1854 IN MAIN.asm
NULL1:              0CEF DEFINED AT LINE 1878 IN MAIN.asm
FALSE1:             0CEF DEFINED AT LINE 1879 IN MAIN.asm
                    > USED AT LINE 867 IN MAIN.asm
                    > USED AT LINE 1849 IN MAIN.asm
                    > USED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 1872 IN MAIN.asm
SPREAD:             0CF5 DEFINED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 352 IN MAIN.asm
SPREAD1:            0D02 DEFINED AT LINE 1894 IN MAIN.asm
                    > USED AT LINE 1909 IN MAIN.asm
SPREAD2:            0D0D DEFINED AT LINE 1903 IN MAIN.asm
                    > USED AT LINE 1900 IN MAIN.asm
SPREAD3:            0D0F DEFINED AT LINE 1906 IN MAIN.asm
                    > USED AT LINE 1893 IN MAIN.asm
SHIFTLEFT:          0D19 DEFINED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 251 IN MAIN.asm
SHIFTLEFT2:         0D23 DEFINED AT LINE 1925 IN MAIN.asm
                    > USED AT LINE 1922 IN MAIN.asm
SHIFTLEFT3:         0D2B DEFINED AT LINE 1930 IN MAIN.asm
                    > USED AT LINE 1933 IN MAIN.asm
SHIFTLEFT4:         0D2C DEFINED AT LINE 1932 IN MAIN.asm
                    > USED AT LINE 1929 IN MAIN.asm
SHIFTRIGHT:         0D35 DEFINED AT LINE 1940 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
SHIFTRIGHT2:        0D3F DEFINED AT LINE 1949 IN MAIN.asm
                    > USED AT LINE 1946 IN MAIN.asm
SHIFTRIGHT3:        0D47 DEFINED AT LINE 1954 IN MAIN.asm
                    > USED AT LINE 1958 IN MAIN.asm
SHIFTRIGHT4:        0D4B DEFINED AT LINE 1957 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
DIVIDE:             0D54 DEFINED AT LINE 1966 IN MAIN.asm
                    > USED AT LINE 990 IN MAIN.asm
DIVIDE1:            0D59 DEFINED AT LINE 1969 IN MAIN.asm
                    > USED AT LINE 1981 IN MAIN.asm
DIVIDE2:            0D66 DEFINED AT LINE 1977 IN MAIN.asm
                    > USED AT LINE 1974 IN MAIN.asm
DIVIDE3:            0D67 DEFINED AT LINE 1979 IN MAIN.asm
                    > USED AT LINE 1976 IN MAIN.asm
DOTNEXT:            0D6D DEFINED AT LINE 1985 IN MAIN.asm
                    > USED AT LINE 560 IN MAIN.asm
                    > USED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
DOTNEXT1:           0D75 DEFINED AT LINE 1990 IN MAIN.asm
                    > USED AT LINE 1988 IN MAIN.asm
PARSEARGS:          0D87 DEFINED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
PARSEARGS1:         0D91 DEFINED AT LINE 2008 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
PARSEARGS1A:        0D99 DEFINED AT LINE 2014 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
PARSEARGS2:         0DA1 DEFINED AT LINE 2019 IN MAIN.asm
PARSEARGS3:         0DA9 DEFINED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 2013 IN MAIN.asm
                    > USED AT LINE 2025 IN MAIN.asm
PARSEARGS4:         0DAC DEFINED AT LINE 2030 IN MAIN.asm
                    > USED AT LINE 2016 IN MAIN.asm
                    > USED AT LINE 2018 IN MAIN.asm
PARSEARGS5:         0DB2 DEFINED AT LINE 2036 IN MAIN.asm
                    > USED AT LINE 2034 IN MAIN.asm
PARSEBLOCK:         0DBD DEFINED AT LINE 2049 IN MAIN.asm
                    > USED AT LINE 463 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
PARSEBLOCK1:        0DC1 DEFINED AT LINE 2053 IN MAIN.asm
                    > USED AT LINE 2057 IN MAIN.asm
                    > USED AT LINE 2079 IN MAIN.asm
                    > USED AT LINE 2082 IN MAIN.asm
                    > USED AT LINE 2087 IN MAIN.asm
                    > USED AT LINE 2091 IN MAIN.asm
PARSEBLOCK2:        0DED DEFINED AT LINE 2080 IN MAIN.asm
                    > USED AT LINE 2067 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
                    > USED AT LINE 2071 IN MAIN.asm
PARSEBLOCK3:        0DF0 DEFINED AT LINE 2083 IN MAIN.asm
                    > USED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 2076 IN MAIN.asm
                    > USED AT LINE 2078 IN MAIN.asm
PARSEBLOCK4:        0DF8 DEFINED AT LINE 2089 IN MAIN.asm
                    > USED AT LINE 2060 IN MAIN.asm
                    > USED AT LINE 2062 IN MAIN.asm
                    > USED AT LINE 2064 IN MAIN.asm
PARSEBLOCK5:        0DFB DEFINED AT LINE 2092 IN MAIN.asm
                    > USED AT LINE 2088 IN MAIN.asm
PARSEBLOCK6:        0E23 DEFINED AT LINE 2111 IN MAIN.asm
                    > USED AT LINE 2098 IN MAIN.asm
CREATEFUNC:         0E27 DEFINED AT LINE 2119 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
CREATEFUNC0:        0E46 DEFINED AT LINE 2133 IN MAIN.asm
                    > USED AT LINE 2129 IN MAIN.asm
CREATEFUNC1:        0E5E DEFINED AT LINE 2152 IN MAIN.asm
                    > USED AT LINE 2148 IN MAIN.asm
CREATEFUNC2:        0E71 DEFINED AT LINE 2165 IN MAIN.asm
                    > USED AT LINE 2161 IN MAIN.asm
CREATEFUNC2A:       0E90 DEFINED AT LINE 2191 IN MAIN.asm
                    > USED AT LINE 2178 IN MAIN.asm
CREATEFUNC3:        0E9F DEFINED AT LINE 2203 IN MAIN.asm
                    > USED AT LINE 2213 IN MAIN.asm
CREATEFUNC4:        0EAA DEFINED AT LINE 2214 IN MAIN.asm
CREATEFUNC5:        0EAB DEFINED AT LINE 2216 IN MAIN.asm
                    > USED AT LINE 2132 IN MAIN.asm
LOWERCASETABLE:     0EC9 DEFINED AT LINE 2246 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
LOWERCASETABLE1:    0ED3 DEFINED AT LINE 2253 IN MAIN.asm
                    > USED AT LINE 2262 IN MAIN.asm
LOWERCASETABLE2:    0EDA DEFINED AT LINE 2259 IN MAIN.asm
                    > USED AT LINE 2250 IN MAIN.asm
                    > USED AT LINE 2252 IN MAIN.asm
COMMANDTABLE:       0EDF DEFINED AT LINE 2268 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
COMMANDTABLE1:      0EE0 DEFINED AT LINE 2270 IN MAIN.asm
                    > USED AT LINE 2258 IN MAIN.asm
COMMANDTABLE2:      0EE1 DEFINED AT LINE 2272 IN MAIN.asm
                    > USED AT LINE 2285 IN MAIN.asm
COMMANDTABLE3:      0EE8 DEFINED AT LINE 2278 IN MAIN.asm
                    > USED AT LINE 2275 IN MAIN.asm
COMMANDTABLE4:      0EF1 DEFINED AT LINE 2286 IN MAIN.asm
                    > USED AT LINE 2277 IN MAIN.asm
                    > USED AT LINE 2281 IN MAIN.asm
CMDTABLE:           0EF7 DEFINED AT LINE 2299 IN MAIN.asm
                    > USED AT LINE 1427 IN MAIN.asm
CMDTABLE1:          0EF8 DEFINED AT LINE 2301 IN MAIN.asm
CMDTABLE2:          0EF8 DEFINED AT LINE 2302 IN MAIN.asm
                    > USED AT LINE 2326 IN MAIN.asm
CMDTABLE3:          0F05 DEFINED AT LINE 2314 IN MAIN.asm
CMDTABLE4:          0F0E DEFINED AT LINE 2322 IN MAIN.asm
                    > USED AT LINE 2313 IN MAIN.asm
CMDTABLE5:          0F13 DEFINED AT LINE 2327 IN MAIN.asm
                    > USED AT LINE 2309 IN MAIN.asm
                    > USED AT LINE 2317 IN MAIN.asm
                    > USED AT LINE 2321 IN MAIN.asm
GETVARADDR:         0F18 DEFINED AT LINE 2334 IN MAIN.asm
                    > USED AT LINE 1018 IN MAIN.asm
                    > USED AT LINE 1495 IN MAIN.asm
GETVARADDR1:        0F2A DEFINED AT LINE 2345 IN MAIN.asm
                    > USED AT LINE 2341 IN MAIN.asm
PUTSTR0:            0F2F DEFINED AT LINE 2351 IN MAIN.asm
                    > USED AT LINE 2357 IN MAIN.asm
PUTSTR:             0F33 DEFINED AT LINE 2354 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
                    > USED AT LINE 2421 IN MAIN.asm
                    > USED AT LINE 2478 IN MAIN.asm
NESTING:            0F38 DEFINED AT LINE 2370 IN MAIN.asm
                    > USED AT LINE 2500 IN MAIN.asm
                    > USED AT LINE 2534 IN MAIN.asm
NESTING0:           0F42 DEFINED AT LINE 2376 IN MAIN.asm
                    > USED AT LINE 2372 IN MAIN.asm
                    > USED AT LINE 2374 IN MAIN.asm
NESTING1A:          0F49 DEFINED AT LINE 2381 IN MAIN.asm
                    > USED AT LINE 2378 IN MAIN.asm
NESTING1:           0F4C DEFINED AT LINE 2384 IN MAIN.asm
                    > USED AT LINE 2375 IN MAIN.asm
NESTING2:           0F5B DEFINED AT LINE 2393 IN MAIN.asm
                    > USED AT LINE 2388 IN MAIN.asm
                    > USED AT LINE 2390 IN MAIN.asm
NESTING3:           0F5D DEFINED AT LINE 2396 IN MAIN.asm
                    > USED AT LINE 2392 IN MAIN.asm
NESTING4:           0F68 DEFINED AT LINE 2403 IN MAIN.asm
                    > USED AT LINE 2398 IN MAIN.asm
                    > USED AT LINE 2400 IN MAIN.asm
PROMPT:             0F6A DEFINED AT LINE 2407 IN MAIN.asm
                    > USED AT LINE 2482 IN MAIN.asm
CRLF:               0F73 DEFINED AT LINE 2412 IN MAIN.asm
                    > USED AT LINE 2547 IN MAIN.asm
PRINTSTR:           0F7A DEFINED AT LINE 2419 IN MAIN.asm
                    > USED AT LINE 2408 IN MAIN.asm
                    > USED AT LINE 2413 IN MAIN.asm
                    > USED AT LINE 2607 IN MAIN.asm
                    > USED AT LINE 2612 IN MAIN.asm
INIT:               0F81 DEFINED AT LINE 2426 IN MAIN.asm
                    > USED AT LINE 2475 IN MAIN.asm
INIT1:              0F89 DEFINED AT LINE 2430 IN MAIN.asm
                    > USED AT LINE 2436 IN MAIN.asm
WARMINIT:           0F91 DEFINED AT LINE 2438 IN MAIN.asm
COLDBOOT0:          0FA4 DEFINED AT LINE 2445 IN MAIN.asm
                    > USED AT LINE 2433 IN MAIN.asm
                    > USED AT LINE 2471 IN MAIN.asm
COLDINIT:           0FAE DEFINED AT LINE 2451 IN MAIN.asm
COLDBOOT1:          0FBF DEFINED AT LINE 2460 IN MAIN.asm
                    > USED AT LINE 2463 IN MAIN.asm
COLDSTART:          0FCC DEFINED AT LINE 2469 IN MAIN.asm
                    > USED AT LINE 835 IN MAIN.asm
START:              0FD5 DEFINED AT LINE 2473 IN MAIN.asm
                    > USED AT LINE 7
START1:             0FDB DEFINED AT LINE 2476 IN MAIN.asm
                    > USED AT LINE 2443 IN MAIN.asm
                    > USED AT LINE 2472 IN MAIN.asm
INTERPRET:          0FE1 DEFINED AT LINE 2480 IN MAIN.asm
                    > USED AT LINE 2584 IN MAIN.asm
                    > USED AT LINE 2600 IN MAIN.asm
INTERPRET2:         0FED DEFINED AT LINE 2488 IN MAIN.asm
                    > USED AT LINE 2525 IN MAIN.asm
                    > USED AT LINE 2605 IN MAIN.asm
                    > USED AT LINE 2609 IN MAIN.asm
                    > USED AT LINE 2627 IN MAIN.asm
INTERPRET3:         0FF5 DEFINED AT LINE 2496 IN MAIN.asm
                    > USED AT LINE 2506 IN MAIN.asm
INTERPRET4:         0FFB DEFINED AT LINE 2502 IN MAIN.asm
                    > USED AT LINE 2494 IN MAIN.asm
INTERPRET5:         1000 DEFINED AT LINE 2509 IN MAIN.asm
                    > USED AT LINE 2535 IN MAIN.asm
                    > USED AT LINE 2550 IN MAIN.asm
INTERPRET5A:        1019 DEFINED AT LINE 2524 IN MAIN.asm
INTERPRET6:         101B DEFINED AT LINE 2527 IN MAIN.asm
                    > USED AT LINE 2513 IN MAIN.asm
INTERPRET7:         1029 DEFINED AT LINE 2537 IN MAIN.asm
                    > USED AT LINE 2517 IN MAIN.asm
INTERPRET8:         103C DEFINED AT LINE 2552 IN MAIN.asm
                    > USED AT LINE 2515 IN MAIN.asm
NEXT:               1057 DEFINED AT LINE 2565 IN MAIN.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 2569 IN MAIN.asm
NEXT0:              106B DEFINED AT LINE 2579 IN MAIN.asm
                    > USED AT LINE 2577 IN MAIN.asm
NEXT1:              106C DEFINED AT LINE 2581 IN MAIN.asm
                    > USED AT LINE 2570 IN MAIN.asm
EXIT:               1073 DEFINED AT LINE 2586 IN MAIN.asm
                    > USED AT LINE 2583 IN MAIN.asm
RUN:                1077 DEFINED AT LINE 2591 IN MAIN.asm
                    > USED AT LINE 2598 IN MAIN.asm
ERROR:              107B DEFINED AT LINE 2596 IN MAIN.asm
                    > USED AT LINE 461 IN MAIN.asm
                    > USED AT LINE 1114 IN MAIN.asm
BACKSPACE_:         108D DEFINED AT LINE 2602 IN MAIN.asm
                    > USED AT LINE 2520 IN MAIN.asm
REEDIT_:            109D DEFINED AT LINE 2611 IN MAIN.asm
                    > USED AT LINE 2522 IN MAIN.asm
REEDIT0:            10A9 DEFINED AT LINE 2616 IN MAIN.asm
                    > USED AT LINE 2622 IN MAIN.asm
REEDIT1:            10AD DEFINED AT LINE 2619 IN MAIN.asm
                    > USED AT LINE 2615 IN MAIN.asm
F1:                 10BD DEFINED AT LINE 10
                    > USED AT LINE 859 IN MAIN.asm
F2:                 10BD DEFINED AT LINE 11
                    > USED AT LINE 861 IN MAIN.asm
F3:                 10BD DEFINED AT LINE 12
                    > USED AT LINE 863 IN MAIN.asm
F4:                 10BD DEFINED AT LINE 13
                    > USED AT LINE 865 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1727 IN MAIN.asm
                    > USED AT LINE 2466 IN MAIN.asm
                    > USED AT LINE 2470 IN MAIN.asm
                    > USED AT LINE 2474 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 154 IN MAIN.asm
                    > USED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 2485 IN MAIN.asm
                    > USED AT LINE 2493 IN MAIN.asm
                    > USED AT LINE 2529 IN MAIN.asm
                    > USED AT LINE 2539 IN MAIN.asm
                    > USED AT LINE 2554 IN MAIN.asm
                    > USED AT LINE 2557 IN MAIN.asm
                    > USED AT LINE 2614 IN MAIN.asm
                    > USED AT LINE 2623 IN MAIN.asm
BUFFER:             2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 155 IN MAIN.asm
                    > USED AT LINE 1093 IN MAIN.asm
                    > USED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
                    > USED AT LINE 1991 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 2457 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2453 IN MAIN.asm
VTIBPTR:            23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 1244 IN MAIN.asm
                    > USED AT LINE 1245 IN MAIN.asm
                    > USED AT LINE 2486 IN MAIN.asm
                    > USED AT LINE 2556 IN MAIN.asm
VBUFPTR:            23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 549 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
                    > USED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
                    > USED AT LINE 675 IN MAIN.asm
                    > USED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 1168 IN MAIN.asm
                    > USED AT LINE 1185 IN MAIN.asm
                    > USED AT LINE 1234 IN MAIN.asm
                    > USED AT LINE 1235 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
VNEXT:              23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 2465 IN MAIN.asm
VHEAPPTR:           23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 482 IN MAIN.asm
                    > USED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
                    > USED AT LINE 1181 IN MAIN.asm
                    > USED AT LINE 1239 IN MAIN.asm
                    > USED AT LINE 1240 IN MAIN.asm
                    > USED AT LINE 1443 IN MAIN.asm
                    > USED AT LINE 1457 IN MAIN.asm
                    > USED AT LINE 1465 IN MAIN.asm
                    > USED AT LINE 1559 IN MAIN.asm
                    > USED AT LINE 1578 IN MAIN.asm
                    > USED AT LINE 2003 IN MAIN.asm
                    > USED AT LINE 2038 IN MAIN.asm
                    > USED AT LINE 2106 IN MAIN.asm
                    > USED AT LINE 2109 IN MAIN.asm
                    > USED AT LINE 2131 IN MAIN.asm
                    > USED AT LINE 2136 IN MAIN.asm
                    > USED AT LINE 2167 IN MAIN.asm
                    > USED AT LINE 2233 IN MAIN.asm
VDEFINE:            23EE DEFINED AT LINE 40 IN ram.asm
VRECUR:             23F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 1152 IN MAIN.asm
                    > USED AT LINE 1715 IN MAIN.asm
                    > USED AT LINE 1722 IN MAIN.asm
VDATAWIDTH:         23F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 267 IN MAIN.asm
                    > USED AT LINE 493 IN MAIN.asm
                    > USED AT LINE 665 IN MAIN.asm
                    > USED AT LINE 745 IN MAIN.asm
                    > USED AT LINE 1041 IN MAIN.asm
                    > USED AT LINE 1072 IN MAIN.asm
                    > USED AT LINE 1835 IN MAIN.asm
                    > USED AT LINE 1897 IN MAIN.asm
VNUMBASE:           23F3 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 654 IN MAIN.asm
                    > USED AT LINE 1099 IN MAIN.asm
VSTRMODE:           23F4 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 1167 IN MAIN.asm
                    > USED AT LINE 1986 IN MAIN.asm
VHEXPREFIX:         23F5 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 738 IN MAIN.asm
                    > USED AT LINE 1109 IN MAIN.asm
VPOINTER:           23F9 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 274 IN MAIN.asm
                    > USED AT LINE 423 IN MAIN.asm
                    > USED AT LINE 601 IN MAIN.asm
                    > USED AT LINE 602 IN MAIN.asm
                    > USED AT LINE 1249 IN MAIN.asm
                    > USED AT LINE 1496 IN MAIN.asm
                    > USED AT LINE 1618 IN MAIN.asm
                    > USED AT LINE 1832 IN MAIN.asm
VREMAIN:            23FB DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 1156 IN MAIN.asm
VSAVEDIP:           23FD DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 2439 IN MAIN.asm
                    > USED AT LINE 2559 IN MAIN.asm
VSAVEDSP:           23FF DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 2440 IN MAIN.asm
                    > USED AT LINE 2560 IN MAIN.asm
VSAVEDNEXT:         2401 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 2441 IN MAIN.asm
                    > USED AT LINE 2561 IN MAIN.asm
VSAVEDBP:           2403 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 2442 IN MAIN.asm
                    > USED AT LINE 2562 IN MAIN.asm
VTEMP1:             2405 DEFINED AT LINE 61 IN ram.asm
                    > USED AT LINE 475 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
                    > USED AT LINE 1172 IN MAIN.asm
                    > USED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 1670 IN MAIN.asm
                    > USED AT LINE 1714 IN MAIN.asm
                    > USED AT LINE 1726 IN MAIN.asm
                    > USED AT LINE 1732 IN MAIN.asm
                    > USED AT LINE 1761 IN MAIN.asm
                    > USED AT LINE 1782 IN MAIN.asm
                    > USED AT LINE 1789 IN MAIN.asm
                    > USED AT LINE 1795 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
                    > USED AT LINE 1926 IN MAIN.asm
                    > USED AT LINE 1934 IN MAIN.asm
                    > USED AT LINE 1950 IN MAIN.asm
                    > USED AT LINE 1959 IN MAIN.asm
                    > USED AT LINE 2101 IN MAIN.asm
                    > USED AT LINE 2110 IN MAIN.asm
                    > USED AT LINE 2122 IN MAIN.asm
                    > USED AT LINE 2234 IN MAIN.asm
VTEMP2:             2407 DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 1713 IN MAIN.asm
                    > USED AT LINE 1762 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
                    > USED AT LINE 2124 IN MAIN.asm
                    > USED AT LINE 2224 IN MAIN.asm
VTEMP3:             2409 DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 2121 IN MAIN.asm
                    > USED AT LINE 2235 IN MAIN.asm
VLASTDEF:           240B DEFINED AT LINE 64 IN ram.asm
TBPTR:              240D DEFINED AT LINE 65 IN ram.asm
TITLEBUF:           240F DEFINED AT LINE 67 IN ram.asm
                    > USED AT LINE 2428 IN MAIN.asm
                    > USED AT LINE 2447 IN MAIN.asm
                    > USED AT LINE 2477 IN MAIN.asm
HEAP:               2423 DEFINED AT LINE 69 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 1085 IN MAIN.asm
                    > USED AT LINE 2094 IN MAIN.asm
