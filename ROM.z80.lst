0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 38 11               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQ:       EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of Monty code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num_locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
00C9                .macro PERFORM,name
00C9                             ; 
00C9                 ld ix,perform%%M
00C9                 jp name
00C9                perform%%M:
00C9                .endm
00C9                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   21                     DB   lsb(bang_)   ; !     1
0181   0C                     DB   lsb(dquote_)   ; "     2
0182   5E                     DB   lsb(hash_)   ; #     1
0183   09                     DB   lsb(dollar_)   ; $     1
0184   12                     DB   lsb(percent_)   ; %     1
0185   73                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   18                     DB   lsb(lparen_)   ; (     1
0188   6B                     DB   lsb(rparen_)   ; )     1
0189   A5                     DB   lsb(star_)   ; *     1
018A   C9                     DB   lsb(plus_)   ; +     1
018B   06                     DB   lsb(comma_)   ; ,     2
018C   7D                     DB   lsb(minus_)   ; -     1
018D   0F                     DB   lsb(dot_)   ; .     2
018E   1B                     DB   lsb(slash_)   ; /	    1
018F   1E                     DB   lsb(num_)   ; 0     1
0190   1E                     DB   lsb(num_)   ; 1
0191   1E                     DB   lsb(num_)   ; 2
0192   1E                     DB   lsb(num_)   ; 3
0193   1E                     DB   lsb(num_)   ; 4
0194   1E                     DB   lsb(num_)   ; 5
0195   1E                     DB   lsb(num_)   ; 6
0196   1E                     DB   lsb(num_)   ; 7
0197   1E                     DB   lsb(num_)   ; 8
0198   1E                     DB   lsb(num_)   ; 9
0199   04                     DB   lsb(colon_)   ; :     2
019A   5E                     DB   lsb(semicolon_)   ; ;     2
019B   4C                     DB   lsb(lt_)   ; <     1
019C   32                     DB   lsb(eq_)   ; =     1
019D   41                     DB   lsb(gt_)   ; >     1
019E   15                     DB   lsb(question_)   ; ?     1
019F   E9                     DB   lsb(at_)   ; @     2
01A0   E5                     DB   lsb(upcase_)   ; A     1
01A1   E5                     DB   lsb(upcase_)   ; B
01A2   E5                     DB   lsb(upcase_)   ; C
01A3   E5                     DB   lsb(upcase_)   ; D
01A4   E5                     DB   lsb(upcase_)   ; E
01A5   E5                     DB   lsb(upcase_)   ; F
01A6   E5                     DB   lsb(upcase_)   ; G
01A7   E5                     DB   lsb(upcase_)   ; h
01A8   E5                     DB   lsb(upcase_)   ; I
01A9   E5                     DB   lsb(upcase_)   ; J
01AA   E5                     DB   lsb(upcase_)   ; K
01AB   E5                     DB   lsb(upcase_)   ; L
01AC   E5                     DB   lsb(upcase_)   ; M
01AD   E5                     DB   lsb(upcase_)   ; N
01AE   E5                     DB   lsb(upcase_)   ; O
01AF   E5                     DB   lsb(upcase_)   ; p
01B0   E5                     DB   lsb(upcase_)   ; Q
01B1   E5                     DB   lsb(upcase_)   ; R
01B2   E5                     DB   lsb(upcase_)   ; S
01B3   E5                     DB   lsb(upcase_)   ; T
01B4   E5                     DB   lsb(upcase_)   ; U
01B5   E5                     DB   lsb(upcase_)   ; V
01B6   E5                     DB   lsb(upcase_)   ; W
01B7   E5                     DB   lsb(upcase_)   ; X
01B8   E5                     DB   lsb(upcase_)   ; Y
01B9   E5                     DB   lsb(upcase_)   ; Z
01BA   12                     DB   lsb(lbrack_)   ; [     2
01BB   2E                     DB   lsb(backslash_)   ; \     2
01BC   4F                     DB   lsb(rbrack_)   ; ]     2
01BD   9F                     DB   lsb(caret_)   ; ^     1
01BE   E1                     DB   lsb(underscore_)   ; _     2
01BF   B5                     DB   lsb(grave_)   ; `     2   	
01C0   00                     DB   lsb(lowcase_)   ; a     1
01C1   00                     DB   lsb(lowcase_)   ; b
01C2   00                     DB   lsb(lowcase_)   ; c
01C3   00                     DB   lsb(lowcase_)   ; d
01C4   00                     DB   lsb(lowcase_)   ; e
01C5   00                     DB   lsb(lowcase_)   ; f
01C6   00                     DB   lsb(lowcase_)   ; g
01C7   00                     DB   lsb(lowcase_)   ; h
01C8   00                     DB   lsb(lowcase_)   ; i
01C9   00                     DB   lsb(lowcase_)   ; j
01CA   00                     DB   lsb(lowcase_)   ; k
01CB   00                     DB   lsb(lowcase_)   ; l
01CC   00                     DB   lsb(lowcase_)   ; m
01CD   00                     DB   lsb(lowcase_)   ; n
01CE   00                     DB   lsb(lowcase_)   ; o
01CF   00                     DB   lsb(lowcase_)   ; p
01D0   00                     DB   lsb(lowcase_)   ; q
01D1   00                     DB   lsb(lowcase_)   ; r
01D2   00                     DB   lsb(lowcase_)   ; s
01D3   00                     DB   lsb(lowcase_)   ; t
01D4   00                     DB   lsb(lowcase_)   ; u
01D5   00                     DB   lsb(lowcase_)   ; v
01D6   00                     DB   lsb(lowcase_)   ; w
01D7   00                     DB   lsb(lowcase_)   ; x
01D8   00                     DB   lsb(lowcase_)   ; y
01D9   00                     DB   lsb(lowcase_)   ; z
01DA   CB                     DB   lsb(lbrace_)   ; {     1
01DB   D0                     DB   lsb(pipe_)   ; |     1
01DC   DB                     DB   lsb(rbrace_)   ; }     1
01DD   DE                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
01E0   00 22                  DW   BUFFER   ; vBufPtr pointer into BUF
01E2   22 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
01E4   00 00                  DW   NUL   ; vRecurPtr
01E6   02                     DB   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E7   0A                     DB   10   ; vNumBase = 10
01E8   24                     DB   "$"   ; vHexPrefix
01E9   FF                     DB   TRUE   ; vEcho
01EA   00                     DB   FALSE   ; vStrMode
01EB   00                     DB   0   
01EC   00                     DB   0   
01ED   00                     DB   0   
01EE   00                     DB   0   
01EF   00                     DB   0   
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                COLON_:      
0204   DD E9                  JP   (ix)   
0206                COMMA_:      
0206   C3 7F 0B               JP   comma   
0209                DOLLAR_:      
0209   C3 02 0C               JP   dollar   
020C                DQUOTE_:      
020C                QUOTE_:      
020C   C3 2C 0C               JP   quote   
020F                DOT_:        
020F   C3 00 04               JP   dot   
0212                PERCENT_:      
0212   C3 46 0C               JP   percent   
0215                QUESTION_:      
0215   C3 1F 0C               JP   question   
0218                LPAREN_:      
0218   C3 CB 03               JP   lbrace   
021B                SLASH_:      
021B   C3 00 05               JP   slash   
021E                NUM_:        
021E   C3 7B 0C               JP   num   
0221                BANG_:       
0221                BANG:        ; logical invert, any non zero value
0221   03                     INC   bc   
0222   0A                     LD   a,(bc)   
0223   FE 3D                  CP   "="   
0225   20 05                  JR   nz,not   
0227   E1                     POP   hl   
0228   D1                     POP   de   
0229   C3 BD 0D               JP   notequals   
022C                NOT:         
022C   0B                     DEC   bc   
022D   21 00 00               LD   hl,0   ; is considered true
0230   18 0B                  JR   eq1   
0232                EQ_:         
0232                EQ:          
0232   03                     INC   bc   
0233   0A                     LD   a,(bc)   
0234   FE 3D                  CP   "="   
0236   28 04                  JR   z,eq0   
0238   0B                     DEC   bc   
0239   C3 A5 0D               JP   assign   
023C                EQ0:         
023C   E1                     POP   hl   
023D                EQ1:         
023D   D1                     POP   de   
023E   C3 B6 0D               JP   equals   
0241                GT_:         
0241                GT:          
0241   03                     INC   bc   
0242   0A                     LD   a,(bc)   
0243   FE 3E                  CP   ">"   
0245   CA 1D 0E               JP   z,shiftRight   
0248   D1                     POP   de   
0249   E1                     POP   hl   
024A   18 09                  JR   lt1   
024C                LT_:         
024C                LT:          
024C   03                     INC   bc   
024D   0A                     LD   a,(bc)   
024E   FE 3C                  CP   "<"   
0250   CA 01 0E               JP   z,shiftLeft   
0253   E1                     POP   hl   
0254   D1                     POP   de   
0255                LT1:         
0255   FE 3D                  CP   "="   
0257   CA C4 0D               JP   z,lessthaneq   
025A   0B                     DEC   bc   
025B   C3 C9 0D               JP   lessthan   
025E                             ; index of an array, based on vDataWidth 22
025E                             ; array* num -- value    ; also sets vPointer to address
025E                HASH_:       
025E                SEMICOLON_:      
025E                SEMICOLON:      
025E                ARRAYINDEX:      
025E   E1                     POP   hl   ; hl = index
025F   D1                     POP   de   ; de = array
0260   3A EE 23               LD   a,(vDataWidth)   ; a = data width
0263   3D                     DEC   a   
0264   28 01                  JR   z,arrayIndex1   
0266                ARRAYINDEX0:      
0266   29                     ADD   hl,hl   ; if data width = 2 then double
0267                ARRAYINDEX1:      
0267   19                     ADD   hl,de   ; add addr
0268   C3 B6 0F               JP   variable   
026B                             ;                               4
026B                RPAREN_:      
026B                             ; jp rparen
026B                RPAREN:      
026B   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
026E   FD 46 09               LD   b,(iy+9)   
0271   DD E9                  JP   (ix)   
0273                             ; & and                          14
0273                             ; a b -- c
0273                AMPER_:      
0273                AMPER:       
0273                AND:         
0273   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0274   E1                     POP   hl   
0275   7B                     LD   a,e   
0276   A5                     AND   l   
0277   6F                     LD   l,a   
0278   7A                     LD   a,d   
0279   A4                     AND   h   
027A   67                     LD   h,a   
027B   18 5B                  JR   add3   
027D                             ; - sub
027D                             ; a b -- c
027D                             ; -- sub
027D                             ; b1 -- b2
027D                             ; -= sub
027D                             ; a b1 -- b2
027D                MINUS_:      
027D                MINUS:       
027D   03                     INC   bc   ; check if sign of a number
027E   0A                     LD   a,(bc)   
027F   0B                     DEC   bc   
0280   FE 30                  CP   "0"   
0282   38 05                  JR   c,sub   
0284   FE 3A                  CP   "9"+1   
0286   DA 7B 0C               JP   c,num   
0289                SUB:         ; Subtract the value 2nd on stack from top of stack
0289   E1                     POP   hl   ; hl = arg_b
028A   03                     INC   bc   
028B   FE 2D                  CP   "-"   
028D   20 04                  JR   nz,sub1   
028F   2B                     DEC   hl   ; --
0290   C3 A7 0D               JP   assign0   
0293                SUB1:        
0293   D1                     POP   de   ; de = arg_a
0294   FE 3D                  CP   "="   
0296   28 02                  JR   z,sub2   
0298   0B                     DEC   bc   ; -
0299   EB                     EX   de,hl   
029A                SUB2:        
029A   B7                     OR   a   ; -=
029B   ED 52                  SBC   hl,de   
029D                SUB3:        
029D   FE 3D                  CP   "="   
029F   CA A7 0D               JP   z,assign0   
02A2   E5                     PUSH   hl   
02A3   DD E9                  JP   (ix)   
02A5                STAR_:       ; 21
02A5                STAR:        
02A5   03                     INC   bc   ; check for ** spread
02A6   0A                     LD   a,(bc)   
02A7   FE 2A                  CP   "*"   
02A9   CA DD 0D               JP   z,spread   
02AC   0B                     DEC   bc   
02AD                MUL:         
02AD   D1                     POP   de   ; get first value
02AE   E1                     POP   hl   
02AF                MUL2:        
02AF   C5                     PUSH   bc   ; Preserve the IP
02B0   44 4D                  LD   bc,hl   ; bc = 2nd value
02B2   21 00 00               LD   hl,0   
02B5   3E 10                  LD   a,16   
02B7                MUL3:        
02B7   29                     ADD   hl,hl   
02B8   CB 13                  RL   e   
02BA   CB 12                  RL   d   
02BC   30 04                  JR   nc,$+6   
02BE   09                     ADD   hl,bc   
02BF   30 01                  JR   nc,$+3   
02C1   13                     INC   de   
02C2   3D                     DEC   a   
02C3   20 F2                  JR   nz,mul3   
02C5   C1                     POP   bc   ; Restore the IP
02C6   C3 D8 02               JP   add3   
02C9                             ; + add                         25
02C9                             ; a b -- c
02C9                PLUS_:       
02C9                PLUS:        
02C9                ADD:         
02C9   03                     INC   bc   
02CA   0A                     LD   a,(bc)   
02CB   FE 2B                  CP   "+"   ; ++ increment variable
02CD   20 05                  JR   nz,add1   
02CF   E1                     POP   hl   
02D0   23                     INC   hl   
02D1   C3 A7 0D               JP   assign0   
02D4                ADD1:        
02D4   0B                     DEC   bc   
02D5   D1                     POP   de   ; second term
02D6   E1                     POP   hl   ; first term
02D7   19                     ADD   hl,de   
02D8                ADD3:        
02D8   03                     INC   bc   
02D9   0A                     LD   a,(bc)   
02DA   FE 3D                  CP   "="   
02DC   28 04                  JR   z,add4   
02DE   0B                     DEC   bc   
02DF   E5                     PUSH   hl   
02E0   DD E9                  JP   (ix)   
02E2                ADD4:        
02E2   C3 A7 0D               JP   assign0   
02E5                             ;                               18
02E5                UPCASE_:      
02E5                UPCASE:      
02E5   0A                     LD   a,(bc)   ; a = identifier char
02E6   D6 41                  SUB   "A"   ; "A" = 0
02E8   18 1B                  JR   ident1   
02EA                             ;********************** PAGE 2 END *********************************************
02EA                          ALIGN   $100   
0300                             ;********************** PAGE 3 BEGIN *********************************************
0300                LOWCASE_:      
0300                LOWCASE:      
0300   0A                     LD   a,(bc)   
0301   D6 61                  SUB   "a"   
0303   C6 1A                  ADD   a,26   
0305                IDENT1:      
0305   87                     ADD   a,a   ; l = a * 2
0306   6F                     LD   l,a   
0307   26 23                  LD   h,msb(VARS)   
0309   22 F8 23               LD   (vPointer),hl   ; store address in setter
030C   5E                     LD   e,(hl)   
030D   23                     INC   hl   
030E   56                     LD   d,(hl)   
030F   D5                     PUSH   de   
0310   DD E9                  JP   (ix)   
0312                             ; [                             14
0312                LBRACK_:      
0312                LBRACK:      
0312                ARRAYSTART:      
0312   11 00 00               LD   de,0   ; create stack frame
0315   D5                     PUSH   de   ; push null for IP
0316   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0319   FD 56 05               LD   d,(iy+5)   ; 
031C   D5                     PUSH   de   ; 
031D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0320   FD 56 03               LD   d,(iy+3)   ; 
0323   D5                     PUSH   de   ; 
0324   FD E5                  PUSH   iy   ; push BP
0326   FD 21 00 00            LD   iy,0   ; BP = SP
032A   FD 39                  ADD   iy,sp   
032C   DD E9                  JP   (ix)   
032E                             ; \                             19
032E                BACKSLASH_:      
032E                BACKSLASH:      
032E                LAMBDA:      
032E   DD E5                  PUSH   ix   
0330   CD 6F 0E               CALL   parseArgs   
0333                LAMBDA1:      
0333   03                     INC   bc   ; arg_list must ve immediately followed by {
0334   0A                     LD   a,(bc)   
0335   FE 21                  CP   " "+1   ; skip white space
0337   38 FA                  JR   c,lambda1   
0339   FE 7B                  CP   "{"   
033B   28 06                  JR   z,lambda2   
033D   21 02 00               LD   hl,2   ; error 2: parse error
0340   C3 DE 11               JP   error   
0343                LAMBDA2:      
0343   CD A5 0E               CALL   parseBlock   
0346   CD 14 0F               CALL   createFunc   
0349   E1                     POP   hl   
034A   DD E1                  POP   ix   
034C   E5                     PUSH   hl   
034D   DD E9                  JP   (ix)   
034F                RBRACK_:      
034F                RBRACK:      
034F                ARRAYEND:      ; 53
034F   FD 54                  LD   d,iyh   ; de = BP
0351   FD 5D                  LD   e,iyl   
0353   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0357   62 6B                  LD   hl,de   ; hl = de = BP
0359   B7                     OR   a   
035A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
035C   CB 3C                  SRL   h   ; 
035E   CB 1D                  RR   l   
0360   44 4D                  LD   bc,hl   ; bc = count
0362   2A EA 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
0365   71                     LD   (hl),c   ; write num items in length word
0366   23                     INC   hl   
0367   70                     LD   (hl),b   
0368   23                     INC   hl   ; hl = array[0], bc = count
0369                             ; de = BP, hl = array[0], bc = count
0369   18 15                  JR   arrayEnd3   
036B                ARRAYEND1:      
036B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
036E   77                     LD   (hl),a   ; write lsb of array item
036F   23                     INC   hl   ; move to msb of array item
0370   3A EE 23               LD   a,(vDataWidth)   ; vDataWidth=1?
0373   3D                     DEC   a   
0374   28 05                  JR   z,arrayEnd2   
0376   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0379   77                     LD   (hl),a   ; write msb of array item
037A   23                     INC   hl   ; move to next word in array
037B                ARRAYEND2:      
037B   FD 2B                  DEC   iy   ; move to next word on stack
037D   FD 2B                  DEC   iy   
037F   0B                     DEC   bc   ; dec items count
0380                ARRAYEND3:      
0380   79                     LD   a,c   ; if not zero loop
0381   B0                     OR   b   
0382   20 E7                  JR   nz,arrayEnd1   
0384   EB                     EX   de,hl   ; de = end of array, hl = BP
0385   F9                     LD   sp,hl   ; sp = BP
0386   E1                     POP   hl   ; de = end of array, hl = old BP
0387   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0388   FD 62                  LD   iyh,d   
038A   FD 6B                  LD   iyl,e   
038C   D1                     POP   de   ; pop arg_list (discard)
038D   D1                     POP   de   ; pop first_arg* (discard)
038E   D1                     POP   de   ; pop IP (discard)
038F   ED 5B EA 23            LD   de,(vHeapPtr)   ; de = array[-2]
0393   13                     INC   de   
0394   13                     INC   de   
0395   D5                     PUSH   de   ; return array[0]
0396   22 EA 23               LD   (vHeapPtr),hl   ; move heap* to end of array
0399   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
039D   DD E9                  JP   (ix)   
039F                CARET_:      
039F                             ; execute a block of code which ends with } 116
039F                             ; creates a root scope if BP == stack
039F                             ; else uses outer scope
039F                CARET:       
039F                GO:          
039F   D1                     POP   de   ; de = block*
03A0                GO1:         
03A0   7B                     LD   a,e   ; if block* == null, exit
03A1   B2                     OR   d   
03A2   20 02                  JR   nz,go2   
03A4   DD E9                  JP   (ix)   
03A6                GO2:         
03A6   1A                     LD   a,(de)   
03A7   FE 7B                  CP   "{"   
03A9   CA 18 0D               JP   z,goBlock   
03AC   FE 28                  CP   "("   
03AE   C2 4B 0D               JP   nz,goFunc   
03B1   D5                     PUSH   de   ; push de just before stack frame
03B2   CA 18 0D               JP   z,goBlock   
03B5                GRAVE_:      
03B5                GRAVE:       
03B5                PRINTLITERAL:      
03B5   03                     INC   bc   ; move to first char
03B6   ED 5B E8 23            LD   de,(vBufPtr)   ; de = buffer*
03BA   18 03                  JR   printLiteral1   
03BC                PRINTLITERAL0:      
03BC   12                     LD   (de),a   ; a -> buffer*
03BD   13                     INC   de   ; string*++,
03BE   03                     INC   bc   
03BF                PRINTLITERAL1:      
03BF   0A                     LD   a,(bc)   ; a <- string*
03C0   FE 60                  CP   "`"   ; if ` exit loop
03C2   20 F8                  JR   nz,printLiteral0   
03C4   ED 53 E8 23            LD   (vBufPtr),de   ; save buffer*' in pointer
03C8   C3 55 0E               JP   dotNext   
03CB                LBRACE_:      
03CB                LBRACE:      
03CB   CD A5 0E               CALL   parseBlock   
03CE   DD E9                  JP   (ix)   
03D0                             ; | or                          11
03D0                             ; a b -- c
03D0                PIPE_:       
03D0                PIPE:        
03D0                OR:          
03D0   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03D1   E1                     POP   hl   
03D2   7B                     LD   a,e   
03D3   B5                     OR   l   
03D4   6F                     LD   l,a   
03D5   7A                     LD   a,d   
03D6   B4                     OR   h   
03D7   67                     LD   h,a   
03D8   C3 D8 02               JP   add3   
03DB                RBRACE_:      
03DB   C3 AB 0C               JP   rbrace   
03DE                             ; ~ char                        8
03DE                TILDE_:      
03DE   C3 F8 0B               JP   tilde   
03E1                UNDERSCORE_:      
03E1                CHAR:        
03E1   03                     INC   bc   ; point to next char
03E2   0A                     LD   a,(bc)   
03E3   6F                     LD   l,a   
03E4   26 00                  LD   h,0   
03E6   E5                     PUSH   hl   
03E7   DD E9                  JP   (ix)   
03E9                AT_:         
03E9                AT:          
03E9                ADDR:        
03E9   ED 5B F8 23            LD   de,(vPointer)   
03ED   21 F8 23               LD   hl,vPointer   
03F0   C3 B6 0F               JP   variable   
03F3                             ;********************** PAGE 3 END *********************************************
03F3                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   CD E3 0F               CALL   cmdTable   
0403   61 00                  DB   "a",0   ; .a print array
0405   35 0B                  DW   printArray   
0407   63 00                  DB   "c",0   ; .c print char
0409   13 04                  DW   printChar   
040B   73 00                  DB   "s",0   ; .s print string
040D   22 04                  DW   printString   
040F   00 00                  DW   0   ; .  print number, fall through
0411   37 04                  DW   printNumber   
0413                             ; .c print char
0413                             ; char --
0413                PRINTCHAR:      
0413   E1                     POP   hl   ; a = char
0414   7D                     LD   a,l   
0415   ED 5B E8 23            LD   de,(vBufPtr)   ; de = buffer*
0419   12                     LD   (de),a   
041A   13                     INC   de   
041B   ED 53 E8 23            LD   (vBufPtr),de   ; save buffer*'
041F   C3 55 0E               JP   dotNext   
0422                             ; .s print string
0422                             ; string* --
0422                PRINTSTRING:      
0422   E1                     POP   hl   ; hl = string*
0423   ED 5B E8 23            LD   de,(vBufPtr)   ; de = buffer*
0427   18 03                  JR   printString1   
0429                PRINTSTRING0:      
0429   12                     LD   (de),a   ; a -> buffer*
042A   13                     INC   de   ; string*++,
042B   23                     INC   hl   
042C                PRINTSTRING1:      
042C   7E                     LD   a,(hl)   ; a <- string*
042D   B7                     OR   a   ; if NUL exit loop
042E   20 F9                  JR   nz,printString0   
0430   ED 53 E8 23            LD   (vBufPtr),de   ; save buffer*' in pointer
0434   C3 55 0E               JP   dotNext   
0437                             ; . print decimal
0437                             ; value --
0437                PRINTNUMBER:      
0437   3A EF 23               LD   a,(vNumBase)   
043A   FE 10                  CP   16   
043C   CA 5F 04               JP   z,printHex   ; else falls through
043F   C3 42 04               JP   printDec   
0442                             ; print decimal                 ; 70
0442                             ; value --
0442                PRINTDEC:      
0442   ED 5B E8 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0446   D9                     EXX      
0447   E1                     POP   hl   ; hl = value
0448   3A EE 23               LD   a,(vDataWidth)   
044B   3D                     DEC   a   
044C   20 02                  JR   nz,printDec1   
044E   26 00                  LD   h,0   
0450                PRINTDEC1:      
0450   CD 28 10               CALL   formatDec   
0453   D9                     EXX      ; de = buffer*' bc = IP
0454   3E 20                  LD   a," "   ; append space to buffer
0456   12                     LD   (de),a   
0457   13                     INC   de   ; string*++,
0458   ED 53 E8 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
045C   C3 55 0E               JP   dotNext   
045F                             ; buffer hex                    37
045F                             ; value --
045F                PRINTHEX:      
045F   ED 5B E8 23            LD   de,(vBufPtr)   
0463   3A F0 23               LD   a,(vHexPrefix)   ; "$"
0466   B7                     OR   a   ; skip if null
0467   28 02                  JR   z,printHex1   
0469   12                     LD   (de),a   
046A   13                     INC   de   ; string*++,
046B                PRINTHEX1:      
046B   E1                     POP   hl   ; hl = value
046C   3A EE 23               LD   a,(vDataWidth)   
046F   3D                     DEC   a   
0470   28 04                  JR   z,printHex2   
0472   7C                     LD   a,h   
0473   CD 85 04               CALL   printHex3   
0476                PRINTHEX2:      
0476   7D                     LD   a,l   
0477   CD 85 04               CALL   printHex3   
047A   3E 20                  LD   a," "   ; append space to buffer
047C   12                     LD   (de),a   
047D   13                     INC   de   ; string*++,
047E   ED 53 E8 23            LD   (vBufPtr),de   
0482   C3 55 0E               JP   dotNext   
0485                PRINTHEX3:      
0485   F5                     PUSH   af   
0486   1F                     RRA      
0487   1F                     RRA      
0488   1F                     RRA      
0489   1F                     RRA      
048A   CD 8E 04               CALL   printHex4   
048D   F1                     POP   af   
048E                PRINTHEX4:      
048E   E6 0F                  AND   0x0F   
0490   C6 90                  ADD   a,0x90   
0492   27                     DAA      
0493   CE 40                  ADC   a,0x40   
0495   27                     DAA      
0496   12                     LD   (de),a   
0497   13                     INC   de   ; string*++,
0498   C9                     RET      
0499                             ;********************** PAGE 4 END *********************************************
0499                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA C3 06               JP   z,comment   
0507   0B                     DEC   bc   
0508   CD C8 0F               CALL   charTable   
050B   26                     DB   lsb(command_a_)   
050C   41                     DB   lsb(command_b_)   
050D   50                     DB   lsb(command_c_)   
050E   6B                     DB   lsb(command_d_)   
050F   76                     DB   lsb(command_e_)   
0510   85                     DB   lsb(command_f_)   
0511   00                     DB   0   
0512   B0                     DB   lsb(command_h_)   
0513   BB                     DB   lsb(command_i_)   
0514   00                     DB   0   
0515   00                     DB   0   
0516   00                     DB   0   
0517   C6                     DB   lsb(command_m_)   
0518   00                     DB   0   
0519   D9                     DB   lsb(comand_o_)   
051A   00                     DB   0   
051B   00                     DB   0   
051C   E4                     DB   lsb(command_r_)   
051D   E6                     DB   lsb(command_s_)   
051E   E8                     DB   lsb(command_t_)   
051F   00                     DB   0   
0520   EA                     DB   lsb(command_v_)   
0521   EC                     DB   lsb(command_w_)   
0522   EE                     DB   lsb(command_x_)   
0523   00                     DB   0   
0524   00                     DB   0   
0525   F0                     DB   lsb(command_default_)   
0526                             ; 12
0526                COMMAND_A_:      
0526   CD E3 0F               CALL   cmdTable   
0529   62 73                  DB   "bs"   ; /abs absolute
052B   83 06                  DW   absolute   
052D   64 72                  DB   "dr"   ; /adr address of
052F   91 06                  DW   addrOf   
0531   69 74                  DB   "it"   ; /ait array iterator
0533   A2 08                  DW   arrayIter   
0535   6C 63                  DB   "lc"   ; /alc mem allocate
0537   EF 06                  DW   memAllocate   
0539   6C 6E                  DB   "ln"   ; /aln array length
053B   99 06                  DW   arrayLength   
053D   00 00                  DW   0   
053F   DE 06                  DW   error1   
0541                COMMAND_B_:      
0541   CD E3 0F               CALL   cmdTable   
0544   79 65                  DB   "ye"   ; /bye cold reboot
0546   2F 11                  DW   coldStart   
0548   79 74                  DB   "yt"   ; /byt byte mode
054A   BC 06                  DW   byteMode   
054C   00 00                  DW   0   
054E   DE 06                  DW   error1   
0550                COMMAND_C_:      
0550   CD E3 0F               CALL   cmdTable   
0553   6C 6C                  DB   "ll"   ; /cll clear screen
0555   D6 07                  DW   clearLine   
0557   6C 73                  DB   "ls"   ; /cls clear screen
0559   DF 07                  DW   clearScreen   
055B   6D 76                  DB   "mv"   ; /cmv cursor move
055D   E4 07                  DW   cursorMove   
055F   75 72                  DB   "ur"   ; /cur cursor show
0561   F2 07                  DW   cursorShow   
0563   67 6F                  DB   "go"   ; /cur cursor go
0565   01 08                  DW   cursorGo   
0567   00 00                  DW   0   
0569   DE 06                  DW   error1   
056B                COMMAND_D_:      
056B   CD E3 0F               CALL   cmdTable   
056E   65 63                  DB   "ec"   ; /dec decimal
0570   CC 06                  DW   decBase   
0572   00 00                  DW   0   
0574   DE 06                  DW   error1   
0576                COMMAND_E_:      
0576   CD E3 0F               CALL   cmdTable   
0579   63 68                  DB   "ch"   
057B   D3 06                  DW   echo   
057D   6E 64                  DB   "nd"   
057F   62 07                  DW   stringEnd   
0581   00 00                  DW   0   
0583   DE 06                  DW   error1   
0585                COMMAND_F_:      
0585   CD E3 0F               CALL   cmdTable   
0588   61 6C                  DB   "al"   ; /fal false
058A   D7 0D                  DW   false1   
058C   6F 72                  DB   "or"   ; /for forEach
058E   AE 0A                  DW   forEach   
0590   72 65                  DB   "re"   ; /fre free memory
0592   F1 06                  DW   memFree   
0594   72 61                  DB   "ra"   ; /fra free memory array
0596   F7 06                  DW   memFreeArray   
0598   74 72                  DB   "tr"   ; /ftr filter
059A   FC 09                  DW   filter   
059C   31 00                  DB   "1",0   
059E   7F 12                  DW   f1   
05A0   32 00                  DB   "2",0   
05A2   7F 12                  DW   f2   
05A4   33 00                  DB   "3",0   
05A6   7F 12                  DW   f3   
05A8   34 00                  DB   "4",0   
05AA   7F 12                  DW   f4   
05AC   00 00                  DW   0   
05AE   DE 06                  DW   error1   
05B0                COMMAND_H_:      
05B0   CD E3 0F               CALL   cmdTable   
05B3   65 78                  DB   "ex"   ; /hex hex
05B5   D9 06                  DW   hexBase   
05B7   00 00                  DW   0   
05B9   DE 06                  DW   error1   
05BB                COMMAND_I_:      
05BB   CD E3 0F               CALL   cmdTable   
05BE   6E 00                  DB   "n",0   ; /in input
05C0   E4 06                  DW   input   
05C2   00 00                  DW   0   
05C4   DE 06                  DW   error1   
05C6                COMMAND_M_:      
05C6   CD E3 0F               CALL   cmdTable   
05C9   61 70                  DB   "ap"   ; /map map
05CB   BA 09                  DW   map   
05CD   61 78                  DB   "ax"   ; /max maximum
05CF   FC 06                  DW   maximum   
05D1   69 6E                  DB   "in"   ; /min minimum
05D3   08 07                  DW   minimum   
05D5   00 00                  DW   0   
05D7   DE 06                  DW   error1   
05D9                COMAND_O_:      
05D9   CD E3 0F               CALL   cmdTable   
05DC   75 74                  DB   "ut"   ; /out out
05DE   14 07                  DW   output   
05E0   00 00                  DW   0   
05E2   DE 06                  DW   error1   
05E4                COMMAND_R_:      
05E4   18 0D                  JR   command_r   
05E6                COMMAND_S_:      
05E6   18 22                  JR   command_s   
05E8                COMMAND_T_:      
05E8   18 43                  JR   command_t   
05EA                COMMAND_V_:      
05EA   18 4C                  JR   command_v   
05EC                COMMAND_W_:      
05EC   18 59                  JR   command_w   
05EE                COMMAND_X_:      
05EE   18 66                  JR   command_x   
05F0                             ; 3
05F0                COMMAND_DEFAULT_:      
05F0   C3 61 06               JP   command_default   
05F3                             ;********************** PAGE 5 END *********************************************
05F3                             ; .align $100
05F3                COMMAND_R:      
05F3   CD E3 0F               CALL   cmdTable   
05F6   63 00                  DB   "c",0   ; /rc tail call optimisation
05F8   27 07                  DW   recur   
05FA   65 6D                  DB   "em"   ; /rem remainder
05FC   2D 07                  DW   remain   
05FE   65 74                  DB   "et"   ; /ret return
0600   1D 07                  DW   return   
0602   6E 67                  DB   "ng"   ; /rng range src
0604   09 08                  DW   rangeSrc   
0606   00 00                  DW   0   
0608   DE 06                  DW   error1   
060A                COMMAND_S:      
060A   CD E3 0F               CALL   cmdTable   
060D   63 6E                  DB   "cn"   ; /scn scan stream
060F   5D 0A                  DW   scan1   
0611   63 70                  DB   "cp"   ; /scp string compare
0613   A0 07                  DW   stringCompare   
0615   65 6C                  DB   "el"   ; /sel select
0617   33 07                  DW   select   
0619   69 74                  DB   "it"   ; /sit string iterator
061B   2A 09                  DW   stringIter   
061D   6C 6E                  DB   "ln"   ; /sln string length
061F   91 07                  DW   stringLength   
0621   72 63                  DB   "rc"   ; /src source block* --
0623   FA 0A                  DW   source   
0625   74 72                  DB   "tr"   ; /str start building string
0627   5A 07                  DW   stringBegin   
0629   00 00                  DW   0   
062B   DE 06                  DW   error1   
062D                COMMAND_T:      
062D   CD E3 0F               CALL   cmdTable   
0630   72 75                  DB   "ru"   ; /tru true
0632   D1 0D                  DW   true1   
0634   00 00                  DW   0   
0636   DE 06                  DW   error1   
0638                COMMAND_V:      
0638   CD E3 0F               CALL   cmdTable   
063B   61 72                  DB   "ar"   ; /var constant vars
063D   00 23                  DW   vars   
063F   6F 69                  DB   "oi"   ; /voi void function return
0641   BE 07                  DW   void   
0643   00 00                  DW   0   
0645   DE 06                  DW   error1   
0647                COMMAND_W:      
0647   CD E3 0F               CALL   cmdTable   
064A   68 69                  DB   "hi"   ; /whi while true else break from loop
064C   A2 06                  DW   while   
064E   72 64                  DB   "rd"   ; /wrd word mode
0650   C6 07                  DW   wordMode   
0652   00 00                  DW   0   
0654   DE 06                  DW   error1   
0656                COMMAND_X:      
0656   CD E3 0F               CALL   cmdTable   
0659   6F 72                  DB   "or"   ; /xor exclsuive or
065B   CB 07                  DW   xor   
065D   00 00                  DW   0   
065F   DE 06                  DW   error1   
0661                COMMAND_DEFAULT:      
0661   CD E3 0F               CALL   cmdTable   
0664   00 00                  DW   0   
0666   68 06                  DW   div   
0668                             ;                               32
0668                DIV:         
0668   E1                     POP   hl   ; hl = arg_b
0669   D1                     POP   de   ; de = arg_a
066A   03                     INC   bc   
066B   0A                     LD   a,(bc)   
066C   FE 3D                  CP   "="   
066E   28 02                  JR   z,div2   
0670   0B                     DEC   bc   ; /
0671   EB                     EX   de,hl   
0672                DIV2:        
0672   F5                     PUSH   af   ; preserve af, bc
0673   C5                     PUSH   bc   
0674   44 4D                  LD   bc,hl   
0676   CD 3C 0E               CALL   divide   
0679   EB                     EX   de,hl   
067A   ED 53 FA 23            LD   (vRemain),de   
067E   C1                     POP   bc   ; restore
067F   F1                     POP   af   
0680   C3 9D 02               JP   sub3   
0683                             ; /abs absolute
0683                             ; num -- num
0683                ABSOLUTE:      
0683   E1                     POP   hl   
0684   CB 7C                  BIT   7,h   
0686   28 06                  JR   z,absolute1   
0688   AF                     XOR   a   
0689   95                     SUB   l   
068A   6F                     LD   l,a   
068B   9F                     SBC   a,a   
068C   94                     SUB   h   
068D   67                     LD   h,a   
068E                ABSOLUTE1:      
068E   E5                     PUSH   hl   
068F   DD E9                  JP   (ix)   
0691                             ; /adr addrOf
0691                             ; char -- addr
0691                ADDROF:      
0691   E1                     POP   hl   ; a = char
0692   7D                     LD   a,l   
0693   CD 05 10               CALL   getVarAddr   
0696   E5                     PUSH   hl   
0697                ADDROF2:      
0697   DD E9                  JP   (ix)   
0699                             ; /aln length of an array, num elements
0699                             ; array* -- num
0699                ARRAYLENGTH:      
0699   E1                     POP   hl   
069A   2B                     DEC   hl   ; msb size
069B   56                     LD   d,(hl)   
069C   2B                     DEC   hl   ; lsb size
069D   5E                     LD   e,(hl)   
069E   EB                     EX   de,hl   
069F                ARRAYLENGTH1:      
069F   E5                     PUSH   hl   
06A0   DD E9                  JP   (ix)   
06A2                             ; 13
06A2                             ; /whi while true else break from loop
06A2                             ; --
06A2                WHILE:       
06A2   E1                     POP   hl   ; hl = condition, break if false
06A3   7D                     LD   a,l   
06A4   B4                     OR   h   
06A5   28 02                  JR   z,while1   
06A7   DD E9                  JP   (ix)   
06A9                WHILE1:      
06A9   FD 5D                  LD   e,iyl   ; get block* just under stack frame
06AB   FD 54                  LD   d,iyh   
06AD   21 08 00               LD   hl,8   
06B0   19                     ADD   hl,de   
06B1   23                     INC   hl   
06B2   23                     INC   hl   
06B3   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
06B6   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
06B9   C3 AB 0C               JP   blockEnd   
06BC                             ; /byt
06BC                BYTEMODE:      
06BC   3E 01                  LD   a,1   
06BE                BYTEMODE1:      
06BE   32 EE 23               LD   (vDataWidth),a   
06C1   DD E9                  JP   (ix)   
06C3                             ; //
06C3                COMMENT:      
06C3   03                     INC   bc   ; point to next char
06C4   0A                     LD   a,(bc)   
06C5   FE 20                  CP   " "   ; terminate on any char less than SP
06C7   30 FA                  JR   nc,comment   
06C9   0B                     DEC   bc   
06CA   DD E9                  JP   (ix)   
06CC                DECBASE:      
06CC   3E 0A                  LD   a,10   
06CE                DECBASE1:      
06CE   32 EF 23               LD   (vNumBase),a   
06D1   DD E9                  JP   (ix)   
06D3                             ; /ech
06D3                             ; bool --
06D3                ECHO:        
06D3   E1                     POP   hl   
06D4   22 F1 23               LD   (vEcho),hl   
06D7   DD E9                  JP   (ix)   
06D9                HEXBASE:      
06D9   3E 10                  LD   a,16   
06DB   C3 CE 06               JP   decBase1   
06DE                ERROR1:      
06DE   21 01 00               LD   hl,1   ; error 1: unknown command
06E1   C3 DE 11               JP   error   
06E4                             ; Z80 port input
06E4                             ; port -- value
06E4                INPUT:       
06E4   E1                     POP   hl   
06E5   59                     LD   e,c   ; save IP
06E6   4D                     LD   c,l   
06E7   ED 68                  IN   l,(c)   
06E9   26 00                  LD   h,0   
06EB   4B                     LD   c,e   ; restore IP
06EC   E5                     PUSH   hl   
06ED   DD E9                  JP   (ix)   
06EF                             ; /alc
06EF                             ; size -- adr
06EF                MEMALLOCATE:      
06EF   DD E9                  JP   (ix)   
06F1                             ; /fre
06F1                             ; adr --
06F1                MEMFREE:      
06F1   E1                     POP   hl   
06F2                MEMFREE1:      
06F2   22 EA 23               LD   (vHeapPtr),hl   
06F5   DD E9                  JP   (ix)   
06F7                             ; /fra
06F7                             ; adr --
06F7                MEMFREEARRAY:      
06F7   E1                     POP   hl   
06F8   2B                     DEC   hl   
06F9   2B                     DEC   hl   
06FA   18 F6                  JR   memFree1   
06FC                             ; /max maximum
06FC                             ; a b -- c
06FC                MAXIMUM:      
06FC   E1                     POP   hl   
06FD   D1                     POP   de   
06FE   E5                     PUSH   hl   
06FF   B3                     OR   e   
0700   ED 52                  SBC   hl,de   
0702   30 02                  JR   nc,maximum1   
0704   E1                     POP   hl   
0705   D5                     PUSH   de   
0706                MAXIMUM1:      
0706   DD E9                  JP   (ix)   
0708                             ; /min minimum
0708                             ; a b -- c
0708                MINIMUM:      
0708   E1                     POP   hl   
0709   D1                     POP   de   
070A   E5                     PUSH   hl   
070B   B3                     OR   e   
070C   ED 52                  SBC   hl,de   
070E   38 02                  JR   c,minimum1   
0710   E1                     POP   hl   
0711   D5                     PUSH   de   
0712                MINIMUM1:      
0712   DD E9                  JP   (ix)   
0714                             ; /o Z80 port output
0714                             ; value port --
0714                OUTPUT:      
0714   E1                     POP   hl   
0715   59                     LD   e,c   ; save IP
0716   4D                     LD   c,l   
0717   E1                     POP   hl   
0718   ED 69                  OUT   (c),l   
071A   4B                     LD   c,e   ; restore IP
071B   DD E9                  JP   (ix)   
071D                             ; /ret
071D                             ; --
071D                RETURN:      
071D   E1                     POP   hl   ; hl = condition, exit if true
071E   7D                     LD   a,l   
071F   B4                     OR   h   
0720   20 02                  JR   nz,return1   
0722   DD E9                  JP   (ix)   
0724                RETURN1:      
0724   C3 AB 0C               JP   blockEnd   
0727                RECUR:       
0727   E1                     POP   hl   
0728   22 EC 23               LD   (vRecurPtr),hl   
072B   DD E9                  JP   (ix)   
072D                REMAIN:      
072D   2A FA 23               LD   hl,(vRemain)   
0730   E5                     PUSH   hl   
0731   DD E9                  JP   (ix)   
0733                             ; select case from an associative array of cases
0733                             ; bool cases* --
0733                SELECT:      
0733   E1                     POP   hl   ; hl = case associative array [ key1 value1 ... ]
0734   D1                     POP   de   ; de = select key
0735   C5                     PUSH   bc   ; save IP
0736   2B                     DEC   hl   ; bc = array length
0737   46                     LD   b,(hl)   
0738   2B                     DEC   hl   
0739   4E                     LD   c,(hl)   
073A   23                     INC   hl   
073B   23                     INC   hl   
073C   18 15                  JR   select2   
073E                SELECT1:      
073E   7E                     LD   a,(hl)   ; compare lsb case key with lsb select key, hl++
073F   BB                     CP   e   
0740   23                     INC   hl   ; hl++, flags are unaltered
0741   20 0C                  JR   nz,select1a   
0743   7E                     LD   a,(hl)   ; compare msb case key with msb select key, hl++
0744   BA                     CP   d   
0745   23                     INC   hl   ; hl++, flags are unaltered
0746   20 08                  JR   nz,select1b   
0748   5E                     LD   e,(hl)   
0749   23                     INC   hl   
074A   56                     LD   d,(hl)   
074B   C1                     POP   bc   
074C   C3 A0 03               JP   go1   
074F                SELECT1A:      
074F   23                     INC   hl   
0750                SELECT1B:      
0750   23                     INC   hl   
0751   23                     INC   hl   
0752   0B                     DEC   bc   
0753                SELECT2:      
0753   79                     LD   a,c   
0754   B0                     OR   b   
0755   20 E7                  JR   nz,select1   
0757   C1                     POP   bc   
0758   DD E9                  JP   (ix)   
075A                             ; /str
075A                STRINGBEGIN:      
075A   21 FF FF               LD   hl,TRUE   ; string mode = true
075D   22 F2 23               LD   (vStrMode),hl   
0760   18 27                  JR   stringEnd1   ; save hl in vBufPtr
0762                             ; /end
0762                STRINGEND:      
0762   21 00 00               LD   hl,FALSE   ; string mode = false
0765   22 F2 23               LD   (vStrMode),hl   
0768   2A E8 23               LD   hl,(vBufPtr)   ; append NUL to string
076B   AF                     XOR   a   
076C   77                     LD   (hl),a   
076D   23                     INC   hl   ; hl = string_end*
076E   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0772   11 00 22               LD   de,BUFFER   ; de = string*
0775   B7                     OR   a   ; bc = size
0776   ED 52                  SBC   hl,de   
0778   44 4D                  LD   bc,hl   
077A   2A EA 23               LD   hl,(vHeapPtr)   ; hl = hstring*
077D   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
077E   D5                     PUSH   de   ; return hstring*
077F   ED B0                  LDIR      ; copy size bytes from string* to hstring*
0781   ED 53 EA 23            LD   (vHeapPtr),de   ; bump heap to hstring* += size
0785   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0789                STRINGEND1:      
0789   21 00 22               LD   hl,BUFFER   ; reset vBufPtr
078C   22 E8 23               LD   (vBufPtr),hl   
078F   DD E9                  JP   (ix)   
0791                STRINGLENGTH:      
0791   D1                     POP   de   
0792   21 00 00               LD   hl,0   
0795   18 02                  JR   stringLength2   
0797                STRINGLENGTH1:      
0797   13                     INC   de   
0798   23                     INC   hl   
0799                STRINGLENGTH2:      
0799   1A                     LD   a,(de)   
079A   B7                     OR   a   
079B   20 FA                  JR   nz,stringLength1   
079D                STRINGLENGTH3:      
079D   E5                     PUSH   hl   
079E   DD E9                  JP   (ix)   
07A0                             ; /sc string compare
07A0                             ; string1* string2* -- bool
07A0                             ; Compares two null terminated strings.
07A0                STRINGCOMPARE:      
07A0   D1                     POP   de   
07A1   E1                     POP   hl   
07A2                STRINGCOMPARE1:      
07A2   1A                     LD   a,(de)   
07A3   BE                     CP   (hl)   
07A4   20 07                  JR   nz,stringCompare2   
07A6   B7                     OR   a   
07A7   28 09                  JR   z,stringCompare3   
07A9   13                     INC   de   
07AA   23                     INC   hl   
07AB   18 F5                  JR   stringCompare1   
07AD                STRINGCOMPARE2:      
07AD   21 00 00               LD   hl,FALSE   
07B0   18 03                  JR   stringCompare4   
07B2                STRINGCOMPARE3:      
07B2   21 FF FF               LD   hl,TRUE   
07B5                STRINGCOMPARE4:      
07B5   E5                     PUSH   hl   
07B6   DD E9                  JP   (ix)   
07B8                             ; /var
07B8                             ; --
07B8                VARIABLES:      
07B8   21 00 23               LD   hl,VARS   
07BB   C3 C5 0F               JP   constant   
07BE                             ; /voi clear out returned values
07BE                             ; ?? --
07BE                VOID:        
07BE   FD 5D                  LD   e,iyl   
07C0   FD 54                  LD   d,iyh   
07C2   EB                     EX   de,hl   
07C3   F9                     LD   sp,hl   
07C4   DD E9                  JP   (ix)   
07C6                             ; /wrd
07C6                WORDMODE:      
07C6   3E 02                  LD   a,2   
07C8   C3 BE 06               JP   byteMode1   
07CB                             ; /xor
07CB                XOR:         
07CB   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
07CC                XOR1:        
07CC   E1                     POP   hl   
07CD   7B                     LD   a,e   
07CE   AD                     XOR   l   
07CF   6F                     LD   l,a   
07D0   7A                     LD   a,d   
07D1   AC                     XOR   h   
07D2   67                     LD   h,a   
07D3   C3 D8 02               JP   add3   
07D6                             ; /cll clear line
07D6                             ; num --
07D6                CLEARLINE:      
07D6   E1                     POP   hl   
07D7   7D                     LD   a,l   
07D8   E6 03                  AND   $03   
07DA   CD 27 12               CALL   ansiClearLine   
07DD   DD E9                  JP   (ix)   
07DF                             ; /cls clear screen
07DF                             ; --
07DF                CLEARSCREEN:      
07DF   CD 20 12               CALL   ansiClearScreen   
07E2   DD E9                  JP   (ix)   
07E4                             ; /cmu cursor move
07E4                             ; x dir --
07E4                CURSORMOVE:      
07E4   E1                     POP   hl   
07E5   7D                     LD   a,l   
07E6   E6 03                  AND   $03   
07E8   C6 41                  ADD   a,"A"   
07EA   67                     LD   h,a   
07EB   D1                     POP   de   
07EC   6B                     LD   l,e   
07ED   CD 53 12               CALL   ansiMove   
07F0                CURSORMOVE1:      
07F0   DD E9                  JP   (ix)   
07F2                             ; /cur cursor hide / show
07F2                             ; bool --
07F2                CURSORSHOW:      
07F2   E1                     POP   hl   
07F3   23                     INC   hl   
07F4   7D                     LD   a,l   
07F5   B4                     OR   h   
07F6   3E 68                  LD   a,"h"   
07F8   28 02                  JR   z,cursorShow1   
07FA   3E 6C                  LD   a,"l"   
07FC                CURSORSHOW1:      
07FC   CD 72 12               CALL   ansiCursorShow   
07FF   DD E9                  JP   (ix)   
0801                             ; /cur cursorGo
0801                             ; row column --
0801                CURSORGO:      
0801   D1                     POP   de   
0802   E1                     POP   hl   
0803   62                     LD   h,d   
0804   CD 36 12               CALL   ansiGoto   
0807   DD E9                  JP   (ix)   
0809                             ;*******************************************************************
0809                             ; Monty implementations
0809                             ;*******************************************************************
0809                             ; /rng rangeSrc
0809                             ; begin end step -- src
0809                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
0809                RANGESRC:      ; range source: begin, end, step, local: L
0809   CD 9F 03               CALL   go   
080C   00 00                  DW   NUL   
080E   18 08                  DW   rangeSrcM_1780S1370   
0810   12 08                  DW   $+2   
0812   01                     DB   1   
0813   04 62 65 73 4C         .PSTR   "besL"   
0818                RANGESRCM_1780S1370:      
0818   7B                     DB   "{"   ; init mutable L [index active inrange_test]
0819   5B 25 62 20 2F 74 72 75 20 25 73 30 3E 7B 7B 25 61 25 65 3C 7D 7D 7B 7B 25 61 25 65 3E 7D 7D 3F 5D 20 25 4C 3D 20 DB   "[%b /tru %s0>{{%a%e<}}{{%a%e>}}?] %L= "   
083F   5C 6B 74 7B            DB   "\\kt{"   
0843   30 25 74 21 3D 2F 72 65 74 DB   "0%t!=/ret"   ; break if type != 0
084C   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
0852   25 4C 31 3B 21 2F 72 65 74 DB   "%L1;!/ret"   ; if not active don't send
085B   25 4C 30 3B 20 25 61 3D DB   "%L0; %a="   ; store current index in A
0863   25 73 20 25 4C 30 3B 20 2B 3D DB   "%s %L0; +="   ; inc value of index by step
086D   31 25 74 21 3D 2F 72 65 74 DB   "1%t!=/ret"   ; break if type != 0
0876   25 4C 32 3B 5E         DB   "%L2;^"   ; ifte: inrange_test?
087B   7B 25 61 20 31 7D 7B 2F 66 61 6C 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%a 1}{/fal %L1;= 0 2}"   ; ifte: /tru index, /fal active = false, quit
0891   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
0898   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
089F   7D                     DB   "}"   
08A0   7D                     DB   "}"   
08A1   00                     DB   0   
08A2                             ; /ai arrayIter
08A2                             ; array* -- src
08A2                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
08A2                ARRAYITER:      
08A2   CD 9F 03               CALL   go   
08A5   00 00                  DW   NUL   
08A7   AF 08                  DW   arrayIterM_1799S1390   
08A9   AB 08                  DW   $+2   
08AB   01                     DB   1   
08AC   02 61 4C               .PSTR   "aL"   
08AF                ARRAYITERM_1799S1390:      
08AF   7B                     DB   "{"   
08B0   5B 30 20 2F 74 72 75 20 25 61 2F 61 6C 6E 5D 20 25 4C 3D DB   "[0 /tru %a/aln] %L="   ; init mutable L [index active size]
08C3   5C 6B 74 7B            DB   "\\kt{"   
08C7   30 25 74 21 3D 2F 72 65 74 DB   "0%t!=/ret"   ; break if type != 0
08D0   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
08D6   25 4C 31 3B 21 2F 72 65 74 DB   "%L1;!/ret"   ; if not active don't send
08DF   25 4C 30 3B 20 25 69 3D DB   "%L0; %i="   ; store current index in i
08E7   25 4C 30 3B 20 2B 2B   DB   "%L0; ++"   ; inc value of index
08EE   31 25 74 21 3D 2F 72 65 74 DB   "1%t!=/ret"   ; break if type != 0
08F7   25 69 20 25 4C 32 3B 20 3C DB   "%i %L2; <"   ; ifte: index < size
0900   7B 25 61 25 69 3B 20 31 7D 7B 2F 66 61 6C 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%a%i; 1}{/fal %L1;= 0 2}"   ; ifte: /tru value, /fal active = false, quit
0919   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
0920   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0927   7D                     DB   "}"   
0928   7D                     DB   "}"   
0929   00                     DB   0   
092A                             ; /sit stringIter
092A                             ; string* -- src
092A                          ;*Macro unroll: FUNC stringIter, 1, "sL"
092A                STRINGITER:      
092A   CD 9F 03               CALL   go   
092D   00 00                  DW   NUL   
092F   37 09                  DW   stringIterM_1818S1410   
0931   33 09                  DW   $+2   
0933   01                     DB   1   
0934   02 73 4C               .PSTR   "sL"   
0937                STRINGITERM_1818S1410:      
0937   7B                     DB   "{"   
0938   5B 30 20 2F 74 72 75 5D 20 25 4C 3D DB   "[0 /tru] %L="   ; init mutable L [index active]
0944   5C 6B 74 7B            DB   "\\kt{"   
0948   30 25 74 21 3D 2F 72 65 74 DB   "0%t!=/ret"   ; break if type != 0
0951   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
0958   25 4C 31 3B 21 2F 72 65 74 DB   "%L1;!/ret"   ; if not active don't send
0961   25 4C 30 3B 20 25 69 3D DB   "%L0; %i="   ; store current index in A
0969   25 4C 30 3B 20 2B 2B   DB   "%L0; ++"   ; inc value of index by step
0970   2F 62 79 74 20 25 73 25 69 3B 20 2F 77 72 64 20 25 63 3D DB   "/byt %s%i; /wrd %c="   ; read byte at i, store in c as word
0983   31 25 74 21 3D 2F 72 65 74 DB   "1%t!=/ret"   ; break if type != 0
098C   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
0993   7B 25 63 20 31 7D 7B 2F 66 61 6C 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%c 1}{/fal %L1;= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
09A9   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: call sink note: /rc recur
09B0   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
09B7   7D                     DB   "}"   
09B8   7D                     DB   "}"   
09B9   00                     DB   0   
09BA                             ; /map map
09BA                             ; src func -- src1
09BA                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
09BA                MAP:         ; map: source, function
09BA   CD 9F 03               CALL   go   
09BD   00 00                  DW   NUL   
09BF   C7 09                  DW   mapM_1838S1432   
09C1   C3 09                  DW   $+2   
09C3   00                     DB   0   
09C4   02 73 66               .PSTR   "sf"   
09C7                MAPM_1838S1432:      
09C7   7B                     DB   "{"   
09C8   5C 6B 74 7B            DB   "\\kt{"   
09CC   30 25 74 21 3D 2F 72 65 74 DB   "0%t!=/ret"   ; break if type != 0
09D5   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09D9   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
09DE   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
09EA   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
09F2   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09F9   7D                     DB   "}"   
09FA   7D                     DB   "}"   
09FB   00                     DB   0   
09FC                             ; /ft filter
09FC                             ; src pred -- src1
09FC                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
09FC                FILTER:      ; filter: source, predicate, local: T
09FC   CD 9F 03               CALL   go   
09FF   00 00                  DW   NUL   
0A01   0A 0A                  DW   filterM_1852S1447   
0A03   05 0A                  DW   $+2   
0A05   01                     DB   1   
0A06   03 73 70 54            .PSTR   "spT"   
0A0A                FILTERM_1852S1447:      
0A0A   7B                     DB   "{"   
0A0B   5B 30 5D 25 54 3D      DB   "[0]%T="   
0A11   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0A15   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0A19   5B                     DB   "["   
0A1A   7B 25 64 20 25 54 30 3B 3D 20 2F 74 72 75 7D DB   "{%d %T0;= /tru}"   ; case 0: store talkback in T[0], return true
0A29   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
0A31   7B 2F 74 72 75 7D      DB   "{/tru}"   ; case 2: return true
0A37   5D 25 74 3B 5E         DB   "]%t;^"   ; select on %t
0A3C   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 3B 5E 7D DB   "{%d %t %k^}{0 1 %T0;^}"   ; ifte: true send d to sink, false send 1 to talkback
0A52   3F                     DB   "?"   
0A53   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A5A   7D                     DB   "}"   
0A5B   7D                     DB   "}"   
0A5C   00                     DB   0   
0A5D                             ; /scn scan1
0A5D                             ; src init reducer -- src1
0A5D                             ; where reducer is a function like: \\da00bbLi4u
0A5D                          ;*Macro unroll: FUNC scan1, 1, "sirA"                    ; src, init, reducer
0A5D                SCAN1:       ; src, init, reducer
0A5D   CD 9F 03               CALL   go   
0A60   00 00                  DW   NUL   
0A62   6C 0A                  DW   scan1M_1871S1467   
0A64   66 0A                  DW   $+2   
0A66   01                     DB   1   
0A67   04 73 69 72 41         .PSTR   "sirA"   
0A6C                SCAN1M_1871S1467:      
0A6C   7B                     DB   "{"   ; reducer: \\da00bbLi4u
0A6D   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
0A74   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0A78   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0A7C   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0A81   7B 25 64 20 25 41 30 3B 20 25 72 5E 25 41 30 3B 3D 20 25 41 30 3B 7D 7B 25 64 7D DB   "{%d %A0; %r^%A0;= %A0;}{%d}"   ; ifte: reduce -> acc, acc or data
0A9C   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
0AA4   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0AAB   7D                     DB   "}"   
0AAC   7D                     DB   "}"   
0AAD   00                     DB   0   
0AAE                             ; /for forEach
0AAE                             ; src proc --
0AAE                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
0AAE                FOREACH:      ; forEach: source, procedure, local: T
0AAE   CD 9F 03               CALL   go   
0AB1   00 00                  DW   NUL   
0AB3   BC 0A                  DW   forEachM_1885S1482   
0AB5   B7 0A                  DW   $+2   
0AB7   01                     DB   1   
0AB8   03 73 70 54            .PSTR   "spT"   
0ABC                FOREACHM_1885S1482:      
0ABC   7B                     DB   "{"   
0ABD   5B 30 5D 25 54 3D      DB   "[0]%T="   
0AC3   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
0AC7   32 25 74 3D 3D 2F 72 65 74 DB   "2%t==/ret"   ; if type == 2 skip
0AD0   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0AD5   7B 25 64 20 25 54 30 3B 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0;=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0AE7   3F                     DB   "?"   ; ifte:
0AE8   30 20 31 20 25 54 30 3B 5E DB   "0 1 %T0;^"   ; 0 or 1: get next src data item
0AF1   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0AF8   7D                     DB   "}"   
0AF9   00                     DB   0   
0AFA                             ; /src source
0AFA                             ; block* -- src
0AFA                          ;*Macro unroll: FUNC source, 0, "f"                      ; :f block
0AFA                SOURCE:      ; :f block
0AFA   CD 9F 03               CALL   go   
0AFD   00 00                  DW   NUL   
0AFF   06 0B                  DW   sourceM_1899S1497   
0B01   03 0B                  DW   $+2   
0B03   00                     DB   0   
0B04   01 66                  .PSTR   "f"   
0B06                SOURCEM_1899S1497:      
0B06   7B                     DB   "{"   
0B07   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0B0B   30 25 74 3D 3D 2F 77 68 69 DB   "0%t==/whi"   ; break if t != 0 ; TODO replace with /ret
0B14   5C 64 74 7B            DB   "\\dt{"   
0B18   31 25 74 3D 3D 2F 77 68 69 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/whi %f^ 1 %k^"   ; if t == 1 send data to sink TODO: replace with /ret
0B2B   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0B32   7D                     DB   "}"   
0B33   7D                     DB   "}"   
0B34   00                     DB   0   
0B35                          ;*Macro unroll: FUNC printArray, 2, "abc"
0B35                PRINTARRAY:      
0B35   CD 9F 03               CALL   go   
0B38   00 00                  DW   NUL   
0B3A   43 0B                  DW   printArrayM_1909S1508   
0B3C   3E 0B                  DW   $+2   
0B3E   02                     DB   2   
0B3F   03 61 62 63            .PSTR   "abc"   
0B43                PRINTARRAYM_1909S1508:      
0B43   7B                     DB   "{"   
0B44   27 5B 20 27 2E 73 20 25 61 2F 61 6C 6E 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 3B 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 77 68 69 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/aln%c= 0%b= (%a %b ;. %b ++ %b %c </whi)^ ']'.s"   
0B7D   7D                     DB   "}"   
0B7E   00                     DB   0   
0B7F                             ;*******************************************************************
0B7F                             ; implementations continued
0B7F                             ;*******************************************************************
0B7F                COMMA:       
0B7F   CD E3 0F               CALL   cmdTable   
0B82   63 00                  DB   "c",NUL   ; .c print char
0B84   8E 0B                  DW   readChar   
0B86   73 00                  DB   "s",NUL   ; .s print string
0B88   97 0B                  DW   readString   
0B8A   00 00                  DW   NUL   ; .  print number, fall through
0B8C   B9 0B                  DW   readNumber   
0B8E                READCHAR:      
0B8E   CD 81 00               CALL   getchar   
0B91   26 00                  LD   h,0   
0B93   6F                     LD   l,a   
0B94   E5                     PUSH   hl   
0B95   DD E9                  JP   (ix)   
0B97                READSTRING:      
0B97   ED 5B EA 23            LD   de,(vHeapPtr)   
0B9B   D5                     PUSH   de   ; return start of string
0B9C                READSTRING1:      
0B9C   CD 81 00               CALL   getchar   
0B9F   FE 0D                  CP   "\r"   
0BA1   28 0D                  JR   z,readString2   
0BA3   12                     LD   (de),a   
0BA4   13                     INC   de   
0BA5   3A F1 23               LD   a,(vEcho)   
0BA8   3C                     INC   a   
0BA9   20 F1                  JR   nz,readString1   
0BAB   CD 85 00               CALL   putchar   
0BAE   18 EC                  JR   readString1   
0BB0                READSTRING2:      
0BB0   AF                     XOR   a   
0BB1   12                     LD   (de),a   
0BB2   13                     INC   de   
0BB3   ED 53 EA 23            LD   (vHeapPtr),de   
0BB7   DD E9                  JP   (ix)   
0BB9                READNUMBER:      
0BB9   DD E5                  PUSH   ix   
0BBB                          ;*Macro unroll:  PERFORM readString
0BBB   DD 21 C2 0B            LD   ix,performM_1953S1557   
0BBF   C3 97 0B               JP   readString   
0BC2                PERFORMM_1953S1557:      
0BC2   60 69                  LD   hl,bc   ; save bc, hl = string*
0BC4   E3                     EX   (sp),hl   
0BC5   22 EA 23               LD   (vHeapPtr),hl   ; restore heap* to before string
0BC8   44 4D                  LD   bc,hl   
0BCA   0A                     LD   a,(bc)   
0BCB   FE 2D                  CP   "-"   
0BCD   28 11                  JR   z,readNumber1   
0BCF   FE 24                  CP   "$"   
0BD1   28 17                  JR   z,readNumber2   
0BD3   FE 30                  CP   "0"   
0BD5   30 09                  JR   nc,readNumber1   
0BD7   FE 3A                  CP   "9"+1   
0BD9   38 05                  JR   c,readNumber1   
0BDB   21 00 00               LD   hl,0   
0BDE   18 12                  JR   readNumber3   
0BE0                READNUMBER1:      
0BE0                          ;*Macro unroll:  PERFORM num
0BE0   DD 21 E7 0B            LD   ix,performM_1970S1574   
0BE4   C3 7B 0C               JP   num   
0BE7                PERFORMM_1970S1574:      
0BE7   E1                     POP   hl   
0BE8   18 08                  JR   readNumber3   
0BEA                READNUMBER2:      
0BEA                          ;*Macro unroll:  PERFORM hexNum
0BEA   DD 21 F1 0B            LD   ix,performM_1974S1578   
0BEE   C3 02 0C               JP   hexNum   
0BF1                PERFORMM_1974S1578:      
0BF1   E1                     POP   hl   
0BF2                READNUMBER3:      
0BF2   C1                     POP   bc   
0BF3   DD E1                  POP   ix   
0BF5   E5                     PUSH   hl   
0BF6   DD E9                  JP   (ix)   
0BF8                             ; ~ bitwise invert
0BF8                TILDE:       
0BF8                INVERT:      
0BF8   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
0BF9   7D                     LD   a,l   
0BFA   2F                     CPL      
0BFB   6F                     LD   l,a   
0BFC   7C                     LD   a,h   
0BFD   2F                     CPL      
0BFE   67                     LD   h,a   
0BFF   C3 D8 02               JP   add3   
0C02                             ; $ hex                         ; 22
0C02                DOLLAR:      
0C02                HEXNUM:      
0C02   21 00 00               LD   hl,0   ; Clear hl to accept the number
0C05                HEXNUM1:      
0C05   03                     INC   bc   
0C06   0A                     LD   a,(bc)   ; Get the character which is a numeral
0C07   CB 77                  BIT   6,a   ; is it uppercase alpha?
0C09   28 02                  JR   z,hexnum2   ; no a decimal
0C0B   D6 07                  SUB   7   ; sub 7  to make $a - $F
0C0D                HEXNUM2:      
0C0D   D6 30                  SUB   $30   ; form decimal digit
0C0F   DA 9D 0C               JP   c,num2   
0C12   FE 10                  CP   $0F+1   
0C14   D2 9D 0C               JP   nc,num2   
0C17   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0C18   29                     ADD   hl,hl   ; 4X
0C19   29                     ADD   hl,hl   ; 8X
0C1A   29                     ADD   hl,hl   ; 16X
0C1B   85                     ADD   a,l   ; add into bottom of hl
0C1C   6F                     LD   l,a   
0C1D   18 E6                  JR   hexnum1   
0C1F                             ; ? if                            23
0C1F                             ; condition then else -- value
0C1F                QUESTION:      
0C1F                IF:          
0C1F   D1                     POP   de   ; de = else
0C20   E1                     POP   hl   ; hl = then
0C21   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0C22   7C                     LD   a,h   
0C23   B5                     OR   l   
0C24   E1                     POP   hl   ; hl = then
0C25   CA A0 03               JP   z,go1   ; if z de = else
0C28   EB                     EX   de,hl   ; condition = false, de = then
0C29   C3 A0 03               JP   go1   
0C2C                             ; string                        ;38
0C2C                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0C2C                QUOTE:       
0C2C                STRING:      
0C2C   2A EA 23               LD   hl,(vHeapPtr)   ; hl = heap*
0C2F   E5                     PUSH   hl   ; save start of string
0C30   0A                     LD   a,(bc)   
0C31   5F                     LD   e,a   ; e = matching terminator
0C32   03                     INC   bc   ; point to next char
0C33   18 03                  JR   string2   
0C35                STRING1:      
0C35   77                     LD   (hl),a   
0C36   23                     INC   hl   ; increase count
0C37   03                     INC   bc   ; point to next char
0C38                STRING2:      
0C38   0A                     LD   a,(bc)   
0C39   BB                     CP   e   ; is it the string terminator
0C3A   28 02                  JR   z,string3   
0C3C   18 F7                  JR   string1   
0C3E                STRING3:      
0C3E   AF                     XOR   a   ; write NUL to terminate string
0C3F   77                     LD   (hl),a   ; hl = end of string
0C40   23                     INC   hl   
0C41   22 EA 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0C44   DD E9                  JP   (ix)   
0C46                             ; %a .. %z                      43
0C46                             ; -- value
0C46                             ; returns value of arg
0C46                PERCENT:      
0C46                ARG:         
0C46   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0C49   FD 56 05               LD   d,(iy+5)   
0C4C   EB                     EX   de,hl   
0C4D   7D                     LD   a,l   ; arg_list* == null, skip
0C4E   B4                     OR   h   
0C4F   28 1A                  JR   z,arg0a   
0C51   23                     INC   hl   ; a = num_args, hl = arg_list*
0C52   7E                     LD   a,(hl)   
0C53   23                     INC   hl   
0C54   B7                     OR   a   
0C55   28 14                  JR   z,arg0a   ; num_args == 0, skip
0C57   5F                     LD   e,a   ; e = a = num_args
0C58   03                     INC   bc   ; a = next char = dollar_name
0C59   0A                     LD   a,(bc)   
0C5A   C5                     PUSH   bc   ; save IP
0C5B   43                     LD   b,e   ; b = e = num_args
0C5C   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0C5F   FD 56 03               LD   d,(iy+3)   
0C62                ARG0:        
0C62   1B                     DEC   de   ; a = dollar_name, de = next arg*
0C63   1B                     DEC   de   
0C64   BE                     CP   (hl)   
0C65   28 09                  JR   z,arg1   
0C67   23                     INC   hl   ; hl = next arg_list*
0C68   10 F8                  DJNZ   arg0   
0C6A   C1                     POP   bc   ; no match, restore IP
0C6B                ARG0A:       
0C6B   11 00 00               LD   de,0   ; return 0
0C6E   18 08                  JR   arg1a   
0C70                ARG1:        
0C70   C1                     POP   bc   ; restore IP
0C71   EB                     EX   de,hl   ; hl = arg*
0C72   22 F8 23               LD   (vPointer),hl   ; store arg* in setter
0C75   5E                     LD   e,(hl)   
0C76   23                     INC   hl   
0C77   56                     LD   d,(hl)   ; de = arg
0C78                ARG1A:       
0C78   D5                     PUSH   de   ; push arg
0C79   DD E9                  JP   (ix)   
0C7B                             ; 0..9 number                   37
0C7B                NUM:         
0C7B   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0C7E   0A                     LD   a,(bc)   ; Get numeral or -
0C7F   FE 2D                  CP   "-"   
0C81   20 01                  JR   nz,num0   
0C83   03                     INC   bc   ; move to next char, no flags affected
0C84                NUM0:        
0C84   08                     EX   af,af'   ; save zero flag = 0 for later
0C85                NUM1:        
0C85   0A                     LD   a,(bc)   ; read digit
0C86   D6 30                  SUB   "0"   ; less than 0?
0C88   38 13                  JR   c,num2   ; not a digit, exit loop
0C8A   FE 0A                  CP   10   ; greater that 9?
0C8C   30 0F                  JR   nc,num2   ; not a digit, exit loop
0C8E   03                     INC   bc   ; inc IP
0C8F   54 5D                  LD   de,hl   ; multiply hl * 10
0C91   29                     ADD   hl,hl   
0C92   29                     ADD   hl,hl   
0C93   19                     ADD   hl,de   
0C94   29                     ADD   hl,hl   
0C95   85                     ADD   a,l   ; add digit in a to hl
0C96   6F                     LD   l,a   
0C97   3E 00                  LD   a,0   
0C99   8C                     ADC   a,h   
0C9A   67                     LD   h,a   
0C9B   18 E8                  JR   num1   
0C9D                NUM2:        
0C9D   0B                     DEC   bc   
0C9E   08                     EX   af,af'   ; restore zero flag
0C9F   20 07                  JR   nz,num3   
0CA1   EB                     EX   de,hl   ; negate the value of hl
0CA2   21 00 00               LD   hl,0   
0CA5   B7                     OR   a   ; jump to sub2
0CA6   ED 52                  SBC   hl,de   
0CA8                NUM3:        
0CA8   E5                     PUSH   hl   ; Put the number on the stack
0CA9   DD E9                  JP   (ix)   ; and process the next character
0CAB                             ; }                               58
0CAB                RBRACE:      
0CAB                BLOCKEND:      
0CAB   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0CAE   FD 56 01               LD   d,(iy+1)   
0CB1   ED 53 04 24            LD   (vTemp1),de   
0CB5   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0CB8   FD 56 07               LD   d,(iy+7)   
0CBB   ED 53 06 24            LD   (vTemp2),de   
0CBF   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0CC2   FD 56 03               LD   d,(iy+3)   
0CC5   EB                     EX   de,hl   
0CC6   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0CC9   FD 56 01               LD   d,(iy+1)   
0CCC   13                     INC   de   ; for carry flag <=
0CCD   B7                     OR   a   
0CCE   ED 52                  SBC   hl,de   
0CD0   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0CD2   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0CD4   FD 5D                  LD   e,iyl   
0CD6   21 08 00               LD   hl,8   
0CD9   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0CDA   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0CDB   18 0C                  JR   blockEnd2   
0CDD                BLOCKEND1:      ; same scope
0CDD   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0CE0   FD 56 03               LD   d,(iy+3)   
0CE3   EB                     EX   de,hl   
0CE4   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0CE6   FD 5D                  LD   e,iyl   
0CE8   EB                     EX   de,hl   
0CE9                BLOCKEND2:      
0CE9   44 4D                  LD   bc,hl   ; bc = hl = BP
0CEB   B7                     OR   a   ; hl = BP - SP = count
0CEC   ED 72                  SBC   hl,sp   
0CEE   7D                     LD   a,l   
0CEF   B4                     OR   h   
0CF0   28 09                  JR   z,blockEnd3   
0CF2   C5                     PUSH   bc   ; bc = count, hl = BP
0CF3   44 4D                  LD   bc,hl   
0CF5   E1                     POP   hl   
0CF6   2B                     DEC   hl   ; hl = BP-1
0CF7   1B                     DEC   de   ; de = args*-1
0CF8   ED B8                  LDDR      
0CFA   13                     INC   de   
0CFB                BLOCKEND3:      
0CFB   EB                     EX   de,hl   ; sp = de = new tos*
0CFC   F9                     LD   sp,hl   
0CFD   ED 4B 06 24            LD   bc,(vTemp2)   
0D01   FD 2A 04 24            LD   iy,(vTemp1)   
0D05   ED 5B EC 23            LD   de,(vRecurPtr)   ; de = recur vector
0D09   7B                     LD   a,e   ; check for NUL
0D0A   B2                     OR   d   
0D0B   20 02                  JR   nz,blockEnd4   
0D0D   DD E9                  JP   (ix)   
0D0F                BLOCKEND4:      
0D0F   21 00 00               LD   hl,0   ; clear recur vector
0D12   22 EC 23               LD   (vRecurPtr),hl   
0D15   C3 A0 03               JP   go1   ; execute de
0D18                GOBLOCK:      
0D18   ED 53 04 24            LD   (vTemp1),de   ; save de
0D1C   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0D1F   FD 54                  LD   d,iyh   
0D21   FD 5D                  LD   e,iyl   
0D23   B7                     OR   a   ; if stack* == BP then this is the root_scope
0D24   ED 52                  SBC   hl,de   
0D26   ED 5B 04 24            LD   de,(vTemp1)   ; restore de
0D2A   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0D2B   B4                     OR   h   
0D2C   3E 00                  LD   a,0   
0D2E   28 6A                  JR   z,goFunc8   
0D30   C5                     PUSH   bc   ; push IP
0D31   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0D34   FD 46 05               LD   b,(iy+5)   
0D37   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0D3A   FD 66 03               LD   h,(iy+3)   
0D3D                GOBLOCK2:      
0D3D   C5                     PUSH   bc   ; arg_list*
0D3E   E5                     PUSH   hl   ; first_arg*
0D3F   FD E5                  PUSH   iy   ; push BP
0D41   FD 21 00 00            LD   iy,0   ; BP = SP
0D45   FD 39                  ADD   iy,sp   
0D47                GOBLOCK3:      
0D47   42 4B                  LD   bc,de   ; bc = de = block*-1
0D49   DD E9                  JP   (ix)   
0D4B                GOFUNC:      ; execute func
0D4B   EB                     EX   de,hl   ; hl = func*
0D4C   5E                     LD   e,(hl)   ; de = partial_array*
0D4D   23                     INC   hl   
0D4E   56                     LD   d,(hl)   
0D4F   23                     INC   hl   
0D50   7B                     LD   a,e   ; if partial_array* == null skip
0D51   B2                     OR   d   
0D52   28 21                  JR   z,goFunc3   
0D54   ED 43 04 24            LD   (vTemp1),bc   
0D58   22 06 24               LD   (vTemp2),hl   ; save bc,hl
0D5B   EB                     EX   de,hl   ; hl = partial_array*
0D5C   2B                     DEC   hl   ; bc = count
0D5D   46                     LD   b,(hl)   
0D5E   2B                     DEC   hl   
0D5F   4E                     LD   c,(hl)   
0D60   23                     INC   hl   ; hl = array data*
0D61   23                     INC   hl   
0D62   18 06                  JR   goFunc2   ; push each item on stack
0D64                GOFUNC1:      
0D64   5E                     LD   e,(hl)   ; de = partial item
0D65   23                     INC   hl   
0D66   56                     LD   d,(hl)   
0D67   23                     INC   hl   
0D68   D5                     PUSH   de   ; push on stack
0D69   0B                     DEC   bc   
0D6A                GOFUNC2:      
0D6A   79                     LD   a,c   ; if count != 0 then loop
0D6B   B0                     OR   b   
0D6C   20 F6                  JR   nz,goFunc1   
0D6E   ED 4B 04 24            LD   bc,(vTemp1)   ; restore bc
0D72   2A 06 24               LD   hl,(vTemp2)   ; restore hl
0D75                GOFUNC3:      
0D75   5E                     LD   e,(hl)   ; de = block*
0D76   23                     INC   hl   
0D77   56                     LD   d,(hl)   
0D78   23                     INC   hl   
0D79   ED 53 04 24            LD   (vTemp1),de   ; save block*
0D7D   5E                     LD   e,(hl)   ; de = arg_list*
0D7E   23                     INC   hl   
0D7F   56                     LD   d,(hl)   
0D80   23                     INC   hl   
0D81   EB                     EX   de,hl   ; hl = arg_list*
0D82   ED 5B 04 24            LD   de,(vTemp1)   ; restore de = block*
0D86   7D                     LD   a,l   ; if arg_list* == null a = 0
0D87   B4                     OR   h   
0D88   20 03                  JR   nz,goFunc4   
0D8A   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0D8B   18 0D                  JR   goFunc8   
0D8D                GOFUNC4:      ; allocate locals
0D8D   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0D8E   18 03                  JR   goFunc6   
0D90                GOFUNC5:      ; loop
0D90   3B                     DEC   sp   
0D91   3B                     DEC   sp   
0D92   3D                     DEC   a   
0D93                GOFUNC6:      
0D93   B7                     OR   a   
0D94   20 FA                  JR   nz,goFunc5   ; end loop
0D96                GOFUNC7:      
0D96   23                     INC   hl   ; a = num_args* x 2
0D97   7E                     LD   a,(hl)   
0D98   2B                     DEC   hl   
0D99   87                     ADD   a,a   ; a *= 2
0D9A                GOFUNC8:      
0D9A   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0D9B   44 4D                  LD   bc,hl   
0D9D   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0DA0   85                     ADD   a,l   
0DA1   6F                     LD   l,a   
0DA2   39                     ADD   hl,sp   
0DA3   18 98                  JR   goBlock2   
0DA5                             ; =                              21
0DA5                             ; value _oldValue --            ; uses address in vPointer 15
0DA5                ASSIGN:      
0DA5   E1                     POP   hl   ; discard last accessed value
0DA6   E1                     POP   hl   ; hl = new value
0DA7                ASSIGN0:      
0DA7   EB                     EX   de,hl   ; de = new value
0DA8   2A F8 23               LD   hl,(vPointer)   
0DAB                ASSIGN1:      ; entry point from defineEnd
0DAB   73                     LD   (hl),e   
0DAC   3A EE 23               LD   a,(vDataWidth)   
0DAF   3D                     DEC   a   ; is it byte?
0DB0   28 02                  JR   z,assign2   
0DB2   23                     INC   hl   
0DB3   72                     LD   (hl),d   
0DB4                ASSIGN2:      
0DB4   DD E9                  JP   (ix)   
0DB6                             ; hl = value1, de = value2
0DB6                             ; hl = result
0DB6                EQUALS:      
0DB6   B7                     OR   a   ; reset the carry flag
0DB7   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0DB9   28 16                  JR   z,true1   
0DBB   18 1A                  JR   false1   
0DBD                NOTEQUALS:      
0DBD   B7                     OR   a   ; reset the carry flag
0DBE   ED 52                  SBC   hl,de   
0DC0   20 0F                  JR   nz,true1   
0DC2   18 13                  JR   false1   
0DC4                             ; hl = value1 de = value2
0DC4                             ; hl = result
0DC4                LESSTHANEQ:      
0DC4   B7                     OR   a   
0DC5   ED 52                  SBC   hl,de   
0DC7   18 05                  JR   lessthan1   
0DC9                             ; hl = value1 de = value2
0DC9                             ; hl = result
0DC9                LESSTHAN:      
0DC9   B7                     OR   a   
0DCA   ED 52                  SBC   hl,de   
0DCC   28 09                  JR   z,false1   
0DCE                LESSTHAN1:      
0DCE   FA D7 0D               JP   m,false1   
0DD1                TRUE1:       
0DD1   21 FF FF               LD   hl,TRUE   
0DD4   E5                     PUSH   hl   
0DD5   DD E9                  JP   (ix)   
0DD7                NULL1:       
0DD7                FALSE1:      
0DD7   21 00 00               LD   hl,FALSE   
0DDA   E5                     PUSH   hl   
0DDB   DD E9                  JP   (ix)   
0DDD                SPREAD:      
0DDD   E1                     POP   hl   ; hl = array*
0DDE   ED 43 04 24            LD   (vTemp1),bc   ; save bc
0DE2   2B                     DEC   hl   ; bc = length
0DE3   46                     LD   b,(hl)   
0DE4   2B                     DEC   hl   
0DE5   4E                     LD   c,(hl)   
0DE6   23                     INC   hl   ; move back to array 0
0DE7   23                     INC   hl   
0DE8   18 0D                  JR   spread3   
0DEA                SPREAD1:      
0DEA   5E                     LD   e,(hl)   ; e = lsb data at hl
0DEB   23                     INC   hl   
0DEC   3A EE 23               LD   a,(vDataWidth)   ; data width = 1, d = 0, skip
0DEF   57                     LD   d,a   
0DF0   15                     DEC   d   
0DF1   28 02                  JR   z,spread2   
0DF3   56                     LD   d,(hl)   ; d = msb data at hl
0DF4   23                     INC   hl   
0DF5                SPREAD2:      
0DF5   D5                     PUSH   de   ; return de
0DF6   0B                     DEC   bc   ; count--
0DF7                SPREAD3:      
0DF7   79                     LD   a,c   ; exit loop if bc == 0
0DF8   B0                     OR   b   
0DF9   20 EF                  JR   nz,spread1   
0DFB   ED 4B 04 24            LD   bc,(vTemp1)   ; restore bc
0DFF   DD E9                  JP   (ix)   
0E01                             ; shiftLeft
0E01                             ; value count <<
0E01                             ; count variable <<=
0E01                SHIFTLEFT:      
0E01   E1                     POP   hl   ; de = arg_a, hl = arg_b
0E02   D1                     POP   de   
0E03   03                     INC   bc   
0E04   0A                     LD   a,(bc)   
0E05   FE 3D                  CP   "="   
0E07   28 02                  JR   z,shiftLeft2   
0E09   0B                     DEC   bc   
0E0A   EB                     EX   de,hl   ; de = arg_b, hl = arg_a
0E0B                SHIFTLEFT2:      
0E0B   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0E0F   43                     LD   b,e   ; b = loop counter
0E10   04                     INC   b   ; test for counter=0 case
0E11   18 01                  JR   shiftLeft4   
0E13                SHIFTLEFT3:      
0E13   29                     ADD   hl,hl   ; left shift hl
0E14                SHIFTLEFT4:      
0E14   10 FD                  DJNZ   shiftLeft3   
0E16   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0E1A   C3 9D 02               JP   sub3   
0E1D                             ; shiftRight
0E1D                             ; value count >>
0E1D                             ; count variable >>=
0E1D                SHIFTRIGHT:      
0E1D   E1                     POP   hl   ; de = arg_a, hl = arg_b
0E1E   D1                     POP   de   
0E1F   03                     INC   bc   
0E20   0A                     LD   a,(bc)   
0E21   FE 3D                  CP   "="   
0E23   28 02                  JR   z,shiftRight2   
0E25   0B                     DEC   bc   
0E26   EB                     EX   de,hl   ; de = arg_a, hl = arg_b
0E27                SHIFTRIGHT2:      
0E27   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0E2B   43                     LD   b,e   ; b = loop counter
0E2C   04                     INC   b   ; test for counter=0 case
0E2D   18 04                  JR   shiftRight4   
0E2F                SHIFTRIGHT3:      
0E2F   CB 3C                  SRL   h   ; right shift hl
0E31   CB 1D                  RR   l   
0E33                SHIFTRIGHT4:      
0E33   10 FA                  DJNZ   shiftRight3   
0E35   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0E39   C3 9D 02               JP   sub3   
0E3C                             ; division subroutine.
0E3C                             ; bc: divisor, de: dividend, hl: remainder
0E3C                DIVIDE:      
0E3C   21 00 00               LD   hl,0   ; zero the remainder
0E3F   3E 10                  LD   a,16   ; loop counter
0E41                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0E41   CB 21                  SLA   c   
0E43   CB 10                  RL   b   
0E45   ED 6A                  ADC   hl,hl   
0E47   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0E49   38 03                  JR   c,divide2   
0E4B   0C                     INC   c   
0E4C   18 01                  JR   divide3   
0E4E                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0E4E   19                     ADD   hl,de   
0E4F                DIVIDE3:      
0E4F   3D                     DEC   a   
0E50   20 EF                  JR   nz,divide1   
0E52   50 59                  LD   de,bc   ; result from bc to de
0E54   C9                     RET      
0E55                DOTNEXT:      
0E55   3A F2 23               LD   a,(vStrMode)   ; if string mode then exit
0E58   3C                     INC   a   
0E59   20 02                  JR   nz,dotNext1   
0E5B   DD E9                  JP   (ix)   
0E5D                DOTNEXT1:      
0E5D   11 00 22               LD   de,BUFFER   
0E60   2A E8 23               LD   hl,(vBufPtr)   
0E63   36 00                  LD   (hl),0   ; store NUL at end of string
0E65   ED 53 E8 23            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0E69   EB                     EX   de,hl   ; hl = BUFFER
0E6A   CD 20 10               CALL   putstr   
0E6D   DD E9                  JP   (ix)   
0E6F                             ; arg_list - parses arg_list e.g. ab:c
0E6F                             ; -- arg_list*
0E6F                PARSEARGS:      
0E6F   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0E72   2A EA 23               LD   hl,(vHeapPtr)   ; hl = heap*
0E75   E5                     PUSH   hl   ; save start of arg_list
0E76   23                     INC   hl   ; skip length fields to start of string
0E77   23                     INC   hl   
0E78   03                     INC   bc   ; point to next char
0E79                PARSEARGS1:      
0E79   0A                     LD   a,(bc)   
0E7A   FE 3A                  CP   ":"   ; ":" switches from args to locals
0E7C   20 03                  JR   nz,parseArgs1a   
0E7E   14                     INC   d   ; non zero value local count acts as flag
0E7F   18 10                  JR   parseArgs3   
0E81                PARSEARGS1A:      
0E81   FE 61                  CP   "a"   ; < "a" terminates arg_list
0E83   38 0F                  JR   c,parseArgs4   
0E85   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0E87   30 0B                  JR   nc,parseArgs4   
0E89                PARSEARGS2:      
0E89   77                     LD   (hl),a   
0E8A   23                     INC   hl   
0E8B   1C                     INC   e   ; increase arg count
0E8C   AF                     XOR   a   
0E8D   B2                     OR   d   
0E8E   28 01                  JR   z,parseArgs3   
0E90   14                     INC   d   ; if d > 0 increase local count
0E91                PARSEARGS3:      
0E91   03                     INC   bc   ; point to next char
0E92   18 E5                  JR   parseArgs1   
0E94                PARSEARGS4:      
0E94   0B                     DEC   bc   
0E95   AF                     XOR   a   
0E96   B2                     OR   d   
0E97   28 01                  JR   z,parseArgs5   
0E99   15                     DEC   d   ; remove initial inc
0E9A                PARSEARGS5:      
0E9A   23                     INC   hl   
0E9B   22 EA 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0E9E   E1                     POP   hl   ; hl = start of arg_list
0E9F   72                     LD   (hl),d   ; write number of locals at start - 1
0EA0   23                     INC   hl   
0EA1   73                     LD   (hl),e   ; write number of args + locals at start - 2
0EA2   2B                     DEC   hl   
0EA3   E3                     EX   (sp),hl   
0EA4   E9                     JP   (hl)   
0EA5                             ; create block: parses block e.g. 00bbIC4uLi4g
0EA5                             ; -- block*
0EA5                PARSEBLOCK:      
0EA5   C5                     PUSH   bc   ; return pointer to first { of block
0EA6   03                     INC   bc   
0EA7   16 01                  LD   d,1   ; nesting: count first parenthesis
0EA9                PARSEBLOCK1:      ; Skip to end of definition
0EA9   0A                     LD   a,(bc)   ; Get the next character
0EAA   03                     INC   bc   ; Point to next character
0EAB   FE 21                  CP   " " + 1   ; ignore whitespace
0EAD   38 FA                  JR   c,parseBlock1   
0EAF   FE 27                  CP   "'"   ; quote char
0EB1   28 0F                  JR   z,parseBlock2   
0EB3   FE 22                  CP   DQ   ; double quote char
0EB5   28 0B                  JR   z,parseBlock2   
0EB7   FE 60                  CP   "`"   ; grave char
0EB9   28 07                  JR   z,parseBlock2   
0EBB   CB 7A                  BIT   7,d   
0EBD   20 EA                  JR   nz,parseBlock1   
0EBF   C3 C8 0E               JP   parseBlock3   
0EC2                PARSEBLOCK2:      
0EC2   3E 80                  LD   a,$80   
0EC4   AA                     XOR   d   
0EC5   57                     LD   d,a   
0EC6   18 E1                  JR   parseBlock1   
0EC8                PARSEBLOCK3:      
0EC8   FE 28                  CP   "("   
0ECA   28 16                  JR   z,parseBlock4   
0ECC   FE 7B                  CP   "{"   
0ECE   28 12                  JR   z,parseBlock4   
0ED0   FE 5B                  CP   "["   
0ED2   28 0E                  JR   z,parseBlock4   
0ED4   FE 29                  CP   ")"   
0ED6   28 0D                  JR   z,parseBlock5   
0ED8   FE 7D                  CP   "}"   
0EDA   28 09                  JR   z,parseBlock5   
0EDC   FE 5D                  CP   "]"   
0EDE   28 05                  JR   z,parseBlock5   
0EE0   18 C7                  JR   parseBlock1   
0EE2                PARSEBLOCK4:      
0EE2   14                     INC   d   
0EE3   18 C4                  JR   parseBlock1   
0EE5                PARSEBLOCK5:      
0EE5   15                     DEC   d   
0EE6   20 C1                  JR   nz,parseBlock1   ; get the next element
0EE8   60 69                  LD   hl,bc   ; hl = IP
0EEA   11 22 24               LD   de,HEAP   ; is IP pointing to object in heap
0EED   B7                     OR   a   ; IP - HEAP
0EEE   ED 52                  SBC   hl,de   
0EF0   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0EF2   28 1C                  JR   z,parseBlock6   
0EF4   60 69                  LD   hl,bc   ; hl = IP
0EF6   D1                     POP   de   ; de = block*
0EF7   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0EFB   B7                     OR   a   ; bc = size
0EFC   ED 52                  SBC   hl,de   
0EFE   44 4D                  LD   bc,hl   
0F00   EB                     EX   de,hl   ; hl = block* de = heap*
0F01   ED 5B EA 23            LD   de,(vHeapPtr)   
0F05   D5                     PUSH   de   ; return hblock*
0F06   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0F08   ED 53 EA 23            LD   (vHeapPtr),de   ; heap* += size
0F0C   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0F10                PARSEBLOCK6:      
0F10   0B                     DEC   bc   ; balanced, exit
0F11   E1                     POP   hl   ; hl = block*
0F12   E3                     EX   (sp),hl   ; return to caller
0F13   E9                     JP   (hl)   
0F14                             ; create function
0F14                             ; arg_list* block* -- func*
0F14                CREATEFUNC:      
0F14   E1                     POP   hl   ; save retrn address
0F15   22 08 24               LD   (vTemp3),hl   
0F18   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0F1C   E1                     POP   hl   ; hl = block*
0F1D   22 06 24               LD   (vTemp2),hl   ; save block*
0F20   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0F23   FD 56 05               LD   d,(iy+5)   
0F26   7B                     LD   a,e   ; if arg_list == null then make a func
0F27   B2                     OR   d   
0F28   20 09                  JR   nz,createFunc0   
0F2A   21 00 00               LD   hl,0   ; partial_array = null
0F2D   ED 5B EA 23            LD   de,(vHeapPtr)   ; de = compile*
0F31   18 65                  JR   createFunc5   
0F33                CREATEFUNC0:      
0F33   E1                     POP   hl   ; hl = inner_arg_list*
0F34   E5                     PUSH   hl   ; save inner_arg_list
0F35   ED 5B EA 23            LD   de,(vHeapPtr)   ; de = compile*
0F39   7E                     LD   a,(hl)   ; compile inner_num_locals
0F3A   4F                     LD   c,a   ; b = inner_num_locals
0F3B   12                     LD   (de),a   
0F3C   23                     INC   hl   
0F3D   13                     INC   de   
0F3E   7E                     LD   a,(hl)   ; compile inner_length
0F3F   12                     LD   (de),a   
0F40   91                     SUB   c   ; a = inner_num args
0F41   23                     INC   hl   
0F42   13                     INC   de   
0F43   B7                     OR   a   ; compile args if inner_length > 0
0F44   28 05                  JR   z,createFunc1   
0F46   4F                     LD   c,a   ; bc = a
0F47   06 00                  LD   b,0   
0F49   ED B0                  LDIR      
0F4B                CREATEFUNC1:      
0F4B   EB                     EX   de,hl   ; hl = outer_arg_list
0F4C   FD 5E 04               LD   e,(iy+4)   
0F4F   FD 56 05               LD   d,(iy+5)   
0F52   EB                     EX   de,hl   
0F53   23                     INC   hl   ; a = outer_length
0F54   7E                     LD   a,(hl)   
0F55   23                     INC   hl   
0F56   B7                     OR   a   
0F57   28 05                  JR   z,createFunc2   
0F59   4F                     LD   c,a   
0F5A   06 00                  LD   b,0   
0F5C   ED B0                  LDIR      ; append outer_args
0F5E                CREATEFUNC2:      ; a = outer_length
0F5E   47                     LD   b,a   ; b = a = outer_length
0F5F   2A EA 23               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0F62   23                     INC   hl   
0F63   7E                     LD   a,(hl)   ; add outer_length to new length
0F64   80                     ADD   a,b   
0F65   77                     LD   (hl),a   
0F66   2B                     DEC   hl   
0F67   78                     LD   a,b   ; save outer_length in a'
0F68   08                     EX   af,af'   
0F69   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0F6A   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0F6B   B7                     OR   a   
0F6C   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0F6E   4F                     LD   c,a   ; c = inner_num_locals
0F6F   06 00                  LD   b,0   ; bc = inner_num_locals
0F71   23                     INC   hl   ; a = inner_length
0F72   7E                     LD   a,(hl)   
0F73   91                     SUB   c   ; a = inner_num_args
0F74   23                     INC   hl   ; hl = inner_arg_chars
0F75   85                     ADD   a,l   ; hl += a
0F76   6F                     LD   l,a   
0F77   3E 00                  LD   a,0   
0F79   84                     ADD   a,h   
0F7A   67                     LD   h,a   
0F7B   ED B0                  LDIR      ; append inner_locals
0F7D                CREATEFUNC2A:      
0F7D   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0F7E   12                     LD   (de),a   ; compile partial_array length field
0F7F   13                     INC   de   
0F80   AF                     XOR   a   
0F81   12                     LD   (de),a   
0F82   13                     INC   de   
0F83   D5                     PUSH   de   ; push partial_array*
0F84   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0F85   FD 5E 02               LD   e,(iy+2)   
0F88   FD 56 03               LD   d,(iy+3)   
0F8B   EB                     EX   de,hl   
0F8C                CREATEFUNC3:      
0F8C   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0F8D   4E                     LD   c,(hl)   
0F8E   2B                     DEC   hl   
0F8F   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0F90   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0F91   13                     INC   de   
0F92   79                     LD   a,c   
0F93   12                     LD   (de),a   
0F94   13                     INC   de   
0F95   10 F5                  DJNZ   createFunc3   ; b = outer_length
0F97                CREATEFUNC4:      
0F97   E1                     POP   hl   ; hl = partial_array*
0F98                CREATEFUNC5:      
0F98   C1                     POP   bc   ; bc = new_arg_list*
0F99   D5                     PUSH   de   ; return new func*
0F9A   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0F9B   73                     LD   (hl),e   ; compile partial_array* to func
0F9C   23                     INC   hl   
0F9D   72                     LD   (hl),d   
0F9E   23                     INC   hl   
0F9F   ED 5B 06 24            LD   de,(vTemp2)   ; de = block*
0FA3   73                     LD   (hl),e   ; compile block* to func
0FA4   23                     INC   hl   
0FA5   72                     LD   (hl),d   
0FA6   23                     INC   hl   
0FA7   71                     LD   (hl),c   ; compile new_arg_list* to func
0FA8   23                     INC   hl   
0FA9   70                     LD   (hl),b   
0FAA   23                     INC   hl   
0FAB   22 EA 23               LD   (vHeapPtr),hl   ; bump heap ptr
0FAE   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0FB2   2A 08 24               LD   hl,(vTemp3)   ; jump to return address
0FB5   E9                     JP   (hl)   
0FB6                             ;*******************************************************************
0FB6                             ; general routines
0FB6                             ;*******************************************************************
0FB6                             ; hl = address
0FB6                VARIABLE:      
0FB6   22 F8 23               LD   (vPointer),hl   
0FB9   5E                     LD   e,(hl)   
0FBA   3A EE 23               LD   a,(vDataWidth)   
0FBD   3D                     DEC   a   
0FBE   16 00                  LD   d,0   
0FC0   28 03                  JR   z,constant   
0FC2   23                     INC   hl   
0FC3   56                     LD   d,(hl)   
0FC4   2B                     DEC   hl   
0FC5                CONSTANT:      
0FC5   D5                     PUSH   de   
0FC6   DD E9                  JP   (ix)   
0FC8                             ; followed by a table
0FC8                             ; indexed on the 0-25 lowercase letter
0FC8                             ; db lsb(addr)
0FC8                             ; the final item index 26 matches any other char
0FC8                CHARTABLE:      
0FC8   03                     INC   bc   
0FC9   0A                     LD   a,(bc)   
0FCA   FE 7B                  CP   "z"+1   
0FCC   30 10                  JR   nc,charTable3   
0FCE   D6 61                  SUB   "a"   
0FD0   38 0C                  JR   c,charTable3   
0FD2                CHARTABLE1:      
0FD2   E1                     POP   hl   
0FD3   85                     ADD   a,l   
0FD4   6F                     LD   l,a   
0FD5   7E                     LD   a,(hl)   ; must have the same msb as the table
0FD6   B7                     OR   a   ; a = 0, nop
0FD7   20 03                  JR   nz,charTable2   
0FD9   C3 DE 06               JP   error1   
0FDC                CHARTABLE2:      
0FDC   6F                     LD   l,a   
0FDD   E9                     JP   (hl)   
0FDE                CHARTABLE3:      
0FDE   3E 1A                  LD   a,26   
0FE0   0B                     DEC   bc   
0FE1   18 EF                  JR   charTable1   
0FE3                             ; followed by a table
0FE3                             ; db char
0FE3                             ; db char - if null only match on first char
0FE3                             ; dw addr
0FE3                             ; the final item must have char == NUL
0FE3                CMDTABLE:      
0FE3   E1                     POP   hl   
0FE4                CMDTABLE1:      
0FE4                CMDTABLE2:      
0FE4   56                     LD   d,(hl)   
0FE5   23                     INC   hl   
0FE6   5E                     LD   e,(hl)   
0FE7   23                     INC   hl   
0FE8   AF                     XOR   a   ; if d == 0, matched
0FE9   BA                     CP   d   
0FEA   28 14                  JR   z,cmdTable5   
0FEC   03                     INC   bc   ; match?
0FED   0A                     LD   a,(bc)   
0FEE   BA                     CP   d   
0FEF   20 0A                  JR   nz,cmdTable4   
0FF1                CMDTABLE3:      
0FF1   AF                     XOR   a   ; if e == 0, matched
0FF2   BB                     CP   e   
0FF3   28 0B                  JR   z,cmdTable5   
0FF5   03                     INC   bc   
0FF6   0A                     LD   a,(bc)   ; match?
0FF7   BB                     CP   e   
0FF8   28 06                  JR   z,cmdTable5   
0FFA   0B                     DEC   bc   
0FFB                CMDTABLE4:      ; no match, restore bc, go to next table entry
0FFB   0B                     DEC   bc   
0FFC   23                     INC   hl   
0FFD   23                     INC   hl   
0FFE   18 E4                  JR   cmdTable2   
1000                CMDTABLE5:      ; matched, jump to addr
1000   5E                     LD   e,(hl)   
1001   23                     INC   hl   
1002   56                     LD   d,(hl)   
1003   EB                     EX   de,hl   
1004   E9                     JP   (hl)   
1005                GETVARADDR:      
1005   21 00 00               LD   hl,0   
1008   FE 7B                  CP   "z"+1   ; if a > z then exit
100A   D0                     RET   nc   
100B   D6 41                  SUB   "A"   ; a - 65
100D   D8                     RET   c   ; if < A then exit
100E   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
1010   38 05                  JR   c,getVarAddr1   
1012   D6 06                  SUB   "a"-("Z"+1)   
1014   FE 1A                  CP   "Z"-"A"+1   
1016   D8                     RET   c   ; if < a then exit
1017                GETVARADDR1:      
1017   87                     ADD   a,a   ; double a
1018   6F                     LD   l,a   
1019   26 23                  LD   h,msb(VARS)   
101B   C9                     RET      
101C                PUTSTR0:      
101C   CD 85 00               CALL   putchar   
101F   23                     INC   hl   
1020                PUTSTR:      
1020   7E                     LD   a,(hl)   
1021   B7                     OR   a   
1022   20 F8                  JR   nz,putstr0   
1024   C9                     RET      
1025                             ; hl = value
1025                             ; de = buffer*
1025                             ; a, bc, de, hl destroyed
1025                FORMATDEC0:      
1025   E5                     PUSH   hl   
1026   D9                     EXX      
1027   E1                     POP   hl   
1028                             ; hl = value
1028                             ; de' = buffer*
1028                             ; a, bc, de, hl destroyed
1028                FORMATDEC:      
1028   CB 7C                  BIT   7,h   
102A   28 0C                  JR   z,formatDec2   
102C   D9                     EXX      
102D   3E 2D                  LD   a,"-"   
102F   12                     LD   (de),a   
1030   13                     INC   de   
1031   D9                     EXX      
1032   AF                     XOR   a   
1033   95                     SUB   l   
1034   6F                     LD   l,a   
1035   9F                     SBC   a,a   
1036   94                     SUB   h   
1037   67                     LD   h,a   
1038                FORMATDEC2:      
1038   0E 00                  LD   c,0   ; leading zeros flag = false
103A   11 F0 D8               LD   de,-10000   
103D   CD 58 10               CALL   formatDec4   
1040   11 18 FC               LD   de,-1000   
1043   CD 58 10               CALL   formatDec4   
1046   11 9C FF               LD   de,-100   
1049   CD 58 10               CALL   formatDec4   
104C   1E F6                  LD   e,-10   
104E   CD 58 10               CALL   formatDec4   
1051   0C                     INC   c   ; flag = true for at least digit
1052   1E FF                  LD   e,-1   
1054   CD 58 10               CALL   formatDec4   
1057   C9                     RET      
1058                FORMATDEC4:      
1058   06 2F                  LD   b,"0"-1   
105A                FORMATDEC5:      
105A   04                     INC   b   
105B   19                     ADD   hl,de   
105C   38 FC                  JR   c,formatDec5   
105E   ED 52                  SBC   hl,de   
1060   3E 30                  LD   a,"0"   
1062   B8                     CP   b   
1063   20 05                  JR   nz,formatDec6   
1065   AF                     XOR   a   
1066   B1                     OR   c   
1067   C8                     RET   z   
1068   18 01                  JR   formatDec7   
106A                FORMATDEC6:      
106A   0C                     INC   c   
106B                FORMATDEC7:      
106B   78                     LD   a,b   
106C   D9                     EXX      
106D   12                     LD   (de),a   
106E   13                     INC   de   
106F   D9                     EXX      
1070   C9                     RET      
1071                             ; **************************************************************************
1071                             ; calculate nesting value
1071                             ; a is char to be tested,
1071                             ; e is the nesting value (initially 0)
1071                             ; e is increased by ( and [
1071                             ; e is decreased by ) and ]
1071                             ; e has its bit 7 toggled by `
1071                             ; limited to 127 levels
1071                             ; **************************************************************************
1071                NESTING:      
1071   FE 27                  CP   "'"   ; quote char
1073   28 0A                  JR   z,nesting0   
1075   FE 22                  CP   DQ   ; double quote char
1077   28 06                  JR   z,nesting0   
1079   FE 60                  CP   "`"   ; grave char
107B   28 02                  JR   z,nesting0   
107D   18 0A                  JR   nesting1   
107F                NESTING0:      
107F   CB 7B                  BIT   7,e   
1081   28 03                  JR   z,nesting1a   
1083   CB BB                  RES   7,e   
1085   C9                     RET      
1086                NESTING1A:      
1086   CB FB                  SET   7,e   
1088   C9                     RET      
1089                NESTING1:      
1089   CB 7B                  BIT   7,e   
108B   C0                     RET   nz   
108C   FE 7B                  CP   "{"   
108E   28 08                  JR   z,nesting2   
1090   FE 5B                  CP   "["   
1092   28 04                  JR   z,nesting2   
1094   FE 28                  CP   "("   
1096   20 02                  JR   nz,nesting3   
1098                NESTING2:      
1098   1C                     INC   e   
1099   C9                     RET      
109A                NESTING3:      
109A   FE 7D                  CP   "}"   
109C   28 07                  JR   z,nesting4   
109E   FE 5D                  CP   "]"   
10A0   28 03                  JR   z,nesting4   
10A2   FE 29                  CP   ")"   
10A4   C0                     RET   nz   
10A5                NESTING4:      
10A5   1D                     DEC   e   
10A6   C9                     RET      
10A7                PROMPT:      
10A7   CD B7 10               CALL   printStr   
10AA   0D 0A 3E 20 00         .CSTR   "\r\n> "   
10AF   C9                     RET      
10B0                CRLF:        
10B0   CD B7 10               CALL   printStr   
10B3   0D 0A 00               .CSTR   "\r\n"   
10B6   C9                     RET      
10B7                             ; prints a null teminated string
10B7                             ; the string should be immediately following the call
10B7                PRINTSTR:      
10B7   E3                     EX   (sp),hl   ; swap			
10B8   CD 20 10               CALL   putstr   
10BB   23                     INC   hl   ; inc past NUL
10BC   E3                     EX   (sp),hl   ; put it back	
10BD   C9                     RET      
10BE                PRINTANSISEQ:      
10BE   CD B7 10               CALL   printStr   
10C1   1B 5B 00               .CSTR   ESC,"["   
10C4   C9                     RET      
10C5                PRINTANSISTR:      
10C5   CD BE 10               CALL   printAnsiSeq   
10C8   C3 B7 10               JP   printStr   
10CB                             ; hl = number to print in decimal
10CB                PRINTNUM:      
10CB   ED 5B E8 23            LD   de,(vBufPtr)   ; de' = buffer*
10CF   CD 25 10               CALL   formatDec0   
10D2   D9                     EXX      ; restore de = buffer*
10D3   3E 00                  LD   a,0   ; append NUL to buffer
10D5   12                     LD   (de),a   
10D6   13                     INC   de   ; string*++,
10D7   ED 53 E8 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
10DB   21 00 22               LD   hl,BUFFER   
10DE   22 E8 23               LD   (vBufPtr),hl   ; reset vBufPtr to vHeapPtr
10E1   C3 20 10               JP   putstr   
10E4                INIT:        
10E4   21 F0 01               LD   hl,titleStr   
10E7   11 0E 24               LD   de,titleBuf   
10EA   06 14                  LD   b,20   
10EC                INIT1:       
10EC   1A                     LD   a,(de)   
10ED   BE                     CP   (hl)   
10EE   20 17                  JR   nz,coldBoot0   
10F0   13                     INC   de   
10F1   23                     INC   hl   
10F2   10 F8                  DJNZ   init1   
10F4                WARMINIT:      
10F4   ED 4B FC 23            LD   bc,(vSavedIP)   ; restore IP
10F8   ED 7B FE 23            LD   sp,(vSavedSP)   ; restore SP
10FC   DD 2A 00 24            LD   ix,(vSavedNext)   ; restore Next
1100   FD 2A 02 24            LD   iy,(vSavedBP)   ; restore BP
1104   C3 3E 11               JP   start1   
1107                COLDBOOT0:      
1107   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
110A   11 0E 24               LD   de,titleBuf   
110D   06 14                  LD   b,20   
110F   ED B0                  LDIR      
1111                COLDINIT:      
1111   21 DE 01               LD   hl,isysVars   
1114   11 E6 23               LD   de,sysVars   
1117   01 12 00               LD   bc,4 * 2 + 10   
111A   ED B0                  LDIR      
111C   21 00 23               LD   hl,vars   ; 52 vars LO HI
111F   06 34                  LD   b,26*2   
1121   AF                     XOR   a   
1122                COLDBOOT1:      
1122   77                     LD   (hl),a   
1123   23                     INC   hl   
1124   10 FC                  DJNZ   coldBoot1   
1126   DD 21 BA 11            LD   ix,NEXT   
112A   FD 21 00 21            LD   iy,STACK   
112E   C9                     RET      
112F                COLDSTART:      
112F   31 00 21               LD   sp,STACK   
1132   CD 07 11               CALL   coldBoot0   
1135   C3 3E 11               JP   start1   
1138                START:       
1138   31 00 21               LD   sp,STACK   ; start Monty
113B   CD E4 10               CALL   init   ; setups
113E                START1:      
113E   21 0E 24               LD   hl,titleBuf   
1141   CD 20 10               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
1144                INTERPRET:      
1144   CD A7 10               CALL   prompt   
1147   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
114A   21 00 21               LD   hl,TIB   
114D   22 E6 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
1150                INTERPRET2:      ; calculate nesting
1150   1E 00                  LD   e,0   ; initilize nesting value
1152   C5                     PUSH   bc   ; save offset into TIB,
1153                             ; bc is also the count of chars in TIB
1153   21 00 21               LD   hl,TIB   ; hl is start of TIB
1156   18 06                  JR   interpret4   
1158                INTERPRET3:      
1158   7E                     LD   a,(hl)   ; a = char in TIB
1159   23                     INC   hl   ; inc pointer into TIB
115A   0B                     DEC   bc   ; dec count of chars in TIB
115B   CD 71 10               CALL   nesting   ; update nesting value
115E                INTERPRET4:      
115E   79                     LD   a,c   ; is count zero?
115F   B0                     OR   b   
1160   20 F6                  JR   nz,interpret3   ; if not loop
1162   C1                     POP   bc   ; restore offset into TIB
1163                INTERPRET5:      
1163   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
1166   FE 20                  CP   $20   ; compare to space
1168   30 14                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
116A   FE 00                  CP   NUL   ; is it end of string? NUL end of string
116C   28 31                  JR   z,interpret8   
116E   FE 0D                  CP   "\r"   ; carriage return? ascii 13
1170   28 1A                  JR   z,interpret7   ; if anything else its macro/control
1172   FE 08                  CP   CTRL_H   
1174   CA F0 11               JP   z,backSpace_   
1177   FE 0A                  CP   CTRL_J   
1179   CA 00 12               JP   z,reEdit_   
117C                INTERPRET5A:      
117C   18 D2                  JR   interpret2   
117E                INTERPRET6:      
117E   21 00 21               LD   hl,TIB   
1181   09                     ADD   hl,bc   
1182   77                     LD   (hl),a   ; store the character in textbuf
1183   03                     INC   bc   
1184   CD 85 00               CALL   putchar   ; echo character to screen
1187   CD 71 10               CALL   nesting   
118A   18 D7                  JR   interpret5   ; wait for next character
118C                INTERPRET7:      
118C   21 00 21               LD   hl,TIB   
118F   09                     ADD   hl,bc   
1190   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
1192   23                     INC   hl   
1193   36 0A                  LD   (hl),"\n"   
1195   23                     INC   hl   
1196   03                     INC   bc   
1197   03                     INC   bc   
1198   CD B0 10               CALL   crlf   ; echo character to screen
119B   7B                     LD   a,e   ; if zero nesting append and ETX after \r
119C   B7                     OR   a   
119D   20 C4                  JR   nz,interpret5   
119F                INTERPRET8:      
119F   21 00 21               LD   hl,TIB   
11A2   09                     ADD   hl,bc   
11A3   22 E6 23               LD   (vTIBPtr),hl   
11A6   01 00 21               LD   bc,TIB   
11A9   ED 43 FC 23            LD   (vSavedIP),bc   ; save IP
11AD   ED 73 FE 23            LD   (vSavedSP),sp   ; save SP
11B1   DD 22 00 24            LD   (vSavedNext),ix   ; save Next
11B5   FD 22 02 24            LD   (vSavedBP),iy   ; save BP
11B9   0B                     DEC   bc   
11BA                NEXT:        
11BA   03                     INC   bc   ; Increment the IP
11BB   0A                     LD   a,(bc)   ; Get the next character and dispatch
11BC   FE 20                  CP   " "   ; whitespace?
11BE   28 FA                  JR   z,next   ; space? ignore
11C0   38 0D                  JR   c,next1   
11C2   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
11C4   6F                     LD   l,a   ; index into table
11C5   26 01                  LD   h,msb(opcodes)   ; start address of jump table
11C7   6E                     LD   l,(hl)   ; get low jump address
11C8   24                     INC   h   ; page 2
11C9   FE BA                  CP   "Z" - "!" + 1 + $80   
11CB   38 01                  JR   c,next0   
11CD   24                     INC   h   ; page 3
11CE                NEXT0:       
11CE   E9                     JP   (hl)   ; Jump to routine
11CF                NEXT1:       
11CF   FE 00                  CP   NUL   ; end of input string?
11D1   28 03                  JR   z,exit   
11D3   C3 44 11               JP   interpret   ; no, other whitespace, macros?
11D6                EXIT:        
11D6   03                     INC   bc   
11D7   60 69                  LD   hl,bc   
11D9   E9                     JP   (hl)   
11DA                RUN:         
11DA   C1                     POP   bc   
11DB   0B                     DEC   bc   
11DC   DD E9                  JP   (ix)   
11DE                ERROR:       
11DE   E5                     PUSH   hl   
11DF   CD DA 11               CALL   run   
11E2   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
11ED   C3 44 11               JP   interpret   
11F0                BACKSPACE_:      
11F0   79                     LD   a,c   
11F1   B0                     OR   b   
11F2   CA 50 11               JP   z,interpret2   
11F5   0B                     DEC   bc   
11F6   CD B7 10               CALL   printStr   
11F9   08 20 08 00            .CSTR   "\b \b"   
11FD   C3 50 11               JP   interpret2   
1200                REEDIT_:      
1200   CD B7 10               CALL   printStr   
1203   0D 3E 20 00            .CSTR   "\r> "   
1207   21 00 21               LD   hl,TIB   
120A   18 04                  JR   reEdit1   
120C                REEDIT0:      
120C   CD 85 00               CALL   putchar   
120F   23                     INC   hl   
1210                REEDIT1:      
1210   7E                     LD   a,(hl)   
1211   FE 0D                  CP   "\r"   
1213   20 F7                  JR   nz,reEdit0   
1215   11 00 21               LD   de,TIB   
1218   B7                     OR   a   
1219   ED 52                  SBC   hl,de   
121B   44 4D                  LD   bc,hl   
121D   C3 50 11               JP   interpret2   
1220                             ; clears screen and sets cursor to 0,0
1220                ANSICLEARSCREEN:      
1220   CD C5 10               CALL   printAnsiStr   
1223   32 4A 00               .CSTR   "2J"   ; falls through
1226                             ; call printAnsiStr
1226                             ; .cstr "H"
1226   C9                     RET      
1227                             ; a = 0:toEnd 1:toStart 2:entireLine
1227                ANSICLEARLINE:      
1227   C6 30                  ADD   a,"0"   ; ascii
1229   08                     EX   af,af'   ; save a
122A   CD BE 10               CALL   printAnsiSeq   
122D   08                     EX   af,af'   ; restore
122E   CD 85 00               CALL   putChar   
1231   3E 4B                  LD   a,"K"   
1233   C3 85 00               JP   putChar   
1236                             ; h = column, l = row
1236                ANSIGOTO:      
1236   D9                     EXX      ; save hl
1237   CD BE 10               CALL   printAnsiSeq   
123A   D9                     EXX      ; restore hl
123B   7C                     LD   a,h   ; save column
123C   08                     EX   af,af'   
123D   26 00                  LD   h,0   ; print row
123F   CD CB 10               CALL   printNum   
1242   3E 3B                  LD   a,";"   
1244   CD 85 00               CALL   putChar   
1247   08                     EX   af,af'   ; restore column
1248   6C                     LD   l,h   ; print column
1249   26 00                  LD   h,0   
124B   CD CB 10               CALL   printNum   
124E   3E 48                  LD   a,"H"   
1250   C3 85 00               JP   putChar   
1253                             ; h = "A":Up "B":Down "C":Forward "D":Back
1253                             ; l = amount
1253                ANSIMOVE:      
1253   D9                     EXX      ; save hl
1254   CD C5 10               CALL   printAnsiStr   
1257   D9                     EXX      ; restore hl
1258   7C                     LD   a,h   
1259   08                     EX   af,af'   ; save a
125A   26 00                  LD   h,0   ; print amount
125C   CD CB 10               CALL   printNum   
125F   08                     EX   af,af'   ; restore a
1260   C3 85 00               JP   putChar   ; print direction code
1263                             ; a = 0:normal 1:bold 2:low 4:underline 5:blink 7:reverse
1263                ANSITEXTSTYLE:      
1263   C6 30                  ADD   a,"0"   ; ascii
1265   08                     EX   af,af'   ; save a
1266   CD BE 10               CALL   printAnsiSeq   
1269   08                     EX   af,af'   ; restore
126A   CD 85 00               CALL   putChar   
126D   3E 6D                  LD   a,"m"   
126F   C3 85 00               JP   putChar   
1272                             ; a = "h":show "l":hide
1272                ANSICURSORSHOW:      
1272   08                     EX   af,af'   ; save a
1273   CD C5 10               CALL   printAnsiStr   
1276   3F 32 35 6C 00         .CSTR   "?25l"   
127B   08                     EX   af,af'   ; restore
127C   C3 85 00               JP   putChar   
127F                             ; 
127F                F1:          
127F                F2:          
127F                F3:          
127F                F4:          
127F                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VTIBPTR:   DS   2   
23E8                VBUFPTR:   DS   2   
23EA                VHEAPPTR:   DS   2   
23EC                VRECURPTR:   DS   2   
23EE                VDATAWIDTH:   DS   1   
23EF                VNUMBASE:   DS   1   
23F0                VHEXPREFIX:   DS   1   
23F1                VECHO:    DS   1   
23F2                VSTRMODE:   DS   1   
23F3                          DS   1   
23F4                          DS   1   
23F5                          DS   1   
23F6                          DS   1   
23F7                          DS   1   
23F8                             ; uninitialised sys variables (preserved)
23F8                VPOINTER:   DS   2   ; 
23FA                VREMAIN:   DS   2   ; 
23FC                VSAVEDIP:   DS   2   ; 
23FE                VSAVEDSP:   DS   2   ; 
2400                VSAVEDNEXT:   DS   2   ; 
2402                VSAVEDBP:   DS   2   ; 
2404                             ; uninitialised sys variables (unpreserved)
2404                VTEMP1:   DS   2   ; 
2406                VTEMP2:   DS   2   ; 
2408                VTEMP3:   DS   2   ; 
240A                          DS   2   ; 
240C                TBPTR:    DS   2   ; reserved for tests
240E                TITLEBUF:   DS   20   
2422                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 17
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
                    > USED AT LINE 2562 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1528 IN MAIN.asm
                    > USED AT LINE 1538 IN MAIN.asm
                    > USED AT LINE 2667 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1546 IN MAIN.asm
                    > USED AT LINE 2422 IN MAIN.asm
                    > USED AT LINE 2689 IN MAIN.asm
                    > USED AT LINE 2773 IN MAIN.asm
                    > USED AT LINE 15 IN ansi.asm
                    > USED AT LINE 17 IN ansi.asm
                    > USED AT LINE 29 IN ansi.asm
                    > USED AT LINE 35 IN ansi.asm
                    > USED AT LINE 48 IN ansi.asm
                    > USED AT LINE 56 IN ansi.asm
                    > USED AT LINE 58 IN ansi.asm
                    > USED AT LINE 66 IN ansi.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 161 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 1274 IN MAIN.asm
                    > USED AT LINE 1955 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 162 IN MAIN.asm
                    > USED AT LINE 1218 IN MAIN.asm
                    > USED AT LINE 1271 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1520 IN MAIN.asm
                    > USED AT LINE 1522 IN MAIN.asm
                    > USED AT LINE 1524 IN MAIN.asm
                    > USED AT LINE 2670 IN MAIN.asm
                    > USED AT LINE 2738 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 2140 IN MAIN.asm
                    > USED AT LINE 2505 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2675 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2677 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2608 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 173 IN MAIN.asm
                    > USED AT LINE 2583 IN MAIN.asm
                    > USED AT LINE 2602 IN MAIN.asm
COLON_:             0204 DEFINED AT LINE 178 IN MAIN.asm
COMMA_:             0206 DEFINED AT LINE 181 IN MAIN.asm
DOLLAR_:            0209 DEFINED AT LINE 184 IN MAIN.asm
DQUOTE_:            020C DEFINED AT LINE 187 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 188 IN MAIN.asm
DOT_:               020F DEFINED AT LINE 191 IN MAIN.asm
PERCENT_:           0212 DEFINED AT LINE 194 IN MAIN.asm
QUESTION_:          0215 DEFINED AT LINE 197 IN MAIN.asm
LPAREN_:            0218 DEFINED AT LINE 200 IN MAIN.asm
SLASH_:             021B DEFINED AT LINE 203 IN MAIN.asm
NUM_:               021E DEFINED AT LINE 206 IN MAIN.asm
BANG_:              0221 DEFINED AT LINE 209 IN MAIN.asm
BANG:               0221 DEFINED AT LINE 210 IN MAIN.asm
NOT:                022C DEFINED AT LINE 218 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
EQ_:                0232 DEFINED AT LINE 222 IN MAIN.asm
EQ:                 0232 DEFINED AT LINE 223 IN MAIN.asm
EQ0:                023C DEFINED AT LINE 230 IN MAIN.asm
                    > USED AT LINE 227 IN MAIN.asm
EQ1:                023D DEFINED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
GT_:                0241 DEFINED AT LINE 236 IN MAIN.asm
GT:                 0241 DEFINED AT LINE 237 IN MAIN.asm
LT_:                024C DEFINED AT LINE 245 IN MAIN.asm
LT:                 024C DEFINED AT LINE 246 IN MAIN.asm
LT1:                0255 DEFINED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
HASH_:              025E DEFINED AT LINE 261 IN MAIN.asm
SEMICOLON_:         025E DEFINED AT LINE 262 IN MAIN.asm
SEMICOLON:          025E DEFINED AT LINE 263 IN MAIN.asm
ARRAYINDEX:         025E DEFINED AT LINE 264 IN MAIN.asm
ARRAYINDEX0:        0266 DEFINED AT LINE 270 IN MAIN.asm
ARRAYINDEX1:        0267 DEFINED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
RPAREN_:            026B DEFINED AT LINE 277 IN MAIN.asm
RPAREN:             026B DEFINED AT LINE 279 IN MAIN.asm
AMPER_:             0273 DEFINED AT LINE 287 IN MAIN.asm
AMPER:              0273 DEFINED AT LINE 288 IN MAIN.asm
AND:                0273 DEFINED AT LINE 289 IN MAIN.asm
MINUS_:             027D DEFINED AT LINE 307 IN MAIN.asm
MINUS:              027D DEFINED AT LINE 308 IN MAIN.asm
SUB:                0289 DEFINED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
SUB1:               0293 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 320 IN MAIN.asm
SUB2:               029A DEFINED AT LINE 329 IN MAIN.asm
                    > USED AT LINE 326 IN MAIN.asm
SUB3:               029D DEFINED AT LINE 332 IN MAIN.asm
                    > USED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 2040 IN MAIN.asm
STAR_:              02A5 DEFINED AT LINE 338 IN MAIN.asm
STAR:               02A5 DEFINED AT LINE 339 IN MAIN.asm
MUL:                02AD DEFINED AT LINE 345 IN MAIN.asm
MUL2:               02AF DEFINED AT LINE 348 IN MAIN.asm
MUL3:               02B7 DEFINED AT LINE 353 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
PLUS_:              02C9 DEFINED AT LINE 368 IN MAIN.asm
PLUS:               02C9 DEFINED AT LINE 369 IN MAIN.asm
ADD:                02C9 DEFINED AT LINE 370 IN MAIN.asm
ADD1:               02D4 DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
ADD3:               02D8 DEFINED AT LINE 383 IN MAIN.asm
                    > USED AT LINE 298 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 1310 IN MAIN.asm
                    > USED AT LINE 1596 IN MAIN.asm
ADD4:               02E2 DEFINED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 387 IN MAIN.asm
UPCASE_:            02E5 DEFINED AT LINE 395 IN MAIN.asm
UPCASE:             02E5 DEFINED AT LINE 396 IN MAIN.asm
LOWCASE_:           0300 DEFINED AT LINE 405 IN MAIN.asm
LOWCASE:            0300 DEFINED AT LINE 406 IN MAIN.asm
IDENT1:             0305 DEFINED AT LINE 410 IN MAIN.asm
                    > USED AT LINE 399 IN MAIN.asm
LBRACK_:            0312 DEFINED AT LINE 422 IN MAIN.asm
LBRACK:             0312 DEFINED AT LINE 423 IN MAIN.asm
ARRAYSTART:         0312 DEFINED AT LINE 424 IN MAIN.asm
BACKSLASH_:         032E DEFINED AT LINE 439 IN MAIN.asm
BACKSLASH:          032E DEFINED AT LINE 440 IN MAIN.asm
LAMBDA:             032E DEFINED AT LINE 441 IN MAIN.asm
LAMBDA1:            0333 DEFINED AT LINE 444 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
LAMBDA2:            0343 DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
RBRACK_:            034F DEFINED AT LINE 461 IN MAIN.asm
RBRACK:             034F DEFINED AT LINE 462 IN MAIN.asm
ARRAYEND:           034F DEFINED AT LINE 463 IN MAIN.asm
ARRAYEND1:          036B DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 497 IN MAIN.asm
ARRAYEND2:          037B DEFINED AT LINE 490 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
ARRAYEND3:          0380 DEFINED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 479 IN MAIN.asm
CARET_:             039F DEFINED AT LINE 515 IN MAIN.asm
CARET:              039F DEFINED AT LINE 519 IN MAIN.asm
GO:                 039F DEFINED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03A0 DEFINED AT LINE 522 IN MAIN.asm
                    > USED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1631 IN MAIN.asm
                    > USED AT LINE 1633 IN MAIN.asm
                    > USED AT LINE 1803 IN MAIN.asm
GO2:                03A6 DEFINED AT LINE 527 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
GRAVE_:             03B5 DEFINED AT LINE 536 IN MAIN.asm
GRAVE:              03B5 DEFINED AT LINE 537 IN MAIN.asm
PRINTLITERAL:       03B5 DEFINED AT LINE 538 IN MAIN.asm
PRINTLITERAL0:      03BC DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
PRINTLITERAL1:      03BF DEFINED AT LINE 546 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
LBRACE_:            03CB DEFINED AT LINE 553 IN MAIN.asm
LBRACE:             03CB DEFINED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
PIPE_:              03D0 DEFINED AT LINE 560 IN MAIN.asm
PIPE:               03D0 DEFINED AT LINE 561 IN MAIN.asm
OR:                 03D0 DEFINED AT LINE 562 IN MAIN.asm
RBRACE_:            03DB DEFINED AT LINE 573 IN MAIN.asm
TILDE_:             03DE DEFINED AT LINE 577 IN MAIN.asm
UNDERSCORE_:        03E1 DEFINED AT LINE 580 IN MAIN.asm
CHAR:               03E1 DEFINED AT LINE 581 IN MAIN.asm
AT_:                03E9 DEFINED AT LINE 589 IN MAIN.asm
AT:                 03E9 DEFINED AT LINE 590 IN MAIN.asm
ADDR:               03E9 DEFINED AT LINE 591 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 602 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 603 IN MAIN.asm
PRINTCHAR:          0413 DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
PRINTSTRING:        0422 DEFINED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
PRINTSTRING0:       0429 DEFINED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
PRINTSTRING1:       042C DEFINED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 630 IN MAIN.asm
PRINTNUMBER:        0437 DEFINED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
PRINTDEC:           0442 DEFINED AT LINE 652 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
PRINTDEC1:          0450 DEFINED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 658 IN MAIN.asm
PRINTHEX:           045F DEFINED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 647 IN MAIN.asm
PRINTHEX1:          046B DEFINED AT LINE 679 IN MAIN.asm
                    > USED AT LINE 676 IN MAIN.asm
PRINTHEX2:          0476 DEFINED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 683 IN MAIN.asm
PRINTHEX3:          0485 DEFINED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
                    > USED AT LINE 688 IN MAIN.asm
PRINTHEX4:          048E DEFINED AT LINE 703 IN MAIN.asm
                    > USED AT LINE 701 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 718 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 719 IN MAIN.asm
COMMAND_A_:         0526 DEFINED AT LINE 755 IN MAIN.asm
COMMAND_B_:         0541 DEFINED AT LINE 770 IN MAIN.asm
COMMAND_C_:         0550 DEFINED AT LINE 779 IN MAIN.asm
COMMAND_D_:         056B DEFINED AT LINE 794 IN MAIN.asm
COMMAND_E_:         0576 DEFINED AT LINE 801 IN MAIN.asm
COMMAND_F_:         0585 DEFINED AT LINE 810 IN MAIN.asm
COMMAND_H_:         05B0 DEFINED AT LINE 834 IN MAIN.asm
COMMAND_I_:         05BB DEFINED AT LINE 841 IN MAIN.asm
COMMAND_M_:         05C6 DEFINED AT LINE 848 IN MAIN.asm
COMAND_O_:          05D9 DEFINED AT LINE 859 IN MAIN.asm
COMMAND_R_:         05E4 DEFINED AT LINE 866 IN MAIN.asm
COMMAND_S_:         05E6 DEFINED AT LINE 869 IN MAIN.asm
COMMAND_T_:         05E8 DEFINED AT LINE 872 IN MAIN.asm
COMMAND_V_:         05EA DEFINED AT LINE 875 IN MAIN.asm
COMMAND_W_:         05EC DEFINED AT LINE 878 IN MAIN.asm
COMMAND_X_:         05EE DEFINED AT LINE 881 IN MAIN.asm
COMMAND_DEFAULT_:   05F0 DEFINED AT LINE 884 IN MAIN.asm
COMMAND_R:          05F3 DEFINED AT LINE 891 IN MAIN.asm
                    > USED AT LINE 867 IN MAIN.asm
COMMAND_S:          060A DEFINED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 870 IN MAIN.asm
COMMAND_T:          062D DEFINED AT LINE 923 IN MAIN.asm
                    > USED AT LINE 873 IN MAIN.asm
COMMAND_V:          0638 DEFINED AT LINE 930 IN MAIN.asm
                    > USED AT LINE 876 IN MAIN.asm
COMMAND_W:          0647 DEFINED AT LINE 939 IN MAIN.asm
                    > USED AT LINE 879 IN MAIN.asm
COMMAND_X:          0656 DEFINED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
COMMAND_DEFAULT:    0661 DEFINED AT LINE 955 IN MAIN.asm
                    > USED AT LINE 885 IN MAIN.asm
DIV:                0668 DEFINED AT LINE 961 IN MAIN.asm
                    > USED AT LINE 958 IN MAIN.asm
DIV2:               0672 DEFINED AT LINE 970 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
ABSOLUTE:           0683 DEFINED AT LINE 983 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
ABSOLUTE1:          068E DEFINED AT LINE 993 IN MAIN.asm
                    > USED AT LINE 986 IN MAIN.asm
ADDROF:             0691 DEFINED AT LINE 999 IN MAIN.asm
                    > USED AT LINE 760 IN MAIN.asm
ADDROF2:            0697 DEFINED AT LINE 1004 IN MAIN.asm
ARRAYLENGTH:        0699 DEFINED AT LINE 1009 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
ARRAYLENGTH1:       069F DEFINED AT LINE 1016 IN MAIN.asm
WHILE:              06A2 DEFINED AT LINE 1023 IN MAIN.asm
                    > USED AT LINE 942 IN MAIN.asm
WHILE1:             06A9 DEFINED AT LINE 1029 IN MAIN.asm
                    > USED AT LINE 1027 IN MAIN.asm
BYTEMODE:           06BC DEFINED AT LINE 1041 IN MAIN.asm
                    > USED AT LINE 775 IN MAIN.asm
BYTEMODE1:          06BE DEFINED AT LINE 1043 IN MAIN.asm
                    > USED AT LINE 1297 IN MAIN.asm
COMMENT:            06C3 DEFINED AT LINE 1048 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
                    > USED AT LINE 1052 IN MAIN.asm
DECBASE:            06CC DEFINED AT LINE 1056 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
DECBASE1:           06CE DEFINED AT LINE 1058 IN MAIN.asm
                    > USED AT LINE 1071 IN MAIN.asm
ECHO:               06D3 DEFINED AT LINE 1064 IN MAIN.asm
                    > USED AT LINE 804 IN MAIN.asm
HEXBASE:            06D9 DEFINED AT LINE 1069 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
ERROR1:             06DE DEFINED AT LINE 1073 IN MAIN.asm
                    > USED AT LINE 768 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 792 IN MAIN.asm
                    > USED AT LINE 799 IN MAIN.asm
                    > USED AT LINE 808 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
                    > USED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 864 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
                    > USED AT LINE 921 IN MAIN.asm
                    > USED AT LINE 928 IN MAIN.asm
                    > USED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 946 IN MAIN.asm
                    > USED AT LINE 953 IN MAIN.asm
                    > USED AT LINE 2354 IN MAIN.asm
INPUT:              06E4 DEFINED AT LINE 1079 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
MEMALLOCATE:        06EF DEFINED AT LINE 1091 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
MEMFREE:            06F1 DEFINED AT LINE 1096 IN MAIN.asm
                    > USED AT LINE 817 IN MAIN.asm
MEMFREE1:           06F2 DEFINED AT LINE 1098 IN MAIN.asm
                    > USED AT LINE 1108 IN MAIN.asm
MEMFREEARRAY:       06F7 DEFINED AT LINE 1104 IN MAIN.asm
                    > USED AT LINE 819 IN MAIN.asm
MAXIMUM:            06FC DEFINED AT LINE 1112 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
MAXIMUM1:           0706 DEFINED AT LINE 1121 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
MINIMUM:            0708 DEFINED AT LINE 1126 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
MINIMUM1:           0712 DEFINED AT LINE 1135 IN MAIN.asm
                    > USED AT LINE 1132 IN MAIN.asm
OUTPUT:             0714 DEFINED AT LINE 1140 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
RETURN:             071D DEFINED AT LINE 1151 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
RETURN1:            0724 DEFINED AT LINE 1157 IN MAIN.asm
                    > USED AT LINE 1155 IN MAIN.asm
RECUR:              0727 DEFINED AT LINE 1160 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
REMAIN:             072D DEFINED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 896 IN MAIN.asm
SELECT:             0733 DEFINED AT LINE 1172 IN MAIN.asm
                    > USED AT LINE 911 IN MAIN.asm
SELECT1:            073E DEFINED AT LINE 1183 IN MAIN.asm
                    > USED AT LINE 1206 IN MAIN.asm
SELECT1A:           074F DEFINED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
SELECT1B:           0750 DEFINED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 1191 IN MAIN.asm
SELECT2:            0753 DEFINED AT LINE 1203 IN MAIN.asm
                    > USED AT LINE 1182 IN MAIN.asm
STRINGBEGIN:        075A DEFINED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
STRINGEND:          0762 DEFINED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 806 IN MAIN.asm
STRINGEND1:         0789 DEFINED AT LINE 1235 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
STRINGLENGTH:       0791 DEFINED AT LINE 1240 IN MAIN.asm
                    > USED AT LINE 915 IN MAIN.asm
STRINGLENGTH1:      0797 DEFINED AT LINE 1244 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
STRINGLENGTH2:      0799 DEFINED AT LINE 1247 IN MAIN.asm
                    > USED AT LINE 1243 IN MAIN.asm
STRINGLENGTH3:      079D DEFINED AT LINE 1251 IN MAIN.asm
STRINGCOMPARE:      07A0 DEFINED AT LINE 1258 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
STRINGCOMPARE1:     07A2 DEFINED AT LINE 1261 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
STRINGCOMPARE2:     07AD DEFINED AT LINE 1270 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
STRINGCOMPARE3:     07B2 DEFINED AT LINE 1273 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
STRINGCOMPARE4:     07B5 DEFINED AT LINE 1275 IN MAIN.asm
                    > USED AT LINE 1272 IN MAIN.asm
VARIABLES:          07B8 DEFINED AT LINE 1281 IN MAIN.asm
VOID:               07BE DEFINED AT LINE 1287 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
WORDMODE:           07C6 DEFINED AT LINE 1295 IN MAIN.asm
                    > USED AT LINE 944 IN MAIN.asm
XOR:                07CB DEFINED AT LINE 1300 IN MAIN.asm
                    > USED AT LINE 951 IN MAIN.asm
XOR1:               07CC DEFINED AT LINE 1302 IN MAIN.asm
CLEARLINE:          07D6 DEFINED AT LINE 1314 IN MAIN.asm
                    > USED AT LINE 782 IN MAIN.asm
CLEARSCREEN:        07DF DEFINED AT LINE 1323 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
CURSORMOVE:         07E4 DEFINED AT LINE 1329 IN MAIN.asm
                    > USED AT LINE 786 IN MAIN.asm
CURSORMOVE1:        07F0 DEFINED AT LINE 1338 IN MAIN.asm
CURSORSHOW:         07F2 DEFINED AT LINE 1343 IN MAIN.asm
                    > USED AT LINE 788 IN MAIN.asm
CURSORSHOW1:        07FC DEFINED AT LINE 1351 IN MAIN.asm
                    > USED AT LINE 1349 IN MAIN.asm
CURSORGO:           0801 DEFINED AT LINE 1357 IN MAIN.asm
                    > USED AT LINE 790 IN MAIN.asm
RANGESRC:           0809 DEFINED AT LINE 32
                    > USED AT LINE 900 IN MAIN.asm
RANGESRCM_1780S1370: 0818 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          08A2 DEFINED AT LINE 32
                    > USED AT LINE 762 IN MAIN.asm
ARRAYITERM_1799S1390: 08AF DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         092A DEFINED AT LINE 32
                    > USED AT LINE 913 IN MAIN.asm
STRINGITERM_1818S1410: 0937 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                09BA DEFINED AT LINE 32
                    > USED AT LINE 851 IN MAIN.asm
MAPM_1838S1432:     09C7 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             09FC DEFINED AT LINE 32
                    > USED AT LINE 822 IN MAIN.asm
FILTERM_1852S1447:  0A0A DEFINED AT LINE 39
                    > USED AT LINE 35
SCAN1:              0A5D DEFINED AT LINE 32
                    > USED AT LINE 907 IN MAIN.asm
SCAN1M_1871S1467:   0A6C DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            0AAE DEFINED AT LINE 32
                    > USED AT LINE 815 IN MAIN.asm
FOREACHM_1885S1482: 0ABC DEFINED AT LINE 39
                    > USED AT LINE 35
SOURCE:             0AFA DEFINED AT LINE 32
                    > USED AT LINE 917 IN MAIN.asm
SOURCEM_1899S1497:  0B06 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0B35 DEFINED AT LINE 32
                    > USED AT LINE 606 IN MAIN.asm
PRINTARRAYM_1909S1508: 0B43 DEFINED AT LINE 39
                    > USED AT LINE 35
COMMA:              0B7F DEFINED AT LINE 1518 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
READCHAR:           0B8E DEFINED AT LINE 1527 IN MAIN.asm
                    > USED AT LINE 1521 IN MAIN.asm
READSTRING:         0B97 DEFINED AT LINE 1534 IN MAIN.asm
                    > USED AT LINE 1523 IN MAIN.asm
                    > USED AT LINE 44
READSTRING1:        0B9C DEFINED AT LINE 1537 IN MAIN.asm
                    > USED AT LINE 1545 IN MAIN.asm
                    > USED AT LINE 1547 IN MAIN.asm
READSTRING2:        0BB0 DEFINED AT LINE 1548 IN MAIN.asm
                    > USED AT LINE 1540 IN MAIN.asm
READNUMBER:         0BB9 DEFINED AT LINE 1555 IN MAIN.asm
                    > USED AT LINE 1525 IN MAIN.asm
PERFORMM_1953S1557: 0BC2 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER1:        0BE0 DEFINED AT LINE 1573 IN MAIN.asm
                    > USED AT LINE 1564 IN MAIN.asm
                    > USED AT LINE 1568 IN MAIN.asm
                    > USED AT LINE 1570 IN MAIN.asm
PERFORMM_1970S1574: 0BE7 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER2:        0BEA DEFINED AT LINE 1577 IN MAIN.asm
                    > USED AT LINE 1566 IN MAIN.asm
PERFORMM_1974S1578: 0BF1 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER3:        0BF2 DEFINED AT LINE 1580 IN MAIN.asm
                    > USED AT LINE 1572 IN MAIN.asm
                    > USED AT LINE 1576 IN MAIN.asm
TILDE:              0BF8 DEFINED AT LINE 1587 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
INVERT:             0BF8 DEFINED AT LINE 1588 IN MAIN.asm
DOLLAR:             0C02 DEFINED AT LINE 1599 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
HEXNUM:             0C02 DEFINED AT LINE 1600 IN MAIN.asm
                    > USED AT LINE 44
HEXNUM1:            0C05 DEFINED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 1619 IN MAIN.asm
HEXNUM2:            0C0D DEFINED AT LINE 1608 IN MAIN.asm
                    > USED AT LINE 1606 IN MAIN.asm
QUESTION:           0C1F DEFINED AT LINE 1623 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
IF:                 0C1F DEFINED AT LINE 1624 IN MAIN.asm
QUOTE:              0C2C DEFINED AT LINE 1637 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
STRING:             0C2C DEFINED AT LINE 1638 IN MAIN.asm
STRING1:            0C35 DEFINED AT LINE 1645 IN MAIN.asm
                    > USED AT LINE 1653 IN MAIN.asm
STRING2:            0C38 DEFINED AT LINE 1649 IN MAIN.asm
                    > USED AT LINE 1644 IN MAIN.asm
STRING3:            0C3E DEFINED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 1652 IN MAIN.asm
PERCENT:            0C46 DEFINED AT LINE 1664 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
ARG:                0C46 DEFINED AT LINE 1665 IN MAIN.asm
ARG0:               0C62 DEFINED AT LINE 1684 IN MAIN.asm
                    > USED AT LINE 1690 IN MAIN.asm
ARG0A:              0C6B DEFINED AT LINE 1692 IN MAIN.asm
                    > USED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 1676 IN MAIN.asm
ARG1:               0C70 DEFINED AT LINE 1695 IN MAIN.asm
                    > USED AT LINE 1688 IN MAIN.asm
ARG1A:              0C78 DEFINED AT LINE 1702 IN MAIN.asm
                    > USED AT LINE 1694 IN MAIN.asm
NUM:                0C7B DEFINED AT LINE 1707 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
                    > USED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 44
NUM0:               0C84 DEFINED AT LINE 1713 IN MAIN.asm
                    > USED AT LINE 1711 IN MAIN.asm
NUM1:               0C85 DEFINED AT LINE 1715 IN MAIN.asm
                    > USED AT LINE 1732 IN MAIN.asm
NUM2:               0C9D DEFINED AT LINE 1733 IN MAIN.asm
                    > USED AT LINE 1610 IN MAIN.asm
                    > USED AT LINE 1612 IN MAIN.asm
                    > USED AT LINE 1718 IN MAIN.asm
                    > USED AT LINE 1720 IN MAIN.asm
NUM3:               0CA8 DEFINED AT LINE 1741 IN MAIN.asm
                    > USED AT LINE 1736 IN MAIN.asm
RBRACE:             0CAB DEFINED AT LINE 1746 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
BLOCKEND:           0CAB DEFINED AT LINE 1747 IN MAIN.asm
                    > USED AT LINE 1038 IN MAIN.asm
                    > USED AT LINE 1158 IN MAIN.asm
BLOCKEND1:          0CDD DEFINED AT LINE 1769 IN MAIN.asm
                    > USED AT LINE 1762 IN MAIN.asm
BLOCKEND2:          0CE9 DEFINED AT LINE 1776 IN MAIN.asm
                    > USED AT LINE 1768 IN MAIN.asm
BLOCKEND3:          0CFB DEFINED AT LINE 1790 IN MAIN.asm
                    > USED AT LINE 1782 IN MAIN.asm
BLOCKEND4:          0D0F DEFINED AT LINE 1800 IN MAIN.asm
                    > USED AT LINE 1798 IN MAIN.asm
GOBLOCK:            0D18 DEFINED AT LINE 1805 IN MAIN.asm
                    > USED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
GOBLOCK2:           0D3D DEFINED AT LINE 1822 IN MAIN.asm
                    > USED AT LINE 1903 IN MAIN.asm
GOBLOCK3:           0D47 DEFINED AT LINE 1828 IN MAIN.asm
GOFUNC:             0D4B DEFINED AT LINE 1832 IN MAIN.asm
                    > USED AT LINE 532 IN MAIN.asm
GOFUNC1:            0D64 DEFINED AT LINE 1851 IN MAIN.asm
                    > USED AT LINE 1861 IN MAIN.asm
GOFUNC2:            0D6A DEFINED AT LINE 1858 IN MAIN.asm
                    > USED AT LINE 1850 IN MAIN.asm
GOFUNC3:            0D75 DEFINED AT LINE 1864 IN MAIN.asm
                    > USED AT LINE 1840 IN MAIN.asm
GOFUNC4:            0D8D DEFINED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 1878 IN MAIN.asm
GOFUNC5:            0D90 DEFINED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1890 IN MAIN.asm
GOFUNC6:            0D93 DEFINED AT LINE 1888 IN MAIN.asm
                    > USED AT LINE 1883 IN MAIN.asm
GOFUNC7:            0D96 DEFINED AT LINE 1891 IN MAIN.asm
GOFUNC8:            0D9A DEFINED AT LINE 1896 IN MAIN.asm
                    > USED AT LINE 1816 IN MAIN.asm
                    > USED AT LINE 1880 IN MAIN.asm
ASSIGN:             0DA5 DEFINED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
ASSIGN0:            0DA7 DEFINED AT LINE 1910 IN MAIN.asm
                    > USED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
ASSIGN1:            0DAB DEFINED AT LINE 1913 IN MAIN.asm
ASSIGN2:            0DB4 DEFINED AT LINE 1920 IN MAIN.asm
                    > USED AT LINE 1917 IN MAIN.asm
EQUALS:             0DB6 DEFINED AT LINE 1925 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
NOTEQUALS:          0DBD DEFINED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
LESSTHANEQ:         0DC4 DEFINED AT LINE 1939 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
LESSTHAN:           0DC9 DEFINED AT LINE 1946 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN1:          0DCE DEFINED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1942 IN MAIN.asm
TRUE1:              0DD1 DEFINED AT LINE 1954 IN MAIN.asm
                    > USED AT LINE 926 IN MAIN.asm
                    > USED AT LINE 1928 IN MAIN.asm
                    > USED AT LINE 1934 IN MAIN.asm
NULL1:              0DD7 DEFINED AT LINE 1958 IN MAIN.asm
FALSE1:             0DD7 DEFINED AT LINE 1959 IN MAIN.asm
                    > USED AT LINE 813 IN MAIN.asm
                    > USED AT LINE 1929 IN MAIN.asm
                    > USED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 1949 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
SPREAD:             0DDD DEFINED AT LINE 1964 IN MAIN.asm
                    > USED AT LINE 343 IN MAIN.asm
SPREAD1:            0DEA DEFINED AT LINE 1974 IN MAIN.asm
                    > USED AT LINE 1989 IN MAIN.asm
SPREAD2:            0DF5 DEFINED AT LINE 1983 IN MAIN.asm
                    > USED AT LINE 1980 IN MAIN.asm
SPREAD3:            0DF7 DEFINED AT LINE 1986 IN MAIN.asm
                    > USED AT LINE 1973 IN MAIN.asm
SHIFTLEFT:          0E01 DEFINED AT LINE 1996 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SHIFTLEFT2:         0E0B DEFINED AT LINE 2005 IN MAIN.asm
                    > USED AT LINE 2002 IN MAIN.asm
SHIFTLEFT3:         0E13 DEFINED AT LINE 2010 IN MAIN.asm
                    > USED AT LINE 2013 IN MAIN.asm
SHIFTLEFT4:         0E14 DEFINED AT LINE 2012 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
SHIFTRIGHT:         0E1D DEFINED AT LINE 2020 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
SHIFTRIGHT2:        0E27 DEFINED AT LINE 2029 IN MAIN.asm
                    > USED AT LINE 2026 IN MAIN.asm
SHIFTRIGHT3:        0E2F DEFINED AT LINE 2034 IN MAIN.asm
                    > USED AT LINE 2038 IN MAIN.asm
SHIFTRIGHT4:        0E33 DEFINED AT LINE 2037 IN MAIN.asm
                    > USED AT LINE 2033 IN MAIN.asm
DIVIDE:             0E3C DEFINED AT LINE 2046 IN MAIN.asm
                    > USED AT LINE 974 IN MAIN.asm
DIVIDE1:            0E41 DEFINED AT LINE 2049 IN MAIN.asm
                    > USED AT LINE 2061 IN MAIN.asm
DIVIDE2:            0E4E DEFINED AT LINE 2057 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
DIVIDE3:            0E4F DEFINED AT LINE 2059 IN MAIN.asm
                    > USED AT LINE 2056 IN MAIN.asm
DOTNEXT:            0E55 DEFINED AT LINE 2065 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 693 IN MAIN.asm
DOTNEXT1:           0E5D DEFINED AT LINE 2070 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
PARSEARGS:          0E6F DEFINED AT LINE 2081 IN MAIN.asm
                    > USED AT LINE 443 IN MAIN.asm
PARSEARGS1:         0E79 DEFINED AT LINE 2088 IN MAIN.asm
                    > USED AT LINE 2109 IN MAIN.asm
PARSEARGS1A:        0E81 DEFINED AT LINE 2094 IN MAIN.asm
                    > USED AT LINE 2091 IN MAIN.asm
PARSEARGS2:         0E89 DEFINED AT LINE 2099 IN MAIN.asm
PARSEARGS3:         0E91 DEFINED AT LINE 2107 IN MAIN.asm
                    > USED AT LINE 2093 IN MAIN.asm
                    > USED AT LINE 2105 IN MAIN.asm
PARSEARGS4:         0E94 DEFINED AT LINE 2110 IN MAIN.asm
                    > USED AT LINE 2096 IN MAIN.asm
                    > USED AT LINE 2098 IN MAIN.asm
PARSEARGS5:         0E9A DEFINED AT LINE 2116 IN MAIN.asm
                    > USED AT LINE 2114 IN MAIN.asm
PARSEBLOCK:         0EA5 DEFINED AT LINE 2129 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
PARSEBLOCK1:        0EA9 DEFINED AT LINE 2133 IN MAIN.asm
                    > USED AT LINE 2137 IN MAIN.asm
                    > USED AT LINE 2145 IN MAIN.asm
                    > USED AT LINE 2151 IN MAIN.asm
                    > USED AT LINE 2165 IN MAIN.asm
                    > USED AT LINE 2168 IN MAIN.asm
                    > USED AT LINE 2171 IN MAIN.asm
PARSEBLOCK2:        0EC2 DEFINED AT LINE 2147 IN MAIN.asm
                    > USED AT LINE 2139 IN MAIN.asm
                    > USED AT LINE 2141 IN MAIN.asm
                    > USED AT LINE 2143 IN MAIN.asm
PARSEBLOCK3:        0EC8 DEFINED AT LINE 2152 IN MAIN.asm
                    > USED AT LINE 2146 IN MAIN.asm
PARSEBLOCK4:        0EE2 DEFINED AT LINE 2166 IN MAIN.asm
                    > USED AT LINE 2154 IN MAIN.asm
                    > USED AT LINE 2156 IN MAIN.asm
                    > USED AT LINE 2158 IN MAIN.asm
PARSEBLOCK5:        0EE5 DEFINED AT LINE 2169 IN MAIN.asm
                    > USED AT LINE 2160 IN MAIN.asm
                    > USED AT LINE 2162 IN MAIN.asm
                    > USED AT LINE 2164 IN MAIN.asm
PARSEBLOCK6:        0F10 DEFINED AT LINE 2190 IN MAIN.asm
                    > USED AT LINE 2177 IN MAIN.asm
CREATEFUNC:         0F14 DEFINED AT LINE 2198 IN MAIN.asm
                    > USED AT LINE 455 IN MAIN.asm
CREATEFUNC0:        0F33 DEFINED AT LINE 2212 IN MAIN.asm
                    > USED AT LINE 2208 IN MAIN.asm
CREATEFUNC1:        0F4B DEFINED AT LINE 2231 IN MAIN.asm
                    > USED AT LINE 2227 IN MAIN.asm
CREATEFUNC2:        0F5E DEFINED AT LINE 2244 IN MAIN.asm
                    > USED AT LINE 2240 IN MAIN.asm
CREATEFUNC2A:       0F7D DEFINED AT LINE 2270 IN MAIN.asm
                    > USED AT LINE 2257 IN MAIN.asm
CREATEFUNC3:        0F8C DEFINED AT LINE 2282 IN MAIN.asm
                    > USED AT LINE 2292 IN MAIN.asm
CREATEFUNC4:        0F97 DEFINED AT LINE 2293 IN MAIN.asm
CREATEFUNC5:        0F98 DEFINED AT LINE 2295 IN MAIN.asm
                    > USED AT LINE 2211 IN MAIN.asm
VARIABLE:           0FB6 DEFINED AT LINE 2322 IN MAIN.asm
                    > USED AT LINE 274 IN MAIN.asm
                    > USED AT LINE 594 IN MAIN.asm
CONSTANT:           0FC5 DEFINED AT LINE 2332 IN MAIN.asm
                    > USED AT LINE 1283 IN MAIN.asm
                    > USED AT LINE 2328 IN MAIN.asm
CHARTABLE:          0FC8 DEFINED AT LINE 2340 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
CHARTABLE1:         0FD2 DEFINED AT LINE 2347 IN MAIN.asm
                    > USED AT LINE 2361 IN MAIN.asm
CHARTABLE2:         0FDC DEFINED AT LINE 2355 IN MAIN.asm
                    > USED AT LINE 2353 IN MAIN.asm
CHARTABLE3:         0FDE DEFINED AT LINE 2358 IN MAIN.asm
                    > USED AT LINE 2344 IN MAIN.asm
                    > USED AT LINE 2346 IN MAIN.asm
CMDTABLE:           0FE3 DEFINED AT LINE 2368 IN MAIN.asm
                    > USED AT LINE 604 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
                    > USED AT LINE 795 IN MAIN.asm
                    > USED AT LINE 802 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
                    > USED AT LINE 835 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
                    > USED AT LINE 860 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 905 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
                    > USED AT LINE 931 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
                    > USED AT LINE 956 IN MAIN.asm
                    > USED AT LINE 1519 IN MAIN.asm
CMDTABLE1:          0FE4 DEFINED AT LINE 2370 IN MAIN.asm
CMDTABLE2:          0FE4 DEFINED AT LINE 2371 IN MAIN.asm
                    > USED AT LINE 2396 IN MAIN.asm
CMDTABLE3:          0FF1 DEFINED AT LINE 2383 IN MAIN.asm
CMDTABLE4:          0FFB DEFINED AT LINE 2392 IN MAIN.asm
                    > USED AT LINE 2382 IN MAIN.asm
CMDTABLE5:          1000 DEFINED AT LINE 2397 IN MAIN.asm
                    > USED AT LINE 2378 IN MAIN.asm
                    > USED AT LINE 2386 IN MAIN.asm
                    > USED AT LINE 2390 IN MAIN.asm
GETVARADDR:         1005 DEFINED AT LINE 2404 IN MAIN.asm
                    > USED AT LINE 1002 IN MAIN.asm
GETVARADDR1:        1017 DEFINED AT LINE 2415 IN MAIN.asm
                    > USED AT LINE 2411 IN MAIN.asm
PUTSTR0:            101C DEFINED AT LINE 2421 IN MAIN.asm
                    > USED AT LINE 2427 IN MAIN.asm
PUTSTR:             1020 DEFINED AT LINE 2424 IN MAIN.asm
                    > USED AT LINE 2076 IN MAIN.asm
                    > USED AT LINE 2555 IN MAIN.asm
                    > USED AT LINE 2580 IN MAIN.asm
                    > USED AT LINE 2634 IN MAIN.asm
FORMATDEC0:         1025 DEFINED AT LINE 2433 IN MAIN.asm
                    > USED AT LINE 2572 IN MAIN.asm
FORMATDEC:          1028 DEFINED AT LINE 2440 IN MAIN.asm
                    > USED AT LINE 661 IN MAIN.asm
FORMATDEC2:         1038 DEFINED AT LINE 2454 IN MAIN.asm
                    > USED AT LINE 2442 IN MAIN.asm
FORMATDEC4:         1058 DEFINED AT LINE 2468 IN MAIN.asm
                    > USED AT LINE 2457 IN MAIN.asm
                    > USED AT LINE 2459 IN MAIN.asm
                    > USED AT LINE 2461 IN MAIN.asm
                    > USED AT LINE 2463 IN MAIN.asm
                    > USED AT LINE 2466 IN MAIN.asm
FORMATDEC5:         105A DEFINED AT LINE 2470 IN MAIN.asm
                    > USED AT LINE 2473 IN MAIN.asm
FORMATDEC6:         106A DEFINED AT LINE 2482 IN MAIN.asm
                    > USED AT LINE 2477 IN MAIN.asm
FORMATDEC7:         106B DEFINED AT LINE 2484 IN MAIN.asm
                    > USED AT LINE 2481 IN MAIN.asm
NESTING:            1071 DEFINED AT LINE 2502 IN MAIN.asm
                    > USED AT LINE 2656 IN MAIN.asm
                    > USED AT LINE 2690 IN MAIN.asm
NESTING0:           107F DEFINED AT LINE 2510 IN MAIN.asm
                    > USED AT LINE 2504 IN MAIN.asm
                    > USED AT LINE 2506 IN MAIN.asm
                    > USED AT LINE 2508 IN MAIN.asm
NESTING1A:          1086 DEFINED AT LINE 2515 IN MAIN.asm
                    > USED AT LINE 2512 IN MAIN.asm
NESTING1:           1089 DEFINED AT LINE 2518 IN MAIN.asm
                    > USED AT LINE 2509 IN MAIN.asm
NESTING2:           1098 DEFINED AT LINE 2527 IN MAIN.asm
                    > USED AT LINE 2522 IN MAIN.asm
                    > USED AT LINE 2524 IN MAIN.asm
NESTING3:           109A DEFINED AT LINE 2530 IN MAIN.asm
                    > USED AT LINE 2526 IN MAIN.asm
NESTING4:           10A5 DEFINED AT LINE 2537 IN MAIN.asm
                    > USED AT LINE 2532 IN MAIN.asm
                    > USED AT LINE 2534 IN MAIN.asm
PROMPT:             10A7 DEFINED AT LINE 2541 IN MAIN.asm
                    > USED AT LINE 2638 IN MAIN.asm
CRLF:               10B0 DEFINED AT LINE 2546 IN MAIN.asm
                    > USED AT LINE 2703 IN MAIN.asm
PRINTSTR:           10B7 DEFINED AT LINE 2553 IN MAIN.asm
                    > USED AT LINE 2542 IN MAIN.asm
                    > USED AT LINE 2547 IN MAIN.asm
                    > USED AT LINE 2561 IN MAIN.asm
                    > USED AT LINE 2567 IN MAIN.asm
                    > USED AT LINE 2763 IN MAIN.asm
                    > USED AT LINE 2768 IN MAIN.asm
PRINTANSISEQ:       10BE DEFINED AT LINE 2560 IN MAIN.asm
                    > USED AT LINE 2566 IN MAIN.asm
                    > USED AT LINE 13 IN ansi.asm
                    > USED AT LINE 22 IN ansi.asm
                    > USED AT LINE 54 IN ansi.asm
PRINTANSISTR:       10C5 DEFINED AT LINE 2565 IN MAIN.asm
                    > USED AT LINE 3 IN ansi.asm
                    > USED AT LINE 41 IN ansi.asm
                    > USED AT LINE 63 IN ansi.asm
PRINTNUM:           10CB DEFINED AT LINE 2570 IN MAIN.asm
                    > USED AT LINE 27 IN ansi.asm
                    > USED AT LINE 33 IN ansi.asm
                    > USED AT LINE 46 IN ansi.asm
INIT:               10E4 DEFINED AT LINE 2582 IN MAIN.asm
                    > USED AT LINE 2631 IN MAIN.asm
INIT1:              10EC DEFINED AT LINE 2586 IN MAIN.asm
                    > USED AT LINE 2592 IN MAIN.asm
WARMINIT:           10F4 DEFINED AT LINE 2594 IN MAIN.asm
COLDBOOT0:          1107 DEFINED AT LINE 2601 IN MAIN.asm
                    > USED AT LINE 2589 IN MAIN.asm
                    > USED AT LINE 2627 IN MAIN.asm
COLDINIT:           1111 DEFINED AT LINE 2607 IN MAIN.asm
COLDBOOT1:          1122 DEFINED AT LINE 2616 IN MAIN.asm
                    > USED AT LINE 2619 IN MAIN.asm
COLDSTART:          112F DEFINED AT LINE 2625 IN MAIN.asm
                    > USED AT LINE 773 IN MAIN.asm
START:              1138 DEFINED AT LINE 2629 IN MAIN.asm
                    > USED AT LINE 7
START1:             113E DEFINED AT LINE 2632 IN MAIN.asm
                    > USED AT LINE 2599 IN MAIN.asm
                    > USED AT LINE 2628 IN MAIN.asm
INTERPRET:          1144 DEFINED AT LINE 2636 IN MAIN.asm
                    > USED AT LINE 2740 IN MAIN.asm
                    > USED AT LINE 2756 IN MAIN.asm
INTERPRET2:         1150 DEFINED AT LINE 2644 IN MAIN.asm
                    > USED AT LINE 2681 IN MAIN.asm
                    > USED AT LINE 2761 IN MAIN.asm
                    > USED AT LINE 2765 IN MAIN.asm
                    > USED AT LINE 2783 IN MAIN.asm
INTERPRET3:         1158 DEFINED AT LINE 2652 IN MAIN.asm
                    > USED AT LINE 2662 IN MAIN.asm
INTERPRET4:         115E DEFINED AT LINE 2658 IN MAIN.asm
                    > USED AT LINE 2650 IN MAIN.asm
INTERPRET5:         1163 DEFINED AT LINE 2665 IN MAIN.asm
                    > USED AT LINE 2691 IN MAIN.asm
                    > USED AT LINE 2706 IN MAIN.asm
INTERPRET5A:        117C DEFINED AT LINE 2680 IN MAIN.asm
INTERPRET6:         117E DEFINED AT LINE 2683 IN MAIN.asm
                    > USED AT LINE 2669 IN MAIN.asm
INTERPRET7:         118C DEFINED AT LINE 2693 IN MAIN.asm
                    > USED AT LINE 2673 IN MAIN.asm
INTERPRET8:         119F DEFINED AT LINE 2708 IN MAIN.asm
                    > USED AT LINE 2671 IN MAIN.asm
NEXT:               11BA DEFINED AT LINE 2721 IN MAIN.asm
                    > USED AT LINE 2621 IN MAIN.asm
                    > USED AT LINE 2725 IN MAIN.asm
NEXT0:              11CE DEFINED AT LINE 2735 IN MAIN.asm
                    > USED AT LINE 2733 IN MAIN.asm
NEXT1:              11CF DEFINED AT LINE 2737 IN MAIN.asm
                    > USED AT LINE 2726 IN MAIN.asm
EXIT:               11D6 DEFINED AT LINE 2742 IN MAIN.asm
                    > USED AT LINE 2739 IN MAIN.asm
RUN:                11DA DEFINED AT LINE 2747 IN MAIN.asm
                    > USED AT LINE 2754 IN MAIN.asm
ERROR:              11DE DEFINED AT LINE 2752 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 1075 IN MAIN.asm
BACKSPACE_:         11F0 DEFINED AT LINE 2758 IN MAIN.asm
                    > USED AT LINE 2676 IN MAIN.asm
REEDIT_:            1200 DEFINED AT LINE 2767 IN MAIN.asm
                    > USED AT LINE 2678 IN MAIN.asm
REEDIT0:            120C DEFINED AT LINE 2772 IN MAIN.asm
                    > USED AT LINE 2778 IN MAIN.asm
REEDIT1:            1210 DEFINED AT LINE 2775 IN MAIN.asm
                    > USED AT LINE 2771 IN MAIN.asm
ANSICLEARSCREEN:    1220 DEFINED AT LINE 2 IN ansi.asm
                    > USED AT LINE 1324 IN MAIN.asm
ANSICLEARLINE:      1227 DEFINED AT LINE 10 IN ansi.asm
                    > USED AT LINE 1318 IN MAIN.asm
ANSIGOTO:           1236 DEFINED AT LINE 20 IN ansi.asm
                    > USED AT LINE 1361 IN MAIN.asm
ANSIMOVE:           1253 DEFINED AT LINE 39 IN ansi.asm
                    > USED AT LINE 1337 IN MAIN.asm
ANSITEXTSTYLE:      1263 DEFINED AT LINE 51 IN ansi.asm
ANSICURSORSHOW:     1272 DEFINED AT LINE 61 IN ansi.asm
                    > USED AT LINE 1352 IN MAIN.asm
F1:                 127F DEFINED AT LINE 12
                    > USED AT LINE 824 IN MAIN.asm
F2:                 127F DEFINED AT LINE 13
                    > USED AT LINE 826 IN MAIN.asm
F3:                 127F DEFINED AT LINE 14
                    > USED AT LINE 828 IN MAIN.asm
F4:                 127F DEFINED AT LINE 15
                    > USED AT LINE 830 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 2622 IN MAIN.asm
                    > USED AT LINE 2626 IN MAIN.asm
                    > USED AT LINE 2630 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 154 IN MAIN.asm
                    > USED AT LINE 2641 IN MAIN.asm
                    > USED AT LINE 2649 IN MAIN.asm
                    > USED AT LINE 2685 IN MAIN.asm
                    > USED AT LINE 2695 IN MAIN.asm
                    > USED AT LINE 2710 IN MAIN.asm
                    > USED AT LINE 2713 IN MAIN.asm
                    > USED AT LINE 2770 IN MAIN.asm
                    > USED AT LINE 2779 IN MAIN.asm
BUFFER:             2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 155 IN MAIN.asm
                    > USED AT LINE 1225 IN MAIN.asm
                    > USED AT LINE 1236 IN MAIN.asm
                    > USED AT LINE 2071 IN MAIN.asm
                    > USED AT LINE 2578 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 1282 IN MAIN.asm
                    > USED AT LINE 2613 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2609 IN MAIN.asm
VTIBPTR:            23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 2642 IN MAIN.asm
                    > USED AT LINE 2712 IN MAIN.asm
VBUFPTR:            23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 673 IN MAIN.asm
                    > USED AT LINE 692 IN MAIN.asm
                    > USED AT LINE 1220 IN MAIN.asm
                    > USED AT LINE 1237 IN MAIN.asm
                    > USED AT LINE 2072 IN MAIN.asm
                    > USED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 2571 IN MAIN.asm
                    > USED AT LINE 2577 IN MAIN.asm
                    > USED AT LINE 2579 IN MAIN.asm
VHEAPPTR:           23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
                    > USED AT LINE 1535 IN MAIN.asm
                    > USED AT LINE 1552 IN MAIN.asm
                    > USED AT LINE 1560 IN MAIN.asm
                    > USED AT LINE 1639 IN MAIN.asm
                    > USED AT LINE 1658 IN MAIN.asm
                    > USED AT LINE 2083 IN MAIN.asm
                    > USED AT LINE 2118 IN MAIN.asm
                    > USED AT LINE 2185 IN MAIN.asm
                    > USED AT LINE 2188 IN MAIN.asm
                    > USED AT LINE 2210 IN MAIN.asm
                    > USED AT LINE 2215 IN MAIN.asm
                    > USED AT LINE 2246 IN MAIN.asm
                    > USED AT LINE 2312 IN MAIN.asm
VRECURPTR:          23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 1795 IN MAIN.asm
                    > USED AT LINE 1802 IN MAIN.asm
VDATAWIDTH:         23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 267 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 681 IN MAIN.asm
                    > USED AT LINE 1044 IN MAIN.asm
                    > USED AT LINE 1915 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
                    > USED AT LINE 2325 IN MAIN.asm
VNUMBASE:           23EF DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 1059 IN MAIN.asm
VHEXPREFIX:         23F0 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 674 IN MAIN.asm
VECHO:              23F1 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 1066 IN MAIN.asm
                    > USED AT LINE 1543 IN MAIN.asm
VSTRMODE:           23F2 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
                    > USED AT LINE 2066 IN MAIN.asm
VPOINTER:           23F8 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 414 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
                    > USED AT LINE 1698 IN MAIN.asm
                    > USED AT LINE 1912 IN MAIN.asm
                    > USED AT LINE 2323 IN MAIN.asm
VREMAIN:            23FA DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 1166 IN MAIN.asm
VSAVEDIP:           23FC DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 2595 IN MAIN.asm
                    > USED AT LINE 2715 IN MAIN.asm
VSAVEDSP:           23FE DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 2596 IN MAIN.asm
                    > USED AT LINE 2716 IN MAIN.asm
VSAVEDNEXT:         2400 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 2597 IN MAIN.asm
                    > USED AT LINE 2717 IN MAIN.asm
VSAVEDBP:           2402 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 2598 IN MAIN.asm
                    > USED AT LINE 2718 IN MAIN.asm
VTEMP1:             2404 DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 466 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1234 IN MAIN.asm
                    > USED AT LINE 1750 IN MAIN.asm
                    > USED AT LINE 1794 IN MAIN.asm
                    > USED AT LINE 1806 IN MAIN.asm
                    > USED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 1841 IN MAIN.asm
                    > USED AT LINE 1862 IN MAIN.asm
                    > USED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 1966 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
                    > USED AT LINE 2006 IN MAIN.asm
                    > USED AT LINE 2014 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
                    > USED AT LINE 2039 IN MAIN.asm
                    > USED AT LINE 2180 IN MAIN.asm
                    > USED AT LINE 2189 IN MAIN.asm
                    > USED AT LINE 2201 IN MAIN.asm
                    > USED AT LINE 2313 IN MAIN.asm
VTEMP2:             2406 DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 1753 IN MAIN.asm
                    > USED AT LINE 1793 IN MAIN.asm
                    > USED AT LINE 1842 IN MAIN.asm
                    > USED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 2203 IN MAIN.asm
                    > USED AT LINE 2303 IN MAIN.asm
VTEMP3:             2408 DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 2200 IN MAIN.asm
                    > USED AT LINE 2314 IN MAIN.asm
TBPTR:              240C DEFINED AT LINE 67 IN ram.asm
TITLEBUF:           240E DEFINED AT LINE 69 IN ram.asm
                    > USED AT LINE 2584 IN MAIN.asm
                    > USED AT LINE 2603 IN MAIN.asm
                    > USED AT LINE 2633 IN MAIN.asm
HEAP:               2422 DEFINED AT LINE 71 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
