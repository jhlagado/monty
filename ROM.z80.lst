0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 A0 0C               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQ:       EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of Monty code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num_locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      ; still available \ _ ~
0180   3D                     DB   lsb(bang_)   ; !
0181   FB                     DB   lsb(dquote_)   ; "
0182   F2                     DB   lsb(hash_)   ; #
0183   C5                     DB   lsb(dollar_)   ; $
0184   CE                     DB   lsb(percent_)   ; %
0185   1F                     DB   lsb(amper_)   ; &
0186   D7                     DB   lsb(tick_)   ; '
0187   D1                     DB   lsb(lparen_)   ; (
0188   C2                     DB   lsb(rparen_)   ; )
0189   EC                     DB   lsb(star_)   ; *
018A   02                     DB   lsb(plus_)   ; +
018B   F8                     DB   lsb(comma_)   ; ,
018C   4E                     DB   lsb(minus_)   ; -
018D   DD                     DB   lsb(dot_)   ; .
018E   FE                     DB   lsb(slash_)   ; /	
018F   EF                     DB   lsb(num_)   ; 0
0190   EF                     DB   lsb(num_)   ; 1
0191   EF                     DB   lsb(num_)   ; 2
0192   EF                     DB   lsb(num_)   ; 3
0193   EF                     DB   lsb(num_)   ; 4
0194   EF                     DB   lsb(num_)   ; 5
0195   EF                     DB   lsb(num_)   ; 6
0196   EF                     DB   lsb(num_)   ; 7
0197   EF                     DB   lsb(num_)   ; 8
0198   EF                     DB   lsb(num_)   ; 9
0199   E0                     DB   lsb(colon_)   ; :
019A   DA                     DB   lsb(semicolon_)   ; ;
019B   86                     DB   lsb(lt_)   ; <
019C   6D                     DB   lsb(eq_)   ; =
019D   7B                     DB   lsb(gt_)   ; >
019E   E9                     DB   lsb(question_)   ; ?
019F   33                     DB   lsb(at_)   ; @
01A0   E3                     DB   lsb(upcase_)   ; A
01A1   E3                     DB   lsb(upcase_)   ; B
01A2   E3                     DB   lsb(upcase_)   ; C
01A3   E3                     DB   lsb(upcase_)   ; D
01A4   E3                     DB   lsb(upcase_)   ; E
01A5   E3                     DB   lsb(upcase_)   ; F
01A6   E3                     DB   lsb(upcase_)   ; G
01A7   E3                     DB   lsb(upcase_)   ; h
01A8   E3                     DB   lsb(upcase_)   ; I
01A9   E3                     DB   lsb(upcase_)   ; J
01AA   E3                     DB   lsb(upcase_)   ; K
01AB   E3                     DB   lsb(upcase_)   ; L
01AC   E3                     DB   lsb(upcase_)   ; M
01AD   E3                     DB   lsb(upcase_)   ; N
01AE   E3                     DB   lsb(upcase_)   ; O
01AF   E3                     DB   lsb(upcase_)   ; p
01B0   E3                     DB   lsb(upcase_)   ; Q
01B1   E3                     DB   lsb(upcase_)   ; R
01B2   E3                     DB   lsb(upcase_)   ; S
01B3   E3                     DB   lsb(upcase_)   ; T
01B4   E3                     DB   lsb(upcase_)   ; U
01B5   E3                     DB   lsb(upcase_)   ; V
01B6   E3                     DB   lsb(upcase_)   ; W
01B7   E3                     DB   lsb(upcase_)   ; X
01B8   E3                     DB   lsb(upcase_)   ; Y
01B9   E3                     DB   lsb(upcase_)   ; Z
01BA   C8                     DB   lsb(lbrack_)   ; [
01BB   C0                     DB   lsb(nop_)   ; \
01BC   CB                     DB   lsb(rbrack_)   ; ]
01BD   F5                     DB   lsb(caret_)   ; ^
01BE   C0                     DB   lsb(nop_)   ; _
01BF   FB                     DB   lsb(dquote_)   ; `     used for testing string   	
01C0   E6                     DB   lsb(lowcase_)   ; a
01C1   E6                     DB   lsb(lowcase_)   ; b
01C2   E6                     DB   lsb(lowcase_)   ; c
01C3   E6                     DB   lsb(lowcase_)   ; d
01C4   E6                     DB   lsb(lowcase_)   ; e
01C5   E6                     DB   lsb(lowcase_)   ; f
01C6   E6                     DB   lsb(lowcase_)   ; g
01C7   E6                     DB   lsb(lowcase_)   ; h
01C8   E6                     DB   lsb(lowcase_)   ; i
01C9   E6                     DB   lsb(lowcase_)   ; j
01CA   E6                     DB   lsb(lowcase_)   ; k
01CB   E6                     DB   lsb(lowcase_)   ; l
01CC   E6                     DB   lsb(lowcase_)   ; m
01CD   E6                     DB   lsb(lowcase_)   ; n
01CE   E6                     DB   lsb(lowcase_)   ; o
01CF   E6                     DB   lsb(lowcase_)   ; p
01D0   E6                     DB   lsb(lowcase_)   ; q
01D1   E6                     DB   lsb(lowcase_)   ; r
01D2   E6                     DB   lsb(lowcase_)   ; s
01D3   E6                     DB   lsb(lowcase_)   ; t
01D4   E6                     DB   lsb(lowcase_)   ; u
01D5   E6                     DB   lsb(lowcase_)   ; v
01D6   E6                     DB   lsb(lowcase_)   ; w
01D7   E6                     DB   lsb(lowcase_)   ; x
01D8   E6                     DB   lsb(lowcase_)   ; y
01D9   E6                     DB   lsb(lowcase_)   ; z
01DA   D1                     DB   lsb(lbrace_)   ; {
01DB   2A                     DB   lsb(pipe_)   ; |
01DC   D4                     DB   lsb(rbrace_)   ; }
01DD   C0                     DB   lsb(nop_)   ; ~
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 22                  DW   BUF   ; vBUFPtr pointer into BUF
01E6   2F 0D                  DW   next   ; nNext
01E8   1C 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; unused
01EE                             ; **********************************************************************			
01EE                             ; title string (also used by warm boot)
01EE                             ; **********************************************************************
01EE                TITLESTR:      
01EE   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0202                             ;********************** PAGE 2 BEGIN *********************************************
0202                PLUS_:       ; add the top 2 members of the stack
0202                ADD:         
0202   03                     INC   bc   
0203   0A                     LD   a,(bc)   
0204   FE 2B                  CP   "+"   ; ++ increment variable
0206   20 05                  JR   nz,add1   
0208   E1                     POP   hl   
0209   23                     INC   hl   
020A   C3 7D 07               JP   assign0   
020D                ADD1:        
020D   0B                     DEC   bc   
020E   D1                     POP   de   ; second term
020F   E1                     POP   hl   ; first term
0210   19                     ADD   hl,de   
0211                ADD3:        
0211   03                     INC   bc   
0212   0A                     LD   a,(bc)   
0213   FE 3D                  CP   "="   
0215   CA 1C 02               JP   z,add4   
0218   0B                     DEC   bc   
0219   E5                     PUSH   hl   
021A   DD E9                  JP   (ix)   
021C                ADD4:        
021C   C3 7D 07               JP   assign0   
021F                AMPER_:      
021F                AND:         
021F   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0220   E1                     POP   hl   
0221   7B                     LD   a,e   
0222   A5                     AND   l   
0223   6F                     LD   l,a   
0224   7A                     LD   a,d   
0225   A4                     AND   h   
0226                AND1:        
0226   67                     LD   h,a   
0227   E5                     PUSH   hl   
0228   DD E9                  JP   (ix)   
022A                PIPE_:       
022A                OR:          
022A   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
022B   E1                     POP   hl   
022C   7B                     LD   a,e   
022D   B5                     OR   l   
022E   6F                     LD   l,a   
022F   7A                     LD   a,d   
0230   B4                     OR   h   
0231   18 F3                  JR   and1   
0233                             ; @ addr
0233                             ; -- ptr
0233                AT_:         
0233                ADDR:        
0233   ED 5B F4 23            LD   de,(vPointer)   
0237   21 F4 23               LD   hl,vPointer   
023A   C3 9B 04               JP   variable   
023D                BANG_:       ; logical invert, any non zero value
023D   03                     INC   bc   
023E   0A                     LD   a,(bc)   
023F   FE 3D                  CP   "="   
0241   20 05                  JR   nz,not   
0243   E1                     POP   hl   
0244   D1                     POP   de   
0245   C3 A0 02               JP   notequals   
0248                NOT:         
0248   0B                     DEC   bc   
0249   21 00 00               LD   hl,0   ; is considered true
024C   18 29                  JR   eq1   
024E                MINUS_:      
024E   03                     INC   bc   ; check if sign of a number
024F   0A                     LD   a,(bc)   
0250   0B                     DEC   bc   
0251   FE 30                  CP   "0"   
0253   38 05                  JR   c,sub   
0255   FE 3A                  CP   "9"+1   
0257   DA EF 02               JP   c,num_   
025A                SUB:         ; Subtract the value 2nd on stack from top of stack
025A   03                     INC   bc   
025B   FE 2D                  CP   "-"   
025D   20 05                  JR   nz,sub1   
025F   E1                     POP   hl   
0260   2B                     DEC   hl   
0261   C3 7D 07               JP   assign0   
0264                SUB1:        
0264   0B                     DEC   bc   
0265   D1                     POP   de   
0266   E1                     POP   hl   
0267   B7                     OR   a   
0268   ED 52                  SBC   hl,de   
026A   C3 11 02               JP   add3   
026D                EQ_:         
026D   CD E6 0B               CALL   jumpTable   
0270   3D                     DB   "="   
0271   76                     DB   lsb(eq0_)   
0272   00                     DB   NUL   
0273   C3 7B 07               JP   assign   
0276                EQ0_:        
0276   E1                     POP   hl   
0277                EQ1:         
0277   D1                     POP   de   
0278   C3 98 02               JP   equals   
027B                GT_:         
027B   03                     INC   bc   
027C   0A                     LD   a,(bc)   
027D   FE 3E                  CP   ">"   
027F   CA 73 0B               JP   z,shiftRight   
0282   D1                     POP   de   
0283   E1                     POP   hl   
0284   18 09                  JR   lt1   
0286                LT_:         
0286   03                     INC   bc   
0287   0A                     LD   a,(bc)   
0288   FE 3C                  CP   "<"   
028A   CA 63 0B               JP   z,shiftLeft   
028D   E1                     POP   hl   
028E   D1                     POP   de   
028F                LT1:         
028F   FE 3D                  CP   "="   
0291   CA A9 02               JP   z,lessthaneq   
0294   0B                     DEC   bc   
0295   C3 AE 02               JP   lessthan   
0298                             ; hl = value1, de = value2
0298                             ; hl = result
0298                EQUALS:      
0298   B7                     OR   a   ; reset the carry flag
0299   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
029B   28 19                  JR   z,true1   
029D   C3 BC 02               JP   false1   
02A0                NOTEQUALS:      
02A0   B7                     OR   a   ; reset the carry flag
02A1   ED 52                  SBC   hl,de   
02A3   C2 B6 02               JP   nz,true1   
02A6   C3 BC 02               JP   false1   
02A9                             ; hl = value1 de = value2
02A9                             ; hl = result
02A9                LESSTHANEQ:      
02A9   B7                     OR   a   
02AA   ED 52                  SBC   hl,de   
02AC   18 05                  JR   lessthan1   
02AE                             ; hl = value1 de = value2
02AE                             ; hl = result
02AE                LESSTHAN:      
02AE   B7                     OR   a   
02AF   ED 52                  SBC   hl,de   
02B1   28 09                  JR   z,false1   
02B3                LESSTHAN1:      
02B3   FA BC 02               JP   m,false1   
02B6                TRUE1:       
02B6   21 FF FF               LD   hl,TRUE   
02B9   E5                     PUSH   hl   
02BA   DD E9                  JP   (ix)   
02BC                NULL1:       
02BC                FALSE1:      
02BC   21 00 00               LD   hl,FALSE   
02BF   E5                     PUSH   hl   
02C0                NOP_:        
02C0   DD E9                  JP   (ix)   
02C2                RPAREN_:      
02C2   C3 5B 0B               JP   rparen   
02C5                DOLLAR_:      
02C5   C3 B0 0A               JP   dollar   
02C8                LBRACK_:      
02C8   C3 C1 06               JP   lbrack   
02CB                RBRACK_:      
02CB   C3 DD 06               JP   rbrack   
02CE                PERCENT_:      
02CE   C3 8C 06               JP   percent   
02D1                LPAREN_:      
02D1                LBRACE_:      
02D1   C3 8C 07               JP   lbrace   
02D4                RBRACE_:      
02D4   C3 F5 07               JP   rbrace   
02D7                TICK_:       
02D7   C3 7C 08               JP   tick   
02DA                SEMICOLON_:      
02DA   C3 91 08               JP   semicolon   
02DD                DOT_:        
02DD   C3 A1 04               JP   dot   
02E0                COLON_:      
02E0   C3 45 07               JP   colon   
02E3                UPCASE_:      
02E3   C3 CD 0A               JP   upcase   
02E6                LOWCASE_:      
02E6   C3 D2 0A               JP   lowcase   
02E9                QUESTION_:      
02E9   C3 E4 0A               JP   question   
02EC                STAR_:       
02EC   C3 0F 0B               JP   star   
02EF                NUM_:        
02EF   C3 2B 0B               JP   num   
02F2                HASH_:       
02F2   C3 2D 07               JP   hash   
02F5                CARET_:      
02F5   C3 11 0A               JP   caret   
02F8                COMMA_:      
02F8   C3 2D 09               JP   comma   
02FB                DQUOTE_:      
02FB   C3 86 0B               JP   dquote   
02FE                SLASH_:      
02FE   18 00                  JR   slash   
0300                             ;********************** PAGE 2 END *********************************************
0300                             ;********************** PAGE 3 BEGIN *********************************************
0300                SLASH:       
0300                COMMAND:      
0300   03                     INC   bc   
0301   0A                     LD   a,(bc)   
0302   FE 2F                  CP   "/"   ; // comment
0304   CA F9 03               JP   z,comment   
0307   0B                     DEC   bc   
0308   CD D2 0B               CALL   commandTable   
030B   26                     DB   lsb(command_a_)   
030C   33                     DB   lsb(command_b_)   
030D   65                     DB   lsb(command_nop_)   
030E   67                     DB   lsb(decimal_)   
030F   65                     DB   lsb(command_nop_)   
0310   3E                     DB   lsb(command_f_)   
0311   65                     DB   lsb(command_nop_)   
0312   76                     DB   lsb(hexadecimal_)   
0313   41                     DB   lsb(command_i_)   
0314   65                     DB   lsb(command_nop_)   
0315   7C                     DB   lsb(key_)   
0316   65                     DB   lsb(command_nop_)   
0317   4A                     DB   lsb(command_m_)   
0318   65                     DB   lsb(command_nop_)   
0319   7F                     DB   lsb(output_)   
031A   4D                     DB   lsb(command_p_)   
031B   56                     DB   lsb(command_q_)   
031C   5F                     DB   lsb(command_r_)   
031D   65                     DB   lsb(command_nop_)   
031E   82                     DB   lsb(true_)   
031F   65                     DB   lsb(command_nop_)   
0320   62                     DB   lsb(command_v_)   
0321   85                     DB   lsb(words_)   
0322   88                     DB   lsb(xor_)   
0323   65                     DB   lsb(command_nop_)   
0324   65                     DB   lsb(command_nop_)   
0325   6F                     DB   lsb(div_)   
0326                COMMAND_A_:      
0326   CD E6 0B               CALL   jumpTable   
0329   62                     DB   "b"   ; /ab absolute
032A   93                     DB   lsb(absolute_)   
032B   64                     DB   "d"   ; /ad address of
032C   A0                     DB   lsb(addrOf_)   
032D   73                     DB   "s"   ; /as array size
032E   C1                     DB   lsb(arraySize_)   
032F   00                     DB   NUL   
0330   C3 73 03               JP   error1_   
0333                COMMAND_B_:      
0333   CD E6 0B               CALL   jumpTable   
0336   72                     DB   "r"   ; /br break
0337   C9                     DB   lsb(break_)   
0338   79                     DB   "y"   ; /by cold boot
0339   CC                     DB   lsb(coldStart_)   
033A   00                     DB   NUL   
033B   C3 CF 03               JP   bytes_   ; /b bytes
033E                COMMAND_F_:      
033E   C3 02 04               JP   command_f   
0341                COMMAND_I_:      
0341   CD E6 0B               CALL   jumpTable   
0344   6E                     DB   "n"   ; /in input
0345   D7                     DB   lsb(input_)   
0346   00                     DB   NUL   
0347   C3 73 03               JP   error1_   
034A                COMMAND_M_:      
034A   C3 36 04               JP   command_m   
034D                COMMAND_P_:      
034D   CD E6 0B               CALL   jumpTable   
0350   63                     DB   "c"   ; /pc print chars
0351   E2                     DB   lsb(printChars_)   
0352   00                     DB   NUL   
0353   C3 73 03               JP   error1_   
0356                COMMAND_Q_:      
0356   CD E6 0B               CALL   jumpTable   
0359   74                     DB   "t"   ; /qt quit
035A   E9                     DB   lsb(quit_)   
035B   00                     DB   NUL   
035C   C3 73 03               JP   error1_   
035F                COMMAND_R_:      
035F   C3 42 04               JP   command_r   
0362                COMMAND_V_:      
0362   C3 5E 04               JP   command_v   
0365                COMMAND_NOP_:      
0365   DD E9                  JP   (ix)   
0367                DECIMAL_:      
0367   21 0A 00               LD   hl,10   
036A                DECIMAL1:      
036A   22 E8 23               LD   (vNumBase),hl   
036D   DD E9                  JP   (ix)   
036F                DIV_:        
036F   00                     DB   NUL   
0370   C3 3C 09               JP   div   
0373                ERROR1_:      
0373   C3 4E 0D               JP   error1   
0376                HEXADECIMAL_:      
0376   21 10 00               LD   hl,16   
0379   C3 6A 03               JP   decimal1   
037C                KEY_:        
037C   C3 7C 03               JP   key_   
037F                OUTPUT_:      
037F   C3 06 0B               JP   output   
0382                TRUE_:       
0382   C3 B6 02               JP   true1   
0385                WORDS_:      
0385   C3 F3 03               JP   words   
0388                XOR_:        
0388   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0389                XOR1:        
0389   E1                     POP   hl   
038A   7B                     LD   a,e   
038B   AD                     XOR   l   
038C   6F                     LD   l,a   
038D   7A                     LD   a,d   
038E   AC                     XOR   h   
038F   67                     LD   h,a   
0390   E5                     PUSH   hl   
0391   DD E9                  JP   (ix)   
0393                             ; /ab absolute
0393                             ; num -- num
0393                ABSOLUTE_:      
0393   E1                     POP   hl   
0394   CB 7C                  BIT   7,h   
0396   C8                     RET   z   
0397   AF                     XOR   a   
0398   95                     SUB   l   
0399   6F                     LD   l,a   
039A   9F                     SBC   a,a   
039B   94                     SUB   h   
039C   67                     LD   h,a   
039D   E5                     PUSH   hl   
039E   DD E9                  JP   (ix)   
03A0                             ; /ad addrOf
03A0                             ; char -- addr
03A0                ADDROF_:      
03A0   E1                     POP   hl   ; a = char
03A1   7D                     LD   a,l   
03A2   FE 7B                  CP   "z"+1   ; if a > z then exit
03A4   30 19                  JR   nc,addrOf2   
03A6   D6 41                  SUB   "A"   ; a - 65
03A8   38 15                  JR   c,addrOf2   ; if < A then exit
03AA   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
03AC   38 06                  JR   c,addrOf1   
03AE   D6 06                  SUB   "a"-("Z"+1)   
03B0   FE 1A                  CP   "Z"-"A"+1   
03B2   38 0B                  JR   c,addrOf2   ; if < a then exit
03B4                ADDROF1:      
03B4   87                     ADD   a,a   ; double a
03B5   21 00 23               LD   hl,VARS   ; hl = VARS + a
03B8   85                     ADD   a,l   
03B9   6F                     LD   l,a   
03BA   3E 00                  LD   a,0   
03BC   8C                     ADC   a,h   
03BD   67                     LD   h,a   
03BE   E5                     PUSH   hl   
03BF                ADDROF2:      
03BF   DD E9                  JP   (ix)   
03C1                             ; /as size of an array, num elements, ignores vDataWidth :-/
03C1                             ; array* -- num
03C1                ARRAYSIZE_:      
03C1   E1                     POP   hl   
03C2   2B                     DEC   hl   ; msb size
03C3   56                     LD   d,(hl)   
03C4   2B                     DEC   hl   ; lsb size
03C5   5E                     LD   e,(hl)   
03C6   D5                     PUSH   de   
03C7   DD E9                  JP   (ix)   
03C9                             ; /br
03C9                BREAK_:      
03C9   C3 62 08               JP   break   
03CC                             ; /by
03CC                COLDSTART_:      
03CC   C3 97 0C               JP   coldStart   
03CF                             ; /b
03CF                BYTES_:      
03CF   21 01 00               LD   hl,1   
03D2                BYTES1:      
03D2   22 E6 23               LD   (vDataWidth),hl   
03D5   DD E9                  JP   (ix)   
03D7                             ; Z80 port input
03D7                             ; port -- value
03D7                INPUT_:      
03D7   E1                     POP   hl   
03D8   59                     LD   e,c   ; save IP
03D9   4D                     LD   c,l   
03DA   ED 68                  IN   l,(c)   
03DC   26 00                  LD   h,0   
03DE   4B                     LD   c,e   ; restore IP
03DF   E5                     PUSH   hl   
03E0   DD E9                  JP   (ix)   
03E2                             ; /pc printChars
03E2                             ; char* len --
03E2                PRINTCHARS_:      
03E2   E1                     POP   hl   ; hl = count
03E3   D1                     POP   de   ; de = char*
03E4   CD B4 0B               CALL   printChars2   
03E7   DD E9                  JP   (ix)   
03E9                             ; /qt
03E9                QUIT_:       
03E9   E1                     POP   hl   ; hl = condition, exit if true
03EA   7D                     LD   a,l   
03EB   B4                     OR   h   
03EC   20 02                  JR   nz,quit1   
03EE   DD E9                  JP   (ix)   
03F0                QUIT1:       
03F0   C3 F5 07               JP   blockEnd   
03F3                             ; /w
03F3                WORDS:       
03F3   21 02 00               LD   hl,2   
03F6   C3 D2 03               JP   bytes1   
03F9                             ; //
03F9                COMMENT:      
03F9   03                     INC   bc   ; point to next char
03FA   0A                     LD   a,(bc)   
03FB   FE 20                  CP   " "   ; terminate on any char less than SP
03FD   30 FA                  JR   nc,comment   
03FF   0B                     DEC   bc   
0400   DD E9                  JP   (ix)   
0402                             ;********************** PAGE 3 END *********************************************
0402                             ;********************** PAGE 4 BEGIN *********************************************
0402                COMMAND_F:      
0402   CD E6 0B               CALL   jumpTable   
0405   65                     DB   "e"   ; /fe forEach
0406   19                     DB   lsb(forEach_)   
0407   6C                     DB   "l"   ; /fl flush output buffer
0408   1C                     DB   lsb(flush_)   
0409   73                     DB   "s"   ; /fs funcSrc
040A   21                     DB   lsb(funcSrc_)   
040B   31                     DB   "1"   
040C   24                     DB   lsb(f1_)   
040D   32                     DB   "2"   
040E   27                     DB   lsb(f2_)   
040F   33                     DB   "3"   
0410   2A                     DB   lsb(f3_)   
0411   34                     DB   "4"   
0412   2D                     DB   lsb(f4_)   
0413   7A                     DB   "z"   
0414   30                     DB   lsb(fz_)   
0415   00                     DB   NUL   
0416   C3 33 04               JP   false_   
0419                FOREACH_:      
0419   C3 F6 04               JP   forEach   
041C                             ; /fl flush
041C                             ; --
041C                FLUSH_:      
041C   CD BB 0B               CALL   flushBuffer   
041F   DD E9                  JP   (ix)   
0421                FUNCSRC_:      
0421   C3 43 05               JP   funcSrc   
0424                F1_:         
0424   C3 9A 0D               JP   f1   
0427                F2_:         
0427   C3 9A 0D               JP   f2   
042A                F3_:         
042A   C3 9A 0D               JP   f3   
042D                F4_:         
042D   C3 9A 0D               JP   f4   
0430                FZ_:         
0430   C3 04 0A               JP   fz   
0433                FALSE_:      
0433   C3 BC 02               JP   false1   
0436                COMMAND_M:      
0436   CD E6 0B               CALL   jumpTable   
0439   70                     DB   "p"   ; /mp map
043A   3F                     DB   lsb(map_)   
043B   00                     DB   NUL   
043C   C3 73 03               JP   error1_   
043F                MAP_:        
043F   C3 C6 05               JP   map   
0442                COMMAND_R:      
0442   CD E6 0B               CALL   jumpTable   
0445   63                     DB   "c"   ; /rc tail call optimisation
0446   4F                     DB   lsb(recur_)   
0447   65                     DB   "e"   ; /re remainder
0448   55                     DB   lsb(remain_)   
0449   67                     DB   "g"   ; /rg range src
044A   5B                     DB   lsb(rangeSrc_)   
044B   00                     DB   NUL   
044C   C3 73 03               JP   error1_   
044F                RECUR_:      
044F   E1                     POP   hl   
0450   22 F2 23               LD   (vRecur),hl   
0453   DD E9                  JP   (ix)   
0455                REMAIN_:      
0455   2A F6 23               LD   hl,(vRemain)   
0458   E5                     PUSH   hl   
0459   DD E9                  JP   (ix)   
045B                RANGESRC_:      
045B   C3 0A 06               JP   rangeSrc   
045E                COMMAND_V:      
045E   CD E6 0B               CALL   jumpTable   
0461   62                     DB   "b"   
0462   80                     DB   lsb(varBufPtr_)   
0463   68                     DB   "h"   
0464   89                     DB   lsb(varHeapPtr_)   
0465   74                     DB   "t"   
0466   92                     DB   lsb(varTIBPtr_)   
0467   42                     DB   "B"   
0468   71                     DB   lsb(constBufStart_)   
0469   48                     DB   "H"   
046A   76                     DB   lsb(constHeapStart_)   
046B   54                     DB   "T"   
046C   7B                     DB   lsb(constTIBStart_)   
046D   00                     DB   NUL   
046E   C3 73 03               JP   error1_   
0471                CONSTBUFSTART_:      
0471   11 00 22               LD   de,BUF   
0474   18 28                  JR   constant   
0476                CONSTHEAPSTART_:      
0476   11 1C 24               LD   de,HEAP   
0479   18 23                  JR   constant   
047B                CONSTTIBSTART_:      
047B   11 00 21               LD   de,TIB   
047E   18 1E                  JR   constant   
0480                VARBUFPTR_:      
0480   ED 5B EC 23            LD   de,(vBufPtr)   
0484   21 EC 23               LD   hl,vBufPtr   
0487   18 12                  JR   variable   
0489                VARHEAPPTR_:      
0489   ED 5B F0 23            LD   de,(vHeapPtr)   
048D   21 F0 23               LD   hl,vHeapPtr   
0490   18 09                  JR   variable   
0492                VARTIBPTR_:      
0492   ED 5B EA 23            LD   de,(vTIBPtr)   
0496   21 EA 23               LD   hl,vTIBPtr   
0499   18 00                  JR   variable   
049B                VARIABLE:      
049B   22 F4 23               LD   (vPointer),hl   
049E                CONSTANT:      
049E   D5                     PUSH   de   
049F   DD E9                  JP   (ix)   
04A1                DOT:         
04A1   CD E6 0B               CALL   jumpTable   
04A4   61                     DB   "a"   ; .a print array
04A5   7E                     DB   lsb(dotArray)   
04A6   63                     DB   "c"   ; .c print char
04A7   D5                     DB   lsb(dotChar_)   
04A8   73                     DB   "s"   ; .s print string
04A9   BB                     DB   lsb(dotString_)   
04AA   78                     DB   "x"   ; .x print x chars
04AB   DA                     DB   lsb(dotXChars_)   
04AC   00                     DB   NUL   ; .  print number
04AD   C3 B0 04               JP   dotNumber_   
04B0                             ; /bd buffer decimal
04B0                             ; value --
04B0                DOTNUMBER_:      
04B0   3A E8 23               LD   a,(vNumBase)   
04B3   FE 10                  CP   16   
04B5   CA B3 09               JP   z,bufferHex   ; else falls through
04B8   C3 4D 09               JP   bufferDec   
04BB                             ; /bs buffered string
04BB                             ; string* --
04BB                DOTSTRING_:      
04BB   E1                     POP   hl   ; hl = string*
04BC   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
04C0   18 06                  JR   dotString1   
04C2                DOTSTRING0:      
04C2   12                     LD   (de),a   ; a -> buffer*
04C3   1C                     INC   e   ; buffer*++, wraparound
04C4   CC BB 0B               CALL   z,flushBuffer   
04C7   23                     INC   hl   
04C8                DOTSTRING1:      
04C8   7E                     LD   a,(hl)   ; a <- string*
04C9   B7                     OR   a   ; if NUL exit loop
04CA   20 F6                  JR   nz,dotString0   
04CC   2A EC 23               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
04CF   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
04D3   DD E9                  JP   (ix)   
04D5                             ; /bc buffer char
04D5                             ; char --
04D5                DOTCHAR_:      
04D5   21 01 00               LD   hl,1   
04D8   18 01                  JR   dotXChars0   
04DA                             ; /bx buffered x chars
04DA                             ; char length --
04DA                DOTXCHARS_:      
04DA   E1                     POP   hl   ; hl = length
04DB                DOTXCHARS0:      
04DB   D1                     POP   de   ; a' = char
04DC   7B                     LD   a,e   
04DD   08                     EX   af,af'   
04DE   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
04E2   18 08                  JR   dotXChars2   
04E4                DOTXCHARS1:      
04E4   08                     EX   af,af'   
04E5   12                     LD   (de),a   
04E6   08                     EX   af,af'   
04E7   1C                     INC   e   ; buffer*++, wraparound
04E8   CC BB 0B               CALL   z,flushBuffer   
04EB   2B                     DEC   hl   
04EC                DOTXCHARS2:      
04EC   7D                     LD   a,l   
04ED   B4                     OR   h   
04EE   20 F4                  JR   nz,dotXChars1   
04F0   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*'
04F4   DD E9                  JP   (ix)   
04F6                             ;********************** PAGE 4 END *********************************************
04F6                             ;*******************************************************************
04F6                             ; Monty implementations
04F6                             ;*******************************************************************
04F6                             ; /fe forEach
04F6                             ; src proc --
04F6                          ;*Macro unroll: FUNC forEach, 1, "spT"
04F6                FOREACH:      
04F6   CD 11 0A               CALL   go   
04F9   00 00                  DW   NUL   
04FB   04 05                  DW   forEachM_1282S850   
04FD   FF 04                  DW   $+2   
04FF   01                     DB   1   
0500   03 73 70 54            .PSTR   "spT"   
0504                FOREACHM_1282S850:      
0504   7B                     DB   "{"   
0505   5B 30 5D 25 54 3D      DB   "[0]%T="   
050B   3A 64 74 7B            DB   ":dt{"   ; return talkback to receive data ; $56AA
050F   32 25 74 21 3D 7B      DB   "2%t!={"   ; if type == 2 skip
0515   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
051A   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
052C   3F 3F                  DB   "??"   ; ifte:
052E   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0537   7D 3F                  DB   "}?"   
0539   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   
0541   7D                     DB   "}"   
0542   00                     DB   0   
0543                             ; ; /fs funcSrc
0543                             ; ; func -- src
0543                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0543                FUNCSRC:      ; :f func or block
0543   CD 11 0A               CALL   go   
0546   00 00                  DW   NUL   
0548   4F 05                  DW   funcSrcM_1297S866   
054A   4C 05                  DW   $+2   
054C   00                     DB   0   
054D   01 66                  .PSTR   "f"   
054F                FUNCSRCM_1297S866:      
054F   7B                     DB   "{"   
0550   3A 6B 74 7B            DB   ":kt{"   ; :kt sink, type
0554   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
055C   3A 64 74 7B            DB   ":dt{"   
0560   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0572   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
057A   7D 3B                  DB   "};"   
057C   7D                     DB   "}"   
057D   00                     DB   0   
057E                          ;*Macro unroll: FUNC dotArray, 2, "abc"
057E                DOTARRAY:      
057E   CD 11 0A               CALL   go   
0581   00 00                  DW   NUL   
0583   8C 05                  DW   dotArrayM_1307S877   
0585   87 05                  DW   $+2   
0587   02                     DB   2   
0588   03 61 62 63            .PSTR   "abc"   
058C                DOTARRAYM_1307S877:      
058C   7B                     DB   "{"   
058D   60 5B 20 60 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 60 5D 60 2E 73 DB   "`[ `.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ `]`.s"   
05C4   7D                     DB   "}"   
05C5   00                     DB   0   
05C6                             ; /mp map
05C6                             ; src func -- src1
05C6                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map
05C6                MAP:         ; map
05C6   CD 11 0A               CALL   go   
05C9   00 00                  DW   NUL   
05CB   D3 05                  DW   mapM_1314S885   
05CD   CF 05                  DW   $+2   
05CF   00                     DB   0   
05D0   02 73 66               .PSTR   "sf"   
05D3                MAPM_1314S885:      
05D3   7B                     DB   "{"   
05D4   3A 6B 74 7B            DB   ":kt{"   
05D8   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
05E0   3A 64 74 7B            DB   ":dt{"   ; call source with tb
05E4   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
05E9   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
05F5   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
05FE   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   
0606   7D 3B                  DB   "};"   
0608   7D                     DB   "}"   
0609   00                     DB   0   
060A                             ; /rg rangeSrc
060A                             ; begin end step -- src
060A                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source (begin end step)
060A                RANGESRC:      ; range source (begin end step)
060A   CD 11 0A               CALL   go   
060D   00 00                  DW   NUL   
060F   19 06                  DW   rangeSrcM_1328S900   
0611   13 06                  DW   $+2   
0613   01                     DB   1   
0614   04 62 65 73 4C         .PSTR   "besL"   
0619                RANGESRCM_1328S900:      
0619   7B                     DB   "{"   
061A   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
0625   3A 6B 74 7B            DB   ":kt{"   
0629   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
0631   3A 64 74 3A 61 7B      DB   ":dt:a{"   ; return talkback to receive data
0637   25 4C 31 23 2F 62 72   DB   "%L1#/br"   ; if not active don't send
063E   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
0646   25 73 20 25 4C 30 23 20 2B 20 25 4C 30 23 3D DB   "%s %L0# + %L0#="   ; inc value of index by step
0655   31 25 74 3D 3D 2F 62 72 DB   "1%t==/br"   ; break if type != 0
065D   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
0664   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: 1: send index, 2: active = false, send quit
0678   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
0680   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
0688   7D 3B                  DB   "};"   
068A   7D                     DB   "}"   
068B   00                     DB   0   
068C                             ;*******************************************************************
068C                             ; implementations
068C                             ;*******************************************************************
068C                             ; %a .. %z
068C                             ; -- value
068C                             ; returns value of arg
068C                PERCENT:      
068C                ARG:         
068C   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
068F   FD 56 05               LD   d,(iy+5)   
0692   EB                     EX   de,hl   
0693   7D                     LD   a,l   ; arg_list* == null, skip
0694   B4                     OR   h   
0695   28 1A                  JR   z,arg0a   
0697   23                     INC   hl   ; a = num_args, hl = arg_list*
0698   7E                     LD   a,(hl)   
0699   23                     INC   hl   
069A   B7                     OR   a   
069B   28 14                  JR   z,arg0a   ; num_args == 0, skip
069D   5F                     LD   e,a   ; e = a = num_args
069E   03                     INC   bc   ; a = next char = dollar_name
069F   0A                     LD   a,(bc)   
06A0   C5                     PUSH   bc   ; save IP
06A1   43                     LD   b,e   ; b = e = num_args
06A2   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
06A5   FD 56 03               LD   d,(iy+3)   
06A8                ARG0:        
06A8   1B                     DEC   de   ; a = dollar_name, de = next arg*
06A9   1B                     DEC   de   
06AA   BE                     CP   (hl)   
06AB   28 09                  JR   z,arg1   
06AD   23                     INC   hl   ; hl = next arg_list*
06AE   10 F8                  DJNZ   arg0   
06B0   C1                     POP   bc   ; no match, restore IP
06B1                ARG0A:       
06B1   11 00 00               LD   de,0   ; return 0
06B4   18 08                  JR   arg1a   
06B6                ARG1:        
06B6   C1                     POP   bc   ; restore IP
06B7   EB                     EX   de,hl   ; hl = arg*
06B8   22 F4 23               LD   (vPointer),hl   ; store arg* in setter
06BB   5E                     LD   e,(hl)   
06BC   23                     INC   hl   
06BD   56                     LD   d,(hl)   ; de = arg
06BE                ARG1A:       
06BE   D5                     PUSH   de   ; push arg
06BF   DD E9                  JP   (ix)   
06C1                LBRACK:      
06C1                ARRAYSTART:      
06C1   11 00 00               LD   de,0   ; create stack frame
06C4   D5                     PUSH   de   ; push null for IP
06C5   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
06C8   FD 56 05               LD   d,(iy+5)   ; 
06CB   D5                     PUSH   de   ; 
06CC   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
06CF   FD 56 03               LD   d,(iy+3)   ; 
06D2   D5                     PUSH   de   ; 
06D3   FD E5                  PUSH   iy   ; push BP
06D5   FD 21 00 00            LD   iy,0   ; BP = SP
06D9   FD 39                  ADD   iy,sp   
06DB   DD E9                  JP   (ix)   
06DD                RBRACK:      
06DD                ARRAYEND:      
06DD   FD 54                  LD   d,iyh   ; de = BP
06DF   FD 5D                  LD   e,iyl   
06E1   ED 43 00 24            LD   (vTemp1),bc   ; save IP
06E5   62 6B                  LD   hl,de   ; hl = de = BP
06E7   B7                     OR   a   
06E8   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
06EA   CB 3C                  SRL   h   ; 
06EC   CB 1D                  RR   l   
06EE   44 4D                  LD   bc,hl   ; bc = count
06F0   2A F0 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
06F3   71                     LD   (hl),c   ; write num items in length word
06F4   23                     INC   hl   
06F5   70                     LD   (hl),b   
06F6   23                     INC   hl   ; hl = array[0], bc = count
06F7                             ; de = BP, hl = array[0], bc = count
06F7   18 15                  JR   arrayEnd3   
06F9                ARRAYEND1:      
06F9   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
06FC   77                     LD   (hl),a   ; write lsb of array item
06FD   23                     INC   hl   ; move to msb of array item
06FE   3A E6 23               LD   a,(vDataWidth)   ; vDataWidth=1?
0701   3D                     DEC   a   
0702   28 05                  JR   z,arrayEnd2   
0704   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0707   77                     LD   (hl),a   ; write msb of array item
0708   23                     INC   hl   ; move to next word in array
0709                ARRAYEND2:      
0709   FD 2B                  DEC   iy   ; move to next word on stack
070B   FD 2B                  DEC   iy   
070D   0B                     DEC   bc   ; dec items count
070E                ARRAYEND3:      
070E   79                     LD   a,c   ; if not zero loop
070F   B0                     OR   b   
0710   20 E7                  JR   nz,arrayEnd1   
0712   EB                     EX   de,hl   ; de = end of array, hl = BP
0713   F9                     LD   sp,hl   ; sp = BP
0714   E1                     POP   hl   ; de = end of array, hl = old BP
0715   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0716   FD 62                  LD   iyh,d   
0718   FD 6B                  LD   iyl,e   
071A   D1                     POP   de   ; pop arg_list (discard)
071B   D1                     POP   de   ; pop first_arg* (discard)
071C   D1                     POP   de   ; pop IP (discard)
071D   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = array[-2]
0721   13                     INC   de   
0722   13                     INC   de   
0723   D5                     PUSH   de   ; return array[0]
0724   22 F0 23               LD   (vHeapPtr),hl   ; move heap* to end of array
0727   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
072B   DD E9                  JP   (ix)   
072D                             ; index of an array, based on vDataWidth
072D                             ; array* num -- value    ; also sets vPointer to address
072D                HASH:        
072D                ARRAYINDEX:      
072D   E1                     POP   hl   ; hl = index
072E   D1                     POP   de   ; de = array
072F   3A E6 23               LD   a,(vDataWidth)   ; a = data width
0732   3D                     DEC   a   
0733   28 01                  JR   z,arrayIndex1   
0735                ARRAYINDEX0:      
0735   29                     ADD   hl,hl   ; if data width = 2 then double
0736                ARRAYINDEX1:      
0736   19                     ADD   hl,de   ; add addr
0737   22 F4 23               LD   (vPointer),hl   ; store address in setter
073A   16 00                  LD   d,0   
073C   5E                     LD   e,(hl)   
073D   B7                     OR   a   ; check data width again
073E   28 02                  JR   z,arrayIndex2   
0740   23                     INC   hl   
0741   56                     LD   d,(hl)   
0742                ARRAYINDEX2:      
0742   D5                     PUSH   de   
0743   DD E9                  JP   (ix)   
0745                             ; arg_list - parses input (ab:c)
0745                             ; names after the : represent uninitialised locals
0745                             ; return values are the state of the stack after the block ends
0745                             ; format: numLocals totNumArgs argChars...
0745                COLON:       
0745                ARGLIST:      
0745   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0748   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
074B   E5                     PUSH   hl   ; save start of arg_list
074C   23                     INC   hl   ; skip length fields to start of string
074D   23                     INC   hl   
074E   03                     INC   bc   ; point to next char
074F                ARGLIST1:      
074F   0A                     LD   a,(bc)   
0750   FE 3A                  CP   ":"   ; ":" switches from args to locals
0752   20 03                  JR   nz,arglist1a   
0754   14                     INC   d   ; non zero value local count acts as flag
0755   18 10                  JR   arglist3   
0757                ARGLIST1A:      
0757   FE 61                  CP   "a"   ; < "a" terminates arg_list
0759   38 0F                  JR   c,arglist4   
075B   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
075D   30 0B                  JR   nc,arglist4   
075F                ARGLIST2:      
075F   77                     LD   (hl),a   
0760   23                     INC   hl   
0761   1C                     INC   e   ; increase arg count
0762   AF                     XOR   a   
0763   B2                     OR   d   
0764   28 01                  JR   z,arglist3   
0766   14                     INC   d   ; if d > 0 increase local count
0767                ARGLIST3:      
0767   03                     INC   bc   ; point to next char
0768   18 E5                  JR   arglist1   
076A                ARGLIST4:      
076A   0B                     DEC   bc   
076B   AF                     XOR   a   
076C   B2                     OR   d   
076D   28 01                  JR   z,arglist5   
076F   15                     DEC   d   ; remove initial inc
0770                ARGLIST5:      
0770   23                     INC   hl   
0771   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0774   E1                     POP   hl   ; hl = start of arg_list
0775   E5                     PUSH   hl   ; return start of arg_list
0776   72                     LD   (hl),d   ; write number of locals at start - 1
0777   23                     INC   hl   
0778   73                     LD   (hl),e   ; write number of args + locals at start - 2
0779   DD E9                  JP   (ix)   
077B                             ; value _oldValue --            ; uses address in vPointer
077B                ASSIGN:      
077B   E1                     POP   hl   ; discard last accessed value
077C   E1                     POP   hl   ; hl = new value
077D                ASSIGN0:      
077D   EB                     EX   de,hl   ; de = new value
077E                ASSIGNX:      
077E   2A F4 23               LD   hl,(vPointer)   
0781   73                     LD   (hl),e   
0782   3A E6 23               LD   a,(vDataWidth)   
0785   3D                     DEC   a   ; is it byte?
0786   28 02                  JR   z,assign1   
0788   23                     INC   hl   
0789   72                     LD   (hl),d   
078A                ASSIGN1:      
078A   DD E9                  JP   (ix)   
078C                LBRACE:      
078C                BLOCKSTART:      
078C   C5                     PUSH   bc   ; return pointer to first { of block
078D   03                     INC   bc   
078E   16 01                  LD   d,1   ; nesting: count first parenthesis
0790                BLOCKSTART1:      ; Skip to end of definition
0790   0A                     LD   a,(bc)   ; Get the next character
0791   03                     INC   bc   ; Point to next character
0792   FE 21                  CP   " " + 1   ; ignore whitespace
0794   38 FA                  JR   c,blockStart1   
0796   FE 29                  CP   ")"   
0798   28 2D                  JR   z,blockStart4   
079A   FE 7D                  CP   "}"   
079C   28 29                  JR   z,blockStart4   
079E   FE 5D                  CP   "]"   
07A0   28 25                  JR   z,blockStart4   
07A2   FE 28                  CP   "("   
07A4   28 16                  JR   z,blockStart2   
07A6   FE 7B                  CP   "{"   
07A8   28 12                  JR   z,blockStart2   
07AA   FE 5B                  CP   "["   
07AC   28 0E                  JR   z,blockStart2   
07AE   FE 27                  CP   "'"   
07B0   28 0D                  JR   z,blockStart3   
07B2   FE 60                  CP   "`"   
07B4   28 09                  JR   z,blockStart3   
07B6   FE 22                  CP   DQ   
07B8   28 05                  JR   z,blockStart3   
07BA   18 D4                  JR   blockStart1   
07BC                BLOCKSTART2:      
07BC   14                     INC   d   
07BD   18 D1                  JR   blockStart1   
07BF                BLOCKSTART3:      
07BF   3E 80                  LD   a,$80   
07C1   AA                     XOR   d   
07C2   57                     LD   d,a   
07C3   20 CB                  JR   nz,blockStart1   
07C5   18 03                  JR   blockStart5   
07C7                BLOCKSTART4:      
07C7   15                     DEC   d   
07C8   20 C6                  JR   nz,blockStart1   ; get the next element
07CA                BLOCKSTART5:      
07CA   60 69                  LD   hl,bc   ; hl = IP
07CC   11 1C 24               LD   de,HEAP   ; is IP pointing to object in heap
07CF   B7                     OR   a   ; IP - HEAP
07D0   ED 52                  SBC   hl,de   
07D2   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
07D4   28 1C                  JR   z,blockStart6   
07D6   60 69                  LD   hl,bc   ; hl = IP
07D8   D1                     POP   de   ; de = block*
07D9   ED 43 00 24            LD   (vTemp1),bc   ; save IP
07DD   B7                     OR   a   ; bc = size
07DE   ED 52                  SBC   hl,de   
07E0   44 4D                  LD   bc,hl   
07E2   EB                     EX   de,hl   ; hl = block* de = heap*
07E3   ED 5B F0 23            LD   de,(vHeapPtr)   
07E7   D5                     PUSH   de   ; return hblock*
07E8   ED B0                  LDIR      ; copy size bytes from block* to hblock*
07EA   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += size
07EE   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
07F2                BLOCKSTART6:      
07F2   0B                     DEC   bc   ; balanced, exit
07F3   DD E9                  JP   (ix)   
07F5                RBRACE:      
07F5                BLOCKEND:      
07F5   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
07F8   FD 56 01               LD   d,(iy+1)   
07FB   ED 53 00 24            LD   (vTemp1),de   
07FF   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0802   FD 56 07               LD   d,(iy+7)   
0805   ED 53 02 24            LD   (vTemp2),de   
0809   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
080C   FD 56 03               LD   d,(iy+3)   
080F   EB                     EX   de,hl   
0810   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0813   FD 56 01               LD   d,(iy+1)   
0816   13                     INC   de   ; for carry flag <=
0817   B7                     OR   a   
0818   ED 52                  SBC   hl,de   
081A   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
081C   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
081E   FD 5D                  LD   e,iyl   
0820   21 08 00               LD   hl,8   
0823   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0824   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0825   18 0C                  JR   blockEnd2   
0827                BLOCKEND1:      ; same scope
0827   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
082A   FD 56 03               LD   d,(iy+3)   
082D   EB                     EX   de,hl   
082E   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0830   FD 5D                  LD   e,iyl   
0832   EB                     EX   de,hl   
0833                BLOCKEND2:      
0833   44 4D                  LD   bc,hl   ; bc = hl = BP
0835   B7                     OR   a   ; hl = BP - SP = count
0836   ED 72                  SBC   hl,sp   
0838   7D                     LD   a,l   
0839   B4                     OR   h   
083A   28 09                  JR   z,blockEnd3   
083C   C5                     PUSH   bc   ; bc = count, hl = BP
083D   44 4D                  LD   bc,hl   
083F   E1                     POP   hl   
0840   2B                     DEC   hl   ; hl = BP-1
0841   1B                     DEC   de   ; de = args*-1
0842   ED B8                  LDDR      
0844   13                     INC   de   
0845                BLOCKEND3:      
0845   EB                     EX   de,hl   ; sp = de = new tos*
0846   F9                     LD   sp,hl   
0847   ED 4B 02 24            LD   bc,(vTemp2)   
084B   FD 2A 00 24            LD   iy,(vTemp1)   
084F   ED 5B F2 23            LD   de,(vRecur)   ; de = recur vector
0853   7B                     LD   a,e   ; check for NUL
0854   B2                     OR   d   
0855   20 02                  JR   nz,blockEnd4   
0857   DD E9                  JP   (ix)   
0859                BLOCKEND4:      
0859   21 00 00               LD   hl,0   ; clear recur vector
085C   22 F2 23               LD   (vRecur),hl   
085F   C3 12 0A               JP   go1   ; execute de
0862                             ; /br break from loop
0862                             ; --
0862                BREAK:       
0862   E1                     POP   hl   ; hl = condition, break if false
0863   7D                     LD   a,l   
0864   B4                     OR   h   
0865   28 02                  JR   z,break1   
0867   DD E9                  JP   (ix)   
0869                BREAK1:      
0869   FD 5D                  LD   e,iyl   ; get block* just under stack frame
086B   FD 54                  LD   d,iyh   
086D   21 08 00               LD   hl,8   
0870   19                     ADD   hl,de   
0871   23                     INC   hl   
0872   23                     INC   hl   
0873   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0876   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0879   C3 F5 07               JP   blockEnd   
087C                TICK:        
087C                CHAR:        
087C   21 00 00               LD   hl,0   ; if "" is empty or null
087F                CHAR1:       
087F   03                     INC   bc   ; point to next char
0880   0A                     LD   a,(bc)   
0881   FE 27                  CP   "'"   ; ' is the terminator
0883   28 09                  JR   z,char3   
0885   FE 5C                  CP   $5c   ; \ is the escape
0887   20 02                  JR   nz,char2   
0889   03                     INC   bc   
088A   0A                     LD   a,(bc)   
088B                CHAR2:       
088B   6F                     LD   l,a   
088C   18 F1                  JR   char1   
088E                CHAR3:       
088E   E5                     PUSH   hl   
088F   DD E9                  JP   (ix)   
0891                             ; ";" createFunc
0891                             ; arg_list* block* -- func*
0891                SEMICOLON:      
0891                CREATEFUNC:      
0891   ED 43 00 24            LD   (vTemp1),bc   ; save IP
0895   E1                     POP   hl   ; hl = block*
0896   22 02 24               LD   (vTemp2),hl   ; save block*
0899   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
089C   FD 56 05               LD   d,(iy+5)   
089F   7B                     LD   a,e   ; if arg_list == null then make a func
08A0   B2                     OR   d   
08A1   20 09                  JR   nz,createFunc0   
08A3   21 00 00               LD   hl,0   ; partial_array = null
08A6   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
08AA   18 65                  JR   createFunc5   
08AC                CREATEFUNC0:      
08AC   E1                     POP   hl   ; hl = inner_arg_list*
08AD   E5                     PUSH   hl   ; save inner_arg_list
08AE   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
08B2   7E                     LD   a,(hl)   ; compile inner_num_locals
08B3   4F                     LD   c,a   ; b = inner_num_locals
08B4   12                     LD   (de),a   
08B5   23                     INC   hl   
08B6   13                     INC   de   
08B7   7E                     LD   a,(hl)   ; compile inner_length
08B8   12                     LD   (de),a   
08B9   91                     SUB   c   ; a = inner_num args
08BA   23                     INC   hl   
08BB   13                     INC   de   
08BC   B7                     OR   a   ; compile args if inner_length > 0
08BD   28 05                  JR   z,createFunc1   
08BF   4F                     LD   c,a   ; bc = a
08C0   06 00                  LD   b,0   
08C2   ED B0                  LDIR      
08C4                CREATEFUNC1:      
08C4   EB                     EX   de,hl   ; hl = outer_arg_list
08C5   FD 5E 04               LD   e,(iy+4)   
08C8   FD 56 05               LD   d,(iy+5)   
08CB   EB                     EX   de,hl   
08CC   23                     INC   hl   ; a = outer_length
08CD   7E                     LD   a,(hl)   
08CE   23                     INC   hl   
08CF   B7                     OR   a   
08D0   28 05                  JR   z,createFunc2   
08D2   4F                     LD   c,a   
08D3   06 00                  LD   b,0   
08D5   ED B0                  LDIR      ; append outer_args
08D7                CREATEFUNC2:      ; a = outer_length
08D7   47                     LD   b,a   ; b = a = outer_length
08D8   2A F0 23               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
08DB   23                     INC   hl   
08DC   7E                     LD   a,(hl)   ; add outer_length to new length
08DD   80                     ADD   a,b   
08DE   77                     LD   (hl),a   
08DF   2B                     DEC   hl   
08E0   78                     LD   a,b   ; save outer_length in a'
08E1   08                     EX   af,af'   
08E2   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
08E3   7E                     LD   a,(hl)   ; c = a = inner_num_locals
08E4   B7                     OR   a   
08E5   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
08E7   4F                     LD   c,a   ; c = inner_num_locals
08E8   06 00                  LD   b,0   ; bc = inner_num_locals
08EA   23                     INC   hl   ; a = inner_length
08EB   7E                     LD   a,(hl)   
08EC   91                     SUB   c   ; a = inner_num_args
08ED   23                     INC   hl   ; hl = inner_arg_chars
08EE   85                     ADD   a,l   ; hl += a
08EF   6F                     LD   l,a   
08F0   3E 00                  LD   a,0   
08F2   84                     ADD   a,h   
08F3   67                     LD   h,a   
08F4   ED B0                  LDIR      ; append inner_locals
08F6                CREATEFUNC2A:      
08F6   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
08F7   12                     LD   (de),a   ; compile partial_array length field
08F8   13                     INC   de   
08F9   AF                     XOR   a   
08FA   12                     LD   (de),a   
08FB   13                     INC   de   
08FC   D5                     PUSH   de   ; push partial_array*
08FD   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
08FE   FD 5E 02               LD   e,(iy+2)   
0901   FD 56 03               LD   d,(iy+3)   
0904   EB                     EX   de,hl   
0905                CREATEFUNC3:      
0905   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0906   4E                     LD   c,(hl)   
0907   2B                     DEC   hl   
0908   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0909   12                     LD   (de),a   ; write LSB and MSB to partial_array*
090A   13                     INC   de   
090B   79                     LD   a,c   
090C   12                     LD   (de),a   
090D   13                     INC   de   
090E   10 F5                  DJNZ   createFunc3   ; b = outer_length
0910                CREATEFUNC4:      
0910   E1                     POP   hl   ; hl = partial_array*
0911                CREATEFUNC5:      
0911   C1                     POP   bc   ; bc = new_arg_list*
0912   D5                     PUSH   de   ; return new func*
0913   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0914   73                     LD   (hl),e   ; compile partial_array* to func
0915   23                     INC   hl   
0916   72                     LD   (hl),d   
0917   23                     INC   hl   
0918   ED 5B 02 24            LD   de,(vTemp2)   ; de = block*
091C   73                     LD   (hl),e   ; compile block* to func
091D   23                     INC   hl   
091E   72                     LD   (hl),d   
091F   23                     INC   hl   
0920   71                     LD   (hl),c   ; compile new_arg_list* to func
0921   23                     INC   hl   
0922   70                     LD   (hl),b   
0923   23                     INC   hl   
0924   22 F0 23               LD   (vHeapPtr),hl   ; bump heap ptr
0927   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
092B   DD E9                  JP   (ix)   
092D                             ; , discard stack item
092D                             ; x y -- x
092D                COMMA:       
092D                DISCARD:      
092D   FD 54                  LD   d,iyh   ; limit this to SP <= BP
092F   FD 5D                  LD   e,iyl   
0931   EB                     EX   de,hl   
0932   B7                     OR   a   
0933   ED 72                  SBC   hl,sp   
0935   CB 7C                  BIT   7,h   
0937   20 01                  JR   nz,discard1   
0939   E1                     POP   hl   
093A                DISCARD1:      
093A   DD E9                  JP   (ix)   
093C                DIV:         
093C   D1                     POP   de   
093D   E1                     POP   hl   
093E   C5                     PUSH   bc   ; preserve the IP
093F   44 4D                  LD   bc,hl   
0941   CD EB 09               CALL   divide   
0944   EB                     EX   de,hl   
0945   ED 53 F6 23            LD   (vRemain),de   
0949   C1                     POP   bc   
094A   C3 11 02               JP   add3   
094D                             ; /bd buffer decimal
094D                             ; value --
094D                BUFFERDEC:      
094D   ED 5B EC 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0951   D9                     EXX      
0952   E1                     POP   hl   ; hl = value
0953   CD 67 09               CALL   bufferDec0   
0956   D9                     EXX      ; de = buffer*' bc = IP
0957   3E 20                  LD   a," "   ; append space to buffer
0959   12                     LD   (de),a   
095A   1C                     INC   e   ; buffer*++, wraparound
095B   CC BB 0B               CALL   z,flushBuffer   
095E   2A EC 23               LD   hl,(vBufPtr)   ; hl = buffer*
0961   ED 53 EC 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
0965   DD E9                  JP   (ix)   
0967                             ; hl = value
0967                             ; de' = buffer*
0967                             ; a, bc, de, hl destroyed
0967                BUFFERDEC0:      
0967   CB 7C                  BIT   7,h   
0969   28 0C                  JR   z,bufferDec1   
096B   D9                     EXX      
096C   3E 2D                  LD   a,"-"   
096E   12                     LD   (de),a   
096F   13                     INC   de   
0970   D9                     EXX      
0971   AF                     XOR   a   
0972   95                     SUB   l   
0973   6F                     LD   l,a   
0974   9F                     SBC   a,a   
0975   94                     SUB   h   
0976   67                     LD   h,a   
0977                BUFFERDEC1:      
0977   0E 00                  LD   c,0   ; leading zeros flag = false
0979   11 F0 D8               LD   de,-10000   
097C   CD 97 09               CALL   bufferDec2   
097F   11 18 FC               LD   de,-1000   
0982   CD 97 09               CALL   bufferDec2   
0985   11 9C FF               LD   de,-100   
0988   CD 97 09               CALL   bufferDec2   
098B   1E F6                  LD   e,-10   
098D   CD 97 09               CALL   bufferDec2   
0990   0C                     INC   c   ; flag = true for at least digit
0991   1E FF                  LD   e,-1   
0993   CD 97 09               CALL   bufferDec2   
0996   C9                     RET      
0997                BUFFERDEC2:      
0997   06 2F                  LD   b,"0"-1   
0999                BUFFERDEC3:      
0999   04                     INC   b   
099A   19                     ADD   hl,de   
099B   38 FC                  JR   c,bufferDec3   
099D   ED 52                  SBC   hl,de   
099F   3E 30                  LD   a,"0"   
09A1   B8                     CP   b   
09A2   20 05                  JR   nz,bufferDec4   
09A4   AF                     XOR   a   
09A5   B1                     OR   c   
09A6   C8                     RET   z   
09A7   18 01                  JR   bufferDec5   
09A9                BUFFERDEC4:      
09A9   0C                     INC   c   
09AA                BUFFERDEC5:      
09AA   78                     LD   a,b   
09AB   D9                     EXX      
09AC   12                     LD   (de),a   
09AD   1C                     INC   e   
09AE   CC BB 0B               CALL   z,flushBuffer   
09B1   D9                     EXX      
09B2   C9                     RET      
09B3                             ; /bh buffer hex
09B3                             ; value --
09B3                BUFFERHEX:      
09B3   E1                     POP   hl   ; hl = value
09B4   ED 5B EC 23            LD   de,(vBufPtr)   
09B8   3E 24                  LD   a,"$"   ; # prefix
09BA   12                     LD   (de),a   
09BB   1C                     INC   e   ; buffer*++, wraparound
09BC   CC BB 0B               CALL   z,flushBuffer   
09BF   7C                     LD   a,h   
09C0   CD D4 09               CALL   bufferHex1   
09C3   7D                     LD   a,l   
09C4   CD D4 09               CALL   bufferHex1   
09C7   3E 20                  LD   a," "   ; append space to buffer
09C9   12                     LD   (de),a   
09CA   1C                     INC   e   ; buffer*++, wraparound
09CB   CC BB 0B               CALL   z,flushBuffer   
09CE   ED 53 EC 23            LD   (vBufPtr),de   
09D2   DD E9                  JP   (ix)   
09D4                BUFFERHEX1:      
09D4   F5                     PUSH   af   
09D5   1F                     RRA      
09D6   1F                     RRA      
09D7   1F                     RRA      
09D8   1F                     RRA      
09D9   CD DD 09               CALL   bufferHex2   
09DC   F1                     POP   af   
09DD                BUFFERHEX2:      
09DD   E6 0F                  AND   0x0F   
09DF   C6 90                  ADD   a,0x90   
09E1   27                     DAA      
09E2   CE 40                  ADC   a,0x40   
09E4   27                     DAA      
09E5   12                     LD   (de),a   
09E6   1C                     INC   e   ; buffer*++, wraparound
09E7   CC BB 0B               CALL   z,flushBuffer   
09EA   C9                     RET      
09EB                             ; division subroutine.
09EB                             ; bc: divisor, de: dividend, hl: remainder
09EB                DIVIDE:      
09EB   21 00 00               LD   hl,0   ; zero the remainder
09EE   3E 10                  LD   a,16   ; loop counter
09F0                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
09F0   CB 21                  SLA   c   
09F2   CB 10                  RL   b   
09F4   ED 6A                  ADC   hl,hl   
09F6   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
09F8   38 03                  JR   c,divide2   
09FA   0C                     INC   c   
09FB   18 01                  JR   divide3   
09FD                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
09FD   19                     ADD   hl,de   
09FE                DIVIDE3:      
09FE   3D                     DEC   a   
09FF   20 EF                  JR   nz,divide1   
0A01   50 59                  LD   de,bc   ; result from bc to de
0A03   C9                     RET      
0A04                FZ:          
0A04   21 00 21               LD   hl,STACK   
0A07   ED 72                  SBC   hl,sp   
0A09   CB 3C                  SRL   h   
0A0B   CB 1D                  RR   l   
0A0D   E5                     PUSH   hl   
0A0E   C3 B0 04               JP   dotNumber_   
0A11                             ; execute a block of code which ends with }
0A11                             ; creates a root scope if BP == stack
0A11                             ; else uses outer scope
0A11                CARET:       
0A11                GO:          
0A11   D1                     POP   de   ; de = block*
0A12                GO1:         
0A12   7B                     LD   a,e   ; if block* == null, exit
0A13   B2                     OR   d   
0A14   20 02                  JR   nz,go2   
0A16   DD E9                  JP   (ix)   
0A18                GO2:         
0A18   1A                     LD   a,(de)   
0A19   FE 7B                  CP   "{"   
0A1B   28 06                  JR   z,goBlock   
0A1D   FE 28                  CP   "("   
0A1F   C2 56 0A               JP   nz,goFunc   
0A22   D5                     PUSH   de   ; push de just before stack frame
0A23                GOBLOCK:      
0A23   ED 53 00 24            LD   (vTemp1),de   ; save de
0A27   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0A2A   FD 54                  LD   d,iyh   
0A2C   FD 5D                  LD   e,iyl   
0A2E   B7                     OR   a   ; if stack* == BP then this is the root_scope
0A2F   ED 52                  SBC   hl,de   
0A31   ED 5B 00 24            LD   de,(vTemp1)   ; restore de
0A35   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0A36   B4                     OR   h   
0A37   3E 00                  LD   a,0   
0A39   28 6A                  JR   z,goFunc8   
0A3B   C5                     PUSH   bc   ; push IP
0A3C   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0A3F   FD 46 05               LD   b,(iy+5)   
0A42   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0A45   FD 66 03               LD   h,(iy+3)   
0A48                GOBLOCK2:      
0A48   C5                     PUSH   bc   ; arg_list*
0A49   E5                     PUSH   hl   ; first_arg*
0A4A   FD E5                  PUSH   iy   ; push BP
0A4C   FD 21 00 00            LD   iy,0   ; BP = SP
0A50   FD 39                  ADD   iy,sp   
0A52                GOBLOCK3:      
0A52   42 4B                  LD   bc,de   ; bc = de = block*-1
0A54   DD E9                  JP   (ix)   
0A56                GOFUNC:      ; execute func
0A56   EB                     EX   de,hl   ; hl = func*
0A57   5E                     LD   e,(hl)   ; de = partial_array*
0A58   23                     INC   hl   
0A59   56                     LD   d,(hl)   
0A5A   23                     INC   hl   
0A5B   7B                     LD   a,e   ; if partial_array* == null skip
0A5C   B2                     OR   d   
0A5D   28 21                  JR   z,goFunc3   
0A5F   ED 43 00 24            LD   (vTemp1),bc   
0A63   22 02 24               LD   (vTemp2),hl   ; save bc,hl
0A66   EB                     EX   de,hl   ; hl = partial_array*
0A67   2B                     DEC   hl   ; bc = count
0A68   46                     LD   b,(hl)   
0A69   2B                     DEC   hl   
0A6A   4E                     LD   c,(hl)   
0A6B   23                     INC   hl   ; hl = array data*
0A6C   23                     INC   hl   
0A6D   18 06                  JR   goFunc2   ; push each item on stack
0A6F                GOFUNC1:      
0A6F   5E                     LD   e,(hl)   ; de = partial item
0A70   23                     INC   hl   
0A71   56                     LD   d,(hl)   
0A72   23                     INC   hl   
0A73   D5                     PUSH   de   ; push on stack
0A74   0B                     DEC   bc   
0A75                GOFUNC2:      
0A75   79                     LD   a,c   ; if count != 0 then loop
0A76   B0                     OR   b   
0A77   20 F6                  JR   nz,goFunc1   
0A79   ED 4B 00 24            LD   bc,(vTemp1)   ; restore bc
0A7D   2A 02 24               LD   hl,(vTemp2)   ; restore hl
0A80                GOFUNC3:      
0A80   5E                     LD   e,(hl)   ; de = block*
0A81   23                     INC   hl   
0A82   56                     LD   d,(hl)   
0A83   23                     INC   hl   
0A84   ED 53 00 24            LD   (vTemp1),de   ; save block*
0A88   5E                     LD   e,(hl)   ; de = arg_list*
0A89   23                     INC   hl   
0A8A   56                     LD   d,(hl)   
0A8B   23                     INC   hl   
0A8C   EB                     EX   de,hl   ; hl = arg_list*
0A8D   ED 5B 00 24            LD   de,(vTemp1)   ; restore de = block*
0A91   7D                     LD   a,l   ; if arg_list* == null a = 0
0A92   B4                     OR   h   
0A93   20 03                  JR   nz,goFunc4   
0A95   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0A96   18 0D                  JR   goFunc8   
0A98                GOFUNC4:      ; allocate locals
0A98   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0A99   18 03                  JR   goFunc6   
0A9B                GOFUNC5:      ; loop
0A9B   3B                     DEC   sp   
0A9C   3B                     DEC   sp   
0A9D   3D                     DEC   a   
0A9E                GOFUNC6:      
0A9E   B7                     OR   a   
0A9F   20 FA                  JR   nz,goFunc5   ; end loop
0AA1                GOFUNC7:      
0AA1   23                     INC   hl   ; a = num_args* x 2
0AA2   7E                     LD   a,(hl)   
0AA3   2B                     DEC   hl   
0AA4   87                     ADD   a,a   ; a *= 2
0AA5                GOFUNC8:      
0AA5   C5                     PUSH   bc   ; push IP
0AA6   44 4D                  LD   bc,hl   
0AA8   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0AAB   85                     ADD   a,l   
0AAC   6F                     LD   l,a   
0AAD   39                     ADD   hl,sp   
0AAE   18 98                  JR   goBlock2   
0AB0                DOLLAR:      
0AB0                HEXNUM:      
0AB0   21 00 00               LD   hl,0   ; Clear hl to accept the number
0AB3                HEXNUM1:      
0AB3   03                     INC   bc   
0AB4   0A                     LD   a,(bc)   ; Get the character which is a numeral
0AB5   CB 77                  BIT   6,a   ; is it uppercase alpha?
0AB7   28 02                  JR   z,hexnum2   ; no a decimal
0AB9   D6 07                  SUB   7   ; sub 7  to make $a - $F
0ABB                HEXNUM2:      
0ABB   D6 30                  SUB   $30   ; form decimal digit
0ABD   DA 4D 0B               JP   c,num2   
0AC0   FE 10                  CP   $0F+1   
0AC2   D2 4D 0B               JP   nc,num2   
0AC5   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0AC6   29                     ADD   hl,hl   ; 4X
0AC7   29                     ADD   hl,hl   ; 8X
0AC8   29                     ADD   hl,hl   ; 16X
0AC9   85                     ADD   a,l   ; add into bottom of hl
0ACA   6F                     LD   l,a   
0ACB   18 E6                  JR   hexnum1   
0ACD                UPCASE:      
0ACD   0A                     LD   a,(bc)   ; a = identifier char
0ACE   D6 41                  SUB   "A"   ; "A" = 0
0AD0   18 05                  JR   ident1   
0AD2                LOWCASE:      
0AD2   0A                     LD   a,(bc)   
0AD3   D6 61                  SUB   "a"   
0AD5   C6 1A                  ADD   a,26   
0AD7                IDENT1:      
0AD7   87                     ADD   a,a   ; l = a * 2
0AD8   6F                     LD   l,a   
0AD9   26 23                  LD   h,msb(vars)   
0ADB   22 F4 23               LD   (vPointer),hl   ; store address in setter
0ADE   5E                     LD   e,(hl)   
0ADF   23                     INC   hl   
0AE0   56                     LD   d,(hl)   
0AE1   D5                     PUSH   de   
0AE2   DD E9                  JP   (ix)   
0AE4                             ; if
0AE4                             ; condition then -- value
0AE4                QUESTION:      
0AE4                IF:          
0AE4   03                     INC   bc   
0AE5   0A                     LD   a,(bc)   
0AE6   FE 3F                  CP   "?"   
0AE8   28 06                  JR   z,ifte   
0AEA   0B                     DEC   bc   
0AEB   11 00 00               LD   de,NUL   ; NUL pointer for else
0AEE   18 01                  JR   ifte1   
0AF0                             ; ifte
0AF0                             ; condition then else -- value
0AF0                IFTE:        
0AF0   D1                     POP   de   ; de = else
0AF1                IFTE1:       
0AF1   E1                     POP   hl   ; hl = then
0AF2   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0AF3   7C                     LD   a,h   
0AF4   B5                     OR   l   
0AF5   E1                     POP   hl   ; hl = then
0AF6   CA 12 0A               JP   z,go1   ; if z de = else
0AF9   EB                     EX   de,hl   ; condition = false, de = then
0AFA   C3 12 0A               JP   go1   
0AFD                KEY:         
0AFD   CD 81 00               CALL   getchar   
0B00   26 00                  LD   h,0   
0B02   6F                     LD   l,a   
0B03   E5                     PUSH   hl   
0B04   DD E9                  JP   (ix)   
0B06                             ; Z80 port output
0B06                             ; value port --
0B06                OUTPUT:      
0B06   E1                     POP   hl   
0B07   59                     LD   e,c   ; save IP
0B08   4D                     LD   c,l   
0B09   E1                     POP   hl   
0B0A   ED 69                  OUT   (c),l   
0B0C   4B                     LD   c,e   ; restore IP
0B0D   DD E9                  JP   (ix)   
0B0F                STAR:        
0B0F                MUL:         
0B0F   D1                     POP   de   ; get first value
0B10   E1                     POP   hl   
0B11                MUL2:        
0B11   C5                     PUSH   bc   ; Preserve the IP
0B12   44 4D                  LD   bc,hl   ; bc = 2nd value
0B14   21 00 00               LD   hl,0   
0B17   3E 10                  LD   a,16   
0B19                MUL3:        
0B19   29                     ADD   hl,hl   
0B1A   CB 13                  RL   e   
0B1C   CB 12                  RL   d   
0B1E   30 04                  JR   nc,$+6   
0B20   09                     ADD   hl,bc   
0B21   30 01                  JR   nc,$+3   
0B23   13                     INC   de   
0B24   3D                     DEC   a   
0B25   20 F2                  JR   nz,mul3   
0B27   C1                     POP   bc   ; Restore the IP
0B28   C3 11 02               JP   add3   
0B2B                NUM:         
0B2B   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B2E   0A                     LD   a,(bc)   ; Get numeral or -
0B2F   FE 2D                  CP   "-"   
0B31   20 01                  JR   nz,num0   
0B33   03                     INC   bc   ; move to next char, no flags affected
0B34                NUM0:        
0B34   08                     EX   af,af'   ; save zero flag = 0 for later
0B35                NUM1:        
0B35   0A                     LD   a,(bc)   ; read digit
0B36   D6 30                  SUB   "0"   ; less than 0?
0B38   38 13                  JR   c,num2   ; not a digit, exit loop
0B3A   FE 0A                  CP   10   ; greater that 9?
0B3C   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B3E   03                     INC   bc   ; inc IP
0B3F   54 5D                  LD   de,hl   ; multiply hl * 10
0B41   29                     ADD   hl,hl   
0B42   29                     ADD   hl,hl   
0B43   19                     ADD   hl,de   
0B44   29                     ADD   hl,hl   
0B45   85                     ADD   a,l   ; add digit in a to hl
0B46   6F                     LD   l,a   
0B47   3E 00                  LD   a,0   
0B49   8C                     ADC   a,h   
0B4A   67                     LD   h,a   
0B4B   18 E8                  JR   num1   
0B4D                NUM2:        
0B4D   0B                     DEC   bc   
0B4E   08                     EX   af,af'   ; restore zero flag
0B4F   20 07                  JR   nz,num3   
0B51   EB                     EX   de,hl   ; negate the value of hl
0B52   21 00 00               LD   hl,0   
0B55   B7                     OR   a   ; jump to sub2
0B56   ED 52                  SBC   hl,de   
0B58                NUM3:        
0B58   E5                     PUSH   hl   ; Put the number on the stack
0B59   DD E9                  JP   (ix)   ; and process the next character
0B5B                RPAREN:      
0B5B   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0B5E   FD 46 09               LD   b,(iy+9)   
0B61   DD E9                  JP   (ix)   
0B63                             ; shiftLeft
0B63                             ; value count -- value2          shift left count places
0B63                SHIFTLEFT:      
0B63   50 59                  LD   de,bc   ; save IP
0B65   C1                     POP   bc   ; bc = count
0B66   41                     LD   b,c   ; b = loop counter
0B67   E1                     POP   hl   
0B68   04                     INC   b   ; test for counter=0 case
0B69   18 01                  JR   shiftLeft2   
0B6B                SHIFTLEFT1:      
0B6B   29                     ADD   hl,hl   ; left shift hl
0B6C                SHIFTLEFT2:      
0B6C   10 FD                  DJNZ   shiftLeft1   
0B6E   E5                     PUSH   hl   
0B6F   42 4B                  LD   bc,de   ; restore IP
0B71   DD E9                  JP   (ix)   
0B73                             ; shiftRight
0B73                             ; value count -- value2          shift left count places
0B73                SHIFTRIGHT:      
0B73   50 59                  LD   de,bc   ; save IP
0B75   C1                     POP   bc   ; bc = count
0B76   41                     LD   b,c   ; b = loop counter
0B77   E1                     POP   hl   
0B78   04                     INC   b   ; test for counter=0 case
0B79   18 04                  JR   shiftRight2   
0B7B                SHIFTRIGHT1:      
0B7B   CB 3C                  SRL   h   ; right shift hl
0B7D   CB 1D                  RR   l   
0B7F                SHIFTRIGHT2:      
0B7F   10 FA                  DJNZ   shiftRight1   
0B81   E5                     PUSH   hl   
0B82   42 4B                  LD   bc,de   ; restore IP
0B84   DD E9                  JP   (ix)   
0B86                             ; string
0B86                             ; -- ptr                        ; points to start of string chars,
0B86                             ; length is stored at start - 2 bytes
0B86                DQUOTE:      
0B86                STRING:      
0B86   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0B89   23                     INC   hl   ; skip length field to start
0B8A   23                     INC   hl   
0B8B   E5                     PUSH   hl   ; save start of string
0B8C   03                     INC   bc   ; point to next char
0B8D   18 03                  JR   string2   
0B8F                STRING1:      
0B8F   77                     LD   (hl),a   
0B90   23                     INC   hl   ; increase count
0B91   03                     INC   bc   ; point to next char
0B92                STRING2:      
0B92   0A                     LD   a,(bc)   
0B93   FE 22                  CP   DQ   ; " is the string terminator
0B95   28 04                  JR   z,string3   
0B97   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0B99   20 F4                  JR   nz,string1   
0B9B                STRING3:      
0B9B   AF                     XOR   a   ; write NUL to terminate string
0B9C   77                     LD   (hl),a   ; hl = end of string
0B9D   23                     INC   hl   
0B9E   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0BA1   2B                     DEC   hl   ; hl = end of string without terminator
0BA2   D1                     POP   de   ; de = start of string
0BA3   D5                     PUSH   de   ; return start of string
0BA4   B7                     OR   a   ; hl = length bytes, de = start of string
0BA5   ED 52                  SBC   hl,de   
0BA7   EB                     EX   de,hl   
0BA8   2B                     DEC   hl   ; write length bytes to length field at start - 2
0BA9   72                     LD   (hl),d   
0BAA   2B                     DEC   hl   
0BAB   73                     LD   (hl),e   
0BAC   DD E9                  JP   (ix)   
0BAE                PRINTCHARS1:      
0BAE   1A                     LD   a,(de)   ; print char at char*
0BAF   CD 85 00               CALL   putchar   
0BB2   13                     INC   de   ; char*++
0BB3   2B                     DEC   hl   ; count--
0BB4                PRINTCHARS2:      
0BB4   7D                     LD   a,l   ; count == 0?
0BB5   B4                     OR   h   
0BB6   C8                     RET   z   
0BB7   18 F5                  JR   printChars1   ; if not loop
0BB9                             ; 
0BB9                FILTER:      
0BB9                SCAN:        
0BB9   DD E9                  JP   (ix)   
0BBB                             ;*******************************************************************
0BBB                             ; general routines
0BBB                             ;*******************************************************************
0BBB                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0BBB                FLUSHBUFFER:      
0BBB   F5                     PUSH   af   
0BBC   D5                     PUSH   de   
0BBD   E5                     PUSH   hl   
0BBE   2A EC 23               LD   hl,(vBufPtr)   
0BC1   11 00 22               LD   de,BUF   
0BC4   ED 53 EC 23            LD   (vBufPtr),de   
0BC8   B7                     OR   a   
0BC9   ED 52                  SBC   hl,de   
0BCB   CD B4 0B               CALL   printChars2   
0BCE   E1                     POP   hl   
0BCF   D1                     POP   de   
0BD0   F1                     POP   af   
0BD1   C9                     RET      
0BD2                COMMANDTABLE:      
0BD2   03                     INC   bc   
0BD3   0A                     LD   a,(bc)   
0BD4   FE 7B                  CP   "z"+1   
0BD6   30 09                  JR   nc,commandTable2   
0BD8   D6 61                  SUB   "a"   
0BDA   38 05                  JR   c,commandTable2   
0BDC                COMMANDTABLE1:      
0BDC   E1                     POP   hl   
0BDD   85                     ADD   a,l   
0BDE   6F                     LD   l,a   
0BDF   6E                     LD   l,(hl)   ; must have the same msb as the table
0BE0   E9                     JP   (hl)   
0BE1                COMMANDTABLE2:      
0BE1   3E 1A                  LD   a,26   
0BE3   0B                     DEC   bc   
0BE4   18 F6                  JR   commandTable1   
0BE6                             ; followed by a table
0BE6                             ; db char
0BE6                             ; db lsb(addr)
0BE6                             ; the final item must have char == NUL
0BE6                JUMPTABLE:      
0BE6   E1                     POP   hl   
0BE7   03                     INC   bc   
0BE8                JUMPTABLE0:      
0BE8   AF                     XOR   a   
0BE9   BE                     CP   (hl)   
0BEA   28 0B                  JR   z,jumpTable2   
0BEC   0A                     LD   a,(bc)   
0BED   BE                     CP   (hl)   
0BEE   28 04                  JR   z,jumpTable1   
0BF0   23                     INC   hl   
0BF1   23                     INC   hl   
0BF2   18 F4                  JR   jumpTable0   
0BF4                JUMPTABLE1:      
0BF4   23                     INC   hl   
0BF5   6E                     LD   l,(hl)   ; must have the same msb as the table
0BF6   E9                     JP   (hl)   
0BF7                JUMPTABLE2:      
0BF7   0B                     DEC   bc   
0BF8   23                     INC   hl   
0BF9   E9                     JP   (hl)   
0BFA                PRTSTR0:      
0BFA   CD 85 00               CALL   putchar   
0BFD   23                     INC   hl   
0BFE                PRTSTR:      
0BFE   7E                     LD   a,(hl)   
0BFF   B7                     OR   a   
0C00   20 F8                  JR   nz,prtstr0   
0C02   C9                     RET      
0C03                             ; **************************************************************************
0C03                             ; calculate nesting value
0C03                             ; a is char to be tested,
0C03                             ; e is the nesting value (initially 0)
0C03                             ; e is increased by ( and [
0C03                             ; e is decreased by ) and ]
0C03                             ; e has its bit 7 toggled by `
0C03                             ; limited to 127 levels
0C03                             ; **************************************************************************
0C03                NESTING:      
0C03   FE 22                  CP   DQ   ; quote char
0C05   28 06                  JR   z,nesting0   
0C07   FE 60                  CP   "`"   ; quote char
0C09   28 02                  JR   z,nesting0   
0C0B   18 0A                  JR   nesting1   
0C0D                NESTING0:      
0C0D   CB 7B                  BIT   7,e   
0C0F   28 03                  JR   z,nesting1a   
0C11   CB BB                  RES   7,e   
0C13   C9                     RET      
0C14                NESTING1A:      
0C14   CB FB                  SET   7,e   
0C16   C9                     RET      
0C17                NESTING1:      
0C17   CB 7B                  BIT   7,e   
0C19   C0                     RET   nz   
0C1A   FE 7B                  CP   "{"   
0C1C   28 08                  JR   z,nesting2   
0C1E   FE 5B                  CP   "["   
0C20   28 04                  JR   z,nesting2   
0C22   FE 28                  CP   "("   
0C24   20 02                  JR   nz,nesting3   
0C26                NESTING2:      
0C26   1C                     INC   e   
0C27   C9                     RET      
0C28                NESTING3:      
0C28   FE 7D                  CP   "}"   
0C2A   28 07                  JR   z,nesting4   
0C2C   FE 5D                  CP   "]"   
0C2E   28 03                  JR   z,nesting4   
0C30   FE 29                  CP   ")"   
0C32   C0                     RET   nz   
0C33                NESTING4:      
0C33   1D                     DEC   e   
0C34   C9                     RET      
0C35                PROMPT:      
0C35   CD 45 0C               CALL   printStr   
0C38   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0C3D   C9                     RET      
0C3E                CRLF:        
0C3E   CD 45 0C               CALL   printStr   
0C41   0D 0A 00               .CSTR   "\r\n"   
0C44   C9                     RET      
0C45                             ; prints a null teminated string
0C45                             ; the string should be immediately following the call
0C45                PRINTSTR:      
0C45   E3                     EX   (sp),hl   ; swap			
0C46   CD FE 0B               CALL   prtstr   
0C49   23                     INC   hl   ; inc past NUL
0C4A   E3                     EX   (sp),hl   ; put it back	
0C4B   C9                     RET      
0C4C                INIT:        
0C4C   21 EE 01               LD   hl,titleStr   
0C4F   11 08 24               LD   de,titleBuf   
0C52   06 14                  LD   b,20   
0C54                INIT1:       
0C54   1A                     LD   a,(de)   
0C55   BE                     CP   (hl)   
0C56   20 17                  JR   nz,coldBoot0   
0C58   13                     INC   de   
0C59   23                     INC   hl   
0C5A   10 F8                  DJNZ   init1   
0C5C                WARMINIT:      
0C5C   ED 4B F8 23            LD   bc,(vSavedIP)   ; restore IP
0C60   ED 7B FA 23            LD   sp,(vSavedSP)   ; restore SP
0C64   DD 2A FC 23            LD   ix,(vSavedNext)   ; restore Next
0C68   FD 2A FE 23            LD   iy,(vSavedBP)   ; restore BP
0C6C   C3 A6 0C               JP   start1   
0C6F                COLDBOOT0:      
0C6F   21 EE 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0C72   11 08 24               LD   de,titleBuf   
0C75   06 14                  LD   b,20   
0C77   ED B0                  LDIR      
0C79                COLDINIT:      
0C79   21 DE 01               LD   hl,isysVars   
0C7C   11 E6 23               LD   de,sysVars   
0C7F   01 10 00               LD   bc,8 * 2   
0C82   ED B0                  LDIR      
0C84   21 00 23               LD   hl,vars   ; 52 vars LO HI
0C87   06 34                  LD   b,26*2   
0C89   AF                     XOR   a   
0C8A                COLDBOOT1:      
0C8A   77                     LD   (hl),a   
0C8B   23                     INC   hl   
0C8C   10 FC                  DJNZ   coldBoot1   
0C8E   DD 2A EE 23            LD   ix,(vNext)   
0C92   FD 21 00 21            LD   iy,STACK   
0C96   C9                     RET      
0C97                COLDSTART:      
0C97   31 00 21               LD   sp,STACK   
0C9A   CD 6F 0C               CALL   coldBoot0   
0C9D   C3 A6 0C               JP   start1   
0CA0                START:       
0CA0   31 00 21               LD   sp,STACK   ; start Monty
0CA3   CD 4C 0C               CALL   init   ; setups
0CA6                START1:      
0CA6   21 08 24               LD   hl,titleBuf   
0CA9   CD FE 0B               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0CAC                INTERPRET:      
0CAC   CD BB 0B               CALL   flushBuffer   
0CAF   CD 35 0C               CALL   prompt   
0CB2   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0CB5   21 00 21               LD   hl,TIB   
0CB8   22 EA 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0CBB                INTERPRET2:      ; calculate nesting
0CBB   1E 00                  LD   e,0   ; initilize nesting value
0CBD   C5                     PUSH   bc   ; save offset into TIB,
0CBE                             ; bc is also the count of chars in TIB
0CBE   21 00 21               LD   hl,TIB   ; hl is start of TIB
0CC1   18 0B                  JR   interpret4   
0CC3                INTERPRET3:      
0CC3   3E 33                  LD   a,"3"   
0CC5   CD 85 00               CALL   putchar   
0CC8   7E                     LD   a,(hl)   ; a = char in TIB
0CC9   23                     INC   hl   ; inc pointer into TIB
0CCA   0B                     DEC   bc   ; dec count of chars in TIB
0CCB   CD 03 0C               CALL   nesting   ; update nesting value
0CCE                INTERPRET4:      
0CCE   79                     LD   a,c   ; is count zero?
0CCF   B0                     OR   b   
0CD0   20 F1                  JR   nz,interpret3   ; if not loop
0CD2   C1                     POP   bc   ; restore offset into TIB
0CD3                INTERPRET5:      
0CD3   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0CD6   FE 20                  CP   $20   ; compare to space
0CD8   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0CDA   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0CDC                             ; ???? NEEDED?
0CDC   28 36                  JR   z,interpret8   
0CDE   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0CE0   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0CE2   FE 05                  CP   CTRL_E   
0CE4   CA 75 0D               JP   z,edit_   
0CE7   FE 08                  CP   CTRL_H   
0CE9   CA 65 0D               JP   z,backSpace_   
0CEC   FE 0A                  CP   CTRL_J   
0CEE   CA 8D 0D               JP   z,reEdit_   
0CF1                             ; cp CTRL_S
0CF1                             ; jp z,printStack_
0CF1                             ; DB     lsb(edit_)       ; ENQ ^E  5
0CF1                             ; DB     lsb(reedit_)     ; LF  ^J 10
0CF1                             ; DB     lsb(list_)       ; FF  ^L 12
0CF1                             ; DB     lsb(printStack_) ; DLE ^P 16
0CF1                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0CF1                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0CF1                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0CF1                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0CF1                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0CF1                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0CF1                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0CF1                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0CF1                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0CF1                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0CF1                INTERPRET5A:      
0CF1                             ; ld (vTIBPtr),bc
0CF1                             ; ld bc,(vTIBPtr)
0CF1   18 C8                  JR   interpret2   
0CF3                INTERPRET6:      
0CF3   21 00 21               LD   hl,TIB   
0CF6   09                     ADD   hl,bc   
0CF7   77                     LD   (hl),a   ; store the character in textbuf
0CF8   03                     INC   bc   
0CF9   CD 85 00               CALL   putchar   ; echo character to screen
0CFC   CD 03 0C               CALL   nesting   
0CFF   18 D2                  JR   interpret5   ; wait for next character
0D01                INTERPRET7:      
0D01   21 00 21               LD   hl,TIB   
0D04   09                     ADD   hl,bc   
0D05   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0D07   23                     INC   hl   
0D08   36 0A                  LD   (hl),"\n"   
0D0A   23                     INC   hl   
0D0B   03                     INC   bc   
0D0C   03                     INC   bc   
0D0D   CD 3E 0C               CALL   crlf   ; echo character to screen
0D10   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0D11   B7                     OR   a   
0D12   20 BF                  JR   nz,interpret5   
0D14                INTERPRET8:      
0D14   21 00 21               LD   hl,TIB   
0D17   09                     ADD   hl,bc   
0D18   22 EA 23               LD   (vTIBPtr),hl   
0D1B   01 00 21               LD   bc,TIB   
0D1E   ED 43 F8 23            LD   (vSavedIP),bc   ; save IP
0D22   ED 73 FA 23            LD   (vSavedSP),sp   ; save SP
0D26   DD 22 FC 23            LD   (vSavedNext),ix   ; save Next
0D2A   FD 22 FE 23            LD   (vSavedBP),iy   ; save BP
0D2E   0B                     DEC   bc   
0D2F                NEXT:        
0D2F   03                     INC   bc   ; Increment the IP
0D30   0A                     LD   a,(bc)   ; Get the next character and dispatch
0D31   FE 20                  CP   " "   ; whitespace?
0D33   28 FA                  JR   z,next   ; space? ignore
0D35   38 08                  JR   c,next1   
0D37   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0D39   6F                     LD   l,a   ; index into table
0D3A   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0D3C   6E                     LD   l,(hl)   ; get low jump address
0D3D   24                     INC   h   ; Load h with page after opcodes
0D3E   E9                     JP   (hl)   ; Jump to routine
0D3F                NEXT1:       
0D3F   FE 00                  CP   NUL   ; end of input string?
0D41   28 03                  JR   z,exit   
0D43   C3 AC 0C               JP   interpret   ; no, other whitespace, macros?
0D46                EXIT:        
0D46   03                     INC   bc   
0D47   60 69                  LD   hl,bc   
0D49   E9                     JP   (hl)   
0D4A                RUN:         
0D4A   C1                     POP   bc   
0D4B   0B                     DEC   bc   
0D4C   DD E9                  JP   (ix)   
0D4E                ERROR1:      
0D4E   21 01 00               LD   hl,1   ; error 1: unknown command
0D51   E5                     PUSH   hl   
0D52                ERROR:       
0D52   CD 4A 0D               CALL   run   
0D55   60 45 72 72 6F 72 20 60 2E 73 20 2E 00 DB   "`Error `.s .",0   
0D62   C3 AC 0C               JP   interpret   
0D65                BACKSPACE_:      
0D65   79                     LD   a,c   
0D66   B0                     OR   b   
0D67   CA BB 0C               JP   z,interpret2   
0D6A   0B                     DEC   bc   
0D6B   CD 45 0C               CALL   printStr   
0D6E   08 20 08 00            .CSTR   "\b \b"   
0D72   C3 BB 0C               JP   interpret2   
0D75                             ; edit
0D75                EDIT_:       
0D75   CD 4A 0D               CALL   run   
0D78   60 76 61 72 3F 60 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?`.s /k/ad .h",0   
0D8A   C3 AC 0C               JP   interpret   
0D8D                REEDIT_:      
0D8D   C3 AC 0C               JP   interpret   
0D90                PRINTSTACK_:      
0D90   CD 4A 0D               CALL   run   
0D93   2F 70 6B 00            .CSTR   "/pk"   
0D97   C3 AC 0C               JP   interpret   
0D9A                             ; editDef:
0D9A                             ;     pop hl                      ; pop ret address
0D9A                             ;     ex (sp),hl                  ; swap with TOS
0D9A                             ;     push hl                     ; dup TOS
0D9A                             ;     ld a,l                      ; a = ident
0D9A                             ;     ld de,TIB                   ; de = start of TIB
0D9A                             ;     ld (vTIBPtr),de             ; update TIB*
0D9A                             ;     push ix                     ; save NEXT
0D9A                             ;     ld ix,editDef0              ; NEXT = editDef0
0D9A                             ;     jp lookupRef                ; convert letter into address
0D9A                             ; editDef0:
0D9A                             ;     ld e,(hl)                   ; de = (hl++)
0D9A                             ;     inc hl
0D9A                             ;     ld d,(hl)
0D9A                             ;     ld a,d                      ; de == 0 ?
0D9A                             ;     or e
0D9A                             ;     jr z,editDef4
0D9A                             ;     ld ix,editDef3              ; NEXT = editDef3
0D9A                             ;     ex de,hl
0D9A                             ;     ld a,(hl)
0D9A                             ;     cp "{"
0D9A                             ;     jr nz,editDef1
0D9A                             ;     jp editBlock0               ; convert letter into address
0D9A                             ; editDef1:
0D9A                             ;     cp "("
0D9A                             ;     jr nz,editDef2
0D9A                             ;     jp editBlock0               ; convert letter into address
0D9A                             ; editDef2:
0D9A                             ;     jp editFunc
0D9A                             ; editDef3:
0D9A                             ;     ld a," "                    ; write assign
0D9A                             ;     call writeChar
0D9A                             ;     pop hl                      ; a = ident
0D9A                             ;     ld a,l
0D9A                             ;     call writeChar
0D9A                             ;     ld a,"="                    ; write assign
0D9A                             ;     call writeChar
0D9A                             ;     ld ix,editDef4              ; NEXT = editDef4
0D9A                             ;     jp printTIB
0D9A                             ; editDef4:
0D9A                             ;     pop ix                      ; restore NEXT
0D9A                             ;     jp (ix)
0D9A                             ; writeChar:
0D9A                             ;     ld de,(vTIBPtr)             ; de = TIB*
0D9A                             ;     ld (de),a                   ; write ident
0D9A                             ;     inc de
0D9A                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0D9A                             ;     ret
0D9A                             ; ; printTIB
0D9A                             ; printTIB:
0D9A                             ;     ld hl,(vTIBPtr)
0D9A                             ;     ld de,TIB
0D9A                             ;     or a
0D9A                             ;     sbc hl,de
0D9A                             ;     jp printTIB2
0D9A                             ; printTIB1:
0D9A                             ;     ld a,(de)
0D9A                             ;     call putchar
0D9A                             ; printTIB2:
0D9A                             ;     ld a,l
0D9A                             ;     or h
0D9A                             ;     jr nz,printTIB1
0D9A                             ;     jp (ix)
0D9A                             ; editBlock:
0D9A                             ;     pop hl                      ; hl = block*
0D9A                             ; editBlock0:
0D9A                             ;     push ix                     ; save next
0D9A                             ;     push hl                     ; push block*
0D9A                             ;     push hl                     ; push block*
0D9A                             ;     ld ix,(editBlock2)
0D9A                             ;     jp blockLength
0D9A                             ; editBlock1:
0D9A                             ;     pop hl                      ; bc = length, (sp) = IP
0D9A                             ;     pop de                      ; de = block*
0D9A                             ;     ld a,l
0D9A                             ;     or h
0D9A                             ;     jr z,editBlock2
0D9A                             ;     push bc
0D9A                             ;     ld bc,hl
0D9A                             ;     ex de,hl                    ; hl = block*
0D9A                             ;     ld de,(vTIBPtr)              ; de = TIB*
0D9A                             ;     ldir                        ; copy block to TIB
0D9A                             ;     ld (vTIBPtr),de              ; save TIB*
0D9A                             ;     pop bc
0D9A                             ; editBlock2:
0D9A                             ;     pop ix                      ; restore next
0D9A                             ;     jp (ix)
0D9A                             ; editFunc:
0D9A                             ;     jp (ix)
0D9A                             ; editArray:
0D9A                             ;     jp (ix)
0D9A                             ; editArglist:
0D9A                             ;     jp (ix)
0D9A                             ; ; blockLength
0D9A                             ; ; addr1 -- length
0D9A                             ; blockLength:
0D9A                             ;     pop hl                      ; block*
0D9A                             ;     push hl                     ; save block*
0D9A                             ;     inc hl                      ; skip first char
0D9A                             ;     ld d,1                      ; increase nesting
0D9A                             ; blockLength1:                   ; Skip to end of definition
0D9A                             ;     ld a,(hl)                   ; Get the next character
0D9A                             ;     inc hl                      ; Point to next character
0D9A                             ;     cp " " + 1                  ; ignore whitespace
0D9A                             ;     jr c,blockLength1
0D9A                             ;     cp ")"
0D9A                             ;     jr z,blockLength4
0D9A                             ;     cp "}"
0D9A                             ;     jr z,blockLength4
0D9A                             ;     cp "]"
0D9A                             ;     jr z,blockLength4
0D9A                             ;     cp "("
0D9A                             ;     jr z,blockLength2
0D9A                             ;     cp "{"
0D9A                             ;     jr z,blockLength2
0D9A                             ;     cp "["
0D9A                             ;     jr z,blockLength2
0D9A                             ;     cp "'"
0D9A                             ;     jr z,blockLength3
0D9A                             ;     cp "`"
0D9A                             ;     jr z,blockLength3
0D9A                             ;     cp DQ
0D9A                             ;     jr z,blockLength3
0D9A                             ;     jr blockLength1
0D9A                             ; blockLength2:
0D9A                             ;     inc d
0D9A                             ;     jr blockLength1
0D9A                             ; blockLength4:
0D9A                             ;     dec d
0D9A                             ;     jr nz, blockLength1         ; get the next element
0D9A                             ; blockLength3:
0D9A                             ;     ld a,$80
0D9A                             ;     xor d
0D9A                             ;     ld d,a
0D9A                             ;     jr nz, blockLength1
0D9A                             ;     pop hl                      ; hl = block*
0D9A                             ;     or a
0D9A                             ;     sbc hl,de
0D9A                             ;     push hl
0D9A                             ;     jp (ix)
0D9A                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0D9A                             ; \a start of stack \#3 depth \b base \$ prompt
0D9A                             ; DW dStack               ; a vS0 start of datastack			
0D9A                             ; DW FALSE                ; b vBase16
0D9A                             ; DW 0                    ; c vTIBPtr an offset to the tib
0D9A                             ; DW 0                    ; d
0D9A                             ; DW 65                   ; e vLastDef "A" last command u defined
0D9A                             ; DW 0                    ; f
0D9A                             ; DW page6                ; g 256 bytes limits
0D9A                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0D9A                F1:          
0D9A                F2:          
0D9A                F3:          
0D9A                F4:          
0D9A                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VDATAWIDTH:   DS   2   ; 
23E8                VNUMBASE:   DS   2   ; 
23EA                VTIBPTR:   DS   2   ; 
23EC                VBUFPTR:   DS   2   ; 
23EE                VNEXT:    DS   2   ; 
23F0                VHEAPPTR:   DS   2   ; 
23F2                VRECUR:   DS   2   ; 
23F4                             ; uninitialised sys variables (preserved)
23F4                VPOINTER:   DS   2   ; 
23F6                VREMAIN:   DS   2   ; 
23F8                VSAVEDIP:   DS   2   ; 
23FA                VSAVEDSP:   DS   2   ; 
23FC                VSAVEDNEXT:   DS   2   ; 
23FE                VSAVEDBP:   DS   2   ; 
2400                             ; uninitialised sys variables (unpreserved)
2400                VTEMP1:   DS   2   ; 
2402                VTEMP2:   DS   2   ; 
2404                VLASTDEF:   DS   2   ; 
2406                TBPTR:    DS   2   ; reserved for tests
2408                TITLEBUF:   DS   20   
241C                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 42 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 15
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0BB9 DEFINED AT LINE 1937 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 162 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1764 IN MAIN.asm
                    > USED AT LINE 2168 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 2005 IN MAIN.asm
                    > USED AT LINE 2152 IN MAIN.asm
                    > USED AT LINE 2214 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 327 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 332 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
                    > USED AT LINE 429 IN MAIN.asm
                    > USED AT LINE 438 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
                    > USED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 465 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
                    > USED AT LINE 654 IN MAIN.asm
                    > USED AT LINE 691 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 735 IN MAIN.asm
                    > USED AT LINE 782 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1747 IN MAIN.asm
                    > USED AT LINE 2171 IN MAIN.asm
                    > USED AT LINE 2259 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1156 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 2024 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2177 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2179 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2181 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 46 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 147 IN MAIN.asm
                    > USED AT LINE 2105 IN MAIN.asm
TITLESTR:           01EE DEFINED AT LINE 161 IN MAIN.asm
                    > USED AT LINE 2080 IN MAIN.asm
                    > USED AT LINE 2099 IN MAIN.asm
PLUS_:              0202 DEFINED AT LINE 166 IN MAIN.asm
ADD:                0202 DEFINED AT LINE 167 IN MAIN.asm
ADD1:               020D DEFINED AT LINE 175 IN MAIN.asm
                    > USED AT LINE 171 IN MAIN.asm
ADD3:               0211 DEFINED AT LINE 180 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
                    > USED AT LINE 1434 IN MAIN.asm
                    > USED AT LINE 1801 IN MAIN.asm
ADD4:               021C DEFINED AT LINE 188 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
AMPER_:             021F DEFINED AT LINE 191 IN MAIN.asm
AND:                021F DEFINED AT LINE 192 IN MAIN.asm
AND1:               0226 DEFINED AT LINE 200 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
PIPE_:              022A DEFINED AT LINE 205 IN MAIN.asm
OR:                 022A DEFINED AT LINE 206 IN MAIN.asm
AT_:                0233 DEFINED AT LINE 219 IN MAIN.asm
ADDR:               0233 DEFINED AT LINE 220 IN MAIN.asm
BANG_:              023D DEFINED AT LINE 225 IN MAIN.asm
NOT:                0248 DEFINED AT LINE 233 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
MINUS_:             024E DEFINED AT LINE 238 IN MAIN.asm
SUB:                025A DEFINED AT LINE 246 IN MAIN.asm
                    > USED AT LINE 243 IN MAIN.asm
SUB1:               0264 DEFINED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 249 IN MAIN.asm
EQ_:                026D DEFINED AT LINE 261 IN MAIN.asm
EQ0_:               0276 DEFINED AT LINE 268 IN MAIN.asm
EQ1:                0277 DEFINED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
GT_:                027B DEFINED AT LINE 274 IN MAIN.asm
LT_:                0286 DEFINED AT LINE 282 IN MAIN.asm
LT1:                028F DEFINED AT LINE 289 IN MAIN.asm
                    > USED AT LINE 281 IN MAIN.asm
EQUALS:             0298 DEFINED AT LINE 297 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
NOTEQUALS:          02A0 DEFINED AT LINE 303 IN MAIN.asm
                    > USED AT LINE 232 IN MAIN.asm
LESSTHANEQ:         02A9 DEFINED AT LINE 311 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
LESSTHAN:           02AE DEFINED AT LINE 318 IN MAIN.asm
                    > USED AT LINE 293 IN MAIN.asm
LESSTHAN1:          02B3 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 314 IN MAIN.asm
TRUE1:              02B6 DEFINED AT LINE 326 IN MAIN.asm
                    > USED AT LINE 300 IN MAIN.asm
                    > USED AT LINE 306 IN MAIN.asm
                    > USED AT LINE 501 IN MAIN.asm
NULL1:              02BC DEFINED AT LINE 330 IN MAIN.asm
FALSE1:             02BC DEFINED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 301 IN MAIN.asm
                    > USED AT LINE 307 IN MAIN.asm
                    > USED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 324 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
NOP_:               02C0 DEFINED AT LINE 334 IN MAIN.asm
RPAREN_:            02C2 DEFINED AT LINE 336 IN MAIN.asm
DOLLAR_:            02C5 DEFINED AT LINE 338 IN MAIN.asm
LBRACK_:            02C8 DEFINED AT LINE 340 IN MAIN.asm
RBRACK_:            02CB DEFINED AT LINE 342 IN MAIN.asm
PERCENT_:           02CE DEFINED AT LINE 344 IN MAIN.asm
LPAREN_:            02D1 DEFINED AT LINE 346 IN MAIN.asm
LBRACE_:            02D1 DEFINED AT LINE 347 IN MAIN.asm
RBRACE_:            02D4 DEFINED AT LINE 349 IN MAIN.asm
TICK_:              02D7 DEFINED AT LINE 351 IN MAIN.asm
SEMICOLON_:         02DA DEFINED AT LINE 353 IN MAIN.asm
DOT_:               02DD DEFINED AT LINE 355 IN MAIN.asm
COLON_:             02E0 DEFINED AT LINE 357 IN MAIN.asm
UPCASE_:            02E3 DEFINED AT LINE 359 IN MAIN.asm
LOWCASE_:           02E6 DEFINED AT LINE 361 IN MAIN.asm
QUESTION_:          02E9 DEFINED AT LINE 363 IN MAIN.asm
STAR_:              02EC DEFINED AT LINE 365 IN MAIN.asm
NUM_:               02EF DEFINED AT LINE 367 IN MAIN.asm
                    > USED AT LINE 245 IN MAIN.asm
HASH_:              02F2 DEFINED AT LINE 369 IN MAIN.asm
CARET_:             02F5 DEFINED AT LINE 371 IN MAIN.asm
COMMA_:             02F8 DEFINED AT LINE 373 IN MAIN.asm
DQUOTE_:            02FB DEFINED AT LINE 375 IN MAIN.asm
SLASH_:             02FE DEFINED AT LINE 377 IN MAIN.asm
SLASH:              0300 DEFINED AT LINE 385 IN MAIN.asm
                    > USED AT LINE 378 IN MAIN.asm
COMMAND:            0300 DEFINED AT LINE 386 IN MAIN.asm
COMMAND_A_:         0326 DEFINED AT LINE 421 IN MAIN.asm
COMMAND_B_:         0333 DEFINED AT LINE 432 IN MAIN.asm
COMMAND_F_:         033E DEFINED AT LINE 441 IN MAIN.asm
COMMAND_I_:         0341 DEFINED AT LINE 444 IN MAIN.asm
COMMAND_M_:         034A DEFINED AT LINE 451 IN MAIN.asm
COMMAND_P_:         034D DEFINED AT LINE 454 IN MAIN.asm
COMMAND_Q_:         0356 DEFINED AT LINE 461 IN MAIN.asm
COMMAND_R_:         035F DEFINED AT LINE 468 IN MAIN.asm
COMMAND_V_:         0362 DEFINED AT LINE 471 IN MAIN.asm
COMMAND_NOP_:       0365 DEFINED AT LINE 474 IN MAIN.asm
DECIMAL_:           0367 DEFINED AT LINE 477 IN MAIN.asm
DECIMAL1:           036A DEFINED AT LINE 479 IN MAIN.asm
                    > USED AT LINE 492 IN MAIN.asm
DIV_:               036F DEFINED AT LINE 483 IN MAIN.asm
ERROR1_:            0373 DEFINED AT LINE 487 IN MAIN.asm
                    > USED AT LINE 430 IN MAIN.asm
                    > USED AT LINE 449 IN MAIN.asm
                    > USED AT LINE 459 IN MAIN.asm
                    > USED AT LINE 466 IN MAIN.asm
                    > USED AT LINE 692 IN MAIN.asm
                    > USED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
HEXADECIMAL_:       0376 DEFINED AT LINE 490 IN MAIN.asm
KEY_:               037C DEFINED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 495 IN MAIN.asm
OUTPUT_:            037F DEFINED AT LINE 497 IN MAIN.asm
TRUE_:              0382 DEFINED AT LINE 500 IN MAIN.asm
WORDS_:             0385 DEFINED AT LINE 503 IN MAIN.asm
XOR_:               0388 DEFINED AT LINE 506 IN MAIN.asm
XOR1:               0389 DEFINED AT LINE 508 IN MAIN.asm
ABSOLUTE_:          0393 DEFINED AT LINE 521 IN MAIN.asm
ADDROF_:            03A0 DEFINED AT LINE 536 IN MAIN.asm
ADDROF1:            03B4 DEFINED AT LINE 548 IN MAIN.asm
                    > USED AT LINE 544 IN MAIN.asm
ADDROF2:            03BF DEFINED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 547 IN MAIN.asm
ARRAYSIZE_:         03C1 DEFINED AT LINE 562 IN MAIN.asm
BREAK_:             03C9 DEFINED AT LINE 572 IN MAIN.asm
COLDSTART_:         03CC DEFINED AT LINE 576 IN MAIN.asm
BYTES_:             03CF DEFINED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 439 IN MAIN.asm
BYTES1:             03D2 DEFINED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 620 IN MAIN.asm
INPUT_:             03D7 DEFINED AT LINE 588 IN MAIN.asm
PRINTCHARS_:        03E2 DEFINED AT LINE 601 IN MAIN.asm
QUIT_:              03E9 DEFINED AT LINE 608 IN MAIN.asm
QUIT1:              03F0 DEFINED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
WORDS:              03F3 DEFINED AT LINE 618 IN MAIN.asm
                    > USED AT LINE 504 IN MAIN.asm
COMMENT:            03F9 DEFINED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 390 IN MAIN.asm
                    > USED AT LINE 627 IN MAIN.asm
COMMAND_F:          0402 DEFINED AT LINE 636 IN MAIN.asm
                    > USED AT LINE 442 IN MAIN.asm
FOREACH_:           0419 DEFINED AT LINE 657 IN MAIN.asm
FLUSH_:             041C DEFINED AT LINE 662 IN MAIN.asm
FUNCSRC_:           0421 DEFINED AT LINE 666 IN MAIN.asm
F1_:                0424 DEFINED AT LINE 669 IN MAIN.asm
F2_:                0427 DEFINED AT LINE 672 IN MAIN.asm
F3_:                042A DEFINED AT LINE 675 IN MAIN.asm
F4_:                042D DEFINED AT LINE 678 IN MAIN.asm
FZ_:                0430 DEFINED AT LINE 681 IN MAIN.asm
FALSE_:             0433 DEFINED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 655 IN MAIN.asm
COMMAND_M:          0436 DEFINED AT LINE 687 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
MAP_:               043F DEFINED AT LINE 694 IN MAIN.asm
COMMAND_R:          0442 DEFINED AT LINE 697 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
RECUR_:             044F DEFINED AT LINE 708 IN MAIN.asm
REMAIN_:            0455 DEFINED AT LINE 713 IN MAIN.asm
RANGESRC_:          045B DEFINED AT LINE 718 IN MAIN.asm
COMMAND_V:          045E DEFINED AT LINE 721 IN MAIN.asm
                    > USED AT LINE 472 IN MAIN.asm
CONSTBUFSTART_:     0471 DEFINED AT LINE 738 IN MAIN.asm
CONSTHEAPSTART_:    0476 DEFINED AT LINE 742 IN MAIN.asm
CONSTTIBSTART_:     047B DEFINED AT LINE 746 IN MAIN.asm
VARBUFPTR_:         0480 DEFINED AT LINE 750 IN MAIN.asm
VARHEAPPTR_:        0489 DEFINED AT LINE 755 IN MAIN.asm
VARTIBPTR_:         0492 DEFINED AT LINE 760 IN MAIN.asm
VARIABLE:           049B DEFINED AT LINE 765 IN MAIN.asm
                    > USED AT LINE 223 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
CONSTANT:           049E DEFINED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
                    > USED AT LINE 744 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
DOT:                04A1 DEFINED AT LINE 772 IN MAIN.asm
                    > USED AT LINE 356 IN MAIN.asm
DOTNUMBER_:         04B0 DEFINED AT LINE 787 IN MAIN.asm
                    > USED AT LINE 783 IN MAIN.asm
                    > USED AT LINE 1576 IN MAIN.asm
DOTSTRING_:         04BB DEFINED AT LINE 795 IN MAIN.asm
DOTSTRING0:         04C2 DEFINED AT LINE 799 IN MAIN.asm
                    > USED AT LINE 807 IN MAIN.asm
DOTSTRING1:         04C8 DEFINED AT LINE 804 IN MAIN.asm
                    > USED AT LINE 798 IN MAIN.asm
DOTCHAR_:           04D5 DEFINED AT LINE 814 IN MAIN.asm
DOTXCHARS_:         04DA DEFINED AT LINE 820 IN MAIN.asm
DOTXCHARS0:         04DB DEFINED AT LINE 822 IN MAIN.asm
                    > USED AT LINE 816 IN MAIN.asm
DOTXCHARS1:         04E4 DEFINED AT LINE 828 IN MAIN.asm
                    > USED AT LINE 838 IN MAIN.asm
DOTXCHARS2:         04EC DEFINED AT LINE 835 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
FOREACH:            04F6 DEFINED AT LINE 32
                    > USED AT LINE 658 IN MAIN.asm
FOREACHM_1282S850:  0504 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0543 DEFINED AT LINE 32
                    > USED AT LINE 667 IN MAIN.asm
FUNCSRCM_1297S866:  054F DEFINED AT LINE 39
                    > USED AT LINE 35
DOTARRAY:           057E DEFINED AT LINE 32
DOTARRAYM_1307S877: 058C DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                05C6 DEFINED AT LINE 32
                    > USED AT LINE 695 IN MAIN.asm
MAPM_1314S885:      05D3 DEFINED AT LINE 39
                    > USED AT LINE 35
RANGESRC:           060A DEFINED AT LINE 32
                    > USED AT LINE 719 IN MAIN.asm
RANGESRCM_1328S900: 0619 DEFINED AT LINE 39
                    > USED AT LINE 35
PERCENT:            068C DEFINED AT LINE 926 IN MAIN.asm
                    > USED AT LINE 345 IN MAIN.asm
ARG:                068C DEFINED AT LINE 927 IN MAIN.asm
ARG0:               06A8 DEFINED AT LINE 946 IN MAIN.asm
                    > USED AT LINE 952 IN MAIN.asm
ARG0A:              06B1 DEFINED AT LINE 954 IN MAIN.asm
                    > USED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 938 IN MAIN.asm
ARG1:               06B6 DEFINED AT LINE 957 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
ARG1A:              06BE DEFINED AT LINE 964 IN MAIN.asm
                    > USED AT LINE 956 IN MAIN.asm
LBRACK:             06C1 DEFINED AT LINE 968 IN MAIN.asm
                    > USED AT LINE 341 IN MAIN.asm
ARRAYSTART:         06C1 DEFINED AT LINE 969 IN MAIN.asm
RBRACK:             06DD DEFINED AT LINE 983 IN MAIN.asm
                    > USED AT LINE 343 IN MAIN.asm
ARRAYEND:           06DD DEFINED AT LINE 984 IN MAIN.asm
ARRAYEND1:          06F9 DEFINED AT LINE 1001 IN MAIN.asm
                    > USED AT LINE 1018 IN MAIN.asm
ARRAYEND2:          0709 DEFINED AT LINE 1011 IN MAIN.asm
                    > USED AT LINE 1007 IN MAIN.asm
ARRAYEND3:          070E DEFINED AT LINE 1015 IN MAIN.asm
                    > USED AT LINE 1000 IN MAIN.asm
HASH:               072D DEFINED AT LINE 1038 IN MAIN.asm
                    > USED AT LINE 370 IN MAIN.asm
ARRAYINDEX:         072D DEFINED AT LINE 1039 IN MAIN.asm
ARRAYINDEX0:        0735 DEFINED AT LINE 1045 IN MAIN.asm
ARRAYINDEX1:        0736 DEFINED AT LINE 1047 IN MAIN.asm
                    > USED AT LINE 1044 IN MAIN.asm
ARRAYINDEX2:        0742 DEFINED AT LINE 1056 IN MAIN.asm
                    > USED AT LINE 1053 IN MAIN.asm
COLON:              0745 DEFINED AT LINE 1064 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
ARGLIST:            0745 DEFINED AT LINE 1065 IN MAIN.asm
ARGLIST1:           074F DEFINED AT LINE 1072 IN MAIN.asm
                    > USED AT LINE 1093 IN MAIN.asm
ARGLIST1A:          0757 DEFINED AT LINE 1078 IN MAIN.asm
                    > USED AT LINE 1075 IN MAIN.asm
ARGLIST2:           075F DEFINED AT LINE 1083 IN MAIN.asm
ARGLIST3:           0767 DEFINED AT LINE 1091 IN MAIN.asm
                    > USED AT LINE 1077 IN MAIN.asm
                    > USED AT LINE 1089 IN MAIN.asm
ARGLIST4:           076A DEFINED AT LINE 1094 IN MAIN.asm
                    > USED AT LINE 1080 IN MAIN.asm
                    > USED AT LINE 1082 IN MAIN.asm
ARGLIST5:           0770 DEFINED AT LINE 1100 IN MAIN.asm
                    > USED AT LINE 1098 IN MAIN.asm
ASSIGN:             077B DEFINED AT LINE 1111 IN MAIN.asm
                    > USED AT LINE 266 IN MAIN.asm
ASSIGN0:            077D DEFINED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
ASSIGNX:            077E DEFINED AT LINE 1116 IN MAIN.asm
ASSIGN1:            078A DEFINED AT LINE 1124 IN MAIN.asm
                    > USED AT LINE 1121 IN MAIN.asm
LBRACE:             078C DEFINED AT LINE 1127 IN MAIN.asm
                    > USED AT LINE 348 IN MAIN.asm
BLOCKSTART:         078C DEFINED AT LINE 1128 IN MAIN.asm
BLOCKSTART1:        0790 DEFINED AT LINE 1132 IN MAIN.asm
                    > USED AT LINE 1136 IN MAIN.asm
                    > USED AT LINE 1158 IN MAIN.asm
                    > USED AT LINE 1161 IN MAIN.asm
                    > USED AT LINE 1166 IN MAIN.asm
                    > USED AT LINE 1170 IN MAIN.asm
BLOCKSTART2:        07BC DEFINED AT LINE 1159 IN MAIN.asm
                    > USED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 1148 IN MAIN.asm
                    > USED AT LINE 1150 IN MAIN.asm
BLOCKSTART3:        07BF DEFINED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 1155 IN MAIN.asm
                    > USED AT LINE 1157 IN MAIN.asm
BLOCKSTART4:        07C7 DEFINED AT LINE 1168 IN MAIN.asm
                    > USED AT LINE 1139 IN MAIN.asm
                    > USED AT LINE 1141 IN MAIN.asm
                    > USED AT LINE 1143 IN MAIN.asm
BLOCKSTART5:        07CA DEFINED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 1167 IN MAIN.asm
BLOCKSTART6:        07F2 DEFINED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
RBRACE:             07F5 DEFINED AT LINE 1194 IN MAIN.asm
                    > USED AT LINE 350 IN MAIN.asm
BLOCKEND:           07F5 DEFINED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 1270 IN MAIN.asm
BLOCKEND1:          0827 DEFINED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 1210 IN MAIN.asm
BLOCKEND2:          0833 DEFINED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1216 IN MAIN.asm
BLOCKEND3:          0845 DEFINED AT LINE 1238 IN MAIN.asm
                    > USED AT LINE 1230 IN MAIN.asm
BLOCKEND4:          0859 DEFINED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 1246 IN MAIN.asm
BREAK:              0862 DEFINED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
BREAK1:             0869 DEFINED AT LINE 1261 IN MAIN.asm
                    > USED AT LINE 1259 IN MAIN.asm
TICK:               087C DEFINED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 352 IN MAIN.asm
CHAR:               087C DEFINED AT LINE 1273 IN MAIN.asm
CHAR1:              087F DEFINED AT LINE 1275 IN MAIN.asm
                    > USED AT LINE 1286 IN MAIN.asm
CHAR2:              088B DEFINED AT LINE 1284 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
CHAR3:              088E DEFINED AT LINE 1287 IN MAIN.asm
                    > USED AT LINE 1279 IN MAIN.asm
SEMICOLON:          0891 DEFINED AT LINE 1293 IN MAIN.asm
                    > USED AT LINE 354 IN MAIN.asm
CREATEFUNC:         0891 DEFINED AT LINE 1294 IN MAIN.asm
CREATEFUNC0:        08AC DEFINED AT LINE 1306 IN MAIN.asm
                    > USED AT LINE 1302 IN MAIN.asm
CREATEFUNC1:        08C4 DEFINED AT LINE 1325 IN MAIN.asm
                    > USED AT LINE 1321 IN MAIN.asm
CREATEFUNC2:        08D7 DEFINED AT LINE 1338 IN MAIN.asm
                    > USED AT LINE 1334 IN MAIN.asm
CREATEFUNC2A:       08F6 DEFINED AT LINE 1364 IN MAIN.asm
                    > USED AT LINE 1351 IN MAIN.asm
CREATEFUNC3:        0905 DEFINED AT LINE 1376 IN MAIN.asm
                    > USED AT LINE 1386 IN MAIN.asm
CREATEFUNC4:        0910 DEFINED AT LINE 1387 IN MAIN.asm
CREATEFUNC5:        0911 DEFINED AT LINE 1389 IN MAIN.asm
                    > USED AT LINE 1305 IN MAIN.asm
COMMA:              092D DEFINED AT LINE 1412 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
DISCARD:            092D DEFINED AT LINE 1413 IN MAIN.asm
DISCARD1:           093A DEFINED AT LINE 1422 IN MAIN.asm
                    > USED AT LINE 1420 IN MAIN.asm
DIV:                093C DEFINED AT LINE 1425 IN MAIN.asm
                    > USED AT LINE 485 IN MAIN.asm
BUFFERDEC:          094D DEFINED AT LINE 1438 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
BUFFERDEC0:         0967 DEFINED AT LINE 1455 IN MAIN.asm
                    > USED AT LINE 1442 IN MAIN.asm
BUFFERDEC1:         0977 DEFINED AT LINE 1469 IN MAIN.asm
                    > USED AT LINE 1457 IN MAIN.asm
BUFFERDEC2:         0997 DEFINED AT LINE 1483 IN MAIN.asm
                    > USED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1476 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
                    > USED AT LINE 1481 IN MAIN.asm
BUFFERDEC3:         0999 DEFINED AT LINE 1485 IN MAIN.asm
                    > USED AT LINE 1488 IN MAIN.asm
BUFFERDEC4:         09A9 DEFINED AT LINE 1497 IN MAIN.asm
                    > USED AT LINE 1492 IN MAIN.asm
BUFFERDEC5:         09AA DEFINED AT LINE 1499 IN MAIN.asm
                    > USED AT LINE 1496 IN MAIN.asm
BUFFERHEX:          09B3 DEFINED AT LINE 1510 IN MAIN.asm
                    > USED AT LINE 790 IN MAIN.asm
BUFFERHEX1:         09D4 DEFINED AT LINE 1528 IN MAIN.asm
                    > USED AT LINE 1518 IN MAIN.asm
                    > USED AT LINE 1520 IN MAIN.asm
BUFFERHEX2:         09DD DEFINED AT LINE 1536 IN MAIN.asm
                    > USED AT LINE 1534 IN MAIN.asm
DIVIDE:             09EB DEFINED AT LINE 1550 IN MAIN.asm
                    > USED AT LINE 1430 IN MAIN.asm
DIVIDE1:            09F0 DEFINED AT LINE 1553 IN MAIN.asm
                    > USED AT LINE 1565 IN MAIN.asm
DIVIDE2:            09FD DEFINED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 1558 IN MAIN.asm
DIVIDE3:            09FE DEFINED AT LINE 1563 IN MAIN.asm
                    > USED AT LINE 1560 IN MAIN.asm
FZ:                 0A04 DEFINED AT LINE 1570 IN MAIN.asm
                    > USED AT LINE 682 IN MAIN.asm
CARET:              0A11 DEFINED AT LINE 1581 IN MAIN.asm
                    > USED AT LINE 372 IN MAIN.asm
GO:                 0A11 DEFINED AT LINE 1582 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0A12 DEFINED AT LINE 1584 IN MAIN.asm
                    > USED AT LINE 1251 IN MAIN.asm
                    > USED AT LINE 1759 IN MAIN.asm
                    > USED AT LINE 1761 IN MAIN.asm
GO2:                0A18 DEFINED AT LINE 1589 IN MAIN.asm
                    > USED AT LINE 1587 IN MAIN.asm
GOBLOCK:            0A23 DEFINED AT LINE 1597 IN MAIN.asm
                    > USED AT LINE 1592 IN MAIN.asm
GOBLOCK2:           0A48 DEFINED AT LINE 1614 IN MAIN.asm
                    > USED AT LINE 1695 IN MAIN.asm
GOBLOCK3:           0A52 DEFINED AT LINE 1620 IN MAIN.asm
GOFUNC:             0A56 DEFINED AT LINE 1624 IN MAIN.asm
                    > USED AT LINE 1594 IN MAIN.asm
GOFUNC1:            0A6F DEFINED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 1653 IN MAIN.asm
GOFUNC2:            0A75 DEFINED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 1642 IN MAIN.asm
GOFUNC3:            0A80 DEFINED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 1632 IN MAIN.asm
GOFUNC4:            0A98 DEFINED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 1670 IN MAIN.asm
GOFUNC5:            0A9B DEFINED AT LINE 1676 IN MAIN.asm
                    > USED AT LINE 1682 IN MAIN.asm
GOFUNC6:            0A9E DEFINED AT LINE 1680 IN MAIN.asm
                    > USED AT LINE 1675 IN MAIN.asm
GOFUNC7:            0AA1 DEFINED AT LINE 1683 IN MAIN.asm
GOFUNC8:            0AA5 DEFINED AT LINE 1688 IN MAIN.asm
                    > USED AT LINE 1608 IN MAIN.asm
                    > USED AT LINE 1672 IN MAIN.asm
DOLLAR:             0AB0 DEFINED AT LINE 1697 IN MAIN.asm
                    > USED AT LINE 339 IN MAIN.asm
HEXNUM:             0AB0 DEFINED AT LINE 1698 IN MAIN.asm
HEXNUM1:            0AB3 DEFINED AT LINE 1700 IN MAIN.asm
                    > USED AT LINE 1717 IN MAIN.asm
HEXNUM2:            0ABB DEFINED AT LINE 1706 IN MAIN.asm
                    > USED AT LINE 1704 IN MAIN.asm
UPCASE:             0ACD DEFINED AT LINE 1719 IN MAIN.asm
                    > USED AT LINE 360 IN MAIN.asm
LOWCASE:            0AD2 DEFINED AT LINE 1723 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
IDENT1:             0AD7 DEFINED AT LINE 1727 IN MAIN.asm
                    > USED AT LINE 1722 IN MAIN.asm
QUESTION:           0AE4 DEFINED AT LINE 1740 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
IF:                 0AE4 DEFINED AT LINE 1741 IN MAIN.asm
IFTE:               0AF0 DEFINED AT LINE 1751 IN MAIN.asm
                    > USED AT LINE 1745 IN MAIN.asm
IFTE1:              0AF1 DEFINED AT LINE 1753 IN MAIN.asm
                    > USED AT LINE 1748 IN MAIN.asm
KEY:                0AFD DEFINED AT LINE 1763 IN MAIN.asm
OUTPUT:             0B06 DEFINED AT LINE 1772 IN MAIN.asm
                    > USED AT LINE 498 IN MAIN.asm
STAR:               0B0F DEFINED AT LINE 1781 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
MUL:                0B0F DEFINED AT LINE 1782 IN MAIN.asm
MUL2:               0B11 DEFINED AT LINE 1785 IN MAIN.asm
MUL3:               0B19 DEFINED AT LINE 1790 IN MAIN.asm
                    > USED AT LINE 1799 IN MAIN.asm
NUM:                0B2B DEFINED AT LINE 1803 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
NUM0:               0B34 DEFINED AT LINE 1809 IN MAIN.asm
                    > USED AT LINE 1807 IN MAIN.asm
NUM1:               0B35 DEFINED AT LINE 1811 IN MAIN.asm
                    > USED AT LINE 1828 IN MAIN.asm
NUM2:               0B4D DEFINED AT LINE 1829 IN MAIN.asm
                    > USED AT LINE 1708 IN MAIN.asm
                    > USED AT LINE 1710 IN MAIN.asm
                    > USED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 1816 IN MAIN.asm
NUM3:               0B58 DEFINED AT LINE 1837 IN MAIN.asm
                    > USED AT LINE 1832 IN MAIN.asm
RPAREN:             0B5B DEFINED AT LINE 1841 IN MAIN.asm
                    > USED AT LINE 337 IN MAIN.asm
SHIFTLEFT:          0B63 DEFINED AT LINE 1848 IN MAIN.asm
                    > USED AT LINE 286 IN MAIN.asm
SHIFTLEFT1:         0B6B DEFINED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 1858 IN MAIN.asm
SHIFTLEFT2:         0B6C DEFINED AT LINE 1857 IN MAIN.asm
                    > USED AT LINE 1854 IN MAIN.asm
SHIFTRIGHT:         0B73 DEFINED AT LINE 1865 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
SHIFTRIGHT1:        0B7B DEFINED AT LINE 1872 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
SHIFTRIGHT2:        0B7F DEFINED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 1871 IN MAIN.asm
DQUOTE:             0B86 DEFINED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
STRING:             0B86 DEFINED AT LINE 1885 IN MAIN.asm
STRING1:            0B8F DEFINED AT LINE 1892 IN MAIN.asm
                    > USED AT LINE 1901 IN MAIN.asm
STRING2:            0B92 DEFINED AT LINE 1896 IN MAIN.asm
                    > USED AT LINE 1891 IN MAIN.asm
STRING3:            0B9B DEFINED AT LINE 1902 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
PRINTCHARS1:        0BAE DEFINED AT LINE 1919 IN MAIN.asm
                    > USED AT LINE 1928 IN MAIN.asm
PRINTCHARS2:        0BB4 DEFINED AT LINE 1924 IN MAIN.asm
                    > USED AT LINE 604 IN MAIN.asm
                    > USED AT LINE 1954 IN MAIN.asm
FILTER:             0BB9 DEFINED AT LINE 1936 IN MAIN.asm
FLUSHBUFFER:        0BBB DEFINED AT LINE 1945 IN MAIN.asm
                    > USED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 802 IN MAIN.asm
                    > USED AT LINE 833 IN MAIN.asm
                    > USED AT LINE 1447 IN MAIN.asm
                    > USED AT LINE 1504 IN MAIN.asm
                    > USED AT LINE 1516 IN MAIN.asm
                    > USED AT LINE 1524 IN MAIN.asm
                    > USED AT LINE 1544 IN MAIN.asm
                    > USED AT LINE 2135 IN MAIN.asm
COMMANDTABLE:       0BD2 DEFINED AT LINE 1960 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
COMMANDTABLE1:      0BDC DEFINED AT LINE 1967 IN MAIN.asm
                    > USED AT LINE 1976 IN MAIN.asm
COMMANDTABLE2:      0BE1 DEFINED AT LINE 1973 IN MAIN.asm
                    > USED AT LINE 1964 IN MAIN.asm
                    > USED AT LINE 1966 IN MAIN.asm
JUMPTABLE:          0BE6 DEFINED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 262 IN MAIN.asm
                    > USED AT LINE 422 IN MAIN.asm
                    > USED AT LINE 433 IN MAIN.asm
                    > USED AT LINE 445 IN MAIN.asm
                    > USED AT LINE 455 IN MAIN.asm
                    > USED AT LINE 462 IN MAIN.asm
                    > USED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 688 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
                    > USED AT LINE 722 IN MAIN.asm
                    > USED AT LINE 773 IN MAIN.asm
JUMPTABLE0:         0BE8 DEFINED AT LINE 1985 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
JUMPTABLE1:         0BF4 DEFINED AT LINE 1995 IN MAIN.asm
                    > USED AT LINE 1991 IN MAIN.asm
JUMPTABLE2:         0BF7 DEFINED AT LINE 1999 IN MAIN.asm
                    > USED AT LINE 1988 IN MAIN.asm
PRTSTR0:            0BFA DEFINED AT LINE 2004 IN MAIN.asm
                    > USED AT LINE 2010 IN MAIN.asm
PRTSTR:             0BFE DEFINED AT LINE 2007 IN MAIN.asm
                    > USED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 2131 IN MAIN.asm
NESTING:            0C03 DEFINED AT LINE 2023 IN MAIN.asm
                    > USED AT LINE 2157 IN MAIN.asm
                    > USED AT LINE 2215 IN MAIN.asm
NESTING0:           0C0D DEFINED AT LINE 2029 IN MAIN.asm
                    > USED AT LINE 2025 IN MAIN.asm
                    > USED AT LINE 2027 IN MAIN.asm
NESTING1A:          0C14 DEFINED AT LINE 2034 IN MAIN.asm
                    > USED AT LINE 2031 IN MAIN.asm
NESTING1:           0C17 DEFINED AT LINE 2037 IN MAIN.asm
                    > USED AT LINE 2028 IN MAIN.asm
NESTING2:           0C26 DEFINED AT LINE 2046 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
                    > USED AT LINE 2043 IN MAIN.asm
NESTING3:           0C28 DEFINED AT LINE 2049 IN MAIN.asm
                    > USED AT LINE 2045 IN MAIN.asm
NESTING4:           0C33 DEFINED AT LINE 2056 IN MAIN.asm
                    > USED AT LINE 2051 IN MAIN.asm
                    > USED AT LINE 2053 IN MAIN.asm
PROMPT:             0C35 DEFINED AT LINE 2060 IN MAIN.asm
                    > USED AT LINE 2136 IN MAIN.asm
CRLF:               0C3E DEFINED AT LINE 2065 IN MAIN.asm
                    > USED AT LINE 2228 IN MAIN.asm
PRINTSTR:           0C45 DEFINED AT LINE 2072 IN MAIN.asm
                    > USED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 2066 IN MAIN.asm
                    > USED AT LINE 2285 IN MAIN.asm
INIT:               0C4C DEFINED AT LINE 2079 IN MAIN.asm
                    > USED AT LINE 2128 IN MAIN.asm
INIT1:              0C54 DEFINED AT LINE 2083 IN MAIN.asm
                    > USED AT LINE 2089 IN MAIN.asm
WARMINIT:           0C5C DEFINED AT LINE 2091 IN MAIN.asm
COLDBOOT0:          0C6F DEFINED AT LINE 2098 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
                    > USED AT LINE 2124 IN MAIN.asm
COLDINIT:           0C79 DEFINED AT LINE 2104 IN MAIN.asm
COLDBOOT1:          0C8A DEFINED AT LINE 2113 IN MAIN.asm
                    > USED AT LINE 2116 IN MAIN.asm
COLDSTART:          0C97 DEFINED AT LINE 2122 IN MAIN.asm
                    > USED AT LINE 577 IN MAIN.asm
START:              0CA0 DEFINED AT LINE 2126 IN MAIN.asm
                    > USED AT LINE 7
START1:             0CA6 DEFINED AT LINE 2129 IN MAIN.asm
                    > USED AT LINE 2096 IN MAIN.asm
                    > USED AT LINE 2125 IN MAIN.asm
INTERPRET:          0CAC DEFINED AT LINE 2133 IN MAIN.asm
                    > USED AT LINE 2261 IN MAIN.asm
                    > USED AT LINE 2278 IN MAIN.asm
                    > USED AT LINE 2293 IN MAIN.asm
                    > USED AT LINE 2296 IN MAIN.asm
                    > USED AT LINE 2301 IN MAIN.asm
INTERPRET2:         0CBB DEFINED AT LINE 2142 IN MAIN.asm
                    > USED AT LINE 2206 IN MAIN.asm
                    > USED AT LINE 2283 IN MAIN.asm
                    > USED AT LINE 2287 IN MAIN.asm
INTERPRET3:         0CC3 DEFINED AT LINE 2150 IN MAIN.asm
                    > USED AT LINE 2163 IN MAIN.asm
INTERPRET4:         0CCE DEFINED AT LINE 2159 IN MAIN.asm
                    > USED AT LINE 2148 IN MAIN.asm
INTERPRET5:         0CD3 DEFINED AT LINE 2166 IN MAIN.asm
                    > USED AT LINE 2216 IN MAIN.asm
                    > USED AT LINE 2231 IN MAIN.asm
INTERPRET5A:        0CF1 DEFINED AT LINE 2203 IN MAIN.asm
INTERPRET6:         0CF3 DEFINED AT LINE 2208 IN MAIN.asm
                    > USED AT LINE 2170 IN MAIN.asm
INTERPRET7:         0D01 DEFINED AT LINE 2218 IN MAIN.asm
                    > USED AT LINE 2175 IN MAIN.asm
INTERPRET8:         0D14 DEFINED AT LINE 2233 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
NEXT:               0D2F DEFINED AT LINE 2246 IN MAIN.asm
                    > USED AT LINE 152 IN MAIN.asm
                    > USED AT LINE 2250 IN MAIN.asm
NEXT1:              0D3F DEFINED AT LINE 2258 IN MAIN.asm
                    > USED AT LINE 2251 IN MAIN.asm
EXIT:               0D46 DEFINED AT LINE 2263 IN MAIN.asm
                    > USED AT LINE 2260 IN MAIN.asm
RUN:                0D4A DEFINED AT LINE 2267 IN MAIN.asm
                    > USED AT LINE 2276 IN MAIN.asm
                    > USED AT LINE 2291 IN MAIN.asm
                    > USED AT LINE 2299 IN MAIN.asm
ERROR1:             0D4E DEFINED AT LINE 2272 IN MAIN.asm
                    > USED AT LINE 488 IN MAIN.asm
ERROR:              0D52 DEFINED AT LINE 2275 IN MAIN.asm
BACKSPACE_:         0D65 DEFINED AT LINE 2280 IN MAIN.asm
                    > USED AT LINE 2180 IN MAIN.asm
EDIT_:              0D75 DEFINED AT LINE 2290 IN MAIN.asm
                    > USED AT LINE 2178 IN MAIN.asm
REEDIT_:            0D8D DEFINED AT LINE 2295 IN MAIN.asm
                    > USED AT LINE 2182 IN MAIN.asm
PRINTSTACK_:        0D90 DEFINED AT LINE 2298 IN MAIN.asm
F1:                 0D9A DEFINED AT LINE 10
                    > USED AT LINE 670 IN MAIN.asm
F2:                 0D9A DEFINED AT LINE 11
                    > USED AT LINE 673 IN MAIN.asm
F3:                 0D9A DEFINED AT LINE 12
                    > USED AT LINE 676 IN MAIN.asm
F4:                 0D9A DEFINED AT LINE 13
                    > USED AT LINE 679 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1571 IN MAIN.asm
                    > USED AT LINE 1599 IN MAIN.asm
                    > USED AT LINE 2119 IN MAIN.asm
                    > USED AT LINE 2123 IN MAIN.asm
                    > USED AT LINE 2127 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 150 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 2139 IN MAIN.asm
                    > USED AT LINE 2147 IN MAIN.asm
                    > USED AT LINE 2210 IN MAIN.asm
                    > USED AT LINE 2220 IN MAIN.asm
                    > USED AT LINE 2235 IN MAIN.asm
                    > USED AT LINE 2238 IN MAIN.asm
BUF:                2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 151 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 1950 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 2110 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2106 IN MAIN.asm
VDATAWIDTH:         23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 582 IN MAIN.asm
                    > USED AT LINE 1005 IN MAIN.asm
                    > USED AT LINE 1042 IN MAIN.asm
                    > USED AT LINE 1119 IN MAIN.asm
VNUMBASE:           23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 788 IN MAIN.asm
VTIBPTR:            23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 761 IN MAIN.asm
                    > USED AT LINE 762 IN MAIN.asm
                    > USED AT LINE 2140 IN MAIN.asm
                    > USED AT LINE 2237 IN MAIN.asm
VBUFPTR:            23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
                    > USED AT LINE 808 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 826 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
                    > USED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 1448 IN MAIN.asm
                    > USED AT LINE 1449 IN MAIN.asm
                    > USED AT LINE 1512 IN MAIN.asm
                    > USED AT LINE 1525 IN MAIN.asm
                    > USED AT LINE 1949 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
VNEXT:              23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2118 IN MAIN.asm
VHEAPPTR:           23F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
                    > USED AT LINE 994 IN MAIN.asm
                    > USED AT LINE 1028 IN MAIN.asm
                    > USED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1067 IN MAIN.asm
                    > USED AT LINE 1102 IN MAIN.asm
                    > USED AT LINE 1185 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 1304 IN MAIN.asm
                    > USED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 1340 IN MAIN.asm
                    > USED AT LINE 1406 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
                    > USED AT LINE 1906 IN MAIN.asm
VRECUR:             23F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 710 IN MAIN.asm
                    > USED AT LINE 1243 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
VPOINTER:           23F4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 221 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
                    > USED AT LINE 1049 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 1731 IN MAIN.asm
VREMAIN:            23F6 DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 714 IN MAIN.asm
                    > USED AT LINE 1432 IN MAIN.asm
VSAVEDIP:           23F8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 2092 IN MAIN.asm
                    > USED AT LINE 2240 IN MAIN.asm
VSAVEDSP:           23FA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 2093 IN MAIN.asm
                    > USED AT LINE 2241 IN MAIN.asm
VSAVEDNEXT:         23FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2094 IN MAIN.asm
                    > USED AT LINE 2242 IN MAIN.asm
VSAVEDBP:           23FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2095 IN MAIN.asm
                    > USED AT LINE 2243 IN MAIN.asm
VTEMP1:             2400 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 987 IN MAIN.asm
                    > USED AT LINE 1033 IN MAIN.asm
                    > USED AT LINE 1180 IN MAIN.asm
                    > USED AT LINE 1189 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
                    > USED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 1295 IN MAIN.asm
                    > USED AT LINE 1407 IN MAIN.asm
                    > USED AT LINE 1598 IN MAIN.asm
                    > USED AT LINE 1604 IN MAIN.asm
                    > USED AT LINE 1633 IN MAIN.asm
                    > USED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 1661 IN MAIN.asm
                    > USED AT LINE 1667 IN MAIN.asm
VTEMP2:             2402 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 1201 IN MAIN.asm
                    > USED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 1297 IN MAIN.asm
                    > USED AT LINE 1397 IN MAIN.asm
                    > USED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 1655 IN MAIN.asm
VLASTDEF:           2404 DEFINED AT LINE 58 IN ram.asm
TBPTR:              2406 DEFINED AT LINE 59 IN ram.asm
TITLEBUF:           2408 DEFINED AT LINE 61 IN ram.asm
                    > USED AT LINE 2081 IN MAIN.asm
                    > USED AT LINE 2100 IN MAIN.asm
                    > USED AT LINE 2130 IN MAIN.asm
HEAP:               241C DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
                    > USED AT LINE 1173 IN MAIN.asm
