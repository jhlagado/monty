0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 B5 0E               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQ:       EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of Monty code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num_locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
00C9                .macro PERFORM,name
00C9                             ; 
00C9                 ld ix,perform%%M
00C9                 jp name
00C9                perform%%M:
00C9                .endm
00C9                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   F9                     DB   lsb(bang_)   ; !
0181   2B                     DB   lsb(dquote_)   ; "
0182   C3                     DB   lsb(hash_)   ; #
0183   37                     DB   lsb(dollar_)   ; $
0184   19                     DB   lsb(percent_)   ; %
0185   A1                     DB   lsb(amper_)   ; &
0186   1F                     DB   lsb(quote_)   ; '
0187   45                     DB   lsb(lparen_)   ; (
0188   3D                     DB   lsb(rparen_)   ; )
0189   F5                     DB   lsb(star_)   ; *
018A   DB                     DB   lsb(plus_)   ; +
018B   28                     DB   lsb(comma_)   ; ,
018C   F7                     DB   lsb(minus_)   ; -
018D   22                     DB   lsb(dot_)   ; .
018E   34                     DB   lsb(slash_)   ; /	
018F   11                     DB   lsb(num_)   ; 0
0190   11                     DB   lsb(num_)   ; 1
0191   11                     DB   lsb(num_)   ; 2
0192   11                     DB   lsb(num_)   ; 3
0193   11                     DB   lsb(num_)   ; 4
0194   11                     DB   lsb(num_)   ; 5
0195   11                     DB   lsb(num_)   ; 6
0196   11                     DB   lsb(num_)   ; 7
0197   11                     DB   lsb(num_)   ; 8
0198   11                     DB   lsb(num_)   ; 9
0199   6F                     DB   lsb(colon_)   ; :
019A   5B                     DB   lsb(semicolon_)   ; ;
019B   FF                     DB   lsb(lt_)   ; <
019C   FB                     DB   lsb(eq_)   ; =
019D   FD                     DB   lsb(gt_)   ; >
019E   3A                     DB   lsb(question_)   ; ?
019F   04                     DB   lsb(at_)   ; @
01A0   AC                     DB   lsb(upcase_)   ; A
01A1   AC                     DB   lsb(upcase_)   ; B
01A2   AC                     DB   lsb(upcase_)   ; C
01A3   AC                     DB   lsb(upcase_)   ; D
01A4   AC                     DB   lsb(upcase_)   ; E
01A5   AC                     DB   lsb(upcase_)   ; F
01A6   AC                     DB   lsb(upcase_)   ; G
01A7   AC                     DB   lsb(upcase_)   ; h
01A8   AC                     DB   lsb(upcase_)   ; I
01A9   AC                     DB   lsb(upcase_)   ; J
01AA   AC                     DB   lsb(upcase_)   ; K
01AB   AC                     DB   lsb(upcase_)   ; L
01AC   AC                     DB   lsb(upcase_)   ; M
01AD   AC                     DB   lsb(upcase_)   ; N
01AE   AC                     DB   lsb(upcase_)   ; O
01AF   AC                     DB   lsb(upcase_)   ; p
01B0   AC                     DB   lsb(upcase_)   ; Q
01B1   AC                     DB   lsb(upcase_)   ; R
01B2   AC                     DB   lsb(upcase_)   ; S
01B3   AC                     DB   lsb(upcase_)   ; T
01B4   AC                     DB   lsb(upcase_)   ; U
01B5   AC                     DB   lsb(upcase_)   ; V
01B6   AC                     DB   lsb(upcase_)   ; W
01B7   AC                     DB   lsb(upcase_)   ; X
01B8   AC                     DB   lsb(upcase_)   ; Y
01B9   AC                     DB   lsb(upcase_)   ; Z
01BA   85                     DB   lsb(lbrack_)   ; [
01BB   0E                     DB   lsb(backslash_)   ; \
01BC   16                     DB   lsb(rbrack_)   ; ]
01BD   25                     DB   lsb(caret_)   ; ^
01BE   31                     DB   lsb(underscore_)   ; _
01BF   2E                     DB   lsb(grave_)   ; `     used for testing string   	
01C0   B1                     DB   lsb(lowcase_)   ; a
01C1   B1                     DB   lsb(lowcase_)   ; b
01C2   B1                     DB   lsb(lowcase_)   ; c
01C3   B1                     DB   lsb(lowcase_)   ; d
01C4   B1                     DB   lsb(lowcase_)   ; e
01C5   B1                     DB   lsb(lowcase_)   ; f
01C6   B1                     DB   lsb(lowcase_)   ; g
01C7   B1                     DB   lsb(lowcase_)   ; h
01C8   B1                     DB   lsb(lowcase_)   ; i
01C9   B1                     DB   lsb(lowcase_)   ; j
01CA   B1                     DB   lsb(lowcase_)   ; k
01CB   B1                     DB   lsb(lowcase_)   ; l
01CC   B1                     DB   lsb(lowcase_)   ; m
01CD   B1                     DB   lsb(lowcase_)   ; n
01CE   B1                     DB   lsb(lowcase_)   ; o
01CF   B1                     DB   lsb(lowcase_)   ; p
01D0   B1                     DB   lsb(lowcase_)   ; q
01D1   B1                     DB   lsb(lowcase_)   ; r
01D2   B1                     DB   lsb(lowcase_)   ; s
01D3   B1                     DB   lsb(lowcase_)   ; t
01D4   B1                     DB   lsb(lowcase_)   ; u
01D5   B1                     DB   lsb(lowcase_)   ; v
01D6   B1                     DB   lsb(lowcase_)   ; w
01D7   B1                     DB   lsb(lowcase_)   ; x
01D8   B1                     DB   lsb(lowcase_)   ; y
01D9   B1                     DB   lsb(lowcase_)   ; z
01DA   45                     DB   lsb(lbrace_)   ; {
01DB   52                     DB   lsb(pipe_)   ; |
01DC   1C                     DB   lsb(rbrace_)   ; }
01DD   4A                     DB   lsb(tilde_)   ; ~
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 22                  DW   BUF   ; vBUFPtr pointer into BUF
01E6   44 0F                  DW   next   ; nNext
01E8   20 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; unused
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                             ; @ addr
0204                             ; -- ptr
0204                AT_:         
0204                ADDR:        
0204   ED 5B F6 23            LD   de,(vPointer)   
0208   21 F6 23               LD   hl,vPointer   
020B   C3 BC 07               JP   variable   
020E                BACKSLASH_:      
020E   C3 01 04               JP   backslash   
0211                NUM_:        
0211   C3 4C 04               JP   num   
0214                NOP_:        
0214   DD E9                  JP   (ix)   
0216                RBRACK_:      
0216   C3 27 0B               JP   rbrack   
0219                PERCENT_:      
0219   C3 A3 04               JP   percent   
021C                RBRACE_:      
021C   C3 77 0B               JP   rbrace   
021F                QUOTE_:      
021F   C3 7C 04               JP   quote   
0222                DOT_:        
0222   C3 00 05               JP   dot   
0225                CARET_:      
0225   C3 E4 0B               JP   caret   
0228                COMMA_:      
0228   C3 04 0B               JP   comma   
022B                DQUOTE_:      
022B   C3 7C 04               JP   dquote   
022E                GRAVE_:      
022E   C3 7C 04               JP   grave   
0231                UNDERSCORE_:      
0231   C3 04 0B               JP   underscore   
0234                SLASH_:      
0234   C3 00 06               JP   slash   
0237                DOLLAR_:      
0237   C3 CB 03               JP   dollar   
023A                QUESTION_:      
023A   C3 E8 03               JP   question   
023D                             ;                               4
023D                RPAREN_:      
023D                RPAREN:      
023D   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0240   FD 46 09               LD   b,(iy+9)   
0243   DD E9                  JP   (ix)   
0245                             ; { block start                 ; 4
0245                             ; -- block*
0245                LPAREN_:      
0245                LBRACE_:      
0245                LBRACE:      
0245   CD B9 0C               CALL   parseBlock   
0248   DD E9                  JP   (ix)   
024A                             ; ~ char                        8
024A                TILDE_:      
024A                TILDE:       
024A                CHAR:        
024A   03                     INC   bc   ; point to next char
024B   0A                     LD   a,(bc)   
024C   6F                     LD   l,a   
024D   26 00                  LD   h,0   
024F   E5                     PUSH   hl   
0250   DD E9                  JP   (ix)   
0252                             ; & and                          11
0252                             ; a b -- c
0252                PIPE_:       
0252                PIPE:        
0252                OR:          
0252   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0253   E1                     POP   hl   
0254   7B                     LD   a,e   
0255   B5                     OR   l   
0256   6F                     LD   l,a   
0257   7A                     LD   a,d   
0258   B4                     OR   h   
0259   18 4D                  JR   and1   
025B                             ; := define                     12
025B                SEMICOLON_:      
025B                SEMICOLON:      
025B                DEFINEEND:      
025B   2A F4 23               LD   hl,(vDefine)   ; hl = define*
025E   7D                     LD   a,l   
025F   B4                     OR   h   
0260   28 0B                  JR   z,defineEnd1   
0262   11 00 00               LD   de,NUL   ; set vDefine=NUL
0265   ED 53 F4 23            LD   (vDefine),de   
0269   D1                     POP   de   ; de = value
026A   C3 40 03               JP   assign1   
026D                DEFINEEND1:      
026D   DD E9                  JP   (ix)   
026F                             ; _ func                        14
026F                             ; -- func*
026F                COLON_:      
026F                COLON:       
026F   03                     INC   bc   ; arg_list must ve immediately followed by {
0270   0A                     LD   a,(bc)   
0271   FE 3D                  CP   "="   ; := definition
0273   28 07                  JR   z,defineStart   
0275   0B                     DEC   bc   
0276   21 01 00               LD   hl,1   
0279   C3 63 0F               JP   error   
027C                DEFINESTART:      
027C   E1                     POP   hl   ; discard variable value
027D   2A F6 23               LD   hl,(vPointer)   ; vDefine = vPointer
0280   22 F4 23               LD   (vDefine),hl   
0283   DD E9                  JP   (ix)   
0285                             ; [                             14
0285                LBRACK_:      
0285                LBRACK:      
0285                ARRAYSTART:      
0285   11 00 00               LD   de,0   ; create stack frame
0288   D5                     PUSH   de   ; push null for IP
0289   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
028C   FD 56 05               LD   d,(iy+5)   ; 
028F   D5                     PUSH   de   ; 
0290   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0293   FD 56 03               LD   d,(iy+3)   ; 
0296   D5                     PUSH   de   ; 
0297   FD E5                  PUSH   iy   ; push BP
0299   FD 21 00 00            LD   iy,0   ; BP = SP
029D   FD 39                  ADD   iy,sp   
029F   DD E9                  JP   (ix)   
02A1                             ; & and                          14
02A1                             ; a b -- c
02A1                AMPER_:      
02A1                AMPER:       
02A1                AND:         
02A1   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
02A2   E1                     POP   hl   
02A3   7B                     LD   a,e   
02A4   A5                     AND   l   
02A5   6F                     LD   l,a   
02A6   7A                     LD   a,d   
02A7   A4                     AND   h   
02A8                AND1:        
02A8   67                     LD   h,a   
02A9   E5                     PUSH   hl   
02AA   DD E9                  JP   (ix)   
02AC                             ;                               18
02AC                UPCASE_:      
02AC                UPCASE:      
02AC   0A                     LD   a,(bc)   ; a = identifier char
02AD   D6 41                  SUB   "A"   ; "A" = 0
02AF   18 05                  JR   ident1   
02B1                LOWCASE_:      
02B1                LOWCASE:      
02B1   0A                     LD   a,(bc)   
02B2   D6 61                  SUB   "a"   
02B4   C6 1A                  ADD   a,26   
02B6                IDENT1:      
02B6   87                     ADD   a,a   ; l = a * 2
02B7   6F                     LD   l,a   
02B8   26 23                  LD   h,msb(vars)   
02BA   22 F6 23               LD   (vPointer),hl   ; store address in setter
02BD   5E                     LD   e,(hl)   
02BE   23                     INC   hl   
02BF   56                     LD   d,(hl)   
02C0   D5                     PUSH   de   
02C1   DD E9                  JP   (ix)   
02C3                             ; index of an array, based on vDataWidth 22
02C3                             ; array* num -- value    ; also sets vPointer to address
02C3                HASH_:       
02C3                HASH:        
02C3                ARRAYINDEX:      
02C3   E1                     POP   hl   ; hl = index
02C4   D1                     POP   de   ; de = array
02C5   3A E6 23               LD   a,(vDataWidth)   ; a = data width
02C8   3D                     DEC   a   
02C9   28 01                  JR   z,arrayIndex1   
02CB                ARRAYINDEX0:      
02CB   29                     ADD   hl,hl   ; if data width = 2 then double
02CC                ARRAYINDEX1:      
02CC   19                     ADD   hl,de   ; add addr
02CD   22 F6 23               LD   (vPointer),hl   ; store address in setter
02D0   16 00                  LD   d,0   
02D2   5E                     LD   e,(hl)   
02D3   B7                     OR   a   ; check data width again
02D4   28 02                  JR   z,arrayIndex2   
02D6   23                     INC   hl   
02D7   56                     LD   d,(hl)   
02D8                ARRAYINDEX2:      
02D8   D5                     PUSH   de   
02D9   DD E9                  JP   (ix)   
02DB                PLUS_:       
02DB                             ; + add                         25
02DB                             ; a b -- c
02DB                PLUS:        
02DB                ADD:         
02DB   03                     INC   bc   
02DC   0A                     LD   a,(bc)   
02DD   FE 2B                  CP   "+"   ; ++ increment variable
02DF   20 04                  JR   nz,add1   
02E1   E1                     POP   hl   
02E2   23                     INC   hl   
02E3   18 57                  JR   assign0   
02E5                ADD1:        
02E5   0B                     DEC   bc   
02E6   D1                     POP   de   ; second term
02E7   E1                     POP   hl   ; first term
02E8   19                     ADD   hl,de   
02E9                ADD3:        
02E9   03                     INC   bc   
02EA   0A                     LD   a,(bc)   
02EB   FE 3D                  CP   "="   
02ED   28 04                  JR   z,add4   
02EF   0B                     DEC   bc   
02F0   E5                     PUSH   hl   
02F1   DD E9                  JP   (ix)   
02F3                ADD4:        
02F3   18 47                  JR   assign0   
02F5                STAR_:       
02F5   18 0A                  JR   star   
02F7                MINUS_:      
02F7   18 24                  JR   minus   
02F9                BANG_:       
02F9   18 50                  JR   bang   
02FB                EQ_:         
02FB   18 5E                  JR   eq   
02FD                GT_:         
02FD   18 69                  JR   gt   
02FF                LT_:         
02FF   18 71                  JR   lt   
0301                             ;********************** PAGE 2 END *********************************************
0301                             ;********************** PAGE 3 BEGIN (shorter ops) *****************************
0301                             ;                               21
0301                STAR:        
0301                MUL:         
0301   D1                     POP   de   ; get first value
0302   E1                     POP   hl   
0303                MUL2:        
0303   C5                     PUSH   bc   ; Preserve the IP
0304   44 4D                  LD   bc,hl   ; bc = 2nd value
0306   21 00 00               LD   hl,0   
0309   3E 10                  LD   a,16   
030B                MUL3:        
030B   29                     ADD   hl,hl   
030C   CB 13                  RL   e   
030E   CB 12                  RL   d   
0310   30 04                  JR   nc,$+6   
0312   09                     ADD   hl,bc   
0313   30 01                  JR   nc,$+3   
0315   13                     INC   de   
0316   3D                     DEC   a   
0317   20 F2                  JR   nz,mul3   
0319   C1                     POP   bc   ; Restore the IP
031A   C3 E9 02               JP   add3   
031D                             ; - sub                          23
031D                             ; a b -- c
031D                MINUS:       
031D   03                     INC   bc   ; check if sign of a number
031E   0A                     LD   a,(bc)   
031F   0B                     DEC   bc   
0320   FE 30                  CP   "0"   
0322   38 05                  JR   c,sub   
0324   FE 3A                  CP   "9"+1   
0326   DA 4C 04               JP   c,num   
0329                SUB:         ; Subtract the value 2nd on stack from top of stack
0329   03                     INC   bc   
032A   FE 2D                  CP   "-"   
032C   20 04                  JR   nz,sub1   
032E   E1                     POP   hl   
032F   2B                     DEC   hl   
0330   18 0A                  JR   assign0   
0332                SUB1:        
0332   0B                     DEC   bc   
0333   D1                     POP   de   
0334   E1                     POP   hl   
0335   B7                     OR   a   
0336   ED 52                  SBC   hl,de   
0338   18 AF                  JR   add3   
033A                             ; value _oldValue --            ; uses address in vPointer 15
033A                ASSIGN:      
033A   E1                     POP   hl   ; discard last accessed value
033B   E1                     POP   hl   ; hl = new value
033C                ASSIGN0:      
033C   EB                     EX   de,hl   ; de = new value
033D   2A F6 23               LD   hl,(vPointer)   
0340                ASSIGN1:      ; entry point from defineEnd
0340   73                     LD   (hl),e   
0341   3A E6 23               LD   a,(vDataWidth)   
0344   3D                     DEC   a   ; is it byte?
0345   28 02                  JR   z,assign2   
0347   23                     INC   hl   
0348   72                     LD   (hl),d   
0349                ASSIGN2:      
0349   DD E9                  JP   (ix)   
034B                BANG:        ; logical invert, any non zero value
034B   03                     INC   bc   
034C   0A                     LD   a,(bc)   
034D   FE 3D                  CP   "="   
034F   20 04                  JR   nz,not   
0351   E1                     POP   hl   
0352   D1                     POP   de   
0353   18 33                  JR   notequals   
0355                NOT:         
0355   0B                     DEC   bc   
0356   21 00 00               LD   hl,0   ; is considered true
0359   18 0A                  JR   eq1   
035B                EQ:          
035B   CD FB 0D               CALL   jumpTable   
035E   3D                     DB   "="   
035F   64                     DB   lsb(eq0_)   
0360   00                     DB   NUL   
0361   C3 3A 03               JP   assign   
0364                EQ0_:        
0364   E1                     POP   hl   
0365                EQ1:         
0365   D1                     POP   de   
0366   18 19                  JR   equals   
0368                GT:          
0368   03                     INC   bc   
0369   0A                     LD   a,(bc)   
036A   FE 3E                  CP   ">"   
036C   28 4A                  JR   z,shiftRight   
036E   D1                     POP   de   
036F   E1                     POP   hl   
0370   18 08                  JR   lt1   
0372                LT:          
0372   03                     INC   bc   
0373   0A                     LD   a,(bc)   
0374   FE 3C                  CP   "<"   
0376   28 30                  JR   z,shiftLeft   
0378   E1                     POP   hl   
0379   D1                     POP   de   
037A                LT1:         
037A   FE 3D                  CP   "="   
037C   28 11                  JR   z,lessthaneq   
037E   0B                     DEC   bc   
037F   18 13                  JR   lessthan   
0381                             ; hl = value1, de = value2
0381                             ; hl = result
0381                EQUALS:      
0381   B7                     OR   a   ; reset the carry flag
0382   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0384   28 16                  JR   z,true1   
0386   18 1A                  JR   false1   
0388                NOTEQUALS:      
0388   B7                     OR   a   ; reset the carry flag
0389   ED 52                  SBC   hl,de   
038B   20 0F                  JR   nz,true1   
038D   18 13                  JR   false1   
038F                             ; hl = value1 de = value2
038F                             ; hl = result
038F                LESSTHANEQ:      
038F   B7                     OR   a   
0390   ED 52                  SBC   hl,de   
0392   18 05                  JR   lessthan1   
0394                             ; hl = value1 de = value2
0394                             ; hl = result
0394                LESSTHAN:      
0394   B7                     OR   a   
0395   ED 52                  SBC   hl,de   
0397   28 09                  JR   z,false1   
0399                LESSTHAN1:      
0399   FA A2 03               JP   m,false1   
039C                TRUE1:       
039C   21 FF FF               LD   hl,TRUE   
039F   E5                     PUSH   hl   
03A0   DD E9                  JP   (ix)   
03A2                NULL1:       
03A2                FALSE1:      
03A2   21 00 00               LD   hl,FALSE   
03A5   E5                     PUSH   hl   
03A6   DD E9                  JP   (ix)   
03A8                             ; shiftLeft                     15
03A8                             ; value count -- value2          shift left count places
03A8                SHIFTLEFT:      
03A8   50 59                  LD   de,bc   ; save IP
03AA   C1                     POP   bc   ; bc = count
03AB   41                     LD   b,c   ; b = loop counter
03AC   E1                     POP   hl   
03AD   04                     INC   b   ; test for counter=0 case
03AE   18 01                  JR   shiftLeft2   
03B0                SHIFTLEFT1:      
03B0   29                     ADD   hl,hl   ; left shift hl
03B1                SHIFTLEFT2:      
03B1   10 FD                  DJNZ   shiftLeft1   
03B3   E5                     PUSH   hl   
03B4   42 4B                  LD   bc,de   ; restore IP
03B6   DD E9                  JP   (ix)   
03B8                             ; shiftRight                    16
03B8                             ; value count -- value2          shift left count places
03B8                SHIFTRIGHT:      
03B8   50 59                  LD   de,bc   ; save IP
03BA   C1                     POP   bc   ; bc = count
03BB   41                     LD   b,c   ; b = loop counter
03BC   E1                     POP   hl   
03BD   04                     INC   b   ; test for counter=0 case
03BE   18 04                  JR   shiftRight2   
03C0                SHIFTRIGHT1:      
03C0   CB 3C                  SRL   h   ; right shift hl
03C2   CB 1D                  RR   l   
03C4                SHIFTRIGHT2:      
03C4   10 FA                  DJNZ   shiftRight1   
03C6   E5                     PUSH   hl   
03C7   42 4B                  LD   bc,de   ; restore IP
03C9   DD E9                  JP   (ix)   
03CB                             ; $ hex                         ; 22
03CB                DOLLAR:      
03CB                HEXNUM:      
03CB   21 00 00               LD   hl,0   ; Clear hl to accept the number
03CE                HEXNUM1:      
03CE   03                     INC   bc   
03CF   0A                     LD   a,(bc)   ; Get the character which is a numeral
03D0   CB 77                  BIT   6,a   ; is it uppercase alpha?
03D2   28 02                  JR   z,hexnum2   ; no a decimal
03D4   D6 07                  SUB   7   ; sub 7  to make $a - $F
03D6                HEXNUM2:      
03D6   D6 30                  SUB   $30   ; form decimal digit
03D8   DA 6E 04               JP   c,num2   
03DB   FE 10                  CP   $0F+1   
03DD   D2 6E 04               JP   nc,num2   
03E0   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
03E1   29                     ADD   hl,hl   ; 4X
03E2   29                     ADD   hl,hl   ; 8X
03E3   29                     ADD   hl,hl   ; 16X
03E4   85                     ADD   a,l   ; add into bottom of hl
03E5   6F                     LD   l,a   
03E6   18 E6                  JR   hexnum1   
03E8                             ; if                            23
03E8                             ; condition then -- value
03E8                QUESTION:      
03E8                IF:          
03E8   03                     INC   bc   
03E9   0A                     LD   a,(bc)   
03EA   FE 3F                  CP   "?"   
03EC   28 06                  JR   z,ifte   
03EE   0B                     DEC   bc   
03EF   11 00 00               LD   de,NUL   ; NUL pointer for else
03F2   18 01                  JR   ifte1   
03F4                             ; ifte
03F4                             ; condition then else -- value
03F4                IFTE:        
03F4   D1                     POP   de   ; de = else
03F5                IFTE1:       
03F5   E1                     POP   hl   ; hl = then
03F6   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
03F7   7C                     LD   a,h   
03F8   B5                     OR   l   
03F9   E1                     POP   hl   ; hl = then
03FA   CA E5 0B               JP   z,go1   ; if z de = else
03FD   EB                     EX   de,hl   ; condition = false, de = then
03FE   C3 E5 0B               JP   go1   
0401                             ; \                             19
0401                BACKSLASH:      
0401                LAMBDA:      
0401   DD E5                  PUSH   ix   
0403   CD 83 0C               CALL   parseArgs   
0406                LAMBDA1:      
0406   03                     INC   bc   ; arg_list must ve immediately followed by {
0407   0A                     LD   a,(bc)   
0408   FE 21                  CP   " "+1   ; skip white space
040A   38 FA                  JR   c,lambda1   
040C   FE 7B                  CP   "{"   
040E   28 06                  JR   z,lambda2   
0410   21 02 00               LD   hl,2   ; error 2: parse error
0413   C3 63 0F               JP   error   
0416                LAMBDA2:      
0416   CD B9 0C               CALL   parseBlock   
0419   CD 23 0D               CALL   createFunc   
041C   E1                     POP   hl   
041D   DD E1                  POP   ix   
041F   E5                     PUSH   hl   
0420   DD E9                  JP   (ix)   
0422                             ;                               32
0422                DIV:         
0422   D1                     POP   de   
0423   E1                     POP   hl   
0424   C5                     PUSH   bc   ; preserve the IP
0425   44 4D                  LD   bc,hl   
0427   CD 33 04               CALL   divide   
042A   EB                     EX   de,hl   
042B   ED 53 F8 23            LD   (vRemain),de   
042F   C1                     POP   bc   
0430   C3 E9 02               JP   add3   
0433                             ; division subroutine.
0433                             ; bc: divisor, de: dividend, hl: remainder
0433                DIVIDE:      
0433   21 00 00               LD   hl,0   ; zero the remainder
0436   3E 10                  LD   a,16   ; loop counter
0438                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0438   CB 21                  SLA   c   
043A   CB 10                  RL   b   
043C   ED 6A                  ADC   hl,hl   
043E   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0440   38 03                  JR   c,divide2   
0442   0C                     INC   c   
0443   18 01                  JR   divide3   
0445                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0445   19                     ADD   hl,de   
0446                DIVIDE3:      
0446   3D                     DEC   a   
0447   20 EF                  JR   nz,divide1   
0449   50 59                  LD   de,bc   ; result from bc to de
044B   C9                     RET      
044C                             ; 0..9 number                   37
044C                NUM:         
044C   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
044F   0A                     LD   a,(bc)   ; Get numeral or -
0450   FE 2D                  CP   "-"   
0452   20 01                  JR   nz,num0   
0454   03                     INC   bc   ; move to next char, no flags affected
0455                NUM0:        
0455   08                     EX   af,af'   ; save zero flag = 0 for later
0456                NUM1:        
0456   0A                     LD   a,(bc)   ; read digit
0457   D6 30                  SUB   "0"   ; less than 0?
0459   38 13                  JR   c,num2   ; not a digit, exit loop
045B   FE 0A                  CP   10   ; greater that 9?
045D   30 0F                  JR   nc,num2   ; not a digit, exit loop
045F   03                     INC   bc   ; inc IP
0460   54 5D                  LD   de,hl   ; multiply hl * 10
0462   29                     ADD   hl,hl   
0463   29                     ADD   hl,hl   
0464   19                     ADD   hl,de   
0465   29                     ADD   hl,hl   
0466   85                     ADD   a,l   ; add digit in a to hl
0467   6F                     LD   l,a   
0468   3E 00                  LD   a,0   
046A   8C                     ADC   a,h   
046B   67                     LD   h,a   
046C   18 E8                  JR   num1   
046E                NUM2:        
046E   0B                     DEC   bc   
046F   08                     EX   af,af'   ; restore zero flag
0470   20 07                  JR   nz,num3   
0472   EB                     EX   de,hl   ; negate the value of hl
0473   21 00 00               LD   hl,0   
0476   B7                     OR   a   ; jump to sub2
0477   ED 52                  SBC   hl,de   
0479                NUM3:        
0479   E5                     PUSH   hl   ; Put the number on the stack
047A   DD E9                  JP   (ix)   ; and process the next character
047C                             ; string                        ;38
047C                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
047C                GRAVE:       
047C                QUOTE:       
047C                DQUOTE:      
047C                STRING:      
047C   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
047F   23                     INC   hl   ; skip length field to start
0480   23                     INC   hl   
0481   E5                     PUSH   hl   ; save start of string
0482   0A                     LD   a,(bc)   
0483   5F                     LD   e,a   ; e = matching terminator
0484   03                     INC   bc   ; point to next char
0485   18 03                  JR   string2   
0487                STRING1:      
0487   77                     LD   (hl),a   
0488   23                     INC   hl   ; increase count
0489   03                     INC   bc   ; point to next char
048A                STRING2:      
048A   0A                     LD   a,(bc)   
048B   BB                     CP   e   ; is it the string terminator
048C   28 02                  JR   z,string3   
048E   18 F7                  JR   string1   
0490                STRING3:      
0490   AF                     XOR   a   ; write NUL to terminate string
0491   77                     LD   (hl),a   ; hl = end of string
0492   23                     INC   hl   
0493   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0496   2B                     DEC   hl   ; hl = end of string without terminator
0497   D1                     POP   de   ; de = start of string
0498   D5                     PUSH   de   ; return start of string
0499   B7                     OR   a   ; hl = length bytes, de = start of string
049A   ED 52                  SBC   hl,de   
049C   EB                     EX   de,hl   
049D   2B                     DEC   hl   ; write length bytes to length field at start - 2
049E   72                     LD   (hl),d   
049F   2B                     DEC   hl   
04A0   73                     LD   (hl),e   
04A1   DD E9                  JP   (ix)   
04A3                             ; %a .. %z                      43
04A3                             ; -- value
04A3                             ; returns value of arg
04A3                PERCENT:      
04A3                ARG:         
04A3   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
04A6   FD 56 05               LD   d,(iy+5)   
04A9   EB                     EX   de,hl   
04AA   7D                     LD   a,l   ; arg_list* == null, skip
04AB   B4                     OR   h   
04AC   28 1A                  JR   z,arg0a   
04AE   23                     INC   hl   ; a = num_args, hl = arg_list*
04AF   7E                     LD   a,(hl)   
04B0   23                     INC   hl   
04B1   B7                     OR   a   
04B2   28 14                  JR   z,arg0a   ; num_args == 0, skip
04B4   5F                     LD   e,a   ; e = a = num_args
04B5   03                     INC   bc   ; a = next char = dollar_name
04B6   0A                     LD   a,(bc)   
04B7   C5                     PUSH   bc   ; save IP
04B8   43                     LD   b,e   ; b = e = num_args
04B9   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
04BC   FD 56 03               LD   d,(iy+3)   
04BF                ARG0:        
04BF   1B                     DEC   de   ; a = dollar_name, de = next arg*
04C0   1B                     DEC   de   
04C1   BE                     CP   (hl)   
04C2   28 09                  JR   z,arg1   
04C4   23                     INC   hl   ; hl = next arg_list*
04C5   10 F8                  DJNZ   arg0   
04C7   C1                     POP   bc   ; no match, restore IP
04C8                ARG0A:       
04C8   11 00 00               LD   de,0   ; return 0
04CB   18 08                  JR   arg1a   
04CD                ARG1:        
04CD   C1                     POP   bc   ; restore IP
04CE   EB                     EX   de,hl   ; hl = arg*
04CF   22 F6 23               LD   (vPointer),hl   ; store arg* in setter
04D2   5E                     LD   e,(hl)   
04D3   23                     INC   hl   
04D4   56                     LD   d,(hl)   ; de = arg
04D5                ARG1A:       
04D5   D5                     PUSH   de   ; push arg
04D6   DD E9                  JP   (ix)   
04D8                             ;********************** PAGE 3 END *********************************************
04D8                          ALIGN   $100   
0500                             ;********************** PAGE 5X BEGIN *********************************************
0500                             ;                               67
0500                DOT:         
0500   CD FB 0D               CALL   jumpTable   
0503   61                     DB   "a"   ; .a print array
0504   BC                     DB   lsb(dotArray)   
0505   63                     DB   "c"   ; .c print char
0506   D2                     DB   lsb(dotChar_)   
0507   73                     DB   "s"   ; .s print string
0508   B8                     DB   lsb(dotString_)   
0509   78                     DB   "x"   ; .x print x chars
050A   D7                     DB   lsb(dotXChars_)   
050B   00                     DB   NUL   ; .  print number
050C   C3 0F 05               JP   dotNumber_   
050F                             ; /bd buffer decimal
050F                             ; value --
050F                DOTNUMBER_:      
050F   3A E8 23               LD   a,(vNumBase)   
0512   FE 10                  CP   16   
0514   CA 80 05               JP   z,dotHex   ; else falls through
0517   C3 1A 05               JP   dotDec   
051A                             ; print decimal                 ; 70
051A                             ; value --
051A                DOTDEC:      
051A   ED 5B EC 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
051E   D9                     EXX      
051F   E1                     POP   hl   ; hl = value
0520   CD 34 05               CALL   dotDec0   
0523   D9                     EXX      ; de = buffer*' bc = IP
0524   3E 20                  LD   a," "   ; append space to buffer
0526   12                     LD   (de),a   
0527   1C                     INC   e   ; buffer*++, wraparound
0528   CC C5 0D               CALL   z,flushBuffer   
052B   2A EC 23               LD   hl,(vBufPtr)   ; hl = buffer*
052E   ED 53 EC 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
0532   DD E9                  JP   (ix)   
0534                             ; hl = value
0534                             ; de' = buffer*
0534                             ; a, bc, de, hl destroyed
0534                DOTDEC0:      
0534   CB 7C                  BIT   7,h   
0536   28 0C                  JR   z,dotDec1   
0538   D9                     EXX      
0539   3E 2D                  LD   a,"-"   
053B   12                     LD   (de),a   
053C   13                     INC   de   
053D   D9                     EXX      
053E   AF                     XOR   a   
053F   95                     SUB   l   
0540   6F                     LD   l,a   
0541   9F                     SBC   a,a   
0542   94                     SUB   h   
0543   67                     LD   h,a   
0544                DOTDEC1:      
0544   0E 00                  LD   c,0   ; leading zeros flag = false
0546   11 F0 D8               LD   de,-10000   
0549   CD 64 05               CALL   dotDec2   
054C   11 18 FC               LD   de,-1000   
054F   CD 64 05               CALL   dotDec2   
0552   11 9C FF               LD   de,-100   
0555   CD 64 05               CALL   dotDec2   
0558   1E F6                  LD   e,-10   
055A   CD 64 05               CALL   dotDec2   
055D   0C                     INC   c   ; flag = true for at least digit
055E   1E FF                  LD   e,-1   
0560   CD 64 05               CALL   dotDec2   
0563   C9                     RET      
0564                DOTDEC2:      
0564   06 2F                  LD   b,"0"-1   
0566                DOTDEC3:      
0566   04                     INC   b   
0567   19                     ADD   hl,de   
0568   38 FC                  JR   c,dotDec3   
056A   ED 52                  SBC   hl,de   
056C   3E 30                  LD   a,"0"   
056E   B8                     CP   b   
056F   20 05                  JR   nz,dotDec4   
0571   AF                     XOR   a   
0572   B1                     OR   c   
0573   C8                     RET   z   
0574   18 01                  JR   dotDec5   
0576                DOTDEC4:      
0576   0C                     INC   c   
0577                DOTDEC5:      
0577   78                     LD   a,b   
0578   D9                     EXX      
0579   12                     LD   (de),a   
057A   1C                     INC   e   
057B   CC C5 0D               CALL   z,flushBuffer   
057E   D9                     EXX      
057F   C9                     RET      
0580                             ; buffer hex                    37
0580                             ; value --
0580                DOTHEX:      
0580   E1                     POP   hl   ; hl = value
0581   ED 5B EC 23            LD   de,(vBufPtr)   
0585   3E 24                  LD   a,"$"   ; # prefix
0587   12                     LD   (de),a   
0588   1C                     INC   e   ; buffer*++, wraparound
0589   CC C5 0D               CALL   z,flushBuffer   
058C   7C                     LD   a,h   
058D   CD A1 05               CALL   dotHex1   
0590   7D                     LD   a,l   
0591   CD A1 05               CALL   dotHex1   
0594   3E 20                  LD   a," "   ; append space to buffer
0596   12                     LD   (de),a   
0597   1C                     INC   e   ; buffer*++, wraparound
0598   CC C5 0D               CALL   z,flushBuffer   
059B   ED 53 EC 23            LD   (vBufPtr),de   
059F   DD E9                  JP   (ix)   
05A1                DOTHEX1:      
05A1   F5                     PUSH   af   
05A2   1F                     RRA      
05A3   1F                     RRA      
05A4   1F                     RRA      
05A5   1F                     RRA      
05A6   CD AA 05               CALL   dotHex2   
05A9   F1                     POP   af   
05AA                DOTHEX2:      
05AA   E6 0F                  AND   0x0F   
05AC   C6 90                  ADD   a,0x90   
05AE   27                     DAA      
05AF   CE 40                  ADC   a,0x40   
05B1   27                     DAA      
05B2   12                     LD   (de),a   
05B3   1C                     INC   e   ; buffer*++, wraparound
05B4   CC C5 0D               CALL   z,flushBuffer   
05B7   C9                     RET      
05B8                             ; /bs buffered string
05B8                             ; string* --
05B8                DOTSTRING_:      
05B8   E1                     POP   hl   ; hl = string*
05B9   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
05BD   18 06                  JR   dotString1   
05BF                DOTSTRING0:      
05BF   12                     LD   (de),a   ; a -> buffer*
05C0   1C                     INC   e   ; buffer*++, wraparound
05C1   CC C5 0D               CALL   z,flushBuffer   
05C4   23                     INC   hl   
05C5                DOTSTRING1:      
05C5   7E                     LD   a,(hl)   ; a <- string*
05C6   B7                     OR   a   ; if NUL exit loop
05C7   20 F6                  JR   nz,dotString0   
05C9   2A EC 23               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
05CC   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
05D0   DD E9                  JP   (ix)   
05D2                             ; .c print char
05D2                             ; char --
05D2                DOTCHAR_:      
05D2   21 01 00               LD   hl,1   
05D5   18 01                  JR   dotXChars0   
05D7                             ; .x print x chars
05D7                             ; char length --
05D7                DOTXCHARS_:      
05D7   E1                     POP   hl   ; hl = length
05D8                DOTXCHARS0:      
05D8   D1                     POP   de   ; a' = char
05D9   7B                     LD   a,e   
05DA   08                     EX   af,af'   
05DB   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
05DF   18 08                  JR   dotXChars2   
05E1                DOTXCHARS1:      
05E1   08                     EX   af,af'   
05E2   12                     LD   (de),a   
05E3   08                     EX   af,af'   
05E4   1C                     INC   e   ; buffer*++, wraparound
05E5   CC C5 0D               CALL   z,flushBuffer   
05E8   2B                     DEC   hl   
05E9                DOTXCHARS2:      
05E9   7D                     LD   a,l   
05EA   B4                     OR   h   
05EB   20 F4                  JR   nz,dotXChars1   
05ED   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*'
05F1   DD E9                  JP   (ix)   
05F3                             ;********************** PAGE 5 END *********************************************
05F3                          ALIGN   $100   
0600                             ;********************** PAGE 6 BEGIN *********************************************
0600                SLASH:       
0600                COMMAND:      
0600   03                     INC   bc   
0601   0A                     LD   a,(bc)   
0602   FE 2F                  CP   "/"   ; // comment
0604   CA 93 06               JP   z,comment   
0607   0B                     DEC   bc   
0608   CD E7 0D               CALL   commandTable   
060B   C4                     DB   lsb(command_a_)   
060C   88                     DB   lsb(command_b_)   
060D   42                     DB   lsb(command_nop_)   
060E   44                     DB   lsb(decimal_)   
060F   42                     DB   lsb(command_nop_)   
0610   FA                     DB   lsb(command_f_)   
0611   42                     DB   lsb(command_nop_)   
0612   56                     DB   lsb(hexadecimal_)   
0613   7F                     DB   lsb(command_i_)   
0614   42                     DB   lsb(command_nop_)   
0615   5C                     DB   lsb(key_)   
0616   42                     DB   lsb(command_nop_)   
0617   26                     DB   lsb(command_m_)   
0618   42                     DB   lsb(command_nop_)   
0619   5F                     DB   lsb(output_)   
061A   29                     DB   lsb(command_p_)   
061B   30                     DB   lsb(command_q_)   
061C   39                     DB   lsb(command_r_)   
061D   3C                     DB   lsb(command_s_)   
061E   62                     DB   lsb(true_)   
061F   42                     DB   lsb(command_nop_)   
0620   3F                     DB   lsb(command_v_)   
0621   65                     DB   lsb(words_)   
0622   B9                     DB   lsb(xor_)   
0623   42                     DB   lsb(command_nop_)   
0624   42                     DB   lsb(command_nop_)   
0625   4C                     DB   lsb(div_)   
0626                             ; 2
0626                COMMAND_M_:      
0626   C3 4B 07               JP   command_m   
0629                             ; 4
0629                COMMAND_P_:      
0629   CD FB 0D               CALL   jumpTable   
062C   00                     DB   NUL   
062D   C3 50 06               JP   error1_   
0630                             ; 6
0630                COMMAND_Q_:      
0630   CD FB 0D               CALL   jumpTable   
0633   74                     DB   "t"   ; /qt quit
0634   9C                     DB   lsb(quit_)   
0635   00                     DB   NUL   
0636   C3 50 06               JP   error1_   
0639                             ; 2
0639                COMMAND_R_:      
0639   C3 57 07               JP   command_r   
063C                             ; 2
063C                COMMAND_S_:      
063C   C3 70 07               JP   command_s   
063F                             ; 2
063F                COMMAND_V_:      
063F   C3 7F 07               JP   command_v   
0642                             ; 2
0642                COMMAND_NOP_:      
0642   DD E9                  JP   (ix)   
0644                             ; 5
0644                DECIMAL_:      
0644   21 0A 00               LD   hl,10   
0647                DECIMAL1:      
0647   22 E8 23               LD   (vNumBase),hl   
064A   DD E9                  JP   (ix)   
064C                             ; 3
064C                DIV_:        
064C   00                     DB   NUL   
064D   C3 22 04               JP   div   
0650                             ; 3
0650                ERROR1_:      
0650   21 01 00               LD   hl,1   ; error 1: unknown command
0653   C3 63 0F               JP   error   
0656                             ; 3
0656                HEXADECIMAL_:      
0656   21 10 00               LD   hl,16   
0659   C3 47 06               JP   decimal1   
065C                             ; 2
065C                KEY_:        
065C   C3 00 07               JP   key   
065F                             ; 2
065F                OUTPUT_:      
065F   C3 09 07               JP   output   
0662                             ; 2
0662                TRUE_:       
0662   C3 9C 03               JP   true1   
0665                             ; 2
0665                WORDS_:      
0665   C3 71 06               JP   words   
0668                             ; 2
0668                ADDROF_:      
0668   C3 06 0B               JP   addrOf   
066B                             ; 2
066B                ARRAYITER_:      
066B   C3 3E 08               JP   arrayIter   
066E                             ; 3
066E                             ; /by
066E                COLDSTART_:      
066E   C3 AC 0E               JP   coldStart   
0671                             ; 4
0671                             ; /w
0671                WORDS:       
0671   21 02 00               LD   hl,2   
0674   C3 7A 06               JP   bytes1   
0677                             ; 6
0677                             ; /b
0677                BYTES_:      
0677   21 01 00               LD   hl,1   
067A                BYTES1:      
067A   22 E6 23               LD   (vDataWidth),hl   
067D   DD E9                  JP   (ix)   
067F                             ; 6
067F                COMMAND_I_:      
067F   CD FB 0D               CALL   jumpTable   
0682   6E                     DB   "n"   ; /in input
0683   A6                     DB   lsb(input_)   
0684   00                     DB   NUL   
0685   C3 50 06               JP   error1_   
0688                             ; 8
0688                COMMAND_B_:      
0688   CD FB 0D               CALL   jumpTable   
068B   72                     DB   "r"   ; /br break
068C   D3                     DB   lsb(break_)   
068D   79                     DB   "y"   ; /by cold boot
068E   6E                     DB   lsb(coldStart_)   
068F   00                     DB   NUL   
0690   C3 77 06               JP   bytes_   ; /b bytes
0693                             ; 8
0693                             ; //
0693                COMMENT:      
0693   03                     INC   bc   ; point to next char
0694   0A                     LD   a,(bc)   
0695   FE 20                  CP   " "   ; terminate on any char less than SP
0697   30 FA                  JR   nc,comment   
0699   0B                     DEC   bc   
069A   DD E9                  JP   (ix)   
069C                             ; 10
069C                             ; /qt
069C                             ; bool --
069C                QUIT_:       
069C   E1                     POP   hl   ; hl = condition, exit if true
069D   7D                     LD   a,l   
069E   B4                     OR   h   
069F   20 02                  JR   nz,quit1   
06A1   DD E9                  JP   (ix)   
06A3                QUIT1:       
06A3   C3 77 0B               JP   blockEnd   
06A6                             ; 11
06A6                             ; Z80 port input
06A6                             ; port -- value
06A6                INPUT_:      
06A6   E1                     POP   hl   
06A7   59                     LD   e,c   ; save IP
06A8   4D                     LD   c,l   
06A9   ED 68                  IN   l,(c)   
06AB   26 00                  LD   h,0   
06AD   4B                     LD   c,e   ; restore IP
06AE   E5                     PUSH   hl   
06AF   DD E9                  JP   (ix)   
06B1                             ; 10
06B1                             ; /as size of an array, num elements, ignores vDataWidth :-/
06B1                             ; array* -- num
06B1                ARRAYSIZE_:      
06B1   E1                     POP   hl   
06B2   2B                     DEC   hl   ; msb size
06B3   56                     LD   d,(hl)   
06B4   2B                     DEC   hl   ; lsb size
06B5   5E                     LD   e,(hl)   
06B6   D5                     PUSH   de   
06B7   DD E9                  JP   (ix)   
06B9                             ; 12
06B9                XOR_:        
06B9   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
06BA                XOR1:        
06BA   E1                     POP   hl   
06BB   7B                     LD   a,e   
06BC   AD                     XOR   l   
06BD   6F                     LD   l,a   
06BE   7A                     LD   a,d   
06BF   AC                     XOR   h   
06C0   67                     LD   h,a   
06C1   E5                     PUSH   hl   
06C2   DD E9                  JP   (ix)   
06C4                             ; 12
06C4                COMMAND_A_:      
06C4   CD FB 0D               CALL   jumpTable   
06C7   62                     DB   "b"   ; /ab absolute
06C8   ED                     DB   lsb(absolute_)   
06C9   64                     DB   "d"   ; /ad address of
06CA   68                     DB   lsb(addrOf_)   
06CB   69                     DB   "i"   ; /ad address of
06CC   6B                     DB   lsb(arrayIter_)   
06CD   73                     DB   "s"   ; /as array size
06CE   B1                     DB   lsb(arraySize_)   
06CF   00                     DB   NUL   
06D0   C3 50 06               JP   error1_   
06D3                             ; 13
06D3                             ; /br break from loop
06D3                             ; --
06D3                BREAK_:      
06D3                BREAK:       
06D3   E1                     POP   hl   ; hl = condition, break if false
06D4   7D                     LD   a,l   
06D5   B4                     OR   h   
06D6   28 02                  JR   z,break1   
06D8   DD E9                  JP   (ix)   
06DA                BREAK1:      
06DA   FD 5D                  LD   e,iyl   ; get block* just under stack frame
06DC   FD 54                  LD   d,iyh   
06DE   21 08 00               LD   hl,8   
06E1   19                     ADD   hl,de   
06E2   23                     INC   hl   
06E3   23                     INC   hl   
06E4   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
06E7   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
06EA   C3 77 0B               JP   blockEnd   
06ED                             ; 14
06ED                             ; /ab absolute
06ED                             ; num -- num
06ED                ABSOLUTE_:      
06ED   E1                     POP   hl   
06EE   CB 7C                  BIT   7,h   
06F0   C8                     RET   z   
06F1   AF                     XOR   a   
06F2   95                     SUB   l   
06F3   6F                     LD   l,a   
06F4   9F                     SBC   a,a   
06F5   94                     SUB   h   
06F6   67                     LD   h,a   
06F7   E5                     PUSH   hl   
06F8   DD E9                  JP   (ix)   
06FA                             ; 2
06FA                COMMAND_F_:      
06FA   18 16                  JR   command_f   
06FC                             ;********************** PAGE 6 END *********************************************
06FC                          ALIGN   $100   
0700                             ;********************** PAGE 7 BEGIN *********************************************
0700                             ; /k                              6
0700                KEY:         
0700   CD 81 00               CALL   getchar   
0703   26 00                  LD   h,0   
0705   6F                     LD   l,a   
0706   E5                     PUSH   hl   
0707   DD E9                  JP   (ix)   
0709                             ; /o Z80 port output               9
0709                             ; value port --
0709                OUTPUT:      
0709   E1                     POP   hl   
070A   59                     LD   e,c   ; save IP
070B   4D                     LD   c,l   
070C   E1                     POP   hl   
070D   ED 69                  OUT   (c),l   
070F   4B                     LD   c,e   ; restore IP
0710   DD E9                  JP   (ix)   
0712                COMMAND_F:      
0712   CD FB 0D               CALL   jumpTable   
0715   64                     DB   "d"   ; /fd fold
0716   36                     DB   lsb(fold_)   
0717   65                     DB   "e"   ; /fe forEach
0718   2B                     DB   lsb(forEach_)   
0719   6C                     DB   "l"   ; /fl flush output buffer
071A   2E                     DB   lsb(flush_)   
071B   73                     DB   "s"   ; /fs funcSrc
071C   39                     DB   lsb(funcSrc_)   
071D   74                     DB   "t"   ; /ft filter
071E   33                     DB   lsb(filter_)   
071F   31                     DB   "1"   
0720   3C                     DB   lsb(f1_)   
0721   32                     DB   "2"   
0722   3F                     DB   lsb(f2_)   
0723   33                     DB   "3"   
0724   42                     DB   lsb(f3_)   
0725   34                     DB   "4"   
0726   45                     DB   lsb(f4_)   
0727   00                     DB   NUL   
0728   C3 48 07               JP   false_   
072B                FOREACH_:      
072B   C3 37 0A               JP   forEach   
072E                             ; /fl flush
072E                             ; --
072E                FLUSH_:      
072E   CD C5 0D               CALL   flushBuffer   
0731   DD E9                  JP   (ix)   
0733                FILTER_:      
0733   C3 87 09               JP   filter   
0736                FOLD_:       
0736   C3 E5 09               JP   fold   
0739                FUNCSRC_:      
0739   C3 83 0A               JP   funcSrc   
073C                F1_:         
073C   C3 AC 0F               JP   f1   
073F                F2_:         
073F   C3 AC 0F               JP   f2   
0742                F3_:         
0742   C3 AC 0F               JP   f3   
0745                F4_:         
0745   C3 AC 0F               JP   f4   
0748                FALSE_:      
0748   C3 A2 03               JP   false1   
074B                COMMAND_M:      
074B   CD FB 0D               CALL   jumpTable   
074E   70                     DB   "p"   ; /mp map
074F   54                     DB   lsb(map_)   
0750   00                     DB   NUL   
0751   C3 50 06               JP   error1_   
0754                MAP_:        
0754   C3 45 09               JP   map   
0757                COMMAND_R:      
0757   CD FB 0D               CALL   jumpTable   
075A   63                     DB   "c"   ; /rc tail call optimisation
075B   64                     DB   lsb(recur_)   
075C   65                     DB   "e"   ; /re remainder
075D   6A                     DB   lsb(remain_)   
075E   67                     DB   "g"   ; /rg range src
075F   7C                     DB   lsb(rangeSrc_)   
0760   00                     DB   NUL   
0761   C3 50 06               JP   error1_   
0764                RECUR_:      
0764   E1                     POP   hl   
0765   22 F2 23               LD   (vRecur),hl   
0768   DD E9                  JP   (ix)   
076A                REMAIN_:      
076A   2A F8 23               LD   hl,(vRemain)   
076D   E5                     PUSH   hl   
076E   DD E9                  JP   (ix)   
0770                COMMAND_S:      
0770   CD FB 0D               CALL   jumpTable   
0773   69                     DB   "i"   
0774   79                     DB   lsb(stringIter_)   
0775   00                     DB   NUL   
0776   C3 50 06               JP   error1_   
0779                STRINGITER_:      
0779   C3 BF 08               JP   stringIter   
077C                RANGESRC_:      
077C   C3 C2 07               JP   rangeSrc   
077F                COMMAND_V:      
077F   CD FB 0D               CALL   jumpTable   
0782   62                     DB   "b"   
0783   A1                     DB   lsb(varBufPtr_)   
0784   68                     DB   "h"   
0785   AA                     DB   lsb(varHeapPtr_)   
0786   74                     DB   "t"   
0787   B3                     DB   lsb(varTIBPtr_)   
0788   42                     DB   "B"   
0789   92                     DB   lsb(constBufStart_)   
078A   48                     DB   "H"   
078B   97                     DB   lsb(constHeapStart_)   
078C   54                     DB   "T"   
078D   9C                     DB   lsb(constTIBStart_)   
078E   00                     DB   NUL   
078F   C3 50 06               JP   error1_   
0792                CONSTBUFSTART_:      
0792   11 00 22               LD   de,BUF   
0795   18 28                  JR   constant   
0797                CONSTHEAPSTART_:      
0797   11 20 24               LD   de,HEAP   
079A   18 23                  JR   constant   
079C                CONSTTIBSTART_:      
079C   11 00 21               LD   de,TIB   
079F   18 1E                  JR   constant   
07A1                VARBUFPTR_:      
07A1   ED 5B EC 23            LD   de,(vBufPtr)   
07A5   21 EC 23               LD   hl,vBufPtr   
07A8   18 12                  JR   variable   
07AA                VARHEAPPTR_:      
07AA   ED 5B F0 23            LD   de,(vHeapPtr)   
07AE   21 F0 23               LD   hl,vHeapPtr   
07B1   18 09                  JR   variable   
07B3                VARTIBPTR_:      
07B3   ED 5B EA 23            LD   de,(vTIBPtr)   
07B7   21 EA 23               LD   hl,vTIBPtr   
07BA   18 00                  JR   variable   
07BC                VARIABLE:      
07BC   22 F6 23               LD   (vPointer),hl   
07BF                CONSTANT:      
07BF   D5                     PUSH   de   
07C0   DD E9                  JP   (ix)   
07C2                             ;********************** PAGE 7 END *********************************************
07C2                             ;*******************************************************************
07C2                             ; Monty implementations
07C2                             ;*******************************************************************
07C2                             ; /rg rangeSrc
07C2                             ; begin end step -- src
07C2                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
07C2                RANGESRC:      ; range source: begin, end, step, local: L
07C2   CD E4 0B               CALL   go   
07C5   00 00                  DW   NUL   
07C7   D1 07                  DW   rangeSrcM_1872S1534   
07C9   CB 07                  DW   $+2   
07CB   01                     DB   1   
07CC   04 62 65 73 4C         .PSTR   "besL"   
07D1                RANGESRCM_1872S1534:      
07D1   7B                     DB   "{"   
07D2   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
07DD   5C 6B 74 7B            DB   "\\kt{"   
07E1   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
07E9   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
07EF   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
07F7   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
07FF   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
0809   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0811   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
0818   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
082C   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
0834   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
083B   7D                     DB   "}"   
083C   7D                     DB   "}"   
083D   00                     DB   0   
083E                             ; /ai arrayIter
083E                             ; array* -- src
083E                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
083E                ARRAYITER:      
083E   CD E4 0B               CALL   go   
0841   00 00                  DW   NUL   
0843   4B 08                  DW   arrayIterM_1891S1554   
0845   47 08                  DW   $+2   
0847   01                     DB   1   
0848   02 61 4C               .PSTR   "aL"   
084B                ARRAYITERM_1891S1554:      
084B   7B                     DB   "{"   
084C   5B 30 20 2F 74 20 25 61 2F 61 73 5D 20 25 4C 3D DB   "[0 /t %a/as] %L="   ; init mutable L [index active size]
085C   5C 6B 74 7B            DB   "\\kt{"   
0860   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0868   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
086E   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0876   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
087E   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
0885   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
088D   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
0896   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
08AD   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
08B5   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08BC   7D                     DB   "}"   
08BD   7D                     DB   "}"   
08BE   00                     DB   0   
08BF                             ; /si stringIter
08BF                             ; string* -- src
08BF                          ;*Macro unroll: FUNC stringIter, 1, "sL"
08BF                STRINGITER:      
08BF   CD E4 0B               CALL   go   
08C2   00 00                  DW   NUL   
08C4   CC 08                  DW   stringIterM_1910S1574   
08C6   C8 08                  DW   $+2   
08C8   01                     DB   1   
08C9   02 73 4C               .PSTR   "sL"   
08CC                STRINGITERM_1910S1574:      
08CC   7B                     DB   "{"   
08CD   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
08D7   5C 6B 74 7B            DB   "\\kt{"   
08DB   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
08E3   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
08EA   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
08F2   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
08FA   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
0901   2F 62 20 25 73 25 69 23 20 2F 77 20 25 63 3D DB   "/b %s%i# /w %c="   ; read byte at i, store in c as word
0910   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0918   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
091F   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
0933   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
093B   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0942   7D                     DB   "}"   
0943   7D                     DB   "}"   
0944   00                     DB   0   
0945                             ; /mp map
0945                             ; src func -- src1
0945                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
0945                MAP:         ; map: source, function
0945   CD E4 0B               CALL   go   
0948   00 00                  DW   NUL   
094A   52 09                  DW   mapM_1930S1596   
094C   4E 09                  DW   $+2   
094E   00                     DB   0   
094F   02 73 66               .PSTR   "sf"   
0952                MAPM_1930S1596:      
0952   7B                     DB   "{"   
0953   5C 6B 74 7B            DB   "\\kt{"   
0957   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
095F   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0963   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0968   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
0974   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
097D   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0984   7D                     DB   "}"   
0985   7D                     DB   "}"   
0986   00                     DB   0   
0987                             ; /ft filter
0987                             ; src pred -- src1
0987                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
0987                FILTER:      ; filter: source, predicate, local: T
0987   CD E4 0B               CALL   go   
098A   00 00                  DW   NUL   
098C   95 09                  DW   filterM_1944S1611   
098E   90 09                  DW   $+2   
0990   01                     DB   1   
0991   03 73 70 54            .PSTR   "spT"   
0995                FILTERM_1944S1611:      
0995   7B                     DB   "{"   
0996   5B 30 5D 25 54 3D      DB   "[0]%T="   
099C   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09A0   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09A4   5B                     DB   "["   
09A5   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
09B2   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
09BA   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
09BE   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
09C3   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
09D9   3F 3F                  DB   "??"   
09DB   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09E2   7D                     DB   "}"   
09E3   7D                     DB   "}"   
09E4   00                     DB   0   
09E5                             ; /fd fold
09E5                             ; reducer is a function like: \\da00bbLi4u
09E5                             ; src init reducer -- src1
09E5                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
09E5                FOLD:        ; src, init, reducer
09E5   CD E4 0B               CALL   go   
09E8   00 00                  DW   NUL   
09EA   F4 09                  DW   foldM_1963S1631   
09EC   EE 09                  DW   $+2   
09EE   01                     DB   1   
09EF   04 73 69 72 41         .PSTR   "sirA"   
09F4                FOLDM_1963S1631:      
09F4   7B                     DB   "{"   ; reducer: \\da00bbLi4u
09F5   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
09FC   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0A00   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0A04   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0A09   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
0A24   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0A2D   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A34   7D                     DB   "}"   
0A35   7D                     DB   "}"   
0A36   00                     DB   0   
0A37                             ; /fe forEach
0A37                             ; src proc --
0A37                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
0A37                FOREACH:      ; forEach: source, procedure, local: T
0A37   CD E4 0B               CALL   go   
0A3A   00 00                  DW   NUL   
0A3C   45 0A                  DW   forEachM_1977S1646   
0A3E   40 0A                  DW   $+2   
0A40   01                     DB   1   
0A41   03 73 70 54            .PSTR   "spT"   
0A45                FOREACHM_1977S1646:      
0A45   7B                     DB   "{"   
0A46   5B 30 5D 25 54 3D      DB   "[0]%T="   
0A4C   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
0A50   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
0A58   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0A5D   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0A6F   3F 3F                  DB   "??"   ; ifte:
0A71   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0A7A   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A81   7D                     DB   "}"   
0A82   00                     DB   0   
0A83                             ; ; /fs funcSrc
0A83                             ; ; func -- src
0A83                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0A83                FUNCSRC:      ; :f func or block
0A83   CD E4 0B               CALL   go   
0A86   00 00                  DW   NUL   
0A88   8F 0A                  DW   funcSrcM_1991S1661   
0A8A   8C 0A                  DW   $+2   
0A8C   00                     DB   0   
0A8D   01 66                  .PSTR   "f"   
0A8F                FUNCSRCM_1991S1661:      
0A8F   7B                     DB   "{"   
0A90   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0A94   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0A9C   5C 64 74 7B            DB   "\\dt{"   
0AA0   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0AB2   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0AB9   7D                     DB   "}"   
0ABA   7D                     DB   "}"   
0ABB   00                     DB   0   
0ABC                          ;*Macro unroll: FUNC dotArray, 2, "abc"
0ABC                DOTARRAY:      
0ABC   CD E4 0B               CALL   go   
0ABF   00 00                  DW   NUL   
0AC1   CA 0A                  DW   dotArrayM_2001S1672   
0AC3   C5 0A                  DW   $+2   
0AC5   02                     DB   2   
0AC6   03 61 62 63            .PSTR   "abc"   
0ACA                DOTARRAYM_2001S1672:      
0ACA   7B                     DB   "{"   
0ACB   60 5B 20 60 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 60 5D 60 2E 73 DB   "`[ `.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ `]`.s"   
0B02   7D                     DB   "}"   
0B03   00                     DB   0   
0B04                             ;*******************************************************************
0B04                             ; unused opcodes (reserved)
0B04                             ;*******************************************************************
0B04                UNDERSCORE:      
0B04                COMMA:       
0B04   DD E9                  JP   (ix)   
0B06                             ;*******************************************************************
0B06                             ; implementations
0B06                             ;*******************************************************************
0B06                             ; /ad addrOf                    24
0B06                             ; char -- addr
0B06                ADDROF:      
0B06   E1                     POP   hl   ; a = char
0B07   7D                     LD   a,l   
0B08   FE 7B                  CP   "z"+1   ; if a > z then exit
0B0A   30 19                  JR   nc,addrOf2   
0B0C   D6 41                  SUB   "A"   ; a - 65
0B0E   38 15                  JR   c,addrOf2   ; if < A then exit
0B10   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0B12   38 06                  JR   c,addrOf1   
0B14   D6 06                  SUB   "a"-("Z"+1)   
0B16   FE 1A                  CP   "Z"-"A"+1   
0B18   38 0B                  JR   c,addrOf2   ; if < a then exit
0B1A                ADDROF1:      
0B1A   87                     ADD   a,a   ; double a
0B1B   21 00 23               LD   hl,VARS   ; hl = VARS + a
0B1E   85                     ADD   a,l   
0B1F   6F                     LD   l,a   
0B20   3E 00                  LD   a,0   
0B22   8C                     ADC   a,h   
0B23   67                     LD   h,a   
0B24   E5                     PUSH   hl   
0B25                ADDROF2:      
0B25   DD E9                  JP   (ix)   
0B27                             ;                               51
0B27                RBRACK:      
0B27                ARRAYEND:      
0B27   FD 54                  LD   d,iyh   ; de = BP
0B29   FD 5D                  LD   e,iyl   
0B2B   ED 43 02 24            LD   (vTemp1),bc   ; save IP
0B2F   62 6B                  LD   hl,de   ; hl = de = BP
0B31   B7                     OR   a   
0B32   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0B34   CB 3C                  SRL   h   ; 
0B36   CB 1D                  RR   l   
0B38   44 4D                  LD   bc,hl   ; bc = count
0B3A   2A F0 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
0B3D   71                     LD   (hl),c   ; write num items in length word
0B3E   23                     INC   hl   
0B3F   70                     LD   (hl),b   
0B40   23                     INC   hl   ; hl = array[0], bc = count
0B41                             ; de = BP, hl = array[0], bc = count
0B41   18 15                  JR   arrayEnd3   
0B43                ARRAYEND1:      
0B43   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0B46   77                     LD   (hl),a   ; write lsb of array item
0B47   23                     INC   hl   ; move to msb of array item
0B48   3A E6 23               LD   a,(vDataWidth)   ; vDataWidth=1?
0B4B   3D                     DEC   a   
0B4C   28 05                  JR   z,arrayEnd2   
0B4E   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0B51   77                     LD   (hl),a   ; write msb of array item
0B52   23                     INC   hl   ; move to next word in array
0B53                ARRAYEND2:      
0B53   FD 2B                  DEC   iy   ; move to next word on stack
0B55   FD 2B                  DEC   iy   
0B57   0B                     DEC   bc   ; dec items count
0B58                ARRAYEND3:      
0B58   79                     LD   a,c   ; if not zero loop
0B59   B0                     OR   b   
0B5A   20 E7                  JR   nz,arrayEnd1   
0B5C   EB                     EX   de,hl   ; de = end of array, hl = BP
0B5D   F9                     LD   sp,hl   ; sp = BP
0B5E   E1                     POP   hl   ; de = end of array, hl = old BP
0B5F   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0B60   FD 62                  LD   iyh,d   
0B62   FD 6B                  LD   iyl,e   
0B64   D1                     POP   de   ; pop arg_list (discard)
0B65   D1                     POP   de   ; pop first_arg* (discard)
0B66   D1                     POP   de   ; pop IP (discard)
0B67   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = array[-2]
0B6B   13                     INC   de   
0B6C   13                     INC   de   
0B6D   D5                     PUSH   de   ; return array[0]
0B6E   22 F0 23               LD   (vHeapPtr),hl   ; move heap* to end of array
0B71   ED 4B 02 24            LD   bc,(vTemp1)   ; restore IP
0B75   DD E9                  JP   (ix)   
0B77                             ;                               58
0B77                RBRACE:      
0B77                BLOCKEND:      
0B77   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0B7A   FD 56 01               LD   d,(iy+1)   
0B7D   ED 53 02 24            LD   (vTemp1),de   
0B81   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0B84   FD 56 07               LD   d,(iy+7)   
0B87   ED 53 04 24            LD   (vTemp2),de   
0B8B   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0B8E   FD 56 03               LD   d,(iy+3)   
0B91   EB                     EX   de,hl   
0B92   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0B95   FD 56 01               LD   d,(iy+1)   
0B98   13                     INC   de   ; for carry flag <=
0B99   B7                     OR   a   
0B9A   ED 52                  SBC   hl,de   
0B9C   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0B9E   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0BA0   FD 5D                  LD   e,iyl   
0BA2   21 08 00               LD   hl,8   
0BA5   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0BA6   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0BA7   18 0C                  JR   blockEnd2   
0BA9                BLOCKEND1:      ; same scope
0BA9   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0BAC   FD 56 03               LD   d,(iy+3)   
0BAF   EB                     EX   de,hl   
0BB0   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0BB2   FD 5D                  LD   e,iyl   
0BB4   EB                     EX   de,hl   
0BB5                BLOCKEND2:      
0BB5   44 4D                  LD   bc,hl   ; bc = hl = BP
0BB7   B7                     OR   a   ; hl = BP - SP = count
0BB8   ED 72                  SBC   hl,sp   
0BBA   7D                     LD   a,l   
0BBB   B4                     OR   h   
0BBC   28 09                  JR   z,blockEnd3   
0BBE   C5                     PUSH   bc   ; bc = count, hl = BP
0BBF   44 4D                  LD   bc,hl   
0BC1   E1                     POP   hl   
0BC2   2B                     DEC   hl   ; hl = BP-1
0BC3   1B                     DEC   de   ; de = args*-1
0BC4   ED B8                  LDDR      
0BC6   13                     INC   de   
0BC7                BLOCKEND3:      
0BC7   EB                     EX   de,hl   ; sp = de = new tos*
0BC8   F9                     LD   sp,hl   
0BC9   ED 4B 04 24            LD   bc,(vTemp2)   
0BCD   FD 2A 02 24            LD   iy,(vTemp1)   
0BD1   ED 5B F2 23            LD   de,(vRecur)   ; de = recur vector
0BD5   7B                     LD   a,e   ; check for NUL
0BD6   B2                     OR   d   
0BD7   20 02                  JR   nz,blockEnd4   
0BD9   DD E9                  JP   (ix)   
0BDB                BLOCKEND4:      
0BDB   21 00 00               LD   hl,0   ; clear recur vector
0BDE   22 F2 23               LD   (vRecur),hl   
0BE1   C3 E5 0B               JP   go1   ; execute de
0BE4                             ; execute a block of code which ends with } 116
0BE4                             ; creates a root scope if BP == stack
0BE4                             ; else uses outer scope
0BE4                CARET:       
0BE4                GO:          
0BE4   D1                     POP   de   ; de = block*
0BE5                GO1:         
0BE5   7B                     LD   a,e   ; if block* == null, exit
0BE6   B2                     OR   d   
0BE7   20 02                  JR   nz,go2   
0BE9   DD E9                  JP   (ix)   
0BEB                GO2:         
0BEB   1A                     LD   a,(de)   
0BEC   FE 7B                  CP   "{"   
0BEE   28 06                  JR   z,goBlock   
0BF0   FE 28                  CP   "("   
0BF2   C2 29 0C               JP   nz,goFunc   
0BF5   D5                     PUSH   de   ; push de just before stack frame
0BF6                GOBLOCK:      
0BF6   ED 53 02 24            LD   (vTemp1),de   ; save de
0BFA   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0BFD   FD 54                  LD   d,iyh   
0BFF   FD 5D                  LD   e,iyl   
0C01   B7                     OR   a   ; if stack* == BP then this is the root_scope
0C02   ED 52                  SBC   hl,de   
0C04   ED 5B 02 24            LD   de,(vTemp1)   ; restore de
0C08   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0C09   B4                     OR   h   
0C0A   3E 00                  LD   a,0   
0C0C   28 6A                  JR   z,goFunc8   
0C0E   C5                     PUSH   bc   ; push IP
0C0F   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0C12   FD 46 05               LD   b,(iy+5)   
0C15   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0C18   FD 66 03               LD   h,(iy+3)   
0C1B                GOBLOCK2:      
0C1B   C5                     PUSH   bc   ; arg_list*
0C1C   E5                     PUSH   hl   ; first_arg*
0C1D   FD E5                  PUSH   iy   ; push BP
0C1F   FD 21 00 00            LD   iy,0   ; BP = SP
0C23   FD 39                  ADD   iy,sp   
0C25                GOBLOCK3:      
0C25   42 4B                  LD   bc,de   ; bc = de = block*-1
0C27   DD E9                  JP   (ix)   
0C29                GOFUNC:      ; execute func
0C29   EB                     EX   de,hl   ; hl = func*
0C2A   5E                     LD   e,(hl)   ; de = partial_array*
0C2B   23                     INC   hl   
0C2C   56                     LD   d,(hl)   
0C2D   23                     INC   hl   
0C2E   7B                     LD   a,e   ; if partial_array* == null skip
0C2F   B2                     OR   d   
0C30   28 21                  JR   z,goFunc3   
0C32   ED 43 02 24            LD   (vTemp1),bc   
0C36   22 04 24               LD   (vTemp2),hl   ; save bc,hl
0C39   EB                     EX   de,hl   ; hl = partial_array*
0C3A   2B                     DEC   hl   ; bc = count
0C3B   46                     LD   b,(hl)   
0C3C   2B                     DEC   hl   
0C3D   4E                     LD   c,(hl)   
0C3E   23                     INC   hl   ; hl = array data*
0C3F   23                     INC   hl   
0C40   18 06                  JR   goFunc2   ; push each item on stack
0C42                GOFUNC1:      
0C42   5E                     LD   e,(hl)   ; de = partial item
0C43   23                     INC   hl   
0C44   56                     LD   d,(hl)   
0C45   23                     INC   hl   
0C46   D5                     PUSH   de   ; push on stack
0C47   0B                     DEC   bc   
0C48                GOFUNC2:      
0C48   79                     LD   a,c   ; if count != 0 then loop
0C49   B0                     OR   b   
0C4A   20 F6                  JR   nz,goFunc1   
0C4C   ED 4B 02 24            LD   bc,(vTemp1)   ; restore bc
0C50   2A 04 24               LD   hl,(vTemp2)   ; restore hl
0C53                GOFUNC3:      
0C53   5E                     LD   e,(hl)   ; de = block*
0C54   23                     INC   hl   
0C55   56                     LD   d,(hl)   
0C56   23                     INC   hl   
0C57   ED 53 02 24            LD   (vTemp1),de   ; save block*
0C5B   5E                     LD   e,(hl)   ; de = arg_list*
0C5C   23                     INC   hl   
0C5D   56                     LD   d,(hl)   
0C5E   23                     INC   hl   
0C5F   EB                     EX   de,hl   ; hl = arg_list*
0C60   ED 5B 02 24            LD   de,(vTemp1)   ; restore de = block*
0C64   7D                     LD   a,l   ; if arg_list* == null a = 0
0C65   B4                     OR   h   
0C66   20 03                  JR   nz,goFunc4   
0C68   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0C69   18 0D                  JR   goFunc8   
0C6B                GOFUNC4:      ; allocate locals
0C6B   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0C6C   18 03                  JR   goFunc6   
0C6E                GOFUNC5:      ; loop
0C6E   3B                     DEC   sp   
0C6F   3B                     DEC   sp   
0C70   3D                     DEC   a   
0C71                GOFUNC6:      
0C71   B7                     OR   a   
0C72   20 FA                  JR   nz,goFunc5   ; end loop
0C74                GOFUNC7:      
0C74   23                     INC   hl   ; a = num_args* x 2
0C75   7E                     LD   a,(hl)   
0C76   2B                     DEC   hl   
0C77   87                     ADD   a,a   ; a *= 2
0C78                GOFUNC8:      
0C78   C5                     PUSH   bc   ; push IP
0C79   44 4D                  LD   bc,hl   
0C7B   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0C7E   85                     ADD   a,l   
0C7F   6F                     LD   l,a   
0C80   39                     ADD   hl,sp   
0C81   18 98                  JR   goBlock2   
0C83                             ; 
0C83                             ;*******************************************************************
0C83                             ; general routines
0C83                             ;*******************************************************************
0C83                             ; arg_list - parses arg_list e.g. ab:c
0C83                             ; -- arg_list*
0C83                PARSEARGS:      
0C83   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0C86   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0C89   E5                     PUSH   hl   ; save start of arg_list
0C8A   23                     INC   hl   ; skip length fields to start of string
0C8B   23                     INC   hl   
0C8C   03                     INC   bc   ; point to next char
0C8D                PARSEARGS1:      
0C8D   0A                     LD   a,(bc)   
0C8E   FE 3A                  CP   ":"   ; ":" switches from args to locals
0C90   20 03                  JR   nz,parseArgs1a   
0C92   14                     INC   d   ; non zero value local count acts as flag
0C93   18 10                  JR   parseArgs3   
0C95                PARSEARGS1A:      
0C95   FE 61                  CP   "a"   ; < "a" terminates arg_list
0C97   38 0F                  JR   c,parseArgs4   
0C99   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0C9B   30 0B                  JR   nc,parseArgs4   
0C9D                PARSEARGS2:      
0C9D   77                     LD   (hl),a   
0C9E   23                     INC   hl   
0C9F   1C                     INC   e   ; increase arg count
0CA0   AF                     XOR   a   
0CA1   B2                     OR   d   
0CA2   28 01                  JR   z,parseArgs3   
0CA4   14                     INC   d   ; if d > 0 increase local count
0CA5                PARSEARGS3:      
0CA5   03                     INC   bc   ; point to next char
0CA6   18 E5                  JR   parseArgs1   
0CA8                PARSEARGS4:      
0CA8   0B                     DEC   bc   
0CA9   AF                     XOR   a   
0CAA   B2                     OR   d   
0CAB   28 01                  JR   z,parseArgs5   
0CAD   15                     DEC   d   ; remove initial inc
0CAE                PARSEARGS5:      
0CAE   23                     INC   hl   
0CAF   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0CB2   E1                     POP   hl   ; hl = start of arg_list
0CB3   72                     LD   (hl),d   ; write number of locals at start - 1
0CB4   23                     INC   hl   
0CB5   73                     LD   (hl),e   ; write number of args + locals at start - 2
0CB6   2B                     DEC   hl   
0CB7   E3                     EX   (sp),hl   
0CB8   E9                     JP   (hl)   
0CB9                             ; create block: parses block e.g. 00bbIC4uLi4g
0CB9                             ; -- block*
0CB9                PARSEBLOCK:      
0CB9   C5                     PUSH   bc   ; return pointer to first { of block
0CBA   03                     INC   bc   
0CBB   16 01                  LD   d,1   ; nesting: count first parenthesis
0CBD                PARSEBLOCK1:      ; Skip to end of definition
0CBD   0A                     LD   a,(bc)   ; Get the next character
0CBE   03                     INC   bc   ; Point to next character
0CBF   FE 21                  CP   " " + 1   ; ignore whitespace
0CC1   38 FA                  JR   c,parseBlock1   
0CC3   FE 29                  CP   ")"   
0CC5   28 2D                  JR   z,parseBlock4   
0CC7   FE 7D                  CP   "}"   
0CC9   28 29                  JR   z,parseBlock4   
0CCB   FE 5D                  CP   "]"   
0CCD   28 25                  JR   z,parseBlock4   
0CCF   FE 28                  CP   "("   
0CD1   28 16                  JR   z,parseBlock2   
0CD3   FE 7B                  CP   "{"   
0CD5   28 12                  JR   z,parseBlock2   
0CD7   FE 5B                  CP   "["   
0CD9   28 0E                  JR   z,parseBlock2   
0CDB   FE 27                  CP   "'"   
0CDD   28 0D                  JR   z,parseBlock3   
0CDF   FE 60                  CP   "`"   
0CE1   28 09                  JR   z,parseBlock3   
0CE3   FE 22                  CP   DQ   
0CE5   28 05                  JR   z,parseBlock3   
0CE7   18 D4                  JR   parseBlock1   
0CE9                PARSEBLOCK2:      
0CE9   14                     INC   d   
0CEA   18 D1                  JR   parseBlock1   
0CEC                PARSEBLOCK3:      
0CEC   3E 80                  LD   a,$80   
0CEE   AA                     XOR   d   
0CEF   57                     LD   d,a   
0CF0   20 CB                  JR   nz,parseBlock1   
0CF2   18 03                  JR   parseBlock5   
0CF4                PARSEBLOCK4:      
0CF4   15                     DEC   d   
0CF5   20 C6                  JR   nz,parseBlock1   ; get the next element
0CF7                PARSEBLOCK5:      
0CF7   60 69                  LD   hl,bc   ; hl = IP
0CF9   11 20 24               LD   de,HEAP   ; is IP pointing to object in heap
0CFC   B7                     OR   a   ; IP - HEAP
0CFD   ED 52                  SBC   hl,de   
0CFF   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0D01   28 1C                  JR   z,parseBlock6   
0D03   60 69                  LD   hl,bc   ; hl = IP
0D05   D1                     POP   de   ; de = block*
0D06   ED 43 02 24            LD   (vTemp1),bc   ; save IP
0D0A   B7                     OR   a   ; bc = size
0D0B   ED 52                  SBC   hl,de   
0D0D   44 4D                  LD   bc,hl   
0D0F   EB                     EX   de,hl   ; hl = block* de = heap*
0D10   ED 5B F0 23            LD   de,(vHeapPtr)   
0D14   D5                     PUSH   de   ; return hblock*
0D15   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0D17   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += size
0D1B   ED 4B 02 24            LD   bc,(vTemp1)   ; restore IP
0D1F                PARSEBLOCK6:      
0D1F   0B                     DEC   bc   ; balanced, exit
0D20   E1                     POP   hl   ; hl = block*
0D21   E3                     EX   (sp),hl   ; return to caller
0D22   E9                     JP   (hl)   
0D23                             ; create function
0D23                             ; arg_list* block* -- func*
0D23                CREATEFUNC:      
0D23   E1                     POP   hl   ; save retrn address
0D24   22 06 24               LD   (vTemp3),hl   
0D27   ED 43 02 24            LD   (vTemp1),bc   ; save IP
0D2B   E1                     POP   hl   ; hl = block*
0D2C   22 04 24               LD   (vTemp2),hl   ; save block*
0D2F   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0D32   FD 56 05               LD   d,(iy+5)   
0D35   7B                     LD   a,e   ; if arg_list == null then make a func
0D36   B2                     OR   d   
0D37   20 09                  JR   nz,createFunc0   
0D39   21 00 00               LD   hl,0   ; partial_array = null
0D3C   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0D40   18 65                  JR   createFunc5   
0D42                CREATEFUNC0:      
0D42   E1                     POP   hl   ; hl = inner_arg_list*
0D43   E5                     PUSH   hl   ; save inner_arg_list
0D44   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0D48   7E                     LD   a,(hl)   ; compile inner_num_locals
0D49   4F                     LD   c,a   ; b = inner_num_locals
0D4A   12                     LD   (de),a   
0D4B   23                     INC   hl   
0D4C   13                     INC   de   
0D4D   7E                     LD   a,(hl)   ; compile inner_length
0D4E   12                     LD   (de),a   
0D4F   91                     SUB   c   ; a = inner_num args
0D50   23                     INC   hl   
0D51   13                     INC   de   
0D52   B7                     OR   a   ; compile args if inner_length > 0
0D53   28 05                  JR   z,createFunc1   
0D55   4F                     LD   c,a   ; bc = a
0D56   06 00                  LD   b,0   
0D58   ED B0                  LDIR      
0D5A                CREATEFUNC1:      
0D5A   EB                     EX   de,hl   ; hl = outer_arg_list
0D5B   FD 5E 04               LD   e,(iy+4)   
0D5E   FD 56 05               LD   d,(iy+5)   
0D61   EB                     EX   de,hl   
0D62   23                     INC   hl   ; a = outer_length
0D63   7E                     LD   a,(hl)   
0D64   23                     INC   hl   
0D65   B7                     OR   a   
0D66   28 05                  JR   z,createFunc2   
0D68   4F                     LD   c,a   
0D69   06 00                  LD   b,0   
0D6B   ED B0                  LDIR      ; append outer_args
0D6D                CREATEFUNC2:      ; a = outer_length
0D6D   47                     LD   b,a   ; b = a = outer_length
0D6E   2A F0 23               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0D71   23                     INC   hl   
0D72   7E                     LD   a,(hl)   ; add outer_length to new length
0D73   80                     ADD   a,b   
0D74   77                     LD   (hl),a   
0D75   2B                     DEC   hl   
0D76   78                     LD   a,b   ; save outer_length in a'
0D77   08                     EX   af,af'   
0D78   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0D79   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0D7A   B7                     OR   a   
0D7B   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0D7D   4F                     LD   c,a   ; c = inner_num_locals
0D7E   06 00                  LD   b,0   ; bc = inner_num_locals
0D80   23                     INC   hl   ; a = inner_length
0D81   7E                     LD   a,(hl)   
0D82   91                     SUB   c   ; a = inner_num_args
0D83   23                     INC   hl   ; hl = inner_arg_chars
0D84   85                     ADD   a,l   ; hl += a
0D85   6F                     LD   l,a   
0D86   3E 00                  LD   a,0   
0D88   84                     ADD   a,h   
0D89   67                     LD   h,a   
0D8A   ED B0                  LDIR      ; append inner_locals
0D8C                CREATEFUNC2A:      
0D8C   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0D8D   12                     LD   (de),a   ; compile partial_array length field
0D8E   13                     INC   de   
0D8F   AF                     XOR   a   
0D90   12                     LD   (de),a   
0D91   13                     INC   de   
0D92   D5                     PUSH   de   ; push partial_array*
0D93   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0D94   FD 5E 02               LD   e,(iy+2)   
0D97   FD 56 03               LD   d,(iy+3)   
0D9A   EB                     EX   de,hl   
0D9B                CREATEFUNC3:      
0D9B   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0D9C   4E                     LD   c,(hl)   
0D9D   2B                     DEC   hl   
0D9E   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0D9F   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0DA0   13                     INC   de   
0DA1   79                     LD   a,c   
0DA2   12                     LD   (de),a   
0DA3   13                     INC   de   
0DA4   10 F5                  DJNZ   createFunc3   ; b = outer_length
0DA6                CREATEFUNC4:      
0DA6   E1                     POP   hl   ; hl = partial_array*
0DA7                CREATEFUNC5:      
0DA7   C1                     POP   bc   ; bc = new_arg_list*
0DA8   D5                     PUSH   de   ; return new func*
0DA9   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0DAA   73                     LD   (hl),e   ; compile partial_array* to func
0DAB   23                     INC   hl   
0DAC   72                     LD   (hl),d   
0DAD   23                     INC   hl   
0DAE   ED 5B 04 24            LD   de,(vTemp2)   ; de = block*
0DB2   73                     LD   (hl),e   ; compile block* to func
0DB3   23                     INC   hl   
0DB4   72                     LD   (hl),d   
0DB5   23                     INC   hl   
0DB6   71                     LD   (hl),c   ; compile new_arg_list* to func
0DB7   23                     INC   hl   
0DB8   70                     LD   (hl),b   
0DB9   23                     INC   hl   
0DBA   22 F0 23               LD   (vHeapPtr),hl   ; bump heap ptr
0DBD   ED 4B 02 24            LD   bc,(vTemp1)   ; restore IP
0DC1   2A 06 24               LD   hl,(vTemp3)   ; jump to return address
0DC4   E9                     JP   (hl)   
0DC5                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0DC5                FLUSHBUFFER:      
0DC5   F5                     PUSH   af   
0DC6   D5                     PUSH   de   
0DC7   E5                     PUSH   hl   
0DC8   2A EC 23               LD   hl,(vBufPtr)   
0DCB   11 00 22               LD   de,BUF   
0DCE   ED 53 EC 23            LD   (vBufPtr),de   
0DD2   B7                     OR   a   
0DD3   ED 52                  SBC   hl,de   
0DD5   CD E2 0D               CALL   printChars2   
0DD8   E1                     POP   hl   
0DD9   D1                     POP   de   
0DDA   F1                     POP   af   
0DDB   C9                     RET      
0DDC                PRINTCHARS1:      
0DDC   1A                     LD   a,(de)   ; print char at char*
0DDD   CD 85 00               CALL   putchar   
0DE0   13                     INC   de   ; char*++
0DE1   2B                     DEC   hl   ; count--
0DE2                PRINTCHARS2:      
0DE2   7D                     LD   a,l   ; count == 0?
0DE3   B4                     OR   h   
0DE4   C8                     RET   z   
0DE5   18 F5                  JR   printChars1   ; if not loop
0DE7                COMMANDTABLE:      
0DE7   03                     INC   bc   
0DE8   0A                     LD   a,(bc)   
0DE9   FE 7B                  CP   "z"+1   
0DEB   30 09                  JR   nc,commandTable2   
0DED   D6 61                  SUB   "a"   
0DEF   38 05                  JR   c,commandTable2   
0DF1                COMMANDTABLE1:      
0DF1   E1                     POP   hl   
0DF2   85                     ADD   a,l   
0DF3   6F                     LD   l,a   
0DF4   6E                     LD   l,(hl)   ; must have the same msb as the table
0DF5   E9                     JP   (hl)   
0DF6                COMMANDTABLE2:      
0DF6   3E 1A                  LD   a,26   
0DF8   0B                     DEC   bc   
0DF9   18 F6                  JR   commandTable1   
0DFB                             ; followed by a table
0DFB                             ; db char
0DFB                             ; db lsb(addr)
0DFB                             ; the final item must have char == NUL
0DFB                JUMPTABLE:      
0DFB   E1                     POP   hl   
0DFC   03                     INC   bc   
0DFD                JUMPTABLE0:      
0DFD   AF                     XOR   a   
0DFE   BE                     CP   (hl)   
0DFF   28 0B                  JR   z,jumpTable2   
0E01   0A                     LD   a,(bc)   
0E02   BE                     CP   (hl)   
0E03   28 04                  JR   z,jumpTable1   
0E05   23                     INC   hl   
0E06   23                     INC   hl   
0E07   18 F4                  JR   jumpTable0   
0E09                JUMPTABLE1:      
0E09   23                     INC   hl   
0E0A   6E                     LD   l,(hl)   ; must have the same msb as the table
0E0B   E9                     JP   (hl)   
0E0C                JUMPTABLE2:      
0E0C   0B                     DEC   bc   
0E0D   23                     INC   hl   
0E0E   E9                     JP   (hl)   
0E0F                PRTSTR0:      
0E0F   CD 85 00               CALL   putchar   
0E12   23                     INC   hl   
0E13                PRTSTR:      
0E13   7E                     LD   a,(hl)   
0E14   B7                     OR   a   
0E15   20 F8                  JR   nz,prtstr0   
0E17   C9                     RET      
0E18                             ; **************************************************************************
0E18                             ; calculate nesting value
0E18                             ; a is char to be tested,
0E18                             ; e is the nesting value (initially 0)
0E18                             ; e is increased by ( and [
0E18                             ; e is decreased by ) and ]
0E18                             ; e has its bit 7 toggled by `
0E18                             ; limited to 127 levels
0E18                             ; **************************************************************************
0E18                NESTING:      
0E18   FE 22                  CP   DQ   ; quote char
0E1A   28 06                  JR   z,nesting0   
0E1C   FE 60                  CP   "`"   ; quote char
0E1E   28 02                  JR   z,nesting0   
0E20   18 0A                  JR   nesting1   
0E22                NESTING0:      
0E22   CB 7B                  BIT   7,e   
0E24   28 03                  JR   z,nesting1a   
0E26   CB BB                  RES   7,e   
0E28   C9                     RET      
0E29                NESTING1A:      
0E29   CB FB                  SET   7,e   
0E2B   C9                     RET      
0E2C                NESTING1:      
0E2C   CB 7B                  BIT   7,e   
0E2E   C0                     RET   nz   
0E2F   FE 7B                  CP   "{"   
0E31   28 08                  JR   z,nesting2   
0E33   FE 5B                  CP   "["   
0E35   28 04                  JR   z,nesting2   
0E37   FE 28                  CP   "("   
0E39   20 02                  JR   nz,nesting3   
0E3B                NESTING2:      
0E3B   1C                     INC   e   
0E3C   C9                     RET      
0E3D                NESTING3:      
0E3D   FE 7D                  CP   "}"   
0E3F   28 07                  JR   z,nesting4   
0E41   FE 5D                  CP   "]"   
0E43   28 03                  JR   z,nesting4   
0E45   FE 29                  CP   ")"   
0E47   C0                     RET   nz   
0E48                NESTING4:      
0E48   1D                     DEC   e   
0E49   C9                     RET      
0E4A                PROMPT:      
0E4A   CD 5A 0E               CALL   printStr   
0E4D   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0E52   C9                     RET      
0E53                CRLF:        
0E53   CD 5A 0E               CALL   printStr   
0E56   0D 0A 00               .CSTR   "\r\n"   
0E59   C9                     RET      
0E5A                             ; prints a null teminated string
0E5A                             ; the string should be immediately following the call
0E5A                PRINTSTR:      
0E5A   E3                     EX   (sp),hl   ; swap			
0E5B   CD 13 0E               CALL   prtstr   
0E5E   23                     INC   hl   ; inc past NUL
0E5F   E3                     EX   (sp),hl   ; put it back	
0E60   C9                     RET      
0E61                INIT:        
0E61   21 F0 01               LD   hl,titleStr   
0E64   11 0C 24               LD   de,titleBuf   
0E67   06 14                  LD   b,20   
0E69                INIT1:       
0E69   1A                     LD   a,(de)   
0E6A   BE                     CP   (hl)   
0E6B   20 17                  JR   nz,coldBoot0   
0E6D   13                     INC   de   
0E6E   23                     INC   hl   
0E6F   10 F8                  DJNZ   init1   
0E71                WARMINIT:      
0E71   ED 4B FA 23            LD   bc,(vSavedIP)   ; restore IP
0E75   ED 7B FC 23            LD   sp,(vSavedSP)   ; restore SP
0E79   DD 2A FE 23            LD   ix,(vSavedNext)   ; restore Next
0E7D   FD 2A 00 24            LD   iy,(vSavedBP)   ; restore BP
0E81   C3 BB 0E               JP   start1   
0E84                COLDBOOT0:      
0E84   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0E87   11 0C 24               LD   de,titleBuf   
0E8A   06 14                  LD   b,20   
0E8C   ED B0                  LDIR      
0E8E                COLDINIT:      
0E8E   21 DE 01               LD   hl,isysVars   
0E91   11 E6 23               LD   de,sysVars   
0E94   01 10 00               LD   bc,8 * 2   
0E97   ED B0                  LDIR      
0E99   21 00 23               LD   hl,vars   ; 52 vars LO HI
0E9C   06 34                  LD   b,26*2   
0E9E   AF                     XOR   a   
0E9F                COLDBOOT1:      
0E9F   77                     LD   (hl),a   
0EA0   23                     INC   hl   
0EA1   10 FC                  DJNZ   coldBoot1   
0EA3   DD 2A EE 23            LD   ix,(vNext)   
0EA7   FD 21 00 21            LD   iy,STACK   
0EAB   C9                     RET      
0EAC                COLDSTART:      
0EAC   31 00 21               LD   sp,STACK   
0EAF   CD 84 0E               CALL   coldBoot0   
0EB2   C3 BB 0E               JP   start1   
0EB5                START:       
0EB5   31 00 21               LD   sp,STACK   ; start Monty
0EB8   CD 61 0E               CALL   init   ; setups
0EBB                START1:      
0EBB   21 0C 24               LD   hl,titleBuf   
0EBE   CD 13 0E               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0EC1                INTERPRET:      
0EC1   CD C5 0D               CALL   flushBuffer   
0EC4   CD 4A 0E               CALL   prompt   
0EC7   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0ECA   21 00 21               LD   hl,TIB   
0ECD   22 EA 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0ED0                INTERPRET2:      ; calculate nesting
0ED0   1E 00                  LD   e,0   ; initilize nesting value
0ED2   C5                     PUSH   bc   ; save offset into TIB,
0ED3                             ; bc is also the count of chars in TIB
0ED3   21 00 21               LD   hl,TIB   ; hl is start of TIB
0ED6   18 0B                  JR   interpret4   
0ED8                INTERPRET3:      
0ED8   3E 33                  LD   a,"3"   
0EDA   CD 85 00               CALL   putchar   
0EDD   7E                     LD   a,(hl)   ; a = char in TIB
0EDE   23                     INC   hl   ; inc pointer into TIB
0EDF   0B                     DEC   bc   ; dec count of chars in TIB
0EE0   CD 18 0E               CALL   nesting   ; update nesting value
0EE3                INTERPRET4:      
0EE3   79                     LD   a,c   ; is count zero?
0EE4   B0                     OR   b   
0EE5   20 F1                  JR   nz,interpret3   ; if not loop
0EE7   C1                     POP   bc   ; restore offset into TIB
0EE8                INTERPRET5:      
0EE8   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0EEB   FE 20                  CP   $20   ; compare to space
0EED   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0EEF   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0EF1                             ; ???? NEEDED?
0EF1   28 36                  JR   z,interpret8   
0EF3   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0EF5   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0EF7   FE 05                  CP   CTRL_E   
0EF9   CA 87 0F               JP   z,edit_   
0EFC   FE 08                  CP   CTRL_H   
0EFE   CA 77 0F               JP   z,backSpace_   
0F01   FE 0A                  CP   CTRL_J   
0F03   CA 9F 0F               JP   z,reEdit_   
0F06                             ; cp CTRL_S
0F06                             ; jp z,printStack_
0F06                             ; DB     lsb(edit_)       ; ENQ ^E  5
0F06                             ; DB     lsb(reedit_)     ; LF  ^J 10
0F06                             ; DB     lsb(list_)       ; FF  ^L 12
0F06                             ; DB     lsb(printStack_) ; DLE ^P 16
0F06                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0F06                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0F06                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0F06                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0F06                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0F06                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0F06                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0F06                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0F06                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0F06                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0F06                INTERPRET5A:      
0F06                             ; ld (vTIBPtr),bc
0F06                             ; ld bc,(vTIBPtr)
0F06   18 C8                  JR   interpret2   
0F08                INTERPRET6:      
0F08   21 00 21               LD   hl,TIB   
0F0B   09                     ADD   hl,bc   
0F0C   77                     LD   (hl),a   ; store the character in textbuf
0F0D   03                     INC   bc   
0F0E   CD 85 00               CALL   putchar   ; echo character to screen
0F11   CD 18 0E               CALL   nesting   
0F14   18 D2                  JR   interpret5   ; wait for next character
0F16                INTERPRET7:      
0F16   21 00 21               LD   hl,TIB   
0F19   09                     ADD   hl,bc   
0F1A   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0F1C   23                     INC   hl   
0F1D   36 0A                  LD   (hl),"\n"   
0F1F   23                     INC   hl   
0F20   03                     INC   bc   
0F21   03                     INC   bc   
0F22   CD 53 0E               CALL   crlf   ; echo character to screen
0F25   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0F26   B7                     OR   a   
0F27   20 BF                  JR   nz,interpret5   
0F29                INTERPRET8:      
0F29   21 00 21               LD   hl,TIB   
0F2C   09                     ADD   hl,bc   
0F2D   22 EA 23               LD   (vTIBPtr),hl   
0F30   01 00 21               LD   bc,TIB   
0F33   ED 43 FA 23            LD   (vSavedIP),bc   ; save IP
0F37   ED 73 FC 23            LD   (vSavedSP),sp   ; save SP
0F3B   DD 22 FE 23            LD   (vSavedNext),ix   ; save Next
0F3F   FD 22 00 24            LD   (vSavedBP),iy   ; save BP
0F43   0B                     DEC   bc   
0F44                NEXT:        
0F44   03                     INC   bc   ; Increment the IP
0F45   0A                     LD   a,(bc)   ; Get the next character and dispatch
0F46   FE 20                  CP   " "   ; whitespace?
0F48   28 FA                  JR   z,next   ; space? ignore
0F4A   38 08                  JR   c,next1   
0F4C   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0F4E   6F                     LD   l,a   ; index into table
0F4F   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0F51   6E                     LD   l,(hl)   ; get low jump address
0F52   24                     INC   h   ; Load h with page after opcodes
0F53   E9                     JP   (hl)   ; Jump to routine
0F54                NEXT1:       
0F54   FE 00                  CP   NUL   ; end of input string?
0F56   28 03                  JR   z,exit   
0F58   C3 C1 0E               JP   interpret   ; no, other whitespace, macros?
0F5B                EXIT:        
0F5B   03                     INC   bc   
0F5C   60 69                  LD   hl,bc   
0F5E   E9                     JP   (hl)   
0F5F                RUN:         
0F5F   C1                     POP   bc   
0F60   0B                     DEC   bc   
0F61   DD E9                  JP   (ix)   
0F63                ERROR:       
0F63   E5                     PUSH   hl   
0F64   CD 5F 0F               CALL   run   
0F67   60 45 72 72 6F 72 20 60 2E 73 20 2E 00 DB   "`Error `.s .",0   
0F74   C3 C1 0E               JP   interpret   
0F77                BACKSPACE_:      
0F77   79                     LD   a,c   
0F78   B0                     OR   b   
0F79   CA D0 0E               JP   z,interpret2   
0F7C   0B                     DEC   bc   
0F7D   CD 5A 0E               CALL   printStr   
0F80   08 20 08 00            .CSTR   "\b \b"   
0F84   C3 D0 0E               JP   interpret2   
0F87                             ; edit
0F87                EDIT_:       
0F87   CD 5F 0F               CALL   run   
0F8A   60 76 61 72 3F 60 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?`.s /k/ad .h",0   
0F9C   C3 C1 0E               JP   interpret   
0F9F                REEDIT_:      
0F9F   C3 C1 0E               JP   interpret   
0FA2                PRINTSTACK_:      
0FA2   CD 5F 0F               CALL   run   
0FA5   2F 70 6B 00            .CSTR   "/pk"   
0FA9   C3 C1 0E               JP   interpret   
0FAC                             ; editDef:
0FAC                             ;     pop hl                      ; pop ret address
0FAC                             ;     ex (sp),hl                  ; swap with TOS
0FAC                             ;     push hl                     ; dup TOS
0FAC                             ;     ld a,l                      ; a = ident
0FAC                             ;     ld de,TIB                   ; de = start of TIB
0FAC                             ;     ld (vTIBPtr),de             ; update TIB*
0FAC                             ;     push ix                     ; save NEXT
0FAC                             ;     ld ix,editDef0              ; NEXT = editDef0
0FAC                             ;     jp lookupRef                ; convert letter into address
0FAC                             ; editDef0:
0FAC                             ;     ld e,(hl)                   ; de = (hl++)
0FAC                             ;     inc hl
0FAC                             ;     ld d,(hl)
0FAC                             ;     ld a,d                      ; de == 0 ?
0FAC                             ;     or e
0FAC                             ;     jr z,editDef4
0FAC                             ;     ld ix,editDef3              ; NEXT = editDef3
0FAC                             ;     ex de,hl
0FAC                             ;     ld a,(hl)
0FAC                             ;     cp "{"
0FAC                             ;     jr nz,editDef1
0FAC                             ;     jp editBlock0               ; convert letter into address
0FAC                             ; editDef1:
0FAC                             ;     cp "("
0FAC                             ;     jr nz,editDef2
0FAC                             ;     jp editBlock0               ; convert letter into address
0FAC                             ; editDef2:
0FAC                             ;     jp editFunc
0FAC                             ; editDef3:
0FAC                             ;     ld a," "                    ; write assign
0FAC                             ;     call writeChar
0FAC                             ;     pop hl                      ; a = ident
0FAC                             ;     ld a,l
0FAC                             ;     call writeChar
0FAC                             ;     ld a,"="                    ; write assign
0FAC                             ;     call writeChar
0FAC                             ;     ld ix,editDef4              ; NEXT = editDef4
0FAC                             ;     jp printTIB
0FAC                             ; editDef4:
0FAC                             ;     pop ix                      ; restore NEXT
0FAC                             ;     jp (ix)
0FAC                             ; writeChar:
0FAC                             ;     ld de,(vTIBPtr)             ; de = TIB*
0FAC                             ;     ld (de),a                   ; write ident
0FAC                             ;     inc de
0FAC                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0FAC                             ;     ret
0FAC                             ; ; printTIB
0FAC                             ; printTIB:
0FAC                             ;     ld hl,(vTIBPtr)
0FAC                             ;     ld de,TIB
0FAC                             ;     or a
0FAC                             ;     sbc hl,de
0FAC                             ;     jp printTIB2
0FAC                             ; printTIB1:
0FAC                             ;     ld a,(de)
0FAC                             ;     call putchar
0FAC                             ; printTIB2:
0FAC                             ;     ld a,l
0FAC                             ;     or h
0FAC                             ;     jr nz,printTIB1
0FAC                             ;     jp (ix)
0FAC                             ; editBlock:
0FAC                             ;     pop hl                      ; hl = block*
0FAC                             ; editBlock0:
0FAC                             ;     push ix                     ; save next
0FAC                             ;     push hl                     ; push block*
0FAC                             ;     push hl                     ; push block*
0FAC                             ;     ld ix,(editBlock2)
0FAC                             ;     jp blockLength
0FAC                             ; editBlock1:
0FAC                             ;     pop hl                      ; bc = length, (sp) = IP
0FAC                             ;     pop de                      ; de = block*
0FAC                             ;     ld a,l
0FAC                             ;     or h
0FAC                             ;     jr z,editBlock2
0FAC                             ;     push bc
0FAC                             ;     ld bc,hl
0FAC                             ;     ex de,hl                    ; hl = block*
0FAC                             ;     ld de,(vTIBPtr)              ; de = TIB*
0FAC                             ;     ldir                        ; copy block to TIB
0FAC                             ;     ld (vTIBPtr),de              ; save TIB*
0FAC                             ;     pop bc
0FAC                             ; editBlock2:
0FAC                             ;     pop ix                      ; restore next
0FAC                             ;     jp (ix)
0FAC                             ; editFunc:
0FAC                             ;     jp (ix)
0FAC                             ; editArray:
0FAC                             ;     jp (ix)
0FAC                             ; editparseArgs:
0FAC                             ;     jp (ix)
0FAC                             ; ; blockLength
0FAC                             ; ; addr1 -- length
0FAC                             ; blockLength:
0FAC                             ;     pop hl                      ; block*
0FAC                             ;     push hl                     ; save block*
0FAC                             ;     inc hl                      ; skip first char
0FAC                             ;     ld d,1                      ; increase nesting
0FAC                             ; blockLength1:                   ; Skip to end of definition
0FAC                             ;     ld a,(hl)                   ; Get the next character
0FAC                             ;     inc hl                      ; Point to next character
0FAC                             ;     cp " " + 1                  ; ignore whitespace
0FAC                             ;     jr c,blockLength1
0FAC                             ;     cp ")"
0FAC                             ;     jr z,blockLength4
0FAC                             ;     cp "}"
0FAC                             ;     jr z,blockLength4
0FAC                             ;     cp "]"
0FAC                             ;     jr z,blockLength4
0FAC                             ;     cp "("
0FAC                             ;     jr z,blockLength2
0FAC                             ;     cp "{"
0FAC                             ;     jr z,blockLength2
0FAC                             ;     cp "["
0FAC                             ;     jr z,blockLength2
0FAC                             ;     cp "'"
0FAC                             ;     jr z,blockLength3
0FAC                             ;     cp "`"
0FAC                             ;     jr z,blockLength3
0FAC                             ;     cp DQ
0FAC                             ;     jr z,blockLength3
0FAC                             ;     jr blockLength1
0FAC                             ; blockLength2:
0FAC                             ;     inc d
0FAC                             ;     jr blockLength1
0FAC                             ; blockLength4:
0FAC                             ;     dec d
0FAC                             ;     jr nz, blockLength1         ; get the next element
0FAC                             ; blockLength3:
0FAC                             ;     ld a,$80
0FAC                             ;     xor d
0FAC                             ;     ld d,a
0FAC                             ;     jr nz, blockLength1
0FAC                             ;     pop hl                      ; hl = block*
0FAC                             ;     or a
0FAC                             ;     sbc hl,de
0FAC                             ;     push hl
0FAC                             ;     jp (ix)
0FAC                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0FAC                             ; \a start of stack \#3 depth \b base \$ prompt
0FAC                             ; DW dStack               ; a vS0 start of datastack			
0FAC                             ; DW FALSE                ; b vBase16
0FAC                             ; DW 0                    ; c vTIBPtr an offset to the tib
0FAC                             ; DW 0                    ; d
0FAC                             ; DW 65                   ; e vLastDef "A" last command u defined
0FAC                             ; DW 0                    ; f
0FAC                             ; DW page6                ; g 256 bytes limits
0FAC                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0FAC                F1:          
0FAC                F2:          
0FAC                F3:          
0FAC                F4:          
0FAC                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VDATAWIDTH:   DS   2   ; 
23E8                VNUMBASE:   DS   2   ; 
23EA                VTIBPTR:   DS   2   ; 
23EC                VBUFPTR:   DS   2   ; 
23EE                VNEXT:    DS   2   ; 
23F0                VHEAPPTR:   DS   2   ; 
23F2                VRECUR:   DS   2   ; 
23F4                VDEFINE:   DS   2   ; 
23F6                             ; uninitialised sys variables (preserved)
23F6                VPOINTER:   DS   2   ; 
23F8                VREMAIN:   DS   2   ; 
23FA                VSAVEDIP:   DS   2   ; 
23FC                VSAVEDSP:   DS   2   ; 
23FE                VSAVEDNEXT:   DS   2   ; 
2400                VSAVEDBP:   DS   2   ; 
2402                             ; uninitialised sys variables (unpreserved)
2402                VTEMP1:   DS   2   ; 
2404                VTEMP2:   DS   2   ; 
2406                VTEMP3:   DS   2   ; 
2408                VLASTDEF:   DS   2   ; 
240A                TBPTR:    DS   2   ; reserved for tests
240C                TITLEBUF:   DS   20   
2420                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 15
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1358 IN MAIN.asm
                    > USED AT LINE 2465 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 2247 IN MAIN.asm
                    > USED AT LINE 2302 IN MAIN.asm
                    > USED AT LINE 2449 IN MAIN.asm
                    > USED AT LINE 2511 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 287 IN MAIN.asm
                    > USED AT LINE 533 IN MAIN.asm
                    > USED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
                    > USED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 1133 IN MAIN.asm
                    > USED AT LINE 1161 IN MAIN.asm
                    > USED AT LINE 1222 IN MAIN.asm
                    > USED AT LINE 1232 IN MAIN.asm
                    > USED AT LINE 1307 IN MAIN.asm
                    > USED AT LINE 1395 IN MAIN.asm
                    > USED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 1449 IN MAIN.asm
                    > USED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 1489 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 2468 IN MAIN.asm
                    > USED AT LINE 2556 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
                    > USED AT LINE 2321 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2474 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2476 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2478 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2402 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2377 IN MAIN.asm
                    > USED AT LINE 2396 IN MAIN.asm
AT_:                0204 DEFINED AT LINE 176 IN MAIN.asm
ADDR:               0204 DEFINED AT LINE 177 IN MAIN.asm
BACKSLASH_:         020E DEFINED AT LINE 182 IN MAIN.asm
NUM_:               0211 DEFINED AT LINE 185 IN MAIN.asm
NOP_:               0214 DEFINED AT LINE 188 IN MAIN.asm
RBRACK_:            0216 DEFINED AT LINE 190 IN MAIN.asm
PERCENT_:           0219 DEFINED AT LINE 192 IN MAIN.asm
RBRACE_:            021C DEFINED AT LINE 194 IN MAIN.asm
QUOTE_:             021F DEFINED AT LINE 196 IN MAIN.asm
DOT_:               0222 DEFINED AT LINE 198 IN MAIN.asm
CARET_:             0225 DEFINED AT LINE 200 IN MAIN.asm
COMMA_:             0228 DEFINED AT LINE 202 IN MAIN.asm
DQUOTE_:            022B DEFINED AT LINE 204 IN MAIN.asm
GRAVE_:             022E DEFINED AT LINE 206 IN MAIN.asm
UNDERSCORE_:        0231 DEFINED AT LINE 209 IN MAIN.asm
SLASH_:             0234 DEFINED AT LINE 212 IN MAIN.asm
DOLLAR_:            0237 DEFINED AT LINE 215 IN MAIN.asm
QUESTION_:          023A DEFINED AT LINE 218 IN MAIN.asm
RPAREN_:            023D DEFINED AT LINE 225 IN MAIN.asm
RPAREN:             023D DEFINED AT LINE 226 IN MAIN.asm
LPAREN_:            0245 DEFINED AT LINE 237 IN MAIN.asm
LBRACE_:            0245 DEFINED AT LINE 238 IN MAIN.asm
LBRACE:             0245 DEFINED AT LINE 239 IN MAIN.asm
TILDE_:             024A DEFINED AT LINE 248 IN MAIN.asm
TILDE:              024A DEFINED AT LINE 249 IN MAIN.asm
CHAR:               024A DEFINED AT LINE 250 IN MAIN.asm
PIPE_:              0252 DEFINED AT LINE 260 IN MAIN.asm
PIPE:               0252 DEFINED AT LINE 261 IN MAIN.asm
OR:                 0252 DEFINED AT LINE 262 IN MAIN.asm
SEMICOLON_:         025B DEFINED AT LINE 280 IN MAIN.asm
SEMICOLON:          025B DEFINED AT LINE 281 IN MAIN.asm
DEFINEEND:          025B DEFINED AT LINE 282 IN MAIN.asm
DEFINEEND1:         026D DEFINED AT LINE 291 IN MAIN.asm
                    > USED AT LINE 286 IN MAIN.asm
COLON_:             026F DEFINED AT LINE 302 IN MAIN.asm
COLON:              026F DEFINED AT LINE 303 IN MAIN.asm
DEFINESTART:        027C DEFINED AT LINE 311 IN MAIN.asm
                    > USED AT LINE 307 IN MAIN.asm
LBRACK_:            0285 DEFINED AT LINE 322 IN MAIN.asm
LBRACK:             0285 DEFINED AT LINE 323 IN MAIN.asm
ARRAYSTART:         0285 DEFINED AT LINE 324 IN MAIN.asm
AMPER_:             02A1 DEFINED AT LINE 344 IN MAIN.asm
AMPER:              02A1 DEFINED AT LINE 345 IN MAIN.asm
AND:                02A1 DEFINED AT LINE 346 IN MAIN.asm
AND1:               02A8 DEFINED AT LINE 354 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
UPCASE_:            02AC DEFINED AT LINE 360 IN MAIN.asm
UPCASE:             02AC DEFINED AT LINE 361 IN MAIN.asm
LOWCASE_:           02B1 DEFINED AT LINE 365 IN MAIN.asm
LOWCASE:            02B1 DEFINED AT LINE 366 IN MAIN.asm
IDENT1:             02B6 DEFINED AT LINE 370 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
HASH_:              02C3 DEFINED AT LINE 385 IN MAIN.asm
HASH:               02C3 DEFINED AT LINE 386 IN MAIN.asm
ARRAYINDEX:         02C3 DEFINED AT LINE 387 IN MAIN.asm
ARRAYINDEX0:        02CB DEFINED AT LINE 393 IN MAIN.asm
ARRAYINDEX1:        02CC DEFINED AT LINE 395 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
ARRAYINDEX2:        02D8 DEFINED AT LINE 404 IN MAIN.asm
                    > USED AT LINE 401 IN MAIN.asm
PLUS_:              02DB DEFINED AT LINE 408 IN MAIN.asm
PLUS:               02DB DEFINED AT LINE 411 IN MAIN.asm
ADD:                02DB DEFINED AT LINE 412 IN MAIN.asm
ADD1:               02E5 DEFINED AT LINE 420 IN MAIN.asm
                    > USED AT LINE 416 IN MAIN.asm
ADD3:               02E9 DEFINED AT LINE 425 IN MAIN.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 498 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
ADD4:               02F3 DEFINED AT LINE 433 IN MAIN.asm
                    > USED AT LINE 429 IN MAIN.asm
STAR_:              02F5 DEFINED AT LINE 436 IN MAIN.asm
MINUS_:             02F7 DEFINED AT LINE 438 IN MAIN.asm
BANG_:              02F9 DEFINED AT LINE 440 IN MAIN.asm
EQ_:                02FB DEFINED AT LINE 442 IN MAIN.asm
GT_:                02FD DEFINED AT LINE 444 IN MAIN.asm
LT_:                02FF DEFINED AT LINE 446 IN MAIN.asm
STAR:               0301 DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 437 IN MAIN.asm
MUL:                0301 DEFINED AT LINE 454 IN MAIN.asm
MUL2:               0303 DEFINED AT LINE 457 IN MAIN.asm
MUL3:               030B DEFINED AT LINE 462 IN MAIN.asm
                    > USED AT LINE 471 IN MAIN.asm
MINUS:              031D DEFINED AT LINE 477 IN MAIN.asm
                    > USED AT LINE 439 IN MAIN.asm
SUB:                0329 DEFINED AT LINE 485 IN MAIN.asm
                    > USED AT LINE 482 IN MAIN.asm
SUB1:               0332 DEFINED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 488 IN MAIN.asm
ASSIGN:             033A DEFINED AT LINE 501 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
ASSIGN0:            033C DEFINED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 434 IN MAIN.asm
                    > USED AT LINE 491 IN MAIN.asm
ASSIGN1:            0340 DEFINED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 290 IN MAIN.asm
ASSIGN2:            0349 DEFINED AT LINE 514 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
BANG:               034B DEFINED AT LINE 517 IN MAIN.asm
                    > USED AT LINE 441 IN MAIN.asm
NOT:                0355 DEFINED AT LINE 525 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
EQ:                 035B DEFINED AT LINE 529 IN MAIN.asm
                    > USED AT LINE 443 IN MAIN.asm
EQ0_:               0364 DEFINED AT LINE 536 IN MAIN.asm
EQ1:                0365 DEFINED AT LINE 538 IN MAIN.asm
                    > USED AT LINE 528 IN MAIN.asm
GT:                 0368 DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 445 IN MAIN.asm
LT:                 0372 DEFINED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
LT1:                037A DEFINED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
EQUALS:             0381 DEFINED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
NOTEQUALS:          0388 DEFINED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 524 IN MAIN.asm
LESSTHANEQ:         038F DEFINED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
LESSTHAN:           0394 DEFINED AT LINE 586 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
LESSTHAN1:          0399 DEFINED AT LINE 591 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
TRUE1:              039C DEFINED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 568 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
NULL1:              03A2 DEFINED AT LINE 598 IN MAIN.asm
FALSE1:             03A2 DEFINED AT LINE 599 IN MAIN.asm
                    > USED AT LINE 569 IN MAIN.asm
                    > USED AT LINE 575 IN MAIN.asm
                    > USED AT LINE 589 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 1429 IN MAIN.asm
SHIFTLEFT:          03A8 DEFINED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 554 IN MAIN.asm
SHIFTLEFT1:         03B0 DEFINED AT LINE 613 IN MAIN.asm
                    > USED AT LINE 616 IN MAIN.asm
SHIFTLEFT2:         03B1 DEFINED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
SHIFTRIGHT:         03B8 DEFINED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 546 IN MAIN.asm
SHIFTRIGHT1:        03C0 DEFINED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 634 IN MAIN.asm
SHIFTRIGHT2:        03C4 DEFINED AT LINE 633 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
DOLLAR:             03CB DEFINED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
HEXNUM:             03CB DEFINED AT LINE 641 IN MAIN.asm
HEXNUM1:            03CE DEFINED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 660 IN MAIN.asm
HEXNUM2:            03D6 DEFINED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 647 IN MAIN.asm
QUESTION:           03E8 DEFINED AT LINE 664 IN MAIN.asm
                    > USED AT LINE 219 IN MAIN.asm
IF:                 03E8 DEFINED AT LINE 665 IN MAIN.asm
IFTE:               03F4 DEFINED AT LINE 675 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
IFTE1:              03F5 DEFINED AT LINE 677 IN MAIN.asm
                    > USED AT LINE 672 IN MAIN.asm
BACKSLASH:          0401 DEFINED AT LINE 692 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
LAMBDA:             0401 DEFINED AT LINE 693 IN MAIN.asm
LAMBDA1:            0406 DEFINED AT LINE 696 IN MAIN.asm
                    > USED AT LINE 700 IN MAIN.asm
LAMBDA2:            0416 DEFINED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 702 IN MAIN.asm
DIV:                0422 DEFINED AT LINE 714 IN MAIN.asm
                    > USED AT LINE 1162 IN MAIN.asm
DIVIDE:             0433 DEFINED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
DIVIDE1:            0438 DEFINED AT LINE 731 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
DIVIDE2:            0445 DEFINED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
DIVIDE3:            0446 DEFINED AT LINE 741 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
NUM:                044C DEFINED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
NUM0:               0455 DEFINED AT LINE 755 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
NUM1:               0456 DEFINED AT LINE 757 IN MAIN.asm
                    > USED AT LINE 774 IN MAIN.asm
NUM2:               046E DEFINED AT LINE 775 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
                    > USED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 760 IN MAIN.asm
                    > USED AT LINE 762 IN MAIN.asm
NUM3:               0479 DEFINED AT LINE 783 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
GRAVE:              047C DEFINED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
QUOTE:              047C DEFINED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
DQUOTE:             047C DEFINED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
STRING:             047C DEFINED AT LINE 792 IN MAIN.asm
STRING1:            0487 DEFINED AT LINE 801 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
STRING2:            048A DEFINED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 800 IN MAIN.asm
STRING3:            0490 DEFINED AT LINE 810 IN MAIN.asm
                    > USED AT LINE 808 IN MAIN.asm
PERCENT:            04A3 DEFINED AT LINE 830 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
ARG:                04A3 DEFINED AT LINE 831 IN MAIN.asm
ARG0:               04BF DEFINED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 856 IN MAIN.asm
ARG0A:              04C8 DEFINED AT LINE 858 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
ARG1:               04CD DEFINED AT LINE 861 IN MAIN.asm
                    > USED AT LINE 854 IN MAIN.asm
ARG1A:              04D5 DEFINED AT LINE 868 IN MAIN.asm
                    > USED AT LINE 860 IN MAIN.asm
DOT:                0500 DEFINED AT LINE 897 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
DOTNUMBER_:         050F DEFINED AT LINE 912 IN MAIN.asm
                    > USED AT LINE 908 IN MAIN.asm
DOTDEC:             051A DEFINED AT LINE 919 IN MAIN.asm
                    > USED AT LINE 916 IN MAIN.asm
DOTDEC0:            0534 DEFINED AT LINE 936 IN MAIN.asm
                    > USED AT LINE 923 IN MAIN.asm
DOTDEC1:            0544 DEFINED AT LINE 950 IN MAIN.asm
                    > USED AT LINE 938 IN MAIN.asm
DOTDEC2:            0564 DEFINED AT LINE 964 IN MAIN.asm
                    > USED AT LINE 953 IN MAIN.asm
                    > USED AT LINE 955 IN MAIN.asm
                    > USED AT LINE 957 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
                    > USED AT LINE 962 IN MAIN.asm
DOTDEC3:            0566 DEFINED AT LINE 966 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
DOTDEC4:            0576 DEFINED AT LINE 978 IN MAIN.asm
                    > USED AT LINE 973 IN MAIN.asm
DOTDEC5:            0577 DEFINED AT LINE 980 IN MAIN.asm
                    > USED AT LINE 977 IN MAIN.asm
DOTHEX:             0580 DEFINED AT LINE 991 IN MAIN.asm
                    > USED AT LINE 915 IN MAIN.asm
DOTHEX1:            05A1 DEFINED AT LINE 1009 IN MAIN.asm
                    > USED AT LINE 999 IN MAIN.asm
                    > USED AT LINE 1001 IN MAIN.asm
DOTHEX2:            05AA DEFINED AT LINE 1017 IN MAIN.asm
                    > USED AT LINE 1015 IN MAIN.asm
DOTSTRING_:         05B8 DEFINED AT LINE 1030 IN MAIN.asm
DOTSTRING0:         05BF DEFINED AT LINE 1034 IN MAIN.asm
                    > USED AT LINE 1042 IN MAIN.asm
DOTSTRING1:         05C5 DEFINED AT LINE 1039 IN MAIN.asm
                    > USED AT LINE 1033 IN MAIN.asm
DOTCHAR_:           05D2 DEFINED AT LINE 1049 IN MAIN.asm
DOTXCHARS_:         05D7 DEFINED AT LINE 1055 IN MAIN.asm
DOTXCHARS0:         05D8 DEFINED AT LINE 1057 IN MAIN.asm
                    > USED AT LINE 1051 IN MAIN.asm
DOTXCHARS1:         05E1 DEFINED AT LINE 1063 IN MAIN.asm
                    > USED AT LINE 1073 IN MAIN.asm
DOTXCHARS2:         05E9 DEFINED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1062 IN MAIN.asm
SLASH:              0600 DEFINED AT LINE 1082 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
COMMAND:            0600 DEFINED AT LINE 1083 IN MAIN.asm
COMMAND_M_:         0626 DEFINED AT LINE 1119 IN MAIN.asm
COMMAND_P_:         0629 DEFINED AT LINE 1123 IN MAIN.asm
COMMAND_Q_:         0630 DEFINED AT LINE 1129 IN MAIN.asm
COMMAND_R_:         0639 DEFINED AT LINE 1137 IN MAIN.asm
COMMAND_S_:         063C DEFINED AT LINE 1141 IN MAIN.asm
COMMAND_V_:         063F DEFINED AT LINE 1145 IN MAIN.asm
COMMAND_NOP_:       0642 DEFINED AT LINE 1149 IN MAIN.asm
DECIMAL_:           0644 DEFINED AT LINE 1153 IN MAIN.asm
DECIMAL1:           0647 DEFINED AT LINE 1155 IN MAIN.asm
                    > USED AT LINE 1172 IN MAIN.asm
DIV_:               064C DEFINED AT LINE 1160 IN MAIN.asm
ERROR1_:            0650 DEFINED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 1126 IN MAIN.asm
                    > USED AT LINE 1134 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 1308 IN MAIN.asm
                    > USED AT LINE 1436 IN MAIN.asm
                    > USED AT LINE 1450 IN MAIN.asm
                    > USED AT LINE 1467 IN MAIN.asm
                    > USED AT LINE 1490 IN MAIN.asm
HEXADECIMAL_:       0656 DEFINED AT LINE 1170 IN MAIN.asm
KEY_:               065C DEFINED AT LINE 1175 IN MAIN.asm
OUTPUT_:            065F DEFINED AT LINE 1179 IN MAIN.asm
TRUE_:              0662 DEFINED AT LINE 1183 IN MAIN.asm
WORDS_:             0665 DEFINED AT LINE 1187 IN MAIN.asm
ADDROF_:            0668 DEFINED AT LINE 1191 IN MAIN.asm
ARRAYITER_:         066B DEFINED AT LINE 1195 IN MAIN.asm
COLDSTART_:         066E DEFINED AT LINE 1200 IN MAIN.asm
WORDS:              0671 DEFINED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
BYTES_:             0677 DEFINED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
BYTES1:             067A DEFINED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 1207 IN MAIN.asm
COMMAND_I_:         067F DEFINED AT LINE 1218 IN MAIN.asm
COMMAND_B_:         0688 DEFINED AT LINE 1226 IN MAIN.asm
COMMENT:            0693 DEFINED AT LINE 1237 IN MAIN.asm
                    > USED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1241 IN MAIN.asm
QUIT_:              069C DEFINED AT LINE 1248 IN MAIN.asm
QUIT1:              06A3 DEFINED AT LINE 1254 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
INPUT_:             06A6 DEFINED AT LINE 1260 IN MAIN.asm
ARRAYSIZE_:         06B1 DEFINED AT LINE 1273 IN MAIN.asm
XOR_:               06B9 DEFINED AT LINE 1283 IN MAIN.asm
XOR1:               06BA DEFINED AT LINE 1285 IN MAIN.asm
COMMAND_A_:         06C4 DEFINED AT LINE 1297 IN MAIN.asm
BREAK_:             06D3 DEFINED AT LINE 1313 IN MAIN.asm
BREAK:              06D3 DEFINED AT LINE 1314 IN MAIN.asm
BREAK1:             06DA DEFINED AT LINE 1320 IN MAIN.asm
                    > USED AT LINE 1318 IN MAIN.asm
ABSOLUTE_:          06ED DEFINED AT LINE 1334 IN MAIN.asm
COMMAND_F_:         06FA DEFINED AT LINE 1348 IN MAIN.asm
KEY:                0700 DEFINED AT LINE 1357 IN MAIN.asm
                    > USED AT LINE 1176 IN MAIN.asm
OUTPUT:             0709 DEFINED AT LINE 1366 IN MAIN.asm
                    > USED AT LINE 1180 IN MAIN.asm
COMMAND_F:          0712 DEFINED AT LINE 1375 IN MAIN.asm
                    > USED AT LINE 1349 IN MAIN.asm
FOREACH_:           072B DEFINED AT LINE 1398 IN MAIN.asm
FLUSH_:             072E DEFINED AT LINE 1403 IN MAIN.asm
FILTER_:            0733 DEFINED AT LINE 1407 IN MAIN.asm
FOLD_:              0736 DEFINED AT LINE 1410 IN MAIN.asm
FUNCSRC_:           0739 DEFINED AT LINE 1413 IN MAIN.asm
F1_:                073C DEFINED AT LINE 1416 IN MAIN.asm
F2_:                073F DEFINED AT LINE 1419 IN MAIN.asm
F3_:                0742 DEFINED AT LINE 1422 IN MAIN.asm
F4_:                0745 DEFINED AT LINE 1425 IN MAIN.asm
FALSE_:             0748 DEFINED AT LINE 1428 IN MAIN.asm
                    > USED AT LINE 1396 IN MAIN.asm
COMMAND_M:          074B DEFINED AT LINE 1431 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
MAP_:               0754 DEFINED AT LINE 1438 IN MAIN.asm
COMMAND_R:          0757 DEFINED AT LINE 1441 IN MAIN.asm
                    > USED AT LINE 1138 IN MAIN.asm
RECUR_:             0764 DEFINED AT LINE 1452 IN MAIN.asm
REMAIN_:            076A DEFINED AT LINE 1457 IN MAIN.asm
COMMAND_S:          0770 DEFINED AT LINE 1462 IN MAIN.asm
                    > USED AT LINE 1142 IN MAIN.asm
STRINGITER_:        0779 DEFINED AT LINE 1469 IN MAIN.asm
RANGESRC_:          077C DEFINED AT LINE 1472 IN MAIN.asm
COMMAND_V:          077F DEFINED AT LINE 1475 IN MAIN.asm
                    > USED AT LINE 1146 IN MAIN.asm
CONSTBUFSTART_:     0792 DEFINED AT LINE 1492 IN MAIN.asm
CONSTHEAPSTART_:    0797 DEFINED AT LINE 1496 IN MAIN.asm
CONSTTIBSTART_:     079C DEFINED AT LINE 1500 IN MAIN.asm
VARBUFPTR_:         07A1 DEFINED AT LINE 1504 IN MAIN.asm
VARHEAPPTR_:        07AA DEFINED AT LINE 1509 IN MAIN.asm
VARTIBPTR_:         07B3 DEFINED AT LINE 1514 IN MAIN.asm
VARIABLE:           07BC DEFINED AT LINE 1519 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
                    > USED AT LINE 1507 IN MAIN.asm
                    > USED AT LINE 1512 IN MAIN.asm
                    > USED AT LINE 1517 IN MAIN.asm
CONSTANT:           07BF DEFINED AT LINE 1521 IN MAIN.asm
                    > USED AT LINE 1494 IN MAIN.asm
                    > USED AT LINE 1498 IN MAIN.asm
                    > USED AT LINE 1502 IN MAIN.asm
RANGESRC:           07C2 DEFINED AT LINE 32
                    > USED AT LINE 1473 IN MAIN.asm
RANGESRCM_1872S1534: 07D1 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          083E DEFINED AT LINE 32
                    > USED AT LINE 1196 IN MAIN.asm
ARRAYITERM_1891S1554: 084B DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         08BF DEFINED AT LINE 32
                    > USED AT LINE 1470 IN MAIN.asm
STRINGITERM_1910S1574: 08CC DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                0945 DEFINED AT LINE 32
                    > USED AT LINE 1439 IN MAIN.asm
MAPM_1930S1596:     0952 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             0987 DEFINED AT LINE 32
                    > USED AT LINE 1408 IN MAIN.asm
FILTERM_1944S1611:  0995 DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               09E5 DEFINED AT LINE 32
                    > USED AT LINE 1411 IN MAIN.asm
FOLDM_1963S1631:    09F4 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            0A37 DEFINED AT LINE 32
                    > USED AT LINE 1399 IN MAIN.asm
FOREACHM_1977S1646: 0A45 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0A83 DEFINED AT LINE 32
                    > USED AT LINE 1414 IN MAIN.asm
FUNCSRCM_1991S1661: 0A8F DEFINED AT LINE 39
                    > USED AT LINE 35
DOTARRAY:           0ABC DEFINED AT LINE 32
DOTARRAYM_2001S1672: 0ACA DEFINED AT LINE 39
                    > USED AT LINE 35
UNDERSCORE:         0B04 DEFINED AT LINE 1682 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
COMMA:              0B04 DEFINED AT LINE 1683 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
ADDROF:             0B06 DEFINED AT LINE 1692 IN MAIN.asm
                    > USED AT LINE 1192 IN MAIN.asm
ADDROF1:            0B1A DEFINED AT LINE 1704 IN MAIN.asm
                    > USED AT LINE 1700 IN MAIN.asm
ADDROF2:            0B25 DEFINED AT LINE 1713 IN MAIN.asm
                    > USED AT LINE 1696 IN MAIN.asm
                    > USED AT LINE 1698 IN MAIN.asm
                    > USED AT LINE 1703 IN MAIN.asm
RBRACK:             0B27 DEFINED AT LINE 1737 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
ARRAYEND:           0B27 DEFINED AT LINE 1738 IN MAIN.asm
ARRAYEND1:          0B43 DEFINED AT LINE 1755 IN MAIN.asm
                    > USED AT LINE 1772 IN MAIN.asm
ARRAYEND2:          0B53 DEFINED AT LINE 1765 IN MAIN.asm
                    > USED AT LINE 1761 IN MAIN.asm
ARRAYEND3:          0B58 DEFINED AT LINE 1769 IN MAIN.asm
                    > USED AT LINE 1754 IN MAIN.asm
RBRACE:             0B77 DEFINED AT LINE 1797 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
BLOCKEND:           0B77 DEFINED AT LINE 1798 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 1329 IN MAIN.asm
BLOCKEND1:          0BA9 DEFINED AT LINE 1820 IN MAIN.asm
                    > USED AT LINE 1813 IN MAIN.asm
BLOCKEND2:          0BB5 DEFINED AT LINE 1827 IN MAIN.asm
                    > USED AT LINE 1819 IN MAIN.asm
BLOCKEND3:          0BC7 DEFINED AT LINE 1841 IN MAIN.asm
                    > USED AT LINE 1833 IN MAIN.asm
BLOCKEND4:          0BDB DEFINED AT LINE 1851 IN MAIN.asm
                    > USED AT LINE 1849 IN MAIN.asm
CARET:              0BE4 DEFINED AT LINE 1867 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
GO:                 0BE4 DEFINED AT LINE 1868 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0BE5 DEFINED AT LINE 1870 IN MAIN.asm
                    > USED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
                    > USED AT LINE 1854 IN MAIN.asm
GO2:                0BEB DEFINED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 1873 IN MAIN.asm
GOBLOCK:            0BF6 DEFINED AT LINE 1882 IN MAIN.asm
                    > USED AT LINE 1878 IN MAIN.asm
GOBLOCK2:           0C1B DEFINED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 1980 IN MAIN.asm
GOBLOCK3:           0C25 DEFINED AT LINE 1905 IN MAIN.asm
GOFUNC:             0C29 DEFINED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 1880 IN MAIN.asm
GOFUNC1:            0C42 DEFINED AT LINE 1928 IN MAIN.asm
                    > USED AT LINE 1938 IN MAIN.asm
GOFUNC2:            0C48 DEFINED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 1927 IN MAIN.asm
GOFUNC3:            0C53 DEFINED AT LINE 1941 IN MAIN.asm
                    > USED AT LINE 1917 IN MAIN.asm
GOFUNC4:            0C6B DEFINED AT LINE 1958 IN MAIN.asm
                    > USED AT LINE 1955 IN MAIN.asm
GOFUNC5:            0C6E DEFINED AT LINE 1961 IN MAIN.asm
                    > USED AT LINE 1967 IN MAIN.asm
GOFUNC6:            0C71 DEFINED AT LINE 1965 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
GOFUNC7:            0C74 DEFINED AT LINE 1968 IN MAIN.asm
GOFUNC8:            0C78 DEFINED AT LINE 1973 IN MAIN.asm
                    > USED AT LINE 1893 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
PARSEARGS:          0C83 DEFINED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 695 IN MAIN.asm
PARSEARGS1:         0C8D DEFINED AT LINE 1999 IN MAIN.asm
                    > USED AT LINE 2020 IN MAIN.asm
PARSEARGS1A:        0C95 DEFINED AT LINE 2005 IN MAIN.asm
                    > USED AT LINE 2002 IN MAIN.asm
PARSEARGS2:         0C9D DEFINED AT LINE 2010 IN MAIN.asm
PARSEARGS3:         0CA5 DEFINED AT LINE 2018 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
                    > USED AT LINE 2016 IN MAIN.asm
PARSEARGS4:         0CA8 DEFINED AT LINE 2021 IN MAIN.asm
                    > USED AT LINE 2007 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
PARSEARGS5:         0CAE DEFINED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 2025 IN MAIN.asm
PARSEBLOCK:         0CB9 DEFINED AT LINE 2040 IN MAIN.asm
                    > USED AT LINE 240 IN MAIN.asm
                    > USED AT LINE 706 IN MAIN.asm
PARSEBLOCK1:        0CBD DEFINED AT LINE 2044 IN MAIN.asm
                    > USED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2070 IN MAIN.asm
                    > USED AT LINE 2073 IN MAIN.asm
                    > USED AT LINE 2078 IN MAIN.asm
                    > USED AT LINE 2082 IN MAIN.asm
PARSEBLOCK2:        0CE9 DEFINED AT LINE 2071 IN MAIN.asm
                    > USED AT LINE 2058 IN MAIN.asm
                    > USED AT LINE 2060 IN MAIN.asm
                    > USED AT LINE 2062 IN MAIN.asm
PARSEBLOCK3:        0CEC DEFINED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 2065 IN MAIN.asm
                    > USED AT LINE 2067 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
PARSEBLOCK4:        0CF4 DEFINED AT LINE 2080 IN MAIN.asm
                    > USED AT LINE 2051 IN MAIN.asm
                    > USED AT LINE 2053 IN MAIN.asm
                    > USED AT LINE 2055 IN MAIN.asm
PARSEBLOCK5:        0CF7 DEFINED AT LINE 2083 IN MAIN.asm
                    > USED AT LINE 2079 IN MAIN.asm
PARSEBLOCK6:        0D1F DEFINED AT LINE 2102 IN MAIN.asm
                    > USED AT LINE 2089 IN MAIN.asm
CREATEFUNC:         0D23 DEFINED AT LINE 2110 IN MAIN.asm
                    > USED AT LINE 707 IN MAIN.asm
CREATEFUNC0:        0D42 DEFINED AT LINE 2124 IN MAIN.asm
                    > USED AT LINE 2120 IN MAIN.asm
CREATEFUNC1:        0D5A DEFINED AT LINE 2143 IN MAIN.asm
                    > USED AT LINE 2139 IN MAIN.asm
CREATEFUNC2:        0D6D DEFINED AT LINE 2156 IN MAIN.asm
                    > USED AT LINE 2152 IN MAIN.asm
CREATEFUNC2A:       0D8C DEFINED AT LINE 2182 IN MAIN.asm
                    > USED AT LINE 2169 IN MAIN.asm
CREATEFUNC3:        0D9B DEFINED AT LINE 2194 IN MAIN.asm
                    > USED AT LINE 2204 IN MAIN.asm
CREATEFUNC4:        0DA6 DEFINED AT LINE 2205 IN MAIN.asm
CREATEFUNC5:        0DA7 DEFINED AT LINE 2207 IN MAIN.asm
                    > USED AT LINE 2123 IN MAIN.asm
FLUSHBUFFER:        0DC5 DEFINED AT LINE 2231 IN MAIN.asm
                    > USED AT LINE 928 IN MAIN.asm
                    > USED AT LINE 985 IN MAIN.asm
                    > USED AT LINE 997 IN MAIN.asm
                    > USED AT LINE 1005 IN MAIN.asm
                    > USED AT LINE 1025 IN MAIN.asm
                    > USED AT LINE 1037 IN MAIN.asm
                    > USED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 1404 IN MAIN.asm
                    > USED AT LINE 2432 IN MAIN.asm
PRINTCHARS1:        0DDC DEFINED AT LINE 2245 IN MAIN.asm
                    > USED AT LINE 2254 IN MAIN.asm
PRINTCHARS2:        0DE2 DEFINED AT LINE 2250 IN MAIN.asm
                    > USED AT LINE 2240 IN MAIN.asm
COMMANDTABLE:       0DE7 DEFINED AT LINE 2257 IN MAIN.asm
                    > USED AT LINE 1089 IN MAIN.asm
COMMANDTABLE1:      0DF1 DEFINED AT LINE 2264 IN MAIN.asm
                    > USED AT LINE 2273 IN MAIN.asm
COMMANDTABLE2:      0DF6 DEFINED AT LINE 2270 IN MAIN.asm
                    > USED AT LINE 2261 IN MAIN.asm
                    > USED AT LINE 2263 IN MAIN.asm
JUMPTABLE:          0DFB DEFINED AT LINE 2279 IN MAIN.asm
                    > USED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
                    > USED AT LINE 1124 IN MAIN.asm
                    > USED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
                    > USED AT LINE 1227 IN MAIN.asm
                    > USED AT LINE 1298 IN MAIN.asm
                    > USED AT LINE 1376 IN MAIN.asm
                    > USED AT LINE 1432 IN MAIN.asm
                    > USED AT LINE 1442 IN MAIN.asm
                    > USED AT LINE 1463 IN MAIN.asm
                    > USED AT LINE 1476 IN MAIN.asm
JUMPTABLE0:         0DFD DEFINED AT LINE 2282 IN MAIN.asm
                    > USED AT LINE 2291 IN MAIN.asm
JUMPTABLE1:         0E09 DEFINED AT LINE 2292 IN MAIN.asm
                    > USED AT LINE 2288 IN MAIN.asm
JUMPTABLE2:         0E0C DEFINED AT LINE 2296 IN MAIN.asm
                    > USED AT LINE 2285 IN MAIN.asm
PRTSTR0:            0E0F DEFINED AT LINE 2301 IN MAIN.asm
                    > USED AT LINE 2307 IN MAIN.asm
PRTSTR:             0E13 DEFINED AT LINE 2304 IN MAIN.asm
                    > USED AT LINE 2371 IN MAIN.asm
                    > USED AT LINE 2428 IN MAIN.asm
NESTING:            0E18 DEFINED AT LINE 2320 IN MAIN.asm
                    > USED AT LINE 2454 IN MAIN.asm
                    > USED AT LINE 2512 IN MAIN.asm
NESTING0:           0E22 DEFINED AT LINE 2326 IN MAIN.asm
                    > USED AT LINE 2322 IN MAIN.asm
                    > USED AT LINE 2324 IN MAIN.asm
NESTING1A:          0E29 DEFINED AT LINE 2331 IN MAIN.asm
                    > USED AT LINE 2328 IN MAIN.asm
NESTING1:           0E2C DEFINED AT LINE 2334 IN MAIN.asm
                    > USED AT LINE 2325 IN MAIN.asm
NESTING2:           0E3B DEFINED AT LINE 2343 IN MAIN.asm
                    > USED AT LINE 2338 IN MAIN.asm
                    > USED AT LINE 2340 IN MAIN.asm
NESTING3:           0E3D DEFINED AT LINE 2346 IN MAIN.asm
                    > USED AT LINE 2342 IN MAIN.asm
NESTING4:           0E48 DEFINED AT LINE 2353 IN MAIN.asm
                    > USED AT LINE 2348 IN MAIN.asm
                    > USED AT LINE 2350 IN MAIN.asm
PROMPT:             0E4A DEFINED AT LINE 2357 IN MAIN.asm
                    > USED AT LINE 2433 IN MAIN.asm
CRLF:               0E53 DEFINED AT LINE 2362 IN MAIN.asm
                    > USED AT LINE 2525 IN MAIN.asm
PRINTSTR:           0E5A DEFINED AT LINE 2369 IN MAIN.asm
                    > USED AT LINE 2358 IN MAIN.asm
                    > USED AT LINE 2363 IN MAIN.asm
                    > USED AT LINE 2582 IN MAIN.asm
INIT:               0E61 DEFINED AT LINE 2376 IN MAIN.asm
                    > USED AT LINE 2425 IN MAIN.asm
INIT1:              0E69 DEFINED AT LINE 2380 IN MAIN.asm
                    > USED AT LINE 2386 IN MAIN.asm
WARMINIT:           0E71 DEFINED AT LINE 2388 IN MAIN.asm
COLDBOOT0:          0E84 DEFINED AT LINE 2395 IN MAIN.asm
                    > USED AT LINE 2383 IN MAIN.asm
                    > USED AT LINE 2421 IN MAIN.asm
COLDINIT:           0E8E DEFINED AT LINE 2401 IN MAIN.asm
COLDBOOT1:          0E9F DEFINED AT LINE 2410 IN MAIN.asm
                    > USED AT LINE 2413 IN MAIN.asm
COLDSTART:          0EAC DEFINED AT LINE 2419 IN MAIN.asm
                    > USED AT LINE 1201 IN MAIN.asm
START:              0EB5 DEFINED AT LINE 2423 IN MAIN.asm
                    > USED AT LINE 7
START1:             0EBB DEFINED AT LINE 2426 IN MAIN.asm
                    > USED AT LINE 2393 IN MAIN.asm
                    > USED AT LINE 2422 IN MAIN.asm
INTERPRET:          0EC1 DEFINED AT LINE 2430 IN MAIN.asm
                    > USED AT LINE 2558 IN MAIN.asm
                    > USED AT LINE 2573 IN MAIN.asm
                    > USED AT LINE 2590 IN MAIN.asm
                    > USED AT LINE 2593 IN MAIN.asm
                    > USED AT LINE 2598 IN MAIN.asm
INTERPRET2:         0ED0 DEFINED AT LINE 2439 IN MAIN.asm
                    > USED AT LINE 2503 IN MAIN.asm
                    > USED AT LINE 2580 IN MAIN.asm
                    > USED AT LINE 2584 IN MAIN.asm
INTERPRET3:         0ED8 DEFINED AT LINE 2447 IN MAIN.asm
                    > USED AT LINE 2460 IN MAIN.asm
INTERPRET4:         0EE3 DEFINED AT LINE 2456 IN MAIN.asm
                    > USED AT LINE 2445 IN MAIN.asm
INTERPRET5:         0EE8 DEFINED AT LINE 2463 IN MAIN.asm
                    > USED AT LINE 2513 IN MAIN.asm
                    > USED AT LINE 2528 IN MAIN.asm
INTERPRET5A:        0F06 DEFINED AT LINE 2500 IN MAIN.asm
INTERPRET6:         0F08 DEFINED AT LINE 2505 IN MAIN.asm
                    > USED AT LINE 2467 IN MAIN.asm
INTERPRET7:         0F16 DEFINED AT LINE 2515 IN MAIN.asm
                    > USED AT LINE 2472 IN MAIN.asm
INTERPRET8:         0F29 DEFINED AT LINE 2530 IN MAIN.asm
                    > USED AT LINE 2470 IN MAIN.asm
NEXT:               0F44 DEFINED AT LINE 2543 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2547 IN MAIN.asm
NEXT1:              0F54 DEFINED AT LINE 2555 IN MAIN.asm
                    > USED AT LINE 2548 IN MAIN.asm
EXIT:               0F5B DEFINED AT LINE 2560 IN MAIN.asm
                    > USED AT LINE 2557 IN MAIN.asm
RUN:                0F5F DEFINED AT LINE 2564 IN MAIN.asm
                    > USED AT LINE 2571 IN MAIN.asm
                    > USED AT LINE 2588 IN MAIN.asm
                    > USED AT LINE 2596 IN MAIN.asm
ERROR:              0F63 DEFINED AT LINE 2569 IN MAIN.asm
                    > USED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 704 IN MAIN.asm
                    > USED AT LINE 1167 IN MAIN.asm
BACKSPACE_:         0F77 DEFINED AT LINE 2577 IN MAIN.asm
                    > USED AT LINE 2477 IN MAIN.asm
EDIT_:              0F87 DEFINED AT LINE 2587 IN MAIN.asm
                    > USED AT LINE 2475 IN MAIN.asm
REEDIT_:            0F9F DEFINED AT LINE 2592 IN MAIN.asm
                    > USED AT LINE 2479 IN MAIN.asm
PRINTSTACK_:        0FA2 DEFINED AT LINE 2595 IN MAIN.asm
F1:                 0FAC DEFINED AT LINE 10
                    > USED AT LINE 1417 IN MAIN.asm
F2:                 0FAC DEFINED AT LINE 11
                    > USED AT LINE 1420 IN MAIN.asm
F3:                 0FAC DEFINED AT LINE 12
                    > USED AT LINE 1423 IN MAIN.asm
F4:                 0FAC DEFINED AT LINE 13
                    > USED AT LINE 1426 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 2416 IN MAIN.asm
                    > USED AT LINE 2420 IN MAIN.asm
                    > USED AT LINE 2424 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1501 IN MAIN.asm
                    > USED AT LINE 2436 IN MAIN.asm
                    > USED AT LINE 2444 IN MAIN.asm
                    > USED AT LINE 2507 IN MAIN.asm
                    > USED AT LINE 2517 IN MAIN.asm
                    > USED AT LINE 2532 IN MAIN.asm
                    > USED AT LINE 2535 IN MAIN.asm
BUF:                2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 2236 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1706 IN MAIN.asm
                    > USED AT LINE 2407 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2403 IN MAIN.asm
VDATAWIDTH:         23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 390 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1759 IN MAIN.asm
VNUMBASE:           23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 1156 IN MAIN.asm
VTIBPTR:            23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1515 IN MAIN.asm
                    > USED AT LINE 1516 IN MAIN.asm
                    > USED AT LINE 2437 IN MAIN.asm
                    > USED AT LINE 2534 IN MAIN.asm
VBUFPTR:            23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 920 IN MAIN.asm
                    > USED AT LINE 929 IN MAIN.asm
                    > USED AT LINE 930 IN MAIN.asm
                    > USED AT LINE 993 IN MAIN.asm
                    > USED AT LINE 1006 IN MAIN.asm
                    > USED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1043 IN MAIN.asm
                    > USED AT LINE 1044 IN MAIN.asm
                    > USED AT LINE 1061 IN MAIN.asm
                    > USED AT LINE 1074 IN MAIN.asm
                    > USED AT LINE 1505 IN MAIN.asm
                    > USED AT LINE 1506 IN MAIN.asm
                    > USED AT LINE 2235 IN MAIN.asm
                    > USED AT LINE 2237 IN MAIN.asm
VNEXT:              23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2415 IN MAIN.asm
VHEAPPTR:           23F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 793 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
                    > USED AT LINE 1510 IN MAIN.asm
                    > USED AT LINE 1511 IN MAIN.asm
                    > USED AT LINE 1748 IN MAIN.asm
                    > USED AT LINE 1782 IN MAIN.asm
                    > USED AT LINE 1786 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
                    > USED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2100 IN MAIN.asm
                    > USED AT LINE 2122 IN MAIN.asm
                    > USED AT LINE 2127 IN MAIN.asm
                    > USED AT LINE 2158 IN MAIN.asm
                    > USED AT LINE 2224 IN MAIN.asm
VRECUR:             23F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1454 IN MAIN.asm
                    > USED AT LINE 1846 IN MAIN.asm
                    > USED AT LINE 1853 IN MAIN.asm
VDEFINE:            23F4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 283 IN MAIN.asm
                    > USED AT LINE 288 IN MAIN.asm
                    > USED AT LINE 314 IN MAIN.asm
VPOINTER:           23F6 DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 178 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
                    > USED AT LINE 397 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 864 IN MAIN.asm
                    > USED AT LINE 1520 IN MAIN.asm
VREMAIN:            23F8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 721 IN MAIN.asm
                    > USED AT LINE 1458 IN MAIN.asm
VSAVEDIP:           23FA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 2389 IN MAIN.asm
                    > USED AT LINE 2537 IN MAIN.asm
VSAVEDSP:           23FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2390 IN MAIN.asm
                    > USED AT LINE 2538 IN MAIN.asm
VSAVEDNEXT:         23FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2391 IN MAIN.asm
                    > USED AT LINE 2539 IN MAIN.asm
VSAVEDBP:           2400 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2392 IN MAIN.asm
                    > USED AT LINE 2540 IN MAIN.asm
VTEMP1:             2402 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 1741 IN MAIN.asm
                    > USED AT LINE 1787 IN MAIN.asm
                    > USED AT LINE 1801 IN MAIN.asm
                    > USED AT LINE 1845 IN MAIN.asm
                    > USED AT LINE 1883 IN MAIN.asm
                    > USED AT LINE 1889 IN MAIN.asm
                    > USED AT LINE 1918 IN MAIN.asm
                    > USED AT LINE 1939 IN MAIN.asm
                    > USED AT LINE 1946 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
                    > USED AT LINE 2092 IN MAIN.asm
                    > USED AT LINE 2101 IN MAIN.asm
                    > USED AT LINE 2113 IN MAIN.asm
                    > USED AT LINE 2225 IN MAIN.asm
VTEMP2:             2404 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 1804 IN MAIN.asm
                    > USED AT LINE 1844 IN MAIN.asm
                    > USED AT LINE 1919 IN MAIN.asm
                    > USED AT LINE 1940 IN MAIN.asm
                    > USED AT LINE 2115 IN MAIN.asm
                    > USED AT LINE 2215 IN MAIN.asm
VTEMP3:             2406 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 2112 IN MAIN.asm
                    > USED AT LINE 2226 IN MAIN.asm
VLASTDEF:           2408 DEFINED AT LINE 60 IN ram.asm
TBPTR:              240A DEFINED AT LINE 61 IN ram.asm
TITLEBUF:           240C DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 2378 IN MAIN.asm
                    > USED AT LINE 2397 IN MAIN.asm
                    > USED AT LINE 2427 IN MAIN.asm
HEAP:               2420 DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 1497 IN MAIN.asm
                    > USED AT LINE 2085 IN MAIN.asm
