0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 0C               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 0C               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 0C               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 0C               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 0C               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 0C               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 0C               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 0C               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 0C               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 0C               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 0B               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 0C               LD   (RST08),HL   
0094   22 D2 0C               LD   (RST10),HL   
0097   22 D4 0C               LD   (RST18),HL   
009A   22 D6 0C               LD   (RST20),HL   
009D   22 D8 0C               LD   (RST28),HL   
00A0   22 DA 0C               LD   (RST30),HL   
00A3   22 DE 0C               LD   (INTVEC),HL   
00A6   22 E0 0C               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 0C               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 0C               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 80 0B               LD   SP,STACK   
00C6   CD 95 09               CALL   init   
00C9   C3 B3 09               JP   start   
00CC                             ; 
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; ?
00CC                DC2:      EQU   18   ; ?
00CC                DC3:      EQU   19   ; ?
00CC                ESC:      EQU   27   ; ?
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; dollar_list*                         -- dollar_list*
00CC                             ; first_arg*                        -- first_arg*
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0184   20 0A                  DW   next   ; g nNext
0186   00 10                  DW   heap   ; h vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available ~ `
0220   85                     DB   lsb(nop_)   ; SP
0221   39                     DB   lsb(bang_)   ; !
0222   4D                     DB   lsb(dblquote_)   ; "
0223   41                     DB   lsb(hash_)   ; #
0224   09                     DB   lsb(dollar_)   ; $
0225   12                     DB   lsb(percent_)   ; %
0226   06                     DB   lsb(amper_)   ; &
0227   1E                     DB   lsb(tick_)   ; '
0228   6D                     DB   lsb(lparen_)   ; (
0229   87                     DB   lsb(rparen_)   ; )
022A   36                     DB   lsb(star_)   ; *
022B   00                     DB   lsb(plus_)   ; +
022C   4A                     DB   lsb(comma_)   ; ,
022D   50                     DB   lsb(minus_)   ; -
022E   24                     DB   lsb(dot_)   ; .
022F   82                     DB   lsb(slash_)   ; /	
0230   3E                     DB   lsb(num_)   ; 0
0231   3E                     DB   lsb(num_)   ; 1
0232   3E                     DB   lsb(num_)   ; 2
0233   3E                     DB   lsb(num_)   ; 3
0234   3E                     DB   lsb(num_)   ; 4
0235   3E                     DB   lsb(num_)   ; 5
0236   3E                     DB   lsb(num_)   ; 6
0237   3E                     DB   lsb(num_)   ; 7
0238   3E                     DB   lsb(num_)   ; 8
0239   3E                     DB   lsb(num_)   ; 9
023A   2A                     DB   lsb(colon_)   ; :
023B   21                     DB   lsb(semicolon_)   ; ;
023C   70                     DB   lsb(lt_)   ; <
023D   53                     DB   lsb(eq_)   ; =
023E   62                     DB   lsb(gt_)   ; >
023F   33                     DB   lsb(question_)   ; ?
0240   03                     DB   lsb(at_)   ; @
0241   2D                     DB   lsb(upcase_)   ; A
0242   2D                     DB   lsb(upcase_)   ; B
0243   2D                     DB   lsb(upcase_)   ; C
0244   2D                     DB   lsb(upcase_)   ; D
0245   2D                     DB   lsb(upcase_)   ; E
0246   2D                     DB   lsb(upcase_)   ; F
0247   2D                     DB   lsb(upcase_)   ; G
0248   2D                     DB   lsb(upcase_)   ; h
0249   2D                     DB   lsb(upcase_)   ; I
024A   2D                     DB   lsb(upcase_)   ; J
024B   2D                     DB   lsb(upcase_)   ; K
024C   2D                     DB   lsb(upcase_)   ; L
024D   2D                     DB   lsb(upcase_)   ; M
024E   2D                     DB   lsb(upcase_)   ; N
024F   2D                     DB   lsb(upcase_)   ; O
0250   2D                     DB   lsb(upcase_)   ; p
0251   2D                     DB   lsb(upcase_)   ; Q
0252   2D                     DB   lsb(upcase_)   ; R
0253   2D                     DB   lsb(upcase_)   ; S
0254   2D                     DB   lsb(upcase_)   ; T
0255   2D                     DB   lsb(upcase_)   ; U
0256   2D                     DB   lsb(upcase_)   ; V
0257   2D                     DB   lsb(upcase_)   ; W
0258   2D                     DB   lsb(upcase_)   ; X
0259   2D                     DB   lsb(upcase_)   ; Y
025A   2D                     DB   lsb(upcase_)   ; Z
025B   0C                     DB   lsb(lbrack_)   ; [
025C   15                     DB   lsb(backslash_)   ; \
025D   0F                     DB   lsb(rbrack_)   ; ]
025E   47                     DB   lsb(caret_)   ; ^
025F   27                     DB   lsb(underscore_)   ; _
0260   85                     DB   lsb(nop_)   ; `     used for testing string   	
0261   30                     DB   lsb(lowcase_)   ; a
0262   30                     DB   lsb(lowcase_)   ; b
0263   30                     DB   lsb(lowcase_)   ; c
0264   30                     DB   lsb(lowcase_)   ; d
0265   30                     DB   lsb(lowcase_)   ; e
0266   30                     DB   lsb(lowcase_)   ; f
0267   30                     DB   lsb(lowcase_)   ; g
0268   30                     DB   lsb(lowcase_)   ; h
0269   30                     DB   lsb(lowcase_)   ; i
026A   30                     DB   lsb(lowcase_)   ; j
026B   30                     DB   lsb(lowcase_)   ; k
026C   30                     DB   lsb(lowcase_)   ; l
026D   30                     DB   lsb(lowcase_)   ; m
026E   30                     DB   lsb(lowcase_)   ; n
026F   30                     DB   lsb(lowcase_)   ; o
0270   30                     DB   lsb(lowcase_)   ; p
0271   30                     DB   lsb(lowcase_)   ; q
0272   30                     DB   lsb(lowcase_)   ; r
0273   30                     DB   lsb(lowcase_)   ; s
0274   30                     DB   lsb(lowcase_)   ; t
0275   30                     DB   lsb(lowcase_)   ; u
0276   30                     DB   lsb(lowcase_)   ; v
0277   30                     DB   lsb(lowcase_)   ; w
0278   30                     DB   lsb(lowcase_)   ; x
0279   30                     DB   lsb(lowcase_)   ; y
027A   30                     DB   lsb(lowcase_)   ; z
027B   18                     DB   lsb(lbrace_)   ; {
027C   44                     DB   lsb(pipe_)   ; |
027D   1B                     DB   lsb(rbrace_)   ; }
027E   85                     DB   lsb(nop_)   ; ~
027F   85                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 8A 03               JP   plus   
0303                AT_:         
0303   C3 A4 03               JP   at   
0306                AMPER_:      
0306   C3 B0 03               JP   amper   
0309                DOLLAR_:      
0309   C3 D4 03               JP   arg   
030C                LBRACK_:      
030C   C3 0B 04               JP   arrBegin   
030F                RBRACK_:      
030F   C3 27 04               JP   arrEnd   
0312                PERCENT_:      
0312   C3 75 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 9E 04               JP   backslash   
0318                LBRACE_:      
0318   C3 D4 04               JP   block   
031B                RBRACE_:      
031B   C3 3D 05               JP   blockEnd   
031E                TICK_:       
031E   C3 92 05               JP   char   
0321                SEMICOLON_:      
0321   C3 86 07               JP   semicolon   
0324                DOT_:        
0324   C3 D6 05               JP   dot   
0327                UNDERSCORE_:      
0327   C3 78 07               JP   remain   
032A                COLON_:      
032A   C3 A7 05               JP   colon   
032D                UPCASE_:      
032D   C3 FC 06               JP   upcase   
0330                LOWCASE_:      
0330   C3 01 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 13 07               JP   if   
0336                STAR_:       
0336   C3 2C 07               JP   mul   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 48 07               JP   num   
0341                HASH_:       
0341   C3 DF 06               JP   hexnum   
0344                PIPE_:       
0344   C3 BB 03               JP   or   
0347                CARET_:      
0347   C3 3D 06               JP   caret   
034A                COMMA_:      
034A   C3 A9 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 C5 07               JP   string   
0350                MINUS_:      
0350   C3 ED 07               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 8D 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 19 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA B2 07               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 0C                  JR   lt1   
036D                LPAREN_:      
036D   C3 3A 06               JP   lparen   
0370                LT_:         
0370   03                     INC   bc   
0371   0A                     LD   a,(bc)   
0372   FE 3C                  CP   "<"   
0374   CA A2 07               JP   z,shiftLeft   
0377   E1                     POP   hl   
0378   D1                     POP   de   
0379                LT1:         
0379   FE 3D                  CP   "="   
037B   CA 21 06               JP   z,lessthaneq   
037E   0B                     DEC   bc   
037F   C3 26 06               JP   lessthan   
0382                SLASH_:      
0382   C3 B8 05               JP   slash   
0385                NOP_:        
0385   DD E9                  JP   (ix)   
0387                RPAREN_:      
0387   C3 7E 07               JP   rparen   
038A                             ;*******************************************************************
038A                             ; word operators
038A                             ;*******************************************************************
038A                PLUS:        
038A   03                     INC   bc   
038B   0A                     LD   a,(bc)   
038C   FE 2B                  CP   "+"   ; ++ increment variable
038E   20 05                  JR   nz,add1   
0390   E1                     POP   hl   
0391   23                     INC   hl   
0392   C3 8F 04               JP   assign0   
0395                ADD1:        
0395   0B                     DEC   bc   
0396   D1                     POP   de   ; second term
0397   E1                     POP   hl   ; first term
0398   19                     ADD   hl,de   
0399                ADD3:        
0399   03                     INC   bc   
039A   0A                     LD   a,(bc)   
039B   FE 3D                  CP   "="   ; += add to variable
039D   CA 8F 04               JP   z,assign0   
03A0   E5                     PUSH   hl   
03A1   0B                     DEC   bc   
03A2   DD E9                  JP   (ix)   
03A4                             ; @ addr
03A4                             ; -- ptr
03A4                AT:          
03A4   2A EE 0C               LD   hl,(vPointer)   
03A7   E5                     PUSH   hl   
03A8   21 EE 0C               LD   hl,vPointer   
03AB   22 EE 0C               LD   (vPointer),hl   
03AE   DD E9                  JP   (ix)   
03B0                AMPER:       
03B0   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B1   E1                     POP   hl   
03B2   7B                     LD   a,e   
03B3   A5                     AND   l   
03B4   6F                     LD   l,a   
03B5   7A                     LD   a,d   
03B6   A4                     AND   h   
03B7                AND1:        
03B7   67                     LD   h,a   
03B8   C3 99 03               JP   add3   
03BB                OR:          
03BB   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03BC   E1                     POP   hl   
03BD   7B                     LD   a,e   
03BE   B5                     OR   l   
03BF   6F                     LD   l,a   
03C0   7A                     LD   a,d   
03C1   B4                     OR   h   
03C2   18 F3                  JR   and1   
03C4                XOR:         
03C4   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03C5                XOR1:        
03C5   E1                     POP   hl   
03C6   7B                     LD   a,e   
03C7   AD                     XOR   l   
03C8   6F                     LD   l,a   
03C9   7A                     LD   a,d   
03CA   AC                     XOR   h   
03CB   67                     LD   h,a   
03CC   E5                     PUSH   hl   
03CD   DD E9                  JP   (ix)   
03CF                INVERT:      ; Bitwise INVert the top member of the stack
03CF   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03D2   18 F1                  JR   xor1   
03D4                             ; $a .. $z
03D4                             ; -- value
03D4                             ; returns value of arg
03D4                ARG:         
03D4   FD 5E 04               LD   e,(iy+4)   ; hl = dollar_list*
03D7   FD 56 05               LD   d,(iy+5)   
03DA   EB                     EX   de,hl   
03DB   7D                     LD   a,l   ; dollar_list* == null, skip
03DC   B4                     OR   h   
03DD   28 1C                  JR   z,arg0a   
03DF   2B                     DEC   hl   ; a = num_args, hl = dollar_list*
03E0   2B                     DEC   hl   
03E1   7E                     LD   a,(hl)   
03E2   23                     INC   hl   
03E3   23                     INC   hl   
03E4   B7                     OR   a   
03E5   28 14                  JR   z,arg0a   ; num_args == 0, skip
03E7   5F                     LD   e,a   ; e = a = num_args
03E8   03                     INC   bc   ; a = next char = dollar_name
03E9   0A                     LD   a,(bc)   
03EA   C5                     PUSH   bc   ; save IP
03EB   43                     LD   b,e   ; b = e = num_args
03EC   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03EF   FD 56 03               LD   d,(iy+3)   
03F2                ARG0:        
03F2   1B                     DEC   de   ; a = dollar_name, de = next arg*
03F3   1B                     DEC   de   
03F4   BE                     CP   (hl)   
03F5   28 09                  JR   z,arg1   
03F7   23                     INC   hl   ; hl = next dollar_list*
03F8   10 F8                  DJNZ   arg0   
03FA   C1                     POP   bc   ; no match, restore IP
03FB                ARG0A:       
03FB   11 00 00               LD   de,0   ; return 0
03FE   18 08                  JR   arg1a   
0400                ARG1:        
0400   C1                     POP   bc   ; restore IP
0401   EB                     EX   de,hl   ; hl = arg*
0402   22 EE 0C               LD   (vPointer),hl   ; store arg* in setter
0405   5E                     LD   e,(hl)   
0406   23                     INC   hl   
0407   56                     LD   d,(hl)   ; de = arg
0408                ARG1A:       
0408   D5                     PUSH   de   ; push arg
0409   DD E9                  JP   (ix)   
040B                ARRBEGIN:      
040B   11 00 00               LD   de,0   ; create stack frame
040E   D5                     PUSH   de   ; push null for IP
040F   FD 5E 04               LD   e,(iy+4)   ; push dollar_list* from parent stack frame
0412   FD 56 05               LD   d,(iy+5)   ; 
0415   D5                     PUSH   de   ; 
0416   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0419   FD 56 03               LD   d,(iy+3)   ; 
041C   D5                     PUSH   de   ; 
041D   FD E5                  PUSH   iy   ; push BP
041F   FD 21 00 00            LD   iy,0   ; BP = SP
0423   FD 39                  ADD   iy,sp   
0425   DD E9                  JP   (ix)   
0427                ARREND:      
0427   FD 54                  LD   d,iyh   ; de = BP
0429   FD 5D                  LD   e,iyl   
042B   ED 43 FA 0C            LD   (vTemp1),bc   ; save IP
042F   62 6B                  LD   hl,de   ; hl = de = BP
0431   B7                     OR   a   
0432   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0434   CB 3C                  SRL   h   ; 
0436   CB 1D                  RR   l   
0438   44 4D                  LD   bc,hl   ; bc = count
043A   2A EC 0C               LD   hl,(vHeapPtr)   ; hl = array[-2]
043D   71                     LD   (hl),c   ; write num items in length word
043E   23                     INC   hl   
043F   70                     LD   (hl),b   
0440   23                     INC   hl   ; hl = array[0], bc = count
0441                             ; de = BP, hl = array[0], bc = count
0441                ARREND1:      
0441   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0444   77                     LD   (hl),a   ; write lsb of array item
0445   23                     INC   hl   ; move to msb of array item
0446   3A E6 0C               LD   a,(vDataWidth)   ; vDataWidth=1?
0449   3D                     DEC   a   
044A   28 05                  JR   z,arrEnd2   
044C   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
044F   77                     LD   (hl),a   ; write msb of array item
0450   23                     INC   hl   ; move to next word in array
0451                ARREND2:      
0451   FD 2B                  DEC   iy   ; move to next word on stack
0453   FD 2B                  DEC   iy   
0455   0B                     DEC   bc   ; dec items count
0456   79                     LD   a,c   ; if not zero loop
0457   B0                     OR   b   
0458   20 E7                  JR   nz,arrEnd1   
045A   EB                     EX   de,hl   ; de = end of array, hl = BP
045B   F9                     LD   sp,hl   ; sp = BP
045C   E1                     POP   hl   ; de = end of array, hl = old BP
045D   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
045E   FD 62                  LD   iyh,d   
0460   FD 6B                  LD   iyl,e   
0462   D1                     POP   de   ; pop dollar_list (discard)
0463   D1                     POP   de   ; pop first_arg* (discard)
0464   D1                     POP   de   ; pop IP (discard)
0465   ED 5B EC 0C            LD   de,(vHeapPtr)   ; de = array[-2]
0469   22 EC 0C               LD   (vHeapPtr),hl   ; move heap* to end of array
046C   ED 4B FA 0C            LD   bc,(vTemp1)   ; restore IP
0470   13                     INC   de   ; de = array[0]
0471   13                     INC   de   
0472   D5                     PUSH   de   ; return array[0]
0473   DD E9                  JP   (ix)   
0475                             ; index of an array, based on vDataWidth
0475                             ; array num -- value    ; also sets vPointer to address
0475                ARRINDEX:      
0475   E1                     POP   hl   ; hl = index
0476   D1                     POP   de   ; de = array
0477   3A E6 0C               LD   a,(vDataWidth)   ; a = data width
047A   3D                     DEC   a   
047B   28 01                  JR   z,arrIndex1   
047D                ARRINDEX0:      
047D   29                     ADD   hl,hl   ; if data width = 2 then double
047E                ARRINDEX1:      
047E   19                     ADD   hl,de   ; add addr
047F   22 EE 0C               LD   (vPointer),hl   ; store address in setter
0482   16 00                  LD   d,0   
0484   5E                     LD   e,(hl)   
0485   B7                     OR   a   ; check data width again
0486   28 02                  JR   z,arrIndex2   
0488   23                     INC   hl   
0489   56                     LD   d,(hl)   
048A                ARRINDEX2:      
048A   D5                     PUSH   de   
048B   DD E9                  JP   (ix)   
048D                             ; value _oldValue --            ; uses address in vPointer
048D                ASSIGN:      
048D   E1                     POP   hl   ; discard last accessed value
048E   E1                     POP   hl   ; hl = new value
048F                ASSIGN0:      
048F   EB                     EX   de,hl   ; de = new value
0490                ASSIGNX:      
0490   2A EE 0C               LD   hl,(vPointer)   
0493   73                     LD   (hl),e   
0494   3A E6 0C               LD   a,(vDataWidth)   
0497   3D                     DEC   a   ; is it byte?
0498   28 02                  JR   z,assign1   
049A   23                     INC   hl   
049B   72                     LD   (hl),d   
049C                ASSIGN1:      
049C   DD E9                  JP   (ix)   
049E                             ; dollar_list - parses input (ab:c)
049E                             ; names after the : represent uninitialised locals
049E                             ; return values are the state of the stack after the block ends
049E                BACKSLASH:      
049E                DOLLAR_LIST:      
049E   11 00 00               LD   de,0   ; d = count locals, e = count args ()
04A1   2A EC 0C               LD   hl,(vHeapPtr)   ; hl = heap*
04A4   23                     INC   hl   ; skip length field to start
04A5   23                     INC   hl   
04A6   E5                     PUSH   hl   ; save start of dollar_list
04A7   03                     INC   bc   ; point to next char
04A8                DOLLAR_LIST1:      
04A8   0A                     LD   a,(bc)   
04A9   FE 3A                  CP   ":"   ; ":" switches from args to locals
04AB   20 03                  JR   nz,dollar_list1a   
04AD   14                     INC   d   ; non zero value local count acts as flag
04AE   18 10                  JR   dollar_list3   
04B0                DOLLAR_LIST1A:      
04B0   FE 41                  CP   "A"   ; < "A" terminates dollar_list
04B2   38 0F                  JR   c,dollar_list4   
04B4   FE 7B                  CP   "z"+1   ; > "z" terminates dollar_list
04B6   30 0B                  JR   nc,dollar_list4   
04B8                DOLLAR_LIST2:      
04B8   77                     LD   (hl),a   
04B9   23                     INC   hl   
04BA   1C                     INC   e   ; increase arg count
04BB   AF                     XOR   a   
04BC   B2                     OR   d   
04BD   28 01                  JR   z,dollar_list3   
04BF   14                     INC   d   ; if d > 0 increase local count
04C0                DOLLAR_LIST3:      
04C0   03                     INC   bc   ; point to next char
04C1   18 E5                  JR   dollar_list1   
04C3                DOLLAR_LIST4:      
04C3   AF                     XOR   a   
04C4   B2                     OR   d   
04C5   28 01                  JR   z,dollar_list5   
04C7   15                     DEC   d   ; remove initial inc
04C8                DOLLAR_LIST5:      
04C8   23                     INC   hl   
04C9   22 EC 0C               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04CC   E1                     POP   hl   ; hl = start of dollar_list
04CD   E5                     PUSH   hl   ; return start of dollar_list
04CE   2B                     DEC   hl   ; write number of locals at start - 1
04CF   72                     LD   (hl),d   
04D0   2B                     DEC   hl   ; write number of args + locals at start - 2
04D1   73                     LD   (hl),e   
04D2   DD E9                  JP   (ix)   
04D4                BLOCK:       
04D4   C5                     PUSH   bc   ; return pointer to first { of block
04D5   03                     INC   bc   
04D6   16 01                  LD   d,1   ; nesting: count first parenthesis
04D8                BLOCK1:      ; Skip to end of definition
04D8   0A                     LD   a,(bc)   ; Get the next character
04D9   03                     INC   bc   ; Point to next character
04DA   FE 21                  CP   " " + 1   ; ignore whitespace
04DC   38 FA                  JR   c,block1   
04DE   FE 29                  CP   ")"   
04E0   28 2D                  JR   z,block4   
04E2   FE 7D                  CP   "}"   
04E4   28 29                  JR   z,block4   
04E6   FE 5D                  CP   "]"   
04E8   28 25                  JR   z,block4   
04EA   FE 28                  CP   "("   
04EC   28 16                  JR   z,block2   
04EE   FE 7B                  CP   "{"   
04F0   28 12                  JR   z,block2   
04F2   FE 5B                  CP   "["   
04F4   28 0E                  JR   z,block2   
04F6   FE 27                  CP   "'"   
04F8   28 0D                  JR   z,block3   
04FA   FE 60                  CP   "`"   
04FC   28 09                  JR   z,block3   
04FE   FE 22                  CP   $22   
0500   28 05                  JR   z,block3   
0502   18 D4                  JR   block1   
0504                BLOCK2:      
0504   14                     INC   d   
0505   18 D1                  JR   block1   
0507                BLOCK3:      
0507   3E 80                  LD   a,$80   
0509   AA                     XOR   d   
050A   47                     LD   b,a   
050B   20 CB                  JR   nz,block1   
050D   18 03                  JR   block5   
050F                BLOCK4:      
050F   15                     DEC   d   
0510   20 C6                  JR   nz,block1   ; get the next element
0512                BLOCK5:      
0512   60 69                  LD   hl,bc   ; hl = IP
0514   11 00 10               LD   de,HEAP   ; is IP pointing to object in heap
0517   B7                     OR   a   ; IP - HEAP
0518   ED 52                  SBC   hl,de   
051A   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
051C   28 1C                  JR   z,block6   
051E   60 69                  LD   hl,bc   ; hl = IP
0520   D1                     POP   de   ; de = block*
0521   ED 43 FA 0C            LD   (vTemp1),bc   ; save IP
0525   B7                     OR   a   ; bc = size
0526   ED 52                  SBC   hl,de   
0528   44 4D                  LD   bc,hl   
052A   EB                     EX   de,hl   ; hl = block* de = heap*
052B   ED 5B EC 0C            LD   de,(vHeapPtr)   
052F   D5                     PUSH   de   ; return hblock*
0530   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0532   ED 53 EC 0C            LD   (vHeapPtr),de   ; heap* += size
0536   ED 4B FA 0C            LD   bc,(vTemp1)   ; restore IP
053A                BLOCK6:      
053A   0B                     DEC   bc   ; balanced, exit
053B   DD E9                  JP   (ix)   
053D                BLOCKEND:      
053D   D9                     EXX      ; de" = oldBP bc" = oldIP
053E   FD 5E 00               LD   e,(iy+0)   
0541   FD 56 01               LD   d,(iy+1)   
0544   FD 4E 06               LD   c,(iy+6)   
0547   FD 46 07               LD   b,(iy+7)   
054A   D9                     EXX      
054B   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
054E   FD 56 03               LD   d,(iy+3)   
0551   EB                     EX   de,hl   
0552   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0555   FD 56 01               LD   d,(iy+1)   
0558   13                     INC   de   ; for carry flag <=
0559   B7                     OR   a   
055A   ED 52                  SBC   hl,de   
055C   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
055E   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0560   FD 5D                  LD   e,iyl   
0562   21 08 00               LD   hl,8   
0565   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0566   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0567   18 0C                  JR   blockEnd2   
0569                BLOCKEND1:      ; same scope
0569   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
056C   FD 56 03               LD   d,(iy+3)   
056F   EB                     EX   de,hl   
0570   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0572   FD 5D                  LD   e,iyl   
0574   EB                     EX   de,hl   
0575                BLOCKEND2:      
0575   44 4D                  LD   bc,hl   ; bc = hl = BP
0577   B7                     OR   a   ; hl = BP - SP = count
0578   ED 72                  SBC   hl,sp   
057A   7D                     LD   a,l   
057B   B4                     OR   h   
057C   28 09                  JR   z,blockEnd3   
057E   C5                     PUSH   bc   ; bc = count, hl = BP
057F   44 4D                  LD   bc,hl   
0581   E1                     POP   hl   
0582   2B                     DEC   hl   ; hl = BP-1
0583   1B                     DEC   de   ; de = args*-1
0584   ED B8                  LDDR      
0586   13                     INC   de   
0587                BLOCKEND3:      
0587   EB                     EX   de,hl   ; hl = new tos
0588   F9                     LD   sp,hl   ; sp = new tos
0589   D9                     EXX      ; bc = IP, iy = oldBP
058A   D5                     PUSH   de   
058B   C5                     PUSH   bc   
058C   D9                     EXX      
058D   C1                     POP   bc   
058E   FD E1                  POP   iy   
0590   DD E9                  JP   (ix)   
0592                CHAR:        
0592   21 00 00               LD   hl,0   ; if "" is empty or null
0595                CHAR1:       
0595   03                     INC   bc   ; point to next char
0596   0A                     LD   a,(bc)   
0597   FE 27                  CP   "'"   ; ' is the terminator
0599   28 09                  JR   z,char3   
059B   FE 5C                  CP   $5c   ; \ is the escape
059D   20 02                  JR   nz,char2   
059F   03                     INC   bc   
05A0   0A                     LD   a,(bc)   
05A1                CHAR2:       
05A1   6F                     LD   l,a   
05A2   18 F1                  JR   char1   
05A4                CHAR3:       
05A4   E5                     PUSH   hl   
05A5   DD E9                  JP   (ix)   
05A7                COLON:       
05A7   DD E9                  JP   (ix)   
05A9                             ; , discard stack item
05A9                             ; x y -- x
05A9                COMMA:       
05A9                DISCARD:      
05A9   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05AB   FD 5D                  LD   e,iyl   
05AD   EB                     EX   de,hl   
05AE   B7                     OR   a   
05AF   ED 72                  SBC   hl,sp   
05B1   CB 7C                  BIT   7,h   
05B3   20 01                  JR   nz,discard1   
05B5   E1                     POP   hl   
05B6                DISCARD1:      
05B6   DD E9                  JP   (ix)   
05B8                SLASH:       
05B8   03                     INC   bc   
05B9   0A                     LD   a,(bc)   
05BA   FE 5C                  CP   $5C   
05BC   CA 80 08               JP   z,comment   
05BF   FE 41                  CP   "A"   
05C1   D2 0C 08               JP   nc,command   
05C4   0B                     DEC   bc   
05C5   D1                     POP   de   
05C6   E1                     POP   hl   
05C7   C5                     PUSH   bc   ; preserve the IP
05C8   44 4D                  LD   bc,hl   
05CA   CD 00 06               CALL   divide   
05CD   EB                     EX   de,hl   
05CE   ED 53 F0 0C            LD   (vRemain),de   
05D2   C1                     POP   bc   
05D3   C3 99 03               JP   add3   
05D6                DOT:         
05D6   E1                     POP   hl   
05D7   03                     INC   bc   
05D8   0A                     LD   a,(bc)   
05D9   FE 68                  CP   "h"   
05DB   20 05                  JR   nz,dot1   
05DD   CD 24 09               CALL   prthex   
05E0   18 17                  JR   dot4   
05E2                DOT1:        
05E2   FE 73                  CP   "s"   
05E4   20 05                  JR   nz,dot2   
05E6   CD 47 09               CALL   prtstr   
05E9   18 0E                  JR   dot4   
05EB                DOT2:        
05EB   FE 63                  CP   "c"   
05ED   20 06                  JR   nz,dot3   
05EF   7D                     LD   a,l   
05F0   CD 85 00               CALL   putchar   
05F3   18 04                  JR   dot4   
05F5                DOT3:        
05F5   0B                     DEC   bc   
05F6   CD DC 08               CALL   prtdec   
05F9                DOT4:        
05F9   3E 20                  LD   a," "   
05FB   CD 85 00               CALL   putchar   
05FE   DD E9                  JP   (ix)   
0600                             ; division subroutine.
0600                             ; bc: divisor, de: dividend, hl: remainder
0600                DIVIDE:      
0600   21 00 00               LD   hl,0   ; zero the remainder
0603   3E 10                  LD   a,16   ; loop counter
0605                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0605   CB 21                  SLA   c   
0607   CB 10                  RL   b   
0609   ED 6A                  ADC   hl,hl   
060B   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
060D   38 03                  JR   c,divide2   
060F   0C                     INC   c   
0610   18 01                  JR   divide3   
0612                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0612   19                     ADD   hl,de   
0613                DIVIDE3:      
0613   3D                     DEC   a   
0614   20 EF                  JR   nz,divide1   
0616   50 59                  LD   de,bc   ; result from bc to de
0618   C9                     RET      
0619                             ; hl = value1, de = value2
0619                             ; hl = result
0619                EQUALS:      
0619   B7                     OR   a   ; reset the carry flag
061A   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
061C   28 10                  JR   z,true1   
061E   C3 34 06               JP   false1   
0621                             ; hl = value1 de = value2
0621                             ; hl = result
0621                LESSTHANEQ:      
0621   B7                     OR   a   
0622   ED 52                  SBC   hl,de   
0624   18 05                  JR   lessthan1   
0626                             ; hl = value1 de = value2
0626                             ; hl = result
0626                LESSTHAN:      
0626   B7                     OR   a   
0627   ED 52                  SBC   hl,de   
0629   28 09                  JR   z,false1   
062B                LESSTHAN1:      
062B   FA 34 06               JP   m,false1   
062E                TRUE1:       
062E   21 FF FF               LD   hl,TRUE   
0631   E5                     PUSH   hl   
0632   DD E9                  JP   (ix)   
0634                NULL1:       
0634                FALSE1:      
0634   21 00 00               LD   hl,FALSE   
0637   E5                     PUSH   hl   
0638   DD E9                  JP   (ix)   
063A                LPAREN:      
063A   C3 D4 04               JP   block   
063D                             ; execute a block of code which ends with }
063D                             ; creates a root scope if BP == stack
063D                             ; else uses outer scope
063D                CARET:       
063D                GO:          
063D   D1                     POP   de   ; de = block*
063E                GO1:         
063E   7B                     LD   a,e   ; if block* == null, exit
063F   B2                     OR   d   
0640   20 02                  JR   nz,go2   
0642   DD E9                  JP   (ix)   
0644                GO2:         
0644   1A                     LD   a,(de)   
0645   FE 7B                  CP   "{"   
0647   28 07                  JR   z,goBlock1   
0649   FE 28                  CP   "("   
064B   C2 83 06               JP   nz,goFunc   
064E   13                     INC   de   ; de is the address to jump back to
064F   D5                     PUSH   de   ; push de just before stack frame
0650                GOBLOCK:      
0650                GOBLOCK1:      
0650   ED 53 FA 0C            LD   (vTemp1),de   ; save de
0654   21 80 0B               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0657   FD 54                  LD   d,iyh   
0659   FD 5D                  LD   e,iyl   
065B   B7                     OR   a   ; if stack* == BP then this is the root_scope
065C   ED 52                  SBC   hl,de   
065E   ED 5B FA 0C            LD   de,(vTemp1)   ; restore de
0662   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0663   B4                     OR   h   
0664   3E 00                  LD   a,0   
0666   28 6C                  JR   z,goFunc8   
0668   C5                     PUSH   bc   ; push IP
0669   FD 4E 04               LD   c,(iy+4)   ; push dollar_list* (parent)
066C   FD 46 05               LD   b,(iy+5)   
066F   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0672   FD 66 03               LD   h,(iy+3)   
0675                GOBLOCK2:      
0675   C5                     PUSH   bc   ; dollar_list*
0676   E5                     PUSH   hl   ; first_arg*
0677   FD E5                  PUSH   iy   ; push BP
0679   FD 21 00 00            LD   iy,0   ; BP = SP
067D   FD 39                  ADD   iy,sp   
067F   42 4B                  LD   bc,de   ; bc = de = block*-1
0681   DD E9                  JP   (ix)   
0683                GOFUNC:      ; execute function
0683   EB                     EX   de,hl   ; hl = func*
0684   5E                     LD   e,(hl)   ; de = partial_array*
0685   23                     INC   hl   
0686   56                     LD   d,(hl)   
0687   23                     INC   hl   
0688   7B                     LD   a,e   ; if partial_array* == null skip
0689   B2                     OR   d   
068A   28 21                  JR   z,goFunc3   
068C   ED 43 FA 0C            LD   (vTemp1),bc   
0690   22 FC 0C               LD   (vTemp2),hl   ; save bc,hl
0693   EB                     EX   de,hl   ; hl = partial_array*
0694   2B                     DEC   hl   ; bc = count
0695   46                     LD   b,(hl)   
0696   2B                     DEC   hl   
0697   4E                     LD   c,(hl)   
0698   23                     INC   hl   ; push each item on stack
0699   23                     INC   hl   
069A   18 06                  JR   goFunc2   
069C                GOFUNC1:      
069C   5E                     LD   e,(hl)   ; de = partial item
069D   23                     INC   hl   
069E   56                     LD   d,(hl)   
069F   23                     INC   hl   
06A0   D5                     PUSH   de   ; push on stack
06A1   0B                     DEC   bc   
06A2                GOFUNC2:      
06A2   79                     LD   a,c   ; if count != 0 then loop
06A3   B0                     OR   b   
06A4   20 F6                  JR   nz,goFunc1   
06A6   ED 4B FA 0C            LD   bc,(vTemp1)   ; restore bc
06AA   2A FC 0C               LD   hl,(vTemp2)   ; restore hl
06AD                GOFUNC3:      
06AD   5E                     LD   e,(hl)   ; de = block*
06AE   23                     INC   hl   
06AF   56                     LD   d,(hl)   
06B0   23                     INC   hl   
06B1   ED 53 FA 0C            LD   (vTemp1),de   ; save block*
06B5   5E                     LD   e,(hl)   ; de = dollar_list*
06B6   23                     INC   hl   
06B7   56                     LD   d,(hl)   
06B8   23                     INC   hl   
06B9   EB                     EX   de,hl   ; hl = dollar_list*
06BA   ED 5B FA 0C            LD   de,(vTemp1)   ; restore de = block*
06BE   7D                     LD   a,l   ; if dollar_list* == null a = 0
06BF   B4                     OR   h   
06C0   20 03                  JR   nz,goFunc4   
06C2   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06C3   18 0F                  JR   goFunc8   
06C5                GOFUNC4:      ; allocate locals
06C5   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = dollar_list*
06C6   7E                     LD   a,(hl)   
06C7   18 03                  JR   goFunc6   
06C9                GOFUNC5:      ; loop
06C9   3B                     DEC   sp   
06CA   3B                     DEC   sp   
06CB   3D                     DEC   a   
06CC                GOFUNC6:      
06CC   B7                     OR   a   
06CD   20 FA                  JR   nz,goFunc5   ; end loop
06CF                GOFUNC7:      
06CF   2B                     DEC   hl   ; a = num_args* x 2
06D0   7E                     LD   a,(hl)   
06D1   23                     INC   hl   
06D2   23                     INC   hl   
06D3   87                     ADD   a,a   ; a *= 2
06D4                GOFUNC8:      
06D4   C5                     PUSH   bc   ; push IP
06D5   44 4D                  LD   bc,hl   
06D7   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06DA   85                     ADD   a,l   
06DB   6F                     LD   l,a   
06DC   39                     ADD   hl,sp   
06DD   18 96                  JR   goBlock2   
06DF                HEXNUM:      
06DF   21 00 00               LD   hl,0   ; Clear hl to accept the number
06E2                HEXNUM1:      
06E2   03                     INC   bc   
06E3   0A                     LD   a,(bc)   ; Get the character which is a numeral
06E4   CB 77                  BIT   6,a   ; is it uppercase alpha?
06E6   28 02                  JR   z,hexnum2   ; no a decimal
06E8   D6 07                  SUB   7   ; sub 7  to make $a - $F
06EA                HEXNUM2:      
06EA   D6 30                  SUB   $30   ; form decimal digit
06EC   DA 6A 07               JP   c,num2   
06EF   FE 10                  CP   $0F+1   
06F1   D2 6A 07               JP   nc,num2   
06F4   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06F5   29                     ADD   hl,hl   ; 4X
06F6   29                     ADD   hl,hl   ; 8X
06F7   29                     ADD   hl,hl   ; 16X
06F8   85                     ADD   a,l   ; add into bottom of hl
06F9   6F                     LD   l,a   
06FA   18 E6                  JR   hexnum1   
06FC                UPCASE:      
06FC   0A                     LD   a,(bc)   ; a = identifier char
06FD   D6 41                  SUB   "A"   ; "A" = 0
06FF   18 05                  JR   ident1   
0701                LOWCASE:      
0701   0A                     LD   a,(bc)   
0702   D6 61                  SUB   "a"   
0704   C6 1A                  ADD   a,26   
0706                IDENT1:      
0706   87                     ADD   a,a   ; l = a * 2
0707   6F                     LD   l,a   
0708   26 0C                  LD   h,msb(vars)   
070A   22 EE 0C               LD   (vPointer),hl   ; store address in setter
070D   5E                     LD   e,(hl)   
070E   23                     INC   hl   
070F   56                     LD   d,(hl)   
0710   D5                     PUSH   de   
0711   DD E9                  JP   (ix)   
0713                             ; if
0713                             ; condition then -- value
0713                IF:          
0713   03                     INC   bc   
0714   0A                     LD   a,(bc)   
0715   FE 3F                  CP   "?"   
0717   28 06                  JR   z,ifte   
0719   0B                     DEC   bc   
071A   11 00 00               LD   de,0   ; NUL pointer for else
071D   18 01                  JR   ifte1   
071F                             ; ifte
071F                             ; condition then else -- value
071F                IFTE:        
071F   D1                     POP   de   ; de = else
0720                IFTE1:       
0720   E1                     POP   hl   ; hl = then
0721   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0722   7C                     LD   a,h   
0723   B5                     OR   l   
0724   E1                     POP   hl   ; hl = then
0725   CA 3E 06               JP   z,go1   ; if z de = else
0728   EB                     EX   de,hl   ; condition = false, de = then
0729   C3 3E 06               JP   go1   
072C                MUL:         
072C   D1                     POP   de   ; get first value
072D   E1                     POP   hl   
072E                MUL2:        
072E   C5                     PUSH   bc   ; Preserve the IP
072F   44 4D                  LD   bc,hl   ; bc = 2nd value
0731   21 00 00               LD   hl,0   
0734   3E 10                  LD   a,16   
0736                MUL3:        
0736   29                     ADD   hl,hl   
0737   CB 13                  RL   e   
0739   CB 12                  RL   d   
073B   30 04                  JR   nc,$+6   
073D   09                     ADD   hl,bc   
073E   30 01                  JR   nc,$+3   
0740   13                     INC   de   
0741   3D                     DEC   a   
0742   20 F2                  JR   nz,mul3   
0744   C1                     POP   bc   ; Restore the IP
0745   C3 99 03               JP   add3   
0748                NUM:         
0748   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
074B   0A                     LD   a,(bc)   ; Get numeral or -
074C   FE 2D                  CP   "-"   
074E   20 01                  JR   nz,num0   
0750   03                     INC   bc   ; move to next char, no flags affected
0751                NUM0:        
0751   08                     EX   af,af'   ; save zero flag = 0 for later
0752                NUM1:        
0752   0A                     LD   a,(bc)   ; read digit
0753   D6 30                  SUB   "0"   ; less than 0?
0755   38 13                  JR   c,num2   ; not a digit, exit loop
0757   FE 0A                  CP   10   ; greater that 9?
0759   30 0F                  JR   nc,num2   ; not a digit, exit loop
075B   03                     INC   bc   ; inc IP
075C   54 5D                  LD   de,hl   ; multiply hl * 10
075E   29                     ADD   hl,hl   
075F   29                     ADD   hl,hl   
0760   19                     ADD   hl,de   
0761   29                     ADD   hl,hl   
0762   85                     ADD   a,l   ; add digit in a to hl
0763   6F                     LD   l,a   
0764   3E 00                  LD   a,0   
0766   8C                     ADC   a,h   
0767   67                     LD   h,a   
0768   18 E8                  JR   num1   
076A                NUM2:        
076A   0B                     DEC   bc   
076B   08                     EX   af,af'   ; restore zero flag
076C   20 07                  JR   nz,num3   
076E   EB                     EX   de,hl   ; negate the value of hl
076F   21 00 00               LD   hl,0   
0772   B7                     OR   a   ; jump to sub2
0773   ED 52                  SBC   hl,de   
0775                NUM3:        
0775   E5                     PUSH   hl   ; Put the number on the stack
0776   DD E9                  JP   (ix)   ; and process the next character
0778                REMAIN:      
0778   2A F0 0C               LD   hl,(vRemain)   
077B   E5                     PUSH   hl   
077C   DD E9                  JP   (ix)   
077E                RPAREN:      
077E   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0781   FD 46 09               LD   b,(iy+9)   
0784   DD E9                  JP   (ix)   
0786                             ; dollar_list* block* -- ptr
0786                SEMICOLON:      
0786   D1                     POP   de   ; de = block* hl = heap*
0787   2A EC 0C               LD   hl,(vHeapPtr)   
078A   AF                     XOR   a   
078B   77                     LD   (hl),a   ; compile null partial_array*
078C   23                     INC   hl   
078D   77                     LD   (hl),a   
078E   23                     INC   hl   
078F   73                     LD   (hl),e   ; compile block*
0790   23                     INC   hl   
0791   72                     LD   (hl),d   
0792   23                     INC   hl   
0793   D1                     POP   de   ; de = block*
0794   73                     LD   (hl),e   ; compile dollar_list*
0795   23                     INC   hl   
0796   72                     LD   (hl),d   
0797   23                     INC   hl   
0798   ED 5B EC 0C            LD   de,(vHeapPtr)   ; return func*
079C   D5                     PUSH   de   
079D   22 EC 0C               LD   (vHeapPtr),hl   ; heap* += 4
07A0   DD E9                  JP   (ix)   
07A2                             ; shiftLeft
07A2                             ; value count -- value2          shift left count places
07A2                SHIFTLEFT:      
07A2   50 59                  LD   de,bc   ; save IP
07A4   C1                     POP   bc   ; bc = count
07A5   41                     LD   b,c   ; b = loop counter
07A6   E1                     POP   hl   
07A7   04                     INC   b   ; test for counter=0 case
07A8   18 01                  JR   shiftLeft2   
07AA                SHIFTLEFT1:      
07AA   29                     ADD   hl,hl   ; left shift hl
07AB                SHIFTLEFT2:      
07AB   10 FD                  DJNZ   shiftLeft1   
07AD   E5                     PUSH   hl   
07AE   42 4B                  LD   bc,de   ; restore IP
07B0   DD E9                  JP   (ix)   
07B2                             ; shiftRight
07B2                             ; value count -- value2          shift left count places
07B2                SHIFTRIGHT:      
07B2   50 59                  LD   de,bc   ; save IP
07B4   C1                     POP   bc   ; bc = count
07B5   41                     LD   b,c   ; b = loop counter
07B6   E1                     POP   hl   
07B7   04                     INC   b   ; test for counter=0 case
07B8   18 04                  JR   shiftRight2   
07BA                SHIFTRIGHT1:      
07BA   CB 3C                  SRL   h   ; right shift hl
07BC   CB 1D                  RR   l   
07BE                SHIFTRIGHT2:      
07BE   10 FA                  DJNZ   shiftRight1   
07C0   E5                     PUSH   hl   
07C1   42 4B                  LD   bc,de   ; restore IP
07C3   DD E9                  JP   (ix)   
07C5                             ; string
07C5                             ; -- ptr                        ; points to start of string chars,
07C5                             ; length is stored at start - 2 bytes
07C5                STRING:      
07C5   2A EC 0C               LD   hl,(vHeapPtr)   ; hl = heap*
07C8   23                     INC   hl   ; skip length field to start
07C9   23                     INC   hl   
07CA   E5                     PUSH   hl   ; save start of string
07CB   03                     INC   bc   ; point to next char
07CC   18 03                  JR   string2   
07CE                STRING1:      
07CE   77                     LD   (hl),a   
07CF   23                     INC   hl   ; increase count
07D0   03                     INC   bc   ; point to next char
07D1                STRING2:      
07D1   0A                     LD   a,(bc)   
07D2   FE 22                  CP   DQUOTE   ; " is the string terminator
07D4   20 F8                  JR   nz,string1   
07D6   FE 60                  CP   "`"   ; ` is the string terminator used in testing
07D8   20 F4                  JR   nz,string1   
07DA   AF                     XOR   a   ; write NUL to terminate string
07DB   77                     LD   (hl),a   ; hl = end of string
07DC   23                     INC   hl   
07DD   22 EC 0C               LD   (vHeapPtr),hl   ; bump heap* to after end of string
07E0   2B                     DEC   hl   ; hl = end of string without terminator
07E1   D1                     POP   de   ; de = start of string
07E2   D5                     PUSH   de   ; return start of string
07E3   B7                     OR   a   ; hl = length bytes, de = start of string
07E4   ED 52                  SBC   hl,de   
07E6   EB                     EX   de,hl   
07E7   2B                     DEC   hl   ; write length bytes to length field at start - 2
07E8   72                     LD   (hl),d   
07E9   2B                     DEC   hl   
07EA   73                     LD   (hl),e   
07EB   DD E9                  JP   (ix)   
07ED                MINUS:       ; negative sign or subtract
07ED   03                     INC   bc   ; check if sign of a number
07EE   0A                     LD   a,(bc)   
07EF   0B                     DEC   bc   
07F0   FE 30                  CP   "0"   
07F2   38 05                  JR   c,sub   
07F4   FE 3A                  CP   "9"+1   
07F6   DA 3E 03               JP   c,num_   
07F9                SUB:         ; Subtract the value 2nd on stack from top of stack
07F9   03                     INC   bc   
07FA   FE 2D                  CP   "-"   
07FC   20 05                  JR   nz,sub1   
07FE   E1                     POP   hl   
07FF   2B                     DEC   hl   
0800   C3 8F 04               JP   assign0   
0803                SUB1:        
0803   0B                     DEC   bc   
0804   D1                     POP   de   
0805   E1                     POP   hl   
0806   B7                     OR   a   
0807   ED 52                  SBC   hl,de   
0809   C3 99 03               JP   add3   
080C                             ;*******************************************************************
080C                             ; commands
080C                             ; a contains command letter
080C                             ; bc points to command letter
080C                             ;*******************************************************************
080C                COMMAND:      
080C   FE 61                  CP   "a"   ; \a absolute
080E   CA 53 08               JP   z,abs1   
0811   FE 62                  CP   "b"   ; \x break
0813   CA 89 08               JP   z,break   
0816   FE 63                  CP   "c"   ; \c chars
0818   CA A3 08               JP   z,chars   
081B   FE 70                  CP   "p"   ; \p partial
081D   CA 60 08               JP   z,partial   
0820   FE 66                  CP   "f"   ; \f false
0822   CA 34 06               JP   z,false1   
0825   FE 68                  CP   "h"   ; \h heap pointer
0827   CA AB 08               JP   z,heapPtr   
082A   FE 69                  CP   "i"   ; \i input
082C   CA B7 08               JP   z,input   
082F   FE 6B                  CP   "k"   ; \k key
0831   CA C2 08               JP   z,key   
0834   FE 6E                  CP   "n"   ; \n numbers
0836   CA D4 08               JP   z,numbers   
0839   FE 6F                  CP   "o"   ; \o output
083B   CA CB 08               JP   z,output   
083E   FE 74                  CP   "t"   ; \t true
0840   CA 2E 06               JP   z,true1   
0843   FE 76                  CP   "v"   ; \v invert
0845   CA CF 03               JP   z,invert   
0848   FE 78                  CP   "x"   ; \x xor
084A   CA C4 03               JP   z,xor   
084D                ERROR1:      
084D   21 01 00               LD   hl,1   ; error 1: unknown command
0850   C3 39 0A               JP   error   
0853                ABS1:        
0853   E1                     POP   hl   
0854   CB 7C                  BIT   7,h   
0856   C8                     RET   z   
0857   AF                     XOR   a   
0858   95                     SUB   l   
0859   6F                     LD   l,a   
085A   9F                     SBC   a,a   
085B   94                     SUB   h   
085C   67                     LD   h,a   
085D   E5                     PUSH   hl   
085E   DD E9                  JP   (ix)   
0860                             ; partial
0860                             ; array* func* -- func1*
0860                PARTIAL:      
0860   E1                     POP   hl   ; h1 = func*
0861   ED 5B EC 0C            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
0865   ED 43 FA 0C            LD   (vTemp1),bc   ; save IP
0869   01 06 00               LD   bc,6   ; bc = count
086C   ED B0                  LDIR      ; clone func
086E   ED 4B FA 0C            LD   bc,(vTemp1)   ; restore IP
0872   2A EC 0C               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
0875   ED 53 EC 0C            LD   (vHeapPtr),de   ; heap* += 6
0879   D1                     POP   de   ; de = array*
087A   E5                     PUSH   hl   ; return partial_array*
087B   73                     LD   (hl),e   ; compile array*
087C   23                     INC   hl   
087D   72                     LD   (hl),d   
087E   DD E9                  JP   (ix)   
0880                COMMENT:      
0880   03                     INC   bc   ; point to next char
0881   0A                     LD   a,(bc)   
0882   FE 20                  CP   " "   ; terminate on any char less than SP
0884   30 FA                  JR   nc,comment   
0886   0B                     DEC   bc   
0887   DD E9                  JP   (ix)   
0889                BREAK:       
0889   E1                     POP   hl   
088A   7D                     LD   a,l   
088B   B4                     OR   h   
088C   28 02                  JR   z,break1   
088E   DD E9                  JP   (ix)   
0890                BREAK1:      
0890   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0892   FD 54                  LD   d,iyh   
0894   21 08 00               LD   hl,8   
0897   19                     ADD   hl,de   
0898   23                     INC   hl   
0899   23                     INC   hl   
089A   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
089D   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
08A0   C3 3D 05               JP   blockEnd   
08A3                CHARS:       
08A3   21 01 00               LD   hl,1   
08A6                CHARS1:      
08A6   22 E6 0C               LD   (vDataWidth),hl   
08A9   DD E9                  JP   (ix)   
08AB                HEAPPTR:      
08AB   2A EC 0C               LD   hl,(vHeapPtr)   
08AE   E5                     PUSH   hl   
08AF   21 EC 0C               LD   hl,vHeapPtr   
08B2   22 EE 0C               LD   (vPointer),hl   
08B5   DD E9                  JP   (ix)   
08B7                             ; Z80 port input
08B7                             ; port -- value
08B7                INPUT:       
08B7   E1                     POP   hl   
08B8   59                     LD   e,c   ; save IP
08B9   4D                     LD   c,l   
08BA   ED 68                  IN   l,(c)   
08BC   26 00                  LD   h,0   
08BE   4B                     LD   c,e   ; restore IP
08BF   E5                     PUSH   hl   
08C0   DD E9                  JP   (ix)   
08C2                KEY:         
08C2   CD 81 00               CALL   getchar   
08C5   26 00                  LD   h,0   
08C7   6F                     LD   l,a   
08C8   E5                     PUSH   hl   
08C9   DD E9                  JP   (ix)   
08CB                             ; Z80 port output
08CB                             ; value port --
08CB                OUTPUT:      
08CB   E1                     POP   hl   
08CC   59                     LD   e,c   ; save IP
08CD   4D                     LD   c,l   
08CE   E1                     POP   hl   
08CF   ED 69                  OUT   (c),l   
08D1   4B                     LD   c,e   ; restore IP
08D2   DD E9                  JP   (ix)   
08D4                NUMBERS:      
08D4   21 02 00               LD   hl,2   
08D7   C3 A6 08               JP   chars1   
08DA                             ; 
08DA                             ; 
08DA                             ; 
08DA                             ; 
08DA                FILTER:      
08DA                MAP:         
08DA                SCAN:        
08DA   DD E9                  JP   (ix)   
08DC                             ; print decimal
08DC                             ; hl = value
08DC                PRTDEC:      
08DC   CB 7C                  BIT   7,h   
08DE   28 0B                  JR   z,prtdec0   
08E0   3E 2D                  LD   a,"-"   
08E2   CD 85 00               CALL   putchar   
08E5   AF                     XOR   a   
08E6   95                     SUB   l   
08E7   6F                     LD   l,a   
08E8   9F                     SBC   a,a   
08E9   94                     SUB   h   
08EA   67                     LD   h,a   
08EB                PRTDEC0:      
08EB   C5                     PUSH   bc   
08EC   0E 00                  LD   c,0   ; leading zeros flag = false
08EE   11 F0 D8               LD   de,-10000   
08F1   CD 0D 09               CALL   prtdec1   
08F4   11 18 FC               LD   de,-1000   
08F7   CD 0D 09               CALL   prtdec1   
08FA   11 9C FF               LD   de,-100   
08FD   CD 0D 09               CALL   prtdec1   
0900   1E F6                  LD   e,-10   
0902   CD 0D 09               CALL   prtdec1   
0905   0C                     INC   c   ; flag = true for at least digit
0906   1E FF                  LD   e,-1   
0908   CD 0D 09               CALL   prtdec1   
090B   C1                     POP   bc   
090C   C9                     RET      
090D                PRTDEC1:      
090D   06 2F                  LD   b,"0"-1   
090F                PRTDEC2:      
090F   04                     INC   b   
0910   19                     ADD   hl,de   
0911   38 FC                  JR   c,prtdec2   
0913   ED 52                  SBC   hl,de   
0915   3E 30                  LD   a,"0"   
0917   B8                     CP   b   
0918   20 05                  JR   nz,prtdec3   
091A   AF                     XOR   a   
091B   B1                     OR   c   
091C   C8                     RET   z   
091D   18 01                  JR   prtdec4   
091F                PRTDEC3:      
091F   0C                     INC   c   
0920                PRTDEC4:      
0920   78                     LD   a,b   
0921   C3 85 00               JP   putchar   
0924                PRTHEX:      ; display hl as a 16-bit number in hex.
0924   C5                     PUSH   bc   ; preserve the IP
0925   7C                     LD   a,h   
0926   CD 2F 09               CALL   prthex2   
0929   7D                     LD   a,l   
092A   CD 2F 09               CALL   prthex2   
092D   C1                     POP   bc   
092E   C9                     RET      
092F                PRTHEX2:      
092F   4F                     LD   c,a   
0930   1F                     RRA      
0931   1F                     RRA      
0932   1F                     RRA      
0933   1F                     RRA      
0934   CD 38 09               CALL   prthex3   
0937   79                     LD   a,c   
0938                PRTHEX3:      
0938   E6 0F                  AND   0x0F   
093A   C6 90                  ADD   a,0x90   
093C   27                     DAA      
093D   CE 40                  ADC   a,0x40   
093F   27                     DAA      
0940   C3 85 00               JP   putchar   
0943                PRTSTR0:      
0943   CD 85 00               CALL   putchar   
0946   23                     INC   hl   
0947                PRTSTR:      
0947   7E                     LD   a,(hl)   
0948   B7                     OR   a   
0949   20 F8                  JR   nz,prtstr0   
094B   C9                     RET      
094C                             ; **************************************************************************
094C                             ; calculate nesting value
094C                             ; a is char to be tested,
094C                             ; e is the nesting value (initially 0)
094C                             ; e is increased by ( and [
094C                             ; e is decreased by ) and ]
094C                             ; e has its bit 7 toggled by `
094C                             ; limited to 127 levels
094C                             ; **************************************************************************
094C                NESTING:      
094C   FE 22                  CP   DQUOTE   ; quote char
094E   28 06                  JR   z,nesting0   
0950   FE 60                  CP   "`"   ; quote char
0952   28 02                  JR   z,nesting0   
0954   18 0A                  JR   nesting1   
0956                NESTING0:      
0956   CB 7B                  BIT   7,e   
0958   28 03                  JR   z,nesting1a   
095A   CB BB                  RES   7,e   
095C   C9                     RET      
095D                NESTING1A:      
095D   CB FB                  SET   7,e   
095F   C9                     RET      
0960                NESTING1:      
0960   CB 7B                  BIT   7,e   
0962   C0                     RET   nz   
0963   FE 7B                  CP   "{"   
0965   28 08                  JR   z,nesting2   
0967   FE 5B                  CP   "["   
0969   28 04                  JR   z,nesting2   
096B   FE 28                  CP   "("   
096D   20 02                  JR   nz,nesting3   
096F                NESTING2:      
096F   1C                     INC   e   
0970   C9                     RET      
0971                NESTING3:      
0971   FE 7D                  CP   "}"   
0973   28 07                  JR   z,nesting4   
0975   FE 5D                  CP   "]"   
0977   28 03                  JR   z,nesting4   
0979   FE 29                  CP   ")"   
097B   C0                     RET   nz   
097C                NESTING4:      
097C   1D                     DEC   e   
097D   C9                     RET      
097E                PROMPT:      
097E   CD 8E 09               CALL   printStr   
0981   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0986   C9                     RET      
0987                CRLF:        
0987   CD 8E 09               CALL   printStr   
098A   0D 0A 00               .CSTR   "\r\n"   
098D   C9                     RET      
098E                             ; prints a null teminated string
098E                             ; the string should be immedaitely following the call
098E                PRINTSTR:      
098E   E3                     EX   (sp),hl   ; swap			
098F   CD 47 09               CALL   prtstr   
0992   23                     INC   hl   ; inc past NUL
0993   E3                     EX   (sp),hl   ; put it back	
0994   C9                     RET      
0995                INIT:        
0995   DD 2A EA 0C            LD   ix,(vNext)   
0999   FD 21 80 0B            LD   iy,STACK   
099D   21 80 01               LD   hl,isysVars   
09A0   11 E6 0C               LD   de,sysVars   
09A3   01 10 00               LD   bc,8 * 2   
09A6   ED B0                  LDIR      
09A8   21 00 0C               LD   hl,vars   ; 52 vars LO HI
09AB   06 34                  LD   b,26*2   
09AD   AF                     XOR   a   
09AE                INIT0:       
09AE   77                     LD   (hl),a   
09AF   23                     INC   hl   
09B0   10 FC                  DJNZ   init0   
09B2   C9                     RET      
09B3                START:       
09B3   31 80 0B               LD   sp,STACK   ; start of monty
09B6   CD 95 09               CALL   init   ; setups
09B9   CD 8E 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
09BC   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
09C9                INTERPRET:      
09C9   CD 7E 09               CALL   prompt   
09CC   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
09CF   ED 43 E8 0C            LD   (vTIBPtr),bc   
09D3                INTERPRET2:      ; calc nesting (a macro might have changed it)
09D3   1E 00                  LD   e,0   ; initilize nesting value
09D5   C5                     PUSH   bc   ; save offset into TIB,
09D6                             ; bc is also the count of chars in TIB
09D6   21 00 0E               LD   hl,TIB   ; hl is start of TIB
09D9   18 06                  JR   interpret4   
09DB                INTERPRET3:      
09DB   7E                     LD   a,(hl)   ; a = char in TIB
09DC   23                     INC   hl   ; inc pointer into TIB
09DD   0B                     DEC   bc   ; dec count of chars in TIB
09DE   CD 4C 09               CALL   nesting   ; update nesting value
09E1                INTERPRET4:      
09E1   79                     LD   a,c   ; is count zero?
09E2   B0                     OR   b   
09E3   20 F6                  JR   nz,interpret3   ; if not loop
09E5   C1                     POP   bc   ; restore offset into TIB
09E6                INTERPRET5:      
09E6   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
09E9   FE 20                  CP   $20   ; compare to space
09EB   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
09ED   FE 00                  CP   $0   ; is it end of string? NUL end of string
09EF                             ; ???? NEEDED?
09EF   28 27                  JR   z,interpret8   
09F1   FE 0D                  CP   "\r"   ; carriage return? ascii 13
09F3   28 10                  JR   z,interpret7   ; if anything else its macro/control
09F5                             ; macro
09F5                             ;  ld (vTIBPtr),bc
09F5                             ;  ld hl,ctrlCodes
09F5                             ;  add a,l			            ; look up key of macros
09F5                             ;  ld l,a
09F5                             ;  ld e,(hl)
09F5                             ;  ld a,e
09F5                             ;  or a
09F5                             ;  jr z,macro1
09F5                             ;  ld d,msb(macros)
09F5                             ;  push de
09F5                             ;  call call		            ; monty exec_ operation and jump to it
09F5                             ;  db DC1,0
09F5                             ; macro1:
09F5                             ;  ld bc,(vTIBPtr)
09F5   18 DC                  JR   interpret2   
09F7                INTERPRET6:      
09F7   21 00 0E               LD   hl,TIB   
09FA   09                     ADD   hl,bc   
09FB   77                     LD   (hl),a   ; store the character in textbuf
09FC   03                     INC   bc   
09FD   CD 85 00               CALL   putchar   ; echo character to screen
0A00   CD 4C 09               CALL   nesting   
0A03   18 E1                  JR   interpret5   ; wait for next character
0A05                INTERPRET7:      
0A05   21 00 0E               LD   hl,TIB   
0A08   09                     ADD   hl,bc   
0A09   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0A0B   23                     INC   hl   
0A0C   36 0A                  LD   (hl),"\n"   
0A0E   23                     INC   hl   
0A0F   03                     INC   bc   
0A10   03                     INC   bc   
0A11   CD 87 09               CALL   crlf   ; echo character to screen
0A14   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0A15   B7                     OR   a   
0A16   20 CE                  JR   nz,interpret5   
0A18                INTERPRET8:      
0A18   ED 43 E8 0C            LD   (vTIBPtr),bc   
0A1C   01 00 0E               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0A1F                             ; we pressed enter
0A1F   0B                     DEC   bc   
0A20                NEXT:        
0A20   03                     INC   bc   ; Increment the IP
0A21   0A                     LD   a,(bc)   ; Get the next character and dispatch
0A22   FE 20                  CP   " "   ; whitespace?
0A24   28 FA                  JR   z,next   ; space? ignore
0A26   38 07                  JR   c,next1   
0A28   6F                     LD   l,a   ; index into table
0A29   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0A2B   6E                     LD   l,(hl)   ; get low jump address
0A2C   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0A2E   E9                     JP   (hl)   ; Jump to routine
0A2F                NEXT1:       
0A2F   FE 00                  CP   NUL   ; end of input string?
0A31   28 03                  JR   z,exit_   
0A33   C3 C9 09               JP   interpret   ; no, other whitespace, macros?
0A36                EXIT_:       
0A36   60 69                  LD   hl,bc   
0A38   E9                     JP   (hl)   
0A39                ERROR:       
0A39   CD 8E 09               CALL   printStr   
0A3C   45 72 72 6F 72 20 00   .CSTR   "Error "   
0A43   CD DC 08               CALL   prtdec   
0A46   C3 C9 09               JP   interpret   
0A49                          ALIGN   $100   
0B00                             ; .org RAMSTART
0B00                          DS   DSIZE   
0B80                STACK:       
0B80                          ALIGN   $100   
0C00                VARS:        
0C00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
0CD0                RESTARTS:      
0CD0                RST08:    DS   2   
0CD2                RST10:    DS   2   
0CD4                RST18:    DS   2   
0CD6                RST20:    DS   2   
0CD8                RST28:    DS   2   
0CDA                RST30:    DS   2   ; 
0CDC                BAUD:     DS   2   ; 
0CDE                INTVEC:   DS   2   ; 
0CE0                NMIVEC:   DS   2   ; 
0CE2                GETCVEC:   DS   2   ; 
0CE4                PUTCVEC:   DS   2   ; 
0CE6                SYSVARS:      
0CE6                             ; initialised sys variables (preserved)
0CE6                VDATAWIDTH:   DS   2   ; 
0CE8                VTIBPTR:   DS   2   ; 
0CEA                VNEXT:    DS   2   ; 
0CEC                VHEAPPTR:   DS   2   ; 
0CEE                             ; uninitialised sys variables (preserved)
0CEE                VPOINTER:   DS   2   ; 
0CF0                VREMAIN:   DS   2   ; 
0CF2                VSAVEDIP:   DS   2   ; 
0CF4                VSAVEDSP:   DS   2   ; 
0CF6                VSAVEDBP:   DS   2   ; 
0CF8                VCHECKSUM:   DS   2   ; 
0CFA                             ; uninitialised sys variables (unpreserved)
0CFA                VTEMP1:   DS   2   ; 
0CFC                VTEMP2:   DS   2   ; 
0CFE                VLASTDEF:   DS   2   ; 
0D00                VHASHSTR:   DS   2   ; 
0D02                TBPTR:    DS   2   ; reserved for tests
0D04                          ALIGN   $100   
0E00                TIB:      DS   TIBSIZE   
0F00                          ALIGN   $100   
0F00                PAD:      DS   $100   
1000                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 56 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               08DA DEFINED AT LINE 1363 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1335 IN monty.asm
                    > USED AT LINE 1564 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 776 IN monty.asm
                    > USED AT LINE 783 IN monty.asm
                    > USED AT LINE 1374 IN monty.asm
                    > USED AT LINE 1415 IN monty.asm
                    > USED AT LINE 1439 IN monty.asm
                    > USED AT LINE 1442 IN monty.asm
                    > USED AT LINE 1595 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 53 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 834 IN monty.asm
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 839 IN monty.asm
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1631 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
DQUOTE:             0022 DEFINED AT LINE 27 IN monty.asm
                    > USED AT LINE 1174 IN monty.asm
                    > USED AT LINE 1461 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 29 IN monty.asm
MACROS:             0180 DEFINED AT LINE 61 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 66 IN monty.asm
                    > USED AT LINE 1519 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 74 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 76 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 110 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 213 IN monty.asm
PLUS_:              0300 DEFINED AT LINE 215 IN monty.asm
AT_:                0303 DEFINED AT LINE 217 IN monty.asm
AMPER_:             0306 DEFINED AT LINE 219 IN monty.asm
DOLLAR_:            0309 DEFINED AT LINE 221 IN monty.asm
LBRACK_:            030C DEFINED AT LINE 223 IN monty.asm
RBRACK_:            030F DEFINED AT LINE 225 IN monty.asm
PERCENT_:           0312 DEFINED AT LINE 227 IN monty.asm
BACKSLASH_:         0315 DEFINED AT LINE 229 IN monty.asm
LBRACE_:            0318 DEFINED AT LINE 231 IN monty.asm
RBRACE_:            031B DEFINED AT LINE 233 IN monty.asm
TICK_:              031E DEFINED AT LINE 235 IN monty.asm
SEMICOLON_:         0321 DEFINED AT LINE 237 IN monty.asm
DOT_:               0324 DEFINED AT LINE 239 IN monty.asm
UNDERSCORE_:        0327 DEFINED AT LINE 241 IN monty.asm
COLON_:             032A DEFINED AT LINE 243 IN monty.asm
UPCASE_:            032D DEFINED AT LINE 245 IN monty.asm
LOWCASE_:           0330 DEFINED AT LINE 247 IN monty.asm
QUESTION_:          0333 DEFINED AT LINE 249 IN monty.asm
STAR_:              0336 DEFINED AT LINE 251 IN monty.asm
BANG_:              0339 DEFINED AT LINE 253 IN monty.asm
NUM_:               033E DEFINED AT LINE 256 IN monty.asm
                    > USED AT LINE 1201 IN monty.asm
HASH_:              0341 DEFINED AT LINE 258 IN monty.asm
PIPE_:              0344 DEFINED AT LINE 260 IN monty.asm
CARET_:             0347 DEFINED AT LINE 262 IN monty.asm
COMMA_:             034A DEFINED AT LINE 264 IN monty.asm
DBLQUOTE_:          034D DEFINED AT LINE 266 IN monty.asm
MINUS_:             0350 DEFINED AT LINE 268 IN monty.asm
EQ_:                0353 DEFINED AT LINE 270 IN monty.asm
EQ0:                035D DEFINED AT LINE 277 IN monty.asm
                    > USED AT LINE 274 IN monty.asm
EQ1:                035E DEFINED AT LINE 279 IN monty.asm
                    > USED AT LINE 255 IN monty.asm
GT_:                0362 DEFINED AT LINE 283 IN monty.asm
LPAREN_:            036D DEFINED AT LINE 291 IN monty.asm
LT_:                0370 DEFINED AT LINE 293 IN monty.asm
LT1:                0379 DEFINED AT LINE 300 IN monty.asm
                    > USED AT LINE 290 IN monty.asm
SLASH_:             0382 DEFINED AT LINE 305 IN monty.asm
NOP_:               0385 DEFINED AT LINE 307 IN monty.asm
RPAREN_:            0387 DEFINED AT LINE 309 IN monty.asm
PLUS:               038A DEFINED AT LINE 316 IN monty.asm
                    > USED AT LINE 216 IN monty.asm
ADD1:               0395 DEFINED AT LINE 324 IN monty.asm
                    > USED AT LINE 320 IN monty.asm
ADD3:               0399 DEFINED AT LINE 329 IN monty.asm
                    > USED AT LINE 356 IN monty.asm
                    > USED AT LINE 757 IN monty.asm
                    > USED AT LINE 1050 IN monty.asm
                    > USED AT LINE 1215 IN monty.asm
AT:                 03A4 DEFINED AT LINE 340 IN monty.asm
                    > USED AT LINE 218 IN monty.asm
AMPER:              03B0 DEFINED AT LINE 346 IN monty.asm
                    > USED AT LINE 220 IN monty.asm
AND1:               03B7 DEFINED AT LINE 354 IN monty.asm
                    > USED AT LINE 366 IN monty.asm
OR:                 03BB DEFINED AT LINE 358 IN monty.asm
                    > USED AT LINE 261 IN monty.asm
XOR:                03C4 DEFINED AT LINE 368 IN monty.asm
                    > USED AT LINE 1248 IN monty.asm
XOR1:               03C5 DEFINED AT LINE 370 IN monty.asm
                    > USED AT LINE 382 IN monty.asm
INVERT:             03CF DEFINED AT LINE 380 IN monty.asm
                    > USED AT LINE 1246 IN monty.asm
ARG:                03D4 DEFINED AT LINE 387 IN monty.asm
                    > USED AT LINE 222 IN monty.asm
ARG0:               03F2 DEFINED AT LINE 408 IN monty.asm
                    > USED AT LINE 414 IN monty.asm
ARG0A:              03FB DEFINED AT LINE 416 IN monty.asm
                    > USED AT LINE 393 IN monty.asm
                    > USED AT LINE 400 IN monty.asm
ARG1:               0400 DEFINED AT LINE 419 IN monty.asm
                    > USED AT LINE 412 IN monty.asm
ARG1A:              0408 DEFINED AT LINE 426 IN monty.asm
                    > USED AT LINE 418 IN monty.asm
ARRBEGIN:           040B DEFINED AT LINE 430 IN monty.asm
                    > USED AT LINE 224 IN monty.asm
ARREND:             0427 DEFINED AT LINE 444 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
ARREND1:            0441 DEFINED AT LINE 460 IN monty.asm
                    > USED AT LINE 476 IN monty.asm
ARREND2:            0451 DEFINED AT LINE 470 IN monty.asm
                    > USED AT LINE 466 IN monty.asm
ARRINDEX:           0475 DEFINED AT LINE 497 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
ARRINDEX0:          047D DEFINED AT LINE 503 IN monty.asm
ARRINDEX1:          047E DEFINED AT LINE 505 IN monty.asm
                    > USED AT LINE 502 IN monty.asm
ARRINDEX2:          048A DEFINED AT LINE 514 IN monty.asm
                    > USED AT LINE 511 IN monty.asm
ASSIGN:             048D DEFINED AT LINE 519 IN monty.asm
                    > USED AT LINE 276 IN monty.asm
ASSIGN0:            048F DEFINED AT LINE 522 IN monty.asm
                    > USED AT LINE 323 IN monty.asm
                    > USED AT LINE 333 IN monty.asm
                    > USED AT LINE 1208 IN monty.asm
ASSIGNX:            0490 DEFINED AT LINE 524 IN monty.asm
ASSIGN1:            049C DEFINED AT LINE 532 IN monty.asm
                    > USED AT LINE 529 IN monty.asm
BACKSLASH:          049E DEFINED AT LINE 539 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
DOLLAR_LIST:        049E DEFINED AT LINE 540 IN monty.asm
DOLLAR_LIST1:       04A8 DEFINED AT LINE 547 IN monty.asm
                    > USED AT LINE 568 IN monty.asm
DOLLAR_LIST1A:      04B0 DEFINED AT LINE 553 IN monty.asm
                    > USED AT LINE 550 IN monty.asm
DOLLAR_LIST2:       04B8 DEFINED AT LINE 558 IN monty.asm
DOLLAR_LIST3:       04C0 DEFINED AT LINE 566 IN monty.asm
                    > USED AT LINE 552 IN monty.asm
                    > USED AT LINE 564 IN monty.asm
DOLLAR_LIST4:       04C3 DEFINED AT LINE 569 IN monty.asm
                    > USED AT LINE 555 IN monty.asm
                    > USED AT LINE 557 IN monty.asm
DOLLAR_LIST5:       04C8 DEFINED AT LINE 574 IN monty.asm
                    > USED AT LINE 572 IN monty.asm
BLOCK:              04D4 DEFINED AT LINE 585 IN monty.asm
                    > USED AT LINE 232 IN monty.asm
                    > USED AT LINE 844 IN monty.asm
BLOCK1:             04D8 DEFINED AT LINE 589 IN monty.asm
                    > USED AT LINE 593 IN monty.asm
                    > USED AT LINE 615 IN monty.asm
                    > USED AT LINE 618 IN monty.asm
                    > USED AT LINE 623 IN monty.asm
                    > USED AT LINE 627 IN monty.asm
BLOCK2:             0504 DEFINED AT LINE 616 IN monty.asm
                    > USED AT LINE 603 IN monty.asm
                    > USED AT LINE 605 IN monty.asm
                    > USED AT LINE 607 IN monty.asm
BLOCK3:             0507 DEFINED AT LINE 619 IN monty.asm
                    > USED AT LINE 610 IN monty.asm
                    > USED AT LINE 612 IN monty.asm
                    > USED AT LINE 614 IN monty.asm
BLOCK4:             050F DEFINED AT LINE 625 IN monty.asm
                    > USED AT LINE 596 IN monty.asm
                    > USED AT LINE 598 IN monty.asm
                    > USED AT LINE 600 IN monty.asm
BLOCK5:             0512 DEFINED AT LINE 628 IN monty.asm
                    > USED AT LINE 624 IN monty.asm
BLOCK6:             053A DEFINED AT LINE 647 IN monty.asm
                    > USED AT LINE 634 IN monty.asm
BLOCKEND:           053D DEFINED AT LINE 651 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
                    > USED AT LINE 1307 IN monty.asm
BLOCKEND1:          0569 DEFINED AT LINE 673 IN monty.asm
                    > USED AT LINE 666 IN monty.asm
BLOCKEND2:          0575 DEFINED AT LINE 680 IN monty.asm
                    > USED AT LINE 672 IN monty.asm
BLOCKEND3:          0587 DEFINED AT LINE 694 IN monty.asm
                    > USED AT LINE 686 IN monty.asm
CHAR:               0592 DEFINED AT LINE 705 IN monty.asm
                    > USED AT LINE 236 IN monty.asm
CHAR1:              0595 DEFINED AT LINE 707 IN monty.asm
                    > USED AT LINE 718 IN monty.asm
CHAR2:              05A1 DEFINED AT LINE 716 IN monty.asm
                    > USED AT LINE 713 IN monty.asm
CHAR3:              05A4 DEFINED AT LINE 719 IN monty.asm
                    > USED AT LINE 711 IN monty.asm
COLON:              05A7 DEFINED AT LINE 723 IN monty.asm
                    > USED AT LINE 244 IN monty.asm
COMMA:              05A9 DEFINED AT LINE 728 IN monty.asm
                    > USED AT LINE 265 IN monty.asm
DISCARD:            05A9 DEFINED AT LINE 729 IN monty.asm
DISCARD1:           05B6 DEFINED AT LINE 738 IN monty.asm
                    > USED AT LINE 736 IN monty.asm
SLASH:              05B8 DEFINED AT LINE 741 IN monty.asm
                    > USED AT LINE 306 IN monty.asm
DOT:                05D6 DEFINED AT LINE 759 IN monty.asm
                    > USED AT LINE 240 IN monty.asm
DOT1:               05E2 DEFINED AT LINE 767 IN monty.asm
                    > USED AT LINE 764 IN monty.asm
DOT2:               05EB DEFINED AT LINE 772 IN monty.asm
                    > USED AT LINE 769 IN monty.asm
DOT3:               05F5 DEFINED AT LINE 778 IN monty.asm
                    > USED AT LINE 774 IN monty.asm
DOT4:               05F9 DEFINED AT LINE 781 IN monty.asm
                    > USED AT LINE 766 IN monty.asm
                    > USED AT LINE 771 IN monty.asm
                    > USED AT LINE 777 IN monty.asm
DIVIDE:             0600 DEFINED AT LINE 789 IN monty.asm
                    > USED AT LINE 753 IN monty.asm
DIVIDE1:            0605 DEFINED AT LINE 792 IN monty.asm
                    > USED AT LINE 804 IN monty.asm
DIVIDE2:            0612 DEFINED AT LINE 800 IN monty.asm
                    > USED AT LINE 797 IN monty.asm
DIVIDE3:            0613 DEFINED AT LINE 802 IN monty.asm
                    > USED AT LINE 799 IN monty.asm
EQUALS:             0619 DEFINED AT LINE 810 IN monty.asm
                    > USED AT LINE 281 IN monty.asm
LESSTHANEQ:         0621 DEFINED AT LINE 818 IN monty.asm
                    > USED AT LINE 302 IN monty.asm
LESSTHAN:           0626 DEFINED AT LINE 825 IN monty.asm
                    > USED AT LINE 304 IN monty.asm
LESSTHAN1:          062B DEFINED AT LINE 830 IN monty.asm
                    > USED AT LINE 821 IN monty.asm
TRUE1:              062E DEFINED AT LINE 833 IN monty.asm
                    > USED AT LINE 813 IN monty.asm
                    > USED AT LINE 1244 IN monty.asm
NULL1:              0634 DEFINED AT LINE 837 IN monty.asm
FALSE1:             0634 DEFINED AT LINE 838 IN monty.asm
                    > USED AT LINE 814 IN monty.asm
                    > USED AT LINE 828 IN monty.asm
                    > USED AT LINE 831 IN monty.asm
                    > USED AT LINE 1232 IN monty.asm
LPAREN:             063A DEFINED AT LINE 843 IN monty.asm
                    > USED AT LINE 292 IN monty.asm
CARET:              063D DEFINED AT LINE 849 IN monty.asm
                    > USED AT LINE 263 IN monty.asm
GO:                 063D DEFINED AT LINE 850 IN monty.asm
GO1:                063E DEFINED AT LINE 852 IN monty.asm
                    > USED AT LINE 1026 IN monty.asm
                    > USED AT LINE 1028 IN monty.asm
GO2:                0644 DEFINED AT LINE 857 IN monty.asm
                    > USED AT LINE 855 IN monty.asm
GOBLOCK:            0650 DEFINED AT LINE 865 IN monty.asm
GOBLOCK1:           0650 DEFINED AT LINE 866 IN monty.asm
                    > USED AT LINE 860 IN monty.asm
GOBLOCK2:           0675 DEFINED AT LINE 883 IN monty.asm
                    > USED AT LINE 965 IN monty.asm
GOFUNC:             0683 DEFINED AT LINE 892 IN monty.asm
                    > USED AT LINE 862 IN monty.asm
GOFUNC1:            069C DEFINED AT LINE 911 IN monty.asm
                    > USED AT LINE 921 IN monty.asm
GOFUNC2:            06A2 DEFINED AT LINE 918 IN monty.asm
                    > USED AT LINE 910 IN monty.asm
GOFUNC3:            06AD DEFINED AT LINE 924 IN monty.asm
                    > USED AT LINE 900 IN monty.asm
GOFUNC4:            06C5 DEFINED AT LINE 941 IN monty.asm
                    > USED AT LINE 938 IN monty.asm
GOFUNC5:            06C9 DEFINED AT LINE 945 IN monty.asm
                    > USED AT LINE 951 IN monty.asm
GOFUNC6:            06CC DEFINED AT LINE 949 IN monty.asm
                    > USED AT LINE 944 IN monty.asm
GOFUNC7:            06CF DEFINED AT LINE 952 IN monty.asm
GOFUNC8:            06D4 DEFINED AT LINE 958 IN monty.asm
                    > USED AT LINE 877 IN monty.asm
                    > USED AT LINE 940 IN monty.asm
HEXNUM:             06DF DEFINED AT LINE 967 IN monty.asm
                    > USED AT LINE 259 IN monty.asm
HEXNUM1:            06E2 DEFINED AT LINE 969 IN monty.asm
                    > USED AT LINE 986 IN monty.asm
HEXNUM2:            06EA DEFINED AT LINE 975 IN monty.asm
                    > USED AT LINE 973 IN monty.asm
UPCASE:             06FC DEFINED AT LINE 987 IN monty.asm
                    > USED AT LINE 246 IN monty.asm
LOWCASE:            0701 DEFINED AT LINE 991 IN monty.asm
                    > USED AT LINE 248 IN monty.asm
IDENT1:             0706 DEFINED AT LINE 995 IN monty.asm
                    > USED AT LINE 990 IN monty.asm
IF:                 0713 DEFINED AT LINE 1008 IN monty.asm
                    > USED AT LINE 250 IN monty.asm
IFTE:               071F DEFINED AT LINE 1018 IN monty.asm
                    > USED AT LINE 1012 IN monty.asm
IFTE1:              0720 DEFINED AT LINE 1020 IN monty.asm
                    > USED AT LINE 1015 IN monty.asm
MUL:                072C DEFINED AT LINE 1031 IN monty.asm
                    > USED AT LINE 252 IN monty.asm
MUL2:               072E DEFINED AT LINE 1034 IN monty.asm
MUL3:               0736 DEFINED AT LINE 1039 IN monty.asm
                    > USED AT LINE 1048 IN monty.asm
NUM:                0748 DEFINED AT LINE 1052 IN monty.asm
                    > USED AT LINE 257 IN monty.asm
NUM0:               0751 DEFINED AT LINE 1058 IN monty.asm
                    > USED AT LINE 1056 IN monty.asm
NUM1:               0752 DEFINED AT LINE 1060 IN monty.asm
                    > USED AT LINE 1077 IN monty.asm
NUM2:               076A DEFINED AT LINE 1078 IN monty.asm
                    > USED AT LINE 977 IN monty.asm
                    > USED AT LINE 979 IN monty.asm
                    > USED AT LINE 1063 IN monty.asm
                    > USED AT LINE 1065 IN monty.asm
NUM3:               0775 DEFINED AT LINE 1086 IN monty.asm
                    > USED AT LINE 1081 IN monty.asm
REMAIN:             0778 DEFINED AT LINE 1090 IN monty.asm
                    > USED AT LINE 242 IN monty.asm
RPAREN:             077E DEFINED AT LINE 1095 IN monty.asm
                    > USED AT LINE 310 IN monty.asm
SEMICOLON:          0786 DEFINED AT LINE 1101 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
SHIFTLEFT:          07A2 DEFINED AT LINE 1125 IN monty.asm
                    > USED AT LINE 297 IN monty.asm
SHIFTLEFT1:         07AA DEFINED AT LINE 1132 IN monty.asm
                    > USED AT LINE 1135 IN monty.asm
SHIFTLEFT2:         07AB DEFINED AT LINE 1134 IN monty.asm
                    > USED AT LINE 1131 IN monty.asm
SHIFTRIGHT:         07B2 DEFINED AT LINE 1142 IN monty.asm
                    > USED AT LINE 287 IN monty.asm
SHIFTRIGHT1:        07BA DEFINED AT LINE 1149 IN monty.asm
                    > USED AT LINE 1153 IN monty.asm
SHIFTRIGHT2:        07BE DEFINED AT LINE 1152 IN monty.asm
                    > USED AT LINE 1148 IN monty.asm
STRING:             07C5 DEFINED AT LINE 1161 IN monty.asm
                    > USED AT LINE 267 IN monty.asm
STRING1:            07CE DEFINED AT LINE 1168 IN monty.asm
                    > USED AT LINE 1175 IN monty.asm
                    > USED AT LINE 1177 IN monty.asm
STRING2:            07D1 DEFINED AT LINE 1172 IN monty.asm
                    > USED AT LINE 1167 IN monty.asm
MINUS:              07ED DEFINED AT LINE 1194 IN monty.asm
                    > USED AT LINE 269 IN monty.asm
SUB:                07F9 DEFINED AT LINE 1202 IN monty.asm
                    > USED AT LINE 1199 IN monty.asm
SUB1:               0803 DEFINED AT LINE 1209 IN monty.asm
                    > USED AT LINE 1205 IN monty.asm
COMMAND:            080C DEFINED AT LINE 1222 IN monty.asm
                    > USED AT LINE 747 IN monty.asm
ERROR1:             084D DEFINED AT LINE 1249 IN monty.asm
ABS1:               0853 DEFINED AT LINE 1253 IN monty.asm
                    > USED AT LINE 1224 IN monty.asm
PARTIAL:            0860 DEFINED AT LINE 1268 IN monty.asm
                    > USED AT LINE 1230 IN monty.asm
COMMENT:            0880 DEFINED AT LINE 1284 IN monty.asm
                    > USED AT LINE 745 IN monty.asm
                    > USED AT LINE 1288 IN monty.asm
BREAK:              0889 DEFINED AT LINE 1292 IN monty.asm
                    > USED AT LINE 1226 IN monty.asm
BREAK1:             0890 DEFINED AT LINE 1298 IN monty.asm
                    > USED AT LINE 1296 IN monty.asm
CHARS:              08A3 DEFINED AT LINE 1309 IN monty.asm
                    > USED AT LINE 1228 IN monty.asm
CHARS1:             08A6 DEFINED AT LINE 1311 IN monty.asm
                    > USED AT LINE 1354 IN monty.asm
HEAPPTR:            08AB DEFINED AT LINE 1315 IN monty.asm
                    > USED AT LINE 1234 IN monty.asm
INPUT:              08B7 DEFINED AT LINE 1324 IN monty.asm
                    > USED AT LINE 1236 IN monty.asm
KEY:                08C2 DEFINED AT LINE 1334 IN monty.asm
                    > USED AT LINE 1238 IN monty.asm
OUTPUT:             08CB DEFINED AT LINE 1343 IN monty.asm
                    > USED AT LINE 1242 IN monty.asm
NUMBERS:            08D4 DEFINED AT LINE 1352 IN monty.asm
                    > USED AT LINE 1240 IN monty.asm
FILTER:             08DA DEFINED AT LINE 1361 IN monty.asm
MAP:                08DA DEFINED AT LINE 1362 IN monty.asm
PRTDEC:             08DC DEFINED AT LINE 1370 IN monty.asm
                    > USED AT LINE 780 IN monty.asm
                    > USED AT LINE 1641 IN monty.asm
PRTDEC0:            08EB DEFINED AT LINE 1381 IN monty.asm
                    > USED AT LINE 1372 IN monty.asm
PRTDEC1:            090D DEFINED AT LINE 1397 IN monty.asm
                    > USED AT LINE 1385 IN monty.asm
                    > USED AT LINE 1387 IN monty.asm
                    > USED AT LINE 1389 IN monty.asm
                    > USED AT LINE 1391 IN monty.asm
                    > USED AT LINE 1394 IN monty.asm
PRTDEC2:            090F DEFINED AT LINE 1399 IN monty.asm
                    > USED AT LINE 1402 IN monty.asm
PRTDEC3:            091F DEFINED AT LINE 1411 IN monty.asm
                    > USED AT LINE 1406 IN monty.asm
PRTDEC4:            0920 DEFINED AT LINE 1413 IN monty.asm
                    > USED AT LINE 1410 IN monty.asm
PRTHEX:             0924 DEFINED AT LINE 1417 IN monty.asm
                    > USED AT LINE 765 IN monty.asm
PRTHEX2:            092F DEFINED AT LINE 1425 IN monty.asm
                    > USED AT LINE 1420 IN monty.asm
                    > USED AT LINE 1422 IN monty.asm
PRTHEX3:            0938 DEFINED AT LINE 1433 IN monty.asm
                    > USED AT LINE 1431 IN monty.asm
PRTSTR0:            0943 DEFINED AT LINE 1441 IN monty.asm
                    > USED AT LINE 1447 IN monty.asm
PRTSTR:             0947 DEFINED AT LINE 1444 IN monty.asm
                    > USED AT LINE 770 IN monty.asm
                    > USED AT LINE 1511 IN monty.asm
NESTING:            094C DEFINED AT LINE 1460 IN monty.asm
                    > USED AT LINE 1555 IN monty.asm
                    > USED AT LINE 1596 IN monty.asm
NESTING0:           0956 DEFINED AT LINE 1466 IN monty.asm
                    > USED AT LINE 1462 IN monty.asm
                    > USED AT LINE 1464 IN monty.asm
NESTING1A:          095D DEFINED AT LINE 1471 IN monty.asm
                    > USED AT LINE 1468 IN monty.asm
NESTING1:           0960 DEFINED AT LINE 1474 IN monty.asm
                    > USED AT LINE 1465 IN monty.asm
NESTING2:           096F DEFINED AT LINE 1483 IN monty.asm
                    > USED AT LINE 1478 IN monty.asm
                    > USED AT LINE 1480 IN monty.asm
NESTING3:           0971 DEFINED AT LINE 1486 IN monty.asm
                    > USED AT LINE 1482 IN monty.asm
NESTING4:           097C DEFINED AT LINE 1493 IN monty.asm
                    > USED AT LINE 1488 IN monty.asm
                    > USED AT LINE 1490 IN monty.asm
PROMPT:             097E DEFINED AT LINE 1497 IN monty.asm
                    > USED AT LINE 1539 IN monty.asm
CRLF:               0987 DEFINED AT LINE 1502 IN monty.asm
                    > USED AT LINE 1608 IN monty.asm
PRINTSTR:           098E DEFINED AT LINE 1509 IN monty.asm
                    > USED AT LINE 1498 IN monty.asm
                    > USED AT LINE 1503 IN monty.asm
                    > USED AT LINE 1535 IN monty.asm
                    > USED AT LINE 1639 IN monty.asm
INIT:               0995 DEFINED AT LINE 1516 IN monty.asm
                    > USED AT LINE 7
                    > USED AT LINE 1534 IN monty.asm
INIT0:              09AE DEFINED AT LINE 1526 IN monty.asm
                    > USED AT LINE 1529 IN monty.asm
START:              09B3 DEFINED AT LINE 1532 IN monty.asm
                    > USED AT LINE 8
INTERPRET:          09C9 DEFINED AT LINE 1538 IN monty.asm
                    > USED AT LINE 1633 IN monty.asm
                    > USED AT LINE 1642 IN monty.asm
INTERPRET2:         09D3 DEFINED AT LINE 1544 IN monty.asm
                    > USED AT LINE 1588 IN monty.asm
INTERPRET3:         09DB DEFINED AT LINE 1551 IN monty.asm
                    > USED AT LINE 1560 IN monty.asm
INTERPRET4:         09E1 DEFINED AT LINE 1557 IN monty.asm
                    > USED AT LINE 1549 IN monty.asm
INTERPRET5:         09E6 DEFINED AT LINE 1563 IN monty.asm
                    > USED AT LINE 1597 IN monty.asm
                    > USED AT LINE 1611 IN monty.asm
INTERPRET6:         09F7 DEFINED AT LINE 1590 IN monty.asm
                    > USED AT LINE 1566 IN monty.asm
INTERPRET7:         0A05 DEFINED AT LINE 1599 IN monty.asm
                    > USED AT LINE 1571 IN monty.asm
INTERPRET8:         0A18 DEFINED AT LINE 1613 IN monty.asm
                    > USED AT LINE 1569 IN monty.asm
NEXT:               0A20 DEFINED AT LINE 1619 IN monty.asm
                    > USED AT LINE 69 IN monty.asm
                    > USED AT LINE 1623 IN monty.asm
NEXT1:              0A2F DEFINED AT LINE 1630 IN monty.asm
                    > USED AT LINE 1624 IN monty.asm
EXIT_:              0A36 DEFINED AT LINE 1634 IN monty.asm
                    > USED AT LINE 1632 IN monty.asm
ERROR:              0A39 DEFINED AT LINE 1638 IN monty.asm
                    > USED AT LINE 1251 IN monty.asm
STACK:              0B80 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 868 IN monty.asm
                    > USED AT LINE 1518 IN monty.asm
                    > USED AT LINE 1533 IN monty.asm
VARS:               0C00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1523 IN monty.asm
RESTARTS:           0CD0 DEFINED AT LINE 11 IN ram.asm
RST08:              0CD0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              0CD2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              0CD4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              0CD6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              0CD8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              0CDA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               0CDC DEFINED AT LINE 19 IN ram.asm
INTVEC:             0CDE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             0CE0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            0CE2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            0CE4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            0CE6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1520 IN monty.asm
VDATAWIDTH:         0CE6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 464 IN monty.asm
                    > USED AT LINE 500 IN monty.asm
                    > USED AT LINE 527 IN monty.asm
                    > USED AT LINE 1312 IN monty.asm
VTIBPTR:            0CE8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1542 IN monty.asm
                    > USED AT LINE 1614 IN monty.asm
VNEXT:              0CEA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1517 IN monty.asm
VHEAPPTR:           0CEC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 454 IN monty.asm
                    > USED AT LINE 486 IN monty.asm
                    > USED AT LINE 487 IN monty.asm
                    > USED AT LINE 542 IN monty.asm
                    > USED AT LINE 576 IN monty.asm
                    > USED AT LINE 642 IN monty.asm
                    > USED AT LINE 645 IN monty.asm
                    > USED AT LINE 1103 IN monty.asm
                    > USED AT LINE 1118 IN monty.asm
                    > USED AT LINE 1120 IN monty.asm
                    > USED AT LINE 1162 IN monty.asm
                    > USED AT LINE 1181 IN monty.asm
                    > USED AT LINE 1270 IN monty.asm
                    > USED AT LINE 1275 IN monty.asm
                    > USED AT LINE 1276 IN monty.asm
                    > USED AT LINE 1316 IN monty.asm
                    > USED AT LINE 1318 IN monty.asm
VPOINTER:           0CEE DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 341 IN monty.asm
                    > USED AT LINE 343 IN monty.asm
                    > USED AT LINE 344 IN monty.asm
                    > USED AT LINE 422 IN monty.asm
                    > USED AT LINE 507 IN monty.asm
                    > USED AT LINE 525 IN monty.asm
                    > USED AT LINE 999 IN monty.asm
                    > USED AT LINE 1319 IN monty.asm
VREMAIN:            0CF0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 755 IN monty.asm
                    > USED AT LINE 1091 IN monty.asm
VSAVEDIP:           0CF2 DEFINED AT LINE 39 IN ram.asm
VSAVEDSP:           0CF4 DEFINED AT LINE 40 IN ram.asm
VSAVEDBP:           0CF6 DEFINED AT LINE 41 IN ram.asm
VCHECKSUM:          0CF8 DEFINED AT LINE 42 IN ram.asm
VTEMP1:             0CFA DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 447 IN monty.asm
                    > USED AT LINE 488 IN monty.asm
                    > USED AT LINE 637 IN monty.asm
                    > USED AT LINE 646 IN monty.asm
                    > USED AT LINE 867 IN monty.asm
                    > USED AT LINE 873 IN monty.asm
                    > USED AT LINE 901 IN monty.asm
                    > USED AT LINE 922 IN monty.asm
                    > USED AT LINE 929 IN monty.asm
                    > USED AT LINE 935 IN monty.asm
                    > USED AT LINE 1271 IN monty.asm
                    > USED AT LINE 1274 IN monty.asm
VTEMP2:             0CFC DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 902 IN monty.asm
                    > USED AT LINE 923 IN monty.asm
VLASTDEF:           0CFE DEFINED AT LINE 48 IN ram.asm
VHASHSTR:           0D00 DEFINED AT LINE 49 IN ram.asm
TBPTR:              0D02 DEFINED AT LINE 50 IN ram.asm
TIB:                0E00 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 1548 IN monty.asm
                    > USED AT LINE 1591 IN monty.asm
                    > USED AT LINE 1600 IN monty.asm
                    > USED AT LINE 1615 IN monty.asm
PAD:                0F00 DEFINED AT LINE 56 IN ram.asm
HEAP:               1000 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 70 IN monty.asm
                    > USED AT LINE 630 IN monty.asm
