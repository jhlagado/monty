0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 ED 0E               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQ:       EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of Monty code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num_locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
00C9                .macro PERFORM,name
00C9                             ; 
00C9                 ld ix,perform%%M
00C9                 jp name
00C9                perform%%M:
00C9                .endm
00C9                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   21                     DB   lsb(bang_)   ; !     1
0181   04                     DB   lsb(dquote_)   ; "     2
0182   5E                     DB   lsb(hash_)   ; #     1
0183   06                     DB   lsb(dollar_)   ; $     1
0184   09                     DB   lsb(percent_)   ; %     1
0185   7E                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   0F                     DB   lsb(lparen_)   ; (     1
0188   76                     DB   lsb(rparen_)   ; )     1
0189   A6                     DB   lsb(star_)   ; *     1
018A   C2                     DB   lsb(plus_)   ; +     1
018B   04                     DB   lsb(comma_)   ; ,     2
018C   88                     DB   lsb(minus_)   ; -     1
018D   12                     DB   lsb(dot_)   ; .     2
018E   15                     DB   lsb(slash_)   ; /	    1
018F   18                     DB   lsb(num_)   ; 0     1
0190   18                     DB   lsb(num_)   ; 1
0191   18                     DB   lsb(num_)   ; 2
0192   18                     DB   lsb(num_)   ; 3
0193   18                     DB   lsb(num_)   ; 4
0194   18                     DB   lsb(num_)   ; 5
0195   18                     DB   lsb(num_)   ; 6
0196   18                     DB   lsb(num_)   ; 7
0197   18                     DB   lsb(num_)   ; 8
0198   18                     DB   lsb(num_)   ; 9
0199   DE                     DB   lsb(colon_)   ; :     2
019A   1B                     DB   lsb(semicolon_)   ; ;     2
019B   4C                     DB   lsb(lt_)   ; <     1
019C   32                     DB   lsb(eq_)   ; =     1
019D   41                     DB   lsb(gt_)   ; >     1
019E   1E                     DB   lsb(question_)   ; ?     1
019F   F5                     DB   lsb(at_)   ; @     2
01A0   F4                     DB   lsb(upcase_)   ; A     1
01A1   F4                     DB   lsb(upcase_)   ; B
01A2   F4                     DB   lsb(upcase_)   ; C
01A3   F4                     DB   lsb(upcase_)   ; D
01A4   F4                     DB   lsb(upcase_)   ; E
01A5   F4                     DB   lsb(upcase_)   ; F
01A6   F4                     DB   lsb(upcase_)   ; G
01A7   F4                     DB   lsb(upcase_)   ; h
01A8   F4                     DB   lsb(upcase_)   ; I
01A9   F4                     DB   lsb(upcase_)   ; J
01AA   F4                     DB   lsb(upcase_)   ; K
01AB   F4                     DB   lsb(upcase_)   ; L
01AC   F4                     DB   lsb(upcase_)   ; M
01AD   F4                     DB   lsb(upcase_)   ; N
01AE   F4                     DB   lsb(upcase_)   ; O
01AF   F4                     DB   lsb(upcase_)   ; p
01B0   F4                     DB   lsb(upcase_)   ; Q
01B1   F4                     DB   lsb(upcase_)   ; R
01B2   F4                     DB   lsb(upcase_)   ; S
01B3   F4                     DB   lsb(upcase_)   ; T
01B4   F4                     DB   lsb(upcase_)   ; U
01B5   F4                     DB   lsb(upcase_)   ; V
01B6   F4                     DB   lsb(upcase_)   ; W
01B7   F4                     DB   lsb(upcase_)   ; X
01B8   F4                     DB   lsb(upcase_)   ; Y
01B9   F4                     DB   lsb(upcase_)   ; Z
01BA   21                     DB   lsb(lbrack_)   ; [     2
01BB   3D                     DB   lsb(backslash_)   ; \     2
01BC   5E                     DB   lsb(rbrack_)   ; ]     2
01BD   AE                     DB   lsb(caret_)   ; ^     1
01BE   0D                     DB   lsb(underscore_)   ; _     2
01BF   C4                     DB   lsb(grave_)   ; `     2   	
01C0   0F                     DB   lsb(lowcase_)   ; a     1
01C1   0F                     DB   lsb(lowcase_)   ; b
01C2   0F                     DB   lsb(lowcase_)   ; c
01C3   0F                     DB   lsb(lowcase_)   ; d
01C4   0F                     DB   lsb(lowcase_)   ; e
01C5   0F                     DB   lsb(lowcase_)   ; f
01C6   0F                     DB   lsb(lowcase_)   ; g
01C7   0F                     DB   lsb(lowcase_)   ; h
01C8   0F                     DB   lsb(lowcase_)   ; i
01C9   0F                     DB   lsb(lowcase_)   ; j
01CA   0F                     DB   lsb(lowcase_)   ; k
01CB   0F                     DB   lsb(lowcase_)   ; l
01CC   0F                     DB   lsb(lowcase_)   ; m
01CD   0F                     DB   lsb(lowcase_)   ; n
01CE   0F                     DB   lsb(lowcase_)   ; o
01CF   0F                     DB   lsb(lowcase_)   ; p
01D0   0F                     DB   lsb(lowcase_)   ; q
01D1   0F                     DB   lsb(lowcase_)   ; r
01D2   0F                     DB   lsb(lowcase_)   ; s
01D3   0F                     DB   lsb(lowcase_)   ; t
01D4   0F                     DB   lsb(lowcase_)   ; u
01D5   0F                     DB   lsb(lowcase_)   ; v
01D6   0F                     DB   lsb(lowcase_)   ; w
01D7   0F                     DB   lsb(lowcase_)   ; x
01D8   0F                     DB   lsb(lowcase_)   ; y
01D9   0F                     DB   lsb(lowcase_)   ; z
01DA   DA                     DB   lsb(lbrace_)   ; {     1
01DB   DF                     DB   lsb(pipe_)   ; |     1
01DC   EA                     DB   lsb(rbrace_)   ; }     1
01DD   ED                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 22                  DW   BUFFER   ; vBufPtr pointer into BUF
01E6   79 0F                  DW   next   ; nNext
01E8   22 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; vStrMode
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                DQUOTE_:      
0204                COMMA_:      
0204   DD E9                  JP   (ix)   
0206                DOLLAR_:      
0206   C3 8E 0A               JP   dollar   
0209                PERCENT_:      
0209   C3 DE 0A               JP   percent   
020C                QUOTE_:      
020C   C3 C4 0A               JP   quote   
020F                LPAREN_:      
020F   C3 DA 03               JP   lbrace   
0212                DOT_:        
0212   C3 00 04               JP   dot   
0215                SLASH_:      
0215   C3 00 05               JP   slash   
0218                NUM_:        
0218   C3 13 0B               JP   num   
021B                SEMICOLON_:      
021B   C3 F9 02               JP   semicolon   
021E                QUESTION_:      
021E   C3 AB 0A               JP   question   
0221                BANG_:       
0221                BANG:        ; logical invert, any non zero value
0221   03                     INC   bc   
0222   0A                     LD   a,(bc)   
0223   FE 3D                  CP   "="   
0225   20 05                  JR   nz,not   
0227   E1                     POP   hl   
0228   D1                     POP   de   
0229   C3 55 0C               JP   notequals   
022C                NOT:         
022C   0B                     DEC   bc   
022D   21 00 00               LD   hl,0   ; is considered true
0230   18 0B                  JR   eq1   
0232                EQ_:         
0232                EQ:          
0232   03                     INC   bc   
0233   0A                     LD   a,(bc)   
0234   FE 3D                  CP   "="   
0236   28 04                  JR   z,eq0   
0238   0B                     DEC   bc   
0239   C3 3D 0C               JP   assign   
023C                EQ0:         
023C   E1                     POP   hl   
023D                EQ1:         
023D   D1                     POP   de   
023E   C3 4E 0C               JP   equals   
0241                GT_:         
0241                GT:          
0241   03                     INC   bc   
0242   0A                     LD   a,(bc)   
0243   FE 3E                  CP   ">"   
0245   CA 85 0C               JP   z,shiftRight   
0248   D1                     POP   de   
0249   E1                     POP   hl   
024A   18 09                  JR   lt1   
024C                LT_:         
024C                LT:          
024C   03                     INC   bc   
024D   0A                     LD   a,(bc)   
024E   FE 3C                  CP   "<"   
0250   CA 75 0C               JP   z,shiftLeft   
0253   E1                     POP   hl   
0254   D1                     POP   de   
0255                LT1:         
0255   FE 3D                  CP   "="   
0257   CA 5C 0C               JP   z,lessthaneq   
025A   0B                     DEC   bc   
025B   C3 61 0C               JP   lessthan   
025E                             ; index of an array, based on vDataWidth 22
025E                             ; array* num -- value    ; also sets vPointer to address
025E                HASH_:       
025E                HASH:        
025E                ARRAYINDEX:      
025E   E1                     POP   hl   ; hl = index
025F   D1                     POP   de   ; de = array
0260   3A E6 23               LD   a,(vDataWidth)   ; a = data width
0263   3D                     DEC   a   
0264   28 01                  JR   z,arrayIndex1   
0266                ARRAYINDEX0:      
0266   29                     ADD   hl,hl   ; if data width = 2 then double
0267                ARRAYINDEX1:      
0267   19                     ADD   hl,de   ; add addr
0268   22 F8 23               LD   (vPointer),hl   ; store address in setter
026B   16 00                  LD   d,0   
026D   5E                     LD   e,(hl)   
026E   B7                     OR   a   ; check data width again
026F   28 02                  JR   z,arrayIndex2   
0271   23                     INC   hl   
0272   56                     LD   d,(hl)   
0273                ARRAYINDEX2:      
0273   D5                     PUSH   de   
0274   DD E9                  JP   (ix)   
0276                             ;                               4
0276                RPAREN_:      
0276                RPAREN:      
0276   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0279   FD 46 09               LD   b,(iy+9)   
027C   DD E9                  JP   (ix)   
027E                             ; & and                          14
027E                             ; a b -- c
027E                AMPER_:      
027E                AMPER:       
027E                AND:         
027E   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
027F   E1                     POP   hl   
0280   7B                     LD   a,e   
0281   A5                     AND   l   
0282   6F                     LD   l,a   
0283   7A                     LD   a,d   
0284   A4                     AND   h   
0285   67                     LD   h,a   
0286   18 49                  JR   add3   
0288                             ; - sub                          23
0288                             ; a b -- c
0288                MINUS_:      
0288                MINUS:       
0288   03                     INC   bc   ; check if sign of a number
0289   0A                     LD   a,(bc)   
028A   0B                     DEC   bc   
028B   FE 30                  CP   "0"   
028D   38 05                  JR   c,sub   
028F   FE 3A                  CP   "9"+1   
0291   DA 13 0B               JP   c,num   
0294                SUB:         ; Subtract the value 2nd on stack from top of stack
0294   03                     INC   bc   
0295   FE 2D                  CP   "-"   
0297   20 05                  JR   nz,sub1   
0299   E1                     POP   hl   
029A   2B                     DEC   hl   
029B   C3 3F 0C               JP   assign0   
029E                SUB1:        
029E   0B                     DEC   bc   
029F   D1                     POP   de   
02A0   E1                     POP   hl   
02A1   B7                     OR   a   
02A2   ED 52                  SBC   hl,de   
02A4   18 2B                  JR   add3   
02A6                STAR_:       ; 21
02A6                STAR:        
02A6                MUL:         
02A6   D1                     POP   de   ; get first value
02A7   E1                     POP   hl   
02A8                MUL2:        
02A8   C5                     PUSH   bc   ; Preserve the IP
02A9   44 4D                  LD   bc,hl   ; bc = 2nd value
02AB   21 00 00               LD   hl,0   
02AE   3E 10                  LD   a,16   
02B0                MUL3:        
02B0   29                     ADD   hl,hl   
02B1   CB 13                  RL   e   
02B3   CB 12                  RL   d   
02B5   30 04                  JR   nc,$+6   
02B7   09                     ADD   hl,bc   
02B8   30 01                  JR   nc,$+3   
02BA   13                     INC   de   
02BB   3D                     DEC   a   
02BC   20 F2                  JR   nz,mul3   
02BE   C1                     POP   bc   ; Restore the IP
02BF   C3 D1 02               JP   add3   
02C2                             ; + add                         25
02C2                             ; a b -- c
02C2                PLUS_:       
02C2                PLUS:        
02C2                ADD:         
02C2   03                     INC   bc   
02C3   0A                     LD   a,(bc)   
02C4   FE 2B                  CP   "+"   ; ++ increment variable
02C6   20 05                  JR   nz,add1   
02C8   E1                     POP   hl   
02C9   23                     INC   hl   
02CA   C3 3F 0C               JP   assign0   
02CD                ADD1:        
02CD   0B                     DEC   bc   
02CE   D1                     POP   de   ; second term
02CF   E1                     POP   hl   ; first term
02D0   19                     ADD   hl,de   
02D1                ADD3:        
02D1   03                     INC   bc   
02D2   0A                     LD   a,(bc)   
02D3   FE 3D                  CP   "="   
02D5   28 04                  JR   z,add4   
02D7   0B                     DEC   bc   
02D8   E5                     PUSH   hl   
02D9   DD E9                  JP   (ix)   
02DB                ADD4:        
02DB   C3 3F 0C               JP   assign0   
02DE                COLON_:      
02DE                COLON:       
02DE   03                     INC   bc   ; arg_list must ve immediately followed by {
02DF   0A                     LD   a,(bc)   
02E0   FE 3D                  CP   "="   ; := definition
02E2   28 07                  JR   z,defineStart   
02E4   0B                     DEC   bc   
02E5   21 01 00               LD   hl,1   
02E8   C3 9D 0F               JP   error   
02EB                DEFINESTART:      
02EB   E1                     POP   hl   ; discard variable value
02EC   2A F8 23               LD   hl,(vPointer)   ; vDefine = vPointer
02EF   22 F4 23               LD   (vDefine),hl   
02F2   DD E9                  JP   (ix)   
02F4                             ;                               18
02F4                UPCASE_:      
02F4                UPCASE:      
02F4   0A                     LD   a,(bc)   ; a = identifier char
02F5   D6 41                  SUB   "A"   ; "A" = 0
02F7   18 1B                  JR   ident1   
02F9                             ; ;
02F9                SEMICOLON:      
02F9                DEFINEEND:      
02F9   2A F4 23               LD   hl,(vDefine)   ; hl = define*
02FC   7D                     LD   a,l   
02FD   B4                     OR   h   
02FE   28 0B                  JR   z,defineEnd1   
0300   11 00 00               LD   de,NUL   ; set vDefine=NUL
0303   ED 53 F4 23            LD   (vDefine),de   
0307   D1                     POP   de   ; de = value
0308   C3 43 0C               JP   assign1   
030B                DEFINEEND1:      
030B   DD E9                  JP   (ix)   
030D                             ;********************** PAGE 2 END *********************************************
030D                             ; .align $100
030D                             ;********************** PAGE 3 BEGIN *********************************************
030D                UNDERSCORE_:      
030D   DD E9                  JP   (ix)   
030F                LOWCASE_:      
030F                LOWCASE:      
030F   0A                     LD   a,(bc)   
0310   D6 61                  SUB   "a"   
0312   C6 1A                  ADD   a,26   
0314                IDENT1:      
0314   87                     ADD   a,a   ; l = a * 2
0315   6F                     LD   l,a   
0316   26 23                  LD   h,msb(vars)   
0318   22 F8 23               LD   (vPointer),hl   ; store address in setter
031B   5E                     LD   e,(hl)   
031C   23                     INC   hl   
031D   56                     LD   d,(hl)   
031E   D5                     PUSH   de   
031F   DD E9                  JP   (ix)   
0321                             ; [                             14
0321                LBRACK_:      
0321                LBRACK:      
0321                ARRAYSTART:      
0321   11 00 00               LD   de,0   ; create stack frame
0324   D5                     PUSH   de   ; push null for IP
0325   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0328   FD 56 05               LD   d,(iy+5)   ; 
032B   D5                     PUSH   de   ; 
032C   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
032F   FD 56 03               LD   d,(iy+3)   ; 
0332   D5                     PUSH   de   ; 
0333   FD E5                  PUSH   iy   ; push BP
0335   FD 21 00 00            LD   iy,0   ; BP = SP
0339   FD 39                  ADD   iy,sp   
033B   DD E9                  JP   (ix)   
033D                             ; \                             19
033D                BACKSLASH_:      
033D                BACKSLASH:      
033D                LAMBDA:      
033D   DD E5                  PUSH   ix   
033F   CD D7 0C               CALL   parseArgs   
0342                LAMBDA1:      
0342   03                     INC   bc   ; arg_list must ve immediately followed by {
0343   0A                     LD   a,(bc)   
0344   FE 21                  CP   " "+1   ; skip white space
0346   38 FA                  JR   c,lambda1   
0348   FE 7B                  CP   "{"   
034A   28 06                  JR   z,lambda2   
034C   21 02 00               LD   hl,2   ; error 2: parse error
034F   C3 9D 0F               JP   error   
0352                LAMBDA2:      
0352   CD 0D 0D               CALL   parseBlock   
0355   CD 77 0D               CALL   createFunc   
0358   E1                     POP   hl   
0359   DD E1                  POP   ix   
035B   E5                     PUSH   hl   
035C   DD E9                  JP   (ix)   
035E                RBRACK_:      
035E                RBRACK:      
035E                ARRAYEND:      ; 53
035E   FD 54                  LD   d,iyh   ; de = BP
0360   FD 5D                  LD   e,iyl   
0362   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0366   62 6B                  LD   hl,de   ; hl = de = BP
0368   B7                     OR   a   
0369   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
036B   CB 3C                  SRL   h   ; 
036D   CB 1D                  RR   l   
036F   44 4D                  LD   bc,hl   ; bc = count
0371   2A F0 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
0374   71                     LD   (hl),c   ; write num items in length word
0375   23                     INC   hl   
0376   70                     LD   (hl),b   
0377   23                     INC   hl   ; hl = array[0], bc = count
0378                             ; de = BP, hl = array[0], bc = count
0378   18 15                  JR   arrayEnd3   
037A                ARRAYEND1:      
037A   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
037D   77                     LD   (hl),a   ; write lsb of array item
037E   23                     INC   hl   ; move to msb of array item
037F   3A E6 23               LD   a,(vDataWidth)   ; vDataWidth=1?
0382   3D                     DEC   a   
0383   28 05                  JR   z,arrayEnd2   
0385   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0388   77                     LD   (hl),a   ; write msb of array item
0389   23                     INC   hl   ; move to next word in array
038A                ARRAYEND2:      
038A   FD 2B                  DEC   iy   ; move to next word on stack
038C   FD 2B                  DEC   iy   
038E   0B                     DEC   bc   ; dec items count
038F                ARRAYEND3:      
038F   79                     LD   a,c   ; if not zero loop
0390   B0                     OR   b   
0391   20 E7                  JR   nz,arrayEnd1   
0393   EB                     EX   de,hl   ; de = end of array, hl = BP
0394   F9                     LD   sp,hl   ; sp = BP
0395   E1                     POP   hl   ; de = end of array, hl = old BP
0396   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0397   FD 62                  LD   iyh,d   
0399   FD 6B                  LD   iyl,e   
039B   D1                     POP   de   ; pop arg_list (discard)
039C   D1                     POP   de   ; pop first_arg* (discard)
039D   D1                     POP   de   ; pop IP (discard)
039E   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = array[-2]
03A2   13                     INC   de   
03A3   13                     INC   de   
03A4   D5                     PUSH   de   ; return array[0]
03A5   22 F0 23               LD   (vHeapPtr),hl   ; move heap* to end of array
03A8   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
03AC   DD E9                  JP   (ix)   
03AE                CARET_:      
03AE                             ; execute a block of code which ends with } 116
03AE                             ; creates a root scope if BP == stack
03AE                             ; else uses outer scope
03AE                CARET:       
03AE                GO:          
03AE   D1                     POP   de   ; de = block*
03AF                GO1:         
03AF   7B                     LD   a,e   ; if block* == null, exit
03B0   B2                     OR   d   
03B1   20 02                  JR   nz,go2   
03B3   DD E9                  JP   (ix)   
03B5                GO2:         
03B5   1A                     LD   a,(de)   
03B6   FE 7B                  CP   "{"   
03B8   CA B0 0B               JP   z,goBlock   
03BB   FE 28                  CP   "("   
03BD   C2 E3 0B               JP   nz,goFunc   
03C0   D5                     PUSH   de   ; push de just before stack frame
03C1   CA B0 0B               JP   z,goBlock   
03C4                GRAVE_:      
03C4                GRAVE:       
03C4                PRINTLITERAL:      
03C4   03                     INC   bc   ; move to first char
03C5   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
03C9   18 03                  JR   printLiteral1   
03CB                PRINTLITERAL0:      
03CB   12                     LD   (de),a   ; a -> buffer*
03CC   13                     INC   de   ; string*++,
03CD   03                     INC   bc   
03CE                PRINTLITERAL1:      
03CE   0A                     LD   a,(bc)   ; a <- string*
03CF   FE 60                  CP   "`"   ; if ` exit loop
03D1   20 F8                  JR   nz,printLiteral0   
03D3   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
03D7   C3 B1 0C               JP   dotNext   
03DA                LBRACE_:      
03DA                LBRACE:      
03DA   CD 0D 0D               CALL   parseBlock   
03DD   DD E9                  JP   (ix)   
03DF                             ; | or                          11
03DF                             ; a b -- c
03DF                PIPE_:       
03DF                PIPE:        
03DF                OR:          
03DF   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03E0   E1                     POP   hl   
03E1   7B                     LD   a,e   
03E2   B5                     OR   l   
03E3   6F                     LD   l,a   
03E4   7A                     LD   a,d   
03E5   B4                     OR   h   
03E6   67                     LD   h,a   
03E7   C3 D1 02               JP   add3   
03EA                RBRACE_:      
03EA   C3 43 0B               JP   rbrace   
03ED                             ; ~ char                        8
03ED                TILDE_:      
03ED                TILDE:       
03ED                CHAR:        
03ED   03                     INC   bc   ; point to next char
03EE   0A                     LD   a,(bc)   
03EF   6F                     LD   l,a   
03F0   26 00                  LD   h,0   
03F2   E5                     PUSH   hl   
03F3   DD E9                  JP   (ix)   
03F5                AT_:         
03F5                AT:          
03F5                ADDR:        
03F5   ED 5B F8 23            LD   de,(vPointer)   
03F9   21 F8 23               LD   hl,vPointer   
03FC   C3 1B 07               JP   variable   
03FF                             ;********************** PAGE 3 END *********************************************
03FF                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   CD 2F 0E               CALL   jumpTable   
0403   61                     DB   "a"   ; .a print array
0404   46 0A                  DW   printArray   
0406   63                     DB   "c"   ; .c print char
0407   12 04                  DW   printChar   
0409   68                     DB   "h"   ; .h print hex without $ prefix
040A   A7 04                  DW   printHex0   
040C   73                     DB   "s"   ; .s print string
040D   21 04                  DW   printString   
040F   00                     DB   NUL   ; .  print number, fall through
0410   36 04                  DW   printNumber   
0412                             ; .c print char
0412                             ; char --
0412                PRINTCHAR:      
0412   E1                     POP   hl   ; a = char
0413   7D                     LD   a,l   
0414   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
0418   12                     LD   (de),a   
0419   13                     INC   de   
041A   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*'
041E   C3 B1 0C               JP   dotNext   
0421                             ; .s print string
0421                             ; string* --
0421                PRINTSTRING:      
0421   E1                     POP   hl   ; hl = string*
0422   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
0426   18 03                  JR   printString1   
0428                PRINTSTRING0:      
0428   12                     LD   (de),a   ; a -> buffer*
0429   13                     INC   de   ; string*++,
042A   23                     INC   hl   
042B                PRINTSTRING1:      
042B   7E                     LD   a,(hl)   ; a <- string*
042C   B7                     OR   a   ; if NUL exit loop
042D   20 F9                  JR   nz,printString0   
042F   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
0433   C3 B1 0C               JP   dotNext   
0436                             ; . print decimal
0436                             ; value --
0436                PRINTNUMBER:      
0436   3A E8 23               LD   a,(vNumBase)   
0439   FE 10                  CP   16   
043B   CA AD 04               JP   z,printHex   ; else falls through
043E   C3 41 04               JP   printDec   
0441                             ; print decimal                 ; 70
0441                             ; value --
0441                PRINTDEC:      
0441   ED 5B EC 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0445   D9                     EXX      
0446   E1                     POP   hl   ; hl = value
0447   3A E6 23               LD   a,(vDataWidth)   
044A   3D                     DEC   a   
044B   20 02                  JR   nz,printDec1   
044D   26 00                  LD   h,0   
044F                PRINTDEC1:      
044F   CD 5E 04               CALL   printDec2   
0452   D9                     EXX      ; de = buffer*' bc = IP
0453   3E 20                  LD   a," "   ; append space to buffer
0455   12                     LD   (de),a   
0456   13                     INC   de   ; string*++,
0457   ED 53 EC 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
045B   C3 B1 0C               JP   dotNext   
045E                             ; hl = value
045E                             ; de' = buffer*
045E                             ; a, bc, de, hl destroyed
045E                PRINTDEC2:      
045E   CB 7C                  BIT   7,h   
0460   28 0C                  JR   z,printDec3   
0462   D9                     EXX      
0463   3E 2D                  LD   a,"-"   
0465   12                     LD   (de),a   
0466   13                     INC   de   
0467   D9                     EXX      
0468   AF                     XOR   a   
0469   95                     SUB   l   
046A   6F                     LD   l,a   
046B   9F                     SBC   a,a   
046C   94                     SUB   h   
046D   67                     LD   h,a   
046E                PRINTDEC3:      
046E   0E 00                  LD   c,0   ; leading zeros flag = false
0470   11 F0 D8               LD   de,-10000   
0473   CD 8E 04               CALL   printDec4   
0476   11 18 FC               LD   de,-1000   
0479   CD 8E 04               CALL   printDec4   
047C   11 9C FF               LD   de,-100   
047F   CD 8E 04               CALL   printDec4   
0482   1E F6                  LD   e,-10   
0484   CD 8E 04               CALL   printDec4   
0487   0C                     INC   c   ; flag = true for at least digit
0488   1E FF                  LD   e,-1   
048A   CD 8E 04               CALL   printDec4   
048D   C9                     RET      
048E                PRINTDEC4:      
048E   06 2F                  LD   b,"0"-1   
0490                PRINTDEC5:      
0490   04                     INC   b   
0491   19                     ADD   hl,de   
0492   38 FC                  JR   c,printDec5   
0494   ED 52                  SBC   hl,de   
0496   3E 30                  LD   a,"0"   
0498   B8                     CP   b   
0499   20 05                  JR   nz,printDec6   
049B   AF                     XOR   a   
049C   B1                     OR   c   
049D   C8                     RET   z   
049E   18 01                  JR   printDec7   
04A0                PRINTDEC6:      
04A0   0C                     INC   c   
04A1                PRINTDEC7:      
04A1   78                     LD   a,b   
04A2   D9                     EXX      
04A3   12                     LD   (de),a   
04A4   13                     INC   de   
04A5   D9                     EXX      
04A6   C9                     RET      
04A7                             ; buffer hex                    37
04A7                             ; value --
04A7                PRINTHEX0:      
04A7   ED 5B EC 23            LD   de,(vBufPtr)   
04AB   18 08                  JR   printHex1   
04AD                PRINTHEX:      
04AD   ED 5B EC 23            LD   de,(vBufPtr)   
04B1   3E 24                  LD   a,"$"   ; # prefix
04B3   12                     LD   (de),a   
04B4   13                     INC   de   ; string*++,
04B5                PRINTHEX1:      
04B5   E1                     POP   hl   ; hl = value
04B6   3A E6 23               LD   a,(vDataWidth)   
04B9   3D                     DEC   a   
04BA   28 04                  JR   z,printHex2   
04BC   7C                     LD   a,h   
04BD   CD CF 04               CALL   printHex3   
04C0                PRINTHEX2:      
04C0   7D                     LD   a,l   
04C1   CD CF 04               CALL   printHex3   
04C4   3E 20                  LD   a," "   ; append space to buffer
04C6   12                     LD   (de),a   
04C7   13                     INC   de   ; string*++,
04C8   ED 53 EC 23            LD   (vBufPtr),de   
04CC   C3 B1 0C               JP   dotNext   
04CF                PRINTHEX3:      
04CF   F5                     PUSH   af   
04D0   1F                     RRA      
04D1   1F                     RRA      
04D2   1F                     RRA      
04D3   1F                     RRA      
04D4   CD D8 04               CALL   printHex4   
04D7   F1                     POP   af   
04D8                PRINTHEX4:      
04D8   E6 0F                  AND   0x0F   
04DA   C6 90                  ADD   a,0x90   
04DC   27                     DAA      
04DD   CE 40                  ADC   a,0x40   
04DF   27                     DAA      
04E0   12                     LD   (de),a   
04E1   13                     INC   de   ; string*++,
04E2   C9                     RET      
04E3                             ; unused
04E3                DQUOTE:      
04E3                UNDERSCORE:      
04E3                COMMA:       
04E3   DD E9                  JP   (ix)   
04E5                             ;********************** PAGE 4 END *********************************************
04E5                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA 4C 06               JP   z,comment   
0507   0B                     DEC   bc   
0508   CD 19 0E               CALL   commandTable   
050B   26                     DB   lsb(command_a_)   
050C   38                     DB   lsb(command_b_)   
050D   C5                     DB   lsb(command_nop_)   
050E   44                     DB   lsb(command_d_)   
050F   C5                     DB   lsb(command_nop_)   
0510   4A                     DB   lsb(command_f_)   
0511   C5                     DB   lsb(command_nop_)   
0512   65                     DB   lsb(command_h_)   
0513   6B                     DB   lsb(command_i_)   
0514   C5                     DB   lsb(command_nop_)   
0515   71                     DB   lsb(key_)   
0516   C5                     DB   lsb(command_nop_)   
0517   74                     DB   lsb(command_m_)   
0518   C5                     DB   lsb(command_nop_)   
0519   7A                     DB   lsb(output_)   
051A   7D                     DB   lsb(command_p_)   
051B   80                     DB   lsb(command_q_)   
051C   86                     DB   lsb(command_r_)   
051D   92                     DB   lsb(command_s_)   
051E   A4                     DB   lsb(true_)   
051F   C5                     DB   lsb(command_nop_)   
0520   A7                     DB   lsb(command_v_)   
0521   BC                     DB   lsb(command_w_)   
0522   C2                     DB   lsb(xor_)   
0523   C5                     DB   lsb(command_nop_)   
0524   C5                     DB   lsb(command_nop_)   
0525   C8                     DB   lsb(command_default_)   
0526                             ; 12
0526                COMMAND_A_:      
0526   62                     DB   "b"   ; /ab absolute
0527   DE 05                  DW   absolute   
0529   64                     DB   "d"   ; /ad address of
052A   EC 05                  DW   addrOf   
052C   69                     DB   "i"   ; /ad address of
052D   C6 07                  DW   arrayIter   
052F   6C                     DB   "l"   ; /al array length
0530   0D 06                  DW   arrayLength   
0532   73                     DB   "s"   ; /as array size
0533   16 06                  DW   arraySize   
0535   00                     DB   NUL   
0536   6F 06                  DW   error1   
0538                COMMAND_B_:      
0538   62                     DB   "b"   ; /bb bye bye cold boot
0539   E4 0E                  DW   coldStart   
053B   6D                     DB   "m"   ; /bm byte mode
053C   44 06                  DW   byteMode   
053E   72                     DB   "r"   ; /br break from loop
053F   2A 06                  DW   break   
0541   00                     DB   NUL   
0542   6F 06                  DW   error1   
0544                COMMAND_D_:      
0544   62                     DB   "b"   ; /db decimal base
0545   67 06                  DW   decBase   
0547   00                     DB   NUL   
0548   67 06                  DW   decBase   ; /d decimal
054A                COMMAND_F_:      
054A   64                     DB   "d"   ; /fd fold
054B   6F 09                  DW   fold   
054D   65                     DB   "e"   ; /fe forEach
054E   C1 09                  DW   forEach   
0550   73                     DB   "s"   ; /fs funcSrc
0551   0D 0A                  DW   funcSrc   
0553   74                     DB   "t"   ; /ft filter
0554   11 09                  DW   filter   
0556   31                     DB   "1"   
0557   C5 0F                  DW   f1   
0559   32                     DB   "2"   
055A   C5 0F                  DW   f2   
055C   33                     DB   "3"   
055D   C5 0F                  DW   f3   
055F   34                     DB   "4"   
0560   C5 0F                  DW   f4   
0562   00                     DB   NUL   
0563   6F 0C                  DW   false1   
0565                COMMAND_H_:      
0565   62                     DB   "b"   ; /hb hex base
0566   75 06                  DW   hexBase   
0568   00                     DB   NUL   
0569   6F 06                  DW   error1   
056B                             ; 6
056B                COMMAND_I_:      
056B   6E                     DB   "n"   ; /in input
056C   7B 06                  DW   input   
056E   00                     DB   NUL   
056F   6F 06                  DW   error1   
0571                KEY_:        
0571   00                     DB   NUL   
0572   86 06                  DW   key   
0574                COMMAND_M_:      
0574   70                     DB   "p"   ; /mp map
0575   CF 08                  DW   map   
0577   00                     DB   NUL   
0578   6F 06                  DW   error1   
057A                OUTPUT_:      
057A   00                     DB   NUL   
057B   8F 06                  DW   output   
057D                             ; 4
057D                COMMAND_P_:      
057D   00                     DB   NUL   
057E   6F 06                  DW   error1   
0580                             ; 6
0580                COMMAND_Q_:      
0580   74                     DB   "t"   ; /qt quit
0581   98 06                  DW   quit   
0583   00                     DB   NUL   
0584   6F 06                  DW   error1   
0586                COMMAND_R_:      
0586   63                     DB   "c"   ; /rc tail call optimisation
0587   A2 06                  DW   recur   
0589   65                     DB   "e"   ; /re remainder
058A   A8 06                  DW   remain   
058C   67                     DB   "g"   ; /rg range src
058D   32 07                  DW   rangeSrc   
058F   00                     DB   NUL   
0590   6F 06                  DW   error1   
0592                COMMAND_S_:      
0592   62                     DB   "b"   
0593   AE 06                  DW   stringBegin   
0595   65                     DB   "e"   
0596   B6 06                  DW   stringEnd   
0598   69                     DB   "i"   
0599   47 08                  DW   stringIter   
059B   6C                     DB   "l"   
059C   E5 06                  DW   stringLength   
059E   73                     DB   "s"   
059F   F4 06                  DW   stringSize   
05A1   00                     DB   NUL   
05A2   6F 06                  DW   error1   
05A4                TRUE_:       
05A4   00                     DB   NUL   
05A5   69 0C                  DW   true1   
05A7                COMMAND_V_:      
05A7   62                     DB   "b"   
05A8   00 07                  DW   varBufPtr   
05AA   68                     DB   "h"   
05AB   09 07                  DW   varHeapPtr   
05AD   74                     DB   "t"   
05AE   12 07                  DW   varTIBPtr   
05B0   42                     DB   "B"   
05B1   61 06                  DW   constBufStart   
05B3   48                     DB   "H"   
05B4   55 06                  DW   constHeapStart   
05B6   54                     DB   "T"   
05B7   5B 06                  DW   constTIBStart   
05B9   00                     DB   NUL   
05BA   6F 06                  DW   error1   
05BC                COMMAND_W_:      
05BC   6D                     DB   "m"   ; /wm word mode
05BD   21 07                  DW   wordMode   
05BF   00                     DB   NUL   
05C0   6F 06                  DW   error1   
05C2                XOR_:        
05C2   00                     DB   NUL   
05C3   27 07                  DW   xor   
05C5                             ; 2
05C5                COMMAND_NOP_:      
05C5   00                     DB   NUL   
05C6   CB 05                  DW   nop   
05C8                             ; 3
05C8                COMMAND_DEFAULT_:      
05C8   00                     DB   NUL   
05C9   CD 05                  DW   div   
05CB                             ;********************** PAGE 5 END *********************************************
05CB                NOP:         
05CB   DD E9                  JP   (ix)   
05CD                             ;                               32
05CD                DIV:         
05CD   D1                     POP   de   
05CE   E1                     POP   hl   
05CF   C5                     PUSH   bc   ; preserve the IP
05D0   44 4D                  LD   bc,hl   
05D2   CD 98 0C               CALL   divide   
05D5   EB                     EX   de,hl   
05D6   ED 53 FA 23            LD   (vRemain),de   
05DA   C1                     POP   bc   
05DB   C3 D1 02               JP   add3   
05DE                             ; /ab absolute
05DE                             ; num -- num
05DE                ABSOLUTE:      
05DE   E1                     POP   hl   
05DF   CB 7C                  BIT   7,h   
05E1   28 06                  JR   z,absolute1   
05E3   AF                     XOR   a   
05E4   95                     SUB   l   
05E5   6F                     LD   l,a   
05E6   9F                     SBC   a,a   
05E7   94                     SUB   h   
05E8   67                     LD   h,a   
05E9                ABSOLUTE1:      
05E9   E5                     PUSH   hl   
05EA   DD E9                  JP   (ix)   
05EC                             ; /ad addrOf                    24
05EC                             ; char -- addr
05EC                ADDROF:      
05EC   E1                     POP   hl   ; a = char
05ED   7D                     LD   a,l   
05EE   FE 7B                  CP   "z"+1   ; if a > z then exit
05F0   30 19                  JR   nc,addrOf2   
05F2   D6 41                  SUB   "A"   ; a - 65
05F4   38 15                  JR   c,addrOf2   ; if < A then exit
05F6   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
05F8   38 06                  JR   c,addrOf1   
05FA   D6 06                  SUB   "a"-("Z"+1)   
05FC   FE 1A                  CP   "Z"-"A"+1   
05FE   38 0B                  JR   c,addrOf2   ; if < a then exit
0600                ADDROF1:      
0600   87                     ADD   a,a   ; double a
0601   21 00 23               LD   hl,VARS   ; hl = VARS + a
0604   85                     ADD   a,l   
0605   6F                     LD   l,a   
0606   3E 00                  LD   a,0   
0608   8C                     ADC   a,h   
0609   67                     LD   h,a   
060A   E5                     PUSH   hl   
060B                ADDROF2:      
060B   DD E9                  JP   (ix)   
060D                             ; /al length of an array, num elements
060D                             ; array* -- num
060D                ARRAYLENGTH:      
060D   E1                     POP   hl   
060E   2B                     DEC   hl   ; msb size
060F   56                     LD   d,(hl)   
0610   2B                     DEC   hl   ; lsb size
0611   5E                     LD   e,(hl)   
0612   EB                     EX   de,hl   
0613                ARRAYLENGTH1:      
0613   E5                     PUSH   hl   
0614   DD E9                  JP   (ix)   
0616                             ; /as size in bytes of an array, based on current data width
0616                             ; array* -- num
0616                ARRAYSIZE:      
0616                          ;*Macro unroll:  PERFORM arrayLength
0616   DD 21 1D 06            LD   ix,performM_1506S1062   
061A   C3 0D 06               JP   arrayLength   
061D                PERFORMM_1506S1062:      
061D   E1                     POP   hl   
061E   3A E6 23               LD   a,(vDataWidth)   
0621   3D                     DEC   a   
0622   28 EF                  JR   z,arrayLength1   
0624   CB 3C                  SRL   h   
0626   CB 1D                  RR   l   
0628   18 E9                  JR   arrayLength1   
062A                             ; 13
062A                             ; /br break from loop
062A                             ; --
062A                BREAK:       
062A   E1                     POP   hl   ; hl = condition, break if false
062B   7D                     LD   a,l   
062C   B4                     OR   h   
062D   28 02                  JR   z,break1   
062F   DD E9                  JP   (ix)   
0631                BREAK1:      
0631   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0633   FD 54                  LD   d,iyh   
0635   21 08 00               LD   hl,8   
0638   19                     ADD   hl,de   
0639   23                     INC   hl   
063A   23                     INC   hl   
063B   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
063E   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0641   C3 43 0B               JP   blockEnd   
0644                             ; /b
0644                BYTEMODE:      
0644   21 01 00               LD   hl,1   
0647                BYTEMODE1:      
0647   22 E6 23               LD   (vDataWidth),hl   
064A   DD E9                  JP   (ix)   
064C                             ; //
064C                COMMENT:      
064C   03                     INC   bc   ; point to next char
064D   0A                     LD   a,(bc)   
064E   FE 20                  CP   " "   ; terminate on any char less than SP
0650   30 FA                  JR   nc,comment   
0652   0B                     DEC   bc   
0653   DD E9                  JP   (ix)   
0655                CONSTHEAPSTART:      
0655   11 22 24               LD   de,HEAP   
0658   C3 1E 07               JP   constant   
065B                CONSTTIBSTART:      
065B   11 00 21               LD   de,TIB   
065E   C3 1E 07               JP   constant   
0661                CONSTBUFSTART:      
0661   11 00 22               LD   de,BUFFER   
0664   C3 1E 07               JP   constant   
0667                DECBASE:      
0667   21 0A 00               LD   hl,10   
066A                DECBASE1:      
066A   22 E8 23               LD   (vNumBase),hl   
066D   DD E9                  JP   (ix)   
066F                ERROR1:      
066F   21 01 00               LD   hl,1   ; error 1: unknown command
0672   C3 9D 0F               JP   error   
0675                HEXBASE:      
0675   21 10 00               LD   hl,16   
0678   C3 6A 06               JP   decBase1   
067B                             ; Z80 port input
067B                             ; port -- value
067B                INPUT:       
067B   E1                     POP   hl   
067C   59                     LD   e,c   ; save IP
067D   4D                     LD   c,l   
067E   ED 68                  IN   l,(c)   
0680   26 00                  LD   h,0   
0682   4B                     LD   c,e   ; restore IP
0683   E5                     PUSH   hl   
0684   DD E9                  JP   (ix)   
0686                             ; /k                              6
0686                KEY:         
0686   CD 81 00               CALL   getchar   
0689   26 00                  LD   h,0   
068B   6F                     LD   l,a   
068C   E5                     PUSH   hl   
068D   DD E9                  JP   (ix)   
068F                             ; /o Z80 port output
068F                             ; value port --
068F                OUTPUT:      
068F   E1                     POP   hl   
0690   59                     LD   e,c   ; save IP
0691   4D                     LD   c,l   
0692   E1                     POP   hl   
0693   ED 69                  OUT   (c),l   
0695   4B                     LD   c,e   ; restore IP
0696   DD E9                  JP   (ix)   
0698                             ; /qt
0698                             ; bool --
0698                QUIT:        
0698   E1                     POP   hl   ; hl = condition, exit if true
0699   7D                     LD   a,l   
069A   B4                     OR   h   
069B   20 02                  JR   nz,quit1   
069D   DD E9                  JP   (ix)   
069F                QUIT1:       
069F   C3 43 0B               JP   blockEnd   
06A2                RECUR:       
06A2   E1                     POP   hl   
06A3   22 F2 23               LD   (vRecur),hl   
06A6   DD E9                  JP   (ix)   
06A8                REMAIN:      
06A8   2A FA 23               LD   hl,(vRemain)   
06AB   E5                     PUSH   hl   
06AC   DD E9                  JP   (ix)   
06AE                STRINGBEGIN:      
06AE   21 FF FF               LD   hl,TRUE   ; string mode = true
06B1   22 F6 23               LD   (vStrMode),hl   
06B4   18 27                  JR   stringEnd1   ; save hl in vBufPtr
06B6                STRINGEND:      
06B6   21 00 00               LD   hl,FALSE   ; string mode = false
06B9   22 F6 23               LD   (vStrMode),hl   
06BC   2A EC 23               LD   hl,(vBufPtr)   ; append NUL to string
06BF   AF                     XOR   a   
06C0   77                     LD   (hl),a   
06C1   23                     INC   hl   ; hl = string_end*
06C2   ED 43 04 24            LD   (vTemp1),bc   ; save IP
06C6   11 00 22               LD   de,BUFFER   ; de = string*
06C9   B7                     OR   a   ; bc = size
06CA   ED 52                  SBC   hl,de   
06CC   44 4D                  LD   bc,hl   
06CE   2A F0 23               LD   hl,(vHeapPtr)   ; hl = hstring*
06D1   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
06D2   D5                     PUSH   de   ; return hstring*
06D3   ED B0                  LDIR      ; copy size bytes from string* to hstring*
06D5   ED 53 F0 23            LD   (vHeapPtr),de   ; bump heap to hstring* += size
06D9   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
06DD                STRINGEND1:      
06DD   21 00 22               LD   hl,BUFFER   ; reset vBufPtr
06E0   22 EC 23               LD   (vBufPtr),hl   
06E3   DD E9                  JP   (ix)   
06E5                STRINGLENGTH:      
06E5   D1                     POP   de   
06E6   21 00 00               LD   hl,0   
06E9   18 02                  JR   stringLength2   
06EB                STRINGLENGTH1:      
06EB   13                     INC   de   
06EC   23                     INC   hl   
06ED                STRINGLENGTH2:      
06ED   1A                     LD   a,(de)   
06EE   B7                     OR   a   
06EF   20 FA                  JR   nz,stringLength1   
06F1                STRINGLENGTH3:      
06F1   E5                     PUSH   hl   
06F2   DD E9                  JP   (ix)   
06F4                STRINGSIZE:      
06F4                          ;*Macro unroll:  PERFORM stringLength
06F4   DD 21 FB 06            LD   ix,performM_1654S1236   
06F8   C3 E5 06               JP   stringLength   
06FB                PERFORMM_1654S1236:      
06FB   E1                     POP   hl   
06FC   23                     INC   hl   
06FD   C3 F1 06               JP   stringLength3   
0700                VARBUFPTR:      
0700   ED 5B EC 23            LD   de,(vBufPtr)   
0704   21 EC 23               LD   hl,vBufPtr   
0707   18 12                  JR   variable   
0709                VARHEAPPTR:      
0709   ED 5B F0 23            LD   de,(vHeapPtr)   
070D   21 F0 23               LD   hl,vHeapPtr   
0710   18 09                  JR   variable   
0712                VARTIBPTR:      
0712   ED 5B EA 23            LD   de,(vTIBPtr)   
0716   21 EA 23               LD   hl,vTIBPtr   
0719   18 00                  JR   variable   
071B                VARIABLE:      
071B   22 F8 23               LD   (vPointer),hl   
071E                CONSTANT:      
071E   D5                     PUSH   de   
071F   DD E9                  JP   (ix)   
0721                             ; /wm
0721                WORDMODE:      
0721   21 02 00               LD   hl,2   
0724   C3 47 06               JP   byteMode1   
0727                             ; /x
0727                XOR:         
0727   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0728                XOR1:        
0728   E1                     POP   hl   
0729   7B                     LD   a,e   
072A   AD                     XOR   l   
072B   6F                     LD   l,a   
072C   7A                     LD   a,d   
072D   AC                     XOR   h   
072E   67                     LD   h,a   
072F   E5                     PUSH   hl   
0730   DD E9                  JP   (ix)   
0732                             ;*******************************************************************
0732                             ; Monty implementations
0732                             ;*******************************************************************
0732                             ; /rg rangeSrc
0732                             ; begin end step -- src
0732                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
0732                RANGESRC:      ; range source: begin, end, step, local: L
0732   CD AE 03               CALL   go   
0735   00 00                  DW   NUL   
0737   41 07                  DW   rangeSrcM_1697S1287   
0739   3B 07                  DW   $+2   
073B   01                     DB   1   
073C   04 62 65 73 4C         .PSTR   "besL"   
0741                RANGESRCM_1697S1287:      
0741   7B                     DB   "{"   ; init mutable L [index active inrange_test]
0742   5B 25 62 20 2F 74 20 25 73 30 3E 7B 7B 25 61 25 65 3C 7D 7D 7B 7B 25 61 25 65 3E 7D 7D 3F 3F 5D 20 25 4C 3D 20 DB   "[%b /t %s0>{{%a%e<}}{{%a%e>}}??] %L= "   
0767   5C 6B 74 7B            DB   "\\kt{"   
076B   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0773   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
0779   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0781   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
0789   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
0793   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
079B   25 4C 32 23 5E         DB   "%L2#^"   ; ifte: inrange_test?
07A0   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
07B4   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
07BC   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
07C3   7D                     DB   "}"   
07C4   7D                     DB   "}"   
07C5   00                     DB   0   
07C6                             ; /ai arrayIter
07C6                             ; array* -- src
07C6                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
07C6                ARRAYITER:      
07C6   CD AE 03               CALL   go   
07C9   00 00                  DW   NUL   
07CB   D3 07                  DW   arrayIterM_1716S1307   
07CD   CF 07                  DW   $+2   
07CF   01                     DB   1   
07D0   02 61 4C               .PSTR   "aL"   
07D3                ARRAYITERM_1716S1307:      
07D3   7B                     DB   "{"   
07D4   5B 30 20 2F 74 20 25 61 2F 61 6C 5D 20 25 4C 3D DB   "[0 /t %a/al] %L="   ; init mutable L [index active size]
07E4   5C 6B 74 7B            DB   "\\kt{"   
07E8   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
07F0   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
07F6   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
07FE   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
0806   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
080D   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0815   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
081E   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
0835   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
083D   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0844   7D                     DB   "}"   
0845   7D                     DB   "}"   
0846   00                     DB   0   
0847                             ; /si stringIter
0847                             ; string* -- src
0847                          ;*Macro unroll: FUNC stringIter, 1, "sL"
0847                STRINGITER:      
0847   CD AE 03               CALL   go   
084A   00 00                  DW   NUL   
084C   54 08                  DW   stringIterM_1735S1327   
084E   50 08                  DW   $+2   
0850   01                     DB   1   
0851   02 73 4C               .PSTR   "sL"   
0854                STRINGITERM_1735S1327:      
0854   7B                     DB   "{"   
0855   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
085F   5C 6B 74 7B            DB   "\\kt{"   
0863   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
086B   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
0872   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
087A   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
0882   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
0889   2F 62 6D 20 25 73 25 69 23 20 2F 77 6D 20 25 63 3D DB   "/bm %s%i# /wm %c="   ; read byte at i, store in c as word
089A   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
08A2   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
08A9   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
08BD   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
08C5   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08CC   7D                     DB   "}"   
08CD   7D                     DB   "}"   
08CE   00                     DB   0   
08CF                             ; /mp map
08CF                             ; src func -- src1
08CF                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
08CF                MAP:         ; map: source, function
08CF   CD AE 03               CALL   go   
08D2   00 00                  DW   NUL   
08D4   DC 08                  DW   mapM_1755S1349   
08D6   D8 08                  DW   $+2   
08D8   00                     DB   0   
08D9   02 73 66               .PSTR   "sf"   
08DC                MAPM_1755S1349:      
08DC   7B                     DB   "{"   
08DD   5C 6B 74 7B            DB   "\\kt{"   
08E1   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
08E9   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
08ED   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
08F2   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
08FE   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0907   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
090E   7D                     DB   "}"   
090F   7D                     DB   "}"   
0910   00                     DB   0   
0911                             ; /ft filter
0911                             ; src pred -- src1
0911                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
0911                FILTER:      ; filter: source, predicate, local: T
0911   CD AE 03               CALL   go   
0914   00 00                  DW   NUL   
0916   1F 09                  DW   filterM_1769S1364   
0918   1A 09                  DW   $+2   
091A   01                     DB   1   
091B   03 73 70 54            .PSTR   "spT"   
091F                FILTERM_1769S1364:      
091F   7B                     DB   "{"   
0920   5B 30 5D 25 54 3D      DB   "[0]%T="   
0926   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
092A   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
092E   5B                     DB   "["   
092F   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
093C   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
0944   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
0948   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
094D   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
0963   3F 3F                  DB   "??"   
0965   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
096C   7D                     DB   "}"   
096D   7D                     DB   "}"   
096E   00                     DB   0   
096F                             ; /fd fold
096F                             ; reducer is a function like: \\da00bbLi4u
096F                             ; src init reducer -- src1
096F                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
096F                FOLD:        ; src, init, reducer
096F   CD AE 03               CALL   go   
0972   00 00                  DW   NUL   
0974   7E 09                  DW   foldM_1788S1384   
0976   78 09                  DW   $+2   
0978   01                     DB   1   
0979   04 73 69 72 41         .PSTR   "sirA"   
097E                FOLDM_1788S1384:      
097E   7B                     DB   "{"   ; reducer: \\da00bbLi4u
097F   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
0986   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
098A   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
098E   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0993   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
09AE   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
09B7   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09BE   7D                     DB   "}"   
09BF   7D                     DB   "}"   
09C0   00                     DB   0   
09C1                             ; /fe forEach
09C1                             ; src proc --
09C1                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
09C1                FOREACH:      ; forEach: source, procedure, local: T
09C1   CD AE 03               CALL   go   
09C4   00 00                  DW   NUL   
09C6   CF 09                  DW   forEachM_1802S1399   
09C8   CA 09                  DW   $+2   
09CA   01                     DB   1   
09CB   03 73 70 54            .PSTR   "spT"   
09CF                FOREACHM_1802S1399:      
09CF   7B                     DB   "{"   
09D0   5B 30 5D 25 54 3D      DB   "[0]%T="   
09D6   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
09DA   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
09E2   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
09E7   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
09F9   3F 3F                  DB   "??"   ; ifte:
09FB   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0A04   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A0B   7D                     DB   "}"   
0A0C   00                     DB   0   
0A0D                             ; ; /fs funcSrc
0A0D                             ; ; func -- src
0A0D                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0A0D                FUNCSRC:      ; :f func or block
0A0D   CD AE 03               CALL   go   
0A10   00 00                  DW   NUL   
0A12   19 0A                  DW   funcSrcM_1816S1414   
0A14   16 0A                  DW   $+2   
0A16   00                     DB   0   
0A17   01 66                  .PSTR   "f"   
0A19                FUNCSRCM_1816S1414:      
0A19   7B                     DB   "{"   
0A1A   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0A1E   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0A26   5C 64 74 7B            DB   "\\dt{"   
0A2A   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0A3C   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0A43   7D                     DB   "}"   
0A44   7D                     DB   "}"   
0A45   00                     DB   0   
0A46                          ;*Macro unroll: FUNC printArray, 2, "abc"
0A46                PRINTARRAY:      
0A46   CD AE 03               CALL   go   
0A49   00 00                  DW   NUL   
0A4B   54 0A                  DW   printArrayM_1826S1425   
0A4D   4F 0A                  DW   $+2   
0A4F   02                     DB   2   
0A50   03 61 62 63            .PSTR   "abc"   
0A54                PRINTARRAYM_1826S1425:      
0A54   7B                     DB   "{"   
0A55   27 5B 20 27 2E 73 20 25 61 2F 61 6C 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/al%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0A8C   7D                     DB   "}"   
0A8D   00                     DB   0   
0A8E                             ;*******************************************************************
0A8E                             ; implementations continued
0A8E                             ;*******************************************************************
0A8E                             ; $ hex                         ; 22
0A8E                DOLLAR:      
0A8E                HEXNUM:      
0A8E   21 00 00               LD   hl,0   ; Clear hl to accept the number
0A91                HEXNUM1:      
0A91   03                     INC   bc   
0A92   0A                     LD   a,(bc)   ; Get the character which is a numeral
0A93   CB 77                  BIT   6,a   ; is it uppercase alpha?
0A95   28 02                  JR   z,hexnum2   ; no a decimal
0A97   D6 07                  SUB   7   ; sub 7  to make $a - $F
0A99                HEXNUM2:      
0A99   D6 30                  SUB   $30   ; form decimal digit
0A9B   DA 35 0B               JP   c,num2   
0A9E   FE 10                  CP   $0F+1   
0AA0   D2 35 0B               JP   nc,num2   
0AA3   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0AA4   29                     ADD   hl,hl   ; 4X
0AA5   29                     ADD   hl,hl   ; 8X
0AA6   29                     ADD   hl,hl   ; 16X
0AA7   85                     ADD   a,l   ; add into bottom of hl
0AA8   6F                     LD   l,a   
0AA9   18 E6                  JR   hexnum1   
0AAB                             ; ? if                            23
0AAB                             ; condition then -- value
0AAB                QUESTION:      
0AAB                IF:          
0AAB   03                     INC   bc   
0AAC   0A                     LD   a,(bc)   
0AAD   FE 3F                  CP   "?"   
0AAF   28 06                  JR   z,ifte   
0AB1   0B                     DEC   bc   
0AB2   11 00 00               LD   de,NUL   ; NUL pointer for else
0AB5   18 01                  JR   ifte1   
0AB7                             ; ?? ifte
0AB7                             ; condition then else -- value
0AB7                IFTE:        
0AB7   D1                     POP   de   ; de = else
0AB8                IFTE1:       
0AB8   E1                     POP   hl   ; hl = then
0AB9   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0ABA   7C                     LD   a,h   
0ABB   B5                     OR   l   
0ABC   E1                     POP   hl   ; hl = then
0ABD   CA AF 03               JP   z,go1   ; if z de = else
0AC0   EB                     EX   de,hl   ; condition = false, de = then
0AC1   C3 AF 03               JP   go1   
0AC4                             ; string                        ;38
0AC4                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0AC4                QUOTE:       
0AC4                STRING:      
0AC4   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0AC7   E5                     PUSH   hl   ; save start of string
0AC8   0A                     LD   a,(bc)   
0AC9   5F                     LD   e,a   ; e = matching terminator
0ACA   03                     INC   bc   ; point to next char
0ACB   18 03                  JR   string2   
0ACD                STRING1:      
0ACD   77                     LD   (hl),a   
0ACE   23                     INC   hl   ; increase count
0ACF   03                     INC   bc   ; point to next char
0AD0                STRING2:      
0AD0   0A                     LD   a,(bc)   
0AD1   BB                     CP   e   ; is it the string terminator
0AD2   28 02                  JR   z,string3   
0AD4   18 F7                  JR   string1   
0AD6                STRING3:      
0AD6   AF                     XOR   a   ; write NUL to terminate string
0AD7   77                     LD   (hl),a   ; hl = end of string
0AD8   23                     INC   hl   
0AD9   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0ADC   DD E9                  JP   (ix)   
0ADE                             ; %a .. %z                      43
0ADE                             ; -- value
0ADE                             ; returns value of arg
0ADE                PERCENT:      
0ADE                ARG:         
0ADE   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0AE1   FD 56 05               LD   d,(iy+5)   
0AE4   EB                     EX   de,hl   
0AE5   7D                     LD   a,l   ; arg_list* == null, skip
0AE6   B4                     OR   h   
0AE7   28 1A                  JR   z,arg0a   
0AE9   23                     INC   hl   ; a = num_args, hl = arg_list*
0AEA   7E                     LD   a,(hl)   
0AEB   23                     INC   hl   
0AEC   B7                     OR   a   
0AED   28 14                  JR   z,arg0a   ; num_args == 0, skip
0AEF   5F                     LD   e,a   ; e = a = num_args
0AF0   03                     INC   bc   ; a = next char = dollar_name
0AF1   0A                     LD   a,(bc)   
0AF2   C5                     PUSH   bc   ; save IP
0AF3   43                     LD   b,e   ; b = e = num_args
0AF4   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0AF7   FD 56 03               LD   d,(iy+3)   
0AFA                ARG0:        
0AFA   1B                     DEC   de   ; a = dollar_name, de = next arg*
0AFB   1B                     DEC   de   
0AFC   BE                     CP   (hl)   
0AFD   28 09                  JR   z,arg1   
0AFF   23                     INC   hl   ; hl = next arg_list*
0B00   10 F8                  DJNZ   arg0   
0B02   C1                     POP   bc   ; no match, restore IP
0B03                ARG0A:       
0B03   11 00 00               LD   de,0   ; return 0
0B06   18 08                  JR   arg1a   
0B08                ARG1:        
0B08   C1                     POP   bc   ; restore IP
0B09   EB                     EX   de,hl   ; hl = arg*
0B0A   22 F8 23               LD   (vPointer),hl   ; store arg* in setter
0B0D   5E                     LD   e,(hl)   
0B0E   23                     INC   hl   
0B0F   56                     LD   d,(hl)   ; de = arg
0B10                ARG1A:       
0B10   D5                     PUSH   de   ; push arg
0B11   DD E9                  JP   (ix)   
0B13                             ; 0..9 number                   37
0B13                NUM:         
0B13   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B16   0A                     LD   a,(bc)   ; Get numeral or -
0B17   FE 2D                  CP   "-"   
0B19   20 01                  JR   nz,num0   
0B1B   03                     INC   bc   ; move to next char, no flags affected
0B1C                NUM0:        
0B1C   08                     EX   af,af'   ; save zero flag = 0 for later
0B1D                NUM1:        
0B1D   0A                     LD   a,(bc)   ; read digit
0B1E   D6 30                  SUB   "0"   ; less than 0?
0B20   38 13                  JR   c,num2   ; not a digit, exit loop
0B22   FE 0A                  CP   10   ; greater that 9?
0B24   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B26   03                     INC   bc   ; inc IP
0B27   54 5D                  LD   de,hl   ; multiply hl * 10
0B29   29                     ADD   hl,hl   
0B2A   29                     ADD   hl,hl   
0B2B   19                     ADD   hl,de   
0B2C   29                     ADD   hl,hl   
0B2D   85                     ADD   a,l   ; add digit in a to hl
0B2E   6F                     LD   l,a   
0B2F   3E 00                  LD   a,0   
0B31   8C                     ADC   a,h   
0B32   67                     LD   h,a   
0B33   18 E8                  JR   num1   
0B35                NUM2:        
0B35   0B                     DEC   bc   
0B36   08                     EX   af,af'   ; restore zero flag
0B37   20 07                  JR   nz,num3   
0B39   EB                     EX   de,hl   ; negate the value of hl
0B3A   21 00 00               LD   hl,0   
0B3D   B7                     OR   a   ; jump to sub2
0B3E   ED 52                  SBC   hl,de   
0B40                NUM3:        
0B40   E5                     PUSH   hl   ; Put the number on the stack
0B41   DD E9                  JP   (ix)   ; and process the next character
0B43                             ; }                               58
0B43                RBRACE:      
0B43                BLOCKEND:      
0B43   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0B46   FD 56 01               LD   d,(iy+1)   
0B49   ED 53 04 24            LD   (vTemp1),de   
0B4D   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0B50   FD 56 07               LD   d,(iy+7)   
0B53   ED 53 06 24            LD   (vTemp2),de   
0B57   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0B5A   FD 56 03               LD   d,(iy+3)   
0B5D   EB                     EX   de,hl   
0B5E   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0B61   FD 56 01               LD   d,(iy+1)   
0B64   13                     INC   de   ; for carry flag <=
0B65   B7                     OR   a   
0B66   ED 52                  SBC   hl,de   
0B68   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0B6A   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0B6C   FD 5D                  LD   e,iyl   
0B6E   21 08 00               LD   hl,8   
0B71   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0B72   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0B73   18 0C                  JR   blockEnd2   
0B75                BLOCKEND1:      ; same scope
0B75   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0B78   FD 56 03               LD   d,(iy+3)   
0B7B   EB                     EX   de,hl   
0B7C   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0B7E   FD 5D                  LD   e,iyl   
0B80   EB                     EX   de,hl   
0B81                BLOCKEND2:      
0B81   44 4D                  LD   bc,hl   ; bc = hl = BP
0B83   B7                     OR   a   ; hl = BP - SP = count
0B84   ED 72                  SBC   hl,sp   
0B86   7D                     LD   a,l   
0B87   B4                     OR   h   
0B88   28 09                  JR   z,blockEnd3   
0B8A   C5                     PUSH   bc   ; bc = count, hl = BP
0B8B   44 4D                  LD   bc,hl   
0B8D   E1                     POP   hl   
0B8E   2B                     DEC   hl   ; hl = BP-1
0B8F   1B                     DEC   de   ; de = args*-1
0B90   ED B8                  LDDR      
0B92   13                     INC   de   
0B93                BLOCKEND3:      
0B93   EB                     EX   de,hl   ; sp = de = new tos*
0B94   F9                     LD   sp,hl   
0B95   ED 4B 06 24            LD   bc,(vTemp2)   
0B99   FD 2A 04 24            LD   iy,(vTemp1)   
0B9D   ED 5B F2 23            LD   de,(vRecur)   ; de = recur vector
0BA1   7B                     LD   a,e   ; check for NUL
0BA2   B2                     OR   d   
0BA3   20 02                  JR   nz,blockEnd4   
0BA5   DD E9                  JP   (ix)   
0BA7                BLOCKEND4:      
0BA7   21 00 00               LD   hl,0   ; clear recur vector
0BAA   22 F2 23               LD   (vRecur),hl   
0BAD   C3 AF 03               JP   go1   ; execute de
0BB0                GOBLOCK:      
0BB0   ED 53 04 24            LD   (vTemp1),de   ; save de
0BB4   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0BB7   FD 54                  LD   d,iyh   
0BB9   FD 5D                  LD   e,iyl   
0BBB   B7                     OR   a   ; if stack* == BP then this is the root_scope
0BBC   ED 52                  SBC   hl,de   
0BBE   ED 5B 04 24            LD   de,(vTemp1)   ; restore de
0BC2   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0BC3   B4                     OR   h   
0BC4   3E 00                  LD   a,0   
0BC6   28 6A                  JR   z,goFunc8   
0BC8   C5                     PUSH   bc   ; push IP
0BC9   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0BCC   FD 46 05               LD   b,(iy+5)   
0BCF   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0BD2   FD 66 03               LD   h,(iy+3)   
0BD5                GOBLOCK2:      
0BD5   C5                     PUSH   bc   ; arg_list*
0BD6   E5                     PUSH   hl   ; first_arg*
0BD7   FD E5                  PUSH   iy   ; push BP
0BD9   FD 21 00 00            LD   iy,0   ; BP = SP
0BDD   FD 39                  ADD   iy,sp   
0BDF                GOBLOCK3:      
0BDF   42 4B                  LD   bc,de   ; bc = de = block*-1
0BE1   DD E9                  JP   (ix)   
0BE3                GOFUNC:      ; execute func
0BE3   EB                     EX   de,hl   ; hl = func*
0BE4   5E                     LD   e,(hl)   ; de = partial_array*
0BE5   23                     INC   hl   
0BE6   56                     LD   d,(hl)   
0BE7   23                     INC   hl   
0BE8   7B                     LD   a,e   ; if partial_array* == null skip
0BE9   B2                     OR   d   
0BEA   28 21                  JR   z,goFunc3   
0BEC   ED 43 04 24            LD   (vTemp1),bc   
0BF0   22 06 24               LD   (vTemp2),hl   ; save bc,hl
0BF3   EB                     EX   de,hl   ; hl = partial_array*
0BF4   2B                     DEC   hl   ; bc = count
0BF5   46                     LD   b,(hl)   
0BF6   2B                     DEC   hl   
0BF7   4E                     LD   c,(hl)   
0BF8   23                     INC   hl   ; hl = array data*
0BF9   23                     INC   hl   
0BFA   18 06                  JR   goFunc2   ; push each item on stack
0BFC                GOFUNC1:      
0BFC   5E                     LD   e,(hl)   ; de = partial item
0BFD   23                     INC   hl   
0BFE   56                     LD   d,(hl)   
0BFF   23                     INC   hl   
0C00   D5                     PUSH   de   ; push on stack
0C01   0B                     DEC   bc   
0C02                GOFUNC2:      
0C02   79                     LD   a,c   ; if count != 0 then loop
0C03   B0                     OR   b   
0C04   20 F6                  JR   nz,goFunc1   
0C06   ED 4B 04 24            LD   bc,(vTemp1)   ; restore bc
0C0A   2A 06 24               LD   hl,(vTemp2)   ; restore hl
0C0D                GOFUNC3:      
0C0D   5E                     LD   e,(hl)   ; de = block*
0C0E   23                     INC   hl   
0C0F   56                     LD   d,(hl)   
0C10   23                     INC   hl   
0C11   ED 53 04 24            LD   (vTemp1),de   ; save block*
0C15   5E                     LD   e,(hl)   ; de = arg_list*
0C16   23                     INC   hl   
0C17   56                     LD   d,(hl)   
0C18   23                     INC   hl   
0C19   EB                     EX   de,hl   ; hl = arg_list*
0C1A   ED 5B 04 24            LD   de,(vTemp1)   ; restore de = block*
0C1E   7D                     LD   a,l   ; if arg_list* == null a = 0
0C1F   B4                     OR   h   
0C20   20 03                  JR   nz,goFunc4   
0C22   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0C23   18 0D                  JR   goFunc8   
0C25                GOFUNC4:      ; allocate locals
0C25   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0C26   18 03                  JR   goFunc6   
0C28                GOFUNC5:      ; loop
0C28   3B                     DEC   sp   
0C29   3B                     DEC   sp   
0C2A   3D                     DEC   a   
0C2B                GOFUNC6:      
0C2B   B7                     OR   a   
0C2C   20 FA                  JR   nz,goFunc5   ; end loop
0C2E                GOFUNC7:      
0C2E   23                     INC   hl   ; a = num_args* x 2
0C2F   7E                     LD   a,(hl)   
0C30   2B                     DEC   hl   
0C31   87                     ADD   a,a   ; a *= 2
0C32                GOFUNC8:      
0C32   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0C33   44 4D                  LD   bc,hl   
0C35   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0C38   85                     ADD   a,l   
0C39   6F                     LD   l,a   
0C3A   39                     ADD   hl,sp   
0C3B   18 98                  JR   goBlock2   
0C3D                             ; =                              21
0C3D                             ; value _oldValue --            ; uses address in vPointer 15
0C3D                ASSIGN:      
0C3D   E1                     POP   hl   ; discard last accessed value
0C3E   E1                     POP   hl   ; hl = new value
0C3F                ASSIGN0:      
0C3F   EB                     EX   de,hl   ; de = new value
0C40   2A F8 23               LD   hl,(vPointer)   
0C43                ASSIGN1:      ; entry point from defineEnd
0C43   73                     LD   (hl),e   
0C44   3A E6 23               LD   a,(vDataWidth)   
0C47   3D                     DEC   a   ; is it byte?
0C48   28 02                  JR   z,assign2   
0C4A   23                     INC   hl   
0C4B   72                     LD   (hl),d   
0C4C                ASSIGN2:      
0C4C   DD E9                  JP   (ix)   
0C4E                             ; hl = value1, de = value2
0C4E                             ; hl = result
0C4E                EQUALS:      
0C4E   B7                     OR   a   ; reset the carry flag
0C4F   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0C51   28 16                  JR   z,true1   
0C53   18 1A                  JR   false1   
0C55                NOTEQUALS:      
0C55   B7                     OR   a   ; reset the carry flag
0C56   ED 52                  SBC   hl,de   
0C58   20 0F                  JR   nz,true1   
0C5A   18 13                  JR   false1   
0C5C                             ; hl = value1 de = value2
0C5C                             ; hl = result
0C5C                LESSTHANEQ:      
0C5C   B7                     OR   a   
0C5D   ED 52                  SBC   hl,de   
0C5F   18 05                  JR   lessthan1   
0C61                             ; hl = value1 de = value2
0C61                             ; hl = result
0C61                LESSTHAN:      
0C61   B7                     OR   a   
0C62   ED 52                  SBC   hl,de   
0C64   28 09                  JR   z,false1   
0C66                LESSTHAN1:      
0C66   FA 6F 0C               JP   m,false1   
0C69                TRUE1:       
0C69   21 FF FF               LD   hl,TRUE   
0C6C   E5                     PUSH   hl   
0C6D   DD E9                  JP   (ix)   
0C6F                NULL1:       
0C6F                FALSE1:      
0C6F   21 00 00               LD   hl,FALSE   
0C72   E5                     PUSH   hl   
0C73   DD E9                  JP   (ix)   
0C75                             ; shiftLeft                     15
0C75                             ; value count -- value2          shift left count places
0C75                SHIFTLEFT:      
0C75   50 59                  LD   de,bc   ; save IP
0C77   C1                     POP   bc   ; bc = count
0C78   41                     LD   b,c   ; b = loop counter
0C79   E1                     POP   hl   
0C7A   04                     INC   b   ; test for counter=0 case
0C7B   18 01                  JR   shiftLeft2   
0C7D                SHIFTLEFT1:      
0C7D   29                     ADD   hl,hl   ; left shift hl
0C7E                SHIFTLEFT2:      
0C7E   10 FD                  DJNZ   shiftLeft1   
0C80   E5                     PUSH   hl   
0C81   42 4B                  LD   bc,de   ; restore IP
0C83   DD E9                  JP   (ix)   
0C85                             ; shiftRight                    16
0C85                             ; value count -- value2          shift left count places
0C85                SHIFTRIGHT:      
0C85   50 59                  LD   de,bc   ; save IP
0C87   C1                     POP   bc   ; bc = count
0C88   41                     LD   b,c   ; b = loop counter
0C89   E1                     POP   hl   
0C8A   04                     INC   b   ; test for counter=0 case
0C8B   18 04                  JR   shiftRight2   
0C8D                SHIFTRIGHT1:      
0C8D   CB 3C                  SRL   h   ; right shift hl
0C8F   CB 1D                  RR   l   
0C91                SHIFTRIGHT2:      
0C91   10 FA                  DJNZ   shiftRight1   
0C93   E5                     PUSH   hl   
0C94   42 4B                  LD   bc,de   ; restore IP
0C96   DD E9                  JP   (ix)   
0C98                             ; division subroutine.
0C98                             ; bc: divisor, de: dividend, hl: remainder
0C98                DIVIDE:      
0C98   21 00 00               LD   hl,0   ; zero the remainder
0C9B   3E 10                  LD   a,16   ; loop counter
0C9D                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0C9D   CB 21                  SLA   c   
0C9F   CB 10                  RL   b   
0CA1   ED 6A                  ADC   hl,hl   
0CA3   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0CA5   38 03                  JR   c,divide2   
0CA7   0C                     INC   c   
0CA8   18 01                  JR   divide3   
0CAA                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0CAA   19                     ADD   hl,de   
0CAB                DIVIDE3:      
0CAB   3D                     DEC   a   
0CAC   20 EF                  JR   nz,divide1   
0CAE   50 59                  LD   de,bc   ; result from bc to de
0CB0   C9                     RET      
0CB1                DOTNEXT:      
0CB1   3A F6 23               LD   a,(vStrMode)   ; if string mode then exit
0CB4   3C                     INC   a   
0CB5   20 02                  JR   nz,dotNext1   
0CB7   DD E9                  JP   (ix)   
0CB9                DOTNEXT1:      
0CB9   11 00 22               LD   de,BUFFER   
0CBC   2A EC 23               LD   hl,(vBufPtr)   
0CBF   B7                     OR   a   ; hl = count, de = vHeapPtr
0CC0   ED 52                  SBC   hl,de   
0CC2   C3 CB 0C               JP   dotNext3   
0CC5                DOTNEXT2:      
0CC5   1A                     LD   a,(de)   ; print char at char*
0CC6   CD 85 00               CALL   putchar   
0CC9   13                     INC   de   ; char*++
0CCA   2B                     DEC   hl   ; count--
0CCB                DOTNEXT3:      
0CCB   7D                     LD   a,l   ; count == 0?
0CCC   B4                     OR   h   
0CCD   20 F6                  JR   nz,dotNext2   ; if not loop
0CCF   21 00 22               LD   hl,BUFFER   ; reset vBufPtr to vHeapPtr
0CD2   22 EC 23               LD   (vBufPtr),hl   
0CD5   DD E9                  JP   (ix)   
0CD7                             ; arg_list - parses arg_list e.g. ab:c
0CD7                             ; -- arg_list*
0CD7                PARSEARGS:      
0CD7   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0CDA   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0CDD   E5                     PUSH   hl   ; save start of arg_list
0CDE   23                     INC   hl   ; skip length fields to start of string
0CDF   23                     INC   hl   
0CE0   03                     INC   bc   ; point to next char
0CE1                PARSEARGS1:      
0CE1   0A                     LD   a,(bc)   
0CE2   FE 3A                  CP   ":"   ; ":" switches from args to locals
0CE4   20 03                  JR   nz,parseArgs1a   
0CE6   14                     INC   d   ; non zero value local count acts as flag
0CE7   18 10                  JR   parseArgs3   
0CE9                PARSEARGS1A:      
0CE9   FE 61                  CP   "a"   ; < "a" terminates arg_list
0CEB   38 0F                  JR   c,parseArgs4   
0CED   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0CEF   30 0B                  JR   nc,parseArgs4   
0CF1                PARSEARGS2:      
0CF1   77                     LD   (hl),a   
0CF2   23                     INC   hl   
0CF3   1C                     INC   e   ; increase arg count
0CF4   AF                     XOR   a   
0CF5   B2                     OR   d   
0CF6   28 01                  JR   z,parseArgs3   
0CF8   14                     INC   d   ; if d > 0 increase local count
0CF9                PARSEARGS3:      
0CF9   03                     INC   bc   ; point to next char
0CFA   18 E5                  JR   parseArgs1   
0CFC                PARSEARGS4:      
0CFC   0B                     DEC   bc   
0CFD   AF                     XOR   a   
0CFE   B2                     OR   d   
0CFF   28 01                  JR   z,parseArgs5   
0D01   15                     DEC   d   ; remove initial inc
0D02                PARSEARGS5:      
0D02   23                     INC   hl   
0D03   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0D06   E1                     POP   hl   ; hl = start of arg_list
0D07   72                     LD   (hl),d   ; write number of locals at start - 1
0D08   23                     INC   hl   
0D09   73                     LD   (hl),e   ; write number of args + locals at start - 2
0D0A   2B                     DEC   hl   
0D0B   E3                     EX   (sp),hl   
0D0C   E9                     JP   (hl)   
0D0D                             ; create block: parses block e.g. 00bbIC4uLi4g
0D0D                             ; -- block*
0D0D                PARSEBLOCK:      
0D0D   C5                     PUSH   bc   ; return pointer to first { of block
0D0E   03                     INC   bc   
0D0F   16 01                  LD   d,1   ; nesting: count first parenthesis
0D11                PARSEBLOCK1:      ; Skip to end of definition
0D11   0A                     LD   a,(bc)   ; Get the next character
0D12   03                     INC   bc   ; Point to next character
0D13   FE 21                  CP   " " + 1   ; ignore whitespace
0D15   38 FA                  JR   c,parseBlock1   
0D17   FE 29                  CP   ")"   
0D19   28 2D                  JR   z,parseBlock4   
0D1B   FE 7D                  CP   "}"   
0D1D   28 29                  JR   z,parseBlock4   
0D1F   FE 5D                  CP   "]"   
0D21   28 25                  JR   z,parseBlock4   
0D23   FE 28                  CP   "("   
0D25   28 16                  JR   z,parseBlock2   
0D27   FE 7B                  CP   "{"   
0D29   28 12                  JR   z,parseBlock2   
0D2B   FE 5B                  CP   "["   
0D2D   28 0E                  JR   z,parseBlock2   
0D2F   FE 27                  CP   "'"   
0D31   28 0D                  JR   z,parseBlock3   
0D33   FE 60                  CP   "`"   
0D35   28 09                  JR   z,parseBlock3   
0D37   FE 22                  CP   DQ   
0D39   28 05                  JR   z,parseBlock3   
0D3B   18 D4                  JR   parseBlock1   
0D3D                PARSEBLOCK2:      
0D3D   14                     INC   d   
0D3E   18 D1                  JR   parseBlock1   
0D40                PARSEBLOCK3:      
0D40   3E 80                  LD   a,$80   
0D42   AA                     XOR   d   
0D43   57                     LD   d,a   
0D44   20 CB                  JR   nz,parseBlock1   
0D46   18 03                  JR   parseBlock5   
0D48                PARSEBLOCK4:      
0D48   15                     DEC   d   
0D49   20 C6                  JR   nz,parseBlock1   ; get the next element
0D4B                PARSEBLOCK5:      
0D4B   60 69                  LD   hl,bc   ; hl = IP
0D4D   11 22 24               LD   de,HEAP   ; is IP pointing to object in heap
0D50   B7                     OR   a   ; IP - HEAP
0D51   ED 52                  SBC   hl,de   
0D53   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0D55   28 1C                  JR   z,parseBlock6   
0D57   60 69                  LD   hl,bc   ; hl = IP
0D59   D1                     POP   de   ; de = block*
0D5A   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0D5E   B7                     OR   a   ; bc = size
0D5F   ED 52                  SBC   hl,de   
0D61   44 4D                  LD   bc,hl   
0D63   EB                     EX   de,hl   ; hl = block* de = heap*
0D64   ED 5B F0 23            LD   de,(vHeapPtr)   
0D68   D5                     PUSH   de   ; return hblock*
0D69   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0D6B   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += size
0D6F   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0D73                PARSEBLOCK6:      
0D73   0B                     DEC   bc   ; balanced, exit
0D74   E1                     POP   hl   ; hl = block*
0D75   E3                     EX   (sp),hl   ; return to caller
0D76   E9                     JP   (hl)   
0D77                             ; create function
0D77                             ; arg_list* block* -- func*
0D77                CREATEFUNC:      
0D77   E1                     POP   hl   ; save retrn address
0D78   22 08 24               LD   (vTemp3),hl   
0D7B   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0D7F   E1                     POP   hl   ; hl = block*
0D80   22 06 24               LD   (vTemp2),hl   ; save block*
0D83   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0D86   FD 56 05               LD   d,(iy+5)   
0D89   7B                     LD   a,e   ; if arg_list == null then make a func
0D8A   B2                     OR   d   
0D8B   20 09                  JR   nz,createFunc0   
0D8D   21 00 00               LD   hl,0   ; partial_array = null
0D90   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0D94   18 65                  JR   createFunc5   
0D96                CREATEFUNC0:      
0D96   E1                     POP   hl   ; hl = inner_arg_list*
0D97   E5                     PUSH   hl   ; save inner_arg_list
0D98   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0D9C   7E                     LD   a,(hl)   ; compile inner_num_locals
0D9D   4F                     LD   c,a   ; b = inner_num_locals
0D9E   12                     LD   (de),a   
0D9F   23                     INC   hl   
0DA0   13                     INC   de   
0DA1   7E                     LD   a,(hl)   ; compile inner_length
0DA2   12                     LD   (de),a   
0DA3   91                     SUB   c   ; a = inner_num args
0DA4   23                     INC   hl   
0DA5   13                     INC   de   
0DA6   B7                     OR   a   ; compile args if inner_length > 0
0DA7   28 05                  JR   z,createFunc1   
0DA9   4F                     LD   c,a   ; bc = a
0DAA   06 00                  LD   b,0   
0DAC   ED B0                  LDIR      
0DAE                CREATEFUNC1:      
0DAE   EB                     EX   de,hl   ; hl = outer_arg_list
0DAF   FD 5E 04               LD   e,(iy+4)   
0DB2   FD 56 05               LD   d,(iy+5)   
0DB5   EB                     EX   de,hl   
0DB6   23                     INC   hl   ; a = outer_length
0DB7   7E                     LD   a,(hl)   
0DB8   23                     INC   hl   
0DB9   B7                     OR   a   
0DBA   28 05                  JR   z,createFunc2   
0DBC   4F                     LD   c,a   
0DBD   06 00                  LD   b,0   
0DBF   ED B0                  LDIR      ; append outer_args
0DC1                CREATEFUNC2:      ; a = outer_length
0DC1   47                     LD   b,a   ; b = a = outer_length
0DC2   2A F0 23               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0DC5   23                     INC   hl   
0DC6   7E                     LD   a,(hl)   ; add outer_length to new length
0DC7   80                     ADD   a,b   
0DC8   77                     LD   (hl),a   
0DC9   2B                     DEC   hl   
0DCA   78                     LD   a,b   ; save outer_length in a'
0DCB   08                     EX   af,af'   
0DCC   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0DCD   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0DCE   B7                     OR   a   
0DCF   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0DD1   4F                     LD   c,a   ; c = inner_num_locals
0DD2   06 00                  LD   b,0   ; bc = inner_num_locals
0DD4   23                     INC   hl   ; a = inner_length
0DD5   7E                     LD   a,(hl)   
0DD6   91                     SUB   c   ; a = inner_num_args
0DD7   23                     INC   hl   ; hl = inner_arg_chars
0DD8   85                     ADD   a,l   ; hl += a
0DD9   6F                     LD   l,a   
0DDA   3E 00                  LD   a,0   
0DDC   84                     ADD   a,h   
0DDD   67                     LD   h,a   
0DDE   ED B0                  LDIR      ; append inner_locals
0DE0                CREATEFUNC2A:      
0DE0   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0DE1   12                     LD   (de),a   ; compile partial_array length field
0DE2   13                     INC   de   
0DE3   AF                     XOR   a   
0DE4   12                     LD   (de),a   
0DE5   13                     INC   de   
0DE6   D5                     PUSH   de   ; push partial_array*
0DE7   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0DE8   FD 5E 02               LD   e,(iy+2)   
0DEB   FD 56 03               LD   d,(iy+3)   
0DEE   EB                     EX   de,hl   
0DEF                CREATEFUNC3:      
0DEF   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0DF0   4E                     LD   c,(hl)   
0DF1   2B                     DEC   hl   
0DF2   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0DF3   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0DF4   13                     INC   de   
0DF5   79                     LD   a,c   
0DF6   12                     LD   (de),a   
0DF7   13                     INC   de   
0DF8   10 F5                  DJNZ   createFunc3   ; b = outer_length
0DFA                CREATEFUNC4:      
0DFA   E1                     POP   hl   ; hl = partial_array*
0DFB                CREATEFUNC5:      
0DFB   C1                     POP   bc   ; bc = new_arg_list*
0DFC   D5                     PUSH   de   ; return new func*
0DFD   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0DFE   73                     LD   (hl),e   ; compile partial_array* to func
0DFF   23                     INC   hl   
0E00   72                     LD   (hl),d   
0E01   23                     INC   hl   
0E02   ED 5B 06 24            LD   de,(vTemp2)   ; de = block*
0E06   73                     LD   (hl),e   ; compile block* to func
0E07   23                     INC   hl   
0E08   72                     LD   (hl),d   
0E09   23                     INC   hl   
0E0A   71                     LD   (hl),c   ; compile new_arg_list* to func
0E0B   23                     INC   hl   
0E0C   70                     LD   (hl),b   
0E0D   23                     INC   hl   
0E0E   22 F0 23               LD   (vHeapPtr),hl   ; bump heap ptr
0E11   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0E15   2A 08 24               LD   hl,(vTemp3)   ; jump to return address
0E18   E9                     JP   (hl)   
0E19                             ;*******************************************************************
0E19                             ; general routines
0E19                             ;*******************************************************************
0E19                             ; followed by a table
0E19                             ; indexed on the 0-25 lowercase letter
0E19                             ; db lsb(addr)
0E19                             ; the final item index 26 matches any other char
0E19                COMMANDTABLE:      
0E19   03                     INC   bc   
0E1A   0A                     LD   a,(bc)   
0E1B   FE 7B                  CP   "z"+1   
0E1D   30 0B                  JR   nc,commandTable2   
0E1F   D6 61                  SUB   "a"   
0E21   38 07                  JR   c,commandTable2   
0E23                COMMANDTABLE1:      
0E23   E1                     POP   hl   
0E24   85                     ADD   a,l   
0E25   6F                     LD   l,a   
0E26   6E                     LD   l,(hl)   ; must have the same msb as the table
0E27   C3 30 0E               JP   jumpTable1   
0E2A                COMMANDTABLE2:      
0E2A   3E 1A                  LD   a,26   
0E2C   0B                     DEC   bc   
0E2D   18 F4                  JR   commandTable1   
0E2F                             ; followed by a table
0E2F                             ; db char
0E2F                             ; dw addr
0E2F                             ; the final item must have char == NUL
0E2F                JUMPTABLE:      
0E2F   E1                     POP   hl   
0E30                JUMPTABLE1:      
0E30   03                     INC   bc   
0E31                JUMPTABLE2:      
0E31   AF                     XOR   a   
0E32   BE                     CP   (hl)   
0E33   20 03                  JR   nz,jumpTable3   
0E35   0B                     DEC   bc   
0E36   18 09                  JR   jumpTable4   
0E38                JUMPTABLE3:      
0E38   0A                     LD   a,(bc)   
0E39   BE                     CP   (hl)   
0E3A   28 05                  JR   z,jumpTable4   
0E3C   23                     INC   hl   
0E3D   23                     INC   hl   
0E3E   23                     INC   hl   
0E3F   18 F0                  JR   jumpTable2   
0E41                JUMPTABLE4:      
0E41   23                     INC   hl   
0E42   5E                     LD   e,(hl)   
0E43   23                     INC   hl   
0E44   56                     LD   d,(hl)   
0E45   EB                     EX   de,hl   
0E46   E9                     JP   (hl)   
0E47                PRTSTR0:      
0E47   CD 85 00               CALL   putchar   
0E4A   23                     INC   hl   
0E4B                PRTSTR:      
0E4B   7E                     LD   a,(hl)   
0E4C   B7                     OR   a   
0E4D   20 F8                  JR   nz,prtstr0   
0E4F   C9                     RET      
0E50                             ; **************************************************************************
0E50                             ; calculate nesting value
0E50                             ; a is char to be tested,
0E50                             ; e is the nesting value (initially 0)
0E50                             ; e is increased by ( and [
0E50                             ; e is decreased by ) and ]
0E50                             ; e has its bit 7 toggled by `
0E50                             ; limited to 127 levels
0E50                             ; **************************************************************************
0E50                NESTING:      
0E50   FE 22                  CP   DQ   ; quote char
0E52   28 06                  JR   z,nesting0   
0E54   FE 60                  CP   "`"   ; quote char
0E56   28 02                  JR   z,nesting0   
0E58   18 0A                  JR   nesting1   
0E5A                NESTING0:      
0E5A   CB 7B                  BIT   7,e   
0E5C   28 03                  JR   z,nesting1a   
0E5E   CB BB                  RES   7,e   
0E60   C9                     RET      
0E61                NESTING1A:      
0E61   CB FB                  SET   7,e   
0E63   C9                     RET      
0E64                NESTING1:      
0E64   CB 7B                  BIT   7,e   
0E66   C0                     RET   nz   
0E67   FE 7B                  CP   "{"   
0E69   28 08                  JR   z,nesting2   
0E6B   FE 5B                  CP   "["   
0E6D   28 04                  JR   z,nesting2   
0E6F   FE 28                  CP   "("   
0E71   20 02                  JR   nz,nesting3   
0E73                NESTING2:      
0E73   1C                     INC   e   
0E74   C9                     RET      
0E75                NESTING3:      
0E75   FE 7D                  CP   "}"   
0E77   28 07                  JR   z,nesting4   
0E79   FE 5D                  CP   "]"   
0E7B   28 03                  JR   z,nesting4   
0E7D   FE 29                  CP   ")"   
0E7F   C0                     RET   nz   
0E80                NESTING4:      
0E80   1D                     DEC   e   
0E81   C9                     RET      
0E82                PROMPT:      
0E82   CD 92 0E               CALL   printStr   
0E85   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0E8A   C9                     RET      
0E8B                CRLF:        
0E8B   CD 92 0E               CALL   printStr   
0E8E   0D 0A 00               .CSTR   "\r\n"   
0E91   C9                     RET      
0E92                             ; prints a null teminated string
0E92                             ; the string should be immediately following the call
0E92                PRINTSTR:      
0E92   E3                     EX   (sp),hl   ; swap			
0E93   CD 4B 0E               CALL   prtstr   
0E96   23                     INC   hl   ; inc past NUL
0E97   E3                     EX   (sp),hl   ; put it back	
0E98   C9                     RET      
0E99                INIT:        
0E99   21 F0 01               LD   hl,titleStr   
0E9C   11 0E 24               LD   de,titleBuf   
0E9F   06 14                  LD   b,20   
0EA1                INIT1:       
0EA1   1A                     LD   a,(de)   
0EA2   BE                     CP   (hl)   
0EA3   20 17                  JR   nz,coldBoot0   
0EA5   13                     INC   de   
0EA6   23                     INC   hl   
0EA7   10 F8                  DJNZ   init1   
0EA9                WARMINIT:      
0EA9   ED 4B FC 23            LD   bc,(vSavedIP)   ; restore IP
0EAD   ED 7B FE 23            LD   sp,(vSavedSP)   ; restore SP
0EB1   DD 2A 00 24            LD   ix,(vSavedNext)   ; restore Next
0EB5   FD 2A 02 24            LD   iy,(vSavedBP)   ; restore BP
0EB9   C3 F3 0E               JP   start1   
0EBC                COLDBOOT0:      
0EBC   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0EBF   11 0E 24               LD   de,titleBuf   
0EC2   06 14                  LD   b,20   
0EC4   ED B0                  LDIR      
0EC6                COLDINIT:      
0EC6   21 DE 01               LD   hl,isysVars   
0EC9   11 E6 23               LD   de,sysVars   
0ECC   01 12 00               LD   bc,9 * 2   
0ECF   ED B0                  LDIR      
0ED1   21 00 23               LD   hl,vars   ; 52 vars LO HI
0ED4   06 34                  LD   b,26*2   
0ED6   AF                     XOR   a   
0ED7                COLDBOOT1:      
0ED7   77                     LD   (hl),a   
0ED8   23                     INC   hl   
0ED9   10 FC                  DJNZ   coldBoot1   
0EDB   DD 2A EE 23            LD   ix,(vNext)   
0EDF   FD 21 00 21            LD   iy,STACK   
0EE3   C9                     RET      
0EE4                COLDSTART:      
0EE4   31 00 21               LD   sp,STACK   
0EE7   CD BC 0E               CALL   coldBoot0   
0EEA   C3 F3 0E               JP   start1   
0EED                START:       
0EED   31 00 21               LD   sp,STACK   ; start Monty
0EF0   CD 99 0E               CALL   init   ; setups
0EF3                START1:      
0EF3   21 0E 24               LD   hl,titleBuf   
0EF6   CD 4B 0E               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0EF9                INTERPRET:      
0EF9   CD 82 0E               CALL   prompt   
0EFC   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0EFF   21 00 21               LD   hl,TIB   
0F02   22 EA 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0F05                INTERPRET2:      ; calculate nesting
0F05   1E 00                  LD   e,0   ; initilize nesting value
0F07   C5                     PUSH   bc   ; save offset into TIB,
0F08                             ; bc is also the count of chars in TIB
0F08   21 00 21               LD   hl,TIB   ; hl is start of TIB
0F0B   18 0B                  JR   interpret4   
0F0D                INTERPRET3:      
0F0D   3E 33                  LD   a,"3"   
0F0F   CD 85 00               CALL   putchar   
0F12   7E                     LD   a,(hl)   ; a = char in TIB
0F13   23                     INC   hl   ; inc pointer into TIB
0F14   0B                     DEC   bc   ; dec count of chars in TIB
0F15   CD 50 0E               CALL   nesting   ; update nesting value
0F18                INTERPRET4:      
0F18   79                     LD   a,c   ; is count zero?
0F19   B0                     OR   b   
0F1A   20 F1                  JR   nz,interpret3   ; if not loop
0F1C   C1                     POP   bc   ; restore offset into TIB
0F1D                INTERPRET5:      
0F1D   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0F20   FE 20                  CP   $20   ; compare to space
0F22   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0F24   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0F26                             ; ???? NEEDED?
0F26   28 36                  JR   z,interpret8   
0F28   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0F2A   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0F2C   FE 05                  CP   CTRL_E   
0F2E   CA BF 0F               JP   z,edit_   
0F31   FE 08                  CP   CTRL_H   
0F33   CA AF 0F               JP   z,backSpace_   
0F36   FE 0A                  CP   CTRL_J   
0F38   CA C2 0F               JP   z,reEdit_   
0F3B                             ; cp CTRL_S
0F3B                             ; jp z,printStack_
0F3B                             ; DB     lsb(edit_)       ; ENQ ^E  5
0F3B                             ; DB     lsb(reedit_)     ; LF  ^J 10
0F3B                             ; DB     lsb(list_)       ; FF  ^L 12
0F3B                             ; DB     lsb(printStack_) ; DLE ^P 16
0F3B                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0F3B                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0F3B                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0F3B                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0F3B                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0F3B                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0F3B                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0F3B                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0F3B                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0F3B                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0F3B                INTERPRET5A:      
0F3B                             ; ld (vTIBPtr),bc
0F3B                             ; ld bc,(vTIBPtr)
0F3B   18 C8                  JR   interpret2   
0F3D                INTERPRET6:      
0F3D   21 00 21               LD   hl,TIB   
0F40   09                     ADD   hl,bc   
0F41   77                     LD   (hl),a   ; store the character in textbuf
0F42   03                     INC   bc   
0F43   CD 85 00               CALL   putchar   ; echo character to screen
0F46   CD 50 0E               CALL   nesting   
0F49   18 D2                  JR   interpret5   ; wait for next character
0F4B                INTERPRET7:      
0F4B   21 00 21               LD   hl,TIB   
0F4E   09                     ADD   hl,bc   
0F4F   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0F51   23                     INC   hl   
0F52   36 0A                  LD   (hl),"\n"   
0F54   23                     INC   hl   
0F55   03                     INC   bc   
0F56   03                     INC   bc   
0F57   CD 8B 0E               CALL   crlf   ; echo character to screen
0F5A   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0F5B   B7                     OR   a   
0F5C   20 BF                  JR   nz,interpret5   
0F5E                INTERPRET8:      
0F5E   21 00 21               LD   hl,TIB   
0F61   09                     ADD   hl,bc   
0F62   22 EA 23               LD   (vTIBPtr),hl   
0F65   01 00 21               LD   bc,TIB   
0F68   ED 43 FC 23            LD   (vSavedIP),bc   ; save IP
0F6C   ED 73 FE 23            LD   (vSavedSP),sp   ; save SP
0F70   DD 22 00 24            LD   (vSavedNext),ix   ; save Next
0F74   FD 22 02 24            LD   (vSavedBP),iy   ; save BP
0F78   0B                     DEC   bc   
0F79                NEXT:        
0F79   03                     INC   bc   ; Increment the IP
0F7A   0A                     LD   a,(bc)   ; Get the next character and dispatch
0F7B   FE 20                  CP   " "   ; whitespace?
0F7D   28 FA                  JR   z,next   ; space? ignore
0F7F   38 0D                  JR   c,next1   
0F81   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0F83   6F                     LD   l,a   ; index into table
0F84   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0F86   6E                     LD   l,(hl)   ; get low jump address
0F87   24                     INC   h   ; page 2
0F88   FE BA                  CP   "Z" - "!" + 1 + $80   
0F8A   38 01                  JR   c,next0   
0F8C   24                     INC   h   ; page 3
0F8D                NEXT0:       
0F8D   E9                     JP   (hl)   ; Jump to routine
0F8E                NEXT1:       
0F8E   FE 00                  CP   NUL   ; end of input string?
0F90   28 03                  JR   z,exit   
0F92   C3 F9 0E               JP   interpret   ; no, other whitespace, macros?
0F95                EXIT:        
0F95   03                     INC   bc   
0F96   60 69                  LD   hl,bc   
0F98   E9                     JP   (hl)   
0F99                RUN:         
0F99   C1                     POP   bc   
0F9A   0B                     DEC   bc   
0F9B   DD E9                  JP   (ix)   
0F9D                ERROR:       
0F9D   E5                     PUSH   hl   
0F9E   CD 99 0F               CALL   run   
0FA1   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
0FAC   C3 F9 0E               JP   interpret   
0FAF                BACKSPACE_:      
0FAF   79                     LD   a,c   
0FB0   B0                     OR   b   
0FB1   CA 05 0F               JP   z,interpret2   
0FB4   0B                     DEC   bc   
0FB5   CD 92 0E               CALL   printStr   
0FB8   08 20 08 00            .CSTR   "\b \b"   
0FBC   C3 05 0F               JP   interpret2   
0FBF                             ; edit
0FBF                EDIT_:       
0FBF   C3 F9 0E               JP   interpret   
0FC2                REEDIT_:      
0FC2   C3 F9 0E               JP   interpret   
0FC5                             ; editDef:
0FC5                             ;     pop hl                      ; pop ret address
0FC5                             ;     ex (sp),hl                  ; swap with TOS
0FC5                             ;     push hl                     ; dup TOS
0FC5                             ;     ld a,l                      ; a = ident
0FC5                             ;     ld de,TIB                   ; de = start of TIB
0FC5                             ;     ld (vTIBPtr),de             ; update TIB*
0FC5                             ;     push ix                     ; save NEXT
0FC5                             ;     ld ix,editDef0              ; NEXT = editDef0
0FC5                             ;     jp lookupRef                ; convert letter into address
0FC5                             ; editDef0:
0FC5                             ;     ld e,(hl)                   ; de = (hl++)
0FC5                             ;     inc hl
0FC5                             ;     ld d,(hl)
0FC5                             ;     ld a,d                      ; de == 0 ?
0FC5                             ;     or e
0FC5                             ;     jr z,editDef4
0FC5                             ;     ld ix,editDef3              ; NEXT = editDef3
0FC5                             ;     ex de,hl
0FC5                             ;     ld a,(hl)
0FC5                             ;     cp "{"
0FC5                             ;     jr nz,editDef1
0FC5                             ;     jp editBlock0               ; convert letter into address
0FC5                             ; editDef1:
0FC5                             ;     cp "("
0FC5                             ;     jr nz,editDef2
0FC5                             ;     jp editBlock0               ; convert letter into address
0FC5                             ; editDef2:
0FC5                             ;     jp editFunc
0FC5                             ; editDef3:
0FC5                             ;     ld a," "                    ; write assign
0FC5                             ;     call writeChar
0FC5                             ;     pop hl                      ; a = ident
0FC5                             ;     ld a,l
0FC5                             ;     call writeChar
0FC5                             ;     ld a,"="                    ; write assign
0FC5                             ;     call writeChar
0FC5                             ;     ld ix,editDef4              ; NEXT = editDef4
0FC5                             ;     jp printTIB
0FC5                             ; editDef4:
0FC5                             ;     pop ix                      ; restore NEXT
0FC5                             ;     jp (ix)
0FC5                             ; writeChar:
0FC5                             ;     ld de,(vTIBPtr)             ; de = TIB*
0FC5                             ;     ld (de),a                   ; write ident
0FC5                             ;     inc de
0FC5                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0FC5                             ;     ret
0FC5                             ; ; printTIB
0FC5                             ; printTIB:
0FC5                             ;     ld hl,(vTIBPtr)
0FC5                             ;     ld de,TIB
0FC5                             ;     or a
0FC5                             ;     sbc hl,de
0FC5                             ;     jp printTIB2
0FC5                             ; printTIB1:
0FC5                             ;     ld a,(de)
0FC5                             ;     call putchar
0FC5                             ; printTIB2:
0FC5                             ;     ld a,l
0FC5                             ;     or h
0FC5                             ;     jr nz,printTIB1
0FC5                             ;     jp (ix)
0FC5                             ; editBlock:
0FC5                             ;     pop hl                      ; hl = block*
0FC5                             ; editBlock0:
0FC5                             ;     push ix                     ; save next
0FC5                             ;     push hl                     ; push block*
0FC5                             ;     push hl                     ; push block*
0FC5                             ;     ld ix,(editBlock2)
0FC5                             ;     jp blockLength
0FC5                             ; editBlock1:
0FC5                             ;     pop hl                      ; bc = length, (sp) = IP
0FC5                             ;     pop de                      ; de = block*
0FC5                             ;     ld a,l
0FC5                             ;     or h
0FC5                             ;     jr z,editBlock2
0FC5                             ;     push bc
0FC5                             ;     ld bc,hl
0FC5                             ;     ex de,hl                    ; hl = block*
0FC5                             ;     ld de,(vTIBPtr)              ; de = TIB*
0FC5                             ;     ldir                        ; copy block to TIB
0FC5                             ;     ld (vTIBPtr),de              ; save TIB*
0FC5                             ;     pop bc
0FC5                             ; editBlock2:
0FC5                             ;     pop ix                      ; restore next
0FC5                             ;     jp (ix)
0FC5                             ; editFunc:
0FC5                             ;     jp (ix)
0FC5                             ; editArray:
0FC5                             ;     jp (ix)
0FC5                             ; editparseArgs:
0FC5                             ;     jp (ix)
0FC5                             ; ; blockLength
0FC5                             ; ; addr1 -- length
0FC5                             ; blockLength:
0FC5                             ;     pop hl                      ; block*
0FC5                             ;     push hl                     ; save block*
0FC5                             ;     inc hl                      ; skip first char
0FC5                             ;     ld d,1                      ; increase nesting
0FC5                             ; blockLength1:                   ; Skip to end of definition
0FC5                             ;     ld a,(hl)                   ; Get the next character
0FC5                             ;     inc hl                      ; Point to next character
0FC5                             ;     cp " " + 1                  ; ignore whitespace
0FC5                             ;     jr c,blockLength1
0FC5                             ;     cp ")"
0FC5                             ;     jr z,blockLength4
0FC5                             ;     cp "}"
0FC5                             ;     jr z,blockLength4
0FC5                             ;     cp "]"
0FC5                             ;     jr z,blockLength4
0FC5                             ;     cp "("
0FC5                             ;     jr z,blockLength2
0FC5                             ;     cp "{"
0FC5                             ;     jr z,blockLength2
0FC5                             ;     cp "["
0FC5                             ;     jr z,blockLength2
0FC5                             ;     cp "'"
0FC5                             ;     jr z,blockLength3
0FC5                             ;     cp "`"
0FC5                             ;     jr z,blockLength3
0FC5                             ;     cp DQ
0FC5                             ;     jr z,blockLength3
0FC5                             ;     jr blockLength1
0FC5                             ; blockLength2:
0FC5                             ;     inc d
0FC5                             ;     jr blockLength1
0FC5                             ; blockLength4:
0FC5                             ;     dec d
0FC5                             ;     jr nz, blockLength1         ; get the next element
0FC5                             ; blockLength3:
0FC5                             ;     ld a,$80
0FC5                             ;     xor d
0FC5                             ;     ld d,a
0FC5                             ;     jr nz, blockLength1
0FC5                             ;     pop hl                      ; hl = block*
0FC5                             ;     or a
0FC5                             ;     sbc hl,de
0FC5                             ;     push hl
0FC5                             ;     jp (ix)
0FC5                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0FC5                             ; \a start of stack \#3 depth \b base \$ prompt
0FC5                             ; DW dStack               ; a vS0 start of datastack			
0FC5                             ; DW FALSE                ; b vBase16
0FC5                             ; DW 0                    ; c vTIBPtr an offset to the tib
0FC5                             ; DW 0                    ; d
0FC5                             ; DW 65                   ; e vLastDef "A" last command u defined
0FC5                             ; DW 0                    ; f
0FC5                             ; DW page6                ; g 256 bytes limits
0FC5                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0FC5                F1:          
0FC5                F2:          
0FC5                F3:          
0FC5                F4:          
0FC5                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VDATAWIDTH:   DS   2   ; 
23E8                VNUMBASE:   DS   2   ; 
23EA                VTIBPTR:   DS   2   ; 
23EC                VBUFPTR:   DS   2   ; 
23EE                VNEXT:    DS   2   ; 
23F0                VHEAPPTR:   DS   2   ; 
23F2                VRECUR:   DS   2   ; 
23F4                VDEFINE:   DS   2   ; 
23F6                VSTRMODE:   DS   2   ; 
23F8                             ; uninitialised sys variables (preserved)
23F8                VPOINTER:   DS   2   ; 
23FA                VREMAIN:   DS   2   ; 
23FC                VSAVEDIP:   DS   2   ; 
23FE                VSAVEDSP:   DS   2   ; 
2400                VSAVEDNEXT:   DS   2   ; 
2402                VSAVEDBP:   DS   2   ; 
2404                             ; uninitialised sys variables (unpreserved)
2404                VTEMP1:   DS   2   ; 
2406                VTEMP2:   DS   2   ; 
2408                VTEMP3:   DS   2   ; 
240A                VLASTDEF:   DS   2   ; 
240C                TBPTR:    DS   2   ; reserved for tests
240E                TITLEBUF:   DS   20   
2422                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 15
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1147 IN MAIN.asm
                    > USED AT LINE 2352 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1883 IN MAIN.asm
                    > USED AT LINE 2190 IN MAIN.asm
                    > USED AT LINE 2336 IN MAIN.asm
                    > USED AT LINE 2398 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
                    > USED AT LINE 1804 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
                    > USED AT LINE 1809 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 407 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
                    > USED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 888 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 899 IN MAIN.asm
                    > USED AT LINE 905 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
                    > USED AT LINE 930 IN MAIN.asm
                    > USED AT LINE 944 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 964 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
                    > USED AT LINE 974 IN MAIN.asm
                    > USED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 984 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1467 IN MAIN.asm
                    > USED AT LINE 2355 IN MAIN.asm
                    > USED AT LINE 2447 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1972 IN MAIN.asm
                    > USED AT LINE 2209 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2361 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2363 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2365 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2290 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2265 IN MAIN.asm
                    > USED AT LINE 2284 IN MAIN.asm
DQUOTE_:            0204 DEFINED AT LINE 173 IN MAIN.asm
COMMA_:             0204 DEFINED AT LINE 174 IN MAIN.asm
DOLLAR_:            0206 DEFINED AT LINE 177 IN MAIN.asm
PERCENT_:           0209 DEFINED AT LINE 180 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 183 IN MAIN.asm
LPAREN_:            020F DEFINED AT LINE 186 IN MAIN.asm
DOT_:               0212 DEFINED AT LINE 189 IN MAIN.asm
SLASH_:             0215 DEFINED AT LINE 192 IN MAIN.asm
NUM_:               0218 DEFINED AT LINE 195 IN MAIN.asm
SEMICOLON_:         021B DEFINED AT LINE 198 IN MAIN.asm
QUESTION_:          021E DEFINED AT LINE 201 IN MAIN.asm
BANG_:              0221 DEFINED AT LINE 204 IN MAIN.asm
BANG:               0221 DEFINED AT LINE 205 IN MAIN.asm
NOT:                022C DEFINED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
EQ_:                0232 DEFINED AT LINE 217 IN MAIN.asm
EQ:                 0232 DEFINED AT LINE 218 IN MAIN.asm
EQ0:                023C DEFINED AT LINE 225 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
EQ1:                023D DEFINED AT LINE 227 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
GT_:                0241 DEFINED AT LINE 231 IN MAIN.asm
GT:                 0241 DEFINED AT LINE 232 IN MAIN.asm
LT_:                024C DEFINED AT LINE 240 IN MAIN.asm
LT:                 024C DEFINED AT LINE 241 IN MAIN.asm
LT1:                0255 DEFINED AT LINE 248 IN MAIN.asm
                    > USED AT LINE 239 IN MAIN.asm
HASH_:              025E DEFINED AT LINE 256 IN MAIN.asm
HASH:               025E DEFINED AT LINE 257 IN MAIN.asm
ARRAYINDEX:         025E DEFINED AT LINE 258 IN MAIN.asm
ARRAYINDEX0:        0266 DEFINED AT LINE 264 IN MAIN.asm
ARRAYINDEX1:        0267 DEFINED AT LINE 266 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
ARRAYINDEX2:        0273 DEFINED AT LINE 275 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
RPAREN_:            0276 DEFINED AT LINE 280 IN MAIN.asm
RPAREN:             0276 DEFINED AT LINE 281 IN MAIN.asm
AMPER_:             027E DEFINED AT LINE 288 IN MAIN.asm
AMPER:              027E DEFINED AT LINE 289 IN MAIN.asm
AND:                027E DEFINED AT LINE 290 IN MAIN.asm
MINUS_:             0288 DEFINED AT LINE 303 IN MAIN.asm
MINUS:              0288 DEFINED AT LINE 304 IN MAIN.asm
SUB:                0294 DEFINED AT LINE 312 IN MAIN.asm
                    > USED AT LINE 309 IN MAIN.asm
SUB1:               029E DEFINED AT LINE 319 IN MAIN.asm
                    > USED AT LINE 315 IN MAIN.asm
STAR_:              02A6 DEFINED AT LINE 327 IN MAIN.asm
STAR:               02A6 DEFINED AT LINE 328 IN MAIN.asm
MUL:                02A6 DEFINED AT LINE 329 IN MAIN.asm
MUL2:               02A8 DEFINED AT LINE 332 IN MAIN.asm
MUL3:               02B0 DEFINED AT LINE 337 IN MAIN.asm
                    > USED AT LINE 346 IN MAIN.asm
PLUS_:              02C2 DEFINED AT LINE 352 IN MAIN.asm
PLUS:               02C2 DEFINED AT LINE 353 IN MAIN.asm
ADD:                02C2 DEFINED AT LINE 354 IN MAIN.asm
ADD1:               02CD DEFINED AT LINE 362 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
ADD3:               02D1 DEFINED AT LINE 367 IN MAIN.asm
                    > USED AT LINE 299 IN MAIN.asm
                    > USED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 348 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
                    > USED AT LINE 1002 IN MAIN.asm
ADD4:               02DB DEFINED AT LINE 375 IN MAIN.asm
                    > USED AT LINE 371 IN MAIN.asm
COLON_:             02DE DEFINED AT LINE 378 IN MAIN.asm
COLON:              02DE DEFINED AT LINE 379 IN MAIN.asm
DEFINESTART:        02EB DEFINED AT LINE 387 IN MAIN.asm
                    > USED AT LINE 383 IN MAIN.asm
UPCASE_:            02F4 DEFINED AT LINE 394 IN MAIN.asm
UPCASE:             02F4 DEFINED AT LINE 395 IN MAIN.asm
SEMICOLON:          02F9 DEFINED AT LINE 401 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
DEFINEEND:          02F9 DEFINED AT LINE 402 IN MAIN.asm
DEFINEEND1:         030B DEFINED AT LINE 411 IN MAIN.asm
                    > USED AT LINE 406 IN MAIN.asm
UNDERSCORE_:        030D DEFINED AT LINE 419 IN MAIN.asm
LOWCASE_:           030F DEFINED AT LINE 422 IN MAIN.asm
LOWCASE:            030F DEFINED AT LINE 423 IN MAIN.asm
IDENT1:             0314 DEFINED AT LINE 427 IN MAIN.asm
                    > USED AT LINE 398 IN MAIN.asm
LBRACK_:            0321 DEFINED AT LINE 439 IN MAIN.asm
LBRACK:             0321 DEFINED AT LINE 440 IN MAIN.asm
ARRAYSTART:         0321 DEFINED AT LINE 441 IN MAIN.asm
BACKSLASH_:         033D DEFINED AT LINE 456 IN MAIN.asm
BACKSLASH:          033D DEFINED AT LINE 457 IN MAIN.asm
LAMBDA:             033D DEFINED AT LINE 458 IN MAIN.asm
LAMBDA1:            0342 DEFINED AT LINE 461 IN MAIN.asm
                    > USED AT LINE 465 IN MAIN.asm
LAMBDA2:            0352 DEFINED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 467 IN MAIN.asm
RBRACK_:            035E DEFINED AT LINE 478 IN MAIN.asm
RBRACK:             035E DEFINED AT LINE 479 IN MAIN.asm
ARRAYEND:           035E DEFINED AT LINE 480 IN MAIN.asm
ARRAYEND1:          037A DEFINED AT LINE 497 IN MAIN.asm
                    > USED AT LINE 514 IN MAIN.asm
ARRAYEND2:          038A DEFINED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 503 IN MAIN.asm
ARRAYEND3:          038F DEFINED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
CARET_:             03AE DEFINED AT LINE 532 IN MAIN.asm
CARET:              03AE DEFINED AT LINE 536 IN MAIN.asm
GO:                 03AE DEFINED AT LINE 537 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03AF DEFINED AT LINE 539 IN MAIN.asm
                    > USED AT LINE 1480 IN MAIN.asm
                    > USED AT LINE 1482 IN MAIN.asm
                    > USED AT LINE 1652 IN MAIN.asm
GO2:                03B5 DEFINED AT LINE 544 IN MAIN.asm
                    > USED AT LINE 542 IN MAIN.asm
GRAVE_:             03C4 DEFINED AT LINE 553 IN MAIN.asm
GRAVE:              03C4 DEFINED AT LINE 554 IN MAIN.asm
PRINTLITERAL:       03C4 DEFINED AT LINE 555 IN MAIN.asm
PRINTLITERAL0:      03CB DEFINED AT LINE 559 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
PRINTLITERAL1:      03CE DEFINED AT LINE 563 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
LBRACE_:            03DA DEFINED AT LINE 570 IN MAIN.asm
LBRACE:             03DA DEFINED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
PIPE_:              03DF DEFINED AT LINE 577 IN MAIN.asm
PIPE:               03DF DEFINED AT LINE 578 IN MAIN.asm
OR:                 03DF DEFINED AT LINE 579 IN MAIN.asm
RBRACE_:            03EA DEFINED AT LINE 590 IN MAIN.asm
TILDE_:             03ED DEFINED AT LINE 594 IN MAIN.asm
TILDE:              03ED DEFINED AT LINE 595 IN MAIN.asm
CHAR:               03ED DEFINED AT LINE 596 IN MAIN.asm
AT_:                03F5 DEFINED AT LINE 604 IN MAIN.asm
AT:                 03F5 DEFINED AT LINE 605 IN MAIN.asm
ADDR:               03F5 DEFINED AT LINE 606 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 618 IN MAIN.asm
PRINTCHAR:          0412 DEFINED AT LINE 633 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
PRINTSTRING:        0421 DEFINED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 627 IN MAIN.asm
PRINTSTRING0:       0428 DEFINED AT LINE 648 IN MAIN.asm
                    > USED AT LINE 655 IN MAIN.asm
PRINTSTRING1:       042B DEFINED AT LINE 652 IN MAIN.asm
                    > USED AT LINE 647 IN MAIN.asm
PRINTNUMBER:        0436 DEFINED AT LINE 661 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
PRINTDEC:           0441 DEFINED AT LINE 669 IN MAIN.asm
                    > USED AT LINE 665 IN MAIN.asm
PRINTDEC1:          044F DEFINED AT LINE 677 IN MAIN.asm
                    > USED AT LINE 675 IN MAIN.asm
PRINTDEC2:          045E DEFINED AT LINE 689 IN MAIN.asm
                    > USED AT LINE 678 IN MAIN.asm
PRINTDEC3:          046E DEFINED AT LINE 703 IN MAIN.asm
                    > USED AT LINE 691 IN MAIN.asm
PRINTDEC4:          048E DEFINED AT LINE 717 IN MAIN.asm
                    > USED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 708 IN MAIN.asm
                    > USED AT LINE 710 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
PRINTDEC5:          0490 DEFINED AT LINE 719 IN MAIN.asm
                    > USED AT LINE 722 IN MAIN.asm
PRINTDEC6:          04A0 DEFINED AT LINE 731 IN MAIN.asm
                    > USED AT LINE 726 IN MAIN.asm
PRINTDEC7:          04A1 DEFINED AT LINE 733 IN MAIN.asm
                    > USED AT LINE 730 IN MAIN.asm
PRINTHEX0:          04A7 DEFINED AT LINE 744 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
PRINTHEX:           04AD DEFINED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
PRINTHEX1:          04B5 DEFINED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 746 IN MAIN.asm
PRINTHEX2:          04C0 DEFINED AT LINE 759 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
PRINTHEX3:          04CF DEFINED AT LINE 768 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
PRINTHEX4:          04D8 DEFINED AT LINE 776 IN MAIN.asm
                    > USED AT LINE 774 IN MAIN.asm
DQUOTE:             04E3 DEFINED AT LINE 788 IN MAIN.asm
UNDERSCORE:         04E3 DEFINED AT LINE 789 IN MAIN.asm
COMMA:              04E3 DEFINED AT LINE 790 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 798 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 799 IN MAIN.asm
COMMAND_A_:         0526 DEFINED AT LINE 835 IN MAIN.asm
COMMAND_B_:         0538 DEFINED AT LINE 849 IN MAIN.asm
COMMAND_D_:         0544 DEFINED AT LINE 859 IN MAIN.asm
COMMAND_F_:         054A DEFINED AT LINE 865 IN MAIN.asm
COMMAND_H_:         0565 DEFINED AT LINE 885 IN MAIN.asm
COMMAND_I_:         056B DEFINED AT LINE 892 IN MAIN.asm
KEY_:               0571 DEFINED AT LINE 898 IN MAIN.asm
COMMAND_M_:         0574 DEFINED AT LINE 902 IN MAIN.asm
OUTPUT_:            057A DEFINED AT LINE 908 IN MAIN.asm
COMMAND_P_:         057D DEFINED AT LINE 912 IN MAIN.asm
COMMAND_Q_:         0580 DEFINED AT LINE 917 IN MAIN.asm
COMMAND_R_:         0586 DEFINED AT LINE 923 IN MAIN.asm
COMMAND_S_:         0592 DEFINED AT LINE 933 IN MAIN.asm
TRUE_:              05A4 DEFINED AT LINE 947 IN MAIN.asm
COMMAND_V_:         05A7 DEFINED AT LINE 951 IN MAIN.asm
COMMAND_W_:         05BC DEFINED AT LINE 967 IN MAIN.asm
XOR_:               05C2 DEFINED AT LINE 973 IN MAIN.asm
COMMAND_NOP_:       05C5 DEFINED AT LINE 978 IN MAIN.asm
COMMAND_DEFAULT_:   05C8 DEFINED AT LINE 983 IN MAIN.asm
NOP:                05CB DEFINED AT LINE 989 IN MAIN.asm
                    > USED AT LINE 980 IN MAIN.asm
DIV:                05CD DEFINED AT LINE 993 IN MAIN.asm
                    > USED AT LINE 985 IN MAIN.asm
ABSOLUTE:           05DE DEFINED AT LINE 1006 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
ABSOLUTE1:          05E9 DEFINED AT LINE 1016 IN MAIN.asm
                    > USED AT LINE 1009 IN MAIN.asm
ADDROF:             05EC DEFINED AT LINE 1022 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
ADDROF1:            0600 DEFINED AT LINE 1034 IN MAIN.asm
                    > USED AT LINE 1030 IN MAIN.asm
ADDROF2:            060B DEFINED AT LINE 1043 IN MAIN.asm
                    > USED AT LINE 1026 IN MAIN.asm
                    > USED AT LINE 1028 IN MAIN.asm
                    > USED AT LINE 1033 IN MAIN.asm
ARRAYLENGTH:        060D DEFINED AT LINE 1048 IN MAIN.asm
                    > USED AT LINE 843 IN MAIN.asm
                    > USED AT LINE 44
ARRAYLENGTH1:       0613 DEFINED AT LINE 1055 IN MAIN.asm
                    > USED AT LINE 1066 IN MAIN.asm
                    > USED AT LINE 1069 IN MAIN.asm
ARRAYSIZE:          0616 DEFINED AT LINE 1061 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
PERFORMM_1506S1062: 061D DEFINED AT LINE 45
                    > USED AT LINE 43
BREAK:              062A DEFINED AT LINE 1074 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
BREAK1:             0631 DEFINED AT LINE 1080 IN MAIN.asm
                    > USED AT LINE 1078 IN MAIN.asm
BYTEMODE:           0644 DEFINED AT LINE 1092 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
BYTEMODE1:          0647 DEFINED AT LINE 1094 IN MAIN.asm
                    > USED AT LINE 1265 IN MAIN.asm
COMMENT:            064C DEFINED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
                    > USED AT LINE 1103 IN MAIN.asm
CONSTHEAPSTART:     0655 DEFINED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
CONSTTIBSTART:      065B DEFINED AT LINE 1111 IN MAIN.asm
                    > USED AT LINE 963 IN MAIN.asm
CONSTBUFSTART:      0661 DEFINED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
DECBASE:            0667 DEFINED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 861 IN MAIN.asm
                    > USED AT LINE 863 IN MAIN.asm
DECBASE1:           066A DEFINED AT LINE 1121 IN MAIN.asm
                    > USED AT LINE 1131 IN MAIN.asm
ERROR1:             066F DEFINED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 889 IN MAIN.asm
                    > USED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
                    > USED AT LINE 921 IN MAIN.asm
                    > USED AT LINE 931 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
                    > USED AT LINE 965 IN MAIN.asm
                    > USED AT LINE 971 IN MAIN.asm
HEXBASE:            0675 DEFINED AT LINE 1129 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
INPUT:              067B DEFINED AT LINE 1135 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
KEY:                0686 DEFINED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
OUTPUT:             068F DEFINED AT LINE 1156 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
QUIT:               0698 DEFINED AT LINE 1167 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
QUIT1:              069F DEFINED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 1171 IN MAIN.asm
RECUR:              06A2 DEFINED AT LINE 1176 IN MAIN.asm
                    > USED AT LINE 925 IN MAIN.asm
REMAIN:             06A8 DEFINED AT LINE 1181 IN MAIN.asm
                    > USED AT LINE 927 IN MAIN.asm
STRINGBEGIN:        06AE DEFINED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
STRINGEND:          06B6 DEFINED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 937 IN MAIN.asm
STRINGEND1:         06DD DEFINED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1189 IN MAIN.asm
STRINGLENGTH:       06E5 DEFINED AT LINE 1220 IN MAIN.asm
                    > USED AT LINE 941 IN MAIN.asm
                    > USED AT LINE 44
STRINGLENGTH1:      06EB DEFINED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1230 IN MAIN.asm
STRINGLENGTH2:      06ED DEFINED AT LINE 1227 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
STRINGLENGTH3:      06F1 DEFINED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1239 IN MAIN.asm
STRINGSIZE:         06F4 DEFINED AT LINE 1235 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
PERFORMM_1654S1236: 06FB DEFINED AT LINE 45
                    > USED AT LINE 43
VARBUFPTR:          0700 DEFINED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 953 IN MAIN.asm
VARHEAPPTR:         0709 DEFINED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 955 IN MAIN.asm
VARTIBPTR:          0712 DEFINED AT LINE 1251 IN MAIN.asm
                    > USED AT LINE 957 IN MAIN.asm
VARIABLE:           071B DEFINED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 1244 IN MAIN.asm
                    > USED AT LINE 1249 IN MAIN.asm
                    > USED AT LINE 1254 IN MAIN.asm
CONSTANT:           071E DEFINED AT LINE 1258 IN MAIN.asm
                    > USED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 1113 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
WORDMODE:           0721 DEFINED AT LINE 1263 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
XOR:                0727 DEFINED AT LINE 1268 IN MAIN.asm
                    > USED AT LINE 975 IN MAIN.asm
XOR1:               0728 DEFINED AT LINE 1270 IN MAIN.asm
RANGESRC:           0732 DEFINED AT LINE 32
                    > USED AT LINE 929 IN MAIN.asm
RANGESRCM_1697S1287: 0741 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          07C6 DEFINED AT LINE 32
                    > USED AT LINE 841 IN MAIN.asm
ARRAYITERM_1716S1307: 07D3 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         0847 DEFINED AT LINE 32
                    > USED AT LINE 939 IN MAIN.asm
STRINGITERM_1735S1327: 0854 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                08CF DEFINED AT LINE 32
                    > USED AT LINE 904 IN MAIN.asm
MAPM_1755S1349:     08DC DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             0911 DEFINED AT LINE 32
                    > USED AT LINE 873 IN MAIN.asm
FILTERM_1769S1364:  091F DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               096F DEFINED AT LINE 32
                    > USED AT LINE 867 IN MAIN.asm
FOLDM_1788S1384:    097E DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            09C1 DEFINED AT LINE 32
                    > USED AT LINE 869 IN MAIN.asm
FOREACHM_1802S1399: 09CF DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0A0D DEFINED AT LINE 32
                    > USED AT LINE 871 IN MAIN.asm
FUNCSRCM_1816S1414: 0A19 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0A46 DEFINED AT LINE 32
                    > USED AT LINE 621 IN MAIN.asm
PRINTARRAYM_1826S1425: 0A54 DEFINED AT LINE 39
                    > USED AT LINE 35
DOLLAR:             0A8E DEFINED AT LINE 1436 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
HEXNUM:             0A8E DEFINED AT LINE 1437 IN MAIN.asm
HEXNUM1:            0A91 DEFINED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 1456 IN MAIN.asm
HEXNUM2:            0A99 DEFINED AT LINE 1445 IN MAIN.asm
                    > USED AT LINE 1443 IN MAIN.asm
QUESTION:           0AAB DEFINED AT LINE 1460 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
IF:                 0AAB DEFINED AT LINE 1461 IN MAIN.asm
IFTE:               0AB7 DEFINED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 1465 IN MAIN.asm
IFTE1:              0AB8 DEFINED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1468 IN MAIN.asm
QUOTE:              0AC4 DEFINED AT LINE 1486 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
STRING:             0AC4 DEFINED AT LINE 1487 IN MAIN.asm
STRING1:            0ACD DEFINED AT LINE 1494 IN MAIN.asm
                    > USED AT LINE 1502 IN MAIN.asm
STRING2:            0AD0 DEFINED AT LINE 1498 IN MAIN.asm
                    > USED AT LINE 1493 IN MAIN.asm
STRING3:            0AD6 DEFINED AT LINE 1503 IN MAIN.asm
                    > USED AT LINE 1501 IN MAIN.asm
PERCENT:            0ADE DEFINED AT LINE 1513 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
ARG:                0ADE DEFINED AT LINE 1514 IN MAIN.asm
ARG0:               0AFA DEFINED AT LINE 1533 IN MAIN.asm
                    > USED AT LINE 1539 IN MAIN.asm
ARG0A:              0B03 DEFINED AT LINE 1541 IN MAIN.asm
                    > USED AT LINE 1520 IN MAIN.asm
                    > USED AT LINE 1525 IN MAIN.asm
ARG1:               0B08 DEFINED AT LINE 1544 IN MAIN.asm
                    > USED AT LINE 1537 IN MAIN.asm
ARG1A:              0B10 DEFINED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 1543 IN MAIN.asm
NUM:                0B13 DEFINED AT LINE 1556 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
                    > USED AT LINE 311 IN MAIN.asm
NUM0:               0B1C DEFINED AT LINE 1562 IN MAIN.asm
                    > USED AT LINE 1560 IN MAIN.asm
NUM1:               0B1D DEFINED AT LINE 1564 IN MAIN.asm
                    > USED AT LINE 1581 IN MAIN.asm
NUM2:               0B35 DEFINED AT LINE 1582 IN MAIN.asm
                    > USED AT LINE 1447 IN MAIN.asm
                    > USED AT LINE 1449 IN MAIN.asm
                    > USED AT LINE 1567 IN MAIN.asm
                    > USED AT LINE 1569 IN MAIN.asm
NUM3:               0B40 DEFINED AT LINE 1590 IN MAIN.asm
                    > USED AT LINE 1585 IN MAIN.asm
RBRACE:             0B43 DEFINED AT LINE 1595 IN MAIN.asm
                    > USED AT LINE 591 IN MAIN.asm
BLOCKEND:           0B43 DEFINED AT LINE 1596 IN MAIN.asm
                    > USED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 1174 IN MAIN.asm
BLOCKEND1:          0B75 DEFINED AT LINE 1618 IN MAIN.asm
                    > USED AT LINE 1611 IN MAIN.asm
BLOCKEND2:          0B81 DEFINED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 1617 IN MAIN.asm
BLOCKEND3:          0B93 DEFINED AT LINE 1639 IN MAIN.asm
                    > USED AT LINE 1631 IN MAIN.asm
BLOCKEND4:          0BA7 DEFINED AT LINE 1649 IN MAIN.asm
                    > USED AT LINE 1647 IN MAIN.asm
GOBLOCK:            0BB0 DEFINED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 547 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
GOBLOCK2:           0BD5 DEFINED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 1752 IN MAIN.asm
GOBLOCK3:           0BDF DEFINED AT LINE 1677 IN MAIN.asm
GOFUNC:             0BE3 DEFINED AT LINE 1681 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
GOFUNC1:            0BFC DEFINED AT LINE 1700 IN MAIN.asm
                    > USED AT LINE 1710 IN MAIN.asm
GOFUNC2:            0C02 DEFINED AT LINE 1707 IN MAIN.asm
                    > USED AT LINE 1699 IN MAIN.asm
GOFUNC3:            0C0D DEFINED AT LINE 1713 IN MAIN.asm
                    > USED AT LINE 1689 IN MAIN.asm
GOFUNC4:            0C25 DEFINED AT LINE 1730 IN MAIN.asm
                    > USED AT LINE 1727 IN MAIN.asm
GOFUNC5:            0C28 DEFINED AT LINE 1733 IN MAIN.asm
                    > USED AT LINE 1739 IN MAIN.asm
GOFUNC6:            0C2B DEFINED AT LINE 1737 IN MAIN.asm
                    > USED AT LINE 1732 IN MAIN.asm
GOFUNC7:            0C2E DEFINED AT LINE 1740 IN MAIN.asm
GOFUNC8:            0C32 DEFINED AT LINE 1745 IN MAIN.asm
                    > USED AT LINE 1665 IN MAIN.asm
                    > USED AT LINE 1729 IN MAIN.asm
ASSIGN:             0C3D DEFINED AT LINE 1756 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
ASSIGN0:            0C3F DEFINED AT LINE 1759 IN MAIN.asm
                    > USED AT LINE 318 IN MAIN.asm
                    > USED AT LINE 361 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
ASSIGN1:            0C43 DEFINED AT LINE 1762 IN MAIN.asm
                    > USED AT LINE 410 IN MAIN.asm
ASSIGN2:            0C4C DEFINED AT LINE 1769 IN MAIN.asm
                    > USED AT LINE 1766 IN MAIN.asm
EQUALS:             0C4E DEFINED AT LINE 1774 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
NOTEQUALS:          0C55 DEFINED AT LINE 1780 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
LESSTHANEQ:         0C5C DEFINED AT LINE 1788 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
LESSTHAN:           0C61 DEFINED AT LINE 1795 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
LESSTHAN1:          0C66 DEFINED AT LINE 1800 IN MAIN.asm
                    > USED AT LINE 1791 IN MAIN.asm
TRUE1:              0C69 DEFINED AT LINE 1803 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
                    > USED AT LINE 1777 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
NULL1:              0C6F DEFINED AT LINE 1807 IN MAIN.asm
FALSE1:             0C6F DEFINED AT LINE 1808 IN MAIN.asm
                    > USED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 1778 IN MAIN.asm
                    > USED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 1798 IN MAIN.asm
                    > USED AT LINE 1801 IN MAIN.asm
SHIFTLEFT:          0C75 DEFINED AT LINE 1815 IN MAIN.asm
                    > USED AT LINE 245 IN MAIN.asm
SHIFTLEFT1:         0C7D DEFINED AT LINE 1822 IN MAIN.asm
                    > USED AT LINE 1825 IN MAIN.asm
SHIFTLEFT2:         0C7E DEFINED AT LINE 1824 IN MAIN.asm
                    > USED AT LINE 1821 IN MAIN.asm
SHIFTRIGHT:         0C85 DEFINED AT LINE 1832 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
SHIFTRIGHT1:        0C8D DEFINED AT LINE 1839 IN MAIN.asm
                    > USED AT LINE 1843 IN MAIN.asm
SHIFTRIGHT2:        0C91 DEFINED AT LINE 1842 IN MAIN.asm
                    > USED AT LINE 1838 IN MAIN.asm
DIVIDE:             0C98 DEFINED AT LINE 1851 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
DIVIDE1:            0C9D DEFINED AT LINE 1854 IN MAIN.asm
                    > USED AT LINE 1866 IN MAIN.asm
DIVIDE2:            0CAA DEFINED AT LINE 1862 IN MAIN.asm
                    > USED AT LINE 1859 IN MAIN.asm
DIVIDE3:            0CAB DEFINED AT LINE 1864 IN MAIN.asm
                    > USED AT LINE 1861 IN MAIN.asm
DOTNEXT:            0CB1 DEFINED AT LINE 1870 IN MAIN.asm
                    > USED AT LINE 568 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
                    > USED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
DOTNEXT1:           0CB9 DEFINED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 1873 IN MAIN.asm
DOTNEXT2:           0CC5 DEFINED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 1889 IN MAIN.asm
DOTNEXT3:           0CCB DEFINED AT LINE 1886 IN MAIN.asm
                    > USED AT LINE 1880 IN MAIN.asm
PARSEARGS:          0CD7 DEFINED AT LINE 1896 IN MAIN.asm
                    > USED AT LINE 460 IN MAIN.asm
PARSEARGS1:         0CE1 DEFINED AT LINE 1903 IN MAIN.asm
                    > USED AT LINE 1924 IN MAIN.asm
PARSEARGS1A:        0CE9 DEFINED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 1906 IN MAIN.asm
PARSEARGS2:         0CF1 DEFINED AT LINE 1914 IN MAIN.asm
PARSEARGS3:         0CF9 DEFINED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 1908 IN MAIN.asm
                    > USED AT LINE 1920 IN MAIN.asm
PARSEARGS4:         0CFC DEFINED AT LINE 1925 IN MAIN.asm
                    > USED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1913 IN MAIN.asm
PARSEARGS5:         0D02 DEFINED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 1929 IN MAIN.asm
PARSEBLOCK:         0D0D DEFINED AT LINE 1944 IN MAIN.asm
                    > USED AT LINE 471 IN MAIN.asm
                    > USED AT LINE 572 IN MAIN.asm
PARSEBLOCK1:        0D11 DEFINED AT LINE 1948 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
                    > USED AT LINE 1974 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 1986 IN MAIN.asm
PARSEBLOCK2:        0D3D DEFINED AT LINE 1975 IN MAIN.asm
                    > USED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 1964 IN MAIN.asm
                    > USED AT LINE 1966 IN MAIN.asm
PARSEBLOCK3:        0D40 DEFINED AT LINE 1978 IN MAIN.asm
                    > USED AT LINE 1969 IN MAIN.asm
                    > USED AT LINE 1971 IN MAIN.asm
                    > USED AT LINE 1973 IN MAIN.asm
PARSEBLOCK4:        0D48 DEFINED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 1955 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
                    > USED AT LINE 1959 IN MAIN.asm
PARSEBLOCK5:        0D4B DEFINED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 1983 IN MAIN.asm
PARSEBLOCK6:        0D73 DEFINED AT LINE 2006 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
CREATEFUNC:         0D77 DEFINED AT LINE 2014 IN MAIN.asm
                    > USED AT LINE 472 IN MAIN.asm
CREATEFUNC0:        0D96 DEFINED AT LINE 2028 IN MAIN.asm
                    > USED AT LINE 2024 IN MAIN.asm
CREATEFUNC1:        0DAE DEFINED AT LINE 2047 IN MAIN.asm
                    > USED AT LINE 2043 IN MAIN.asm
CREATEFUNC2:        0DC1 DEFINED AT LINE 2060 IN MAIN.asm
                    > USED AT LINE 2056 IN MAIN.asm
CREATEFUNC2A:       0DE0 DEFINED AT LINE 2086 IN MAIN.asm
                    > USED AT LINE 2073 IN MAIN.asm
CREATEFUNC3:        0DEF DEFINED AT LINE 2098 IN MAIN.asm
                    > USED AT LINE 2108 IN MAIN.asm
CREATEFUNC4:        0DFA DEFINED AT LINE 2109 IN MAIN.asm
CREATEFUNC5:        0DFB DEFINED AT LINE 2111 IN MAIN.asm
                    > USED AT LINE 2027 IN MAIN.asm
COMMANDTABLE:       0E19 DEFINED AT LINE 2141 IN MAIN.asm
                    > USED AT LINE 805 IN MAIN.asm
COMMANDTABLE1:      0E23 DEFINED AT LINE 2148 IN MAIN.asm
                    > USED AT LINE 2157 IN MAIN.asm
COMMANDTABLE2:      0E2A DEFINED AT LINE 2154 IN MAIN.asm
                    > USED AT LINE 2145 IN MAIN.asm
                    > USED AT LINE 2147 IN MAIN.asm
JUMPTABLE:          0E2F DEFINED AT LINE 2163 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
JUMPTABLE1:         0E30 DEFINED AT LINE 2165 IN MAIN.asm
                    > USED AT LINE 2153 IN MAIN.asm
JUMPTABLE2:         0E31 DEFINED AT LINE 2167 IN MAIN.asm
                    > USED AT LINE 2180 IN MAIN.asm
JUMPTABLE3:         0E38 DEFINED AT LINE 2173 IN MAIN.asm
                    > USED AT LINE 2170 IN MAIN.asm
JUMPTABLE4:         0E41 DEFINED AT LINE 2181 IN MAIN.asm
                    > USED AT LINE 2172 IN MAIN.asm
                    > USED AT LINE 2176 IN MAIN.asm
PRTSTR0:            0E47 DEFINED AT LINE 2189 IN MAIN.asm
                    > USED AT LINE 2195 IN MAIN.asm
PRTSTR:             0E4B DEFINED AT LINE 2192 IN MAIN.asm
                    > USED AT LINE 2259 IN MAIN.asm
                    > USED AT LINE 2316 IN MAIN.asm
NESTING:            0E50 DEFINED AT LINE 2208 IN MAIN.asm
                    > USED AT LINE 2341 IN MAIN.asm
                    > USED AT LINE 2399 IN MAIN.asm
NESTING0:           0E5A DEFINED AT LINE 2214 IN MAIN.asm
                    > USED AT LINE 2210 IN MAIN.asm
                    > USED AT LINE 2212 IN MAIN.asm
NESTING1A:          0E61 DEFINED AT LINE 2219 IN MAIN.asm
                    > USED AT LINE 2216 IN MAIN.asm
NESTING1:           0E64 DEFINED AT LINE 2222 IN MAIN.asm
                    > USED AT LINE 2213 IN MAIN.asm
NESTING2:           0E73 DEFINED AT LINE 2231 IN MAIN.asm
                    > USED AT LINE 2226 IN MAIN.asm
                    > USED AT LINE 2228 IN MAIN.asm
NESTING3:           0E75 DEFINED AT LINE 2234 IN MAIN.asm
                    > USED AT LINE 2230 IN MAIN.asm
NESTING4:           0E80 DEFINED AT LINE 2241 IN MAIN.asm
                    > USED AT LINE 2236 IN MAIN.asm
                    > USED AT LINE 2238 IN MAIN.asm
PROMPT:             0E82 DEFINED AT LINE 2245 IN MAIN.asm
                    > USED AT LINE 2320 IN MAIN.asm
CRLF:               0E8B DEFINED AT LINE 2250 IN MAIN.asm
                    > USED AT LINE 2412 IN MAIN.asm
PRINTSTR:           0E92 DEFINED AT LINE 2257 IN MAIN.asm
                    > USED AT LINE 2246 IN MAIN.asm
                    > USED AT LINE 2251 IN MAIN.asm
                    > USED AT LINE 2472 IN MAIN.asm
INIT:               0E99 DEFINED AT LINE 2264 IN MAIN.asm
                    > USED AT LINE 2313 IN MAIN.asm
INIT1:              0EA1 DEFINED AT LINE 2268 IN MAIN.asm
                    > USED AT LINE 2274 IN MAIN.asm
WARMINIT:           0EA9 DEFINED AT LINE 2276 IN MAIN.asm
COLDBOOT0:          0EBC DEFINED AT LINE 2283 IN MAIN.asm
                    > USED AT LINE 2271 IN MAIN.asm
                    > USED AT LINE 2309 IN MAIN.asm
COLDINIT:           0EC6 DEFINED AT LINE 2289 IN MAIN.asm
COLDBOOT1:          0ED7 DEFINED AT LINE 2298 IN MAIN.asm
                    > USED AT LINE 2301 IN MAIN.asm
COLDSTART:          0EE4 DEFINED AT LINE 2307 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
START:              0EED DEFINED AT LINE 2311 IN MAIN.asm
                    > USED AT LINE 7
START1:             0EF3 DEFINED AT LINE 2314 IN MAIN.asm
                    > USED AT LINE 2281 IN MAIN.asm
                    > USED AT LINE 2310 IN MAIN.asm
INTERPRET:          0EF9 DEFINED AT LINE 2318 IN MAIN.asm
                    > USED AT LINE 2449 IN MAIN.asm
                    > USED AT LINE 2465 IN MAIN.asm
                    > USED AT LINE 2478 IN MAIN.asm
                    > USED AT LINE 2481 IN MAIN.asm
INTERPRET2:         0F05 DEFINED AT LINE 2326 IN MAIN.asm
                    > USED AT LINE 2390 IN MAIN.asm
                    > USED AT LINE 2470 IN MAIN.asm
                    > USED AT LINE 2474 IN MAIN.asm
INTERPRET3:         0F0D DEFINED AT LINE 2334 IN MAIN.asm
                    > USED AT LINE 2347 IN MAIN.asm
INTERPRET4:         0F18 DEFINED AT LINE 2343 IN MAIN.asm
                    > USED AT LINE 2332 IN MAIN.asm
INTERPRET5:         0F1D DEFINED AT LINE 2350 IN MAIN.asm
                    > USED AT LINE 2400 IN MAIN.asm
                    > USED AT LINE 2415 IN MAIN.asm
INTERPRET5A:        0F3B DEFINED AT LINE 2387 IN MAIN.asm
INTERPRET6:         0F3D DEFINED AT LINE 2392 IN MAIN.asm
                    > USED AT LINE 2354 IN MAIN.asm
INTERPRET7:         0F4B DEFINED AT LINE 2402 IN MAIN.asm
                    > USED AT LINE 2359 IN MAIN.asm
INTERPRET8:         0F5E DEFINED AT LINE 2417 IN MAIN.asm
                    > USED AT LINE 2357 IN MAIN.asm
NEXT:               0F79 DEFINED AT LINE 2430 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2434 IN MAIN.asm
NEXT0:              0F8D DEFINED AT LINE 2444 IN MAIN.asm
                    > USED AT LINE 2442 IN MAIN.asm
NEXT1:              0F8E DEFINED AT LINE 2446 IN MAIN.asm
                    > USED AT LINE 2435 IN MAIN.asm
EXIT:               0F95 DEFINED AT LINE 2451 IN MAIN.asm
                    > USED AT LINE 2448 IN MAIN.asm
RUN:                0F99 DEFINED AT LINE 2456 IN MAIN.asm
                    > USED AT LINE 2463 IN MAIN.asm
ERROR:              0F9D DEFINED AT LINE 2461 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
                    > USED AT LINE 1127 IN MAIN.asm
BACKSPACE_:         0FAF DEFINED AT LINE 2467 IN MAIN.asm
                    > USED AT LINE 2364 IN MAIN.asm
EDIT_:              0FBF DEFINED AT LINE 2477 IN MAIN.asm
                    > USED AT LINE 2362 IN MAIN.asm
REEDIT_:            0FC2 DEFINED AT LINE 2480 IN MAIN.asm
                    > USED AT LINE 2366 IN MAIN.asm
F1:                 0FC5 DEFINED AT LINE 10
                    > USED AT LINE 875 IN MAIN.asm
F2:                 0FC5 DEFINED AT LINE 11
                    > USED AT LINE 877 IN MAIN.asm
F3:                 0FC5 DEFINED AT LINE 12
                    > USED AT LINE 879 IN MAIN.asm
F4:                 0FC5 DEFINED AT LINE 13
                    > USED AT LINE 881 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 2304 IN MAIN.asm
                    > USED AT LINE 2308 IN MAIN.asm
                    > USED AT LINE 2312 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1112 IN MAIN.asm
                    > USED AT LINE 2323 IN MAIN.asm
                    > USED AT LINE 2331 IN MAIN.asm
                    > USED AT LINE 2394 IN MAIN.asm
                    > USED AT LINE 2404 IN MAIN.asm
                    > USED AT LINE 2419 IN MAIN.asm
                    > USED AT LINE 2422 IN MAIN.asm
BUFFER:             2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1216 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 1890 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1036 IN MAIN.asm
                    > USED AT LINE 2295 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2291 IN MAIN.asm
VDATAWIDTH:         23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 261 IN MAIN.asm
                    > USED AT LINE 501 IN MAIN.asm
                    > USED AT LINE 673 IN MAIN.asm
                    > USED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 1064 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
                    > USED AT LINE 1764 IN MAIN.asm
VNUMBASE:           23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 662 IN MAIN.asm
                    > USED AT LINE 1122 IN MAIN.asm
VTIBPTR:            23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1252 IN MAIN.asm
                    > USED AT LINE 1253 IN MAIN.asm
                    > USED AT LINE 2324 IN MAIN.asm
                    > USED AT LINE 2421 IN MAIN.asm
VBUFPTR:            23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 567 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 646 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 745 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
                    > USED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 1243 IN MAIN.asm
                    > USED AT LINE 1877 IN MAIN.asm
                    > USED AT LINE 1891 IN MAIN.asm
VNEXT:              23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2303 IN MAIN.asm
VHEAPPTR:           23F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 490 IN MAIN.asm
                    > USED AT LINE 524 IN MAIN.asm
                    > USED AT LINE 528 IN MAIN.asm
                    > USED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 1247 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 1488 IN MAIN.asm
                    > USED AT LINE 1507 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 1933 IN MAIN.asm
                    > USED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
                    > USED AT LINE 2026 IN MAIN.asm
                    > USED AT LINE 2031 IN MAIN.asm
                    > USED AT LINE 2062 IN MAIN.asm
                    > USED AT LINE 2128 IN MAIN.asm
VRECUR:             23F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1178 IN MAIN.asm
                    > USED AT LINE 1644 IN MAIN.asm
                    > USED AT LINE 1651 IN MAIN.asm
VDEFINE:            23F4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 390 IN MAIN.asm
                    > USED AT LINE 403 IN MAIN.asm
                    > USED AT LINE 408 IN MAIN.asm
VSTRMODE:           23F6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 1871 IN MAIN.asm
VPOINTER:           23F8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 389 IN MAIN.asm
                    > USED AT LINE 431 IN MAIN.asm
                    > USED AT LINE 607 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
                    > USED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1547 IN MAIN.asm
                    > USED AT LINE 1761 IN MAIN.asm
VREMAIN:            23FA DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 1182 IN MAIN.asm
VSAVEDIP:           23FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2277 IN MAIN.asm
                    > USED AT LINE 2424 IN MAIN.asm
VSAVEDSP:           23FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2278 IN MAIN.asm
                    > USED AT LINE 2425 IN MAIN.asm
VSAVEDNEXT:         2400 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2279 IN MAIN.asm
                    > USED AT LINE 2426 IN MAIN.asm
VSAVEDBP:           2402 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 2280 IN MAIN.asm
                    > USED AT LINE 2427 IN MAIN.asm
VTEMP1:             2404 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 529 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1599 IN MAIN.asm
                    > USED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 1655 IN MAIN.asm
                    > USED AT LINE 1661 IN MAIN.asm
                    > USED AT LINE 1690 IN MAIN.asm
                    > USED AT LINE 1711 IN MAIN.asm
                    > USED AT LINE 1718 IN MAIN.asm
                    > USED AT LINE 1724 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
                    > USED AT LINE 2005 IN MAIN.asm
                    > USED AT LINE 2017 IN MAIN.asm
                    > USED AT LINE 2129 IN MAIN.asm
VTEMP2:             2406 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 1642 IN MAIN.asm
                    > USED AT LINE 1691 IN MAIN.asm
                    > USED AT LINE 1712 IN MAIN.asm
                    > USED AT LINE 2019 IN MAIN.asm
                    > USED AT LINE 2119 IN MAIN.asm
VTEMP3:             2408 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 2016 IN MAIN.asm
                    > USED AT LINE 2130 IN MAIN.asm
VLASTDEF:           240A DEFINED AT LINE 61 IN ram.asm
TBPTR:              240C DEFINED AT LINE 62 IN ram.asm
TITLEBUF:           240E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 2266 IN MAIN.asm
                    > USED AT LINE 2285 IN MAIN.asm
                    > USED AT LINE 2315 IN MAIN.asm
HEAP:               2422 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 1108 IN MAIN.asm
                    > USED AT LINE 1989 IN MAIN.asm
