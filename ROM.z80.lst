0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 0C               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 0C               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 0C               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 0C               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 0C               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 0C               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 0C               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 0C               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 0C               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 0C               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 0B               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 0C               LD   (RST08),HL   
0094   22 D2 0C               LD   (RST10),HL   
0097   22 D4 0C               LD   (RST18),HL   
009A   22 D6 0C               LD   (RST20),HL   
009D   22 D8 0C               LD   (RST28),HL   
00A0   22 DA 0C               LD   (RST30),HL   
00A3   22 DE 0C               LD   (INTVEC),HL   
00A6   22 E0 0C               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 0C               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 0C               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 80 0B               LD   SP,STACK   
00C6   CD 75 09               CALL   init   
00C9   C3 93 09               JP   start   
00CC                             ; 
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; ?
00CC                DC2:      EQU   18   ; ?
00CC                DC3:      EQU   19   ; ?
00CC                ESC:      EQU   27   ; ?
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; first_arg*                        -- first_arg*
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0184   00 0A                  DW   next   ; g nNext
0186   00 0F                  DW   heap   ; h vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available , ;
0220   85                     DB   lsb(nop_)   ; SP
0221   3F                     DB   lsb(not_)   ; !
0222   50                     DB   lsb(string_)   ; "
0223   47                     DB   lsb(hexnum_)   ; #
0224   09                     DB   lsb(arg_)   ; $
0225   15                     DB   lsb(arrIndex_)   ; %
0226   06                     DB   lsb(and_)   ; &
0227   1E                     DB   lsb(char_)   ; '
0228   0C                     DB   lsb(arg_list_)   ; (
0229   85                     DB   lsb(nop_)   ; )
022A   3C                     DB   lsb(mul_)   ; *
022B   00                     DB   lsb(add_)   ; +
022C   85                     DB   lsb(nop_)   ; ,
022D   53                     DB   lsb(sub_)   ; -
022E   24                     DB   lsb(dot_)   ; .
022F   82                     DB   lsb(div_)   ; /	
0230   44                     DB   lsb(num_)   ; 0
0231   44                     DB   lsb(num_)   ; 1
0232   44                     DB   lsb(num_)   ; 2
0233   44                     DB   lsb(num_)   ; 3
0234   44                     DB   lsb(num_)   ; 4
0235   44                     DB   lsb(num_)   ; 5
0236   44                     DB   lsb(num_)   ; 6
0237   44                     DB   lsb(num_)   ; 7
0238   44                     DB   lsb(num_)   ; 8
0239   44                     DB   lsb(num_)   ; 9
023A   2A                     DB   lsb(go_)   ; :
023B   85                     DB   lsb(nop_)   ; ;
023C   70                     DB   lsb(lt_)   ; <
023D   56                     DB   lsb(eq_)   ; =
023E   65                     DB   lsb(gt_)   ; >
023F   33                     DB   lsb(if_)   ; ?
0240   03                     DB   lsb(addr_)   ; @
0241   2D                     DB   lsb(identU_)   ; A
0242   2D                     DB   lsb(identU_)   ; B
0243   2D                     DB   lsb(identU_)   ; C
0244   2D                     DB   lsb(identU_)   ; D
0245   2D                     DB   lsb(identU_)   ; E
0246   2D                     DB   lsb(identU_)   ; F
0247   2D                     DB   lsb(identU_)   ; G
0248   2D                     DB   lsb(identU_)   ; h
0249   2D                     DB   lsb(identU_)   ; I
024A   2D                     DB   lsb(identU_)   ; J
024B   2D                     DB   lsb(identU_)   ; K
024C   2D                     DB   lsb(identU_)   ; L
024D   2D                     DB   lsb(identU_)   ; M
024E   2D                     DB   lsb(identU_)   ; N
024F   2D                     DB   lsb(identU_)   ; O
0250   2D                     DB   lsb(identU_)   ; p
0251   2D                     DB   lsb(identU_)   ; Q
0252   2D                     DB   lsb(identU_)   ; R
0253   2D                     DB   lsb(identU_)   ; S
0254   2D                     DB   lsb(identU_)   ; T
0255   2D                     DB   lsb(identU_)   ; U
0256   2D                     DB   lsb(identU_)   ; V
0257   2D                     DB   lsb(identU_)   ; W
0258   2D                     DB   lsb(identU_)   ; X
0259   2D                     DB   lsb(identU_)   ; Y
025A   2D                     DB   lsb(identU_)   ; Z
025B   0F                     DB   lsb(arrBegin_)   ; [
025C   21                     DB   lsb(command_)   ; \
025D   12                     DB   lsb(arrEnd_)   ; ]
025E   4D                     DB   lsb(xor_)   ; ^
025F   27                     DB   lsb(remain_)   ; _
0260   50                     DB   lsb(string_)   ; `     used for testing string   	
0261   30                     DB   lsb(identL_)   ; a
0262   30                     DB   lsb(identL_)   ; b
0263   30                     DB   lsb(identL_)   ; c
0264   30                     DB   lsb(identL_)   ; d
0265   30                     DB   lsb(identL_)   ; e
0266   30                     DB   lsb(identL_)   ; f
0267   30                     DB   lsb(identL_)   ; g
0268   30                     DB   lsb(identL_)   ; h
0269   30                     DB   lsb(identL_)   ; i
026A   30                     DB   lsb(identL_)   ; j
026B   30                     DB   lsb(identL_)   ; k
026C   30                     DB   lsb(identL_)   ; l
026D   30                     DB   lsb(identL_)   ; m
026E   30                     DB   lsb(identL_)   ; n
026F   30                     DB   lsb(identL_)   ; o
0270   30                     DB   lsb(identL_)   ; p
0271   30                     DB   lsb(identL_)   ; q
0272   30                     DB   lsb(identL_)   ; r
0273   30                     DB   lsb(identL_)   ; s
0274   30                     DB   lsb(identL_)   ; t
0275   30                     DB   lsb(identL_)   ; u
0276   30                     DB   lsb(identL_)   ; v
0277   30                     DB   lsb(identL_)   ; w
0278   30                     DB   lsb(identL_)   ; x
0279   30                     DB   lsb(identL_)   ; y
027A   30                     DB   lsb(identL_)   ; z
027B   18                     DB   lsb(block_)   ; {
027C   4A                     DB   lsb(or_)   ; |
027D   1B                     DB   lsb(blockEnd_)   ; }
027E   36                     DB   lsb(inv_)   ; ~
027F   85                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                ADD_:        ; add the top 2 members of the stack
0300   C3 87 03               JP   add   
0303                ADDR_:       
0303   C3 A0 03               JP   addr   
0306                AND_:        
0306   C3 AC 03               JP   and   
0309                ARG_:        
0309   C3 C9 03               JP   arg   
030C                ARG_LIST_:      
030C   C3 00 04               JP   arg_list   
030F                ARRBEGIN_:      
030F   C3 32 04               JP   arrBegin   
0312                ARREND_:      
0312   C3 4E 04               JP   arrEnd   
0315                ARRINDEX_:      
0315   C3 9C 04               JP   arrIndex   
0318                BLOCK_:      
0318   C3 C5 04               JP   block   
031B                BLOCKEND_:      
031B   C3 2E 05               JP   blockend   
031E                CHAR_:       
031E   C3 83 05               JP   char   
0321                COMMAND_:      
0321   C3 B7 07               JP   command   
0324                DOT_:        
0324   C3 AB 05               JP   dot   
0327                REMAIN_:      
0327   C3 46 07               JP   remain   
032A                GO_:         
032A   C3 0F 06               JP   go   
032D                IDENTU_:      
032D   C3 C8 06               JP   identU   
0330                IDENTL_:      
0330   C3 CD 06               JP   identL   
0333                IF_:         
0333   C3 DF 06               JP   if   
0336                INV_:        ; Bitwise INVert the top member of the stack
0336   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0339   C3 C1 03               JP   xor1   
033C                MUL_:        
033C   C3 F8 06               JP   mul   
033F                NOT_:        ; logical invert, any non zero value
033F   21 00 00               LD   hl,0   ; is considered true
0342   18 1D                  JR   eq1   
0344                NUM_:        
0344   C3 16 07               JP   num   
0347                HEXNUM_:      
0347   C3 AB 06               JP   hexnum   
034A                OR_:         
034A   C3 B7 03               JP   or   
034D                XOR_:        
034D   C3 C0 03               JP   xor   
0350                STRING_:      
0350   C3 6F 07               JP   string   
0353                SUB_:        
0353   C3 97 07               JP   sub   
0356                EQ_:         
0356   03                     INC   bc   
0357   0A                     LD   a,(bc)   ; is it == ?
0358   FE 3D                  CP   "="   
035A   28 04                  JR   z,eq0   ; no its equality
035C   0B                     DEC   bc   
035D   C3 B4 04               JP   assign   ; no its assignment
0360                EQ0:         
0360   E1                     POP   hl   
0361                EQ1:         
0361   D1                     POP   de   
0362   C3 EE 05               JP   equals   
0365                GT_:         
0365   03                     INC   bc   
0366   0A                     LD   a,(bc)   
0367   FE 3E                  CP   ">"   
0369   CA 5C 07               JP   z,shiftRight   
036C   D1                     POP   de   
036D   E1                     POP   hl   
036E   18 09                  JR   lt1   
0370                LT_:         
0370   03                     INC   bc   
0371   0A                     LD   a,(bc)   
0372   FE 3C                  CP   "<"   
0374   CA 4C 07               JP   z,shiftLeft   
0377   E1                     POP   hl   
0378   D1                     POP   de   
0379                LT1:         
0379   FE 3D                  CP   "="   
037B   CA F6 05               JP   z,lessthaneq   
037E   0B                     DEC   bc   
037F   C3 FB 05               JP   lessthan   
0382                DIV_:        
0382   C3 98 05               JP   div   
0385                NOP_:        
0385   DD E9                  JP   (ix)   
0387                             ;*******************************************************************
0387                             ; word operators
0387                             ;*******************************************************************
0387                ADD:         
0387   03                     INC   bc   
0388   0A                     LD   a,(bc)   
0389   FE 2B                  CP   "+"   ; ++ increment variable
038B   20 07                  JR   nz,add1   
038D   11 01 00               LD   de,1   
0390   3E 3D                  LD   a,"="   
0392   18 01                  JR   add2   
0394                ADD1:        
0394   D1                     POP   de   ; second term
0395                ADD2:        
0395   E1                     POP   hl   ; first term
0396   19                     ADD   hl,de   
0397                ADD3:        
0397   FE 3D                  CP   "="   ; += add to variable
0399   CA B6 04               JP   z,assign0   
039C   E5                     PUSH   hl   
039D   0B                     DEC   bc   
039E   DD E9                  JP   (ix)   
03A0                             ; -- ptr
03A0                ADDR:        
03A0   2A F0 0C               LD   hl,(vPointer)   
03A3   E5                     PUSH   hl   
03A4   21 F0 0C               LD   hl,vPointer   
03A7   22 F0 0C               LD   (vPointer),hl   
03AA   DD E9                  JP   (ix)   
03AC                AND:         
03AC   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03AD   E1                     POP   hl   
03AE   7B                     LD   a,e   
03AF   A5                     AND   l   
03B0   6F                     LD   l,a   
03B1   7A                     LD   a,d   
03B2   A4                     AND   h   
03B3                AND1:        
03B3   67                     LD   h,a   
03B4   E5                     PUSH   hl   
03B5   DD E9                  JP   (ix)   
03B7                OR:          
03B7   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03B8   E1                     POP   hl   
03B9   7B                     LD   a,e   
03BA   B5                     OR   l   
03BB   6F                     LD   l,a   
03BC   7A                     LD   a,d   
03BD   B4                     OR   h   
03BE   18 F3                  JR   and1   
03C0                XOR:         
03C0   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03C1                XOR1:        
03C1   E1                     POP   hl   
03C2   7B                     LD   a,e   
03C3   AD                     XOR   l   
03C4   6F                     LD   l,a   
03C5   7A                     LD   a,d   
03C6   AC                     XOR   h   
03C7   18 EA                  JR   and1   
03C9                             ; $a .. $z
03C9                             ; -- value
03C9                             ; returns value of arg
03C9                ARG:         
03C9   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03CC   FD 56 05               LD   d,(iy+5)   
03CF   EB                     EX   de,hl   
03D0   7D                     LD   a,l   ; arg_list* == null, skip
03D1   B4                     OR   h   
03D2   28 1C                  JR   z,arg0a   
03D4   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D5   2B                     DEC   hl   
03D6   7E                     LD   a,(hl)   
03D7   23                     INC   hl   
03D8   23                     INC   hl   
03D9   B7                     OR   a   
03DA   28 14                  JR   z,arg0a   ; num_args == 0, skip
03DC   5F                     LD   e,a   ; e = a = num_args
03DD   03                     INC   bc   ; a = next char = arg_name
03DE   0A                     LD   a,(bc)   
03DF   C5                     PUSH   bc   ; save IP
03E0   43                     LD   b,e   ; b = e = num_args
03E1   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E4   FD 56 03               LD   d,(iy+3)   
03E7                ARG0:        
03E7   1B                     DEC   de   ; a = arg_name, de = next arg*
03E8   1B                     DEC   de   
03E9   BE                     CP   (hl)   
03EA   28 09                  JR   z,arg1   
03EC   23                     INC   hl   ; hl = next arg_list*
03ED   10 F8                  DJNZ   arg0   
03EF   C1                     POP   bc   ; no match, restore IP
03F0                ARG0A:       
03F0   11 00 00               LD   de,0   ; return 0
03F3   18 08                  JR   arg1a   
03F5                ARG1:        
03F5   C1                     POP   bc   ; restore IP
03F6   EB                     EX   de,hl   ; hl = arg*
03F7   22 F0 0C               LD   (vPointer),hl   ; store arg* in setter
03FA   5E                     LD   e,(hl)   
03FB   23                     INC   hl   
03FC   56                     LD   d,(hl)   ; de = arg
03FD                ARG1A:       
03FD   D5                     PUSH   de   ; push arg
03FE   DD E9                  JP   (ix)   
0400                             ; arg_list - parses input (ab:c)
0400                             ; names after the : represent uninitialised locals
0400                             ; return values are the state of the stack after the block ends
0400                ARG_LIST:      
0400   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0403   2A EC 0C               LD   hl,(vHeapPtr)   ; hl = heap*
0406   23                     INC   hl   ; skip length field to start
0407   23                     INC   hl   
0408   E5                     PUSH   hl   ; save start of arg_list
0409   03                     INC   bc   ; point to next char
040A                ARG_LIST1:      
040A   0A                     LD   a,(bc)   
040B   FE 29                  CP   ")"   ; ) is the arg_list terminator
040D   28 12                  JR   z,arg_list4   
040F   FE 3A                  CP   ":"   
0411   20 03                  JR   nz,arg_list2   
0413   14                     INC   d   ; non zero value local count acts as flag
0414   20 08                  JR   nz,arg_list3   
0416                ARG_LIST2:      
0416   77                     LD   (hl),a   
0417   23                     INC   hl   
0418   1C                     INC   e   ; increase arg count
0419   AF                     XOR   a   
041A   B2                     OR   d   
041B   28 01                  JR   z,arg_list3   
041D   14                     INC   d   ; if d > 0 increase local count
041E                ARG_LIST3:      
041E   03                     INC   bc   ; point to next char
041F   18 E9                  JR   arg_list1   
0421                ARG_LIST4:      
0421   AF                     XOR   a   
0422   B2                     OR   d   
0423   28 01                  JR   z,arg_list5   
0425   15                     DEC   d   ; remove initial inc
0426                ARG_LIST5:      
0426   23                     INC   hl   
0427   22 EC 0C               LD   (vHeapPtr),hl   ; bump heap* to after end of string
042A   E1                     POP   hl   ; hl = start of arg_list
042B   E5                     PUSH   hl   ; return start of string
042C   2B                     DEC   hl   ; write length bytes to length field at start - 2
042D   72                     LD   (hl),d   
042E   2B                     DEC   hl   
042F   73                     LD   (hl),e   
0430   DD E9                  JP   (ix)   
0432                ARRBEGIN:      
0432   11 00 00               LD   de,0   ; create stack frame
0435   D5                     PUSH   de   ; push null for IP
0436   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0439   FD 56 05               LD   d,(iy+5)   ; 
043C   D5                     PUSH   de   ; 
043D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0440   FD 56 03               LD   d,(iy+3)   ; 
0443   D5                     PUSH   de   ; 
0444   FD E5                  PUSH   iy   ; push BP
0446   FD 21 00 00            LD   iy,0   ; BP = SP
044A   FD 39                  ADD   iy,sp   
044C   DD E9                  JP   (ix)   
044E                ARREND:      
044E   FD 54                  LD   d,iyh   ; de = BP
0450   FD 5D                  LD   e,iyl   
0452   ED 43 F8 0C            LD   (vTemp1),bc   ; save IP
0456   62 6B                  LD   hl,de   ; hl = de = BP
0458   B7                     OR   a   
0459   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
045B   CB 3C                  SRL   h   ; 
045D   CB 1D                  RR   l   
045F   44 4D                  LD   bc,hl   ; bc = count
0461   2A EC 0C               LD   hl,(vHeapPtr)   ; hl = array[-2]
0464   71                     LD   (hl),c   ; write num items in length word
0465   23                     INC   hl   
0466   70                     LD   (hl),b   
0467   23                     INC   hl   ; hl = array[0], bc = count
0468                             ; de = BP, hl = array[0], bc = count
0468                ARREND1:      
0468   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
046B   77                     LD   (hl),a   ; write lsb of array item
046C   23                     INC   hl   ; move to msb of array item
046D   3A E6 0C               LD   a,(vDataWidth)   ; vDataWidth=1?
0470   3D                     DEC   a   
0471   28 05                  JR   z,arrEnd2   
0473   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0476   77                     LD   (hl),a   ; write msb of array item
0477   23                     INC   hl   ; move to next word in array
0478                ARREND2:      
0478   FD 2B                  DEC   iy   ; move to next word on stack
047A   FD 2B                  DEC   iy   
047C   0B                     DEC   bc   ; dec items count
047D   79                     LD   a,c   ; if not zero loop
047E   B0                     OR   b   
047F   20 E7                  JR   nz,arrEnd1   
0481   EB                     EX   de,hl   ; de = end of array, hl = BP
0482   F9                     LD   sp,hl   ; sp = BP
0483   E1                     POP   hl   ; de = end of array, hl = old BP
0484   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0485   FD 62                  LD   iyh,d   
0487   FD 6B                  LD   iyl,e   
0489   D1                     POP   de   ; pop arg_list (discard)
048A   D1                     POP   de   ; pop first_arg* (discard)
048B   D1                     POP   de   ; pop IP (discard)
048C   ED 5B EC 0C            LD   de,(vHeapPtr)   ; de = array[-2]
0490   22 EC 0C               LD   (vHeapPtr),hl   ; move heap* to end of array
0493   ED 4B F8 0C            LD   bc,(vTemp1)   ; restore IP
0497   13                     INC   de   ; de = array[0]
0498   13                     INC   de   
0499   D5                     PUSH   de   ; return array[0]
049A   DD E9                  JP   (ix)   
049C                             ; index of an array, based on vDataWidth
049C                             ; array num -- value    ; also sets vPointer to address
049C                ARRINDEX:      
049C   E1                     POP   hl   ; hl = index
049D   D1                     POP   de   ; de = array
049E   3A E6 0C               LD   a,(vDataWidth)   ; a = data width
04A1   3D                     DEC   a   
04A2   28 01                  JR   z,arrIndex1   
04A4                ARRINDEX0:      
04A4   29                     ADD   hl,hl   ; if data width = 2 then double
04A5                ARRINDEX1:      
04A5   19                     ADD   hl,de   ; add addr
04A6   22 F0 0C               LD   (vPointer),hl   ; store address in setter
04A9   16 00                  LD   d,0   
04AB   5E                     LD   e,(hl)   
04AC   B7                     OR   a   ; check data width again
04AD   28 02                  JR   z,arrIndex2   
04AF   23                     INC   hl   
04B0   56                     LD   d,(hl)   
04B1                ARRINDEX2:      
04B1   D5                     PUSH   de   
04B2   DD E9                  JP   (ix)   
04B4                             ; value _oldValue --            ; uses address in vPointer
04B4                ASSIGN:      
04B4   E1                     POP   hl   ; discard last accessed value
04B5   E1                     POP   hl   ; hl = new value
04B6                ASSIGN0:      
04B6   EB                     EX   de,hl   ; de = new value
04B7                ASSIGNX:      
04B7   2A F0 0C               LD   hl,(vPointer)   
04BA   73                     LD   (hl),e   
04BB   3A E6 0C               LD   a,(vDataWidth)   
04BE   3D                     DEC   a   ; is it byte?
04BF   28 02                  JR   z,assign1   
04C1   23                     INC   hl   
04C2   72                     LD   (hl),d   
04C3                ASSIGN1:      
04C3   DD E9                  JP   (ix)   
04C5                BLOCK:       
04C5   C5                     PUSH   bc   ; return pointer to first { of block
04C6   03                     INC   bc   
04C7   16 01                  LD   d,1   ; nesting: count first parenthesis
04C9                BLOCK1:      ; Skip to end of definition
04C9   0A                     LD   a,(bc)   ; Get the next character
04CA   03                     INC   bc   ; Point to next character
04CB   FE 21                  CP   " " + 1   ; ignore whitespace
04CD   38 FA                  JR   c,block1   
04CF   FE 29                  CP   ")"   
04D1   28 2D                  JR   z,block4   
04D3   FE 7D                  CP   "}"   
04D5   28 29                  JR   z,block4   
04D7   FE 5D                  CP   "]"   
04D9   28 25                  JR   z,block4   
04DB   FE 28                  CP   "("   
04DD   28 16                  JR   z,block2   
04DF   FE 7B                  CP   "{"   
04E1   28 12                  JR   z,block2   
04E3   FE 5B                  CP   "["   
04E5   28 0E                  JR   z,block2   
04E7   FE 27                  CP   "'"   
04E9   28 0D                  JR   z,block3   
04EB   FE 60                  CP   "`"   
04ED   28 09                  JR   z,block3   
04EF   FE 22                  CP   $22   
04F1   28 05                  JR   z,block3   
04F3   18 D4                  JR   block1   
04F5                BLOCK2:      
04F5   14                     INC   d   
04F6   18 D1                  JR   block1   
04F8                BLOCK3:      
04F8   3E 80                  LD   a,$80   
04FA   AA                     XOR   d   
04FB   47                     LD   b,a   
04FC   20 CB                  JR   nz,block1   
04FE   18 03                  JR   block5   
0500                BLOCK4:      
0500   15                     DEC   d   
0501   20 C6                  JR   nz,block1   ; get the next element
0503                BLOCK5:      
0503   60 69                  LD   hl,bc   ; hl = IP
0505   11 00 0F               LD   de,HEAP   ; is IP pointing to object in heap
0508   B7                     OR   a   ; IP - HEAP
0509   ED 52                  SBC   hl,de   
050B   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
050D   28 1C                  JR   z,block6   
050F   60 69                  LD   hl,bc   ; hl = IP
0511   D1                     POP   de   ; de = block*
0512   ED 43 F8 0C            LD   (vTemp1),bc   ; save IP
0516   B7                     OR   a   ; bc = size
0517   ED 52                  SBC   hl,de   
0519   44 4D                  LD   bc,hl   
051B   EB                     EX   de,hl   ; hl = block* de = heap*
051C   ED 5B EC 0C            LD   de,(vHeapPtr)   
0520   D5                     PUSH   de   ; return hblock*
0521   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0523   ED 53 EC 0C            LD   (vHeapPtr),de   ; heap* += size
0527   ED 4B F8 0C            LD   bc,(vTemp1)   ; restore IP
052B                BLOCK6:      
052B   0B                     DEC   bc   ; balanced, exit
052C   DD E9                  JP   (ix)   
052E                BLOCKEND:      
052E   D9                     EXX      ; de" = oldBP bc" = oldIP
052F   FD 5E 00               LD   e,(iy+0)   
0532   FD 56 01               LD   d,(iy+1)   
0535   FD 4E 06               LD   c,(iy+6)   
0538   FD 46 07               LD   b,(iy+7)   
053B   D9                     EXX      
053C   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
053F   FD 56 03               LD   d,(iy+3)   
0542   EB                     EX   de,hl   
0543   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0546   FD 56 01               LD   d,(iy+1)   
0549   13                     INC   de   ; for carry flag <=
054A   B7                     OR   a   
054B   ED 52                  SBC   hl,de   
054D   38 0B                  JR   c,blockend1   ; oldBP >= first_arg, same scope skip
054F   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0551   FD 5D                  LD   e,iyl   
0553   21 08 00               LD   hl,8   
0556   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0557   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0558   18 0C                  JR   blockend2   
055A                BLOCKEND1:      ; same scope
055A   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
055D   FD 56 03               LD   d,(iy+3)   
0560   EB                     EX   de,hl   
0561   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0563   FD 5D                  LD   e,iyl   
0565   EB                     EX   de,hl   
0566                BLOCKEND2:      
0566   44 4D                  LD   bc,hl   ; bc = hl = BP
0568   B7                     OR   a   ; hl = BP - SP = count
0569   ED 72                  SBC   hl,sp   
056B   7D                     LD   a,l   
056C   B4                     OR   h   
056D   28 09                  JR   z,blockend3   
056F   C5                     PUSH   bc   ; bc = count, hl = BP
0570   44 4D                  LD   bc,hl   
0572   E1                     POP   hl   
0573   2B                     DEC   hl   ; hl = BP-1
0574   1B                     DEC   de   ; de = args*-1
0575   ED B8                  LDDR      
0577   13                     INC   de   
0578                BLOCKEND3:      
0578   EB                     EX   de,hl   ; hl = new tos
0579   F9                     LD   sp,hl   ; sp = new tos
057A   D9                     EXX      ; bc = IP, iy = oldBP
057B   D5                     PUSH   de   
057C   C5                     PUSH   bc   
057D   D9                     EXX      
057E   C1                     POP   bc   
057F   FD E1                  POP   iy   
0581   DD E9                  JP   (ix)   
0583                CHAR:        
0583   21 00 00               LD   hl,0   ; if "" is empty or null
0586                CHAR1:       
0586   03                     INC   bc   ; point to next char
0587   0A                     LD   a,(bc)   
0588   FE 27                  CP   "'"   ; ' is the terminator
058A   28 09                  JR   z,char3   
058C   FE 5C                  CP   $5c   ; \ is the escape
058E   20 02                  JR   nz,char2   
0590   03                     INC   bc   
0591   0A                     LD   a,(bc)   
0592                CHAR2:       
0592   6F                     LD   l,a   
0593   18 F1                  JR   char1   
0595                CHAR3:       
0595   E5                     PUSH   hl   
0596   DD E9                  JP   (ix)   
0598                DIV:         
0598   D1                     POP   de   
0599   E1                     POP   hl   
059A   C5                     PUSH   bc   ; preserve the IP
059B   44 4D                  LD   bc,hl   
059D   CD D5 05               CALL   divide   
05A0   EB                     EX   de,hl   
05A1   ED 53 F6 0C            LD   (vRemain),de   
05A5   C1                     POP   bc   
05A6   03                     INC   bc   
05A7   0A                     LD   a,(bc)   
05A8   C3 97 03               JP   add3   
05AB                DOT:         
05AB   E1                     POP   hl   
05AC   03                     INC   bc   
05AD   0A                     LD   a,(bc)   
05AE   FE 68                  CP   "h"   
05B0   20 05                  JR   nz,dot1   
05B2   CD 04 09               CALL   prthex   
05B5   18 17                  JR   dot4   
05B7                DOT1:        
05B7   FE 73                  CP   "s"   
05B9   20 05                  JR   nz,dot2   
05BB   CD 27 09               CALL   prtstr   
05BE   18 0E                  JR   dot4   
05C0                DOT2:        
05C0   FE 63                  CP   "c"   
05C2   20 06                  JR   nz,dot3   
05C4   7D                     LD   a,l   
05C5   CD 85 00               CALL   putchar   
05C8   18 04                  JR   dot4   
05CA                DOT3:        
05CA   0B                     DEC   bc   
05CB   CD BC 08               CALL   prtdec   
05CE                DOT4:        
05CE   3E 20                  LD   a," "   
05D0   CD 85 00               CALL   putchar   
05D3   DD E9                  JP   (ix)   
05D5                             ; division subroutine.
05D5                             ; bc: divisor, de: dividend, hl: remainder
05D5                DIVIDE:      
05D5   21 00 00               LD   hl,0   ; zero the remainder
05D8   3E 10                  LD   a,16   ; loop counter
05DA                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
05DA   CB 21                  SLA   c   
05DC   CB 10                  RL   b   
05DE   ED 6A                  ADC   hl,hl   
05E0   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
05E2   38 03                  JR   c,divide2   
05E4   0C                     INC   c   
05E5   18 01                  JR   divide3   
05E7                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
05E7   19                     ADD   hl,de   
05E8                DIVIDE3:      
05E8   3D                     DEC   a   
05E9   20 EF                  JR   nz,divide1   
05EB   50 59                  LD   de,bc   ; result from bc to de
05ED   C9                     RET      
05EE                             ; hl = value1, de = value2
05EE                             ; hl = result
05EE                EQUALS:      
05EE   B7                     OR   a   ; reset the carry flag
05EF   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
05F1   28 10                  JR   z,true1   
05F3   C3 09 06               JP   false1   
05F6                             ; hl = value1 de = value2
05F6                             ; hl = result
05F6                LESSTHANEQ:      
05F6   B7                     OR   a   
05F7   ED 52                  SBC   hl,de   
05F9   18 05                  JR   lessthan1   
05FB                             ; hl = value1 de = value2
05FB                             ; hl = result
05FB                LESSTHAN:      
05FB   B7                     OR   a   
05FC   ED 52                  SBC   hl,de   
05FE   28 09                  JR   z,false1   
0600                LESSTHAN1:      
0600   FA 09 06               JP   m,false1   
0603                TRUE1:       
0603   21 FF FF               LD   hl,TRUE   
0606   E5                     PUSH   hl   
0607   DD E9                  JP   (ix)   
0609                NULL1:       
0609                FALSE1:      
0609   21 00 00               LD   hl,FALSE   
060C   E5                     PUSH   hl   
060D   DD E9                  JP   (ix)   
060F                             ; execute a block of code which ends with }
060F                             ; creates a root scope if BP == stack
060F                             ; else uses outer scope
060F                GO:          
060F   D1                     POP   de   ; de = block*
0610                GO1:         
0610   7B                     LD   a,e   ; if block* == null, exit
0611   B2                     OR   d   
0612   20 02                  JR   nz,go2   
0614   DD E9                  JP   (ix)   
0616                GO2:         
0616   1A                     LD   a,(de)   
0617   FE 7B                  CP   "{"   
0619   C2 3D 06               JP   nz,go3   
061C   13                     INC   de   ; execute block of monty code
061D   C5                     PUSH   bc   ; push IP
061E   21 80 0B               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0621   FD 44                  LD   b,iyh   
0623   FD 4D                  LD   c,iyl   
0625   B7                     OR   a   ; hl = stack - BP = root_scope
0626   ED 42                  SBC   hl,bc   
0628   7D                     LD   a,l   ; if root_scope, skip
0629   B4                     OR   h   
062A   28 6C                  JR   z,go10   
062C   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
062F   FD 46 05               LD   b,(iy+5)   
0632   C5                     PUSH   bc   
0633   FD 4E 02               LD   c,(iy+2)   ; hl = first_arg* (parent)
0636   FD 46 03               LD   b,(iy+3)   
0639   60 69                  LD   hl,bc   
063B   18 60                  JR   go11   
063D                GO3:         ; execute function
063D   EB                     EX   de,hl   ; hl = func*
063E   5E                     LD   e,(hl)   ; de = closure*
063F   23                     INC   hl   
0640   56                     LD   d,(hl)   
0641   23                     INC   hl   
0642   7B                     LD   a,e   ; if closure* == null skip
0643   B2                     OR   d   
0644   28 21                  JR   z,go6   
0646   ED 43 F8 0C            LD   (vTemp1),bc   
064A   22 FA 0C               LD   (vTemp2),hl   ; save bc,hl
064D   EB                     EX   de,hl   ; hl = array*
064E   2B                     DEC   hl   ; bc = count
064F   46                     LD   b,(hl)   
0650   2B                     DEC   hl   
0651   4E                     LD   c,(hl)   
0652   23                     INC   hl   ; push each item on stack
0653   23                     INC   hl   
0654   18 06                  JR   go5   
0656                GO4:         
0656   5E                     LD   e,(hl)   ; de = closure item
0657   23                     INC   hl   
0658   56                     LD   d,(hl)   
0659   23                     INC   hl   
065A   D5                     PUSH   de   ; push on stack
065B   0B                     DEC   bc   
065C                GO5:         
065C   79                     LD   a,c   ; if count != 0 then loop
065D   B0                     OR   b   
065E   20 F6                  JR   nz,go4   
0660   ED 4B F8 0C            LD   bc,(vTemp1)   ; restore bc
0664   2A FA 0C               LD   hl,(vTemp2)   ; restore hl
0667                GO6:         
0667   5E                     LD   e,(hl)   ; de = block*
0668   23                     INC   hl   
0669   56                     LD   d,(hl)   
066A   23                     INC   hl   
066B   ED 53 F8 0C            LD   (vTemp1),de   ; save block*
066F   5E                     LD   e,(hl)   ; de = arg_list*
0670   23                     INC   hl   
0671   56                     LD   d,(hl)   
0672   23                     INC   hl   
0673   EB                     EX   de,hl   ; hl = arg_list*
0674   ED 5B F8 0C            LD   de,(vTemp1)   ; restore de = block*
0678   7D                     LD   a,l   ; if arg_list* != null skip
0679   B4                     OR   h   
067A   20 03                  JR   nz,go7   
067C   C5                     PUSH   bc   ; push IP
067D   18 19                  JR   go10   
067F                GO7:         
067F   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
0680   7E                     LD   a,(hl)   
0681   23                     INC   hl   
0682   B7                     OR   a   
0683   28 05                  JR   z,go9   
0685                GO8:         
0685   3B                     DEC   sp   
0686   3B                     DEC   sp   
0687   3D                     DEC   a   
0688   20 FB                  JR   nz,go8   
068A                GO9:         
068A   C5                     PUSH   bc   ; push IP
068B   E5                     PUSH   hl   ; push arg_list*
068C   2B                     DEC   hl   ; hl = num_args*
068D   2B                     DEC   hl   
068E   7E                     LD   a,(hl)   ; hl = num_args * 2
068F   87                     ADD   a,a   
0690   C6 04                  ADD   a,4   ; offset for IP and arg_list
0692   6F                     LD   l,a   
0693   26 00                  LD   h,$0   
0695   39                     ADD   hl,sp   ; hl = first_arg*
0696   18 06                  JR   go12   
0698                GO10:        
0698   E5                     PUSH   hl   ; push arg_list (null)
0699   21 04 00               LD   hl,4   ; hl = first_arg* (BP+8)
069C   39                     ADD   hl,sp   
069D                GO11:        
069D   1B                     DEC   de   
069E                GO12:        
069E   E5                     PUSH   hl   ; push first_arg
069F   FD E5                  PUSH   iy   ; push BP
06A1   FD 21 00 00            LD   iy,0   ; BP = SP
06A5   FD 39                  ADD   iy,sp   
06A7   42 4B                  LD   bc,de   ; bc = de = block*-1
06A9   DD E9                  JP   (ix)   
06AB                HEXNUM:      
06AB   21 00 00               LD   hl,0   ; Clear hl to accept the number
06AE                HEXNUM1:      
06AE   03                     INC   bc   
06AF   0A                     LD   a,(bc)   ; Get the character which is a numeral
06B0   CB 77                  BIT   6,a   ; is it uppercase alpha?
06B2   28 02                  JR   z,hexnum2   ; no a decimal
06B4   D6 07                  SUB   7   ; sub 7  to make $a - $F
06B6                HEXNUM2:      
06B6   D6 30                  SUB   $30   ; form decimal digit
06B8   DA 38 07               JP   c,num2   
06BB   FE 10                  CP   $0F+1   
06BD   D2 38 07               JP   nc,num2   
06C0   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06C1   29                     ADD   hl,hl   ; 4X
06C2   29                     ADD   hl,hl   ; 8X
06C3   29                     ADD   hl,hl   ; 16X
06C4   85                     ADD   a,l   ; add into bottom of hl
06C5   6F                     LD   l,a   
06C6   18 E6                  JR   hexnum1   
06C8                IDENTU:      
06C8   0A                     LD   a,(bc)   ; a = identifier char
06C9   D6 41                  SUB   "A"   ; "A" = 0
06CB   18 05                  JR   ident1   
06CD                IDENTL:      
06CD   0A                     LD   a,(bc)   
06CE   D6 61                  SUB   "a"   
06D0   C6 1A                  ADD   a,26   
06D2                IDENT1:      
06D2   87                     ADD   a,a   ; l = a * 2
06D3   6F                     LD   l,a   
06D4   26 0C                  LD   h,msb(vars)   
06D6   22 F0 0C               LD   (vPointer),hl   ; store address in setter
06D9   5E                     LD   e,(hl)   
06DA   23                     INC   hl   
06DB   56                     LD   d,(hl)   
06DC   D5                     PUSH   de   
06DD   DD E9                  JP   (ix)   
06DF                             ; if
06DF                             ; condition then -- value
06DF                IF:          
06DF   03                     INC   bc   
06E0   0A                     LD   a,(bc)   
06E1   FE 3F                  CP   "?"   
06E3   28 06                  JR   z,ifte   
06E5   0B                     DEC   bc   
06E6   11 00 00               LD   de,0   ; NUL pointer for else
06E9   18 01                  JR   ifte1   
06EB                             ; ifte
06EB                             ; condition then else -- value
06EB                IFTE:        
06EB   D1                     POP   de   ; de = else
06EC                IFTE1:       
06EC   E1                     POP   hl   ; hl = then
06ED   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
06EE   7C                     LD   a,h   
06EF   B5                     OR   l   
06F0   E1                     POP   hl   ; hl = then
06F1   CA 10 06               JP   z,go1   ; if z de = else
06F4   EB                     EX   de,hl   ; condition = false, de = then
06F5   C3 10 06               JP   go1   
06F8                MUL:         
06F8   D1                     POP   de   ; get first value
06F9   E1                     POP   hl   
06FA                MUL2:        
06FA   C5                     PUSH   bc   ; Preserve the IP
06FB   44 4D                  LD   bc,hl   ; bc = 2nd value
06FD   21 00 00               LD   hl,0   
0700   3E 10                  LD   a,16   
0702                MUL3:        
0702   29                     ADD   hl,hl   
0703   CB 13                  RL   e   
0705   CB 12                  RL   d   
0707   30 04                  JR   nc,$+6   
0709   09                     ADD   hl,bc   
070A   30 01                  JR   nc,$+3   
070C   13                     INC   de   
070D   3D                     DEC   a   
070E   20 F2                  JR   nz,mul3   
0710   C1                     POP   bc   ; Restore the IP
0711   03                     INC   bc   
0712   0A                     LD   a,(bc)   
0713   C3 97 03               JP   add3   
0716                NUM:         
0716   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0719   0A                     LD   a,(bc)   ; Get numeral or -
071A   FE 2D                  CP   "-"   
071C   20 01                  JR   nz,num0   
071E   03                     INC   bc   ; move to next char, no flags affected
071F                NUM0:        
071F   08                     EX   af,af'   ; save zero flag = 0 for later
0720                NUM1:        
0720   0A                     LD   a,(bc)   ; read digit
0721   D6 30                  SUB   "0"   ; less than 0?
0723   38 13                  JR   c,num2   ; not a digit, exit loop
0725   FE 0A                  CP   10   ; greater that 9?
0727   30 0F                  JR   nc,num2   ; not a digit, exit loop
0729   03                     INC   bc   ; inc IP
072A   54 5D                  LD   de,hl   ; multiply hl * 10
072C   29                     ADD   hl,hl   
072D   29                     ADD   hl,hl   
072E   19                     ADD   hl,de   
072F   29                     ADD   hl,hl   
0730   85                     ADD   a,l   ; add digit in a to hl
0731   6F                     LD   l,a   
0732   3E 00                  LD   a,0   
0734   8C                     ADC   a,h   
0735   67                     LD   h,a   
0736   18 E8                  JR   num1   
0738                NUM2:        
0738   0B                     DEC   bc   
0739   08                     EX   af,af'   ; restore zero flag
073A   20 07                  JR   nz,num3   
073C   EB                     EX   de,hl   ; negate the value of hl
073D   21 00 00               LD   hl,0   
0740   B7                     OR   a   ; jump to sub2
0741   ED 52                  SBC   hl,de   
0743                NUM3:        
0743   E5                     PUSH   hl   ; Put the number on the stack
0744   DD E9                  JP   (ix)   ; and process the next character
0746                REMAIN:      
0746   2A F6 0C               LD   hl,(vRemain)   
0749   E5                     PUSH   hl   
074A   DD E9                  JP   (ix)   
074C                             ; shiftLeft
074C                             ; value count -- value2          shift left count places
074C                SHIFTLEFT:      
074C   50 59                  LD   de,bc   ; save IP
074E   C1                     POP   bc   ; bc = count
074F   41                     LD   b,c   ; b = loop counter
0750   E1                     POP   hl   
0751   04                     INC   b   ; test for counter=0 case
0752   18 01                  JR   shiftLeft2   
0754                SHIFTLEFT1:      
0754   29                     ADD   hl,hl   ; left shift hl
0755                SHIFTLEFT2:      
0755   10 FD                  DJNZ   shiftLeft1   
0757   E5                     PUSH   hl   
0758   42 4B                  LD   bc,de   ; restore IP
075A   DD E9                  JP   (ix)   
075C                             ; shiftRight
075C                             ; value count -- value2          shift left count places
075C                SHIFTRIGHT:      
075C   50 59                  LD   de,bc   ; save IP
075E   C1                     POP   bc   ; bc = count
075F   41                     LD   b,c   ; b = loop counter
0760   E1                     POP   hl   
0761   04                     INC   b   ; test for counter=0 case
0762   18 04                  JR   shiftRight2   
0764                SHIFTRIGHT1:      
0764   CB 3C                  SRL   h   ; right shift hl
0766   CB 1D                  RR   l   
0768                SHIFTRIGHT2:      
0768   10 FA                  DJNZ   shiftRight1   
076A   E5                     PUSH   hl   
076B   42 4B                  LD   bc,de   ; restore IP
076D   DD E9                  JP   (ix)   
076F                             ; string
076F                             ; -- ptr                        ; points to start of string chars,
076F                             ; length is stored at start - 2 bytes
076F                STRING:      
076F   2A EC 0C               LD   hl,(vHeapPtr)   ; hl = heap*
0772   23                     INC   hl   ; skip length field to start
0773   23                     INC   hl   
0774   E5                     PUSH   hl   ; save start of string
0775   03                     INC   bc   ; point to next char
0776   18 03                  JR   string2   
0778                STRING1:      
0778   77                     LD   (hl),a   
0779   23                     INC   hl   ; increase count
077A   03                     INC   bc   ; point to next char
077B                STRING2:      
077B   0A                     LD   a,(bc)   
077C   FE 22                  CP   DQUOTE   ; " is the string terminator
077E   20 F8                  JR   nz,string1   
0780   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0782   20 F4                  JR   nz,string1   
0784   AF                     XOR   a   ; write NUL to terminate string
0785   77                     LD   (hl),a   ; hl = end of string
0786   23                     INC   hl   
0787   22 EC 0C               LD   (vHeapPtr),hl   ; bump heap* to after end of string
078A   2B                     DEC   hl   ; hl = end of string without terminator
078B   D1                     POP   de   ; de = start of string
078C   D5                     PUSH   de   ; return start of string
078D   B7                     OR   a   ; hl = length bytes, de = start of string
078E   ED 52                  SBC   hl,de   
0790   EB                     EX   de,hl   
0791   2B                     DEC   hl   ; write length bytes to length field at start - 2
0792   72                     LD   (hl),d   
0793   2B                     DEC   hl   
0794   73                     LD   (hl),e   
0795   DD E9                  JP   (ix)   
0797                SUB:         ; negative sign or subtract
0797   03                     INC   bc   ; check if sign of a number
0798   0A                     LD   a,(bc)   
0799   0B                     DEC   bc   
079A   FE 30                  CP   "0"   
079C   38 05                  JR   c,sub0   
079E   FE 3A                  CP   "9"+1   
07A0   DA 44 03               JP   c,num_   
07A3                SUB0:        ; Subtract the value 2nd on stack from top of stack
07A3   03                     INC   bc   
07A4   FE 2D                  CP   "-"   
07A6   20 07                  JR   nz,sub1   
07A8   11 01 00               LD   de,1   
07AB   3E 3D                  LD   a,"="   
07AD   18 01                  JR   sub3   
07AF                SUB1:        
07AF   D1                     POP   de   
07B0                SUB3:        
07B0   E1                     POP   hl   
07B1   B7                     OR   a   
07B2   ED 52                  SBC   hl,de   
07B4   C3 97 03               JP   add3   
07B7                             ;*******************************************************************
07B7                             ; commands
07B7                             ;*******************************************************************
07B7                COMMAND:      
07B7   03                     INC   bc   
07B8   0A                     LD   a,(bc)   
07B9   FE 5C                  CP   $5C   ; \\ comment
07BB   CA 32 08               JP   z,comment   
07BE   FE 61                  CP   "a"   ; \a absolute
07C0   CA 05 08               JP   z,abs1   
07C3   FE 62                  CP   "b"   ; \b bytes
07C5   CA 3B 08               JP   z,bytes   
07C8   FE 63                  CP   "c"   ; \c closure
07CA   CA 12 08               JP   z,closure   
07CD   FE 66                  CP   "f"   ; \f func
07CF   CA 43 08               JP   z,func   
07D2   FE 46                  CP   "F"   ; \F false
07D4   CA 09 06               JP   z,false1   
07D7   FE 69                  CP   "i"   ; \i input
07D9   CA 5F 08               JP   z,input   
07DC   FE 6B                  CP   "k"   ; \k key
07DE   CA 6A 08               JP   z,key   
07E1   FE 6F                  CP   "o"   ; \o output
07E3   CA 73 08               JP   z,output   
07E6   FE 72                  CP   "r"   ; \r repeat
07E8   CA 7C 08               JP   z,repeat   
07EB   FE 73                  CP   "s"   ; \s select
07ED   CA 84 08               JP   z,select   
07F0   FE 54                  CP   "T"   ; \T true
07F2   CA 03 06               JP   z,true1   
07F5   FE 77                  CP   "w"   ; \w words
07F7   CA 8E 08               JP   z,words   
07FA   FE 78                  CP   "x"   ; \x exit loop or block
07FC   CA 94 08               JP   z,blockExit   
07FF   21 01 00               LD   hl,1   ; error 1: unknown command
0802   C3 19 0A               JP   error   
0805                ABS1:        
0805   E1                     POP   hl   
0806   CB 7C                  BIT   7,h   
0808   C8                     RET   z   
0809   AF                     XOR   a   
080A   95                     SUB   l   
080B   6F                     LD   l,a   
080C   9F                     SBC   a,a   
080D   94                     SUB   h   
080E   67                     LD   h,a   
080F   E5                     PUSH   hl   
0810   DD E9                  JP   (ix)   
0812                             ; closure
0812                             ; array* func* -- func1*
0812                CLOSURE:      
0812   E1                     POP   hl   ; h1 = func*
0813   ED 5B EC 0C            LD   de,(vHeapPtr)   ; de = heap* = closure*
0817   ED 43 F8 0C            LD   (vTemp1),bc   ; save IP
081B   01 06 00               LD   bc,6   ; bc = count
081E   ED B0                  LDIR      ; clone func
0820   ED 4B F8 0C            LD   bc,(vTemp1)   ; restore IP
0824   2A EC 0C               LD   hl,(vHeapPtr)   ; hl = heap* = closure*
0827   ED 53 EC 0C            LD   (vHeapPtr),de   ; heap* += 6
082B   D1                     POP   de   ; de = array*
082C   E5                     PUSH   hl   ; return closure*
082D   73                     LD   (hl),e   ; compile array*
082E   23                     INC   hl   
082F   72                     LD   (hl),d   
0830   DD E9                  JP   (ix)   
0832                COMMENT:      
0832   03                     INC   bc   ; point to next char
0833   0A                     LD   a,(bc)   
0834   FE 20                  CP   " "   ; terminate on any char less than SP
0836   30 FA                  JR   nc,comment   
0838   0B                     DEC   bc   
0839   DD E9                  JP   (ix)   
083B                BYTES:       
083B   21 01 00               LD   hl,1   
083E                BYTES1:      
083E   22 E6 0C               LD   (vDataWidth),hl   
0841   DD E9                  JP   (ix)   
0843                             ; arg_list* block* -- ptr
0843                FUNC:        
0843   D1                     POP   de   ; de = block* hl = heap*
0844   2A EC 0C               LD   hl,(vHeapPtr)   
0847   AF                     XOR   a   
0848   77                     LD   (hl),a   ; compile null closure*
0849   23                     INC   hl   
084A   77                     LD   (hl),a   
084B   23                     INC   hl   
084C   73                     LD   (hl),e   ; compile block*
084D   23                     INC   hl   
084E   72                     LD   (hl),d   
084F   23                     INC   hl   
0850   D1                     POP   de   ; de = block*
0851   73                     LD   (hl),e   ; compile arg_list*
0852   23                     INC   hl   
0853   72                     LD   (hl),d   
0854   23                     INC   hl   
0855   ED 5B EC 0C            LD   de,(vHeapPtr)   ; return func*
0859   D5                     PUSH   de   
085A   22 EC 0C               LD   (vHeapPtr),hl   ; heap* += 4
085D   DD E9                  JP   (ix)   
085F                             ; Z80 port input
085F                             ; port -- value
085F                INPUT:       
085F   E1                     POP   hl   
0860   59                     LD   e,c   ; save IP
0861   4D                     LD   c,l   
0862   ED 68                  IN   l,(c)   
0864   26 00                  LD   h,0   
0866   4B                     LD   c,e   ; restore IP
0867   E5                     PUSH   hl   
0868   DD E9                  JP   (ix)   
086A                KEY:         
086A   CD 81 00               CALL   getchar   
086D   26 00                  LD   h,0   
086F   6F                     LD   l,a   
0870   E5                     PUSH   hl   
0871   DD E9                  JP   (ix)   
0873                             ; Z80 port output
0873                             ; value port --
0873                OUTPUT:      
0873   E1                     POP   hl   
0874   59                     LD   e,c   ; save IP
0875   4D                     LD   c,l   
0876   E1                     POP   hl   
0877   ED 69                  OUT   (c),l   
0879   4B                     LD   c,e   ; restore IP
087A   DD E9                  JP   (ix)   
087C                             ; repeat
087C                             ; block* --
087C                REPEAT:      
087C   0B                     DEC   bc   ; rewind IP to before \r
087D   0B                     DEC   bc   
087E   E1                     POP   hl   
087F   E5                     PUSH   hl   
0880   E5                     PUSH   hl   
0881   C3 0F 06               JP   go   
0884                             ; select
0884                             ; index array -- value
0884                SELECT:      
0884   D1                     POP   de   ; de = array
0885   E1                     POP   hl   ; hl = index
0886   29                     ADD   hl,hl   ; if data width = 2 then double
0887   19                     ADD   hl,de   ; add addr
0888   5E                     LD   e,(hl)   
0889   23                     INC   hl   
088A   56                     LD   d,(hl)   
088B   C3 10 06               JP   go1   
088E                WORDS:       
088E   21 02 00               LD   hl,2   
0891   C3 3E 08               JP   bytes1   
0894                BLOCKEXIT:      
0894   E1                     POP   hl   
0895   7D                     LD   a,l   
0896   B4                     OR   h   
0897   28 02                  JR   z,blockExit1   
0899   DD E9                  JP   (ix)   
089B                BLOCKEXIT1:      
089B   FD 6E 06               LD   l,(iy+6)   ; hl = oldIP
089E   FD 66 07               LD   h,(iy+7)   
08A1   23                     INC   hl   ; forward IP on stack to after \r
08A2   23                     INC   hl   
08A3   FD 75 06               LD   (iy+6),l   
08A6   FD 74 07               LD   (iy+7),h   
08A9   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
08AC   FD 56 03               LD   d,(iy+3)   
08AF   13                     INC   de   
08B0   13                     INC   de   
08B1   FD 73 02               LD   (iy+2),e   ; hl = first_arg*, is it in this scope?
08B4   FD 72 03               LD   (iy+3),d   
08B7   C3 2E 05               JP   blockEnd   
08BA                             ; 
08BA                             ; 
08BA                             ; 
08BA                             ; 
08BA                FILTER:      
08BA                MAP:         
08BA                SCAN:        
08BA   DD E9                  JP   (ix)   
08BC                             ; print decimal
08BC                             ; hl = value
08BC                PRTDEC:      
08BC   CB 7C                  BIT   7,h   
08BE   28 0B                  JR   z,prtdec0   
08C0   3E 2D                  LD   a,"-"   
08C2   CD 85 00               CALL   putchar   
08C5   AF                     XOR   a   
08C6   95                     SUB   l   
08C7   6F                     LD   l,a   
08C8   9F                     SBC   a,a   
08C9   94                     SUB   h   
08CA   67                     LD   h,a   
08CB                PRTDEC0:      
08CB   C5                     PUSH   bc   
08CC   0E 00                  LD   c,0   ; leading zeros flag = false
08CE   11 F0 D8               LD   de,-10000   
08D1   CD ED 08               CALL   prtdec1   
08D4   11 18 FC               LD   de,-1000   
08D7   CD ED 08               CALL   prtdec1   
08DA   11 9C FF               LD   de,-100   
08DD   CD ED 08               CALL   prtdec1   
08E0   1E F6                  LD   e,-10   
08E2   CD ED 08               CALL   prtdec1   
08E5   0C                     INC   c   ; flag = true for at least digit
08E6   1E FF                  LD   e,-1   
08E8   CD ED 08               CALL   prtdec1   
08EB   C1                     POP   bc   
08EC   C9                     RET      
08ED                PRTDEC1:      
08ED   06 2F                  LD   b,"0"-1   
08EF                PRTDEC2:      
08EF   04                     INC   b   
08F0   19                     ADD   hl,de   
08F1   38 FC                  JR   c,prtdec2   
08F3   ED 52                  SBC   hl,de   
08F5   3E 30                  LD   a,"0"   
08F7   B8                     CP   b   
08F8   20 05                  JR   nz,prtdec3   
08FA   AF                     XOR   a   
08FB   B1                     OR   c   
08FC   C8                     RET   z   
08FD   18 01                  JR   prtdec4   
08FF                PRTDEC3:      
08FF   0C                     INC   c   
0900                PRTDEC4:      
0900   78                     LD   a,b   
0901   C3 85 00               JP   putchar   
0904                PRTHEX:      ; display hl as a 16-bit number in hex.
0904   C5                     PUSH   bc   ; preserve the IP
0905   7C                     LD   a,h   
0906   CD 0F 09               CALL   prthex2   
0909   7D                     LD   a,l   
090A   CD 0F 09               CALL   prthex2   
090D   C1                     POP   bc   
090E   C9                     RET      
090F                PRTHEX2:      
090F   4F                     LD   c,a   
0910   1F                     RRA      
0911   1F                     RRA      
0912   1F                     RRA      
0913   1F                     RRA      
0914   CD 18 09               CALL   prthex3   
0917   79                     LD   a,c   
0918                PRTHEX3:      
0918   E6 0F                  AND   0x0F   
091A   C6 90                  ADD   a,0x90   
091C   27                     DAA      
091D   CE 40                  ADC   a,0x40   
091F   27                     DAA      
0920   C3 85 00               JP   putchar   
0923                PRTSTR0:      
0923   CD 85 00               CALL   putchar   
0926   23                     INC   hl   
0927                PRTSTR:      
0927   7E                     LD   a,(hl)   
0928   B7                     OR   a   
0929   20 F8                  JR   nz,prtstr0   
092B   C9                     RET      
092C                             ; **************************************************************************
092C                             ; calculate nesting value
092C                             ; a is char to be tested,
092C                             ; e is the nesting value (initially 0)
092C                             ; e is increased by ( and [
092C                             ; e is decreased by ) and ]
092C                             ; e has its bit 7 toggled by `
092C                             ; limited to 127 levels
092C                             ; **************************************************************************
092C                NESTING:      
092C   FE 22                  CP   DQUOTE   ; quote char
092E   28 06                  JR   z,nesting0   
0930   FE 60                  CP   "`"   ; quote char
0932   28 02                  JR   z,nesting0   
0934   18 0A                  JR   nesting1   
0936                NESTING0:      
0936   CB 7B                  BIT   7,e   
0938   28 03                  JR   z,nesting1a   
093A   CB BB                  RES   7,e   
093C   C9                     RET      
093D                NESTING1A:      
093D   CB FB                  SET   7,e   
093F   C9                     RET      
0940                NESTING1:      
0940   CB 7B                  BIT   7,e   
0942   C0                     RET   nz   
0943   FE 7B                  CP   "{"   
0945   28 08                  JR   z,nesting2   
0947   FE 5B                  CP   "["   
0949   28 04                  JR   z,nesting2   
094B   FE 28                  CP   "("   
094D   20 02                  JR   nz,nesting3   
094F                NESTING2:      
094F   1C                     INC   e   
0950   C9                     RET      
0951                NESTING3:      
0951   FE 7D                  CP   "}"   
0953   28 07                  JR   z,nesting4   
0955   FE 5D                  CP   "]"   
0957   28 03                  JR   z,nesting4   
0959   FE 29                  CP   ")"   
095B   C0                     RET   nz   
095C                NESTING4:      
095C   1D                     DEC   e   
095D   C9                     RET      
095E                PROMPT:      
095E   CD 6E 09               CALL   printStr   
0961   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0966   C9                     RET      
0967                CRLF:        
0967   CD 6E 09               CALL   printStr   
096A   0D 0A 00               .CSTR   "\r\n"   
096D   C9                     RET      
096E                             ; prints a null teminated string
096E                             ; the string should be immedaitely following the call
096E                PRINTSTR:      
096E   E3                     EX   (sp),hl   ; swap			
096F   CD 27 09               CALL   prtstr   
0972   23                     INC   hl   ; inc past NUL
0973   E3                     EX   (sp),hl   ; put it back	
0974   C9                     RET      
0975                INIT:        
0975   DD 2A EA 0C            LD   ix,(vNext)   
0979   FD 21 80 0B            LD   iy,STACK   
097D   21 80 01               LD   hl,isysVars   
0980   11 E6 0C               LD   de,sysVars   
0983   01 10 00               LD   bc,8 * 2   
0986   ED B0                  LDIR      
0988   21 00 0C               LD   hl,vars   ; 52 vars LO HI
098B   06 34                  LD   b,26*2   
098D   AF                     XOR   a   
098E                INIT0:       
098E   77                     LD   (hl),a   
098F   23                     INC   hl   
0990   10 FC                  DJNZ   init0   
0992   C9                     RET      
0993                START:       
0993   31 80 0B               LD   sp,STACK   ; start of monty
0996   CD 75 09               CALL   init   ; setups
0999   CD 6E 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
099C   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
09A9                INTERPRET:      
09A9   CD 5E 09               CALL   prompt   
09AC   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
09AF   ED 43 E8 0C            LD   (vTIBPtr),bc   
09B3                INTERPRET2:      ; calc nesting (a macro might have changed it)
09B3   1E 00                  LD   e,0   ; initilize nesting value
09B5   C5                     PUSH   bc   ; save offset into TIB,
09B6                             ; bc is also the count of chars in TIB
09B6   21 00 0D               LD   hl,TIB   ; hl is start of TIB
09B9   18 06                  JR   interpret4   
09BB                INTERPRET3:      
09BB   7E                     LD   a,(hl)   ; a = char in TIB
09BC   23                     INC   hl   ; inc pointer into TIB
09BD   0B                     DEC   bc   ; dec count of chars in TIB
09BE   CD 2C 09               CALL   nesting   ; update nesting value
09C1                INTERPRET4:      
09C1   79                     LD   a,c   ; is count zero?
09C2   B0                     OR   b   
09C3   20 F6                  JR   nz,interpret3   ; if not loop
09C5   C1                     POP   bc   ; restore offset into TIB
09C6                INTERPRET5:      
09C6   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
09C9   FE 20                  CP   $20   ; compare to space
09CB   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
09CD   FE 00                  CP   $0   ; is it end of string? NUL end of string
09CF                             ; ???? NEEDED?
09CF   28 27                  JR   z,interpret8   
09D1   FE 0D                  CP   "\r"   ; carriage return? ascii 13
09D3   28 10                  JR   z,interpret7   ; if anything else its macro/control
09D5                             ; macro
09D5                             ;  ld (vTIBPtr),bc
09D5                             ;  ld hl,ctrlCodes
09D5                             ;  add a,l			            ; look up key of macros
09D5                             ;  ld l,a
09D5                             ;  ld e,(hl)
09D5                             ;  ld a,e
09D5                             ;  or a
09D5                             ;  jr z,macro1
09D5                             ;  ld d,msb(macros)
09D5                             ;  push de
09D5                             ;  call call		            ; monty exec_ operation and jump to it
09D5                             ;  db DC1,0
09D5                             ; macro1:
09D5                             ;  ld bc,(vTIBPtr)
09D5   18 DC                  JR   interpret2   
09D7                INTERPRET6:      
09D7   21 00 0D               LD   hl,TIB   
09DA   09                     ADD   hl,bc   
09DB   77                     LD   (hl),a   ; store the character in textbuf
09DC   03                     INC   bc   
09DD   CD 85 00               CALL   putchar   ; echo character to screen
09E0   CD 2C 09               CALL   nesting   
09E3   18 E1                  JR   interpret5   ; wait for next character
09E5                INTERPRET7:      
09E5   21 00 0D               LD   hl,TIB   
09E8   09                     ADD   hl,bc   
09E9   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
09EB   23                     INC   hl   
09EC   36 0A                  LD   (hl),"\n"   
09EE   23                     INC   hl   
09EF   03                     INC   bc   
09F0   03                     INC   bc   
09F1   CD 67 09               CALL   crlf   ; echo character to screen
09F4   7B                     LD   a,e   ; if zero nesting append and ETX after \r
09F5   B7                     OR   a   
09F6   20 CE                  JR   nz,interpret5   
09F8                INTERPRET8:      
09F8   ED 43 E8 0C            LD   (vTIBPtr),bc   
09FC   01 00 0D               LD   bc,TIB   ; Instructions stored on heap at address HERE,
09FF                             ; we pressed enter
09FF   0B                     DEC   bc   
0A00                NEXT:        
0A00   03                     INC   bc   ; Increment the IP
0A01   0A                     LD   a,(bc)   ; Get the next character and dispatch
0A02   FE 20                  CP   " "   ; whitespace?
0A04   28 FA                  JR   z,next   ; space? ignore
0A06   38 07                  JR   c,next1   
0A08   6F                     LD   l,a   ; index into table
0A09   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0A0B   6E                     LD   l,(hl)   ; get low jump address
0A0C   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0A0E   E9                     JP   (hl)   ; Jump to routine
0A0F                NEXT1:       
0A0F   FE 00                  CP   NUL   ; end of input string?
0A11   28 03                  JR   z,exit_   
0A13   C3 A9 09               JP   interpret   ; no, other whitespace, macros?
0A16                EXIT_:       
0A16   60 69                  LD   hl,bc   
0A18   E9                     JP   (hl)   
0A19                ERROR:       
0A19   CD 6E 09               CALL   printStr   
0A1C   45 72 72 6F 72 20 00   .CSTR   "Error "   
0A23   CD BC 08               CALL   prtdec   
0A26   C3 A9 09               JP   interpret   
0A29                          ALIGN   $100   
0B00                             ; .org RAMSTART
0B00                          DS   DSIZE   
0B80                STACK:       
0B80                          ALIGN   $100   
0C00                VARS:        
0C00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
0CD0                RESTARTS:      
0CD0                RST08:    DS   2   
0CD2                RST10:    DS   2   
0CD4                RST18:    DS   2   
0CD6                RST20:    DS   2   
0CD8                RST28:    DS   2   
0CDA                RST30:    DS   2   ; 
0CDC                BAUD:     DS   2   ; 
0CDE                INTVEC:   DS   2   ; 
0CE0                NMIVEC:   DS   2   ; 
0CE2                GETCVEC:   DS   2   ; 
0CE4                PUTCVEC:   DS   2   ; 
0CE6                SYSVARS:      
0CE6                             ; initialised sys variables
0CE6                VDATAWIDTH:   DS   2   ; 
0CE8                VTIBPTR:   DS   2   ; 
0CEA                VNEXT:    DS   2   ; 
0CEC                VHEAPPTR:   DS   2   ; 
0CEE                             ; uninitialised sys variables
0CEE                VBLOCKEND:   DS   2   ; 
0CF0                VPOINTER:   DS   2   ; 
0CF2                VHASHSTR:   DS   2   ; 
0CF4                VLASTDEF:   DS   2   ; 
0CF6                VREMAIN:   DS   2   ; 
0CF8                VTEMP1:   DS   2   ; 
0CFA                VTEMP2:   DS   2   ; 
0CFC                TBPTR:    DS   2   ; reserved for tests
0CFE                          ALIGN   $100   
0D00                TIB:      DS   TIBSIZE   
0E00                          ALIGN   $100   
0E00                PAD:      DS   $100   
0F00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 56 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               08BA DEFINED AT LINE 1337 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1266 IN monty.asm
                    > USED AT LINE 1538 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 740 IN monty.asm
                    > USED AT LINE 747 IN monty.asm
                    > USED AT LINE 1348 IN monty.asm
                    > USED AT LINE 1389 IN monty.asm
                    > USED AT LINE 1413 IN monty.asm
                    > USED AT LINE 1416 IN monty.asm
                    > USED AT LINE 1569 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 46 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 798 IN monty.asm
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 803 IN monty.asm
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1605 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
DQUOTE:             0022 DEFINED AT LINE 27 IN monty.asm
                    > USED AT LINE 1104 IN monty.asm
                    > USED AT LINE 1435 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 29 IN monty.asm
MACROS:             0180 DEFINED AT LINE 61 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 66 IN monty.asm
                    > USED AT LINE 1493 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 74 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 76 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 110 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 213 IN monty.asm
ADD_:               0300 DEFINED AT LINE 215 IN monty.asm
ADDR_:              0303 DEFINED AT LINE 217 IN monty.asm
AND_:               0306 DEFINED AT LINE 219 IN monty.asm
ARG_:               0309 DEFINED AT LINE 221 IN monty.asm
ARG_LIST_:          030C DEFINED AT LINE 223 IN monty.asm
ARRBEGIN_:          030F DEFINED AT LINE 225 IN monty.asm
ARREND_:            0312 DEFINED AT LINE 227 IN monty.asm
ARRINDEX_:          0315 DEFINED AT LINE 229 IN monty.asm
BLOCK_:             0318 DEFINED AT LINE 231 IN monty.asm
BLOCKEND_:          031B DEFINED AT LINE 233 IN monty.asm
CHAR_:              031E DEFINED AT LINE 235 IN monty.asm
COMMAND_:           0321 DEFINED AT LINE 237 IN monty.asm
DOT_:               0324 DEFINED AT LINE 239 IN monty.asm
REMAIN_:            0327 DEFINED AT LINE 241 IN monty.asm
GO_:                032A DEFINED AT LINE 243 IN monty.asm
IDENTU_:            032D DEFINED AT LINE 245 IN monty.asm
IDENTL_:            0330 DEFINED AT LINE 247 IN monty.asm
IF_:                0333 DEFINED AT LINE 249 IN monty.asm
INV_:               0336 DEFINED AT LINE 251 IN monty.asm
MUL_:               033C DEFINED AT LINE 254 IN monty.asm
NOT_:               033F DEFINED AT LINE 256 IN monty.asm
NUM_:               0344 DEFINED AT LINE 259 IN monty.asm
                    > USED AT LINE 1131 IN monty.asm
HEXNUM_:            0347 DEFINED AT LINE 261 IN monty.asm
OR_:                034A DEFINED AT LINE 263 IN monty.asm
XOR_:               034D DEFINED AT LINE 265 IN monty.asm
STRING_:            0350 DEFINED AT LINE 267 IN monty.asm
SUB_:               0353 DEFINED AT LINE 269 IN monty.asm
EQ_:                0356 DEFINED AT LINE 271 IN monty.asm
EQ0:                0360 DEFINED AT LINE 278 IN monty.asm
                    > USED AT LINE 275 IN monty.asm
EQ1:                0361 DEFINED AT LINE 280 IN monty.asm
                    > USED AT LINE 258 IN monty.asm
GT_:                0365 DEFINED AT LINE 284 IN monty.asm
LT_:                0370 DEFINED AT LINE 293 IN monty.asm
LT1:                0379 DEFINED AT LINE 300 IN monty.asm
                    > USED AT LINE 291 IN monty.asm
DIV_:               0382 DEFINED AT LINE 306 IN monty.asm
NOP_:               0385 DEFINED AT LINE 308 IN monty.asm
ADD:                0387 DEFINED AT LINE 315 IN monty.asm
                    > USED AT LINE 216 IN monty.asm
ADD1:               0394 DEFINED AT LINE 323 IN monty.asm
                    > USED AT LINE 319 IN monty.asm
ADD2:               0395 DEFINED AT LINE 325 IN monty.asm
                    > USED AT LINE 322 IN monty.asm
ADD3:               0397 DEFINED AT LINE 328 IN monty.asm
                    > USED AT LINE 721 IN monty.asm
                    > USED AT LINE 1008 IN monty.asm
                    > USED AT LINE 1145 IN monty.asm
ADDR:               03A0 DEFINED AT LINE 336 IN monty.asm
                    > USED AT LINE 218 IN monty.asm
AND:                03AC DEFINED AT LINE 342 IN monty.asm
                    > USED AT LINE 220 IN monty.asm
AND1:               03B3 DEFINED AT LINE 350 IN monty.asm
                    > USED AT LINE 362 IN monty.asm
                    > USED AT LINE 372 IN monty.asm
OR:                 03B7 DEFINED AT LINE 354 IN monty.asm
                    > USED AT LINE 264 IN monty.asm
XOR:                03C0 DEFINED AT LINE 363 IN monty.asm
                    > USED AT LINE 266 IN monty.asm
XOR1:               03C1 DEFINED AT LINE 365 IN monty.asm
                    > USED AT LINE 253 IN monty.asm
ARG:                03C9 DEFINED AT LINE 377 IN monty.asm
                    > USED AT LINE 222 IN monty.asm
ARG0:               03E7 DEFINED AT LINE 398 IN monty.asm
                    > USED AT LINE 404 IN monty.asm
ARG0A:              03F0 DEFINED AT LINE 406 IN monty.asm
                    > USED AT LINE 383 IN monty.asm
                    > USED AT LINE 390 IN monty.asm
ARG1:               03F5 DEFINED AT LINE 409 IN monty.asm
                    > USED AT LINE 402 IN monty.asm
ARG1A:              03FD DEFINED AT LINE 416 IN monty.asm
                    > USED AT LINE 408 IN monty.asm
ARG_LIST:           0400 DEFINED AT LINE 425 IN monty.asm
                    > USED AT LINE 224 IN monty.asm
ARG_LIST1:          040A DEFINED AT LINE 432 IN monty.asm
                    > USED AT LINE 450 IN monty.asm
ARG_LIST2:          0416 DEFINED AT LINE 440 IN monty.asm
                    > USED AT LINE 437 IN monty.asm
ARG_LIST3:          041E DEFINED AT LINE 448 IN monty.asm
                    > USED AT LINE 439 IN monty.asm
                    > USED AT LINE 446 IN monty.asm
ARG_LIST4:          0421 DEFINED AT LINE 451 IN monty.asm
                    > USED AT LINE 435 IN monty.asm
ARG_LIST5:          0426 DEFINED AT LINE 456 IN monty.asm
                    > USED AT LINE 454 IN monty.asm
ARRBEGIN:           0432 DEFINED AT LINE 467 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
ARREND:             044E DEFINED AT LINE 481 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
ARREND1:            0468 DEFINED AT LINE 497 IN monty.asm
                    > USED AT LINE 513 IN monty.asm
ARREND2:            0478 DEFINED AT LINE 507 IN monty.asm
                    > USED AT LINE 503 IN monty.asm
ARRINDEX:           049C DEFINED AT LINE 534 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
ARRINDEX0:          04A4 DEFINED AT LINE 540 IN monty.asm
ARRINDEX1:          04A5 DEFINED AT LINE 542 IN monty.asm
                    > USED AT LINE 539 IN monty.asm
ARRINDEX2:          04B1 DEFINED AT LINE 551 IN monty.asm
                    > USED AT LINE 548 IN monty.asm
ASSIGN:             04B4 DEFINED AT LINE 556 IN monty.asm
                    > USED AT LINE 277 IN monty.asm
ASSIGN0:            04B6 DEFINED AT LINE 559 IN monty.asm
                    > USED AT LINE 330 IN monty.asm
ASSIGNX:            04B7 DEFINED AT LINE 561 IN monty.asm
ASSIGN1:            04C3 DEFINED AT LINE 569 IN monty.asm
                    > USED AT LINE 566 IN monty.asm
BLOCK:              04C5 DEFINED AT LINE 572 IN monty.asm
                    > USED AT LINE 232 IN monty.asm
BLOCK1:             04C9 DEFINED AT LINE 576 IN monty.asm
                    > USED AT LINE 580 IN monty.asm
                    > USED AT LINE 602 IN monty.asm
                    > USED AT LINE 605 IN monty.asm
                    > USED AT LINE 610 IN monty.asm
                    > USED AT LINE 614 IN monty.asm
BLOCK2:             04F5 DEFINED AT LINE 603 IN monty.asm
                    > USED AT LINE 590 IN monty.asm
                    > USED AT LINE 592 IN monty.asm
                    > USED AT LINE 594 IN monty.asm
BLOCK3:             04F8 DEFINED AT LINE 606 IN monty.asm
                    > USED AT LINE 597 IN monty.asm
                    > USED AT LINE 599 IN monty.asm
                    > USED AT LINE 601 IN monty.asm
BLOCK4:             0500 DEFINED AT LINE 612 IN monty.asm
                    > USED AT LINE 583 IN monty.asm
                    > USED AT LINE 585 IN monty.asm
                    > USED AT LINE 587 IN monty.asm
BLOCK5:             0503 DEFINED AT LINE 615 IN monty.asm
                    > USED AT LINE 611 IN monty.asm
BLOCK6:             052B DEFINED AT LINE 634 IN monty.asm
                    > USED AT LINE 621 IN monty.asm
BLOCKEND:           052E DEFINED AT LINE 638 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
                    > USED AT LINE 1328 IN monty.asm
BLOCKEND1:          055A DEFINED AT LINE 660 IN monty.asm
                    > USED AT LINE 653 IN monty.asm
BLOCKEND2:          0566 DEFINED AT LINE 667 IN monty.asm
                    > USED AT LINE 659 IN monty.asm
BLOCKEND3:          0578 DEFINED AT LINE 681 IN monty.asm
                    > USED AT LINE 673 IN monty.asm
CHAR:               0583 DEFINED AT LINE 692 IN monty.asm
                    > USED AT LINE 236 IN monty.asm
CHAR1:              0586 DEFINED AT LINE 694 IN monty.asm
                    > USED AT LINE 705 IN monty.asm
CHAR2:              0592 DEFINED AT LINE 703 IN monty.asm
                    > USED AT LINE 700 IN monty.asm
CHAR3:              0595 DEFINED AT LINE 706 IN monty.asm
                    > USED AT LINE 698 IN monty.asm
DIV:                0598 DEFINED AT LINE 710 IN monty.asm
                    > USED AT LINE 307 IN monty.asm
DOT:                05AB DEFINED AT LINE 723 IN monty.asm
                    > USED AT LINE 240 IN monty.asm
DOT1:               05B7 DEFINED AT LINE 731 IN monty.asm
                    > USED AT LINE 728 IN monty.asm
DOT2:               05C0 DEFINED AT LINE 736 IN monty.asm
                    > USED AT LINE 733 IN monty.asm
DOT3:               05CA DEFINED AT LINE 742 IN monty.asm
                    > USED AT LINE 738 IN monty.asm
DOT4:               05CE DEFINED AT LINE 745 IN monty.asm
                    > USED AT LINE 730 IN monty.asm
                    > USED AT LINE 735 IN monty.asm
                    > USED AT LINE 741 IN monty.asm
DIVIDE:             05D5 DEFINED AT LINE 753 IN monty.asm
                    > USED AT LINE 715 IN monty.asm
DIVIDE1:            05DA DEFINED AT LINE 756 IN monty.asm
                    > USED AT LINE 768 IN monty.asm
DIVIDE2:            05E7 DEFINED AT LINE 764 IN monty.asm
                    > USED AT LINE 761 IN monty.asm
DIVIDE3:            05E8 DEFINED AT LINE 766 IN monty.asm
                    > USED AT LINE 763 IN monty.asm
EQUALS:             05EE DEFINED AT LINE 774 IN monty.asm
                    > USED AT LINE 282 IN monty.asm
LESSTHANEQ:         05F6 DEFINED AT LINE 782 IN monty.asm
                    > USED AT LINE 302 IN monty.asm
LESSTHAN:           05FB DEFINED AT LINE 789 IN monty.asm
                    > USED AT LINE 304 IN monty.asm
LESSTHAN1:          0600 DEFINED AT LINE 794 IN monty.asm
                    > USED AT LINE 785 IN monty.asm
TRUE1:              0603 DEFINED AT LINE 797 IN monty.asm
                    > USED AT LINE 777 IN monty.asm
                    > USED AT LINE 1176 IN monty.asm
NULL1:              0609 DEFINED AT LINE 801 IN monty.asm
FALSE1:             0609 DEFINED AT LINE 802 IN monty.asm
                    > USED AT LINE 778 IN monty.asm
                    > USED AT LINE 792 IN monty.asm
                    > USED AT LINE 795 IN monty.asm
                    > USED AT LINE 1164 IN monty.asm
GO:                 060F DEFINED AT LINE 810 IN monty.asm
                    > USED AT LINE 244 IN monty.asm
                    > USED AT LINE 1291 IN monty.asm
GO1:                0610 DEFINED AT LINE 812 IN monty.asm
                    > USED AT LINE 983 IN monty.asm
                    > USED AT LINE 985 IN monty.asm
                    > USED AT LINE 1303 IN monty.asm
GO2:                0616 DEFINED AT LINE 817 IN monty.asm
                    > USED AT LINE 815 IN monty.asm
GO3:                063D DEFINED AT LINE 838 IN monty.asm
                    > USED AT LINE 820 IN monty.asm
GO4:                0656 DEFINED AT LINE 857 IN monty.asm
                    > USED AT LINE 867 IN monty.asm
GO5:                065C DEFINED AT LINE 864 IN monty.asm
                    > USED AT LINE 856 IN monty.asm
GO6:                0667 DEFINED AT LINE 870 IN monty.asm
                    > USED AT LINE 846 IN monty.asm
GO7:                067F DEFINED AT LINE 887 IN monty.asm
                    > USED AT LINE 884 IN monty.asm
GO8:                0685 DEFINED AT LINE 893 IN monty.asm
                    > USED AT LINE 897 IN monty.asm
GO9:                068A DEFINED AT LINE 898 IN monty.asm
                    > USED AT LINE 892 IN monty.asm
GO10:               0698 DEFINED AT LINE 910 IN monty.asm
                    > USED AT LINE 830 IN monty.asm
                    > USED AT LINE 886 IN monty.asm
GO11:               069D DEFINED AT LINE 914 IN monty.asm
                    > USED AT LINE 837 IN monty.asm
GO12:               069E DEFINED AT LINE 916 IN monty.asm
                    > USED AT LINE 909 IN monty.asm
HEXNUM:             06AB DEFINED AT LINE 924 IN monty.asm
                    > USED AT LINE 262 IN monty.asm
HEXNUM1:            06AE DEFINED AT LINE 926 IN monty.asm
                    > USED AT LINE 943 IN monty.asm
HEXNUM2:            06B6 DEFINED AT LINE 932 IN monty.asm
                    > USED AT LINE 930 IN monty.asm
IDENTU:             06C8 DEFINED AT LINE 944 IN monty.asm
                    > USED AT LINE 246 IN monty.asm
IDENTL:             06CD DEFINED AT LINE 948 IN monty.asm
                    > USED AT LINE 248 IN monty.asm
IDENT1:             06D2 DEFINED AT LINE 952 IN monty.asm
                    > USED AT LINE 947 IN monty.asm
IF:                 06DF DEFINED AT LINE 965 IN monty.asm
                    > USED AT LINE 250 IN monty.asm
IFTE:               06EB DEFINED AT LINE 975 IN monty.asm
                    > USED AT LINE 969 IN monty.asm
IFTE1:              06EC DEFINED AT LINE 977 IN monty.asm
                    > USED AT LINE 972 IN monty.asm
MUL:                06F8 DEFINED AT LINE 987 IN monty.asm
                    > USED AT LINE 255 IN monty.asm
MUL2:               06FA DEFINED AT LINE 990 IN monty.asm
MUL3:               0702 DEFINED AT LINE 995 IN monty.asm
                    > USED AT LINE 1004 IN monty.asm
NUM:                0716 DEFINED AT LINE 1010 IN monty.asm
                    > USED AT LINE 260 IN monty.asm
NUM0:               071F DEFINED AT LINE 1016 IN monty.asm
                    > USED AT LINE 1014 IN monty.asm
NUM1:               0720 DEFINED AT LINE 1018 IN monty.asm
                    > USED AT LINE 1035 IN monty.asm
NUM2:               0738 DEFINED AT LINE 1036 IN monty.asm
                    > USED AT LINE 934 IN monty.asm
                    > USED AT LINE 936 IN monty.asm
                    > USED AT LINE 1021 IN monty.asm
                    > USED AT LINE 1023 IN monty.asm
NUM3:               0743 DEFINED AT LINE 1044 IN monty.asm
                    > USED AT LINE 1039 IN monty.asm
REMAIN:             0746 DEFINED AT LINE 1048 IN monty.asm
                    > USED AT LINE 242 IN monty.asm
SHIFTLEFT:          074C DEFINED AT LINE 1055 IN monty.asm
                    > USED AT LINE 297 IN monty.asm
SHIFTLEFT1:         0754 DEFINED AT LINE 1062 IN monty.asm
                    > USED AT LINE 1065 IN monty.asm
SHIFTLEFT2:         0755 DEFINED AT LINE 1064 IN monty.asm
                    > USED AT LINE 1061 IN monty.asm
SHIFTRIGHT:         075C DEFINED AT LINE 1072 IN monty.asm
                    > USED AT LINE 288 IN monty.asm
SHIFTRIGHT1:        0764 DEFINED AT LINE 1079 IN monty.asm
                    > USED AT LINE 1083 IN monty.asm
SHIFTRIGHT2:        0768 DEFINED AT LINE 1082 IN monty.asm
                    > USED AT LINE 1078 IN monty.asm
STRING:             076F DEFINED AT LINE 1091 IN monty.asm
                    > USED AT LINE 268 IN monty.asm
STRING1:            0778 DEFINED AT LINE 1098 IN monty.asm
                    > USED AT LINE 1105 IN monty.asm
                    > USED AT LINE 1107 IN monty.asm
STRING2:            077B DEFINED AT LINE 1102 IN monty.asm
                    > USED AT LINE 1097 IN monty.asm
SUB:                0797 DEFINED AT LINE 1124 IN monty.asm
                    > USED AT LINE 270 IN monty.asm
SUB0:               07A3 DEFINED AT LINE 1132 IN monty.asm
                    > USED AT LINE 1129 IN monty.asm
SUB1:               07AF DEFINED AT LINE 1139 IN monty.asm
                    > USED AT LINE 1135 IN monty.asm
SUB3:               07B0 DEFINED AT LINE 1141 IN monty.asm
                    > USED AT LINE 1138 IN monty.asm
COMMAND:            07B7 DEFINED AT LINE 1150 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
ABS1:               0805 DEFINED AT LINE 1185 IN monty.asm
                    > USED AT LINE 1156 IN monty.asm
CLOSURE:            0812 DEFINED AT LINE 1200 IN monty.asm
                    > USED AT LINE 1160 IN monty.asm
COMMENT:            0832 DEFINED AT LINE 1216 IN monty.asm
                    > USED AT LINE 1154 IN monty.asm
                    > USED AT LINE 1220 IN monty.asm
BYTES:              083B DEFINED AT LINE 1224 IN monty.asm
                    > USED AT LINE 1158 IN monty.asm
BYTES1:             083E DEFINED AT LINE 1226 IN monty.asm
                    > USED AT LINE 1307 IN monty.asm
FUNC:               0843 DEFINED AT LINE 1231 IN monty.asm
                    > USED AT LINE 1162 IN monty.asm
INPUT:              085F DEFINED AT LINE 1255 IN monty.asm
                    > USED AT LINE 1166 IN monty.asm
KEY:                086A DEFINED AT LINE 1265 IN monty.asm
                    > USED AT LINE 1168 IN monty.asm
OUTPUT:             0873 DEFINED AT LINE 1274 IN monty.asm
                    > USED AT LINE 1170 IN monty.asm
REPEAT:             087C DEFINED AT LINE 1285 IN monty.asm
                    > USED AT LINE 1172 IN monty.asm
SELECT:             0884 DEFINED AT LINE 1295 IN monty.asm
                    > USED AT LINE 1174 IN monty.asm
WORDS:              088E DEFINED AT LINE 1305 IN monty.asm
                    > USED AT LINE 1178 IN monty.asm
BLOCKEXIT:          0894 DEFINED AT LINE 1309 IN monty.asm
                    > USED AT LINE 1180 IN monty.asm
BLOCKEXIT1:         089B DEFINED AT LINE 1315 IN monty.asm
                    > USED AT LINE 1313 IN monty.asm
FILTER:             08BA DEFINED AT LINE 1335 IN monty.asm
MAP:                08BA DEFINED AT LINE 1336 IN monty.asm
PRTDEC:             08BC DEFINED AT LINE 1344 IN monty.asm
                    > USED AT LINE 744 IN monty.asm
                    > USED AT LINE 1615 IN monty.asm
PRTDEC0:            08CB DEFINED AT LINE 1355 IN monty.asm
                    > USED AT LINE 1346 IN monty.asm
PRTDEC1:            08ED DEFINED AT LINE 1371 IN monty.asm
                    > USED AT LINE 1359 IN monty.asm
                    > USED AT LINE 1361 IN monty.asm
                    > USED AT LINE 1363 IN monty.asm
                    > USED AT LINE 1365 IN monty.asm
                    > USED AT LINE 1368 IN monty.asm
PRTDEC2:            08EF DEFINED AT LINE 1373 IN monty.asm
                    > USED AT LINE 1376 IN monty.asm
PRTDEC3:            08FF DEFINED AT LINE 1385 IN monty.asm
                    > USED AT LINE 1380 IN monty.asm
PRTDEC4:            0900 DEFINED AT LINE 1387 IN monty.asm
                    > USED AT LINE 1384 IN monty.asm
PRTHEX:             0904 DEFINED AT LINE 1391 IN monty.asm
                    > USED AT LINE 729 IN monty.asm
PRTHEX2:            090F DEFINED AT LINE 1399 IN monty.asm
                    > USED AT LINE 1394 IN monty.asm
                    > USED AT LINE 1396 IN monty.asm
PRTHEX3:            0918 DEFINED AT LINE 1407 IN monty.asm
                    > USED AT LINE 1405 IN monty.asm
PRTSTR0:            0923 DEFINED AT LINE 1415 IN monty.asm
                    > USED AT LINE 1421 IN monty.asm
PRTSTR:             0927 DEFINED AT LINE 1418 IN monty.asm
                    > USED AT LINE 734 IN monty.asm
                    > USED AT LINE 1485 IN monty.asm
NESTING:            092C DEFINED AT LINE 1434 IN monty.asm
                    > USED AT LINE 1529 IN monty.asm
                    > USED AT LINE 1570 IN monty.asm
NESTING0:           0936 DEFINED AT LINE 1440 IN monty.asm
                    > USED AT LINE 1436 IN monty.asm
                    > USED AT LINE 1438 IN monty.asm
NESTING1A:          093D DEFINED AT LINE 1445 IN monty.asm
                    > USED AT LINE 1442 IN monty.asm
NESTING1:           0940 DEFINED AT LINE 1448 IN monty.asm
                    > USED AT LINE 1439 IN monty.asm
NESTING2:           094F DEFINED AT LINE 1457 IN monty.asm
                    > USED AT LINE 1452 IN monty.asm
                    > USED AT LINE 1454 IN monty.asm
NESTING3:           0951 DEFINED AT LINE 1460 IN monty.asm
                    > USED AT LINE 1456 IN monty.asm
NESTING4:           095C DEFINED AT LINE 1467 IN monty.asm
                    > USED AT LINE 1462 IN monty.asm
                    > USED AT LINE 1464 IN monty.asm
PROMPT:             095E DEFINED AT LINE 1471 IN monty.asm
                    > USED AT LINE 1513 IN monty.asm
CRLF:               0967 DEFINED AT LINE 1476 IN monty.asm
                    > USED AT LINE 1582 IN monty.asm
PRINTSTR:           096E DEFINED AT LINE 1483 IN monty.asm
                    > USED AT LINE 1472 IN monty.asm
                    > USED AT LINE 1477 IN monty.asm
                    > USED AT LINE 1509 IN monty.asm
                    > USED AT LINE 1613 IN monty.asm
INIT:               0975 DEFINED AT LINE 1490 IN monty.asm
                    > USED AT LINE 7
                    > USED AT LINE 1508 IN monty.asm
INIT0:              098E DEFINED AT LINE 1500 IN monty.asm
                    > USED AT LINE 1503 IN monty.asm
START:              0993 DEFINED AT LINE 1506 IN monty.asm
                    > USED AT LINE 8
INTERPRET:          09A9 DEFINED AT LINE 1512 IN monty.asm
                    > USED AT LINE 1607 IN monty.asm
                    > USED AT LINE 1616 IN monty.asm
INTERPRET2:         09B3 DEFINED AT LINE 1518 IN monty.asm
                    > USED AT LINE 1562 IN monty.asm
INTERPRET3:         09BB DEFINED AT LINE 1525 IN monty.asm
                    > USED AT LINE 1534 IN monty.asm
INTERPRET4:         09C1 DEFINED AT LINE 1531 IN monty.asm
                    > USED AT LINE 1523 IN monty.asm
INTERPRET5:         09C6 DEFINED AT LINE 1537 IN monty.asm
                    > USED AT LINE 1571 IN monty.asm
                    > USED AT LINE 1585 IN monty.asm
INTERPRET6:         09D7 DEFINED AT LINE 1564 IN monty.asm
                    > USED AT LINE 1540 IN monty.asm
INTERPRET7:         09E5 DEFINED AT LINE 1573 IN monty.asm
                    > USED AT LINE 1545 IN monty.asm
INTERPRET8:         09F8 DEFINED AT LINE 1587 IN monty.asm
                    > USED AT LINE 1543 IN monty.asm
NEXT:               0A00 DEFINED AT LINE 1593 IN monty.asm
                    > USED AT LINE 69 IN monty.asm
                    > USED AT LINE 1597 IN monty.asm
NEXT1:              0A0F DEFINED AT LINE 1604 IN monty.asm
                    > USED AT LINE 1598 IN monty.asm
EXIT_:              0A16 DEFINED AT LINE 1608 IN monty.asm
                    > USED AT LINE 1606 IN monty.asm
ERROR:              0A19 DEFINED AT LINE 1612 IN monty.asm
                    > USED AT LINE 1183 IN monty.asm
STACK:              0B80 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 823 IN monty.asm
                    > USED AT LINE 1492 IN monty.asm
                    > USED AT LINE 1507 IN monty.asm
VARS:               0C00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1497 IN monty.asm
RESTARTS:           0CD0 DEFINED AT LINE 11 IN ram.asm
RST08:              0CD0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              0CD2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              0CD4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              0CD6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              0CD8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              0CDA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               0CDC DEFINED AT LINE 19 IN ram.asm
INTVEC:             0CDE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             0CE0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            0CE2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            0CE4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            0CE6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1494 IN monty.asm
VDATAWIDTH:         0CE6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 501 IN monty.asm
                    > USED AT LINE 537 IN monty.asm
                    > USED AT LINE 564 IN monty.asm
                    > USED AT LINE 1227 IN monty.asm
VTIBPTR:            0CE8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1516 IN monty.asm
                    > USED AT LINE 1588 IN monty.asm
VNEXT:              0CEA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1491 IN monty.asm
VHEAPPTR:           0CEC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 427 IN monty.asm
                    > USED AT LINE 458 IN monty.asm
                    > USED AT LINE 491 IN monty.asm
                    > USED AT LINE 523 IN monty.asm
                    > USED AT LINE 524 IN monty.asm
                    > USED AT LINE 629 IN monty.asm
                    > USED AT LINE 632 IN monty.asm
                    > USED AT LINE 1092 IN monty.asm
                    > USED AT LINE 1111 IN monty.asm
                    > USED AT LINE 1202 IN monty.asm
                    > USED AT LINE 1207 IN monty.asm
                    > USED AT LINE 1208 IN monty.asm
                    > USED AT LINE 1233 IN monty.asm
                    > USED AT LINE 1248 IN monty.asm
                    > USED AT LINE 1250 IN monty.asm
VBLOCKEND:          0CEE DEFINED AT LINE 36 IN ram.asm
VPOINTER:           0CF0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 337 IN monty.asm
                    > USED AT LINE 339 IN monty.asm
                    > USED AT LINE 340 IN monty.asm
                    > USED AT LINE 412 IN monty.asm
                    > USED AT LINE 544 IN monty.asm
                    > USED AT LINE 562 IN monty.asm
                    > USED AT LINE 956 IN monty.asm
VHASHSTR:           0CF2 DEFINED AT LINE 38 IN ram.asm
VLASTDEF:           0CF4 DEFINED AT LINE 39 IN ram.asm
VREMAIN:            0CF6 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 717 IN monty.asm
                    > USED AT LINE 1049 IN monty.asm
VTEMP1:             0CF8 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 484 IN monty.asm
                    > USED AT LINE 525 IN monty.asm
                    > USED AT LINE 624 IN monty.asm
                    > USED AT LINE 633 IN monty.asm
                    > USED AT LINE 847 IN monty.asm
                    > USED AT LINE 868 IN monty.asm
                    > USED AT LINE 875 IN monty.asm
                    > USED AT LINE 881 IN monty.asm
                    > USED AT LINE 1203 IN monty.asm
                    > USED AT LINE 1206 IN monty.asm
VTEMP2:             0CFA DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 848 IN monty.asm
                    > USED AT LINE 869 IN monty.asm
TBPTR:              0CFC DEFINED AT LINE 43 IN ram.asm
TIB:                0D00 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 1522 IN monty.asm
                    > USED AT LINE 1565 IN monty.asm
                    > USED AT LINE 1574 IN monty.asm
                    > USED AT LINE 1589 IN monty.asm
PAD:                0E00 DEFINED AT LINE 49 IN ram.asm
HEAP:               0F00 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 70 IN monty.asm
                    > USED AT LINE 617 IN monty.asm
