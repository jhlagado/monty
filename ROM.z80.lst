0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 21               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 21               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 21               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 21               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 21               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 21               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 21               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 21               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 21               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 21               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 20               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 21               LD   (RST08),HL   
0094   22 D2 21               LD   (RST10),HL   
0097   22 D4 21               LD   (RST18),HL   
009A   22 D6 21               LD   (RST20),HL   
009D   22 D8 21               LD   (RST28),HL   
00A0   22 DA 21               LD   (RST30),HL   
00A3   22 DE 21               LD   (INTVEC),HL   
00A6   22 E0 21               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 21               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 21               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 80 20               LD   sp,STACK   
00C6   CD 83 0B               CALL   init   
00C9   C3 A1 0B               JP   start   
00CC                             ; 
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                STKSIZE:   EQU   $80   ; Stack size
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                BUFSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                NUL:      EQU   0   ; exit code
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                CTRL_C:   EQU   3   
00CC                CTRL_E:   EQU   5   
00CC                CTRL_H:   EQU   8   
00CC                CTRL_J:   EQU   10   
00CC                CTRL_L:   EQU   12   
00CC                CTRL_P:   EQU   16   
00CC                CTRL_S:   EQU   19   
00CC                ESC:      EQU   27   
00CC                TRESERV:   EQU   0   ; reserved
00CC                TNUMBER:   EQU   1   ; number
00CC                TSTRING:   EQU   2   ; string
00CC                TPOINTER:   EQU   3   ; pointer
00CC                TARRAY:   EQU   4   ; array
00CC                TBLOCK:   EQU   5   ; block
00CC                TFUNC:    EQU   6   ; function
00CC                TARGLST:   EQU   7   ; arglist
00CC                             ; z80_RST8    equ     $CF
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   00 23                  DW   TIB   ; vTIBPtr pointer into TIB
0184   00 24                  DW   BUF   ; vBUFPtr pointer into BUF
0186   27 0C                  DW   next   ; nNext
0188   00 26                  DW   HEAP   ; vHeapPtr \h start of the free mem
018A                          ALIGN   $100   
0200                OPCODES:      ; still available ~ `
0200   85                     DB   lsb(nop_)   ; SP
0201   39                     DB   lsb(bang_)   ; !
0202   4D                     DB   lsb(dblquote_)   ; "
0203   41                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1E                     DB   lsb(tick_)   ; '
0208   6D                     DB   lsb(lparen_)   ; (
0209   87                     DB   lsb(rparen_)   ; )
020A   36                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   4A                     DB   lsb(comma_)   ; ,
020D   50                     DB   lsb(minus_)   ; -
020E   24                     DB   lsb(dot_)   ; .
020F   82                     DB   lsb(slash_)   ; /	
0210   3E                     DB   lsb(num_)   ; 0
0211   3E                     DB   lsb(num_)   ; 1
0212   3E                     DB   lsb(num_)   ; 2
0213   3E                     DB   lsb(num_)   ; 3
0214   3E                     DB   lsb(num_)   ; 4
0215   3E                     DB   lsb(num_)   ; 5
0216   3E                     DB   lsb(num_)   ; 6
0217   3E                     DB   lsb(num_)   ; 7
0218   3E                     DB   lsb(num_)   ; 8
0219   3E                     DB   lsb(num_)   ; 9
021A   2A                     DB   lsb(colon_)   ; :
021B   21                     DB   lsb(semicolon_)   ; ;
021C   70                     DB   lsb(lt_)   ; <
021D   53                     DB   lsb(eq_)   ; =
021E   62                     DB   lsb(gt_)   ; >
021F   33                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   2D                     DB   lsb(upcase_)   ; A
0222   2D                     DB   lsb(upcase_)   ; B
0223   2D                     DB   lsb(upcase_)   ; C
0224   2D                     DB   lsb(upcase_)   ; D
0225   2D                     DB   lsb(upcase_)   ; E
0226   2D                     DB   lsb(upcase_)   ; F
0227   2D                     DB   lsb(upcase_)   ; G
0228   2D                     DB   lsb(upcase_)   ; h
0229   2D                     DB   lsb(upcase_)   ; I
022A   2D                     DB   lsb(upcase_)   ; J
022B   2D                     DB   lsb(upcase_)   ; K
022C   2D                     DB   lsb(upcase_)   ; L
022D   2D                     DB   lsb(upcase_)   ; M
022E   2D                     DB   lsb(upcase_)   ; N
022F   2D                     DB   lsb(upcase_)   ; O
0230   2D                     DB   lsb(upcase_)   ; p
0231   2D                     DB   lsb(upcase_)   ; Q
0232   2D                     DB   lsb(upcase_)   ; R
0233   2D                     DB   lsb(upcase_)   ; S
0234   2D                     DB   lsb(upcase_)   ; T
0235   2D                     DB   lsb(upcase_)   ; U
0236   2D                     DB   lsb(upcase_)   ; V
0237   2D                     DB   lsb(upcase_)   ; W
0238   2D                     DB   lsb(upcase_)   ; X
0239   2D                     DB   lsb(upcase_)   ; Y
023A   2D                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   15                     DB   lsb(backslash_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   47                     DB   lsb(caret_)   ; ^
023F   27                     DB   lsb(underscore_)   ; _
0240   4D                     DB   lsb(dblquote_)   ; `     used for testing string   	
0241   30                     DB   lsb(lowcase_)   ; a
0242   30                     DB   lsb(lowcase_)   ; b
0243   30                     DB   lsb(lowcase_)   ; c
0244   30                     DB   lsb(lowcase_)   ; d
0245   30                     DB   lsb(lowcase_)   ; e
0246   30                     DB   lsb(lowcase_)   ; f
0247   30                     DB   lsb(lowcase_)   ; g
0248   30                     DB   lsb(lowcase_)   ; h
0249   30                     DB   lsb(lowcase_)   ; i
024A   30                     DB   lsb(lowcase_)   ; j
024B   30                     DB   lsb(lowcase_)   ; k
024C   30                     DB   lsb(lowcase_)   ; l
024D   30                     DB   lsb(lowcase_)   ; m
024E   30                     DB   lsb(lowcase_)   ; n
024F   30                     DB   lsb(lowcase_)   ; o
0250   30                     DB   lsb(lowcase_)   ; p
0251   30                     DB   lsb(lowcase_)   ; q
0252   30                     DB   lsb(lowcase_)   ; r
0253   30                     DB   lsb(lowcase_)   ; s
0254   30                     DB   lsb(lowcase_)   ; t
0255   30                     DB   lsb(lowcase_)   ; u
0256   30                     DB   lsb(lowcase_)   ; v
0257   30                     DB   lsb(lowcase_)   ; w
0258   30                     DB   lsb(lowcase_)   ; x
0259   30                     DB   lsb(lowcase_)   ; y
025A   30                     DB   lsb(lowcase_)   ; z
025B   18                     DB   lsb(lbrace_)   ; {
025C   44                     DB   lsb(pipe_)   ; |
025D   1B                     DB   lsb(rbrace_)   ; }
025E   85                     DB   lsb(nop_)   ; ~
025F   85                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 8A 03               JP   plus   
0303                AT_:         
0303   C3 9C 03               JP   at   
0306                AMPER_:      
0306   C3 A6 03               JP   amper   
0309                DOLLAR_:      
0309   C3 CA 03               JP   dollar   
030C                LBRACK_:      
030C   C3 01 04               JP   lbrack   
030F                RBRACK_:      
030F   C3 1D 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 70 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 AA 05               JP   backslash   
0318                LBRACE_:      
0318   C3 D0 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 39 05               JP   rbrace   
031E                TICK_:       
031E   C3 95 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 C4 07               JP   semicolon   
0324                DOT_:        
0324   C3 D9 05               JP   dot   
0327                UNDERSCORE_:      
0327   C3 B6 07               JP   underscore   
032A                COLON_:      
032A   C3 99 04               JP   colon   
032D                UPCASE_:      
032D   C3 3A 07               JP   upcase   
0330                LOWCASE_:      
0330   C3 3F 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 51 07               JP   question   
0336                STAR_:       
0336   C3 6A 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 86 07               JP   num   
0341                HASH_:       
0341   C3 1D 07               JP   hash   
0344                PIPE_:       
0344   C3 B1 03               JP   pipe   
0347                CARET_:      
0347   C3 7B 06               JP   caret   
034A                COMMA_:      
034A   C3 AC 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 03 08               JP   dblquote   
0350                MINUS_:      
0350   C3 2B 08               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 88 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 57 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA F0 07               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 0C                  JR   lt1   
036D                LPAREN_:      
036D   C3 78 06               JP   lparen   
0370                LT_:         
0370   03                     INC   bc   
0371   0A                     LD   a,(bc)   
0372   FE 3C                  CP   "<"   
0374   CA E0 07               JP   z,shiftLeft   
0377   E1                     POP   hl   
0378   D1                     POP   de   
0379                LT1:         
0379   FE 3D                  CP   "="   
037B   CA 5F 06               JP   z,lessthaneq   
037E   0B                     DEC   bc   
037F   C3 64 06               JP   lessthan   
0382                SLASH_:      
0382   C3 BB 05               JP   slash   
0385                NOP_:        
0385   DD E9                  JP   (ix)   
0387                RPAREN_:      
0387   C3 BC 07               JP   rparen   
038A                             ;*******************************************************************
038A                             ; implementations
038A                             ;*******************************************************************
038A                PLUS:        
038A                ADD:         
038A   03                     INC   bc   
038B   0A                     LD   a,(bc)   
038C   FE 2B                  CP   "+"   ; ++ increment variable
038E   20 05                  JR   nz,add1   
0390   E1                     POP   hl   
0391   23                     INC   hl   
0392   C3 8A 04               JP   assign0   
0395                ADD1:        
0395   0B                     DEC   bc   
0396   D1                     POP   de   ; second term
0397   E1                     POP   hl   ; first term
0398   19                     ADD   hl,de   
0399                ADD3:        
0399                             ; inc bc
0399                             ; ld a,(bc)
0399                             ; cp "="                      ; += add to variable
0399                             ; jp z,assign0
0399   E5                     PUSH   hl   
039A                             ; dec bc
039A   DD E9                  JP   (ix)   
039C                             ; @ addr
039C                             ; -- ptr
039C                AT:          
039C                ADDR:        
039C   ED 5B F0 21            LD   de,(vPointer)   
03A0   21 F0 21               LD   hl,vPointer   
03A3   C3 AD 0A               JP   variable   
03A6                AMPER:       
03A6                AND:         
03A6   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A7   E1                     POP   hl   
03A8   7B                     LD   a,e   
03A9   A5                     AND   l   
03AA   6F                     LD   l,a   
03AB   7A                     LD   a,d   
03AC   A4                     AND   h   
03AD                AND1:        
03AD   67                     LD   h,a   
03AE   E5                     PUSH   hl   
03AF   DD E9                  JP   (ix)   
03B1                PIPE:        
03B1                OR:          
03B1   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03B2   E1                     POP   hl   
03B3   7B                     LD   a,e   
03B4   B5                     OR   l   
03B5   6F                     LD   l,a   
03B6   7A                     LD   a,d   
03B7   B4                     OR   h   
03B8   18 F3                  JR   and1   
03BA                XOR:         
03BA   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03BB                XOR1:        
03BB   E1                     POP   hl   
03BC   7B                     LD   a,e   
03BD   AD                     XOR   l   
03BE   6F                     LD   l,a   
03BF   7A                     LD   a,d   
03C0   AC                     XOR   h   
03C1   67                     LD   h,a   
03C2   E5                     PUSH   hl   
03C3   DD E9                  JP   (ix)   
03C5                INVERT:      ; Bitwise INVert the top member of the stack
03C5   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C8   18 F1                  JR   xor1   
03CA                             ; $a .. $z
03CA                             ; -- value
03CA                             ; returns value of arg
03CA                DOLLAR:      
03CA                ARG:         
03CA   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03CD   FD 56 05               LD   d,(iy+5)   
03D0   EB                     EX   de,hl   
03D1   7D                     LD   a,l   ; arg_list* == null, skip
03D2   B4                     OR   h   
03D3   28 1C                  JR   z,arg0a   
03D5   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D6   2B                     DEC   hl   
03D7   7E                     LD   a,(hl)   
03D8   23                     INC   hl   
03D9   23                     INC   hl   
03DA   B7                     OR   a   
03DB   28 14                  JR   z,arg0a   ; num_args == 0, skip
03DD   5F                     LD   e,a   ; e = a = num_args
03DE   03                     INC   bc   ; a = next char = dollar_name
03DF   0A                     LD   a,(bc)   
03E0   C5                     PUSH   bc   ; save IP
03E1   43                     LD   b,e   ; b = e = num_args
03E2   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E5   FD 56 03               LD   d,(iy+3)   
03E8                ARG0:        
03E8   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E9   1B                     DEC   de   
03EA   BE                     CP   (hl)   
03EB   28 09                  JR   z,arg1   
03ED   23                     INC   hl   ; hl = next arg_list*
03EE   10 F8                  DJNZ   arg0   
03F0   C1                     POP   bc   ; no match, restore IP
03F1                ARG0A:       
03F1   11 00 00               LD   de,0   ; return 0
03F4   18 08                  JR   arg1a   
03F6                ARG1:        
03F6   C1                     POP   bc   ; restore IP
03F7   EB                     EX   de,hl   ; hl = arg*
03F8   22 F0 21               LD   (vPointer),hl   ; store arg* in setter
03FB   5E                     LD   e,(hl)   
03FC   23                     INC   hl   
03FD   56                     LD   d,(hl)   ; de = arg
03FE                ARG1A:       
03FE   D5                     PUSH   de   ; push arg
03FF   DD E9                  JP   (ix)   
0401                LBRACK:      
0401                ARRAYSTART:      
0401   11 00 00               LD   de,0   ; create stack frame
0404   D5                     PUSH   de   ; push null for IP
0405   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0408   FD 56 05               LD   d,(iy+5)   ; 
040B   D5                     PUSH   de   ; 
040C   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
040F   FD 56 03               LD   d,(iy+3)   ; 
0412   D5                     PUSH   de   ; 
0413   FD E5                  PUSH   iy   ; push BP
0415   FD 21 00 00            LD   iy,0   ; BP = SP
0419   FD 39                  ADD   iy,sp   
041B   DD E9                  JP   (ix)   
041D                RBRACK:      
041D                ARRAYEND:      
041D   FD 54                  LD   d,iyh   ; de = BP
041F   FD 5D                  LD   e,iyl   
0421   ED 43 FC 21            LD   (vTemp1),bc   ; save IP
0425   62 6B                  LD   hl,de   ; hl = de = BP
0427   B7                     OR   a   
0428   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
042A   CB 3C                  SRL   h   ; 
042C   CB 1D                  RR   l   
042E   44 4D                  LD   bc,hl   ; bc = count
0430   2A EE 21               LD   hl,(vHeapPtr)   ; hl = array[-3]
0433   71                     LD   (hl),c   ; write num items in length word
0434   23                     INC   hl   
0435   70                     LD   (hl),b   
0436   23                     INC   hl   ; hl = array[0], bc = count
0437                             ; de = BP, hl = array[0], bc = count
0437   3E 04                  LD   a,TARRAY   
0439   77                     LD   (hl),a   
043A   23                     INC   hl   
043B                ARRAYEND1:      
043B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
043E   77                     LD   (hl),a   ; write lsb of array item
043F   23                     INC   hl   ; move to msb of array item
0440   3A E6 21               LD   a,(vDataWidth)   ; vDataWidth=1?
0443   3D                     DEC   a   
0444   28 05                  JR   z,arrayEnd2   
0446   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0449   77                     LD   (hl),a   ; write msb of array item
044A   23                     INC   hl   ; move to next word in array
044B                ARRAYEND2:      
044B   FD 2B                  DEC   iy   ; move to next word on stack
044D   FD 2B                  DEC   iy   
044F   0B                     DEC   bc   ; dec items count
0450   79                     LD   a,c   ; if not zero loop
0451   B0                     OR   b   
0452   20 E7                  JR   nz,arrayEnd1   
0454   EB                     EX   de,hl   ; de = end of array, hl = BP
0455   F9                     LD   sp,hl   ; sp = BP
0456   E1                     POP   hl   ; de = end of array, hl = old BP
0457   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0458   FD 62                  LD   iyh,d   
045A   FD 6B                  LD   iyl,e   
045C   D1                     POP   de   ; pop arg_list (discard)
045D   D1                     POP   de   ; pop first_arg* (discard)
045E   D1                     POP   de   ; pop IP (discard)
045F   ED 5B EE 21            LD   de,(vHeapPtr)   ; de = array[-3]
0463   13                     INC   de   ; de = array[0]
0464   13                     INC   de   
0465   13                     INC   de   
0466   D5                     PUSH   de   ; return array[0]
0467   22 EE 21               LD   (vHeapPtr),hl   ; move heap* to end of array
046A   ED 4B FC 21            LD   bc,(vTemp1)   ; restore IP
046E   DD E9                  JP   (ix)   
0470                             ; index of an array, based on vDataWidth
0470                             ; array num -- value    ; also sets vPointer to address
0470                ARRINDEX:      
0470   E1                     POP   hl   ; hl = index
0471   D1                     POP   de   ; de = array
0472   3A E6 21               LD   a,(vDataWidth)   ; a = data width
0475   3D                     DEC   a   
0476   28 01                  JR   z,arrIndex1   
0478                ARRINDEX0:      
0478   29                     ADD   hl,hl   ; if data width = 2 then double
0479                ARRINDEX1:      
0479   19                     ADD   hl,de   ; add addr
047A   22 F0 21               LD   (vPointer),hl   ; store address in setter
047D   16 00                  LD   d,0   
047F   5E                     LD   e,(hl)   
0480   B7                     OR   a   ; check data width again
0481   28 02                  JR   z,arrIndex2   
0483   23                     INC   hl   
0484   56                     LD   d,(hl)   
0485                ARRINDEX2:      
0485   D5                     PUSH   de   
0486   DD E9                  JP   (ix)   
0488                             ; value _oldValue --            ; uses address in vPointer
0488                ASSIGN:      
0488   E1                     POP   hl   ; discard last accessed value
0489   E1                     POP   hl   ; hl = new value
048A                ASSIGN0:      
048A   EB                     EX   de,hl   ; de = new value
048B                ASSIGNX:      
048B   2A F0 21               LD   hl,(vPointer)   
048E   73                     LD   (hl),e   
048F   3A E6 21               LD   a,(vDataWidth)   
0492   3D                     DEC   a   ; is it byte?
0493   28 02                  JR   z,assign1   
0495   23                     INC   hl   
0496   72                     LD   (hl),d   
0497                ASSIGN1:      
0497   DD E9                  JP   (ix)   
0499                             ; arg_list - parses input (ab:c)
0499                             ; names after the : represent uninitialised locals
0499                             ; return values are the state of the stack after the block ends
0499                COLON:       
0499                ARGLIST:      
0499   11 00 00               LD   de,0   ; d = count locals, e = count args ()
049C   2A EE 21               LD   hl,(vHeapPtr)   ; hl = heap*
049F   23                     INC   hl   ; skip length field to start
04A0   23                     INC   hl   
04A1   E5                     PUSH   hl   ; save start of arg_list
04A2   03                     INC   bc   ; point to next char
04A3                ARGLIST1:      
04A3   0A                     LD   a,(bc)   
04A4   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A6   20 03                  JR   nz,arglist1a   
04A8   14                     INC   d   ; non zero value local count acts as flag
04A9   18 10                  JR   arglist3   
04AB                ARGLIST1A:      
04AB   FE 41                  CP   "A"   ; < "A" terminates arg_list
04AD   38 0F                  JR   c,arglist4   
04AF   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B1   30 0B                  JR   nc,arglist4   
04B3                ARGLIST2:      
04B3   77                     LD   (hl),a   
04B4   23                     INC   hl   
04B5   1C                     INC   e   ; increase arg count
04B6   AF                     XOR   a   
04B7   B2                     OR   d   
04B8   28 01                  JR   z,arglist3   
04BA   14                     INC   d   ; if d > 0 increase local count
04BB                ARGLIST3:      
04BB   03                     INC   bc   ; point to next char
04BC   18 E5                  JR   arglist1   
04BE                ARGLIST4:      
04BE   0B                     DEC   bc   
04BF   AF                     XOR   a   
04C0   B2                     OR   d   
04C1   28 01                  JR   z,arglist5   
04C3   15                     DEC   d   ; remove initial inc
04C4                ARGLIST5:      
04C4   23                     INC   hl   
04C5   22 EE 21               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04C8   E1                     POP   hl   ; hl = start of arg_list
04C9   E5                     PUSH   hl   ; return start of arg_list
04CA   2B                     DEC   hl   ; write number of locals at start - 1
04CB   72                     LD   (hl),d   
04CC   2B                     DEC   hl   ; write number of args + locals at start - 2
04CD   73                     LD   (hl),e   
04CE   DD E9                  JP   (ix)   
04D0                LBRACE:      
04D0                BLOCK:       
04D0   C5                     PUSH   bc   ; return pointer to first { of block
04D1   03                     INC   bc   
04D2   16 01                  LD   d,1   ; nesting: count first parenthesis
04D4                BLOCK1:      ; Skip to end of definition
04D4   0A                     LD   a,(bc)   ; Get the next character
04D5   03                     INC   bc   ; Point to next character
04D6   FE 21                  CP   " " + 1   ; ignore whitespace
04D8   38 FA                  JR   c,block1   
04DA   FE 29                  CP   ")"   
04DC   28 2D                  JR   z,block4   
04DE   FE 7D                  CP   "}"   
04E0   28 29                  JR   z,block4   
04E2   FE 5D                  CP   "]"   
04E4   28 25                  JR   z,block4   
04E6   FE 28                  CP   "("   
04E8   28 16                  JR   z,block2   
04EA   FE 7B                  CP   "{"   
04EC   28 12                  JR   z,block2   
04EE   FE 5B                  CP   "["   
04F0   28 0E                  JR   z,block2   
04F2   FE 27                  CP   "'"   
04F4   28 0D                  JR   z,block3   
04F6   FE 60                  CP   "`"   
04F8   28 09                  JR   z,block3   
04FA   FE 22                  CP   DQUOTE   
04FC   28 05                  JR   z,block3   
04FE   18 D4                  JR   block1   
0500                BLOCK2:      
0500   14                     INC   d   
0501   18 D1                  JR   block1   
0503                BLOCK3:      
0503   3E 80                  LD   a,$80   
0505   AA                     XOR   d   
0506   47                     LD   b,a   
0507   20 CB                  JR   nz,block1   
0509   18 03                  JR   block5   
050B                BLOCK4:      
050B   15                     DEC   d   
050C   20 C6                  JR   nz,block1   ; get the next element
050E                BLOCK5:      
050E   60 69                  LD   hl,bc   ; hl = IP
0510   11 00 26               LD   de,HEAP   ; is IP pointing to object in heap
0513   B7                     OR   a   ; IP - HEAP
0514   ED 52                  SBC   hl,de   
0516   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0518   28 1C                  JR   z,block6   
051A   60 69                  LD   hl,bc   ; hl = IP
051C   D1                     POP   de   ; de = block*
051D   ED 43 FC 21            LD   (vTemp1),bc   ; save IP
0521   B7                     OR   a   ; bc = size
0522   ED 52                  SBC   hl,de   
0524   44 4D                  LD   bc,hl   
0526   EB                     EX   de,hl   ; hl = block* de = heap*
0527   ED 5B EE 21            LD   de,(vHeapPtr)   
052B   D5                     PUSH   de   ; return hblock*
052C   ED B0                  LDIR      ; copy size bytes from block* to hblock*
052E   ED 53 EE 21            LD   (vHeapPtr),de   ; heap* += size
0532   ED 4B FC 21            LD   bc,(vTemp1)   ; restore IP
0536                BLOCK6:      
0536   0B                     DEC   bc   ; balanced, exit
0537   DD E9                  JP   (ix)   
0539                RBRACE:      
0539                BLOCKEND:      
0539   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
053C   FD 56 01               LD   d,(iy+1)   
053F   ED 53 FC 21            LD   (vTemp1),de   
0543   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0546   FD 56 07               LD   d,(iy+7)   
0549   ED 53 FE 21            LD   (vTemp2),de   
054D   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0550   FD 56 03               LD   d,(iy+3)   
0553   EB                     EX   de,hl   
0554   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0557   FD 56 01               LD   d,(iy+1)   
055A   13                     INC   de   ; for carry flag <=
055B   B7                     OR   a   
055C   ED 52                  SBC   hl,de   
055E   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0560   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0562   FD 5D                  LD   e,iyl   
0564   21 08 00               LD   hl,8   
0567   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0568   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0569   18 0C                  JR   blockEnd2   
056B                BLOCKEND1:      ; same scope
056B   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
056E   FD 56 03               LD   d,(iy+3)   
0571   EB                     EX   de,hl   
0572   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0574   FD 5D                  LD   e,iyl   
0576   EB                     EX   de,hl   
0577                BLOCKEND2:      
0577   44 4D                  LD   bc,hl   ; bc = hl = BP
0579   B7                     OR   a   ; hl = BP - SP = count
057A   ED 72                  SBC   hl,sp   
057C   7D                     LD   a,l   
057D   B4                     OR   h   
057E   28 09                  JR   z,blockEnd3   
0580   C5                     PUSH   bc   ; bc = count, hl = BP
0581   44 4D                  LD   bc,hl   
0583   E1                     POP   hl   
0584   2B                     DEC   hl   ; hl = BP-1
0585   1B                     DEC   de   ; de = args*-1
0586   ED B8                  LDDR      
0588   13                     INC   de   
0589                BLOCKEND3:      
0589   EB                     EX   de,hl   ; sp = de = new tos*
058A   F9                     LD   sp,hl   
058B   ED 4B FE 21            LD   bc,(vTemp2)   
058F   FD 2A FC 21            LD   iy,(vTemp1)   
0593   DD E9                  JP   (ix)   
0595                TICK:        
0595                CHAR:        
0595   21 00 00               LD   hl,0   ; if "" is empty or null
0598                CHAR1:       
0598   03                     INC   bc   ; point to next char
0599   0A                     LD   a,(bc)   
059A   FE 27                  CP   "'"   ; ' is the terminator
059C   28 09                  JR   z,char3   
059E   FE 5C                  CP   $5c   ; \ is the escape
05A0   20 02                  JR   nz,char2   
05A2   03                     INC   bc   
05A3   0A                     LD   a,(bc)   
05A4                CHAR2:       
05A4   6F                     LD   l,a   
05A5   18 F1                  JR   char1   
05A7                CHAR3:       
05A7   E5                     PUSH   hl   
05A8   DD E9                  JP   (ix)   
05AA                BACKSLASH:      
05AA   DD E9                  JP   (ix)   
05AC                             ; , discard stack item
05AC                             ; x y -- x
05AC                COMMA:       
05AC                DISCARD:      
05AC   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05AE   FD 5D                  LD   e,iyl   
05B0   EB                     EX   de,hl   
05B1   B7                     OR   a   
05B2   ED 72                  SBC   hl,sp   
05B4   CB 7C                  BIT   7,h   
05B6   20 01                  JR   nz,discard1   
05B8   E1                     POP   hl   
05B9                DISCARD1:      
05B9   DD E9                  JP   (ix)   
05BB                SLASH:       
05BB   03                     INC   bc   
05BC   0A                     LD   a,(bc)   
05BD   FE 5C                  CP   $5C   
05BF   CA 96 08               JP   z,comment   
05C2   FE 41                  CP   "A"   
05C4   D2 4A 08               JP   nc,command   
05C7   0B                     DEC   bc   
05C8   D1                     POP   de   
05C9   E1                     POP   hl   
05CA   C5                     PUSH   bc   ; preserve the IP
05CB   44 4D                  LD   bc,hl   
05CD   CD 3E 06               CALL   divide   
05D0   EB                     EX   de,hl   
05D1   ED 53 F2 21            LD   (vRemain),de   
05D5   C1                     POP   bc   
05D6   C3 99 03               JP   add3   
05D9                DOT:         
05D9   03                     INC   bc   
05DA   0A                     LD   a,(bc)   
05DB   FE 68                  CP   "h"   
05DD   CA EE 05               JP   z,dotHex   
05E0   FE 73                  CP   "s"   
05E2   CA 02 06               JP   z,dotStr   
05E5   FE 63                  CP   "c"   
05E7   CA 16 06               JP   z,dotChar   
05EA   0B                     DEC   bc   
05EB   C3 2A 06               JP   dotDec   
05EE                DOTHEX:      
05EE   CD 7B 06               CALL   go   
05F1   00 00                  DW   NUL   ; closure
05F3   F7 05                  DW   dotHex_block   
05F5   28 0B                  DW   args1A0L   
05F7                DOTHEX_BLOCK:      
05F7   7B 24 61 2F 62 68 2F 70 78 7D 00 .CSTR   "{$a/bh/px}"   ; block
0602                DOTSTR:      
0602   CD 7B 06               CALL   go   
0605   00 00                  DW   NUL   ; closure
0607   0B 06                  DW   dotStr_block   
0609   28 0B                  DW   args1A0L   
060B                DOTSTR_BLOCK:      
060B   7B 24 61 2F 62 73 2F 70 78 7D 00 .CSTR   "{$a/bs/px}"   ; block
0616                DOTCHAR:      
0616   CD 7B 06               CALL   go   
0619   00 00                  DW   NUL   ; closure
061B   1F 06                  DW   dotChar_block   
061D   28 0B                  DW   args1A0L   
061F                DOTCHAR_BLOCK:      
061F   7B 24 61 2F 62 63 2F 70 78 7D 00 .CSTR   "{$a/bc/px}"   ; block
062A                DOTDEC:      
062A   CD 7B 06               CALL   go   
062D   00 00                  DW   NUL   ; closure
062F   33 06                  DW   dotDec_block   
0631   28 0B                  DW   args1A0L   
0633                DOTDEC_BLOCK:      
0633   7B 24 61 2F 62 64 2F 70 78 7D 00 .CSTR   "{$a/bd/px}"   ; block
063E                             ; division subroutine.
063E                             ; bc: divisor, de: dividend, hl: remainder
063E                DIVIDE:      
063E   21 00 00               LD   hl,0   ; zero the remainder
0641   3E 10                  LD   a,16   ; loop counter
0643                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0643   CB 21                  SLA   c   
0645   CB 10                  RL   b   
0647   ED 6A                  ADC   hl,hl   
0649   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
064B   38 03                  JR   c,divide2   
064D   0C                     INC   c   
064E   18 01                  JR   divide3   
0650                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0650   19                     ADD   hl,de   
0651                DIVIDE3:      
0651   3D                     DEC   a   
0652   20 EF                  JR   nz,divide1   
0654   50 59                  LD   de,bc   ; result from bc to de
0656   C9                     RET      
0657                             ; hl = value1, de = value2
0657                             ; hl = result
0657                EQUALS:      
0657   B7                     OR   a   ; reset the carry flag
0658   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
065A   28 10                  JR   z,true1   
065C   C3 72 06               JP   false1   
065F                             ; hl = value1 de = value2
065F                             ; hl = result
065F                LESSTHANEQ:      
065F   B7                     OR   a   
0660   ED 52                  SBC   hl,de   
0662   18 05                  JR   lessthan1   
0664                             ; hl = value1 de = value2
0664                             ; hl = result
0664                LESSTHAN:      
0664   B7                     OR   a   
0665   ED 52                  SBC   hl,de   
0667   28 09                  JR   z,false1   
0669                LESSTHAN1:      
0669   FA 72 06               JP   m,false1   
066C                TRUE1:       
066C   21 FF FF               LD   hl,TRUE   
066F   E5                     PUSH   hl   
0670   DD E9                  JP   (ix)   
0672                NULL1:       
0672                FALSE1:      
0672   21 00 00               LD   hl,FALSE   
0675   E5                     PUSH   hl   
0676   DD E9                  JP   (ix)   
0678                LPAREN:      
0678   C3 D0 04               JP   block   
067B                             ; execute a block of code which ends with }
067B                             ; creates a root scope if BP == stack
067B                             ; else uses outer scope
067B                CARET:       
067B                GO:          
067B   D1                     POP   de   ; de = block*
067C                GO1:         
067C   7B                     LD   a,e   ; if block* == null, exit
067D   B2                     OR   d   
067E   20 02                  JR   nz,go2   
0680   DD E9                  JP   (ix)   
0682                GO2:         
0682   1A                     LD   a,(de)   
0683   FE 7B                  CP   "{"   
0685   28 07                  JR   z,goBlock1   
0687   FE 28                  CP   "("   
0689   C2 C1 06               JP   nz,goFunc   
068C   13                     INC   de   ; de is the address to jump back to
068D   D5                     PUSH   de   ; push de just before stack frame
068E                GOBLOCK:      
068E                GOBLOCK1:      
068E   ED 53 FC 21            LD   (vTemp1),de   ; save de
0692   21 80 20               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0695   FD 54                  LD   d,iyh   
0697   FD 5D                  LD   e,iyl   
0699   B7                     OR   a   ; if stack* == BP then this is the root_scope
069A   ED 52                  SBC   hl,de   
069C   ED 5B FC 21            LD   de,(vTemp1)   ; restore de
06A0   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
06A1   B4                     OR   h   
06A2   3E 00                  LD   a,0   
06A4   28 6C                  JR   z,goFunc8   
06A6   C5                     PUSH   bc   ; push IP
06A7   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
06AA   FD 46 05               LD   b,(iy+5)   
06AD   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
06B0   FD 66 03               LD   h,(iy+3)   
06B3                GOBLOCK2:      
06B3   C5                     PUSH   bc   ; arg_list*
06B4   E5                     PUSH   hl   ; first_arg*
06B5   FD E5                  PUSH   iy   ; push BP
06B7   FD 21 00 00            LD   iy,0   ; BP = SP
06BB   FD 39                  ADD   iy,sp   
06BD   42 4B                  LD   bc,de   ; bc = de = block*-1
06BF   DD E9                  JP   (ix)   
06C1                GOFUNC:      ; execute function
06C1   EB                     EX   de,hl   ; hl = func*
06C2   5E                     LD   e,(hl)   ; de = partial_array*
06C3   23                     INC   hl   
06C4   56                     LD   d,(hl)   
06C5   23                     INC   hl   
06C6   7B                     LD   a,e   ; if partial_array* == null skip
06C7   B2                     OR   d   
06C8   28 21                  JR   z,goFunc3   
06CA   ED 43 FC 21            LD   (vTemp1),bc   
06CE   22 FE 21               LD   (vTemp2),hl   ; save bc,hl
06D1   EB                     EX   de,hl   ; hl = partial_array*
06D2   2B                     DEC   hl   ; bc = count
06D3   46                     LD   b,(hl)   
06D4   2B                     DEC   hl   
06D5   4E                     LD   c,(hl)   
06D6   23                     INC   hl   ; push each item on stack
06D7   23                     INC   hl   
06D8   18 06                  JR   goFunc2   
06DA                GOFUNC1:      
06DA   5E                     LD   e,(hl)   ; de = partial item
06DB   23                     INC   hl   
06DC   56                     LD   d,(hl)   
06DD   23                     INC   hl   
06DE   D5                     PUSH   de   ; push on stack
06DF   0B                     DEC   bc   
06E0                GOFUNC2:      
06E0   79                     LD   a,c   ; if count != 0 then loop
06E1   B0                     OR   b   
06E2   20 F6                  JR   nz,goFunc1   
06E4   ED 4B FC 21            LD   bc,(vTemp1)   ; restore bc
06E8   2A FE 21               LD   hl,(vTemp2)   ; restore hl
06EB                GOFUNC3:      
06EB   5E                     LD   e,(hl)   ; de = block*
06EC   23                     INC   hl   
06ED   56                     LD   d,(hl)   
06EE   23                     INC   hl   
06EF   ED 53 FC 21            LD   (vTemp1),de   ; save block*
06F3   5E                     LD   e,(hl)   ; de = arg_list*
06F4   23                     INC   hl   
06F5   56                     LD   d,(hl)   
06F6   23                     INC   hl   
06F7   EB                     EX   de,hl   ; hl = arg_list*
06F8   ED 5B FC 21            LD   de,(vTemp1)   ; restore de = block*
06FC   7D                     LD   a,l   ; if arg_list* == null a = 0
06FD   B4                     OR   h   
06FE   20 03                  JR   nz,goFunc4   
0700   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
0701   18 0F                  JR   goFunc8   
0703                GOFUNC4:      ; allocate locals
0703   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
0704   7E                     LD   a,(hl)   
0705   18 03                  JR   goFunc6   
0707                GOFUNC5:      ; loop
0707   3B                     DEC   sp   
0708   3B                     DEC   sp   
0709   3D                     DEC   a   
070A                GOFUNC6:      
070A   B7                     OR   a   
070B   20 FA                  JR   nz,goFunc5   ; end loop
070D                GOFUNC7:      
070D   2B                     DEC   hl   ; a = num_args* x 2
070E   7E                     LD   a,(hl)   
070F   23                     INC   hl   
0710   23                     INC   hl   
0711   87                     ADD   a,a   ; a *= 2
0712                GOFUNC8:      
0712   C5                     PUSH   bc   ; push IP
0713   44 4D                  LD   bc,hl   
0715   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0718   85                     ADD   a,l   
0719   6F                     LD   l,a   
071A   39                     ADD   hl,sp   
071B   18 96                  JR   goBlock2   
071D                HASH:        
071D                HEXNUM:      
071D   21 00 00               LD   hl,0   ; Clear hl to accept the number
0720                HEXNUM1:      
0720   03                     INC   bc   
0721   0A                     LD   a,(bc)   ; Get the character which is a numeral
0722   CB 77                  BIT   6,a   ; is it uppercase alpha?
0724   28 02                  JR   z,hexnum2   ; no a decimal
0726   D6 07                  SUB   7   ; sub 7  to make $a - $F
0728                HEXNUM2:      
0728   D6 30                  SUB   $30   ; form decimal digit
072A   DA A8 07               JP   c,num2   
072D   FE 10                  CP   $0F+1   
072F   D2 A8 07               JP   nc,num2   
0732   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0733   29                     ADD   hl,hl   ; 4X
0734   29                     ADD   hl,hl   ; 8X
0735   29                     ADD   hl,hl   ; 16X
0736   85                     ADD   a,l   ; add into bottom of hl
0737   6F                     LD   l,a   
0738   18 E6                  JR   hexnum1   
073A                UPCASE:      
073A   0A                     LD   a,(bc)   ; a = identifier char
073B   D6 41                  SUB   "A"   ; "A" = 0
073D   18 05                  JR   ident1   
073F                LOWCASE:      
073F   0A                     LD   a,(bc)   
0740   D6 61                  SUB   "a"   
0742   C6 1A                  ADD   a,26   
0744                IDENT1:      
0744   87                     ADD   a,a   ; l = a * 2
0745   6F                     LD   l,a   
0746   26 21                  LD   h,msb(vars)   
0748   22 F0 21               LD   (vPointer),hl   ; store address in setter
074B   5E                     LD   e,(hl)   
074C   23                     INC   hl   
074D   56                     LD   d,(hl)   
074E   D5                     PUSH   de   
074F   DD E9                  JP   (ix)   
0751                             ; if
0751                             ; condition then -- value
0751                QUESTION:      
0751                IF:          
0751   03                     INC   bc   
0752   0A                     LD   a,(bc)   
0753   FE 3F                  CP   "?"   
0755   28 06                  JR   z,ifte   
0757   0B                     DEC   bc   
0758   11 00 00               LD   de,NUL   ; NUL pointer for else
075B   18 01                  JR   ifte1   
075D                             ; ifte
075D                             ; condition then else -- value
075D                IFTE:        
075D   D1                     POP   de   ; de = else
075E                IFTE1:       
075E   E1                     POP   hl   ; hl = then
075F   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0760   7C                     LD   a,h   
0761   B5                     OR   l   
0762   E1                     POP   hl   ; hl = then
0763   CA 7C 06               JP   z,go1   ; if z de = else
0766   EB                     EX   de,hl   ; condition = false, de = then
0767   C3 7C 06               JP   go1   
076A                STAR:        
076A                MUL:         
076A   D1                     POP   de   ; get first value
076B   E1                     POP   hl   
076C                MUL2:        
076C   C5                     PUSH   bc   ; Preserve the IP
076D   44 4D                  LD   bc,hl   ; bc = 2nd value
076F   21 00 00               LD   hl,0   
0772   3E 10                  LD   a,16   
0774                MUL3:        
0774   29                     ADD   hl,hl   
0775   CB 13                  RL   e   
0777   CB 12                  RL   d   
0779   30 04                  JR   nc,$+6   
077B   09                     ADD   hl,bc   
077C   30 01                  JR   nc,$+3   
077E   13                     INC   de   
077F   3D                     DEC   a   
0780   20 F2                  JR   nz,mul3   
0782   C1                     POP   bc   ; Restore the IP
0783   C3 99 03               JP   add3   
0786                NUM:         
0786   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0789   0A                     LD   a,(bc)   ; Get numeral or -
078A   FE 2D                  CP   "-"   
078C   20 01                  JR   nz,num0   
078E   03                     INC   bc   ; move to next char, no flags affected
078F                NUM0:        
078F   08                     EX   af,af'   ; save zero flag = 0 for later
0790                NUM1:        
0790   0A                     LD   a,(bc)   ; read digit
0791   D6 30                  SUB   "0"   ; less than 0?
0793   38 13                  JR   c,num2   ; not a digit, exit loop
0795   FE 0A                  CP   10   ; greater that 9?
0797   30 0F                  JR   nc,num2   ; not a digit, exit loop
0799   03                     INC   bc   ; inc IP
079A   54 5D                  LD   de,hl   ; multiply hl * 10
079C   29                     ADD   hl,hl   
079D   29                     ADD   hl,hl   
079E   19                     ADD   hl,de   
079F   29                     ADD   hl,hl   
07A0   85                     ADD   a,l   ; add digit in a to hl
07A1   6F                     LD   l,a   
07A2   3E 00                  LD   a,0   
07A4   8C                     ADC   a,h   
07A5   67                     LD   h,a   
07A6   18 E8                  JR   num1   
07A8                NUM2:        
07A8   0B                     DEC   bc   
07A9   08                     EX   af,af'   ; restore zero flag
07AA   20 07                  JR   nz,num3   
07AC   EB                     EX   de,hl   ; negate the value of hl
07AD   21 00 00               LD   hl,0   
07B0   B7                     OR   a   ; jump to sub2
07B1   ED 52                  SBC   hl,de   
07B3                NUM3:        
07B3   E5                     PUSH   hl   ; Put the number on the stack
07B4   DD E9                  JP   (ix)   ; and process the next character
07B6                UNDERSCORE:      
07B6                REMAIN:      
07B6   2A F2 21               LD   hl,(vRemain)   
07B9   E5                     PUSH   hl   
07BA   DD E9                  JP   (ix)   
07BC                RPAREN:      
07BC   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
07BF   FD 46 09               LD   b,(iy+9)   
07C2   DD E9                  JP   (ix)   
07C4                             ; arg_list* block* -- ptr
07C4                SEMICOLON:      
07C4   D1                     POP   de   ; de = block* hl = heap*
07C5   2A EE 21               LD   hl,(vHeapPtr)   
07C8   AF                     XOR   a   
07C9   77                     LD   (hl),a   ; compile null partial_array*
07CA   23                     INC   hl   
07CB   77                     LD   (hl),a   
07CC   23                     INC   hl   
07CD   73                     LD   (hl),e   ; compile block*
07CE   23                     INC   hl   
07CF   72                     LD   (hl),d   
07D0   23                     INC   hl   
07D1   D1                     POP   de   ; de = block*
07D2   73                     LD   (hl),e   ; compile arg_list*
07D3   23                     INC   hl   
07D4   72                     LD   (hl),d   
07D5   23                     INC   hl   
07D6   ED 5B EE 21            LD   de,(vHeapPtr)   ; return func*
07DA   D5                     PUSH   de   
07DB   22 EE 21               LD   (vHeapPtr),hl   ; heap* += 4
07DE   DD E9                  JP   (ix)   
07E0                             ; shiftLeft
07E0                             ; value count -- value2          shift left count places
07E0                SHIFTLEFT:      
07E0   50 59                  LD   de,bc   ; save IP
07E2   C1                     POP   bc   ; bc = count
07E3   41                     LD   b,c   ; b = loop counter
07E4   E1                     POP   hl   
07E5   04                     INC   b   ; test for counter=0 case
07E6   18 01                  JR   shiftLeft2   
07E8                SHIFTLEFT1:      
07E8   29                     ADD   hl,hl   ; left shift hl
07E9                SHIFTLEFT2:      
07E9   10 FD                  DJNZ   shiftLeft1   
07EB   E5                     PUSH   hl   
07EC   42 4B                  LD   bc,de   ; restore IP
07EE   DD E9                  JP   (ix)   
07F0                             ; shiftRight
07F0                             ; value count -- value2          shift left count places
07F0                SHIFTRIGHT:      
07F0   50 59                  LD   de,bc   ; save IP
07F2   C1                     POP   bc   ; bc = count
07F3   41                     LD   b,c   ; b = loop counter
07F4   E1                     POP   hl   
07F5   04                     INC   b   ; test for counter=0 case
07F6   18 04                  JR   shiftRight2   
07F8                SHIFTRIGHT1:      
07F8   CB 3C                  SRL   h   ; right shift hl
07FA   CB 1D                  RR   l   
07FC                SHIFTRIGHT2:      
07FC   10 FA                  DJNZ   shiftRight1   
07FE   E5                     PUSH   hl   
07FF   42 4B                  LD   bc,de   ; restore IP
0801   DD E9                  JP   (ix)   
0803                             ; string
0803                             ; -- ptr                        ; points to start of string chars,
0803                             ; length is stored at start - 2 bytes
0803                DBLQUOTE:      
0803                STRING:      
0803   2A EE 21               LD   hl,(vHeapPtr)   ; hl = heap*
0806   23                     INC   hl   ; skip length field to start
0807   23                     INC   hl   
0808   E5                     PUSH   hl   ; save start of string
0809   03                     INC   bc   ; point to next char
080A   18 03                  JR   string2   
080C                STRING1:      
080C   77                     LD   (hl),a   
080D   23                     INC   hl   ; increase count
080E   03                     INC   bc   ; point to next char
080F                STRING2:      
080F   0A                     LD   a,(bc)   
0810   FE 22                  CP   DQUOTE   ; " is the string terminator
0812   28 04                  JR   z,string3   
0814   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0816   20 F4                  JR   nz,string1   
0818                STRING3:      
0818   AF                     XOR   a   ; write NUL to terminate string
0819   77                     LD   (hl),a   ; hl = end of string
081A   23                     INC   hl   
081B   22 EE 21               LD   (vHeapPtr),hl   ; bump heap* to after end of string
081E   2B                     DEC   hl   ; hl = end of string without terminator
081F   D1                     POP   de   ; de = start of string
0820   D5                     PUSH   de   ; return start of string
0821   B7                     OR   a   ; hl = length bytes, de = start of string
0822   ED 52                  SBC   hl,de   
0824   EB                     EX   de,hl   
0825   2B                     DEC   hl   ; write length bytes to length field at start - 2
0826   72                     LD   (hl),d   
0827   2B                     DEC   hl   
0828   73                     LD   (hl),e   
0829   DD E9                  JP   (ix)   
082B                MINUS:       ; negative sign or subtract
082B   03                     INC   bc   ; check if sign of a number
082C   0A                     LD   a,(bc)   
082D   0B                     DEC   bc   
082E   FE 30                  CP   "0"   
0830   38 05                  JR   c,sub   
0832   FE 3A                  CP   "9"+1   
0834   DA 3E 03               JP   c,num_   
0837                SUB:         ; Subtract the value 2nd on stack from top of stack
0837   03                     INC   bc   
0838   FE 2D                  CP   "-"   
083A   20 05                  JR   nz,sub1   
083C   E1                     POP   hl   
083D   2B                     DEC   hl   
083E   C3 8A 04               JP   assign0   
0841                SUB1:        
0841   0B                     DEC   bc   
0842   D1                     POP   de   
0843   E1                     POP   hl   
0844   B7                     OR   a   
0845   ED 52                  SBC   hl,de   
0847   C3 99 03               JP   add3   
084A                             ;*******************************************************************
084A                             ; commands
084A                             ; a contains command letter
084A                             ; bc points to command letter
084A                             ;*******************************************************************
084A                COMMAND:      
084A   FE 2F                  CP   "/"   ; // comment
084C   CA 96 08               JP   z,comment   
084F   FE 61                  CP   "a"   ; /ab absolute /ad address of
0851   28 4C                  JR   z,command_a   
0853   FE 62                  CP   "b"   ; /ba buf array /bb buf block
0855                             ; /bd buf decimal /bp buf params
0855                             ; /bs buf string /br break
0855   CA DC 08               JP   z,command_b   
0858   FE 63                  CP   "c"   ; /c chars
085A   CA C2 0A               JP   z,chars   
085D   FE 66                  CP   "f"   ; /f false
085F   CA 72 06               JP   z,false1   
0862   FE 69                  CP   "i"   ; /in input iv invert
0864   CA B3 0A               JP   z,command_i   
0867   FE 6B                  CP   "k"   ; /k key
0869   CA D5 0A               JP   z,key   
086C   FE 6E                  CP   "n"   ; /n numbers
086E   CA E7 0A               JP   z,numbers   
0871   FE 6F                  CP   "o"   ; /o output
0873   CA DE 0A               JP   z,output   
0876   FE 70                  CP   "p"   ; /pa partial /pc print chars /pk print stack
0878   CA E8 09               JP   z,command_p   
087B   FE 74                  CP   "t"   ; /t true
087D   CA 6C 06               JP   z,true1   
0880   FE 76                  CP   "v"   ; /vH heap start vT TIB start /vh heapPtr /vb TIBPtr
0882   CA 60 0A               JP   z,command_v   
0885   FE 78                  CP   "x"   ; /x xor
0887   CA BA 03               JP   z,xor   
088A   FE 7A                  CP   "z"   ; /z
088C   CA EF 0A               JP   z,zprt   
088F                ERROR1:      
088F   21 01 00               LD   hl,1   ; error 1: unknown command
0892   E5                     PUSH   hl   
0893   C3 47 0C               JP   error   
0896                COMMENT:      
0896   03                     INC   bc   ; point to next char
0897   0A                     LD   a,(bc)   
0898   FE 20                  CP   " "   ; terminate on any char less than SP
089A   30 FA                  JR   nc,comment   
089C   0B                     DEC   bc   
089D   DD E9                  JP   (ix)   
089F                COMMAND_A:      
089F   03                     INC   bc   
08A0   0A                     LD   a,(bc)   
08A1   FE 62                  CP   "b"   
08A3   CA AE 08               JP   z,absolute   
08A6   FE 64                  CP   "d"   
08A8   CA BB 08               JP   z,addrOf   
08AB   C3 8F 08               JP   error1   
08AE                             ; /ab absolute
08AE                             ; num -- num
08AE                ABSOLUTE:      
08AE   E1                     POP   hl   
08AF   CB 7C                  BIT   7,h   
08B1   C8                     RET   z   
08B2   AF                     XOR   a   
08B3   95                     SUB   l   
08B4   6F                     LD   l,a   
08B5   9F                     SBC   a,a   
08B6   94                     SUB   h   
08B7   67                     LD   h,a   
08B8   E5                     PUSH   hl   
08B9   DD E9                  JP   (ix)   
08BB                             ; /ad addrOf
08BB                             ; char -- addr
08BB                ADDROF:      
08BB   E1                     POP   hl   ; a = char
08BC   7D                     LD   a,l   
08BD   FE 7B                  CP   "z"+1   ; if a > z then exit
08BF   30 19                  JR   nc,addrOf2   
08C1   D6 41                  SUB   "A"   ; a - 65
08C3   38 15                  JR   c,addrOf2   ; if < A then exit
08C5   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
08C7   38 06                  JR   c,addrOf1   
08C9   D6 06                  SUB   "a"-("Z"+1)   
08CB   FE 1A                  CP   "Z"-"A"+1   
08CD   38 0B                  JR   c,addrOf2   ; if < a then exit
08CF                ADDROF1:      
08CF   87                     ADD   a,a   ; double a
08D0   21 00 21               LD   hl,VARS   ; hl = VARS + a
08D3   85                     ADD   a,l   
08D4   6F                     LD   l,a   
08D5   3E 00                  LD   a,0   
08D7   8C                     ADC   a,h   
08D8   67                     LD   h,a   
08D9   E5                     PUSH   hl   
08DA                ADDROF2:      
08DA   DD E9                  JP   (ix)   
08DC                COMMAND_B:      
08DC   03                     INC   bc   
08DD   0A                     LD   a,(bc)   
08DE   FE 63                  CP   "c"   ; /bc buffer char
08E0   CA FF 08               JP   z,bufferChar   
08E3   FE 64                  CP   "d"   ; /bd buffer decimal
08E5   CA 0E 09               JP   z,bufferDec   
08E8   FE 68                  CP   "h"   ; /bd buffer hexadecimal
08EA   CA 6F 09               JP   z,bufferHex   
08ED   FE 72                  CP   "r"   ; /br break
08EF   CA 9E 09               JP   z,break   
08F2   FE 73                  CP   "s"   ; /bs buffer string
08F4   CA B8 09               JP   z,bufferString   
08F7   FE 78                  CP   "x"   ; /bx buffer x spaces
08F9   CA D4 09               JP   z,bufferXSpaces   
08FC   C3 8F 08               JP   error1   
08FF                             ; /bc buffer char
08FF                             ; char -- length
08FF                BUFFERCHAR:      
08FF   D1                     POP   de   ; e = char
0900   2A EA 21               LD   hl,(vBufPtr)   ; hl = buffer*
0903   73                     LD   (hl),e   ; e -> buffer*
0904   23                     INC   hl   ; buffer*++
0905   22 EA 21               LD   (vBufPtr),hl   ; save buffer*' in pointer
0908   11 01 00               LD   de,1   ; return 1 byte
090B   D5                     PUSH   de   
090C   DD E9                  JP   (ix)   
090E                             ; /bd buffer decimal
090E                             ; value -- length               ; length can be used to rewind buffer*
090E                BUFFERDEC:      
090E   ED 5B EA 21            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0912   D9                     EXX      
0913   E1                     POP   hl   ; hl = value
0914   CD 26 09               CALL   bufferDec0   
0917   D9                     EXX      ; de = buffer*' bc = IP
0918   2A EA 21               LD   hl,(vBufPtr)   ; hl = buffer*
091B   ED 53 EA 21            LD   (vBufPtr),de   ; update buffer* with buffer*'
091F   EB                     EX   de,hl   ; hl = length
0920   B7                     OR   a   
0921   ED 52                  SBC   hl,de   
0923   E5                     PUSH   hl   ; return length
0924   DD E9                  JP   (ix)   
0926                             ; hl = value
0926                             ; de' = buffer*
0926                             ; a, bc, de, hl destroyed
0926                BUFFERDEC0:      
0926   CB 7C                  BIT   7,h   
0928   28 0C                  JR   z,bufferDec1   
092A   D9                     EXX      
092B   3E 2D                  LD   a,"-"   
092D   12                     LD   (de),a   
092E   13                     INC   de   
092F   D9                     EXX      
0930   AF                     XOR   a   
0931   95                     SUB   l   
0932   6F                     LD   l,a   
0933   9F                     SBC   a,a   
0934   94                     SUB   h   
0935   67                     LD   h,a   
0936                BUFFERDEC1:      
0936   0E 00                  LD   c,0   ; leading zeros flag = false
0938   11 F0 D8               LD   de,-10000   
093B   CD 56 09               CALL   bufferDec2   
093E   11 18 FC               LD   de,-1000   
0941   CD 56 09               CALL   bufferDec2   
0944   11 9C FF               LD   de,-100   
0947   CD 56 09               CALL   bufferDec2   
094A   1E F6                  LD   e,-10   
094C   CD 56 09               CALL   bufferDec2   
094F   0C                     INC   c   ; flag = true for at least digit
0950   1E FF                  LD   e,-1   
0952   CD 56 09               CALL   bufferDec2   
0955   C9                     RET      
0956                BUFFERDEC2:      
0956   06 2F                  LD   b,"0"-1   
0958                BUFFERDEC3:      
0958   04                     INC   b   
0959   19                     ADD   hl,de   
095A   38 FC                  JR   c,bufferDec3   
095C   ED 52                  SBC   hl,de   
095E   3E 30                  LD   a,"0"   
0960   B8                     CP   b   
0961   20 05                  JR   nz,bufferDec4   
0963   AF                     XOR   a   
0964   B1                     OR   c   
0965   C8                     RET   z   
0966   18 01                  JR   bufferDec5   
0968                BUFFERDEC4:      
0968   0C                     INC   c   
0969                BUFFERDEC5:      
0969   78                     LD   a,b   
096A   D9                     EXX      
096B   12                     LD   (de),a   
096C   13                     INC   de   
096D   D9                     EXX      
096E   C9                     RET      
096F                             ; /bh buffer hex
096F                             ; value -- length               ; length can be used to rewind buffer*
096F                BUFFERHEX:      
096F   E1                     POP   hl   ; hl = value
0970   ED 5B EA 21            LD   de,(vBufPtr)   
0974   7C                     LD   a,h   
0975   CD 8A 09               CALL   bufferHex1   
0978   7D                     LD   a,l   
0979   CD 8A 09               CALL   bufferHex1   
097C   EB                     EX   de,hl   
097D   ED 5B EA 21            LD   de,(vBufPtr)   
0981   22 EA 21               LD   (vBufPtr),hl   
0984   B7                     OR   a   
0985   ED 52                  SBC   hl,de   
0987   E5                     PUSH   hl   
0988   DD E9                  JP   (ix)   
098A                BUFFERHEX1:      
098A   F5                     PUSH   af   
098B   1F                     RRA      
098C   1F                     RRA      
098D   1F                     RRA      
098E   1F                     RRA      
098F   CD 93 09               CALL   bufferHex2   
0992   F1                     POP   af   
0993                BUFFERHEX2:      
0993   E6 0F                  AND   0x0F   
0995   C6 90                  ADD   a,0x90   
0997   27                     DAA      
0998   CE 40                  ADC   a,0x40   
099A   27                     DAA      
099B   12                     LD   (de),a   
099C   13                     INC   de   
099D   C9                     RET      
099E                             ; /br break from loop
099E                             ; --
099E                BREAK:       
099E   E1                     POP   hl   
099F   7D                     LD   a,l   
09A0   B4                     OR   h   
09A1   28 02                  JR   z,break1   
09A3   DD E9                  JP   (ix)   
09A5                BREAK1:      
09A5   FD 5D                  LD   e,iyl   ; get block* just under stack frame
09A7   FD 54                  LD   d,iyh   
09A9   21 08 00               LD   hl,8   
09AC   19                     ADD   hl,de   
09AD   23                     INC   hl   
09AE   23                     INC   hl   
09AF   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
09B2   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
09B5   C3 39 05               JP   blockEnd   
09B8                             ; /bs buffered string
09B8                             ; string* -- length
09B8                BUFFERSTRING:      
09B8   E1                     POP   hl   ; hl = string*
09B9   ED 5B EA 21            LD   de,(vBufPtr)   ; de = buffer*
09BD   18 03                  JR   bufferString1   
09BF                BUFFERSTRING0:      
09BF   12                     LD   (de),a   ; a -> buffer*
09C0   13                     INC   de   ; string*++ buffer++
09C1   23                     INC   hl   
09C2                BUFFERSTRING1:      
09C2   7E                     LD   a,(hl)   ; a <- string*
09C3   B7                     OR   a   ; if NUL exit loop
09C4   20 F9                  JR   nz,bufferString0   
09C6   2A EA 21               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
09C9   ED 53 EA 21            LD   (vBufPtr),de   ; save buffer*' in pointer
09CD   EB                     EX   de,hl   ; hl = length
09CE   B7                     OR   a   
09CF   ED 52                  SBC   hl,de   
09D1   E5                     PUSH   hl   ; return length
09D2   DD E9                  JP   (ix)   
09D4                             ; /bx buffered x spaces
09D4                             ; length -- length
09D4                BUFFERXSPACES:      
09D4   D1                     POP   de   ; bc = length
09D5   D5                     PUSH   de   ; return length
09D6   2A EA 21               LD   hl,(vBufPtr)   ; hl = buffer*
09D9   18 04                  JR   bufferXSpaces2   
09DB                BUFFERXSPACES1:      
09DB   36 20                  LD   (hl)," "   
09DD   23                     INC   hl   
09DE   1B                     DEC   de   
09DF                BUFFERXSPACES2:      
09DF   7B                     LD   a,e   
09E0   B2                     OR   d   
09E1   20 F8                  JR   nz,bufferXSpaces1   
09E3   22 EA 21               LD   (vBufPtr),hl   ; save buffer*'
09E6   DD E9                  JP   (ix)   
09E8                COMMAND_P:      
09E8   03                     INC   bc   
09E9   0A                     LD   a,(bc)   
09EA   FE 61                  CP   "a"   
09EC   CA 01 0A               JP   z,partial   
09EF   FE 63                  CP   "c"   
09F1   CA 21 0A               JP   z,printChars   
09F4   FE 6B                  CP   "k"   
09F6   CA 33 0A               JP   z,printStack   
09F9   FE 78                  CP   "x"   
09FB   CA 35 0A               JP   z,printX   
09FE   C3 8F 08               JP   error1   
0A01                             ; partial
0A01                             ; array* func* -- func1*
0A01                PARTIAL:      
0A01   E1                     POP   hl   ; h1 = func*
0A02   ED 5B EE 21            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
0A06   ED 43 FC 21            LD   (vTemp1),bc   ; save IP
0A0A   01 06 00               LD   bc,6   ; bc = count
0A0D   ED B0                  LDIR      ; clone func
0A0F   ED 4B FC 21            LD   bc,(vTemp1)   ; restore IP
0A13   2A EE 21               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
0A16   ED 53 EE 21            LD   (vHeapPtr),de   ; heap* += 6
0A1A   D1                     POP   de   ; de = array*
0A1B   E5                     PUSH   hl   ; return partial_array*
0A1C   73                     LD   (hl),e   ; compile array*
0A1D   23                     INC   hl   
0A1E   72                     LD   (hl),d   
0A1F   DD E9                  JP   (ix)   
0A21                             ; printChars
0A21                             ; char* len --
0A21                             ; prints whatever in in buffer starting from TIB and ending at vTIBPtr*
0A21                PRINTCHARS:      
0A21   E1                     POP   hl   
0A22   2B                     DEC   hl   
0A23   D1                     POP   de   
0A24   C3 29 0A               JP   printChars2   
0A27                PRINTCHARS1:      
0A27   13                     INC   de   
0A28   2B                     DEC   hl   
0A29                PRINTCHARS2:      
0A29   1A                     LD   a,(de)   
0A2A   CD 85 00               CALL   putchar   
0A2D   7D                     LD   a,l   
0A2E   B4                     OR   h   
0A2F   20 F6                  JR   nz,printChars1   
0A31   DD E9                  JP   (ix)   
0A33                             ; /pk print stack
0A33                             ; --
0A33                PRINTSTACK:      
0A33                             ;     ld (vTemp1),bc
0A33                             ;     call printStr
0A33                             ;     .cstr "=> "
0A33                             ;     ld hl,STACK
0A33                             ;     sbc hl,sp
0A33                             ;     srl h
0A33                             ;     rr l
0A33                             ;     ld bc,hl
0A33                             ;     ld hl,STACK
0A33                             ;     jr printStack2
0A33                             ; printStack1:
0A33                             ;     dec bc
0A33                             ;     dec hl
0A33                             ;     ld d,(hl)
0A33                             ;     dec hl
0A33                             ;     ld e,(hl)
0A33                             ;     ex de,hl
0A33                             ;     call prthex
0A33                             ;     ex de,hl
0A33                             ;     ld a," "
0A33                             ;     call putchar
0A33                             ; printStack2:
0A33                             ;     ld a,c
0A33                             ;     or b
0A33                             ;     jr nz,printStack1
0A33                             ;     call prompt
0A33                             ;     ld bc,(vTemp1)
0A33   DD E9                  JP   (ix)   
0A35                PRINTX:      
0A35   CD 7B 06               CALL   go   
0A38   00 00                  DW   NUL   ; closure
0A3A   3E 0A                  DW   printX_block   
0A3C   28 0B                  DW   args1A0L   
0A3E                PRINTX_BLOCK:      
0A3E   7B 24 61 20 31 2F 62 78 2B 24 61 3D 20 2F 76 62 24 61 2D 2F 76 62 3D 20 2F 76 62 24 61 2F 70 63 7D 00 .CSTR   "{$a 1/bx+$a= /vb$a-/vb= /vb$a/pc}"   ; block
0A60                COMMAND_V:      
0A60   03                     INC   bc   
0A61   0A                     LD   a,(bc)   
0A62   FE 62                  CP   "b"   
0A64   CA 92 0A               JP   z,varBufPtr   
0A67   FE 68                  CP   "h"   
0A69   CA 9B 0A               JP   z,varHeapPtr   
0A6C   FE 74                  CP   "t"   
0A6E   CA A4 0A               JP   z,varTIBPtr   
0A71   FE 42                  CP   "B"   
0A73   CA 83 0A               JP   z,constBufStart   
0A76   FE 48                  CP   "H"   
0A78   CA 88 0A               JP   z,constHeapStart   
0A7B   FE 54                  CP   "T"   
0A7D   CA 8D 0A               JP   z,constTIBStart   
0A80   C3 8F 08               JP   error1   
0A83                CONSTBUFSTART:      
0A83   11 00 24               LD   de,BUF   
0A86   18 28                  JR   constant   
0A88                CONSTHEAPSTART:      
0A88   11 00 26               LD   de,HEAP   
0A8B   18 23                  JR   constant   
0A8D                CONSTTIBSTART:      
0A8D   11 00 23               LD   de,TIB   
0A90   18 1E                  JR   constant   
0A92                VARBUFPTR:      
0A92   ED 5B EA 21            LD   de,(vBufPtr)   
0A96   21 EA 21               LD   hl,vBufPtr   
0A99   18 12                  JR   variable   
0A9B                VARHEAPPTR:      
0A9B   ED 5B EE 21            LD   de,(vHeapPtr)   
0A9F   21 EE 21               LD   hl,vHeapPtr   
0AA2   18 09                  JR   variable   
0AA4                VARTIBPTR:      
0AA4   ED 5B E8 21            LD   de,(vTIBPtr)   
0AA8   21 E8 21               LD   hl,vTIBPtr   
0AAB   18 00                  JR   variable   
0AAD                VARIABLE:      
0AAD   22 F0 21               LD   (vPointer),hl   
0AB0                CONSTANT:      
0AB0   D5                     PUSH   de   
0AB1   DD E9                  JP   (ix)   
0AB3                COMMAND_I:      
0AB3   03                     INC   bc   
0AB4   0A                     LD   a,(bc)   
0AB5   FE 6E                  CP   "n"   ; /in input
0AB7   CA CA 0A               JP   z,input   
0ABA   FE 76                  CP   "v"   ; /iv invert
0ABC   CA C5 03               JP   z,invert   
0ABF   C3 8F 08               JP   error1   
0AC2                CHARS:       
0AC2   21 01 00               LD   hl,1   
0AC5                CHARS1:      
0AC5   22 E6 21               LD   (vDataWidth),hl   
0AC8   DD E9                  JP   (ix)   
0ACA                             ; Z80 port input
0ACA                             ; port -- value
0ACA                INPUT:       
0ACA   E1                     POP   hl   
0ACB   59                     LD   e,c   ; save IP
0ACC   4D                     LD   c,l   
0ACD   ED 68                  IN   l,(c)   
0ACF   26 00                  LD   h,0   
0AD1   4B                     LD   c,e   ; restore IP
0AD2   E5                     PUSH   hl   
0AD3   DD E9                  JP   (ix)   
0AD5                KEY:         
0AD5   CD 81 00               CALL   getchar   
0AD8   26 00                  LD   h,0   
0ADA   6F                     LD   l,a   
0ADB   E5                     PUSH   hl   
0ADC   DD E9                  JP   (ix)   
0ADE                             ; Z80 port output
0ADE                             ; value port --
0ADE                OUTPUT:      
0ADE   E1                     POP   hl   
0ADF   59                     LD   e,c   ; save IP
0AE0   4D                     LD   c,l   
0AE1   E1                     POP   hl   
0AE2   ED 69                  OUT   (c),l   
0AE4   4B                     LD   c,e   ; restore IP
0AE5   DD E9                  JP   (ix)   
0AE7                NUMBERS:      
0AE7   21 02 00               LD   hl,2   
0AEA   C3 C5 0A               JP   chars1   
0AED                             ; 
0AED                             ; 
0AED                             ; 
0AED                             ; 
0AED                FILTER:      
0AED                MAP:         
0AED                SCAN:        
0AED   DD E9                  JP   (ix)   
0AEF                ZPRT:        
0AEF   CD 7B 06               CALL   go   
0AF2   00 00                  DW   NUL   ; closure
0AF4   FC 0A                  DW   zprt_block   
0AF6   FA 0A                  DW   zprt_args   
0AF8   02                     DB   2   ; num args + locals
0AF9   01                     DB   1   ; num locals
0AFA                ZPRT_ARGS:      
0AFA   6E 73                  DB   "ns"   
0AFC                ZPRT_BLOCK:      
0AFC   7B 24 6E 2F 62 64 60 20 60 2F 62 73 20 2B 24 73 3D 20 2F 76 62 24 73 2D 2F 76 62 3D 20 2F 76 62 24 73 2F 70 63 7D 00 .CSTR   "{$n/bd` `/bs +$s= /vb$s-/vb= /vb$s/pc}"   ; block
0B23                             ;*******************************************************************
0B23                             ; reusable arglists
0B23                             ;*******************************************************************
0B23                ARGS0A1L_:      ; zero args one local
0B23   01                     DB   1   ; num args + locals
0B24   01                     DB   1   ; num locals
0B25                ARGS0A1L:      
0B25   61                     DB   "a"   
0B26                ARGS1A0L_:      ; one arg zero locals
0B26   01                     DB   1   ; num args + locals
0B27   00                     DB   0   ; num locals
0B28                ARGS1A0L:      
0B28   61                     DB   "a"   
0B29                ARGS1A1L_:      ; one arg one local
0B29   02                     DB   2   ; num args + locals
0B2A   01                     DB   1   ; num locals
0B2B                ARGS1A1L:      
0B2B   61 62                  DB   "ab"   
0B2D                ARGS2A0L_:      ; two args zero locals
0B2D   02                     DB   2   ; num args + locals
0B2E   00                     DB   0   ; num locals
0B2F                ARGS2A0L:      
0B2F   61 62                  DB   "ab"   
0B31                             ;*******************************************************************
0B31                             ; general routines
0B31                             ;*******************************************************************
0B31                PRTSTR0:      
0B31   CD 85 00               CALL   putchar   
0B34   23                     INC   hl   
0B35                PRTSTR:      
0B35   7E                     LD   a,(hl)   
0B36   B7                     OR   a   
0B37   20 F8                  JR   nz,prtstr0   
0B39   C9                     RET      
0B3A                             ; **************************************************************************
0B3A                             ; calculate nesting value
0B3A                             ; a is char to be tested,
0B3A                             ; e is the nesting value (initially 0)
0B3A                             ; e is increased by ( and [
0B3A                             ; e is decreased by ) and ]
0B3A                             ; e has its bit 7 toggled by `
0B3A                             ; limited to 127 levels
0B3A                             ; **************************************************************************
0B3A                NESTING:      
0B3A   FE 22                  CP   DQUOTE   ; quote char
0B3C   28 06                  JR   z,nesting0   
0B3E   FE 60                  CP   "`"   ; quote char
0B40   28 02                  JR   z,nesting0   
0B42   18 0A                  JR   nesting1   
0B44                NESTING0:      
0B44   CB 7B                  BIT   7,e   
0B46   28 03                  JR   z,nesting1a   
0B48   CB BB                  RES   7,e   
0B4A   C9                     RET      
0B4B                NESTING1A:      
0B4B   CB FB                  SET   7,e   
0B4D   C9                     RET      
0B4E                NESTING1:      
0B4E   CB 7B                  BIT   7,e   
0B50   C0                     RET   nz   
0B51   FE 7B                  CP   "{"   
0B53   28 08                  JR   z,nesting2   
0B55   FE 5B                  CP   "["   
0B57   28 04                  JR   z,nesting2   
0B59   FE 28                  CP   "("   
0B5B   20 02                  JR   nz,nesting3   
0B5D                NESTING2:      
0B5D   1C                     INC   e   
0B5E   C9                     RET      
0B5F                NESTING3:      
0B5F   FE 7D                  CP   "}"   
0B61   28 07                  JR   z,nesting4   
0B63   FE 5D                  CP   "]"   
0B65   28 03                  JR   z,nesting4   
0B67   FE 29                  CP   ")"   
0B69   C0                     RET   nz   
0B6A                NESTING4:      
0B6A   1D                     DEC   e   
0B6B   C9                     RET      
0B6C                PROMPT:      
0B6C   CD 7C 0B               CALL   printStr   
0B6F   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0B74   C9                     RET      
0B75                CRLF:        
0B75   CD 7C 0B               CALL   printStr   
0B78   0D 0A 00               .CSTR   "\r\n"   
0B7B   C9                     RET      
0B7C                             ; prints a null teminated string
0B7C                             ; the string should be immediately following the call
0B7C                PRINTSTR:      
0B7C   E3                     EX   (sp),hl   ; swap			
0B7D   CD 35 0B               CALL   prtstr   
0B80   23                     INC   hl   ; inc past NUL
0B81   E3                     EX   (sp),hl   ; put it back	
0B82   C9                     RET      
0B83                INIT:        
0B83   DD 2A EC 21            LD   ix,(vNext)   
0B87   FD 21 80 20            LD   iy,STACK   
0B8B   21 80 01               LD   hl,isysVars   
0B8E   11 E6 21               LD   de,sysVars   
0B91   01 10 00               LD   bc,8 * 2   
0B94   ED B0                  LDIR      
0B96   21 00 21               LD   hl,vars   ; 52 vars LO HI
0B99   06 34                  LD   b,26*2   
0B9B   AF                     XOR   a   
0B9C                INIT0:       
0B9C   77                     LD   (hl),a   
0B9D   23                     INC   hl   
0B9E   10 FC                  DJNZ   init0   
0BA0   C9                     RET      
0BA1                START:       
0BA1   31 80 20               LD   sp,STACK   ; start Monty
0BA4   CD 83 0B               CALL   init   ; setups
0BA7   CD 7C 0B               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0BAA   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
0BB7                INTERPRET:      
0BB7   CD 6C 0B               CALL   prompt   
0BBA   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0BBD   21 00 23               LD   hl,TIB   
0BC0   22 E8 21               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0BC3                INTERPRET2:      ; calculate nesting
0BC3   1E 00                  LD   e,0   ; initilize nesting value
0BC5   C5                     PUSH   bc   ; save offset into TIB,
0BC6                             ; bc is also the count of chars in TIB
0BC6   21 00 23               LD   hl,TIB   ; hl is start of TIB
0BC9   18 06                  JR   interpret4   
0BCB                INTERPRET3:      
0BCB   7E                     LD   a,(hl)   ; a = char in TIB
0BCC   23                     INC   hl   ; inc pointer into TIB
0BCD   0B                     DEC   bc   ; dec count of chars in TIB
0BCE   CD 3A 0B               CALL   nesting   ; update nesting value
0BD1                INTERPRET4:      
0BD1   79                     LD   a,c   ; is count zero?
0BD2   B0                     OR   b   
0BD3   20 F6                  JR   nz,interpret3   ; if not loop
0BD5   C1                     POP   bc   ; restore offset into TIB
0BD6                INTERPRET5:      
0BD6   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0BD9   FE 20                  CP   $20   ; compare to space
0BDB   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0BDD   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0BDF                             ; ???? NEEDED?
0BDF   28 3B                  JR   z,interpret8   
0BE1   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0BE3   28 24                  JR   z,interpret7   ; if anything else its macro/control
0BE5   FE 05                  CP   CTRL_E   
0BE7   CA 6A 0C               JP   z,edit_   
0BEA   FE 08                  CP   CTRL_H   
0BEC   CA 5A 0C               JP   z,backSpace_   
0BEF   FE 0A                  CP   CTRL_J   
0BF1   CA 82 0C               JP   z,reEdit_   
0BF4   FE 13                  CP   CTRL_S   
0BF6   CA 85 0C               JP   z,printStack_   
0BF9                             ; DB     lsb(edit_)       ; ENQ ^E  5
0BF9                             ; DB     lsb(reedit_)     ; LF  ^J 10
0BF9                             ; DB     lsb(list_)       ; FF  ^L 12
0BF9                             ; DB     lsb(printStack_) ; DLE ^P 16
0BF9                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0BF9                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0BF9                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0BF9                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0BF9                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0BF9                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0BF9                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0BF9                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0BF9                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0BF9                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0BF9                INTERPRET5A:      
0BF9                             ; ld (vTIBPtr),bc
0BF9                             ; ld bc,(vTIBPtr)
0BF9   18 C8                  JR   interpret2   
0BFB                INTERPRET6:      
0BFB   21 00 23               LD   hl,TIB   
0BFE   09                     ADD   hl,bc   
0BFF   77                     LD   (hl),a   ; store the character in textbuf
0C00   03                     INC   bc   
0C01   CD 85 00               CALL   putchar   ; echo character to screen
0C04   CD 3A 0B               CALL   nesting   
0C07   18 CD                  JR   interpret5   ; wait for next character
0C09                INTERPRET7:      
0C09   21 00 23               LD   hl,TIB   
0C0C   09                     ADD   hl,bc   
0C0D   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0C0F   23                     INC   hl   
0C10   36 0A                  LD   (hl),"\n"   
0C12   23                     INC   hl   
0C13   03                     INC   bc   
0C14   03                     INC   bc   
0C15   CD 75 0B               CALL   crlf   ; echo character to screen
0C18   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0C19   B7                     OR   a   
0C1A   20 BA                  JR   nz,interpret5   
0C1C                INTERPRET8:      
0C1C   21 00 23               LD   hl,TIB   
0C1F   09                     ADD   hl,bc   
0C20   22 E8 21               LD   (vTIBPtr),hl   
0C23   01 00 23               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0C26                             ; we pressed enter
0C26   0B                     DEC   bc   
0C27                NEXT:        
0C27   03                     INC   bc   ; Increment the IP
0C28   0A                     LD   a,(bc)   ; Get the next character and dispatch
0C29   FE 20                  CP   " "   ; whitespace?
0C2B   28 FA                  JR   z,next   ; space? ignore
0C2D   38 09                  JR   c,next1   
0C2F   D6 20                  SUB   " "   
0C31   6F                     LD   l,a   ; index into table
0C32   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0C34   6E                     LD   l,(hl)   ; get low jump address
0C35   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0C37   E9                     JP   (hl)   ; Jump to routine
0C38                NEXT1:       
0C38   FE 00                  CP   NUL   ; end of input string?
0C3A   28 03                  JR   z,exit   
0C3C   C3 B7 0B               JP   interpret   ; no, other whitespace, macros?
0C3F                EXIT:        
0C3F   03                     INC   bc   
0C40   60 69                  LD   hl,bc   
0C42   E9                     JP   (hl)   
0C43                RUN:         
0C43   C1                     POP   bc   
0C44   0B                     DEC   bc   
0C45   DD E9                  JP   (ix)   
0C47                ERROR:       
0C47   CD 43 0C               CALL   run   
0C4A   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQUOTE,"Error ",DQUOTE,".s .",0   
0C57   C3 B7 0B               JP   interpret   
0C5A                BACKSPACE_:      
0C5A   79                     LD   a,c   
0C5B   B0                     OR   b   
0C5C   CA C3 0B               JP   z,interpret2   
0C5F   0B                     DEC   bc   
0C60   CD 7C 0B               CALL   printStr   
0C63   08 20 08 00            .CSTR   "\b \b"   
0C67   C3 C3 0B               JP   interpret2   
0C6A                             ; edit
0C6A                EDIT_:       
0C6A   CD 43 0C               CALL   run   
0C6D   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0C7F   C3 B7 0B               JP   interpret   
0C82                REEDIT_:      
0C82   C3 B7 0B               JP   interpret   
0C85                PRINTSTACK_:      
0C85   CD 43 0C               CALL   run   
0C88   2F 70 6B 00            .CSTR   "/pk"   
0C8C   C3 B7 0B               JP   interpret   
0C8F                             ; editDef:
0C8F                             ;     pop hl                      ; pop ret address
0C8F                             ;     ex (sp),hl                  ; swap with TOS
0C8F                             ;     push hl                     ; dup TOS
0C8F                             ;     ld a,l                      ; a = ident
0C8F                             ;     ld de,TIB                   ; de = start of TIB
0C8F                             ;     ld (vTIBPtr),de             ; update TIB*
0C8F                             ;     push ix                     ; save NEXT
0C8F                             ;     ld ix,editDef0              ; NEXT = editDef0
0C8F                             ;     jp lookupRef                ; convert letter into address
0C8F                             ; editDef0:
0C8F                             ;     ld e,(hl)                   ; de = (hl++)
0C8F                             ;     inc hl
0C8F                             ;     ld d,(hl)
0C8F                             ;     ld a,d                      ; de == 0 ?
0C8F                             ;     or e
0C8F                             ;     jr z,editDef4
0C8F                             ;     ld ix,editDef3              ; NEXT = editDef3
0C8F                             ;     ex de,hl
0C8F                             ;     ld a,(hl)
0C8F                             ;     cp "{"
0C8F                             ;     jr nz,editDef1
0C8F                             ;     jp editBlock0               ; convert letter into address
0C8F                             ; editDef1:
0C8F                             ;     cp "("
0C8F                             ;     jr nz,editDef2
0C8F                             ;     jp editBlock0               ; convert letter into address
0C8F                             ; editDef2:
0C8F                             ;     jp editFunc
0C8F                             ; editDef3:
0C8F                             ;     ld a," "                    ; write assign
0C8F                             ;     call writeChar
0C8F                             ;     pop hl                      ; a = ident
0C8F                             ;     ld a,l
0C8F                             ;     call writeChar
0C8F                             ;     ld a,"="                    ; write assign
0C8F                             ;     call writeChar
0C8F                             ;     ld ix,editDef4              ; NEXT = editDef4
0C8F                             ;     jp printTIB
0C8F                             ; editDef4:
0C8F                             ;     pop ix                      ; restore NEXT
0C8F                             ;     jp (ix)
0C8F                             ; writeChar:
0C8F                             ;     ld de,(vTIBPtr)             ; de = TIB*
0C8F                             ;     ld (de),a                   ; write ident
0C8F                             ;     inc de
0C8F                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0C8F                             ;     ret
0C8F                             ; ; printTIB
0C8F                             ; printTIB:
0C8F                             ;     ld hl,(vTIBPtr)
0C8F                             ;     ld de,TIB
0C8F                             ;     or a
0C8F                             ;     sbc hl,de
0C8F                             ;     jp printTIB2
0C8F                             ; printTIB1:
0C8F                             ;     ld a,(de)
0C8F                             ;     call putchar
0C8F                             ; printTIB2:
0C8F                             ;     ld a,l
0C8F                             ;     or h
0C8F                             ;     jr nz,printTIB1
0C8F                             ;     jp (ix)
0C8F                             ; editBlock:
0C8F                             ;     pop hl                      ; hl = block*
0C8F                             ; editBlock0:
0C8F                             ;     push ix                     ; save next
0C8F                             ;     push hl                     ; push block*
0C8F                             ;     push hl                     ; push block*
0C8F                             ;     ld ix,(editBlock2)
0C8F                             ;     jp blockLength
0C8F                             ; editBlock1:
0C8F                             ;     pop hl                      ; bc = length, (sp) = IP
0C8F                             ;     pop de                      ; de = block*
0C8F                             ;     ld a,l
0C8F                             ;     or h
0C8F                             ;     jr z,editBlock2
0C8F                             ;     push bc
0C8F                             ;     ld bc,hl
0C8F                             ;     ex de,hl                    ; hl = block*
0C8F                             ;     ld de,(vTIBPtr)              ; de = TIB*
0C8F                             ;     ldir                        ; copy block to TIB
0C8F                             ;     ld (vTIBPtr),de              ; save TIB*
0C8F                             ;     pop bc
0C8F                             ; editBlock2:
0C8F                             ;     pop ix                      ; restore next
0C8F                             ;     jp (ix)
0C8F                             ; editFunc:
0C8F                             ;     jp (ix)
0C8F                             ; editArray:
0C8F                             ;     jp (ix)
0C8F                             ; editArglist:
0C8F                             ;     jp (ix)
0C8F                             ; ; blockLength
0C8F                             ; ; addr1 -- length
0C8F                             ; blockLength:
0C8F                             ;     pop hl                      ; block*
0C8F                             ;     push hl                     ; save block*
0C8F                             ;     inc hl                      ; skip first char
0C8F                             ;     ld d,1                      ; increase nesting
0C8F                             ; blockLength1:                   ; Skip to end of definition
0C8F                             ;     ld a,(hl)                   ; Get the next character
0C8F                             ;     inc hl                      ; Point to next character
0C8F                             ;     cp " " + 1                  ; ignore whitespace
0C8F                             ;     jr c,blockLength1
0C8F                             ;     cp ")"
0C8F                             ;     jr z,blockLength4
0C8F                             ;     cp "}"
0C8F                             ;     jr z,blockLength4
0C8F                             ;     cp "]"
0C8F                             ;     jr z,blockLength4
0C8F                             ;     cp "("
0C8F                             ;     jr z,blockLength2
0C8F                             ;     cp "{"
0C8F                             ;     jr z,blockLength2
0C8F                             ;     cp "["
0C8F                             ;     jr z,blockLength2
0C8F                             ;     cp "'"
0C8F                             ;     jr z,blockLength3
0C8F                             ;     cp "`"
0C8F                             ;     jr z,blockLength3
0C8F                             ;     cp DQUOTE
0C8F                             ;     jr z,blockLength3
0C8F                             ;     jr blockLength1
0C8F                             ; blockLength2:
0C8F                             ;     inc d
0C8F                             ;     jr blockLength1
0C8F                             ; blockLength4:
0C8F                             ;     dec d
0C8F                             ;     jr nz, blockLength1         ; get the next element
0C8F                             ; blockLength3:
0C8F                             ;     ld a,$80
0C8F                             ;     xor d
0C8F                             ;     ld d,a
0C8F                             ;     jr nz, blockLength1
0C8F                             ;     pop hl                      ; hl = block*
0C8F                             ;     or a
0C8F                             ;     sbc hl,de
0C8F                             ;     push hl
0C8F                             ;     jp (ix)
0C8F                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0C8F                             ; \a start of stack \#3 depth \b base \$ prompt
0C8F                             ; DW dStack               ; a vS0 start of datastack			
0C8F                             ; DW FALSE                ; b vBase16
0C8F                             ; DW 0                    ; c vTIBPtr an offset to the tib
0C8F                             ; DW 0                    ; d
0C8F                             ; DW 65                   ; e vLastDef "A" last command u defined
0C8F                             ; DW 0                    ; f
0C8F                             ; DW page6                ; g 256 bytes limits
0C8F                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0C8F                             ; 
2000                          .ORG   RAMSTART   
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2080                STACK:       
2080                          ALIGN   $100   
2100                VARS:        
2100                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
21D0                RESTARTS:      
21D0                RST08:    DS   2   
21D2                RST10:    DS   2   
21D4                RST18:    DS   2   
21D6                RST20:    DS   2   
21D8                RST28:    DS   2   
21DA                RST30:    DS   2   ; 
21DC                BAUD:     DS   2   ; 
21DE                INTVEC:   DS   2   ; 
21E0                NMIVEC:   DS   2   ; 
21E2                GETCVEC:   DS   2   ; 
21E4                PUTCVEC:   DS   2   ; 
21E6                SYSVARS:      
21E6                             ; initialised sys variables (preserved)
21E6                VDATAWIDTH:   DS   2   ; 
21E8                VTIBPTR:   DS   2   ; 
21EA                VBUFPTR:   DS   2   ; 
21EC                VNEXT:    DS   2   ; 
21EE                VHEAPPTR:   DS   2   ; 
21F0                             ; uninitialised sys variables (preserved)
21F0                VPOINTER:   DS   2   ; 
21F2                VREMAIN:   DS   2   ; 
21F4                VSAVEDIP:   DS   2   ; 
21F6                VSAVEDSP:   DS   2   ; 
21F8                VSAVEDBP:   DS   2   ; 
21FA                VCHECKSUM:   DS   2   ; 
21FC                             ; uninitialised sys variables (unpreserved)
21FC                VTEMP1:   DS   2   ; 
21FE                VTEMP2:   DS   2   ; 
2200                VLASTDEF:   DS   2   ; 
2202                VHASHSTR:   DS   2   ; 
2204                TBPTR:    DS   2   ; reserved for tests
2206                          ALIGN   $100   
2300                TIB:      DS   TIBSIZE   
2400                BUF:      DS   BUFSIZE   
2500                          ALIGN   $100   
2500                PAD:      DS   $100   
2600                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 12
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0AED DEFINED AT LINE 1698 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 30 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1670 IN MAIN.asm
                    > USED AT LINE 1868 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1544 IN MAIN.asm
                    > USED AT LINE 1745 IN MAIN.asm
                    > USED AT LINE 1913 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
STKSIZE:            0080 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 53 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 54 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 818 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 823 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 1584 IN MAIN.asm
                    > USED AT LINE 1703 IN MAIN.asm
                    > USED AT LINE 1871 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
DQUOTE:             0022 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
                    > USED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 1764 IN MAIN.asm
                    > USED AT LINE 1966 IN MAIN.asm
                    > USED AT LINE 1981 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 23 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 24 IN MAIN.asm
                    > USED AT LINE 1877 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 25 IN MAIN.asm
                    > USED AT LINE 1879 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 27 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 28 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 29 IN MAIN.asm
                    > USED AT LINE 1883 IN MAIN.asm
TRESERV:            0000 DEFINED AT LINE 32 IN MAIN.asm
TNUMBER:            0001 DEFINED AT LINE 33 IN MAIN.asm
TSTRING:            0002 DEFINED AT LINE 34 IN MAIN.asm
TPOINTER:           0003 DEFINED AT LINE 35 IN MAIN.asm
TARRAY:             0004 DEFINED AT LINE 36 IN MAIN.asm
                    > USED AT LINE 423 IN MAIN.asm
TBLOCK:             0005 DEFINED AT LINE 37 IN MAIN.asm
TFUNC:              0006 DEFINED AT LINE 38 IN MAIN.asm
TARGLST:            0007 DEFINED AT LINE 39 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 53 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN MAIN.asm
                    > USED AT LINE 1822 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 67 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 170 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 172 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 174 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 176 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 178 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 180 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 182 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 184 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 186 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 188 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 190 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 192 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 194 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 196 IN MAIN.asm
UNDERSCORE_:        0327 DEFINED AT LINE 198 IN MAIN.asm
COLON_:             032A DEFINED AT LINE 200 IN MAIN.asm
UPCASE_:            032D DEFINED AT LINE 202 IN MAIN.asm
LOWCASE_:           0330 DEFINED AT LINE 204 IN MAIN.asm
QUESTION_:          0333 DEFINED AT LINE 206 IN MAIN.asm
STAR_:              0336 DEFINED AT LINE 208 IN MAIN.asm
BANG_:              0339 DEFINED AT LINE 210 IN MAIN.asm
NUM_:               033E DEFINED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 1190 IN MAIN.asm
HASH_:              0341 DEFINED AT LINE 215 IN MAIN.asm
PIPE_:              0344 DEFINED AT LINE 217 IN MAIN.asm
CARET_:             0347 DEFINED AT LINE 219 IN MAIN.asm
COMMA_:             034A DEFINED AT LINE 221 IN MAIN.asm
DBLQUOTE_:          034D DEFINED AT LINE 223 IN MAIN.asm
MINUS_:             0350 DEFINED AT LINE 225 IN MAIN.asm
EQ_:                0353 DEFINED AT LINE 227 IN MAIN.asm
EQ0:                035D DEFINED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 231 IN MAIN.asm
EQ1:                035E DEFINED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
GT_:                0362 DEFINED AT LINE 240 IN MAIN.asm
LPAREN_:            036D DEFINED AT LINE 248 IN MAIN.asm
LT_:                0370 DEFINED AT LINE 250 IN MAIN.asm
LT1:                0379 DEFINED AT LINE 257 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
SLASH_:             0382 DEFINED AT LINE 262 IN MAIN.asm
NOP_:               0385 DEFINED AT LINE 264 IN MAIN.asm
RPAREN_:            0387 DEFINED AT LINE 266 IN MAIN.asm
PLUS:               038A DEFINED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 173 IN MAIN.asm
ADD:                038A DEFINED AT LINE 273 IN MAIN.asm
ADD1:               0395 DEFINED AT LINE 281 IN MAIN.asm
                    > USED AT LINE 277 IN MAIN.asm
ADD3:               0399 DEFINED AT LINE 286 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
                    > USED AT LINE 1036 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
AT:                 039C DEFINED AT LINE 297 IN MAIN.asm
                    > USED AT LINE 175 IN MAIN.asm
ADDR:               039C DEFINED AT LINE 298 IN MAIN.asm
AMPER:              03A6 DEFINED AT LINE 303 IN MAIN.asm
                    > USED AT LINE 177 IN MAIN.asm
AND:                03A6 DEFINED AT LINE 304 IN MAIN.asm
AND1:               03AD DEFINED AT LINE 312 IN MAIN.asm
                    > USED AT LINE 326 IN MAIN.asm
PIPE:               03B1 DEFINED AT LINE 317 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
OR:                 03B1 DEFINED AT LINE 318 IN MAIN.asm
XOR:                03BA DEFINED AT LINE 328 IN MAIN.asm
                    > USED AT LINE 1239 IN MAIN.asm
XOR1:               03BB DEFINED AT LINE 330 IN MAIN.asm
                    > USED AT LINE 342 IN MAIN.asm
INVERT:             03C5 DEFINED AT LINE 340 IN MAIN.asm
                    > USED AT LINE 1646 IN MAIN.asm
DOLLAR:             03CA DEFINED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
ARG:                03CA DEFINED AT LINE 348 IN MAIN.asm
ARG0:               03E8 DEFINED AT LINE 369 IN MAIN.asm
                    > USED AT LINE 375 IN MAIN.asm
ARG0A:              03F1 DEFINED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 354 IN MAIN.asm
                    > USED AT LINE 361 IN MAIN.asm
ARG1:               03F6 DEFINED AT LINE 380 IN MAIN.asm
                    > USED AT LINE 373 IN MAIN.asm
ARG1A:              03FE DEFINED AT LINE 387 IN MAIN.asm
                    > USED AT LINE 379 IN MAIN.asm
LBRACK:             0401 DEFINED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
ARRAYSTART:         0401 DEFINED AT LINE 392 IN MAIN.asm
RBRACK:             041D DEFINED AT LINE 406 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
ARRAYEND:           041D DEFINED AT LINE 407 IN MAIN.asm
ARRAYEND1:          043B DEFINED AT LINE 426 IN MAIN.asm
                    > USED AT LINE 442 IN MAIN.asm
ARRAYEND2:          044B DEFINED AT LINE 436 IN MAIN.asm
                    > USED AT LINE 432 IN MAIN.asm
ARRINDEX:           0470 DEFINED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
ARRINDEX0:          0478 DEFINED AT LINE 470 IN MAIN.asm
ARRINDEX1:          0479 DEFINED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
ARRINDEX2:          0485 DEFINED AT LINE 481 IN MAIN.asm
                    > USED AT LINE 478 IN MAIN.asm
ASSIGN:             0488 DEFINED AT LINE 486 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
ASSIGN0:            048A DEFINED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 280 IN MAIN.asm
                    > USED AT LINE 1197 IN MAIN.asm
ASSIGNX:            048B DEFINED AT LINE 491 IN MAIN.asm
ASSIGN1:            0497 DEFINED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
COLON:              0499 DEFINED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
ARGLIST:            0499 DEFINED AT LINE 507 IN MAIN.asm
ARGLIST1:           04A3 DEFINED AT LINE 514 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
ARGLIST1A:          04AB DEFINED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 517 IN MAIN.asm
ARGLIST2:           04B3 DEFINED AT LINE 525 IN MAIN.asm
ARGLIST3:           04BB DEFINED AT LINE 533 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
                    > USED AT LINE 531 IN MAIN.asm
ARGLIST4:           04BE DEFINED AT LINE 536 IN MAIN.asm
                    > USED AT LINE 522 IN MAIN.asm
                    > USED AT LINE 524 IN MAIN.asm
ARGLIST5:           04C4 DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
LBRACE:             04D0 DEFINED AT LINE 553 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
BLOCK:              04D0 DEFINED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 828 IN MAIN.asm
BLOCK1:             04D4 DEFINED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 587 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 596 IN MAIN.asm
BLOCK2:             0500 DEFINED AT LINE 585 IN MAIN.asm
                    > USED AT LINE 572 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
BLOCK3:             0503 DEFINED AT LINE 588 IN MAIN.asm
                    > USED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 583 IN MAIN.asm
BLOCK4:             050B DEFINED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 567 IN MAIN.asm
                    > USED AT LINE 569 IN MAIN.asm
BLOCK5:             050E DEFINED AT LINE 597 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
BLOCK6:             0536 DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 603 IN MAIN.asm
RBRACE:             0539 DEFINED AT LINE 620 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
BLOCKEND:           0539 DEFINED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 1458 IN MAIN.asm
BLOCKEND1:          056B DEFINED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
BLOCKEND2:          0577 DEFINED AT LINE 650 IN MAIN.asm
                    > USED AT LINE 642 IN MAIN.asm
BLOCKEND3:          0589 DEFINED AT LINE 664 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
TICK:               0595 DEFINED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
CHAR:               0595 DEFINED AT LINE 672 IN MAIN.asm
CHAR1:              0598 DEFINED AT LINE 674 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
CHAR2:              05A4 DEFINED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 680 IN MAIN.asm
CHAR3:              05A7 DEFINED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 678 IN MAIN.asm
BACKSLASH:          05AA DEFINED AT LINE 690 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
COMMA:              05AC DEFINED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
DISCARD:            05AC DEFINED AT LINE 696 IN MAIN.asm
DISCARD1:           05B9 DEFINED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 703 IN MAIN.asm
SLASH:              05BB DEFINED AT LINE 708 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
DOT:                05D9 DEFINED AT LINE 726 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
DOTHEX:             05EE DEFINED AT LINE 738 IN MAIN.asm
                    > USED AT LINE 730 IN MAIN.asm
DOTHEX_BLOCK:       05F7 DEFINED AT LINE 743 IN MAIN.asm
                    > USED AT LINE 741 IN MAIN.asm
DOTSTR:             0602 DEFINED AT LINE 746 IN MAIN.asm
                    > USED AT LINE 732 IN MAIN.asm
DOTSTR_BLOCK:       060B DEFINED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
DOTCHAR:            0616 DEFINED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
DOTCHAR_BLOCK:      061F DEFINED AT LINE 759 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
DOTDEC:             062A DEFINED AT LINE 762 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
DOTDEC_BLOCK:       0633 DEFINED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
DIVIDE:             063E DEFINED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 720 IN MAIN.asm
DIVIDE1:            0643 DEFINED AT LINE 776 IN MAIN.asm
                    > USED AT LINE 788 IN MAIN.asm
DIVIDE2:            0650 DEFINED AT LINE 784 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
DIVIDE3:            0651 DEFINED AT LINE 786 IN MAIN.asm
                    > USED AT LINE 783 IN MAIN.asm
EQUALS:             0657 DEFINED AT LINE 794 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
LESSTHANEQ:         065F DEFINED AT LINE 802 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
LESSTHAN:           0664 DEFINED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
LESSTHAN1:          0669 DEFINED AT LINE 814 IN MAIN.asm
                    > USED AT LINE 805 IN MAIN.asm
TRUE1:              066C DEFINED AT LINE 817 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
                    > USED AT LINE 1235 IN MAIN.asm
NULL1:              0672 DEFINED AT LINE 821 IN MAIN.asm
FALSE1:             0672 DEFINED AT LINE 822 IN MAIN.asm
                    > USED AT LINE 798 IN MAIN.asm
                    > USED AT LINE 812 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
LPAREN:             0678 DEFINED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 249 IN MAIN.asm
CARET:              067B DEFINED AT LINE 833 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
GO:                 067B DEFINED AT LINE 834 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
                    > USED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 1702 IN MAIN.asm
GO1:                067C DEFINED AT LINE 836 IN MAIN.asm
                    > USED AT LINE 1012 IN MAIN.asm
                    > USED AT LINE 1014 IN MAIN.asm
GO2:                0682 DEFINED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
GOBLOCK:            068E DEFINED AT LINE 849 IN MAIN.asm
GOBLOCK1:           068E DEFINED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
GOBLOCK2:           06B3 DEFINED AT LINE 867 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
GOFUNC:             06C1 DEFINED AT LINE 876 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
GOFUNC1:            06DA DEFINED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 905 IN MAIN.asm
GOFUNC2:            06E0 DEFINED AT LINE 902 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
GOFUNC3:            06EB DEFINED AT LINE 908 IN MAIN.asm
                    > USED AT LINE 884 IN MAIN.asm
GOFUNC4:            0703 DEFINED AT LINE 925 IN MAIN.asm
                    > USED AT LINE 922 IN MAIN.asm
GOFUNC5:            0707 DEFINED AT LINE 929 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
GOFUNC6:            070A DEFINED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 928 IN MAIN.asm
GOFUNC7:            070D DEFINED AT LINE 936 IN MAIN.asm
GOFUNC8:            0712 DEFINED AT LINE 942 IN MAIN.asm
                    > USED AT LINE 861 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
HASH:               071D DEFINED AT LINE 951 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
HEXNUM:             071D DEFINED AT LINE 952 IN MAIN.asm
HEXNUM1:            0720 DEFINED AT LINE 954 IN MAIN.asm
                    > USED AT LINE 971 IN MAIN.asm
HEXNUM2:            0728 DEFINED AT LINE 960 IN MAIN.asm
                    > USED AT LINE 958 IN MAIN.asm
UPCASE:             073A DEFINED AT LINE 972 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
LOWCASE:            073F DEFINED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
IDENT1:             0744 DEFINED AT LINE 980 IN MAIN.asm
                    > USED AT LINE 975 IN MAIN.asm
QUESTION:           0751 DEFINED AT LINE 993 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
IF:                 0751 DEFINED AT LINE 994 IN MAIN.asm
IFTE:               075D DEFINED AT LINE 1004 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
IFTE1:              075E DEFINED AT LINE 1006 IN MAIN.asm
                    > USED AT LINE 1001 IN MAIN.asm
STAR:               076A DEFINED AT LINE 1016 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
MUL:                076A DEFINED AT LINE 1017 IN MAIN.asm
MUL2:               076C DEFINED AT LINE 1020 IN MAIN.asm
MUL3:               0774 DEFINED AT LINE 1025 IN MAIN.asm
                    > USED AT LINE 1034 IN MAIN.asm
NUM:                0786 DEFINED AT LINE 1038 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
NUM0:               078F DEFINED AT LINE 1044 IN MAIN.asm
                    > USED AT LINE 1042 IN MAIN.asm
NUM1:               0790 DEFINED AT LINE 1046 IN MAIN.asm
                    > USED AT LINE 1063 IN MAIN.asm
NUM2:               07A8 DEFINED AT LINE 1064 IN MAIN.asm
                    > USED AT LINE 962 IN MAIN.asm
                    > USED AT LINE 964 IN MAIN.asm
                    > USED AT LINE 1049 IN MAIN.asm
                    > USED AT LINE 1051 IN MAIN.asm
NUM3:               07B3 DEFINED AT LINE 1072 IN MAIN.asm
                    > USED AT LINE 1067 IN MAIN.asm
UNDERSCORE:         07B6 DEFINED AT LINE 1076 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
REMAIN:             07B6 DEFINED AT LINE 1077 IN MAIN.asm
RPAREN:             07BC DEFINED AT LINE 1082 IN MAIN.asm
                    > USED AT LINE 267 IN MAIN.asm
SEMICOLON:          07C4 DEFINED AT LINE 1088 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
SHIFTLEFT:          07E0 DEFINED AT LINE 1112 IN MAIN.asm
                    > USED AT LINE 254 IN MAIN.asm
SHIFTLEFT1:         07E8 DEFINED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 1122 IN MAIN.asm
SHIFTLEFT2:         07E9 DEFINED AT LINE 1121 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
SHIFTRIGHT:         07F0 DEFINED AT LINE 1129 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
SHIFTRIGHT1:        07F8 DEFINED AT LINE 1136 IN MAIN.asm
                    > USED AT LINE 1140 IN MAIN.asm
SHIFTRIGHT2:        07FC DEFINED AT LINE 1139 IN MAIN.asm
                    > USED AT LINE 1135 IN MAIN.asm
DBLQUOTE:           0803 DEFINED AT LINE 1148 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
STRING:             0803 DEFINED AT LINE 1149 IN MAIN.asm
STRING1:            080C DEFINED AT LINE 1156 IN MAIN.asm
                    > USED AT LINE 1165 IN MAIN.asm
STRING2:            080F DEFINED AT LINE 1160 IN MAIN.asm
                    > USED AT LINE 1155 IN MAIN.asm
STRING3:            0818 DEFINED AT LINE 1166 IN MAIN.asm
                    > USED AT LINE 1163 IN MAIN.asm
MINUS:              082B DEFINED AT LINE 1183 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
SUB:                0837 DEFINED AT LINE 1191 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
SUB1:               0841 DEFINED AT LINE 1198 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
COMMAND:            084A DEFINED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 714 IN MAIN.asm
ERROR1:             088F DEFINED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 1262 IN MAIN.asm
                    > USED AT LINE 1321 IN MAIN.asm
                    > USED AT LINE 1511 IN MAIN.asm
                    > USED AT LINE 1605 IN MAIN.asm
                    > USED AT LINE 1647 IN MAIN.asm
COMMENT:            0896 DEFINED AT LINE 1247 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 1251 IN MAIN.asm
COMMAND_A:          089F DEFINED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
ABSOLUTE:           08AE DEFINED AT LINE 1266 IN MAIN.asm
                    > USED AT LINE 1259 IN MAIN.asm
ADDROF:             08BB DEFINED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 1261 IN MAIN.asm
ADDROF1:            08CF DEFINED AT LINE 1293 IN MAIN.asm
                    > USED AT LINE 1289 IN MAIN.asm
ADDROF2:            08DA DEFINED AT LINE 1302 IN MAIN.asm
                    > USED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 1287 IN MAIN.asm
                    > USED AT LINE 1292 IN MAIN.asm
COMMAND_B:          08DC DEFINED AT LINE 1306 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
BUFFERCHAR:         08FF DEFINED AT LINE 1325 IN MAIN.asm
                    > USED AT LINE 1310 IN MAIN.asm
BUFFERDEC:          090E DEFINED AT LINE 1337 IN MAIN.asm
                    > USED AT LINE 1312 IN MAIN.asm
BUFFERDEC0:         0926 DEFINED AT LINE 1354 IN MAIN.asm
                    > USED AT LINE 1341 IN MAIN.asm
BUFFERDEC1:         0936 DEFINED AT LINE 1368 IN MAIN.asm
                    > USED AT LINE 1356 IN MAIN.asm
BUFFERDEC2:         0956 DEFINED AT LINE 1382 IN MAIN.asm
                    > USED AT LINE 1371 IN MAIN.asm
                    > USED AT LINE 1373 IN MAIN.asm
                    > USED AT LINE 1375 IN MAIN.asm
                    > USED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 1380 IN MAIN.asm
BUFFERDEC3:         0958 DEFINED AT LINE 1384 IN MAIN.asm
                    > USED AT LINE 1387 IN MAIN.asm
BUFFERDEC4:         0968 DEFINED AT LINE 1396 IN MAIN.asm
                    > USED AT LINE 1391 IN MAIN.asm
BUFFERDEC5:         0969 DEFINED AT LINE 1398 IN MAIN.asm
                    > USED AT LINE 1395 IN MAIN.asm
BUFFERHEX:          096F DEFINED AT LINE 1408 IN MAIN.asm
                    > USED AT LINE 1314 IN MAIN.asm
BUFFERHEX1:         098A DEFINED AT LINE 1423 IN MAIN.asm
                    > USED AT LINE 1412 IN MAIN.asm
                    > USED AT LINE 1414 IN MAIN.asm
BUFFERHEX2:         0993 DEFINED AT LINE 1431 IN MAIN.asm
                    > USED AT LINE 1429 IN MAIN.asm
BREAK:              099E DEFINED AT LINE 1443 IN MAIN.asm
                    > USED AT LINE 1316 IN MAIN.asm
BREAK1:             09A5 DEFINED AT LINE 1449 IN MAIN.asm
                    > USED AT LINE 1447 IN MAIN.asm
BUFFERSTRING:       09B8 DEFINED AT LINE 1462 IN MAIN.asm
                    > USED AT LINE 1318 IN MAIN.asm
BUFFERSTRING0:      09BF DEFINED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 1473 IN MAIN.asm
BUFFERSTRING1:      09C2 DEFINED AT LINE 1470 IN MAIN.asm
                    > USED AT LINE 1465 IN MAIN.asm
BUFFERXSPACES:      09D4 DEFINED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 1320 IN MAIN.asm
BUFFERXSPACES1:     09DB DEFINED AT LINE 1489 IN MAIN.asm
                    > USED AT LINE 1496 IN MAIN.asm
BUFFERXSPACES2:     09DF DEFINED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 1488 IN MAIN.asm
COMMAND_P:          09E8 DEFINED AT LINE 1500 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
PARTIAL:            0A01 DEFINED AT LINE 1515 IN MAIN.asm
                    > USED AT LINE 1504 IN MAIN.asm
PRINTCHARS:         0A21 DEFINED AT LINE 1534 IN MAIN.asm
                    > USED AT LINE 1506 IN MAIN.asm
PRINTCHARS1:        0A27 DEFINED AT LINE 1539 IN MAIN.asm
                    > USED AT LINE 1547 IN MAIN.asm
PRINTCHARS2:        0A29 DEFINED AT LINE 1542 IN MAIN.asm
                    > USED AT LINE 1538 IN MAIN.asm
PRINTSTACK:         0A33 DEFINED AT LINE 1552 IN MAIN.asm
                    > USED AT LINE 1508 IN MAIN.asm
PRINTX:             0A35 DEFINED AT LINE 1582 IN MAIN.asm
                    > USED AT LINE 1510 IN MAIN.asm
PRINTX_BLOCK:       0A3E DEFINED AT LINE 1587 IN MAIN.asm
                    > USED AT LINE 1585 IN MAIN.asm
COMMAND_V:          0A60 DEFINED AT LINE 1590 IN MAIN.asm
                    > USED AT LINE 1237 IN MAIN.asm
CONSTBUFSTART:      0A83 DEFINED AT LINE 1607 IN MAIN.asm
                    > USED AT LINE 1600 IN MAIN.asm
CONSTHEAPSTART:     0A88 DEFINED AT LINE 1611 IN MAIN.asm
                    > USED AT LINE 1602 IN MAIN.asm
CONSTTIBSTART:      0A8D DEFINED AT LINE 1615 IN MAIN.asm
                    > USED AT LINE 1604 IN MAIN.asm
VARBUFPTR:          0A92 DEFINED AT LINE 1619 IN MAIN.asm
                    > USED AT LINE 1594 IN MAIN.asm
VARHEAPPTR:         0A9B DEFINED AT LINE 1624 IN MAIN.asm
                    > USED AT LINE 1596 IN MAIN.asm
VARTIBPTR:          0AA4 DEFINED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1598 IN MAIN.asm
VARIABLE:           0AAD DEFINED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 301 IN MAIN.asm
                    > USED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1632 IN MAIN.asm
CONSTANT:           0AB0 DEFINED AT LINE 1636 IN MAIN.asm
                    > USED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 1613 IN MAIN.asm
                    > USED AT LINE 1617 IN MAIN.asm
COMMAND_I:          0AB3 DEFINED AT LINE 1640 IN MAIN.asm
                    > USED AT LINE 1225 IN MAIN.asm
CHARS:              0AC2 DEFINED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 1221 IN MAIN.asm
CHARS1:             0AC5 DEFINED AT LINE 1652 IN MAIN.asm
                    > USED AT LINE 1689 IN MAIN.asm
INPUT:              0ACA DEFINED AT LINE 1659 IN MAIN.asm
                    > USED AT LINE 1644 IN MAIN.asm
KEY:                0AD5 DEFINED AT LINE 1669 IN MAIN.asm
                    > USED AT LINE 1227 IN MAIN.asm
OUTPUT:             0ADE DEFINED AT LINE 1678 IN MAIN.asm
                    > USED AT LINE 1231 IN MAIN.asm
NUMBERS:            0AE7 DEFINED AT LINE 1687 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
FILTER:             0AED DEFINED AT LINE 1696 IN MAIN.asm
MAP:                0AED DEFINED AT LINE 1697 IN MAIN.asm
ZPRT:               0AEF DEFINED AT LINE 1701 IN MAIN.asm
                    > USED AT LINE 1241 IN MAIN.asm
ZPRT_ARGS:          0AFA DEFINED AT LINE 1708 IN MAIN.asm
                    > USED AT LINE 1705 IN MAIN.asm
ZPRT_BLOCK:         0AFC DEFINED AT LINE 1710 IN MAIN.asm
                    > USED AT LINE 1704 IN MAIN.asm
ARGS0A1L_:          0B23 DEFINED AT LINE 1716 IN MAIN.asm
ARGS0A1L:           0B25 DEFINED AT LINE 1719 IN MAIN.asm
ARGS1A0L_:          0B26 DEFINED AT LINE 1722 IN MAIN.asm
ARGS1A0L:           0B28 DEFINED AT LINE 1725 IN MAIN.asm
                    > USED AT LINE 742 IN MAIN.asm
                    > USED AT LINE 750 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
                    > USED AT LINE 1586 IN MAIN.asm
ARGS1A1L_:          0B29 DEFINED AT LINE 1728 IN MAIN.asm
ARGS1A1L:           0B2B DEFINED AT LINE 1731 IN MAIN.asm
ARGS2A0L_:          0B2D DEFINED AT LINE 1734 IN MAIN.asm
ARGS2A0L:           0B2F DEFINED AT LINE 1737 IN MAIN.asm
PRTSTR0:            0B31 DEFINED AT LINE 1744 IN MAIN.asm
                    > USED AT LINE 1750 IN MAIN.asm
PRTSTR:             0B35 DEFINED AT LINE 1747 IN MAIN.asm
                    > USED AT LINE 1814 IN MAIN.asm
NESTING:            0B3A DEFINED AT LINE 1763 IN MAIN.asm
                    > USED AT LINE 1859 IN MAIN.asm
                    > USED AT LINE 1914 IN MAIN.asm
NESTING0:           0B44 DEFINED AT LINE 1769 IN MAIN.asm
                    > USED AT LINE 1765 IN MAIN.asm
                    > USED AT LINE 1767 IN MAIN.asm
NESTING1A:          0B4B DEFINED AT LINE 1774 IN MAIN.asm
                    > USED AT LINE 1771 IN MAIN.asm
NESTING1:           0B4E DEFINED AT LINE 1777 IN MAIN.asm
                    > USED AT LINE 1768 IN MAIN.asm
NESTING2:           0B5D DEFINED AT LINE 1786 IN MAIN.asm
                    > USED AT LINE 1781 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
NESTING3:           0B5F DEFINED AT LINE 1789 IN MAIN.asm
                    > USED AT LINE 1785 IN MAIN.asm
NESTING4:           0B6A DEFINED AT LINE 1796 IN MAIN.asm
                    > USED AT LINE 1791 IN MAIN.asm
                    > USED AT LINE 1793 IN MAIN.asm
PROMPT:             0B6C DEFINED AT LINE 1800 IN MAIN.asm
                    > USED AT LINE 1842 IN MAIN.asm
CRLF:               0B75 DEFINED AT LINE 1805 IN MAIN.asm
                    > USED AT LINE 1926 IN MAIN.asm
PRINTSTR:           0B7C DEFINED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 1801 IN MAIN.asm
                    > USED AT LINE 1806 IN MAIN.asm
                    > USED AT LINE 1838 IN MAIN.asm
                    > USED AT LINE 1974 IN MAIN.asm
INIT:               0B83 DEFINED AT LINE 1819 IN MAIN.asm
                    > USED AT LINE 7
                    > USED AT LINE 1837 IN MAIN.asm
INIT0:              0B9C DEFINED AT LINE 1829 IN MAIN.asm
                    > USED AT LINE 1832 IN MAIN.asm
START:              0BA1 DEFINED AT LINE 1835 IN MAIN.asm
                    > USED AT LINE 8
INTERPRET:          0BB7 DEFINED AT LINE 1841 IN MAIN.asm
                    > USED AT LINE 1954 IN MAIN.asm
                    > USED AT LINE 1967 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 1985 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
INTERPRET2:         0BC3 DEFINED AT LINE 1848 IN MAIN.asm
                    > USED AT LINE 1906 IN MAIN.asm
                    > USED AT LINE 1972 IN MAIN.asm
                    > USED AT LINE 1976 IN MAIN.asm
INTERPRET3:         0BCB DEFINED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 1864 IN MAIN.asm
INTERPRET4:         0BD1 DEFINED AT LINE 1861 IN MAIN.asm
                    > USED AT LINE 1853 IN MAIN.asm
INTERPRET5:         0BD6 DEFINED AT LINE 1867 IN MAIN.asm
                    > USED AT LINE 1915 IN MAIN.asm
                    > USED AT LINE 1929 IN MAIN.asm
INTERPRET5A:        0BF9 DEFINED AT LINE 1903 IN MAIN.asm
INTERPRET6:         0BFB DEFINED AT LINE 1908 IN MAIN.asm
                    > USED AT LINE 1870 IN MAIN.asm
INTERPRET7:         0C09 DEFINED AT LINE 1917 IN MAIN.asm
                    > USED AT LINE 1875 IN MAIN.asm
INTERPRET8:         0C1C DEFINED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 1873 IN MAIN.asm
NEXT:               0C27 DEFINED AT LINE 1939 IN MAIN.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 1943 IN MAIN.asm
NEXT1:              0C38 DEFINED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
EXIT:               0C3F DEFINED AT LINE 1955 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
RUN:                0C43 DEFINED AT LINE 1959 IN MAIN.asm
                    > USED AT LINE 1965 IN MAIN.asm
                    > USED AT LINE 1980 IN MAIN.asm
                    > USED AT LINE 1988 IN MAIN.asm
ERROR:              0C47 DEFINED AT LINE 1964 IN MAIN.asm
                    > USED AT LINE 1245 IN MAIN.asm
BACKSPACE_:         0C5A DEFINED AT LINE 1969 IN MAIN.asm
                    > USED AT LINE 1880 IN MAIN.asm
EDIT_:              0C6A DEFINED AT LINE 1979 IN MAIN.asm
                    > USED AT LINE 1878 IN MAIN.asm
REEDIT_:            0C82 DEFINED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 1882 IN MAIN.asm
PRINTSTACK_:        0C85 DEFINED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 1884 IN MAIN.asm
STACK:              2080 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 1821 IN MAIN.asm
                    > USED AT LINE 1836 IN MAIN.asm
VARS:               2100 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 1295 IN MAIN.asm
                    > USED AT LINE 1826 IN MAIN.asm
RESTARTS:           21D0 DEFINED AT LINE 10 IN ram.asm
RST08:              21D0 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              21D2 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              21D4 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              21D6 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              21D8 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              21DA DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               21DC DEFINED AT LINE 18 IN ram.asm
INTVEC:             21DE DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             21E0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            21E2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            21E4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            21E6 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 1823 IN MAIN.asm
VDATAWIDTH:         21E6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 430 IN MAIN.asm
                    > USED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 1653 IN MAIN.asm
VTIBPTR:            21E8 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 1630 IN MAIN.asm
                    > USED AT LINE 1631 IN MAIN.asm
                    > USED AT LINE 1846 IN MAIN.asm
                    > USED AT LINE 1934 IN MAIN.asm
VBUFPTR:            21EA DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1327 IN MAIN.asm
                    > USED AT LINE 1330 IN MAIN.asm
                    > USED AT LINE 1338 IN MAIN.asm
                    > USED AT LINE 1343 IN MAIN.asm
                    > USED AT LINE 1344 IN MAIN.asm
                    > USED AT LINE 1410 IN MAIN.asm
                    > USED AT LINE 1416 IN MAIN.asm
                    > USED AT LINE 1417 IN MAIN.asm
                    > USED AT LINE 1464 IN MAIN.asm
                    > USED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1475 IN MAIN.asm
                    > USED AT LINE 1487 IN MAIN.asm
                    > USED AT LINE 1497 IN MAIN.asm
                    > USED AT LINE 1620 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
VNEXT:              21EC DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1820 IN MAIN.asm
VHEAPPTR:           21EE DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 417 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 544 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
                    > USED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 1090 IN MAIN.asm
                    > USED AT LINE 1105 IN MAIN.asm
                    > USED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 1170 IN MAIN.asm
                    > USED AT LINE 1517 IN MAIN.asm
                    > USED AT LINE 1522 IN MAIN.asm
                    > USED AT LINE 1523 IN MAIN.asm
                    > USED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 1626 IN MAIN.asm
VPOINTER:           21F0 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 299 IN MAIN.asm
                    > USED AT LINE 300 IN MAIN.asm
                    > USED AT LINE 383 IN MAIN.asm
                    > USED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 984 IN MAIN.asm
                    > USED AT LINE 1635 IN MAIN.asm
VREMAIN:            21F2 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 722 IN MAIN.asm
                    > USED AT LINE 1078 IN MAIN.asm
VSAVEDIP:           21F4 DEFINED AT LINE 39 IN ram.asm
VSAVEDSP:           21F6 DEFINED AT LINE 40 IN ram.asm
VSAVEDBP:           21F8 DEFINED AT LINE 41 IN ram.asm
VCHECKSUM:          21FA DEFINED AT LINE 42 IN ram.asm
VTEMP1:             21FC DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 410 IN MAIN.asm
                    > USED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 624 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
                    > USED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 885 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
                    > USED AT LINE 1518 IN MAIN.asm
                    > USED AT LINE 1521 IN MAIN.asm
VTEMP2:             21FE DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 886 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
VLASTDEF:           2200 DEFINED AT LINE 48 IN ram.asm
VHASHSTR:           2202 DEFINED AT LINE 49 IN ram.asm
TBPTR:              2204 DEFINED AT LINE 50 IN ram.asm
TIB:                2300 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 60 IN MAIN.asm
                    > USED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 1845 IN MAIN.asm
                    > USED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 1918 IN MAIN.asm
                    > USED AT LINE 1932 IN MAIN.asm
                    > USED AT LINE 1935 IN MAIN.asm
BUF:                2400 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 1608 IN MAIN.asm
PAD:                2500 DEFINED AT LINE 57 IN ram.asm
HEAP:               2600 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 599 IN MAIN.asm
                    > USED AT LINE 1612 IN MAIN.asm
