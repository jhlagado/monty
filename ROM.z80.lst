0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 F3 0C               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQ:       EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of Monty code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num_locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
00C9                             ; z80_RST8    equ     $CF
00C9                             ; **************************************************************************
00C9                             ; Page 0  Initialisation
00C9                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 22                  DW   BUF   ; vBUFPtr pointer into BUF
0188   87 0D                  DW   next   ; nNext
018A   1E 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C                          ALIGN   $100   
0200                OPCODES:      ; still available ` ~ _ \
0200   7C                     DB   lsb(nop_)   ; SP
0201   33                     DB   lsb(bang_)   ; !
0202   47                     DB   lsb(dquote_)   ; "
0203   3B                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1B                     DB   lsb(tick_)   ; '
0208   15                     DB   lsb(lparen_)   ; (
0209   7E                     DB   lsb(rparen_)   ; )
020A   30                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   44                     DB   lsb(comma_)   ; ,
020D   4A                     DB   lsb(minus_)   ; -
020E   21                     DB   lsb(dot_)   ; .
020F   79                     DB   lsb(slash_)   ; /	
0210   38                     DB   lsb(num_)   ; 0
0211   38                     DB   lsb(num_)   ; 1
0212   38                     DB   lsb(num_)   ; 2
0213   38                     DB   lsb(num_)   ; 3
0214   38                     DB   lsb(num_)   ; 4
0215   38                     DB   lsb(num_)   ; 5
0216   38                     DB   lsb(num_)   ; 6
0217   38                     DB   lsb(num_)   ; 7
0218   38                     DB   lsb(num_)   ; 8
0219   38                     DB   lsb(num_)   ; 9
021A   24                     DB   lsb(colon_)   ; :
021B   1E                     DB   lsb(semicolon_)   ; ;
021C   67                     DB   lsb(lt_)   ; <
021D   4D                     DB   lsb(eq_)   ; =
021E   5C                     DB   lsb(gt_)   ; >
021F   2D                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   27                     DB   lsb(upcase_)   ; A
0222   27                     DB   lsb(upcase_)   ; B
0223   27                     DB   lsb(upcase_)   ; C
0224   27                     DB   lsb(upcase_)   ; D
0225   27                     DB   lsb(upcase_)   ; E
0226   27                     DB   lsb(upcase_)   ; F
0227   27                     DB   lsb(upcase_)   ; G
0228   27                     DB   lsb(upcase_)   ; h
0229   27                     DB   lsb(upcase_)   ; I
022A   27                     DB   lsb(upcase_)   ; J
022B   27                     DB   lsb(upcase_)   ; K
022C   27                     DB   lsb(upcase_)   ; L
022D   27                     DB   lsb(upcase_)   ; M
022E   27                     DB   lsb(upcase_)   ; N
022F   27                     DB   lsb(upcase_)   ; O
0230   27                     DB   lsb(upcase_)   ; p
0231   27                     DB   lsb(upcase_)   ; Q
0232   27                     DB   lsb(upcase_)   ; R
0233   27                     DB   lsb(upcase_)   ; S
0234   27                     DB   lsb(upcase_)   ; T
0235   27                     DB   lsb(upcase_)   ; U
0236   27                     DB   lsb(upcase_)   ; V
0237   27                     DB   lsb(upcase_)   ; W
0238   27                     DB   lsb(upcase_)   ; X
0239   27                     DB   lsb(upcase_)   ; Y
023A   27                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   7C                     DB   lsb(nop_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   41                     DB   lsb(caret_)   ; ^
023F   7C                     DB   lsb(nop_)   ; _
0240   47                     DB   lsb(dquote_)   ; `     used for testing string   	
0241   2A                     DB   lsb(lowcase_)   ; a
0242   2A                     DB   lsb(lowcase_)   ; b
0243   2A                     DB   lsb(lowcase_)   ; c
0244   2A                     DB   lsb(lowcase_)   ; d
0245   2A                     DB   lsb(lowcase_)   ; e
0246   2A                     DB   lsb(lowcase_)   ; f
0247   2A                     DB   lsb(lowcase_)   ; g
0248   2A                     DB   lsb(lowcase_)   ; h
0249   2A                     DB   lsb(lowcase_)   ; i
024A   2A                     DB   lsb(lowcase_)   ; j
024B   2A                     DB   lsb(lowcase_)   ; k
024C   2A                     DB   lsb(lowcase_)   ; l
024D   2A                     DB   lsb(lowcase_)   ; m
024E   2A                     DB   lsb(lowcase_)   ; n
024F   2A                     DB   lsb(lowcase_)   ; o
0250   2A                     DB   lsb(lowcase_)   ; p
0251   2A                     DB   lsb(lowcase_)   ; q
0252   2A                     DB   lsb(lowcase_)   ; r
0253   2A                     DB   lsb(lowcase_)   ; s
0254   2A                     DB   lsb(lowcase_)   ; t
0255   2A                     DB   lsb(lowcase_)   ; u
0256   2A                     DB   lsb(lowcase_)   ; v
0257   2A                     DB   lsb(lowcase_)   ; w
0258   2A                     DB   lsb(lowcase_)   ; x
0259   2A                     DB   lsb(lowcase_)   ; y
025A   2A                     DB   lsb(lowcase_)   ; z
025B   15                     DB   lsb(lbrace_)   ; {
025C   3E                     DB   lsb(pipe_)   ; |
025D   18                     DB   lsb(rbrace_)   ; }
025E   7C                     DB   lsb(nop_)   ; ~
025F   7C                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 81 03               JP   plus   
0303                AT_:         
0303   C3 93 03               JP   at   
0306                AMPER_:      
0306   C3 9D 03               JP   amper   
0309                DOLLAR_:      
0309   C3 26 0A               JP   dollar   
030C                LBRACK_:      
030C   C3 F6 03               JP   lbrack   
030F                RBRACK_:      
030F   C3 12 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 C1 03               JP   percent   
0315                LPAREN_:      
0315                LBRACE_:      
0315   C3 EF 04               JP   lbrace   
0318                RBRACE_:      
0318   C3 58 05               JP   rbrace   
031B                TICK_:       
031B   C3 CE 05               JP   tick   
031E                SEMICOLON_:      
031E   C3 9C 06               JP   semicolon   
0321                DOT_:        
0321   C3 66 07               JP   dot   
0324                COLON_:      
0324   C3 7A 04               JP   colon   
0327                UPCASE_:      
0327   C3 43 0A               JP   upcase   
032A                LOWCASE_:      
032A   C3 48 0A               JP   lowcase   
032D                QUESTION_:      
032D   C3 5A 0A               JP   question   
0330                STAR_:       
0330   C3 D4 0A               JP   star   
0333                BANG_:       ; logical invert, any non zero value
0333   21 00 00               LD   hl,0   ; is considered true
0336   18 20                  JR   eq1   
0338                NUM_:        
0338   C3 F0 0A               JP   num   
033B                HASH_:       
033B   C3 62 04               JP   hash   
033E                PIPE_:       
033E   C3 A8 03               JP   pipe   
0341                CARET_:      
0341   C3 87 09               JP   caret   
0344                COMMA_:      
0344   C3 38 07               JP   comma   
0347                DQUOTE_:      
0347   C3 4B 0B               JP   dquote   
034A                MINUS_:      
034A   C3 73 0B               JP   minus   
034D                EQ_:         
034D   03                     INC   bc   
034E   0A                     LD   a,(bc)   ; is it == ?
034F   FE 3D                  CP   "="   
0351   28 04                  JR   z,eq0   ; no its equality
0353   0B                     DEC   bc   
0354   C3 B0 04               JP   assign   ; no its assignment
0357                EQ0:         
0357   E1                     POP   hl   
0358                EQ1:         
0358   D1                     POP   de   
0359   C3 BA 08               JP   equals   
035C                GT_:         
035C   03                     INC   bc   
035D   0A                     LD   a,(bc)   
035E   FE 3E                  CP   ">"   
0360   CA 38 0B               JP   z,shiftRight   
0363   D1                     POP   de   
0364   E1                     POP   hl   
0365   18 09                  JR   lt1   
0367                LT_:         
0367   03                     INC   bc   
0368   0A                     LD   a,(bc)   
0369   FE 3C                  CP   "<"   
036B   CA 28 0B               JP   z,shiftLeft   
036E   E1                     POP   hl   
036F   D1                     POP   de   
0370                LT1:         
0370   FE 3D                  CP   "="   
0372   CA C2 08               JP   z,lessthaneq   
0375   0B                     DEC   bc   
0376   C3 C7 08               JP   lessthan   
0379                SLASH_:      
0379   C3 E3 05               JP   slash   
037C                NOP_:        
037C   DD E9                  JP   (ix)   
037E                RPAREN_:      
037E   C3 20 0B               JP   rparen   
0381                             ;*******************************************************************
0381                             ; implementations
0381                             ;*******************************************************************
0381                PLUS:        
0381                ADD:         
0381   03                     INC   bc   
0382   0A                     LD   a,(bc)   
0383   FE 2B                  CP   "+"   ; ++ increment variable
0385   20 05                  JR   nz,add1   
0387   E1                     POP   hl   
0388   23                     INC   hl   
0389   C3 B2 04               JP   assign0   
038C                ADD1:        
038C   0B                     DEC   bc   
038D   D1                     POP   de   ; second term
038E   E1                     POP   hl   ; first term
038F   19                     ADD   hl,de   
0390                ADD3:        
0390   E5                     PUSH   hl   
0391   DD E9                  JP   (ix)   
0393                             ; @ addr
0393                             ; -- ptr
0393                AT:          
0393                ADDR:        
0393   ED 5B F2 23            LD   de,(vPointer)   
0397   21 F2 23               LD   hl,vPointer   
039A   C3 04 0C               JP   variable   
039D                AMPER:       
039D                AND:         
039D   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
039E   E1                     POP   hl   
039F   7B                     LD   a,e   
03A0   A5                     AND   l   
03A1   6F                     LD   l,a   
03A2   7A                     LD   a,d   
03A3   A4                     AND   h   
03A4                AND1:        
03A4   67                     LD   h,a   
03A5   E5                     PUSH   hl   
03A6   DD E9                  JP   (ix)   
03A8                PIPE:        
03A8                OR:          
03A8   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03A9   E1                     POP   hl   
03AA   7B                     LD   a,e   
03AB   B5                     OR   l   
03AC   6F                     LD   l,a   
03AD   7A                     LD   a,d   
03AE   B4                     OR   h   
03AF   18 F3                  JR   and1   
03B1                XOR:         
03B1   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03B2                XOR1:        
03B2   E1                     POP   hl   
03B3   7B                     LD   a,e   
03B4   AD                     XOR   l   
03B5   6F                     LD   l,a   
03B6   7A                     LD   a,d   
03B7   AC                     XOR   h   
03B8   67                     LD   h,a   
03B9   E5                     PUSH   hl   
03BA   DD E9                  JP   (ix)   
03BC                INVERT:      ; Bitwise INVert the top member of the stack
03BC   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03BF   18 F1                  JR   xor1   
03C1                             ; %a .. %z
03C1                             ; -- value
03C1                             ; returns value of arg
03C1                PERCENT:      
03C1                ARG:         
03C1   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03C4   FD 56 05               LD   d,(iy+5)   
03C7   EB                     EX   de,hl   
03C8   7D                     LD   a,l   ; arg_list* == null, skip
03C9   B4                     OR   h   
03CA   28 1A                  JR   z,arg0a   
03CC   23                     INC   hl   ; a = num_args, hl = arg_list*
03CD   7E                     LD   a,(hl)   
03CE   23                     INC   hl   
03CF   B7                     OR   a   
03D0   28 14                  JR   z,arg0a   ; num_args == 0, skip
03D2   5F                     LD   e,a   ; e = a = num_args
03D3   03                     INC   bc   ; a = next char = dollar_name
03D4   0A                     LD   a,(bc)   
03D5   C5                     PUSH   bc   ; save IP
03D6   43                     LD   b,e   ; b = e = num_args
03D7   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03DA   FD 56 03               LD   d,(iy+3)   
03DD                ARG0:        
03DD   1B                     DEC   de   ; a = dollar_name, de = next arg*
03DE   1B                     DEC   de   
03DF   BE                     CP   (hl)   
03E0   28 09                  JR   z,arg1   
03E2   23                     INC   hl   ; hl = next arg_list*
03E3   10 F8                  DJNZ   arg0   
03E5   C1                     POP   bc   ; no match, restore IP
03E6                ARG0A:       
03E6   11 00 00               LD   de,0   ; return 0
03E9   18 08                  JR   arg1a   
03EB                ARG1:        
03EB   C1                     POP   bc   ; restore IP
03EC   EB                     EX   de,hl   ; hl = arg*
03ED   22 F2 23               LD   (vPointer),hl   ; store arg* in setter
03F0   5E                     LD   e,(hl)   
03F1   23                     INC   hl   
03F2   56                     LD   d,(hl)   ; de = arg
03F3                ARG1A:       
03F3   D5                     PUSH   de   ; push arg
03F4   DD E9                  JP   (ix)   
03F6                LBRACK:      
03F6                ARRAYSTART:      
03F6   11 00 00               LD   de,0   ; create stack frame
03F9   D5                     PUSH   de   ; push null for IP
03FA   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
03FD   FD 56 05               LD   d,(iy+5)   ; 
0400   D5                     PUSH   de   ; 
0401   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0404   FD 56 03               LD   d,(iy+3)   ; 
0407   D5                     PUSH   de   ; 
0408   FD E5                  PUSH   iy   ; push BP
040A   FD 21 00 00            LD   iy,0   ; BP = SP
040E   FD 39                  ADD   iy,sp   
0410   DD E9                  JP   (ix)   
0412                RBRACK:      
0412                ARRAYEND:      
0412   FD 54                  LD   d,iyh   ; de = BP
0414   FD 5D                  LD   e,iyl   
0416   ED 43 00 24            LD   (vTemp1),bc   ; save IP
041A   62 6B                  LD   hl,de   ; hl = de = BP
041C   B7                     OR   a   
041D   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
041F   CB 3C                  SRL   h   ; 
0421   CB 1D                  RR   l   
0423   44 4D                  LD   bc,hl   ; bc = count
0425   2A F0 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
0428   71                     LD   (hl),c   ; write num items in length word
0429   23                     INC   hl   
042A   70                     LD   (hl),b   
042B   23                     INC   hl   ; hl = array[0], bc = count
042C                             ; de = BP, hl = array[0], bc = count
042C   18 15                  JR   arrayEnd3   
042E                ARRAYEND1:      
042E   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0431   77                     LD   (hl),a   ; write lsb of array item
0432   23                     INC   hl   ; move to msb of array item
0433   3A E6 23               LD   a,(vDataWidth)   ; vDataWidth=1?
0436   3D                     DEC   a   
0437   28 05                  JR   z,arrayEnd2   
0439   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
043C   77                     LD   (hl),a   ; write msb of array item
043D   23                     INC   hl   ; move to next word in array
043E                ARRAYEND2:      
043E   FD 2B                  DEC   iy   ; move to next word on stack
0440   FD 2B                  DEC   iy   
0442   0B                     DEC   bc   ; dec items count
0443                ARRAYEND3:      
0443   79                     LD   a,c   ; if not zero loop
0444   B0                     OR   b   
0445   20 E7                  JR   nz,arrayEnd1   
0447   EB                     EX   de,hl   ; de = end of array, hl = BP
0448   F9                     LD   sp,hl   ; sp = BP
0449   E1                     POP   hl   ; de = end of array, hl = old BP
044A   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
044B   FD 62                  LD   iyh,d   
044D   FD 6B                  LD   iyl,e   
044F   D1                     POP   de   ; pop arg_list (discard)
0450   D1                     POP   de   ; pop first_arg* (discard)
0451   D1                     POP   de   ; pop IP (discard)
0452   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = array[-2]
0456   13                     INC   de   
0457   13                     INC   de   
0458   D5                     PUSH   de   ; return array[0]
0459   22 F0 23               LD   (vHeapPtr),hl   ; move heap* to end of array
045C   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
0460   DD E9                  JP   (ix)   
0462                             ; index of an array, based on vDataWidth
0462                             ; array num -- value    ; also sets vPointer to address
0462                HASH:        
0462                ARRAYINDEX:      
0462   E1                     POP   hl   ; hl = index
0463   D1                     POP   de   ; de = array
0464   3A E6 23               LD   a,(vDataWidth)   ; a = data width
0467   3D                     DEC   a   
0468   28 01                  JR   z,arrayIndex1   
046A                ARRAYINDEX0:      
046A   29                     ADD   hl,hl   ; if data width = 2 then double
046B                ARRAYINDEX1:      
046B   19                     ADD   hl,de   ; add addr
046C   22 F2 23               LD   (vPointer),hl   ; store address in setter
046F   16 00                  LD   d,0   
0471   5E                     LD   e,(hl)   
0472   B7                     OR   a   ; check data width again
0473   28 02                  JR   z,arrayIndex2   
0475   23                     INC   hl   
0476   56                     LD   d,(hl)   
0477                ARRAYINDEX2:      
0477   D5                     PUSH   de   
0478   DD E9                  JP   (ix)   
047A                             ; arg_list - parses input (ab:c)
047A                             ; names after the : represent uninitialised locals
047A                             ; return values are the state of the stack after the block ends
047A                             ; format: numLocals totNumArgs argChars...
047A                COLON:       
047A                ARGLIST:      
047A   11 00 00               LD   de,0   ; d = count locals, e = count args ()
047D   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0480   E5                     PUSH   hl   ; save start of arg_list
0481   23                     INC   hl   ; skip length fields to start of string
0482   23                     INC   hl   
0483   03                     INC   bc   ; point to next char
0484                ARGLIST1:      
0484   0A                     LD   a,(bc)   
0485   FE 3A                  CP   ":"   ; ":" switches from args to locals
0487   20 03                  JR   nz,arglist1a   
0489   14                     INC   d   ; non zero value local count acts as flag
048A   18 10                  JR   arglist3   
048C                ARGLIST1A:      
048C   FE 61                  CP   "a"   ; < "a" terminates arg_list
048E   38 0F                  JR   c,arglist4   
0490   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0492   30 0B                  JR   nc,arglist4   
0494                ARGLIST2:      
0494   77                     LD   (hl),a   
0495   23                     INC   hl   
0496   1C                     INC   e   ; increase arg count
0497   AF                     XOR   a   
0498   B2                     OR   d   
0499   28 01                  JR   z,arglist3   
049B   14                     INC   d   ; if d > 0 increase local count
049C                ARGLIST3:      
049C   03                     INC   bc   ; point to next char
049D   18 E5                  JR   arglist1   
049F                ARGLIST4:      
049F   0B                     DEC   bc   
04A0   AF                     XOR   a   
04A1   B2                     OR   d   
04A2   28 01                  JR   z,arglist5   
04A4   15                     DEC   d   ; remove initial inc
04A5                ARGLIST5:      
04A5   23                     INC   hl   
04A6   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04A9   E1                     POP   hl   ; hl = start of arg_list
04AA   E5                     PUSH   hl   ; return start of arg_list
04AB   72                     LD   (hl),d   ; write number of locals at start - 1
04AC   23                     INC   hl   
04AD   73                     LD   (hl),e   ; write number of args + locals at start - 2
04AE   DD E9                  JP   (ix)   
04B0                             ; value _oldValue --            ; uses address in vPointer
04B0                ASSIGN:      
04B0   E1                     POP   hl   ; discard last accessed value
04B1   E1                     POP   hl   ; hl = new value
04B2                ASSIGN0:      
04B2   EB                     EX   de,hl   ; de = new value
04B3                ASSIGNX:      
04B3   2A F2 23               LD   hl,(vPointer)   
04B6   73                     LD   (hl),e   
04B7   3A E6 23               LD   a,(vDataWidth)   
04BA   3D                     DEC   a   ; is it byte?
04BB   28 02                  JR   z,assign1   
04BD   23                     INC   hl   
04BE   72                     LD   (hl),d   
04BF                ASSIGN1:      
04BF   DD E9                  JP   (ix)   
04C1                             ; /ab absolute
04C1                             ; num -- num
04C1                ABSOLUTE:      
04C1   E1                     POP   hl   
04C2   CB 7C                  BIT   7,h   
04C4   C8                     RET   z   
04C5   AF                     XOR   a   
04C6   95                     SUB   l   
04C7   6F                     LD   l,a   
04C8   9F                     SBC   a,a   
04C9   94                     SUB   h   
04CA   67                     LD   h,a   
04CB   E5                     PUSH   hl   
04CC   DD E9                  JP   (ix)   
04CE                             ; /ad addrOf
04CE                             ; char -- addr
04CE                ADDROF:      
04CE   E1                     POP   hl   ; a = char
04CF   7D                     LD   a,l   
04D0   FE 7B                  CP   "z"+1   ; if a > z then exit
04D2   30 19                  JR   nc,addrOf2   
04D4   D6 41                  SUB   "A"   ; a - 65
04D6   38 15                  JR   c,addrOf2   ; if < A then exit
04D8   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
04DA   38 06                  JR   c,addrOf1   
04DC   D6 06                  SUB   "a"-("Z"+1)   
04DE   FE 1A                  CP   "Z"-"A"+1   
04E0   38 0B                  JR   c,addrOf2   ; if < a then exit
04E2                ADDROF1:      
04E2   87                     ADD   a,a   ; double a
04E3   21 00 23               LD   hl,VARS   ; hl = VARS + a
04E6   85                     ADD   a,l   
04E7   6F                     LD   l,a   
04E8   3E 00                  LD   a,0   
04EA   8C                     ADC   a,h   
04EB   67                     LD   h,a   
04EC   E5                     PUSH   hl   
04ED                ADDROF2:      
04ED   DD E9                  JP   (ix)   
04EF                LBRACE:      
04EF                BLOCKSTART:      
04EF   C5                     PUSH   bc   ; return pointer to first { of block
04F0   03                     INC   bc   
04F1   16 01                  LD   d,1   ; nesting: count first parenthesis
04F3                BLOCKSTART1:      ; Skip to end of definition
04F3   0A                     LD   a,(bc)   ; Get the next character
04F4   03                     INC   bc   ; Point to next character
04F5   FE 21                  CP   " " + 1   ; ignore whitespace
04F7   38 FA                  JR   c,blockStart1   
04F9   FE 29                  CP   ")"   
04FB   28 2D                  JR   z,blockStart4   
04FD   FE 7D                  CP   "}"   
04FF   28 29                  JR   z,blockStart4   
0501   FE 5D                  CP   "]"   
0503   28 25                  JR   z,blockStart4   
0505   FE 28                  CP   "("   
0507   28 16                  JR   z,blockStart2   
0509   FE 7B                  CP   "{"   
050B   28 12                  JR   z,blockStart2   
050D   FE 5B                  CP   "["   
050F   28 0E                  JR   z,blockStart2   
0511   FE 27                  CP   "'"   
0513   28 0D                  JR   z,blockStart3   
0515   FE 60                  CP   "`"   
0517   28 09                  JR   z,blockStart3   
0519   FE 22                  CP   DQ   
051B   28 05                  JR   z,blockStart3   
051D   18 D4                  JR   blockStart1   
051F                BLOCKSTART2:      
051F   14                     INC   d   
0520   18 D1                  JR   blockStart1   
0522                BLOCKSTART3:      
0522   3E 80                  LD   a,$80   
0524   AA                     XOR   d   
0525   57                     LD   d,a   
0526   20 CB                  JR   nz,blockStart1   
0528   18 03                  JR   blockStart5   
052A                BLOCKSTART4:      
052A   15                     DEC   d   
052B   20 C6                  JR   nz,blockStart1   ; get the next element
052D                BLOCKSTART5:      
052D   60 69                  LD   hl,bc   ; hl = IP
052F   11 1E 24               LD   de,HEAP   ; is IP pointing to object in heap
0532   B7                     OR   a   ; IP - HEAP
0533   ED 52                  SBC   hl,de   
0535   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0537   28 1C                  JR   z,blockStart6   
0539   60 69                  LD   hl,bc   ; hl = IP
053B   D1                     POP   de   ; de = block*
053C   ED 43 00 24            LD   (vTemp1),bc   ; save IP
0540   B7                     OR   a   ; bc = size
0541   ED 52                  SBC   hl,de   
0543   44 4D                  LD   bc,hl   
0545   EB                     EX   de,hl   ; hl = block* de = heap*
0546   ED 5B F0 23            LD   de,(vHeapPtr)   
054A   D5                     PUSH   de   ; return hblock*
054B   ED B0                  LDIR      ; copy size bytes from block* to hblock*
054D   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += size
0551   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
0555                BLOCKSTART6:      
0555   0B                     DEC   bc   ; balanced, exit
0556   DD E9                  JP   (ix)   
0558                RBRACE:      
0558                BLOCKEND:      
0558   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
055B   FD 56 01               LD   d,(iy+1)   
055E   ED 53 00 24            LD   (vTemp1),de   
0562   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0565   FD 56 07               LD   d,(iy+7)   
0568   ED 53 02 24            LD   (vTemp2),de   
056C   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
056F   FD 56 03               LD   d,(iy+3)   
0572   EB                     EX   de,hl   
0573   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0576   FD 56 01               LD   d,(iy+1)   
0579   13                     INC   de   ; for carry flag <=
057A   B7                     OR   a   
057B   ED 52                  SBC   hl,de   
057D   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
057F   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0581   FD 5D                  LD   e,iyl   
0583   21 08 00               LD   hl,8   
0586   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0587   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0588   18 0C                  JR   blockEnd2   
058A                BLOCKEND1:      ; same scope
058A   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
058D   FD 56 03               LD   d,(iy+3)   
0590   EB                     EX   de,hl   
0591   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0593   FD 5D                  LD   e,iyl   
0595   EB                     EX   de,hl   
0596                BLOCKEND2:      
0596   44 4D                  LD   bc,hl   ; bc = hl = BP
0598   B7                     OR   a   ; hl = BP - SP = count
0599   ED 72                  SBC   hl,sp   
059B   7D                     LD   a,l   
059C   B4                     OR   h   
059D   28 09                  JR   z,blockEnd3   
059F   C5                     PUSH   bc   ; bc = count, hl = BP
05A0   44 4D                  LD   bc,hl   
05A2   E1                     POP   hl   
05A3   2B                     DEC   hl   ; hl = BP-1
05A4   1B                     DEC   de   ; de = args*-1
05A5   ED B8                  LDDR      
05A7   13                     INC   de   
05A8                BLOCKEND3:      
05A8   EB                     EX   de,hl   ; sp = de = new tos*
05A9   F9                     LD   sp,hl   
05AA   ED 4B 02 24            LD   bc,(vTemp2)   
05AE   FD 2A 00 24            LD   iy,(vTemp1)   
05B2   DD E9                  JP   (ix)   
05B4                             ; /br break from loop
05B4                             ; --
05B4                BREAK:       
05B4   E1                     POP   hl   
05B5   7D                     LD   a,l   
05B6   B4                     OR   h   
05B7   28 02                  JR   z,break1   
05B9   DD E9                  JP   (ix)   
05BB                BREAK1:      
05BB   FD 5D                  LD   e,iyl   ; get block* just under stack frame
05BD   FD 54                  LD   d,iyh   
05BF   21 08 00               LD   hl,8   
05C2   19                     ADD   hl,de   
05C3   23                     INC   hl   
05C4   23                     INC   hl   
05C5   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
05C8   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
05CB   C3 58 05               JP   blockEnd   
05CE                TICK:        
05CE                CHAR:        
05CE   21 00 00               LD   hl,0   ; if "" is empty or null
05D1                CHAR1:       
05D1   03                     INC   bc   ; point to next char
05D2   0A                     LD   a,(bc)   
05D3   FE 27                  CP   "'"   ; ' is the terminator
05D5   28 09                  JR   z,char3   
05D7   FE 5C                  CP   $5c   ; \ is the escape
05D9   20 02                  JR   nz,char2   
05DB   03                     INC   bc   
05DC   0A                     LD   a,(bc)   
05DD                CHAR2:       
05DD   6F                     LD   l,a   
05DE   18 F1                  JR   char1   
05E0                CHAR3:       
05E0   E5                     PUSH   hl   
05E1   DD E9                  JP   (ix)   
05E3                SLASH:       
05E3                COMMAND:      
05E3   CD 23 0C               CALL   jumpTable   
05E6   2F                     DB   "/"   ; // comment
05E7   93 06                  DW   comment   
05E9   61                     DB   "a"   
05EA   1F 06                  DW   command_a   
05EC   62                     DB   "b"   
05ED   2B 06                  DW   command_b   
05EF   63                     DB   "c"   ; /c chars
05F0   85 06                  DW   chars   
05F2   64                     DB   "d"   ; /d decimal
05F3   58 07                  DW   decimal   
05F5   66                     DB   "f"   
05F6   37 06                  DW   command_f   
05F8   68                     DB   "h"   ; /h hexadecimal
05F9   60 07                  DW   hexadecimal   
05FB   69                     DB   "i"   
05FC   43 06                  DW   command_i   
05FE   6B                     DB   "k"   ; /k key
05FF   7E 0A                  DW   key   
0601   6D                     DB   "m"   
0602   4F 06                  DW   command_m   
0604   6E                     DB   "n"   ; /n numbers
0605   8D 06                  DW   numbers   
0607   6F                     DB   "o"   ; /o output
0608   87 0A                  DW   output   
060A   70                     DB   "p"   
060B   58 06                  DW   command_p   
060D   72                     DB   "r"   
060E   67 06                  DW   command_r   
0610   73                     DB   "s"   ; /s size
0611   D2 0B                  DW   size   
0613   74                     DB   "t"   ; /t true
0614   CF 08                  DW   true1   
0616   76                     DB   "v"   
0617   70 06                  DW   command_v   
0619   78                     DB   "x"   ; /x xor
061A   B1 03                  DW   xor   
061C   00                     DB   NUL   
061D   47 07                  DW   div   
061F                COMMAND_A:      
061F   CD 23 0C               CALL   jumpTable   
0622   62                     DB   "b"   ; /ab absolute
0623   C1 04                  DW   absolute   
0625   64                     DB   "d"   ; /ad address of
0626   CE 04                  DW   addrOf   
0628   00                     DB   NUL   
0629   DB 08                  DW   error1   
062B                COMMAND_B:      
062B   CD 23 0C               CALL   jumpTable   
062E   72                     DB   "r"   ; /br break
062F   B4 05                  DW   break   
0631   79                     DB   "y"   ; /by cold boot
0632   EA 0C                  DW   coldStart   
0634   00                     DB   NUL   
0635   DB 08                  DW   error1   
0637                COMMAND_F:      
0637   CD 23 0C               CALL   jumpTable   
063A   65                     DB   "e"   ; /fe forEach
063B   E2 08                  DW   forEach   
063D   73                     DB   "s"   ; /fs funcSrc
063E   4E 09                  DW   funcSrc   
0640   00                     DB   NUL   
0641   D5 08                  DW   false1   
0643                COMMAND_I:      
0643   CD 23 0C               CALL   jumpTable   
0646   6E                     DB   "n"   ; /in input
0647   73 0A                  DW   input   
0649   76                     DB   "v"   ; /iv invert
064A   BC 03                  DW   invert   
064C   00                     DB   NUL   
064D   DB 08                  DW   error1   
064F                COMMAND_M:      
064F   CD 23 0C               CALL   jumpTable   
0652   70                     DB   "p"   ; /mp map
0653   90 0A                  DW   map   
0655   00                     DB   NUL   
0656   DB 08                  DW   error1   
0658                COMMAND_P:      
0658   CD 23 0C               CALL   jumpTable   
065B   62                     DB   "b"   ; /pb print buffer
065C   92 0B                  DW   printBuffer   
065E   63                     DB   "c"   ; /pc print chars
065F   B8 0B                  DW   printChars   
0661   6B                     DB   "k"   ; /pk print stack
0662   CA 0B                  DW   printStack   
0664   00                     DB   NUL   
0665   DB 08                  DW   error1   
0667                COMMAND_R:      
0667   CD 23 0C               CALL   jumpTable   
066A   65                     DB   "e"   ; /re remainder
066B   CC 0B                  DW   remain   
066D   00                     DB   NUL   
066E   DB 08                  DW   error1   
0670                COMMAND_V:      
0670   CD 23 0C               CALL   jumpTable   
0673   62                     DB   "b"   
0674   E9 0B                  DW   varBufPtr   
0676   68                     DB   "h"   
0677   F2 0B                  DW   varHeapPtr   
0679   74                     DB   "t"   
067A   FB 0B                  DW   varTIBPtr   
067C   42                     DB   "B"   
067D   DA 0B                  DW   constBufStart   
067F   54                     DB   "T"   
0680   E4 0B                  DW   constTIBStart   
0682   00                     DB   NUL   
0683   DB 08                  DW   error1   
0685                CHARS:       
0685   21 01 00               LD   hl,1   
0688                CHARS1:      
0688   22 E6 23               LD   (vDataWidth),hl   
068B   DD E9                  JP   (ix)   
068D                NUMBERS:      
068D   21 02 00               LD   hl,2   
0690   C3 88 06               JP   chars1   
0693                COMMENT:      
0693   03                     INC   bc   ; point to next char
0694   0A                     LD   a,(bc)   
0695   FE 20                  CP   " "   ; terminate on any char less than SP
0697   30 FA                  JR   nc,comment   
0699   0B                     DEC   bc   
069A   DD E9                  JP   (ix)   
069C                             ; ";" createFunc
069C                             ; arg_list* block* -- func*
069C                SEMICOLON:      
069C                CREATEFUNC:      
069C   ED 43 00 24            LD   (vTemp1),bc   ; save IP
06A0   E1                     POP   hl   ; hl = block*
06A1   22 02 24               LD   (vTemp2),hl   ; save block*
06A4   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
06A7   FD 56 05               LD   d,(iy+5)   
06AA   7B                     LD   a,e   ; if arg_list == null then make a func
06AB   B2                     OR   d   
06AC   20 09                  JR   nz,createFunc0   
06AE   21 00 00               LD   hl,0   ; partial_array = null
06B1   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
06B5   18 65                  JR   createFunc5   
06B7                CREATEFUNC0:      
06B7   E1                     POP   hl   ; hl = inner_arg_list*
06B8   E5                     PUSH   hl   ; save inner_arg_list
06B9   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
06BD   7E                     LD   a,(hl)   ; compile inner_num_locals
06BE   4F                     LD   c,a   ; b = inner_num_locals
06BF   12                     LD   (de),a   
06C0   23                     INC   hl   
06C1   13                     INC   de   
06C2   7E                     LD   a,(hl)   ; compile inner_length
06C3   12                     LD   (de),a   
06C4   91                     SUB   c   ; a = inner_num args
06C5   23                     INC   hl   
06C6   13                     INC   de   
06C7   B7                     OR   a   ; compile args if inner_length > 0
06C8   28 05                  JR   z,createFunc1   
06CA   4F                     LD   c,a   ; bc = a
06CB   06 00                  LD   b,0   
06CD   ED B0                  LDIR      
06CF                CREATEFUNC1:      
06CF   EB                     EX   de,hl   ; hl = outer_arg_list
06D0   FD 5E 04               LD   e,(iy+4)   
06D3   FD 56 05               LD   d,(iy+5)   
06D6   EB                     EX   de,hl   
06D7   23                     INC   hl   ; a = outer_length
06D8   7E                     LD   a,(hl)   
06D9   23                     INC   hl   
06DA   B7                     OR   a   
06DB   28 05                  JR   z,createFunc2   
06DD   4F                     LD   c,a   
06DE   06 00                  LD   b,0   
06E0   ED B0                  LDIR      ; append outer_args
06E2                CREATEFUNC2:      ; a = outer_length
06E2   47                     LD   b,a   ; b = a = outer_length
06E3   2A F0 23               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
06E6   23                     INC   hl   
06E7   7E                     LD   a,(hl)   ; add outer_length to new length
06E8   80                     ADD   a,b   
06E9   77                     LD   (hl),a   
06EA   2B                     DEC   hl   
06EB   78                     LD   a,b   ; save outer_length in a'
06EC   08                     EX   af,af'   
06ED   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
06EE   7E                     LD   a,(hl)   ; c = a = inner_num_locals
06EF   B7                     OR   a   
06F0   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
06F2   4F                     LD   c,a   ; c = inner_num_locals
06F3   06 00                  LD   b,0   ; bc = inner_num_locals
06F5   23                     INC   hl   ; a = inner_length
06F6   7E                     LD   a,(hl)   
06F7   91                     SUB   c   ; a = inner_num_args
06F8   23                     INC   hl   ; hl = inner_arg_chars
06F9   85                     ADD   a,l   ; hl += a
06FA   6F                     LD   l,a   
06FB   3E 00                  LD   a,0   
06FD   84                     ADD   a,h   
06FE   67                     LD   h,a   
06FF   ED B0                  LDIR      ; append inner_locals
0701                CREATEFUNC2A:      
0701   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0702   12                     LD   (de),a   ; compile partial_array length field
0703   13                     INC   de   
0704   AF                     XOR   a   
0705   12                     LD   (de),a   
0706   13                     INC   de   
0707   D5                     PUSH   de   ; push partial_array*
0708   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0709   FD 5E 02               LD   e,(iy+2)   
070C   FD 56 03               LD   d,(iy+3)   
070F   EB                     EX   de,hl   
0710                CREATEFUNC3:      
0710   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0711   4E                     LD   c,(hl)   
0712   2B                     DEC   hl   
0713   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0714   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0715   13                     INC   de   
0716   79                     LD   a,c   
0717   12                     LD   (de),a   
0718   13                     INC   de   
0719   10 F5                  DJNZ   createFunc3   ; b = outer_length
071B                CREATEFUNC4:      
071B   E1                     POP   hl   ; hl = partial_array*
071C                CREATEFUNC5:      
071C   C1                     POP   bc   ; bc = new_arg_list*
071D   D5                     PUSH   de   ; return new func*
071E   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
071F   73                     LD   (hl),e   ; compile partial_array* to func
0720   23                     INC   hl   
0721   72                     LD   (hl),d   
0722   23                     INC   hl   
0723   ED 5B 02 24            LD   de,(vTemp2)   ; de = block*
0727   73                     LD   (hl),e   ; compile block* to func
0728   23                     INC   hl   
0729   72                     LD   (hl),d   
072A   23                     INC   hl   
072B   71                     LD   (hl),c   ; compile new_arg_list* to func
072C   23                     INC   hl   
072D   70                     LD   (hl),b   
072E   23                     INC   hl   
072F   22 F0 23               LD   (vHeapPtr),hl   ; bump heap ptr
0732   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
0736   DD E9                  JP   (ix)   
0738                             ; , discard stack item
0738                             ; x y -- x
0738                COMMA:       
0738                DISCARD:      
0738   FD 54                  LD   d,iyh   ; limit this to SP <= BP
073A   FD 5D                  LD   e,iyl   
073C   EB                     EX   de,hl   
073D   B7                     OR   a   
073E   ED 72                  SBC   hl,sp   
0740   CB 7C                  BIT   7,h   
0742   20 01                  JR   nz,discard1   
0744   E1                     POP   hl   
0745                DISCARD1:      
0745   DD E9                  JP   (ix)   
0747                DIV:         
0747   D1                     POP   de   
0748   E1                     POP   hl   
0749   C5                     PUSH   bc   ; preserve the IP
074A   44 4D                  LD   bc,hl   
074C   CD A1 08               CALL   divide   
074F   EB                     EX   de,hl   
0750   ED 53 F4 23            LD   (vRemain),de   
0754   C1                     POP   bc   
0755   C3 90 03               JP   add3   
0758                DECIMAL:      
0758   21 0A 00               LD   hl,10   
075B                DECIMAL1:      
075B   22 E8 23               LD   (vNumBase),hl   
075E   DD E9                  JP   (ix)   
0760                HEXADECIMAL:      
0760   21 10 00               LD   hl,16   
0763   C3 5B 07               JP   decimal1   
0766                DOT:         
0766   CD 23 0C               CALL   jumpTable   
0769   61                     DB   "a"   ; .a print array
076A   78 07                  DW   bufferArray   
076C   63                     DB   "c"   ; .c print char
076D   80 08                  DW   bufferChar   
076F   73                     DB   "s"   ; .s print string
0770   66 08                  DW   bufferString   
0772   78                     DB   "x"   ; .x print x chars
0773   85 08                  DW   bufferXChars   
0775   00                     DB   NUL   ; .  print number
0776   C1 07                  DW   bufferNumber   
0778                          ;*Macro unroll: FUNC bufferArray, 2, "abc"
0778                BUFFERARRAY:      
0778   CD 87 09               CALL   go   
077B   00 00                  DW   NUL   
077D   86 07                  DW   bufferArrayM_1517S1039   
077F   81 07                  DW   $+2   
0781   02                     DB   2   
0782   03 61 62 63            .PSTR   "abc"   
0786                BUFFERARRAYM_1517S1039:      
0786   7B 22 5B 20 22 2E 73 20 25 61 20 2F 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 22 5D 22 2E 73 7D 00 00 .CSTR   "{",DQ,"[ ",DQ,".s %a /s%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ",DQ,"]",DQ,".s}",0   
07C1                             ; /bd buffer decimal
07C1                             ; value --
07C1                BUFFERNUMBER:      
07C1   3A E8 23               LD   a,(vNumBase)   
07C4   FE 10                  CP   16   
07C6   28 66                  JR   z,bufferHex   ; else falls through
07C8                             ; /bd buffer decimal
07C8                             ; value --
07C8                BUFFERDEC:      
07C8   ED 5B EC 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
07CC   D9                     EXX      
07CD   E1                     POP   hl   ; hl = value
07CE   CD E2 07               CALL   bufferDec0   
07D1   D9                     EXX      ; de = buffer*' bc = IP
07D2   3E 20                  LD   a," "   ; append space to buffer
07D4   12                     LD   (de),a   
07D5   1C                     INC   e   ; buffer*++, wraparound
07D6   CC 0C 0C               CALL   z,flushBuffer   
07D9   2A EC 23               LD   hl,(vBufPtr)   ; hl = buffer*
07DC   ED 53 EC 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
07E0   DD E9                  JP   (ix)   
07E2                             ; hl = value
07E2                             ; de' = buffer*
07E2                             ; a, bc, de, hl destroyed
07E2                BUFFERDEC0:      
07E2   CB 7C                  BIT   7,h   
07E4   28 0C                  JR   z,bufferDec1   
07E6   D9                     EXX      
07E7   3E 2D                  LD   a,"-"   
07E9   12                     LD   (de),a   
07EA   13                     INC   de   
07EB   D9                     EXX      
07EC   AF                     XOR   a   
07ED   95                     SUB   l   
07EE   6F                     LD   l,a   
07EF   9F                     SBC   a,a   
07F0   94                     SUB   h   
07F1   67                     LD   h,a   
07F2                BUFFERDEC1:      
07F2   0E 00                  LD   c,0   ; leading zeros flag = false
07F4   11 F0 D8               LD   de,-10000   
07F7   CD 12 08               CALL   bufferDec2   
07FA   11 18 FC               LD   de,-1000   
07FD   CD 12 08               CALL   bufferDec2   
0800   11 9C FF               LD   de,-100   
0803   CD 12 08               CALL   bufferDec2   
0806   1E F6                  LD   e,-10   
0808   CD 12 08               CALL   bufferDec2   
080B   0C                     INC   c   ; flag = true for at least digit
080C   1E FF                  LD   e,-1   
080E   CD 12 08               CALL   bufferDec2   
0811   C9                     RET      
0812                BUFFERDEC2:      
0812   06 2F                  LD   b,"0"-1   
0814                BUFFERDEC3:      
0814   04                     INC   b   
0815   19                     ADD   hl,de   
0816   38 FC                  JR   c,bufferDec3   
0818   ED 52                  SBC   hl,de   
081A   3E 30                  LD   a,"0"   
081C   B8                     CP   b   
081D   20 05                  JR   nz,bufferDec4   
081F   AF                     XOR   a   
0820   B1                     OR   c   
0821   C8                     RET   z   
0822   18 01                  JR   bufferDec5   
0824                BUFFERDEC4:      
0824   0C                     INC   c   
0825                BUFFERDEC5:      
0825   78                     LD   a,b   
0826   D9                     EXX      
0827   12                     LD   (de),a   
0828   1C                     INC   e   
0829   CC 0C 0C               CALL   z,flushBuffer   
082C   D9                     EXX      
082D   C9                     RET      
082E                             ; /bh buffer hex
082E                             ; value --
082E                BUFFERHEX:      
082E   E1                     POP   hl   ; hl = value
082F   ED 5B EC 23            LD   de,(vBufPtr)   
0833   3E 24                  LD   a,"$"   ; # prefix
0835   12                     LD   (de),a   
0836   1C                     INC   e   ; buffer*++, wraparound
0837   CC 0C 0C               CALL   z,flushBuffer   
083A   7C                     LD   a,h   
083B   CD 4F 08               CALL   bufferHex1   
083E   7D                     LD   a,l   
083F   CD 4F 08               CALL   bufferHex1   
0842   3E 20                  LD   a," "   ; append space to buffer
0844   12                     LD   (de),a   
0845   1C                     INC   e   ; buffer*++, wraparound
0846   CC 0C 0C               CALL   z,flushBuffer   
0849   ED 53 EC 23            LD   (vBufPtr),de   
084D   DD E9                  JP   (ix)   
084F                BUFFERHEX1:      
084F   F5                     PUSH   af   
0850   1F                     RRA      
0851   1F                     RRA      
0852   1F                     RRA      
0853   1F                     RRA      
0854   CD 58 08               CALL   bufferHex2   
0857   F1                     POP   af   
0858                BUFFERHEX2:      
0858   E6 0F                  AND   0x0F   
085A   C6 90                  ADD   a,0x90   
085C   27                     DAA      
085D   CE 40                  ADC   a,0x40   
085F   27                     DAA      
0860   12                     LD   (de),a   
0861   1C                     INC   e   ; buffer*++, wraparound
0862   CC 0C 0C               CALL   z,flushBuffer   
0865   C9                     RET      
0866                             ; /bs buffered string
0866                             ; string* --
0866                BUFFERSTRING:      
0866   E1                     POP   hl   ; hl = string*
0867   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
086B   18 06                  JR   bufferString1   
086D                BUFFERSTRING0:      
086D   12                     LD   (de),a   ; a -> buffer*
086E   1C                     INC   e   ; buffer*++, wraparound
086F   CC 0C 0C               CALL   z,flushBuffer   
0872   23                     INC   hl   
0873                BUFFERSTRING1:      
0873   7E                     LD   a,(hl)   ; a <- string*
0874   B7                     OR   a   ; if NUL exit loop
0875   20 F6                  JR   nz,bufferString0   
0877   2A EC 23               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
087A   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
087E   DD E9                  JP   (ix)   
0880                             ; /bc buffer char
0880                             ; char --
0880                BUFFERCHAR:      
0880   21 01 00               LD   hl,1   
0883   18 01                  JR   bufferXChars0   
0885                             ; /bx buffered x chars
0885                             ; char length --
0885                BUFFERXCHARS:      
0885   E1                     POP   hl   ; hl = length
0886                BUFFERXCHARS0:      
0886   D1                     POP   de   ; a' = char
0887   7B                     LD   a,e   
0888   08                     EX   af,af'   
0889   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
088D   18 08                  JR   bufferXChars2   
088F                BUFFERXCHARS1:      
088F   08                     EX   af,af'   
0890   12                     LD   (de),a   
0891   08                     EX   af,af'   
0892   1C                     INC   e   ; buffer*++, wraparound
0893   CC 0C 0C               CALL   z,flushBuffer   
0896   2B                     DEC   hl   
0897                BUFFERXCHARS2:      
0897   7D                     LD   a,l   
0898   B4                     OR   h   
0899   20 F4                  JR   nz,bufferXChars1   
089B   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*'
089F   DD E9                  JP   (ix)   
08A1                             ; division subroutine.
08A1                             ; bc: divisor, de: dividend, hl: remainder
08A1                DIVIDE:      
08A1   21 00 00               LD   hl,0   ; zero the remainder
08A4   3E 10                  LD   a,16   ; loop counter
08A6                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
08A6   CB 21                  SLA   c   
08A8   CB 10                  RL   b   
08AA   ED 6A                  ADC   hl,hl   
08AC   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
08AE   38 03                  JR   c,divide2   
08B0   0C                     INC   c   
08B1   18 01                  JR   divide3   
08B3                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
08B3   19                     ADD   hl,de   
08B4                DIVIDE3:      
08B4   3D                     DEC   a   
08B5   20 EF                  JR   nz,divide1   
08B7   50 59                  LD   de,bc   ; result from bc to de
08B9   C9                     RET      
08BA                             ; hl = value1, de = value2
08BA                             ; hl = result
08BA                EQUALS:      
08BA   B7                     OR   a   ; reset the carry flag
08BB   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
08BD   28 10                  JR   z,true1   
08BF   C3 D5 08               JP   false1   
08C2                             ; hl = value1 de = value2
08C2                             ; hl = result
08C2                LESSTHANEQ:      
08C2   B7                     OR   a   
08C3   ED 52                  SBC   hl,de   
08C5   18 05                  JR   lessthan1   
08C7                             ; hl = value1 de = value2
08C7                             ; hl = result
08C7                LESSTHAN:      
08C7   B7                     OR   a   
08C8   ED 52                  SBC   hl,de   
08CA   28 09                  JR   z,false1   
08CC                LESSTHAN1:      
08CC   FA D5 08               JP   m,false1   
08CF                TRUE1:       
08CF   21 FF FF               LD   hl,TRUE   
08D2   E5                     PUSH   hl   
08D3   DD E9                  JP   (ix)   
08D5                NULL1:       
08D5                FALSE1:      
08D5   21 00 00               LD   hl,FALSE   
08D8   E5                     PUSH   hl   
08D9   DD E9                  JP   (ix)   
08DB                ERROR1:      
08DB   21 01 00               LD   hl,1   ; error 1: unknown command
08DE   E5                     PUSH   hl   
08DF   C3 A7 0D               JP   error   
08E2                             ; /fe forEach
08E2                             ; :o -- :s
08E2                          ;*Macro unroll: FUNC forEach, 0, "p"                       ; :p proc
08E2                FOREACH:      ; :p proc
08E2   CD 87 09               CALL   go   
08E5   00 00                  DW   NUL   
08E7   EE 08                  DW   forEachM_1734S1273   
08E9   EB 08                  DW   $+2   
08EB   00                     DB   0   
08EC   01 70                  .PSTR   "p"   
08EE                FOREACHM_1734S1273:      
08EE   7B                     DB   "{"   
08EF   3A 73 3A 54 7B         DB   ":s:T{"   ; :s source
08F4   5B 30 5D 25 54 3D      DB   "[0]%T="   
08FA   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0902   3A 64 74 7B            DB   ":dt{"   
0906   7B 20 30 25 74 3D 3D 2F 62 72 20 25 64 20 25 54 30 23 3D 20 7D DB   "{ 0%t==/br %d %T0#= }"   ; 0: store talkback
091B   7B 20 31 25 74 3D 3D 2F 62 72 20 25 64 20 25 70 5E 20 7D DB   "{ 1%t==/br %d %p^ }"   ; 1: send data to proc
092E   7B 20 32 25 74 21 3D 2F 62 72 20 30 20 31 20 25 54 30 23 5E 20 7D DB   "{ 2%t!=/br 0 1 %T0#^ }"   ; 0 or 1: get next data item
0944   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   ; init source
094B   7D                     DB   "}"   
094C   7D                     DB   "}"   
094D   00                     DB   0   
094E                             ; /fs funcSrc
094E                             ; func -- src
094E                          ;*Macro unroll: FUNC funcSrc, 1, "f"                      ; :f func or block
094E                FUNCSRC:      ; :f func or block
094E   CD 87 09               CALL   go   
0951   00 00                  DW   NUL   
0953   5A 09                  DW   funcSrcM_1749S1289   
0955   57 09                  DW   $+2   
0957   01                     DB   1   
0958   01 66                  .PSTR   "f"   
095A                FUNCSRCM_1749S1289:      
095A   7B                     DB   "{"   
095B   3A 6B 74 7B            DB   ":kt{"   ; :kt sink, type
095F   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0967   3A 64 74 7B            DB   ":dt{"   
096B   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
097D   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0984   7D                     DB   "}"   
0985   7D                     DB   "}"   
0986   00                     DB   0   
0987                             ; execute a block of code which ends with }
0987                             ; creates a root scope if BP == stack
0987                             ; else uses outer scope
0987                CARET:       
0987                GO:          
0987   D1                     POP   de   ; de = block*
0988                GO1:         
0988   7B                     LD   a,e   ; if block* == null, exit
0989   B2                     OR   d   
098A   20 02                  JR   nz,go2   
098C   DD E9                  JP   (ix)   
098E                GO2:         
098E   1A                     LD   a,(de)   
098F   FE 7B                  CP   "{"   
0991   28 06                  JR   z,goBlock   
0993   FE 28                  CP   "("   
0995   C2 CC 09               JP   nz,goFunc   
0998                             ; inc de                      ; de is the address to jump back to
0998   D5                     PUSH   de   ; push de just before stack frame
0999                GOBLOCK:      
0999   ED 53 00 24            LD   (vTemp1),de   ; save de
099D   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
09A0   FD 54                  LD   d,iyh   
09A2   FD 5D                  LD   e,iyl   
09A4   B7                     OR   a   ; if stack* == BP then this is the root_scope
09A5   ED 52                  SBC   hl,de   
09A7   ED 5B 00 24            LD   de,(vTemp1)   ; restore de
09AB   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
09AC   B4                     OR   h   
09AD   3E 00                  LD   a,0   
09AF   28 6A                  JR   z,goFunc8   
09B1   C5                     PUSH   bc   ; push IP
09B2   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
09B5   FD 46 05               LD   b,(iy+5)   
09B8   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
09BB   FD 66 03               LD   h,(iy+3)   
09BE                GOBLOCK2:      
09BE   C5                     PUSH   bc   ; arg_list*
09BF   E5                     PUSH   hl   ; first_arg*
09C0   FD E5                  PUSH   iy   ; push BP
09C2   FD 21 00 00            LD   iy,0   ; BP = SP
09C6   FD 39                  ADD   iy,sp   
09C8   42 4B                  LD   bc,de   ; bc = de = block*-1
09CA   DD E9                  JP   (ix)   
09CC                GOFUNC:      ; execute func
09CC   EB                     EX   de,hl   ; hl = func*
09CD   5E                     LD   e,(hl)   ; de = partial_array*
09CE   23                     INC   hl   
09CF   56                     LD   d,(hl)   
09D0   23                     INC   hl   
09D1   7B                     LD   a,e   ; if partial_array* == null skip
09D2   B2                     OR   d   
09D3   28 21                  JR   z,goFunc3   
09D5   ED 43 00 24            LD   (vTemp1),bc   
09D9   22 02 24               LD   (vTemp2),hl   ; save bc,hl
09DC   EB                     EX   de,hl   ; hl = partial_array*
09DD   2B                     DEC   hl   ; bc = count
09DE   46                     LD   b,(hl)   
09DF   2B                     DEC   hl   
09E0   4E                     LD   c,(hl)   
09E1   23                     INC   hl   ; hl = array data*
09E2   23                     INC   hl   
09E3   18 06                  JR   goFunc2   ; push each item on stack
09E5                GOFUNC1:      
09E5   5E                     LD   e,(hl)   ; de = partial item
09E6   23                     INC   hl   
09E7   56                     LD   d,(hl)   
09E8   23                     INC   hl   
09E9   D5                     PUSH   de   ; push on stack
09EA   0B                     DEC   bc   
09EB                GOFUNC2:      
09EB   79                     LD   a,c   ; if count != 0 then loop
09EC   B0                     OR   b   
09ED   20 F6                  JR   nz,goFunc1   
09EF   ED 4B 00 24            LD   bc,(vTemp1)   ; restore bc
09F3   2A 02 24               LD   hl,(vTemp2)   ; restore hl
09F6                GOFUNC3:      
09F6   5E                     LD   e,(hl)   ; de = block*
09F7   23                     INC   hl   
09F8   56                     LD   d,(hl)   
09F9   23                     INC   hl   
09FA   ED 53 00 24            LD   (vTemp1),de   ; save block*
09FE   5E                     LD   e,(hl)   ; de = arg_list*
09FF   23                     INC   hl   
0A00   56                     LD   d,(hl)   
0A01   23                     INC   hl   
0A02   EB                     EX   de,hl   ; hl = arg_list*
0A03   ED 5B 00 24            LD   de,(vTemp1)   ; restore de = block*
0A07   7D                     LD   a,l   ; if arg_list* == null a = 0
0A08   B4                     OR   h   
0A09   20 03                  JR   nz,goFunc4   
0A0B   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0A0C   18 0D                  JR   goFunc8   
0A0E                GOFUNC4:      ; allocate locals
0A0E   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0A0F   18 03                  JR   goFunc6   
0A11                GOFUNC5:      ; loop
0A11   3B                     DEC   sp   
0A12   3B                     DEC   sp   
0A13   3D                     DEC   a   
0A14                GOFUNC6:      
0A14   B7                     OR   a   
0A15   20 FA                  JR   nz,goFunc5   ; end loop
0A17                GOFUNC7:      
0A17   23                     INC   hl   ; a = num_args* x 2
0A18   7E                     LD   a,(hl)   
0A19   2B                     DEC   hl   
0A1A   87                     ADD   a,a   ; a *= 2
0A1B                GOFUNC8:      
0A1B   C5                     PUSH   bc   ; push IP
0A1C   44 4D                  LD   bc,hl   
0A1E   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0A21   85                     ADD   a,l   
0A22   6F                     LD   l,a   
0A23   39                     ADD   hl,sp   
0A24   18 98                  JR   goBlock2   
0A26                DOLLAR:      
0A26                HEXNUM:      
0A26   21 00 00               LD   hl,0   ; Clear hl to accept the number
0A29                HEXNUM1:      
0A29   03                     INC   bc   
0A2A   0A                     LD   a,(bc)   ; Get the character which is a numeral
0A2B   CB 77                  BIT   6,a   ; is it uppercase alpha?
0A2D   28 02                  JR   z,hexnum2   ; no a decimal
0A2F   D6 07                  SUB   7   ; sub 7  to make $a - $F
0A31                HEXNUM2:      
0A31   D6 30                  SUB   $30   ; form decimal digit
0A33   DA 12 0B               JP   c,num2   
0A36   FE 10                  CP   $0F+1   
0A38   D2 12 0B               JP   nc,num2   
0A3B   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0A3C   29                     ADD   hl,hl   ; 4X
0A3D   29                     ADD   hl,hl   ; 8X
0A3E   29                     ADD   hl,hl   ; 16X
0A3F   85                     ADD   a,l   ; add into bottom of hl
0A40   6F                     LD   l,a   
0A41   18 E6                  JR   hexnum1   
0A43                UPCASE:      
0A43   0A                     LD   a,(bc)   ; a = identifier char
0A44   D6 41                  SUB   "A"   ; "A" = 0
0A46   18 05                  JR   ident1   
0A48                LOWCASE:      
0A48   0A                     LD   a,(bc)   
0A49   D6 61                  SUB   "a"   
0A4B   C6 1A                  ADD   a,26   
0A4D                IDENT1:      
0A4D   87                     ADD   a,a   ; l = a * 2
0A4E   6F                     LD   l,a   
0A4F   26 23                  LD   h,msb(vars)   
0A51   22 F2 23               LD   (vPointer),hl   ; store address in setter
0A54   5E                     LD   e,(hl)   
0A55   23                     INC   hl   
0A56   56                     LD   d,(hl)   
0A57   D5                     PUSH   de   
0A58   DD E9                  JP   (ix)   
0A5A                             ; if
0A5A                             ; condition then -- value
0A5A                QUESTION:      
0A5A                IF:          
0A5A   03                     INC   bc   
0A5B   0A                     LD   a,(bc)   
0A5C   FE 3F                  CP   "?"   
0A5E   28 06                  JR   z,ifte   
0A60   0B                     DEC   bc   
0A61   11 00 00               LD   de,NUL   ; NUL pointer for else
0A64   18 01                  JR   ifte1   
0A66                             ; ifte
0A66                             ; condition then else -- value
0A66                IFTE:        
0A66   D1                     POP   de   ; de = else
0A67                IFTE1:       
0A67   E1                     POP   hl   ; hl = then
0A68   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0A69   7C                     LD   a,h   
0A6A   B5                     OR   l   
0A6B   E1                     POP   hl   ; hl = then
0A6C   CA 88 09               JP   z,go1   ; if z de = else
0A6F   EB                     EX   de,hl   ; condition = false, de = then
0A70   C3 88 09               JP   go1   
0A73                             ; Z80 port input
0A73                             ; port -- value
0A73                INPUT:       
0A73   E1                     POP   hl   
0A74   59                     LD   e,c   ; save IP
0A75   4D                     LD   c,l   
0A76   ED 68                  IN   l,(c)   
0A78   26 00                  LD   h,0   
0A7A   4B                     LD   c,e   ; restore IP
0A7B   E5                     PUSH   hl   
0A7C   DD E9                  JP   (ix)   
0A7E                KEY:         
0A7E   CD 81 00               CALL   getchar   
0A81   26 00                  LD   h,0   
0A83   6F                     LD   l,a   
0A84   E5                     PUSH   hl   
0A85   DD E9                  JP   (ix)   
0A87                             ; Z80 port output
0A87                             ; value port --
0A87                OUTPUT:      
0A87   E1                     POP   hl   
0A88   59                     LD   e,c   ; save IP
0A89   4D                     LD   c,l   
0A8A   E1                     POP   hl   
0A8B   ED 69                  OUT   (c),l   
0A8D   4B                     LD   c,e   ; restore IP
0A8E   DD E9                  JP   (ix)   
0A90                             ; /mp map
0A90                             ; func -- :s00bbOm1r
0A90                          ;*Macro unroll: FUNC map, 0, "f"                           ; :f func
0A90                MAP:         ; :f func
0A90   CD 87 09               CALL   go   
0A93   00 00                  DW   NUL   
0A95   9C 0A                  DW   mapM_1967S1517   
0A97   99 0A                  DW   $+2   
0A99   00                     DB   0   
0A9A   01 66                  .PSTR   "f"   
0A9C                MAPM_1967S1517:      
0A9C   7B                     DB   "{"   
0A9D   3A 73 7B               DB   ":s{"   ; :s source
0AA0   3A 6B 74 7B            DB   ":kt{"   ; :kt sink, type
0AA4   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0AAC   3A 64 74 7B            DB   ":dt{"   
0AB0   31 25 74 3D 3D 7B 25 64 20 25 66 5E 7D 7B 25 64 7D 3F 3F DB   "1%t=={%d %f^}{%d}??"   ; if t == 1 pass data through func else raw
0AC3   25 74 20 25 6B 5E      DB   "%t %k^"   ; send data to sink
0AC9   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   ; init source
0AD0   7D                     DB   "}"   
0AD1   7D                     DB   "}"   
0AD2   7D                     DB   "}"   
0AD3   00                     DB   0   
0AD4                STAR:        
0AD4                MUL:         
0AD4   D1                     POP   de   ; get first value
0AD5   E1                     POP   hl   
0AD6                MUL2:        
0AD6   C5                     PUSH   bc   ; Preserve the IP
0AD7   44 4D                  LD   bc,hl   ; bc = 2nd value
0AD9   21 00 00               LD   hl,0   
0ADC   3E 10                  LD   a,16   
0ADE                MUL3:        
0ADE   29                     ADD   hl,hl   
0ADF   CB 13                  RL   e   
0AE1   CB 12                  RL   d   
0AE3   30 04                  JR   nc,$+6   
0AE5   09                     ADD   hl,bc   
0AE6   30 01                  JR   nc,$+3   
0AE8   13                     INC   de   
0AE9   3D                     DEC   a   
0AEA   20 F2                  JR   nz,mul3   
0AEC   C1                     POP   bc   ; Restore the IP
0AED   C3 90 03               JP   add3   
0AF0                NUM:         
0AF0   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0AF3   0A                     LD   a,(bc)   ; Get numeral or -
0AF4   FE 2D                  CP   "-"   
0AF6   20 01                  JR   nz,num0   
0AF8   03                     INC   bc   ; move to next char, no flags affected
0AF9                NUM0:        
0AF9   08                     EX   af,af'   ; save zero flag = 0 for later
0AFA                NUM1:        
0AFA   0A                     LD   a,(bc)   ; read digit
0AFB   D6 30                  SUB   "0"   ; less than 0?
0AFD   38 13                  JR   c,num2   ; not a digit, exit loop
0AFF   FE 0A                  CP   10   ; greater that 9?
0B01   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B03   03                     INC   bc   ; inc IP
0B04   54 5D                  LD   de,hl   ; multiply hl * 10
0B06   29                     ADD   hl,hl   
0B07   29                     ADD   hl,hl   
0B08   19                     ADD   hl,de   
0B09   29                     ADD   hl,hl   
0B0A   85                     ADD   a,l   ; add digit in a to hl
0B0B   6F                     LD   l,a   
0B0C   3E 00                  LD   a,0   
0B0E   8C                     ADC   a,h   
0B0F   67                     LD   h,a   
0B10   18 E8                  JR   num1   
0B12                NUM2:        
0B12   0B                     DEC   bc   
0B13   08                     EX   af,af'   ; restore zero flag
0B14   20 07                  JR   nz,num3   
0B16   EB                     EX   de,hl   ; negate the value of hl
0B17   21 00 00               LD   hl,0   
0B1A   B7                     OR   a   ; jump to sub2
0B1B   ED 52                  SBC   hl,de   
0B1D                NUM3:        
0B1D   E5                     PUSH   hl   ; Put the number on the stack
0B1E   DD E9                  JP   (ix)   ; and process the next character
0B20                RPAREN:      
0B20   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0B23   FD 46 09               LD   b,(iy+9)   
0B26   DD E9                  JP   (ix)   
0B28                             ; shiftLeft
0B28                             ; value count -- value2          shift left count places
0B28                SHIFTLEFT:      
0B28   50 59                  LD   de,bc   ; save IP
0B2A   C1                     POP   bc   ; bc = count
0B2B   41                     LD   b,c   ; b = loop counter
0B2C   E1                     POP   hl   
0B2D   04                     INC   b   ; test for counter=0 case
0B2E   18 01                  JR   shiftLeft2   
0B30                SHIFTLEFT1:      
0B30   29                     ADD   hl,hl   ; left shift hl
0B31                SHIFTLEFT2:      
0B31   10 FD                  DJNZ   shiftLeft1   
0B33   E5                     PUSH   hl   
0B34   42 4B                  LD   bc,de   ; restore IP
0B36   DD E9                  JP   (ix)   
0B38                             ; shiftRight
0B38                             ; value count -- value2          shift left count places
0B38                SHIFTRIGHT:      
0B38   50 59                  LD   de,bc   ; save IP
0B3A   C1                     POP   bc   ; bc = count
0B3B   41                     LD   b,c   ; b = loop counter
0B3C   E1                     POP   hl   
0B3D   04                     INC   b   ; test for counter=0 case
0B3E   18 04                  JR   shiftRight2   
0B40                SHIFTRIGHT1:      
0B40   CB 3C                  SRL   h   ; right shift hl
0B42   CB 1D                  RR   l   
0B44                SHIFTRIGHT2:      
0B44   10 FA                  DJNZ   shiftRight1   
0B46   E5                     PUSH   hl   
0B47   42 4B                  LD   bc,de   ; restore IP
0B49   DD E9                  JP   (ix)   
0B4B                             ; string
0B4B                             ; -- ptr                        ; points to start of string chars,
0B4B                             ; length is stored at start - 2 bytes
0B4B                DQUOTE:      
0B4B                STRING:      
0B4B   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0B4E   23                     INC   hl   ; skip length field to start
0B4F   23                     INC   hl   
0B50   E5                     PUSH   hl   ; save start of string
0B51   03                     INC   bc   ; point to next char
0B52   18 03                  JR   string2   
0B54                STRING1:      
0B54   77                     LD   (hl),a   
0B55   23                     INC   hl   ; increase count
0B56   03                     INC   bc   ; point to next char
0B57                STRING2:      
0B57   0A                     LD   a,(bc)   
0B58   FE 22                  CP   DQ   ; " is the string terminator
0B5A   28 04                  JR   z,string3   
0B5C   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0B5E   20 F4                  JR   nz,string1   
0B60                STRING3:      
0B60   AF                     XOR   a   ; write NUL to terminate string
0B61   77                     LD   (hl),a   ; hl = end of string
0B62   23                     INC   hl   
0B63   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0B66   2B                     DEC   hl   ; hl = end of string without terminator
0B67   D1                     POP   de   ; de = start of string
0B68   D5                     PUSH   de   ; return start of string
0B69   B7                     OR   a   ; hl = length bytes, de = start of string
0B6A   ED 52                  SBC   hl,de   
0B6C   EB                     EX   de,hl   
0B6D   2B                     DEC   hl   ; write length bytes to length field at start - 2
0B6E   72                     LD   (hl),d   
0B6F   2B                     DEC   hl   
0B70   73                     LD   (hl),e   
0B71   DD E9                  JP   (ix)   
0B73                MINUS:       ; negative sign or subtract
0B73   03                     INC   bc   ; check if sign of a number
0B74   0A                     LD   a,(bc)   
0B75   0B                     DEC   bc   
0B76   FE 30                  CP   "0"   
0B78   38 05                  JR   c,sub   
0B7A   FE 3A                  CP   "9"+1   
0B7C   DA 38 03               JP   c,num_   
0B7F                SUB:         ; Subtract the value 2nd on stack from top of stack
0B7F   03                     INC   bc   
0B80   FE 2D                  CP   "-"   
0B82   20 05                  JR   nz,sub1   
0B84   E1                     POP   hl   
0B85   2B                     DEC   hl   
0B86   C3 B2 04               JP   assign0   
0B89                SUB1:        
0B89   0B                     DEC   bc   
0B8A   D1                     POP   de   
0B8B   E1                     POP   hl   
0B8C   B7                     OR   a   
0B8D   ED 52                  SBC   hl,de   
0B8F   C3 90 03               JP   add3   
0B92                             ; /pb printBuffer
0B92                             ; --
0B92                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
0B92                          ;*Macro unroll: FUNC printBuffer, 0, "a"
0B92                PRINTBUFFER:      
0B92   CD 87 09               CALL   go   
0B95   00 00                  DW   NUL   
0B97   9E 0B                  DW   printBufferM_2137S1696   
0B99   9B 0B                  DW   $+2   
0B9B   00                     DB   0   
0B9C   01 61                  .PSTR   "a"   
0B9E                PRINTBUFFERM_2137S1696:      
0B9E   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0BB8                             ; printChars
0BB8                             ; char* len --
0BB8                PRINTCHARS:      
0BB8   E1                     POP   hl   ; hl = count
0BB9   D1                     POP   de   ; de = char*
0BBA   CD C5 0B               CALL   printChars2   
0BBD   DD E9                  JP   (ix)   
0BBF                PRINTCHARS1:      
0BBF   1A                     LD   a,(de)   ; print char at char*
0BC0   CD 85 00               CALL   putchar   
0BC3   13                     INC   de   ; char*++
0BC4   2B                     DEC   hl   ; count--
0BC5                PRINTCHARS2:      
0BC5   7D                     LD   a,l   ; count == 0?
0BC6   B4                     OR   h   
0BC7   C8                     RET   z   
0BC8   18 F5                  JR   printChars1   ; if not loop
0BCA                             ; /pk print stack
0BCA                             ; --
0BCA                PRINTSTACK:      
0BCA                             ;     ld (vTemp1),bc
0BCA                             ;     call printStr
0BCA                             ;     .cstr "=> "
0BCA                             ;     ld hl,STACK
0BCA                             ;     sbc hl,sp
0BCA                             ;     srl h
0BCA                             ;     rr l
0BCA                             ;     ld bc,hl
0BCA                             ;     ld hl,STACK
0BCA                             ;     jr printStack2
0BCA                             ; printStack1:
0BCA                             ;     dec bc
0BCA                             ;     dec hl
0BCA                             ;     ld d,(hl)
0BCA                             ;     dec hl
0BCA                             ;     ld e,(hl)
0BCA                             ;     ex de,hl
0BCA                             ;     call prthex
0BCA                             ;     ex de,hl
0BCA                             ;     ld a," "
0BCA                             ;     call putchar
0BCA                             ; printStack2:
0BCA                             ;     ld a,c
0BCA                             ;     or b
0BCA                             ;     jr nz,printStack1
0BCA                             ;     call prompt
0BCA                             ;     ld bc,(vTemp1)
0BCA   DD E9                  JP   (ix)   
0BCC                REMAIN:      
0BCC   2A F4 23               LD   hl,(vRemain)   
0BCF   E5                     PUSH   hl   
0BD0   DD E9                  JP   (ix)   
0BD2                SIZE:        
0BD2   E1                     POP   hl   
0BD3   2B                     DEC   hl   ; msb size
0BD4   56                     LD   d,(hl)   
0BD5   2B                     DEC   hl   ; lsb size
0BD6   5E                     LD   e,(hl)   
0BD7   D5                     PUSH   de   
0BD8   DD E9                  JP   (ix)   
0BDA                CONSTBUFSTART:      
0BDA   11 00 22               LD   de,BUF   
0BDD   18 28                  JR   constant   
0BDF                CONSTHEAPSTART:      
0BDF   11 1E 24               LD   de,HEAP   
0BE2   18 23                  JR   constant   
0BE4                CONSTTIBSTART:      
0BE4   11 00 21               LD   de,TIB   
0BE7   18 1E                  JR   constant   
0BE9                VARBUFPTR:      
0BE9   ED 5B EC 23            LD   de,(vBufPtr)   
0BED   21 EC 23               LD   hl,vBufPtr   
0BF0   18 12                  JR   variable   
0BF2                VARHEAPPTR:      
0BF2   ED 5B F0 23            LD   de,(vHeapPtr)   
0BF6   21 F0 23               LD   hl,vHeapPtr   
0BF9   18 09                  JR   variable   
0BFB                VARTIBPTR:      
0BFB   ED 5B EA 23            LD   de,(vTIBPtr)   
0BFF   21 EA 23               LD   hl,vTIBPtr   
0C02   18 00                  JR   variable   
0C04                VARIABLE:      
0C04   22 F2 23               LD   (vPointer),hl   
0C07                CONSTANT:      
0C07   D5                     PUSH   de   
0C08   DD E9                  JP   (ix)   
0C0A                             ; 
0C0A                FILTER:      
0C0A                SCAN:        
0C0A   DD E9                  JP   (ix)   
0C0C                             ;*******************************************************************
0C0C                             ; general routines
0C0C                             ;*******************************************************************
0C0C                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0C0C                FLUSHBUFFER:      
0C0C   F5                     PUSH   af   
0C0D   D5                     PUSH   de   
0C0E   E5                     PUSH   hl   
0C0F   2A EC 23               LD   hl,(vBufPtr)   
0C12   11 00 22               LD   de,BUF   
0C15   ED 53 EC 23            LD   (vBufPtr),de   
0C19   B7                     OR   a   
0C1A   ED 52                  SBC   hl,de   
0C1C   CD C5 0B               CALL   printChars2   
0C1F   E1                     POP   hl   
0C20   D1                     POP   de   
0C21   F1                     POP   af   
0C22   C9                     RET      
0C23                             ; followed by a table
0C23                             ; db char
0C23                             ; dw addr
0C23                             ; the final item must have char == NUL
0C23                JUMPTABLE:      
0C23   03                     INC   bc   
0C24   E1                     POP   hl   
0C25                JUMPTABLE0:      
0C25   AF                     XOR   a   
0C26   BE                     CP   (hl)   
0C27   28 09                  JR   z,jumpTable1   
0C29   0A                     LD   a,(bc)   
0C2A   BE                     CP   (hl)   
0C2B   28 06                  JR   z,jumpTable2   
0C2D   23                     INC   hl   
0C2E   23                     INC   hl   
0C2F   23                     INC   hl   
0C30   18 F3                  JR   jumpTable0   
0C32                JUMPTABLE1:      
0C32   0B                     DEC   bc   
0C33                JUMPTABLE2:      
0C33   23                     INC   hl   
0C34   5E                     LD   e,(hl)   
0C35   23                     INC   hl   
0C36   56                     LD   d,(hl)   
0C37   EB                     EX   de,hl   
0C38   E9                     JP   (hl)   
0C39                PRTSTR0:      
0C39   CD 85 00               CALL   putchar   
0C3C   23                     INC   hl   
0C3D                PRTSTR:      
0C3D   7E                     LD   a,(hl)   
0C3E   B7                     OR   a   
0C3F   20 F8                  JR   nz,prtstr0   
0C41   C9                     RET      
0C42                             ; **************************************************************************
0C42                             ; calculate nesting value
0C42                             ; a is char to be tested,
0C42                             ; e is the nesting value (initially 0)
0C42                             ; e is increased by ( and [
0C42                             ; e is decreased by ) and ]
0C42                             ; e has its bit 7 toggled by `
0C42                             ; limited to 127 levels
0C42                             ; **************************************************************************
0C42                NESTING:      
0C42   FE 22                  CP   DQ   ; quote char
0C44   28 06                  JR   z,nesting0   
0C46   FE 60                  CP   "`"   ; quote char
0C48   28 02                  JR   z,nesting0   
0C4A   18 0A                  JR   nesting1   
0C4C                NESTING0:      
0C4C   CB 7B                  BIT   7,e   
0C4E   28 03                  JR   z,nesting1a   
0C50   CB BB                  RES   7,e   
0C52   C9                     RET      
0C53                NESTING1A:      
0C53   CB FB                  SET   7,e   
0C55   C9                     RET      
0C56                NESTING1:      
0C56   CB 7B                  BIT   7,e   
0C58   C0                     RET   nz   
0C59   FE 7B                  CP   "{"   
0C5B   28 08                  JR   z,nesting2   
0C5D   FE 5B                  CP   "["   
0C5F   28 04                  JR   z,nesting2   
0C61   FE 28                  CP   "("   
0C63   20 02                  JR   nz,nesting3   
0C65                NESTING2:      
0C65   1C                     INC   e   
0C66   C9                     RET      
0C67                NESTING3:      
0C67   FE 7D                  CP   "}"   
0C69   28 07                  JR   z,nesting4   
0C6B   FE 5D                  CP   "]"   
0C6D   28 03                  JR   z,nesting4   
0C6F   FE 29                  CP   ")"   
0C71   C0                     RET   nz   
0C72                NESTING4:      
0C72   1D                     DEC   e   
0C73   C9                     RET      
0C74                PROMPT:      
0C74   CD 84 0C               CALL   printStr   
0C77   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0C7C   C9                     RET      
0C7D                CRLF:        
0C7D   CD 84 0C               CALL   printStr   
0C80   0D 0A 00               .CSTR   "\r\n"   
0C83   C9                     RET      
0C84                             ; prints a null teminated string
0C84                             ; the string should be immediately following the call
0C84                PRINTSTR:      
0C84   E3                     EX   (sp),hl   ; swap			
0C85   CD 3D 0C               CALL   prtstr   
0C88   23                     INC   hl   ; inc past NUL
0C89   E3                     EX   (sp),hl   ; put it back	
0C8A   C9                     RET      
0C8B                TITLESTR:      
0C8B   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0C9F                INIT:        
0C9F   21 8B 0C               LD   hl,titleStr   
0CA2   11 0A 24               LD   de,titleBuf   
0CA5   06 14                  LD   b,20   
0CA7                INIT1:       
0CA7   1A                     LD   a,(de)   
0CA8   BE                     CP   (hl)   
0CA9   20 17                  JR   nz,coldBoot0   
0CAB   13                     INC   de   
0CAC   23                     INC   hl   
0CAD   10 F8                  DJNZ   init1   
0CAF                WARMINIT:      
0CAF   ED 4B F6 23            LD   bc,(vSavedIP)   ; restore IP
0CB3   ED 7B F8 23            LD   sp,(vSavedSP)   ; restore SP
0CB7   DD 2A FA 23            LD   ix,(vSavedNext)   ; restore Next
0CBB   FD 2A FC 23            LD   iy,(vSavedBP)   ; restore BP
0CBF   C3 F9 0C               JP   start1   
0CC2                COLDBOOT0:      
0CC2   21 8B 0C               LD   hl,titleStr   ; copy titleStr to titleBuf
0CC5   11 0A 24               LD   de,titleBuf   
0CC8   06 14                  LD   b,20   
0CCA   ED B0                  LDIR      
0CCC                COLDINIT:      
0CCC   21 80 01               LD   hl,isysVars   
0CCF   11 E6 23               LD   de,sysVars   
0CD2   01 10 00               LD   bc,8 * 2   
0CD5   ED B0                  LDIR      
0CD7   21 00 23               LD   hl,vars   ; 52 vars LO HI
0CDA   06 34                  LD   b,26*2   
0CDC   AF                     XOR   a   
0CDD                COLDBOOT1:      
0CDD   77                     LD   (hl),a   
0CDE   23                     INC   hl   
0CDF   10 FC                  DJNZ   coldBoot1   
0CE1   DD 2A EE 23            LD   ix,(vNext)   
0CE5   FD 21 00 21            LD   iy,STACK   
0CE9   C9                     RET      
0CEA                COLDSTART:      
0CEA   31 00 21               LD   sp,STACK   
0CED   CD C2 0C               CALL   coldBoot0   
0CF0   C3 F9 0C               JP   start1   
0CF3                START:       
0CF3   31 00 21               LD   sp,STACK   ; start Monty
0CF6   CD 9F 0C               CALL   init   ; setups
0CF9                START1:      
0CF9   21 0A 24               LD   hl,titleBuf   
0CFC   CD 3D 0C               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0CFF                INTERPRET:      
0CFF   CD 0C 0C               CALL   flushBuffer   
0D02   CD 74 0C               CALL   prompt   
0D05   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0D08   21 00 21               LD   hl,TIB   
0D0B   22 EA 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0D0E                INTERPRET2:      ; calculate nesting
0D0E   1E 00                  LD   e,0   ; initilize nesting value
0D10   C5                     PUSH   bc   ; save offset into TIB,
0D11                             ; bc is also the count of chars in TIB
0D11   21 00 21               LD   hl,TIB   ; hl is start of TIB
0D14   18 0B                  JR   interpret4   
0D16                INTERPRET3:      
0D16   3E 33                  LD   a,"3"   
0D18   CD 85 00               CALL   putchar   
0D1B   7E                     LD   a,(hl)   ; a = char in TIB
0D1C   23                     INC   hl   ; inc pointer into TIB
0D1D   0B                     DEC   bc   ; dec count of chars in TIB
0D1E   CD 42 0C               CALL   nesting   ; update nesting value
0D21                INTERPRET4:      
0D21   79                     LD   a,c   ; is count zero?
0D22   B0                     OR   b   
0D23   20 F1                  JR   nz,interpret3   ; if not loop
0D25   C1                     POP   bc   ; restore offset into TIB
0D26                INTERPRET5:      
0D26   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0D29   FE 20                  CP   $20   ; compare to space
0D2B   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0D2D   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0D2F                             ; ???? NEEDED?
0D2F   28 3B                  JR   z,interpret8   
0D31   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0D33   28 24                  JR   z,interpret7   ; if anything else its macro/control
0D35   FE 05                  CP   CTRL_E   
0D37   CA CA 0D               JP   z,edit_   
0D3A   FE 08                  CP   CTRL_H   
0D3C   CA BA 0D               JP   z,backSpace_   
0D3F   FE 0A                  CP   CTRL_J   
0D41   CA E2 0D               JP   z,reEdit_   
0D44   FE 13                  CP   CTRL_S   
0D46   CA E5 0D               JP   z,printStack_   
0D49                             ; DB     lsb(edit_)       ; ENQ ^E  5
0D49                             ; DB     lsb(reedit_)     ; LF  ^J 10
0D49                             ; DB     lsb(list_)       ; FF  ^L 12
0D49                             ; DB     lsb(printStack_) ; DLE ^P 16
0D49                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0D49                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0D49                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0D49                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0D49                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0D49                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0D49                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0D49                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0D49                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0D49                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0D49                INTERPRET5A:      
0D49                             ; ld (vTIBPtr),bc
0D49                             ; ld bc,(vTIBPtr)
0D49   18 C3                  JR   interpret2   
0D4B                INTERPRET6:      
0D4B   21 00 21               LD   hl,TIB   
0D4E   09                     ADD   hl,bc   
0D4F   77                     LD   (hl),a   ; store the character in textbuf
0D50   03                     INC   bc   
0D51   CD 85 00               CALL   putchar   ; echo character to screen
0D54   CD 42 0C               CALL   nesting   
0D57   18 CD                  JR   interpret5   ; wait for next character
0D59                INTERPRET7:      
0D59   21 00 21               LD   hl,TIB   
0D5C   09                     ADD   hl,bc   
0D5D   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0D5F   23                     INC   hl   
0D60   36 0A                  LD   (hl),"\n"   
0D62   23                     INC   hl   
0D63   03                     INC   bc   
0D64   03                     INC   bc   
0D65   CD 7D 0C               CALL   crlf   ; echo character to screen
0D68   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0D69   B7                     OR   a   
0D6A   20 BA                  JR   nz,interpret5   
0D6C                INTERPRET8:      
0D6C   21 00 21               LD   hl,TIB   
0D6F   09                     ADD   hl,bc   
0D70   22 EA 23               LD   (vTIBPtr),hl   
0D73   01 00 21               LD   bc,TIB   
0D76   ED 43 F6 23            LD   (vSavedIP),bc   ; save IP
0D7A   ED 73 F8 23            LD   (vSavedSP),sp   ; save SP
0D7E   DD 22 FA 23            LD   (vSavedNext),ix   ; save Next
0D82   FD 22 FC 23            LD   (vSavedBP),iy   ; save BP
0D86   0B                     DEC   bc   
0D87                NEXT:        
0D87   03                     INC   bc   ; Increment the IP
0D88   0A                     LD   a,(bc)   ; Get the next character and dispatch
0D89   FE 20                  CP   " "   ; whitespace?
0D8B   28 FA                  JR   z,next   ; space? ignore
0D8D   38 09                  JR   c,next1   
0D8F   D6 20                  SUB   " "   
0D91   6F                     LD   l,a   ; index into table
0D92   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0D94   6E                     LD   l,(hl)   ; get low jump address
0D95   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0D97   E9                     JP   (hl)   ; Jump to routine
0D98                NEXT1:       
0D98   FE 00                  CP   NUL   ; end of input string?
0D9A   28 03                  JR   z,exit   
0D9C   C3 FF 0C               JP   interpret   ; no, other whitespace, macros?
0D9F                EXIT:        
0D9F   03                     INC   bc   
0DA0   60 69                  LD   hl,bc   
0DA2   E9                     JP   (hl)   
0DA3                RUN:         
0DA3   C1                     POP   bc   
0DA4   0B                     DEC   bc   
0DA5   DD E9                  JP   (ix)   
0DA7                ERROR:       
0DA7   CD A3 0D               CALL   run   
0DAA   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQ,"Error ",DQ,".s .",0   
0DB7   C3 FF 0C               JP   interpret   
0DBA                BACKSPACE_:      
0DBA   79                     LD   a,c   
0DBB   B0                     OR   b   
0DBC   CA 0E 0D               JP   z,interpret2   
0DBF   0B                     DEC   bc   
0DC0   CD 84 0C               CALL   printStr   
0DC3   08 20 08 00            .CSTR   "\b \b"   
0DC7   C3 0E 0D               JP   interpret2   
0DCA                             ; edit
0DCA                EDIT_:       
0DCA   CD A3 0D               CALL   run   
0DCD   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQ,"var?",DQ,".s /k/ad .h",0   
0DDF   C3 FF 0C               JP   interpret   
0DE2                REEDIT_:      
0DE2   C3 FF 0C               JP   interpret   
0DE5                PRINTSTACK_:      
0DE5   CD A3 0D               CALL   run   
0DE8   2F 70 6B 00            .CSTR   "/pk"   
0DEC   C3 FF 0C               JP   interpret   
0DEF                             ; editDef:
0DEF                             ;     pop hl                      ; pop ret address
0DEF                             ;     ex (sp),hl                  ; swap with TOS
0DEF                             ;     push hl                     ; dup TOS
0DEF                             ;     ld a,l                      ; a = ident
0DEF                             ;     ld de,TIB                   ; de = start of TIB
0DEF                             ;     ld (vTIBPtr),de             ; update TIB*
0DEF                             ;     push ix                     ; save NEXT
0DEF                             ;     ld ix,editDef0              ; NEXT = editDef0
0DEF                             ;     jp lookupRef                ; convert letter into address
0DEF                             ; editDef0:
0DEF                             ;     ld e,(hl)                   ; de = (hl++)
0DEF                             ;     inc hl
0DEF                             ;     ld d,(hl)
0DEF                             ;     ld a,d                      ; de == 0 ?
0DEF                             ;     or e
0DEF                             ;     jr z,editDef4
0DEF                             ;     ld ix,editDef3              ; NEXT = editDef3
0DEF                             ;     ex de,hl
0DEF                             ;     ld a,(hl)
0DEF                             ;     cp "{"
0DEF                             ;     jr nz,editDef1
0DEF                             ;     jp editBlock0               ; convert letter into address
0DEF                             ; editDef1:
0DEF                             ;     cp "("
0DEF                             ;     jr nz,editDef2
0DEF                             ;     jp editBlock0               ; convert letter into address
0DEF                             ; editDef2:
0DEF                             ;     jp editFunc
0DEF                             ; editDef3:
0DEF                             ;     ld a," "                    ; write assign
0DEF                             ;     call writeChar
0DEF                             ;     pop hl                      ; a = ident
0DEF                             ;     ld a,l
0DEF                             ;     call writeChar
0DEF                             ;     ld a,"="                    ; write assign
0DEF                             ;     call writeChar
0DEF                             ;     ld ix,editDef4              ; NEXT = editDef4
0DEF                             ;     jp printTIB
0DEF                             ; editDef4:
0DEF                             ;     pop ix                      ; restore NEXT
0DEF                             ;     jp (ix)
0DEF                             ; writeChar:
0DEF                             ;     ld de,(vTIBPtr)             ; de = TIB*
0DEF                             ;     ld (de),a                   ; write ident
0DEF                             ;     inc de
0DEF                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0DEF                             ;     ret
0DEF                             ; ; printTIB
0DEF                             ; printTIB:
0DEF                             ;     ld hl,(vTIBPtr)
0DEF                             ;     ld de,TIB
0DEF                             ;     or a
0DEF                             ;     sbc hl,de
0DEF                             ;     jp printTIB2
0DEF                             ; printTIB1:
0DEF                             ;     ld a,(de)
0DEF                             ;     call putchar
0DEF                             ; printTIB2:
0DEF                             ;     ld a,l
0DEF                             ;     or h
0DEF                             ;     jr nz,printTIB1
0DEF                             ;     jp (ix)
0DEF                             ; editBlock:
0DEF                             ;     pop hl                      ; hl = block*
0DEF                             ; editBlock0:
0DEF                             ;     push ix                     ; save next
0DEF                             ;     push hl                     ; push block*
0DEF                             ;     push hl                     ; push block*
0DEF                             ;     ld ix,(editBlock2)
0DEF                             ;     jp blockLength
0DEF                             ; editBlock1:
0DEF                             ;     pop hl                      ; bc = length, (sp) = IP
0DEF                             ;     pop de                      ; de = block*
0DEF                             ;     ld a,l
0DEF                             ;     or h
0DEF                             ;     jr z,editBlock2
0DEF                             ;     push bc
0DEF                             ;     ld bc,hl
0DEF                             ;     ex de,hl                    ; hl = block*
0DEF                             ;     ld de,(vTIBPtr)              ; de = TIB*
0DEF                             ;     ldir                        ; copy block to TIB
0DEF                             ;     ld (vTIBPtr),de              ; save TIB*
0DEF                             ;     pop bc
0DEF                             ; editBlock2:
0DEF                             ;     pop ix                      ; restore next
0DEF                             ;     jp (ix)
0DEF                             ; editFunc:
0DEF                             ;     jp (ix)
0DEF                             ; editArray:
0DEF                             ;     jp (ix)
0DEF                             ; editArglist:
0DEF                             ;     jp (ix)
0DEF                             ; ; blockLength
0DEF                             ; ; addr1 -- length
0DEF                             ; blockLength:
0DEF                             ;     pop hl                      ; block*
0DEF                             ;     push hl                     ; save block*
0DEF                             ;     inc hl                      ; skip first char
0DEF                             ;     ld d,1                      ; increase nesting
0DEF                             ; blockLength1:                   ; Skip to end of definition
0DEF                             ;     ld a,(hl)                   ; Get the next character
0DEF                             ;     inc hl                      ; Point to next character
0DEF                             ;     cp " " + 1                  ; ignore whitespace
0DEF                             ;     jr c,blockLength1
0DEF                             ;     cp ")"
0DEF                             ;     jr z,blockLength4
0DEF                             ;     cp "}"
0DEF                             ;     jr z,blockLength4
0DEF                             ;     cp "]"
0DEF                             ;     jr z,blockLength4
0DEF                             ;     cp "("
0DEF                             ;     jr z,blockLength2
0DEF                             ;     cp "{"
0DEF                             ;     jr z,blockLength2
0DEF                             ;     cp "["
0DEF                             ;     jr z,blockLength2
0DEF                             ;     cp "'"
0DEF                             ;     jr z,blockLength3
0DEF                             ;     cp "`"
0DEF                             ;     jr z,blockLength3
0DEF                             ;     cp DQ
0DEF                             ;     jr z,blockLength3
0DEF                             ;     jr blockLength1
0DEF                             ; blockLength2:
0DEF                             ;     inc d
0DEF                             ;     jr blockLength1
0DEF                             ; blockLength4:
0DEF                             ;     dec d
0DEF                             ;     jr nz, blockLength1         ; get the next element
0DEF                             ; blockLength3:
0DEF                             ;     ld a,$80
0DEF                             ;     xor d
0DEF                             ;     ld d,a
0DEF                             ;     jr nz, blockLength1
0DEF                             ;     pop hl                      ; hl = block*
0DEF                             ;     or a
0DEF                             ;     sbc hl,de
0DEF                             ;     push hl
0DEF                             ;     jp (ix)
0DEF                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0DEF                             ; \a start of stack \#3 depth \b base \$ prompt
0DEF                             ; DW dStack               ; a vS0 start of datastack			
0DEF                             ; DW FALSE                ; b vBase16
0DEF                             ; DW 0                    ; c vTIBPtr an offset to the tib
0DEF                             ; DW 0                    ; d
0DEF                             ; DW 65                   ; e vLastDef "A" last command u defined
0DEF                             ; DW 0                    ; f
0DEF                             ; DW page6                ; g 256 bytes limits
0DEF                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0DEF                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VDATAWIDTH:   DS   2   ; 
23E8                VNUMBASE:   DS   2   ; 
23EA                VTIBPTR:   DS   2   ; 
23EC                VBUFPTR:   DS   2   ; 
23EE                VNEXT:    DS   2   ; 
23F0                VHEAPPTR:   DS   2   ; 
23F2                             ; uninitialised sys variables (preserved)
23F2                VPOINTER:   DS   2   ; 
23F4                VREMAIN:   DS   2   ; 
23F6                VSAVEDIP:   DS   2   ; 
23F8                VSAVEDSP:   DS   2   ; 
23FA                VSAVEDNEXT:   DS   2   ; 
23FC                VSAVEDBP:   DS   2   ; 
23FE                VCHECKSUM:   DS   2   ; 
2400                             ; uninitialised sys variables (unpreserved)
2400                VTEMP1:   DS   2   ; 
2402                VTEMP2:   DS   2   ; 
2404                VLASTDEF:   DS   2   ; 
2406                VHASHSTR:   DS   2   ; 
2408                TBPTR:    DS   2   ; reserved for tests
240A                TITLEBUF:   DS   20   
241E                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 11
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0C0A DEFINED AT LINE 1803 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1498 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1709 IN MAIN.asm
                    > USED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 2005 IN MAIN.asm
                    > USED AT LINE 2067 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1257 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1262 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 776 IN MAIN.asm
                    > USED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 794 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
                    > USED AT LINE 812 IN MAIN.asm
                    > USED AT LINE 819 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
                    > USED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 1036 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1469 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 2024 IN MAIN.asm
                    > USED AT LINE 2112 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
                    > USED AT LINE 1040 IN MAIN.asm
                    > USED AT LINE 1648 IN MAIN.asm
                    > USED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 2126 IN MAIN.asm
                    > USED AT LINE 2141 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2032 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2034 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 2036 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 53 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN MAIN.asm
                    > USED AT LINE 1958 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 68 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 171 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 173 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 175 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 177 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 179 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 181 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 183 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 185 IN MAIN.asm
LPAREN_:            0315 DEFINED AT LINE 187 IN MAIN.asm
LBRACE_:            0315 DEFINED AT LINE 188 IN MAIN.asm
RBRACE_:            0318 DEFINED AT LINE 190 IN MAIN.asm
TICK_:              031B DEFINED AT LINE 192 IN MAIN.asm
SEMICOLON_:         031E DEFINED AT LINE 194 IN MAIN.asm
DOT_:               0321 DEFINED AT LINE 196 IN MAIN.asm
COLON_:             0324 DEFINED AT LINE 198 IN MAIN.asm
UPCASE_:            0327 DEFINED AT LINE 200 IN MAIN.asm
LOWCASE_:           032A DEFINED AT LINE 202 IN MAIN.asm
QUESTION_:          032D DEFINED AT LINE 204 IN MAIN.asm
STAR_:              0330 DEFINED AT LINE 206 IN MAIN.asm
BANG_:              0333 DEFINED AT LINE 208 IN MAIN.asm
NUM_:               0338 DEFINED AT LINE 211 IN MAIN.asm
                    > USED AT LINE 1676 IN MAIN.asm
HASH_:              033B DEFINED AT LINE 213 IN MAIN.asm
PIPE_:              033E DEFINED AT LINE 215 IN MAIN.asm
CARET_:             0341 DEFINED AT LINE 217 IN MAIN.asm
COMMA_:             0344 DEFINED AT LINE 219 IN MAIN.asm
DQUOTE_:            0347 DEFINED AT LINE 221 IN MAIN.asm
MINUS_:             034A DEFINED AT LINE 223 IN MAIN.asm
EQ_:                034D DEFINED AT LINE 225 IN MAIN.asm
EQ0:                0357 DEFINED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
EQ1:                0358 DEFINED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
GT_:                035C DEFINED AT LINE 238 IN MAIN.asm
LT_:                0367 DEFINED AT LINE 246 IN MAIN.asm
LT1:                0370 DEFINED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 245 IN MAIN.asm
SLASH_:             0379 DEFINED AT LINE 258 IN MAIN.asm
NOP_:               037C DEFINED AT LINE 260 IN MAIN.asm
RPAREN_:            037E DEFINED AT LINE 262 IN MAIN.asm
PLUS:               0381 DEFINED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
ADD:                0381 DEFINED AT LINE 269 IN MAIN.asm
ADD1:               038C DEFINED AT LINE 277 IN MAIN.asm
                    > USED AT LINE 273 IN MAIN.asm
ADD3:               0390 DEFINED AT LINE 282 IN MAIN.asm
                    > USED AT LINE 1015 IN MAIN.asm
                    > USED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 1690 IN MAIN.asm
AT:                 0393 DEFINED AT LINE 288 IN MAIN.asm
                    > USED AT LINE 176 IN MAIN.asm
ADDR:               0393 DEFINED AT LINE 289 IN MAIN.asm
AMPER:              039D DEFINED AT LINE 294 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
AND:                039D DEFINED AT LINE 295 IN MAIN.asm
AND1:               03A4 DEFINED AT LINE 303 IN MAIN.asm
                    > USED AT LINE 317 IN MAIN.asm
PIPE:               03A8 DEFINED AT LINE 308 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
OR:                 03A8 DEFINED AT LINE 309 IN MAIN.asm
XOR:                03B1 DEFINED AT LINE 319 IN MAIN.asm
                    > USED AT LINE 775 IN MAIN.asm
XOR1:               03B2 DEFINED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 333 IN MAIN.asm
INVERT:             03BC DEFINED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
PERCENT:            03C1 DEFINED AT LINE 338 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
ARG:                03C1 DEFINED AT LINE 339 IN MAIN.asm
ARG0:               03DD DEFINED AT LINE 358 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
ARG0A:              03E6 DEFINED AT LINE 366 IN MAIN.asm
                    > USED AT LINE 345 IN MAIN.asm
                    > USED AT LINE 350 IN MAIN.asm
ARG1:               03EB DEFINED AT LINE 369 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
ARG1A:              03F3 DEFINED AT LINE 376 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
LBRACK:             03F6 DEFINED AT LINE 380 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
ARRAYSTART:         03F6 DEFINED AT LINE 381 IN MAIN.asm
RBRACK:             0412 DEFINED AT LINE 395 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
ARRAYEND:           0412 DEFINED AT LINE 396 IN MAIN.asm
ARRAYEND1:          042E DEFINED AT LINE 413 IN MAIN.asm
                    > USED AT LINE 430 IN MAIN.asm
ARRAYEND2:          043E DEFINED AT LINE 423 IN MAIN.asm
                    > USED AT LINE 419 IN MAIN.asm
ARRAYEND3:          0443 DEFINED AT LINE 427 IN MAIN.asm
                    > USED AT LINE 412 IN MAIN.asm
HASH:               0462 DEFINED AT LINE 450 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
ARRAYINDEX:         0462 DEFINED AT LINE 451 IN MAIN.asm
ARRAYINDEX0:        046A DEFINED AT LINE 457 IN MAIN.asm
ARRAYINDEX1:        046B DEFINED AT LINE 459 IN MAIN.asm
                    > USED AT LINE 456 IN MAIN.asm
ARRAYINDEX2:        0477 DEFINED AT LINE 468 IN MAIN.asm
                    > USED AT LINE 465 IN MAIN.asm
COLON:              047A DEFINED AT LINE 476 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
ARGLIST:            047A DEFINED AT LINE 477 IN MAIN.asm
ARGLIST1:           0484 DEFINED AT LINE 484 IN MAIN.asm
                    > USED AT LINE 505 IN MAIN.asm
ARGLIST1A:          048C DEFINED AT LINE 490 IN MAIN.asm
                    > USED AT LINE 487 IN MAIN.asm
ARGLIST2:           0494 DEFINED AT LINE 495 IN MAIN.asm
ARGLIST3:           049C DEFINED AT LINE 503 IN MAIN.asm
                    > USED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 501 IN MAIN.asm
ARGLIST4:           049F DEFINED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
ARGLIST5:           04A5 DEFINED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 510 IN MAIN.asm
ASSIGN:             04B0 DEFINED AT LINE 523 IN MAIN.asm
                    > USED AT LINE 231 IN MAIN.asm
ASSIGN0:            04B2 DEFINED AT LINE 526 IN MAIN.asm
                    > USED AT LINE 276 IN MAIN.asm
                    > USED AT LINE 1683 IN MAIN.asm
ASSIGNX:            04B3 DEFINED AT LINE 528 IN MAIN.asm
ASSIGN1:            04BF DEFINED AT LINE 536 IN MAIN.asm
                    > USED AT LINE 533 IN MAIN.asm
ABSOLUTE:           04C1 DEFINED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 782 IN MAIN.asm
ADDROF:             04CE DEFINED AT LINE 556 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
ADDROF1:            04E2 DEFINED AT LINE 568 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
ADDROF2:            04ED DEFINED AT LINE 577 IN MAIN.asm
                    > USED AT LINE 560 IN MAIN.asm
                    > USED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 567 IN MAIN.asm
LBRACE:             04EF DEFINED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
BLOCKSTART:         04EF DEFINED AT LINE 582 IN MAIN.asm
BLOCKSTART1:        04F3 DEFINED AT LINE 586 IN MAIN.asm
                    > USED AT LINE 590 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
                    > USED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 620 IN MAIN.asm
                    > USED AT LINE 624 IN MAIN.asm
BLOCKSTART2:        051F DEFINED AT LINE 613 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
                    > USED AT LINE 602 IN MAIN.asm
                    > USED AT LINE 604 IN MAIN.asm
BLOCKSTART3:        0522 DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 607 IN MAIN.asm
                    > USED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
BLOCKSTART4:        052A DEFINED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
                    > USED AT LINE 597 IN MAIN.asm
BLOCKSTART5:        052D DEFINED AT LINE 625 IN MAIN.asm
                    > USED AT LINE 621 IN MAIN.asm
BLOCKSTART6:        0555 DEFINED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 631 IN MAIN.asm
RBRACE:             0558 DEFINED AT LINE 648 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
BLOCKEND:           0558 DEFINED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 716 IN MAIN.asm
BLOCKEND1:          058A DEFINED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
BLOCKEND2:          0596 DEFINED AT LINE 678 IN MAIN.asm
                    > USED AT LINE 670 IN MAIN.asm
BLOCKEND3:          05A8 DEFINED AT LINE 692 IN MAIN.asm
                    > USED AT LINE 684 IN MAIN.asm
BREAK:              05B4 DEFINED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
BREAK1:             05BB DEFINED AT LINE 707 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
TICK:               05CE DEFINED AT LINE 718 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
CHAR:               05CE DEFINED AT LINE 719 IN MAIN.asm
CHAR1:              05D1 DEFINED AT LINE 721 IN MAIN.asm
                    > USED AT LINE 732 IN MAIN.asm
CHAR2:              05DD DEFINED AT LINE 730 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
CHAR3:              05E0 DEFINED AT LINE 733 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
SLASH:              05E3 DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
COMMAND:            05E3 DEFINED AT LINE 738 IN MAIN.asm
COMMAND_A:          061F DEFINED AT LINE 779 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
COMMAND_B:          062B DEFINED AT LINE 788 IN MAIN.asm
                    > USED AT LINE 745 IN MAIN.asm
COMMAND_F:          0637 DEFINED AT LINE 797 IN MAIN.asm
                    > USED AT LINE 751 IN MAIN.asm
COMMAND_I:          0643 DEFINED AT LINE 806 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
COMMAND_M:          064F DEFINED AT LINE 815 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
COMMAND_P:          0658 DEFINED AT LINE 822 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
COMMAND_R:          0667 DEFINED AT LINE 833 IN MAIN.asm
                    > USED AT LINE 767 IN MAIN.asm
COMMAND_V:          0670 DEFINED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 773 IN MAIN.asm
CHARS:              0685 DEFINED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
CHARS1:             0688 DEFINED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
NUMBERS:            068D DEFINED AT LINE 860 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
COMMENT:            0693 DEFINED AT LINE 864 IN MAIN.asm
                    > USED AT LINE 741 IN MAIN.asm
                    > USED AT LINE 868 IN MAIN.asm
SEMICOLON:          069C DEFINED AT LINE 874 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
CREATEFUNC:         069C DEFINED AT LINE 875 IN MAIN.asm
CREATEFUNC0:        06B7 DEFINED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 883 IN MAIN.asm
CREATEFUNC1:        06CF DEFINED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
CREATEFUNC2:        06E2 DEFINED AT LINE 919 IN MAIN.asm
                    > USED AT LINE 915 IN MAIN.asm
CREATEFUNC2A:       0701 DEFINED AT LINE 945 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
CREATEFUNC3:        0710 DEFINED AT LINE 957 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
CREATEFUNC4:        071B DEFINED AT LINE 968 IN MAIN.asm
CREATEFUNC5:        071C DEFINED AT LINE 970 IN MAIN.asm
                    > USED AT LINE 886 IN MAIN.asm
COMMA:              0738 DEFINED AT LINE 993 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
DISCARD:            0738 DEFINED AT LINE 994 IN MAIN.asm
DISCARD1:           0745 DEFINED AT LINE 1003 IN MAIN.asm
                    > USED AT LINE 1001 IN MAIN.asm
DIV:                0747 DEFINED AT LINE 1006 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
DECIMAL:            0758 DEFINED AT LINE 1017 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
DECIMAL1:           075B DEFINED AT LINE 1019 IN MAIN.asm
                    > USED AT LINE 1024 IN MAIN.asm
HEXADECIMAL:        0760 DEFINED AT LINE 1022 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
DOT:                0766 DEFINED AT LINE 1026 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
BUFFERARRAY:        0778 DEFINED AT LINE 32
                    > USED AT LINE 1029 IN MAIN.asm
BUFFERARRAYM_1517S1039: 0786 DEFINED AT LINE 39
                    > USED AT LINE 35
BUFFERNUMBER:       07C1 DEFINED AT LINE 1044 IN MAIN.asm
                    > USED AT LINE 1037 IN MAIN.asm
BUFFERDEC:          07C8 DEFINED AT LINE 1051 IN MAIN.asm
BUFFERDEC0:         07E2 DEFINED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 1055 IN MAIN.asm
BUFFERDEC1:         07F2 DEFINED AT LINE 1082 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
BUFFERDEC2:         0812 DEFINED AT LINE 1096 IN MAIN.asm
                    > USED AT LINE 1085 IN MAIN.asm
                    > USED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 1091 IN MAIN.asm
                    > USED AT LINE 1094 IN MAIN.asm
BUFFERDEC3:         0814 DEFINED AT LINE 1098 IN MAIN.asm
                    > USED AT LINE 1101 IN MAIN.asm
BUFFERDEC4:         0824 DEFINED AT LINE 1110 IN MAIN.asm
                    > USED AT LINE 1105 IN MAIN.asm
BUFFERDEC5:         0825 DEFINED AT LINE 1112 IN MAIN.asm
                    > USED AT LINE 1109 IN MAIN.asm
BUFFERHEX:          082E DEFINED AT LINE 1123 IN MAIN.asm
                    > USED AT LINE 1047 IN MAIN.asm
BUFFERHEX1:         084F DEFINED AT LINE 1141 IN MAIN.asm
                    > USED AT LINE 1131 IN MAIN.asm
                    > USED AT LINE 1133 IN MAIN.asm
BUFFERHEX2:         0858 DEFINED AT LINE 1149 IN MAIN.asm
                    > USED AT LINE 1147 IN MAIN.asm
BUFFERSTRING:       0866 DEFINED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 1033 IN MAIN.asm
BUFFERSTRING0:      086D DEFINED AT LINE 1166 IN MAIN.asm
                    > USED AT LINE 1174 IN MAIN.asm
BUFFERSTRING1:      0873 DEFINED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 1165 IN MAIN.asm
BUFFERCHAR:         0880 DEFINED AT LINE 1181 IN MAIN.asm
                    > USED AT LINE 1031 IN MAIN.asm
BUFFERXCHARS:       0885 DEFINED AT LINE 1187 IN MAIN.asm
                    > USED AT LINE 1035 IN MAIN.asm
BUFFERXCHARS0:      0886 DEFINED AT LINE 1189 IN MAIN.asm
                    > USED AT LINE 1183 IN MAIN.asm
BUFFERXCHARS1:      088F DEFINED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
BUFFERXCHARS2:      0897 DEFINED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
DIVIDE:             08A1 DEFINED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 1011 IN MAIN.asm
DIVIDE1:            08A6 DEFINED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1227 IN MAIN.asm
DIVIDE2:            08B3 DEFINED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 1220 IN MAIN.asm
DIVIDE3:            08B4 DEFINED AT LINE 1225 IN MAIN.asm
                    > USED AT LINE 1222 IN MAIN.asm
EQUALS:             08BA DEFINED AT LINE 1233 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
LESSTHANEQ:         08C2 DEFINED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
LESSTHAN:           08C7 DEFINED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN1:          08CC DEFINED AT LINE 1253 IN MAIN.asm
                    > USED AT LINE 1244 IN MAIN.asm
TRUE1:              08CF DEFINED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 1236 IN MAIN.asm
NULL1:              08D5 DEFINED AT LINE 1260 IN MAIN.asm
FALSE1:             08D5 DEFINED AT LINE 1261 IN MAIN.asm
                    > USED AT LINE 804 IN MAIN.asm
                    > USED AT LINE 1237 IN MAIN.asm
                    > USED AT LINE 1251 IN MAIN.asm
                    > USED AT LINE 1254 IN MAIN.asm
ERROR1:             08DB DEFINED AT LINE 1266 IN MAIN.asm
                    > USED AT LINE 786 IN MAIN.asm
                    > USED AT LINE 795 IN MAIN.asm
                    > USED AT LINE 813 IN MAIN.asm
                    > USED AT LINE 820 IN MAIN.asm
                    > USED AT LINE 831 IN MAIN.asm
                    > USED AT LINE 838 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
FOREACH:            08E2 DEFINED AT LINE 32
                    > USED AT LINE 800 IN MAIN.asm
FOREACHM_1734S1273: 08EE DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            094E DEFINED AT LINE 32
                    > USED AT LINE 802 IN MAIN.asm
FUNCSRCM_1749S1289: 095A DEFINED AT LINE 39
                    > USED AT LINE 35
CARET:              0987 DEFINED AT LINE 1303 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
GO:                 0987 DEFINED AT LINE 1304 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0988 DEFINED AT LINE 1306 IN MAIN.asm
                    > USED AT LINE 1481 IN MAIN.asm
                    > USED AT LINE 1483 IN MAIN.asm
GO2:                098E DEFINED AT LINE 1311 IN MAIN.asm
                    > USED AT LINE 1309 IN MAIN.asm
GOBLOCK:            0999 DEFINED AT LINE 1320 IN MAIN.asm
                    > USED AT LINE 1314 IN MAIN.asm
GOBLOCK2:           09BE DEFINED AT LINE 1337 IN MAIN.asm
                    > USED AT LINE 1417 IN MAIN.asm
GOFUNC:             09CC DEFINED AT LINE 1346 IN MAIN.asm
                    > USED AT LINE 1316 IN MAIN.asm
GOFUNC1:            09E5 DEFINED AT LINE 1365 IN MAIN.asm
                    > USED AT LINE 1375 IN MAIN.asm
GOFUNC2:            09EB DEFINED AT LINE 1372 IN MAIN.asm
                    > USED AT LINE 1364 IN MAIN.asm
GOFUNC3:            09F6 DEFINED AT LINE 1378 IN MAIN.asm
                    > USED AT LINE 1354 IN MAIN.asm
GOFUNC4:            0A0E DEFINED AT LINE 1395 IN MAIN.asm
                    > USED AT LINE 1392 IN MAIN.asm
GOFUNC5:            0A11 DEFINED AT LINE 1398 IN MAIN.asm
                    > USED AT LINE 1404 IN MAIN.asm
GOFUNC6:            0A14 DEFINED AT LINE 1402 IN MAIN.asm
                    > USED AT LINE 1397 IN MAIN.asm
GOFUNC7:            0A17 DEFINED AT LINE 1405 IN MAIN.asm
GOFUNC8:            0A1B DEFINED AT LINE 1410 IN MAIN.asm
                    > USED AT LINE 1331 IN MAIN.asm
                    > USED AT LINE 1394 IN MAIN.asm
DOLLAR:             0A26 DEFINED AT LINE 1419 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
HEXNUM:             0A26 DEFINED AT LINE 1420 IN MAIN.asm
HEXNUM1:            0A29 DEFINED AT LINE 1422 IN MAIN.asm
                    > USED AT LINE 1439 IN MAIN.asm
HEXNUM2:            0A31 DEFINED AT LINE 1428 IN MAIN.asm
                    > USED AT LINE 1426 IN MAIN.asm
UPCASE:             0A43 DEFINED AT LINE 1441 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
LOWCASE:            0A48 DEFINED AT LINE 1445 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
IDENT1:             0A4D DEFINED AT LINE 1449 IN MAIN.asm
                    > USED AT LINE 1444 IN MAIN.asm
QUESTION:           0A5A DEFINED AT LINE 1462 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
IF:                 0A5A DEFINED AT LINE 1463 IN MAIN.asm
IFTE:               0A66 DEFINED AT LINE 1473 IN MAIN.asm
                    > USED AT LINE 1467 IN MAIN.asm
IFTE1:              0A67 DEFINED AT LINE 1475 IN MAIN.asm
                    > USED AT LINE 1470 IN MAIN.asm
INPUT:              0A73 DEFINED AT LINE 1487 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
KEY:                0A7E DEFINED AT LINE 1497 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
OUTPUT:             0A87 DEFINED AT LINE 1506 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
MAP:                0A90 DEFINED AT LINE 32
                    > USED AT LINE 818 IN MAIN.asm
MAPM_1967S1517:     0A9C DEFINED AT LINE 39
                    > USED AT LINE 35
STAR:               0AD4 DEFINED AT LINE 1531 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
MUL:                0AD4 DEFINED AT LINE 1532 IN MAIN.asm
MUL2:               0AD6 DEFINED AT LINE 1535 IN MAIN.asm
MUL3:               0ADE DEFINED AT LINE 1540 IN MAIN.asm
                    > USED AT LINE 1549 IN MAIN.asm
NUM:                0AF0 DEFINED AT LINE 1553 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
NUM0:               0AF9 DEFINED AT LINE 1559 IN MAIN.asm
                    > USED AT LINE 1557 IN MAIN.asm
NUM1:               0AFA DEFINED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 1578 IN MAIN.asm
NUM2:               0B12 DEFINED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 1430 IN MAIN.asm
                    > USED AT LINE 1432 IN MAIN.asm
                    > USED AT LINE 1564 IN MAIN.asm
                    > USED AT LINE 1566 IN MAIN.asm
NUM3:               0B1D DEFINED AT LINE 1587 IN MAIN.asm
                    > USED AT LINE 1582 IN MAIN.asm
RPAREN:             0B20 DEFINED AT LINE 1591 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
SHIFTLEFT:          0B28 DEFINED AT LINE 1598 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SHIFTLEFT1:         0B30 DEFINED AT LINE 1605 IN MAIN.asm
                    > USED AT LINE 1608 IN MAIN.asm
SHIFTLEFT2:         0B31 DEFINED AT LINE 1607 IN MAIN.asm
                    > USED AT LINE 1604 IN MAIN.asm
SHIFTRIGHT:         0B38 DEFINED AT LINE 1615 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
SHIFTRIGHT1:        0B40 DEFINED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 1626 IN MAIN.asm
SHIFTRIGHT2:        0B44 DEFINED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
DQUOTE:             0B4B DEFINED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
STRING:             0B4B DEFINED AT LINE 1635 IN MAIN.asm
STRING1:            0B54 DEFINED AT LINE 1642 IN MAIN.asm
                    > USED AT LINE 1651 IN MAIN.asm
STRING2:            0B57 DEFINED AT LINE 1646 IN MAIN.asm
                    > USED AT LINE 1641 IN MAIN.asm
STRING3:            0B60 DEFINED AT LINE 1652 IN MAIN.asm
                    > USED AT LINE 1649 IN MAIN.asm
MINUS:              0B73 DEFINED AT LINE 1669 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
SUB:                0B7F DEFINED AT LINE 1677 IN MAIN.asm
                    > USED AT LINE 1674 IN MAIN.asm
SUB1:               0B89 DEFINED AT LINE 1684 IN MAIN.asm
                    > USED AT LINE 1680 IN MAIN.asm
PRINTBUFFER:        0B92 DEFINED AT LINE 32
                    > USED AT LINE 825 IN MAIN.asm
PRINTBUFFERM_2137S1696: 0B9E DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTCHARS:         0BB8 DEFINED AT LINE 1701 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
PRINTCHARS1:        0BBF DEFINED AT LINE 1707 IN MAIN.asm
                    > USED AT LINE 1716 IN MAIN.asm
PRINTCHARS2:        0BC5 DEFINED AT LINE 1712 IN MAIN.asm
                    > USED AT LINE 1704 IN MAIN.asm
                    > USED AT LINE 1820 IN MAIN.asm
PRINTSTACK:         0BCA DEFINED AT LINE 1720 IN MAIN.asm
                    > USED AT LINE 829 IN MAIN.asm
REMAIN:             0BCC DEFINED AT LINE 1750 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
SIZE:               0BD2 DEFINED AT LINE 1755 IN MAIN.asm
                    > USED AT LINE 769 IN MAIN.asm
CONSTBUFSTART:      0BDA DEFINED AT LINE 1764 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
CONSTHEAPSTART:     0BDF DEFINED AT LINE 1768 IN MAIN.asm
CONSTTIBSTART:      0BE4 DEFINED AT LINE 1772 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
VARBUFPTR:          0BE9 DEFINED AT LINE 1776 IN MAIN.asm
                    > USED AT LINE 843 IN MAIN.asm
VARHEAPPTR:         0BF2 DEFINED AT LINE 1781 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
VARTIBPTR:          0BFB DEFINED AT LINE 1786 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
VARIABLE:           0C04 DEFINED AT LINE 1791 IN MAIN.asm
                    > USED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 1779 IN MAIN.asm
                    > USED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 1789 IN MAIN.asm
CONSTANT:           0C07 DEFINED AT LINE 1793 IN MAIN.asm
                    > USED AT LINE 1766 IN MAIN.asm
                    > USED AT LINE 1770 IN MAIN.asm
                    > USED AT LINE 1774 IN MAIN.asm
FILTER:             0C0A DEFINED AT LINE 1802 IN MAIN.asm
FLUSHBUFFER:        0C0C DEFINED AT LINE 1811 IN MAIN.asm
                    > USED AT LINE 1060 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 1129 IN MAIN.asm
                    > USED AT LINE 1137 IN MAIN.asm
                    > USED AT LINE 1157 IN MAIN.asm
                    > USED AT LINE 1169 IN MAIN.asm
                    > USED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 1988 IN MAIN.asm
JUMPTABLE:          0C23 DEFINED AT LINE 1830 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 798 IN MAIN.asm
                    > USED AT LINE 807 IN MAIN.asm
                    > USED AT LINE 816 IN MAIN.asm
                    > USED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 834 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 1027 IN MAIN.asm
JUMPTABLE0:         0C25 DEFINED AT LINE 1833 IN MAIN.asm
                    > USED AT LINE 1843 IN MAIN.asm
JUMPTABLE1:         0C32 DEFINED AT LINE 1844 IN MAIN.asm
                    > USED AT LINE 1836 IN MAIN.asm
JUMPTABLE2:         0C33 DEFINED AT LINE 1846 IN MAIN.asm
                    > USED AT LINE 1839 IN MAIN.asm
PRTSTR0:            0C39 DEFINED AT LINE 1854 IN MAIN.asm
                    > USED AT LINE 1860 IN MAIN.asm
PRTSTR:             0C3D DEFINED AT LINE 1857 IN MAIN.asm
                    > USED AT LINE 1924 IN MAIN.asm
                    > USED AT LINE 1984 IN MAIN.asm
NESTING:            0C42 DEFINED AT LINE 1873 IN MAIN.asm
                    > USED AT LINE 2010 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
NESTING0:           0C4C DEFINED AT LINE 1879 IN MAIN.asm
                    > USED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 1877 IN MAIN.asm
NESTING1A:          0C53 DEFINED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
NESTING1:           0C56 DEFINED AT LINE 1887 IN MAIN.asm
                    > USED AT LINE 1878 IN MAIN.asm
NESTING2:           0C65 DEFINED AT LINE 1896 IN MAIN.asm
                    > USED AT LINE 1891 IN MAIN.asm
                    > USED AT LINE 1893 IN MAIN.asm
NESTING3:           0C67 DEFINED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 1895 IN MAIN.asm
NESTING4:           0C72 DEFINED AT LINE 1906 IN MAIN.asm
                    > USED AT LINE 1901 IN MAIN.asm
                    > USED AT LINE 1903 IN MAIN.asm
PROMPT:             0C74 DEFINED AT LINE 1910 IN MAIN.asm
                    > USED AT LINE 1989 IN MAIN.asm
CRLF:               0C7D DEFINED AT LINE 1915 IN MAIN.asm
                    > USED AT LINE 2081 IN MAIN.asm
PRINTSTR:           0C84 DEFINED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 2134 IN MAIN.asm
TITLESTR:           0C8B DEFINED AT LINE 1929 IN MAIN.asm
                    > USED AT LINE 1933 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
INIT:               0C9F DEFINED AT LINE 1932 IN MAIN.asm
                    > USED AT LINE 1981 IN MAIN.asm
INIT1:              0CA7 DEFINED AT LINE 1936 IN MAIN.asm
                    > USED AT LINE 1942 IN MAIN.asm
WARMINIT:           0CAF DEFINED AT LINE 1944 IN MAIN.asm
COLDBOOT0:          0CC2 DEFINED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1939 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
COLDINIT:           0CCC DEFINED AT LINE 1957 IN MAIN.asm
COLDBOOT1:          0CDD DEFINED AT LINE 1966 IN MAIN.asm
                    > USED AT LINE 1969 IN MAIN.asm
COLDSTART:          0CEA DEFINED AT LINE 1975 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
START:              0CF3 DEFINED AT LINE 1979 IN MAIN.asm
                    > USED AT LINE 7
START1:             0CF9 DEFINED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 1949 IN MAIN.asm
                    > USED AT LINE 1978 IN MAIN.asm
INTERPRET:          0CFF DEFINED AT LINE 1986 IN MAIN.asm
                    > USED AT LINE 2114 IN MAIN.asm
                    > USED AT LINE 2127 IN MAIN.asm
                    > USED AT LINE 2142 IN MAIN.asm
                    > USED AT LINE 2145 IN MAIN.asm
                    > USED AT LINE 2150 IN MAIN.asm
INTERPRET2:         0D0E DEFINED AT LINE 1995 IN MAIN.asm
                    > USED AT LINE 2059 IN MAIN.asm
                    > USED AT LINE 2132 IN MAIN.asm
                    > USED AT LINE 2136 IN MAIN.asm
INTERPRET3:         0D16 DEFINED AT LINE 2003 IN MAIN.asm
                    > USED AT LINE 2016 IN MAIN.asm
INTERPRET4:         0D21 DEFINED AT LINE 2012 IN MAIN.asm
                    > USED AT LINE 2001 IN MAIN.asm
INTERPRET5:         0D26 DEFINED AT LINE 2019 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
                    > USED AT LINE 2084 IN MAIN.asm
INTERPRET5A:        0D49 DEFINED AT LINE 2056 IN MAIN.asm
INTERPRET6:         0D4B DEFINED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 2023 IN MAIN.asm
INTERPRET7:         0D59 DEFINED AT LINE 2071 IN MAIN.asm
                    > USED AT LINE 2028 IN MAIN.asm
INTERPRET8:         0D6C DEFINED AT LINE 2086 IN MAIN.asm
                    > USED AT LINE 2026 IN MAIN.asm
NEXT:               0D87 DEFINED AT LINE 2099 IN MAIN.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 2103 IN MAIN.asm
NEXT1:              0D98 DEFINED AT LINE 2111 IN MAIN.asm
                    > USED AT LINE 2104 IN MAIN.asm
EXIT:               0D9F DEFINED AT LINE 2115 IN MAIN.asm
                    > USED AT LINE 2113 IN MAIN.asm
RUN:                0DA3 DEFINED AT LINE 2119 IN MAIN.asm
                    > USED AT LINE 2125 IN MAIN.asm
                    > USED AT LINE 2140 IN MAIN.asm
                    > USED AT LINE 2148 IN MAIN.asm
ERROR:              0DA7 DEFINED AT LINE 2124 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
BACKSPACE_:         0DBA DEFINED AT LINE 2129 IN MAIN.asm
                    > USED AT LINE 2033 IN MAIN.asm
EDIT_:              0DCA DEFINED AT LINE 2139 IN MAIN.asm
                    > USED AT LINE 2031 IN MAIN.asm
REEDIT_:            0DE2 DEFINED AT LINE 2144 IN MAIN.asm
                    > USED AT LINE 2035 IN MAIN.asm
PRINTSTACK_:        0DE5 DEFINED AT LINE 2147 IN MAIN.asm
                    > USED AT LINE 2037 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1322 IN MAIN.asm
                    > USED AT LINE 1972 IN MAIN.asm
                    > USED AT LINE 1976 IN MAIN.asm
                    > USED AT LINE 1980 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 1773 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 2000 IN MAIN.asm
                    > USED AT LINE 2063 IN MAIN.asm
                    > USED AT LINE 2073 IN MAIN.asm
                    > USED AT LINE 2088 IN MAIN.asm
                    > USED AT LINE 2091 IN MAIN.asm
BUF:                2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 1765 IN MAIN.asm
                    > USED AT LINE 1816 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 570 IN MAIN.asm
                    > USED AT LINE 1963 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1959 IN MAIN.asm
VDATAWIDTH:         23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 417 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 531 IN MAIN.asm
                    > USED AT LINE 858 IN MAIN.asm
VNUMBASE:           23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1020 IN MAIN.asm
                    > USED AT LINE 1045 IN MAIN.asm
VTIBPTR:            23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1787 IN MAIN.asm
                    > USED AT LINE 1788 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
                    > USED AT LINE 2090 IN MAIN.asm
VBUFPTR:            23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1052 IN MAIN.asm
                    > USED AT LINE 1061 IN MAIN.asm
                    > USED AT LINE 1062 IN MAIN.asm
                    > USED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 1138 IN MAIN.asm
                    > USED AT LINE 1164 IN MAIN.asm
                    > USED AT LINE 1175 IN MAIN.asm
                    > USED AT LINE 1176 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1206 IN MAIN.asm
                    > USED AT LINE 1777 IN MAIN.asm
                    > USED AT LINE 1778 IN MAIN.asm
                    > USED AT LINE 1815 IN MAIN.asm
                    > USED AT LINE 1817 IN MAIN.asm
VNEXT:              23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 1971 IN MAIN.asm
VHEAPPTR:           23F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 406 IN MAIN.asm
                    > USED AT LINE 440 IN MAIN.asm
                    > USED AT LINE 444 IN MAIN.asm
                    > USED AT LINE 479 IN MAIN.asm
                    > USED AT LINE 514 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 642 IN MAIN.asm
                    > USED AT LINE 885 IN MAIN.asm
                    > USED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 921 IN MAIN.asm
                    > USED AT LINE 987 IN MAIN.asm
                    > USED AT LINE 1636 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 1782 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
VPOINTER:           23F2 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 290 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
                    > USED AT LINE 372 IN MAIN.asm
                    > USED AT LINE 461 IN MAIN.asm
                    > USED AT LINE 529 IN MAIN.asm
                    > USED AT LINE 1453 IN MAIN.asm
                    > USED AT LINE 1792 IN MAIN.asm
VREMAIN:            23F4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 1013 IN MAIN.asm
                    > USED AT LINE 1751 IN MAIN.asm
VSAVEDIP:           23F6 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 1945 IN MAIN.asm
                    > USED AT LINE 2093 IN MAIN.asm
VSAVEDSP:           23F8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1946 IN MAIN.asm
                    > USED AT LINE 2094 IN MAIN.asm
VSAVEDNEXT:         23FA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 1947 IN MAIN.asm
                    > USED AT LINE 2095 IN MAIN.asm
VSAVEDBP:           23FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 1948 IN MAIN.asm
                    > USED AT LINE 2096 IN MAIN.asm
VCHECKSUM:          23FE DEFINED AT LINE 52 IN ram.asm
VTEMP1:             2400 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 445 IN MAIN.asm
                    > USED AT LINE 634 IN MAIN.asm
                    > USED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 652 IN MAIN.asm
                    > USED AT LINE 696 IN MAIN.asm
                    > USED AT LINE 876 IN MAIN.asm
                    > USED AT LINE 988 IN MAIN.asm
                    > USED AT LINE 1321 IN MAIN.asm
                    > USED AT LINE 1327 IN MAIN.asm
                    > USED AT LINE 1355 IN MAIN.asm
                    > USED AT LINE 1376 IN MAIN.asm
                    > USED AT LINE 1383 IN MAIN.asm
                    > USED AT LINE 1389 IN MAIN.asm
VTEMP2:             2402 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 655 IN MAIN.asm
                    > USED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 878 IN MAIN.asm
                    > USED AT LINE 978 IN MAIN.asm
                    > USED AT LINE 1356 IN MAIN.asm
                    > USED AT LINE 1377 IN MAIN.asm
VLASTDEF:           2404 DEFINED AT LINE 58 IN ram.asm
VHASHSTR:           2406 DEFINED AT LINE 59 IN ram.asm
TBPTR:              2408 DEFINED AT LINE 60 IN ram.asm
TITLEBUF:           240A DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 1934 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 1983 IN MAIN.asm
HEAP:               241E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 1769 IN MAIN.asm
