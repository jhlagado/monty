0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 F1 0F               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQ:       EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of Monty code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num_locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
00C9                .macro PERFORM,name
00C9                             ; 
00C9                 ld ix,perform%%M
00C9                 jp name
00C9                perform%%M:
00C9                .endm
00C9                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   25                     DB   lsb(bang_)   ; !     1
0181   0D                     DB   lsb(dquote_)   ; "     2
0182   62                     DB   lsb(hash_)   ; #     1
0183   0A                     DB   lsb(dollar_)   ; $     1
0184   13                     DB   lsb(percent_)   ; %     1
0185   82                     DB   lsb(amper_)   ; &     1
0186   0D                     DB   lsb(quote_)   ; '     2
0187   19                     DB   lsb(lparen_)   ; (     1
0188   7A                     DB   lsb(rparen_)   ; )     1
0189   B4                     DB   lsb(star_)   ; *     1
018A   D8                     DB   lsb(plus_)   ; +     1
018B   07                     DB   lsb(comma_)   ; ,     2
018C   8C                     DB   lsb(minus_)   ; -     1
018D   10                     DB   lsb(dot_)   ; .     2
018E   1C                     DB   lsb(slash_)   ; /	    1
018F   1F                     DB   lsb(num_)   ; 0     1
0190   1F                     DB   lsb(num_)   ; 1
0191   1F                     DB   lsb(num_)   ; 2
0192   1F                     DB   lsb(num_)   ; 3
0193   1F                     DB   lsb(num_)   ; 4
0194   1F                     DB   lsb(num_)   ; 5
0195   1F                     DB   lsb(num_)   ; 6
0196   1F                     DB   lsb(num_)   ; 7
0197   1F                     DB   lsb(num_)   ; 8
0198   1F                     DB   lsb(num_)   ; 9
0199   04                     DB   lsb(colon_)   ; :     2
019A   22                     DB   lsb(semicolon_)   ; ;     2
019B   50                     DB   lsb(lt_)   ; <     1
019C   36                     DB   lsb(eq_)   ; =     1
019D   45                     DB   lsb(gt_)   ; >     1
019E   16                     DB   lsb(question_)   ; ?     1
019F   E9                     DB   lsb(at_)   ; @     2
01A0   F4                     DB   lsb(upcase_)   ; A     1
01A1   F4                     DB   lsb(upcase_)   ; B
01A2   F4                     DB   lsb(upcase_)   ; C
01A3   F4                     DB   lsb(upcase_)   ; D
01A4   F4                     DB   lsb(upcase_)   ; E
01A5   F4                     DB   lsb(upcase_)   ; F
01A6   F4                     DB   lsb(upcase_)   ; G
01A7   F4                     DB   lsb(upcase_)   ; h
01A8   F4                     DB   lsb(upcase_)   ; I
01A9   F4                     DB   lsb(upcase_)   ; J
01AA   F4                     DB   lsb(upcase_)   ; K
01AB   F4                     DB   lsb(upcase_)   ; L
01AC   F4                     DB   lsb(upcase_)   ; M
01AD   F4                     DB   lsb(upcase_)   ; N
01AE   F4                     DB   lsb(upcase_)   ; O
01AF   F4                     DB   lsb(upcase_)   ; p
01B0   F4                     DB   lsb(upcase_)   ; Q
01B1   F4                     DB   lsb(upcase_)   ; R
01B2   F4                     DB   lsb(upcase_)   ; S
01B3   F4                     DB   lsb(upcase_)   ; T
01B4   F4                     DB   lsb(upcase_)   ; U
01B5   F4                     DB   lsb(upcase_)   ; V
01B6   F4                     DB   lsb(upcase_)   ; W
01B7   F4                     DB   lsb(upcase_)   ; X
01B8   F4                     DB   lsb(upcase_)   ; Y
01B9   F4                     DB   lsb(upcase_)   ; Z
01BA   12                     DB   lsb(lbrack_)   ; [     2
01BB   2E                     DB   lsb(backslash_)   ; \     2
01BC   4F                     DB   lsb(rbrack_)   ; ]     2
01BD   9F                     DB   lsb(caret_)   ; ^     1
01BE   E1                     DB   lsb(underscore_)   ; _     2
01BF   B5                     DB   lsb(grave_)   ; `     2   	
01C0   00                     DB   lsb(lowcase_)   ; a     1
01C1   00                     DB   lsb(lowcase_)   ; b
01C2   00                     DB   lsb(lowcase_)   ; c
01C3   00                     DB   lsb(lowcase_)   ; d
01C4   00                     DB   lsb(lowcase_)   ; e
01C5   00                     DB   lsb(lowcase_)   ; f
01C6   00                     DB   lsb(lowcase_)   ; g
01C7   00                     DB   lsb(lowcase_)   ; h
01C8   00                     DB   lsb(lowcase_)   ; i
01C9   00                     DB   lsb(lowcase_)   ; j
01CA   00                     DB   lsb(lowcase_)   ; k
01CB   00                     DB   lsb(lowcase_)   ; l
01CC   00                     DB   lsb(lowcase_)   ; m
01CD   00                     DB   lsb(lowcase_)   ; n
01CE   00                     DB   lsb(lowcase_)   ; o
01CF   00                     DB   lsb(lowcase_)   ; p
01D0   00                     DB   lsb(lowcase_)   ; q
01D1   00                     DB   lsb(lowcase_)   ; r
01D2   00                     DB   lsb(lowcase_)   ; s
01D3   00                     DB   lsb(lowcase_)   ; t
01D4   00                     DB   lsb(lowcase_)   ; u
01D5   00                     DB   lsb(lowcase_)   ; v
01D6   00                     DB   lsb(lowcase_)   ; w
01D7   00                     DB   lsb(lowcase_)   ; x
01D8   00                     DB   lsb(lowcase_)   ; y
01D9   00                     DB   lsb(lowcase_)   ; z
01DA   CB                     DB   lsb(lbrace_)   ; {     1
01DB   D0                     DB   lsb(pipe_)   ; |     1
01DC   DB                     DB   lsb(rbrace_)   ; }     1
01DD   DE                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
01E0   00 22                  DW   BUFFER   ; vBufPtr pointer into BUF
01E2   73 10                  DW   next   ; nNext
01E4   21 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
01E6   00 00                  DW   0   ; vDefine
01E8   00 00                  DW   0   ; vRecur
01EA   02                     DB   2   ; vDataWidth in bytes of array operations (default 1 byte)
01EB   0A                     DB   10   ; vNumBase = 10
01EC   00                     DB   0   ; vStrMode
01ED   24                     DB   "$"   ; vHexPrefix
01EE   00                     DB   0   
01EF   00                     DB   0   
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                COLON_:      
0204   C3 19 0B               JP   colon   
0207                COMMA_:      
0207   C3 A6 0A               JP   comma   
020A                DOLLAR_:      
020A   C3 4D 0B               JP   dollar   
020D                DQUOTE_:      
020D                QUOTE_:      
020D   C3 77 0B               JP   quote   
0210                DOT_:        
0210   C3 00 04               JP   dot   
0213                PERCENT_:      
0213   C3 91 0B               JP   percent   
0216                QUESTION_:      
0216   C3 6A 0B               JP   question   
0219                LPAREN_:      
0219   C3 CB 03               JP   lbrace   
021C                SLASH_:      
021C   C3 00 05               JP   slash   
021F                NUM_:        
021F   C3 C6 0B               JP   num   
0222                SEMICOLON_:      
0222   C3 2F 0B               JP   semicolon   
0225                BANG_:       
0225                BANG:        ; logical invert, any non zero value
0225   03                     INC   bc   
0226   0A                     LD   a,(bc)   
0227   FE 3D                  CP   "="   
0229   20 05                  JR   nz,not   
022B   E1                     POP   hl   
022C   D1                     POP   de   
022D   C3 08 0D               JP   notequals   
0230                NOT:         
0230   0B                     DEC   bc   
0231   21 00 00               LD   hl,0   ; is considered true
0234   18 0B                  JR   eq1   
0236                EQ_:         
0236                EQ:          
0236   03                     INC   bc   
0237   0A                     LD   a,(bc)   
0238   FE 3D                  CP   "="   
023A   28 04                  JR   z,eq0   
023C   0B                     DEC   bc   
023D   C3 F0 0C               JP   assign   
0240                EQ0:         
0240   E1                     POP   hl   
0241                EQ1:         
0241   D1                     POP   de   
0242   C3 01 0D               JP   equals   
0245                GT_:         
0245                GT:          
0245   03                     INC   bc   
0246   0A                     LD   a,(bc)   
0247   FE 3E                  CP   ">"   
0249   CA 68 0D               JP   z,shiftRight   
024C   D1                     POP   de   
024D   E1                     POP   hl   
024E   18 09                  JR   lt1   
0250                LT_:         
0250                LT:          
0250   03                     INC   bc   
0251   0A                     LD   a,(bc)   
0252   FE 3C                  CP   "<"   
0254   CA 4C 0D               JP   z,shiftLeft   
0257   E1                     POP   hl   
0258   D1                     POP   de   
0259                LT1:         
0259   FE 3D                  CP   "="   
025B   CA 0F 0D               JP   z,lessthaneq   
025E   0B                     DEC   bc   
025F   C3 14 0D               JP   lessthan   
0262                             ; index of an array, based on vDataWidth 22
0262                             ; array* num -- value    ; also sets vPointer to address
0262                HASH_:       
0262                HASH:        
0262                ARRAYINDEX:      
0262   E1                     POP   hl   ; hl = index
0263   D1                     POP   de   ; de = array
0264   3A F1 23               LD   a,(vDataWidth)   ; a = data width
0267   3D                     DEC   a   
0268   28 01                  JR   z,arrayIndex1   
026A                ARRAYINDEX0:      
026A   29                     ADD   hl,hl   ; if data width = 2 then double
026B                ARRAYINDEX1:      
026B   19                     ADD   hl,de   ; add addr
026C   22 F7 23               LD   (vPointer),hl   ; store address in setter
026F   16 00                  LD   d,0   
0271   5E                     LD   e,(hl)   
0272   B7                     OR   a   ; check data width again
0273   28 02                  JR   z,arrayIndex2   
0275   23                     INC   hl   
0276   56                     LD   d,(hl)   
0277                ARRAYINDEX2:      
0277   D5                     PUSH   de   
0278   DD E9                  JP   (ix)   
027A                             ;                               4
027A                RPAREN_:      
027A                             ; jp rparen
027A                RPAREN:      
027A   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
027D   FD 46 09               LD   b,(iy+9)   
0280   DD E9                  JP   (ix)   
0282                             ; & and                          14
0282                             ; a b -- c
0282                AMPER_:      
0282                AMPER:       
0282                AND:         
0282   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0283   E1                     POP   hl   
0284   7B                     LD   a,e   
0285   A5                     AND   l   
0286   6F                     LD   l,a   
0287   7A                     LD   a,d   
0288   A4                     AND   h   
0289   67                     LD   h,a   
028A   18 5B                  JR   add3   
028C                             ; - sub
028C                             ; a b -- c
028C                             ; -- sub
028C                             ; b1 -- b2
028C                             ; -= sub
028C                             ; a b1 -- b2
028C                MINUS_:      
028C                MINUS:       
028C   03                     INC   bc   ; check if sign of a number
028D   0A                     LD   a,(bc)   
028E   0B                     DEC   bc   
028F   FE 30                  CP   "0"   
0291   38 05                  JR   c,sub   
0293   FE 3A                  CP   "9"+1   
0295   DA C6 0B               JP   c,num   
0298                SUB:         ; Subtract the value 2nd on stack from top of stack
0298   E1                     POP   hl   ; hl = arg_b
0299   03                     INC   bc   
029A   FE 2D                  CP   "-"   
029C   20 04                  JR   nz,sub1   
029E   2B                     DEC   hl   ; --
029F   C3 F2 0C               JP   assign0   
02A2                SUB1:        
02A2   D1                     POP   de   ; de = arg_a
02A3   FE 3D                  CP   "="   
02A5   28 02                  JR   z,sub2   
02A7   0B                     DEC   bc   ; -
02A8   EB                     EX   de,hl   
02A9                SUB2:        
02A9   B7                     OR   a   ; -=
02AA   ED 52                  SBC   hl,de   
02AC                SUB3:        
02AC   FE 3D                  CP   "="   
02AE   CA F2 0C               JP   z,assign0   
02B1   E5                     PUSH   hl   
02B2   DD E9                  JP   (ix)   
02B4                STAR_:       ; 21
02B4                STAR:        
02B4   03                     INC   bc   ; check for ** spread
02B5   0A                     LD   a,(bc)   
02B6   FE 2A                  CP   "*"   
02B8   CA 28 0D               JP   z,spread   
02BB   0B                     DEC   bc   
02BC                MUL:         
02BC   D1                     POP   de   ; get first value
02BD   E1                     POP   hl   
02BE                MUL2:        
02BE   C5                     PUSH   bc   ; Preserve the IP
02BF   44 4D                  LD   bc,hl   ; bc = 2nd value
02C1   21 00 00               LD   hl,0   
02C4   3E 10                  LD   a,16   
02C6                MUL3:        
02C6   29                     ADD   hl,hl   
02C7   CB 13                  RL   e   
02C9   CB 12                  RL   d   
02CB   30 04                  JR   nc,$+6   
02CD   09                     ADD   hl,bc   
02CE   30 01                  JR   nc,$+3   
02D0   13                     INC   de   
02D1   3D                     DEC   a   
02D2   20 F2                  JR   nz,mul3   
02D4   C1                     POP   bc   ; Restore the IP
02D5   C3 E7 02               JP   add3   
02D8                             ; + add                         25
02D8                             ; a b -- c
02D8                PLUS_:       
02D8                PLUS:        
02D8                ADD:         
02D8   03                     INC   bc   
02D9   0A                     LD   a,(bc)   
02DA   FE 2B                  CP   "+"   ; ++ increment variable
02DC   20 05                  JR   nz,add1   
02DE   E1                     POP   hl   
02DF   23                     INC   hl   
02E0   C3 F2 0C               JP   assign0   
02E3                ADD1:        
02E3   0B                     DEC   bc   
02E4   D1                     POP   de   ; second term
02E5   E1                     POP   hl   ; first term
02E6   19                     ADD   hl,de   
02E7                ADD3:        
02E7   03                     INC   bc   
02E8   0A                     LD   a,(bc)   
02E9   FE 3D                  CP   "="   
02EB   28 04                  JR   z,add4   
02ED   0B                     DEC   bc   
02EE   E5                     PUSH   hl   
02EF   DD E9                  JP   (ix)   
02F1                ADD4:        
02F1   C3 F2 0C               JP   assign0   
02F4                             ;                               18
02F4                UPCASE_:      
02F4                UPCASE:      
02F4   0A                     LD   a,(bc)   ; a = identifier char
02F5   D6 41                  SUB   "A"   ; "A" = 0
02F7   18 0C                  JR   ident1   
02F9                             ;********************** PAGE 2 END *********************************************
02F9                          ALIGN   $100   
0300                             ;********************** PAGE 3 BEGIN *********************************************
0300                LOWCASE_:      
0300                LOWCASE:      
0300   0A                     LD   a,(bc)   
0301   D6 61                  SUB   "a"   
0303   C6 1A                  ADD   a,26   
0305                IDENT1:      
0305   87                     ADD   a,a   ; l = a * 2
0306   6F                     LD   l,a   
0307   26 23                  LD   h,msb(vars)   
0309   22 F7 23               LD   (vPointer),hl   ; store address in setter
030C   5E                     LD   e,(hl)   
030D   23                     INC   hl   
030E   56                     LD   d,(hl)   
030F   D5                     PUSH   de   
0310   DD E9                  JP   (ix)   
0312                             ; [                             14
0312                LBRACK_:      
0312                LBRACK:      
0312                ARRAYSTART:      
0312   11 00 00               LD   de,0   ; create stack frame
0315   D5                     PUSH   de   ; push null for IP
0316   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0319   FD 56 05               LD   d,(iy+5)   ; 
031C   D5                     PUSH   de   ; 
031D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0320   FD 56 03               LD   d,(iy+3)   ; 
0323   D5                     PUSH   de   ; 
0324   FD E5                  PUSH   iy   ; push BP
0326   FD 21 00 00            LD   iy,0   ; BP = SP
032A   FD 39                  ADD   iy,sp   
032C   DD E9                  JP   (ix)   
032E                             ; \                             19
032E                BACKSLASH_:      
032E                BACKSLASH:      
032E                LAMBDA:      
032E   DD E5                  PUSH   ix   
0330   CD BA 0D               CALL   parseArgs   
0333                LAMBDA1:      
0333   03                     INC   bc   ; arg_list must ve immediately followed by {
0334   0A                     LD   a,(bc)   
0335   FE 21                  CP   " "+1   ; skip white space
0337   38 FA                  JR   c,lambda1   
0339   FE 7B                  CP   "{"   
033B   28 06                  JR   z,lambda2   
033D   21 02 00               LD   hl,2   ; error 2: parse error
0340   C3 97 10               JP   error   
0343                LAMBDA2:      
0343   CD F0 0D               CALL   parseBlock   
0346   CD 5A 0E               CALL   createFunc   
0349   E1                     POP   hl   
034A   DD E1                  POP   ix   
034C   E5                     PUSH   hl   
034D   DD E9                  JP   (ix)   
034F                RBRACK_:      
034F                RBRACK:      
034F                ARRAYEND:      ; 53
034F   FD 54                  LD   d,iyh   ; de = BP
0351   FD 5D                  LD   e,iyl   
0353   ED 43 03 24            LD   (vTemp1),bc   ; save IP
0357   62 6B                  LD   hl,de   ; hl = de = BP
0359   B7                     OR   a   
035A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
035C   CB 3C                  SRL   h   ; 
035E   CB 1D                  RR   l   
0360   44 4D                  LD   bc,hl   ; bc = count
0362   2A EC 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
0365   71                     LD   (hl),c   ; write num items in length word
0366   23                     INC   hl   
0367   70                     LD   (hl),b   
0368   23                     INC   hl   ; hl = array[0], bc = count
0369                             ; de = BP, hl = array[0], bc = count
0369   18 15                  JR   arrayEnd3   
036B                ARRAYEND1:      
036B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
036E   77                     LD   (hl),a   ; write lsb of array item
036F   23                     INC   hl   ; move to msb of array item
0370   3A F1 23               LD   a,(vDataWidth)   ; vDataWidth=1?
0373   3D                     DEC   a   
0374   28 05                  JR   z,arrayEnd2   
0376   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0379   77                     LD   (hl),a   ; write msb of array item
037A   23                     INC   hl   ; move to next word in array
037B                ARRAYEND2:      
037B   FD 2B                  DEC   iy   ; move to next word on stack
037D   FD 2B                  DEC   iy   
037F   0B                     DEC   bc   ; dec items count
0380                ARRAYEND3:      
0380   79                     LD   a,c   ; if not zero loop
0381   B0                     OR   b   
0382   20 E7                  JR   nz,arrayEnd1   
0384   EB                     EX   de,hl   ; de = end of array, hl = BP
0385   F9                     LD   sp,hl   ; sp = BP
0386   E1                     POP   hl   ; de = end of array, hl = old BP
0387   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0388   FD 62                  LD   iyh,d   
038A   FD 6B                  LD   iyl,e   
038C   D1                     POP   de   ; pop arg_list (discard)
038D   D1                     POP   de   ; pop first_arg* (discard)
038E   D1                     POP   de   ; pop IP (discard)
038F   ED 5B EC 23            LD   de,(vHeapPtr)   ; de = array[-2]
0393   13                     INC   de   
0394   13                     INC   de   
0395   D5                     PUSH   de   ; return array[0]
0396   22 EC 23               LD   (vHeapPtr),hl   ; move heap* to end of array
0399   ED 4B 03 24            LD   bc,(vTemp1)   ; restore IP
039D   DD E9                  JP   (ix)   
039F                CARET_:      
039F                             ; execute a block of code which ends with } 116
039F                             ; creates a root scope if BP == stack
039F                             ; else uses outer scope
039F                CARET:       
039F                GO:          
039F   D1                     POP   de   ; de = block*
03A0                GO1:         
03A0   7B                     LD   a,e   ; if block* == null, exit
03A1   B2                     OR   d   
03A2   20 02                  JR   nz,go2   
03A4   DD E9                  JP   (ix)   
03A6                GO2:         
03A6   1A                     LD   a,(de)   
03A7   FE 7B                  CP   "{"   
03A9   CA 63 0C               JP   z,goBlock   
03AC   FE 28                  CP   "("   
03AE   C2 96 0C               JP   nz,goFunc   
03B1   D5                     PUSH   de   ; push de just before stack frame
03B2   CA 63 0C               JP   z,goBlock   
03B5                GRAVE_:      
03B5                GRAVE:       
03B5                PRINTLITERAL:      
03B5   03                     INC   bc   ; move to first char
03B6   ED 5B E8 23            LD   de,(vBufPtr)   ; de = buffer*
03BA   18 03                  JR   printLiteral1   
03BC                PRINTLITERAL0:      
03BC   12                     LD   (de),a   ; a -> buffer*
03BD   13                     INC   de   ; string*++,
03BE   03                     INC   bc   
03BF                PRINTLITERAL1:      
03BF   0A                     LD   a,(bc)   ; a <- string*
03C0   FE 60                  CP   "`"   ; if ` exit loop
03C2   20 F8                  JR   nz,printLiteral0   
03C4   ED 53 E8 23            LD   (vBufPtr),de   ; save buffer*' in pointer
03C8   C3 A0 0D               JP   dotNext   
03CB                LBRACE_:      
03CB                LBRACE:      
03CB   CD F0 0D               CALL   parseBlock   
03CE   DD E9                  JP   (ix)   
03D0                             ; | or                          11
03D0                             ; a b -- c
03D0                PIPE_:       
03D0                PIPE:        
03D0                OR:          
03D0   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03D1   E1                     POP   hl   
03D2   7B                     LD   a,e   
03D3   B5                     OR   l   
03D4   6F                     LD   l,a   
03D5   7A                     LD   a,d   
03D6   B4                     OR   h   
03D7   67                     LD   h,a   
03D8   C3 E7 02               JP   add3   
03DB                RBRACE_:      
03DB   C3 F6 0B               JP   rbrace   
03DE                             ; ~ char                        8
03DE                TILDE_:      
03DE   C3 43 0B               JP   tilde   
03E1                UNDERSCORE_:      
03E1                CHAR:        
03E1   03                     INC   bc   ; point to next char
03E2   0A                     LD   a,(bc)   
03E3   6F                     LD   l,a   
03E4   26 00                  LD   h,0   
03E6   E5                     PUSH   hl   
03E7   DD E9                  JP   (ix)   
03E9                AT_:         
03E9                AT:          
03E9                ADDR:        
03E9   ED 5B F7 23            LD   de,(vPointer)   
03ED   21 F7 23               LD   hl,vPointer   
03F0   C3 3C 07               JP   variable   
03F3                             ;********************** PAGE 3 END *********************************************
03F3                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   CD 12 0F               CALL   commandTable   
0403   61                     DB   "a"   ; .a print array
0404   5E 0A                  DW   printArray   
0406   63                     DB   "c"   ; .c print char
0407   0F 04                  DW   printChar   
0409   73                     DB   "s"   ; .s print string
040A   1E 04                  DW   printString   
040C   00                     DB   NUL   ; .  print number, fall through
040D   33 04                  DW   printNumber   
040F                             ; .c print char
040F                             ; char --
040F                PRINTCHAR:      
040F   E1                     POP   hl   ; a = char
0410   7D                     LD   a,l   
0411   ED 5B E8 23            LD   de,(vBufPtr)   ; de = buffer*
0415   12                     LD   (de),a   
0416   13                     INC   de   
0417   ED 53 E8 23            LD   (vBufPtr),de   ; save buffer*'
041B   C3 A0 0D               JP   dotNext   
041E                             ; .s print string
041E                             ; string* --
041E                PRINTSTRING:      
041E   E1                     POP   hl   ; hl = string*
041F   ED 5B E8 23            LD   de,(vBufPtr)   ; de = buffer*
0423   18 03                  JR   printString1   
0425                PRINTSTRING0:      
0425   12                     LD   (de),a   ; a -> buffer*
0426   13                     INC   de   ; string*++,
0427   23                     INC   hl   
0428                PRINTSTRING1:      
0428   7E                     LD   a,(hl)   ; a <- string*
0429   B7                     OR   a   ; if NUL exit loop
042A   20 F9                  JR   nz,printString0   
042C   ED 53 E8 23            LD   (vBufPtr),de   ; save buffer*' in pointer
0430   C3 A0 0D               JP   dotNext   
0433                             ; . print decimal
0433                             ; value --
0433                PRINTNUMBER:      
0433   3A F2 23               LD   a,(vNumBase)   
0436   FE 10                  CP   16   
0438   CA A4 04               JP   z,printHex   ; else falls through
043B   C3 3E 04               JP   printDec   
043E                             ; print decimal                 ; 70
043E                             ; value --
043E                PRINTDEC:      
043E   ED 5B E8 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0442   D9                     EXX      
0443   E1                     POP   hl   ; hl = value
0444   3A F1 23               LD   a,(vDataWidth)   
0447   3D                     DEC   a   
0448   20 02                  JR   nz,printDec1   
044A   26 00                  LD   h,0   
044C                PRINTDEC1:      
044C   CD 5B 04               CALL   printDec2   
044F   D9                     EXX      ; de = buffer*' bc = IP
0450   3E 20                  LD   a," "   ; append space to buffer
0452   12                     LD   (de),a   
0453   13                     INC   de   ; string*++,
0454   ED 53 E8 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
0458   C3 A0 0D               JP   dotNext   
045B                             ; hl = value
045B                             ; de' = buffer*
045B                             ; a, bc, de, hl destroyed
045B                PRINTDEC2:      
045B   CB 7C                  BIT   7,h   
045D   28 0C                  JR   z,printDec3   
045F   D9                     EXX      
0460   3E 2D                  LD   a,"-"   
0462   12                     LD   (de),a   
0463   13                     INC   de   
0464   D9                     EXX      
0465   AF                     XOR   a   
0466   95                     SUB   l   
0467   6F                     LD   l,a   
0468   9F                     SBC   a,a   
0469   94                     SUB   h   
046A   67                     LD   h,a   
046B                PRINTDEC3:      
046B   0E 00                  LD   c,0   ; leading zeros flag = false
046D   11 F0 D8               LD   de,-10000   
0470   CD 8B 04               CALL   printDec4   
0473   11 18 FC               LD   de,-1000   
0476   CD 8B 04               CALL   printDec4   
0479   11 9C FF               LD   de,-100   
047C   CD 8B 04               CALL   printDec4   
047F   1E F6                  LD   e,-10   
0481   CD 8B 04               CALL   printDec4   
0484   0C                     INC   c   ; flag = true for at least digit
0485   1E FF                  LD   e,-1   
0487   CD 8B 04               CALL   printDec4   
048A   C9                     RET      
048B                PRINTDEC4:      
048B   06 2F                  LD   b,"0"-1   
048D                PRINTDEC5:      
048D   04                     INC   b   
048E   19                     ADD   hl,de   
048F   38 FC                  JR   c,printDec5   
0491   ED 52                  SBC   hl,de   
0493   3E 30                  LD   a,"0"   
0495   B8                     CP   b   
0496   20 05                  JR   nz,printDec6   
0498   AF                     XOR   a   
0499   B1                     OR   c   
049A   C8                     RET   z   
049B   18 01                  JR   printDec7   
049D                PRINTDEC6:      
049D   0C                     INC   c   
049E                PRINTDEC7:      
049E   78                     LD   a,b   
049F   D9                     EXX      
04A0   12                     LD   (de),a   
04A1   13                     INC   de   
04A2   D9                     EXX      
04A3   C9                     RET      
04A4                             ; buffer hex                    37
04A4                             ; value --
04A4                PRINTHEX:      
04A4   ED 5B E8 23            LD   de,(vBufPtr)   
04A8   3A F4 23               LD   a,(vHexPrefix)   ; "$"
04AB   B7                     OR   a   ; skip if null
04AC   28 02                  JR   z,printHex1   
04AE   12                     LD   (de),a   
04AF   13                     INC   de   ; string*++,
04B0                PRINTHEX1:      
04B0   E1                     POP   hl   ; hl = value
04B1   3A F1 23               LD   a,(vDataWidth)   
04B4   3D                     DEC   a   
04B5   28 04                  JR   z,printHex2   
04B7   7C                     LD   a,h   
04B8   CD CA 04               CALL   printHex3   
04BB                PRINTHEX2:      
04BB   7D                     LD   a,l   
04BC   CD CA 04               CALL   printHex3   
04BF   3E 20                  LD   a," "   ; append space to buffer
04C1   12                     LD   (de),a   
04C2   13                     INC   de   ; string*++,
04C3   ED 53 E8 23            LD   (vBufPtr),de   
04C7   C3 A0 0D               JP   dotNext   
04CA                PRINTHEX3:      
04CA   F5                     PUSH   af   
04CB   1F                     RRA      
04CC   1F                     RRA      
04CD   1F                     RRA      
04CE   1F                     RRA      
04CF   CD D3 04               CALL   printHex4   
04D2   F1                     POP   af   
04D3                PRINTHEX4:      
04D3   E6 0F                  AND   0x0F   
04D5   C6 90                  ADD   a,0x90   
04D7   27                     DAA      
04D8   CE 40                  ADC   a,0x40   
04DA   27                     DAA      
04DB   12                     LD   (de),a   
04DC   13                     INC   de   ; string*++,
04DD   C9                     RET      
04DE                             ;********************** PAGE 4 END *********************************************
04DE                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA 58 06               JP   z,comment   
0507   0B                     DEC   bc   
0508   CD FC 0E               CALL   lowerCaseTable   
050B   26                     DB   lsb(command_a_)   
050C   38                     DB   lsb(command_b_)   
050D   C8                     DB   lsb(command_nop_)   
050E   44                     DB   lsb(command_d_)   
050F   C8                     DB   lsb(command_nop_)   
0510   4A                     DB   lsb(command_f_)   
0511   C8                     DB   lsb(command_nop_)   
0512   65                     DB   lsb(command_h_)   
0513   6E                     DB   lsb(command_i_)   
0514   C8                     DB   lsb(command_nop_)   
0515   C8                     DB   lsb(command_nop_)   
0516   C8                     DB   lsb(command_nop_)   
0517   74                     DB   lsb(command_m_)   
0518   C8                     DB   lsb(command_nop_)   
0519   7A                     DB   lsb(output_)   
051A   7D                     DB   lsb(command_p_)   
051B   80                     DB   lsb(command_q_)   
051C   86                     DB   lsb(command_r_)   
051D   92                     DB   lsb(command_s_)   
051E   A7                     DB   lsb(true_)   
051F   C8                     DB   lsb(command_nop_)   
0520   AA                     DB   lsb(command_v_)   
0521   BF                     DB   lsb(command_w_)   
0522   C5                     DB   lsb(xor_)   
0523   C8                     DB   lsb(command_nop_)   
0524   C8                     DB   lsb(command_nop_)   
0525   CB                     DB   lsb(command_default_)   
0526                             ; 12
0526                COMMAND_A_:      
0526   62                     DB   "b"   ; /ab absolute
0527   EB 05                  DW   absolute   
0529   64                     DB   "d"   ; /ad address of
052A   F9 05                  DW   addrOf   
052C   69                     DB   "i"   ; /ad address of
052D   E4 07                  DW   arrayIter   
052F   6C                     DB   "l"   ; /al array length
0530   1A 06                  DW   arrayLength   
0532   73                     DB   "s"   ; /as array size
0533   23 06                  DW   arraySize   
0535   00                     DB   NUL   
0536   87 06                  DW   error1   
0538                COMMAND_B_:      
0538   62                     DB   "b"   ; /bb bye bye cold boot
0539   E8 0F                  DW   coldStart   
053B   6D                     DB   "m"   ; /bm byte mode
053C   51 06                  DW   byteMode   
053E   72                     DB   "r"   ; /br break from loop
053F   37 06                  DW   break   
0541   00                     DB   NUL   
0542   87 06                  DW   error1   
0544                COMMAND_D_:      
0544   63                     DB   "c"   ; /dc decimal
0545   73 06                  DW   decBase   
0547   00                     DB   NUL   
0548   73 06                  DW   decBase   ; /d decimal
054A                COMMAND_F_:      
054A   64                     DB   "d"   ; /fd fold
054B   89 09                  DW   fold   
054D   65                     DB   "e"   ; /fe forEach
054E   DA 09                  DW   forEach   
0550   73                     DB   "s"   ; /fs funcSrc
0551   25 0A                  DW   funcSrc   
0553   74                     DB   "t"   ; /ft filter
0554   2C 09                  DW   filter   
0556   31                     DB   "1"   
0557   D9 10                  DW   f1   
0559   32                     DB   "2"   
055A   D9 10                  DW   f2   
055C   33                     DB   "3"   
055D   D9 10                  DW   f3   
055F   34                     DB   "4"   
0560   D9 10                  DW   f4   
0562   00                     DB   NUL   
0563   22 0D                  DW   false1   
0565                COMMAND_H_:      
0565   70                     DB   "p"   ; /hp hex prefix
0566   7F 06                  DW   hexPrefix   
0568   78                     DB   "x"   ; /hx hex
0569   7A 06                  DW   hexBase   
056B   00                     DB   NUL   
056C   87 06                  DW   error1   
056E                             ; 6
056E                COMMAND_I_:      
056E   6E                     DB   "n"   ; /in input
056F   8D 06                  DW   input   
0571   00                     DB   NUL   
0572   87 06                  DW   error1   
0574                COMMAND_M_:      
0574   70                     DB   "p"   ; /mp map
0575   EB 08                  DW   map   
0577   00                     DB   NUL   
0578   87 06                  DW   error1   
057A                OUTPUT_:      
057A   00                     DB   NUL   
057B   98 06                  DW   output   
057D                             ; 4
057D                COMMAND_P_:      
057D   00                     DB   NUL   
057E   87 06                  DW   error1   
0580                             ; 6
0580                COMMAND_Q_:      
0580   74                     DB   "t"   ; /qt quit
0581   A1 06                  DW   quit   
0583   00                     DB   NUL   
0584   87 06                  DW   error1   
0586                COMMAND_R_:      
0586   63                     DB   "c"   ; /rc tail call optimisation
0587   AB 06                  DW   recur   
0589   65                     DB   "e"   ; /re remainder
058A   B1 06                  DW   remain   
058C   67                     DB   "g"   ; /rg range src
058D   52 07                  DW   rangeSrc   
058F   00                     DB   NUL   
0590   87 06                  DW   error1   
0592                COMMAND_S_:      
0592   62                     DB   "b"   
0593   B7 06                  DW   stringBegin   
0595   63                     DB   "c"   
0596   09 07                  DW   stringCompare   
0598   65                     DB   "e"   
0599   BF 06                  DW   stringEnd   
059B   69                     DB   "i"   
059C   64 08                  DW   stringIter   
059E   6C                     DB   "l"   
059F   EE 06                  DW   stringLength   
05A1   73                     DB   "s"   
05A2   FD 06                  DW   stringSize   
05A4   00                     DB   NUL   
05A5   87 06                  DW   error1   
05A7                TRUE_:       
05A7   00                     DB   NUL   
05A8   1C 0D                  DW   true1   
05AA                COMMAND_V_:      
05AA   62                     DB   "b"   
05AB   21 07                  DW   varBufPtr   
05AD   68                     DB   "h"   
05AE   2A 07                  DW   varHeapPtr   
05B0   74                     DB   "t"   
05B1   33 07                  DW   varTIBPtr   
05B3   42                     DB   "B"   
05B4   6D 06                  DW   constBufStart   
05B6   48                     DB   "H"   
05B7   61 06                  DW   constHeapStart   
05B9   54                     DB   "T"   
05BA   67 06                  DW   constTIBStart   
05BC   00                     DB   NUL   
05BD   87 06                  DW   error1   
05BF                COMMAND_W_:      
05BF   6D                     DB   "m"   ; /wm word mode
05C0   42 07                  DW   wordMode   
05C2   00                     DB   NUL   
05C3   87 06                  DW   error1   
05C5                XOR_:        
05C5   00                     DB   NUL   
05C6   47 07                  DW   xor   
05C8                             ; 2
05C8                COMMAND_NOP_:      
05C8   00                     DB   NUL   
05C9   CE 05                  DW   nop   
05CB                             ; 3
05CB                COMMAND_DEFAULT_:      
05CB   00                     DB   NUL   
05CC   D0 05                  DW   div   
05CE                             ;********************** PAGE 5 END *********************************************
05CE                NOP:         
05CE   DD E9                  JP   (ix)   
05D0                             ;                               32
05D0                DIV:         
05D0   E1                     POP   hl   ; hl = arg_b
05D1   D1                     POP   de   ; de = arg_a
05D2   03                     INC   bc   
05D3   0A                     LD   a,(bc)   
05D4   FE 3D                  CP   "="   
05D6   28 02                  JR   z,div2   
05D8   0B                     DEC   bc   ; /
05D9   EB                     EX   de,hl   
05DA                DIV2:        
05DA   F5                     PUSH   af   ; preserve af, bc
05DB   C5                     PUSH   bc   
05DC   44 4D                  LD   bc,hl   
05DE   CD 87 0D               CALL   divide   
05E1   EB                     EX   de,hl   
05E2   ED 53 F9 23            LD   (vRemain),de   
05E6   C1                     POP   bc   ; restore
05E7   F1                     POP   af   
05E8   C3 AC 02               JP   sub3   
05EB                             ; /ab absolute
05EB                             ; num -- num
05EB                ABSOLUTE:      
05EB   E1                     POP   hl   
05EC   CB 7C                  BIT   7,h   
05EE   28 06                  JR   z,absolute1   
05F0   AF                     XOR   a   
05F1   95                     SUB   l   
05F2   6F                     LD   l,a   
05F3   9F                     SBC   a,a   
05F4   94                     SUB   h   
05F5   67                     LD   h,a   
05F6                ABSOLUTE1:      
05F6   E5                     PUSH   hl   
05F7   DD E9                  JP   (ix)   
05F9                             ; /ad addrOf                    24
05F9                             ; char -- addr
05F9                ADDROF:      
05F9   E1                     POP   hl   ; a = char
05FA   7D                     LD   a,l   
05FB   FE 7B                  CP   "z"+1   ; if a > z then exit
05FD   30 19                  JR   nc,addrOf2   
05FF   D6 41                  SUB   "A"   ; a - 65
0601   38 15                  JR   c,addrOf2   ; if < A then exit
0603   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0605   38 06                  JR   c,addrOf1   
0607   D6 06                  SUB   "a"-("Z"+1)   
0609   FE 1A                  CP   "Z"-"A"+1   
060B   38 0B                  JR   c,addrOf2   ; if < a then exit
060D                ADDROF1:      
060D   87                     ADD   a,a   ; double a
060E   21 00 23               LD   hl,VARS   ; hl = VARS + a
0611   85                     ADD   a,l   
0612   6F                     LD   l,a   
0613   3E 00                  LD   a,0   
0615   8C                     ADC   a,h   
0616   67                     LD   h,a   
0617   E5                     PUSH   hl   
0618                ADDROF2:      
0618   DD E9                  JP   (ix)   
061A                             ; /al length of an array, num elements
061A                             ; array* -- num
061A                ARRAYLENGTH:      
061A   E1                     POP   hl   
061B   2B                     DEC   hl   ; msb size
061C   56                     LD   d,(hl)   
061D   2B                     DEC   hl   ; lsb size
061E   5E                     LD   e,(hl)   
061F   EB                     EX   de,hl   
0620                ARRAYLENGTH1:      
0620   E5                     PUSH   hl   
0621   DD E9                  JP   (ix)   
0623                             ; /as size in bytes of an array, based on current data width
0623                             ; array* -- num
0623                ARRAYSIZE:      
0623                          ;*Macro unroll:  PERFORM arrayLength
0623   DD 21 2A 06            LD   ix,performM_1502S1055   
0627   C3 1A 06               JP   arrayLength   
062A                PERFORMM_1502S1055:      
062A   E1                     POP   hl   
062B   3A F1 23               LD   a,(vDataWidth)   
062E   3D                     DEC   a   
062F   28 EF                  JR   z,arrayLength1   
0631   CB 3C                  SRL   h   
0633   CB 1D                  RR   l   
0635   18 E9                  JR   arrayLength1   
0637                             ; 13
0637                             ; /br break from loop
0637                             ; --
0637                BREAK:       
0637   E1                     POP   hl   ; hl = condition, break if false
0638   7D                     LD   a,l   
0639   B4                     OR   h   
063A   28 02                  JR   z,break1   
063C   DD E9                  JP   (ix)   
063E                BREAK1:      
063E   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0640   FD 54                  LD   d,iyh   
0642   21 08 00               LD   hl,8   
0645   19                     ADD   hl,de   
0646   23                     INC   hl   
0647   23                     INC   hl   
0648   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
064B   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
064E   C3 F6 0B               JP   blockEnd   
0651                             ; /b
0651                BYTEMODE:      
0651   3E 01                  LD   a,1   
0653                BYTEMODE1:      
0653   32 F1 23               LD   (vDataWidth),a   
0656   DD E9                  JP   (ix)   
0658                             ; //
0658                COMMENT:      
0658   03                     INC   bc   ; point to next char
0659   0A                     LD   a,(bc)   
065A   FE 20                  CP   " "   ; terminate on any char less than SP
065C   30 FA                  JR   nc,comment   
065E   0B                     DEC   bc   
065F   DD E9                  JP   (ix)   
0661                CONSTHEAPSTART:      
0661   11 21 24               LD   de,HEAP   
0664   C3 3F 07               JP   constant   
0667                CONSTTIBSTART:      
0667   11 00 21               LD   de,TIB   
066A   C3 3F 07               JP   constant   
066D                CONSTBUFSTART:      
066D   11 00 22               LD   de,BUFFER   
0670   C3 3F 07               JP   constant   
0673                DECBASE:      
0673   3E 0A                  LD   a,10   
0675                DECBASE1:      
0675   32 F2 23               LD   (vNumBase),a   
0678   DD E9                  JP   (ix)   
067A                HEXBASE:      
067A   3E 10                  LD   a,16   
067C   C3 75 06               JP   decBase1   
067F                HEXPREFIX:      
067F   E1                     POP   hl   
0680   7D                     LD   a,l   
0681   32 F4 23               LD   (vHexPrefix),a   
0684   C3 75 06               JP   decBase1   
0687                ERROR1:      
0687   21 01 00               LD   hl,1   ; error 1: unknown command
068A   C3 97 10               JP   error   
068D                             ; Z80 port input
068D                             ; port -- value
068D                INPUT:       
068D   E1                     POP   hl   
068E   59                     LD   e,c   ; save IP
068F   4D                     LD   c,l   
0690   ED 68                  IN   l,(c)   
0692   26 00                  LD   h,0   
0694   4B                     LD   c,e   ; restore IP
0695   E5                     PUSH   hl   
0696   DD E9                  JP   (ix)   
0698                             ; /o Z80 port output
0698                             ; value port --
0698                OUTPUT:      
0698   E1                     POP   hl   
0699   59                     LD   e,c   ; save IP
069A   4D                     LD   c,l   
069B   E1                     POP   hl   
069C   ED 69                  OUT   (c),l   
069E   4B                     LD   c,e   ; restore IP
069F   DD E9                  JP   (ix)   
06A1                             ; /qt
06A1                             ; bool --
06A1                QUIT:        
06A1   E1                     POP   hl   ; hl = condition, exit if true
06A2   7D                     LD   a,l   
06A3   B4                     OR   h   
06A4   20 02                  JR   nz,quit1   
06A6   DD E9                  JP   (ix)   
06A8                QUIT1:       
06A8   C3 F6 0B               JP   blockEnd   
06AB                RECUR:       
06AB   E1                     POP   hl   
06AC   22 EF 23               LD   (vRecur),hl   
06AF   DD E9                  JP   (ix)   
06B1                REMAIN:      
06B1   2A F9 23               LD   hl,(vRemain)   
06B4   E5                     PUSH   hl   
06B5   DD E9                  JP   (ix)   
06B7                STRINGBEGIN:      
06B7   21 FF FF               LD   hl,TRUE   ; string mode = true
06BA   22 F3 23               LD   (vStrMode),hl   
06BD   18 27                  JR   stringEnd1   ; save hl in vBufPtr
06BF                STRINGEND:      
06BF   21 00 00               LD   hl,FALSE   ; string mode = false
06C2   22 F3 23               LD   (vStrMode),hl   
06C5   2A E8 23               LD   hl,(vBufPtr)   ; append NUL to string
06C8   AF                     XOR   a   
06C9   77                     LD   (hl),a   
06CA   23                     INC   hl   ; hl = string_end*
06CB   ED 43 03 24            LD   (vTemp1),bc   ; save IP
06CF   11 00 22               LD   de,BUFFER   ; de = string*
06D2   B7                     OR   a   ; bc = size
06D3   ED 52                  SBC   hl,de   
06D5   44 4D                  LD   bc,hl   
06D7   2A EC 23               LD   hl,(vHeapPtr)   ; hl = hstring*
06DA   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
06DB   D5                     PUSH   de   ; return hstring*
06DC   ED B0                  LDIR      ; copy size bytes from string* to hstring*
06DE   ED 53 EC 23            LD   (vHeapPtr),de   ; bump heap to hstring* += size
06E2   ED 4B 03 24            LD   bc,(vTemp1)   ; restore IP
06E6                STRINGEND1:      
06E6   21 00 22               LD   hl,BUFFER   ; reset vBufPtr
06E9   22 E8 23               LD   (vBufPtr),hl   
06EC   DD E9                  JP   (ix)   
06EE                STRINGLENGTH:      
06EE   D1                     POP   de   
06EF   21 00 00               LD   hl,0   
06F2   18 02                  JR   stringLength2   
06F4                STRINGLENGTH1:      
06F4   13                     INC   de   
06F5   23                     INC   hl   
06F6                STRINGLENGTH2:      
06F6   1A                     LD   a,(de)   
06F7   B7                     OR   a   
06F8   20 FA                  JR   nz,stringLength1   
06FA                STRINGLENGTH3:      
06FA   E5                     PUSH   hl   
06FB   DD E9                  JP   (ix)   
06FD                STRINGSIZE:      
06FD                          ;*Macro unroll:  PERFORM stringLength
06FD   DD 21 04 07            LD   ix,performM_1648S1220   
0701   C3 EE 06               JP   stringLength   
0704                PERFORMM_1648S1220:      
0704   E1                     POP   hl   
0705   23                     INC   hl   
0706   C3 FA 06               JP   stringLength3   
0709                             ; /sc string compare
0709                             ; string1* string2* -- bool
0709                             ; Compares two null terminated strings.
0709                STRINGCOMPARE:      
0709   D1                     POP   de   
070A   E1                     POP   hl   
070B                STRINGCOMPARE1:      
070B   1A                     LD   a,(de)   
070C   BE                     CP   (hl)   
070D   20 07                  JR   nz,stringCompare2   
070F   B7                     OR   a   
0710   28 09                  JR   z,stringCompare3   
0712   13                     INC   de   
0713   23                     INC   hl   
0714   18 F5                  JR   stringCompare1   
0716                STRINGCOMPARE2:      
0716   21 00 00               LD   hl,FALSE   
0719   18 03                  JR   stringCompare4   
071B                STRINGCOMPARE3:      
071B   21 FF FF               LD   hl,TRUE   
071E                STRINGCOMPARE4:      
071E   E5                     PUSH   hl   
071F   DD E9                  JP   (ix)   
0721                VARBUFPTR:      
0721   ED 5B E8 23            LD   de,(vBufPtr)   
0725   21 E8 23               LD   hl,vBufPtr   
0728   18 12                  JR   variable   
072A                VARHEAPPTR:      
072A   ED 5B EC 23            LD   de,(vHeapPtr)   
072E   21 EC 23               LD   hl,vHeapPtr   
0731   18 09                  JR   variable   
0733                VARTIBPTR:      
0733   ED 5B E6 23            LD   de,(vTIBPtr)   
0737   21 E6 23               LD   hl,vTIBPtr   
073A   18 00                  JR   variable   
073C                VARIABLE:      
073C   22 F7 23               LD   (vPointer),hl   
073F                CONSTANT:      
073F   D5                     PUSH   de   
0740   DD E9                  JP   (ix)   
0742                             ; /wm
0742                WORDMODE:      
0742   3E 02                  LD   a,2   
0744   C3 53 06               JP   byteMode1   
0747                             ; /x
0747                XOR:         
0747   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0748                XOR1:        
0748   E1                     POP   hl   
0749   7B                     LD   a,e   
074A   AD                     XOR   l   
074B   6F                     LD   l,a   
074C   7A                     LD   a,d   
074D   AC                     XOR   h   
074E   67                     LD   h,a   
074F   C3 E7 02               JP   add3   
0752                             ;*******************************************************************
0752                             ; Monty implementations
0752                             ;*******************************************************************
0752                             ; /rg rangeSrc
0752                             ; begin end step -- src
0752                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
0752                RANGESRC:      ; range source: begin, end, step, local: L
0752   CD 9F 03               CALL   go   
0755   00 00                  DW   NUL   
0757   61 07                  DW   rangeSrcM_1713S1294   
0759   5B 07                  DW   $+2   
075B   01                     DB   1   
075C   04 62 65 73 4C         .PSTR   "besL"   
0761                RANGESRCM_1713S1294:      
0761   7B                     DB   "{"   ; init mutable L [index active inrange_test]
0762   5B 25 62 20 2F 74 20 25 73 30 3E 7B 7B 25 61 25 65 3C 7D 7D 7B 7B 25 61 25 65 3E 7D 7D 3F 5D 20 25 4C 3D 20 DB   "[%b /t %s0>{{%a%e<}}{{%a%e>}}?] %L= "   
0786   5C 6B 74 7B            DB   "\\kt{"   
078A   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0792   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
0798   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
07A0   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
07A8   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
07B2   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
07BA   25 4C 32 23 5E         DB   "%L2#^"   ; ifte: inrange_test?
07BF   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
07D3   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
07DA   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
07E1   7D                     DB   "}"   
07E2   7D                     DB   "}"   
07E3   00                     DB   0   
07E4                             ; /ai arrayIter
07E4                             ; array* -- src
07E4                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
07E4                ARRAYITER:      
07E4   CD 9F 03               CALL   go   
07E7   00 00                  DW   NUL   
07E9   F1 07                  DW   arrayIterM_1732S1314   
07EB   ED 07                  DW   $+2   
07ED   01                     DB   1   
07EE   02 61 4C               .PSTR   "aL"   
07F1                ARRAYITERM_1732S1314:      
07F1   7B                     DB   "{"   
07F2   5B 30 20 2F 74 20 25 61 2F 61 6C 5D 20 25 4C 3D DB   "[0 /t %a/al] %L="   ; init mutable L [index active size]
0802   5C 6B 74 7B            DB   "\\kt{"   
0806   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
080E   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
0814   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
081C   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
0824   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
082B   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0833   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
083C   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
0853   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
085A   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0861   7D                     DB   "}"   
0862   7D                     DB   "}"   
0863   00                     DB   0   
0864                             ; /si stringIter
0864                             ; string* -- src
0864                          ;*Macro unroll: FUNC stringIter, 1, "sL"
0864                STRINGITER:      
0864   CD 9F 03               CALL   go   
0867   00 00                  DW   NUL   
0869   71 08                  DW   stringIterM_1751S1334   
086B   6D 08                  DW   $+2   
086D   01                     DB   1   
086E   02 73 4C               .PSTR   "sL"   
0871                STRINGITERM_1751S1334:      
0871   7B                     DB   "{"   
0872   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
087C   5C 6B 74 7B            DB   "\\kt{"   
0880   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0888   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
088F   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0897   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
089F   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
08A6   2F 62 6D 20 25 73 25 69 23 20 2F 77 6D 20 25 63 3D DB   "/bm %s%i# /wm %c="   ; read byte at i, store in c as word
08B7   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
08BF   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
08C6   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
08DA   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: call sink note: /rc recur
08E1   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08E8   7D                     DB   "}"   
08E9   7D                     DB   "}"   
08EA   00                     DB   0   
08EB                             ; /mp map
08EB                             ; src func -- src1
08EB                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
08EB                MAP:         ; map: source, function
08EB   CD 9F 03               CALL   go   
08EE   00 00                  DW   NUL   
08F0   F8 08                  DW   mapM_1771S1356   
08F2   F4 08                  DW   $+2   
08F4   00                     DB   0   
08F5   02 73 66               .PSTR   "sf"   
08F8                MAPM_1771S1356:      
08F8   7B                     DB   "{"   
08F9   5C 6B 74 7B            DB   "\\kt{"   
08FD   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0905   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0909   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
090E   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
091A   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
0922   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0929   7D                     DB   "}"   
092A   7D                     DB   "}"   
092B   00                     DB   0   
092C                             ; /ft filter
092C                             ; src pred -- src1
092C                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
092C                FILTER:      ; filter: source, predicate, local: T
092C   CD 9F 03               CALL   go   
092F   00 00                  DW   NUL   
0931   3A 09                  DW   filterM_1785S1371   
0933   35 09                  DW   $+2   
0935   01                     DB   1   
0936   03 73 70 54            .PSTR   "spT"   
093A                FILTERM_1785S1371:      
093A   7B                     DB   "{"   
093B   5B 30 5D 25 54 3D      DB   "[0]%T="   
0941   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0945   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0949   5B                     DB   "["   
094A   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
0957   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
095F   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
0963   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
0968   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
097E   3F                     DB   "?"   
097F   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0986   7D                     DB   "}"   
0987   7D                     DB   "}"   
0988   00                     DB   0   
0989                             ; /fd fold
0989                             ; reducer is a function like: \\da00bbLi4u
0989                             ; src init reducer -- src1
0989                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
0989                FOLD:        ; src, init, reducer
0989   CD 9F 03               CALL   go   
098C   00 00                  DW   NUL   
098E   98 09                  DW   foldM_1804S1391   
0990   92 09                  DW   $+2   
0992   01                     DB   1   
0993   04 73 69 72 41         .PSTR   "sirA"   
0998                FOLDM_1804S1391:      
0998   7B                     DB   "{"   ; reducer: \\da00bbLi4u
0999   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
09A0   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09A4   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09A8   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
09AD   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
09C8   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
09D0   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09D7   7D                     DB   "}"   
09D8   7D                     DB   "}"   
09D9   00                     DB   0   
09DA                             ; /fe forEach
09DA                             ; src proc --
09DA                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
09DA                FOREACH:      ; forEach: source, procedure, local: T
09DA   CD 9F 03               CALL   go   
09DD   00 00                  DW   NUL   
09DF   E8 09                  DW   forEachM_1818S1406   
09E1   E3 09                  DW   $+2   
09E3   01                     DB   1   
09E4   03 73 70 54            .PSTR   "spT"   
09E8                FOREACHM_1818S1406:      
09E8   7B                     DB   "{"   
09E9   5B 30 5D 25 54 3D      DB   "[0]%T="   
09EF   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
09F3   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
09FB   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0A00   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0A12   3F                     DB   "?"   ; ifte:
0A13   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0A1C   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A23   7D                     DB   "}"   
0A24   00                     DB   0   
0A25                             ; ; /fs funcSrc
0A25                             ; ; func -- src
0A25                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0A25                FUNCSRC:      ; :f func or block
0A25   CD 9F 03               CALL   go   
0A28   00 00                  DW   NUL   
0A2A   31 0A                  DW   funcSrcM_1832S1421   
0A2C   2E 0A                  DW   $+2   
0A2E   00                     DB   0   
0A2F   01 66                  .PSTR   "f"   
0A31                FUNCSRCM_1832S1421:      
0A31   7B                     DB   "{"   
0A32   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0A36   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0A3E   5C 64 74 7B            DB   "\\dt{"   
0A42   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0A54   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0A5B   7D                     DB   "}"   
0A5C   7D                     DB   "}"   
0A5D   00                     DB   0   
0A5E                          ;*Macro unroll: FUNC printArray, 2, "abc"
0A5E                PRINTARRAY:      
0A5E   CD 9F 03               CALL   go   
0A61   00 00                  DW   NUL   
0A63   6C 0A                  DW   printArrayM_1842S1432   
0A65   67 0A                  DW   $+2   
0A67   02                     DB   2   
0A68   03 61 62 63            .PSTR   "abc"   
0A6C                PRINTARRAYM_1842S1432:      
0A6C   7B                     DB   "{"   
0A6D   27 5B 20 27 2E 73 20 25 61 2F 61 6C 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/al%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0AA4   7D                     DB   "}"   
0AA5   00                     DB   0   
0AA6                             ;*******************************************************************
0AA6                             ; implementations continued
0AA6                             ;*******************************************************************
0AA6                COMMA:       
0AA6   CD 2A 0F               CALL   cmdTable   
0AA9   63 00                  DB   "c",NUL   ; .c print char
0AAB   B5 0A                  DW   readChar   
0AAD   73 00                  DB   "s",NUL   ; .s print string
0AAF   BE 0A                  DW   readString   
0AB1   00 00                  DW   NUL   ; .  print number, fall through
0AB3   DA 0A                  DW   readNumber   
0AB5                READCHAR:      
0AB5   CD 81 00               CALL   getchar   
0AB8   26 00                  LD   h,0   
0ABA   6F                     LD   l,a   
0ABB   E5                     PUSH   hl   
0ABC   DD E9                  JP   (ix)   
0ABE                READSTRING:      
0ABE   ED 5B EC 23            LD   de,(vHeapPtr)   
0AC2   D5                     PUSH   de   ; return start of string
0AC3                READSTRING1:      
0AC3   CD 81 00               CALL   getchar   
0AC6   FE 0D                  CP   "\r"   
0AC8   28 07                  JR   z,readString2   
0ACA   12                     LD   (de),a   
0ACB   13                     INC   de   
0ACC   CD 85 00               CALL   putchar   
0ACF   18 F2                  JR   readString1   
0AD1                READSTRING2:      
0AD1   AF                     XOR   a   
0AD2   12                     LD   (de),a   
0AD3   13                     INC   de   
0AD4   ED 53 EC 23            LD   (vHeapPtr),de   
0AD8   DD E9                  JP   (ix)   
0ADA                READNUMBER:      
0ADA   DD E5                  PUSH   ix   
0ADC                          ;*Macro unroll:  PERFORM readString
0ADC   DD 21 E3 0A            LD   ix,performM_1883S1478   
0AE0   C3 BE 0A               JP   readString   
0AE3                PERFORMM_1883S1478:      
0AE3   60 69                  LD   hl,bc   ; save bc, hl = string*
0AE5   E3                     EX   (sp),hl   
0AE6   22 EC 23               LD   (vHeapPtr),hl   ; restore heap* to before string
0AE9   44 4D                  LD   bc,hl   
0AEB   0A                     LD   a,(bc)   
0AEC   FE 2D                  CP   "-"   
0AEE   28 11                  JR   z,readNumber1   
0AF0   FE 24                  CP   "$"   
0AF2   28 17                  JR   z,readNumber2   
0AF4   FE 30                  CP   "0"   
0AF6   30 09                  JR   nc,readNumber1   
0AF8   FE 3A                  CP   "9"+1   
0AFA   38 05                  JR   c,readNumber1   
0AFC   21 00 00               LD   hl,0   
0AFF   18 12                  JR   readNumber3   
0B01                READNUMBER1:      
0B01                          ;*Macro unroll:  PERFORM num
0B01   DD 21 08 0B            LD   ix,performM_1900S1495   
0B05   C3 C6 0B               JP   num   
0B08                PERFORMM_1900S1495:      
0B08   E1                     POP   hl   
0B09   18 08                  JR   readNumber3   
0B0B                READNUMBER2:      
0B0B                          ;*Macro unroll:  PERFORM hexNum
0B0B   DD 21 12 0B            LD   ix,performM_1904S1499   
0B0F   C3 4D 0B               JP   hexNum   
0B12                PERFORMM_1904S1499:      
0B12   E1                     POP   hl   
0B13                READNUMBER3:      
0B13   C1                     POP   bc   
0B14   DD E1                  POP   ix   
0B16   E5                     PUSH   hl   
0B17   DD E9                  JP   (ix)   
0B19                COLON:       
0B19   03                     INC   bc   ; arg_list must ve immediately followed by {
0B1A   0A                     LD   a,(bc)   
0B1B   FE 3D                  CP   "="   ; := definition
0B1D   28 07                  JR   z,defineStart   
0B1F   0B                     DEC   bc   
0B20   21 01 00               LD   hl,1   
0B23   C3 97 10               JP   error   
0B26                DEFINESTART:      
0B26   E1                     POP   hl   ; discard variable value
0B27   2A F7 23               LD   hl,(vPointer)   ; vDefine = vPointer
0B2A   22 EE 23               LD   (vDefine),hl   
0B2D   DD E9                  JP   (ix)   
0B2F                SEMICOLON:      
0B2F                DEFINEEND:      
0B2F   2A EE 23               LD   hl,(vDefine)   ; hl = define*
0B32   7D                     LD   a,l   
0B33   B4                     OR   h   
0B34   28 0B                  JR   z,defineEnd1   
0B36   11 00 00               LD   de,NUL   ; set vDefine=NUL
0B39   ED 53 EE 23            LD   (vDefine),de   
0B3D   D1                     POP   de   ; de = value
0B3E   C3 F6 0C               JP   assign1   
0B41                DEFINEEND1:      
0B41   DD E9                  JP   (ix)   
0B43                             ; ~ bitwise invert
0B43                TILDE:       
0B43                INVERT:      
0B43   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
0B44   7D                     LD   a,l   
0B45   2F                     CPL      
0B46   6F                     LD   l,a   
0B47   7C                     LD   a,h   
0B48   2F                     CPL      
0B49   67                     LD   h,a   
0B4A   C3 E7 02               JP   add3   
0B4D                             ; $ hex                         ; 22
0B4D                DOLLAR:      
0B4D                HEXNUM:      
0B4D   21 00 00               LD   hl,0   ; Clear hl to accept the number
0B50                HEXNUM1:      
0B50   03                     INC   bc   
0B51   0A                     LD   a,(bc)   ; Get the character which is a numeral
0B52   CB 77                  BIT   6,a   ; is it uppercase alpha?
0B54   28 02                  JR   z,hexnum2   ; no a decimal
0B56   D6 07                  SUB   7   ; sub 7  to make $a - $F
0B58                HEXNUM2:      
0B58   D6 30                  SUB   $30   ; form decimal digit
0B5A   DA E8 0B               JP   c,num2   
0B5D   FE 10                  CP   $0F+1   
0B5F   D2 E8 0B               JP   nc,num2   
0B62   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0B63   29                     ADD   hl,hl   ; 4X
0B64   29                     ADD   hl,hl   ; 8X
0B65   29                     ADD   hl,hl   ; 16X
0B66   85                     ADD   a,l   ; add into bottom of hl
0B67   6F                     LD   l,a   
0B68   18 E6                  JR   hexnum1   
0B6A                             ; ? if                            23
0B6A                             ; condition then else -- value
0B6A                QUESTION:      
0B6A                IF:          
0B6A   D1                     POP   de   ; de = else
0B6B   E1                     POP   hl   ; hl = then
0B6C   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0B6D   7C                     LD   a,h   
0B6E   B5                     OR   l   
0B6F   E1                     POP   hl   ; hl = then
0B70   CA A0 03               JP   z,go1   ; if z de = else
0B73   EB                     EX   de,hl   ; condition = false, de = then
0B74   C3 A0 03               JP   go1   
0B77                             ; string                        ;38
0B77                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0B77                QUOTE:       
0B77                STRING:      
0B77   2A EC 23               LD   hl,(vHeapPtr)   ; hl = heap*
0B7A   E5                     PUSH   hl   ; save start of string
0B7B   0A                     LD   a,(bc)   
0B7C   5F                     LD   e,a   ; e = matching terminator
0B7D   03                     INC   bc   ; point to next char
0B7E   18 03                  JR   string2   
0B80                STRING1:      
0B80   77                     LD   (hl),a   
0B81   23                     INC   hl   ; increase count
0B82   03                     INC   bc   ; point to next char
0B83                STRING2:      
0B83   0A                     LD   a,(bc)   
0B84   BB                     CP   e   ; is it the string terminator
0B85   28 02                  JR   z,string3   
0B87   18 F7                  JR   string1   
0B89                STRING3:      
0B89   AF                     XOR   a   ; write NUL to terminate string
0B8A   77                     LD   (hl),a   ; hl = end of string
0B8B   23                     INC   hl   
0B8C   22 EC 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0B8F   DD E9                  JP   (ix)   
0B91                             ; %a .. %z                      43
0B91                             ; -- value
0B91                             ; returns value of arg
0B91                PERCENT:      
0B91                ARG:         
0B91   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0B94   FD 56 05               LD   d,(iy+5)   
0B97   EB                     EX   de,hl   
0B98   7D                     LD   a,l   ; arg_list* == null, skip
0B99   B4                     OR   h   
0B9A   28 1A                  JR   z,arg0a   
0B9C   23                     INC   hl   ; a = num_args, hl = arg_list*
0B9D   7E                     LD   a,(hl)   
0B9E   23                     INC   hl   
0B9F   B7                     OR   a   
0BA0   28 14                  JR   z,arg0a   ; num_args == 0, skip
0BA2   5F                     LD   e,a   ; e = a = num_args
0BA3   03                     INC   bc   ; a = next char = dollar_name
0BA4   0A                     LD   a,(bc)   
0BA5   C5                     PUSH   bc   ; save IP
0BA6   43                     LD   b,e   ; b = e = num_args
0BA7   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0BAA   FD 56 03               LD   d,(iy+3)   
0BAD                ARG0:        
0BAD   1B                     DEC   de   ; a = dollar_name, de = next arg*
0BAE   1B                     DEC   de   
0BAF   BE                     CP   (hl)   
0BB0   28 09                  JR   z,arg1   
0BB2   23                     INC   hl   ; hl = next arg_list*
0BB3   10 F8                  DJNZ   arg0   
0BB5   C1                     POP   bc   ; no match, restore IP
0BB6                ARG0A:       
0BB6   11 00 00               LD   de,0   ; return 0
0BB9   18 08                  JR   arg1a   
0BBB                ARG1:        
0BBB   C1                     POP   bc   ; restore IP
0BBC   EB                     EX   de,hl   ; hl = arg*
0BBD   22 F7 23               LD   (vPointer),hl   ; store arg* in setter
0BC0   5E                     LD   e,(hl)   
0BC1   23                     INC   hl   
0BC2   56                     LD   d,(hl)   ; de = arg
0BC3                ARG1A:       
0BC3   D5                     PUSH   de   ; push arg
0BC4   DD E9                  JP   (ix)   
0BC6                             ; 0..9 number                   37
0BC6                NUM:         
0BC6   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0BC9   0A                     LD   a,(bc)   ; Get numeral or -
0BCA   FE 2D                  CP   "-"   
0BCC   20 01                  JR   nz,num0   
0BCE   03                     INC   bc   ; move to next char, no flags affected
0BCF                NUM0:        
0BCF   08                     EX   af,af'   ; save zero flag = 0 for later
0BD0                NUM1:        
0BD0   0A                     LD   a,(bc)   ; read digit
0BD1   D6 30                  SUB   "0"   ; less than 0?
0BD3   38 13                  JR   c,num2   ; not a digit, exit loop
0BD5   FE 0A                  CP   10   ; greater that 9?
0BD7   30 0F                  JR   nc,num2   ; not a digit, exit loop
0BD9   03                     INC   bc   ; inc IP
0BDA   54 5D                  LD   de,hl   ; multiply hl * 10
0BDC   29                     ADD   hl,hl   
0BDD   29                     ADD   hl,hl   
0BDE   19                     ADD   hl,de   
0BDF   29                     ADD   hl,hl   
0BE0   85                     ADD   a,l   ; add digit in a to hl
0BE1   6F                     LD   l,a   
0BE2   3E 00                  LD   a,0   
0BE4   8C                     ADC   a,h   
0BE5   67                     LD   h,a   
0BE6   18 E8                  JR   num1   
0BE8                NUM2:        
0BE8   0B                     DEC   bc   
0BE9   08                     EX   af,af'   ; restore zero flag
0BEA   20 07                  JR   nz,num3   
0BEC   EB                     EX   de,hl   ; negate the value of hl
0BED   21 00 00               LD   hl,0   
0BF0   B7                     OR   a   ; jump to sub2
0BF1   ED 52                  SBC   hl,de   
0BF3                NUM3:        
0BF3   E5                     PUSH   hl   ; Put the number on the stack
0BF4   DD E9                  JP   (ix)   ; and process the next character
0BF6                             ; }                               58
0BF6                RBRACE:      
0BF6                BLOCKEND:      
0BF6   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0BF9   FD 56 01               LD   d,(iy+1)   
0BFC   ED 53 03 24            LD   (vTemp1),de   
0C00   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0C03   FD 56 07               LD   d,(iy+7)   
0C06   ED 53 05 24            LD   (vTemp2),de   
0C0A   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0C0D   FD 56 03               LD   d,(iy+3)   
0C10   EB                     EX   de,hl   
0C11   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0C14   FD 56 01               LD   d,(iy+1)   
0C17   13                     INC   de   ; for carry flag <=
0C18   B7                     OR   a   
0C19   ED 52                  SBC   hl,de   
0C1B   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0C1D   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0C1F   FD 5D                  LD   e,iyl   
0C21   21 08 00               LD   hl,8   
0C24   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0C25   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0C26   18 0C                  JR   blockEnd2   
0C28                BLOCKEND1:      ; same scope
0C28   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0C2B   FD 56 03               LD   d,(iy+3)   
0C2E   EB                     EX   de,hl   
0C2F   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0C31   FD 5D                  LD   e,iyl   
0C33   EB                     EX   de,hl   
0C34                BLOCKEND2:      
0C34   44 4D                  LD   bc,hl   ; bc = hl = BP
0C36   B7                     OR   a   ; hl = BP - SP = count
0C37   ED 72                  SBC   hl,sp   
0C39   7D                     LD   a,l   
0C3A   B4                     OR   h   
0C3B   28 09                  JR   z,blockEnd3   
0C3D   C5                     PUSH   bc   ; bc = count, hl = BP
0C3E   44 4D                  LD   bc,hl   
0C40   E1                     POP   hl   
0C41   2B                     DEC   hl   ; hl = BP-1
0C42   1B                     DEC   de   ; de = args*-1
0C43   ED B8                  LDDR      
0C45   13                     INC   de   
0C46                BLOCKEND3:      
0C46   EB                     EX   de,hl   ; sp = de = new tos*
0C47   F9                     LD   sp,hl   
0C48   ED 4B 05 24            LD   bc,(vTemp2)   
0C4C   FD 2A 03 24            LD   iy,(vTemp1)   
0C50   ED 5B EF 23            LD   de,(vRecur)   ; de = recur vector
0C54   7B                     LD   a,e   ; check for NUL
0C55   B2                     OR   d   
0C56   20 02                  JR   nz,blockEnd4   
0C58   DD E9                  JP   (ix)   
0C5A                BLOCKEND4:      
0C5A   21 00 00               LD   hl,0   ; clear recur vector
0C5D   22 EF 23               LD   (vRecur),hl   
0C60   C3 A0 03               JP   go1   ; execute de
0C63                GOBLOCK:      
0C63   ED 53 03 24            LD   (vTemp1),de   ; save de
0C67   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0C6A   FD 54                  LD   d,iyh   
0C6C   FD 5D                  LD   e,iyl   
0C6E   B7                     OR   a   ; if stack* == BP then this is the root_scope
0C6F   ED 52                  SBC   hl,de   
0C71   ED 5B 03 24            LD   de,(vTemp1)   ; restore de
0C75   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0C76   B4                     OR   h   
0C77   3E 00                  LD   a,0   
0C79   28 6A                  JR   z,goFunc8   
0C7B   C5                     PUSH   bc   ; push IP
0C7C   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0C7F   FD 46 05               LD   b,(iy+5)   
0C82   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0C85   FD 66 03               LD   h,(iy+3)   
0C88                GOBLOCK2:      
0C88   C5                     PUSH   bc   ; arg_list*
0C89   E5                     PUSH   hl   ; first_arg*
0C8A   FD E5                  PUSH   iy   ; push BP
0C8C   FD 21 00 00            LD   iy,0   ; BP = SP
0C90   FD 39                  ADD   iy,sp   
0C92                GOBLOCK3:      
0C92   42 4B                  LD   bc,de   ; bc = de = block*-1
0C94   DD E9                  JP   (ix)   
0C96                GOFUNC:      ; execute func
0C96   EB                     EX   de,hl   ; hl = func*
0C97   5E                     LD   e,(hl)   ; de = partial_array*
0C98   23                     INC   hl   
0C99   56                     LD   d,(hl)   
0C9A   23                     INC   hl   
0C9B   7B                     LD   a,e   ; if partial_array* == null skip
0C9C   B2                     OR   d   
0C9D   28 21                  JR   z,goFunc3   
0C9F   ED 43 03 24            LD   (vTemp1),bc   
0CA3   22 05 24               LD   (vTemp2),hl   ; save bc,hl
0CA6   EB                     EX   de,hl   ; hl = partial_array*
0CA7   2B                     DEC   hl   ; bc = count
0CA8   46                     LD   b,(hl)   
0CA9   2B                     DEC   hl   
0CAA   4E                     LD   c,(hl)   
0CAB   23                     INC   hl   ; hl = array data*
0CAC   23                     INC   hl   
0CAD   18 06                  JR   goFunc2   ; push each item on stack
0CAF                GOFUNC1:      
0CAF   5E                     LD   e,(hl)   ; de = partial item
0CB0   23                     INC   hl   
0CB1   56                     LD   d,(hl)   
0CB2   23                     INC   hl   
0CB3   D5                     PUSH   de   ; push on stack
0CB4   0B                     DEC   bc   
0CB5                GOFUNC2:      
0CB5   79                     LD   a,c   ; if count != 0 then loop
0CB6   B0                     OR   b   
0CB7   20 F6                  JR   nz,goFunc1   
0CB9   ED 4B 03 24            LD   bc,(vTemp1)   ; restore bc
0CBD   2A 05 24               LD   hl,(vTemp2)   ; restore hl
0CC0                GOFUNC3:      
0CC0   5E                     LD   e,(hl)   ; de = block*
0CC1   23                     INC   hl   
0CC2   56                     LD   d,(hl)   
0CC3   23                     INC   hl   
0CC4   ED 53 03 24            LD   (vTemp1),de   ; save block*
0CC8   5E                     LD   e,(hl)   ; de = arg_list*
0CC9   23                     INC   hl   
0CCA   56                     LD   d,(hl)   
0CCB   23                     INC   hl   
0CCC   EB                     EX   de,hl   ; hl = arg_list*
0CCD   ED 5B 03 24            LD   de,(vTemp1)   ; restore de = block*
0CD1   7D                     LD   a,l   ; if arg_list* == null a = 0
0CD2   B4                     OR   h   
0CD3   20 03                  JR   nz,goFunc4   
0CD5   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0CD6   18 0D                  JR   goFunc8   
0CD8                GOFUNC4:      ; allocate locals
0CD8   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0CD9   18 03                  JR   goFunc6   
0CDB                GOFUNC5:      ; loop
0CDB   3B                     DEC   sp   
0CDC   3B                     DEC   sp   
0CDD   3D                     DEC   a   
0CDE                GOFUNC6:      
0CDE   B7                     OR   a   
0CDF   20 FA                  JR   nz,goFunc5   ; end loop
0CE1                GOFUNC7:      
0CE1   23                     INC   hl   ; a = num_args* x 2
0CE2   7E                     LD   a,(hl)   
0CE3   2B                     DEC   hl   
0CE4   87                     ADD   a,a   ; a *= 2
0CE5                GOFUNC8:      
0CE5   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0CE6   44 4D                  LD   bc,hl   
0CE8   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0CEB   85                     ADD   a,l   
0CEC   6F                     LD   l,a   
0CED   39                     ADD   hl,sp   
0CEE   18 98                  JR   goBlock2   
0CF0                             ; =                              21
0CF0                             ; value _oldValue --            ; uses address in vPointer 15
0CF0                ASSIGN:      
0CF0   E1                     POP   hl   ; discard last accessed value
0CF1   E1                     POP   hl   ; hl = new value
0CF2                ASSIGN0:      
0CF2   EB                     EX   de,hl   ; de = new value
0CF3   2A F7 23               LD   hl,(vPointer)   
0CF6                ASSIGN1:      ; entry point from defineEnd
0CF6   73                     LD   (hl),e   
0CF7   3A F1 23               LD   a,(vDataWidth)   
0CFA   3D                     DEC   a   ; is it byte?
0CFB   28 02                  JR   z,assign2   
0CFD   23                     INC   hl   
0CFE   72                     LD   (hl),d   
0CFF                ASSIGN2:      
0CFF   DD E9                  JP   (ix)   
0D01                             ; hl = value1, de = value2
0D01                             ; hl = result
0D01                EQUALS:      
0D01   B7                     OR   a   ; reset the carry flag
0D02   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0D04   28 16                  JR   z,true1   
0D06   18 1A                  JR   false1   
0D08                NOTEQUALS:      
0D08   B7                     OR   a   ; reset the carry flag
0D09   ED 52                  SBC   hl,de   
0D0B   20 0F                  JR   nz,true1   
0D0D   18 13                  JR   false1   
0D0F                             ; hl = value1 de = value2
0D0F                             ; hl = result
0D0F                LESSTHANEQ:      
0D0F   B7                     OR   a   
0D10   ED 52                  SBC   hl,de   
0D12   18 05                  JR   lessthan1   
0D14                             ; hl = value1 de = value2
0D14                             ; hl = result
0D14                LESSTHAN:      
0D14   B7                     OR   a   
0D15   ED 52                  SBC   hl,de   
0D17   28 09                  JR   z,false1   
0D19                LESSTHAN1:      
0D19   FA 22 0D               JP   m,false1   
0D1C                TRUE1:       
0D1C   21 FF FF               LD   hl,TRUE   
0D1F   E5                     PUSH   hl   
0D20   DD E9                  JP   (ix)   
0D22                NULL1:       
0D22                FALSE1:      
0D22   21 00 00               LD   hl,FALSE   
0D25   E5                     PUSH   hl   
0D26   DD E9                  JP   (ix)   
0D28                SPREAD:      
0D28   E1                     POP   hl   ; hl = array*
0D29   ED 43 03 24            LD   (vTemp1),bc   ; save bc
0D2D   2B                     DEC   hl   ; bc = length
0D2E   46                     LD   b,(hl)   
0D2F   2B                     DEC   hl   
0D30   4E                     LD   c,(hl)   
0D31   23                     INC   hl   ; move back to array 0
0D32   23                     INC   hl   
0D33   18 0D                  JR   spread3   
0D35                SPREAD1:      
0D35   5E                     LD   e,(hl)   ; e = lsb data at hl
0D36   23                     INC   hl   
0D37   3A F1 23               LD   a,(vDataWidth)   ; data width = 1, d = 0, skip
0D3A   57                     LD   d,a   
0D3B   15                     DEC   d   
0D3C   28 02                  JR   z,spread2   
0D3E   56                     LD   d,(hl)   ; d = msb data at hl
0D3F   23                     INC   hl   
0D40                SPREAD2:      
0D40   D5                     PUSH   de   ; return de
0D41   0B                     DEC   bc   ; count--
0D42                SPREAD3:      
0D42   79                     LD   a,c   ; exit loop if bc == 0
0D43   B0                     OR   b   
0D44   20 EF                  JR   nz,spread1   
0D46   ED 4B 03 24            LD   bc,(vTemp1)   ; restore bc
0D4A   DD E9                  JP   (ix)   
0D4C                             ; shiftLeft
0D4C                             ; value count <<
0D4C                             ; count variable <<=
0D4C                SHIFTLEFT:      
0D4C   E1                     POP   hl   ; de = arg_a, hl = arg_b
0D4D   D1                     POP   de   
0D4E   03                     INC   bc   
0D4F   0A                     LD   a,(bc)   
0D50   FE 3D                  CP   "="   
0D52   28 02                  JR   z,shiftLeft2   
0D54   0B                     DEC   bc   
0D55   EB                     EX   de,hl   ; de = arg_b, hl = arg_a
0D56                SHIFTLEFT2:      
0D56   ED 43 03 24            LD   (vTemp1),bc   ; save IP
0D5A   43                     LD   b,e   ; b = loop counter
0D5B   04                     INC   b   ; test for counter=0 case
0D5C   18 01                  JR   shiftLeft4   
0D5E                SHIFTLEFT3:      
0D5E   29                     ADD   hl,hl   ; left shift hl
0D5F                SHIFTLEFT4:      
0D5F   10 FD                  DJNZ   shiftLeft3   
0D61   ED 4B 03 24            LD   bc,(vTemp1)   ; restore IP
0D65   C3 AC 02               JP   sub3   
0D68                             ; shiftRight
0D68                             ; value count >>
0D68                             ; count variable >>=
0D68                SHIFTRIGHT:      
0D68   E1                     POP   hl   ; de = arg_a, hl = arg_b
0D69   D1                     POP   de   
0D6A   03                     INC   bc   
0D6B   0A                     LD   a,(bc)   
0D6C   FE 3D                  CP   "="   
0D6E   28 02                  JR   z,shiftRight2   
0D70   0B                     DEC   bc   
0D71   EB                     EX   de,hl   ; de = arg_a, hl = arg_b
0D72                SHIFTRIGHT2:      
0D72   ED 43 03 24            LD   (vTemp1),bc   ; save IP
0D76   43                     LD   b,e   ; b = loop counter
0D77   04                     INC   b   ; test for counter=0 case
0D78   18 04                  JR   shiftRight4   
0D7A                SHIFTRIGHT3:      
0D7A   CB 3C                  SRL   h   ; right shift hl
0D7C   CB 1D                  RR   l   
0D7E                SHIFTRIGHT4:      
0D7E   10 FA                  DJNZ   shiftRight3   
0D80   ED 4B 03 24            LD   bc,(vTemp1)   ; restore IP
0D84   C3 AC 02               JP   sub3   
0D87                             ; division subroutine.
0D87                             ; bc: divisor, de: dividend, hl: remainder
0D87                DIVIDE:      
0D87   21 00 00               LD   hl,0   ; zero the remainder
0D8A   3E 10                  LD   a,16   ; loop counter
0D8C                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0D8C   CB 21                  SLA   c   
0D8E   CB 10                  RL   b   
0D90   ED 6A                  ADC   hl,hl   
0D92   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0D94   38 03                  JR   c,divide2   
0D96   0C                     INC   c   
0D97   18 01                  JR   divide3   
0D99                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0D99   19                     ADD   hl,de   
0D9A                DIVIDE3:      
0D9A   3D                     DEC   a   
0D9B   20 EF                  JR   nz,divide1   
0D9D   50 59                  LD   de,bc   ; result from bc to de
0D9F   C9                     RET      
0DA0                DOTNEXT:      
0DA0   3A F3 23               LD   a,(vStrMode)   ; if string mode then exit
0DA3   3C                     INC   a   
0DA4   20 02                  JR   nz,dotNext1   
0DA6   DD E9                  JP   (ix)   
0DA8                DOTNEXT1:      
0DA8   11 00 22               LD   de,BUFFER   
0DAB   2A E8 23               LD   hl,(vBufPtr)   
0DAE   36 00                  LD   (hl),0   ; store NUL at end of string
0DB0   ED 53 E8 23            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0DB4   EB                     EX   de,hl   ; hl = BUFFER
0DB5   CD 4F 0F               CALL   putstr   
0DB8   DD E9                  JP   (ix)   
0DBA                             ; arg_list - parses arg_list e.g. ab:c
0DBA                             ; -- arg_list*
0DBA                PARSEARGS:      
0DBA   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0DBD   2A EC 23               LD   hl,(vHeapPtr)   ; hl = heap*
0DC0   E5                     PUSH   hl   ; save start of arg_list
0DC1   23                     INC   hl   ; skip length fields to start of string
0DC2   23                     INC   hl   
0DC3   03                     INC   bc   ; point to next char
0DC4                PARSEARGS1:      
0DC4   0A                     LD   a,(bc)   
0DC5   FE 3A                  CP   ":"   ; ":" switches from args to locals
0DC7   20 03                  JR   nz,parseArgs1a   
0DC9   14                     INC   d   ; non zero value local count acts as flag
0DCA   18 10                  JR   parseArgs3   
0DCC                PARSEARGS1A:      
0DCC   FE 61                  CP   "a"   ; < "a" terminates arg_list
0DCE   38 0F                  JR   c,parseArgs4   
0DD0   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0DD2   30 0B                  JR   nc,parseArgs4   
0DD4                PARSEARGS2:      
0DD4   77                     LD   (hl),a   
0DD5   23                     INC   hl   
0DD6   1C                     INC   e   ; increase arg count
0DD7   AF                     XOR   a   
0DD8   B2                     OR   d   
0DD9   28 01                  JR   z,parseArgs3   
0DDB   14                     INC   d   ; if d > 0 increase local count
0DDC                PARSEARGS3:      
0DDC   03                     INC   bc   ; point to next char
0DDD   18 E5                  JR   parseArgs1   
0DDF                PARSEARGS4:      
0DDF   0B                     DEC   bc   
0DE0   AF                     XOR   a   
0DE1   B2                     OR   d   
0DE2   28 01                  JR   z,parseArgs5   
0DE4   15                     DEC   d   ; remove initial inc
0DE5                PARSEARGS5:      
0DE5   23                     INC   hl   
0DE6   22 EC 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0DE9   E1                     POP   hl   ; hl = start of arg_list
0DEA   72                     LD   (hl),d   ; write number of locals at start - 1
0DEB   23                     INC   hl   
0DEC   73                     LD   (hl),e   ; write number of args + locals at start - 2
0DED   2B                     DEC   hl   
0DEE   E3                     EX   (sp),hl   
0DEF   E9                     JP   (hl)   
0DF0                             ; create block: parses block e.g. 00bbIC4uLi4g
0DF0                             ; -- block*
0DF0                PARSEBLOCK:      
0DF0   C5                     PUSH   bc   ; return pointer to first { of block
0DF1   03                     INC   bc   
0DF2   16 01                  LD   d,1   ; nesting: count first parenthesis
0DF4                PARSEBLOCK1:      ; Skip to end of definition
0DF4   0A                     LD   a,(bc)   ; Get the next character
0DF5   03                     INC   bc   ; Point to next character
0DF6   FE 21                  CP   " " + 1   ; ignore whitespace
0DF8   38 FA                  JR   c,parseBlock1   
0DFA   FE 29                  CP   ")"   
0DFC   28 2D                  JR   z,parseBlock4   
0DFE   FE 7D                  CP   "}"   
0E00   28 29                  JR   z,parseBlock4   
0E02   FE 5D                  CP   "]"   
0E04   28 25                  JR   z,parseBlock4   
0E06   FE 28                  CP   "("   
0E08   28 16                  JR   z,parseBlock2   
0E0A   FE 7B                  CP   "{"   
0E0C   28 12                  JR   z,parseBlock2   
0E0E   FE 5B                  CP   "["   
0E10   28 0E                  JR   z,parseBlock2   
0E12   FE 27                  CP   "'"   
0E14   28 0D                  JR   z,parseBlock3   
0E16   FE 60                  CP   "`"   
0E18   28 09                  JR   z,parseBlock3   
0E1A   FE 22                  CP   DQ   
0E1C   28 05                  JR   z,parseBlock3   
0E1E   18 D4                  JR   parseBlock1   
0E20                PARSEBLOCK2:      
0E20   14                     INC   d   
0E21   18 D1                  JR   parseBlock1   
0E23                PARSEBLOCK3:      
0E23   3E 80                  LD   a,$80   
0E25   AA                     XOR   d   
0E26   57                     LD   d,a   
0E27   20 CB                  JR   nz,parseBlock1   
0E29   18 03                  JR   parseBlock5   
0E2B                PARSEBLOCK4:      
0E2B   15                     DEC   d   
0E2C   20 C6                  JR   nz,parseBlock1   ; get the next element
0E2E                PARSEBLOCK5:      
0E2E   60 69                  LD   hl,bc   ; hl = IP
0E30   11 21 24               LD   de,HEAP   ; is IP pointing to object in heap
0E33   B7                     OR   a   ; IP - HEAP
0E34   ED 52                  SBC   hl,de   
0E36   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0E38   28 1C                  JR   z,parseBlock6   
0E3A   60 69                  LD   hl,bc   ; hl = IP
0E3C   D1                     POP   de   ; de = block*
0E3D   ED 43 03 24            LD   (vTemp1),bc   ; save IP
0E41   B7                     OR   a   ; bc = size
0E42   ED 52                  SBC   hl,de   
0E44   44 4D                  LD   bc,hl   
0E46   EB                     EX   de,hl   ; hl = block* de = heap*
0E47   ED 5B EC 23            LD   de,(vHeapPtr)   
0E4B   D5                     PUSH   de   ; return hblock*
0E4C   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0E4E   ED 53 EC 23            LD   (vHeapPtr),de   ; heap* += size
0E52   ED 4B 03 24            LD   bc,(vTemp1)   ; restore IP
0E56                PARSEBLOCK6:      
0E56   0B                     DEC   bc   ; balanced, exit
0E57   E1                     POP   hl   ; hl = block*
0E58   E3                     EX   (sp),hl   ; return to caller
0E59   E9                     JP   (hl)   
0E5A                             ; create function
0E5A                             ; arg_list* block* -- func*
0E5A                CREATEFUNC:      
0E5A   E1                     POP   hl   ; save retrn address
0E5B   22 07 24               LD   (vTemp3),hl   
0E5E   ED 43 03 24            LD   (vTemp1),bc   ; save IP
0E62   E1                     POP   hl   ; hl = block*
0E63   22 05 24               LD   (vTemp2),hl   ; save block*
0E66   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0E69   FD 56 05               LD   d,(iy+5)   
0E6C   7B                     LD   a,e   ; if arg_list == null then make a func
0E6D   B2                     OR   d   
0E6E   20 09                  JR   nz,createFunc0   
0E70   21 00 00               LD   hl,0   ; partial_array = null
0E73   ED 5B EC 23            LD   de,(vHeapPtr)   ; de = compile*
0E77   18 65                  JR   createFunc5   
0E79                CREATEFUNC0:      
0E79   E1                     POP   hl   ; hl = inner_arg_list*
0E7A   E5                     PUSH   hl   ; save inner_arg_list
0E7B   ED 5B EC 23            LD   de,(vHeapPtr)   ; de = compile*
0E7F   7E                     LD   a,(hl)   ; compile inner_num_locals
0E80   4F                     LD   c,a   ; b = inner_num_locals
0E81   12                     LD   (de),a   
0E82   23                     INC   hl   
0E83   13                     INC   de   
0E84   7E                     LD   a,(hl)   ; compile inner_length
0E85   12                     LD   (de),a   
0E86   91                     SUB   c   ; a = inner_num args
0E87   23                     INC   hl   
0E88   13                     INC   de   
0E89   B7                     OR   a   ; compile args if inner_length > 0
0E8A   28 05                  JR   z,createFunc1   
0E8C   4F                     LD   c,a   ; bc = a
0E8D   06 00                  LD   b,0   
0E8F   ED B0                  LDIR      
0E91                CREATEFUNC1:      
0E91   EB                     EX   de,hl   ; hl = outer_arg_list
0E92   FD 5E 04               LD   e,(iy+4)   
0E95   FD 56 05               LD   d,(iy+5)   
0E98   EB                     EX   de,hl   
0E99   23                     INC   hl   ; a = outer_length
0E9A   7E                     LD   a,(hl)   
0E9B   23                     INC   hl   
0E9C   B7                     OR   a   
0E9D   28 05                  JR   z,createFunc2   
0E9F   4F                     LD   c,a   
0EA0   06 00                  LD   b,0   
0EA2   ED B0                  LDIR      ; append outer_args
0EA4                CREATEFUNC2:      ; a = outer_length
0EA4   47                     LD   b,a   ; b = a = outer_length
0EA5   2A EC 23               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0EA8   23                     INC   hl   
0EA9   7E                     LD   a,(hl)   ; add outer_length to new length
0EAA   80                     ADD   a,b   
0EAB   77                     LD   (hl),a   
0EAC   2B                     DEC   hl   
0EAD   78                     LD   a,b   ; save outer_length in a'
0EAE   08                     EX   af,af'   
0EAF   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0EB0   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0EB1   B7                     OR   a   
0EB2   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0EB4   4F                     LD   c,a   ; c = inner_num_locals
0EB5   06 00                  LD   b,0   ; bc = inner_num_locals
0EB7   23                     INC   hl   ; a = inner_length
0EB8   7E                     LD   a,(hl)   
0EB9   91                     SUB   c   ; a = inner_num_args
0EBA   23                     INC   hl   ; hl = inner_arg_chars
0EBB   85                     ADD   a,l   ; hl += a
0EBC   6F                     LD   l,a   
0EBD   3E 00                  LD   a,0   
0EBF   84                     ADD   a,h   
0EC0   67                     LD   h,a   
0EC1   ED B0                  LDIR      ; append inner_locals
0EC3                CREATEFUNC2A:      
0EC3   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0EC4   12                     LD   (de),a   ; compile partial_array length field
0EC5   13                     INC   de   
0EC6   AF                     XOR   a   
0EC7   12                     LD   (de),a   
0EC8   13                     INC   de   
0EC9   D5                     PUSH   de   ; push partial_array*
0ECA   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0ECB   FD 5E 02               LD   e,(iy+2)   
0ECE   FD 56 03               LD   d,(iy+3)   
0ED1   EB                     EX   de,hl   
0ED2                CREATEFUNC3:      
0ED2   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0ED3   4E                     LD   c,(hl)   
0ED4   2B                     DEC   hl   
0ED5   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0ED6   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0ED7   13                     INC   de   
0ED8   79                     LD   a,c   
0ED9   12                     LD   (de),a   
0EDA   13                     INC   de   
0EDB   10 F5                  DJNZ   createFunc3   ; b = outer_length
0EDD                CREATEFUNC4:      
0EDD   E1                     POP   hl   ; hl = partial_array*
0EDE                CREATEFUNC5:      
0EDE   C1                     POP   bc   ; bc = new_arg_list*
0EDF   D5                     PUSH   de   ; return new func*
0EE0   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0EE1   73                     LD   (hl),e   ; compile partial_array* to func
0EE2   23                     INC   hl   
0EE3   72                     LD   (hl),d   
0EE4   23                     INC   hl   
0EE5   ED 5B 05 24            LD   de,(vTemp2)   ; de = block*
0EE9   73                     LD   (hl),e   ; compile block* to func
0EEA   23                     INC   hl   
0EEB   72                     LD   (hl),d   
0EEC   23                     INC   hl   
0EED   71                     LD   (hl),c   ; compile new_arg_list* to func
0EEE   23                     INC   hl   
0EEF   70                     LD   (hl),b   
0EF0   23                     INC   hl   
0EF1   22 EC 23               LD   (vHeapPtr),hl   ; bump heap ptr
0EF4   ED 4B 03 24            LD   bc,(vTemp1)   ; restore IP
0EF8   2A 07 24               LD   hl,(vTemp3)   ; jump to return address
0EFB   E9                     JP   (hl)   
0EFC                             ;*******************************************************************
0EFC                             ; general routines
0EFC                             ;*******************************************************************
0EFC                             ; followed by a table
0EFC                             ; indexed on the 0-25 lowercase letter
0EFC                             ; db lsb(addr)
0EFC                             ; the final item index 26 matches any other char
0EFC                LOWERCASETABLE:      
0EFC   03                     INC   bc   
0EFD   0A                     LD   a,(bc)   
0EFE   FE 7B                  CP   "z"+1   
0F00   30 0B                  JR   nc,lowerCaseTable2   
0F02   D6 61                  SUB   "a"   
0F04   38 07                  JR   c,lowerCaseTable2   
0F06                LOWERCASETABLE1:      
0F06   E1                     POP   hl   
0F07   85                     ADD   a,l   
0F08   6F                     LD   l,a   
0F09   6E                     LD   l,(hl)   ; must have the same msb as the table
0F0A   C3 13 0F               JP   commandTable1   
0F0D                LOWERCASETABLE2:      
0F0D   3E 1A                  LD   a,26   
0F0F   0B                     DEC   bc   
0F10   18 F4                  JR   lowerCaseTable1   
0F12                             ; followed by a table
0F12                             ; db char
0F12                             ; dw addr
0F12                             ; the final item must have char == NUL
0F12                COMMANDTABLE:      
0F12   E1                     POP   hl   
0F13                COMMANDTABLE1:      
0F13   03                     INC   bc   
0F14                COMMANDTABLE2:      
0F14   AF                     XOR   a   
0F15   BE                     CP   (hl)   
0F16   20 03                  JR   nz,commandTable3   
0F18   0B                     DEC   bc   
0F19   18 09                  JR   commandTable4   
0F1B                COMMANDTABLE3:      
0F1B   0A                     LD   a,(bc)   
0F1C   BE                     CP   (hl)   
0F1D   28 05                  JR   z,commandTable4   
0F1F   23                     INC   hl   
0F20   23                     INC   hl   
0F21   23                     INC   hl   
0F22   18 F0                  JR   commandTable2   
0F24                COMMANDTABLE4:      
0F24   23                     INC   hl   
0F25   5E                     LD   e,(hl)   
0F26   23                     INC   hl   
0F27   56                     LD   d,(hl)   
0F28   EB                     EX   de,hl   
0F29   E9                     JP   (hl)   
0F2A                             ; followed by a table
0F2A                             ; db char
0F2A                             ; db char - if null only match on first char
0F2A                             ; dw addr
0F2A                             ; the final item must have char == NUL
0F2A                CMDTABLE:      
0F2A   E1                     POP   hl   
0F2B                CMDTABLE1:      
0F2B                CMDTABLE2:      
0F2B   56                     LD   d,(hl)   
0F2C   23                     INC   hl   
0F2D   5E                     LD   e,(hl)   
0F2E   23                     INC   hl   
0F2F   AF                     XOR   a   ; if d == 0, matched
0F30   BA                     CP   d   
0F31   28 13                  JR   z,cmdTable5   
0F33   03                     INC   bc   ; match?
0F34   0A                     LD   a,(bc)   
0F35   BA                     CP   d   
0F36   20 09                  JR   nz,cmdTable4   
0F38                CMDTABLE3:      
0F38   AF                     XOR   a   ; if e == 0, matched
0F39   BB                     CP   e   
0F3A   28 0A                  JR   z,cmdTable5   
0F3C   03                     INC   bc   
0F3D   0A                     LD   a,(bc)   ; match?
0F3E   BB                     CP   e   
0F3F   28 05                  JR   z,cmdTable5   
0F41                CMDTABLE4:      ; no match, restore bc, go to next table entry
0F41   0B                     DEC   bc   
0F42   23                     INC   hl   
0F43   23                     INC   hl   
0F44   18 E5                  JR   cmdTable2   
0F46                CMDTABLE5:      ; matched, jump to addr
0F46   5E                     LD   e,(hl)   
0F47   23                     INC   hl   
0F48   56                     LD   d,(hl)   
0F49   EB                     EX   de,hl   
0F4A   E9                     JP   (hl)   
0F4B                PUTSTR0:      
0F4B   CD 85 00               CALL   putchar   
0F4E   23                     INC   hl   
0F4F                PUTSTR:      
0F4F   7E                     LD   a,(hl)   
0F50   B7                     OR   a   
0F51   20 F8                  JR   nz,putstr0   
0F53   C9                     RET      
0F54                             ; **************************************************************************
0F54                             ; calculate nesting value
0F54                             ; a is char to be tested,
0F54                             ; e is the nesting value (initially 0)
0F54                             ; e is increased by ( and [
0F54                             ; e is decreased by ) and ]
0F54                             ; e has its bit 7 toggled by `
0F54                             ; limited to 127 levels
0F54                             ; **************************************************************************
0F54                NESTING:      
0F54   FE 22                  CP   DQ   ; quote char
0F56   28 06                  JR   z,nesting0   
0F58   FE 60                  CP   "`"   ; quote char
0F5A   28 02                  JR   z,nesting0   
0F5C   18 0A                  JR   nesting1   
0F5E                NESTING0:      
0F5E   CB 7B                  BIT   7,e   
0F60   28 03                  JR   z,nesting1a   
0F62   CB BB                  RES   7,e   
0F64   C9                     RET      
0F65                NESTING1A:      
0F65   CB FB                  SET   7,e   
0F67   C9                     RET      
0F68                NESTING1:      
0F68   CB 7B                  BIT   7,e   
0F6A   C0                     RET   nz   
0F6B   FE 7B                  CP   "{"   
0F6D   28 08                  JR   z,nesting2   
0F6F   FE 5B                  CP   "["   
0F71   28 04                  JR   z,nesting2   
0F73   FE 28                  CP   "("   
0F75   20 02                  JR   nz,nesting3   
0F77                NESTING2:      
0F77   1C                     INC   e   
0F78   C9                     RET      
0F79                NESTING3:      
0F79   FE 7D                  CP   "}"   
0F7B   28 07                  JR   z,nesting4   
0F7D   FE 5D                  CP   "]"   
0F7F   28 03                  JR   z,nesting4   
0F81   FE 29                  CP   ")"   
0F83   C0                     RET   nz   
0F84                NESTING4:      
0F84   1D                     DEC   e   
0F85   C9                     RET      
0F86                PROMPT:      
0F86   CD 96 0F               CALL   printStr   
0F89   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0F8E   C9                     RET      
0F8F                CRLF:        
0F8F   CD 96 0F               CALL   printStr   
0F92   0D 0A 00               .CSTR   "\r\n"   
0F95   C9                     RET      
0F96                             ; prints a null teminated string
0F96                             ; the string should be immediately following the call
0F96                PRINTSTR:      
0F96   E3                     EX   (sp),hl   ; swap			
0F97   CD 4F 0F               CALL   putstr   
0F9A   23                     INC   hl   ; inc past NUL
0F9B   E3                     EX   (sp),hl   ; put it back	
0F9C   C9                     RET      
0F9D                INIT:        
0F9D   21 F0 01               LD   hl,titleStr   
0FA0   11 0D 24               LD   de,titleBuf   
0FA3   06 14                  LD   b,20   
0FA5                INIT1:       
0FA5   1A                     LD   a,(de)   
0FA6   BE                     CP   (hl)   
0FA7   20 17                  JR   nz,coldBoot0   
0FA9   13                     INC   de   
0FAA   23                     INC   hl   
0FAB   10 F8                  DJNZ   init1   
0FAD                WARMINIT:      
0FAD   ED 4B FB 23            LD   bc,(vSavedIP)   ; restore IP
0FB1   ED 7B FD 23            LD   sp,(vSavedSP)   ; restore SP
0FB5   DD 2A FF 23            LD   ix,(vSavedNext)   ; restore Next
0FB9   FD 2A 01 24            LD   iy,(vSavedBP)   ; restore BP
0FBD   C3 F7 0F               JP   start1   
0FC0                COLDBOOT0:      
0FC0   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0FC3   11 0D 24               LD   de,titleBuf   
0FC6   06 14                  LD   b,20   
0FC8   ED B0                  LDIR      
0FCA                COLDINIT:      
0FCA   21 DE 01               LD   hl,isysVars   
0FCD   11 E6 23               LD   de,sysVars   
0FD0   01 12 00               LD   bc,6 * 2 + 6   
0FD3   ED B0                  LDIR      
0FD5   21 00 23               LD   hl,vars   ; 52 vars LO HI
0FD8   06 34                  LD   b,26*2   
0FDA   AF                     XOR   a   
0FDB                COLDBOOT1:      
0FDB   77                     LD   (hl),a   
0FDC   23                     INC   hl   
0FDD   10 FC                  DJNZ   coldBoot1   
0FDF   DD 2A EA 23            LD   ix,(vNext)   
0FE3   FD 21 00 21            LD   iy,STACK   
0FE7   C9                     RET      
0FE8                COLDSTART:      
0FE8   31 00 21               LD   sp,STACK   
0FEB   CD C0 0F               CALL   coldBoot0   
0FEE   C3 F7 0F               JP   start1   
0FF1                START:       
0FF1   31 00 21               LD   sp,STACK   ; start Monty
0FF4   CD 9D 0F               CALL   init   ; setups
0FF7                START1:      
0FF7   21 0D 24               LD   hl,titleBuf   
0FFA   CD 4F 0F               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
0FFD                INTERPRET:      
0FFD   CD 86 0F               CALL   prompt   
1000   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
1003   21 00 21               LD   hl,TIB   
1006   22 E6 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
1009                INTERPRET2:      ; calculate nesting
1009   1E 00                  LD   e,0   ; initilize nesting value
100B   C5                     PUSH   bc   ; save offset into TIB,
100C                             ; bc is also the count of chars in TIB
100C   21 00 21               LD   hl,TIB   ; hl is start of TIB
100F   18 06                  JR   interpret4   
1011                INTERPRET3:      
1011   7E                     LD   a,(hl)   ; a = char in TIB
1012   23                     INC   hl   ; inc pointer into TIB
1013   0B                     DEC   bc   ; dec count of chars in TIB
1014   CD 54 0F               CALL   nesting   ; update nesting value
1017                INTERPRET4:      
1017   79                     LD   a,c   ; is count zero?
1018   B0                     OR   b   
1019   20 F6                  JR   nz,interpret3   ; if not loop
101B   C1                     POP   bc   ; restore offset into TIB
101C                INTERPRET5:      
101C   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
101F   FE 20                  CP   $20   ; compare to space
1021   30 14                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
1023   FE 00                  CP   NUL   ; is it end of string? NUL end of string
1025   28 31                  JR   z,interpret8   
1027   FE 0D                  CP   "\r"   ; carriage return? ascii 13
1029   28 1A                  JR   z,interpret7   ; if anything else its macro/control
102B   FE 08                  CP   CTRL_H   
102D   CA A9 10               JP   z,backSpace_   
1030   FE 0A                  CP   CTRL_J   
1032   CA B9 10               JP   z,reEdit_   
1035                INTERPRET5A:      
1035   18 D2                  JR   interpret2   
1037                INTERPRET6:      
1037   21 00 21               LD   hl,TIB   
103A   09                     ADD   hl,bc   
103B   77                     LD   (hl),a   ; store the character in textbuf
103C   03                     INC   bc   
103D   CD 85 00               CALL   putchar   ; echo character to screen
1040   CD 54 0F               CALL   nesting   
1043   18 D7                  JR   interpret5   ; wait for next character
1045                INTERPRET7:      
1045   21 00 21               LD   hl,TIB   
1048   09                     ADD   hl,bc   
1049   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
104B   23                     INC   hl   
104C   36 0A                  LD   (hl),"\n"   
104E   23                     INC   hl   
104F   03                     INC   bc   
1050   03                     INC   bc   
1051   CD 8F 0F               CALL   crlf   ; echo character to screen
1054   7B                     LD   a,e   ; if zero nesting append and ETX after \r
1055   B7                     OR   a   
1056   20 C4                  JR   nz,interpret5   
1058                INTERPRET8:      
1058   21 00 21               LD   hl,TIB   
105B   09                     ADD   hl,bc   
105C   22 E6 23               LD   (vTIBPtr),hl   
105F   01 00 21               LD   bc,TIB   
1062   ED 43 FB 23            LD   (vSavedIP),bc   ; save IP
1066   ED 73 FD 23            LD   (vSavedSP),sp   ; save SP
106A   DD 22 FF 23            LD   (vSavedNext),ix   ; save Next
106E   FD 22 01 24            LD   (vSavedBP),iy   ; save BP
1072   0B                     DEC   bc   
1073                NEXT:        
1073   03                     INC   bc   ; Increment the IP
1074   0A                     LD   a,(bc)   ; Get the next character and dispatch
1075   FE 20                  CP   " "   ; whitespace?
1077   28 FA                  JR   z,next   ; space? ignore
1079   38 0D                  JR   c,next1   
107B   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
107D   6F                     LD   l,a   ; index into table
107E   26 01                  LD   h,msb(opcodes)   ; start address of jump table
1080   6E                     LD   l,(hl)   ; get low jump address
1081   24                     INC   h   ; page 2
1082   FE BA                  CP   "Z" - "!" + 1 + $80   
1084   38 01                  JR   c,next0   
1086   24                     INC   h   ; page 3
1087                NEXT0:       
1087   E9                     JP   (hl)   ; Jump to routine
1088                NEXT1:       
1088   FE 00                  CP   NUL   ; end of input string?
108A   28 03                  JR   z,exit   
108C   C3 FD 0F               JP   interpret   ; no, other whitespace, macros?
108F                EXIT:        
108F   03                     INC   bc   
1090   60 69                  LD   hl,bc   
1092   E9                     JP   (hl)   
1093                RUN:         
1093   C1                     POP   bc   
1094   0B                     DEC   bc   
1095   DD E9                  JP   (ix)   
1097                ERROR:       
1097   E5                     PUSH   hl   
1098   CD 93 10               CALL   run   
109B   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
10A6   C3 FD 0F               JP   interpret   
10A9                BACKSPACE_:      
10A9   79                     LD   a,c   
10AA   B0                     OR   b   
10AB   CA 09 10               JP   z,interpret2   
10AE   0B                     DEC   bc   
10AF   CD 96 0F               CALL   printStr   
10B2   08 20 08 00            .CSTR   "\b \b"   
10B6   C3 09 10               JP   interpret2   
10B9                REEDIT_:      
10B9   CD 96 0F               CALL   printStr   
10BC   0D 3E 20 00            .CSTR   "\r> "   
10C0   21 00 21               LD   hl,TIB   
10C3   18 04                  JR   reEdit1   
10C5                REEDIT0:      
10C5   CD 85 00               CALL   putchar   
10C8   23                     INC   hl   
10C9                REEDIT1:      
10C9   7E                     LD   a,(hl)   
10CA   FE 0D                  CP   "\r"   
10CC   20 F7                  JR   nz,reEdit0   
10CE   11 00 21               LD   de,TIB   
10D1   B7                     OR   a   
10D2   ED 52                  SBC   hl,de   
10D4   44 4D                  LD   bc,hl   
10D6   C3 09 10               JP   interpret2   
10D9                F1:          
10D9                F2:          
10D9                F3:          
10D9                F4:          
10D9                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VTIBPTR:   DS   2   ; 
23E8                VBUFPTR:   DS   2   ; 
23EA                VNEXT:    DS   2   ; 
23EC                VHEAPPTR:   DS   2   ; 
23EE                VDEFINE:   DS   1   ; 
23EF                VRECUR:   DS   2   ; 
23F1                VDATAWIDTH:   DS   1   ; 
23F2                VNUMBASE:   DS   1   ; 
23F3                VSTRMODE:   DS   1   ; 
23F4                VHEXPREFIX:   DS   1   
23F5                          DS   1   
23F6                          DS   1   
23F7                             ; uninitialised sys variables (preserved)
23F7                VPOINTER:   DS   2   ; 
23F9                VREMAIN:   DS   2   ; 
23FB                VSAVEDIP:   DS   2   ; 
23FD                VSAVEDSP:   DS   2   ; 
23FF                VSAVEDNEXT:   DS   2   ; 
2401                VSAVEDBP:   DS   2   ; 
2403                             ; uninitialised sys variables (unpreserved)
2403                VTEMP1:   DS   2   ; 
2405                VTEMP2:   DS   2   ; 
2407                VTEMP3:   DS   2   ; 
2409                VLASTDEF:   DS   2   ; 
240B                TBPTR:    DS   2   ; reserved for tests
240D                TITLEBUF:   DS   20   
2421                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 15
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 172 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1452 IN MAIN.asm
                    > USED AT LINE 1462 IN MAIN.asm
                    > USED AT LINE 2523 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1467 IN MAIN.asm
                    > USED AT LINE 2364 IN MAIN.asm
                    > USED AT LINE 2545 IN MAIN.asm
                    > USED AT LINE 2629 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
                    > USED AT LINE 1244 IN MAIN.asm
                    > USED AT LINE 1903 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 1908 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 620 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
                    > USED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
                    > USED AT LINE 866 IN MAIN.asm
                    > USED AT LINE 874 IN MAIN.asm
                    > USED AT LINE 881 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 891 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
                    > USED AT LINE 928 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
                    > USED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 963 IN MAIN.asm
                    > USED AT LINE 968 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1444 IN MAIN.asm
                    > USED AT LINE 1446 IN MAIN.asm
                    > USED AT LINE 1448 IN MAIN.asm
                    > USED AT LINE 1527 IN MAIN.asm
                    > USED AT LINE 2526 IN MAIN.asm
                    > USED AT LINE 2594 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 2105 IN MAIN.asm
                    > USED AT LINE 2383 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2531 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2533 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2464 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 171 IN MAIN.asm
                    > USED AT LINE 2439 IN MAIN.asm
                    > USED AT LINE 2458 IN MAIN.asm
COLON_:             0204 DEFINED AT LINE 176 IN MAIN.asm
COMMA_:             0207 DEFINED AT LINE 179 IN MAIN.asm
DOLLAR_:            020A DEFINED AT LINE 182 IN MAIN.asm
DQUOTE_:            020D DEFINED AT LINE 185 IN MAIN.asm
QUOTE_:             020D DEFINED AT LINE 186 IN MAIN.asm
DOT_:               0210 DEFINED AT LINE 189 IN MAIN.asm
PERCENT_:           0213 DEFINED AT LINE 192 IN MAIN.asm
QUESTION_:          0216 DEFINED AT LINE 195 IN MAIN.asm
LPAREN_:            0219 DEFINED AT LINE 198 IN MAIN.asm
SLASH_:             021C DEFINED AT LINE 201 IN MAIN.asm
NUM_:               021F DEFINED AT LINE 204 IN MAIN.asm
SEMICOLON_:         0222 DEFINED AT LINE 207 IN MAIN.asm
BANG_:              0225 DEFINED AT LINE 210 IN MAIN.asm
BANG:               0225 DEFINED AT LINE 211 IN MAIN.asm
NOT:                0230 DEFINED AT LINE 219 IN MAIN.asm
                    > USED AT LINE 215 IN MAIN.asm
EQ_:                0236 DEFINED AT LINE 223 IN MAIN.asm
EQ:                 0236 DEFINED AT LINE 224 IN MAIN.asm
EQ0:                0240 DEFINED AT LINE 231 IN MAIN.asm
                    > USED AT LINE 228 IN MAIN.asm
EQ1:                0241 DEFINED AT LINE 233 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
GT_:                0245 DEFINED AT LINE 237 IN MAIN.asm
GT:                 0245 DEFINED AT LINE 238 IN MAIN.asm
LT_:                0250 DEFINED AT LINE 246 IN MAIN.asm
LT:                 0250 DEFINED AT LINE 247 IN MAIN.asm
LT1:                0259 DEFINED AT LINE 254 IN MAIN.asm
                    > USED AT LINE 245 IN MAIN.asm
HASH_:              0262 DEFINED AT LINE 262 IN MAIN.asm
HASH:               0262 DEFINED AT LINE 263 IN MAIN.asm
ARRAYINDEX:         0262 DEFINED AT LINE 264 IN MAIN.asm
ARRAYINDEX0:        026A DEFINED AT LINE 270 IN MAIN.asm
ARRAYINDEX1:        026B DEFINED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
ARRAYINDEX2:        0277 DEFINED AT LINE 281 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
RPAREN_:            027A DEFINED AT LINE 286 IN MAIN.asm
RPAREN:             027A DEFINED AT LINE 288 IN MAIN.asm
AMPER_:             0282 DEFINED AT LINE 296 IN MAIN.asm
AMPER:              0282 DEFINED AT LINE 297 IN MAIN.asm
AND:                0282 DEFINED AT LINE 298 IN MAIN.asm
MINUS_:             028C DEFINED AT LINE 316 IN MAIN.asm
MINUS:              028C DEFINED AT LINE 317 IN MAIN.asm
SUB:                0298 DEFINED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 322 IN MAIN.asm
SUB1:               02A2 DEFINED AT LINE 332 IN MAIN.asm
                    > USED AT LINE 329 IN MAIN.asm
SUB2:               02A9 DEFINED AT LINE 338 IN MAIN.asm
                    > USED AT LINE 335 IN MAIN.asm
SUB3:               02AC DEFINED AT LINE 341 IN MAIN.asm
                    > USED AT LINE 995 IN MAIN.asm
                    > USED AT LINE 1963 IN MAIN.asm
                    > USED AT LINE 1988 IN MAIN.asm
STAR_:              02B4 DEFINED AT LINE 347 IN MAIN.asm
STAR:               02B4 DEFINED AT LINE 348 IN MAIN.asm
MUL:                02BC DEFINED AT LINE 354 IN MAIN.asm
MUL2:               02BE DEFINED AT LINE 357 IN MAIN.asm
MUL3:               02C6 DEFINED AT LINE 362 IN MAIN.asm
                    > USED AT LINE 371 IN MAIN.asm
PLUS_:              02D8 DEFINED AT LINE 377 IN MAIN.asm
PLUS:               02D8 DEFINED AT LINE 378 IN MAIN.asm
ADD:                02D8 DEFINED AT LINE 379 IN MAIN.asm
ADD1:               02E3 DEFINED AT LINE 387 IN MAIN.asm
                    > USED AT LINE 383 IN MAIN.asm
ADD3:               02E7 DEFINED AT LINE 392 IN MAIN.asm
                    > USED AT LINE 307 IN MAIN.asm
                    > USED AT LINE 373 IN MAIN.asm
                    > USED AT LINE 580 IN MAIN.asm
                    > USED AT LINE 1286 IN MAIN.asm
                    > USED AT LINE 1544 IN MAIN.asm
ADD4:               02F1 DEFINED AT LINE 400 IN MAIN.asm
                    > USED AT LINE 396 IN MAIN.asm
UPCASE_:            02F4 DEFINED AT LINE 404 IN MAIN.asm
UPCASE:             02F4 DEFINED AT LINE 405 IN MAIN.asm
LOWCASE_:           0300 DEFINED AT LINE 414 IN MAIN.asm
LOWCASE:            0300 DEFINED AT LINE 415 IN MAIN.asm
IDENT1:             0305 DEFINED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 408 IN MAIN.asm
LBRACK_:            0312 DEFINED AT LINE 431 IN MAIN.asm
LBRACK:             0312 DEFINED AT LINE 432 IN MAIN.asm
ARRAYSTART:         0312 DEFINED AT LINE 433 IN MAIN.asm
BACKSLASH_:         032E DEFINED AT LINE 448 IN MAIN.asm
BACKSLASH:          032E DEFINED AT LINE 449 IN MAIN.asm
LAMBDA:             032E DEFINED AT LINE 450 IN MAIN.asm
LAMBDA1:            0333 DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
LAMBDA2:            0343 DEFINED AT LINE 462 IN MAIN.asm
                    > USED AT LINE 459 IN MAIN.asm
RBRACK_:            034F DEFINED AT LINE 470 IN MAIN.asm
RBRACK:             034F DEFINED AT LINE 471 IN MAIN.asm
ARRAYEND:           034F DEFINED AT LINE 472 IN MAIN.asm
ARRAYEND1:          036B DEFINED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
ARRAYEND2:          037B DEFINED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 495 IN MAIN.asm
ARRAYEND3:          0380 DEFINED AT LINE 503 IN MAIN.asm
                    > USED AT LINE 488 IN MAIN.asm
CARET_:             039F DEFINED AT LINE 524 IN MAIN.asm
CARET:              039F DEFINED AT LINE 528 IN MAIN.asm
GO:                 039F DEFINED AT LINE 529 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03A0 DEFINED AT LINE 531 IN MAIN.asm
                    > USED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 1581 IN MAIN.asm
                    > USED AT LINE 1751 IN MAIN.asm
GO2:                03A6 DEFINED AT LINE 536 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
GRAVE_:             03B5 DEFINED AT LINE 545 IN MAIN.asm
GRAVE:              03B5 DEFINED AT LINE 546 IN MAIN.asm
PRINTLITERAL:       03B5 DEFINED AT LINE 547 IN MAIN.asm
PRINTLITERAL0:      03BC DEFINED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
PRINTLITERAL1:      03BF DEFINED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 550 IN MAIN.asm
LBRACE_:            03CB DEFINED AT LINE 562 IN MAIN.asm
LBRACE:             03CB DEFINED AT LINE 563 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
PIPE_:              03D0 DEFINED AT LINE 569 IN MAIN.asm
PIPE:               03D0 DEFINED AT LINE 570 IN MAIN.asm
OR:                 03D0 DEFINED AT LINE 571 IN MAIN.asm
RBRACE_:            03DB DEFINED AT LINE 582 IN MAIN.asm
TILDE_:             03DE DEFINED AT LINE 586 IN MAIN.asm
UNDERSCORE_:        03E1 DEFINED AT LINE 589 IN MAIN.asm
CHAR:               03E1 DEFINED AT LINE 590 IN MAIN.asm
AT_:                03E9 DEFINED AT LINE 598 IN MAIN.asm
AT:                 03E9 DEFINED AT LINE 599 IN MAIN.asm
ADDR:               03E9 DEFINED AT LINE 600 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 611 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 612 IN MAIN.asm
PRINTCHAR:          040F DEFINED AT LINE 625 IN MAIN.asm
                    > USED AT LINE 617 IN MAIN.asm
PRINTSTRING:        041E DEFINED AT LINE 636 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
PRINTSTRING0:       0425 DEFINED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 647 IN MAIN.asm
PRINTSTRING1:       0428 DEFINED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
PRINTNUMBER:        0433 DEFINED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 621 IN MAIN.asm
PRINTDEC:           043E DEFINED AT LINE 661 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
PRINTDEC1:          044C DEFINED AT LINE 669 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
PRINTDEC2:          045B DEFINED AT LINE 681 IN MAIN.asm
                    > USED AT LINE 670 IN MAIN.asm
PRINTDEC3:          046B DEFINED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 683 IN MAIN.asm
PRINTDEC4:          048B DEFINED AT LINE 709 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
                    > USED AT LINE 700 IN MAIN.asm
                    > USED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 704 IN MAIN.asm
                    > USED AT LINE 707 IN MAIN.asm
PRINTDEC5:          048D DEFINED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 714 IN MAIN.asm
PRINTDEC6:          049D DEFINED AT LINE 723 IN MAIN.asm
                    > USED AT LINE 718 IN MAIN.asm
PRINTDEC7:          049E DEFINED AT LINE 725 IN MAIN.asm
                    > USED AT LINE 722 IN MAIN.asm
PRINTHEX:           04A4 DEFINED AT LINE 736 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
PRINTHEX1:          04B0 DEFINED AT LINE 743 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
PRINTHEX2:          04BB DEFINED AT LINE 750 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
PRINTHEX3:          04CA DEFINED AT LINE 759 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 752 IN MAIN.asm
PRINTHEX4:          04D3 DEFINED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 782 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 783 IN MAIN.asm
COMMAND_A_:         0526 DEFINED AT LINE 819 IN MAIN.asm
COMMAND_B_:         0538 DEFINED AT LINE 833 IN MAIN.asm
COMMAND_D_:         0544 DEFINED AT LINE 843 IN MAIN.asm
COMMAND_F_:         054A DEFINED AT LINE 849 IN MAIN.asm
COMMAND_H_:         0565 DEFINED AT LINE 869 IN MAIN.asm
COMMAND_I_:         056E DEFINED AT LINE 878 IN MAIN.asm
COMMAND_M_:         0574 DEFINED AT LINE 884 IN MAIN.asm
OUTPUT_:            057A DEFINED AT LINE 890 IN MAIN.asm
COMMAND_P_:         057D DEFINED AT LINE 894 IN MAIN.asm
COMMAND_Q_:         0580 DEFINED AT LINE 899 IN MAIN.asm
COMMAND_R_:         0586 DEFINED AT LINE 905 IN MAIN.asm
COMMAND_S_:         0592 DEFINED AT LINE 915 IN MAIN.asm
TRUE_:              05A7 DEFINED AT LINE 931 IN MAIN.asm
COMMAND_V_:         05AA DEFINED AT LINE 935 IN MAIN.asm
COMMAND_W_:         05BF DEFINED AT LINE 951 IN MAIN.asm
XOR_:               05C5 DEFINED AT LINE 957 IN MAIN.asm
COMMAND_NOP_:       05C8 DEFINED AT LINE 962 IN MAIN.asm
COMMAND_DEFAULT_:   05CB DEFINED AT LINE 967 IN MAIN.asm
NOP:                05CE DEFINED AT LINE 973 IN MAIN.asm
                    > USED AT LINE 964 IN MAIN.asm
DIV:                05D0 DEFINED AT LINE 977 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
DIV2:               05DA DEFINED AT LINE 986 IN MAIN.asm
                    > USED AT LINE 983 IN MAIN.asm
ABSOLUTE:           05EB DEFINED AT LINE 999 IN MAIN.asm
                    > USED AT LINE 821 IN MAIN.asm
ABSOLUTE1:          05F6 DEFINED AT LINE 1009 IN MAIN.asm
                    > USED AT LINE 1002 IN MAIN.asm
ADDROF:             05F9 DEFINED AT LINE 1015 IN MAIN.asm
                    > USED AT LINE 823 IN MAIN.asm
ADDROF1:            060D DEFINED AT LINE 1027 IN MAIN.asm
                    > USED AT LINE 1023 IN MAIN.asm
ADDROF2:            0618 DEFINED AT LINE 1036 IN MAIN.asm
                    > USED AT LINE 1019 IN MAIN.asm
                    > USED AT LINE 1021 IN MAIN.asm
                    > USED AT LINE 1026 IN MAIN.asm
ARRAYLENGTH:        061A DEFINED AT LINE 1041 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 44
ARRAYLENGTH1:       0620 DEFINED AT LINE 1048 IN MAIN.asm
                    > USED AT LINE 1059 IN MAIN.asm
                    > USED AT LINE 1062 IN MAIN.asm
ARRAYSIZE:          0623 DEFINED AT LINE 1054 IN MAIN.asm
                    > USED AT LINE 829 IN MAIN.asm
PERFORMM_1502S1055: 062A DEFINED AT LINE 45
                    > USED AT LINE 43
BREAK:              0637 DEFINED AT LINE 1067 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
BREAK1:             063E DEFINED AT LINE 1073 IN MAIN.asm
                    > USED AT LINE 1071 IN MAIN.asm
BYTEMODE:           0651 DEFINED AT LINE 1085 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
BYTEMODE1:          0653 DEFINED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1273 IN MAIN.asm
COMMENT:            0658 DEFINED AT LINE 1092 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
                    > USED AT LINE 1096 IN MAIN.asm
CONSTHEAPSTART:     0661 DEFINED AT LINE 1100 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
CONSTTIBSTART:      0667 DEFINED AT LINE 1104 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
CONSTBUFSTART:      066D DEFINED AT LINE 1108 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
DECBASE:            0673 DEFINED AT LINE 1112 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
DECBASE1:           0675 DEFINED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
                    > USED AT LINE 1126 IN MAIN.asm
HEXBASE:            067A DEFINED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 873 IN MAIN.asm
HEXPREFIX:          067F DEFINED AT LINE 1122 IN MAIN.asm
                    > USED AT LINE 871 IN MAIN.asm
ERROR1:             0687 DEFINED AT LINE 1128 IN MAIN.asm
                    > USED AT LINE 831 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 888 IN MAIN.asm
                    > USED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 903 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 929 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
                    > USED AT LINE 955 IN MAIN.asm
INPUT:              068D DEFINED AT LINE 1134 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
OUTPUT:             0698 DEFINED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
QUIT:               06A1 DEFINED AT LINE 1157 IN MAIN.asm
                    > USED AT LINE 901 IN MAIN.asm
QUIT1:              06A8 DEFINED AT LINE 1163 IN MAIN.asm
                    > USED AT LINE 1161 IN MAIN.asm
RECUR:              06AB DEFINED AT LINE 1166 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
REMAIN:             06B1 DEFINED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
STRINGBEGIN:        06B7 DEFINED AT LINE 1176 IN MAIN.asm
                    > USED AT LINE 917 IN MAIN.asm
STRINGEND:          06BF DEFINED AT LINE 1181 IN MAIN.asm
                    > USED AT LINE 921 IN MAIN.asm
STRINGEND1:         06E6 DEFINED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 1179 IN MAIN.asm
STRINGLENGTH:       06EE DEFINED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 925 IN MAIN.asm
                    > USED AT LINE 44
STRINGLENGTH1:      06F4 DEFINED AT LINE 1208 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
STRINGLENGTH2:      06F6 DEFINED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 1207 IN MAIN.asm
STRINGLENGTH3:      06FA DEFINED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
STRINGSIZE:         06FD DEFINED AT LINE 1219 IN MAIN.asm
                    > USED AT LINE 927 IN MAIN.asm
PERFORMM_1648S1220: 0704 DEFINED AT LINE 45
                    > USED AT LINE 43
STRINGCOMPARE:      0709 DEFINED AT LINE 1228 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
STRINGCOMPARE1:     070B DEFINED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1239 IN MAIN.asm
STRINGCOMPARE2:     0716 DEFINED AT LINE 1240 IN MAIN.asm
                    > USED AT LINE 1234 IN MAIN.asm
STRINGCOMPARE3:     071B DEFINED AT LINE 1243 IN MAIN.asm
                    > USED AT LINE 1236 IN MAIN.asm
STRINGCOMPARE4:     071E DEFINED AT LINE 1245 IN MAIN.asm
                    > USED AT LINE 1242 IN MAIN.asm
VARBUFPTR:          0721 DEFINED AT LINE 1249 IN MAIN.asm
                    > USED AT LINE 937 IN MAIN.asm
VARHEAPPTR:         072A DEFINED AT LINE 1254 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
VARTIBPTR:          0733 DEFINED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 941 IN MAIN.asm
VARIABLE:           073C DEFINED AT LINE 1264 IN MAIN.asm
                    > USED AT LINE 603 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
                    > USED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1262 IN MAIN.asm
CONSTANT:           073F DEFINED AT LINE 1266 IN MAIN.asm
                    > USED AT LINE 1102 IN MAIN.asm
                    > USED AT LINE 1106 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
WORDMODE:           0742 DEFINED AT LINE 1271 IN MAIN.asm
                    > USED AT LINE 953 IN MAIN.asm
XOR:                0747 DEFINED AT LINE 1276 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
XOR1:               0748 DEFINED AT LINE 1278 IN MAIN.asm
RANGESRC:           0752 DEFINED AT LINE 32
                    > USED AT LINE 911 IN MAIN.asm
RANGESRCM_1713S1294: 0761 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          07E4 DEFINED AT LINE 32
                    > USED AT LINE 825 IN MAIN.asm
ARRAYITERM_1732S1314: 07F1 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         0864 DEFINED AT LINE 32
                    > USED AT LINE 923 IN MAIN.asm
STRINGITERM_1751S1334: 0871 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                08EB DEFINED AT LINE 32
                    > USED AT LINE 886 IN MAIN.asm
MAPM_1771S1356:     08F8 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             092C DEFINED AT LINE 32
                    > USED AT LINE 857 IN MAIN.asm
FILTERM_1785S1371:  093A DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               0989 DEFINED AT LINE 32
                    > USED AT LINE 851 IN MAIN.asm
FOLDM_1804S1391:    0998 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            09DA DEFINED AT LINE 32
                    > USED AT LINE 853 IN MAIN.asm
FOREACHM_1818S1406: 09E8 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0A25 DEFINED AT LINE 32
                    > USED AT LINE 855 IN MAIN.asm
FUNCSRCM_1832S1421: 0A31 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0A5E DEFINED AT LINE 32
                    > USED AT LINE 615 IN MAIN.asm
PRINTARRAYM_1842S1432: 0A6C DEFINED AT LINE 39
                    > USED AT LINE 35
COMMA:              0AA6 DEFINED AT LINE 1442 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
READCHAR:           0AB5 DEFINED AT LINE 1451 IN MAIN.asm
                    > USED AT LINE 1445 IN MAIN.asm
READSTRING:         0ABE DEFINED AT LINE 1458 IN MAIN.asm
                    > USED AT LINE 1447 IN MAIN.asm
                    > USED AT LINE 44
READSTRING1:        0AC3 DEFINED AT LINE 1461 IN MAIN.asm
                    > USED AT LINE 1468 IN MAIN.asm
READSTRING2:        0AD1 DEFINED AT LINE 1469 IN MAIN.asm
                    > USED AT LINE 1464 IN MAIN.asm
READNUMBER:         0ADA DEFINED AT LINE 1476 IN MAIN.asm
                    > USED AT LINE 1449 IN MAIN.asm
PERFORMM_1883S1478: 0AE3 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER1:        0B01 DEFINED AT LINE 1494 IN MAIN.asm
                    > USED AT LINE 1485 IN MAIN.asm
                    > USED AT LINE 1489 IN MAIN.asm
                    > USED AT LINE 1491 IN MAIN.asm
PERFORMM_1900S1495: 0B08 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER2:        0B0B DEFINED AT LINE 1498 IN MAIN.asm
                    > USED AT LINE 1487 IN MAIN.asm
PERFORMM_1904S1499: 0B12 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER3:        0B13 DEFINED AT LINE 1501 IN MAIN.asm
                    > USED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 1497 IN MAIN.asm
COLON:              0B19 DEFINED AT LINE 1507 IN MAIN.asm
                    > USED AT LINE 177 IN MAIN.asm
DEFINESTART:        0B26 DEFINED AT LINE 1515 IN MAIN.asm
                    > USED AT LINE 1511 IN MAIN.asm
SEMICOLON:          0B2F DEFINED AT LINE 1521 IN MAIN.asm
                    > USED AT LINE 208 IN MAIN.asm
DEFINEEND:          0B2F DEFINED AT LINE 1522 IN MAIN.asm
DEFINEEND1:         0B41 DEFINED AT LINE 1531 IN MAIN.asm
                    > USED AT LINE 1526 IN MAIN.asm
TILDE:              0B43 DEFINED AT LINE 1535 IN MAIN.asm
                    > USED AT LINE 587 IN MAIN.asm
INVERT:             0B43 DEFINED AT LINE 1536 IN MAIN.asm
DOLLAR:             0B4D DEFINED AT LINE 1547 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
HEXNUM:             0B4D DEFINED AT LINE 1548 IN MAIN.asm
                    > USED AT LINE 44
HEXNUM1:            0B50 DEFINED AT LINE 1550 IN MAIN.asm
                    > USED AT LINE 1567 IN MAIN.asm
HEXNUM2:            0B58 DEFINED AT LINE 1556 IN MAIN.asm
                    > USED AT LINE 1554 IN MAIN.asm
QUESTION:           0B6A DEFINED AT LINE 1571 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
IF:                 0B6A DEFINED AT LINE 1572 IN MAIN.asm
QUOTE:              0B77 DEFINED AT LINE 1585 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
STRING:             0B77 DEFINED AT LINE 1586 IN MAIN.asm
STRING1:            0B80 DEFINED AT LINE 1593 IN MAIN.asm
                    > USED AT LINE 1601 IN MAIN.asm
STRING2:            0B83 DEFINED AT LINE 1597 IN MAIN.asm
                    > USED AT LINE 1592 IN MAIN.asm
STRING3:            0B89 DEFINED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 1600 IN MAIN.asm
PERCENT:            0B91 DEFINED AT LINE 1612 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
ARG:                0B91 DEFINED AT LINE 1613 IN MAIN.asm
ARG0:               0BAD DEFINED AT LINE 1632 IN MAIN.asm
                    > USED AT LINE 1638 IN MAIN.asm
ARG0A:              0BB6 DEFINED AT LINE 1640 IN MAIN.asm
                    > USED AT LINE 1619 IN MAIN.asm
                    > USED AT LINE 1624 IN MAIN.asm
ARG1:               0BBB DEFINED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 1636 IN MAIN.asm
ARG1A:              0BC3 DEFINED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 1642 IN MAIN.asm
NUM:                0BC6 DEFINED AT LINE 1655 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
                    > USED AT LINE 324 IN MAIN.asm
                    > USED AT LINE 44
NUM0:               0BCF DEFINED AT LINE 1661 IN MAIN.asm
                    > USED AT LINE 1659 IN MAIN.asm
NUM1:               0BD0 DEFINED AT LINE 1663 IN MAIN.asm
                    > USED AT LINE 1680 IN MAIN.asm
NUM2:               0BE8 DEFINED AT LINE 1681 IN MAIN.asm
                    > USED AT LINE 1558 IN MAIN.asm
                    > USED AT LINE 1560 IN MAIN.asm
                    > USED AT LINE 1666 IN MAIN.asm
                    > USED AT LINE 1668 IN MAIN.asm
NUM3:               0BF3 DEFINED AT LINE 1689 IN MAIN.asm
                    > USED AT LINE 1684 IN MAIN.asm
RBRACE:             0BF6 DEFINED AT LINE 1694 IN MAIN.asm
                    > USED AT LINE 583 IN MAIN.asm
BLOCKEND:           0BF6 DEFINED AT LINE 1695 IN MAIN.asm
                    > USED AT LINE 1082 IN MAIN.asm
                    > USED AT LINE 1164 IN MAIN.asm
BLOCKEND1:          0C28 DEFINED AT LINE 1717 IN MAIN.asm
                    > USED AT LINE 1710 IN MAIN.asm
BLOCKEND2:          0C34 DEFINED AT LINE 1724 IN MAIN.asm
                    > USED AT LINE 1716 IN MAIN.asm
BLOCKEND3:          0C46 DEFINED AT LINE 1738 IN MAIN.asm
                    > USED AT LINE 1730 IN MAIN.asm
BLOCKEND4:          0C5A DEFINED AT LINE 1748 IN MAIN.asm
                    > USED AT LINE 1746 IN MAIN.asm
GOBLOCK:            0C63 DEFINED AT LINE 1753 IN MAIN.asm
                    > USED AT LINE 539 IN MAIN.asm
                    > USED AT LINE 543 IN MAIN.asm
GOBLOCK2:           0C88 DEFINED AT LINE 1770 IN MAIN.asm
                    > USED AT LINE 1851 IN MAIN.asm
GOBLOCK3:           0C92 DEFINED AT LINE 1776 IN MAIN.asm
GOFUNC:             0C96 DEFINED AT LINE 1780 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
GOFUNC1:            0CAF DEFINED AT LINE 1799 IN MAIN.asm
                    > USED AT LINE 1809 IN MAIN.asm
GOFUNC2:            0CB5 DEFINED AT LINE 1806 IN MAIN.asm
                    > USED AT LINE 1798 IN MAIN.asm
GOFUNC3:            0CC0 DEFINED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 1788 IN MAIN.asm
GOFUNC4:            0CD8 DEFINED AT LINE 1829 IN MAIN.asm
                    > USED AT LINE 1826 IN MAIN.asm
GOFUNC5:            0CDB DEFINED AT LINE 1832 IN MAIN.asm
                    > USED AT LINE 1838 IN MAIN.asm
GOFUNC6:            0CDE DEFINED AT LINE 1836 IN MAIN.asm
                    > USED AT LINE 1831 IN MAIN.asm
GOFUNC7:            0CE1 DEFINED AT LINE 1839 IN MAIN.asm
GOFUNC8:            0CE5 DEFINED AT LINE 1844 IN MAIN.asm
                    > USED AT LINE 1764 IN MAIN.asm
                    > USED AT LINE 1828 IN MAIN.asm
ASSIGN:             0CF0 DEFINED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
ASSIGN0:            0CF2 DEFINED AT LINE 1858 IN MAIN.asm
                    > USED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 343 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
                    > USED AT LINE 401 IN MAIN.asm
ASSIGN1:            0CF6 DEFINED AT LINE 1861 IN MAIN.asm
                    > USED AT LINE 1530 IN MAIN.asm
ASSIGN2:            0CFF DEFINED AT LINE 1868 IN MAIN.asm
                    > USED AT LINE 1865 IN MAIN.asm
EQUALS:             0D01 DEFINED AT LINE 1873 IN MAIN.asm
                    > USED AT LINE 235 IN MAIN.asm
NOTEQUALS:          0D08 DEFINED AT LINE 1879 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
LESSTHANEQ:         0D0F DEFINED AT LINE 1887 IN MAIN.asm
                    > USED AT LINE 256 IN MAIN.asm
LESSTHAN:           0D14 DEFINED AT LINE 1894 IN MAIN.asm
                    > USED AT LINE 258 IN MAIN.asm
LESSTHAN1:          0D19 DEFINED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 1890 IN MAIN.asm
TRUE1:              0D1C DEFINED AT LINE 1902 IN MAIN.asm
                    > USED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 1882 IN MAIN.asm
NULL1:              0D22 DEFINED AT LINE 1906 IN MAIN.asm
FALSE1:             0D22 DEFINED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 867 IN MAIN.asm
                    > USED AT LINE 1877 IN MAIN.asm
                    > USED AT LINE 1883 IN MAIN.asm
                    > USED AT LINE 1897 IN MAIN.asm
                    > USED AT LINE 1900 IN MAIN.asm
SPREAD:             0D28 DEFINED AT LINE 1912 IN MAIN.asm
                    > USED AT LINE 352 IN MAIN.asm
SPREAD1:            0D35 DEFINED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 1937 IN MAIN.asm
SPREAD2:            0D40 DEFINED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 1928 IN MAIN.asm
SPREAD3:            0D42 DEFINED AT LINE 1934 IN MAIN.asm
                    > USED AT LINE 1921 IN MAIN.asm
SHIFTLEFT:          0D4C DEFINED AT LINE 1944 IN MAIN.asm
                    > USED AT LINE 251 IN MAIN.asm
SHIFTLEFT2:         0D56 DEFINED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 1950 IN MAIN.asm
SHIFTLEFT3:         0D5E DEFINED AT LINE 1958 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
SHIFTLEFT4:         0D5F DEFINED AT LINE 1960 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
SHIFTRIGHT:         0D68 DEFINED AT LINE 1968 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
SHIFTRIGHT2:        0D72 DEFINED AT LINE 1977 IN MAIN.asm
                    > USED AT LINE 1974 IN MAIN.asm
SHIFTRIGHT3:        0D7A DEFINED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 1986 IN MAIN.asm
SHIFTRIGHT4:        0D7E DEFINED AT LINE 1985 IN MAIN.asm
                    > USED AT LINE 1981 IN MAIN.asm
DIVIDE:             0D87 DEFINED AT LINE 1994 IN MAIN.asm
                    > USED AT LINE 990 IN MAIN.asm
DIVIDE1:            0D8C DEFINED AT LINE 1997 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
DIVIDE2:            0D99 DEFINED AT LINE 2005 IN MAIN.asm
                    > USED AT LINE 2002 IN MAIN.asm
DIVIDE3:            0D9A DEFINED AT LINE 2007 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
DOTNEXT:            0DA0 DEFINED AT LINE 2013 IN MAIN.asm
                    > USED AT LINE 560 IN MAIN.asm
                    > USED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
DOTNEXT1:           0DA8 DEFINED AT LINE 2018 IN MAIN.asm
                    > USED AT LINE 2016 IN MAIN.asm
PARSEARGS:          0DBA DEFINED AT LINE 2029 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
PARSEARGS1:         0DC4 DEFINED AT LINE 2036 IN MAIN.asm
                    > USED AT LINE 2057 IN MAIN.asm
PARSEARGS1A:        0DCC DEFINED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2039 IN MAIN.asm
PARSEARGS2:         0DD4 DEFINED AT LINE 2047 IN MAIN.asm
PARSEARGS3:         0DDC DEFINED AT LINE 2055 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
                    > USED AT LINE 2053 IN MAIN.asm
PARSEARGS4:         0DDF DEFINED AT LINE 2058 IN MAIN.asm
                    > USED AT LINE 2044 IN MAIN.asm
                    > USED AT LINE 2046 IN MAIN.asm
PARSEARGS5:         0DE5 DEFINED AT LINE 2064 IN MAIN.asm
                    > USED AT LINE 2062 IN MAIN.asm
PARSEBLOCK:         0DF0 DEFINED AT LINE 2077 IN MAIN.asm
                    > USED AT LINE 463 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
PARSEBLOCK1:        0DF4 DEFINED AT LINE 2081 IN MAIN.asm
                    > USED AT LINE 2085 IN MAIN.asm
                    > USED AT LINE 2107 IN MAIN.asm
                    > USED AT LINE 2110 IN MAIN.asm
                    > USED AT LINE 2115 IN MAIN.asm
                    > USED AT LINE 2119 IN MAIN.asm
PARSEBLOCK2:        0E20 DEFINED AT LINE 2108 IN MAIN.asm
                    > USED AT LINE 2095 IN MAIN.asm
                    > USED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2099 IN MAIN.asm
PARSEBLOCK3:        0E23 DEFINED AT LINE 2111 IN MAIN.asm
                    > USED AT LINE 2102 IN MAIN.asm
                    > USED AT LINE 2104 IN MAIN.asm
                    > USED AT LINE 2106 IN MAIN.asm
PARSEBLOCK4:        0E2B DEFINED AT LINE 2117 IN MAIN.asm
                    > USED AT LINE 2088 IN MAIN.asm
                    > USED AT LINE 2090 IN MAIN.asm
                    > USED AT LINE 2092 IN MAIN.asm
PARSEBLOCK5:        0E2E DEFINED AT LINE 2120 IN MAIN.asm
                    > USED AT LINE 2116 IN MAIN.asm
PARSEBLOCK6:        0E56 DEFINED AT LINE 2139 IN MAIN.asm
                    > USED AT LINE 2126 IN MAIN.asm
CREATEFUNC:         0E5A DEFINED AT LINE 2147 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
CREATEFUNC0:        0E79 DEFINED AT LINE 2161 IN MAIN.asm
                    > USED AT LINE 2157 IN MAIN.asm
CREATEFUNC1:        0E91 DEFINED AT LINE 2180 IN MAIN.asm
                    > USED AT LINE 2176 IN MAIN.asm
CREATEFUNC2:        0EA4 DEFINED AT LINE 2193 IN MAIN.asm
                    > USED AT LINE 2189 IN MAIN.asm
CREATEFUNC2A:       0EC3 DEFINED AT LINE 2219 IN MAIN.asm
                    > USED AT LINE 2206 IN MAIN.asm
CREATEFUNC3:        0ED2 DEFINED AT LINE 2231 IN MAIN.asm
                    > USED AT LINE 2241 IN MAIN.asm
CREATEFUNC4:        0EDD DEFINED AT LINE 2242 IN MAIN.asm
CREATEFUNC5:        0EDE DEFINED AT LINE 2244 IN MAIN.asm
                    > USED AT LINE 2160 IN MAIN.asm
LOWERCASETABLE:     0EFC DEFINED AT LINE 2274 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
LOWERCASETABLE1:    0F06 DEFINED AT LINE 2281 IN MAIN.asm
                    > USED AT LINE 2290 IN MAIN.asm
LOWERCASETABLE2:    0F0D DEFINED AT LINE 2287 IN MAIN.asm
                    > USED AT LINE 2278 IN MAIN.asm
                    > USED AT LINE 2280 IN MAIN.asm
COMMANDTABLE:       0F12 DEFINED AT LINE 2296 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
COMMANDTABLE1:      0F13 DEFINED AT LINE 2298 IN MAIN.asm
                    > USED AT LINE 2286 IN MAIN.asm
COMMANDTABLE2:      0F14 DEFINED AT LINE 2300 IN MAIN.asm
                    > USED AT LINE 2313 IN MAIN.asm
COMMANDTABLE3:      0F1B DEFINED AT LINE 2306 IN MAIN.asm
                    > USED AT LINE 2303 IN MAIN.asm
COMMANDTABLE4:      0F24 DEFINED AT LINE 2314 IN MAIN.asm
                    > USED AT LINE 2305 IN MAIN.asm
                    > USED AT LINE 2309 IN MAIN.asm
CMDTABLE:           0F2A DEFINED AT LINE 2327 IN MAIN.asm
                    > USED AT LINE 1443 IN MAIN.asm
CMDTABLE1:          0F2B DEFINED AT LINE 2329 IN MAIN.asm
CMDTABLE2:          0F2B DEFINED AT LINE 2330 IN MAIN.asm
                    > USED AT LINE 2354 IN MAIN.asm
CMDTABLE3:          0F38 DEFINED AT LINE 2342 IN MAIN.asm
CMDTABLE4:          0F41 DEFINED AT LINE 2350 IN MAIN.asm
                    > USED AT LINE 2341 IN MAIN.asm
CMDTABLE5:          0F46 DEFINED AT LINE 2355 IN MAIN.asm
                    > USED AT LINE 2337 IN MAIN.asm
                    > USED AT LINE 2345 IN MAIN.asm
                    > USED AT LINE 2349 IN MAIN.asm
PUTSTR0:            0F4B DEFINED AT LINE 2363 IN MAIN.asm
                    > USED AT LINE 2369 IN MAIN.asm
PUTSTR:             0F4F DEFINED AT LINE 2366 IN MAIN.asm
                    > USED AT LINE 2024 IN MAIN.asm
                    > USED AT LINE 2433 IN MAIN.asm
                    > USED AT LINE 2490 IN MAIN.asm
NESTING:            0F54 DEFINED AT LINE 2382 IN MAIN.asm
                    > USED AT LINE 2512 IN MAIN.asm
                    > USED AT LINE 2546 IN MAIN.asm
NESTING0:           0F5E DEFINED AT LINE 2388 IN MAIN.asm
                    > USED AT LINE 2384 IN MAIN.asm
                    > USED AT LINE 2386 IN MAIN.asm
NESTING1A:          0F65 DEFINED AT LINE 2393 IN MAIN.asm
                    > USED AT LINE 2390 IN MAIN.asm
NESTING1:           0F68 DEFINED AT LINE 2396 IN MAIN.asm
                    > USED AT LINE 2387 IN MAIN.asm
NESTING2:           0F77 DEFINED AT LINE 2405 IN MAIN.asm
                    > USED AT LINE 2400 IN MAIN.asm
                    > USED AT LINE 2402 IN MAIN.asm
NESTING3:           0F79 DEFINED AT LINE 2408 IN MAIN.asm
                    > USED AT LINE 2404 IN MAIN.asm
NESTING4:           0F84 DEFINED AT LINE 2415 IN MAIN.asm
                    > USED AT LINE 2410 IN MAIN.asm
                    > USED AT LINE 2412 IN MAIN.asm
PROMPT:             0F86 DEFINED AT LINE 2419 IN MAIN.asm
                    > USED AT LINE 2494 IN MAIN.asm
CRLF:               0F8F DEFINED AT LINE 2424 IN MAIN.asm
                    > USED AT LINE 2559 IN MAIN.asm
PRINTSTR:           0F96 DEFINED AT LINE 2431 IN MAIN.asm
                    > USED AT LINE 2420 IN MAIN.asm
                    > USED AT LINE 2425 IN MAIN.asm
                    > USED AT LINE 2619 IN MAIN.asm
                    > USED AT LINE 2624 IN MAIN.asm
INIT:               0F9D DEFINED AT LINE 2438 IN MAIN.asm
                    > USED AT LINE 2487 IN MAIN.asm
INIT1:              0FA5 DEFINED AT LINE 2442 IN MAIN.asm
                    > USED AT LINE 2448 IN MAIN.asm
WARMINIT:           0FAD DEFINED AT LINE 2450 IN MAIN.asm
COLDBOOT0:          0FC0 DEFINED AT LINE 2457 IN MAIN.asm
                    > USED AT LINE 2445 IN MAIN.asm
                    > USED AT LINE 2483 IN MAIN.asm
COLDINIT:           0FCA DEFINED AT LINE 2463 IN MAIN.asm
COLDBOOT1:          0FDB DEFINED AT LINE 2472 IN MAIN.asm
                    > USED AT LINE 2475 IN MAIN.asm
COLDSTART:          0FE8 DEFINED AT LINE 2481 IN MAIN.asm
                    > USED AT LINE 835 IN MAIN.asm
START:              0FF1 DEFINED AT LINE 2485 IN MAIN.asm
                    > USED AT LINE 7
START1:             0FF7 DEFINED AT LINE 2488 IN MAIN.asm
                    > USED AT LINE 2455 IN MAIN.asm
                    > USED AT LINE 2484 IN MAIN.asm
INTERPRET:          0FFD DEFINED AT LINE 2492 IN MAIN.asm
                    > USED AT LINE 2596 IN MAIN.asm
                    > USED AT LINE 2612 IN MAIN.asm
INTERPRET2:         1009 DEFINED AT LINE 2500 IN MAIN.asm
                    > USED AT LINE 2537 IN MAIN.asm
                    > USED AT LINE 2617 IN MAIN.asm
                    > USED AT LINE 2621 IN MAIN.asm
                    > USED AT LINE 2639 IN MAIN.asm
INTERPRET3:         1011 DEFINED AT LINE 2508 IN MAIN.asm
                    > USED AT LINE 2518 IN MAIN.asm
INTERPRET4:         1017 DEFINED AT LINE 2514 IN MAIN.asm
                    > USED AT LINE 2506 IN MAIN.asm
INTERPRET5:         101C DEFINED AT LINE 2521 IN MAIN.asm
                    > USED AT LINE 2547 IN MAIN.asm
                    > USED AT LINE 2562 IN MAIN.asm
INTERPRET5A:        1035 DEFINED AT LINE 2536 IN MAIN.asm
INTERPRET6:         1037 DEFINED AT LINE 2539 IN MAIN.asm
                    > USED AT LINE 2525 IN MAIN.asm
INTERPRET7:         1045 DEFINED AT LINE 2549 IN MAIN.asm
                    > USED AT LINE 2529 IN MAIN.asm
INTERPRET8:         1058 DEFINED AT LINE 2564 IN MAIN.asm
                    > USED AT LINE 2527 IN MAIN.asm
NEXT:               1073 DEFINED AT LINE 2577 IN MAIN.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 2581 IN MAIN.asm
NEXT0:              1087 DEFINED AT LINE 2591 IN MAIN.asm
                    > USED AT LINE 2589 IN MAIN.asm
NEXT1:              1088 DEFINED AT LINE 2593 IN MAIN.asm
                    > USED AT LINE 2582 IN MAIN.asm
EXIT:               108F DEFINED AT LINE 2598 IN MAIN.asm
                    > USED AT LINE 2595 IN MAIN.asm
RUN:                1093 DEFINED AT LINE 2603 IN MAIN.asm
                    > USED AT LINE 2610 IN MAIN.asm
ERROR:              1097 DEFINED AT LINE 2608 IN MAIN.asm
                    > USED AT LINE 461 IN MAIN.asm
                    > USED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 1514 IN MAIN.asm
BACKSPACE_:         10A9 DEFINED AT LINE 2614 IN MAIN.asm
                    > USED AT LINE 2532 IN MAIN.asm
REEDIT_:            10B9 DEFINED AT LINE 2623 IN MAIN.asm
                    > USED AT LINE 2534 IN MAIN.asm
REEDIT0:            10C5 DEFINED AT LINE 2628 IN MAIN.asm
                    > USED AT LINE 2634 IN MAIN.asm
REEDIT1:            10C9 DEFINED AT LINE 2631 IN MAIN.asm
                    > USED AT LINE 2627 IN MAIN.asm
F1:                 10D9 DEFINED AT LINE 10
                    > USED AT LINE 859 IN MAIN.asm
F2:                 10D9 DEFINED AT LINE 11
                    > USED AT LINE 861 IN MAIN.asm
F3:                 10D9 DEFINED AT LINE 12
                    > USED AT LINE 863 IN MAIN.asm
F4:                 10D9 DEFINED AT LINE 13
                    > USED AT LINE 865 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1755 IN MAIN.asm
                    > USED AT LINE 2478 IN MAIN.asm
                    > USED AT LINE 2482 IN MAIN.asm
                    > USED AT LINE 2486 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 154 IN MAIN.asm
                    > USED AT LINE 1105 IN MAIN.asm
                    > USED AT LINE 2497 IN MAIN.asm
                    > USED AT LINE 2505 IN MAIN.asm
                    > USED AT LINE 2541 IN MAIN.asm
                    > USED AT LINE 2551 IN MAIN.asm
                    > USED AT LINE 2566 IN MAIN.asm
                    > USED AT LINE 2569 IN MAIN.asm
                    > USED AT LINE 2626 IN MAIN.asm
                    > USED AT LINE 2635 IN MAIN.asm
BUFFER:             2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 155 IN MAIN.asm
                    > USED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 1189 IN MAIN.asm
                    > USED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 2019 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1029 IN MAIN.asm
                    > USED AT LINE 2469 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2465 IN MAIN.asm
VTIBPTR:            23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 1261 IN MAIN.asm
                    > USED AT LINE 2498 IN MAIN.asm
                    > USED AT LINE 2568 IN MAIN.asm
VBUFPTR:            23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 549 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
                    > USED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
                    > USED AT LINE 675 IN MAIN.asm
                    > USED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
                    > USED AT LINE 1201 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
                    > USED AT LINE 1251 IN MAIN.asm
                    > USED AT LINE 2020 IN MAIN.asm
                    > USED AT LINE 2022 IN MAIN.asm
VNEXT:              23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 2477 IN MAIN.asm
VHEAPPTR:           23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 482 IN MAIN.asm
                    > USED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1459 IN MAIN.asm
                    > USED AT LINE 1473 IN MAIN.asm
                    > USED AT LINE 1481 IN MAIN.asm
                    > USED AT LINE 1587 IN MAIN.asm
                    > USED AT LINE 1606 IN MAIN.asm
                    > USED AT LINE 2031 IN MAIN.asm
                    > USED AT LINE 2066 IN MAIN.asm
                    > USED AT LINE 2134 IN MAIN.asm
                    > USED AT LINE 2137 IN MAIN.asm
                    > USED AT LINE 2159 IN MAIN.asm
                    > USED AT LINE 2164 IN MAIN.asm
                    > USED AT LINE 2195 IN MAIN.asm
                    > USED AT LINE 2261 IN MAIN.asm
VDEFINE:            23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 1518 IN MAIN.asm
                    > USED AT LINE 1523 IN MAIN.asm
                    > USED AT LINE 1528 IN MAIN.asm
VRECUR:             23EF DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 1168 IN MAIN.asm
                    > USED AT LINE 1743 IN MAIN.asm
                    > USED AT LINE 1750 IN MAIN.asm
VDATAWIDTH:         23F1 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 267 IN MAIN.asm
                    > USED AT LINE 493 IN MAIN.asm
                    > USED AT LINE 665 IN MAIN.asm
                    > USED AT LINE 745 IN MAIN.asm
                    > USED AT LINE 1057 IN MAIN.asm
                    > USED AT LINE 1088 IN MAIN.asm
                    > USED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 1925 IN MAIN.asm
VNUMBASE:           23F2 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 654 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
VSTRMODE:           23F3 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1178 IN MAIN.asm
                    > USED AT LINE 1183 IN MAIN.asm
                    > USED AT LINE 2014 IN MAIN.asm
VHEXPREFIX:         23F4 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 738 IN MAIN.asm
                    > USED AT LINE 1125 IN MAIN.asm
VPOINTER:           23F7 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 274 IN MAIN.asm
                    > USED AT LINE 423 IN MAIN.asm
                    > USED AT LINE 601 IN MAIN.asm
                    > USED AT LINE 602 IN MAIN.asm
                    > USED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 1517 IN MAIN.asm
                    > USED AT LINE 1646 IN MAIN.asm
                    > USED AT LINE 1860 IN MAIN.asm
VREMAIN:            23F9 DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 1172 IN MAIN.asm
VSAVEDIP:           23FB DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 2451 IN MAIN.asm
                    > USED AT LINE 2571 IN MAIN.asm
VSAVEDSP:           23FD DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 2452 IN MAIN.asm
                    > USED AT LINE 2572 IN MAIN.asm
VSAVEDNEXT:         23FF DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 2453 IN MAIN.asm
                    > USED AT LINE 2573 IN MAIN.asm
VSAVEDBP:           2401 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 2454 IN MAIN.asm
                    > USED AT LINE 2574 IN MAIN.asm
VTEMP1:             2403 DEFINED AT LINE 61 IN ram.asm
                    > USED AT LINE 475 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
                    > USED AT LINE 1698 IN MAIN.asm
                    > USED AT LINE 1742 IN MAIN.asm
                    > USED AT LINE 1754 IN MAIN.asm
                    > USED AT LINE 1760 IN MAIN.asm
                    > USED AT LINE 1789 IN MAIN.asm
                    > USED AT LINE 1810 IN MAIN.asm
                    > USED AT LINE 1817 IN MAIN.asm
                    > USED AT LINE 1823 IN MAIN.asm
                    > USED AT LINE 1914 IN MAIN.asm
                    > USED AT LINE 1938 IN MAIN.asm
                    > USED AT LINE 1954 IN MAIN.asm
                    > USED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 1978 IN MAIN.asm
                    > USED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 2129 IN MAIN.asm
                    > USED AT LINE 2138 IN MAIN.asm
                    > USED AT LINE 2150 IN MAIN.asm
                    > USED AT LINE 2262 IN MAIN.asm
VTEMP2:             2405 DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 1701 IN MAIN.asm
                    > USED AT LINE 1741 IN MAIN.asm
                    > USED AT LINE 1790 IN MAIN.asm
                    > USED AT LINE 1811 IN MAIN.asm
                    > USED AT LINE 2152 IN MAIN.asm
                    > USED AT LINE 2252 IN MAIN.asm
VTEMP3:             2407 DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 2149 IN MAIN.asm
                    > USED AT LINE 2263 IN MAIN.asm
VLASTDEF:           2409 DEFINED AT LINE 64 IN ram.asm
TBPTR:              240B DEFINED AT LINE 65 IN ram.asm
TITLEBUF:           240D DEFINED AT LINE 67 IN ram.asm
                    > USED AT LINE 2440 IN MAIN.asm
                    > USED AT LINE 2459 IN MAIN.asm
                    > USED AT LINE 2489 IN MAIN.asm
HEAP:               2421 DEFINED AT LINE 69 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 2122 IN MAIN.asm
