0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 D0 0D               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQ:       EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of Monty code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num_locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
00C9                             ; z80_RST8    equ     $CF
00C9                             ; **************************************************************************
00C9                             ; Page 0  Initialisation
00C9                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 22                  DW   BUF   ; vBUFPtr pointer into BUF
0188   64 0E                  DW   next   ; nNext
018A   1C 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C   00 00                  DW   0   ; vRecur
018E   00 00                  DW   0   ; unused
0190                          ALIGN   $100   
0200                OPCODES:      ; still available ` ~ _ \
0200   87                     DB   lsb(nop_)   ; SP
0201   33                     DB   lsb(bang_)   ; !
0202   53                     DB   lsb(dquote_)   ; "
0203   47                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1B                     DB   lsb(tick_)   ; '
0208   15                     DB   lsb(lparen_)   ; (
0209   89                     DB   lsb(rparen_)   ; )
020A   30                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   50                     DB   lsb(comma_)   ; ,
020D   56                     DB   lsb(minus_)   ; -
020E   21                     DB   lsb(dot_)   ; .
020F   84                     DB   lsb(slash_)   ; /	
0210   44                     DB   lsb(num_)   ; 0
0211   44                     DB   lsb(num_)   ; 1
0212   44                     DB   lsb(num_)   ; 2
0213   44                     DB   lsb(num_)   ; 3
0214   44                     DB   lsb(num_)   ; 4
0215   44                     DB   lsb(num_)   ; 5
0216   44                     DB   lsb(num_)   ; 6
0217   44                     DB   lsb(num_)   ; 7
0218   44                     DB   lsb(num_)   ; 8
0219   44                     DB   lsb(num_)   ; 9
021A   24                     DB   lsb(colon_)   ; :
021B   1E                     DB   lsb(semicolon_)   ; ;
021C   72                     DB   lsb(lt_)   ; <
021D   59                     DB   lsb(eq_)   ; =
021E   67                     DB   lsb(gt_)   ; >
021F   2D                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   27                     DB   lsb(upcase_)   ; A
0222   27                     DB   lsb(upcase_)   ; B
0223   27                     DB   lsb(upcase_)   ; C
0224   27                     DB   lsb(upcase_)   ; D
0225   27                     DB   lsb(upcase_)   ; E
0226   27                     DB   lsb(upcase_)   ; F
0227   27                     DB   lsb(upcase_)   ; G
0228   27                     DB   lsb(upcase_)   ; h
0229   27                     DB   lsb(upcase_)   ; I
022A   27                     DB   lsb(upcase_)   ; J
022B   27                     DB   lsb(upcase_)   ; K
022C   27                     DB   lsb(upcase_)   ; L
022D   27                     DB   lsb(upcase_)   ; M
022E   27                     DB   lsb(upcase_)   ; N
022F   27                     DB   lsb(upcase_)   ; O
0230   27                     DB   lsb(upcase_)   ; p
0231   27                     DB   lsb(upcase_)   ; Q
0232   27                     DB   lsb(upcase_)   ; R
0233   27                     DB   lsb(upcase_)   ; S
0234   27                     DB   lsb(upcase_)   ; T
0235   27                     DB   lsb(upcase_)   ; U
0236   27                     DB   lsb(upcase_)   ; V
0237   27                     DB   lsb(upcase_)   ; W
0238   27                     DB   lsb(upcase_)   ; X
0239   27                     DB   lsb(upcase_)   ; Y
023A   27                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   87                     DB   lsb(nop_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   4D                     DB   lsb(caret_)   ; ^
023F   87                     DB   lsb(nop_)   ; _
0240   53                     DB   lsb(dquote_)   ; `     used for testing string   	
0241   2A                     DB   lsb(lowcase_)   ; a
0242   2A                     DB   lsb(lowcase_)   ; b
0243   2A                     DB   lsb(lowcase_)   ; c
0244   2A                     DB   lsb(lowcase_)   ; d
0245   2A                     DB   lsb(lowcase_)   ; e
0246   2A                     DB   lsb(lowcase_)   ; f
0247   2A                     DB   lsb(lowcase_)   ; g
0248   2A                     DB   lsb(lowcase_)   ; h
0249   2A                     DB   lsb(lowcase_)   ; i
024A   2A                     DB   lsb(lowcase_)   ; j
024B   2A                     DB   lsb(lowcase_)   ; k
024C   2A                     DB   lsb(lowcase_)   ; l
024D   2A                     DB   lsb(lowcase_)   ; m
024E   2A                     DB   lsb(lowcase_)   ; n
024F   2A                     DB   lsb(lowcase_)   ; o
0250   2A                     DB   lsb(lowcase_)   ; p
0251   2A                     DB   lsb(lowcase_)   ; q
0252   2A                     DB   lsb(lowcase_)   ; r
0253   2A                     DB   lsb(lowcase_)   ; s
0254   2A                     DB   lsb(lowcase_)   ; t
0255   2A                     DB   lsb(lowcase_)   ; u
0256   2A                     DB   lsb(lowcase_)   ; v
0257   2A                     DB   lsb(lowcase_)   ; w
0258   2A                     DB   lsb(lowcase_)   ; x
0259   2A                     DB   lsb(lowcase_)   ; y
025A   2A                     DB   lsb(lowcase_)   ; z
025B   15                     DB   lsb(lbrace_)   ; {
025C   4A                     DB   lsb(pipe_)   ; |
025D   18                     DB   lsb(rbrace_)   ; }
025E   87                     DB   lsb(nop_)   ; ~
025F   87                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 8C 03               JP   plus   
0303                AT_:         
0303   C3 A9 03               JP   at   
0306                AMPER_:      
0306   C3 B3 03               JP   amper   
0309                DOLLAR_:      
0309   C3 74 0A               JP   dollar   
030C                LBRACK_:      
030C   C3 0F 04               JP   lbrack   
030F                RBRACK_:      
030F   C3 2B 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 DA 03               JP   percent   
0315                LPAREN_:      
0315                LBRACE_:      
0315   C3 08 05               JP   lbrace   
0318                RBRACE_:      
0318   C3 71 05               JP   rbrace   
031B                TICK_:       
031B   C3 F8 05               JP   tick   
031E                SEMICOLON_:      
031E   C3 EA 06               JP   semicolon   
0321                DOT_:        
0321   C3 B4 07               JP   dot   
0324                COLON_:      
0324   C3 93 04               JP   colon   
0327                UPCASE_:      
0327   C3 91 0A               JP   upcase   
032A                LOWCASE_:      
032A   C3 96 0A               JP   lowcase   
032D                QUESTION_:      
032D   C3 A8 0A               JP   question   
0330                STAR_:       
0330   C3 2B 0B               JP   star   
0333                BANG_:       ; logical invert, any non zero value
0333   03                     INC   bc   
0334   0A                     LD   a,(bc)   
0335   FE 3D                  CP   "="   
0337   20 05                  JR   nz,not   
0339   E1                     POP   hl   
033A   D1                     POP   de   
033B   C3 10 09               JP   notequals   
033E                NOT:         
033E   0B                     DEC   bc   
033F   21 00 00               LD   hl,0   ; is considered true
0342   18 1F                  JR   eq1   
0344                NUM_:        
0344   C3 47 0B               JP   num   
0347                HASH_:       
0347   C3 7B 04               JP   hash   
034A                PIPE_:       
034A   C3 BE 03               JP   pipe   
034D                CARET_:      
034D   C3 D5 09               JP   caret   
0350                COMMA_:      
0350   C3 86 07               JP   comma   
0353                DQUOTE_:      
0353   C3 24 0C               JP   dquote   
0356                MINUS_:      
0356   C3 4C 0C               JP   minus   
0359                EQ_:         
0359   CD 00 0D               CALL   jumpTable   
035C   3D                     DB   "="   
035D   62 03                  DW   eq0   
035F   00                     DB   NUL   
0360   C9 04                  DW   assign   
0362                             ; inc bc
0362                             ; ld a,(bc)                   ; is it == ?
0362                             ; cp "="
0362                             ; jr z,eq0                    ; no its equality
0362                             ; dec bc
0362                             ; jp assign                   ; no its assignment
0362                EQ0:         
0362   E1                     POP   hl   
0363                EQ1:         
0363   D1                     POP   de   
0364   C3 08 09               JP   equals   
0367                GT_:         
0367   03                     INC   bc   
0368   0A                     LD   a,(bc)   
0369   FE 3E                  CP   ">"   
036B   CA 11 0C               JP   z,shiftRight   
036E   D1                     POP   de   
036F   E1                     POP   hl   
0370   18 09                  JR   lt1   
0372                LT_:         
0372   03                     INC   bc   
0373   0A                     LD   a,(bc)   
0374   FE 3C                  CP   "<"   
0376   CA 01 0C               JP   z,shiftLeft   
0379   E1                     POP   hl   
037A   D1                     POP   de   
037B                LT1:         
037B   FE 3D                  CP   "="   
037D   CA 19 09               JP   z,lessthaneq   
0380   0B                     DEC   bc   
0381   C3 1E 09               JP   lessthan   
0384                SLASH_:      
0384   C3 0D 06               JP   slash   
0387                NOP_:        
0387   DD E9                  JP   (ix)   
0389                RPAREN_:      
0389   C3 F9 0B               JP   rparen   
038C                             ;*******************************************************************
038C                             ; implementations
038C                             ;*******************************************************************
038C                PLUS:        
038C                ADD:         
038C   03                     INC   bc   
038D   0A                     LD   a,(bc)   
038E   FE 2B                  CP   "+"   ; ++ increment variable
0390   20 05                  JR   nz,add1   
0392   E1                     POP   hl   
0393   23                     INC   hl   
0394   C3 CB 04               JP   assign0   
0397                ADD1:        
0397   0B                     DEC   bc   
0398   D1                     POP   de   ; second term
0399   E1                     POP   hl   ; first term
039A   19                     ADD   hl,de   
039B                ADD3:        
039B   03                     INC   bc   
039C   0A                     LD   a,(bc)   
039D   FE 3D                  CP   "="   
039F   CA A6 03               JP   z,add4   
03A2   0B                     DEC   bc   
03A3   E5                     PUSH   hl   
03A4   DD E9                  JP   (ix)   
03A6                ADD4:        
03A6   C3 CB 04               JP   assign0   
03A9                             ; @ addr
03A9                             ; -- ptr
03A9                AT:          
03A9                ADDR:        
03A9   ED 5B F4 23            LD   de,(vPointer)   
03AD   21 F4 23               LD   hl,vPointer   
03B0   C3 E1 0C               JP   variable   
03B3                AMPER:       
03B3                AND:         
03B3   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B4   E1                     POP   hl   
03B5   7B                     LD   a,e   
03B6   A5                     AND   l   
03B7   6F                     LD   l,a   
03B8   7A                     LD   a,d   
03B9   A4                     AND   h   
03BA                AND1:        
03BA   67                     LD   h,a   
03BB   E5                     PUSH   hl   
03BC   DD E9                  JP   (ix)   
03BE                PIPE:        
03BE   C3 C1 03               JP   or   
03C1                OR:          
03C1   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03C2   E1                     POP   hl   
03C3   7B                     LD   a,e   
03C4   B5                     OR   l   
03C5   6F                     LD   l,a   
03C6   7A                     LD   a,d   
03C7   B4                     OR   h   
03C8   18 F0                  JR   and1   
03CA                XOR:         
03CA   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03CB                XOR1:        
03CB   E1                     POP   hl   
03CC   7B                     LD   a,e   
03CD   AD                     XOR   l   
03CE   6F                     LD   l,a   
03CF   7A                     LD   a,d   
03D0   AC                     XOR   h   
03D1   67                     LD   h,a   
03D2   E5                     PUSH   hl   
03D3   DD E9                  JP   (ix)   
03D5                INVERT:      ; Bitwise INVert the top member of the stack
03D5   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03D8   18 F1                  JR   xor1   
03DA                             ; %a .. %z
03DA                             ; -- value
03DA                             ; returns value of arg
03DA                PERCENT:      
03DA                ARG:         
03DA   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03DD   FD 56 05               LD   d,(iy+5)   
03E0   EB                     EX   de,hl   
03E1   7D                     LD   a,l   ; arg_list* == null, skip
03E2   B4                     OR   h   
03E3   28 1A                  JR   z,arg0a   
03E5   23                     INC   hl   ; a = num_args, hl = arg_list*
03E6   7E                     LD   a,(hl)   
03E7   23                     INC   hl   
03E8   B7                     OR   a   
03E9   28 14                  JR   z,arg0a   ; num_args == 0, skip
03EB   5F                     LD   e,a   ; e = a = num_args
03EC   03                     INC   bc   ; a = next char = dollar_name
03ED   0A                     LD   a,(bc)   
03EE   C5                     PUSH   bc   ; save IP
03EF   43                     LD   b,e   ; b = e = num_args
03F0   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03F3   FD 56 03               LD   d,(iy+3)   
03F6                ARG0:        
03F6   1B                     DEC   de   ; a = dollar_name, de = next arg*
03F7   1B                     DEC   de   
03F8   BE                     CP   (hl)   
03F9   28 09                  JR   z,arg1   
03FB   23                     INC   hl   ; hl = next arg_list*
03FC   10 F8                  DJNZ   arg0   
03FE   C1                     POP   bc   ; no match, restore IP
03FF                ARG0A:       
03FF   11 00 00               LD   de,0   ; return 0
0402   18 08                  JR   arg1a   
0404                ARG1:        
0404   C1                     POP   bc   ; restore IP
0405   EB                     EX   de,hl   ; hl = arg*
0406   22 F4 23               LD   (vPointer),hl   ; store arg* in setter
0409   5E                     LD   e,(hl)   
040A   23                     INC   hl   
040B   56                     LD   d,(hl)   ; de = arg
040C                ARG1A:       
040C   D5                     PUSH   de   ; push arg
040D   DD E9                  JP   (ix)   
040F                LBRACK:      
040F                ARRAYSTART:      
040F   11 00 00               LD   de,0   ; create stack frame
0412   D5                     PUSH   de   ; push null for IP
0413   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0416   FD 56 05               LD   d,(iy+5)   ; 
0419   D5                     PUSH   de   ; 
041A   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
041D   FD 56 03               LD   d,(iy+3)   ; 
0420   D5                     PUSH   de   ; 
0421   FD E5                  PUSH   iy   ; push BP
0423   FD 21 00 00            LD   iy,0   ; BP = SP
0427   FD 39                  ADD   iy,sp   
0429   DD E9                  JP   (ix)   
042B                RBRACK:      
042B                ARRAYEND:      
042B   FD 54                  LD   d,iyh   ; de = BP
042D   FD 5D                  LD   e,iyl   
042F   ED 43 00 24            LD   (vTemp1),bc   ; save IP
0433   62 6B                  LD   hl,de   ; hl = de = BP
0435   B7                     OR   a   
0436   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0438   CB 3C                  SRL   h   ; 
043A   CB 1D                  RR   l   
043C   44 4D                  LD   bc,hl   ; bc = count
043E   2A F0 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
0441   71                     LD   (hl),c   ; write num items in length word
0442   23                     INC   hl   
0443   70                     LD   (hl),b   
0444   23                     INC   hl   ; hl = array[0], bc = count
0445                             ; de = BP, hl = array[0], bc = count
0445   18 15                  JR   arrayEnd3   
0447                ARRAYEND1:      
0447   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
044A   77                     LD   (hl),a   ; write lsb of array item
044B   23                     INC   hl   ; move to msb of array item
044C   3A E6 23               LD   a,(vDataWidth)   ; vDataWidth=1?
044F   3D                     DEC   a   
0450   28 05                  JR   z,arrayEnd2   
0452   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0455   77                     LD   (hl),a   ; write msb of array item
0456   23                     INC   hl   ; move to next word in array
0457                ARRAYEND2:      
0457   FD 2B                  DEC   iy   ; move to next word on stack
0459   FD 2B                  DEC   iy   
045B   0B                     DEC   bc   ; dec items count
045C                ARRAYEND3:      
045C   79                     LD   a,c   ; if not zero loop
045D   B0                     OR   b   
045E   20 E7                  JR   nz,arrayEnd1   
0460   EB                     EX   de,hl   ; de = end of array, hl = BP
0461   F9                     LD   sp,hl   ; sp = BP
0462   E1                     POP   hl   ; de = end of array, hl = old BP
0463   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0464   FD 62                  LD   iyh,d   
0466   FD 6B                  LD   iyl,e   
0468   D1                     POP   de   ; pop arg_list (discard)
0469   D1                     POP   de   ; pop first_arg* (discard)
046A   D1                     POP   de   ; pop IP (discard)
046B   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = array[-2]
046F   13                     INC   de   
0470   13                     INC   de   
0471   D5                     PUSH   de   ; return array[0]
0472   22 F0 23               LD   (vHeapPtr),hl   ; move heap* to end of array
0475   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
0479   DD E9                  JP   (ix)   
047B                             ; index of an array, based on vDataWidth
047B                             ; array num -- value    ; also sets vPointer to address
047B                HASH:        
047B                ARRAYINDEX:      
047B   E1                     POP   hl   ; hl = index
047C   D1                     POP   de   ; de = array
047D   3A E6 23               LD   a,(vDataWidth)   ; a = data width
0480   3D                     DEC   a   
0481   28 01                  JR   z,arrayIndex1   
0483                ARRAYINDEX0:      
0483   29                     ADD   hl,hl   ; if data width = 2 then double
0484                ARRAYINDEX1:      
0484   19                     ADD   hl,de   ; add addr
0485   22 F4 23               LD   (vPointer),hl   ; store address in setter
0488   16 00                  LD   d,0   
048A   5E                     LD   e,(hl)   
048B   B7                     OR   a   ; check data width again
048C   28 02                  JR   z,arrayIndex2   
048E   23                     INC   hl   
048F   56                     LD   d,(hl)   
0490                ARRAYINDEX2:      
0490   D5                     PUSH   de   
0491   DD E9                  JP   (ix)   
0493                             ; arg_list - parses input (ab:c)
0493                             ; names after the : represent uninitialised locals
0493                             ; return values are the state of the stack after the block ends
0493                             ; format: numLocals totNumArgs argChars...
0493                COLON:       
0493                ARGLIST:      
0493   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0496   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0499   E5                     PUSH   hl   ; save start of arg_list
049A   23                     INC   hl   ; skip length fields to start of string
049B   23                     INC   hl   
049C   03                     INC   bc   ; point to next char
049D                ARGLIST1:      
049D   0A                     LD   a,(bc)   
049E   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A0   20 03                  JR   nz,arglist1a   
04A2   14                     INC   d   ; non zero value local count acts as flag
04A3   18 10                  JR   arglist3   
04A5                ARGLIST1A:      
04A5   FE 61                  CP   "a"   ; < "a" terminates arg_list
04A7   38 0F                  JR   c,arglist4   
04A9   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04AB   30 0B                  JR   nc,arglist4   
04AD                ARGLIST2:      
04AD   77                     LD   (hl),a   
04AE   23                     INC   hl   
04AF   1C                     INC   e   ; increase arg count
04B0   AF                     XOR   a   
04B1   B2                     OR   d   
04B2   28 01                  JR   z,arglist3   
04B4   14                     INC   d   ; if d > 0 increase local count
04B5                ARGLIST3:      
04B5   03                     INC   bc   ; point to next char
04B6   18 E5                  JR   arglist1   
04B8                ARGLIST4:      
04B8   0B                     DEC   bc   
04B9   AF                     XOR   a   
04BA   B2                     OR   d   
04BB   28 01                  JR   z,arglist5   
04BD   15                     DEC   d   ; remove initial inc
04BE                ARGLIST5:      
04BE   23                     INC   hl   
04BF   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04C2   E1                     POP   hl   ; hl = start of arg_list
04C3   E5                     PUSH   hl   ; return start of arg_list
04C4   72                     LD   (hl),d   ; write number of locals at start - 1
04C5   23                     INC   hl   
04C6   73                     LD   (hl),e   ; write number of args + locals at start - 2
04C7   DD E9                  JP   (ix)   
04C9                             ; value _oldValue --            ; uses address in vPointer
04C9                ASSIGN:      
04C9   E1                     POP   hl   ; discard last accessed value
04CA   E1                     POP   hl   ; hl = new value
04CB                ASSIGN0:      
04CB   EB                     EX   de,hl   ; de = new value
04CC                ASSIGNX:      
04CC   2A F4 23               LD   hl,(vPointer)   
04CF   73                     LD   (hl),e   
04D0   3A E6 23               LD   a,(vDataWidth)   
04D3   3D                     DEC   a   ; is it byte?
04D4   28 02                  JR   z,assign1   
04D6   23                     INC   hl   
04D7   72                     LD   (hl),d   
04D8                ASSIGN1:      
04D8   DD E9                  JP   (ix)   
04DA                             ; /ab absolute
04DA                             ; num -- num
04DA                ABSOLUTE:      
04DA   E1                     POP   hl   
04DB   CB 7C                  BIT   7,h   
04DD   C8                     RET   z   
04DE   AF                     XOR   a   
04DF   95                     SUB   l   
04E0   6F                     LD   l,a   
04E1   9F                     SBC   a,a   
04E2   94                     SUB   h   
04E3   67                     LD   h,a   
04E4   E5                     PUSH   hl   
04E5   DD E9                  JP   (ix)   
04E7                             ; /ad addrOf
04E7                             ; char -- addr
04E7                ADDROF:      
04E7   E1                     POP   hl   ; a = char
04E8   7D                     LD   a,l   
04E9   FE 7B                  CP   "z"+1   ; if a > z then exit
04EB   30 19                  JR   nc,addrOf2   
04ED   D6 41                  SUB   "A"   ; a - 65
04EF   38 15                  JR   c,addrOf2   ; if < A then exit
04F1   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
04F3   38 06                  JR   c,addrOf1   
04F5   D6 06                  SUB   "a"-("Z"+1)   
04F7   FE 1A                  CP   "Z"-"A"+1   
04F9   38 0B                  JR   c,addrOf2   ; if < a then exit
04FB                ADDROF1:      
04FB   87                     ADD   a,a   ; double a
04FC   21 00 23               LD   hl,VARS   ; hl = VARS + a
04FF   85                     ADD   a,l   
0500   6F                     LD   l,a   
0501   3E 00                  LD   a,0   
0503   8C                     ADC   a,h   
0504   67                     LD   h,a   
0505   E5                     PUSH   hl   
0506                ADDROF2:      
0506   DD E9                  JP   (ix)   
0508                LBRACE:      
0508                BLOCKSTART:      
0508   C5                     PUSH   bc   ; return pointer to first { of block
0509   03                     INC   bc   
050A   16 01                  LD   d,1   ; nesting: count first parenthesis
050C                BLOCKSTART1:      ; Skip to end of definition
050C   0A                     LD   a,(bc)   ; Get the next character
050D   03                     INC   bc   ; Point to next character
050E   FE 21                  CP   " " + 1   ; ignore whitespace
0510   38 FA                  JR   c,blockStart1   
0512   FE 29                  CP   ")"   
0514   28 2D                  JR   z,blockStart4   
0516   FE 7D                  CP   "}"   
0518   28 29                  JR   z,blockStart4   
051A   FE 5D                  CP   "]"   
051C   28 25                  JR   z,blockStart4   
051E   FE 28                  CP   "("   
0520   28 16                  JR   z,blockStart2   
0522   FE 7B                  CP   "{"   
0524   28 12                  JR   z,blockStart2   
0526   FE 5B                  CP   "["   
0528   28 0E                  JR   z,blockStart2   
052A   FE 27                  CP   "'"   
052C   28 0D                  JR   z,blockStart3   
052E   FE 60                  CP   "`"   
0530   28 09                  JR   z,blockStart3   
0532   FE 22                  CP   DQ   
0534   28 05                  JR   z,blockStart3   
0536   18 D4                  JR   blockStart1   
0538                BLOCKSTART2:      
0538   14                     INC   d   
0539   18 D1                  JR   blockStart1   
053B                BLOCKSTART3:      
053B   3E 80                  LD   a,$80   
053D   AA                     XOR   d   
053E   57                     LD   d,a   
053F   20 CB                  JR   nz,blockStart1   
0541   18 03                  JR   blockStart5   
0543                BLOCKSTART4:      
0543   15                     DEC   d   
0544   20 C6                  JR   nz,blockStart1   ; get the next element
0546                BLOCKSTART5:      
0546   60 69                  LD   hl,bc   ; hl = IP
0548   11 1C 24               LD   de,HEAP   ; is IP pointing to object in heap
054B   B7                     OR   a   ; IP - HEAP
054C   ED 52                  SBC   hl,de   
054E   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0550   28 1C                  JR   z,blockStart6   
0552   60 69                  LD   hl,bc   ; hl = IP
0554   D1                     POP   de   ; de = block*
0555   ED 43 00 24            LD   (vTemp1),bc   ; save IP
0559   B7                     OR   a   ; bc = size
055A   ED 52                  SBC   hl,de   
055C   44 4D                  LD   bc,hl   
055E   EB                     EX   de,hl   ; hl = block* de = heap*
055F   ED 5B F0 23            LD   de,(vHeapPtr)   
0563   D5                     PUSH   de   ; return hblock*
0564   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0566   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += size
056A   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
056E                BLOCKSTART6:      
056E   0B                     DEC   bc   ; balanced, exit
056F   DD E9                  JP   (ix)   
0571                RBRACE:      
0571                BLOCKEND:      
0571   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0574   FD 56 01               LD   d,(iy+1)   
0577   ED 53 00 24            LD   (vTemp1),de   
057B   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
057E   FD 56 07               LD   d,(iy+7)   
0581   ED 53 02 24            LD   (vTemp2),de   
0585   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0588   FD 56 03               LD   d,(iy+3)   
058B   EB                     EX   de,hl   
058C   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
058F   FD 56 01               LD   d,(iy+1)   
0592   13                     INC   de   ; for carry flag <=
0593   B7                     OR   a   
0594   ED 52                  SBC   hl,de   
0596   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0598   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
059A   FD 5D                  LD   e,iyl   
059C   21 08 00               LD   hl,8   
059F   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
05A0   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
05A1   18 0C                  JR   blockEnd2   
05A3                BLOCKEND1:      ; same scope
05A3   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
05A6   FD 56 03               LD   d,(iy+3)   
05A9   EB                     EX   de,hl   
05AA   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
05AC   FD 5D                  LD   e,iyl   
05AE   EB                     EX   de,hl   
05AF                BLOCKEND2:      
05AF   44 4D                  LD   bc,hl   ; bc = hl = BP
05B1   B7                     OR   a   ; hl = BP - SP = count
05B2   ED 72                  SBC   hl,sp   
05B4   7D                     LD   a,l   
05B5   B4                     OR   h   
05B6   28 09                  JR   z,blockEnd3   
05B8   C5                     PUSH   bc   ; bc = count, hl = BP
05B9   44 4D                  LD   bc,hl   
05BB   E1                     POP   hl   
05BC   2B                     DEC   hl   ; hl = BP-1
05BD   1B                     DEC   de   ; de = args*-1
05BE   ED B8                  LDDR      
05C0   13                     INC   de   
05C1                BLOCKEND3:      
05C1   EB                     EX   de,hl   ; sp = de = new tos*
05C2   F9                     LD   sp,hl   
05C3   ED 4B 02 24            LD   bc,(vTemp2)   
05C7   FD 2A 00 24            LD   iy,(vTemp1)   
05CB   ED 5B F2 23            LD   de,(vRecur)   ; de = recur vector
05CF   7B                     LD   a,e   ; check for NUL
05D0   B2                     OR   d   
05D1   20 02                  JR   nz,blockEnd4   
05D3   DD E9                  JP   (ix)   
05D5                BLOCKEND4:      
05D5   21 00 00               LD   hl,0   ; clear recur vector
05D8   22 F2 23               LD   (vRecur),hl   
05DB   C3 D6 09               JP   go1   ; execute de
05DE                             ; /br break from loop
05DE                             ; --
05DE                BREAK:       
05DE   E1                     POP   hl   
05DF   7D                     LD   a,l   
05E0   B4                     OR   h   
05E1   28 02                  JR   z,break1   
05E3   DD E9                  JP   (ix)   
05E5                BREAK1:      
05E5   FD 5D                  LD   e,iyl   ; get block* just under stack frame
05E7   FD 54                  LD   d,iyh   
05E9   21 08 00               LD   hl,8   
05EC   19                     ADD   hl,de   
05ED   23                     INC   hl   
05EE   23                     INC   hl   
05EF   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
05F2   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
05F5   C3 71 05               JP   blockEnd   
05F8                TICK:        
05F8                CHAR:        
05F8   21 00 00               LD   hl,0   ; if "" is empty or null
05FB                CHAR1:       
05FB   03                     INC   bc   ; point to next char
05FC   0A                     LD   a,(bc)   
05FD   FE 27                  CP   "'"   ; ' is the terminator
05FF   28 09                  JR   z,char3   
0601   FE 5C                  CP   $5c   ; \ is the escape
0603   20 02                  JR   nz,char2   
0605   03                     INC   bc   
0606   0A                     LD   a,(bc)   
0607                CHAR2:       
0607   6F                     LD   l,a   
0608   18 F1                  JR   char1   
060A                CHAR3:       
060A   E5                     PUSH   hl   
060B   DD E9                  JP   (ix)   
060D                SLASH:       
060D                COMMAND:      
060D   CD 00 0D               CALL   jumpTable   
0610   2F                     DB   "/"   ; // comment
0611   E1 06                  DW   comment   
0613   61                     DB   "a"   
0614   4C 06                  DW   command_a   
0616   62                     DB   "b"   
0617   58 06                  DW   command_b   
0619   63                     DB   "c"   ; /c chars
061A   D3 06                  DW   chars   
061C   64                     DB   "d"   ; /d decimal
061D   A6 07                  DW   decimal   
061F   66                     DB   "f"   
0620   64 06                  DW   command_f   
0622   68                     DB   "h"   ; /h hexadecimal
0623   AE 07                  DW   hexadecimal   
0625   69                     DB   "i"   
0626   82 06                  DW   command_i   
0628   6B                     DB   "k"   ; /k key
0629   CC 0A                  DW   key   
062B   6C                     DB   "l"   
062C   8E 06                  DW   command_l   
062E   6D                     DB   "m"   
062F   97 06                  DW   command_m   
0631   6E                     DB   "n"   ; /n numbers
0632   DB 06                  DW   numbers   
0634   6F                     DB   "o"   ; /o output
0635   DE 0A                  DW   output   
0637   70                     DB   "p"   
0638   A0 06                  DW   command_p   
063A   72                     DB   "r"   
063B   AF 06                  DW   command_r   
063D   73                     DB   "s"   ; /s size
063E   AF 0C                  DW   size   
0640   74                     DB   "t"   ; /t true
0641   26 09                  DW   true1   
0643   76                     DB   "v"   
0644   BE 06                  DW   command_v   
0646   78                     DB   "x"   ; /x xor
0647   CA 03                  DW   xor   
0649   00                     DB   NUL   
064A   95 07                  DW   div   
064C                COMMAND_A:      
064C   CD 00 0D               CALL   jumpTable   
064F   62                     DB   "b"   ; /ab absolute
0650   DA 04                  DW   absolute   
0652   64                     DB   "d"   ; /ad address of
0653   E7 04                  DW   addrOf   
0655   00                     DB   NUL   
0656   32 09                  DW   error1   
0658                COMMAND_B:      
0658   CD 00 0D               CALL   jumpTable   
065B   72                     DB   "r"   ; /br break
065C   DE 05                  DW   break   
065E   79                     DB   "y"   ; /by cold boot
065F   C7 0D                  DW   coldStart   
0661   00                     DB   NUL   
0662   32 09                  DW   error1   
0664                COMMAND_F:      
0664   CD 00 0D               CALL   jumpTable   
0667   65                     DB   "e"   ; /fe forEach
0668   3E 09                  DW   forEach   
066A   6C                     DB   "l"   ; /fl flush output buffer
066B   39 09                  DW   flush   
066D   73                     DB   "s"   ; /fs funcSrc
066E   8B 09                  DW   funcSrc   
0670   31                     DB   "1"   
0671   CC 0E                  DW   f1   
0673   32                     DB   "2"   
0674   CC 0E                  DW   f2   
0676   33                     DB   "3"   
0677   CC 0E                  DW   f3   
0679   34                     DB   "4"   
067A   CC 0E                  DW   f4   
067C   7A                     DB   "z"   
067D   C6 09                  DW   fz   
067F   00                     DB   NUL   
0680   2C 09                  DW   false1   
0682                COMMAND_I:      
0682   CD 00 0D               CALL   jumpTable   
0685   6E                     DB   "n"   ; /in input
0686   C1 0A                  DW   input   
0688   76                     DB   "v"   ; /iv invert
0689   D5 03                  DW   invert   
068B   00                     DB   NUL   
068C   32 09                  DW   error1   
068E                COMMAND_L:      
068E   CD 00 0D               CALL   jumpTable   
0691   69                     DB   "i"   ; /li literal
0692   D5 0A                  DW   literal   
0694   00                     DB   NUL   
0695   32 09                  DW   error1   
0697                COMMAND_M:      
0697   CD 00 0D               CALL   jumpTable   
069A   70                     DB   "p"   ; /mp map
069B   E7 0A                  DW   map   
069D   00                     DB   NUL   
069E   32 09                  DW   error1   
06A0                COMMAND_P:      
06A0   CD 00 0D               CALL   jumpTable   
06A3   62                     DB   "b"   ; /pb print buffer
06A4   6B 0C                  DW   printBuffer   
06A6   63                     DB   "c"   ; /pc print chars
06A7   91 0C                  DW   printChars   
06A9   6B                     DB   "k"   ; /pk print stack
06AA   D3 09                  DW   printStack   
06AC   00                     DB   NUL   
06AD   32 09                  DW   error1   
06AF                COMMAND_R:      
06AF   CD 00 0D               CALL   jumpTable   
06B2   63                     DB   "c"   ; /rc tail call optimisation
06B3   A3 0C                  DW   recur   
06B5   65                     DB   "e"   ; /re remainder
06B6   A9 0C                  DW   remain   
06B8   67                     DB   "g"   
06B9   77 0B                  DW   rangeSrc   
06BB   00                     DB   NUL   
06BC   32 09                  DW   error1   
06BE                COMMAND_V:      
06BE   CD 00 0D               CALL   jumpTable   
06C1   62                     DB   "b"   
06C2   C6 0C                  DW   varBufPtr   
06C4   68                     DB   "h"   
06C5   CF 0C                  DW   varHeapPtr   
06C7   74                     DB   "t"   
06C8   D8 0C                  DW   varTIBPtr   
06CA   42                     DB   "B"   
06CB   B7 0C                  DW   constBufStart   
06CD   54                     DB   "T"   
06CE   C1 0C                  DW   constTIBStart   
06D0   00                     DB   NUL   
06D1   32 09                  DW   error1   
06D3                CHARS:       
06D3   21 01 00               LD   hl,1   
06D6                CHARS1:      
06D6   22 E6 23               LD   (vDataWidth),hl   
06D9   DD E9                  JP   (ix)   
06DB                NUMBERS:      
06DB   21 02 00               LD   hl,2   
06DE   C3 D6 06               JP   chars1   
06E1                COMMENT:      
06E1   03                     INC   bc   ; point to next char
06E2   0A                     LD   a,(bc)   
06E3   FE 20                  CP   " "   ; terminate on any char less than SP
06E5   30 FA                  JR   nc,comment   
06E7   0B                     DEC   bc   
06E8   DD E9                  JP   (ix)   
06EA                             ; ";" createFunc
06EA                             ; arg_list* block* -- func*
06EA                SEMICOLON:      
06EA                CREATEFUNC:      
06EA   ED 43 00 24            LD   (vTemp1),bc   ; save IP
06EE   E1                     POP   hl   ; hl = block*
06EF   22 02 24               LD   (vTemp2),hl   ; save block*
06F2   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
06F5   FD 56 05               LD   d,(iy+5)   
06F8   7B                     LD   a,e   ; if arg_list == null then make a func
06F9   B2                     OR   d   
06FA   20 09                  JR   nz,createFunc0   
06FC   21 00 00               LD   hl,0   ; partial_array = null
06FF   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0703   18 65                  JR   createFunc5   
0705                CREATEFUNC0:      
0705   E1                     POP   hl   ; hl = inner_arg_list*
0706   E5                     PUSH   hl   ; save inner_arg_list
0707   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
070B   7E                     LD   a,(hl)   ; compile inner_num_locals
070C   4F                     LD   c,a   ; b = inner_num_locals
070D   12                     LD   (de),a   
070E   23                     INC   hl   
070F   13                     INC   de   
0710   7E                     LD   a,(hl)   ; compile inner_length
0711   12                     LD   (de),a   
0712   91                     SUB   c   ; a = inner_num args
0713   23                     INC   hl   
0714   13                     INC   de   
0715   B7                     OR   a   ; compile args if inner_length > 0
0716   28 05                  JR   z,createFunc1   
0718   4F                     LD   c,a   ; bc = a
0719   06 00                  LD   b,0   
071B   ED B0                  LDIR      
071D                CREATEFUNC1:      
071D   EB                     EX   de,hl   ; hl = outer_arg_list
071E   FD 5E 04               LD   e,(iy+4)   
0721   FD 56 05               LD   d,(iy+5)   
0724   EB                     EX   de,hl   
0725   23                     INC   hl   ; a = outer_length
0726   7E                     LD   a,(hl)   
0727   23                     INC   hl   
0728   B7                     OR   a   
0729   28 05                  JR   z,createFunc2   
072B   4F                     LD   c,a   
072C   06 00                  LD   b,0   
072E   ED B0                  LDIR      ; append outer_args
0730                CREATEFUNC2:      ; a = outer_length
0730   47                     LD   b,a   ; b = a = outer_length
0731   2A F0 23               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0734   23                     INC   hl   
0735   7E                     LD   a,(hl)   ; add outer_length to new length
0736   80                     ADD   a,b   
0737   77                     LD   (hl),a   
0738   2B                     DEC   hl   
0739   78                     LD   a,b   ; save outer_length in a'
073A   08                     EX   af,af'   
073B   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
073C   7E                     LD   a,(hl)   ; c = a = inner_num_locals
073D   B7                     OR   a   
073E   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0740   4F                     LD   c,a   ; c = inner_num_locals
0741   06 00                  LD   b,0   ; bc = inner_num_locals
0743   23                     INC   hl   ; a = inner_length
0744   7E                     LD   a,(hl)   
0745   91                     SUB   c   ; a = inner_num_args
0746   23                     INC   hl   ; hl = inner_arg_chars
0747   85                     ADD   a,l   ; hl += a
0748   6F                     LD   l,a   
0749   3E 00                  LD   a,0   
074B   84                     ADD   a,h   
074C   67                     LD   h,a   
074D   ED B0                  LDIR      ; append inner_locals
074F                CREATEFUNC2A:      
074F   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0750   12                     LD   (de),a   ; compile partial_array length field
0751   13                     INC   de   
0752   AF                     XOR   a   
0753   12                     LD   (de),a   
0754   13                     INC   de   
0755   D5                     PUSH   de   ; push partial_array*
0756   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0757   FD 5E 02               LD   e,(iy+2)   
075A   FD 56 03               LD   d,(iy+3)   
075D   EB                     EX   de,hl   
075E                CREATEFUNC3:      
075E   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
075F   4E                     LD   c,(hl)   
0760   2B                     DEC   hl   
0761   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0762   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0763   13                     INC   de   
0764   79                     LD   a,c   
0765   12                     LD   (de),a   
0766   13                     INC   de   
0767   10 F5                  DJNZ   createFunc3   ; b = outer_length
0769                CREATEFUNC4:      
0769   E1                     POP   hl   ; hl = partial_array*
076A                CREATEFUNC5:      
076A   C1                     POP   bc   ; bc = new_arg_list*
076B   D5                     PUSH   de   ; return new func*
076C   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
076D   73                     LD   (hl),e   ; compile partial_array* to func
076E   23                     INC   hl   
076F   72                     LD   (hl),d   
0770   23                     INC   hl   
0771   ED 5B 02 24            LD   de,(vTemp2)   ; de = block*
0775   73                     LD   (hl),e   ; compile block* to func
0776   23                     INC   hl   
0777   72                     LD   (hl),d   
0778   23                     INC   hl   
0779   71                     LD   (hl),c   ; compile new_arg_list* to func
077A   23                     INC   hl   
077B   70                     LD   (hl),b   
077C   23                     INC   hl   
077D   22 F0 23               LD   (vHeapPtr),hl   ; bump heap ptr
0780   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
0784   DD E9                  JP   (ix)   
0786                             ; , discard stack item
0786                             ; x y -- x
0786                COMMA:       
0786                DISCARD:      
0786   FD 54                  LD   d,iyh   ; limit this to SP <= BP
0788   FD 5D                  LD   e,iyl   
078A   EB                     EX   de,hl   
078B   B7                     OR   a   
078C   ED 72                  SBC   hl,sp   
078E   CB 7C                  BIT   7,h   
0790   20 01                  JR   nz,discard1   
0792   E1                     POP   hl   
0793                DISCARD1:      
0793   DD E9                  JP   (ix)   
0795                DIV:         
0795   D1                     POP   de   
0796   E1                     POP   hl   
0797   C5                     PUSH   bc   ; preserve the IP
0798   44 4D                  LD   bc,hl   
079A   CD EF 08               CALL   divide   
079D   EB                     EX   de,hl   
079E   ED 53 F6 23            LD   (vRemain),de   
07A2   C1                     POP   bc   
07A3   C3 9B 03               JP   add3   
07A6                DECIMAL:      
07A6   21 0A 00               LD   hl,10   
07A9                DECIMAL1:      
07A9   22 E8 23               LD   (vNumBase),hl   
07AC   DD E9                  JP   (ix)   
07AE                HEXADECIMAL:      
07AE   21 10 00               LD   hl,16   
07B1   C3 A9 07               JP   decimal1   
07B4                DOT:         
07B4   CD 00 0D               CALL   jumpTable   
07B7   61                     DB   "a"   ; .a print array
07B8   C6 07                  DW   bufferArray   
07BA   63                     DB   "c"   ; .c print char
07BB   CE 08                  DW   bufferChar   
07BD   73                     DB   "s"   ; .s print string
07BE   B4 08                  DW   bufferString   
07C0   78                     DB   "x"   ; .x print x chars
07C1   D3 08                  DW   bufferXChars   
07C3   00                     DB   NUL   ; .  print number
07C4   0F 08                  DW   bufferNumber   
07C6                          ;*Macro unroll: FUNC bufferArray, 2, "abc"
07C6                BUFFERARRAY:      
07C6   CD D5 09               CALL   go   
07C9   00 00                  DW   NUL   
07CB   D4 07                  DW   bufferArrayM_1573S1096   
07CD   CF 07                  DW   $+2   
07CF   02                     DB   2   
07D0   03 61 62 63            .PSTR   "abc"   
07D4                BUFFERARRAYM_1573S1096:      
07D4   7B                     DB   "{"   
07D5   60 5B 20 60 2E 73 20 25 61 20 2F 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 60 5D 60 2E 73 00 DB   "`[ `.s %a /s%c= 0%b= (%a %b #. %b ++ %b %c </br)^ `]`.s",0   
080D   7D                     DB   "}"   
080E   00                     DB   0   
080F                             ; /bd buffer decimal
080F                             ; value --
080F                BUFFERNUMBER:      
080F   3A E8 23               LD   a,(vNumBase)   
0812   FE 10                  CP   16   
0814   28 66                  JR   z,bufferHex   ; else falls through
0816                             ; /bd buffer decimal
0816                             ; value --
0816                BUFFERDEC:      
0816   ED 5B EC 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
081A   D9                     EXX      
081B   E1                     POP   hl   ; hl = value
081C   CD 30 08               CALL   bufferDec0   
081F   D9                     EXX      ; de = buffer*' bc = IP
0820   3E 20                  LD   a," "   ; append space to buffer
0822   12                     LD   (de),a   
0823   1C                     INC   e   ; buffer*++, wraparound
0824   CC E9 0C               CALL   z,flushBuffer   
0827   2A EC 23               LD   hl,(vBufPtr)   ; hl = buffer*
082A   ED 53 EC 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
082E   DD E9                  JP   (ix)   
0830                             ; hl = value
0830                             ; de' = buffer*
0830                             ; a, bc, de, hl destroyed
0830                BUFFERDEC0:      
0830   CB 7C                  BIT   7,h   
0832   28 0C                  JR   z,bufferDec1   
0834   D9                     EXX      
0835   3E 2D                  LD   a,"-"   
0837   12                     LD   (de),a   
0838   13                     INC   de   
0839   D9                     EXX      
083A   AF                     XOR   a   
083B   95                     SUB   l   
083C   6F                     LD   l,a   
083D   9F                     SBC   a,a   
083E   94                     SUB   h   
083F   67                     LD   h,a   
0840                BUFFERDEC1:      
0840   0E 00                  LD   c,0   ; leading zeros flag = false
0842   11 F0 D8               LD   de,-10000   
0845   CD 60 08               CALL   bufferDec2   
0848   11 18 FC               LD   de,-1000   
084B   CD 60 08               CALL   bufferDec2   
084E   11 9C FF               LD   de,-100   
0851   CD 60 08               CALL   bufferDec2   
0854   1E F6                  LD   e,-10   
0856   CD 60 08               CALL   bufferDec2   
0859   0C                     INC   c   ; flag = true for at least digit
085A   1E FF                  LD   e,-1   
085C   CD 60 08               CALL   bufferDec2   
085F   C9                     RET      
0860                BUFFERDEC2:      
0860   06 2F                  LD   b,"0"-1   
0862                BUFFERDEC3:      
0862   04                     INC   b   
0863   19                     ADD   hl,de   
0864   38 FC                  JR   c,bufferDec3   
0866   ED 52                  SBC   hl,de   
0868   3E 30                  LD   a,"0"   
086A   B8                     CP   b   
086B   20 05                  JR   nz,bufferDec4   
086D   AF                     XOR   a   
086E   B1                     OR   c   
086F   C8                     RET   z   
0870   18 01                  JR   bufferDec5   
0872                BUFFERDEC4:      
0872   0C                     INC   c   
0873                BUFFERDEC5:      
0873   78                     LD   a,b   
0874   D9                     EXX      
0875   12                     LD   (de),a   
0876   1C                     INC   e   
0877   CC E9 0C               CALL   z,flushBuffer   
087A   D9                     EXX      
087B   C9                     RET      
087C                             ; /bh buffer hex
087C                             ; value --
087C                BUFFERHEX:      
087C   E1                     POP   hl   ; hl = value
087D   ED 5B EC 23            LD   de,(vBufPtr)   
0881   3E 24                  LD   a,"$"   ; # prefix
0883   12                     LD   (de),a   
0884   1C                     INC   e   ; buffer*++, wraparound
0885   CC E9 0C               CALL   z,flushBuffer   
0888   7C                     LD   a,h   
0889   CD 9D 08               CALL   bufferHex1   
088C   7D                     LD   a,l   
088D   CD 9D 08               CALL   bufferHex1   
0890   3E 20                  LD   a," "   ; append space to buffer
0892   12                     LD   (de),a   
0893   1C                     INC   e   ; buffer*++, wraparound
0894   CC E9 0C               CALL   z,flushBuffer   
0897   ED 53 EC 23            LD   (vBufPtr),de   
089B   DD E9                  JP   (ix)   
089D                BUFFERHEX1:      
089D   F5                     PUSH   af   
089E   1F                     RRA      
089F   1F                     RRA      
08A0   1F                     RRA      
08A1   1F                     RRA      
08A2   CD A6 08               CALL   bufferHex2   
08A5   F1                     POP   af   
08A6                BUFFERHEX2:      
08A6   E6 0F                  AND   0x0F   
08A8   C6 90                  ADD   a,0x90   
08AA   27                     DAA      
08AB   CE 40                  ADC   a,0x40   
08AD   27                     DAA      
08AE   12                     LD   (de),a   
08AF   1C                     INC   e   ; buffer*++, wraparound
08B0   CC E9 0C               CALL   z,flushBuffer   
08B3   C9                     RET      
08B4                             ; /bs buffered string
08B4                             ; string* --
08B4                BUFFERSTRING:      
08B4   E1                     POP   hl   ; hl = string*
08B5   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
08B9   18 06                  JR   bufferString1   
08BB                BUFFERSTRING0:      
08BB   12                     LD   (de),a   ; a -> buffer*
08BC   1C                     INC   e   ; buffer*++, wraparound
08BD   CC E9 0C               CALL   z,flushBuffer   
08C0   23                     INC   hl   
08C1                BUFFERSTRING1:      
08C1   7E                     LD   a,(hl)   ; a <- string*
08C2   B7                     OR   a   ; if NUL exit loop
08C3   20 F6                  JR   nz,bufferString0   
08C5   2A EC 23               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
08C8   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
08CC   DD E9                  JP   (ix)   
08CE                             ; /bc buffer char
08CE                             ; char --
08CE                BUFFERCHAR:      
08CE   21 01 00               LD   hl,1   
08D1   18 01                  JR   bufferXChars0   
08D3                             ; /bx buffered x chars
08D3                             ; char length --
08D3                BUFFERXCHARS:      
08D3   E1                     POP   hl   ; hl = length
08D4                BUFFERXCHARS0:      
08D4   D1                     POP   de   ; a' = char
08D5   7B                     LD   a,e   
08D6   08                     EX   af,af'   
08D7   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
08DB   18 08                  JR   bufferXChars2   
08DD                BUFFERXCHARS1:      
08DD   08                     EX   af,af'   
08DE   12                     LD   (de),a   
08DF   08                     EX   af,af'   
08E0   1C                     INC   e   ; buffer*++, wraparound
08E1   CC E9 0C               CALL   z,flushBuffer   
08E4   2B                     DEC   hl   
08E5                BUFFERXCHARS2:      
08E5   7D                     LD   a,l   
08E6   B4                     OR   h   
08E7   20 F4                  JR   nz,bufferXChars1   
08E9   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*'
08ED   DD E9                  JP   (ix)   
08EF                             ; division subroutine.
08EF                             ; bc: divisor, de: dividend, hl: remainder
08EF                DIVIDE:      
08EF   21 00 00               LD   hl,0   ; zero the remainder
08F2   3E 10                  LD   a,16   ; loop counter
08F4                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
08F4   CB 21                  SLA   c   
08F6   CB 10                  RL   b   
08F8   ED 6A                  ADC   hl,hl   
08FA   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
08FC   38 03                  JR   c,divide2   
08FE   0C                     INC   c   
08FF   18 01                  JR   divide3   
0901                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0901   19                     ADD   hl,de   
0902                DIVIDE3:      
0902   3D                     DEC   a   
0903   20 EF                  JR   nz,divide1   
0905   50 59                  LD   de,bc   ; result from bc to de
0907   C9                     RET      
0908                             ; hl = value1, de = value2
0908                             ; hl = result
0908                EQUALS:      
0908   B7                     OR   a   ; reset the carry flag
0909   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
090B   28 19                  JR   z,true1   
090D   C3 2C 09               JP   false1   
0910                NOTEQUALS:      
0910   B7                     OR   a   ; reset the carry flag
0911   ED 52                  SBC   hl,de   
0913   C2 26 09               JP   nz,true1   
0916   C3 2C 09               JP   false1   
0919                             ; hl = value1 de = value2
0919                             ; hl = result
0919                LESSTHANEQ:      
0919   B7                     OR   a   
091A   ED 52                  SBC   hl,de   
091C   18 05                  JR   lessthan1   
091E                             ; hl = value1 de = value2
091E                             ; hl = result
091E                LESSTHAN:      
091E   B7                     OR   a   
091F   ED 52                  SBC   hl,de   
0921   28 09                  JR   z,false1   
0923                LESSTHAN1:      
0923   FA 2C 09               JP   m,false1   
0926                TRUE1:       
0926   21 FF FF               LD   hl,TRUE   
0929   E5                     PUSH   hl   
092A   DD E9                  JP   (ix)   
092C                NULL1:       
092C                FALSE1:      
092C   21 00 00               LD   hl,FALSE   
092F   E5                     PUSH   hl   
0930   DD E9                  JP   (ix)   
0932                ERROR1:      
0932   21 01 00               LD   hl,1   ; error 1: unknown command
0935   E5                     PUSH   hl   
0936   C3 84 0E               JP   error   
0939                             ; /fl flush
0939                             ; --
0939                FLUSH:       
0939   CD E9 0C               CALL   flushBuffer   
093C   DD E9                  JP   (ix)   
093E                             ; /fe forEach
093E                             ; src proc --
093E                          ;*Macro unroll: FUNC forEach, 1, "spT"
093E                FOREACH:      
093E   CD D5 09               CALL   go   
0941   00 00                  DW   NUL   
0943   4C 09                  DW   forEachM_1803S1344   
0945   47 09                  DW   $+2   
0947   01                     DB   1   
0948   03 73 70 54            .PSTR   "spT"   
094C                FOREACHM_1803S1344:      
094C   7B                     DB   "{"   
094D   5B 30 5D 25 54 3D      DB   "[0]%T="   
0953   3A 64 74 7B            DB   ":dt{"   ; return talkback to receive data
0957   32 25 74 21 3D 2F 62 72 DB   "2%t!=/br"   ; break if type = 2
095F   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0964   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0976   3F 3F                  DB   "??"   ; ifte:
0978   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0981   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   
0989   7D                     DB   "}"   
098A   00                     DB   0   
098B                             ; ; /fs funcSrc
098B                             ; ; func -- src
098B                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
098B                FUNCSRC:      ; :f func or block
098B   CD D5 09               CALL   go   
098E   00 00                  DW   NUL   
0990   97 09                  DW   funcSrcM_1817S1359   
0992   94 09                  DW   $+2   
0994   00                     DB   0   
0995   01 66                  .PSTR   "f"   
0997                FUNCSRCM_1817S1359:      
0997   7B                     DB   "{"   
0998   3A 6B 74 7B            DB   ":kt{"   ; :kt sink, type
099C   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
09A4   3A 64 74 7B            DB   ":dt{"   
09A8   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
09BA   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
09C2   7D 3B                  DB   "};"   
09C4   7D                     DB   "}"   
09C5   00                     DB   0   
09C6                FZ:          
09C6   21 00 21               LD   hl,STACK   
09C9   ED 72                  SBC   hl,sp   
09CB   CB 3C                  SRL   h   
09CD   CB 1D                  RR   l   
09CF   E5                     PUSH   hl   
09D0   C3 0F 08               JP   bufferNumber   
09D3                             ; /pk print stack
09D3                             ; --
09D3                PRINTSTACK:      
09D3                             ;     ld (vTemp1),bc
09D3                             ;     call printStr
09D3                             ;     .cstr "=> "
09D3                             ;     ld hl,STACK
09D3                             ;     sbc hl,sp
09D3                             ;     srl h
09D3                             ;     rr l
09D3                             ;     ld bc,hl
09D3                             ;     ld hl,STACK
09D3                             ;     jr printStack2
09D3                             ; printStack1:
09D3                             ;     dec bc
09D3                             ;     dec hl
09D3                             ;     ld d,(hl)
09D3                             ;     dec hl
09D3                             ;     ld e,(hl)
09D3                             ;     ex de,hl
09D3                             ;     call prthex
09D3                             ;     ex de,hl
09D3                             ;     ld a," "
09D3                             ;     call putchar
09D3                             ; printStack2:
09D3                             ;     ld a,c
09D3                             ;     or b
09D3                             ;     jr nz,printStack1
09D3                             ;     call prompt
09D3                             ;     ld bc,(vTemp1)
09D3   DD E9                  JP   (ix)   
09D5                             ; execute a block of code which ends with }
09D5                             ; creates a root scope if BP == stack
09D5                             ; else uses outer scope
09D5                CARET:       
09D5                GO:          
09D5   D1                     POP   de   ; de = block*
09D6                GO1:         
09D6   7B                     LD   a,e   ; if block* == null, exit
09D7   B2                     OR   d   
09D8   20 02                  JR   nz,go2   
09DA   DD E9                  JP   (ix)   
09DC                GO2:         
09DC   1A                     LD   a,(de)   
09DD   FE 7B                  CP   "{"   
09DF   28 06                  JR   z,goBlock   
09E1   FE 28                  CP   "("   
09E3   C2 1A 0A               JP   nz,goFunc   
09E6   D5                     PUSH   de   ; push de just before stack frame
09E7                GOBLOCK:      
09E7   ED 53 00 24            LD   (vTemp1),de   ; save de
09EB   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
09EE   FD 54                  LD   d,iyh   
09F0   FD 5D                  LD   e,iyl   
09F2   B7                     OR   a   ; if stack* == BP then this is the root_scope
09F3   ED 52                  SBC   hl,de   
09F5   ED 5B 00 24            LD   de,(vTemp1)   ; restore de
09F9   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
09FA   B4                     OR   h   
09FB   3E 00                  LD   a,0   
09FD   28 6A                  JR   z,goFunc8   
09FF   C5                     PUSH   bc   ; push IP
0A00   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0A03   FD 46 05               LD   b,(iy+5)   
0A06   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0A09   FD 66 03               LD   h,(iy+3)   
0A0C                GOBLOCK2:      
0A0C   C5                     PUSH   bc   ; arg_list*
0A0D   E5                     PUSH   hl   ; first_arg*
0A0E   FD E5                  PUSH   iy   ; push BP
0A10   FD 21 00 00            LD   iy,0   ; BP = SP
0A14   FD 39                  ADD   iy,sp   
0A16                GOBLOCK3:      
0A16   42 4B                  LD   bc,de   ; bc = de = block*-1
0A18   DD E9                  JP   (ix)   
0A1A                GOFUNC:      ; execute func
0A1A   EB                     EX   de,hl   ; hl = func*
0A1B   5E                     LD   e,(hl)   ; de = partial_array*
0A1C   23                     INC   hl   
0A1D   56                     LD   d,(hl)   
0A1E   23                     INC   hl   
0A1F   7B                     LD   a,e   ; if partial_array* == null skip
0A20   B2                     OR   d   
0A21   28 21                  JR   z,goFunc3   
0A23   ED 43 00 24            LD   (vTemp1),bc   
0A27   22 02 24               LD   (vTemp2),hl   ; save bc,hl
0A2A   EB                     EX   de,hl   ; hl = partial_array*
0A2B   2B                     DEC   hl   ; bc = count
0A2C   46                     LD   b,(hl)   
0A2D   2B                     DEC   hl   
0A2E   4E                     LD   c,(hl)   
0A2F   23                     INC   hl   ; hl = array data*
0A30   23                     INC   hl   
0A31   18 06                  JR   goFunc2   ; push each item on stack
0A33                GOFUNC1:      
0A33   5E                     LD   e,(hl)   ; de = partial item
0A34   23                     INC   hl   
0A35   56                     LD   d,(hl)   
0A36   23                     INC   hl   
0A37   D5                     PUSH   de   ; push on stack
0A38   0B                     DEC   bc   
0A39                GOFUNC2:      
0A39   79                     LD   a,c   ; if count != 0 then loop
0A3A   B0                     OR   b   
0A3B   20 F6                  JR   nz,goFunc1   
0A3D   ED 4B 00 24            LD   bc,(vTemp1)   ; restore bc
0A41   2A 02 24               LD   hl,(vTemp2)   ; restore hl
0A44                GOFUNC3:      
0A44   5E                     LD   e,(hl)   ; de = block*
0A45   23                     INC   hl   
0A46   56                     LD   d,(hl)   
0A47   23                     INC   hl   
0A48   ED 53 00 24            LD   (vTemp1),de   ; save block*
0A4C   5E                     LD   e,(hl)   ; de = arg_list*
0A4D   23                     INC   hl   
0A4E   56                     LD   d,(hl)   
0A4F   23                     INC   hl   
0A50   EB                     EX   de,hl   ; hl = arg_list*
0A51   ED 5B 00 24            LD   de,(vTemp1)   ; restore de = block*
0A55   7D                     LD   a,l   ; if arg_list* == null a = 0
0A56   B4                     OR   h   
0A57   20 03                  JR   nz,goFunc4   
0A59   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0A5A   18 0D                  JR   goFunc8   
0A5C                GOFUNC4:      ; allocate locals
0A5C   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0A5D   18 03                  JR   goFunc6   
0A5F                GOFUNC5:      ; loop
0A5F   3B                     DEC   sp   
0A60   3B                     DEC   sp   
0A61   3D                     DEC   a   
0A62                GOFUNC6:      
0A62   B7                     OR   a   
0A63   20 FA                  JR   nz,goFunc5   ; end loop
0A65                GOFUNC7:      
0A65   23                     INC   hl   ; a = num_args* x 2
0A66   7E                     LD   a,(hl)   
0A67   2B                     DEC   hl   
0A68   87                     ADD   a,a   ; a *= 2
0A69                GOFUNC8:      
0A69   C5                     PUSH   bc   ; push IP
0A6A   44 4D                  LD   bc,hl   
0A6C   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0A6F   85                     ADD   a,l   
0A70   6F                     LD   l,a   
0A71   39                     ADD   hl,sp   
0A72   18 98                  JR   goBlock2   
0A74                DOLLAR:      
0A74                HEXNUM:      
0A74   21 00 00               LD   hl,0   ; Clear hl to accept the number
0A77                HEXNUM1:      
0A77   03                     INC   bc   
0A78   0A                     LD   a,(bc)   ; Get the character which is a numeral
0A79   CB 77                  BIT   6,a   ; is it uppercase alpha?
0A7B   28 02                  JR   z,hexnum2   ; no a decimal
0A7D   D6 07                  SUB   7   ; sub 7  to make $a - $F
0A7F                HEXNUM2:      
0A7F   D6 30                  SUB   $30   ; form decimal digit
0A81   DA 69 0B               JP   c,num2   
0A84   FE 10                  CP   $0F+1   
0A86   D2 69 0B               JP   nc,num2   
0A89   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0A8A   29                     ADD   hl,hl   ; 4X
0A8B   29                     ADD   hl,hl   ; 8X
0A8C   29                     ADD   hl,hl   ; 16X
0A8D   85                     ADD   a,l   ; add into bottom of hl
0A8E   6F                     LD   l,a   
0A8F   18 E6                  JR   hexnum1   
0A91                UPCASE:      
0A91   0A                     LD   a,(bc)   ; a = identifier char
0A92   D6 41                  SUB   "A"   ; "A" = 0
0A94   18 05                  JR   ident1   
0A96                LOWCASE:      
0A96   0A                     LD   a,(bc)   
0A97   D6 61                  SUB   "a"   
0A99   C6 1A                  ADD   a,26   
0A9B                IDENT1:      
0A9B   87                     ADD   a,a   ; l = a * 2
0A9C   6F                     LD   l,a   
0A9D   26 23                  LD   h,msb(vars)   
0A9F   22 F4 23               LD   (vPointer),hl   ; store address in setter
0AA2   5E                     LD   e,(hl)   
0AA3   23                     INC   hl   
0AA4   56                     LD   d,(hl)   
0AA5   D5                     PUSH   de   
0AA6   DD E9                  JP   (ix)   
0AA8                             ; if
0AA8                             ; condition then -- value
0AA8                QUESTION:      
0AA8                IF:          
0AA8   03                     INC   bc   
0AA9   0A                     LD   a,(bc)   
0AAA   FE 3F                  CP   "?"   
0AAC   28 06                  JR   z,ifte   
0AAE   0B                     DEC   bc   
0AAF   11 00 00               LD   de,NUL   ; NUL pointer for else
0AB2   18 01                  JR   ifte1   
0AB4                             ; ifte
0AB4                             ; condition then else -- value
0AB4                IFTE:        
0AB4   D1                     POP   de   ; de = else
0AB5                IFTE1:       
0AB5   E1                     POP   hl   ; hl = then
0AB6   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0AB7   7C                     LD   a,h   
0AB8   B5                     OR   l   
0AB9   E1                     POP   hl   ; hl = then
0ABA   CA D6 09               JP   z,go1   ; if z de = else
0ABD   EB                     EX   de,hl   ; condition = false, de = then
0ABE   C3 D6 09               JP   go1   
0AC1                             ; Z80 port input
0AC1                             ; port -- value
0AC1                INPUT:       
0AC1   E1                     POP   hl   
0AC2   59                     LD   e,c   ; save IP
0AC3   4D                     LD   c,l   
0AC4   ED 68                  IN   l,(c)   
0AC6   26 00                  LD   h,0   
0AC8   4B                     LD   c,e   ; restore IP
0AC9   E5                     PUSH   hl   
0ACA   DD E9                  JP   (ix)   
0ACC                KEY:         
0ACC   CD 81 00               CALL   getchar   
0ACF   26 00                  LD   h,0   
0AD1   6F                     LD   l,a   
0AD2   E5                     PUSH   hl   
0AD3   DD E9                  JP   (ix)   
0AD5                             ; /li literal
0AD5                             ; low level operation
0AD5                             ; reads the next two bytes and
0AD5                             ; pushes a word on the stack
0AD5                             ; -- value
0AD5                LITERAL:      
0AD5   03                     INC   bc   
0AD6   0A                     LD   a,(bc)   
0AD7   6F                     LD   l,a   
0AD8   03                     INC   bc   
0AD9   0A                     LD   a,(bc)   
0ADA   67                     LD   h,a   
0ADB   E5                     PUSH   hl   
0ADC   DD E9                  JP   (ix)   
0ADE                             ; Z80 port output
0ADE                             ; value port --
0ADE                OUTPUT:      
0ADE   E1                     POP   hl   
0ADF   59                     LD   e,c   ; save IP
0AE0   4D                     LD   c,l   
0AE1   E1                     POP   hl   
0AE2   ED 69                  OUT   (c),l   
0AE4   4B                     LD   c,e   ; restore IP
0AE5   DD E9                  JP   (ix)   
0AE7                             ; /mp map
0AE7                             ; src func -- src1
0AE7                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map
0AE7                MAP:         ; map
0AE7   CD D5 09               CALL   go   
0AEA   00 00                  DW   NUL   
0AEC   F4 0A                  DW   mapM_2087S1643   
0AEE   F0 0A                  DW   $+2   
0AF0   00                     DB   0   
0AF1   02 73 66               .PSTR   "sf"   
0AF4                MAPM_2087S1643:      
0AF4   7B                     DB   "{"   
0AF5   3A 6B 74 7B            DB   ":kt{"   
0AF9   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
0B01   3A 64 74 7B            DB   ":dt{"   ; call source with tb
0B05   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0B0A   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
0B16   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0B1F   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   
0B27   7D 3B                  DB   "};"   
0B29   7D                     DB   "}"   
0B2A   00                     DB   0   
0B2B                STAR:        
0B2B                MUL:         
0B2B   D1                     POP   de   ; get first value
0B2C   E1                     POP   hl   
0B2D                MUL2:        
0B2D   C5                     PUSH   bc   ; Preserve the IP
0B2E   44 4D                  LD   bc,hl   ; bc = 2nd value
0B30   21 00 00               LD   hl,0   
0B33   3E 10                  LD   a,16   
0B35                MUL3:        
0B35   29                     ADD   hl,hl   
0B36   CB 13                  RL   e   
0B38   CB 12                  RL   d   
0B3A   30 04                  JR   nc,$+6   
0B3C   09                     ADD   hl,bc   
0B3D   30 01                  JR   nc,$+3   
0B3F   13                     INC   de   
0B40   3D                     DEC   a   
0B41   20 F2                  JR   nz,mul3   
0B43   C1                     POP   bc   ; Restore the IP
0B44   C3 9B 03               JP   add3   
0B47                NUM:         
0B47   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B4A   0A                     LD   a,(bc)   ; Get numeral or -
0B4B   FE 2D                  CP   "-"   
0B4D   20 01                  JR   nz,num0   
0B4F   03                     INC   bc   ; move to next char, no flags affected
0B50                NUM0:        
0B50   08                     EX   af,af'   ; save zero flag = 0 for later
0B51                NUM1:        
0B51   0A                     LD   a,(bc)   ; read digit
0B52   D6 30                  SUB   "0"   ; less than 0?
0B54   38 13                  JR   c,num2   ; not a digit, exit loop
0B56   FE 0A                  CP   10   ; greater that 9?
0B58   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B5A   03                     INC   bc   ; inc IP
0B5B   54 5D                  LD   de,hl   ; multiply hl * 10
0B5D   29                     ADD   hl,hl   
0B5E   29                     ADD   hl,hl   
0B5F   19                     ADD   hl,de   
0B60   29                     ADD   hl,hl   
0B61   85                     ADD   a,l   ; add digit in a to hl
0B62   6F                     LD   l,a   
0B63   3E 00                  LD   a,0   
0B65   8C                     ADC   a,h   
0B66   67                     LD   h,a   
0B67   18 E8                  JR   num1   
0B69                NUM2:        
0B69   0B                     DEC   bc   
0B6A   08                     EX   af,af'   ; restore zero flag
0B6B   20 07                  JR   nz,num3   
0B6D   EB                     EX   de,hl   ; negate the value of hl
0B6E   21 00 00               LD   hl,0   
0B71   B7                     OR   a   ; jump to sub2
0B72   ED 52                  SBC   hl,de   
0B74                NUM3:        
0B74   E5                     PUSH   hl   ; Put the number on the stack
0B75   DD E9                  JP   (ix)   ; and process the next character
0B77                             ; /rs rangeSrc
0B77                             ; begin end step -- src
0B77                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source (begin end step)
0B77                RANGESRC:      ; range source (begin end step)
0B77   CD D5 09               CALL   go   
0B7A   00 00                  DW   NUL   
0B7C   86 0B                  DW   rangeSrcM_2159S1718   
0B7E   80 0B                  DW   $+2   
0B80   01                     DB   1   
0B81   04 62 65 73 4C         .PSTR   "besL"   
0B86                RANGESRCM_2159S1718:      
0B86   7B                     DB   "{"   
0B87   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
0B92   3A 6B 74 7B            DB   ":kt{"   
0B96   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
0B9E   3A 64 74 3A 61 7B      DB   ":dt:a{"   ; return talkback to receive data
0BA4   25 4C 31 23 2F 62 72   DB   "%L1#/br"   ; if not active don't send
0BAB   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
0BB3   25 73 20 25 4C 30 23 20 2B 20 25 4C 30 23 3D DB   "%s %L0# + %L0#="   ; inc value of index by step
0BC2   31 25 74 3D 3D 2F 62 72 DB   "1%t==/br"   ; break if type != 0
0BCA   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
0BD1   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: 1: send index, 2: active = false, send quit
0BE5   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
0BED   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
0BF5   7D 3B                  DB   "};"   
0BF7   7D                     DB   "}"   
0BF8   00                     DB   0   
0BF9                RPAREN:      
0BF9   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0BFC   FD 46 09               LD   b,(iy+9)   
0BFF   DD E9                  JP   (ix)   
0C01                             ; shiftLeft
0C01                             ; value count -- value2          shift left count places
0C01                SHIFTLEFT:      
0C01   50 59                  LD   de,bc   ; save IP
0C03   C1                     POP   bc   ; bc = count
0C04   41                     LD   b,c   ; b = loop counter
0C05   E1                     POP   hl   
0C06   04                     INC   b   ; test for counter=0 case
0C07   18 01                  JR   shiftLeft2   
0C09                SHIFTLEFT1:      
0C09   29                     ADD   hl,hl   ; left shift hl
0C0A                SHIFTLEFT2:      
0C0A   10 FD                  DJNZ   shiftLeft1   
0C0C   E5                     PUSH   hl   
0C0D   42 4B                  LD   bc,de   ; restore IP
0C0F   DD E9                  JP   (ix)   
0C11                             ; shiftRight
0C11                             ; value count -- value2          shift left count places
0C11                SHIFTRIGHT:      
0C11   50 59                  LD   de,bc   ; save IP
0C13   C1                     POP   bc   ; bc = count
0C14   41                     LD   b,c   ; b = loop counter
0C15   E1                     POP   hl   
0C16   04                     INC   b   ; test for counter=0 case
0C17   18 04                  JR   shiftRight2   
0C19                SHIFTRIGHT1:      
0C19   CB 3C                  SRL   h   ; right shift hl
0C1B   CB 1D                  RR   l   
0C1D                SHIFTRIGHT2:      
0C1D   10 FA                  DJNZ   shiftRight1   
0C1F   E5                     PUSH   hl   
0C20   42 4B                  LD   bc,de   ; restore IP
0C22   DD E9                  JP   (ix)   
0C24                             ; string
0C24                             ; -- ptr                        ; points to start of string chars,
0C24                             ; length is stored at start - 2 bytes
0C24                DQUOTE:      
0C24                STRING:      
0C24   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0C27   23                     INC   hl   ; skip length field to start
0C28   23                     INC   hl   
0C29   E5                     PUSH   hl   ; save start of string
0C2A   03                     INC   bc   ; point to next char
0C2B   18 03                  JR   string2   
0C2D                STRING1:      
0C2D   77                     LD   (hl),a   
0C2E   23                     INC   hl   ; increase count
0C2F   03                     INC   bc   ; point to next char
0C30                STRING2:      
0C30   0A                     LD   a,(bc)   
0C31   FE 22                  CP   DQ   ; " is the string terminator
0C33   28 04                  JR   z,string3   
0C35   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0C37   20 F4                  JR   nz,string1   
0C39                STRING3:      
0C39   AF                     XOR   a   ; write NUL to terminate string
0C3A   77                     LD   (hl),a   ; hl = end of string
0C3B   23                     INC   hl   
0C3C   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0C3F   2B                     DEC   hl   ; hl = end of string without terminator
0C40   D1                     POP   de   ; de = start of string
0C41   D5                     PUSH   de   ; return start of string
0C42   B7                     OR   a   ; hl = length bytes, de = start of string
0C43   ED 52                  SBC   hl,de   
0C45   EB                     EX   de,hl   
0C46   2B                     DEC   hl   ; write length bytes to length field at start - 2
0C47   72                     LD   (hl),d   
0C48   2B                     DEC   hl   
0C49   73                     LD   (hl),e   
0C4A   DD E9                  JP   (ix)   
0C4C                MINUS:       ; negative sign or subtract
0C4C   03                     INC   bc   ; check if sign of a number
0C4D   0A                     LD   a,(bc)   
0C4E   0B                     DEC   bc   
0C4F   FE 30                  CP   "0"   
0C51   38 05                  JR   c,sub   
0C53   FE 3A                  CP   "9"+1   
0C55   DA 44 03               JP   c,num_   
0C58                SUB:         ; Subtract the value 2nd on stack from top of stack
0C58   03                     INC   bc   
0C59   FE 2D                  CP   "-"   
0C5B   20 05                  JR   nz,sub1   
0C5D   E1                     POP   hl   
0C5E   2B                     DEC   hl   
0C5F   C3 CB 04               JP   assign0   
0C62                SUB1:        
0C62   0B                     DEC   bc   
0C63   D1                     POP   de   
0C64   E1                     POP   hl   
0C65   B7                     OR   a   
0C66   ED 52                  SBC   hl,de   
0C68   C3 9B 03               JP   add3   
0C6B                             ; /pb printBuffer
0C6B                             ; --
0C6B                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
0C6B                          ;*Macro unroll: FUNC printBuffer, 0, "a"
0C6B                PRINTBUFFER:      
0C6B   CD D5 09               CALL   go   
0C6E   00 00                  DW   NUL   
0C70   77 0C                  DW   printBufferM_2275S1841   
0C72   74 0C                  DW   $+2   
0C74   00                     DB   0   
0C75   01 61                  .PSTR   "a"   
0C77                PRINTBUFFERM_2275S1841:      
0C77   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0C91                             ; printChars
0C91                             ; char* len --
0C91                PRINTCHARS:      
0C91   E1                     POP   hl   ; hl = count
0C92   D1                     POP   de   ; de = char*
0C93   CD 9E 0C               CALL   printChars2   
0C96   DD E9                  JP   (ix)   
0C98                PRINTCHARS1:      
0C98   1A                     LD   a,(de)   ; print char at char*
0C99   CD 85 00               CALL   putchar   
0C9C   13                     INC   de   ; char*++
0C9D   2B                     DEC   hl   ; count--
0C9E                PRINTCHARS2:      
0C9E   7D                     LD   a,l   ; count == 0?
0C9F   B4                     OR   h   
0CA0   C8                     RET   z   
0CA1   18 F5                  JR   printChars1   ; if not loop
0CA3                RECUR:       
0CA3   E1                     POP   hl   
0CA4   22 F2 23               LD   (vRecur),hl   
0CA7   DD E9                  JP   (ix)   
0CA9                REMAIN:      
0CA9   2A F6 23               LD   hl,(vRemain)   
0CAC   E5                     PUSH   hl   
0CAD   DD E9                  JP   (ix)   
0CAF                SIZE:        
0CAF   E1                     POP   hl   
0CB0   2B                     DEC   hl   ; msb size
0CB1   56                     LD   d,(hl)   
0CB2   2B                     DEC   hl   ; lsb size
0CB3   5E                     LD   e,(hl)   
0CB4   D5                     PUSH   de   
0CB5   DD E9                  JP   (ix)   
0CB7                CONSTBUFSTART:      
0CB7   11 00 22               LD   de,BUF   
0CBA   18 28                  JR   constant   
0CBC                CONSTHEAPSTART:      
0CBC   11 1C 24               LD   de,HEAP   
0CBF   18 23                  JR   constant   
0CC1                CONSTTIBSTART:      
0CC1   11 00 21               LD   de,TIB   
0CC4   18 1E                  JR   constant   
0CC6                VARBUFPTR:      
0CC6   ED 5B EC 23            LD   de,(vBufPtr)   
0CCA   21 EC 23               LD   hl,vBufPtr   
0CCD   18 12                  JR   variable   
0CCF                VARHEAPPTR:      
0CCF   ED 5B F0 23            LD   de,(vHeapPtr)   
0CD3   21 F0 23               LD   hl,vHeapPtr   
0CD6   18 09                  JR   variable   
0CD8                VARTIBPTR:      
0CD8   ED 5B EA 23            LD   de,(vTIBPtr)   
0CDC   21 EA 23               LD   hl,vTIBPtr   
0CDF   18 00                  JR   variable   
0CE1                VARIABLE:      
0CE1   22 F4 23               LD   (vPointer),hl   
0CE4                CONSTANT:      
0CE4   D5                     PUSH   de   
0CE5   DD E9                  JP   (ix)   
0CE7                             ; 
0CE7                FILTER:      
0CE7                SCAN:        
0CE7   DD E9                  JP   (ix)   
0CE9                             ;*******************************************************************
0CE9                             ; general routines
0CE9                             ;*******************************************************************
0CE9                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0CE9                FLUSHBUFFER:      
0CE9   F5                     PUSH   af   
0CEA   D5                     PUSH   de   
0CEB   E5                     PUSH   hl   
0CEC   2A EC 23               LD   hl,(vBufPtr)   
0CEF   11 00 22               LD   de,BUF   
0CF2   ED 53 EC 23            LD   (vBufPtr),de   
0CF6   B7                     OR   a   
0CF7   ED 52                  SBC   hl,de   
0CF9   CD 9E 0C               CALL   printChars2   
0CFC   E1                     POP   hl   
0CFD   D1                     POP   de   
0CFE   F1                     POP   af   
0CFF   C9                     RET      
0D00                             ; followed by a table
0D00                             ; db char
0D00                             ; dw addr
0D00                             ; the final item must have char == NUL
0D00                JUMPTABLE:      
0D00   03                     INC   bc   
0D01   E1                     POP   hl   
0D02                JUMPTABLE0:      
0D02   AF                     XOR   a   
0D03   BE                     CP   (hl)   
0D04   28 09                  JR   z,jumpTable1   
0D06   0A                     LD   a,(bc)   
0D07   BE                     CP   (hl)   
0D08   28 06                  JR   z,jumpTable2   
0D0A   23                     INC   hl   
0D0B   23                     INC   hl   
0D0C   23                     INC   hl   
0D0D   18 F3                  JR   jumpTable0   
0D0F                JUMPTABLE1:      
0D0F   0B                     DEC   bc   
0D10                JUMPTABLE2:      
0D10   23                     INC   hl   
0D11   5E                     LD   e,(hl)   
0D12   23                     INC   hl   
0D13   56                     LD   d,(hl)   
0D14   EB                     EX   de,hl   
0D15   E9                     JP   (hl)   
0D16                PRTSTR0:      
0D16   CD 85 00               CALL   putchar   
0D19   23                     INC   hl   
0D1A                PRTSTR:      
0D1A   7E                     LD   a,(hl)   
0D1B   B7                     OR   a   
0D1C   20 F8                  JR   nz,prtstr0   
0D1E   C9                     RET      
0D1F                             ; **************************************************************************
0D1F                             ; calculate nesting value
0D1F                             ; a is char to be tested,
0D1F                             ; e is the nesting value (initially 0)
0D1F                             ; e is increased by ( and [
0D1F                             ; e is decreased by ) and ]
0D1F                             ; e has its bit 7 toggled by `
0D1F                             ; limited to 127 levels
0D1F                             ; **************************************************************************
0D1F                NESTING:      
0D1F   FE 22                  CP   DQ   ; quote char
0D21   28 06                  JR   z,nesting0   
0D23   FE 60                  CP   "`"   ; quote char
0D25   28 02                  JR   z,nesting0   
0D27   18 0A                  JR   nesting1   
0D29                NESTING0:      
0D29   CB 7B                  BIT   7,e   
0D2B   28 03                  JR   z,nesting1a   
0D2D   CB BB                  RES   7,e   
0D2F   C9                     RET      
0D30                NESTING1A:      
0D30   CB FB                  SET   7,e   
0D32   C9                     RET      
0D33                NESTING1:      
0D33   CB 7B                  BIT   7,e   
0D35   C0                     RET   nz   
0D36   FE 7B                  CP   "{"   
0D38   28 08                  JR   z,nesting2   
0D3A   FE 5B                  CP   "["   
0D3C   28 04                  JR   z,nesting2   
0D3E   FE 28                  CP   "("   
0D40   20 02                  JR   nz,nesting3   
0D42                NESTING2:      
0D42   1C                     INC   e   
0D43   C9                     RET      
0D44                NESTING3:      
0D44   FE 7D                  CP   "}"   
0D46   28 07                  JR   z,nesting4   
0D48   FE 5D                  CP   "]"   
0D4A   28 03                  JR   z,nesting4   
0D4C   FE 29                  CP   ")"   
0D4E   C0                     RET   nz   
0D4F                NESTING4:      
0D4F   1D                     DEC   e   
0D50   C9                     RET      
0D51                PROMPT:      
0D51   CD 61 0D               CALL   printStr   
0D54   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0D59   C9                     RET      
0D5A                CRLF:        
0D5A   CD 61 0D               CALL   printStr   
0D5D   0D 0A 00               .CSTR   "\r\n"   
0D60   C9                     RET      
0D61                             ; prints a null teminated string
0D61                             ; the string should be immediately following the call
0D61                PRINTSTR:      
0D61   E3                     EX   (sp),hl   ; swap			
0D62   CD 1A 0D               CALL   prtstr   
0D65   23                     INC   hl   ; inc past NUL
0D66   E3                     EX   (sp),hl   ; put it back	
0D67   C9                     RET      
0D68                TITLESTR:      
0D68   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0D7C                INIT:        
0D7C   21 68 0D               LD   hl,titleStr   
0D7F   11 08 24               LD   de,titleBuf   
0D82   06 14                  LD   b,20   
0D84                INIT1:       
0D84   1A                     LD   a,(de)   
0D85   BE                     CP   (hl)   
0D86   20 17                  JR   nz,coldBoot0   
0D88   13                     INC   de   
0D89   23                     INC   hl   
0D8A   10 F8                  DJNZ   init1   
0D8C                WARMINIT:      
0D8C   ED 4B F8 23            LD   bc,(vSavedIP)   ; restore IP
0D90   ED 7B FA 23            LD   sp,(vSavedSP)   ; restore SP
0D94   DD 2A FC 23            LD   ix,(vSavedNext)   ; restore Next
0D98   FD 2A FE 23            LD   iy,(vSavedBP)   ; restore BP
0D9C   C3 D6 0D               JP   start1   
0D9F                COLDBOOT0:      
0D9F   21 68 0D               LD   hl,titleStr   ; copy titleStr to titleBuf
0DA2   11 08 24               LD   de,titleBuf   
0DA5   06 14                  LD   b,20   
0DA7   ED B0                  LDIR      
0DA9                COLDINIT:      
0DA9   21 80 01               LD   hl,isysVars   
0DAC   11 E6 23               LD   de,sysVars   
0DAF   01 10 00               LD   bc,8 * 2   
0DB2   ED B0                  LDIR      
0DB4   21 00 23               LD   hl,vars   ; 52 vars LO HI
0DB7   06 34                  LD   b,26*2   
0DB9   AF                     XOR   a   
0DBA                COLDBOOT1:      
0DBA   77                     LD   (hl),a   
0DBB   23                     INC   hl   
0DBC   10 FC                  DJNZ   coldBoot1   
0DBE   DD 2A EE 23            LD   ix,(vNext)   
0DC2   FD 21 00 21            LD   iy,STACK   
0DC6   C9                     RET      
0DC7                COLDSTART:      
0DC7   31 00 21               LD   sp,STACK   
0DCA   CD 9F 0D               CALL   coldBoot0   
0DCD   C3 D6 0D               JP   start1   
0DD0                START:       
0DD0   31 00 21               LD   sp,STACK   ; start Monty
0DD3   CD 7C 0D               CALL   init   ; setups
0DD6                START1:      
0DD6   21 08 24               LD   hl,titleBuf   
0DD9   CD 1A 0D               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0DDC                INTERPRET:      
0DDC   CD E9 0C               CALL   flushBuffer   
0DDF   CD 51 0D               CALL   prompt   
0DE2   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0DE5   21 00 21               LD   hl,TIB   
0DE8   22 EA 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0DEB                INTERPRET2:      ; calculate nesting
0DEB   1E 00                  LD   e,0   ; initilize nesting value
0DED   C5                     PUSH   bc   ; save offset into TIB,
0DEE                             ; bc is also the count of chars in TIB
0DEE   21 00 21               LD   hl,TIB   ; hl is start of TIB
0DF1   18 0B                  JR   interpret4   
0DF3                INTERPRET3:      
0DF3   3E 33                  LD   a,"3"   
0DF5   CD 85 00               CALL   putchar   
0DF8   7E                     LD   a,(hl)   ; a = char in TIB
0DF9   23                     INC   hl   ; inc pointer into TIB
0DFA   0B                     DEC   bc   ; dec count of chars in TIB
0DFB   CD 1F 0D               CALL   nesting   ; update nesting value
0DFE                INTERPRET4:      
0DFE   79                     LD   a,c   ; is count zero?
0DFF   B0                     OR   b   
0E00   20 F1                  JR   nz,interpret3   ; if not loop
0E02   C1                     POP   bc   ; restore offset into TIB
0E03                INTERPRET5:      
0E03   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0E06   FE 20                  CP   $20   ; compare to space
0E08   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0E0A   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0E0C                             ; ???? NEEDED?
0E0C   28 3B                  JR   z,interpret8   
0E0E   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0E10   28 24                  JR   z,interpret7   ; if anything else its macro/control
0E12   FE 05                  CP   CTRL_E   
0E14   CA A7 0E               JP   z,edit_   
0E17   FE 08                  CP   CTRL_H   
0E19   CA 97 0E               JP   z,backSpace_   
0E1C   FE 0A                  CP   CTRL_J   
0E1E   CA BF 0E               JP   z,reEdit_   
0E21   FE 13                  CP   CTRL_S   
0E23   CA C2 0E               JP   z,printStack_   
0E26                             ; DB     lsb(edit_)       ; ENQ ^E  5
0E26                             ; DB     lsb(reedit_)     ; LF  ^J 10
0E26                             ; DB     lsb(list_)       ; FF  ^L 12
0E26                             ; DB     lsb(printStack_) ; DLE ^P 16
0E26                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0E26                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0E26                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0E26                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0E26                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0E26                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0E26                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0E26                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0E26                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0E26                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0E26                INTERPRET5A:      
0E26                             ; ld (vTIBPtr),bc
0E26                             ; ld bc,(vTIBPtr)
0E26   18 C3                  JR   interpret2   
0E28                INTERPRET6:      
0E28   21 00 21               LD   hl,TIB   
0E2B   09                     ADD   hl,bc   
0E2C   77                     LD   (hl),a   ; store the character in textbuf
0E2D   03                     INC   bc   
0E2E   CD 85 00               CALL   putchar   ; echo character to screen
0E31   CD 1F 0D               CALL   nesting   
0E34   18 CD                  JR   interpret5   ; wait for next character
0E36                INTERPRET7:      
0E36   21 00 21               LD   hl,TIB   
0E39   09                     ADD   hl,bc   
0E3A   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0E3C   23                     INC   hl   
0E3D   36 0A                  LD   (hl),"\n"   
0E3F   23                     INC   hl   
0E40   03                     INC   bc   
0E41   03                     INC   bc   
0E42   CD 5A 0D               CALL   crlf   ; echo character to screen
0E45   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0E46   B7                     OR   a   
0E47   20 BA                  JR   nz,interpret5   
0E49                INTERPRET8:      
0E49   21 00 21               LD   hl,TIB   
0E4C   09                     ADD   hl,bc   
0E4D   22 EA 23               LD   (vTIBPtr),hl   
0E50   01 00 21               LD   bc,TIB   
0E53   ED 43 F8 23            LD   (vSavedIP),bc   ; save IP
0E57   ED 73 FA 23            LD   (vSavedSP),sp   ; save SP
0E5B   DD 22 FC 23            LD   (vSavedNext),ix   ; save Next
0E5F   FD 22 FE 23            LD   (vSavedBP),iy   ; save BP
0E63   0B                     DEC   bc   
0E64                NEXT:        
0E64   03                     INC   bc   ; Increment the IP
0E65   0A                     LD   a,(bc)   ; Get the next character and dispatch
0E66   FE 20                  CP   " "   ; whitespace?
0E68   28 FA                  JR   z,next   ; space? ignore
0E6A   38 09                  JR   c,next1   
0E6C   D6 20                  SUB   " "   
0E6E   6F                     LD   l,a   ; index into table
0E6F   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0E71   6E                     LD   l,(hl)   ; get low jump address
0E72   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0E74   E9                     JP   (hl)   ; Jump to routine
0E75                NEXT1:       
0E75   FE 00                  CP   NUL   ; end of input string?
0E77   28 03                  JR   z,exit   
0E79   C3 DC 0D               JP   interpret   ; no, other whitespace, macros?
0E7C                EXIT:        
0E7C   03                     INC   bc   
0E7D   60 69                  LD   hl,bc   
0E7F   E9                     JP   (hl)   
0E80                RUN:         
0E80   C1                     POP   bc   
0E81   0B                     DEC   bc   
0E82   DD E9                  JP   (ix)   
0E84                ERROR:       
0E84   CD 80 0E               CALL   run   
0E87   60 45 72 72 6F 72 20 60 2E 73 20 2E 00 DB   "`Error `.s .",0   
0E94   C3 DC 0D               JP   interpret   
0E97                BACKSPACE_:      
0E97   79                     LD   a,c   
0E98   B0                     OR   b   
0E99   CA EB 0D               JP   z,interpret2   
0E9C   0B                     DEC   bc   
0E9D   CD 61 0D               CALL   printStr   
0EA0   08 20 08 00            .CSTR   "\b \b"   
0EA4   C3 EB 0D               JP   interpret2   
0EA7                             ; edit
0EA7                EDIT_:       
0EA7   CD 80 0E               CALL   run   
0EAA   60 76 61 72 3F 60 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?`.s /k/ad .h",0   
0EBC   C3 DC 0D               JP   interpret   
0EBF                REEDIT_:      
0EBF   C3 DC 0D               JP   interpret   
0EC2                PRINTSTACK_:      
0EC2   CD 80 0E               CALL   run   
0EC5   2F 70 6B 00            .CSTR   "/pk"   
0EC9   C3 DC 0D               JP   interpret   
0ECC                             ; editDef:
0ECC                             ;     pop hl                      ; pop ret address
0ECC                             ;     ex (sp),hl                  ; swap with TOS
0ECC                             ;     push hl                     ; dup TOS
0ECC                             ;     ld a,l                      ; a = ident
0ECC                             ;     ld de,TIB                   ; de = start of TIB
0ECC                             ;     ld (vTIBPtr),de             ; update TIB*
0ECC                             ;     push ix                     ; save NEXT
0ECC                             ;     ld ix,editDef0              ; NEXT = editDef0
0ECC                             ;     jp lookupRef                ; convert letter into address
0ECC                             ; editDef0:
0ECC                             ;     ld e,(hl)                   ; de = (hl++)
0ECC                             ;     inc hl
0ECC                             ;     ld d,(hl)
0ECC                             ;     ld a,d                      ; de == 0 ?
0ECC                             ;     or e
0ECC                             ;     jr z,editDef4
0ECC                             ;     ld ix,editDef3              ; NEXT = editDef3
0ECC                             ;     ex de,hl
0ECC                             ;     ld a,(hl)
0ECC                             ;     cp "{"
0ECC                             ;     jr nz,editDef1
0ECC                             ;     jp editBlock0               ; convert letter into address
0ECC                             ; editDef1:
0ECC                             ;     cp "("
0ECC                             ;     jr nz,editDef2
0ECC                             ;     jp editBlock0               ; convert letter into address
0ECC                             ; editDef2:
0ECC                             ;     jp editFunc
0ECC                             ; editDef3:
0ECC                             ;     ld a," "                    ; write assign
0ECC                             ;     call writeChar
0ECC                             ;     pop hl                      ; a = ident
0ECC                             ;     ld a,l
0ECC                             ;     call writeChar
0ECC                             ;     ld a,"="                    ; write assign
0ECC                             ;     call writeChar
0ECC                             ;     ld ix,editDef4              ; NEXT = editDef4
0ECC                             ;     jp printTIB
0ECC                             ; editDef4:
0ECC                             ;     pop ix                      ; restore NEXT
0ECC                             ;     jp (ix)
0ECC                             ; writeChar:
0ECC                             ;     ld de,(vTIBPtr)             ; de = TIB*
0ECC                             ;     ld (de),a                   ; write ident
0ECC                             ;     inc de
0ECC                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0ECC                             ;     ret
0ECC                             ; ; printTIB
0ECC                             ; printTIB:
0ECC                             ;     ld hl,(vTIBPtr)
0ECC                             ;     ld de,TIB
0ECC                             ;     or a
0ECC                             ;     sbc hl,de
0ECC                             ;     jp printTIB2
0ECC                             ; printTIB1:
0ECC                             ;     ld a,(de)
0ECC                             ;     call putchar
0ECC                             ; printTIB2:
0ECC                             ;     ld a,l
0ECC                             ;     or h
0ECC                             ;     jr nz,printTIB1
0ECC                             ;     jp (ix)
0ECC                             ; editBlock:
0ECC                             ;     pop hl                      ; hl = block*
0ECC                             ; editBlock0:
0ECC                             ;     push ix                     ; save next
0ECC                             ;     push hl                     ; push block*
0ECC                             ;     push hl                     ; push block*
0ECC                             ;     ld ix,(editBlock2)
0ECC                             ;     jp blockLength
0ECC                             ; editBlock1:
0ECC                             ;     pop hl                      ; bc = length, (sp) = IP
0ECC                             ;     pop de                      ; de = block*
0ECC                             ;     ld a,l
0ECC                             ;     or h
0ECC                             ;     jr z,editBlock2
0ECC                             ;     push bc
0ECC                             ;     ld bc,hl
0ECC                             ;     ex de,hl                    ; hl = block*
0ECC                             ;     ld de,(vTIBPtr)              ; de = TIB*
0ECC                             ;     ldir                        ; copy block to TIB
0ECC                             ;     ld (vTIBPtr),de              ; save TIB*
0ECC                             ;     pop bc
0ECC                             ; editBlock2:
0ECC                             ;     pop ix                      ; restore next
0ECC                             ;     jp (ix)
0ECC                             ; editFunc:
0ECC                             ;     jp (ix)
0ECC                             ; editArray:
0ECC                             ;     jp (ix)
0ECC                             ; editArglist:
0ECC                             ;     jp (ix)
0ECC                             ; ; blockLength
0ECC                             ; ; addr1 -- length
0ECC                             ; blockLength:
0ECC                             ;     pop hl                      ; block*
0ECC                             ;     push hl                     ; save block*
0ECC                             ;     inc hl                      ; skip first char
0ECC                             ;     ld d,1                      ; increase nesting
0ECC                             ; blockLength1:                   ; Skip to end of definition
0ECC                             ;     ld a,(hl)                   ; Get the next character
0ECC                             ;     inc hl                      ; Point to next character
0ECC                             ;     cp " " + 1                  ; ignore whitespace
0ECC                             ;     jr c,blockLength1
0ECC                             ;     cp ")"
0ECC                             ;     jr z,blockLength4
0ECC                             ;     cp "}"
0ECC                             ;     jr z,blockLength4
0ECC                             ;     cp "]"
0ECC                             ;     jr z,blockLength4
0ECC                             ;     cp "("
0ECC                             ;     jr z,blockLength2
0ECC                             ;     cp "{"
0ECC                             ;     jr z,blockLength2
0ECC                             ;     cp "["
0ECC                             ;     jr z,blockLength2
0ECC                             ;     cp "'"
0ECC                             ;     jr z,blockLength3
0ECC                             ;     cp "`"
0ECC                             ;     jr z,blockLength3
0ECC                             ;     cp DQ
0ECC                             ;     jr z,blockLength3
0ECC                             ;     jr blockLength1
0ECC                             ; blockLength2:
0ECC                             ;     inc d
0ECC                             ;     jr blockLength1
0ECC                             ; blockLength4:
0ECC                             ;     dec d
0ECC                             ;     jr nz, blockLength1         ; get the next element
0ECC                             ; blockLength3:
0ECC                             ;     ld a,$80
0ECC                             ;     xor d
0ECC                             ;     ld d,a
0ECC                             ;     jr nz, blockLength1
0ECC                             ;     pop hl                      ; hl = block*
0ECC                             ;     or a
0ECC                             ;     sbc hl,de
0ECC                             ;     push hl
0ECC                             ;     jp (ix)
0ECC                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0ECC                             ; \a start of stack \#3 depth \b base \$ prompt
0ECC                             ; DW dStack               ; a vS0 start of datastack			
0ECC                             ; DW FALSE                ; b vBase16
0ECC                             ; DW 0                    ; c vTIBPtr an offset to the tib
0ECC                             ; DW 0                    ; d
0ECC                             ; DW 65                   ; e vLastDef "A" last command u defined
0ECC                             ; DW 0                    ; f
0ECC                             ; DW page6                ; g 256 bytes limits
0ECC                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0ECC                F1:          
0ECC                F2:          
0ECC                F3:          
0ECC                F4:          
0ECC                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VDATAWIDTH:   DS   2   ; 
23E8                VNUMBASE:   DS   2   ; 
23EA                VTIBPTR:   DS   2   ; 
23EC                VBUFPTR:   DS   2   ; 
23EE                VNEXT:    DS   2   ; 
23F0                VHEAPPTR:   DS   2   ; 
23F2                VRECUR:   DS   2   ; 
23F4                             ; uninitialised sys variables (preserved)
23F4                VPOINTER:   DS   2   ; 
23F6                VREMAIN:   DS   2   ; 
23F8                VSAVEDIP:   DS   2   ; 
23FA                VSAVEDSP:   DS   2   ; 
23FC                VSAVEDNEXT:   DS   2   ; 
23FE                VSAVEDBP:   DS   2   ; 
2400                             ; uninitialised sys variables (unpreserved)
2400                VTEMP1:   DS   2   ; 
2402                VTEMP2:   DS   2   ; 
2404                VLASTDEF:   DS   2   ; 
2406                TBPTR:    DS   2   ; reserved for tests
2408                TITLEBUF:   DS   20   
241C                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 15
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0CE7 DEFINED AT LINE 1921 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 2048 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 2139 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1854 IN MAIN.asm
                    > USED AT LINE 1973 IN MAIN.asm
                    > USED AT LINE 2123 IN MAIN.asm
                    > USED AT LINE 2185 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1322 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1327 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 239 IN MAIN.asm
                    > USED AT LINE 810 IN MAIN.asm
                    > USED AT LINE 819 IN MAIN.asm
                    > USED AT LINE 828 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
                    > USED AT LINE 858 IN MAIN.asm
                    > USED AT LINE 865 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
                    > USED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
                    > USED AT LINE 1093 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1580 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 2142 IN MAIN.asm
                    > USED AT LINE 2230 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 634 IN MAIN.asm
                    > USED AT LINE 1793 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2148 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2150 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2152 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 2154 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 53 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN MAIN.asm
                    > USED AT LINE 2076 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 69 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 172 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 174 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 176 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 178 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 180 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 182 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 184 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 186 IN MAIN.asm
LPAREN_:            0315 DEFINED AT LINE 188 IN MAIN.asm
LBRACE_:            0315 DEFINED AT LINE 189 IN MAIN.asm
RBRACE_:            0318 DEFINED AT LINE 191 IN MAIN.asm
TICK_:              031B DEFINED AT LINE 193 IN MAIN.asm
SEMICOLON_:         031E DEFINED AT LINE 195 IN MAIN.asm
DOT_:               0321 DEFINED AT LINE 197 IN MAIN.asm
COLON_:             0324 DEFINED AT LINE 199 IN MAIN.asm
UPCASE_:            0327 DEFINED AT LINE 201 IN MAIN.asm
LOWCASE_:           032A DEFINED AT LINE 203 IN MAIN.asm
QUESTION_:          032D DEFINED AT LINE 205 IN MAIN.asm
STAR_:              0330 DEFINED AT LINE 207 IN MAIN.asm
BANG_:              0333 DEFINED AT LINE 209 IN MAIN.asm
NOT:                033E DEFINED AT LINE 217 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
NUM_:               0344 DEFINED AT LINE 221 IN MAIN.asm
                    > USED AT LINE 1821 IN MAIN.asm
HASH_:              0347 DEFINED AT LINE 223 IN MAIN.asm
PIPE_:              034A DEFINED AT LINE 225 IN MAIN.asm
CARET_:             034D DEFINED AT LINE 227 IN MAIN.asm
COMMA_:             0350 DEFINED AT LINE 229 IN MAIN.asm
DQUOTE_:            0353 DEFINED AT LINE 231 IN MAIN.asm
MINUS_:             0356 DEFINED AT LINE 233 IN MAIN.asm
EQ_:                0359 DEFINED AT LINE 235 IN MAIN.asm
EQ0:                0362 DEFINED AT LINE 247 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
EQ1:                0363 DEFINED AT LINE 249 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
GT_:                0367 DEFINED AT LINE 253 IN MAIN.asm
LT_:                0372 DEFINED AT LINE 261 IN MAIN.asm
LT1:                037B DEFINED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 260 IN MAIN.asm
SLASH_:             0384 DEFINED AT LINE 273 IN MAIN.asm
NOP_:               0387 DEFINED AT LINE 275 IN MAIN.asm
RPAREN_:            0389 DEFINED AT LINE 277 IN MAIN.asm
PLUS:               038C DEFINED AT LINE 283 IN MAIN.asm
                    > USED AT LINE 175 IN MAIN.asm
ADD:                038C DEFINED AT LINE 284 IN MAIN.asm
ADD1:               0397 DEFINED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 288 IN MAIN.asm
ADD3:               039B DEFINED AT LINE 297 IN MAIN.asm
                    > USED AT LINE 1072 IN MAIN.asm
                    > USED AT LINE 1676 IN MAIN.asm
                    > USED AT LINE 1835 IN MAIN.asm
ADD4:               03A6 DEFINED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 301 IN MAIN.asm
AT:                 03A9 DEFINED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 177 IN MAIN.asm
ADDR:               03A9 DEFINED AT LINE 311 IN MAIN.asm
AMPER:              03B3 DEFINED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
AND:                03B3 DEFINED AT LINE 317 IN MAIN.asm
AND1:               03BA DEFINED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 341 IN MAIN.asm
PIPE:               03BE DEFINED AT LINE 330 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
OR:                 03C1 DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 331 IN MAIN.asm
XOR:                03CA DEFINED AT LINE 343 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
XOR1:               03CB DEFINED AT LINE 345 IN MAIN.asm
                    > USED AT LINE 357 IN MAIN.asm
INVERT:             03D5 DEFINED AT LINE 355 IN MAIN.asm
                    > USED AT LINE 857 IN MAIN.asm
PERCENT:            03DA DEFINED AT LINE 362 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
ARG:                03DA DEFINED AT LINE 363 IN MAIN.asm
ARG0:               03F6 DEFINED AT LINE 382 IN MAIN.asm
                    > USED AT LINE 388 IN MAIN.asm
ARG0A:              03FF DEFINED AT LINE 390 IN MAIN.asm
                    > USED AT LINE 369 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
ARG1:               0404 DEFINED AT LINE 393 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
ARG1A:              040C DEFINED AT LINE 400 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
LBRACK:             040F DEFINED AT LINE 404 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
ARRAYSTART:         040F DEFINED AT LINE 405 IN MAIN.asm
RBRACK:             042B DEFINED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
ARRAYEND:           042B DEFINED AT LINE 420 IN MAIN.asm
ARRAYEND1:          0447 DEFINED AT LINE 437 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
ARRAYEND2:          0457 DEFINED AT LINE 447 IN MAIN.asm
                    > USED AT LINE 443 IN MAIN.asm
ARRAYEND3:          045C DEFINED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 436 IN MAIN.asm
HASH:               047B DEFINED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
ARRAYINDEX:         047B DEFINED AT LINE 475 IN MAIN.asm
ARRAYINDEX0:        0483 DEFINED AT LINE 481 IN MAIN.asm
ARRAYINDEX1:        0484 DEFINED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 480 IN MAIN.asm
ARRAYINDEX2:        0490 DEFINED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 489 IN MAIN.asm
COLON:              0493 DEFINED AT LINE 500 IN MAIN.asm
                    > USED AT LINE 200 IN MAIN.asm
ARGLIST:            0493 DEFINED AT LINE 501 IN MAIN.asm
ARGLIST1:           049D DEFINED AT LINE 508 IN MAIN.asm
                    > USED AT LINE 529 IN MAIN.asm
ARGLIST1A:          04A5 DEFINED AT LINE 514 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
ARGLIST2:           04AD DEFINED AT LINE 519 IN MAIN.asm
ARGLIST3:           04B5 DEFINED AT LINE 527 IN MAIN.asm
                    > USED AT LINE 513 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
ARGLIST4:           04B8 DEFINED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 518 IN MAIN.asm
ARGLIST5:           04BE DEFINED AT LINE 536 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
ASSIGN:             04C9 DEFINED AT LINE 547 IN MAIN.asm
                    > USED AT LINE 240 IN MAIN.asm
ASSIGN0:            04CB DEFINED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
                    > USED AT LINE 306 IN MAIN.asm
                    > USED AT LINE 1828 IN MAIN.asm
ASSIGNX:            04CC DEFINED AT LINE 552 IN MAIN.asm
ASSIGN1:            04D8 DEFINED AT LINE 560 IN MAIN.asm
                    > USED AT LINE 557 IN MAIN.asm
ABSOLUTE:           04DA DEFINED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 816 IN MAIN.asm
ADDROF:             04E7 DEFINED AT LINE 580 IN MAIN.asm
                    > USED AT LINE 818 IN MAIN.asm
ADDROF1:            04FB DEFINED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
ADDROF2:            0506 DEFINED AT LINE 601 IN MAIN.asm
                    > USED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 586 IN MAIN.asm
                    > USED AT LINE 591 IN MAIN.asm
LBRACE:             0508 DEFINED AT LINE 605 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
BLOCKSTART:         0508 DEFINED AT LINE 606 IN MAIN.asm
BLOCKSTART1:        050C DEFINED AT LINE 610 IN MAIN.asm
                    > USED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
BLOCKSTART2:        0538 DEFINED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 624 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
BLOCKSTART3:        053B DEFINED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 633 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
BLOCKSTART4:        0543 DEFINED AT LINE 646 IN MAIN.asm
                    > USED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 621 IN MAIN.asm
BLOCKSTART5:        0546 DEFINED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 645 IN MAIN.asm
BLOCKSTART6:        056E DEFINED AT LINE 668 IN MAIN.asm
                    > USED AT LINE 655 IN MAIN.asm
RBRACE:             0571 DEFINED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
BLOCKEND:           0571 DEFINED AT LINE 673 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
BLOCKEND1:          05A3 DEFINED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 688 IN MAIN.asm
BLOCKEND2:          05AF DEFINED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 694 IN MAIN.asm
BLOCKEND3:          05C1 DEFINED AT LINE 716 IN MAIN.asm
                    > USED AT LINE 708 IN MAIN.asm
BLOCKEND4:          05D5 DEFINED AT LINE 726 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
BREAK:              05DE DEFINED AT LINE 733 IN MAIN.asm
                    > USED AT LINE 825 IN MAIN.asm
BREAK1:             05E5 DEFINED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 737 IN MAIN.asm
TICK:               05F8 DEFINED AT LINE 750 IN MAIN.asm
                    > USED AT LINE 194 IN MAIN.asm
CHAR:               05F8 DEFINED AT LINE 751 IN MAIN.asm
CHAR1:              05FB DEFINED AT LINE 753 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
CHAR2:              0607 DEFINED AT LINE 762 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
CHAR3:              060A DEFINED AT LINE 765 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
SLASH:              060D DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 274 IN MAIN.asm
COMMAND:            060D DEFINED AT LINE 770 IN MAIN.asm
COMMAND_A:          064C DEFINED AT LINE 813 IN MAIN.asm
                    > USED AT LINE 775 IN MAIN.asm
COMMAND_B:          0658 DEFINED AT LINE 822 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
COMMAND_F:          0664 DEFINED AT LINE 831 IN MAIN.asm
                    > USED AT LINE 783 IN MAIN.asm
COMMAND_I:          0682 DEFINED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
COMMAND_L:          068E DEFINED AT LINE 861 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
COMMAND_M:          0697 DEFINED AT LINE 868 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
COMMAND_P:          06A0 DEFINED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 799 IN MAIN.asm
COMMAND_R:          06AF DEFINED AT LINE 886 IN MAIN.asm
                    > USED AT LINE 801 IN MAIN.asm
COMMAND_V:          06BE DEFINED AT LINE 897 IN MAIN.asm
                    > USED AT LINE 807 IN MAIN.asm
CHARS:              06D3 DEFINED AT LINE 912 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
CHARS1:             06D6 DEFINED AT LINE 914 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
NUMBERS:            06DB DEFINED AT LINE 917 IN MAIN.asm
                    > USED AT LINE 795 IN MAIN.asm
COMMENT:            06E1 DEFINED AT LINE 921 IN MAIN.asm
                    > USED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 925 IN MAIN.asm
SEMICOLON:          06EA DEFINED AT LINE 931 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
CREATEFUNC:         06EA DEFINED AT LINE 932 IN MAIN.asm
CREATEFUNC0:        0705 DEFINED AT LINE 944 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
CREATEFUNC1:        071D DEFINED AT LINE 963 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
CREATEFUNC2:        0730 DEFINED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 972 IN MAIN.asm
CREATEFUNC2A:       074F DEFINED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 989 IN MAIN.asm
CREATEFUNC3:        075E DEFINED AT LINE 1014 IN MAIN.asm
                    > USED AT LINE 1024 IN MAIN.asm
CREATEFUNC4:        0769 DEFINED AT LINE 1025 IN MAIN.asm
CREATEFUNC5:        076A DEFINED AT LINE 1027 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
COMMA:              0786 DEFINED AT LINE 1050 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
DISCARD:            0786 DEFINED AT LINE 1051 IN MAIN.asm
DISCARD1:           0793 DEFINED AT LINE 1060 IN MAIN.asm
                    > USED AT LINE 1058 IN MAIN.asm
DIV:                0795 DEFINED AT LINE 1063 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
DECIMAL:            07A6 DEFINED AT LINE 1074 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
DECIMAL1:           07A9 DEFINED AT LINE 1076 IN MAIN.asm
                    > USED AT LINE 1081 IN MAIN.asm
HEXADECIMAL:        07AE DEFINED AT LINE 1079 IN MAIN.asm
                    > USED AT LINE 785 IN MAIN.asm
DOT:                07B4 DEFINED AT LINE 1083 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
BUFFERARRAY:        07C6 DEFINED AT LINE 32
                    > USED AT LINE 1086 IN MAIN.asm
BUFFERARRAYM_1573S1096: 07D4 DEFINED AT LINE 39
                    > USED AT LINE 35
BUFFERNUMBER:       080F DEFINED AT LINE 1103 IN MAIN.asm
                    > USED AT LINE 1094 IN MAIN.asm
                    > USED AT LINE 1376 IN MAIN.asm
BUFFERDEC:          0816 DEFINED AT LINE 1110 IN MAIN.asm
BUFFERDEC0:         0830 DEFINED AT LINE 1127 IN MAIN.asm
                    > USED AT LINE 1114 IN MAIN.asm
BUFFERDEC1:         0840 DEFINED AT LINE 1141 IN MAIN.asm
                    > USED AT LINE 1129 IN MAIN.asm
BUFFERDEC2:         0860 DEFINED AT LINE 1155 IN MAIN.asm
                    > USED AT LINE 1144 IN MAIN.asm
                    > USED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 1148 IN MAIN.asm
                    > USED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 1153 IN MAIN.asm
BUFFERDEC3:         0862 DEFINED AT LINE 1157 IN MAIN.asm
                    > USED AT LINE 1160 IN MAIN.asm
BUFFERDEC4:         0872 DEFINED AT LINE 1169 IN MAIN.asm
                    > USED AT LINE 1164 IN MAIN.asm
BUFFERDEC5:         0873 DEFINED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 1168 IN MAIN.asm
BUFFERHEX:          087C DEFINED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 1106 IN MAIN.asm
BUFFERHEX1:         089D DEFINED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 1192 IN MAIN.asm
BUFFERHEX2:         08A6 DEFINED AT LINE 1208 IN MAIN.asm
                    > USED AT LINE 1206 IN MAIN.asm
BUFFERSTRING:       08B4 DEFINED AT LINE 1221 IN MAIN.asm
                    > USED AT LINE 1090 IN MAIN.asm
BUFFERSTRING0:      08BB DEFINED AT LINE 1225 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
BUFFERSTRING1:      08C1 DEFINED AT LINE 1230 IN MAIN.asm
                    > USED AT LINE 1224 IN MAIN.asm
BUFFERCHAR:         08CE DEFINED AT LINE 1240 IN MAIN.asm
                    > USED AT LINE 1088 IN MAIN.asm
BUFFERXCHARS:       08D3 DEFINED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 1092 IN MAIN.asm
BUFFERXCHARS0:      08D4 DEFINED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 1242 IN MAIN.asm
BUFFERXCHARS1:      08DD DEFINED AT LINE 1254 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
BUFFERXCHARS2:      08E5 DEFINED AT LINE 1261 IN MAIN.asm
                    > USED AT LINE 1253 IN MAIN.asm
DIVIDE:             08EF DEFINED AT LINE 1271 IN MAIN.asm
                    > USED AT LINE 1068 IN MAIN.asm
DIVIDE1:            08F4 DEFINED AT LINE 1274 IN MAIN.asm
                    > USED AT LINE 1286 IN MAIN.asm
DIVIDE2:            0901 DEFINED AT LINE 1282 IN MAIN.asm
                    > USED AT LINE 1279 IN MAIN.asm
DIVIDE3:            0902 DEFINED AT LINE 1284 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
EQUALS:             0908 DEFINED AT LINE 1292 IN MAIN.asm
                    > USED AT LINE 251 IN MAIN.asm
NOTEQUALS:          0910 DEFINED AT LINE 1298 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
LESSTHANEQ:         0919 DEFINED AT LINE 1306 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
LESSTHAN:           091E DEFINED AT LINE 1313 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
LESSTHAN1:          0923 DEFINED AT LINE 1318 IN MAIN.asm
                    > USED AT LINE 1309 IN MAIN.asm
TRUE1:              0926 DEFINED AT LINE 1321 IN MAIN.asm
                    > USED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 1295 IN MAIN.asm
                    > USED AT LINE 1301 IN MAIN.asm
NULL1:              092C DEFINED AT LINE 1325 IN MAIN.asm
FALSE1:             092C DEFINED AT LINE 1326 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 1296 IN MAIN.asm
                    > USED AT LINE 1302 IN MAIN.asm
                    > USED AT LINE 1316 IN MAIN.asm
                    > USED AT LINE 1319 IN MAIN.asm
ERROR1:             0932 DEFINED AT LINE 1331 IN MAIN.asm
                    > USED AT LINE 820 IN MAIN.asm
                    > USED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 859 IN MAIN.asm
                    > USED AT LINE 866 IN MAIN.asm
                    > USED AT LINE 873 IN MAIN.asm
                    > USED AT LINE 884 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
FLUSH:              0939 DEFINED AT LINE 1338 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
FOREACH:            093E DEFINED AT LINE 32
                    > USED AT LINE 834 IN MAIN.asm
FOREACHM_1803S1344: 094C DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            098B DEFINED AT LINE 32
                    > USED AT LINE 838 IN MAIN.asm
FUNCSRCM_1817S1359: 0997 DEFINED AT LINE 39
                    > USED AT LINE 35
FZ:                 09C6 DEFINED AT LINE 1370 IN MAIN.asm
                    > USED AT LINE 848 IN MAIN.asm
PRINTSTACK:         09D3 DEFINED AT LINE 1380 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
CARET:              09D5 DEFINED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 228 IN MAIN.asm
GO:                 09D5 DEFINED AT LINE 1415 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                09D6 DEFINED AT LINE 1417 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 1592 IN MAIN.asm
                    > USED AT LINE 1594 IN MAIN.asm
GO2:                09DC DEFINED AT LINE 1422 IN MAIN.asm
                    > USED AT LINE 1420 IN MAIN.asm
GOBLOCK:            09E7 DEFINED AT LINE 1430 IN MAIN.asm
                    > USED AT LINE 1425 IN MAIN.asm
GOBLOCK2:           0A0C DEFINED AT LINE 1447 IN MAIN.asm
                    > USED AT LINE 1528 IN MAIN.asm
GOBLOCK3:           0A16 DEFINED AT LINE 1453 IN MAIN.asm
GOFUNC:             0A1A DEFINED AT LINE 1457 IN MAIN.asm
                    > USED AT LINE 1427 IN MAIN.asm
GOFUNC1:            0A33 DEFINED AT LINE 1476 IN MAIN.asm
                    > USED AT LINE 1486 IN MAIN.asm
GOFUNC2:            0A39 DEFINED AT LINE 1483 IN MAIN.asm
                    > USED AT LINE 1475 IN MAIN.asm
GOFUNC3:            0A44 DEFINED AT LINE 1489 IN MAIN.asm
                    > USED AT LINE 1465 IN MAIN.asm
GOFUNC4:            0A5C DEFINED AT LINE 1506 IN MAIN.asm
                    > USED AT LINE 1503 IN MAIN.asm
GOFUNC5:            0A5F DEFINED AT LINE 1509 IN MAIN.asm
                    > USED AT LINE 1515 IN MAIN.asm
GOFUNC6:            0A62 DEFINED AT LINE 1513 IN MAIN.asm
                    > USED AT LINE 1508 IN MAIN.asm
GOFUNC7:            0A65 DEFINED AT LINE 1516 IN MAIN.asm
GOFUNC8:            0A69 DEFINED AT LINE 1521 IN MAIN.asm
                    > USED AT LINE 1441 IN MAIN.asm
                    > USED AT LINE 1505 IN MAIN.asm
DOLLAR:             0A74 DEFINED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
HEXNUM:             0A74 DEFINED AT LINE 1531 IN MAIN.asm
HEXNUM1:            0A77 DEFINED AT LINE 1533 IN MAIN.asm
                    > USED AT LINE 1550 IN MAIN.asm
HEXNUM2:            0A7F DEFINED AT LINE 1539 IN MAIN.asm
                    > USED AT LINE 1537 IN MAIN.asm
UPCASE:             0A91 DEFINED AT LINE 1552 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
LOWCASE:            0A96 DEFINED AT LINE 1556 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
IDENT1:             0A9B DEFINED AT LINE 1560 IN MAIN.asm
                    > USED AT LINE 1555 IN MAIN.asm
QUESTION:           0AA8 DEFINED AT LINE 1573 IN MAIN.asm
                    > USED AT LINE 206 IN MAIN.asm
IF:                 0AA8 DEFINED AT LINE 1574 IN MAIN.asm
IFTE:               0AB4 DEFINED AT LINE 1584 IN MAIN.asm
                    > USED AT LINE 1578 IN MAIN.asm
IFTE1:              0AB5 DEFINED AT LINE 1586 IN MAIN.asm
                    > USED AT LINE 1581 IN MAIN.asm
INPUT:              0AC1 DEFINED AT LINE 1598 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
KEY:                0ACC DEFINED AT LINE 1608 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
LITERAL:            0AD5 DEFINED AT LINE 1620 IN MAIN.asm
                    > USED AT LINE 864 IN MAIN.asm
OUTPUT:             0ADE DEFINED AT LINE 1632 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
MAP:                0AE7 DEFINED AT LINE 32
                    > USED AT LINE 871 IN MAIN.asm
MAPM_2087S1643:     0AF4 DEFINED AT LINE 39
                    > USED AT LINE 35
STAR:               0B2B DEFINED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 208 IN MAIN.asm
MUL:                0B2B DEFINED AT LINE 1657 IN MAIN.asm
MUL2:               0B2D DEFINED AT LINE 1660 IN MAIN.asm
MUL3:               0B35 DEFINED AT LINE 1665 IN MAIN.asm
                    > USED AT LINE 1674 IN MAIN.asm
NUM:                0B47 DEFINED AT LINE 1678 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
NUM0:               0B50 DEFINED AT LINE 1684 IN MAIN.asm
                    > USED AT LINE 1682 IN MAIN.asm
NUM1:               0B51 DEFINED AT LINE 1686 IN MAIN.asm
                    > USED AT LINE 1703 IN MAIN.asm
NUM2:               0B69 DEFINED AT LINE 1704 IN MAIN.asm
                    > USED AT LINE 1541 IN MAIN.asm
                    > USED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 1689 IN MAIN.asm
                    > USED AT LINE 1691 IN MAIN.asm
NUM3:               0B74 DEFINED AT LINE 1712 IN MAIN.asm
                    > USED AT LINE 1707 IN MAIN.asm
RANGESRC:           0B77 DEFINED AT LINE 32
                    > USED AT LINE 893 IN MAIN.asm
RANGESRCM_2159S1718: 0B86 DEFINED AT LINE 39
                    > USED AT LINE 35
RPAREN:             0BF9 DEFINED AT LINE 1736 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
SHIFTLEFT:          0C01 DEFINED AT LINE 1743 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
SHIFTLEFT1:         0C09 DEFINED AT LINE 1750 IN MAIN.asm
                    > USED AT LINE 1753 IN MAIN.asm
SHIFTLEFT2:         0C0A DEFINED AT LINE 1752 IN MAIN.asm
                    > USED AT LINE 1749 IN MAIN.asm
SHIFTRIGHT:         0C11 DEFINED AT LINE 1760 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
SHIFTRIGHT1:        0C19 DEFINED AT LINE 1767 IN MAIN.asm
                    > USED AT LINE 1771 IN MAIN.asm
SHIFTRIGHT2:        0C1D DEFINED AT LINE 1770 IN MAIN.asm
                    > USED AT LINE 1766 IN MAIN.asm
DQUOTE:             0C24 DEFINED AT LINE 1779 IN MAIN.asm
                    > USED AT LINE 232 IN MAIN.asm
STRING:             0C24 DEFINED AT LINE 1780 IN MAIN.asm
STRING1:            0C2D DEFINED AT LINE 1787 IN MAIN.asm
                    > USED AT LINE 1796 IN MAIN.asm
STRING2:            0C30 DEFINED AT LINE 1791 IN MAIN.asm
                    > USED AT LINE 1786 IN MAIN.asm
STRING3:            0C39 DEFINED AT LINE 1797 IN MAIN.asm
                    > USED AT LINE 1794 IN MAIN.asm
MINUS:              0C4C DEFINED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
SUB:                0C58 DEFINED AT LINE 1822 IN MAIN.asm
                    > USED AT LINE 1819 IN MAIN.asm
SUB1:               0C62 DEFINED AT LINE 1829 IN MAIN.asm
                    > USED AT LINE 1825 IN MAIN.asm
PRINTBUFFER:        0C6B DEFINED AT LINE 32
                    > USED AT LINE 878 IN MAIN.asm
PRINTBUFFERM_2275S1841: 0C77 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTCHARS:         0C91 DEFINED AT LINE 1846 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
PRINTCHARS1:        0C98 DEFINED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 1861 IN MAIN.asm
PRINTCHARS2:        0C9E DEFINED AT LINE 1857 IN MAIN.asm
                    > USED AT LINE 1849 IN MAIN.asm
                    > USED AT LINE 1938 IN MAIN.asm
RECUR:              0CA3 DEFINED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 889 IN MAIN.asm
REMAIN:             0CA9 DEFINED AT LINE 1868 IN MAIN.asm
                    > USED AT LINE 891 IN MAIN.asm
SIZE:               0CAF DEFINED AT LINE 1873 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
CONSTBUFSTART:      0CB7 DEFINED AT LINE 1882 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
CONSTHEAPSTART:     0CBC DEFINED AT LINE 1886 IN MAIN.asm
CONSTTIBSTART:      0CC1 DEFINED AT LINE 1890 IN MAIN.asm
                    > USED AT LINE 908 IN MAIN.asm
VARBUFPTR:          0CC6 DEFINED AT LINE 1894 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
VARHEAPPTR:         0CCF DEFINED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
VARTIBPTR:          0CD8 DEFINED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
VARIABLE:           0CE1 DEFINED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 314 IN MAIN.asm
                    > USED AT LINE 1897 IN MAIN.asm
                    > USED AT LINE 1902 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
CONSTANT:           0CE4 DEFINED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1888 IN MAIN.asm
                    > USED AT LINE 1892 IN MAIN.asm
FILTER:             0CE7 DEFINED AT LINE 1920 IN MAIN.asm
FLUSHBUFFER:        0CE9 DEFINED AT LINE 1929 IN MAIN.asm
                    > USED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 1176 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1216 IN MAIN.asm
                    > USED AT LINE 1228 IN MAIN.asm
                    > USED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 1339 IN MAIN.asm
                    > USED AT LINE 2106 IN MAIN.asm
JUMPTABLE:          0D00 DEFINED AT LINE 1948 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
                    > USED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
                    > USED AT LINE 869 IN MAIN.asm
                    > USED AT LINE 876 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
                    > USED AT LINE 1084 IN MAIN.asm
JUMPTABLE0:         0D02 DEFINED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
JUMPTABLE1:         0D0F DEFINED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 1954 IN MAIN.asm
JUMPTABLE2:         0D10 DEFINED AT LINE 1964 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
PRTSTR0:            0D16 DEFINED AT LINE 1972 IN MAIN.asm
                    > USED AT LINE 1978 IN MAIN.asm
PRTSTR:             0D1A DEFINED AT LINE 1975 IN MAIN.asm
                    > USED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2102 IN MAIN.asm
NESTING:            0D1F DEFINED AT LINE 1991 IN MAIN.asm
                    > USED AT LINE 2128 IN MAIN.asm
                    > USED AT LINE 2186 IN MAIN.asm
NESTING0:           0D29 DEFINED AT LINE 1997 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
                    > USED AT LINE 1995 IN MAIN.asm
NESTING1A:          0D30 DEFINED AT LINE 2002 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
NESTING1:           0D33 DEFINED AT LINE 2005 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
NESTING2:           0D42 DEFINED AT LINE 2014 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
NESTING3:           0D44 DEFINED AT LINE 2017 IN MAIN.asm
                    > USED AT LINE 2013 IN MAIN.asm
NESTING4:           0D4F DEFINED AT LINE 2024 IN MAIN.asm
                    > USED AT LINE 2019 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
PROMPT:             0D51 DEFINED AT LINE 2028 IN MAIN.asm
                    > USED AT LINE 2107 IN MAIN.asm
CRLF:               0D5A DEFINED AT LINE 2033 IN MAIN.asm
                    > USED AT LINE 2199 IN MAIN.asm
PRINTSTR:           0D61 DEFINED AT LINE 2040 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
                    > USED AT LINE 2034 IN MAIN.asm
                    > USED AT LINE 2253 IN MAIN.asm
TITLESTR:           0D68 DEFINED AT LINE 2047 IN MAIN.asm
                    > USED AT LINE 2051 IN MAIN.asm
                    > USED AT LINE 2070 IN MAIN.asm
INIT:               0D7C DEFINED AT LINE 2050 IN MAIN.asm
                    > USED AT LINE 2099 IN MAIN.asm
INIT1:              0D84 DEFINED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 2060 IN MAIN.asm
WARMINIT:           0D8C DEFINED AT LINE 2062 IN MAIN.asm
COLDBOOT0:          0D9F DEFINED AT LINE 2069 IN MAIN.asm
                    > USED AT LINE 2057 IN MAIN.asm
                    > USED AT LINE 2095 IN MAIN.asm
COLDINIT:           0DA9 DEFINED AT LINE 2075 IN MAIN.asm
COLDBOOT1:          0DBA DEFINED AT LINE 2084 IN MAIN.asm
                    > USED AT LINE 2087 IN MAIN.asm
COLDSTART:          0DC7 DEFINED AT LINE 2093 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
START:              0DD0 DEFINED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 7
START1:             0DD6 DEFINED AT LINE 2100 IN MAIN.asm
                    > USED AT LINE 2067 IN MAIN.asm
                    > USED AT LINE 2096 IN MAIN.asm
INTERPRET:          0DDC DEFINED AT LINE 2104 IN MAIN.asm
                    > USED AT LINE 2232 IN MAIN.asm
                    > USED AT LINE 2246 IN MAIN.asm
                    > USED AT LINE 2261 IN MAIN.asm
                    > USED AT LINE 2264 IN MAIN.asm
                    > USED AT LINE 2269 IN MAIN.asm
INTERPRET2:         0DEB DEFINED AT LINE 2113 IN MAIN.asm
                    > USED AT LINE 2177 IN MAIN.asm
                    > USED AT LINE 2251 IN MAIN.asm
                    > USED AT LINE 2255 IN MAIN.asm
INTERPRET3:         0DF3 DEFINED AT LINE 2121 IN MAIN.asm
                    > USED AT LINE 2134 IN MAIN.asm
INTERPRET4:         0DFE DEFINED AT LINE 2130 IN MAIN.asm
                    > USED AT LINE 2119 IN MAIN.asm
INTERPRET5:         0E03 DEFINED AT LINE 2137 IN MAIN.asm
                    > USED AT LINE 2187 IN MAIN.asm
                    > USED AT LINE 2202 IN MAIN.asm
INTERPRET5A:        0E26 DEFINED AT LINE 2174 IN MAIN.asm
INTERPRET6:         0E28 DEFINED AT LINE 2179 IN MAIN.asm
                    > USED AT LINE 2141 IN MAIN.asm
INTERPRET7:         0E36 DEFINED AT LINE 2189 IN MAIN.asm
                    > USED AT LINE 2146 IN MAIN.asm
INTERPRET8:         0E49 DEFINED AT LINE 2204 IN MAIN.asm
                    > USED AT LINE 2144 IN MAIN.asm
NEXT:               0E64 DEFINED AT LINE 2217 IN MAIN.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 2221 IN MAIN.asm
NEXT1:              0E75 DEFINED AT LINE 2229 IN MAIN.asm
                    > USED AT LINE 2222 IN MAIN.asm
EXIT:               0E7C DEFINED AT LINE 2234 IN MAIN.asm
                    > USED AT LINE 2231 IN MAIN.asm
RUN:                0E80 DEFINED AT LINE 2238 IN MAIN.asm
                    > USED AT LINE 2244 IN MAIN.asm
                    > USED AT LINE 2259 IN MAIN.asm
                    > USED AT LINE 2267 IN MAIN.asm
ERROR:              0E84 DEFINED AT LINE 2243 IN MAIN.asm
                    > USED AT LINE 1334 IN MAIN.asm
BACKSPACE_:         0E97 DEFINED AT LINE 2248 IN MAIN.asm
                    > USED AT LINE 2151 IN MAIN.asm
EDIT_:              0EA7 DEFINED AT LINE 2258 IN MAIN.asm
                    > USED AT LINE 2149 IN MAIN.asm
REEDIT_:            0EBF DEFINED AT LINE 2263 IN MAIN.asm
                    > USED AT LINE 2153 IN MAIN.asm
PRINTSTACK_:        0EC2 DEFINED AT LINE 2266 IN MAIN.asm
                    > USED AT LINE 2155 IN MAIN.asm
F1:                 0ECC DEFINED AT LINE 10
                    > USED AT LINE 840 IN MAIN.asm
F2:                 0ECC DEFINED AT LINE 11
                    > USED AT LINE 842 IN MAIN.asm
F3:                 0ECC DEFINED AT LINE 12
                    > USED AT LINE 844 IN MAIN.asm
F4:                 0ECC DEFINED AT LINE 13
                    > USED AT LINE 846 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1371 IN MAIN.asm
                    > USED AT LINE 1432 IN MAIN.asm
                    > USED AT LINE 2090 IN MAIN.asm
                    > USED AT LINE 2094 IN MAIN.asm
                    > USED AT LINE 2098 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 1891 IN MAIN.asm
                    > USED AT LINE 2110 IN MAIN.asm
                    > USED AT LINE 2118 IN MAIN.asm
                    > USED AT LINE 2181 IN MAIN.asm
                    > USED AT LINE 2191 IN MAIN.asm
                    > USED AT LINE 2206 IN MAIN.asm
                    > USED AT LINE 2209 IN MAIN.asm
BUF:                2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 1883 IN MAIN.asm
                    > USED AT LINE 1934 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 2081 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2077 IN MAIN.asm
VDATAWIDTH:         23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 441 IN MAIN.asm
                    > USED AT LINE 478 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 915 IN MAIN.asm
VNUMBASE:           23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1077 IN MAIN.asm
                    > USED AT LINE 1104 IN MAIN.asm
VTIBPTR:            23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1905 IN MAIN.asm
                    > USED AT LINE 1906 IN MAIN.asm
                    > USED AT LINE 2111 IN MAIN.asm
                    > USED AT LINE 2208 IN MAIN.asm
VBUFPTR:            23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1111 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
                    > USED AT LINE 1121 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
                    > USED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 1234 IN MAIN.asm
                    > USED AT LINE 1235 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
                    > USED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 1896 IN MAIN.asm
                    > USED AT LINE 1933 IN MAIN.asm
                    > USED AT LINE 1935 IN MAIN.asm
VNEXT:              23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2089 IN MAIN.asm
VHEAPPTR:           23F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 430 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 468 IN MAIN.asm
                    > USED AT LINE 503 IN MAIN.asm
                    > USED AT LINE 538 IN MAIN.asm
                    > USED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 942 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
                    > USED AT LINE 978 IN MAIN.asm
                    > USED AT LINE 1044 IN MAIN.asm
                    > USED AT LINE 1781 IN MAIN.asm
                    > USED AT LINE 1801 IN MAIN.asm
                    > USED AT LINE 1900 IN MAIN.asm
                    > USED AT LINE 1901 IN MAIN.asm
VRECUR:             23F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 721 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 1865 IN MAIN.asm
VPOINTER:           23F4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 312 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
                    > USED AT LINE 396 IN MAIN.asm
                    > USED AT LINE 485 IN MAIN.asm
                    > USED AT LINE 553 IN MAIN.asm
                    > USED AT LINE 1564 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
VREMAIN:            23F6 DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1869 IN MAIN.asm
VSAVEDIP:           23F8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 2063 IN MAIN.asm
                    > USED AT LINE 2211 IN MAIN.asm
VSAVEDSP:           23FA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 2064 IN MAIN.asm
                    > USED AT LINE 2212 IN MAIN.asm
VSAVEDNEXT:         23FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2065 IN MAIN.asm
                    > USED AT LINE 2213 IN MAIN.asm
VSAVEDBP:           23FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2066 IN MAIN.asm
                    > USED AT LINE 2214 IN MAIN.asm
VTEMP1:             2400 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 423 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
                    > USED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 720 IN MAIN.asm
                    > USED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 1045 IN MAIN.asm
                    > USED AT LINE 1431 IN MAIN.asm
                    > USED AT LINE 1437 IN MAIN.asm
                    > USED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 1487 IN MAIN.asm
                    > USED AT LINE 1494 IN MAIN.asm
                    > USED AT LINE 1500 IN MAIN.asm
VTEMP2:             2402 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 679 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
                    > USED AT LINE 1035 IN MAIN.asm
                    > USED AT LINE 1467 IN MAIN.asm
                    > USED AT LINE 1488 IN MAIN.asm
VLASTDEF:           2404 DEFINED AT LINE 58 IN ram.asm
TBPTR:              2406 DEFINED AT LINE 59 IN ram.asm
TITLEBUF:           2408 DEFINED AT LINE 61 IN ram.asm
                    > USED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2071 IN MAIN.asm
                    > USED AT LINE 2101 IN MAIN.asm
HEAP:               241C DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
                    > USED AT LINE 1887 IN MAIN.asm
