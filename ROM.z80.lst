0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 AF 0B               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQUOTE:   EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                TMAGIC:   EQU   $AA   ; magic number
00C9                TRESERV:   EQU   $A0   ; reserved
00C9                TNUMBER:   EQU   $A1   ; number
00C9                TSTRING:   EQU   $A2   ; string
00C9                TPOINTER:   EQU   $A3   ; pointer
00C9                TARRAY:   EQU   $A4   ; array
00C9                TBLOCK:   EQU   $A5   ; block
00C9                TLAMBDA:   EQU   $A6   ; lambda
00C9                TARGLST:   EQU   $A7   ; arglist
00C9                             ; z80_RST8    equ     $CF
00C9                             ; **************************************************************************
00C9                             ; Page 0  Initialisation
00C9                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 22                  DW   BUF   ; vBUFPtr pointer into BUF
0188   43 0C                  DW   next   ; nNext
018A   1E 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C                          ALIGN   $100   
0200                OPCODES:      ; still available ~ `
0200   82                     DB   lsb(nop_)   ; SP
0201   39                     DB   lsb(bang_)   ; !
0202   4D                     DB   lsb(dblquote_)   ; "
0203   41                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1E                     DB   lsb(tick_)   ; '
0208   18                     DB   lsb(lparen_)   ; (
0209   84                     DB   lsb(rparen_)   ; )
020A   36                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   4A                     DB   lsb(comma_)   ; ,
020D   50                     DB   lsb(minus_)   ; -
020E   24                     DB   lsb(dot_)   ; .
020F   7F                     DB   lsb(slash_)   ; /	
0210   3E                     DB   lsb(num_)   ; 0
0211   3E                     DB   lsb(num_)   ; 1
0212   3E                     DB   lsb(num_)   ; 2
0213   3E                     DB   lsb(num_)   ; 3
0214   3E                     DB   lsb(num_)   ; 4
0215   3E                     DB   lsb(num_)   ; 5
0216   3E                     DB   lsb(num_)   ; 6
0217   3E                     DB   lsb(num_)   ; 7
0218   3E                     DB   lsb(num_)   ; 8
0219   3E                     DB   lsb(num_)   ; 9
021A   2A                     DB   lsb(colon_)   ; :
021B   21                     DB   lsb(semicolon_)   ; ;
021C   6D                     DB   lsb(lt_)   ; <
021D   53                     DB   lsb(eq_)   ; =
021E   62                     DB   lsb(gt_)   ; >
021F   33                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   2D                     DB   lsb(upcase_)   ; A
0222   2D                     DB   lsb(upcase_)   ; B
0223   2D                     DB   lsb(upcase_)   ; C
0224   2D                     DB   lsb(upcase_)   ; D
0225   2D                     DB   lsb(upcase_)   ; E
0226   2D                     DB   lsb(upcase_)   ; F
0227   2D                     DB   lsb(upcase_)   ; G
0228   2D                     DB   lsb(upcase_)   ; h
0229   2D                     DB   lsb(upcase_)   ; I
022A   2D                     DB   lsb(upcase_)   ; J
022B   2D                     DB   lsb(upcase_)   ; K
022C   2D                     DB   lsb(upcase_)   ; L
022D   2D                     DB   lsb(upcase_)   ; M
022E   2D                     DB   lsb(upcase_)   ; N
022F   2D                     DB   lsb(upcase_)   ; O
0230   2D                     DB   lsb(upcase_)   ; p
0231   2D                     DB   lsb(upcase_)   ; Q
0232   2D                     DB   lsb(upcase_)   ; R
0233   2D                     DB   lsb(upcase_)   ; S
0234   2D                     DB   lsb(upcase_)   ; T
0235   2D                     DB   lsb(upcase_)   ; U
0236   2D                     DB   lsb(upcase_)   ; V
0237   2D                     DB   lsb(upcase_)   ; W
0238   2D                     DB   lsb(upcase_)   ; X
0239   2D                     DB   lsb(upcase_)   ; Y
023A   2D                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   15                     DB   lsb(backslash_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   47                     DB   lsb(caret_)   ; ^
023F   27                     DB   lsb(underscore_)   ; _
0240   4D                     DB   lsb(dblquote_)   ; `     used for testing string   	
0241   30                     DB   lsb(lowcase_)   ; a
0242   30                     DB   lsb(lowcase_)   ; b
0243   30                     DB   lsb(lowcase_)   ; c
0244   30                     DB   lsb(lowcase_)   ; d
0245   30                     DB   lsb(lowcase_)   ; e
0246   30                     DB   lsb(lowcase_)   ; f
0247   30                     DB   lsb(lowcase_)   ; g
0248   30                     DB   lsb(lowcase_)   ; h
0249   30                     DB   lsb(lowcase_)   ; i
024A   30                     DB   lsb(lowcase_)   ; j
024B   30                     DB   lsb(lowcase_)   ; k
024C   30                     DB   lsb(lowcase_)   ; l
024D   30                     DB   lsb(lowcase_)   ; m
024E   30                     DB   lsb(lowcase_)   ; n
024F   30                     DB   lsb(lowcase_)   ; o
0250   30                     DB   lsb(lowcase_)   ; p
0251   30                     DB   lsb(lowcase_)   ; q
0252   30                     DB   lsb(lowcase_)   ; r
0253   30                     DB   lsb(lowcase_)   ; s
0254   30                     DB   lsb(lowcase_)   ; t
0255   30                     DB   lsb(lowcase_)   ; u
0256   30                     DB   lsb(lowcase_)   ; v
0257   30                     DB   lsb(lowcase_)   ; w
0258   30                     DB   lsb(lowcase_)   ; x
0259   30                     DB   lsb(lowcase_)   ; y
025A   30                     DB   lsb(lowcase_)   ; z
025B   18                     DB   lsb(lbrace_)   ; {
025C   44                     DB   lsb(pipe_)   ; |
025D   1B                     DB   lsb(rbrace_)   ; }
025E   82                     DB   lsb(nop_)   ; ~
025F   82                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 87 03               JP   plus   
0303                AT_:         
0303   C3 99 03               JP   at   
0306                AMPER_:      
0306   C3 A3 03               JP   amper   
0309                DOLLAR_:      
0309   C3 C7 03               JP   dollar   
030C                LBRACK_:      
030C   C3 FE 03               JP   lbrack   
030F                RBRACK_:      
030F   C3 1A 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 72 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 AC 05               JP   backslash   
0318                LPAREN_:      
0318                LBRACE_:      
0318   C3 D2 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 3B 05               JP   rbrace   
031E                TICK_:       
031E   C3 97 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 9D 07               JP   semicolon   
0324                DOT_:        
0324   C3 04 06               JP   dot   
0327                UNDERSCORE_:      
0327   C3 8F 07               JP   underscore   
032A                COLON_:      
032A   C3 9B 04               JP   colon   
032D                UPCASE_:      
032D   C3 13 07               JP   upcase   
0330                LOWCASE_:      
0330   C3 18 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 2A 07               JP   question   
0336                STAR_:       
0336   C3 43 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 5F 07               JP   num   
0341                HASH_:       
0341   C3 F6 06               JP   hash   
0344                PIPE_:       
0344   C3 AE 03               JP   pipe   
0347                CARET_:      
0347   C3 50 06               JP   caret   
034A                COMMA_:      
034A   C3 AE 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 DC 07               JP   dblquote   
0350                MINUS_:      
0350   C3 04 08               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 8A 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 2F 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA C9 07               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 09                  JR   lt1   
036D                LT_:         
036D   03                     INC   bc   
036E   0A                     LD   a,(bc)   
036F   FE 3C                  CP   "<"   
0371   CA B9 07               JP   z,shiftLeft   
0374   E1                     POP   hl   
0375   D1                     POP   de   
0376                LT1:         
0376   FE 3D                  CP   "="   
0378   CA 37 06               JP   z,lessthaneq   
037B   0B                     DEC   bc   
037C   C3 3C 06               JP   lessthan   
037F                SLASH_:      
037F   C3 BD 05               JP   slash   
0382                NOP_:        
0382   DD E9                  JP   (ix)   
0384                RPAREN_:      
0384   C3 95 07               JP   rparen   
0387                             ;*******************************************************************
0387                             ; implementations
0387                             ;*******************************************************************
0387                PLUS:        
0387                ADD:         
0387   03                     INC   bc   
0388   0A                     LD   a,(bc)   
0389   FE 2B                  CP   "+"   ; ++ increment variable
038B   20 05                  JR   nz,add1   
038D   E1                     POP   hl   
038E   23                     INC   hl   
038F   C3 8C 04               JP   assign0   
0392                ADD1:        
0392   0B                     DEC   bc   
0393   D1                     POP   de   ; second term
0394   E1                     POP   hl   ; first term
0395   19                     ADD   hl,de   
0396                ADD3:        
0396   E5                     PUSH   hl   
0397   DD E9                  JP   (ix)   
0399                             ; @ addr
0399                             ; -- ptr
0399                AT:          
0399                ADDR:        
0399   ED 5B F2 23            LD   de,(vPointer)   
039D   21 F2 23               LD   hl,vPointer   
03A0   C3 74 0A               JP   variable   
03A3                AMPER:       
03A3                AND:         
03A3   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A4   E1                     POP   hl   
03A5   7B                     LD   a,e   
03A6   A5                     AND   l   
03A7   6F                     LD   l,a   
03A8   7A                     LD   a,d   
03A9   A4                     AND   h   
03AA                AND1:        
03AA   67                     LD   h,a   
03AB   E5                     PUSH   hl   
03AC   DD E9                  JP   (ix)   
03AE                PIPE:        
03AE                OR:          
03AE   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03AF   E1                     POP   hl   
03B0   7B                     LD   a,e   
03B1   B5                     OR   l   
03B2   6F                     LD   l,a   
03B3   7A                     LD   a,d   
03B4   B4                     OR   h   
03B5   18 F3                  JR   and1   
03B7                XOR:         
03B7   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03B8                XOR1:        
03B8   E1                     POP   hl   
03B9   7B                     LD   a,e   
03BA   AD                     XOR   l   
03BB   6F                     LD   l,a   
03BC   7A                     LD   a,d   
03BD   AC                     XOR   h   
03BE   67                     LD   h,a   
03BF   E5                     PUSH   hl   
03C0   DD E9                  JP   (ix)   
03C2                INVERT:      ; Bitwise INVert the top member of the stack
03C2   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C5   18 F1                  JR   xor1   
03C7                             ; $a .. $z
03C7                             ; -- value
03C7                             ; returns value of arg
03C7                DOLLAR:      
03C7                ARG:         
03C7   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03CA   FD 56 05               LD   d,(iy+5)   
03CD   EB                     EX   de,hl   
03CE   7D                     LD   a,l   ; arg_list* == null, skip
03CF   B4                     OR   h   
03D0   28 1C                  JR   z,arg0a   
03D2   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D3   2B                     DEC   hl   
03D4   7E                     LD   a,(hl)   
03D5   23                     INC   hl   
03D6   23                     INC   hl   
03D7   B7                     OR   a   
03D8   28 14                  JR   z,arg0a   ; num_args == 0, skip
03DA   5F                     LD   e,a   ; e = a = num_args
03DB   03                     INC   bc   ; a = next char = dollar_name
03DC   0A                     LD   a,(bc)   
03DD   C5                     PUSH   bc   ; save IP
03DE   43                     LD   b,e   ; b = e = num_args
03DF   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E2   FD 56 03               LD   d,(iy+3)   
03E5                ARG0:        
03E5   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E6   1B                     DEC   de   
03E7   BE                     CP   (hl)   
03E8   28 09                  JR   z,arg1   
03EA   23                     INC   hl   ; hl = next arg_list*
03EB   10 F8                  DJNZ   arg0   
03ED   C1                     POP   bc   ; no match, restore IP
03EE                ARG0A:       
03EE   11 00 00               LD   de,0   ; return 0
03F1   18 08                  JR   arg1a   
03F3                ARG1:        
03F3   C1                     POP   bc   ; restore IP
03F4   EB                     EX   de,hl   ; hl = arg*
03F5   22 F2 23               LD   (vPointer),hl   ; store arg* in setter
03F8   5E                     LD   e,(hl)   
03F9   23                     INC   hl   
03FA   56                     LD   d,(hl)   ; de = arg
03FB                ARG1A:       
03FB   D5                     PUSH   de   ; push arg
03FC   DD E9                  JP   (ix)   
03FE                LBRACK:      
03FE                ARRAYSTART:      
03FE   11 00 00               LD   de,0   ; create stack frame
0401   D5                     PUSH   de   ; push null for IP
0402   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0405   FD 56 05               LD   d,(iy+5)   ; 
0408   D5                     PUSH   de   ; 
0409   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
040C   FD 56 03               LD   d,(iy+3)   ; 
040F   D5                     PUSH   de   ; 
0410   FD E5                  PUSH   iy   ; push BP
0412   FD 21 00 00            LD   iy,0   ; BP = SP
0416   FD 39                  ADD   iy,sp   
0418   DD E9                  JP   (ix)   
041A                RBRACK:      
041A                ARRAYEND:      
041A   FD 54                  LD   d,iyh   ; de = BP
041C   FD 5D                  LD   e,iyl   
041E   ED 43 00 24            LD   (vTemp1),bc   ; save IP
0422   62 6B                  LD   hl,de   ; hl = de = BP
0424   B7                     OR   a   
0425   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0427   CB 3C                  SRL   h   ; 
0429   CB 1D                  RR   l   
042B   44 4D                  LD   bc,hl   ; bc = count
042D   2A F0 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
0430   71                     LD   (hl),c   ; write num items in length word
0431   23                     INC   hl   
0432   70                     LD   (hl),b   
0433   23                     INC   hl   ; hl = array[0], bc = count
0434                             ; de = BP, hl = array[0], bc = count
0434   3E A4                  LD   a,TARRAY   ; write type tag
0436   77                     LD   (hl),a   
0437   23                     INC   hl   
0438   3E AA                  LD   a,TMAGIC   ; write magic byte
043A   77                     LD   (hl),a   
043B   23                     INC   hl   
043C                ARRAYEND1:      
043C   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
043F   77                     LD   (hl),a   ; write lsb of array item
0440   23                     INC   hl   ; move to msb of array item
0441   3A E6 23               LD   a,(vDataWidth)   ; vDataWidth=1?
0444   3D                     DEC   a   
0445   28 05                  JR   z,arrayEnd2   
0447   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
044A   77                     LD   (hl),a   ; write msb of array item
044B   23                     INC   hl   ; move to next word in array
044C                ARRAYEND2:      
044C   FD 2B                  DEC   iy   ; move to next word on stack
044E   FD 2B                  DEC   iy   
0450   0B                     DEC   bc   ; dec items count
0451   79                     LD   a,c   ; if not zero loop
0452   B0                     OR   b   
0453   20 E7                  JR   nz,arrayEnd1   
0455   EB                     EX   de,hl   ; de = end of array, hl = BP
0456   F9                     LD   sp,hl   ; sp = BP
0457   E1                     POP   hl   ; de = end of array, hl = old BP
0458   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0459   FD 62                  LD   iyh,d   
045B   FD 6B                  LD   iyl,e   
045D   D1                     POP   de   ; pop arg_list (discard)
045E   D1                     POP   de   ; pop first_arg* (discard)
045F   D1                     POP   de   ; pop IP (discard)
0460   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = array[-4]
0464   13                     INC   de   ; de = array[0]
0465   13                     INC   de   
0466   13                     INC   de   
0467   13                     INC   de   
0468   D5                     PUSH   de   ; return array[0]
0469   22 F0 23               LD   (vHeapPtr),hl   ; move heap* to end of array
046C   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
0470   DD E9                  JP   (ix)   
0472                             ; index of an array, based on vDataWidth
0472                             ; array num -- value    ; also sets vPointer to address
0472                ARRINDEX:      
0472   E1                     POP   hl   ; hl = index
0473   D1                     POP   de   ; de = array
0474   3A E6 23               LD   a,(vDataWidth)   ; a = data width
0477   3D                     DEC   a   
0478   28 01                  JR   z,arrIndex1   
047A                ARRINDEX0:      
047A   29                     ADD   hl,hl   ; if data width = 2 then double
047B                ARRINDEX1:      
047B   19                     ADD   hl,de   ; add addr
047C   22 F2 23               LD   (vPointer),hl   ; store address in setter
047F   16 00                  LD   d,0   
0481   5E                     LD   e,(hl)   
0482   B7                     OR   a   ; check data width again
0483   28 02                  JR   z,arrIndex2   
0485   23                     INC   hl   
0486   56                     LD   d,(hl)   
0487                ARRINDEX2:      
0487   D5                     PUSH   de   
0488   DD E9                  JP   (ix)   
048A                             ; value _oldValue --            ; uses address in vPointer
048A                ASSIGN:      
048A   E1                     POP   hl   ; discard last accessed value
048B   E1                     POP   hl   ; hl = new value
048C                ASSIGN0:      
048C   EB                     EX   de,hl   ; de = new value
048D                ASSIGNX:      
048D   2A F2 23               LD   hl,(vPointer)   
0490   73                     LD   (hl),e   
0491   3A E6 23               LD   a,(vDataWidth)   
0494   3D                     DEC   a   ; is it byte?
0495   28 02                  JR   z,assign1   
0497   23                     INC   hl   
0498   72                     LD   (hl),d   
0499                ASSIGN1:      
0499   DD E9                  JP   (ix)   
049B                             ; arg_list - parses input (ab:c)
049B                             ; names after the : represent uninitialised locals
049B                             ; return values are the state of the stack after the block ends
049B                COLON:       
049B                ARGLIST:      
049B   11 00 00               LD   de,0   ; d = count locals, e = count args ()
049E   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
04A1   23                     INC   hl   ; skip length field to start
04A2   23                     INC   hl   
04A3   E5                     PUSH   hl   ; save start of arg_list
04A4   03                     INC   bc   ; point to next char
04A5                ARGLIST1:      
04A5   0A                     LD   a,(bc)   
04A6   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A8   20 03                  JR   nz,arglist1a   
04AA   14                     INC   d   ; non zero value local count acts as flag
04AB   18 10                  JR   arglist3   
04AD                ARGLIST1A:      
04AD   FE 41                  CP   "A"   ; < "A" terminates arg_list
04AF   38 0F                  JR   c,arglist4   
04B1   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B3   30 0B                  JR   nc,arglist4   
04B5                ARGLIST2:      
04B5   77                     LD   (hl),a   
04B6   23                     INC   hl   
04B7   1C                     INC   e   ; increase arg count
04B8   AF                     XOR   a   
04B9   B2                     OR   d   
04BA   28 01                  JR   z,arglist3   
04BC   14                     INC   d   ; if d > 0 increase local count
04BD                ARGLIST3:      
04BD   03                     INC   bc   ; point to next char
04BE   18 E5                  JR   arglist1   
04C0                ARGLIST4:      
04C0   0B                     DEC   bc   
04C1   AF                     XOR   a   
04C2   B2                     OR   d   
04C3   28 01                  JR   z,arglist5   
04C5   15                     DEC   d   ; remove initial inc
04C6                ARGLIST5:      
04C6   23                     INC   hl   
04C7   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04CA   E1                     POP   hl   ; hl = start of arg_list
04CB   E5                     PUSH   hl   ; return start of arg_list
04CC   2B                     DEC   hl   ; write number of locals at start - 1
04CD   72                     LD   (hl),d   
04CE   2B                     DEC   hl   ; write number of args + locals at start - 2
04CF   73                     LD   (hl),e   
04D0   DD E9                  JP   (ix)   
04D2                LBRACE:      
04D2                BLOCKSTART:      
04D2   C5                     PUSH   bc   ; return pointer to first { of block
04D3   03                     INC   bc   
04D4   16 01                  LD   d,1   ; nesting: count first parenthesis
04D6                BLOCKSTART1:      ; Skip to end of definition
04D6   0A                     LD   a,(bc)   ; Get the next character
04D7   03                     INC   bc   ; Point to next character
04D8   FE 21                  CP   " " + 1   ; ignore whitespace
04DA   38 FA                  JR   c,blockStart1   
04DC   FE 29                  CP   ")"   
04DE   28 2D                  JR   z,blockStart4   
04E0   FE 7D                  CP   "}"   
04E2   28 29                  JR   z,blockStart4   
04E4   FE 5D                  CP   "]"   
04E6   28 25                  JR   z,blockStart4   
04E8   FE 28                  CP   "("   
04EA   28 16                  JR   z,blockStart2   
04EC   FE 7B                  CP   "{"   
04EE   28 12                  JR   z,blockStart2   
04F0   FE 5B                  CP   "["   
04F2   28 0E                  JR   z,blockStart2   
04F4   FE 27                  CP   "'"   
04F6   28 0D                  JR   z,blockStart3   
04F8   FE 60                  CP   "`"   
04FA   28 09                  JR   z,blockStart3   
04FC   FE 22                  CP   DQUOTE   
04FE   28 05                  JR   z,blockStart3   
0500   18 D4                  JR   blockStart1   
0502                BLOCKSTART2:      
0502   14                     INC   d   
0503   18 D1                  JR   blockStart1   
0505                BLOCKSTART3:      
0505   3E 80                  LD   a,$80   
0507   AA                     XOR   d   
0508   57                     LD   d,a   
0509   20 CB                  JR   nz,blockStart1   
050B   18 03                  JR   blockStart5   
050D                BLOCKSTART4:      
050D   15                     DEC   d   
050E   20 C6                  JR   nz,blockStart1   ; get the next element
0510                BLOCKSTART5:      
0510   60 69                  LD   hl,bc   ; hl = IP
0512   11 1E 24               LD   de,HEAP   ; is IP pointing to object in heap
0515   B7                     OR   a   ; IP - HEAP
0516   ED 52                  SBC   hl,de   
0518   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
051A   28 1C                  JR   z,blockStart6   
051C   60 69                  LD   hl,bc   ; hl = IP
051E   D1                     POP   de   ; de = block*
051F   ED 43 00 24            LD   (vTemp1),bc   ; save IP
0523   B7                     OR   a   ; bc = size
0524   ED 52                  SBC   hl,de   
0526   44 4D                  LD   bc,hl   
0528   EB                     EX   de,hl   ; hl = block* de = heap*
0529   ED 5B F0 23            LD   de,(vHeapPtr)   
052D   D5                     PUSH   de   ; return hblock*
052E   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0530   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += size
0534   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
0538                BLOCKSTART6:      
0538   0B                     DEC   bc   ; balanced, exit
0539   DD E9                  JP   (ix)   
053B                RBRACE:      
053B                BLOCKEND:      
053B   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
053E   FD 56 01               LD   d,(iy+1)   
0541   ED 53 00 24            LD   (vTemp1),de   
0545   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0548   FD 56 07               LD   d,(iy+7)   
054B   ED 53 02 24            LD   (vTemp2),de   
054F   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0552   FD 56 03               LD   d,(iy+3)   
0555   EB                     EX   de,hl   
0556   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0559   FD 56 01               LD   d,(iy+1)   
055C   13                     INC   de   ; for carry flag <=
055D   B7                     OR   a   
055E   ED 52                  SBC   hl,de   
0560   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0562   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0564   FD 5D                  LD   e,iyl   
0566   21 08 00               LD   hl,8   
0569   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
056A   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
056B   18 0C                  JR   blockEnd2   
056D                BLOCKEND1:      ; same scope
056D   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0570   FD 56 03               LD   d,(iy+3)   
0573   EB                     EX   de,hl   
0574   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0576   FD 5D                  LD   e,iyl   
0578   EB                     EX   de,hl   
0579                BLOCKEND2:      
0579   44 4D                  LD   bc,hl   ; bc = hl = BP
057B   B7                     OR   a   ; hl = BP - SP = count
057C   ED 72                  SBC   hl,sp   
057E   7D                     LD   a,l   
057F   B4                     OR   h   
0580   28 09                  JR   z,blockEnd3   
0582   C5                     PUSH   bc   ; bc = count, hl = BP
0583   44 4D                  LD   bc,hl   
0585   E1                     POP   hl   
0586   2B                     DEC   hl   ; hl = BP-1
0587   1B                     DEC   de   ; de = args*-1
0588   ED B8                  LDDR      
058A   13                     INC   de   
058B                BLOCKEND3:      
058B   EB                     EX   de,hl   ; sp = de = new tos*
058C   F9                     LD   sp,hl   
058D   ED 4B 02 24            LD   bc,(vTemp2)   
0591   FD 2A 00 24            LD   iy,(vTemp1)   
0595   DD E9                  JP   (ix)   
0597                TICK:        
0597                CHAR:        
0597   21 00 00               LD   hl,0   ; if "" is empty or null
059A                CHAR1:       
059A   03                     INC   bc   ; point to next char
059B   0A                     LD   a,(bc)   
059C   FE 27                  CP   "'"   ; ' is the terminator
059E   28 09                  JR   z,char3   
05A0   FE 5C                  CP   $5c   ; \ is the escape
05A2   20 02                  JR   nz,char2   
05A4   03                     INC   bc   
05A5   0A                     LD   a,(bc)   
05A6                CHAR2:       
05A6   6F                     LD   l,a   
05A7   18 F1                  JR   char1   
05A9                CHAR3:       
05A9   E5                     PUSH   hl   
05AA   DD E9                  JP   (ix)   
05AC                BACKSLASH:      
05AC   DD E9                  JP   (ix)   
05AE                             ; , discard stack item
05AE                             ; x y -- x
05AE                COMMA:       
05AE                DISCARD:      
05AE   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05B0   FD 5D                  LD   e,iyl   
05B2   EB                     EX   de,hl   
05B3   B7                     OR   a   
05B4   ED 72                  SBC   hl,sp   
05B6   CB 7C                  BIT   7,h   
05B8   20 01                  JR   nz,discard1   
05BA   E1                     POP   hl   
05BB                DISCARD1:      
05BB   DD E9                  JP   (ix)   
05BD                SLASH:       
05BD   CD DF 0A               CALL   jumpTable   
05C0   2F                     DB   "/"   
05C1   2A 08                  DW   comment   
05C3   61                     DB   "a"   
05C4   33 08                  DW   command_a   
05C6   62                     DB   "b"   
05C7   6D 08                  DW   command_b   
05C9   63                     DB   "c"   
05CA   7A 0A                  DW   chars   
05CC   64                     DB   "d"   
05CD   82 0A                  DW   decimal   
05CF   66                     DB   "f"   
05D0   4A 06                  DW   false1   
05D2   68                     DB   "h"   
05D3   8A 0A                  DW   hexadecimal   
05D5   69                     DB   "i"   
05D6   B6 09                  DW   command_i   
05D8   6B                     DB   "k"   
05D9   9B 0A                  DW   key   
05DB   6E                     DB   "n"   
05DC   AD 0A                  DW   numbers   
05DE   6F                     DB   "o"   
05DF   A4 0A                  DW   output   
05E1   70                     DB   "p"   
05E2   C2 09                  DW   command_p   
05E4   73                     DB   "s"   
05E5   2B 0A                  DW   size   
05E7   74                     DB   "t"   
05E8   44 06                  DW   true1   
05EA   76                     DB   "v"   
05EB   35 0A                  DW   command_v   
05ED   78                     DB   "x"   
05EE   B7 03                  DW   xor   
05F0   00                     DB   NUL   
05F1   F3 05                  DW   div   
05F3                DIV:         
05F3   D1                     POP   de   
05F4   E1                     POP   hl   
05F5   C5                     PUSH   bc   ; preserve the IP
05F6   44 4D                  LD   bc,hl   
05F8   CD 16 06               CALL   divide   
05FB   EB                     EX   de,hl   
05FC   ED 53 F4 23            LD   (vRemain),de   
0600   C1                     POP   bc   
0601   C3 96 03               JP   add3   
0604                DOT:         
0604   CD DF 0A               CALL   jumpTable   
0607   61                     DB   "a"   
0608   88 08                  DW   bufferArray   
060A   63                     DB   "c"   
060B   95 09                  DW   bufferChar   
060D   73                     DB   "s"   
060E   7B 09                  DW   bufferString   
0610   78                     DB   "x"   
0611   9A 09                  DW   bufferXChars   
0613   00                     DB   NUL   
0614   BC 08                  DW   bufferNumber   
0616                             ; division subroutine.
0616                             ; bc: divisor, de: dividend, hl: remainder
0616                DIVIDE:      
0616   21 00 00               LD   hl,0   ; zero the remainder
0619   3E 10                  LD   a,16   ; loop counter
061B                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
061B   CB 21                  SLA   c   
061D   CB 10                  RL   b   
061F   ED 6A                  ADC   hl,hl   
0621   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0623   38 03                  JR   c,divide2   
0625   0C                     INC   c   
0626   18 01                  JR   divide3   
0628                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0628   19                     ADD   hl,de   
0629                DIVIDE3:      
0629   3D                     DEC   a   
062A   20 EF                  JR   nz,divide1   
062C   50 59                  LD   de,bc   ; result from bc to de
062E   C9                     RET      
062F                             ; hl = value1, de = value2
062F                             ; hl = result
062F                EQUALS:      
062F   B7                     OR   a   ; reset the carry flag
0630   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0632   28 10                  JR   z,true1   
0634   C3 4A 06               JP   false1   
0637                             ; hl = value1 de = value2
0637                             ; hl = result
0637                LESSTHANEQ:      
0637   B7                     OR   a   
0638   ED 52                  SBC   hl,de   
063A   18 05                  JR   lessthan1   
063C                             ; hl = value1 de = value2
063C                             ; hl = result
063C                LESSTHAN:      
063C   B7                     OR   a   
063D   ED 52                  SBC   hl,de   
063F   28 09                  JR   z,false1   
0641                LESSTHAN1:      
0641   FA 4A 06               JP   m,false1   
0644                TRUE1:       
0644   21 FF FF               LD   hl,TRUE   
0647   E5                     PUSH   hl   
0648   DD E9                  JP   (ix)   
064A                NULL1:       
064A                FALSE1:      
064A   21 00 00               LD   hl,FALSE   
064D   E5                     PUSH   hl   
064E   DD E9                  JP   (ix)   
0650                             ; execute a block of code which ends with }
0650                             ; creates a root scope if BP == stack
0650                             ; else uses outer scope
0650                CARET:       
0650                GO:          
0650   D1                     POP   de   ; de = block*
0651                GO1:         
0651   7B                     LD   a,e   ; if block* == null, exit
0652   B2                     OR   d   
0653   20 02                  JR   nz,go2   
0655   DD E9                  JP   (ix)   
0657                GO2:         
0657   1A                     LD   a,(de)   
0658   FE 7B                  CP   "{"   
065A   28 07                  JR   z,goBlock1   
065C   FE 28                  CP   "("   
065E   C2 96 06               JP   nz,goLambda   
0661   13                     INC   de   ; de is the address to jump back to
0662   D5                     PUSH   de   ; push de just before stack frame
0663                GOBLOCK:      
0663                GOBLOCK1:      
0663   ED 53 00 24            LD   (vTemp1),de   ; save de
0667   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
066A   FD 54                  LD   d,iyh   
066C   FD 5D                  LD   e,iyl   
066E   B7                     OR   a   ; if stack* == BP then this is the root_scope
066F   ED 52                  SBC   hl,de   
0671   ED 5B 00 24            LD   de,(vTemp1)   ; restore de
0675   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0676   B4                     OR   h   
0677   3E 00                  LD   a,0   
0679   28 70                  JR   z,goLambda8   
067B   C5                     PUSH   bc   ; push IP
067C   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
067F   FD 46 05               LD   b,(iy+5)   
0682   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0685   FD 66 03               LD   h,(iy+3)   
0688                GOBLOCK2:      
0688   C5                     PUSH   bc   ; arg_list*
0689   E5                     PUSH   hl   ; first_arg*
068A   FD E5                  PUSH   iy   ; push BP
068C   FD 21 00 00            LD   iy,0   ; BP = SP
0690   FD 39                  ADD   iy,sp   
0692   42 4B                  LD   bc,de   ; bc = de = block*-1
0694   DD E9                  JP   (ix)   
0696                GOLAMBDA:      ; execute lambda
0696   EB                     EX   de,hl   ; hl = lambda*
0697   5E                     LD   e,(hl)   ; de = partial_array*
0698   23                     INC   hl   
0699   56                     LD   d,(hl)   
069A   23                     INC   hl   
069B   7B                     LD   a,e   ; if partial_array* == null skip
069C   B2                     OR   d   
069D   28 25                  JR   z,goLambda3   
069F   ED 43 00 24            LD   (vTemp1),bc   
06A3   22 02 24               LD   (vTemp2),hl   ; save bc,hl
06A6   EB                     EX   de,hl   ; hl = partial_array*
06A7   2B                     DEC   hl   ; skip type byte
06A8   2B                     DEC   hl   ; skip magic byte
06A9   2B                     DEC   hl   ; bc = count
06AA   46                     LD   b,(hl)   
06AB   2B                     DEC   hl   
06AC   4E                     LD   c,(hl)   
06AD   23                     INC   hl   ; hl = array data*
06AE   23                     INC   hl   
06AF   23                     INC   hl   
06B0   23                     INC   hl   
06B1   18 06                  JR   goLambda2   ; push each item on stack
06B3                GOLAMBDA1:      
06B3   5E                     LD   e,(hl)   ; de = partial item
06B4   23                     INC   hl   
06B5   56                     LD   d,(hl)   
06B6   23                     INC   hl   
06B7   D5                     PUSH   de   ; push on stack
06B8   0B                     DEC   bc   
06B9                GOLAMBDA2:      
06B9   79                     LD   a,c   ; if count != 0 then loop
06BA   B0                     OR   b   
06BB   20 F6                  JR   nz,goLambda1   
06BD   ED 4B 00 24            LD   bc,(vTemp1)   ; restore bc
06C1   2A 02 24               LD   hl,(vTemp2)   ; restore hl
06C4                GOLAMBDA3:      
06C4   5E                     LD   e,(hl)   ; de = block*
06C5   23                     INC   hl   
06C6   56                     LD   d,(hl)   
06C7   23                     INC   hl   
06C8   ED 53 00 24            LD   (vTemp1),de   ; save block*
06CC   5E                     LD   e,(hl)   ; de = arg_list*
06CD   23                     INC   hl   
06CE   56                     LD   d,(hl)   
06CF   23                     INC   hl   
06D0   EB                     EX   de,hl   ; hl = arg_list*
06D1   ED 5B 00 24            LD   de,(vTemp1)   ; restore de = block*
06D5   7D                     LD   a,l   ; if arg_list* == null a = 0
06D6   B4                     OR   h   
06D7   20 03                  JR   nz,goLambda4   
06D9   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06DA   18 0F                  JR   goLambda8   
06DC                GOLAMBDA4:      ; allocate locals
06DC   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
06DD   7E                     LD   a,(hl)   
06DE   18 03                  JR   goLambda6   
06E0                GOLAMBDA5:      ; loop
06E0   3B                     DEC   sp   
06E1   3B                     DEC   sp   
06E2   3D                     DEC   a   
06E3                GOLAMBDA6:      
06E3   B7                     OR   a   
06E4   20 FA                  JR   nz,goLambda5   ; end loop
06E6                GOLAMBDA7:      
06E6   2B                     DEC   hl   ; a = num_args* x 2
06E7   7E                     LD   a,(hl)   
06E8   23                     INC   hl   
06E9   23                     INC   hl   
06EA   87                     ADD   a,a   ; a *= 2
06EB                GOLAMBDA8:      
06EB   C5                     PUSH   bc   ; push IP
06EC   44 4D                  LD   bc,hl   
06EE   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06F1   85                     ADD   a,l   
06F2   6F                     LD   l,a   
06F3   39                     ADD   hl,sp   
06F4   18 92                  JR   goBlock2   
06F6                HASH:        
06F6                HEXNUM:      
06F6   21 00 00               LD   hl,0   ; Clear hl to accept the number
06F9                HEXNUM1:      
06F9   03                     INC   bc   
06FA   0A                     LD   a,(bc)   ; Get the character which is a numeral
06FB   CB 77                  BIT   6,a   ; is it uppercase alpha?
06FD   28 02                  JR   z,hexnum2   ; no a decimal
06FF   D6 07                  SUB   7   ; sub 7  to make $a - $F
0701                HEXNUM2:      
0701   D6 30                  SUB   $30   ; form decimal digit
0703   DA 81 07               JP   c,num2   
0706   FE 10                  CP   $0F+1   
0708   D2 81 07               JP   nc,num2   
070B   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
070C   29                     ADD   hl,hl   ; 4X
070D   29                     ADD   hl,hl   ; 8X
070E   29                     ADD   hl,hl   ; 16X
070F   85                     ADD   a,l   ; add into bottom of hl
0710   6F                     LD   l,a   
0711   18 E6                  JR   hexnum1   
0713                UPCASE:      
0713   0A                     LD   a,(bc)   ; a = identifier char
0714   D6 41                  SUB   "A"   ; "A" = 0
0716   18 05                  JR   ident1   
0718                LOWCASE:      
0718   0A                     LD   a,(bc)   
0719   D6 61                  SUB   "a"   
071B   C6 1A                  ADD   a,26   
071D                IDENT1:      
071D   87                     ADD   a,a   ; l = a * 2
071E   6F                     LD   l,a   
071F   26 23                  LD   h,msb(vars)   
0721   22 F2 23               LD   (vPointer),hl   ; store address in setter
0724   5E                     LD   e,(hl)   
0725   23                     INC   hl   
0726   56                     LD   d,(hl)   
0727   D5                     PUSH   de   
0728   DD E9                  JP   (ix)   
072A                             ; if
072A                             ; condition then -- value
072A                QUESTION:      
072A                IF:          
072A   03                     INC   bc   
072B   0A                     LD   a,(bc)   
072C   FE 3F                  CP   "?"   
072E   28 06                  JR   z,ifte   
0730   0B                     DEC   bc   
0731   11 00 00               LD   de,NUL   ; NUL pointer for else
0734   18 01                  JR   ifte1   
0736                             ; ifte
0736                             ; condition then else -- value
0736                IFTE:        
0736   D1                     POP   de   ; de = else
0737                IFTE1:       
0737   E1                     POP   hl   ; hl = then
0738   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0739   7C                     LD   a,h   
073A   B5                     OR   l   
073B   E1                     POP   hl   ; hl = then
073C   CA 51 06               JP   z,go1   ; if z de = else
073F   EB                     EX   de,hl   ; condition = false, de = then
0740   C3 51 06               JP   go1   
0743                STAR:        
0743                MUL:         
0743   D1                     POP   de   ; get first value
0744   E1                     POP   hl   
0745                MUL2:        
0745   C5                     PUSH   bc   ; Preserve the IP
0746   44 4D                  LD   bc,hl   ; bc = 2nd value
0748   21 00 00               LD   hl,0   
074B   3E 10                  LD   a,16   
074D                MUL3:        
074D   29                     ADD   hl,hl   
074E   CB 13                  RL   e   
0750   CB 12                  RL   d   
0752   30 04                  JR   nc,$+6   
0754   09                     ADD   hl,bc   
0755   30 01                  JR   nc,$+3   
0757   13                     INC   de   
0758   3D                     DEC   a   
0759   20 F2                  JR   nz,mul3   
075B   C1                     POP   bc   ; Restore the IP
075C   C3 96 03               JP   add3   
075F                NUM:         
075F   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0762   0A                     LD   a,(bc)   ; Get numeral or -
0763   FE 2D                  CP   "-"   
0765   20 01                  JR   nz,num0   
0767   03                     INC   bc   ; move to next char, no flags affected
0768                NUM0:        
0768   08                     EX   af,af'   ; save zero flag = 0 for later
0769                NUM1:        
0769   0A                     LD   a,(bc)   ; read digit
076A   D6 30                  SUB   "0"   ; less than 0?
076C   38 13                  JR   c,num2   ; not a digit, exit loop
076E   FE 0A                  CP   10   ; greater that 9?
0770   30 0F                  JR   nc,num2   ; not a digit, exit loop
0772   03                     INC   bc   ; inc IP
0773   54 5D                  LD   de,hl   ; multiply hl * 10
0775   29                     ADD   hl,hl   
0776   29                     ADD   hl,hl   
0777   19                     ADD   hl,de   
0778   29                     ADD   hl,hl   
0779   85                     ADD   a,l   ; add digit in a to hl
077A   6F                     LD   l,a   
077B   3E 00                  LD   a,0   
077D   8C                     ADC   a,h   
077E   67                     LD   h,a   
077F   18 E8                  JR   num1   
0781                NUM2:        
0781   0B                     DEC   bc   
0782   08                     EX   af,af'   ; restore zero flag
0783   20 07                  JR   nz,num3   
0785   EB                     EX   de,hl   ; negate the value of hl
0786   21 00 00               LD   hl,0   
0789   B7                     OR   a   ; jump to sub2
078A   ED 52                  SBC   hl,de   
078C                NUM3:        
078C   E5                     PUSH   hl   ; Put the number on the stack
078D   DD E9                  JP   (ix)   ; and process the next character
078F                UNDERSCORE:      
078F                REMAIN:      
078F   2A F4 23               LD   hl,(vRemain)   
0792   E5                     PUSH   hl   
0793   DD E9                  JP   (ix)   
0795                RPAREN:      
0795   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0798   FD 46 09               LD   b,(iy+9)   
079B   DD E9                  JP   (ix)   
079D                             ; arg_list* block* -- ptr
079D                SEMICOLON:      
079D   D1                     POP   de   ; de = block* hl = heap*
079E   2A F0 23               LD   hl,(vHeapPtr)   
07A1   AF                     XOR   a   
07A2   77                     LD   (hl),a   ; compile null partial_array*
07A3   23                     INC   hl   
07A4   77                     LD   (hl),a   
07A5   23                     INC   hl   
07A6   73                     LD   (hl),e   ; compile block*
07A7   23                     INC   hl   
07A8   72                     LD   (hl),d   
07A9   23                     INC   hl   
07AA   D1                     POP   de   ; de = block*
07AB   73                     LD   (hl),e   ; compile arg_list*
07AC   23                     INC   hl   
07AD   72                     LD   (hl),d   
07AE   23                     INC   hl   
07AF   ED 5B F0 23            LD   de,(vHeapPtr)   ; return lambda*
07B3   D5                     PUSH   de   
07B4   22 F0 23               LD   (vHeapPtr),hl   ; heap* += 4
07B7   DD E9                  JP   (ix)   
07B9                             ; shiftLeft
07B9                             ; value count -- value2          shift left count places
07B9                SHIFTLEFT:      
07B9   50 59                  LD   de,bc   ; save IP
07BB   C1                     POP   bc   ; bc = count
07BC   41                     LD   b,c   ; b = loop counter
07BD   E1                     POP   hl   
07BE   04                     INC   b   ; test for counter=0 case
07BF   18 01                  JR   shiftLeft2   
07C1                SHIFTLEFT1:      
07C1   29                     ADD   hl,hl   ; left shift hl
07C2                SHIFTLEFT2:      
07C2   10 FD                  DJNZ   shiftLeft1   
07C4   E5                     PUSH   hl   
07C5   42 4B                  LD   bc,de   ; restore IP
07C7   DD E9                  JP   (ix)   
07C9                             ; shiftRight
07C9                             ; value count -- value2          shift left count places
07C9                SHIFTRIGHT:      
07C9   50 59                  LD   de,bc   ; save IP
07CB   C1                     POP   bc   ; bc = count
07CC   41                     LD   b,c   ; b = loop counter
07CD   E1                     POP   hl   
07CE   04                     INC   b   ; test for counter=0 case
07CF   18 04                  JR   shiftRight2   
07D1                SHIFTRIGHT1:      
07D1   CB 3C                  SRL   h   ; right shift hl
07D3   CB 1D                  RR   l   
07D5                SHIFTRIGHT2:      
07D5   10 FA                  DJNZ   shiftRight1   
07D7   E5                     PUSH   hl   
07D8   42 4B                  LD   bc,de   ; restore IP
07DA   DD E9                  JP   (ix)   
07DC                             ; string
07DC                             ; -- ptr                        ; points to start of string chars,
07DC                             ; length is stored at start - 2 bytes
07DC                DBLQUOTE:      
07DC                STRING:      
07DC   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
07DF   23                     INC   hl   ; skip length field to start
07E0   23                     INC   hl   
07E1   E5                     PUSH   hl   ; save start of string
07E2   03                     INC   bc   ; point to next char
07E3   18 03                  JR   string2   
07E5                STRING1:      
07E5   77                     LD   (hl),a   
07E6   23                     INC   hl   ; increase count
07E7   03                     INC   bc   ; point to next char
07E8                STRING2:      
07E8   0A                     LD   a,(bc)   
07E9   FE 22                  CP   DQUOTE   ; " is the string terminator
07EB   28 04                  JR   z,string3   
07ED   FE 60                  CP   "`"   ; ` is the string terminator used in testing
07EF   20 F4                  JR   nz,string1   
07F1                STRING3:      
07F1   AF                     XOR   a   ; write NUL to terminate string
07F2   77                     LD   (hl),a   ; hl = end of string
07F3   23                     INC   hl   
07F4   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
07F7   2B                     DEC   hl   ; hl = end of string without terminator
07F8   D1                     POP   de   ; de = start of string
07F9   D5                     PUSH   de   ; return start of string
07FA   B7                     OR   a   ; hl = length bytes, de = start of string
07FB   ED 52                  SBC   hl,de   
07FD   EB                     EX   de,hl   
07FE   2B                     DEC   hl   ; write length bytes to length field at start - 2
07FF   72                     LD   (hl),d   
0800   2B                     DEC   hl   
0801   73                     LD   (hl),e   
0802   DD E9                  JP   (ix)   
0804                MINUS:       ; negative sign or subtract
0804   03                     INC   bc   ; check if sign of a number
0805   0A                     LD   a,(bc)   
0806   0B                     DEC   bc   
0807   FE 30                  CP   "0"   
0809   38 05                  JR   c,sub   
080B   FE 3A                  CP   "9"+1   
080D   DA 3E 03               JP   c,num_   
0810                SUB:         ; Subtract the value 2nd on stack from top of stack
0810   03                     INC   bc   
0811   FE 2D                  CP   "-"   
0813   20 05                  JR   nz,sub1   
0815   E1                     POP   hl   
0816   2B                     DEC   hl   
0817   C3 8C 04               JP   assign0   
081A                SUB1:        
081A   0B                     DEC   bc   
081B   D1                     POP   de   
081C   E1                     POP   hl   
081D   B7                     OR   a   
081E   ED 52                  SBC   hl,de   
0820   C3 96 03               JP   add3   
0823                ERROR1:      
0823   21 01 00               LD   hl,1   ; error 1: unknown command
0826   E5                     PUSH   hl   
0827   C3 63 0C               JP   error   
082A                COMMENT:      
082A   03                     INC   bc   ; point to next char
082B   0A                     LD   a,(bc)   
082C   FE 20                  CP   " "   ; terminate on any char less than SP
082E   30 FA                  JR   nc,comment   
0830   0B                     DEC   bc   
0831   DD E9                  JP   (ix)   
0833                COMMAND_A:      
0833   CD DF 0A               CALL   jumpTable   
0836   62                     DB   "b"   
0837   3F 08                  DW   absolute   
0839   64                     DB   "d"   
083A   4C 08                  DW   addrOf   
083C   00                     DB   NUL   
083D   23 08                  DW   error1   
083F                             ; /ab absolute
083F                             ; num -- num
083F                ABSOLUTE:      
083F   E1                     POP   hl   
0840   CB 7C                  BIT   7,h   
0842   C8                     RET   z   
0843   AF                     XOR   a   
0844   95                     SUB   l   
0845   6F                     LD   l,a   
0846   9F                     SBC   a,a   
0847   94                     SUB   h   
0848   67                     LD   h,a   
0849   E5                     PUSH   hl   
084A   DD E9                  JP   (ix)   
084C                             ; /ad addrOf
084C                             ; char -- addr
084C                ADDROF:      
084C   E1                     POP   hl   ; a = char
084D   7D                     LD   a,l   
084E   FE 7B                  CP   "z"+1   ; if a > z then exit
0850   30 19                  JR   nc,addrOf2   
0852   D6 41                  SUB   "A"   ; a - 65
0854   38 15                  JR   c,addrOf2   ; if < A then exit
0856   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0858   38 06                  JR   c,addrOf1   
085A   D6 06                  SUB   "a"-("Z"+1)   
085C   FE 1A                  CP   "Z"-"A"+1   
085E   38 0B                  JR   c,addrOf2   ; if < a then exit
0860                ADDROF1:      
0860   87                     ADD   a,a   ; double a
0861   21 00 23               LD   hl,VARS   ; hl = VARS + a
0864   85                     ADD   a,l   
0865   6F                     LD   l,a   
0866   3E 00                  LD   a,0   
0868   8C                     ADC   a,h   
0869   67                     LD   h,a   
086A   E5                     PUSH   hl   
086B                ADDROF2:      
086B   DD E9                  JP   (ix)   
086D                COMMAND_B:      
086D   CD DF 0A               CALL   jumpTable   
0870   61                     DB   "a"   
0871   88 08                  DW   bufferArray   
0873   63                     DB   "c"   
0874   95 09                  DW   bufferChar   
0876   6E                     DB   "n"   
0877   BC 08                  DW   bufferNumber   
0879   72                     DB   "r"   
087A   61 09                  DW   break   
087C   73                     DB   "s"   
087D   7B 09                  DW   bufferString   
087F   78                     DB   "x"   
0880   9A 09                  DW   bufferXChars   
0882   79                     DB   "y"   
0883   A6 0B                  DW   coldStart   
0885   00                     DB   NUL   
0886   23 08                  DW   error1   
0888                             ; /ba buffer array
0888                             ; array* --
0888                BUFFERARRAY:      
0888   CD 50 06               CALL   go   
088B   00 00                  DW   NUL   ; NUL closure
088D   91 08                  DW   $+4   
088F   C5 0A                  DW   args1A2L   
0891   7B 24 61 2F 73 24 63 3D 20 30 24 62 3D 28 20 24 61 24 62 25 2F 62 64 20 24 62 2B 2B 20 24 62 20 24 63 3C 2F 62 72 20 29 5E 7D 00 .CSTR   "{$a/s$c= 0$b=( $a$b%/bd $b++ $b $c</br )^}"   ; block
08BC                             ; /bd buffer decimal
08BC                             ; value --
08BC                BUFFERNUMBER:      
08BC   3A E8 23               LD   a,(vNumBase)   
08BF   FE 10                  CP   16   
08C1   28 66                  JR   z,bufferHex   ; else falls through
08C3                             ; /bd buffer decimal
08C3                             ; value --
08C3                BUFFERDEC:      
08C3   ED 5B EC 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
08C7   D9                     EXX      
08C8   E1                     POP   hl   ; hl = value
08C9   CD DD 08               CALL   bufferDec0   
08CC   D9                     EXX      ; de = buffer*' bc = IP
08CD   3E 20                  LD   a," "   ; append space to buffer
08CF   12                     LD   (de),a   
08D0   1C                     INC   e   ; buffer*++, wraparound
08D1   CC C8 0A               CALL   z,flushBuffer   
08D4   2A EC 23               LD   hl,(vBufPtr)   ; hl = buffer*
08D7   ED 53 EC 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
08DB   DD E9                  JP   (ix)   
08DD                             ; hl = value
08DD                             ; de' = buffer*
08DD                             ; a, bc, de, hl destroyed
08DD                BUFFERDEC0:      
08DD   CB 7C                  BIT   7,h   
08DF   28 0C                  JR   z,bufferDec1   
08E1   D9                     EXX      
08E2   3E 2D                  LD   a,"-"   
08E4   12                     LD   (de),a   
08E5   13                     INC   de   
08E6   D9                     EXX      
08E7   AF                     XOR   a   
08E8   95                     SUB   l   
08E9   6F                     LD   l,a   
08EA   9F                     SBC   a,a   
08EB   94                     SUB   h   
08EC   67                     LD   h,a   
08ED                BUFFERDEC1:      
08ED   0E 00                  LD   c,0   ; leading zeros flag = false
08EF   11 F0 D8               LD   de,-10000   
08F2   CD 0D 09               CALL   bufferDec2   
08F5   11 18 FC               LD   de,-1000   
08F8   CD 0D 09               CALL   bufferDec2   
08FB   11 9C FF               LD   de,-100   
08FE   CD 0D 09               CALL   bufferDec2   
0901   1E F6                  LD   e,-10   
0903   CD 0D 09               CALL   bufferDec2   
0906   0C                     INC   c   ; flag = true for at least digit
0907   1E FF                  LD   e,-1   
0909   CD 0D 09               CALL   bufferDec2   
090C   C9                     RET      
090D                BUFFERDEC2:      
090D   06 2F                  LD   b,"0"-1   
090F                BUFFERDEC3:      
090F   04                     INC   b   
0910   19                     ADD   hl,de   
0911   38 FC                  JR   c,bufferDec3   
0913   ED 52                  SBC   hl,de   
0915   3E 30                  LD   a,"0"   
0917   B8                     CP   b   
0918   20 05                  JR   nz,bufferDec4   
091A   AF                     XOR   a   
091B   B1                     OR   c   
091C   C8                     RET   z   
091D   18 01                  JR   bufferDec5   
091F                BUFFERDEC4:      
091F   0C                     INC   c   
0920                BUFFERDEC5:      
0920   78                     LD   a,b   
0921   D9                     EXX      
0922   12                     LD   (de),a   
0923   1C                     INC   e   
0924   CC C8 0A               CALL   z,flushBuffer   
0927   D9                     EXX      
0928   C9                     RET      
0929                             ; /bh buffer hex
0929                             ; value --
0929                BUFFERHEX:      
0929   E1                     POP   hl   ; hl = value
092A   ED 5B EC 23            LD   de,(vBufPtr)   
092E   3E 23                  LD   a,"#"   ; # prefix
0930   12                     LD   (de),a   
0931   1C                     INC   e   ; buffer*++, wraparound
0932   CC C8 0A               CALL   z,flushBuffer   
0935   7C                     LD   a,h   
0936   CD 4A 09               CALL   bufferHex1   
0939   7D                     LD   a,l   
093A   CD 4A 09               CALL   bufferHex1   
093D   3E 20                  LD   a," "   ; append space to buffer
093F   12                     LD   (de),a   
0940   1C                     INC   e   ; buffer*++, wraparound
0941   CC C8 0A               CALL   z,flushBuffer   
0944   ED 53 EC 23            LD   (vBufPtr),de   
0948   DD E9                  JP   (ix)   
094A                BUFFERHEX1:      
094A   F5                     PUSH   af   
094B   1F                     RRA      
094C   1F                     RRA      
094D   1F                     RRA      
094E   1F                     RRA      
094F   CD 53 09               CALL   bufferHex2   
0952   F1                     POP   af   
0953                BUFFERHEX2:      
0953   E6 0F                  AND   0x0F   
0955   C6 90                  ADD   a,0x90   
0957   27                     DAA      
0958   CE 40                  ADC   a,0x40   
095A   27                     DAA      
095B   12                     LD   (de),a   
095C   1C                     INC   e   ; buffer*++, wraparound
095D   CC C8 0A               CALL   z,flushBuffer   
0960   C9                     RET      
0961                             ; /br break from loop
0961                             ; --
0961                BREAK:       
0961   E1                     POP   hl   
0962   7D                     LD   a,l   
0963   B4                     OR   h   
0964   28 02                  JR   z,break1   
0966   DD E9                  JP   (ix)   
0968                BREAK1:      
0968   FD 5D                  LD   e,iyl   ; get block* just under stack frame
096A   FD 54                  LD   d,iyh   
096C   21 08 00               LD   hl,8   
096F   19                     ADD   hl,de   
0970   23                     INC   hl   
0971   23                     INC   hl   
0972   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0975   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0978   C3 3B 05               JP   blockEnd   
097B                             ; /bs buffered string
097B                             ; string* --
097B                BUFFERSTRING:      
097B   E1                     POP   hl   ; hl = string*
097C   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
0980   18 06                  JR   bufferString1   
0982                BUFFERSTRING0:      
0982   12                     LD   (de),a   ; a -> buffer*
0983   1C                     INC   e   ; buffer*++, wraparound
0984   CC C8 0A               CALL   z,flushBuffer   
0987   23                     INC   hl   
0988                BUFFERSTRING1:      
0988   7E                     LD   a,(hl)   ; a <- string*
0989   B7                     OR   a   ; if NUL exit loop
098A   20 F6                  JR   nz,bufferString0   
098C   2A EC 23               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
098F   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
0993   DD E9                  JP   (ix)   
0995                             ; /bc buffer char
0995                             ; char --
0995                BUFFERCHAR:      
0995   21 01 00               LD   hl,1   
0998   18 01                  JR   bufferXChars0   
099A                             ; /bx buffered x chars
099A                             ; char length --
099A                BUFFERXCHARS:      
099A   E1                     POP   hl   ; hl = length
099B                BUFFERXCHARS0:      
099B   D1                     POP   de   ; a' = char
099C   7B                     LD   a,e   
099D   08                     EX   af,af'   
099E   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
09A2   18 08                  JR   bufferXChars2   
09A4                BUFFERXCHARS1:      
09A4   08                     EX   af,af'   
09A5   12                     LD   (de),a   
09A6   08                     EX   af,af'   
09A7   1C                     INC   e   ; buffer*++, wraparound
09A8   CC C8 0A               CALL   z,flushBuffer   
09AB   2B                     DEC   hl   
09AC                BUFFERXCHARS2:      
09AC   7D                     LD   a,l   
09AD   B4                     OR   h   
09AE   20 F4                  JR   nz,bufferXChars1   
09B0   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*'
09B4   DD E9                  JP   (ix)   
09B6                COMMAND_I:      
09B6   CD DF 0A               CALL   jumpTable   
09B9   6E                     DB   "n"   
09BA   90 0A                  DW   input   
09BC   76                     DB   "v"   
09BD   C2 03                  DW   invert   
09BF   00                     DB   NUL   
09C0   23 08                  DW   error1   
09C2                COMMAND_P:      
09C2   CD DF 0A               CALL   jumpTable   
09C5   61                     DB   "a"   
09C6   D4 09                  DW   partial   
09C8   62                     DB   "b"   
09C9   F4 09                  DW   printBuffer   
09CB   63                     DB   "c"   
09CC   17 0A                  DW   printChars   
09CE   6B                     DB   "k"   
09CF   29 0A                  DW   printStack   
09D1   00                     DB   NUL   
09D2   23 08                  DW   error1   
09D4                             ; partial
09D4                             ; array* lambda* -- lambda1*
09D4                PARTIAL:      
09D4   E1                     POP   hl   ; h1 = lambda*
09D5   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
09D9   ED 43 00 24            LD   (vTemp1),bc   ; save IP
09DD   01 06 00               LD   bc,6   ; bc = count
09E0   ED B0                  LDIR      ; clone lambda
09E2   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
09E6   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
09E9   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += 6
09ED   D1                     POP   de   ; de = array*
09EE   E5                     PUSH   hl   ; return partial_array*
09EF   73                     LD   (hl),e   ; compile array*
09F0   23                     INC   hl   
09F1   72                     LD   (hl),d   
09F2   DD E9                  JP   (ix)   
09F4                             ; /pb printBuffer
09F4                             ; --
09F4                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
09F4                PRINTBUFFER:      
09F4   CD 50 06               CALL   go   
09F7   00 00                  DW   NUL   ; NUL closure
09F9   FD 09                  DW   $+4   
09FB   BA 0A                  DW   args1A0L   
09FD   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0A17                             ; printChars
0A17                             ; char* len --
0A17                PRINTCHARS:      
0A17   E1                     POP   hl   ; hl = count
0A18   D1                     POP   de   ; de = char*
0A19   CD 24 0A               CALL   printChars2   
0A1C   DD E9                  JP   (ix)   
0A1E                PRINTCHARS1:      
0A1E   1A                     LD   a,(de)   ; print char at char*
0A1F   CD 85 00               CALL   putchar   
0A22   13                     INC   de   ; char*++
0A23   2B                     DEC   hl   ; count--
0A24                PRINTCHARS2:      
0A24   7D                     LD   a,l   ; count == 0?
0A25   B4                     OR   h   
0A26   C8                     RET   z   
0A27   18 F5                  JR   printChars1   ; if not loop
0A29                             ; /pk print stack
0A29                             ; --
0A29                PRINTSTACK:      
0A29                             ;     ld (vTemp1),bc
0A29                             ;     call printStr
0A29                             ;     .cstr "=> "
0A29                             ;     ld hl,STACK
0A29                             ;     sbc hl,sp
0A29                             ;     srl h
0A29                             ;     rr l
0A29                             ;     ld bc,hl
0A29                             ;     ld hl,STACK
0A29                             ;     jr printStack2
0A29                             ; printStack1:
0A29                             ;     dec bc
0A29                             ;     dec hl
0A29                             ;     ld d,(hl)
0A29                             ;     dec hl
0A29                             ;     ld e,(hl)
0A29                             ;     ex de,hl
0A29                             ;     call prthex
0A29                             ;     ex de,hl
0A29                             ;     ld a," "
0A29                             ;     call putchar
0A29                             ; printStack2:
0A29                             ;     ld a,c
0A29                             ;     or b
0A29                             ;     jr nz,printStack1
0A29                             ;     call prompt
0A29                             ;     ld bc,(vTemp1)
0A29   DD E9                  JP   (ix)   
0A2B                SIZE:        
0A2B   E1                     POP   hl   
0A2C   2B                     DEC   hl   ; skip magic byte
0A2D   2B                     DEC   hl   ; skip type tag
0A2E   2B                     DEC   hl   ; msb size
0A2F   56                     LD   d,(hl)   
0A30   2B                     DEC   hl   ; lsb size
0A31   5E                     LD   e,(hl)   
0A32   D5                     PUSH   de   
0A33   DD E9                  JP   (ix)   
0A35                COMMAND_V:      
0A35   CD DF 0A               CALL   jumpTable   
0A38   62                     DB   "b"   
0A39   59 0A                  DW   varBufPtr   
0A3B   68                     DB   "h"   
0A3C   62 0A                  DW   varHeapPtr   
0A3E   74                     DB   "t"   
0A3F   6B 0A                  DW   varTIBPtr   
0A41   42                     DB   "B"   
0A42   4A 0A                  DW   constBufStart   
0A44   54                     DB   "T"   
0A45   54 0A                  DW   constTIBStart   
0A47   00                     DB   NUL   
0A48   23 08                  DW   error1   
0A4A                CONSTBUFSTART:      
0A4A   11 00 22               LD   de,BUF   
0A4D   18 28                  JR   constant   
0A4F                CONSTHEAPSTART:      
0A4F   11 1E 24               LD   de,HEAP   
0A52   18 23                  JR   constant   
0A54                CONSTTIBSTART:      
0A54   11 00 21               LD   de,TIB   
0A57   18 1E                  JR   constant   
0A59                VARBUFPTR:      
0A59   ED 5B EC 23            LD   de,(vBufPtr)   
0A5D   21 EC 23               LD   hl,vBufPtr   
0A60   18 12                  JR   variable   
0A62                VARHEAPPTR:      
0A62   ED 5B F0 23            LD   de,(vHeapPtr)   
0A66   21 F0 23               LD   hl,vHeapPtr   
0A69   18 09                  JR   variable   
0A6B                VARTIBPTR:      
0A6B   ED 5B EA 23            LD   de,(vTIBPtr)   
0A6F   21 EA 23               LD   hl,vTIBPtr   
0A72   18 00                  JR   variable   
0A74                VARIABLE:      
0A74   22 F2 23               LD   (vPointer),hl   
0A77                CONSTANT:      
0A77   D5                     PUSH   de   
0A78   DD E9                  JP   (ix)   
0A7A                CHARS:       
0A7A   21 01 00               LD   hl,1   
0A7D                CHARS1:      
0A7D   22 E6 23               LD   (vDataWidth),hl   
0A80   DD E9                  JP   (ix)   
0A82                DECIMAL:      
0A82   21 0A 00               LD   hl,10   
0A85                DECIMAL1:      
0A85   22 E8 23               LD   (vNumBase),hl   
0A88   DD E9                  JP   (ix)   
0A8A                HEXADECIMAL:      
0A8A   21 10 00               LD   hl,16   
0A8D   C3 85 0A               JP   decimal1   
0A90                             ; Z80 port input
0A90                             ; port -- value
0A90                INPUT:       
0A90   E1                     POP   hl   
0A91   59                     LD   e,c   ; save IP
0A92   4D                     LD   c,l   
0A93   ED 68                  IN   l,(c)   
0A95   26 00                  LD   h,0   
0A97   4B                     LD   c,e   ; restore IP
0A98   E5                     PUSH   hl   
0A99   DD E9                  JP   (ix)   
0A9B                KEY:         
0A9B   CD 81 00               CALL   getchar   
0A9E   26 00                  LD   h,0   
0AA0   6F                     LD   l,a   
0AA1   E5                     PUSH   hl   
0AA2   DD E9                  JP   (ix)   
0AA4                             ; Z80 port output
0AA4                             ; value port --
0AA4                OUTPUT:      
0AA4   E1                     POP   hl   
0AA5   59                     LD   e,c   ; save IP
0AA6   4D                     LD   c,l   
0AA7   E1                     POP   hl   
0AA8   ED 69                  OUT   (c),l   
0AAA   4B                     LD   c,e   ; restore IP
0AAB   DD E9                  JP   (ix)   
0AAD                NUMBERS:      
0AAD   21 02 00               LD   hl,2   
0AB0   C3 7D 0A               JP   chars1   
0AB3                             ; 
0AB3                             ; 
0AB3                             ; 
0AB3                             ; 
0AB3                FILTER:      
0AB3                MAP:         
0AB3                SCAN:        
0AB3   DD E9                  JP   (ix)   
0AB5                             ;*******************************************************************
0AB5                             ; reusable arglists
0AB5                             ;*******************************************************************
0AB5                ARGS0A1L_:      ; zero args one local
0AB5   01                     DB   1   ; num args + locals
0AB6   01                     DB   1   ; num locals
0AB7                ARGS0A1L:      
0AB7   61                     DB   "a"   
0AB8                ARGS1A0L_:      ; one arg zero locals
0AB8   01                     DB   1   ; num args + locals
0AB9   00                     DB   0   ; num locals
0ABA                ARGS1A0L:      
0ABA   61                     DB   "a"   
0ABB                ARGS1A1L_:      ; one arg one local
0ABB   02                     DB   2   ; num args + locals
0ABC   01                     DB   1   ; num locals
0ABD                ARGS1A1L:      
0ABD   61 62                  DB   "ab"   
0ABF                ARGS2A0L_:      ; two args zero locals
0ABF   02                     DB   2   ; num args + locals
0AC0   00                     DB   0   ; num locals
0AC1                ARGS2A0L:      
0AC1   61 62                  DB   "ab"   
0AC3                ARGS1A2L_:      ; one arg two locals
0AC3   03                     DB   3   ; num args + locals
0AC4   02                     DB   2   ; num locals
0AC5                ARGS1A2L:      
0AC5   61 62 63               DB   "abc"   
0AC8                             ;*******************************************************************
0AC8                             ; general routines
0AC8                             ;*******************************************************************
0AC8                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0AC8                FLUSHBUFFER:      
0AC8   F5                     PUSH   af   
0AC9   D5                     PUSH   de   
0ACA   E5                     PUSH   hl   
0ACB   2A EC 23               LD   hl,(vBufPtr)   
0ACE   11 00 22               LD   de,BUF   
0AD1   ED 53 EC 23            LD   (vBufPtr),de   
0AD5   B7                     OR   a   
0AD6   ED 52                  SBC   hl,de   
0AD8   CD 24 0A               CALL   printChars2   
0ADB   E1                     POP   hl   
0ADC   D1                     POP   de   
0ADD   F1                     POP   af   
0ADE   C9                     RET      
0ADF                             ; followed by a table
0ADF                             ; db char
0ADF                             ; dw addr
0ADF                             ; the final item must have char == NUL
0ADF                JUMPTABLE:      
0ADF   03                     INC   bc   
0AE0   E1                     POP   hl   
0AE1                JUMPTABLE0:      
0AE1   AF                     XOR   a   
0AE2   BE                     CP   (hl)   
0AE3   28 09                  JR   z,jumpTable1   
0AE5   0A                     LD   a,(bc)   
0AE6   BE                     CP   (hl)   
0AE7   28 06                  JR   z,jumpTable2   
0AE9   23                     INC   hl   
0AEA   23                     INC   hl   
0AEB   23                     INC   hl   
0AEC   18 F3                  JR   jumpTable0   
0AEE                JUMPTABLE1:      
0AEE   0B                     DEC   bc   
0AEF                JUMPTABLE2:      
0AEF   23                     INC   hl   
0AF0   5E                     LD   e,(hl)   
0AF1   23                     INC   hl   
0AF2   56                     LD   d,(hl)   
0AF3   EB                     EX   de,hl   
0AF4   E9                     JP   (hl)   
0AF5                PRTSTR0:      
0AF5   CD 85 00               CALL   putchar   
0AF8   23                     INC   hl   
0AF9                PRTSTR:      
0AF9   7E                     LD   a,(hl)   
0AFA   B7                     OR   a   
0AFB   20 F8                  JR   nz,prtstr0   
0AFD   C9                     RET      
0AFE                             ; **************************************************************************
0AFE                             ; calculate nesting value
0AFE                             ; a is char to be tested,
0AFE                             ; e is the nesting value (initially 0)
0AFE                             ; e is increased by ( and [
0AFE                             ; e is decreased by ) and ]
0AFE                             ; e has its bit 7 toggled by `
0AFE                             ; limited to 127 levels
0AFE                             ; **************************************************************************
0AFE                NESTING:      
0AFE   FE 22                  CP   DQUOTE   ; quote char
0B00   28 06                  JR   z,nesting0   
0B02   FE 60                  CP   "`"   ; quote char
0B04   28 02                  JR   z,nesting0   
0B06   18 0A                  JR   nesting1   
0B08                NESTING0:      
0B08   CB 7B                  BIT   7,e   
0B0A   28 03                  JR   z,nesting1a   
0B0C   CB BB                  RES   7,e   
0B0E   C9                     RET      
0B0F                NESTING1A:      
0B0F   CB FB                  SET   7,e   
0B11   C9                     RET      
0B12                NESTING1:      
0B12   CB 7B                  BIT   7,e   
0B14   C0                     RET   nz   
0B15   FE 7B                  CP   "{"   
0B17   28 08                  JR   z,nesting2   
0B19   FE 5B                  CP   "["   
0B1B   28 04                  JR   z,nesting2   
0B1D   FE 28                  CP   "("   
0B1F   20 02                  JR   nz,nesting3   
0B21                NESTING2:      
0B21   1C                     INC   e   
0B22   C9                     RET      
0B23                NESTING3:      
0B23   FE 7D                  CP   "}"   
0B25   28 07                  JR   z,nesting4   
0B27   FE 5D                  CP   "]"   
0B29   28 03                  JR   z,nesting4   
0B2B   FE 29                  CP   ")"   
0B2D   C0                     RET   nz   
0B2E                NESTING4:      
0B2E   1D                     DEC   e   
0B2F   C9                     RET      
0B30                PROMPT:      
0B30   CD 40 0B               CALL   printStr   
0B33   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0B38   C9                     RET      
0B39                CRLF:        
0B39   CD 40 0B               CALL   printStr   
0B3C   0D 0A 00               .CSTR   "\r\n"   
0B3F   C9                     RET      
0B40                             ; prints a null teminated string
0B40                             ; the string should be immediately following the call
0B40                PRINTSTR:      
0B40   E3                     EX   (sp),hl   ; swap			
0B41   CD F9 0A               CALL   prtstr   
0B44   23                     INC   hl   ; inc past NUL
0B45   E3                     EX   (sp),hl   ; put it back	
0B46   C9                     RET      
0B47                TITLESTR:      
0B47   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.0\r\n",0,0,0   
0B5B                INIT:        
0B5B   21 47 0B               LD   hl,titleStr   
0B5E   11 0A 24               LD   de,warmBuf   
0B61   06 14                  LD   b,20   
0B63                INIT1:       
0B63   1A                     LD   a,(de)   
0B64   BE                     CP   (hl)   
0B65   20 17                  JR   nz,coldBoot0   
0B67   13                     INC   de   
0B68   23                     INC   hl   
0B69   10 F8                  DJNZ   init1   
0B6B                WARMINIT:      
0B6B   ED 4B F6 23            LD   bc,(vSavedIP)   ; restore IP
0B6F   ED 7B F8 23            LD   sp,(vSavedSP)   ; restore SP
0B73   DD 2A FA 23            LD   ix,(vSavedNext)   ; restore Next
0B77   FD 2A FC 23            LD   iy,(vSavedBP)   ; restore BP
0B7B   C3 B5 0B               JP   start1   
0B7E                COLDBOOT0:      
0B7E   21 47 0B               LD   hl,titleStr   ; copy titleStr to warmBuf
0B81   11 0A 24               LD   de,warmBuf   
0B84   06 14                  LD   b,20   
0B86   ED B0                  LDIR      
0B88                COLDINIT:      
0B88   21 80 01               LD   hl,isysVars   
0B8B   11 E6 23               LD   de,sysVars   
0B8E   01 10 00               LD   bc,8 * 2   
0B91   ED B0                  LDIR      
0B93   21 00 23               LD   hl,vars   ; 52 vars LO HI
0B96   06 34                  LD   b,26*2   
0B98   AF                     XOR   a   
0B99                COLDBOOT1:      
0B99   77                     LD   (hl),a   
0B9A   23                     INC   hl   
0B9B   10 FC                  DJNZ   coldBoot1   
0B9D   DD 2A EE 23            LD   ix,(vNext)   
0BA1   FD 21 00 21            LD   iy,STACK   
0BA5   C9                     RET      
0BA6                COLDSTART:      
0BA6   31 00 21               LD   sp,STACK   
0BA9   CD 7E 0B               CALL   coldBoot0   
0BAC   C3 B5 0B               JP   start1   
0BAF                START:       
0BAF   31 00 21               LD   sp,STACK   ; start Monty
0BB2   CD 5B 0B               CALL   init   ; setups
0BB5                START1:      
0BB5   21 0A 24               LD   hl,warmBuf   
0BB8   CD F9 0A               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0BBB                INTERPRET:      
0BBB   CD C8 0A               CALL   flushBuffer   
0BBE   CD 30 0B               CALL   prompt   
0BC1   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0BC4   21 00 21               LD   hl,TIB   
0BC7   22 EA 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0BCA                INTERPRET2:      ; calculate nesting
0BCA   1E 00                  LD   e,0   ; initilize nesting value
0BCC   C5                     PUSH   bc   ; save offset into TIB,
0BCD                             ; bc is also the count of chars in TIB
0BCD   21 00 21               LD   hl,TIB   ; hl is start of TIB
0BD0   18 0B                  JR   interpret4   
0BD2                INTERPRET3:      
0BD2   3E 33                  LD   a,"3"   
0BD4   CD 85 00               CALL   putchar   
0BD7   7E                     LD   a,(hl)   ; a = char in TIB
0BD8   23                     INC   hl   ; inc pointer into TIB
0BD9   0B                     DEC   bc   ; dec count of chars in TIB
0BDA   CD FE 0A               CALL   nesting   ; update nesting value
0BDD                INTERPRET4:      
0BDD   79                     LD   a,c   ; is count zero?
0BDE   B0                     OR   b   
0BDF   20 F1                  JR   nz,interpret3   ; if not loop
0BE1   C1                     POP   bc   ; restore offset into TIB
0BE2                INTERPRET5:      
0BE2   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0BE5   FE 20                  CP   $20   ; compare to space
0BE7   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0BE9   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0BEB                             ; ???? NEEDED?
0BEB   28 3B                  JR   z,interpret8   
0BED   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0BEF   28 24                  JR   z,interpret7   ; if anything else its macro/control
0BF1   FE 05                  CP   CTRL_E   
0BF3   CA 86 0C               JP   z,edit_   
0BF6   FE 08                  CP   CTRL_H   
0BF8   CA 76 0C               JP   z,backSpace_   
0BFB   FE 0A                  CP   CTRL_J   
0BFD   CA 9E 0C               JP   z,reEdit_   
0C00   FE 13                  CP   CTRL_S   
0C02   CA A1 0C               JP   z,printStack_   
0C05                             ; DB     lsb(edit_)       ; ENQ ^E  5
0C05                             ; DB     lsb(reedit_)     ; LF  ^J 10
0C05                             ; DB     lsb(list_)       ; FF  ^L 12
0C05                             ; DB     lsb(printStack_) ; DLE ^P 16
0C05                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0C05                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0C05                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0C05                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0C05                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0C05                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0C05                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0C05                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0C05                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0C05                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0C05                INTERPRET5A:      
0C05                             ; ld (vTIBPtr),bc
0C05                             ; ld bc,(vTIBPtr)
0C05   18 C3                  JR   interpret2   
0C07                INTERPRET6:      
0C07   21 00 21               LD   hl,TIB   
0C0A   09                     ADD   hl,bc   
0C0B   77                     LD   (hl),a   ; store the character in textbuf
0C0C   03                     INC   bc   
0C0D   CD 85 00               CALL   putchar   ; echo character to screen
0C10   CD FE 0A               CALL   nesting   
0C13   18 CD                  JR   interpret5   ; wait for next character
0C15                INTERPRET7:      
0C15   21 00 21               LD   hl,TIB   
0C18   09                     ADD   hl,bc   
0C19   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0C1B   23                     INC   hl   
0C1C   36 0A                  LD   (hl),"\n"   
0C1E   23                     INC   hl   
0C1F   03                     INC   bc   
0C20   03                     INC   bc   
0C21   CD 39 0B               CALL   crlf   ; echo character to screen
0C24   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0C25   B7                     OR   a   
0C26   20 BA                  JR   nz,interpret5   
0C28                INTERPRET8:      
0C28   21 00 21               LD   hl,TIB   
0C2B   09                     ADD   hl,bc   
0C2C   22 EA 23               LD   (vTIBPtr),hl   
0C2F   01 00 21               LD   bc,TIB   
0C32   ED 43 F6 23            LD   (vSavedIP),bc   ; save IP
0C36   ED 73 F8 23            LD   (vSavedSP),sp   ; save SP
0C3A   DD 22 FA 23            LD   (vSavedNext),ix   ; save Next
0C3E   FD 22 FC 23            LD   (vSavedBP),iy   ; save BP
0C42   0B                     DEC   bc   
0C43                NEXT:        
0C43   03                     INC   bc   ; Increment the IP
0C44   0A                     LD   a,(bc)   ; Get the next character and dispatch
0C45   FE 20                  CP   " "   ; whitespace?
0C47   28 FA                  JR   z,next   ; space? ignore
0C49   38 09                  JR   c,next1   
0C4B   D6 20                  SUB   " "   
0C4D   6F                     LD   l,a   ; index into table
0C4E   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0C50   6E                     LD   l,(hl)   ; get low jump address
0C51   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0C53   E9                     JP   (hl)   ; Jump to routine
0C54                NEXT1:       
0C54   FE 00                  CP   NUL   ; end of input string?
0C56   28 03                  JR   z,exit   
0C58   C3 BB 0B               JP   interpret   ; no, other whitespace, macros?
0C5B                EXIT:        
0C5B   03                     INC   bc   
0C5C   60 69                  LD   hl,bc   
0C5E   E9                     JP   (hl)   
0C5F                RUN:         
0C5F   C1                     POP   bc   
0C60   0B                     DEC   bc   
0C61   DD E9                  JP   (ix)   
0C63                ERROR:       
0C63   CD 5F 0C               CALL   run   
0C66   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQUOTE,"Error ",DQUOTE,".s .",0   
0C73   C3 BB 0B               JP   interpret   
0C76                BACKSPACE_:      
0C76   79                     LD   a,c   
0C77   B0                     OR   b   
0C78   CA CA 0B               JP   z,interpret2   
0C7B   0B                     DEC   bc   
0C7C   CD 40 0B               CALL   printStr   
0C7F   08 20 08 00            .CSTR   "\b \b"   
0C83   C3 CA 0B               JP   interpret2   
0C86                             ; edit
0C86                EDIT_:       
0C86   CD 5F 0C               CALL   run   
0C89   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0C9B   C3 BB 0B               JP   interpret   
0C9E                REEDIT_:      
0C9E   C3 BB 0B               JP   interpret   
0CA1                PRINTSTACK_:      
0CA1   CD 5F 0C               CALL   run   
0CA4   2F 70 6B 00            .CSTR   "/pk"   
0CA8   C3 BB 0B               JP   interpret   
0CAB                             ; editDef:
0CAB                             ;     pop hl                      ; pop ret address
0CAB                             ;     ex (sp),hl                  ; swap with TOS
0CAB                             ;     push hl                     ; dup TOS
0CAB                             ;     ld a,l                      ; a = ident
0CAB                             ;     ld de,TIB                   ; de = start of TIB
0CAB                             ;     ld (vTIBPtr),de             ; update TIB*
0CAB                             ;     push ix                     ; save NEXT
0CAB                             ;     ld ix,editDef0              ; NEXT = editDef0
0CAB                             ;     jp lookupRef                ; convert letter into address
0CAB                             ; editDef0:
0CAB                             ;     ld e,(hl)                   ; de = (hl++)
0CAB                             ;     inc hl
0CAB                             ;     ld d,(hl)
0CAB                             ;     ld a,d                      ; de == 0 ?
0CAB                             ;     or e
0CAB                             ;     jr z,editDef4
0CAB                             ;     ld ix,editDef3              ; NEXT = editDef3
0CAB                             ;     ex de,hl
0CAB                             ;     ld a,(hl)
0CAB                             ;     cp "{"
0CAB                             ;     jr nz,editDef1
0CAB                             ;     jp editBlock0               ; convert letter into address
0CAB                             ; editDef1:
0CAB                             ;     cp "("
0CAB                             ;     jr nz,editDef2
0CAB                             ;     jp editBlock0               ; convert letter into address
0CAB                             ; editDef2:
0CAB                             ;     jp editLambda
0CAB                             ; editDef3:
0CAB                             ;     ld a," "                    ; write assign
0CAB                             ;     call writeChar
0CAB                             ;     pop hl                      ; a = ident
0CAB                             ;     ld a,l
0CAB                             ;     call writeChar
0CAB                             ;     ld a,"="                    ; write assign
0CAB                             ;     call writeChar
0CAB                             ;     ld ix,editDef4              ; NEXT = editDef4
0CAB                             ;     jp printTIB
0CAB                             ; editDef4:
0CAB                             ;     pop ix                      ; restore NEXT
0CAB                             ;     jp (ix)
0CAB                             ; writeChar:
0CAB                             ;     ld de,(vTIBPtr)             ; de = TIB*
0CAB                             ;     ld (de),a                   ; write ident
0CAB                             ;     inc de
0CAB                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0CAB                             ;     ret
0CAB                             ; ; printTIB
0CAB                             ; printTIB:
0CAB                             ;     ld hl,(vTIBPtr)
0CAB                             ;     ld de,TIB
0CAB                             ;     or a
0CAB                             ;     sbc hl,de
0CAB                             ;     jp printTIB2
0CAB                             ; printTIB1:
0CAB                             ;     ld a,(de)
0CAB                             ;     call putchar
0CAB                             ; printTIB2:
0CAB                             ;     ld a,l
0CAB                             ;     or h
0CAB                             ;     jr nz,printTIB1
0CAB                             ;     jp (ix)
0CAB                             ; editBlock:
0CAB                             ;     pop hl                      ; hl = block*
0CAB                             ; editBlock0:
0CAB                             ;     push ix                     ; save next
0CAB                             ;     push hl                     ; push block*
0CAB                             ;     push hl                     ; push block*
0CAB                             ;     ld ix,(editBlock2)
0CAB                             ;     jp blockLength
0CAB                             ; editBlock1:
0CAB                             ;     pop hl                      ; bc = length, (sp) = IP
0CAB                             ;     pop de                      ; de = block*
0CAB                             ;     ld a,l
0CAB                             ;     or h
0CAB                             ;     jr z,editBlock2
0CAB                             ;     push bc
0CAB                             ;     ld bc,hl
0CAB                             ;     ex de,hl                    ; hl = block*
0CAB                             ;     ld de,(vTIBPtr)              ; de = TIB*
0CAB                             ;     ldir                        ; copy block to TIB
0CAB                             ;     ld (vTIBPtr),de              ; save TIB*
0CAB                             ;     pop bc
0CAB                             ; editBlock2:
0CAB                             ;     pop ix                      ; restore next
0CAB                             ;     jp (ix)
0CAB                             ; editLambda:
0CAB                             ;     jp (ix)
0CAB                             ; editArray:
0CAB                             ;     jp (ix)
0CAB                             ; editArglist:
0CAB                             ;     jp (ix)
0CAB                             ; ; blockLength
0CAB                             ; ; addr1 -- length
0CAB                             ; blockLength:
0CAB                             ;     pop hl                      ; block*
0CAB                             ;     push hl                     ; save block*
0CAB                             ;     inc hl                      ; skip first char
0CAB                             ;     ld d,1                      ; increase nesting
0CAB                             ; blockLength1:                   ; Skip to end of definition
0CAB                             ;     ld a,(hl)                   ; Get the next character
0CAB                             ;     inc hl                      ; Point to next character
0CAB                             ;     cp " " + 1                  ; ignore whitespace
0CAB                             ;     jr c,blockLength1
0CAB                             ;     cp ")"
0CAB                             ;     jr z,blockLength4
0CAB                             ;     cp "}"
0CAB                             ;     jr z,blockLength4
0CAB                             ;     cp "]"
0CAB                             ;     jr z,blockLength4
0CAB                             ;     cp "("
0CAB                             ;     jr z,blockLength2
0CAB                             ;     cp "{"
0CAB                             ;     jr z,blockLength2
0CAB                             ;     cp "["
0CAB                             ;     jr z,blockLength2
0CAB                             ;     cp "'"
0CAB                             ;     jr z,blockLength3
0CAB                             ;     cp "`"
0CAB                             ;     jr z,blockLength3
0CAB                             ;     cp DQUOTE
0CAB                             ;     jr z,blockLength3
0CAB                             ;     jr blockLength1
0CAB                             ; blockLength2:
0CAB                             ;     inc d
0CAB                             ;     jr blockLength1
0CAB                             ; blockLength4:
0CAB                             ;     dec d
0CAB                             ;     jr nz, blockLength1         ; get the next element
0CAB                             ; blockLength3:
0CAB                             ;     ld a,$80
0CAB                             ;     xor d
0CAB                             ;     ld d,a
0CAB                             ;     jr nz, blockLength1
0CAB                             ;     pop hl                      ; hl = block*
0CAB                             ;     or a
0CAB                             ;     sbc hl,de
0CAB                             ;     push hl
0CAB                             ;     jp (ix)
0CAB                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0CAB                             ; \a start of stack \#3 depth \b base \$ prompt
0CAB                             ; DW dStack               ; a vS0 start of datastack			
0CAB                             ; DW FALSE                ; b vBase16
0CAB                             ; DW 0                    ; c vTIBPtr an offset to the tib
0CAB                             ; DW 0                    ; d
0CAB                             ; DW 65                   ; e vLastDef "A" last command u defined
0CAB                             ; DW 0                    ; f
0CAB                             ; DW page6                ; g 256 bytes limits
0CAB                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0CAB                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VDATAWIDTH:   DS   2   ; 
23E8                VNUMBASE:   DS   2   ; 
23EA                VTIBPTR:   DS   2   ; 
23EC                VBUFPTR:   DS   2   ; 
23EE                VNEXT:    DS   2   ; 
23F0                VHEAPPTR:   DS   2   ; 
23F2                             ; uninitialised sys variables (preserved)
23F2                VPOINTER:   DS   2   ; 
23F4                VREMAIN:   DS   2   ; 
23F6                VSAVEDIP:   DS   2   ; 
23F8                VSAVEDSP:   DS   2   ; 
23FA                VSAVEDNEXT:   DS   2   ; 
23FC                VSAVEDBP:   DS   2   ; 
23FE                VCHECKSUM:   DS   2   ; 
2400                             ; uninitialised sys variables (unpreserved)
2400                VTEMP1:   DS   2   ; 
2402                VTEMP2:   DS   2   ; 
2404                VLASTDEF:   DS   2   ; 
2406                VHASHSTR:   DS   2   ; 
2408                TBPTR:    DS   2   ; reserved for tests
240A                WARMBUF:   DS   20   
241E                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 46 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 11
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0AB3 DEFINED AT LINE 1697 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 1857 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1669 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1540 IN MAIN.asm
                    > USED AT LINE 1782 IN MAIN.asm
                    > USED AT LINE 1932 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 819 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
                    > USED AT LINE 997 IN MAIN.asm
                    > USED AT LINE 1222 IN MAIN.asm
                    > USED AT LINE 1282 IN MAIN.asm
                    > USED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 1486 IN MAIN.asm
                    > USED AT LINE 1499 IN MAIN.asm
                    > USED AT LINE 1525 IN MAIN.asm
                    > USED AT LINE 1604 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 2039 IN MAIN.asm
DQUOTE:             0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 1159 IN MAIN.asm
                    > USED AT LINE 1801 IN MAIN.asm
                    > USED AT LINE 2053 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 1959 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 1963 IN MAIN.asm
TMAGIC:             00AA DEFINED AT LINE 29 IN MAIN.asm
                    > USED AT LINE 419 IN MAIN.asm
TRESERV:            00A0 DEFINED AT LINE 30 IN MAIN.asm
TNUMBER:            00A1 DEFINED AT LINE 31 IN MAIN.asm
TSTRING:            00A2 DEFINED AT LINE 32 IN MAIN.asm
TPOINTER:           00A3 DEFINED AT LINE 33 IN MAIN.asm
TARRAY:             00A4 DEFINED AT LINE 34 IN MAIN.asm
                    > USED AT LINE 416 IN MAIN.asm
TBLOCK:             00A5 DEFINED AT LINE 35 IN MAIN.asm
TLAMBDA:            00A6 DEFINED AT LINE 36 IN MAIN.asm
TARGLST:            00A7 DEFINED AT LINE 37 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 51 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 56 IN MAIN.asm
                    > USED AT LINE 1885 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 66 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 169 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 171 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 173 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 175 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 177 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 179 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 181 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 183 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 185 IN MAIN.asm
LPAREN_:            0318 DEFINED AT LINE 187 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 188 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 190 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 192 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 194 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 196 IN MAIN.asm
UNDERSCORE_:        0327 DEFINED AT LINE 198 IN MAIN.asm
COLON_:             032A DEFINED AT LINE 200 IN MAIN.asm
UPCASE_:            032D DEFINED AT LINE 202 IN MAIN.asm
LOWCASE_:           0330 DEFINED AT LINE 204 IN MAIN.asm
QUESTION_:          0333 DEFINED AT LINE 206 IN MAIN.asm
STAR_:              0336 DEFINED AT LINE 208 IN MAIN.asm
BANG_:              0339 DEFINED AT LINE 210 IN MAIN.asm
NUM_:               033E DEFINED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
HASH_:              0341 DEFINED AT LINE 215 IN MAIN.asm
PIPE_:              0344 DEFINED AT LINE 217 IN MAIN.asm
CARET_:             0347 DEFINED AT LINE 219 IN MAIN.asm
COMMA_:             034A DEFINED AT LINE 221 IN MAIN.asm
DBLQUOTE_:          034D DEFINED AT LINE 223 IN MAIN.asm
MINUS_:             0350 DEFINED AT LINE 225 IN MAIN.asm
EQ_:                0353 DEFINED AT LINE 227 IN MAIN.asm
EQ0:                035D DEFINED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 231 IN MAIN.asm
EQ1:                035E DEFINED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
GT_:                0362 DEFINED AT LINE 240 IN MAIN.asm
LT_:                036D DEFINED AT LINE 248 IN MAIN.asm
LT1:                0376 DEFINED AT LINE 255 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
SLASH_:             037F DEFINED AT LINE 260 IN MAIN.asm
NOP_:               0382 DEFINED AT LINE 262 IN MAIN.asm
RPAREN_:            0384 DEFINED AT LINE 264 IN MAIN.asm
PLUS:               0387 DEFINED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 172 IN MAIN.asm
ADD:                0387 DEFINED AT LINE 271 IN MAIN.asm
ADD1:               0392 DEFINED AT LINE 279 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
ADD3:               0396 DEFINED AT LINE 284 IN MAIN.asm
                    > USED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 1033 IN MAIN.asm
                    > USED AT LINE 1201 IN MAIN.asm
AT:                 0399 DEFINED AT LINE 290 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
ADDR:               0399 DEFINED AT LINE 291 IN MAIN.asm
AMPER:              03A3 DEFINED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 176 IN MAIN.asm
AND:                03A3 DEFINED AT LINE 297 IN MAIN.asm
AND1:               03AA DEFINED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 319 IN MAIN.asm
PIPE:               03AE DEFINED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
OR:                 03AE DEFINED AT LINE 311 IN MAIN.asm
XOR:                03B7 DEFINED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
XOR1:               03B8 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 335 IN MAIN.asm
INVERT:             03C2 DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 1485 IN MAIN.asm
DOLLAR:             03C7 DEFINED AT LINE 340 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
ARG:                03C7 DEFINED AT LINE 341 IN MAIN.asm
ARG0:               03E5 DEFINED AT LINE 362 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
ARG0A:              03EE DEFINED AT LINE 370 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 354 IN MAIN.asm
ARG1:               03F3 DEFINED AT LINE 373 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
ARG1A:              03FB DEFINED AT LINE 380 IN MAIN.asm
                    > USED AT LINE 372 IN MAIN.asm
LBRACK:             03FE DEFINED AT LINE 384 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
ARRAYSTART:         03FE DEFINED AT LINE 385 IN MAIN.asm
RBRACK:             041A DEFINED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
ARRAYEND:           041A DEFINED AT LINE 400 IN MAIN.asm
ARRAYEND1:          043C DEFINED AT LINE 422 IN MAIN.asm
                    > USED AT LINE 438 IN MAIN.asm
ARRAYEND2:          044C DEFINED AT LINE 432 IN MAIN.asm
                    > USED AT LINE 428 IN MAIN.asm
ARRINDEX:           0472 DEFINED AT LINE 461 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
ARRINDEX0:          047A DEFINED AT LINE 467 IN MAIN.asm
ARRINDEX1:          047B DEFINED AT LINE 469 IN MAIN.asm
                    > USED AT LINE 466 IN MAIN.asm
ARRINDEX2:          0487 DEFINED AT LINE 478 IN MAIN.asm
                    > USED AT LINE 475 IN MAIN.asm
ASSIGN:             048A DEFINED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
ASSIGN0:            048C DEFINED AT LINE 486 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
ASSIGNX:            048D DEFINED AT LINE 488 IN MAIN.asm
ASSIGN1:            0499 DEFINED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 493 IN MAIN.asm
COLON:              049B DEFINED AT LINE 503 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
ARGLIST:            049B DEFINED AT LINE 504 IN MAIN.asm
ARGLIST1:           04A5 DEFINED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 532 IN MAIN.asm
ARGLIST1A:          04AD DEFINED AT LINE 517 IN MAIN.asm
                    > USED AT LINE 514 IN MAIN.asm
ARGLIST2:           04B5 DEFINED AT LINE 522 IN MAIN.asm
ARGLIST3:           04BD DEFINED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 528 IN MAIN.asm
ARGLIST4:           04C0 DEFINED AT LINE 533 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
ARGLIST5:           04C6 DEFINED AT LINE 539 IN MAIN.asm
                    > USED AT LINE 537 IN MAIN.asm
LBRACE:             04D2 DEFINED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
BLOCKSTART:         04D2 DEFINED AT LINE 551 IN MAIN.asm
BLOCKSTART1:        04D6 DEFINED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 589 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
BLOCKSTART2:        0502 DEFINED AT LINE 582 IN MAIN.asm
                    > USED AT LINE 569 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
BLOCKSTART3:        0505 DEFINED AT LINE 585 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
                    > USED AT LINE 580 IN MAIN.asm
BLOCKSTART4:        050D DEFINED AT LINE 591 IN MAIN.asm
                    > USED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
BLOCKSTART5:        0510 DEFINED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 590 IN MAIN.asm
BLOCKSTART6:        0538 DEFINED AT LINE 613 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
RBRACE:             053B DEFINED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
BLOCKEND:           053B DEFINED AT LINE 618 IN MAIN.asm
                    > USED AT LINE 1429 IN MAIN.asm
BLOCKEND1:          056D DEFINED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 633 IN MAIN.asm
BLOCKEND2:          0579 DEFINED AT LINE 647 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
BLOCKEND3:          058B DEFINED AT LINE 661 IN MAIN.asm
                    > USED AT LINE 653 IN MAIN.asm
TICK:               0597 DEFINED AT LINE 668 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
CHAR:               0597 DEFINED AT LINE 669 IN MAIN.asm
CHAR1:              059A DEFINED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 682 IN MAIN.asm
CHAR2:              05A6 DEFINED AT LINE 680 IN MAIN.asm
                    > USED AT LINE 677 IN MAIN.asm
CHAR3:              05A9 DEFINED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 675 IN MAIN.asm
BACKSLASH:          05AC DEFINED AT LINE 687 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
COMMA:              05AE DEFINED AT LINE 692 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
DISCARD:            05AE DEFINED AT LINE 693 IN MAIN.asm
DISCARD1:           05BB DEFINED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 700 IN MAIN.asm
SLASH:              05BD DEFINED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
DIV:                05F3 DEFINED AT LINE 742 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
DOT:                0604 DEFINED AT LINE 753 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
DIVIDE:             0616 DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
DIVIDE1:            061B DEFINED AT LINE 772 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
DIVIDE2:            0628 DEFINED AT LINE 780 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
DIVIDE3:            0629 DEFINED AT LINE 782 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
EQUALS:             062F DEFINED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
LESSTHANEQ:         0637 DEFINED AT LINE 798 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN:           063C DEFINED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
LESSTHAN1:          0641 DEFINED AT LINE 810 IN MAIN.asm
                    > USED AT LINE 801 IN MAIN.asm
TRUE1:              0644 DEFINED AT LINE 813 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
NULL1:              064A DEFINED AT LINE 817 IN MAIN.asm
FALSE1:             064A DEFINED AT LINE 818 IN MAIN.asm
                    > USED AT LINE 718 IN MAIN.asm
                    > USED AT LINE 794 IN MAIN.asm
                    > USED AT LINE 808 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
CARET:              0650 DEFINED AT LINE 826 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
GO:                 0650 DEFINED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 1288 IN MAIN.asm
                    > USED AT LINE 1524 IN MAIN.asm
GO1:                0651 DEFINED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 1009 IN MAIN.asm
                    > USED AT LINE 1011 IN MAIN.asm
GO2:                0657 DEFINED AT LINE 834 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
GOBLOCK:            0663 DEFINED AT LINE 842 IN MAIN.asm
GOBLOCK1:           0663 DEFINED AT LINE 843 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
GOBLOCK2:           0688 DEFINED AT LINE 860 IN MAIN.asm
                    > USED AT LINE 946 IN MAIN.asm
GOLAMBDA:           0696 DEFINED AT LINE 869 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
GOLAMBDA1:          06B3 DEFINED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
GOLAMBDA2:          06B9 DEFINED AT LINE 899 IN MAIN.asm
                    > USED AT LINE 891 IN MAIN.asm
GOLAMBDA3:          06C4 DEFINED AT LINE 905 IN MAIN.asm
                    > USED AT LINE 877 IN MAIN.asm
GOLAMBDA4:          06DC DEFINED AT LINE 922 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
GOLAMBDA5:          06E0 DEFINED AT LINE 926 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
GOLAMBDA6:          06E3 DEFINED AT LINE 930 IN MAIN.asm
                    > USED AT LINE 925 IN MAIN.asm
GOLAMBDA7:          06E6 DEFINED AT LINE 933 IN MAIN.asm
GOLAMBDA8:          06EB DEFINED AT LINE 939 IN MAIN.asm
                    > USED AT LINE 854 IN MAIN.asm
                    > USED AT LINE 921 IN MAIN.asm
HASH:               06F6 DEFINED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
HEXNUM:             06F6 DEFINED AT LINE 949 IN MAIN.asm
HEXNUM1:            06F9 DEFINED AT LINE 951 IN MAIN.asm
                    > USED AT LINE 968 IN MAIN.asm
HEXNUM2:            0701 DEFINED AT LINE 957 IN MAIN.asm
                    > USED AT LINE 955 IN MAIN.asm
UPCASE:             0713 DEFINED AT LINE 969 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
LOWCASE:            0718 DEFINED AT LINE 973 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
IDENT1:             071D DEFINED AT LINE 977 IN MAIN.asm
                    > USED AT LINE 972 IN MAIN.asm
QUESTION:           072A DEFINED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
IF:                 072A DEFINED AT LINE 991 IN MAIN.asm
IFTE:               0736 DEFINED AT LINE 1001 IN MAIN.asm
                    > USED AT LINE 995 IN MAIN.asm
IFTE1:              0737 DEFINED AT LINE 1003 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
STAR:               0743 DEFINED AT LINE 1013 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
MUL:                0743 DEFINED AT LINE 1014 IN MAIN.asm
MUL2:               0745 DEFINED AT LINE 1017 IN MAIN.asm
MUL3:               074D DEFINED AT LINE 1022 IN MAIN.asm
                    > USED AT LINE 1031 IN MAIN.asm
NUM:                075F DEFINED AT LINE 1035 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
NUM0:               0768 DEFINED AT LINE 1041 IN MAIN.asm
                    > USED AT LINE 1039 IN MAIN.asm
NUM1:               0769 DEFINED AT LINE 1043 IN MAIN.asm
                    > USED AT LINE 1060 IN MAIN.asm
NUM2:               0781 DEFINED AT LINE 1061 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
                    > USED AT LINE 1046 IN MAIN.asm
                    > USED AT LINE 1048 IN MAIN.asm
NUM3:               078C DEFINED AT LINE 1069 IN MAIN.asm
                    > USED AT LINE 1064 IN MAIN.asm
UNDERSCORE:         078F DEFINED AT LINE 1073 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
REMAIN:             078F DEFINED AT LINE 1074 IN MAIN.asm
RPAREN:             0795 DEFINED AT LINE 1079 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
SEMICOLON:          079D DEFINED AT LINE 1085 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
SHIFTLEFT:          07B9 DEFINED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
SHIFTLEFT1:         07C1 DEFINED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 1119 IN MAIN.asm
SHIFTLEFT2:         07C2 DEFINED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
SHIFTRIGHT:         07C9 DEFINED AT LINE 1126 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
SHIFTRIGHT1:        07D1 DEFINED AT LINE 1133 IN MAIN.asm
                    > USED AT LINE 1137 IN MAIN.asm
SHIFTRIGHT2:        07D5 DEFINED AT LINE 1136 IN MAIN.asm
                    > USED AT LINE 1132 IN MAIN.asm
DBLQUOTE:           07DC DEFINED AT LINE 1145 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
STRING:             07DC DEFINED AT LINE 1146 IN MAIN.asm
STRING1:            07E5 DEFINED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 1162 IN MAIN.asm
STRING2:            07E8 DEFINED AT LINE 1157 IN MAIN.asm
                    > USED AT LINE 1152 IN MAIN.asm
STRING3:            07F1 DEFINED AT LINE 1163 IN MAIN.asm
                    > USED AT LINE 1160 IN MAIN.asm
MINUS:              0804 DEFINED AT LINE 1180 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
SUB:                0810 DEFINED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 1185 IN MAIN.asm
SUB1:               081A DEFINED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 1191 IN MAIN.asm
ERROR1:             0823 DEFINED AT LINE 1203 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 1283 IN MAIN.asm
                    > USED AT LINE 1487 IN MAIN.asm
                    > USED AT LINE 1500 IN MAIN.asm
                    > USED AT LINE 1605 IN MAIN.asm
COMMENT:            082A DEFINED AT LINE 1208 IN MAIN.asm
                    > USED AT LINE 708 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
COMMAND_A:          0833 DEFINED AT LINE 1216 IN MAIN.asm
                    > USED AT LINE 710 IN MAIN.asm
ABSOLUTE:           083F DEFINED AT LINE 1227 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
ADDROF:             084C DEFINED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 1221 IN MAIN.asm
ADDROF1:            0860 DEFINED AT LINE 1254 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
ADDROF2:            086B DEFINED AT LINE 1263 IN MAIN.asm
                    > USED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 1253 IN MAIN.asm
COMMAND_B:          086D DEFINED AT LINE 1266 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
BUFFERARRAY:        0888 DEFINED AT LINE 1287 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
BUFFERNUMBER:       08BC DEFINED AT LINE 1296 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 1273 IN MAIN.asm
BUFFERDEC:          08C3 DEFINED AT LINE 1303 IN MAIN.asm
BUFFERDEC0:         08DD DEFINED AT LINE 1320 IN MAIN.asm
                    > USED AT LINE 1307 IN MAIN.asm
BUFFERDEC1:         08ED DEFINED AT LINE 1334 IN MAIN.asm
                    > USED AT LINE 1322 IN MAIN.asm
BUFFERDEC2:         090D DEFINED AT LINE 1348 IN MAIN.asm
                    > USED AT LINE 1337 IN MAIN.asm
                    > USED AT LINE 1339 IN MAIN.asm
                    > USED AT LINE 1341 IN MAIN.asm
                    > USED AT LINE 1343 IN MAIN.asm
                    > USED AT LINE 1346 IN MAIN.asm
BUFFERDEC3:         090F DEFINED AT LINE 1350 IN MAIN.asm
                    > USED AT LINE 1353 IN MAIN.asm
BUFFERDEC4:         091F DEFINED AT LINE 1362 IN MAIN.asm
                    > USED AT LINE 1357 IN MAIN.asm
BUFFERDEC5:         0920 DEFINED AT LINE 1364 IN MAIN.asm
                    > USED AT LINE 1361 IN MAIN.asm
BUFFERHEX:          0929 DEFINED AT LINE 1375 IN MAIN.asm
                    > USED AT LINE 1299 IN MAIN.asm
BUFFERHEX1:         094A DEFINED AT LINE 1393 IN MAIN.asm
                    > USED AT LINE 1383 IN MAIN.asm
                    > USED AT LINE 1385 IN MAIN.asm
BUFFERHEX2:         0953 DEFINED AT LINE 1401 IN MAIN.asm
                    > USED AT LINE 1399 IN MAIN.asm
BREAK:              0961 DEFINED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
BREAK1:             0968 DEFINED AT LINE 1420 IN MAIN.asm
                    > USED AT LINE 1418 IN MAIN.asm
BUFFERSTRING:       097B DEFINED AT LINE 1433 IN MAIN.asm
                    > USED AT LINE 760 IN MAIN.asm
                    > USED AT LINE 1277 IN MAIN.asm
BUFFERSTRING0:      0982 DEFINED AT LINE 1437 IN MAIN.asm
                    > USED AT LINE 1445 IN MAIN.asm
BUFFERSTRING1:      0988 DEFINED AT LINE 1442 IN MAIN.asm
                    > USED AT LINE 1436 IN MAIN.asm
BUFFERCHAR:         0995 DEFINED AT LINE 1452 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 1271 IN MAIN.asm
BUFFERXCHARS:       099A DEFINED AT LINE 1458 IN MAIN.asm
                    > USED AT LINE 762 IN MAIN.asm
                    > USED AT LINE 1279 IN MAIN.asm
BUFFERXCHARS0:      099B DEFINED AT LINE 1460 IN MAIN.asm
                    > USED AT LINE 1454 IN MAIN.asm
BUFFERXCHARS1:      09A4 DEFINED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 1476 IN MAIN.asm
BUFFERXCHARS2:      09AC DEFINED AT LINE 1473 IN MAIN.asm
                    > USED AT LINE 1465 IN MAIN.asm
COMMAND_I:          09B6 DEFINED AT LINE 1480 IN MAIN.asm
                    > USED AT LINE 722 IN MAIN.asm
COMMAND_P:          09C2 DEFINED AT LINE 1489 IN MAIN.asm
                    > USED AT LINE 730 IN MAIN.asm
PARTIAL:            09D4 DEFINED AT LINE 1504 IN MAIN.asm
                    > USED AT LINE 1492 IN MAIN.asm
PRINTBUFFER:        09F4 DEFINED AT LINE 1523 IN MAIN.asm
                    > USED AT LINE 1494 IN MAIN.asm
PRINTCHARS:         0A17 DEFINED AT LINE 1532 IN MAIN.asm
                    > USED AT LINE 1496 IN MAIN.asm
PRINTCHARS1:        0A1E DEFINED AT LINE 1538 IN MAIN.asm
                    > USED AT LINE 1547 IN MAIN.asm
PRINTCHARS2:        0A24 DEFINED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 1535 IN MAIN.asm
                    > USED AT LINE 1747 IN MAIN.asm
PRINTSTACK:         0A29 DEFINED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 1498 IN MAIN.asm
SIZE:               0A2B DEFINED AT LINE 1581 IN MAIN.asm
                    > USED AT LINE 732 IN MAIN.asm
COMMAND_V:          0A35 DEFINED AT LINE 1592 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
CONSTBUFSTART:      0A4A DEFINED AT LINE 1607 IN MAIN.asm
                    > USED AT LINE 1601 IN MAIN.asm
CONSTHEAPSTART:     0A4F DEFINED AT LINE 1611 IN MAIN.asm
CONSTTIBSTART:      0A54 DEFINED AT LINE 1615 IN MAIN.asm
                    > USED AT LINE 1603 IN MAIN.asm
VARBUFPTR:          0A59 DEFINED AT LINE 1619 IN MAIN.asm
                    > USED AT LINE 1595 IN MAIN.asm
VARHEAPPTR:         0A62 DEFINED AT LINE 1624 IN MAIN.asm
                    > USED AT LINE 1597 IN MAIN.asm
VARTIBPTR:          0A6B DEFINED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1599 IN MAIN.asm
VARIABLE:           0A74 DEFINED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 294 IN MAIN.asm
                    > USED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1632 IN MAIN.asm
CONSTANT:           0A77 DEFINED AT LINE 1636 IN MAIN.asm
                    > USED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 1613 IN MAIN.asm
                    > USED AT LINE 1617 IN MAIN.asm
CHARS:              0A7A DEFINED AT LINE 1641 IN MAIN.asm
                    > USED AT LINE 714 IN MAIN.asm
CHARS1:             0A7D DEFINED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 1688 IN MAIN.asm
DECIMAL:            0A82 DEFINED AT LINE 1647 IN MAIN.asm
                    > USED AT LINE 716 IN MAIN.asm
DECIMAL1:           0A85 DEFINED AT LINE 1649 IN MAIN.asm
                    > USED AT LINE 1654 IN MAIN.asm
HEXADECIMAL:        0A8A DEFINED AT LINE 1652 IN MAIN.asm
                    > USED AT LINE 720 IN MAIN.asm
INPUT:              0A90 DEFINED AT LINE 1658 IN MAIN.asm
                    > USED AT LINE 1483 IN MAIN.asm
KEY:                0A9B DEFINED AT LINE 1668 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
OUTPUT:             0AA4 DEFINED AT LINE 1677 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
NUMBERS:            0AAD DEFINED AT LINE 1686 IN MAIN.asm
                    > USED AT LINE 726 IN MAIN.asm
FILTER:             0AB3 DEFINED AT LINE 1695 IN MAIN.asm
MAP:                0AB3 DEFINED AT LINE 1696 IN MAIN.asm
ARGS0A1L_:          0AB5 DEFINED AT LINE 1703 IN MAIN.asm
ARGS0A1L:           0AB7 DEFINED AT LINE 1706 IN MAIN.asm
ARGS1A0L_:          0AB8 DEFINED AT LINE 1709 IN MAIN.asm
ARGS1A0L:           0ABA DEFINED AT LINE 1712 IN MAIN.asm
                    > USED AT LINE 1527 IN MAIN.asm
ARGS1A1L_:          0ABB DEFINED AT LINE 1715 IN MAIN.asm
ARGS1A1L:           0ABD DEFINED AT LINE 1718 IN MAIN.asm
ARGS2A0L_:          0ABF DEFINED AT LINE 1721 IN MAIN.asm
ARGS2A0L:           0AC1 DEFINED AT LINE 1724 IN MAIN.asm
ARGS1A2L_:          0AC3 DEFINED AT LINE 1727 IN MAIN.asm
ARGS1A2L:           0AC5 DEFINED AT LINE 1730 IN MAIN.asm
                    > USED AT LINE 1291 IN MAIN.asm
FLUSHBUFFER:        0AC8 DEFINED AT LINE 1738 IN MAIN.asm
                    > USED AT LINE 1312 IN MAIN.asm
                    > USED AT LINE 1369 IN MAIN.asm
                    > USED AT LINE 1381 IN MAIN.asm
                    > USED AT LINE 1389 IN MAIN.asm
                    > USED AT LINE 1409 IN MAIN.asm
                    > USED AT LINE 1440 IN MAIN.asm
                    > USED AT LINE 1471 IN MAIN.asm
                    > USED AT LINE 1915 IN MAIN.asm
JUMPTABLE:          0ADF DEFINED AT LINE 1757 IN MAIN.asm
                    > USED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 1481 IN MAIN.asm
                    > USED AT LINE 1490 IN MAIN.asm
                    > USED AT LINE 1593 IN MAIN.asm
JUMPTABLE0:         0AE1 DEFINED AT LINE 1760 IN MAIN.asm
                    > USED AT LINE 1770 IN MAIN.asm
JUMPTABLE1:         0AEE DEFINED AT LINE 1771 IN MAIN.asm
                    > USED AT LINE 1763 IN MAIN.asm
JUMPTABLE2:         0AEF DEFINED AT LINE 1773 IN MAIN.asm
                    > USED AT LINE 1766 IN MAIN.asm
PRTSTR0:            0AF5 DEFINED AT LINE 1781 IN MAIN.asm
                    > USED AT LINE 1787 IN MAIN.asm
PRTSTR:             0AF9 DEFINED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 1851 IN MAIN.asm
                    > USED AT LINE 1911 IN MAIN.asm
NESTING:            0AFE DEFINED AT LINE 1800 IN MAIN.asm
                    > USED AT LINE 1937 IN MAIN.asm
                    > USED AT LINE 1995 IN MAIN.asm
NESTING0:           0B08 DEFINED AT LINE 1806 IN MAIN.asm
                    > USED AT LINE 1802 IN MAIN.asm
                    > USED AT LINE 1804 IN MAIN.asm
NESTING1A:          0B0F DEFINED AT LINE 1811 IN MAIN.asm
                    > USED AT LINE 1808 IN MAIN.asm
NESTING1:           0B12 DEFINED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 1805 IN MAIN.asm
NESTING2:           0B21 DEFINED AT LINE 1823 IN MAIN.asm
                    > USED AT LINE 1818 IN MAIN.asm
                    > USED AT LINE 1820 IN MAIN.asm
NESTING3:           0B23 DEFINED AT LINE 1826 IN MAIN.asm
                    > USED AT LINE 1822 IN MAIN.asm
NESTING4:           0B2E DEFINED AT LINE 1833 IN MAIN.asm
                    > USED AT LINE 1828 IN MAIN.asm
                    > USED AT LINE 1830 IN MAIN.asm
PROMPT:             0B30 DEFINED AT LINE 1837 IN MAIN.asm
                    > USED AT LINE 1916 IN MAIN.asm
CRLF:               0B39 DEFINED AT LINE 1842 IN MAIN.asm
                    > USED AT LINE 2008 IN MAIN.asm
PRINTSTR:           0B40 DEFINED AT LINE 1849 IN MAIN.asm
                    > USED AT LINE 1838 IN MAIN.asm
                    > USED AT LINE 1843 IN MAIN.asm
                    > USED AT LINE 2061 IN MAIN.asm
TITLESTR:           0B47 DEFINED AT LINE 1856 IN MAIN.asm
                    > USED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 1879 IN MAIN.asm
INIT:               0B5B DEFINED AT LINE 1859 IN MAIN.asm
                    > USED AT LINE 1908 IN MAIN.asm
INIT1:              0B63 DEFINED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 1869 IN MAIN.asm
WARMINIT:           0B6B DEFINED AT LINE 1871 IN MAIN.asm
COLDBOOT0:          0B7E DEFINED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 1866 IN MAIN.asm
                    > USED AT LINE 1904 IN MAIN.asm
COLDINIT:           0B88 DEFINED AT LINE 1884 IN MAIN.asm
COLDBOOT1:          0B99 DEFINED AT LINE 1893 IN MAIN.asm
                    > USED AT LINE 1896 IN MAIN.asm
COLDSTART:          0BA6 DEFINED AT LINE 1902 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
START:              0BAF DEFINED AT LINE 1906 IN MAIN.asm
                    > USED AT LINE 7
START1:             0BB5 DEFINED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 1905 IN MAIN.asm
INTERPRET:          0BBB DEFINED AT LINE 1913 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
                    > USED AT LINE 2072 IN MAIN.asm
                    > USED AT LINE 2077 IN MAIN.asm
INTERPRET2:         0BCA DEFINED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 1986 IN MAIN.asm
                    > USED AT LINE 2059 IN MAIN.asm
                    > USED AT LINE 2063 IN MAIN.asm
INTERPRET3:         0BD2 DEFINED AT LINE 1930 IN MAIN.asm
                    > USED AT LINE 1943 IN MAIN.asm
INTERPRET4:         0BDD DEFINED AT LINE 1939 IN MAIN.asm
                    > USED AT LINE 1928 IN MAIN.asm
INTERPRET5:         0BE2 DEFINED AT LINE 1946 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
INTERPRET5A:        0C05 DEFINED AT LINE 1983 IN MAIN.asm
INTERPRET6:         0C07 DEFINED AT LINE 1988 IN MAIN.asm
                    > USED AT LINE 1950 IN MAIN.asm
INTERPRET7:         0C15 DEFINED AT LINE 1998 IN MAIN.asm
                    > USED AT LINE 1955 IN MAIN.asm
INTERPRET8:         0C28 DEFINED AT LINE 2013 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
NEXT:               0C43 DEFINED AT LINE 2026 IN MAIN.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
NEXT1:              0C54 DEFINED AT LINE 2038 IN MAIN.asm
                    > USED AT LINE 2031 IN MAIN.asm
EXIT:               0C5B DEFINED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2040 IN MAIN.asm
RUN:                0C5F DEFINED AT LINE 2046 IN MAIN.asm
                    > USED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2067 IN MAIN.asm
                    > USED AT LINE 2075 IN MAIN.asm
ERROR:              0C63 DEFINED AT LINE 2051 IN MAIN.asm
                    > USED AT LINE 1206 IN MAIN.asm
BACKSPACE_:         0C76 DEFINED AT LINE 2056 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
EDIT_:              0C86 DEFINED AT LINE 2066 IN MAIN.asm
                    > USED AT LINE 1958 IN MAIN.asm
REEDIT_:            0C9E DEFINED AT LINE 2071 IN MAIN.asm
                    > USED AT LINE 1962 IN MAIN.asm
PRINTSTACK_:        0CA1 DEFINED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 1964 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 1903 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 59 IN MAIN.asm
                    > USED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 1919 IN MAIN.asm
                    > USED AT LINE 1927 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
                    > USED AT LINE 2000 IN MAIN.asm
                    > USED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 2018 IN MAIN.asm
BUF:                2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 60 IN MAIN.asm
                    > USED AT LINE 1608 IN MAIN.asm
                    > USED AT LINE 1743 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1890 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1886 IN MAIN.asm
VDATAWIDTH:         23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 426 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 491 IN MAIN.asm
                    > USED AT LINE 1644 IN MAIN.asm
VNUMBASE:           23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1297 IN MAIN.asm
                    > USED AT LINE 1650 IN MAIN.asm
VTIBPTR:            23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1630 IN MAIN.asm
                    > USED AT LINE 1631 IN MAIN.asm
                    > USED AT LINE 1920 IN MAIN.asm
                    > USED AT LINE 2017 IN MAIN.asm
VBUFPTR:            23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1304 IN MAIN.asm
                    > USED AT LINE 1313 IN MAIN.asm
                    > USED AT LINE 1314 IN MAIN.asm
                    > USED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 1390 IN MAIN.asm
                    > USED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 1446 IN MAIN.asm
                    > USED AT LINE 1447 IN MAIN.asm
                    > USED AT LINE 1464 IN MAIN.asm
                    > USED AT LINE 1477 IN MAIN.asm
                    > USED AT LINE 1620 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
                    > USED AT LINE 1742 IN MAIN.asm
                    > USED AT LINE 1744 IN MAIN.asm
VNEXT:              23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 1898 IN MAIN.asm
VHEAPPTR:           23F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 410 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
                    > USED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1102 IN MAIN.asm
                    > USED AT LINE 1104 IN MAIN.asm
                    > USED AT LINE 1147 IN MAIN.asm
                    > USED AT LINE 1167 IN MAIN.asm
                    > USED AT LINE 1506 IN MAIN.asm
                    > USED AT LINE 1511 IN MAIN.asm
                    > USED AT LINE 1512 IN MAIN.asm
                    > USED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 1626 IN MAIN.asm
VPOINTER:           23F2 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 293 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
                    > USED AT LINE 471 IN MAIN.asm
                    > USED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 981 IN MAIN.asm
                    > USED AT LINE 1635 IN MAIN.asm
VREMAIN:            23F4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 1075 IN MAIN.asm
VSAVEDIP:           23F6 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 1872 IN MAIN.asm
                    > USED AT LINE 2020 IN MAIN.asm
VSAVEDSP:           23F8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1873 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
VSAVEDNEXT:         23FA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 2022 IN MAIN.asm
VSAVEDBP:           23FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 2023 IN MAIN.asm
VCHECKSUM:          23FE DEFINED AT LINE 52 IN ram.asm
VTEMP1:             2400 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 403 IN MAIN.asm
                    > USED AT LINE 455 IN MAIN.asm
                    > USED AT LINE 603 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
                    > USED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 665 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 878 IN MAIN.asm
                    > USED AT LINE 903 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
                    > USED AT LINE 916 IN MAIN.asm
                    > USED AT LINE 1507 IN MAIN.asm
                    > USED AT LINE 1510 IN MAIN.asm
VTEMP2:             2402 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 624 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
                    > USED AT LINE 879 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
VLASTDEF:           2404 DEFINED AT LINE 58 IN ram.asm
VHASHSTR:           2406 DEFINED AT LINE 59 IN ram.asm
TBPTR:              2408 DEFINED AT LINE 60 IN ram.asm
WARMBUF:            240A DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 1861 IN MAIN.asm
                    > USED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
HEAP:               241E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 1612 IN MAIN.asm
