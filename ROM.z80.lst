0000                             ; .engine mycomputer
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 82 18               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 84 18               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 86 18               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 88 18               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 8A 18               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 8C 18               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 90 18               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 92 18               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 94 18               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 96 18               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 82 18               LD   (RST08),HL   
0094   22 84 18               LD   (RST10),HL   
0097   22 86 18               LD   (RST18),HL   
009A   22 88 18               LD   (RST20),HL   
009D   22 8A 18               LD   (RST28),HL   
00A0   22 8C 18               LD   (RST30),HL   
00A3   22 90 18               LD   (INTVEC),HL   
00A6   22 92 18               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 94 18               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 96 18               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD 10 09               CALL   init   
00C9   C3 33 09               JP   start   
00CC                             ; 
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; literal number
00CC                DC2:      EQU   18   ; enter code
00CC                DC3:      EQU   19   ; enter code (anonymous)
00CC                ESC:      EQU   27   ; escape code
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; ScopeBP                           -- first_args
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d vPointer
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f vHashStr
018C   A0 09                  DW   next   ; g nNext
018E   00 1E                  DW   heap   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available _ @ " % , ; DEL
0220   E5                     DB   lsb(nop_)   ; SP
0221   9A                     DB   lsb(not_)   ; !
0222   E5                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   E5                     DB   lsb(nop_)   ; %
0226   54                     DB   lsb(and_)   ; &
0227   09                     DB   lsb(string_)   ; '
0228   0C                     DB   lsb(arg_list_)   ; (
0229   E5                     DB   lsb(nop_)   ; )
022A   83                     DB   lsb(mul_)   ; *
022B   76                     DB   lsb(add_)   ; +
022C   E5                     DB   lsb(nop_)   ; ,
022D   86                     DB   lsb(sub_)   ; -
022E   0F                     DB   lsb(dot_)   ; .
022F   C1                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   51                     DB   lsb(symbol_)   ; :
023B   E5                     DB   lsb(nop_)   ; ;
023C   AF                     DB   lsb(lt_)   ; <
023D   9F                     DB   lsb(eq_)   ; =
023E   A4                     DB   lsb(gt_)   ; >
023F   39                     DB   lsb(index_)   ; ?
0240   E5                     DB   lsb(nop_)   ; @
0241   4B                     DB   lsb(identU_)   ; A
0242   4B                     DB   lsb(identU_)   ; B
0243   4B                     DB   lsb(identU_)   ; C
0244   4B                     DB   lsb(identU_)   ; D
0245   4B                     DB   lsb(identU_)   ; E
0246   4B                     DB   lsb(identU_)   ; F
0247   4B                     DB   lsb(identU_)   ; G
0248   4B                     DB   lsb(identU_)   ; h
0249   4B                     DB   lsb(identU_)   ; I
024A   4B                     DB   lsb(identU_)   ; J
024B   4B                     DB   lsb(identU_)   ; K
024C   4B                     DB   lsb(identU_)   ; L
024D   4B                     DB   lsb(identU_)   ; M
024E   4B                     DB   lsb(identU_)   ; N
024F   4B                     DB   lsb(identU_)   ; O
0250   4B                     DB   lsb(identU_)   ; p
0251   4B                     DB   lsb(identU_)   ; Q
0252   4B                     DB   lsb(identU_)   ; R
0253   4B                     DB   lsb(identU_)   ; S
0254   4B                     DB   lsb(identU_)   ; T
0255   4B                     DB   lsb(identU_)   ; U
0256   4B                     DB   lsb(identU_)   ; V
0257   4B                     DB   lsb(identU_)   ; W
0258   4B                     DB   lsb(identU_)   ; X
0259   4B                     DB   lsb(identU_)   ; Y
025A   4B                     DB   lsb(identU_)   ; Z
025B   45                     DB   lsb(array_)   ; [
025C   D0                     DB   lsb(command_)   ; \
025D   48                     DB   lsb(arrayEnd_)   ; ]
025E   68                     DB   lsb(xor_)   ; ^
025F   E5                     DB   lsb(nop_)   ; _
0260   42                     DB   lsb(char_)   ; `    	
0261   4E                     DB   lsb(identL_)   ; a
0262   4E                     DB   lsb(identL_)   ; b
0263   4E                     DB   lsb(identL_)   ; c
0264   4E                     DB   lsb(identL_)   ; d
0265   4E                     DB   lsb(identL_)   ; e
0266   4E                     DB   lsb(identL_)   ; f
0267   4E                     DB   lsb(identL_)   ; g
0268   4E                     DB   lsb(identL_)   ; h
0269   4E                     DB   lsb(identL_)   ; i
026A   4E                     DB   lsb(identL_)   ; j
026B   4E                     DB   lsb(identL_)   ; k
026C   4E                     DB   lsb(identL_)   ; l
026D   4E                     DB   lsb(identL_)   ; m
026E   4E                     DB   lsb(identL_)   ; n
026F   4E                     DB   lsb(identL_)   ; o
0270   4E                     DB   lsb(identL_)   ; p
0271   4E                     DB   lsb(identL_)   ; q
0272   4E                     DB   lsb(identL_)   ; r
0273   4E                     DB   lsb(identL_)   ; s
0274   4E                     DB   lsb(identL_)   ; t
0275   4E                     DB   lsb(identL_)   ; u
0276   4E                     DB   lsb(identL_)   ; v
0277   4E                     DB   lsb(identL_)   ; w
0278   4E                     DB   lsb(identL_)   ; x
0279   4E                     DB   lsb(identL_)   ; y
027A   4E                     DB   lsb(identL_)   ; z
027B   3C                     DB   lsb(block_)   ; {
027C   5F                     DB   lsb(or_)   ; |
027D   3F                     DB   lsb(blockEnd_)   ; }
027E   71                     DB   lsb(inv_)   ; ~
027F   E5                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 26 04               JP   num   
0303                HEXNUM_:      
0303   C3 56 04               JP   hexnum   
0306                ARG_:        
0306   C3 99 08               JP   arg   
0309                STRING_:      
0309   C3 73 04               JP   string   
030C                ARG_LIST_:      
030C   C3 97 04               JP   arg_list   
030F                DOT_:        
030F   E1                     POP   hl   
0310   03                     INC   bc   
0311   0A                     LD   a,(bc)   
0312   FE 68                  CP   "h"   
0314   20 05                  JR   nz,dot1   
0316   CD 60 07               CALL   prthex   
0319   18 17                  JR   dot4   
031B                DOT1:        
031B   FE 73                  CP   "s"   
031D   20 05                  JR   nz,dot2   
031F   CD 83 07               CALL   prtstr   
0322   18 0E                  JR   dot4   
0324                DOT2:        
0324   FE 63                  CP   "c"   
0326   20 06                  JR   nz,dot3   
0328   7D                     LD   a,l   
0329   CD 85 00               CALL   putchar   
032C   18 04                  JR   dot4   
032E                DOT3:        
032E   0B                     DEC   bc   
032F   CD 18 07               CALL   prtdec   
0332                DOT4:        
0332   3E 20                  LD   a," "   
0334   CD 85 00               CALL   putchar   
0337   DD E9                  JP   (ix)   
0339                             ; addr index -- addr2
0339                INDEX_:      
0339   C3 88 05               JP   index   
033C                BLOCK_:      
033C   C3 DE 04               JP   block   
033F                BLOCKEND_:      
033F   C3 1B 05               JP   blockend   
0342                CHAR_:       
0342   C3 C9 04               JP   char   
0345                ARRAY_:      
0345   C3 BF 05               JP   array   
0348                ARRAYEND_:      
0348   C3 DB 05               JP   arrayEnd   
034B                IDENTU_:      
034B   C3 54 06               JP   identU   
034E                IDENTL_:      
034E   C3 59 06               JP   identL   
0351                SYMBOL_:      
0351   C3 52 06               JP   symbol   
0354                AND_:        
0354   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0355   E1                     POP   hl   
0356   7B                     LD   a,e   
0357   A5                     AND   l   
0358   6F                     LD   l,a   
0359   7A                     LD   a,d   
035A   A4                     AND   h   
035B                AND1:        
035B   67                     LD   h,a   
035C   E5                     PUSH   hl   
035D   DD E9                  JP   (ix)   
035F                OR_:         
035F   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0360   E1                     POP   hl   
0361   7B                     LD   a,e   
0362   B5                     OR   l   
0363   6F                     LD   l,a   
0364   7A                     LD   a,d   
0365   B4                     OR   h   
0366   18 F3                  JR   and1   
0368                XOR_:        
0368   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0369                XOR1:        
0369   E1                     POP   hl   
036A   7B                     LD   a,e   
036B   AD                     XOR   l   
036C   6F                     LD   l,a   
036D   7A                     LD   a,d   
036E   AC                     XOR   h   
036F   18 EA                  JR   and1   
0371                INV_:        ; Bitwise INVert the top member of the stack
0371   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0374   18 F3                  JR   xor1   
0376                ADD_:        ; add the top 2 members of the stack
0376   D1                     POP   de   
0377   E1                     POP   hl   
0378   19                     ADD   hl,de   
0379   E5                     PUSH   hl   
037A   DD E9                  JP   (ix)   
037C                HDOT_:       ; print hexadecimal
037C   E1                     POP   hl   
037D   CD 60 07               CALL   prthex   
0380   C3 2E 03               JP   dot3   
0383                MUL_:        
0383   C3 0A 04               JP   mul   
0386                SUB_:        ; negative sign or subtract
0386   03                     INC   bc   ; check if sign of a number
0387   0A                     LD   a,(bc)   
0388   0B                     DEC   bc   
0389   FE 30                  CP   "0"   
038B   38 05                  JR   c,sub1   
038D   FE 3A                  CP   "9"+1   
038F   DA 00 03               JP   c,num_   
0392                SUB1:        ; Subtract the value 2nd on stack from top of stack
0392   D1                     POP   de   
0393   E1                     POP   hl   ; Entry point for INVert
0394                SUB2:        
0394   B7                     OR   a   ; Entry point for NEGate
0395   ED 52                  SBC   hl,de   
0397   E5                     PUSH   hl   
0398   DD E9                  JP   (ix)   
039A                NOT_:        ; logical invert, any non zero value
039A   21 00 00               LD   hl,0   ; is considered true
039D   18 01                  JR   eq1   
039F                EQ_:         
039F   E1                     POP   hl   
03A0                EQ1:         
03A0   D1                     POP   de   
03A1   C3 8E 06               JP   equals   
03A4                GT_:         
03A4   03                     INC   bc   
03A5   0A                     LD   a,(bc)   
03A6   FE 3E                  CP   ">"   
03A8   CA F7 03               JP   z,shiftRight   
03AB   D1                     POP   de   
03AC   E1                     POP   hl   
03AD   18 09                  JR   lt1   
03AF                LT_:         
03AF   03                     INC   bc   
03B0   0A                     LD   a,(bc)   
03B1   FE 3C                  CP   "<"   
03B3   CA E7 03               JP   z,shiftLeft   
03B6   E1                     POP   hl   
03B7   D1                     POP   de   
03B8                LT1:         
03B8   FE 3D                  CP   "="   
03BA   CA 96 06               JP   z,lessthaneq   
03BD   0B                     DEC   bc   
03BE   C3 9B 06               JP   lessthan   
03C1                DIV_:        
03C1   D1                     POP   de   ; get first value
03C2   E1                     POP   hl   ; get 2nd value
03C3   C5                     PUSH   bc   ; preserve the IP
03C4   44 4D                  LD   bc,hl   
03C6   CD D5 06               CALL   divide   
03C9   22 98 18               LD   (vFrac),hl   
03CC   C1                     POP   bc   
03CD   D5                     PUSH   de   ; push result
03CE   DD E9                  JP   (ix)   
03D0                COMMAND_:      
03D0   03                     INC   bc   
03D1   0A                     LD   a,(bc)   
03D2   FE 5C                  CP   $5C   ; \\ comment
03D4   28 06                  JR   z,comment   
03D6   21 01 00               LD   hl,1   ; error 1: unknown command
03D9   C3 DB 09               JP   error   
03DC                COMMENT:      
03DC   03                     INC   bc   ; point to next char
03DD   0A                     LD   a,(bc)   
03DE   FE 20                  CP   " "   ; terminate on any char less than SP
03E0   30 FA                  JR   nc,comment   
03E2   0B                     DEC   bc   
03E3   DD E9                  JP   (ix)   
03E5                NOP_:        
03E5   DD E9                  JP   (ix)   
03E7                             ;*******************************************************************
03E7                             ; word operators
03E7                             ;*******************************************************************
03E7                             ; shiftLeft
03E7                             ; value count -- value2          shift left count places
03E7                SHIFTLEFT:      
03E7   50 59                  LD   de,bc   ; save IP
03E9   C1                     POP   bc   ; bc = count
03EA   41                     LD   b,c   ; b = loop counter
03EB   E1                     POP   hl   
03EC   04                     INC   b   ; test for counter=0 case
03ED   18 01                  JR   shiftLeft2   
03EF                SHIFTLEFT1:      
03EF   29                     ADD   hl,hl   ; left shift hl
03F0                SHIFTLEFT2:      
03F0   10 FD                  DJNZ   shiftLeft1   
03F2   E5                     PUSH   hl   
03F3   42 4B                  LD   bc,de   ; restore IP
03F5   DD E9                  JP   (ix)   
03F7                             ; shiftRight
03F7                             ; value count -- value2          shift left count places
03F7                SHIFTRIGHT:      
03F7   50 59                  LD   de,bc   ; save IP
03F9   C1                     POP   bc   ; bc = count
03FA   41                     LD   b,c   ; b = loop counter
03FB   E1                     POP   hl   
03FC   04                     INC   b   ; test for counter=0 case
03FD   18 04                  JR   shiftRight2   
03FF                SHIFTRIGHT1:      
03FF   CB 3C                  SRL   h   ; right shift hl
0401   CB 1D                  RR   l   
0403                SHIFTRIGHT2:      
0403   10 FA                  DJNZ   shiftRight1   
0405   E5                     PUSH   hl   
0406   42 4B                  LD   bc,de   ; restore IP
0408   DD E9                  JP   (ix)   
040A                MUL:         ;=19
040A   D1                     POP   de   ; get first value
040B   E1                     POP   hl   
040C   C5                     PUSH   bc   ; Preserve the IP
040D   44                     LD   b,h   ; bc = 2nd value
040E   4D                     LD   c,l   
040F   21 00 00               LD   hl,0   
0412   3E 10                  LD   a,16   
0414                MUL2:        
0414   29                     ADD   hl,hl   
0415   CB 13                  RL   e   
0417   CB 12                  RL   d   
0419   30 04                  JR   nc,$+6   
041B   09                     ADD   hl,bc   
041C   30 01                  JR   nc,$+3   
041E   13                     INC   de   
041F   3D                     DEC   a   
0420   20 F2                  JR   nz,mul2   
0422   C1                     POP   bc   ; Restore the IP
0423   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0424   DD E9                  JP   (ix)   
0426                NUM:         
0426   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0429   0A                     LD   a,(bc)   ; Get numeral or -
042A   FE 2D                  CP   "-"   
042C   20 01                  JR   nz,num0   
042E   03                     INC   bc   ; move to next char, no flags affected
042F                NUM0:        
042F   08                     EX   af,af'   ; save zero flag = 0 for later
0430                NUM1:        
0430   0A                     LD   a,(bc)   ; read digit
0431   D6 30                  SUB   "0"   ; less than 0?
0433   38 13                  JR   c,num2   ; not a digit, exit loop
0435   FE 0A                  CP   10   ; greater that 9?
0437   30 0F                  JR   nc,num2   ; not a digit, exit loop
0439   03                     INC   bc   ; inc IP
043A   54 5D                  LD   de,hl   ; multiply hl * 10
043C   29                     ADD   hl,hl   
043D   29                     ADD   hl,hl   
043E   19                     ADD   hl,de   
043F   29                     ADD   hl,hl   
0440   85                     ADD   a,l   ; add digit in a to hl
0441   6F                     LD   l,a   
0442   3E 00                  LD   a,0   
0444   8C                     ADC   a,h   
0445   67                     LD   h,a   
0446   18 E8                  JR   num1   
0448                NUM2:        
0448   0B                     DEC   bc   
0449   08                     EX   af,af'   ; restore zero flag
044A   20 07                  JR   nz,num3   
044C   EB                     EX   de,hl   ; negate the value of hl
044D   21 00 00               LD   hl,0   
0450   B7                     OR   a   ; jump to sub2
0451   ED 52                  SBC   hl,de   
0453                NUM3:        
0453   E5                     PUSH   hl   ; Put the number on the stack
0454   DD E9                  JP   (ix)   ; and process the next character
0456                HEXNUM:      
0456   21 00 00               LD   hl,0   ; Clear hl to accept the number
0459                HEXNUM1:      
0459   03                     INC   bc   
045A   0A                     LD   a,(bc)   ; Get the character which is a numeral
045B   CB 77                  BIT   6,a   ; is it uppercase alpha?
045D   28 02                  JR   z,hexnum2   ; no a decimal
045F   D6 07                  SUB   7   ; sub 7  to make $a - $F
0461                HEXNUM2:      
0461   D6 30                  SUB   $30   ; Form decimal digit
0463   DA 48 04               JP   c,num2   
0466   FE 10                  CP   $0F+1   
0468   D2 48 04               JP   nc,num2   
046B   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
046C   29                     ADD   hl,hl   ; 4X
046D   29                     ADD   hl,hl   ; 8X
046E   29                     ADD   hl,hl   ; 16X
046F   85                     ADD   a,l   ; add into bottom of hl
0470   6F                     LD   l,a   ; 
0471   18 E6                  JR   hexnum1   
0473                             ; string
0473                             ; -- ptr                        ; points to start of string chars,
0473                             ; length is stored at start - 2 bytes
0473                STRING:      
0473   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr
0476   23                     INC   hl   ; skip length field to start
0477   23                     INC   hl   
0478   E5                     PUSH   hl   ; save start of string
0479   03                     INC   bc   ; point to next char
047A   18 03                  JR   string2   
047C                STRING1:      
047C   77                     LD   (hl),a   
047D   23                     INC   hl   ; increase count
047E   03                     INC   bc   ; point to next char
047F                STRING2:      
047F   0A                     LD   a,(bc)   
0480   FE 27                  CP   "'"   ; ' is the string terminator
0482   20 F8                  JR   nz,string1   
0484   AF                     XOR   a   ; write NUL to terminate string
0485   77                     LD   (hl),a   ; hl = end of string
0486   23                     INC   hl   
0487   22 A6 18               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
048A   2B                     DEC   hl   ; hl = end of string without terminator
048B   D1                     POP   de   ; de = start of string
048C   D5                     PUSH   de   ; return start of string
048D   B7                     OR   a   ; hl = length bytes, de = start of string
048E   ED 52                  SBC   hl,de   
0490   EB                     EX   de,hl   
0491   2B                     DEC   hl   ; write length bytes to length field at start - 2
0492   72                     LD   (hl),d   
0493   2B                     DEC   hl   
0494   73                     LD   (hl),e   
0495   DD E9                  JP   (ix)   
0497                             ; arg_list - parses input (ab:c)
0497                             ; names after the : represent uninitialised locals
0497                             ; return values are the state of the stack after the block ends
0497                ARG_LIST:      
0497   11 00 00               LD   de,0   ; d = count locals, e = count args ()
049A   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr
049D   23                     INC   hl   ; skip length field to start
049E   23                     INC   hl   
049F   E5                     PUSH   hl   ; save start of arg_list
04A0   03                     INC   bc   ; point to next char
04A1                ARG_LIST1:      
04A1   0A                     LD   a,(bc)   
04A2   FE 29                  CP   ")"   ; ) is the arg_list terminator
04A4   28 12                  JR   z,arg_list4   
04A6   FE 3A                  CP   ":"   
04A8   20 03                  JR   nz,arg_list2   
04AA   14                     INC   d   ; non zero value local count acts as flag
04AB   20 08                  JR   nz,arg_list3   
04AD                ARG_LIST2:      
04AD   77                     LD   (hl),a   
04AE   23                     INC   hl   
04AF   1C                     INC   e   ; increase arg count
04B0   AF                     XOR   a   
04B1   B2                     OR   d   
04B2   28 01                  JR   z,arg_list3   
04B4   14                     INC   d   ; if d > 0 increase local count
04B5                ARG_LIST3:      
04B5   03                     INC   bc   ; point to next char
04B6   18 E9                  JR   arg_list1   
04B8                ARG_LIST4:      
04B8   AF                     XOR   a   
04B9   B2                     OR   d   
04BA   28 01                  JR   z,arg_list5   
04BC   15                     DEC   d   ; remove initial inc
04BD                ARG_LIST5:      
04BD   23                     INC   hl   
04BE   22 A6 18               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
04C1   E1                     POP   hl   ; hl = start of arg_list
04C2   E5                     PUSH   hl   ; return start of string
04C3   2B                     DEC   hl   ; write length bytes to length field at start - 2
04C4   72                     LD   (hl),d   
04C5   2B                     DEC   hl   
04C6   73                     LD   (hl),e   
04C7   DD E9                  JP   (ix)   
04C9                CHAR:        
04C9   21 00 00               LD   hl,0   ; if `` is empty
04CC                CHAR1:       
04CC   03                     INC   bc   ; point to next char
04CD   0A                     LD   a,(bc)   
04CE   FE 60                  CP   "`"   ; ` is the string terminator
04D0   28 09                  JR   z,char3   
04D2   FE 5C                  CP   $5c   ; \ is the escape
04D4   20 02                  JR   nz,char2   
04D6   03                     INC   bc   
04D7   0A                     LD   a,(bc)   
04D8                CHAR2:       
04D8   6F                     LD   l,a   
04D9   18 F1                  JR   char1   
04DB                CHAR3:       
04DB   E5                     PUSH   hl   
04DC   DD E9                  JP   (ix)   
04DE                BLOCK:       
04DE   03                     INC   bc   
04DF   C5                     PUSH   bc   ; return first opcode of block
04E0   16 01                  LD   d,1   ; nesting: count first parenthesis
04E2                BLOCK1:      ; Skip to end of definition
04E2   0A                     LD   a,(bc)   ; Get the next character
04E3   03                     INC   bc   ; Point to next character
04E4   FE 21                  CP   " " + 1   ; ignore whitespace
04E6   38 FA                  JR   c,block1   
04E8   FE 29                  CP   ")"   
04EA   28 29                  JR   z,block4   
04EC   FE 7D                  CP   "}"   
04EE   28 25                  JR   z,block4   
04F0   FE 5D                  CP   "]"   
04F2   28 21                  JR   z,block4   
04F4   FE 28                  CP   "("   
04F6   28 12                  JR   z,block2   
04F8   FE 7B                  CP   "{"   
04FA   28 0E                  JR   z,block2   
04FC   FE 5B                  CP   "["   
04FE   28 0A                  JR   z,block2   
0500   FE 27                  CP   "'"   
0502   28 09                  JR   z,block3   
0504   FE 60                  CP   "`"   
0506   28 05                  JR   z,block3   
0508   18 D8                  JR   block1   
050A                BLOCK2:      
050A   14                     INC   d   
050B   18 D5                  JR   block1   
050D                BLOCK3:      
050D   3E 80                  LD   a,$80   
050F   AA                     XOR   d   
0510   47                     LD   b,a   
0511   20 CF                  JR   nz,block1   
0513   18 03                  JR   block5   
0515                BLOCK4:      
0515   15                     DEC   d   
0516   20 CA                  JR   nz,block1   ; get the next element
0518                BLOCK5:      
0518   0B                     DEC   bc   ; balanced, exit
0519   DD E9                  JP   (ix)   
051B                BLOCKEND:      
051B   D9                     EXX      
051C   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
051F   FD 56 01               LD   d,(iy+1)   
0522   FD 4E 06               LD   c,(iy+6)   ; bc = IP
0525   FD 46 07               LD   b,(iy+7)   
0528   D9                     EXX      
0529   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
052C   FD 56 03               LD   d,(iy+3)   
052F   EB                     EX   de,hl   
0530   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0533   FD 56 01               LD   d,(iy+1)   
0536                             ; ex de,hl                    ; de = first_arg*, hl = oldBP
0536   13                     INC   de   ; for carry flag <=
0537   B7                     OR   a   
0538   ED 52                  SBC   hl,de   
053A   38 0B                  JR   c,blockend1   ; oldBP >= first_arg, same scope skip
053C   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
053E   FD 5D                  LD   e,iyl   
0540   21 08 00               LD   hl,8   
0543   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0544   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0545   18 0C                  JR   blockend2   
0547                BLOCKEND1:      ; same scope
0547   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
054A   FD 56 03               LD   d,(iy+3)   
054D   EB                     EX   de,hl   
054E   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0550   FD 5D                  LD   e,iyl   
0552   EB                     EX   de,hl   
0553                BLOCKEND2:      
0553   44 4D                  LD   bc,hl   ; bc = hl = BP
0555   B7                     OR   a   ; hl = BP - SP = count
0556   ED 72                  SBC   hl,sp   
0558   C5                     PUSH   bc   ; bc = count, hl = BP
0559   44 4D                  LD   bc,hl   
055B   E1                     POP   hl   
055C   2B                     DEC   hl   ; hl = BP-1
055D   1B                     DEC   de   ; de = args*-1
055E   ED B8                  LDDR      
0560   13                     INC   de   ; hl = new tos
0561   EB                     EX   de,hl   
0562   F9                     LD   sp,hl   ; sp = new tos
0563   D9                     EXX      ; bc = IP, iy = oldBP
0564   D5                     PUSH   de   
0565   C5                     PUSH   bc   
0566   D9                     EXX      
0567   C1                     POP   bc   
0568   FD E1                  POP   iy   
056A   DD E9                  JP   (ix)   
056C                             ; if
056C                             ; condition then -- value
056C                IF:          
056C   11 00 00               LD   de,0   ; NUL pointer for else
056F   18 01                  JR   ifte1   
0571                             ; ifte
0571                             ; condition then else -- value
0571                IFTE:        
0571   D1                     POP   de   ; de = else
0572                IFTE1:       
0572   E1                     POP   hl   ; hl = then
0573   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0574   7C                     LD   a,h   
0575   B5                     OR   l   
0576   E1                     POP   hl   ; hl = then
0577   CA D9 07               JP   z,exec0   ; if z de = else
057A   EB                     EX   de,hl   ; condition = false, hl = else
057B   C3 D9 07               JP   exec0   
057E                             ; switch
057E                             ; index array -- value
057E                SWITCH:      
057E   D1                     POP   de   ; de = array
057F   E1                     POP   hl   ; hl = index
0580   29                     ADD   hl,hl   ; if data width = 2 then double
0581   19                     ADD   hl,de   ; add addr
0582   5E                     LD   e,(hl)   
0583   23                     INC   hl   
0584   56                     LD   d,(hl)   
0585   C3 D9 07               JP   exec0   
0588                             ; index of an array, based on vDataWidth
0588                             ; array num -- value    ; also sets vPointer to address
0588                INDEX:       
0588   E1                     POP   hl   ; hl = index
0589   D1                     POP   de   ; de = array
058A   3A 9A 18               LD   a,(vDataWidth)   ; a = data width
058D   3D                     DEC   a   
058E   28 01                  JR   z,index1   
0590                INDEX0:      
0590   29                     ADD   hl,hl   ; if data width = 2 then double
0591                INDEX1:      
0591   19                     ADD   hl,de   ; add addr
0592   22 9E 18               LD   (vPointer),hl   ; store address in setter
0595   16 00                  LD   d,0   
0597   5E                     LD   e,(hl)   
0598   B7                     OR   a   ; check data width again
0599   28 02                  JR   z,index2   
059B   23                     INC   hl   
059C   56                     LD   d,(hl)   
059D                INDEX2:      
059D   D5                     PUSH   de   
059E   DD E9                  JP   (ix)   
05A0                             ; newvalue --
05A0                SET:         
05A0   E1                     POP   hl   ; discard last accessed value
05A1   D1                     POP   de   ; new value
05A2   2A 9E 18               LD   hl,(vPointer)   
05A5   73                     LD   (hl),e   
05A6   3A 9A 18               LD   a,(vDataWidth)   
05A9   3D                     DEC   a   
05AA   28 02                  JR   z,set1   
05AC   23                     INC   hl   
05AD   72                     LD   (hl),d   
05AE                SET1:        
05AE   DD E9                  JP   (ix)   
05B0                             ; c b --
05B0                             ; loops until c = 0
05B0                LOOP:        
05B0   DD E9                  JP   (ix)   
05B2                             ;     pop de                      ; de = block                    c
05B2                             ;     pop hl                      ; hl = condition
05B2                             ;     push de
05B2                             ;     push bc                     ; push IP
05B2                             ;     ld bc,de                    ; bc = block
05B2                             ;     ld e,(iy+2)                 ; get ScopeBP from parent stack frame
05B2                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
05B2                             ;     push de                     ; push ScopeBP
05B2                             ;     push iy                     ; push BP
05B2                             ;     ld iy,0                     ; iy = sp
05B2                             ;     add iy,sp
05B2                             ; loop1:
05B2                             ;     ld a,l                      ; bc = block, hl = condition = zero?
05B2                             ;     or h
05B2                             ;     jr z,loop3
05B2                             ;     ld de,loop2-1               ; IP return address
05B2                             ;     push de
05B2                             ;     ld e,(iy+2)                 ; push parent ScopeBP
05B2                             ;     ld d,(iy+3)
05B2                             ;     push de                     ;
05B2                             ;     push iy                     ; push BP
05B2                             ;     ld iy,0                     ; iy = sp
05B2                             ;     add iy,sp
05B2                             ;     push hl                     ; push condition
05B2                             ;     dec bc
05B2                             ;     jp (ix)
05B2                             ; loop2:
05B2                             ;     db ESC                      ; escape from interpreter
05B2                             ;     ld c,(iy+6)                 ; bc = block
05B2                             ;     ld b,(iy+7)
05B2                             ;     pop hl                      ; hl = condition
05B2                             ;     jr loop1
05B2                             ; loop3:
05B2                             ;     ld d,iyh                    ; de = BP
05B2                             ;     ld e,iyl
05B2                             ;     ex de,hl                    ; hl = BP, de = result
05B2                             ;     ld sp,hl                    ; sp = BP
05B2                             ;     pop hl                      ; hl = old BP
05B2                             ;     pop bc                      ; pop ScopeBP (discard)
05B2                             ;     pop bc                      ; bc = IP
05B2                             ;     ld sp,hl                    ; sp = old BP
05B2                             ;     ld iy,0                     ; iy = sp
05B2                             ;     add iy,sp
05B2                             ;     ld ix,(vNext)                  ; needed?
05B2                             ;     jp (ix)
05B2                WORDS:       
05B2   21 02 00               LD   hl,2   
05B5   18 03                  JR   bytes1   
05B7                BYTES:       
05B7   21 01 00               LD   hl,1   
05BA                BYTES1:      
05BA   22 9A 18               LD   (vDataWidth),hl   
05BD   DD E9                  JP   (ix)   
05BF                ARRAY:       
05BF   11 00 00               LD   de,0   ; create stack frame
05C2   D5                     PUSH   de   ; push null for IP
05C3   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
05C6   FD 56 05               LD   d,(iy+5)   ; 
05C9   D5                     PUSH   de   ; 
05CA   FD 5E 02               LD   e,(iy+2)   ; push ScopeBP from parent stack frame
05CD   FD 56 03               LD   d,(iy+3)   ; 
05D0   D5                     PUSH   de   ; 
05D1   FD E5                  PUSH   iy   ; push BP
05D3   FD 21 00 00            LD   iy,0   ; BP = SP
05D7   FD 39                  ADD   iy,sp   
05D9   DD E9                  JP   (ix)   
05DB                ARRAYEND:      
05DB   FD 54                  LD   d,iyh   ; de = BP
05DD   FD 5D                  LD   e,iyl   
05DF   ED 43 A8 18            LD   (vTemp1),bc   ; save IP
05E3   62 6B                  LD   hl,de   ; hl = de = BP
05E5   B7                     OR   a   
05E6   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
05E8   CB 3C                  SRL   h   ; 
05EA   CB 1D                  RR   l   
05EC   44 4D                  LD   bc,hl   ; bc = count
05EE   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[-2]
05F1   71                     LD   (hl),c   ; write num items in length word
05F2   23                     INC   hl   
05F3   70                     LD   (hl),b   
05F4   23                     INC   hl   ; hl = array[0], bc = count
05F5                             ; de = BP, hl = array[0], bc = count
05F5   3A 9A 18               LD   a,(vDataWidth)   ; vDataWidth=1?
05F8   FE 01                  CP   1   
05FA   20 10                  JR   nz,arrayEnd2   
05FC                ARRAYEND1:      ; byte
05FC   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
05FF   77                     LD   (hl),a   ; write a to array item
0600   23                     INC   hl   ; move to next byte in array
0601   FD 2B                  DEC   iy   ; move tho next word on stack
0603   FD 2B                  DEC   iy   
0605   0B                     DEC   bc   ; dec items count
0606   79                     LD   a,c   ; if not zero loop
0607   B0                     OR   b   
0608   20 F2                  JR   nz,arrayEnd1   
060A   18 13                  JR   arrayEnd3   
060C                ARRAYEND2:      ; word
060C   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
060F   77                     LD   (hl),a   ; write lsb of array item
0610   23                     INC   hl   ; move to msb of array item
0611   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0614   77                     LD   (hl),a   ; write msb of array item
0615   23                     INC   hl   ; move to next word in array
0616   FD 2B                  DEC   iy   ; move to next word on stack
0618   FD 2B                  DEC   iy   
061A   0B                     DEC   bc   ; dec items count
061B   79                     LD   a,c   ; if not zero loop
061C   B0                     OR   b   
061D   20 ED                  JR   nz,arrayEnd2   
061F                ARRAYEND3:      
061F   EB                     EX   de,hl   ; de = end of array, hl = BP
0620   F9                     LD   sp,hl   ; sp = BP
0621   E1                     POP   hl   ; de = end of array, hl = old BP
0622   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0623   FD 62                  LD   iyh,d   
0625   FD 6B                  LD   iyl,e   
0627   D1                     POP   de   ; pop arg_list (discard)
0628   D1                     POP   de   ; pop ScopeBP (discard)
0629   D1                     POP   de   ; pop IP (discard)
062A   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = array[-2]
062E   22 A6 18               LD   (vHeapPtr),hl   ; move heapPtr to end of array
0631   ED 4B A8 18            LD   bc,(vTemp1)   ; restore IP
0635   13                     INC   de   ; de = array[0]
0636   13                     INC   de   
0637   D5                     PUSH   de   ; return array[0]
0638   DD E9                  JP   (ix)   
063A                             ; str -- num
063A                HASH:        
063A                             ; pop hl
063A                             ; push bc
063A                             ; ld bc,hl
063A                             ; call hashStr
063A                             ; pop bc
063A                             ; push hl
063A   DD E9                  JP   (ix)   
063C                             ; symbol func --
063C                DEF:         
063C                             ;     ld ix,def1
063C                             ;     jp func
063C                             ; def1:
063C                             ;     ld ix,(vNext)
063C                             ;     pop de                              ; hl = symbol de = addr (sp) = IP
063C                             ;     ld hl,bc
063C                             ; jr let1
063C                             ; symbol value --
063C                LET:         
063C                             ;     ld hl,bc                            ; de = addr (sp) = IP (sp+2) = symbol
063C                             ;     ex (sp),hl
063C                             ;     ex de,hl
063C                             ;     ld hl,(vHeapPtr)                    ; hl = heap
063C                             ;     ld (hl),$cd                         ; compile "call dolet"
063C                             ;     inc hl
063C                             ;     ld (hl),lsb(dolet)
063C                             ;     inc hl
063C                             ;     ld (hl),msb(dolet)
063C                             ;     inc hl
063C                             ;     ld (hl),e
063C                             ;     inc hl
063C                             ;     ld (hl),d
063C                             ;     ld de,(vHashStr)
063C                             ;     inc hl
063C                             ;     ld (hl),e
063C                             ;     inc hl
063C                             ;     ld (hl),d
063C                             ;     dec hl
063C                             ;     ld de,(vHeapPtr)            ; de = start of definition
063C                             ;     ld (vHeapPtr),hl            ; update heap ptr to end of definition
063C                             ;     pop hl                      ; de = addr, hl = IP
063C                             ; let1:
063C                             ;     ex (sp),hl                  ; hl = symbol de = addr (sp) = IP
063C                             ;     ld bc,hl                    ; bc = symbol
063C                             ;     call defineEntry
063C                             ;     jr c,let2
063C                             ;     ld hl,2                      ; error 2: Let collision
063C                             ;     jp error
063C                             ; let2:
063C                             ;     pop bc
063C   DD E9                  JP   (ix)   
063E                             ; addr -- value
063E                DOLET:       
063E   E1                     POP   hl   
063F   22 9E 18               LD   (vPointer),hl   ; store address in setter
0642                DOLET2:      
0642   5E                     LD   e,(hl)   
0643   23                     INC   hl   
0644   56                     LD   d,(hl)   
0645   23                     INC   hl   
0646                DOLET3:      
0646   D5                     PUSH   de   
0647   5E                     LD   e,(hl)   
0648   23                     INC   hl   
0649   56                     LD   d,(hl)   
064A   ED 53 A2 18            LD   (vHashStr),de   
064E   DD E9                  JP   (ix)   
0650                             ; symbol -- ptr
0650                ADDR:        
0650                             ;     pop hl                              ; hl = hash
0650                             ;     push bc
0650                             ;     ld bc,hl
0650                             ;     call lookupEntry
0650                             ;     jr c, addr1
0650                             ;     ld hl,0
0650                             ;     ; call printStr		
0650                             ;     ; .cstr "Undefined"
0650                             ;     ; jp interpret
0650                             ; addr1:
0650                             ;     pop bc
0650                             ;     ld de,3                 ; return entry point + 3 to get address of let data
0650                             ;     add hl,de
0650                             ;     ld (vPointer),hl
0650                             ;     push hl
0650   DD E9                  JP   (ix)   
0652                SYMBOL:      
0652                             ;     inc bc
0652                             ;     ld de,PAD
0652                             ;     ld h,msb(opcodesBase)                   ; this table identifies the char type
0652                             ;     jr symbol1
0652                             ; symbol0:                                 ; copy to PAD area
0652                             ;     inc bc                              ; characters that are part of the identifier
0652                             ;     inc de
0652                             ; symbol1:                                 ; 0-9 A-Z a-z _
0652                             ;     ld a,(bc)
0652                             ;     ld (de),a
0652                             ;     cp " "+1
0652                             ;     jr c,symbol2
0652                             ;     ld l,a
0652                             ;     ld a,(hl)
0652                             ;     cp lsb(ident_)
0652                             ;     jr z,symbol0
0652                             ;     cp lsb(num_)
0652                             ;     jr z,symbol0
0652                             ; symbol2:
0652                             ;     dec bc
0652                             ;     xor a
0652                             ;     ld (de),a                           ; terminate string with NUL
0652                             ;     push bc
0652                             ;     ld bc,PAD
0652                             ;     call hashStr                        ; hl = hash
0652                             ;     pop bc
0652                             ;     push hl
0652   DD E9                  JP   (ix)   
0654                IDENTU:      
0654   0A                     LD   a,(bc)   ; a = identifier char
0655   D6 41                  SUB   "A"   ; "A" = 0
0657   18 03                  JR   ident1   
0659                IDENTL:      
0659   0A                     LD   a,(bc)   
065A   D6 7B                  SUB   "a" + 26   
065C                IDENT1:      
065C   87                     ADD   a,a   
065D   6F                     LD   l,a   
065E   26 18                  LD   h,msb(vars)   
0660   E9                     JP   (hl)   
0661                FRAC:        
0661   2A 98 18               LD   hl,(vFrac)   
0664   E5                     PUSH   hl   
0665   DD E9                  JP   (ix)   
0667                          ALIGN   2   
0668                SQRT1:       
0668   E1                     POP   hl   
0669   C5                     PUSH   bc   
066A   CD EE 06               CALL   squareRoot   
066D   ED 43 98 18            LD   (vFrac),bc   
0671   C1                     POP   bc   
0672   D5                     PUSH   de   
0673   DD E9                  JP   (ix)   
0675                ABS1:        
0675   E1                     POP   hl   
0676   CB 7C                  BIT   7,h   
0678   C8                     RET   z   
0679   AF                     XOR   a   
067A   95                     SUB   l   
067B   6F                     LD   l,a   
067C   9F                     SBC   a,a   
067D   94                     SUB   h   
067E   67                     LD   h,a   
067F   E5                     PUSH   hl   
0680   DD E9                  JP   (ix)   
0682                MOD:         
0682   D1                     POP   de   ; get first value
0683   E1                     POP   hl   ; get 2nd value
0684   C5                     PUSH   bc   ; preserve the IP
0685   44 4D                  LD   bc,hl   
0687   CD D5 06               CALL   divide   
068A   C1                     POP   bc   
068B   E5                     PUSH   hl   ; push remainder
068C   DD E9                  JP   (ix)   
068E                             ; hl = value1, de = value2
068E                             ; hl = result
068E                EQUALS:      
068E   B7                     OR   a   ; reset the carry flag
068F   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0691   28 10                  JR   z,true1   
0693   C3 A9 06               JP   false1   
0696                             ; hl = value1 de = value2
0696                             ; hl = result
0696                LESSTHANEQ:      
0696   B7                     OR   a   
0697   ED 52                  SBC   hl,de   
0699   18 05                  JR   lessthan1   
069B                             ; hl = value1 de = value2
069B                             ; hl = result
069B                LESSTHAN:      
069B   B7                     OR   a   
069C   ED 52                  SBC   hl,de   
069E   28 09                  JR   z,false1   
06A0                LESSTHAN1:      
06A0   FA A9 06               JP   m,false1   
06A3                TRUE1:       
06A3   21 FF FF               LD   hl,TRUE   
06A6   E5                     PUSH   hl   
06A7   DD E9                  JP   (ix)   
06A9                NULL1:       
06A9                FALSE1:      
06A9   21 00 00               LD   hl,FALSE   
06AC   E5                     PUSH   hl   
06AD   DD E9                  JP   (ix)   
06AF                             ; Z80 port input
06AF                             ; port -- value
06AF                INPUT:       
06AF   E1                     POP   hl   
06B0   59                     LD   e,c   ; save IP
06B1   4D                     LD   c,l   
06B2   ED 68                  IN   l,(c)   
06B4   26 00                  LD   h,0   
06B6   4B                     LD   c,e   ; restore IP
06B7   E5                     PUSH   hl   
06B8   DD E9                  JP   (ix)   
06BA                             ; Z80 port output
06BA                             ; value port --
06BA                OUTPUT:      
06BA   E1                     POP   hl   
06BB   59                     LD   e,c   ; save IP
06BC   4D                     LD   c,l   
06BD   E1                     POP   hl   
06BE   ED 69                  OUT   (c),l   
06C0   4B                     LD   c,e   ; restore IP
06C1   DD E9                  JP   (ix)   
06C3                KEY:         
06C3   CD 81 00               CALL   getchar   
06C6   26 00                  LD   h,0   
06C8   6F                     LD   l,a   
06C9   E5                     PUSH   hl   
06CA   DD E9                  JP   (ix)   
06CC                NEG:         
06CC   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
06CF   D1                     POP   de   
06D0   C3 94 03               JP   sub2   ; use the SUBtract routine
06D3                FILTER:      
06D3                MAP:         
06D3                SCAN:        
06D3   DD E9                  JP   (ix)   
06D5                             ; -------------------------------------------------------------------------------
06D5                             ; ; hash C-string
06D5                             ; ; BC = str
06D5                             ; ; HL = hash
06D5                             ; hashStr:
06D5                             ;     ld (vHashStr),bc                    ; store source string
06D5                             ;     ld hl,0
06D5                             ; hashStr1:
06D5                             ;     ld a,(bc)                           ; load next char
06D5                             ;     inc bc
06D5                             ;     cp 0                                ; NUL?
06D5                             ;     ret z
06D5                             ; hashStr2:
06D5                             ;     ld d,0
06D5                             ;     ld e,a
06D5                             ;     add hl,de
06D5                             ;     ld de,hl                            ; hl *= 193 (11000001)
06D5                             ;     add hl,hl                           ; shift left
06D5                             ;     add hl,de                           ; add
06D5                             ;     add hl,hl                           ; shift left
06D5                             ;     add hl,hl                           ; shift left
06D5                             ;     add hl,hl                           ; shift left
06D5                             ;     add hl,hl                           ; shift left
06D5                             ;     add hl,hl                           ; shift left
06D5                             ;     add hl,hl                           ; shift left
06D5                             ;     add hl,de                           ; add
06D5                             ;     jr hashStr1
06D5                             ; ; add entry to hash slots and hash pointers
06D5                             ; ; bc = hash (b = hi, c = lo), de = addr
06D5                             ; ; sets carry if successful
06D5                             ; defineEntry:
06D5                             ;     sla c                               ; lo = lo * 2
06D5                             ;     ld l,c                              ; lo1 = lo
06D5                             ;     ld h,msb(hashSlots)                 ; hl = slots[lo*4]
06D5                             ; defineEntry0:
06D5                             ;     ld a,(hl)                           ; a = (lo1)
06D5                             ;     cp UNUSED                           ; is it unused?
06D5                             ;     jr z,defineEntry3                   ; yes, add entry
06D5                             ;     ld a,c                              ; a = lo
06D5                             ;     cp (hl)                             ; compare (lo1) with lo
06D5                             ;     jr nz,defineEntry1                  ; no match loop around
06D5                             ;     inc l
06D5                             ;     ld a,b                              ; a = hi
06D5                             ;     cp (hl)                             ; compare (lo1+1) with hi
06D5                             ;     jr z,defineEntry2                   ; identical hash, collision, exit
06D5                             ;     dec l                               ; restore l
06D5                             ; defineEntry1:
06D5                             ;     inc l                               ; try next entry
06D5                             ;     inc l
06D5                             ;     ld a,c                              ; compare lo and lo1
06D5                             ;     cp l                                ; if equal then there's no space left, reject
06D5                             ;     jr nz,defineEntry0
06D5                             ; defineEntry2:
06D5                             ;     or a                                ; clear carry flag, failure
06D5                             ;     ret
06D5                             ; defineEntry3:                           ; new entry
06D5                             ;     ld (hl),c                           ; (lo1) = hash lo
06D5                             ;     inc hl
06D5                             ;     ld (hl),b                           ; (lo1 + 1) = hash hi
06D5                             ;     ld h,msb(hashWords)                 ; hl = slots[lo*4]
06D5                             ;     ld (hl),d
06D5                             ;     dec hl
06D5                             ;     ld (hl),e                           ; (slot + 2) = address
06D5                             ;     scf                                 ; set carry flag, success
06D5                             ;     ret
06D5                             ; ; looks up hash and returns address
06D5                             ; ; bc = hash
06D5                             ; ; returns addr in hl, sets carry if successful
06D5                             ; lookupEntry:
06D5                             ;     sla c                               ; lo = lo * 2
06D5                             ;     ld l,c                              ; lo1 = lo
06D5                             ;     ld h,msb(hashSlots)                 ; hl = slots[lo*4]
06D5                             ; lookupEntry0:
06D5                             ;     ld a,(hl)                           ; a = (hl), slot
06D5                             ;     cp UNUSED                           ; is it unused?
06D5                             ;     jr z,defineEntry2                   ; yes, does not exist
06D5                             ;     ld a,c                              ; a = lo
06D5                             ;     cp (hl)                             ; compare (lo1) with lo
06D5                             ;     jr nz,lookupEntry1                  ; no match loop around
06D5                             ;     inc l
06D5                             ;     ld a,b                              ; a = hi
06D5                             ;     cp (hl)                             ; compare (lo1+1) with hi
06D5                             ;     jr z,lookupEntry3
06D5                             ;     dec l
06D5                             ; lookupEntry1:
06D5                             ;     inc l
06D5                             ;     inc l
06D5                             ;     ld a,c
06D5                             ;     cp l                                ; no space left, reject
06D5                             ;     jr nz,lookupEntry0
06D5                             ; lookupEntry2:
06D5                             ;     or a                                ; clear carry flag, failure
06D5                             ;     ret
06D5                             ; lookupEntry3:
06D5                             ;     ld h,msb(hashWords)                 ; hl = slots[lo*4]
06D5                             ;     ld d,(hl)
06D5                             ;     dec l                               ; restore l
06D5                             ;     ld e,(hl)                           ; (slot + 2) = address
06D5                             ;     ex de,hl
06D5                             ;     scf
06D5                             ;     ret
06D5                             ; division subroutine.
06D5                             ; bc: divisor, de: dividend, hl: remainder
06D5                DIVIDE:      
06D5   21 00 00               LD   hl,0   ; zero the remainder
06D8   3E 10                  LD   a,16   ; loop counter
06DA                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
06DA   CB 21                  SLA   c   
06DC   CB 10                  RL   b   
06DE   ED 6A                  ADC   hl,hl   
06E0   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
06E2   38 03                  JR   c,divide2   
06E4   0C                     INC   c   
06E5   18 01                  JR   divide3   
06E7                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
06E7   19                     ADD   hl,de   
06E8                DIVIDE3:      
06E8   3D                     DEC   a   
06E9   20 EF                  JR   nz,divide1   
06EB   50 59                  LD   de,bc   ; result from bc to de
06ED   C9                     RET      
06EE                             ; squareroot
06EE                             ; Input: HL = value
06EE                             ; Result: DE = square root BC = remainder
06EE                SQUAREROOT:      
06EE   01 00 08               LD   bc,0800h   
06F1   59                     LD   e,c   
06F2   AF                     XOR   a   
06F3                SQUAREROOT1:      
06F3   29                     ADD   hl,hl   
06F4   CB 11                  RL   c   
06F6   ED 6A                  ADC   hl,hl   
06F8   CB 11                  RL   c   
06FA   30 02                  JR   nc,$+4   
06FC   CB C5                  SET   0,l   
06FE   7B                     LD   a,e   
06FF   87                     ADD   a,a   
0700   5F                     LD   e,a   
0701   87                     ADD   a,a   
0702   CB 45                  BIT   0,l   
0704   20 03                  JR   nz,$+5   
0706   91                     SUB   c   
0707   30 05                  JR   nc,squareRoot4   
0709   79                     LD   a,c   
070A   93                     SUB   e   
070B   1C                     INC   e   
070C   93                     SUB   e   
070D   4F                     LD   c,a   
070E                SQUAREROOT4:      
070E   10 E3                  DJNZ   squareRoot1   
0710   CB 45                  BIT   0,l   
0712   28 01                  JR   z,squareRoot5   
0714   04                     INC   b   
0715                SQUAREROOT5:      
0715   16 00                  LD   d,0   
0717   C9                     RET      
0718                             ; print decimal
0718                             ; hl = value
0718                PRTDEC:      
0718   CB 7C                  BIT   7,h   
071A   28 0B                  JR   z,prtdec0   
071C   3E 2D                  LD   a,"-"   
071E   CD 85 00               CALL   putchar   
0721   AF                     XOR   a   
0722   95                     SUB   l   
0723   6F                     LD   l,a   
0724   9F                     SBC   a,a   
0725   94                     SUB   h   
0726   67                     LD   h,a   
0727                PRTDEC0:      
0727   C5                     PUSH   bc   
0728   0E 00                  LD   c,0   ; leading zeros flag = false
072A   11 F0 D8               LD   de,-10000   
072D   CD 49 07               CALL   prtdec1   
0730   11 18 FC               LD   de,-1000   
0733   CD 49 07               CALL   prtdec1   
0736   11 9C FF               LD   de,-100   
0739   CD 49 07               CALL   prtdec1   
073C   1E F6                  LD   e,-10   
073E   CD 49 07               CALL   prtdec1   
0741   0C                     INC   c   ; flag = true for at least digit
0742   1E FF                  LD   e,-1   
0744   CD 49 07               CALL   prtdec1   
0747   C1                     POP   bc   
0748   C9                     RET      
0749                PRTDEC1:      
0749   06 2F                  LD   b,"0"-1   
074B                PRTDEC2:      
074B   04                     INC   b   
074C   19                     ADD   hl,de   
074D   38 FC                  JR   c,prtdec2   
074F   ED 52                  SBC   hl,de   
0751   3E 30                  LD   a,"0"   
0753   B8                     CP   b   
0754   20 05                  JR   nz,prtdec3   
0756   AF                     XOR   a   
0757   B1                     OR   c   
0758   C8                     RET   z   
0759   18 01                  JR   prtdec4   
075B                PRTDEC3:      
075B   0C                     INC   c   
075C                PRTDEC4:      
075C   78                     LD   a,b   
075D   C3 85 00               JP   putchar   
0760                PRTHEX:      ; display hl as a 16-bit number in hex.
0760   C5                     PUSH   bc   ; preserve the IP
0761   7C                     LD   a,h   
0762   CD 6B 07               CALL   prthex2   
0765   7D                     LD   a,l   
0766   CD 6B 07               CALL   prthex2   
0769   C1                     POP   bc   
076A   C9                     RET      
076B                PRTHEX2:      
076B   4F                     LD   c,a   
076C   1F                     RRA      
076D   1F                     RRA      
076E   1F                     RRA      
076F   1F                     RRA      
0770   CD 74 07               CALL   prthex3   
0773   79                     LD   a,c   
0774                PRTHEX3:      
0774   E6 0F                  AND   0x0F   
0776   C6 90                  ADD   a,0x90   
0778   27                     DAA      
0779   CE 40                  ADC   a,0x40   
077B   27                     DAA      
077C   C3 85 00               JP   putchar   
077F                PRTSTR0:      
077F   CD 85 00               CALL   putchar   
0782   23                     INC   hl   
0783                PRTSTR:      
0783   7E                     LD   a,(hl)   
0784   B7                     OR   a   
0785   20 F8                  JR   nz,prtstr0   
0787   C9                     RET      
0788                             ; **************************************************************************
0788                             ; calculate nesting value
0788                             ; a is char to be tested,
0788                             ; e is the nesting value (initially 0)
0788                             ; e is increased by ( and [
0788                             ; e is decreased by ) and ]
0788                             ; e has its bit 7 toggled by `
0788                             ; limited to 127 levels
0788                             ; **************************************************************************
0788                NESTING:      
0788   FE 22                  CP   $22   ; quote char
078A   20 0A                  JR   nz,nesting1   
078C   CB 7B                  BIT   7,e   
078E   28 03                  JR   z,nesting1a   
0790   CB BB                  RES   7,e   
0792   C9                     RET      
0793                NESTING1A:      
0793   CB FB                  SET   7,e   
0795   C9                     RET      
0796                NESTING1:      
0796   CB 7B                  BIT   7,e   
0798   C0                     RET   nz   
0799   FE 7B                  CP   "{"   
079B   28 08                  JR   z,nesting2   
079D   FE 5B                  CP   "["   
079F   28 04                  JR   z,nesting2   
07A1   FE 28                  CP   "("   
07A3   20 02                  JR   nz,nesting3   
07A5                NESTING2:      
07A5   1C                     INC   e   
07A6   C9                     RET      
07A7                NESTING3:      
07A7   FE 7D                  CP   "}"   
07A9   28 07                  JR   z,nesting4   
07AB   FE 5D                  CP   "]"   
07AD   28 03                  JR   z,nesting4   
07AF   FE 29                  CP   ")"   
07B1   C0                     RET   nz   
07B2                NESTING4:      
07B2   1D                     DEC   e   
07B3   C9                     RET      
07B4                PROMPT:      
07B4   CD C4 07               CALL   printStr   
07B7   0D 0A 3E 20 00         .CSTR   "\r\n> "   
07BC   C9                     RET      
07BD                CRLF:        
07BD   CD C4 07               CALL   printStr   
07C0   0D 0A 00               .CSTR   "\r\n"   
07C3   C9                     RET      
07C4                             ; prints a null teminated string
07C4                             ; the string should be immedaitely following the call
07C4                PRINTSTR:      
07C4   E3                     EX   (sp),hl   ; swap			
07C5   CD 83 07               CALL   prtstr   
07C8   23                     INC   hl   ; inc past NUL
07C9   E3                     EX   (sp),hl   ; put it back	
07CA   C9                     RET      
07CB                             ; branch:                         ; executes the address on the stack
07CB                             ;     pop bc                      ; bc = code*
07CB                             ;     dec bc                      ; dec to prepare for next routine
07CB                             ;     jp (ix)
07CB                             ; executes a null teminated string (null executes exit_)
07CB                             ; the string should be immedaitely following the call
07CB                EXECSTR:      ; create a root stack frame
07CB   C1                     POP   bc   ; bc = code*
07CC   0B                     DEC   bc   ; dec to prepare for next routine
07CD   11 00 00               LD   de,0   
07D0   D5                     PUSH   de   ; push fake IP
07D1   D5                     PUSH   de   ; push null arglist*
07D2   D5                     PUSH   de   ; push null first_arg*
07D3   D5                     PUSH   de   ; push fake BP
07D4   DD E9                  JP   (ix)   
07D6                             ; define:
07D6                             ;     pop hl
07D6                             ;     ld a,(hl)
07D6                             ;     inc hl
07D6                             ;     ld bc,hl
07D6                             ;     ld e,a
07D6                             ;     ld d,0
07D6                             ;     add hl,de
07D6                             ;     ld e,(hl)
07D6                             ;     inc hl
07D6                             ;     ld d,(hl)
07D6                             ;     inc hl
07D6                             ;     push hl                             ; bc = str
07D6                             ;     push de
07D6                             ;     call hashStr                        ; hl = hash
07D6                             ;     pop de
07D6                             ;     ld bc,hl
07D6                             ;     jp defineEntry
07D6                             ; arg1 .. argn func -- ?
07D6                CALL:        
07D6   E1                     POP   hl   
07D7   E9                     JP   (hl)   
07D8                             ; execute a block of code which ends with }
07D8                             ; creates a root scope if BP == stack
07D8                             ; else uses outer scope
07D8                EXEC:        
07D8   D1                     POP   de   ; de = block*
07D9                EXEC0:       
07D9   7B                     LD   a,e   ; if block* == null, exit
07DA   B2                     OR   d   
07DB   20 02                  JR   nz,exec1   
07DD   DD E9                  JP   (ix)   
07DF                EXEC1:       
07DF   C5                     PUSH   bc   ; push IP
07E0   21 80 18               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
07E3   FD 44                  LD   b,iyh   
07E5   FD 4D                  LD   c,iyl   
07E7   B7                     OR   a   ; hl = stack - BP = root_scope
07E8   ED 42                  SBC   hl,bc   
07EA   7D                     LD   a,l   ; if root_scope, skip
07EB   B4                     OR   h   
07EC   28 11                  JR   z,exec2   
07EE   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
07F1   FD 46 05               LD   b,(iy+5)   
07F4   C5                     PUSH   bc   
07F5   FD 4E 02               LD   c,(iy+2)   ; hl = first_arg* (parent)
07F8   FD 46 03               LD   b,(iy+3)   
07FB   60 69                  LD   hl,bc   
07FD   18 34                  JR   doCall4   
07FF                EXEC2:       
07FF   E5                     PUSH   hl   ; push arg_list (null)
0800   21 04 00               LD   hl,4   ; hl = first_arg* (BP+8)
0803   39                     ADD   hl,sp   
0804   18 2D                  JR   doCall4   ; 
0806                             ; call with args
0806                             ; creates a scope
0806                             ; code* -- ?
0806                DOCALL:      ; execute code at pointer
0806   E1                     POP   hl   ; hl = code*
0807   7D                     LD   a,l   ; if code* == null, skip
0808   B4                     OR   h   
0809   28 34                  JR   z,doCall5   
080B   5E                     LD   e,(hl)   ; de = block*, hl = arg_list*
080C   23                     INC   hl   
080D   56                     LD   d,(hl)   
080E   23                     INC   hl   
080F   EB                     EX   de,hl   
0810   7D                     LD   a,l   ; if arg_list* != null skip
0811   B4                     OR   h   
0812   20 08                  JR   nz,doCall1   
0814   C5                     PUSH   bc   ; push IP
0815   E5                     PUSH   hl   ; push arg_list (null)
0816   21 04 00               LD   hl,4   ; hl = first_arg (BP + 8)
0819   39                     ADD   hl,sp   
081A   18 17                  JR   doCall4   
081C                DOCALL1:      
081C   2B                     DEC   hl   ; a = num_locals*, de = block* hl = arg_list*
081D   7E                     LD   a,(hl)   
081E   23                     INC   hl   
081F   B7                     OR   a   
0820   28 05                  JR   z,doCall3   
0822                DOCALL2:      
0822   3B                     DEC   sp   
0823   3B                     DEC   sp   
0824   3D                     DEC   a   
0825   20 FB                  JR   nz,doCall2   
0827                DOCALL3:      
0827   C5                     PUSH   bc   ; push IP
0828   E5                     PUSH   hl   ; push arg_list*
0829   2B                     DEC   hl   ; hl = num_args*
082A   2B                     DEC   hl   
082B   7E                     LD   a,(hl)   ; hl = num_args * 2
082C   87                     ADD   a,a   
082D   C6 04                  ADD   a,4   ; offset for IP and arg_list
082F   6F                     LD   l,a   
0830   26 00                  LD   h,$0   
0832   39                     ADD   hl,sp   ; hl = first_arg*
0833                DOCALL4:      
0833   E5                     PUSH   hl   ; push first_arg
0834   FD E5                  PUSH   iy   ; push BP
0836   FD 21 00 00            LD   iy,0   ; BP = SP
083A   FD 39                  ADD   iy,sp   
083C   42 4B                  LD   bc,de   ; bc = de = block*-1
083E   0B                     DEC   bc   
083F                DOCALL5:      
083F   DD E9                  JP   (ix)   
0841                             ; arg_list* block* -- ptr
0841                FUNC:        
0841   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heapptr
0844   36 CD                  LD   (hl),$cd   ; compile "call doCall"
0846   23                     INC   hl   
0847   36 06                  LD   (hl),lsb(doCall)   
0849   23                     INC   hl   
084A   36 08                  LD   (hl),msb(doCall)   
084C   23                     INC   hl   
084D   D1                     POP   de   ; hl = heapPtr, de = block
084E   EB                     EX   de,hl   ; hl = heapPtr, de = arg_list*, (sp) = block*
084F   E3                     EX   (sp),hl   
0850   EB                     EX   de,hl   
0851   73                     LD   (hl),e   ; compile arg_list*
0852   23                     INC   hl   
0853   72                     LD   (hl),d   
0854   23                     INC   hl   
0855   D1                     POP   de   ; de = block*
0856   C5                     PUSH   bc   ; (sp) = IP
0857   06 01                  LD   b,1   ; b = nesting
0859                FUNC1:       
0859   1A                     LD   a,(de)   
085A   13                     INC   de   
085B   77                     LD   (hl),a   
085C   23                     INC   hl   
085D   FE 29                  CP   ")"   
085F   28 29                  JR   z,func4   
0861   FE 7D                  CP   "}"   
0863   28 25                  JR   z,func4   
0865   FE 5D                  CP   "]"   
0867   28 21                  JR   z,func4   
0869   FE 28                  CP   "("   
086B   28 12                  JR   z,func2   
086D   FE 7B                  CP   "{"   
086F   28 0E                  JR   z,func2   
0871   FE 5B                  CP   "["   
0873   28 0A                  JR   z,func2   
0875   FE 27                  CP   "'"   
0877   28 09                  JR   z,func3   
0879   FE 60                  CP   "`"   
087B   28 05                  JR   z,func3   
087D   18 DA                  JR   func1   
087F                FUNC2:       
087F   04                     INC   b   
0880   18 D7                  JR   func1   
0882                FUNC3:       
0882   3E 80                  LD   a,$80   
0884   A8                     XOR   b   
0885   47                     LD   b,a   
0886   20 D1                  JR   nz,func1   
0888   18 03                  JR   func4a   
088A                FUNC4:       
088A   05                     DEC   b   
088B   20 CC                  JR   nz,func1   ; get the next element
088D                FUNC4A:      
088D   23                     INC   hl   
088E   C1                     POP   bc   ; de = defstart, hl = IP
088F   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = defstart
0893   D5                     PUSH   de   
0894   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0897   DD E9                  JP   (ix)   
0899                             ; $a .. $z
0899                             ; -- value
0899                             ; returns value of arg
0899                ARG:         
0899   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
089C   FD 56 05               LD   d,(iy+5)   
089F   EB                     EX   de,hl   
08A0   7D                     LD   a,l   ; arg_list* == null, skip
08A1   B4                     OR   h   
08A2   28 1C                  JR   z,arg0a   
08A4   2B                     DEC   hl   ; a = num_args, hl = arg_list*
08A5   2B                     DEC   hl   
08A6   7E                     LD   a,(hl)   
08A7   23                     INC   hl   
08A8   23                     INC   hl   
08A9   B7                     OR   a   
08AA   28 14                  JR   z,arg0a   ; num_args == 0, skip
08AC   5F                     LD   e,a   ; e = a = num_args
08AD   03                     INC   bc   ; a = next char = arg_name
08AE   0A                     LD   a,(bc)   
08AF   C5                     PUSH   bc   ; save IP
08B0   43                     LD   b,e   ; b = e = num_args
08B1   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
08B4   FD 56 03               LD   d,(iy+3)   
08B7                ARG0:        
08B7   1B                     DEC   de   ; a = arg_name, de = next arg*
08B8   1B                     DEC   de   
08B9   BE                     CP   (hl)   
08BA   28 09                  JR   z,arg1   
08BC   23                     INC   hl   ; hl = next arg_list*
08BD   10 F8                  DJNZ   arg0   
08BF   C1                     POP   bc   ; no match, restore IP
08C0                ARG0A:       
08C0   11 00 00               LD   de,0   ; return 0
08C3   18 08                  JR   arg1a   
08C5                ARG1:        
08C5   C1                     POP   bc   ; restore IP
08C6   EB                     EX   de,hl   ; hl = arg*
08C7   22 9E 18               LD   (vPointer),hl   ; store arg* in setter
08CA   5E                     LD   e,(hl)   
08CB   23                     INC   hl   
08CC   56                     LD   d,(hl)   ; de = arg
08CD                ARG1A:       
08CD   D5                     PUSH   de   ; push arg
08CE   DD E9                  JP   (ix)   
08D0                             ; closure:
08D0                             ; array -- addr
08D0                CLOSURE:      
08D0   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap_ptr
08D3   36 CD                  LD   (hl),$cd   ; compile "call doclosure"
08D5   23                     INC   hl   
08D6   36 EA                  LD   (hl),lsb(doClosure)   
08D8   23                     INC   hl   
08D9   36 08                  LD   (hl),msb(doClosure)   
08DB   D1                     POP   de   
08DC   23                     INC   hl   
08DD   73                     LD   (hl),e   
08DE   23                     INC   hl   
08DF   72                     LD   (hl),d   
08E0   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = closure start
08E4   D5                     PUSH   de   
08E5   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of closure
08E8   DD E9                  JP   (ix)   
08EA                             ; code* -- arr1 arr2 .. arrn func
08EA                DOCLOSURE:      
08EA   E1                     POP   hl   ; hl = code*
08EB   5E                     LD   e,(hl)   ; de = array
08EC   23                     INC   hl   
08ED   56                     LD   d,(hl)   
08EE   23                     INC   hl   
08EF   7B                     LD   a,e   ; de == null, skip
08F0   B2                     OR   d   
08F1   28 17                  JR   z,doClosure3   
08F3   EB                     EX   de,hl   ; hl = array
08F4   ED 43 A8 18            LD   (vTemp1),bc   ; save IP
08F8   2B                     DEC   hl   ; bc = count
08F9   46                     LD   b,(hl)   
08FA   2B                     DEC   hl   
08FB   4E                     LD   c,(hl)   
08FC   23                     INC   hl   ; push each item on stack
08FD   23                     INC   hl   
08FE   18 06                  JR   doClosure2   
0900                DOCLOSURE1:      
0900   5E                     LD   e,(hl)   
0901   23                     INC   hl   
0902   56                     LD   d,(hl)   
0903   23                     INC   hl   
0904   D5                     PUSH   de   
0905   0B                     DEC   bc   
0906                DOCLOSURE2:      
0906   79                     LD   a,c   
0907   B0                     OR   b   
0908   20 F6                  JR   nz,doClosure1   
090A                DOCLOSURE3:      
090A   ED 4B A8 18            LD   bc,(vTemp1)   ; restore IP
090E   DD E9                  JP   (ix)   
0910                             ; ; readIdent
0910                             ; ; reads identifier from input stream into buffer
0910                             ; ; input: bc = IP, de = buffer
0910                             ; readIdent:
0910                             ;     ld h,msb(opcodesBase)               ; this table identifies the char type
0910                             ;     jr readIdent1
0910                             ; readIdent0:                             ; copy to PAD area
0910                             ;     inc bc                              ; characters that are part of the identifier
0910                             ;     inc de
0910                             ; readIdent1:                             ; 0-9 A-Z a-z
0910                             ;     ld a,(bc)
0910                             ;     ld (de),a
0910                             ;     cp " "+1
0910                             ;     jr c,readIdent2
0910                             ;     ld l,a
0910                             ;     ld a,(hl)
0910                             ;     cp lsb(ident_)
0910                             ;     jr z,readIdent0
0910                             ;     cp lsb(num_)
0910                             ;     jr z,readIdent0
0910                             ; readIdent2:
0910                             ;     dec bc
0910                             ;     xor a
0910                             ;     ld (de),a                           ; terminate string with NUL
0910                             ;     ret
0910                INIT:        
0910   DD 2A A4 18            LD   ix,(vNext)   
0914   FD 21 80 18            LD   iy,STACK   
0918   21 80 01               LD   hl,isysVars   
091B   11 98 18               LD   de,sysVars   
091E   01 10 00               LD   bc,8 * 2   
0921   ED B0                  LDIR      
0923   21 AA 18               LD   hl,vars   
0926   06 34                  LD   b,26 + 26   
0928                INIT0:       
0928   36 CF                  LD   (hl),$CF   ; compile rst$08 nop nop
092A   23                     INC   hl   
092B   AF                     XOR   a   
092C   77                     LD   (hl),a   
092D   23                     INC   hl   
092E   77                     LD   (hl),a   
092F   23                     INC   hl   
0930   10 F6                  DJNZ   init0   
0932                             ;     ld a,UNUSED
0932                             ;     ld b,0
0932                             ;     ld hl, hashSlots
0932                             ; init1:
0932                             ;     ld (hl),a
0932                             ;     inc hl
0932                             ;     djnz init1
0932                             ; call define
0932                             ; .pstr "abs",0
0932                             ; dw abs1
0932                             ; call define
0932                             ; .pstr "addr",0
0932                             ; dw addr
0932                             ; call define
0932                             ; .pstr "bytes",0
0932                             ; dw bytes
0932                             ; call define
0932                             ; .pstr "call",0
0932                             ; dw call
0932                             ; call define
0932                             ; .pstr "closure",0
0932                             ; dw closure
0932                             ; call define
0932                             ; .pstr "def",0
0932                             ; dw def
0932                             ; call define
0932                             ; .pstr "exec",0
0932                             ; dw exec
0932                             ; call define
0932                             ; .pstr "false",0
0932                             ; dw false1
0932                             ; call define
0932                             ; .pstr "filter",0
0932                             ; dw filter
0932                             ; call define
0932                             ; .pstr "frac",0
0932                             ; dw frac
0932                             ; call define
0932                             ; .pstr "func",0
0932                             ; dw func
0932                             ; call define
0932                             ; .pstr "hash",0
0932                             ; dw hash
0932                             ; call define
0932                             ; .pstr "input",0
0932                             ; dw input
0932                             ; call define
0932                             ; .pstr "if",0
0932                             ; dw if
0932                             ; call define
0932                             ; .pstr "ifte",0
0932                             ; dw ifte
0932                             ; call define
0932                             ; .pstr "key",0
0932                             ; dw key
0932                             ; call define
0932                             ; .pstr "let",0
0932                             ; dw let
0932                             ; call define
0932                             ; .pstr "loop",0
0932                             ; dw loop
0932                             ; call define
0932                             ; .pstr "map",0
0932                             ; dw map
0932                             ; call define
0932                             ; .pstr "mod",0
0932                             ; dw mod
0932                             ; call define
0932                             ; .pstr "neg",0
0932                             ; dw neg
0932                             ; call define
0932                             ; .pstr "nil",0
0932                             ; dw null1
0932                             ; call define
0932                             ; .pstr "output",0
0932                             ; dw output
0932                             ; call define
0932                             ; .pstr "scan",0
0932                             ; dw scan
0932                             ; call define
0932                             ; .pstr "set",0
0932                             ; dw set
0932                             ; call define
0932                             ; .pstr "shiftLeft",0
0932                             ; dw shiftLeft
0932                             ; call define
0932                             ; .pstr "shiftRight",0
0932                             ; dw shiftRight
0932                             ; call define
0932                             ; .pstr "sqrt",0
0932                             ; dw sqrt1
0932                             ; call define
0932                             ; .pstr "switch",0
0932                             ; dw switch
0932                             ; call define
0932                             ; .pstr "true",0
0932                             ; dw true1
0932                             ; call define
0932                             ; .pstr "words",0
0932                             ; dw words
0932   C9                     RET      
0933                START:       
0933   31 80 18               LD   sp,STACK   ; start of monty
0936   CD 10 09               CALL   init   ; setups
0939   CD C4 07               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
093C   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
0949                INTERPRET:      
0949   CD B4 07               CALL   prompt   
094C   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
094F   ED 43 9C 18            LD   (vTIBPtr),bc   
0953                INTERPRET2:      ; calc nesting (a macro might have changed it)
0953   1E 00                  LD   e,0   ; initilize nesting value
0955   C5                     PUSH   bc   ; save offset into TIB,
0956                             ; bc is also the count of chars in TIB
0956   21 00 1A               LD   hl,TIB   ; hl is start of TIB
0959   18 06                  JR   interpret4   
095B                INTERPRET3:      
095B   7E                     LD   a,(hl)   ; a = char in TIB
095C   23                     INC   hl   ; inc pointer into TIB
095D   0B                     DEC   bc   ; dec count of chars in TIB
095E   CD 88 07               CALL   nesting   ; update nesting value
0961                INTERPRET4:      
0961   79                     LD   a,c   ; is count zero?
0962   B0                     OR   b   
0963   20 F6                  JR   nz,interpret3   ; if not loop
0965   C1                     POP   bc   ; restore offset into TIB
0966                INTERPRET5:      
0966   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0969   FE 20                  CP   $20   ; compare to space
096B   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
096D   FE 00                  CP   $0   ; is it end of string? NUL end of string
096F                             ; ???? NEEDED?
096F   28 27                  JR   z,interpret8   
0971   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0973   28 10                  JR   z,interpret7   ; if anything else its macro/control
0975                             ; macro
0975                             ;  ld (vTIBPtr),bc
0975                             ;  ld hl,ctrlCodes
0975                             ;  add a,l			            ; look up key of macros
0975                             ;  ld l,a
0975                             ;  ld e,(hl)
0975                             ;  ld a,e
0975                             ;  or a
0975                             ;  jr z,macro1
0975                             ;  ld d,msb(macros)
0975                             ;  push de
0975                             ;  call call		            ; monty exec_ operation and jump to it
0975                             ;  db DC1,0
0975                             ; macro1:
0975                             ;  ld bc,(vTIBPtr)
0975   18 DC                  JR   interpret2   
0977                INTERPRET6:      
0977   21 00 1A               LD   hl,TIB   
097A   09                     ADD   hl,bc   
097B   77                     LD   (hl),a   ; store the character in textbuf
097C   03                     INC   bc   
097D   CD 85 00               CALL   putchar   ; echo character to screen
0980   CD 88 07               CALL   nesting   
0983   18 E1                  JR   interpret5   ; wait for next character
0985                INTERPRET7:      
0985   21 00 1A               LD   hl,TIB   
0988   09                     ADD   hl,bc   
0989   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
098B   23                     INC   hl   
098C   36 0A                  LD   (hl),"\n"   
098E   23                     INC   hl   
098F   03                     INC   bc   
0990   03                     INC   bc   
0991   CD BD 07               CALL   crlf   ; echo character to screen
0994   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0995   B7                     OR   a   
0996   20 CE                  JR   nz,interpret5   
0998                INTERPRET8:      
0998   ED 43 9C 18            LD   (vTIBPtr),bc   
099C   01 00 1A               LD   bc,TIB   ; Instructions stored on heap at address HERE,
099F                             ; we pressed enter
099F   0B                     DEC   bc   
09A0                NEXT:        
09A0   03                     INC   bc   ; Increment the IP
09A1   0A                     LD   a,(bc)   ; Get the next character and dispatch
09A2   FE 20                  CP   " "   ; whitespace?
09A4   28 FA                  JR   z,next   ; space? ignore
09A6   38 0B                  JR   c,next1   
09A8   FE 80                  CP   $80   ; if bit 7 = 1, treat as a big endian 15 bit address
09AA   30 16                  JR   nc,next2   
09AC   6F                     LD   l,a   ; index into table
09AD   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
09AF   6E                     LD   l,(hl)   ; get low jump address
09B0   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
09B2   E9                     JP   (hl)   ; Jump to routine
09B3                NEXT1:       
09B3                             ; cp ESC                      ; escape from interpreter, needed???
09B3                             ; jr z,escape_
09B3   FE 00                  CP   NUL   ; end of input string?
09B5   28 11                  JR   z,exit_   
09B7   FE 11                  CP   DC1   ; literal number
09B9   28 10                  JR   z,literal_   
09BB   FE 12                  CP   DC2   ; enter routine
09BD   28 15                  JR   z,enter_   
09BF   C3 49 09               JP   interpret   ; no, other whitespace, macros?
09C2                NEXT2:       
09C2   67                     LD   h,a   ; hl = big endian 15 bit address, ignore high bit
09C3   03                     INC   bc   
09C4   0A                     LD   a,(bc)   
09C5   6F                     LD   l,a   
09C6   29                     ADD   hl,hl   ; hl = word aligned 16 bit address
09C7   E9                     JP   (hl)   
09C8                             ; escape_:
09C8                             ;     inc bc                      ; falls through
09C8                EXIT_:       
09C8   60 69                  LD   hl,bc   
09CA   E9                     JP   (hl)   
09CB                LITERAL_:      
09CB   03                     INC   bc   
09CC   0A                     LD   a,(bc)   
09CD   6F                     LD   l,a   
09CE   03                     INC   bc   
09CF   0A                     LD   a,(bc)   
09D0   67                     LD   h,a   
09D1   E5                     PUSH   hl   
09D2   DD E9                  JP   (ix)   
09D4                ENTER_:      
09D4   03                     INC   bc   
09D5   0A                     LD   a,(bc)   
09D6   6F                     LD   l,a   
09D7   03                     INC   bc   
09D8   0A                     LD   a,(bc)   
09D9   67                     LD   h,a   
09DA   E9                     JP   (hl)   
09DB                ERROR:       
09DB   CD C4 07               CALL   printStr   
09DE   45 72 72 6F 72 00      .CSTR   "Error"   
09E4   CD 18 07               CALL   prtdec   
09E7   C3 49 09               JP   interpret   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                TBPTR:    DS   2   ; reserved for tests
1882                RST08:    DS   2   
1884                RST10:    DS   2   
1886                RST18:    DS   2   
1888                RST20:    DS   2   
188A                RST28:    DS   2   
188C                RST30:    DS   2   ; 
188E                BAUD:     DS   2   ; 
1890                INTVEC:   DS   2   ; 
1892                NMIVEC:   DS   2   ; 
1894                GETCVEC:   DS   2   ; 
1896                PUTCVEC:   DS   2   ; 
1898                SYSVARS:      
1898                VFRAC:    DS   2   ; initialised sys variables
189A                VDATAWIDTH:   DS   2   ; 
189C                VTIBPTR:   DS   2   ; 
189E                VPOINTER:   DS   2   ; 
18A0                VLASTDEF:   DS   2   ; 
18A2                VHASHSTR:   DS   2   ; 
18A4                VNEXT:    DS   2   ; 
18A6                VHEAPPTR:   DS   2   ; 
18A8                VTEMP1:   DS   2   ; uninitialised sys variables
18AA                VARS:        
18AA                          DS   26 * 2 * 3   ; 52 vars x 3 bytes (RST LO HI)
1946                          ALIGN   $100   
1A00                TIB:      DS   TIBSIZE   
1B00                          ALIGN   $100   
1B00                PAD:      DS   $100   
1C00                          ALIGN   $100   
1C00                HASHSLOTS:   DS   $100   
1D00                          ALIGN   $100   
1D00                HASHWORDS:   DS   $100   
1E00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 53 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               06D3 DEFINED AT LINE 1179 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 25 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1166 IN monty.asm
                    > USED AT LINE 1997 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 248 IN monty.asm
                    > USED AT LINE 255 IN monty.asm
                    > USED AT LINE 1354 IN monty.asm
                    > USED AT LINE 1395 IN monty.asm
                    > USED AT LINE 1419 IN monty.asm
                    > USED AT LINE 1422 IN monty.asm
                    > USED AT LINE 2028 IN monty.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 15 IN monty.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 37 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 1133 IN monty.asm
FALSE:              0000 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 1138 IN monty.asm
EMPTY:              0000 DEFINED AT LINE 19 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 20 IN monty.asm
NUL:                0000 DEFINED AT LINE 21 IN monty.asm
                    > USED AT LINE 2068 IN monty.asm
DC1:                0011 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 2070 IN monty.asm
DC2:                0012 DEFINED AT LINE 23 IN monty.asm
                    > USED AT LINE 2072 IN monty.asm
DC3:                0013 DEFINED AT LINE 24 IN monty.asm
MACROS:             0180 DEFINED AT LINE 58 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 63 IN monty.asm
                    > USED AT LINE 1815 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 75 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 77 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 111 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 214 IN monty.asm
NUM_:               0300 DEFINED AT LINE 216 IN monty.asm
                    > USED AT LINE 338 IN monty.asm
HEXNUM_:            0303 DEFINED AT LINE 219 IN monty.asm
ARG_:               0306 DEFINED AT LINE 222 IN monty.asm
STRING_:            0309 DEFINED AT LINE 225 IN monty.asm
ARG_LIST_:          030C DEFINED AT LINE 228 IN monty.asm
DOT_:               030F DEFINED AT LINE 231 IN monty.asm
DOT1:               031B DEFINED AT LINE 239 IN monty.asm
                    > USED AT LINE 236 IN monty.asm
DOT2:               0324 DEFINED AT LINE 244 IN monty.asm
                    > USED AT LINE 241 IN monty.asm
DOT3:               032E DEFINED AT LINE 250 IN monty.asm
                    > USED AT LINE 246 IN monty.asm
                    > USED AT LINE 326 IN monty.asm
DOT4:               0332 DEFINED AT LINE 253 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
                    > USED AT LINE 243 IN monty.asm
                    > USED AT LINE 249 IN monty.asm
INDEX_:             0339 DEFINED AT LINE 259 IN monty.asm
BLOCK_:             033C DEFINED AT LINE 262 IN monty.asm
BLOCKEND_:          033F DEFINED AT LINE 264 IN monty.asm
CHAR_:              0342 DEFINED AT LINE 266 IN monty.asm
ARRAY_:             0345 DEFINED AT LINE 268 IN monty.asm
ARRAYEND_:          0348 DEFINED AT LINE 270 IN monty.asm
IDENTU_:            034B DEFINED AT LINE 272 IN monty.asm
IDENTL_:            034E DEFINED AT LINE 274 IN monty.asm
SYMBOL_:            0351 DEFINED AT LINE 276 IN monty.asm
AND_:               0354 DEFINED AT LINE 278 IN monty.asm
AND1:               035B DEFINED AT LINE 286 IN monty.asm
                    > USED AT LINE 299 IN monty.asm
                    > USED AT LINE 310 IN monty.asm
OR_:                035F DEFINED AT LINE 291 IN monty.asm
XOR_:               0368 DEFINED AT LINE 301 IN monty.asm
XOR1:               0369 DEFINED AT LINE 303 IN monty.asm
                    > USED AT LINE 314 IN monty.asm
INV_:               0371 DEFINED AT LINE 312 IN monty.asm
ADD_:               0376 DEFINED AT LINE 316 IN monty.asm
HDOT_:              037C DEFINED AT LINE 323 IN monty.asm
MUL_:               0383 DEFINED AT LINE 328 IN monty.asm
SUB_:               0386 DEFINED AT LINE 331 IN monty.asm
SUB1:               0392 DEFINED AT LINE 339 IN monty.asm
                    > USED AT LINE 336 IN monty.asm
SUB2:               0394 DEFINED AT LINE 342 IN monty.asm
                    > USED AT LINE 1175 IN monty.asm
NOT_:               039A DEFINED AT LINE 348 IN monty.asm
EQ_:                039F DEFINED AT LINE 352 IN monty.asm
EQ1:                03A0 DEFINED AT LINE 354 IN monty.asm
                    > USED AT LINE 350 IN monty.asm
GT_:                03A4 DEFINED AT LINE 358 IN monty.asm
LT_:                03AF DEFINED AT LINE 367 IN monty.asm
LT1:                03B8 DEFINED AT LINE 374 IN monty.asm
                    > USED AT LINE 365 IN monty.asm
DIV_:               03C1 DEFINED AT LINE 380 IN monty.asm
COMMAND_:           03D0 DEFINED AT LINE 391 IN monty.asm
COMMENT:            03DC DEFINED AT LINE 399 IN monty.asm
                    > USED AT LINE 395 IN monty.asm
                    > USED AT LINE 403 IN monty.asm
NOP_:               03E5 DEFINED AT LINE 407 IN monty.asm
SHIFTLEFT:          03E7 DEFINED AT LINE 416 IN monty.asm
                    > USED AT LINE 371 IN monty.asm
SHIFTLEFT1:         03EF DEFINED AT LINE 423 IN monty.asm
                    > USED AT LINE 426 IN monty.asm
SHIFTLEFT2:         03F0 DEFINED AT LINE 425 IN monty.asm
                    > USED AT LINE 422 IN monty.asm
SHIFTRIGHT:         03F7 DEFINED AT LINE 433 IN monty.asm
                    > USED AT LINE 362 IN monty.asm
SHIFTRIGHT1:        03FF DEFINED AT LINE 440 IN monty.asm
                    > USED AT LINE 444 IN monty.asm
SHIFTRIGHT2:        0403 DEFINED AT LINE 443 IN monty.asm
                    > USED AT LINE 439 IN monty.asm
MUL:                040A DEFINED AT LINE 449 IN monty.asm
                    > USED AT LINE 329 IN monty.asm
MUL2:               0414 DEFINED AT LINE 458 IN monty.asm
                    > USED AT LINE 467 IN monty.asm
NUM:                0426 DEFINED AT LINE 472 IN monty.asm
                    > USED AT LINE 217 IN monty.asm
NUM0:               042F DEFINED AT LINE 478 IN monty.asm
                    > USED AT LINE 476 IN monty.asm
NUM1:               0430 DEFINED AT LINE 480 IN monty.asm
                    > USED AT LINE 497 IN monty.asm
NUM2:               0448 DEFINED AT LINE 498 IN monty.asm
                    > USED AT LINE 483 IN monty.asm
                    > USED AT LINE 485 IN monty.asm
                    > USED AT LINE 520 IN monty.asm
                    > USED AT LINE 522 IN monty.asm
NUM3:               0453 DEFINED AT LINE 506 IN monty.asm
                    > USED AT LINE 501 IN monty.asm
HEXNUM:             0456 DEFINED AT LINE 510 IN monty.asm
                    > USED AT LINE 220 IN monty.asm
HEXNUM1:            0459 DEFINED AT LINE 512 IN monty.asm
                    > USED AT LINE 529 IN monty.asm
HEXNUM2:            0461 DEFINED AT LINE 518 IN monty.asm
                    > USED AT LINE 516 IN monty.asm
STRING:             0473 DEFINED AT LINE 534 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
STRING1:            047C DEFINED AT LINE 541 IN monty.asm
                    > USED AT LINE 548 IN monty.asm
STRING2:            047F DEFINED AT LINE 545 IN monty.asm
                    > USED AT LINE 540 IN monty.asm
ARG_LIST:           0497 DEFINED AT LINE 569 IN monty.asm
                    > USED AT LINE 229 IN monty.asm
ARG_LIST1:          04A1 DEFINED AT LINE 576 IN monty.asm
                    > USED AT LINE 594 IN monty.asm
ARG_LIST2:          04AD DEFINED AT LINE 584 IN monty.asm
                    > USED AT LINE 581 IN monty.asm
ARG_LIST3:          04B5 DEFINED AT LINE 592 IN monty.asm
                    > USED AT LINE 583 IN monty.asm
                    > USED AT LINE 590 IN monty.asm
ARG_LIST4:          04B8 DEFINED AT LINE 595 IN monty.asm
                    > USED AT LINE 579 IN monty.asm
ARG_LIST5:          04BD DEFINED AT LINE 600 IN monty.asm
                    > USED AT LINE 598 IN monty.asm
CHAR:               04C9 DEFINED AT LINE 611 IN monty.asm
                    > USED AT LINE 267 IN monty.asm
CHAR1:              04CC DEFINED AT LINE 613 IN monty.asm
                    > USED AT LINE 624 IN monty.asm
CHAR2:              04D8 DEFINED AT LINE 622 IN monty.asm
                    > USED AT LINE 619 IN monty.asm
CHAR3:              04DB DEFINED AT LINE 625 IN monty.asm
                    > USED AT LINE 617 IN monty.asm
BLOCK:              04DE DEFINED AT LINE 629 IN monty.asm
                    > USED AT LINE 263 IN monty.asm
BLOCK1:             04E2 DEFINED AT LINE 633 IN monty.asm
                    > USED AT LINE 637 IN monty.asm
                    > USED AT LINE 657 IN monty.asm
                    > USED AT LINE 660 IN monty.asm
                    > USED AT LINE 665 IN monty.asm
                    > USED AT LINE 669 IN monty.asm
BLOCK2:             050A DEFINED AT LINE 658 IN monty.asm
                    > USED AT LINE 647 IN monty.asm
                    > USED AT LINE 649 IN monty.asm
                    > USED AT LINE 651 IN monty.asm
BLOCK3:             050D DEFINED AT LINE 661 IN monty.asm
                    > USED AT LINE 654 IN monty.asm
                    > USED AT LINE 656 IN monty.asm
BLOCK4:             0515 DEFINED AT LINE 667 IN monty.asm
                    > USED AT LINE 640 IN monty.asm
                    > USED AT LINE 642 IN monty.asm
                    > USED AT LINE 644 IN monty.asm
BLOCK5:             0518 DEFINED AT LINE 670 IN monty.asm
                    > USED AT LINE 666 IN monty.asm
BLOCKEND:           051B DEFINED AT LINE 674 IN monty.asm
                    > USED AT LINE 265 IN monty.asm
BLOCKEND1:          0547 DEFINED AT LINE 697 IN monty.asm
                    > USED AT LINE 690 IN monty.asm
BLOCKEND2:          0553 DEFINED AT LINE 704 IN monty.asm
                    > USED AT LINE 696 IN monty.asm
IF:                 056C DEFINED AT LINE 727 IN monty.asm
IFTE:               0571 DEFINED AT LINE 733 IN monty.asm
IFTE1:              0572 DEFINED AT LINE 735 IN monty.asm
                    > USED AT LINE 729 IN monty.asm
SWITCH:             057E DEFINED AT LINE 747 IN monty.asm
INDEX:              0588 DEFINED AT LINE 759 IN monty.asm
                    > USED AT LINE 260 IN monty.asm
INDEX0:             0590 DEFINED AT LINE 765 IN monty.asm
INDEX1:             0591 DEFINED AT LINE 767 IN monty.asm
                    > USED AT LINE 764 IN monty.asm
INDEX2:             059D DEFINED AT LINE 776 IN monty.asm
                    > USED AT LINE 773 IN monty.asm
SET:                05A0 DEFINED AT LINE 781 IN monty.asm
SET1:               05AE DEFINED AT LINE 791 IN monty.asm
                    > USED AT LINE 788 IN monty.asm
LOOP:               05B0 DEFINED AT LINE 796 IN monty.asm
WORDS:              05B2 DEFINED AT LINE 846 IN monty.asm
BYTES:              05B7 DEFINED AT LINE 849 IN monty.asm
BYTES1:             05BA DEFINED AT LINE 851 IN monty.asm
                    > USED AT LINE 848 IN monty.asm
ARRAY:              05BF DEFINED AT LINE 855 IN monty.asm
                    > USED AT LINE 269 IN monty.asm
ARRAYEND:           05DB DEFINED AT LINE 869 IN monty.asm
                    > USED AT LINE 271 IN monty.asm
ARRAYEND1:          05FC DEFINED AT LINE 889 IN monty.asm
                    > USED AT LINE 898 IN monty.asm
ARRAYEND2:          060C DEFINED AT LINE 901 IN monty.asm
                    > USED AT LINE 887 IN monty.asm
                    > USED AT LINE 913 IN monty.asm
ARRAYEND3:          061F DEFINED AT LINE 915 IN monty.asm
                    > USED AT LINE 899 IN monty.asm
HASH:               063A DEFINED AT LINE 934 IN monty.asm
DEF:                063C DEFINED AT LINE 944 IN monty.asm
LET:                063C DEFINED AT LINE 954 IN monty.asm
DOLET:              063E DEFINED AT LINE 991 IN monty.asm
DOLET2:             0642 DEFINED AT LINE 994 IN monty.asm
DOLET3:             0646 DEFINED AT LINE 999 IN monty.asm
ADDR:               0650 DEFINED AT LINE 1008 IN monty.asm
SYMBOL:             0652 DEFINED AT LINE 1026 IN monty.asm
                    > USED AT LINE 277 IN monty.asm
IDENTU:             0654 DEFINED AT LINE 1056 IN monty.asm
                    > USED AT LINE 273 IN monty.asm
IDENTL:             0659 DEFINED AT LINE 1060 IN monty.asm
                    > USED AT LINE 275 IN monty.asm
IDENT1:             065C DEFINED AT LINE 1063 IN monty.asm
                    > USED AT LINE 1059 IN monty.asm
FRAC:               0661 DEFINED AT LINE 1069 IN monty.asm
SQRT1:              0668 DEFINED AT LINE 1075 IN monty.asm
ABS1:               0675 DEFINED AT LINE 1084 IN monty.asm
MOD:                0682 DEFINED AT LINE 1097 IN monty.asm
EQUALS:             068E DEFINED AT LINE 1109 IN monty.asm
                    > USED AT LINE 356 IN monty.asm
LESSTHANEQ:         0696 DEFINED AT LINE 1117 IN monty.asm
                    > USED AT LINE 376 IN monty.asm
LESSTHAN:           069B DEFINED AT LINE 1124 IN monty.asm
                    > USED AT LINE 378 IN monty.asm
LESSTHAN1:          06A0 DEFINED AT LINE 1129 IN monty.asm
                    > USED AT LINE 1120 IN monty.asm
TRUE1:              06A3 DEFINED AT LINE 1132 IN monty.asm
                    > USED AT LINE 1112 IN monty.asm
NULL1:              06A9 DEFINED AT LINE 1136 IN monty.asm
FALSE1:             06A9 DEFINED AT LINE 1137 IN monty.asm
                    > USED AT LINE 1113 IN monty.asm
                    > USED AT LINE 1127 IN monty.asm
                    > USED AT LINE 1130 IN monty.asm
INPUT:              06AF DEFINED AT LINE 1144 IN monty.asm
OUTPUT:             06BA DEFINED AT LINE 1156 IN monty.asm
KEY:                06C3 DEFINED AT LINE 1165 IN monty.asm
NEG:                06CC DEFINED AT LINE 1172 IN monty.asm
FILTER:             06D3 DEFINED AT LINE 1177 IN monty.asm
MAP:                06D3 DEFINED AT LINE 1178 IN monty.asm
DIVIDE:             06D5 DEFINED AT LINE 1292 IN monty.asm
                    > USED AT LINE 385 IN monty.asm
                    > USED AT LINE 1102 IN monty.asm
DIVIDE1:            06DA DEFINED AT LINE 1295 IN monty.asm
                    > USED AT LINE 1307 IN monty.asm
DIVIDE2:            06E7 DEFINED AT LINE 1303 IN monty.asm
                    > USED AT LINE 1300 IN monty.asm
DIVIDE3:            06E8 DEFINED AT LINE 1305 IN monty.asm
                    > USED AT LINE 1302 IN monty.asm
SQUAREROOT:         06EE DEFINED AT LINE 1315 IN monty.asm
                    > USED AT LINE 1078 IN monty.asm
SQUAREROOT1:        06F3 DEFINED AT LINE 1319 IN monty.asm
                    > USED AT LINE 1340 IN monty.asm
SQUAREROOT4:        070E DEFINED AT LINE 1339 IN monty.asm
                    > USED AT LINE 1333 IN monty.asm
SQUAREROOT5:        0715 DEFINED AT LINE 1344 IN monty.asm
                    > USED AT LINE 1342 IN monty.asm
PRTDEC:             0718 DEFINED AT LINE 1350 IN monty.asm
                    > USED AT LINE 252 IN monty.asm
                    > USED AT LINE 2111 IN monty.asm
PRTDEC0:            0727 DEFINED AT LINE 1361 IN monty.asm
                    > USED AT LINE 1352 IN monty.asm
PRTDEC1:            0749 DEFINED AT LINE 1377 IN monty.asm
                    > USED AT LINE 1365 IN monty.asm
                    > USED AT LINE 1367 IN monty.asm
                    > USED AT LINE 1369 IN monty.asm
                    > USED AT LINE 1371 IN monty.asm
                    > USED AT LINE 1374 IN monty.asm
PRTDEC2:            074B DEFINED AT LINE 1379 IN monty.asm
                    > USED AT LINE 1382 IN monty.asm
PRTDEC3:            075B DEFINED AT LINE 1391 IN monty.asm
                    > USED AT LINE 1386 IN monty.asm
PRTDEC4:            075C DEFINED AT LINE 1393 IN monty.asm
                    > USED AT LINE 1390 IN monty.asm
PRTHEX:             0760 DEFINED AT LINE 1397 IN monty.asm
                    > USED AT LINE 237 IN monty.asm
                    > USED AT LINE 325 IN monty.asm
PRTHEX2:            076B DEFINED AT LINE 1405 IN monty.asm
                    > USED AT LINE 1400 IN monty.asm
                    > USED AT LINE 1402 IN monty.asm
PRTHEX3:            0774 DEFINED AT LINE 1413 IN monty.asm
                    > USED AT LINE 1411 IN monty.asm
PRTSTR0:            077F DEFINED AT LINE 1421 IN monty.asm
                    > USED AT LINE 1427 IN monty.asm
PRTSTR:             0783 DEFINED AT LINE 1424 IN monty.asm
                    > USED AT LINE 242 IN monty.asm
                    > USED AT LINE 1487 IN monty.asm
NESTING:            0788 DEFINED AT LINE 1440 IN monty.asm
                    > USED AT LINE 1988 IN monty.asm
                    > USED AT LINE 2029 IN monty.asm
NESTING1A:          0793 DEFINED AT LINE 1447 IN monty.asm
                    > USED AT LINE 1444 IN monty.asm
NESTING1:           0796 DEFINED AT LINE 1450 IN monty.asm
                    > USED AT LINE 1442 IN monty.asm
NESTING2:           07A5 DEFINED AT LINE 1459 IN monty.asm
                    > USED AT LINE 1454 IN monty.asm
                    > USED AT LINE 1456 IN monty.asm
NESTING3:           07A7 DEFINED AT LINE 1462 IN monty.asm
                    > USED AT LINE 1458 IN monty.asm
NESTING4:           07B2 DEFINED AT LINE 1469 IN monty.asm
                    > USED AT LINE 1464 IN monty.asm
                    > USED AT LINE 1466 IN monty.asm
PROMPT:             07B4 DEFINED AT LINE 1473 IN monty.asm
                    > USED AT LINE 1972 IN monty.asm
CRLF:               07BD DEFINED AT LINE 1478 IN monty.asm
                    > USED AT LINE 2041 IN monty.asm
PRINTSTR:           07C4 DEFINED AT LINE 1485 IN monty.asm
                    > USED AT LINE 1474 IN monty.asm
                    > USED AT LINE 1479 IN monty.asm
                    > USED AT LINE 1968 IN monty.asm
                    > USED AT LINE 2109 IN monty.asm
EXECSTR:            07CB DEFINED AT LINE 1499 IN monty.asm
CALL:               07D6 DEFINED AT LINE 1529 IN monty.asm
EXEC:               07D8 DEFINED AT LINE 1536 IN monty.asm
EXEC0:              07D9 DEFINED AT LINE 1538 IN monty.asm
                    > USED AT LINE 741 IN monty.asm
                    > USED AT LINE 743 IN monty.asm
                    > USED AT LINE 755 IN monty.asm
EXEC1:              07DF DEFINED AT LINE 1543 IN monty.asm
                    > USED AT LINE 1541 IN monty.asm
EXEC2:              07FF DEFINED AT LINE 1560 IN monty.asm
                    > USED AT LINE 1552 IN monty.asm
DOCALL:             0806 DEFINED AT LINE 1569 IN monty.asm
DOCALL1:            081C DEFINED AT LINE 1587 IN monty.asm
                    > USED AT LINE 1581 IN monty.asm
DOCALL2:            0822 DEFINED AT LINE 1593 IN monty.asm
                    > USED AT LINE 1597 IN monty.asm
DOCALL3:            0827 DEFINED AT LINE 1598 IN monty.asm
                    > USED AT LINE 1592 IN monty.asm
DOCALL4:            0833 DEFINED AT LINE 1609 IN monty.asm
                    > USED AT LINE 1559 IN monty.asm
                    > USED AT LINE 1564 IN monty.asm
                    > USED AT LINE 1586 IN monty.asm
DOCALL5:            083F DEFINED AT LINE 1616 IN monty.asm
                    > USED AT LINE 1573 IN monty.asm
FUNC:               0841 DEFINED AT LINE 1620 IN monty.asm
FUNC1:              0859 DEFINED AT LINE 1641 IN monty.asm
                    > USED AT LINE 1665 IN monty.asm
                    > USED AT LINE 1668 IN monty.asm
                    > USED AT LINE 1673 IN monty.asm
                    > USED AT LINE 1677 IN monty.asm
FUNC2:              087F DEFINED AT LINE 1666 IN monty.asm
                    > USED AT LINE 1655 IN monty.asm
                    > USED AT LINE 1657 IN monty.asm
                    > USED AT LINE 1659 IN monty.asm
FUNC3:              0882 DEFINED AT LINE 1669 IN monty.asm
                    > USED AT LINE 1662 IN monty.asm
                    > USED AT LINE 1664 IN monty.asm
FUNC4:              088A DEFINED AT LINE 1675 IN monty.asm
                    > USED AT LINE 1648 IN monty.asm
                    > USED AT LINE 1650 IN monty.asm
                    > USED AT LINE 1652 IN monty.asm
FUNC4A:             088D DEFINED AT LINE 1678 IN monty.asm
                    > USED AT LINE 1674 IN monty.asm
ARG:                0899 DEFINED AT LINE 1689 IN monty.asm
                    > USED AT LINE 223 IN monty.asm
ARG0:               08B7 DEFINED AT LINE 1710 IN monty.asm
                    > USED AT LINE 1716 IN monty.asm
ARG0A:              08C0 DEFINED AT LINE 1718 IN monty.asm
                    > USED AT LINE 1695 IN monty.asm
                    > USED AT LINE 1702 IN monty.asm
ARG1:               08C5 DEFINED AT LINE 1721 IN monty.asm
                    > USED AT LINE 1714 IN monty.asm
ARG1A:              08CD DEFINED AT LINE 1728 IN monty.asm
                    > USED AT LINE 1720 IN monty.asm
CLOSURE:            08D0 DEFINED AT LINE 1734 IN monty.asm
DOCLOSURE:          08EA DEFINED AT LINE 1752 IN monty.asm
DOCLOSURE1:         0900 DEFINED AT LINE 1770 IN monty.asm
                    > USED AT LINE 1780 IN monty.asm
DOCLOSURE2:         0906 DEFINED AT LINE 1777 IN monty.asm
                    > USED AT LINE 1769 IN monty.asm
DOCLOSURE3:         090A DEFINED AT LINE 1781 IN monty.asm
                    > USED AT LINE 1760 IN monty.asm
INIT:               0910 DEFINED AT LINE 1812 IN monty.asm
                    > USED AT LINE 7
                    > USED AT LINE 1967 IN monty.asm
INIT0:              0928 DEFINED AT LINE 1821 IN monty.asm
                    > USED AT LINE 1829 IN monty.asm
START:              0933 DEFINED AT LINE 1965 IN monty.asm
                    > USED AT LINE 8
INTERPRET:          0949 DEFINED AT LINE 1971 IN monty.asm
                    > USED AT LINE 2074 IN monty.asm
                    > USED AT LINE 2112 IN monty.asm
INTERPRET2:         0953 DEFINED AT LINE 1977 IN monty.asm
                    > USED AT LINE 2021 IN monty.asm
INTERPRET3:         095B DEFINED AT LINE 1984 IN monty.asm
                    > USED AT LINE 1993 IN monty.asm
INTERPRET4:         0961 DEFINED AT LINE 1990 IN monty.asm
                    > USED AT LINE 1982 IN monty.asm
INTERPRET5:         0966 DEFINED AT LINE 1996 IN monty.asm
                    > USED AT LINE 2030 IN monty.asm
                    > USED AT LINE 2044 IN monty.asm
INTERPRET6:         0977 DEFINED AT LINE 2023 IN monty.asm
                    > USED AT LINE 1999 IN monty.asm
INTERPRET7:         0985 DEFINED AT LINE 2032 IN monty.asm
                    > USED AT LINE 2004 IN monty.asm
INTERPRET8:         0998 DEFINED AT LINE 2046 IN monty.asm
                    > USED AT LINE 2002 IN monty.asm
NEXT:               09A0 DEFINED AT LINE 2052 IN monty.asm
                    > USED AT LINE 70 IN monty.asm
                    > USED AT LINE 2056 IN monty.asm
NEXT1:              09B3 DEFINED AT LINE 2065 IN monty.asm
                    > USED AT LINE 2057 IN monty.asm
NEXT2:              09C2 DEFINED AT LINE 2075 IN monty.asm
                    > USED AT LINE 2059 IN monty.asm
EXIT_:              09C8 DEFINED AT LINE 2085 IN monty.asm
                    > USED AT LINE 2069 IN monty.asm
LITERAL_:           09CB DEFINED AT LINE 2089 IN monty.asm
                    > USED AT LINE 2071 IN monty.asm
ENTER_:             09D4 DEFINED AT LINE 2099 IN monty.asm
                    > USED AT LINE 2073 IN monty.asm
ERROR:              09DB DEFINED AT LINE 2108 IN monty.asm
                    > USED AT LINE 397 IN monty.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1545 IN monty.asm
                    > USED AT LINE 1814 IN monty.asm
                    > USED AT LINE 1966 IN monty.asm
TBPTR:              1880 DEFINED AT LINE 6 IN ram.asm
RST08:              1882 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1884 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1886 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1888 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              188A DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              188C DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               188E DEFINED AT LINE 14 IN ram.asm
INTVEC:             1890 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1892 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1894 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1896 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1898 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1816 IN monty.asm
VFRAC:              1898 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 386 IN monty.asm
                    > USED AT LINE 1070 IN monty.asm
                    > USED AT LINE 1079 IN monty.asm
VDATAWIDTH:         189A DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 762 IN monty.asm
                    > USED AT LINE 786 IN monty.asm
                    > USED AT LINE 852 IN monty.asm
                    > USED AT LINE 885 IN monty.asm
VTIBPTR:            189C DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 1975 IN monty.asm
                    > USED AT LINE 2047 IN monty.asm
VPOINTER:           189E DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 769 IN monty.asm
                    > USED AT LINE 784 IN monty.asm
                    > USED AT LINE 993 IN monty.asm
                    > USED AT LINE 1724 IN monty.asm
VLASTDEF:           18A0 DEFINED AT LINE 26 IN ram.asm
VHASHSTR:           18A2 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 1004 IN monty.asm
VNEXT:              18A4 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 1813 IN monty.asm
VHEAPPTR:           18A6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 535 IN monty.asm
                    > USED AT LINE 552 IN monty.asm
                    > USED AT LINE 571 IN monty.asm
                    > USED AT LINE 602 IN monty.asm
                    > USED AT LINE 879 IN monty.asm
                    > USED AT LINE 925 IN monty.asm
                    > USED AT LINE 926 IN monty.asm
                    > USED AT LINE 1621 IN monty.asm
                    > USED AT LINE 1681 IN monty.asm
                    > USED AT LINE 1683 IN monty.asm
                    > USED AT LINE 1735 IN monty.asm
                    > USED AT LINE 1746 IN monty.asm
                    > USED AT LINE 1748 IN monty.asm
VTEMP1:             18A8 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 872 IN monty.asm
                    > USED AT LINE 927 IN monty.asm
                    > USED AT LINE 1762 IN monty.asm
                    > USED AT LINE 1782 IN monty.asm
VARS:               18AA DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 1819 IN monty.asm
TIB:                1A00 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1981 IN monty.asm
                    > USED AT LINE 2024 IN monty.asm
                    > USED AT LINE 2033 IN monty.asm
                    > USED AT LINE 2048 IN monty.asm
PAD:                1B00 DEFINED AT LINE 40 IN ram.asm
HASHSLOTS:          1C00 DEFINED AT LINE 43 IN ram.asm
HASHWORDS:          1D00 DEFINED AT LINE 46 IN ram.asm
HEAP:               1E00 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 71 IN monty.asm
