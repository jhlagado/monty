0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 21               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 21               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 21               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 21               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 21               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 21               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 21               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 21               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 21               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 21               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 20               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 21               LD   (RST08),HL   
0094   22 D2 21               LD   (RST10),HL   
0097   22 D4 21               LD   (RST18),HL   
009A   22 D6 21               LD   (RST20),HL   
009D   22 D8 21               LD   (RST28),HL   
00A0   22 DA 21               LD   (RST30),HL   
00A3   22 DE 21               LD   (INTVEC),HL   
00A6   22 E0 21               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 21               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 21               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 80 20               LD   sp,STACK   
00C6   CD 1A 0C               CALL   init   
00C9   C3 38 0C               JP   start   
00CC                             ; 
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                STKSIZE:   EQU   $80   ; Stack size
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                BUFSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                NUL:      EQU   0   ; exit code
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                CTRL_C:   EQU   3   
00CC                CTRL_E:   EQU   5   
00CC                CTRL_H:   EQU   8   
00CC                CTRL_J:   EQU   10   
00CC                CTRL_L:   EQU   12   
00CC                CTRL_P:   EQU   16   
00CC                CTRL_S:   EQU   19   
00CC                ESC:      EQU   27   
00CC                TMAGIC:   EQU   $AA   ; magic number
00CC                TRESERV:   EQU   $A0   ; reserved
00CC                TNUMBER:   EQU   $A1   ; number
00CC                TSTRING:   EQU   $A2   ; string
00CC                TPOINTER:   EQU   $A3   ; pointer
00CC                TARRAY:   EQU   $A4   ; array
00CC                TBLOCK:   EQU   $A5   ; block
00CC                TLAMBDA:   EQU   $A6   ; lambda
00CC                TARGLST:   EQU   $A7   ; arglist
00CC                             ; z80_RST8    equ     $CF
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 23                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 24                  DW   BUF   ; vBUFPtr pointer into BUF
0188   BE 0C                  DW   next   ; nNext
018A   00 26                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C                          ALIGN   $100   
0200                OPCODES:      ; still available ~ `
0200   82                     DB   lsb(nop_)   ; SP
0201   39                     DB   lsb(bang_)   ; !
0202   4D                     DB   lsb(dblquote_)   ; "
0203   41                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1E                     DB   lsb(tick_)   ; '
0208   18                     DB   lsb(lparen_)   ; (
0209   84                     DB   lsb(rparen_)   ; )
020A   36                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   4A                     DB   lsb(comma_)   ; ,
020D   50                     DB   lsb(minus_)   ; -
020E   24                     DB   lsb(dot_)   ; .
020F   7F                     DB   lsb(slash_)   ; /	
0210   3E                     DB   lsb(num_)   ; 0
0211   3E                     DB   lsb(num_)   ; 1
0212   3E                     DB   lsb(num_)   ; 2
0213   3E                     DB   lsb(num_)   ; 3
0214   3E                     DB   lsb(num_)   ; 4
0215   3E                     DB   lsb(num_)   ; 5
0216   3E                     DB   lsb(num_)   ; 6
0217   3E                     DB   lsb(num_)   ; 7
0218   3E                     DB   lsb(num_)   ; 8
0219   3E                     DB   lsb(num_)   ; 9
021A   2A                     DB   lsb(colon_)   ; :
021B   21                     DB   lsb(semicolon_)   ; ;
021C   6D                     DB   lsb(lt_)   ; <
021D   53                     DB   lsb(eq_)   ; =
021E   62                     DB   lsb(gt_)   ; >
021F   33                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   2D                     DB   lsb(upcase_)   ; A
0222   2D                     DB   lsb(upcase_)   ; B
0223   2D                     DB   lsb(upcase_)   ; C
0224   2D                     DB   lsb(upcase_)   ; D
0225   2D                     DB   lsb(upcase_)   ; E
0226   2D                     DB   lsb(upcase_)   ; F
0227   2D                     DB   lsb(upcase_)   ; G
0228   2D                     DB   lsb(upcase_)   ; h
0229   2D                     DB   lsb(upcase_)   ; I
022A   2D                     DB   lsb(upcase_)   ; J
022B   2D                     DB   lsb(upcase_)   ; K
022C   2D                     DB   lsb(upcase_)   ; L
022D   2D                     DB   lsb(upcase_)   ; M
022E   2D                     DB   lsb(upcase_)   ; N
022F   2D                     DB   lsb(upcase_)   ; O
0230   2D                     DB   lsb(upcase_)   ; p
0231   2D                     DB   lsb(upcase_)   ; Q
0232   2D                     DB   lsb(upcase_)   ; R
0233   2D                     DB   lsb(upcase_)   ; S
0234   2D                     DB   lsb(upcase_)   ; T
0235   2D                     DB   lsb(upcase_)   ; U
0236   2D                     DB   lsb(upcase_)   ; V
0237   2D                     DB   lsb(upcase_)   ; W
0238   2D                     DB   lsb(upcase_)   ; X
0239   2D                     DB   lsb(upcase_)   ; Y
023A   2D                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   15                     DB   lsb(backslash_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   47                     DB   lsb(caret_)   ; ^
023F   27                     DB   lsb(underscore_)   ; _
0240   4D                     DB   lsb(dblquote_)   ; `     used for testing string   	
0241   30                     DB   lsb(lowcase_)   ; a
0242   30                     DB   lsb(lowcase_)   ; b
0243   30                     DB   lsb(lowcase_)   ; c
0244   30                     DB   lsb(lowcase_)   ; d
0245   30                     DB   lsb(lowcase_)   ; e
0246   30                     DB   lsb(lowcase_)   ; f
0247   30                     DB   lsb(lowcase_)   ; g
0248   30                     DB   lsb(lowcase_)   ; h
0249   30                     DB   lsb(lowcase_)   ; i
024A   30                     DB   lsb(lowcase_)   ; j
024B   30                     DB   lsb(lowcase_)   ; k
024C   30                     DB   lsb(lowcase_)   ; l
024D   30                     DB   lsb(lowcase_)   ; m
024E   30                     DB   lsb(lowcase_)   ; n
024F   30                     DB   lsb(lowcase_)   ; o
0250   30                     DB   lsb(lowcase_)   ; p
0251   30                     DB   lsb(lowcase_)   ; q
0252   30                     DB   lsb(lowcase_)   ; r
0253   30                     DB   lsb(lowcase_)   ; s
0254   30                     DB   lsb(lowcase_)   ; t
0255   30                     DB   lsb(lowcase_)   ; u
0256   30                     DB   lsb(lowcase_)   ; v
0257   30                     DB   lsb(lowcase_)   ; w
0258   30                     DB   lsb(lowcase_)   ; x
0259   30                     DB   lsb(lowcase_)   ; y
025A   30                     DB   lsb(lowcase_)   ; z
025B   18                     DB   lsb(lbrace_)   ; {
025C   44                     DB   lsb(pipe_)   ; |
025D   1B                     DB   lsb(rbrace_)   ; }
025E   82                     DB   lsb(nop_)   ; ~
025F   82                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 87 03               JP   plus   
0303                AT_:         
0303   C3 99 03               JP   at   
0306                AMPER_:      
0306   C3 A3 03               JP   amper   
0309                DOLLAR_:      
0309   C3 C7 03               JP   dollar   
030C                LBRACK_:      
030C   C3 FE 03               JP   lbrack   
030F                RBRACK_:      
030F   C3 1A 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 72 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 AC 05               JP   backslash   
0318                LPAREN_:      
0318                LBRACE_:      
0318   C3 D2 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 3B 05               JP   rbrace   
031E                TICK_:       
031E   C3 97 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 CE 07               JP   semicolon   
0324                DOT_:        
0324   C3 D1 05               JP   dot   
0327                UNDERSCORE_:      
0327   C3 C0 07               JP   underscore   
032A                COLON_:      
032A   C3 9B 04               JP   colon   
032D                UPCASE_:      
032D   C3 44 07               JP   upcase   
0330                LOWCASE_:      
0330   C3 49 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 5B 07               JP   question   
0336                STAR_:       
0336   C3 74 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 90 07               JP   num   
0341                HASH_:       
0341   C3 27 07               JP   hash   
0344                PIPE_:       
0344   C3 AE 03               JP   pipe   
0347                CARET_:      
0347   C3 81 06               JP   caret   
034A                COMMA_:      
034A   C3 AE 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 0D 08               JP   dblquote   
0350                MINUS_:      
0350   C3 35 08               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 8A 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 60 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA FA 07               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 09                  JR   lt1   
036D                LT_:         
036D   03                     INC   bc   
036E   0A                     LD   a,(bc)   
036F   FE 3C                  CP   "<"   
0371   CA EA 07               JP   z,shiftLeft   
0374   E1                     POP   hl   
0375   D1                     POP   de   
0376                LT1:         
0376   FE 3D                  CP   "="   
0378   CA 68 06               JP   z,lessthaneq   
037B   0B                     DEC   bc   
037C   C3 6D 06               JP   lessthan   
037F                SLASH_:      
037F   C3 BD 05               JP   slash   
0382                NOP_:        
0382   DD E9                  JP   (ix)   
0384                RPAREN_:      
0384   C3 C6 07               JP   rparen   
0387                             ;*******************************************************************
0387                             ; implementations
0387                             ;*******************************************************************
0387                PLUS:        
0387                ADD:         
0387   03                     INC   bc   
0388   0A                     LD   a,(bc)   
0389   FE 2B                  CP   "+"   ; ++ increment variable
038B   20 05                  JR   nz,add1   
038D   E1                     POP   hl   
038E   23                     INC   hl   
038F   C3 8C 04               JP   assign0   
0392                ADD1:        
0392   0B                     DEC   bc   
0393   D1                     POP   de   ; second term
0394   E1                     POP   hl   ; first term
0395   19                     ADD   hl,de   
0396                ADD3:        
0396   E5                     PUSH   hl   
0397   DD E9                  JP   (ix)   
0399                             ; @ addr
0399                             ; -- ptr
0399                AT:          
0399                ADDR:        
0399   ED 5B F2 21            LD   de,(vPointer)   
039D   21 F2 21               LD   hl,vPointer   
03A0   C3 2A 0B               JP   variable   
03A3                AMPER:       
03A3                AND:         
03A3   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A4   E1                     POP   hl   
03A5   7B                     LD   a,e   
03A6   A5                     AND   l   
03A7   6F                     LD   l,a   
03A8   7A                     LD   a,d   
03A9   A4                     AND   h   
03AA                AND1:        
03AA   67                     LD   h,a   
03AB   E5                     PUSH   hl   
03AC   DD E9                  JP   (ix)   
03AE                PIPE:        
03AE                OR:          
03AE   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03AF   E1                     POP   hl   
03B0   7B                     LD   a,e   
03B1   B5                     OR   l   
03B2   6F                     LD   l,a   
03B3   7A                     LD   a,d   
03B4   B4                     OR   h   
03B5   18 F3                  JR   and1   
03B7                XOR:         
03B7   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03B8                XOR1:        
03B8   E1                     POP   hl   
03B9   7B                     LD   a,e   
03BA   AD                     XOR   l   
03BB   6F                     LD   l,a   
03BC   7A                     LD   a,d   
03BD   AC                     XOR   h   
03BE   67                     LD   h,a   
03BF   E5                     PUSH   hl   
03C0   DD E9                  JP   (ix)   
03C2                INVERT:      ; Bitwise INVert the top member of the stack
03C2   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C5   18 F1                  JR   xor1   
03C7                             ; $a .. $z
03C7                             ; -- value
03C7                             ; returns value of arg
03C7                DOLLAR:      
03C7                ARG:         
03C7   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03CA   FD 56 05               LD   d,(iy+5)   
03CD   EB                     EX   de,hl   
03CE   7D                     LD   a,l   ; arg_list* == null, skip
03CF   B4                     OR   h   
03D0   28 1C                  JR   z,arg0a   
03D2   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D3   2B                     DEC   hl   
03D4   7E                     LD   a,(hl)   
03D5   23                     INC   hl   
03D6   23                     INC   hl   
03D7   B7                     OR   a   
03D8   28 14                  JR   z,arg0a   ; num_args == 0, skip
03DA   5F                     LD   e,a   ; e = a = num_args
03DB   03                     INC   bc   ; a = next char = dollar_name
03DC   0A                     LD   a,(bc)   
03DD   C5                     PUSH   bc   ; save IP
03DE   43                     LD   b,e   ; b = e = num_args
03DF   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E2   FD 56 03               LD   d,(iy+3)   
03E5                ARG0:        
03E5   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E6   1B                     DEC   de   
03E7   BE                     CP   (hl)   
03E8   28 09                  JR   z,arg1   
03EA   23                     INC   hl   ; hl = next arg_list*
03EB   10 F8                  DJNZ   arg0   
03ED   C1                     POP   bc   ; no match, restore IP
03EE                ARG0A:       
03EE   11 00 00               LD   de,0   ; return 0
03F1   18 08                  JR   arg1a   
03F3                ARG1:        
03F3   C1                     POP   bc   ; restore IP
03F4   EB                     EX   de,hl   ; hl = arg*
03F5   22 F2 21               LD   (vPointer),hl   ; store arg* in setter
03F8   5E                     LD   e,(hl)   
03F9   23                     INC   hl   
03FA   56                     LD   d,(hl)   ; de = arg
03FB                ARG1A:       
03FB   D5                     PUSH   de   ; push arg
03FC   DD E9                  JP   (ix)   
03FE                LBRACK:      
03FE                ARRAYSTART:      
03FE   11 00 00               LD   de,0   ; create stack frame
0401   D5                     PUSH   de   ; push null for IP
0402   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0405   FD 56 05               LD   d,(iy+5)   ; 
0408   D5                     PUSH   de   ; 
0409   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
040C   FD 56 03               LD   d,(iy+3)   ; 
040F   D5                     PUSH   de   ; 
0410   FD E5                  PUSH   iy   ; push BP
0412   FD 21 00 00            LD   iy,0   ; BP = SP
0416   FD 39                  ADD   iy,sp   
0418   DD E9                  JP   (ix)   
041A                RBRACK:      
041A                ARRAYEND:      
041A   FD 54                  LD   d,iyh   ; de = BP
041C   FD 5D                  LD   e,iyl   
041E   ED 43 FE 21            LD   (vTemp1),bc   ; save IP
0422   62 6B                  LD   hl,de   ; hl = de = BP
0424   B7                     OR   a   
0425   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0427   CB 3C                  SRL   h   ; 
0429   CB 1D                  RR   l   
042B   44 4D                  LD   bc,hl   ; bc = count
042D   2A F0 21               LD   hl,(vHeapPtr)   ; hl = array[-4]
0430   71                     LD   (hl),c   ; write num items in length word
0431   23                     INC   hl   
0432   70                     LD   (hl),b   
0433   23                     INC   hl   ; hl = array[0], bc = count
0434                             ; de = BP, hl = array[0], bc = count
0434   3E A4                  LD   a,TARRAY   ; write type tag
0436   77                     LD   (hl),a   
0437   23                     INC   hl   
0438   3E AA                  LD   a,TMAGIC   ; write magic byte
043A   77                     LD   (hl),a   
043B   23                     INC   hl   
043C                ARRAYEND1:      
043C   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
043F   77                     LD   (hl),a   ; write lsb of array item
0440   23                     INC   hl   ; move to msb of array item
0441   3A E6 21               LD   a,(vDataWidth)   ; vDataWidth=1?
0444   3D                     DEC   a   
0445   28 05                  JR   z,arrayEnd2   
0447   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
044A   77                     LD   (hl),a   ; write msb of array item
044B   23                     INC   hl   ; move to next word in array
044C                ARRAYEND2:      
044C   FD 2B                  DEC   iy   ; move to next word on stack
044E   FD 2B                  DEC   iy   
0450   0B                     DEC   bc   ; dec items count
0451   79                     LD   a,c   ; if not zero loop
0452   B0                     OR   b   
0453   20 E7                  JR   nz,arrayEnd1   
0455   EB                     EX   de,hl   ; de = end of array, hl = BP
0456   F9                     LD   sp,hl   ; sp = BP
0457   E1                     POP   hl   ; de = end of array, hl = old BP
0458   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0459   FD 62                  LD   iyh,d   
045B   FD 6B                  LD   iyl,e   
045D   D1                     POP   de   ; pop arg_list (discard)
045E   D1                     POP   de   ; pop first_arg* (discard)
045F   D1                     POP   de   ; pop IP (discard)
0460   ED 5B F0 21            LD   de,(vHeapPtr)   ; de = array[-4]
0464   13                     INC   de   ; de = array[0]
0465   13                     INC   de   
0466   13                     INC   de   
0467   13                     INC   de   
0468   D5                     PUSH   de   ; return array[0]
0469   22 F0 21               LD   (vHeapPtr),hl   ; move heap* to end of array
046C   ED 4B FE 21            LD   bc,(vTemp1)   ; restore IP
0470   DD E9                  JP   (ix)   
0472                             ; index of an array, based on vDataWidth
0472                             ; array num -- value    ; also sets vPointer to address
0472                ARRINDEX:      
0472   E1                     POP   hl   ; hl = index
0473   D1                     POP   de   ; de = array
0474   3A E6 21               LD   a,(vDataWidth)   ; a = data width
0477   3D                     DEC   a   
0478   28 01                  JR   z,arrIndex1   
047A                ARRINDEX0:      
047A   29                     ADD   hl,hl   ; if data width = 2 then double
047B                ARRINDEX1:      
047B   19                     ADD   hl,de   ; add addr
047C   22 F2 21               LD   (vPointer),hl   ; store address in setter
047F   16 00                  LD   d,0   
0481   5E                     LD   e,(hl)   
0482   B7                     OR   a   ; check data width again
0483   28 02                  JR   z,arrIndex2   
0485   23                     INC   hl   
0486   56                     LD   d,(hl)   
0487                ARRINDEX2:      
0487   D5                     PUSH   de   
0488   DD E9                  JP   (ix)   
048A                             ; value _oldValue --            ; uses address in vPointer
048A                ASSIGN:      
048A   E1                     POP   hl   ; discard last accessed value
048B   E1                     POP   hl   ; hl = new value
048C                ASSIGN0:      
048C   EB                     EX   de,hl   ; de = new value
048D                ASSIGNX:      
048D   2A F2 21               LD   hl,(vPointer)   
0490   73                     LD   (hl),e   
0491   3A E6 21               LD   a,(vDataWidth)   
0494   3D                     DEC   a   ; is it byte?
0495   28 02                  JR   z,assign1   
0497   23                     INC   hl   
0498   72                     LD   (hl),d   
0499                ASSIGN1:      
0499   DD E9                  JP   (ix)   
049B                             ; arg_list - parses input (ab:c)
049B                             ; names after the : represent uninitialised locals
049B                             ; return values are the state of the stack after the block ends
049B                COLON:       
049B                ARGLIST:      
049B   11 00 00               LD   de,0   ; d = count locals, e = count args ()
049E   2A F0 21               LD   hl,(vHeapPtr)   ; hl = heap*
04A1   23                     INC   hl   ; skip length field to start
04A2   23                     INC   hl   
04A3   E5                     PUSH   hl   ; save start of arg_list
04A4   03                     INC   bc   ; point to next char
04A5                ARGLIST1:      
04A5   0A                     LD   a,(bc)   
04A6   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A8   20 03                  JR   nz,arglist1a   
04AA   14                     INC   d   ; non zero value local count acts as flag
04AB   18 10                  JR   arglist3   
04AD                ARGLIST1A:      
04AD   FE 41                  CP   "A"   ; < "A" terminates arg_list
04AF   38 0F                  JR   c,arglist4   
04B1   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B3   30 0B                  JR   nc,arglist4   
04B5                ARGLIST2:      
04B5   77                     LD   (hl),a   
04B6   23                     INC   hl   
04B7   1C                     INC   e   ; increase arg count
04B8   AF                     XOR   a   
04B9   B2                     OR   d   
04BA   28 01                  JR   z,arglist3   
04BC   14                     INC   d   ; if d > 0 increase local count
04BD                ARGLIST3:      
04BD   03                     INC   bc   ; point to next char
04BE   18 E5                  JR   arglist1   
04C0                ARGLIST4:      
04C0   0B                     DEC   bc   
04C1   AF                     XOR   a   
04C2   B2                     OR   d   
04C3   28 01                  JR   z,arglist5   
04C5   15                     DEC   d   ; remove initial inc
04C6                ARGLIST5:      
04C6   23                     INC   hl   
04C7   22 F0 21               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04CA   E1                     POP   hl   ; hl = start of arg_list
04CB   E5                     PUSH   hl   ; return start of arg_list
04CC   2B                     DEC   hl   ; write number of locals at start - 1
04CD   72                     LD   (hl),d   
04CE   2B                     DEC   hl   ; write number of args + locals at start - 2
04CF   73                     LD   (hl),e   
04D0   DD E9                  JP   (ix)   
04D2                LBRACE:      
04D2                BLOCKSTART:      
04D2   C5                     PUSH   bc   ; return pointer to first { of block
04D3   03                     INC   bc   
04D4   16 01                  LD   d,1   ; nesting: count first parenthesis
04D6                BLOCKSTART1:      ; Skip to end of definition
04D6   0A                     LD   a,(bc)   ; Get the next character
04D7   03                     INC   bc   ; Point to next character
04D8   FE 21                  CP   " " + 1   ; ignore whitespace
04DA   38 FA                  JR   c,blockStart1   
04DC   FE 29                  CP   ")"   
04DE   28 2D                  JR   z,blockStart4   
04E0   FE 7D                  CP   "}"   
04E2   28 29                  JR   z,blockStart4   
04E4   FE 5D                  CP   "]"   
04E6   28 25                  JR   z,blockStart4   
04E8   FE 28                  CP   "("   
04EA   28 16                  JR   z,blockStart2   
04EC   FE 7B                  CP   "{"   
04EE   28 12                  JR   z,blockStart2   
04F0   FE 5B                  CP   "["   
04F2   28 0E                  JR   z,blockStart2   
04F4   FE 27                  CP   "'"   
04F6   28 0D                  JR   z,blockStart3   
04F8   FE 60                  CP   "`"   
04FA   28 09                  JR   z,blockStart3   
04FC   FE 22                  CP   DQUOTE   
04FE   28 05                  JR   z,blockStart3   
0500   18 D4                  JR   blockStart1   
0502                BLOCKSTART2:      
0502   14                     INC   d   
0503   18 D1                  JR   blockStart1   
0505                BLOCKSTART3:      
0505   3E 80                  LD   a,$80   
0507   AA                     XOR   d   
0508   47                     LD   b,a   
0509   20 CB                  JR   nz,blockStart1   
050B   18 03                  JR   blockStart5   
050D                BLOCKSTART4:      
050D   15                     DEC   d   
050E   20 C6                  JR   nz,blockStart1   ; get the next element
0510                BLOCKSTART5:      
0510   60 69                  LD   hl,bc   ; hl = IP
0512   11 00 26               LD   de,HEAP   ; is IP pointing to object in heap
0515   B7                     OR   a   ; IP - HEAP
0516   ED 52                  SBC   hl,de   
0518   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
051A   28 1C                  JR   z,blockStart6   
051C   60 69                  LD   hl,bc   ; hl = IP
051E   D1                     POP   de   ; de = block*
051F   ED 43 FE 21            LD   (vTemp1),bc   ; save IP
0523   B7                     OR   a   ; bc = size
0524   ED 52                  SBC   hl,de   
0526   44 4D                  LD   bc,hl   
0528   EB                     EX   de,hl   ; hl = block* de = heap*
0529   ED 5B F0 21            LD   de,(vHeapPtr)   
052D   D5                     PUSH   de   ; return hblock*
052E   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0530   ED 53 F0 21            LD   (vHeapPtr),de   ; heap* += size
0534   ED 4B FE 21            LD   bc,(vTemp1)   ; restore IP
0538                BLOCKSTART6:      
0538   0B                     DEC   bc   ; balanced, exit
0539   DD E9                  JP   (ix)   
053B                RBRACE:      
053B                BLOCKEND:      
053B   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
053E   FD 56 01               LD   d,(iy+1)   
0541   ED 53 FE 21            LD   (vTemp1),de   
0545   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0548   FD 56 07               LD   d,(iy+7)   
054B   ED 53 00 22            LD   (vTemp2),de   
054F   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0552   FD 56 03               LD   d,(iy+3)   
0555   EB                     EX   de,hl   
0556   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0559   FD 56 01               LD   d,(iy+1)   
055C   13                     INC   de   ; for carry flag <=
055D   B7                     OR   a   
055E   ED 52                  SBC   hl,de   
0560   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0562   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0564   FD 5D                  LD   e,iyl   
0566   21 08 00               LD   hl,8   
0569   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
056A   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
056B   18 0C                  JR   blockEnd2   
056D                BLOCKEND1:      ; same scope
056D   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0570   FD 56 03               LD   d,(iy+3)   
0573   EB                     EX   de,hl   
0574   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0576   FD 5D                  LD   e,iyl   
0578   EB                     EX   de,hl   
0579                BLOCKEND2:      
0579   44 4D                  LD   bc,hl   ; bc = hl = BP
057B   B7                     OR   a   ; hl = BP - SP = count
057C   ED 72                  SBC   hl,sp   
057E   7D                     LD   a,l   
057F   B4                     OR   h   
0580   28 09                  JR   z,blockEnd3   
0582   C5                     PUSH   bc   ; bc = count, hl = BP
0583   44 4D                  LD   bc,hl   
0585   E1                     POP   hl   
0586   2B                     DEC   hl   ; hl = BP-1
0587   1B                     DEC   de   ; de = args*-1
0588   ED B8                  LDDR      
058A   13                     INC   de   
058B                BLOCKEND3:      
058B   EB                     EX   de,hl   ; sp = de = new tos*
058C   F9                     LD   sp,hl   
058D   ED 4B 00 22            LD   bc,(vTemp2)   
0591   FD 2A FE 21            LD   iy,(vTemp1)   
0595   DD E9                  JP   (ix)   
0597                TICK:        
0597                CHAR:        
0597   21 00 00               LD   hl,0   ; if "" is empty or null
059A                CHAR1:       
059A   03                     INC   bc   ; point to next char
059B   0A                     LD   a,(bc)   
059C   FE 27                  CP   "'"   ; ' is the terminator
059E   28 09                  JR   z,char3   
05A0   FE 5C                  CP   $5c   ; \ is the escape
05A2   20 02                  JR   nz,char2   
05A4   03                     INC   bc   
05A5   0A                     LD   a,(bc)   
05A6                CHAR2:       
05A6   6F                     LD   l,a   
05A7   18 F1                  JR   char1   
05A9                CHAR3:       
05A9   E5                     PUSH   hl   
05AA   DD E9                  JP   (ix)   
05AC                BACKSLASH:      
05AC   DD E9                  JP   (ix)   
05AE                             ; , discard stack item
05AE                             ; x y -- x
05AE                COMMA:       
05AE                DISCARD:      
05AE   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05B0   FD 5D                  LD   e,iyl   
05B2   EB                     EX   de,hl   
05B3   B7                     OR   a   
05B4   ED 72                  SBC   hl,sp   
05B6   CB 7C                  BIT   7,h   
05B8   20 01                  JR   nz,discard1   
05BA   E1                     POP   hl   
05BB                DISCARD1:      
05BB   DD E9                  JP   (ix)   
05BD                SLASH:       
05BD   C3 54 08               JP   command   
05C0                             ; inc bc
05C0                             ; ld a,(bc)
05C0                             ; cp $5C
05C0                             ; jp z,comment
05C0                             ; cp "A"
05C0                             ; jp nc,command
05C0                             ; dec bc
05C0                DIV:         
05C0   D1                     POP   de   
05C1   E1                     POP   hl   
05C2   C5                     PUSH   bc   ; preserve the IP
05C3   44 4D                  LD   bc,hl   
05C5   CD 47 06               CALL   divide   
05C8   EB                     EX   de,hl   
05C9   ED 53 F4 21            LD   (vRemain),de   
05CD   C1                     POP   bc   
05CE   C3 96 03               JP   add3   
05D1                DOT:         
05D1   CD B2 0B               CALL   jumpTable   
05D4   61                     DB   "a"   
05D5   E3 05                  DW   dotArray   
05D7   68                     DB   "h"   
05D8   F7 05                  DW   dotHex   
05DA   73                     DB   "s"   
05DB   0B 06                  DW   dotStr   
05DD   63                     DB   "c"   
05DE   1F 06                  DW   dotChar   
05E0   00                     DB   NUL   
05E1   33 06                  DW   dotDec   
05E3                             ; cp "a"
05E3                             ; jp z,dotArray
05E3                             ; cp "h"
05E3                             ; jp z,dotHex
05E3                             ; cp "s"
05E3                             ; jp z,dotStr
05E3                             ; cp "c"
05E3                             ; jp z,dotChar
05E3                             ; dec bc
05E3                             ; jp dotDec
05E3                DOTARRAY:      
05E3   CD 81 06               CALL   go   
05E6   00 00                  DW   NUL   ; null closure
05E8   EC 05                  DW   dotArray_block   
05EA   A4 0B                  DW   args1A0L   
05EC                DOTARRAY_BLOCK:      
05EC   7B 24 61 2F 62 61 2F 70 78 7D 00 .CSTR   "{$a/ba/px}"   ; block
05F7                DOTHEX:      
05F7   CD 81 06               CALL   go   
05FA   00 00                  DW   NUL   ; null closure
05FC   00 06                  DW   dotHex_block   
05FE   A4 0B                  DW   args1A0L   
0600                DOTHEX_BLOCK:      
0600   7B 24 61 2F 62 68 2F 70 78 7D 00 .CSTR   "{$a/bh/px}"   ; block
060B                DOTSTR:      
060B   CD 81 06               CALL   go   
060E   00 00                  DW   NUL   ; null closure
0610   14 06                  DW   dotStr_block   
0612   A4 0B                  DW   args1A0L   
0614                DOTSTR_BLOCK:      
0614   7B 24 61 2F 62 73 2F 70 78 7D 00 .CSTR   "{$a/bs/px}"   ; block
061F                DOTCHAR:      
061F   CD 81 06               CALL   go   
0622   00 00                  DW   NUL   ; null closure
0624   28 06                  DW   dotChar_block   
0626   A4 0B                  DW   args1A0L   
0628                DOTCHAR_BLOCK:      
0628   7B 24 61 2F 62 63 2F 70 78 7D 00 .CSTR   "{$a/bc/px}"   ; block
0633                DOTDEC:      
0633   CD 81 06               CALL   go   
0636   00 00                  DW   NUL   ; closure
0638   3C 06                  DW   dotDec_block   
063A   A4 0B                  DW   args1A0L   
063C                DOTDEC_BLOCK:      
063C   7B 24 61 2F 62 64 2F 70 78 7D 00 .CSTR   "{$a/bd/px}"   ; block
0647                             ; division subroutine.
0647                             ; bc: divisor, de: dividend, hl: remainder
0647                DIVIDE:      
0647   21 00 00               LD   hl,0   ; zero the remainder
064A   3E 10                  LD   a,16   ; loop counter
064C                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
064C   CB 21                  SLA   c   
064E   CB 10                  RL   b   
0650   ED 6A                  ADC   hl,hl   
0652   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0654   38 03                  JR   c,divide2   
0656   0C                     INC   c   
0657   18 01                  JR   divide3   
0659                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0659   19                     ADD   hl,de   
065A                DIVIDE3:      
065A   3D                     DEC   a   
065B   20 EF                  JR   nz,divide1   
065D   50 59                  LD   de,bc   ; result from bc to de
065F   C9                     RET      
0660                             ; hl = value1, de = value2
0660                             ; hl = result
0660                EQUALS:      
0660   B7                     OR   a   ; reset the carry flag
0661   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0663   28 10                  JR   z,true1   
0665   C3 7B 06               JP   false1   
0668                             ; hl = value1 de = value2
0668                             ; hl = result
0668                LESSTHANEQ:      
0668   B7                     OR   a   
0669   ED 52                  SBC   hl,de   
066B   18 05                  JR   lessthan1   
066D                             ; hl = value1 de = value2
066D                             ; hl = result
066D                LESSTHAN:      
066D   B7                     OR   a   
066E   ED 52                  SBC   hl,de   
0670   28 09                  JR   z,false1   
0672                LESSTHAN1:      
0672   FA 7B 06               JP   m,false1   
0675                TRUE1:       
0675   21 FF FF               LD   hl,TRUE   
0678   E5                     PUSH   hl   
0679   DD E9                  JP   (ix)   
067B                NULL1:       
067B                FALSE1:      
067B   21 00 00               LD   hl,FALSE   
067E   E5                     PUSH   hl   
067F   DD E9                  JP   (ix)   
0681                             ; execute a block of code which ends with }
0681                             ; creates a root scope if BP == stack
0681                             ; else uses outer scope
0681                CARET:       
0681                GO:          
0681   D1                     POP   de   ; de = block*
0682                GO1:         
0682   7B                     LD   a,e   ; if block* == null, exit
0683   B2                     OR   d   
0684   20 02                  JR   nz,go2   
0686   DD E9                  JP   (ix)   
0688                GO2:         
0688   1A                     LD   a,(de)   
0689   FE 7B                  CP   "{"   
068B   28 07                  JR   z,goBlock1   
068D   FE 28                  CP   "("   
068F   C2 C7 06               JP   nz,goLambda   
0692   13                     INC   de   ; de is the address to jump back to
0693   D5                     PUSH   de   ; push de just before stack frame
0694                GOBLOCK:      
0694                GOBLOCK1:      
0694   ED 53 FE 21            LD   (vTemp1),de   ; save de
0698   21 80 20               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
069B   FD 54                  LD   d,iyh   
069D   FD 5D                  LD   e,iyl   
069F   B7                     OR   a   ; if stack* == BP then this is the root_scope
06A0   ED 52                  SBC   hl,de   
06A2   ED 5B FE 21            LD   de,(vTemp1)   ; restore de
06A6   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
06A7   B4                     OR   h   
06A8   3E 00                  LD   a,0   
06AA   28 70                  JR   z,goLambda8   
06AC   C5                     PUSH   bc   ; push IP
06AD   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
06B0   FD 46 05               LD   b,(iy+5)   
06B3   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
06B6   FD 66 03               LD   h,(iy+3)   
06B9                GOBLOCK2:      
06B9   C5                     PUSH   bc   ; arg_list*
06BA   E5                     PUSH   hl   ; first_arg*
06BB   FD E5                  PUSH   iy   ; push BP
06BD   FD 21 00 00            LD   iy,0   ; BP = SP
06C1   FD 39                  ADD   iy,sp   
06C3   42 4B                  LD   bc,de   ; bc = de = block*-1
06C5   DD E9                  JP   (ix)   
06C7                GOLAMBDA:      ; execute lambda
06C7   EB                     EX   de,hl   ; hl = lambda*
06C8   5E                     LD   e,(hl)   ; de = partial_array*
06C9   23                     INC   hl   
06CA   56                     LD   d,(hl)   
06CB   23                     INC   hl   
06CC   7B                     LD   a,e   ; if partial_array* == null skip
06CD   B2                     OR   d   
06CE   28 25                  JR   z,goLambda3   
06D0   ED 43 FE 21            LD   (vTemp1),bc   
06D4   22 00 22               LD   (vTemp2),hl   ; save bc,hl
06D7   EB                     EX   de,hl   ; hl = partial_array*
06D8   2B                     DEC   hl   ; skip type byte
06D9   2B                     DEC   hl   ; skip magic byte
06DA   2B                     DEC   hl   ; bc = count
06DB   46                     LD   b,(hl)   
06DC   2B                     DEC   hl   
06DD   4E                     LD   c,(hl)   
06DE   23                     INC   hl   ; hl = array data*
06DF   23                     INC   hl   
06E0   23                     INC   hl   
06E1   23                     INC   hl   
06E2   18 06                  JR   goLambda2   ; push each item on stack
06E4                GOLAMBDA1:      
06E4   5E                     LD   e,(hl)   ; de = partial item
06E5   23                     INC   hl   
06E6   56                     LD   d,(hl)   
06E7   23                     INC   hl   
06E8   D5                     PUSH   de   ; push on stack
06E9   0B                     DEC   bc   
06EA                GOLAMBDA2:      
06EA   79                     LD   a,c   ; if count != 0 then loop
06EB   B0                     OR   b   
06EC   20 F6                  JR   nz,goLambda1   
06EE   ED 4B FE 21            LD   bc,(vTemp1)   ; restore bc
06F2   2A 00 22               LD   hl,(vTemp2)   ; restore hl
06F5                GOLAMBDA3:      
06F5   5E                     LD   e,(hl)   ; de = block*
06F6   23                     INC   hl   
06F7   56                     LD   d,(hl)   
06F8   23                     INC   hl   
06F9   ED 53 FE 21            LD   (vTemp1),de   ; save block*
06FD   5E                     LD   e,(hl)   ; de = arg_list*
06FE   23                     INC   hl   
06FF   56                     LD   d,(hl)   
0700   23                     INC   hl   
0701   EB                     EX   de,hl   ; hl = arg_list*
0702   ED 5B FE 21            LD   de,(vTemp1)   ; restore de = block*
0706   7D                     LD   a,l   ; if arg_list* == null a = 0
0707   B4                     OR   h   
0708   20 03                  JR   nz,goLambda4   
070A   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
070B   18 0F                  JR   goLambda8   
070D                GOLAMBDA4:      ; allocate locals
070D   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
070E   7E                     LD   a,(hl)   
070F   18 03                  JR   goLambda6   
0711                GOLAMBDA5:      ; loop
0711   3B                     DEC   sp   
0712   3B                     DEC   sp   
0713   3D                     DEC   a   
0714                GOLAMBDA6:      
0714   B7                     OR   a   
0715   20 FA                  JR   nz,goLambda5   ; end loop
0717                GOLAMBDA7:      
0717   2B                     DEC   hl   ; a = num_args* x 2
0718   7E                     LD   a,(hl)   
0719   23                     INC   hl   
071A   23                     INC   hl   
071B   87                     ADD   a,a   ; a *= 2
071C                GOLAMBDA8:      
071C   C5                     PUSH   bc   ; push IP
071D   44 4D                  LD   bc,hl   
071F   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0722   85                     ADD   a,l   
0723   6F                     LD   l,a   
0724   39                     ADD   hl,sp   
0725   18 92                  JR   goBlock2   
0727                HASH:        
0727                HEXNUM:      
0727   21 00 00               LD   hl,0   ; Clear hl to accept the number
072A                HEXNUM1:      
072A   03                     INC   bc   
072B   0A                     LD   a,(bc)   ; Get the character which is a numeral
072C   CB 77                  BIT   6,a   ; is it uppercase alpha?
072E   28 02                  JR   z,hexnum2   ; no a decimal
0730   D6 07                  SUB   7   ; sub 7  to make $a - $F
0732                HEXNUM2:      
0732   D6 30                  SUB   $30   ; form decimal digit
0734   DA B2 07               JP   c,num2   
0737   FE 10                  CP   $0F+1   
0739   D2 B2 07               JP   nc,num2   
073C   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
073D   29                     ADD   hl,hl   ; 4X
073E   29                     ADD   hl,hl   ; 8X
073F   29                     ADD   hl,hl   ; 16X
0740   85                     ADD   a,l   ; add into bottom of hl
0741   6F                     LD   l,a   
0742   18 E6                  JR   hexnum1   
0744                UPCASE:      
0744   0A                     LD   a,(bc)   ; a = identifier char
0745   D6 41                  SUB   "A"   ; "A" = 0
0747   18 05                  JR   ident1   
0749                LOWCASE:      
0749   0A                     LD   a,(bc)   
074A   D6 61                  SUB   "a"   
074C   C6 1A                  ADD   a,26   
074E                IDENT1:      
074E   87                     ADD   a,a   ; l = a * 2
074F   6F                     LD   l,a   
0750   26 21                  LD   h,msb(vars)   
0752   22 F2 21               LD   (vPointer),hl   ; store address in setter
0755   5E                     LD   e,(hl)   
0756   23                     INC   hl   
0757   56                     LD   d,(hl)   
0758   D5                     PUSH   de   
0759   DD E9                  JP   (ix)   
075B                             ; if
075B                             ; condition then -- value
075B                QUESTION:      
075B                IF:          
075B   03                     INC   bc   
075C   0A                     LD   a,(bc)   
075D   FE 3F                  CP   "?"   
075F   28 06                  JR   z,ifte   
0761   0B                     DEC   bc   
0762   11 00 00               LD   de,NUL   ; NUL pointer for else
0765   18 01                  JR   ifte1   
0767                             ; ifte
0767                             ; condition then else -- value
0767                IFTE:        
0767   D1                     POP   de   ; de = else
0768                IFTE1:       
0768   E1                     POP   hl   ; hl = then
0769   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
076A   7C                     LD   a,h   
076B   B5                     OR   l   
076C   E1                     POP   hl   ; hl = then
076D   CA 82 06               JP   z,go1   ; if z de = else
0770   EB                     EX   de,hl   ; condition = false, de = then
0771   C3 82 06               JP   go1   
0774                STAR:        
0774                MUL:         
0774   D1                     POP   de   ; get first value
0775   E1                     POP   hl   
0776                MUL2:        
0776   C5                     PUSH   bc   ; Preserve the IP
0777   44 4D                  LD   bc,hl   ; bc = 2nd value
0779   21 00 00               LD   hl,0   
077C   3E 10                  LD   a,16   
077E                MUL3:        
077E   29                     ADD   hl,hl   
077F   CB 13                  RL   e   
0781   CB 12                  RL   d   
0783   30 04                  JR   nc,$+6   
0785   09                     ADD   hl,bc   
0786   30 01                  JR   nc,$+3   
0788   13                     INC   de   
0789   3D                     DEC   a   
078A   20 F2                  JR   nz,mul3   
078C   C1                     POP   bc   ; Restore the IP
078D   C3 96 03               JP   add3   
0790                NUM:         
0790   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0793   0A                     LD   a,(bc)   ; Get numeral or -
0794   FE 2D                  CP   "-"   
0796   20 01                  JR   nz,num0   
0798   03                     INC   bc   ; move to next char, no flags affected
0799                NUM0:        
0799   08                     EX   af,af'   ; save zero flag = 0 for later
079A                NUM1:        
079A   0A                     LD   a,(bc)   ; read digit
079B   D6 30                  SUB   "0"   ; less than 0?
079D   38 13                  JR   c,num2   ; not a digit, exit loop
079F   FE 0A                  CP   10   ; greater that 9?
07A1   30 0F                  JR   nc,num2   ; not a digit, exit loop
07A3   03                     INC   bc   ; inc IP
07A4   54 5D                  LD   de,hl   ; multiply hl * 10
07A6   29                     ADD   hl,hl   
07A7   29                     ADD   hl,hl   
07A8   19                     ADD   hl,de   
07A9   29                     ADD   hl,hl   
07AA   85                     ADD   a,l   ; add digit in a to hl
07AB   6F                     LD   l,a   
07AC   3E 00                  LD   a,0   
07AE   8C                     ADC   a,h   
07AF   67                     LD   h,a   
07B0   18 E8                  JR   num1   
07B2                NUM2:        
07B2   0B                     DEC   bc   
07B3   08                     EX   af,af'   ; restore zero flag
07B4   20 07                  JR   nz,num3   
07B6   EB                     EX   de,hl   ; negate the value of hl
07B7   21 00 00               LD   hl,0   
07BA   B7                     OR   a   ; jump to sub2
07BB   ED 52                  SBC   hl,de   
07BD                NUM3:        
07BD   E5                     PUSH   hl   ; Put the number on the stack
07BE   DD E9                  JP   (ix)   ; and process the next character
07C0                UNDERSCORE:      
07C0                REMAIN:      
07C0   2A F4 21               LD   hl,(vRemain)   
07C3   E5                     PUSH   hl   
07C4   DD E9                  JP   (ix)   
07C6                RPAREN:      
07C6   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
07C9   FD 46 09               LD   b,(iy+9)   
07CC   DD E9                  JP   (ix)   
07CE                             ; arg_list* block* -- ptr
07CE                SEMICOLON:      
07CE   D1                     POP   de   ; de = block* hl = heap*
07CF   2A F0 21               LD   hl,(vHeapPtr)   
07D2   AF                     XOR   a   
07D3   77                     LD   (hl),a   ; compile null partial_array*
07D4   23                     INC   hl   
07D5   77                     LD   (hl),a   
07D6   23                     INC   hl   
07D7   73                     LD   (hl),e   ; compile block*
07D8   23                     INC   hl   
07D9   72                     LD   (hl),d   
07DA   23                     INC   hl   
07DB   D1                     POP   de   ; de = block*
07DC   73                     LD   (hl),e   ; compile arg_list*
07DD   23                     INC   hl   
07DE   72                     LD   (hl),d   
07DF   23                     INC   hl   
07E0   ED 5B F0 21            LD   de,(vHeapPtr)   ; return lambda*
07E4   D5                     PUSH   de   
07E5   22 F0 21               LD   (vHeapPtr),hl   ; heap* += 4
07E8   DD E9                  JP   (ix)   
07EA                             ; shiftLeft
07EA                             ; value count -- value2          shift left count places
07EA                SHIFTLEFT:      
07EA   50 59                  LD   de,bc   ; save IP
07EC   C1                     POP   bc   ; bc = count
07ED   41                     LD   b,c   ; b = loop counter
07EE   E1                     POP   hl   
07EF   04                     INC   b   ; test for counter=0 case
07F0   18 01                  JR   shiftLeft2   
07F2                SHIFTLEFT1:      
07F2   29                     ADD   hl,hl   ; left shift hl
07F3                SHIFTLEFT2:      
07F3   10 FD                  DJNZ   shiftLeft1   
07F5   E5                     PUSH   hl   
07F6   42 4B                  LD   bc,de   ; restore IP
07F8   DD E9                  JP   (ix)   
07FA                             ; shiftRight
07FA                             ; value count -- value2          shift left count places
07FA                SHIFTRIGHT:      
07FA   50 59                  LD   de,bc   ; save IP
07FC   C1                     POP   bc   ; bc = count
07FD   41                     LD   b,c   ; b = loop counter
07FE   E1                     POP   hl   
07FF   04                     INC   b   ; test for counter=0 case
0800   18 04                  JR   shiftRight2   
0802                SHIFTRIGHT1:      
0802   CB 3C                  SRL   h   ; right shift hl
0804   CB 1D                  RR   l   
0806                SHIFTRIGHT2:      
0806   10 FA                  DJNZ   shiftRight1   
0808   E5                     PUSH   hl   
0809   42 4B                  LD   bc,de   ; restore IP
080B   DD E9                  JP   (ix)   
080D                             ; string
080D                             ; -- ptr                        ; points to start of string chars,
080D                             ; length is stored at start - 2 bytes
080D                DBLQUOTE:      
080D                STRING:      
080D   2A F0 21               LD   hl,(vHeapPtr)   ; hl = heap*
0810   23                     INC   hl   ; skip length field to start
0811   23                     INC   hl   
0812   E5                     PUSH   hl   ; save start of string
0813   03                     INC   bc   ; point to next char
0814   18 03                  JR   string2   
0816                STRING1:      
0816   77                     LD   (hl),a   
0817   23                     INC   hl   ; increase count
0818   03                     INC   bc   ; point to next char
0819                STRING2:      
0819   0A                     LD   a,(bc)   
081A   FE 22                  CP   DQUOTE   ; " is the string terminator
081C   28 04                  JR   z,string3   
081E   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0820   20 F4                  JR   nz,string1   
0822                STRING3:      
0822   AF                     XOR   a   ; write NUL to terminate string
0823   77                     LD   (hl),a   ; hl = end of string
0824   23                     INC   hl   
0825   22 F0 21               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0828   2B                     DEC   hl   ; hl = end of string without terminator
0829   D1                     POP   de   ; de = start of string
082A   D5                     PUSH   de   ; return start of string
082B   B7                     OR   a   ; hl = length bytes, de = start of string
082C   ED 52                  SBC   hl,de   
082E   EB                     EX   de,hl   
082F   2B                     DEC   hl   ; write length bytes to length field at start - 2
0830   72                     LD   (hl),d   
0831   2B                     DEC   hl   
0832   73                     LD   (hl),e   
0833   DD E9                  JP   (ix)   
0835                MINUS:       ; negative sign or subtract
0835   03                     INC   bc   ; check if sign of a number
0836   0A                     LD   a,(bc)   
0837   0B                     DEC   bc   
0838   FE 30                  CP   "0"   
083A   38 05                  JR   c,sub   
083C   FE 3A                  CP   "9"+1   
083E   DA 3E 03               JP   c,num_   
0841                SUB:         ; Subtract the value 2nd on stack from top of stack
0841   03                     INC   bc   
0842   FE 2D                  CP   "-"   
0844   20 05                  JR   nz,sub1   
0846   E1                     POP   hl   
0847   2B                     DEC   hl   
0848   C3 8C 04               JP   assign0   
084B                SUB1:        
084B   0B                     DEC   bc   
084C   D1                     POP   de   
084D   E1                     POP   hl   
084E   B7                     OR   a   
084F   ED 52                  SBC   hl,de   
0851   C3 96 03               JP   add3   
0854                             ;*******************************************************************
0854                             ; commands
0854                             ; a contains command letter
0854                             ; bc points to command letter
0854                             ;*******************************************************************
0854                COMMAND:      
0854   CD B2 0B               CALL   jumpTable   
0857   2F                     DB   "/"   
0858   91 08                  DW   comment   
085A   61                     DB   "a"   
085B   9A 08                  DW   command_a   
085D   62                     DB   "b"   
085E   D4 08                  DW   command_b   
0860   63                     DB   "c"   
0861   30 0B                  DW   chars   
0863   64                     DB   "d"   
0864   38 0B                  DW   decimal   
0866   66                     DB   "f"   
0867   7B 06                  DW   false1   
0869   68                     DB   "h"   
086A   40 0B                  DW   hexadecimal   
086C   69                     DB   "i"   
086D   64 0A                  DW   command_i   
086F   6B                     DB   "k"   
0870   51 0B                  DW   key   
0872   6E                     DB   "n"   
0873   63 0B                  DW   numbers   
0875   6F                     DB   "o"   
0876   5A 0B                  DW   output   
0878   70                     DB   "p"   
0879   70 0A                  DW   command_p   
087B   73                     DB   "s"   
087C   B6 0A                  DW   size   
087E   74                     DB   "t"   
087F   75 06                  DW   true1   
0881   76                     DB   "v"   
0882   EB 0A                  DW   command_v   
0884   78                     DB   "x"   
0885   B7 03                  DW   xor   
0887   00                     DB   NUL   
0888   C0 05                  DW   div   
088A                             ; cp "/"                      ; // comment
088A                             ; jp z,comment
088A                             ; cp "a"                      ; /ab absolute /ad address of
088A                             ; jr z,command_a
088A                             ; cp "b"                      ; /ba buf array /bb buf block
088A                             ;                             ; /bd buf decimal /bp buf params
088A                             ;                             ; /bs buf string /br break
088A                             ; jp z,command_b
088A                             ; cp "c"                      ; /c chars
088A                             ; jp z,chars
088A                             ; cp "d"                      ; /d decimal
088A                             ; jp z,decimal
088A                             ; cp "f"                      ; /f false
088A                             ; jp z,false1
088A                             ; cp "h"                      ; /h hexadecimal
088A                             ; jp z,hexadecimal
088A                             ; cp "i"                      ; /in input iv invert
088A                             ; jp z,command_i
088A                             ; cp "k"                      ; /k key
088A                             ; jp z,key
088A                             ; cp "n"                      ; /n numbers
088A                             ; jp z,numbers
088A                             ; cp "o"                      ; /o output
088A                             ; jp z,output
088A                             ; cp "p"                      ; /pa partial /pc print chars /pk print stack
088A                             ; jp z,command_p
088A                             ; cp "s"                      ; /s size
088A                             ; jp z,size
088A                             ; cp "t"                      ; /t true
088A                             ; jp z,true1
088A                             ; cp "v"                      ; /vH heap start vT TIB start /vh heapPtr /vb TIBPtr
088A                             ; jp z,command_v
088A                             ; cp "x"                      ; /x xor
088A                             ; jp z,xor
088A                             ; cp "z"                      ; /z
088A                             ; jp z,zprt
088A                ERROR1:      
088A   21 01 00               LD   hl,1   ; error 1: unknown command
088D   E5                     PUSH   hl   
088E   C3 DE 0C               JP   error   
0891                COMMENT:      
0891   03                     INC   bc   ; point to next char
0892   0A                     LD   a,(bc)   
0893   FE 20                  CP   " "   ; terminate on any char less than SP
0895   30 FA                  JR   nc,comment   
0897   0B                     DEC   bc   
0898   DD E9                  JP   (ix)   
089A                COMMAND_A:      
089A   CD B2 0B               CALL   jumpTable   
089D   62                     DB   "b"   
089E   A6 08                  DW   absolute   
08A0   64                     DB   "d"   
08A1   B3 08                  DW   addrOf   
08A3   00                     DB   NUL   
08A4   8A 08                  DW   error1   
08A6                             ; inc bc
08A6                             ; ld a,(bc)
08A6                             ; cp "b"
08A6                             ; jp z,absolute
08A6                             ; cp "d"
08A6                             ; jp z,addrOf
08A6                             ; jp error1
08A6                             ; /ab absolute
08A6                             ; num -- num
08A6                ABSOLUTE:      
08A6   E1                     POP   hl   
08A7   CB 7C                  BIT   7,h   
08A9   C8                     RET   z   
08AA   AF                     XOR   a   
08AB   95                     SUB   l   
08AC   6F                     LD   l,a   
08AD   9F                     SBC   a,a   
08AE   94                     SUB   h   
08AF   67                     LD   h,a   
08B0   E5                     PUSH   hl   
08B1   DD E9                  JP   (ix)   
08B3                             ; /ad addrOf
08B3                             ; char -- addr
08B3                ADDROF:      
08B3   E1                     POP   hl   ; a = char
08B4   7D                     LD   a,l   
08B5   FE 7B                  CP   "z"+1   ; if a > z then exit
08B7   30 19                  JR   nc,addrOf2   
08B9   D6 41                  SUB   "A"   ; a - 65
08BB   38 15                  JR   c,addrOf2   ; if < A then exit
08BD   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
08BF   38 06                  JR   c,addrOf1   
08C1   D6 06                  SUB   "a"-("Z"+1)   
08C3   FE 1A                  CP   "Z"-"A"+1   
08C5   38 0B                  JR   c,addrOf2   ; if < a then exit
08C7                ADDROF1:      
08C7   87                     ADD   a,a   ; double a
08C8   21 00 21               LD   hl,VARS   ; hl = VARS + a
08CB   85                     ADD   a,l   
08CC   6F                     LD   l,a   
08CD   3E 00                  LD   a,0   
08CF   8C                     ADC   a,h   
08D0   67                     LD   h,a   
08D1   E5                     PUSH   hl   
08D2                ADDROF2:      
08D2   DD E9                  JP   (ix)   
08D4                COMMAND_B:      
08D4   CD B2 0B               CALL   jumpTable   
08D7   61                     DB   "a"   
08D8   EF 08                  DW   bufferArray   
08DA   63                     DB   "c"   
08DB   7B 09                  DW   bufferChar   
08DD   64                     DB   "d"   
08DE   8A 09                  DW   bufferDec   
08E0   68                     DB   "h"   
08E1   EB 09                  DW   bufferHex   
08E3   72                     DB   "r"   
08E4   1A 0A                  DW   break   
08E6   73                     DB   "s"   
08E7   34 0A                  DW   bufferString   
08E9   78                     DB   "x"   
08EA   50 0A                  DW   bufferXSpaces   
08EC   00                     DB   NUL   
08ED   8A 08                  DW   error1   
08EF                             ; inc bc
08EF                             ; ld a,(bc)
08EF                             ; cp "a"                      ; /bc buffer array
08EF                             ; jp z,bufferArray
08EF                             ; cp "c"                      ; /bc buffer char
08EF                             ; jp z,bufferChar
08EF                             ; cp "d"                      ; /bd buffer decimal
08EF                             ; jp z,bufferDec
08EF                             ; cp "h"                      ; /bd buffer hexadecimal
08EF                             ; jp z,bufferHex
08EF                             ; cp "r"                      ; /br break
08EF                             ; jp z,break
08EF                             ; cp "s"                      ; /bs buffer string
08EF                             ; jp z,bufferString
08EF                             ; cp "x"                      ; /bx buffer x spaces
08EF                             ; jp z,bufferXSpaces
08EF                             ; jp error1
08EF                BUFFERARRAY:      
08EF   CD 81 06               CALL   go   
08F2   00 00                  DW   NUL   ; closure
08F4   F8 08                  DW   bufferArray_block   
08F6   AF 0B                  DW   args1A2L   
08F8                BUFFERARRAY_BLOCK:      
08F8   7B 24 61 2F 73 24 63 3D 20 60 5B 20 60 2E 73 20 30 24 62 3D 28 24 61 24 62 25 2E 20 24 62 2B 2B 20 24 63 24 62 3D 3D 2F 62 29 5E 60 20 5D 60 7D 00 .CSTR   "{$a/s$c= `[ `.s 0$b=($a$b%. $b++ $c$b==/b)^` ]`}"   ; block
0929   ED 43 FE 21            LD   (vTemp1),bc   
092D   DD 22 00 22            LD   (vTemp2),ix   
0931   ED 5B EC 21            LD   de,(vBufPtr)   
0935   3E 5B                  LD   a,"["   
0937   12                     LD   (de),a   
0938   13                     INC   de   
0939   3E 20                  LD   a," "   
093B   12                     LD   (de),a   
093C   13                     INC   de   
093D   ED 53 EC 21            LD   (vBufPtr),de   
0941   E1                     POP   hl   
0942   2B                     DEC   hl   
0943   2B                     DEC   hl   
0944   2B                     DEC   hl   
0945   46                     LD   b,(hl)   
0946   2B                     DEC   hl   
0947   4E                     LD   c,(hl)   
0948   23                     INC   hl   
0949   23                     INC   hl   
094A   23                     INC   hl   
094B   E5                     PUSH   hl   
094C   DD 21 5C 09            LD   ix,bufferArray3   
0950   DD E9                  JP   (ix)   
0952                BUFFERARRAY2:      
0952   0B                     DEC   bc   
0953   5E                     LD   e,(hl)   
0954   23                     INC   hl   
0955   56                     LD   d,(hl)   
0956   23                     INC   hl   
0957   E5                     PUSH   hl   
0958   D5                     PUSH   de   
0959   C3 8A 09               JP   bufferDec   
095C                BUFFERARRAY3:      
095C   E1                     POP   hl   
095D   79                     LD   a,c   
095E   B0                     OR   b   
095F   20 F1                  JR   nz,bufferArray2   
0961   ED 5B EC 21            LD   de,(vBufPtr)   
0965   3E 20                  LD   a," "   
0967   12                     LD   (de),a   
0968   13                     INC   de   
0969   3E 5D                  LD   a,"]"   
096B   12                     LD   (de),a   
096C   13                     INC   de   
096D   ED 53 EC 21            LD   (vBufPtr),de   
0971   ED 4B FE 21            LD   bc,(vTemp1)   
0975   DD 2A 00 22            LD   ix,(vTemp2)   
0979   DD E9                  JP   (ix)   
097B                             ; /bc buffer char
097B                             ; char -- length
097B                BUFFERCHAR:      
097B   D1                     POP   de   ; e = char
097C   2A EC 21               LD   hl,(vBufPtr)   ; hl = buffer*
097F   73                     LD   (hl),e   ; e -> buffer*
0980   23                     INC   hl   ; buffer*++
0981   22 EC 21               LD   (vBufPtr),hl   ; save buffer*' in pointer
0984   11 01 00               LD   de,1   ; return 1 byte
0987   D5                     PUSH   de   
0988   DD E9                  JP   (ix)   
098A                             ; /bd buffer decimal
098A                             ; value -- length               ; length can be used to rewind buffer*
098A                BUFFERDEC:      
098A   ED 5B EC 21            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
098E   D9                     EXX      
098F   E1                     POP   hl   ; hl = value
0990   CD A2 09               CALL   bufferDec0   
0993   D9                     EXX      ; de = buffer*' bc = IP
0994   2A EC 21               LD   hl,(vBufPtr)   ; hl = buffer*
0997   ED 53 EC 21            LD   (vBufPtr),de   ; update buffer* with buffer*'
099B   EB                     EX   de,hl   ; hl = length
099C   B7                     OR   a   
099D   ED 52                  SBC   hl,de   
099F   E5                     PUSH   hl   ; return length
09A0   DD E9                  JP   (ix)   
09A2                             ; hl = value
09A2                             ; de' = buffer*
09A2                             ; a, bc, de, hl destroyed
09A2                BUFFERDEC0:      
09A2   CB 7C                  BIT   7,h   
09A4   28 0C                  JR   z,bufferDec1   
09A6   D9                     EXX      
09A7   3E 2D                  LD   a,"-"   
09A9   12                     LD   (de),a   
09AA   13                     INC   de   
09AB   D9                     EXX      
09AC   AF                     XOR   a   
09AD   95                     SUB   l   
09AE   6F                     LD   l,a   
09AF   9F                     SBC   a,a   
09B0   94                     SUB   h   
09B1   67                     LD   h,a   
09B2                BUFFERDEC1:      
09B2   0E 00                  LD   c,0   ; leading zeros flag = false
09B4   11 F0 D8               LD   de,-10000   
09B7   CD D2 09               CALL   bufferDec2   
09BA   11 18 FC               LD   de,-1000   
09BD   CD D2 09               CALL   bufferDec2   
09C0   11 9C FF               LD   de,-100   
09C3   CD D2 09               CALL   bufferDec2   
09C6   1E F6                  LD   e,-10   
09C8   CD D2 09               CALL   bufferDec2   
09CB   0C                     INC   c   ; flag = true for at least digit
09CC   1E FF                  LD   e,-1   
09CE   CD D2 09               CALL   bufferDec2   
09D1   C9                     RET      
09D2                BUFFERDEC2:      
09D2   06 2F                  LD   b,"0"-1   
09D4                BUFFERDEC3:      
09D4   04                     INC   b   
09D5   19                     ADD   hl,de   
09D6   38 FC                  JR   c,bufferDec3   
09D8   ED 52                  SBC   hl,de   
09DA   3E 30                  LD   a,"0"   
09DC   B8                     CP   b   
09DD   20 05                  JR   nz,bufferDec4   
09DF   AF                     XOR   a   
09E0   B1                     OR   c   
09E1   C8                     RET   z   
09E2   18 01                  JR   bufferDec5   
09E4                BUFFERDEC4:      
09E4   0C                     INC   c   
09E5                BUFFERDEC5:      
09E5   78                     LD   a,b   
09E6   D9                     EXX      
09E7   12                     LD   (de),a   
09E8   13                     INC   de   
09E9   D9                     EXX      
09EA   C9                     RET      
09EB                             ; /bh buffer hex
09EB                             ; value -- length               ; length can be used to rewind buffer*
09EB                BUFFERHEX:      
09EB   E1                     POP   hl   ; hl = value
09EC   ED 5B EC 21            LD   de,(vBufPtr)   
09F0   7C                     LD   a,h   
09F1   CD 06 0A               CALL   bufferHex1   
09F4   7D                     LD   a,l   
09F5   CD 06 0A               CALL   bufferHex1   
09F8   EB                     EX   de,hl   
09F9   ED 5B EC 21            LD   de,(vBufPtr)   
09FD   22 EC 21               LD   (vBufPtr),hl   
0A00   B7                     OR   a   
0A01   ED 52                  SBC   hl,de   
0A03   E5                     PUSH   hl   
0A04   DD E9                  JP   (ix)   
0A06                BUFFERHEX1:      
0A06   F5                     PUSH   af   
0A07   1F                     RRA      
0A08   1F                     RRA      
0A09   1F                     RRA      
0A0A   1F                     RRA      
0A0B   CD 0F 0A               CALL   bufferHex2   
0A0E   F1                     POP   af   
0A0F                BUFFERHEX2:      
0A0F   E6 0F                  AND   0x0F   
0A11   C6 90                  ADD   a,0x90   
0A13   27                     DAA      
0A14   CE 40                  ADC   a,0x40   
0A16   27                     DAA      
0A17   12                     LD   (de),a   
0A18   13                     INC   de   
0A19   C9                     RET      
0A1A                             ; /br break from loop
0A1A                             ; --
0A1A                BREAK:       
0A1A   E1                     POP   hl   
0A1B   7D                     LD   a,l   
0A1C   B4                     OR   h   
0A1D   28 02                  JR   z,break1   
0A1F   DD E9                  JP   (ix)   
0A21                BREAK1:      
0A21   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0A23   FD 54                  LD   d,iyh   
0A25   21 08 00               LD   hl,8   
0A28   19                     ADD   hl,de   
0A29   23                     INC   hl   
0A2A   23                     INC   hl   
0A2B   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0A2E   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0A31   C3 3B 05               JP   blockEnd   
0A34                             ; /bs buffered string
0A34                             ; string* -- length
0A34                BUFFERSTRING:      
0A34   E1                     POP   hl   ; hl = string*
0A35   ED 5B EC 21            LD   de,(vBufPtr)   ; de = buffer*
0A39   18 03                  JR   bufferString1   
0A3B                BUFFERSTRING0:      
0A3B   12                     LD   (de),a   ; a -> buffer*
0A3C   13                     INC   de   ; string*++ buffer++
0A3D   23                     INC   hl   
0A3E                BUFFERSTRING1:      
0A3E   7E                     LD   a,(hl)   ; a <- string*
0A3F   B7                     OR   a   ; if NUL exit loop
0A40   20 F9                  JR   nz,bufferString0   
0A42   2A EC 21               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
0A45   ED 53 EC 21            LD   (vBufPtr),de   ; save buffer*' in pointer
0A49   EB                     EX   de,hl   ; hl = length
0A4A   B7                     OR   a   
0A4B   ED 52                  SBC   hl,de   
0A4D   E5                     PUSH   hl   ; return length
0A4E   DD E9                  JP   (ix)   
0A50                             ; /bx buffered x spaces
0A50                             ; length -- length
0A50                BUFFERXSPACES:      
0A50   D1                     POP   de   ; bc = length
0A51   D5                     PUSH   de   ; return length
0A52   2A EC 21               LD   hl,(vBufPtr)   ; hl = buffer*
0A55   18 04                  JR   bufferXSpaces2   
0A57                BUFFERXSPACES1:      
0A57   36 20                  LD   (hl)," "   
0A59   23                     INC   hl   
0A5A   1B                     DEC   de   
0A5B                BUFFERXSPACES2:      
0A5B   7B                     LD   a,e   
0A5C   B2                     OR   d   
0A5D   20 F8                  JR   nz,bufferXSpaces1   
0A5F   22 EC 21               LD   (vBufPtr),hl   ; save buffer*'
0A62   DD E9                  JP   (ix)   
0A64                COMMAND_I:      
0A64   CD B2 0B               CALL   jumpTable   
0A67   6E                     DB   "n"   
0A68   46 0B                  DW   input   
0A6A   76                     DB   "v"   
0A6B   C2 03                  DW   invert   
0A6D   00                     DB   NUL   
0A6E   8A 08                  DW   error1   
0A70                             ; inc bc
0A70                             ; ld a,(bc)
0A70                             ; cp "n"                      ; /in input
0A70                             ; jp z,input
0A70                             ; cp "v"                      ; /iv invert
0A70                             ; jp z,invert
0A70                             ; jp error1
0A70                COMMAND_P:      
0A70   CD B2 0B               CALL   jumpTable   
0A73   61                     DB   "a"   
0A74   82 0A                  DW   partial   
0A76   63                     DB   "c"   
0A77   A2 0A                  DW   printChars   
0A79   6B                     DB   "k"   
0A7A   B4 0A                  DW   printStack   
0A7C   78                     DB   "x"   
0A7D   C0 0A                  DW   printX   
0A7F   00                     DB   NUL   
0A80   8A 08                  DW   error1   
0A82                             ; inc bc
0A82                             ; ld a,(bc)
0A82                             ; cp "a"
0A82                             ; jp z,partial
0A82                             ; cp "c"
0A82                             ; jp z,printChars
0A82                             ; cp "k"
0A82                             ; jp z,printStack
0A82                             ; cp "x"
0A82                             ; jp z,printX
0A82                             ; jp error1
0A82                             ; partial
0A82                             ; array* lambda* -- lambda1*
0A82                PARTIAL:      
0A82   E1                     POP   hl   ; h1 = lambda*
0A83   ED 5B F0 21            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
0A87   ED 43 FE 21            LD   (vTemp1),bc   ; save IP
0A8B   01 06 00               LD   bc,6   ; bc = count
0A8E   ED B0                  LDIR      ; clone lambda
0A90   ED 4B FE 21            LD   bc,(vTemp1)   ; restore IP
0A94   2A F0 21               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
0A97   ED 53 F0 21            LD   (vHeapPtr),de   ; heap* += 6
0A9B   D1                     POP   de   ; de = array*
0A9C   E5                     PUSH   hl   ; return partial_array*
0A9D   73                     LD   (hl),e   ; compile array*
0A9E   23                     INC   hl   
0A9F   72                     LD   (hl),d   
0AA0   DD E9                  JP   (ix)   
0AA2                             ; printChars
0AA2                             ; char* len --
0AA2                             ; prints whatever in in buffer starting from TIB and ending at vTIBPtr*
0AA2                PRINTCHARS:      
0AA2   E1                     POP   hl   
0AA3   2B                     DEC   hl   
0AA4   D1                     POP   de   
0AA5   C3 AA 0A               JP   printChars2   
0AA8                PRINTCHARS1:      
0AA8   13                     INC   de   
0AA9   2B                     DEC   hl   
0AAA                PRINTCHARS2:      
0AAA   1A                     LD   a,(de)   
0AAB   CD 85 00               CALL   putchar   
0AAE   7D                     LD   a,l   
0AAF   B4                     OR   h   
0AB0   20 F6                  JR   nz,printChars1   
0AB2   DD E9                  JP   (ix)   
0AB4                             ; /pk print stack
0AB4                             ; --
0AB4                PRINTSTACK:      
0AB4                             ;     ld (vTemp1),bc
0AB4                             ;     call printStr
0AB4                             ;     .cstr "=> "
0AB4                             ;     ld hl,STACK
0AB4                             ;     sbc hl,sp
0AB4                             ;     srl h
0AB4                             ;     rr l
0AB4                             ;     ld bc,hl
0AB4                             ;     ld hl,STACK
0AB4                             ;     jr printStack2
0AB4                             ; printStack1:
0AB4                             ;     dec bc
0AB4                             ;     dec hl
0AB4                             ;     ld d,(hl)
0AB4                             ;     dec hl
0AB4                             ;     ld e,(hl)
0AB4                             ;     ex de,hl
0AB4                             ;     call prthex
0AB4                             ;     ex de,hl
0AB4                             ;     ld a," "
0AB4                             ;     call putchar
0AB4                             ; printStack2:
0AB4                             ;     ld a,c
0AB4                             ;     or b
0AB4                             ;     jr nz,printStack1
0AB4                             ;     call prompt
0AB4                             ;     ld bc,(vTemp1)
0AB4   DD E9                  JP   (ix)   
0AB6                SIZE:        
0AB6   E1                     POP   hl   
0AB7   2B                     DEC   hl   ; skip magic byte
0AB8   2B                     DEC   hl   ; skip type tag
0AB9   2B                     DEC   hl   ; msb size
0ABA   56                     LD   d,(hl)   
0ABB   2B                     DEC   hl   ; lsb size
0ABC   5E                     LD   e,(hl)   
0ABD   D5                     PUSH   de   
0ABE   DD E9                  JP   (ix)   
0AC0                PRINTX:      
0AC0   CD 81 06               CALL   go   
0AC3   00 00                  DW   NUL   ; closure
0AC5   C9 0A                  DW   printX_block   
0AC7   A4 0B                  DW   args1A0L   
0AC9                PRINTX_BLOCK:      
0AC9   7B 24 61 20 31 2F 62 78 2B 24 61 3D 20 2F 76 62 24 61 2D 2F 76 62 3D 20 2F 76 62 24 61 2F 70 63 7D 00 .CSTR   "{$a 1/bx+$a= /vb$a-/vb= /vb$a/pc}"   ; block
0AEB                COMMAND_V:      
0AEB   CD B2 0B               CALL   jumpTable   
0AEE   62                     DB   "b"   
0AEF   0F 0B                  DW   varBufPtr   
0AF1   68                     DB   "h"   
0AF2   18 0B                  DW   varHeapPtr   
0AF4   74                     DB   "t"   
0AF5   21 0B                  DW   varTIBPtr   
0AF7   42                     DB   "B"   
0AF8   00 0B                  DW   constBufStart   
0AFA   54                     DB   "T"   
0AFB   0A 0B                  DW   constTIBStart   
0AFD   00                     DB   NUL   
0AFE   8A 08                  DW   error1   
0B00                             ; inc bc
0B00                             ; ld a,(bc)
0B00                             ; cp "b"
0B00                             ; jp z,varBufPtr
0B00                             ; cp "h"
0B00                             ; jp z,varHeapPtr
0B00                             ; cp "t"
0B00                             ; jp z,varTIBPtr
0B00                             ; cp "B"
0B00                             ; jp z,constBufStart
0B00                             ; cp "H"
0B00                             ; jp z,constHeapStart
0B00                             ; cp "T"
0B00                             ; jp z,constTIBStart
0B00                             ; jp error1
0B00                CONSTBUFSTART:      
0B00   11 00 24               LD   de,BUF   
0B03   18 28                  JR   constant   
0B05                CONSTHEAPSTART:      
0B05   11 00 26               LD   de,HEAP   
0B08   18 23                  JR   constant   
0B0A                CONSTTIBSTART:      
0B0A   11 00 23               LD   de,TIB   
0B0D   18 1E                  JR   constant   
0B0F                VARBUFPTR:      
0B0F   ED 5B EC 21            LD   de,(vBufPtr)   
0B13   21 EC 21               LD   hl,vBufPtr   
0B16   18 12                  JR   variable   
0B18                VARHEAPPTR:      
0B18   ED 5B F0 21            LD   de,(vHeapPtr)   
0B1C   21 F0 21               LD   hl,vHeapPtr   
0B1F   18 09                  JR   variable   
0B21                VARTIBPTR:      
0B21   ED 5B EA 21            LD   de,(vTIBPtr)   
0B25   21 EA 21               LD   hl,vTIBPtr   
0B28   18 00                  JR   variable   
0B2A                VARIABLE:      
0B2A   22 F2 21               LD   (vPointer),hl   
0B2D                CONSTANT:      
0B2D   D5                     PUSH   de   
0B2E   DD E9                  JP   (ix)   
0B30                CHARS:       
0B30   21 01 00               LD   hl,1   
0B33                CHARS1:      
0B33   22 E6 21               LD   (vDataWidth),hl   
0B36   DD E9                  JP   (ix)   
0B38                DECIMAL:      
0B38   21 0A 00               LD   hl,10   
0B3B                DECIMAL1:      
0B3B   22 E8 21               LD   (vNumBase),hl   
0B3E   DD E9                  JP   (ix)   
0B40                HEXADECIMAL:      
0B40   21 10 00               LD   hl,16   
0B43   C3 3B 0B               JP   decimal1   
0B46                             ; Z80 port input
0B46                             ; port -- value
0B46                INPUT:       
0B46   E1                     POP   hl   
0B47   59                     LD   e,c   ; save IP
0B48   4D                     LD   c,l   
0B49   ED 68                  IN   l,(c)   
0B4B   26 00                  LD   h,0   
0B4D   4B                     LD   c,e   ; restore IP
0B4E   E5                     PUSH   hl   
0B4F   DD E9                  JP   (ix)   
0B51                KEY:         
0B51   CD 81 00               CALL   getchar   
0B54   26 00                  LD   h,0   
0B56   6F                     LD   l,a   
0B57   E5                     PUSH   hl   
0B58   DD E9                  JP   (ix)   
0B5A                             ; Z80 port output
0B5A                             ; value port --
0B5A                OUTPUT:      
0B5A   E1                     POP   hl   
0B5B   59                     LD   e,c   ; save IP
0B5C   4D                     LD   c,l   
0B5D   E1                     POP   hl   
0B5E   ED 69                  OUT   (c),l   
0B60   4B                     LD   c,e   ; restore IP
0B61   DD E9                  JP   (ix)   
0B63                NUMBERS:      
0B63   21 02 00               LD   hl,2   
0B66   C3 33 0B               JP   chars1   
0B69                             ; 
0B69                             ; 
0B69                             ; 
0B69                             ; 
0B69                FILTER:      
0B69                MAP:         
0B69                SCAN:        
0B69   DD E9                  JP   (ix)   
0B6B                ZPRT:        
0B6B   CD 81 06               CALL   go   
0B6E   00 00                  DW   NUL   ; closure
0B70   78 0B                  DW   zprt_block   
0B72   76 0B                  DW   zprt_args   
0B74   02                     DB   2   ; num args + locals
0B75   01                     DB   1   ; num locals
0B76                ZPRT_ARGS:      
0B76   6E 73                  DB   "ns"   
0B78                ZPRT_BLOCK:      
0B78   7B 24 6E 2F 62 64 60 20 60 2F 62 73 20 2B 24 73 3D 20 2F 76 62 24 73 2D 2F 76 62 3D 20 2F 76 62 24 73 2F 70 63 7D 00 .CSTR   "{$n/bd` `/bs +$s= /vb$s-/vb= /vb$s/pc}"   ; block
0B9F                             ;*******************************************************************
0B9F                             ; reusable arglists
0B9F                             ;*******************************************************************
0B9F                ARGS0A1L_:      ; zero args one local
0B9F   01                     DB   1   ; num args + locals
0BA0   01                     DB   1   ; num locals
0BA1                ARGS0A1L:      
0BA1   61                     DB   "a"   
0BA2                ARGS1A0L_:      ; one arg zero locals
0BA2   01                     DB   1   ; num args + locals
0BA3   00                     DB   0   ; num locals
0BA4                ARGS1A0L:      
0BA4   61                     DB   "a"   
0BA5                ARGS1A1L_:      ; one arg one local
0BA5   02                     DB   2   ; num args + locals
0BA6   01                     DB   1   ; num locals
0BA7                ARGS1A1L:      
0BA7   61 62                  DB   "ab"   
0BA9                ARGS2A0L_:      ; two args zero locals
0BA9   02                     DB   2   ; num args + locals
0BAA   00                     DB   0   ; num locals
0BAB                ARGS2A0L:      
0BAB   61 62                  DB   "ab"   
0BAD                ARGS1A2L_:      ; one arg two locals
0BAD   03                     DB   3   ; num args + locals
0BAE   02                     DB   2   ; num locals
0BAF                ARGS1A2L:      
0BAF   61 62 63               DB   "abc"   
0BB2                             ;*******************************************************************
0BB2                             ; general routines
0BB2                             ;*******************************************************************
0BB2                             ; followed by a table
0BB2                             ; db char
0BB2                             ; dw addr
0BB2                             ; the final item must have char == NUL
0BB2                JUMPTABLE:      
0BB2   03                     INC   bc   
0BB3   E1                     POP   hl   
0BB4                JUMPTABLE0:      
0BB4   AF                     XOR   a   
0BB5   BE                     CP   (hl)   
0BB6   28 09                  JR   z,jumpTable1   
0BB8   0A                     LD   a,(bc)   
0BB9   BE                     CP   (hl)   
0BBA   28 06                  JR   z,jumpTable2   
0BBC   23                     INC   hl   
0BBD   23                     INC   hl   
0BBE   23                     INC   hl   
0BBF   18 F3                  JR   jumpTable0   
0BC1                JUMPTABLE1:      
0BC1   0B                     DEC   bc   
0BC2                JUMPTABLE2:      
0BC2   23                     INC   hl   
0BC3   5E                     LD   e,(hl)   
0BC4   23                     INC   hl   
0BC5   56                     LD   d,(hl)   
0BC6   EB                     EX   de,hl   
0BC7   E9                     JP   (hl)   
0BC8                PRTSTR0:      
0BC8   CD 85 00               CALL   putchar   
0BCB   23                     INC   hl   
0BCC                PRTSTR:      
0BCC   7E                     LD   a,(hl)   
0BCD   B7                     OR   a   
0BCE   20 F8                  JR   nz,prtstr0   
0BD0   C9                     RET      
0BD1                             ; **************************************************************************
0BD1                             ; calculate nesting value
0BD1                             ; a is char to be tested,
0BD1                             ; e is the nesting value (initially 0)
0BD1                             ; e is increased by ( and [
0BD1                             ; e is decreased by ) and ]
0BD1                             ; e has its bit 7 toggled by `
0BD1                             ; limited to 127 levels
0BD1                             ; **************************************************************************
0BD1                NESTING:      
0BD1   FE 22                  CP   DQUOTE   ; quote char
0BD3   28 06                  JR   z,nesting0   
0BD5   FE 60                  CP   "`"   ; quote char
0BD7   28 02                  JR   z,nesting0   
0BD9   18 0A                  JR   nesting1   
0BDB                NESTING0:      
0BDB   CB 7B                  BIT   7,e   
0BDD   28 03                  JR   z,nesting1a   
0BDF   CB BB                  RES   7,e   
0BE1   C9                     RET      
0BE2                NESTING1A:      
0BE2   CB FB                  SET   7,e   
0BE4   C9                     RET      
0BE5                NESTING1:      
0BE5   CB 7B                  BIT   7,e   
0BE7   C0                     RET   nz   
0BE8   FE 7B                  CP   "{"   
0BEA   28 08                  JR   z,nesting2   
0BEC   FE 5B                  CP   "["   
0BEE   28 04                  JR   z,nesting2   
0BF0   FE 28                  CP   "("   
0BF2   20 02                  JR   nz,nesting3   
0BF4                NESTING2:      
0BF4   1C                     INC   e   
0BF5   C9                     RET      
0BF6                NESTING3:      
0BF6   FE 7D                  CP   "}"   
0BF8   28 07                  JR   z,nesting4   
0BFA   FE 5D                  CP   "]"   
0BFC   28 03                  JR   z,nesting4   
0BFE   FE 29                  CP   ")"   
0C00   C0                     RET   nz   
0C01                NESTING4:      
0C01   1D                     DEC   e   
0C02   C9                     RET      
0C03                PROMPT:      
0C03   CD 13 0C               CALL   printStr   
0C06   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0C0B   C9                     RET      
0C0C                CRLF:        
0C0C   CD 13 0C               CALL   printStr   
0C0F   0D 0A 00               .CSTR   "\r\n"   
0C12   C9                     RET      
0C13                             ; prints a null teminated string
0C13                             ; the string should be immediately following the call
0C13                PRINTSTR:      
0C13   E3                     EX   (sp),hl   ; swap			
0C14   CD CC 0B               CALL   prtstr   
0C17   23                     INC   hl   ; inc past NUL
0C18   E3                     EX   (sp),hl   ; put it back	
0C19   C9                     RET      
0C1A                INIT:        
0C1A   DD 2A EE 21            LD   ix,(vNext)   
0C1E   FD 21 80 20            LD   iy,STACK   
0C22   21 80 01               LD   hl,isysVars   
0C25   11 E6 21               LD   de,sysVars   
0C28   01 10 00               LD   bc,8 * 2   
0C2B   ED B0                  LDIR      
0C2D   21 00 21               LD   hl,vars   ; 52 vars LO HI
0C30   06 34                  LD   b,26*2   
0C32   AF                     XOR   a   
0C33                INIT0:       
0C33   77                     LD   (hl),a   
0C34   23                     INC   hl   
0C35   10 FC                  DJNZ   init0   
0C37   C9                     RET      
0C38                START:       
0C38   31 80 20               LD   sp,STACK   ; start Monty
0C3B   CD 1A 0C               CALL   init   ; setups
0C3E   CD 13 0C               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0C41   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
0C4E                INTERPRET:      
0C4E   CD 03 0C               CALL   prompt   
0C51   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0C54   21 00 23               LD   hl,TIB   
0C57   22 EA 21               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0C5A                INTERPRET2:      ; calculate nesting
0C5A   1E 00                  LD   e,0   ; initilize nesting value
0C5C   C5                     PUSH   bc   ; save offset into TIB,
0C5D                             ; bc is also the count of chars in TIB
0C5D   21 00 23               LD   hl,TIB   ; hl is start of TIB
0C60   18 06                  JR   interpret4   
0C62                INTERPRET3:      
0C62   7E                     LD   a,(hl)   ; a = char in TIB
0C63   23                     INC   hl   ; inc pointer into TIB
0C64   0B                     DEC   bc   ; dec count of chars in TIB
0C65   CD D1 0B               CALL   nesting   ; update nesting value
0C68                INTERPRET4:      
0C68   79                     LD   a,c   ; is count zero?
0C69   B0                     OR   b   
0C6A   20 F6                  JR   nz,interpret3   ; if not loop
0C6C   C1                     POP   bc   ; restore offset into TIB
0C6D                INTERPRET5:      
0C6D   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0C70   FE 20                  CP   $20   ; compare to space
0C72   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0C74   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0C76                             ; ???? NEEDED?
0C76   28 3B                  JR   z,interpret8   
0C78   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0C7A   28 24                  JR   z,interpret7   ; if anything else its macro/control
0C7C   FE 05                  CP   CTRL_E   
0C7E   CA 01 0D               JP   z,edit_   
0C81   FE 08                  CP   CTRL_H   
0C83   CA F1 0C               JP   z,backSpace_   
0C86   FE 0A                  CP   CTRL_J   
0C88   CA 19 0D               JP   z,reEdit_   
0C8B   FE 13                  CP   CTRL_S   
0C8D   CA 1C 0D               JP   z,printStack_   
0C90                             ; DB     lsb(edit_)       ; ENQ ^E  5
0C90                             ; DB     lsb(reedit_)     ; LF  ^J 10
0C90                             ; DB     lsb(list_)       ; FF  ^L 12
0C90                             ; DB     lsb(printStack_) ; DLE ^P 16
0C90                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0C90                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0C90                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0C90                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0C90                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0C90                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0C90                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0C90                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0C90                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0C90                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0C90                INTERPRET5A:      
0C90                             ; ld (vTIBPtr),bc
0C90                             ; ld bc,(vTIBPtr)
0C90   18 C8                  JR   interpret2   
0C92                INTERPRET6:      
0C92   21 00 23               LD   hl,TIB   
0C95   09                     ADD   hl,bc   
0C96   77                     LD   (hl),a   ; store the character in textbuf
0C97   03                     INC   bc   
0C98   CD 85 00               CALL   putchar   ; echo character to screen
0C9B   CD D1 0B               CALL   nesting   
0C9E   18 CD                  JR   interpret5   ; wait for next character
0CA0                INTERPRET7:      
0CA0   21 00 23               LD   hl,TIB   
0CA3   09                     ADD   hl,bc   
0CA4   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0CA6   23                     INC   hl   
0CA7   36 0A                  LD   (hl),"\n"   
0CA9   23                     INC   hl   
0CAA   03                     INC   bc   
0CAB   03                     INC   bc   
0CAC   CD 0C 0C               CALL   crlf   ; echo character to screen
0CAF   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0CB0   B7                     OR   a   
0CB1   20 BA                  JR   nz,interpret5   
0CB3                INTERPRET8:      
0CB3   21 00 23               LD   hl,TIB   
0CB6   09                     ADD   hl,bc   
0CB7   22 EA 21               LD   (vTIBPtr),hl   
0CBA   01 00 23               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0CBD                             ; we pressed enter
0CBD   0B                     DEC   bc   
0CBE                NEXT:        
0CBE   03                     INC   bc   ; Increment the IP
0CBF   0A                     LD   a,(bc)   ; Get the next character and dispatch
0CC0   FE 20                  CP   " "   ; whitespace?
0CC2   28 FA                  JR   z,next   ; space? ignore
0CC4   38 09                  JR   c,next1   
0CC6   D6 20                  SUB   " "   
0CC8   6F                     LD   l,a   ; index into table
0CC9   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0CCB   6E                     LD   l,(hl)   ; get low jump address
0CCC   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0CCE   E9                     JP   (hl)   ; Jump to routine
0CCF                NEXT1:       
0CCF   FE 00                  CP   NUL   ; end of input string?
0CD1   28 03                  JR   z,exit   
0CD3   C3 4E 0C               JP   interpret   ; no, other whitespace, macros?
0CD6                EXIT:        
0CD6   03                     INC   bc   
0CD7   60 69                  LD   hl,bc   
0CD9   E9                     JP   (hl)   
0CDA                RUN:         
0CDA   C1                     POP   bc   
0CDB   0B                     DEC   bc   
0CDC   DD E9                  JP   (ix)   
0CDE                ERROR:       
0CDE   CD DA 0C               CALL   run   
0CE1   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQUOTE,"Error ",DQUOTE,".s .",0   
0CEE   C3 4E 0C               JP   interpret   
0CF1                BACKSPACE_:      
0CF1   79                     LD   a,c   
0CF2   B0                     OR   b   
0CF3   CA 5A 0C               JP   z,interpret2   
0CF6   0B                     DEC   bc   
0CF7   CD 13 0C               CALL   printStr   
0CFA   08 20 08 00            .CSTR   "\b \b"   
0CFE   C3 5A 0C               JP   interpret2   
0D01                             ; edit
0D01                EDIT_:       
0D01   CD DA 0C               CALL   run   
0D04   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0D16   C3 4E 0C               JP   interpret   
0D19                REEDIT_:      
0D19   C3 4E 0C               JP   interpret   
0D1C                PRINTSTACK_:      
0D1C   CD DA 0C               CALL   run   
0D1F   2F 70 6B 00            .CSTR   "/pk"   
0D23   C3 4E 0C               JP   interpret   
0D26                             ; editDef:
0D26                             ;     pop hl                      ; pop ret address
0D26                             ;     ex (sp),hl                  ; swap with TOS
0D26                             ;     push hl                     ; dup TOS
0D26                             ;     ld a,l                      ; a = ident
0D26                             ;     ld de,TIB                   ; de = start of TIB
0D26                             ;     ld (vTIBPtr),de             ; update TIB*
0D26                             ;     push ix                     ; save NEXT
0D26                             ;     ld ix,editDef0              ; NEXT = editDef0
0D26                             ;     jp lookupRef                ; convert letter into address
0D26                             ; editDef0:
0D26                             ;     ld e,(hl)                   ; de = (hl++)
0D26                             ;     inc hl
0D26                             ;     ld d,(hl)
0D26                             ;     ld a,d                      ; de == 0 ?
0D26                             ;     or e
0D26                             ;     jr z,editDef4
0D26                             ;     ld ix,editDef3              ; NEXT = editDef3
0D26                             ;     ex de,hl
0D26                             ;     ld a,(hl)
0D26                             ;     cp "{"
0D26                             ;     jr nz,editDef1
0D26                             ;     jp editBlock0               ; convert letter into address
0D26                             ; editDef1:
0D26                             ;     cp "("
0D26                             ;     jr nz,editDef2
0D26                             ;     jp editBlock0               ; convert letter into address
0D26                             ; editDef2:
0D26                             ;     jp editLambda
0D26                             ; editDef3:
0D26                             ;     ld a," "                    ; write assign
0D26                             ;     call writeChar
0D26                             ;     pop hl                      ; a = ident
0D26                             ;     ld a,l
0D26                             ;     call writeChar
0D26                             ;     ld a,"="                    ; write assign
0D26                             ;     call writeChar
0D26                             ;     ld ix,editDef4              ; NEXT = editDef4
0D26                             ;     jp printTIB
0D26                             ; editDef4:
0D26                             ;     pop ix                      ; restore NEXT
0D26                             ;     jp (ix)
0D26                             ; writeChar:
0D26                             ;     ld de,(vTIBPtr)             ; de = TIB*
0D26                             ;     ld (de),a                   ; write ident
0D26                             ;     inc de
0D26                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0D26                             ;     ret
0D26                             ; ; printTIB
0D26                             ; printTIB:
0D26                             ;     ld hl,(vTIBPtr)
0D26                             ;     ld de,TIB
0D26                             ;     or a
0D26                             ;     sbc hl,de
0D26                             ;     jp printTIB2
0D26                             ; printTIB1:
0D26                             ;     ld a,(de)
0D26                             ;     call putchar
0D26                             ; printTIB2:
0D26                             ;     ld a,l
0D26                             ;     or h
0D26                             ;     jr nz,printTIB1
0D26                             ;     jp (ix)
0D26                             ; editBlock:
0D26                             ;     pop hl                      ; hl = block*
0D26                             ; editBlock0:
0D26                             ;     push ix                     ; save next
0D26                             ;     push hl                     ; push block*
0D26                             ;     push hl                     ; push block*
0D26                             ;     ld ix,(editBlock2)
0D26                             ;     jp blockLength
0D26                             ; editBlock1:
0D26                             ;     pop hl                      ; bc = length, (sp) = IP
0D26                             ;     pop de                      ; de = block*
0D26                             ;     ld a,l
0D26                             ;     or h
0D26                             ;     jr z,editBlock2
0D26                             ;     push bc
0D26                             ;     ld bc,hl
0D26                             ;     ex de,hl                    ; hl = block*
0D26                             ;     ld de,(vTIBPtr)              ; de = TIB*
0D26                             ;     ldir                        ; copy block to TIB
0D26                             ;     ld (vTIBPtr),de              ; save TIB*
0D26                             ;     pop bc
0D26                             ; editBlock2:
0D26                             ;     pop ix                      ; restore next
0D26                             ;     jp (ix)
0D26                             ; editLambda:
0D26                             ;     jp (ix)
0D26                             ; editArray:
0D26                             ;     jp (ix)
0D26                             ; editArglist:
0D26                             ;     jp (ix)
0D26                             ; ; blockLength
0D26                             ; ; addr1 -- length
0D26                             ; blockLength:
0D26                             ;     pop hl                      ; block*
0D26                             ;     push hl                     ; save block*
0D26                             ;     inc hl                      ; skip first char
0D26                             ;     ld d,1                      ; increase nesting
0D26                             ; blockLength1:                   ; Skip to end of definition
0D26                             ;     ld a,(hl)                   ; Get the next character
0D26                             ;     inc hl                      ; Point to next character
0D26                             ;     cp " " + 1                  ; ignore whitespace
0D26                             ;     jr c,blockLength1
0D26                             ;     cp ")"
0D26                             ;     jr z,blockLength4
0D26                             ;     cp "}"
0D26                             ;     jr z,blockLength4
0D26                             ;     cp "]"
0D26                             ;     jr z,blockLength4
0D26                             ;     cp "("
0D26                             ;     jr z,blockLength2
0D26                             ;     cp "{"
0D26                             ;     jr z,blockLength2
0D26                             ;     cp "["
0D26                             ;     jr z,blockLength2
0D26                             ;     cp "'"
0D26                             ;     jr z,blockLength3
0D26                             ;     cp "`"
0D26                             ;     jr z,blockLength3
0D26                             ;     cp DQUOTE
0D26                             ;     jr z,blockLength3
0D26                             ;     jr blockLength1
0D26                             ; blockLength2:
0D26                             ;     inc d
0D26                             ;     jr blockLength1
0D26                             ; blockLength4:
0D26                             ;     dec d
0D26                             ;     jr nz, blockLength1         ; get the next element
0D26                             ; blockLength3:
0D26                             ;     ld a,$80
0D26                             ;     xor d
0D26                             ;     ld d,a
0D26                             ;     jr nz, blockLength1
0D26                             ;     pop hl                      ; hl = block*
0D26                             ;     or a
0D26                             ;     sbc hl,de
0D26                             ;     push hl
0D26                             ;     jp (ix)
0D26                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0D26                             ; \a start of stack \#3 depth \b base \$ prompt
0D26                             ; DW dStack               ; a vS0 start of datastack			
0D26                             ; DW FALSE                ; b vBase16
0D26                             ; DW 0                    ; c vTIBPtr an offset to the tib
0D26                             ; DW 0                    ; d
0D26                             ; DW 65                   ; e vLastDef "A" last command u defined
0D26                             ; DW 0                    ; f
0D26                             ; DW page6                ; g 256 bytes limits
0D26                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0D26                             ; 
2000                          .ORG   RAMSTART   
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2080                STACK:       
2080                          ALIGN   $100   
2100                VARS:        
2100                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
21D0                RESTARTS:      
21D0                RST08:    DS   2   
21D2                RST10:    DS   2   
21D4                RST18:    DS   2   
21D6                RST20:    DS   2   
21D8                RST28:    DS   2   
21DA                RST30:    DS   2   ; 
21DC                BAUD:     DS   2   ; 
21DE                INTVEC:   DS   2   ; 
21E0                NMIVEC:   DS   2   ; 
21E2                GETCVEC:   DS   2   ; 
21E4                PUTCVEC:   DS   2   ; 
21E6                SYSVARS:      
21E6                             ; initialised sys variables (preserved)
21E6                VDATAWIDTH:   DS   2   ; 
21E8                VNUMBASE:   DS   2   ; 
21EA                VTIBPTR:   DS   2   ; 
21EC                VBUFPTR:   DS   2   ; 
21EE                VNEXT:    DS   2   ; 
21F0                VHEAPPTR:   DS   2   ; 
21F2                             ; uninitialised sys variables (preserved)
21F2                VPOINTER:   DS   2   ; 
21F4                VREMAIN:   DS   2   ; 
21F6                VSAVEDIP:   DS   2   ; 
21F8                VSAVEDSP:   DS   2   ; 
21FA                VSAVEDBP:   DS   2   ; 
21FC                VCHECKSUM:   DS   2   ; 
21FE                             ; uninitialised sys variables (unpreserved)
21FE                VTEMP1:   DS   2   ; 
2200                VTEMP2:   DS   2   ; 
2202                VLASTDEF:   DS   2   ; 
2204                VHASHSTR:   DS   2   ; 
2206                TBPTR:    DS   2   ; reserved for tests
2208                          ALIGN   $100   
2300                TIB:      DS   TIBSIZE   
2400                BUF:      DS   BUFSIZE   
2500                          ALIGN   $100   
2500                PAD:      DS   $100   
2600                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 49 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 12
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0B69 DEFINED AT LINE 1904 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 30 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 2108 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1726 IN MAIN.asm
                    > USED AT LINE 1985 IN MAIN.asm
                    > USED AT LINE 2153 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
STKSIZE:            0080 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 54 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 55 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
                    > USED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
                    > USED AT LINE 1024 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
                    > USED AT LINE 1328 IN MAIN.asm
                    > USED AT LINE 1396 IN MAIN.asm
                    > USED AT LINE 1419 IN MAIN.asm
                    > USED AT LINE 1659 IN MAIN.asm
                    > USED AT LINE 1680 IN MAIN.asm
                    > USED AT LINE 1777 IN MAIN.asm
                    > USED AT LINE 1795 IN MAIN.asm
                    > USED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 2111 IN MAIN.asm
                    > USED AT LINE 2192 IN MAIN.asm
DQUOTE:             0022 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
                    > USED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
                    > USED AT LINE 2206 IN MAIN.asm
                    > USED AT LINE 2221 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 23 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 24 IN MAIN.asm
                    > USED AT LINE 2117 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 25 IN MAIN.asm
                    > USED AT LINE 2119 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 2121 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 27 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 28 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 29 IN MAIN.asm
                    > USED AT LINE 2123 IN MAIN.asm
TMAGIC:             00AA DEFINED AT LINE 32 IN MAIN.asm
                    > USED AT LINE 422 IN MAIN.asm
TRESERV:            00A0 DEFINED AT LINE 33 IN MAIN.asm
TNUMBER:            00A1 DEFINED AT LINE 34 IN MAIN.asm
TSTRING:            00A2 DEFINED AT LINE 35 IN MAIN.asm
TPOINTER:           00A3 DEFINED AT LINE 36 IN MAIN.asm
TARRAY:             00A4 DEFINED AT LINE 37 IN MAIN.asm
                    > USED AT LINE 419 IN MAIN.asm
TBLOCK:             00A5 DEFINED AT LINE 38 IN MAIN.asm
TLAMBDA:            00A6 DEFINED AT LINE 39 IN MAIN.asm
TARGLST:            00A7 DEFINED AT LINE 40 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 54 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 59 IN MAIN.asm
                    > USED AT LINE 2062 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 69 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 172 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 174 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 176 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 178 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 180 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 182 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 184 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 186 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 188 IN MAIN.asm
LPAREN_:            0318 DEFINED AT LINE 190 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 191 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 193 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 195 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 197 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 199 IN MAIN.asm
UNDERSCORE_:        0327 DEFINED AT LINE 201 IN MAIN.asm
COLON_:             032A DEFINED AT LINE 203 IN MAIN.asm
UPCASE_:            032D DEFINED AT LINE 205 IN MAIN.asm
LOWCASE_:           0330 DEFINED AT LINE 207 IN MAIN.asm
QUESTION_:          0333 DEFINED AT LINE 209 IN MAIN.asm
STAR_:              0336 DEFINED AT LINE 211 IN MAIN.asm
BANG_:              0339 DEFINED AT LINE 213 IN MAIN.asm
NUM_:               033E DEFINED AT LINE 216 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
HASH_:              0341 DEFINED AT LINE 218 IN MAIN.asm
PIPE_:              0344 DEFINED AT LINE 220 IN MAIN.asm
CARET_:             0347 DEFINED AT LINE 222 IN MAIN.asm
COMMA_:             034A DEFINED AT LINE 224 IN MAIN.asm
DBLQUOTE_:          034D DEFINED AT LINE 226 IN MAIN.asm
MINUS_:             0350 DEFINED AT LINE 228 IN MAIN.asm
EQ_:                0353 DEFINED AT LINE 230 IN MAIN.asm
EQ0:                035D DEFINED AT LINE 237 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
EQ1:                035E DEFINED AT LINE 239 IN MAIN.asm
                    > USED AT LINE 215 IN MAIN.asm
GT_:                0362 DEFINED AT LINE 243 IN MAIN.asm
LT_:                036D DEFINED AT LINE 251 IN MAIN.asm
LT1:                0376 DEFINED AT LINE 258 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SLASH_:             037F DEFINED AT LINE 263 IN MAIN.asm
NOP_:               0382 DEFINED AT LINE 265 IN MAIN.asm
RPAREN_:            0384 DEFINED AT LINE 267 IN MAIN.asm
PLUS:               0387 DEFINED AT LINE 273 IN MAIN.asm
                    > USED AT LINE 175 IN MAIN.asm
ADD:                0387 DEFINED AT LINE 274 IN MAIN.asm
ADD1:               0392 DEFINED AT LINE 282 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
ADD3:               0396 DEFINED AT LINE 287 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
                    > USED AT LINE 1060 IN MAIN.asm
                    > USED AT LINE 1228 IN MAIN.asm
AT:                 0399 DEFINED AT LINE 293 IN MAIN.asm
                    > USED AT LINE 177 IN MAIN.asm
ADDR:               0399 DEFINED AT LINE 294 IN MAIN.asm
AMPER:              03A3 DEFINED AT LINE 299 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
AND:                03A3 DEFINED AT LINE 300 IN MAIN.asm
AND1:               03AA DEFINED AT LINE 308 IN MAIN.asm
                    > USED AT LINE 322 IN MAIN.asm
PIPE:               03AE DEFINED AT LINE 313 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
OR:                 03AE DEFINED AT LINE 314 IN MAIN.asm
XOR:                03B7 DEFINED AT LINE 324 IN MAIN.asm
                    > USED AT LINE 1268 IN MAIN.asm
XOR1:               03B8 DEFINED AT LINE 326 IN MAIN.asm
                    > USED AT LINE 338 IN MAIN.asm
INVERT:             03C2 DEFINED AT LINE 336 IN MAIN.asm
                    > USED AT LINE 1658 IN MAIN.asm
DOLLAR:             03C7 DEFINED AT LINE 343 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
ARG:                03C7 DEFINED AT LINE 344 IN MAIN.asm
ARG0:               03E5 DEFINED AT LINE 365 IN MAIN.asm
                    > USED AT LINE 371 IN MAIN.asm
ARG0A:              03EE DEFINED AT LINE 373 IN MAIN.asm
                    > USED AT LINE 350 IN MAIN.asm
                    > USED AT LINE 357 IN MAIN.asm
ARG1:               03F3 DEFINED AT LINE 376 IN MAIN.asm
                    > USED AT LINE 369 IN MAIN.asm
ARG1A:              03FB DEFINED AT LINE 383 IN MAIN.asm
                    > USED AT LINE 375 IN MAIN.asm
LBRACK:             03FE DEFINED AT LINE 387 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
ARRAYSTART:         03FE DEFINED AT LINE 388 IN MAIN.asm
RBRACK:             041A DEFINED AT LINE 402 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
ARRAYEND:           041A DEFINED AT LINE 403 IN MAIN.asm
ARRAYEND1:          043C DEFINED AT LINE 425 IN MAIN.asm
                    > USED AT LINE 441 IN MAIN.asm
ARRAYEND2:          044C DEFINED AT LINE 435 IN MAIN.asm
                    > USED AT LINE 431 IN MAIN.asm
ARRINDEX:           0472 DEFINED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
ARRINDEX0:          047A DEFINED AT LINE 470 IN MAIN.asm
ARRINDEX1:          047B DEFINED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
ARRINDEX2:          0487 DEFINED AT LINE 481 IN MAIN.asm
                    > USED AT LINE 478 IN MAIN.asm
ASSIGN:             048A DEFINED AT LINE 486 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
ASSIGN0:            048C DEFINED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 281 IN MAIN.asm
                    > USED AT LINE 1221 IN MAIN.asm
ASSIGNX:            048D DEFINED AT LINE 491 IN MAIN.asm
ASSIGN1:            0499 DEFINED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
COLON:              049B DEFINED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
ARGLIST:            049B DEFINED AT LINE 507 IN MAIN.asm
ARGLIST1:           04A5 DEFINED AT LINE 514 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
ARGLIST1A:          04AD DEFINED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 517 IN MAIN.asm
ARGLIST2:           04B5 DEFINED AT LINE 525 IN MAIN.asm
ARGLIST3:           04BD DEFINED AT LINE 533 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
                    > USED AT LINE 531 IN MAIN.asm
ARGLIST4:           04C0 DEFINED AT LINE 536 IN MAIN.asm
                    > USED AT LINE 522 IN MAIN.asm
                    > USED AT LINE 524 IN MAIN.asm
ARGLIST5:           04C6 DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
LBRACE:             04D2 DEFINED AT LINE 553 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
BLOCKSTART:         04D2 DEFINED AT LINE 554 IN MAIN.asm
BLOCKSTART1:        04D6 DEFINED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 587 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 596 IN MAIN.asm
BLOCKSTART2:        0502 DEFINED AT LINE 585 IN MAIN.asm
                    > USED AT LINE 572 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
BLOCKSTART3:        0505 DEFINED AT LINE 588 IN MAIN.asm
                    > USED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 583 IN MAIN.asm
BLOCKSTART4:        050D DEFINED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 567 IN MAIN.asm
                    > USED AT LINE 569 IN MAIN.asm
BLOCKSTART5:        0510 DEFINED AT LINE 597 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
BLOCKSTART6:        0538 DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 603 IN MAIN.asm
RBRACE:             053B DEFINED AT LINE 620 IN MAIN.asm
                    > USED AT LINE 194 IN MAIN.asm
BLOCKEND:           053B DEFINED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 1611 IN MAIN.asm
BLOCKEND1:          056D DEFINED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
BLOCKEND2:          0579 DEFINED AT LINE 650 IN MAIN.asm
                    > USED AT LINE 642 IN MAIN.asm
BLOCKEND3:          058B DEFINED AT LINE 664 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
TICK:               0597 DEFINED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
CHAR:               0597 DEFINED AT LINE 672 IN MAIN.asm
CHAR1:              059A DEFINED AT LINE 674 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
CHAR2:              05A6 DEFINED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 680 IN MAIN.asm
CHAR3:              05A9 DEFINED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 678 IN MAIN.asm
BACKSLASH:          05AC DEFINED AT LINE 690 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
COMMA:              05AE DEFINED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 225 IN MAIN.asm
DISCARD:            05AE DEFINED AT LINE 696 IN MAIN.asm
DISCARD1:           05BB DEFINED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 703 IN MAIN.asm
SLASH:              05BD DEFINED AT LINE 708 IN MAIN.asm
                    > USED AT LINE 264 IN MAIN.asm
DIV:                05C0 DEFINED AT LINE 718 IN MAIN.asm
                    > USED AT LINE 1270 IN MAIN.asm
DOT:                05D1 DEFINED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 200 IN MAIN.asm
DOTARRAY:           05E3 DEFINED AT LINE 753 IN MAIN.asm
                    > USED AT LINE 732 IN MAIN.asm
DOTARRAY_BLOCK:     05EC DEFINED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
DOTHEX:             05F7 DEFINED AT LINE 761 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
DOTHEX_BLOCK:       0600 DEFINED AT LINE 766 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
DOTSTR:             060B DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
DOTSTR_BLOCK:       0614 DEFINED AT LINE 774 IN MAIN.asm
                    > USED AT LINE 772 IN MAIN.asm
DOTCHAR:            061F DEFINED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
DOTCHAR_BLOCK:      0628 DEFINED AT LINE 782 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
DOTDEC:             0633 DEFINED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
DOTDEC_BLOCK:       063C DEFINED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 788 IN MAIN.asm
DIVIDE:             0647 DEFINED AT LINE 796 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
DIVIDE1:            064C DEFINED AT LINE 799 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
DIVIDE2:            0659 DEFINED AT LINE 807 IN MAIN.asm
                    > USED AT LINE 804 IN MAIN.asm
DIVIDE3:            065A DEFINED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 806 IN MAIN.asm
EQUALS:             0660 DEFINED AT LINE 817 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
LESSTHANEQ:         0668 DEFINED AT LINE 825 IN MAIN.asm
                    > USED AT LINE 260 IN MAIN.asm
LESSTHAN:           066D DEFINED AT LINE 832 IN MAIN.asm
                    > USED AT LINE 262 IN MAIN.asm
LESSTHAN1:          0672 DEFINED AT LINE 837 IN MAIN.asm
                    > USED AT LINE 828 IN MAIN.asm
TRUE1:              0675 DEFINED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 820 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
NULL1:              067B DEFINED AT LINE 844 IN MAIN.asm
FALSE1:             067B DEFINED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 821 IN MAIN.asm
                    > USED AT LINE 835 IN MAIN.asm
                    > USED AT LINE 838 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
CARET:              0681 DEFINED AT LINE 853 IN MAIN.asm
                    > USED AT LINE 223 IN MAIN.asm
GO:                 0681 DEFINED AT LINE 854 IN MAIN.asm
                    > USED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 762 IN MAIN.asm
                    > USED AT LINE 770 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
                    > USED AT LINE 786 IN MAIN.asm
                    > USED AT LINE 1418 IN MAIN.asm
                    > USED AT LINE 1776 IN MAIN.asm
                    > USED AT LINE 1908 IN MAIN.asm
GO1:                0682 DEFINED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 1036 IN MAIN.asm
                    > USED AT LINE 1038 IN MAIN.asm
GO2:                0688 DEFINED AT LINE 861 IN MAIN.asm
                    > USED AT LINE 859 IN MAIN.asm
GOBLOCK:            0694 DEFINED AT LINE 869 IN MAIN.asm
GOBLOCK1:           0694 DEFINED AT LINE 870 IN MAIN.asm
                    > USED AT LINE 864 IN MAIN.asm
GOBLOCK2:           06B9 DEFINED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 973 IN MAIN.asm
GOLAMBDA:           06C7 DEFINED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 866 IN MAIN.asm
GOLAMBDA1:          06E4 DEFINED AT LINE 919 IN MAIN.asm
                    > USED AT LINE 929 IN MAIN.asm
GOLAMBDA2:          06EA DEFINED AT LINE 926 IN MAIN.asm
                    > USED AT LINE 918 IN MAIN.asm
GOLAMBDA3:          06F5 DEFINED AT LINE 932 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
GOLAMBDA4:          070D DEFINED AT LINE 949 IN MAIN.asm
                    > USED AT LINE 946 IN MAIN.asm
GOLAMBDA5:          0711 DEFINED AT LINE 953 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
GOLAMBDA6:          0714 DEFINED AT LINE 957 IN MAIN.asm
                    > USED AT LINE 952 IN MAIN.asm
GOLAMBDA7:          0717 DEFINED AT LINE 960 IN MAIN.asm
GOLAMBDA8:          071C DEFINED AT LINE 966 IN MAIN.asm
                    > USED AT LINE 881 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
HASH:               0727 DEFINED AT LINE 975 IN MAIN.asm
                    > USED AT LINE 219 IN MAIN.asm
HEXNUM:             0727 DEFINED AT LINE 976 IN MAIN.asm
HEXNUM1:            072A DEFINED AT LINE 978 IN MAIN.asm
                    > USED AT LINE 995 IN MAIN.asm
HEXNUM2:            0732 DEFINED AT LINE 984 IN MAIN.asm
                    > USED AT LINE 982 IN MAIN.asm
UPCASE:             0744 DEFINED AT LINE 996 IN MAIN.asm
                    > USED AT LINE 206 IN MAIN.asm
LOWCASE:            0749 DEFINED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 208 IN MAIN.asm
IDENT1:             074E DEFINED AT LINE 1004 IN MAIN.asm
                    > USED AT LINE 999 IN MAIN.asm
QUESTION:           075B DEFINED AT LINE 1017 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
IF:                 075B DEFINED AT LINE 1018 IN MAIN.asm
IFTE:               0767 DEFINED AT LINE 1028 IN MAIN.asm
                    > USED AT LINE 1022 IN MAIN.asm
IFTE1:              0768 DEFINED AT LINE 1030 IN MAIN.asm
                    > USED AT LINE 1025 IN MAIN.asm
STAR:               0774 DEFINED AT LINE 1040 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
MUL:                0774 DEFINED AT LINE 1041 IN MAIN.asm
MUL2:               0776 DEFINED AT LINE 1044 IN MAIN.asm
MUL3:               077E DEFINED AT LINE 1049 IN MAIN.asm
                    > USED AT LINE 1058 IN MAIN.asm
NUM:                0790 DEFINED AT LINE 1062 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
NUM0:               0799 DEFINED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 1066 IN MAIN.asm
NUM1:               079A DEFINED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1087 IN MAIN.asm
NUM2:               07B2 DEFINED AT LINE 1088 IN MAIN.asm
                    > USED AT LINE 986 IN MAIN.asm
                    > USED AT LINE 988 IN MAIN.asm
                    > USED AT LINE 1073 IN MAIN.asm
                    > USED AT LINE 1075 IN MAIN.asm
NUM3:               07BD DEFINED AT LINE 1096 IN MAIN.asm
                    > USED AT LINE 1091 IN MAIN.asm
UNDERSCORE:         07C0 DEFINED AT LINE 1100 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
REMAIN:             07C0 DEFINED AT LINE 1101 IN MAIN.asm
RPAREN:             07C6 DEFINED AT LINE 1106 IN MAIN.asm
                    > USED AT LINE 268 IN MAIN.asm
SEMICOLON:          07CE DEFINED AT LINE 1112 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
SHIFTLEFT:          07EA DEFINED AT LINE 1136 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
SHIFTLEFT1:         07F2 DEFINED AT LINE 1143 IN MAIN.asm
                    > USED AT LINE 1146 IN MAIN.asm
SHIFTLEFT2:         07F3 DEFINED AT LINE 1145 IN MAIN.asm
                    > USED AT LINE 1142 IN MAIN.asm
SHIFTRIGHT:         07FA DEFINED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
SHIFTRIGHT1:        0802 DEFINED AT LINE 1160 IN MAIN.asm
                    > USED AT LINE 1164 IN MAIN.asm
SHIFTRIGHT2:        0806 DEFINED AT LINE 1163 IN MAIN.asm
                    > USED AT LINE 1159 IN MAIN.asm
DBLQUOTE:           080D DEFINED AT LINE 1172 IN MAIN.asm
                    > USED AT LINE 227 IN MAIN.asm
STRING:             080D DEFINED AT LINE 1173 IN MAIN.asm
STRING1:            0816 DEFINED AT LINE 1180 IN MAIN.asm
                    > USED AT LINE 1189 IN MAIN.asm
STRING2:            0819 DEFINED AT LINE 1184 IN MAIN.asm
                    > USED AT LINE 1179 IN MAIN.asm
STRING3:            0822 DEFINED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
MINUS:              0835 DEFINED AT LINE 1207 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
SUB:                0841 DEFINED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
SUB1:               084B DEFINED AT LINE 1222 IN MAIN.asm
                    > USED AT LINE 1218 IN MAIN.asm
COMMAND:            0854 DEFINED AT LINE 1235 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
ERROR1:             088A DEFINED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 1329 IN MAIN.asm
                    > USED AT LINE 1397 IN MAIN.asm
                    > USED AT LINE 1660 IN MAIN.asm
                    > USED AT LINE 1681 IN MAIN.asm
                    > USED AT LINE 1796 IN MAIN.asm
COMMENT:            0891 DEFINED AT LINE 1314 IN MAIN.asm
                    > USED AT LINE 1238 IN MAIN.asm
                    > USED AT LINE 1318 IN MAIN.asm
COMMAND_A:          089A DEFINED AT LINE 1322 IN MAIN.asm
                    > USED AT LINE 1240 IN MAIN.asm
ABSOLUTE:           08A6 DEFINED AT LINE 1341 IN MAIN.asm
                    > USED AT LINE 1325 IN MAIN.asm
ADDROF:             08B3 DEFINED AT LINE 1356 IN MAIN.asm
                    > USED AT LINE 1327 IN MAIN.asm
ADDROF1:            08C7 DEFINED AT LINE 1368 IN MAIN.asm
                    > USED AT LINE 1364 IN MAIN.asm
ADDROF2:            08D2 DEFINED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 1360 IN MAIN.asm
                    > USED AT LINE 1362 IN MAIN.asm
                    > USED AT LINE 1367 IN MAIN.asm
COMMAND_B:          08D4 DEFINED AT LINE 1380 IN MAIN.asm
                    > USED AT LINE 1242 IN MAIN.asm
BUFFERARRAY:        08EF DEFINED AT LINE 1417 IN MAIN.asm
                    > USED AT LINE 1383 IN MAIN.asm
BUFFERARRAY_BLOCK:  08F8 DEFINED AT LINE 1422 IN MAIN.asm
                    > USED AT LINE 1420 IN MAIN.asm
BUFFERARRAY2:       0952 DEFINED AT LINE 1450 IN MAIN.asm
                    > USED AT LINE 1463 IN MAIN.asm
BUFFERARRAY3:       095C DEFINED AT LINE 1459 IN MAIN.asm
                    > USED AT LINE 1448 IN MAIN.asm
BUFFERCHAR:         097B DEFINED AT LINE 1478 IN MAIN.asm
                    > USED AT LINE 1385 IN MAIN.asm
BUFFERDEC:          098A DEFINED AT LINE 1490 IN MAIN.asm
                    > USED AT LINE 1387 IN MAIN.asm
                    > USED AT LINE 1458 IN MAIN.asm
BUFFERDEC0:         09A2 DEFINED AT LINE 1507 IN MAIN.asm
                    > USED AT LINE 1494 IN MAIN.asm
BUFFERDEC1:         09B2 DEFINED AT LINE 1521 IN MAIN.asm
                    > USED AT LINE 1509 IN MAIN.asm
BUFFERDEC2:         09D2 DEFINED AT LINE 1535 IN MAIN.asm
                    > USED AT LINE 1524 IN MAIN.asm
                    > USED AT LINE 1526 IN MAIN.asm
                    > USED AT LINE 1528 IN MAIN.asm
                    > USED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1533 IN MAIN.asm
BUFFERDEC3:         09D4 DEFINED AT LINE 1537 IN MAIN.asm
                    > USED AT LINE 1540 IN MAIN.asm
BUFFERDEC4:         09E4 DEFINED AT LINE 1549 IN MAIN.asm
                    > USED AT LINE 1544 IN MAIN.asm
BUFFERDEC5:         09E5 DEFINED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 1548 IN MAIN.asm
BUFFERHEX:          09EB DEFINED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 1389 IN MAIN.asm
BUFFERHEX1:         0A06 DEFINED AT LINE 1576 IN MAIN.asm
                    > USED AT LINE 1565 IN MAIN.asm
                    > USED AT LINE 1567 IN MAIN.asm
BUFFERHEX2:         0A0F DEFINED AT LINE 1584 IN MAIN.asm
                    > USED AT LINE 1582 IN MAIN.asm
BREAK:              0A1A DEFINED AT LINE 1596 IN MAIN.asm
                    > USED AT LINE 1391 IN MAIN.asm
BREAK1:             0A21 DEFINED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 1600 IN MAIN.asm
BUFFERSTRING:       0A34 DEFINED AT LINE 1615 IN MAIN.asm
                    > USED AT LINE 1393 IN MAIN.asm
BUFFERSTRING0:      0A3B DEFINED AT LINE 1619 IN MAIN.asm
                    > USED AT LINE 1626 IN MAIN.asm
BUFFERSTRING1:      0A3E DEFINED AT LINE 1623 IN MAIN.asm
                    > USED AT LINE 1618 IN MAIN.asm
BUFFERXSPACES:      0A50 DEFINED AT LINE 1637 IN MAIN.asm
                    > USED AT LINE 1395 IN MAIN.asm
BUFFERXSPACES1:     0A57 DEFINED AT LINE 1642 IN MAIN.asm
                    > USED AT LINE 1649 IN MAIN.asm
BUFFERXSPACES2:     0A5B DEFINED AT LINE 1646 IN MAIN.asm
                    > USED AT LINE 1641 IN MAIN.asm
COMMAND_I:          0A64 DEFINED AT LINE 1653 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
COMMAND_P:          0A70 DEFINED AT LINE 1670 IN MAIN.asm
                    > USED AT LINE 1260 IN MAIN.asm
PARTIAL:            0A82 DEFINED AT LINE 1697 IN MAIN.asm
                    > USED AT LINE 1673 IN MAIN.asm
PRINTCHARS:         0AA2 DEFINED AT LINE 1716 IN MAIN.asm
                    > USED AT LINE 1675 IN MAIN.asm
PRINTCHARS1:        0AA8 DEFINED AT LINE 1721 IN MAIN.asm
                    > USED AT LINE 1729 IN MAIN.asm
PRINTCHARS2:        0AAA DEFINED AT LINE 1724 IN MAIN.asm
                    > USED AT LINE 1720 IN MAIN.asm
PRINTSTACK:         0AB4 DEFINED AT LINE 1734 IN MAIN.asm
                    > USED AT LINE 1677 IN MAIN.asm
SIZE:               0AB6 DEFINED AT LINE 1764 IN MAIN.asm
                    > USED AT LINE 1262 IN MAIN.asm
PRINTX:             0AC0 DEFINED AT LINE 1775 IN MAIN.asm
                    > USED AT LINE 1679 IN MAIN.asm
PRINTX_BLOCK:       0AC9 DEFINED AT LINE 1780 IN MAIN.asm
                    > USED AT LINE 1778 IN MAIN.asm
COMMAND_V:          0AEB DEFINED AT LINE 1783 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
CONSTBUFSTART:      0B00 DEFINED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 1792 IN MAIN.asm
CONSTHEAPSTART:     0B05 DEFINED AT LINE 1818 IN MAIN.asm
CONSTTIBSTART:      0B0A DEFINED AT LINE 1822 IN MAIN.asm
                    > USED AT LINE 1794 IN MAIN.asm
VARBUFPTR:          0B0F DEFINED AT LINE 1826 IN MAIN.asm
                    > USED AT LINE 1786 IN MAIN.asm
VARHEAPPTR:         0B18 DEFINED AT LINE 1831 IN MAIN.asm
                    > USED AT LINE 1788 IN MAIN.asm
VARTIBPTR:          0B21 DEFINED AT LINE 1836 IN MAIN.asm
                    > USED AT LINE 1790 IN MAIN.asm
VARIABLE:           0B2A DEFINED AT LINE 1841 IN MAIN.asm
                    > USED AT LINE 297 IN MAIN.asm
                    > USED AT LINE 1829 IN MAIN.asm
                    > USED AT LINE 1834 IN MAIN.asm
                    > USED AT LINE 1839 IN MAIN.asm
CONSTANT:           0B2D DEFINED AT LINE 1843 IN MAIN.asm
                    > USED AT LINE 1816 IN MAIN.asm
                    > USED AT LINE 1820 IN MAIN.asm
                    > USED AT LINE 1824 IN MAIN.asm
CHARS:              0B30 DEFINED AT LINE 1848 IN MAIN.asm
                    > USED AT LINE 1244 IN MAIN.asm
CHARS1:             0B33 DEFINED AT LINE 1850 IN MAIN.asm
                    > USED AT LINE 1895 IN MAIN.asm
DECIMAL:            0B38 DEFINED AT LINE 1854 IN MAIN.asm
                    > USED AT LINE 1246 IN MAIN.asm
DECIMAL1:           0B3B DEFINED AT LINE 1856 IN MAIN.asm
                    > USED AT LINE 1861 IN MAIN.asm
HEXADECIMAL:        0B40 DEFINED AT LINE 1859 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
INPUT:              0B46 DEFINED AT LINE 1865 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
KEY:                0B51 DEFINED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 1254 IN MAIN.asm
OUTPUT:             0B5A DEFINED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1258 IN MAIN.asm
NUMBERS:            0B63 DEFINED AT LINE 1893 IN MAIN.asm
                    > USED AT LINE 1256 IN MAIN.asm
FILTER:             0B69 DEFINED AT LINE 1902 IN MAIN.asm
MAP:                0B69 DEFINED AT LINE 1903 IN MAIN.asm
ZPRT:               0B6B DEFINED AT LINE 1907 IN MAIN.asm
ZPRT_ARGS:          0B76 DEFINED AT LINE 1914 IN MAIN.asm
                    > USED AT LINE 1911 IN MAIN.asm
ZPRT_BLOCK:         0B78 DEFINED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
ARGS0A1L_:          0B9F DEFINED AT LINE 1922 IN MAIN.asm
ARGS0A1L:           0BA1 DEFINED AT LINE 1925 IN MAIN.asm
ARGS1A0L_:          0BA2 DEFINED AT LINE 1928 IN MAIN.asm
ARGS1A0L:           0BA4 DEFINED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
                    > USED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 1779 IN MAIN.asm
ARGS1A1L_:          0BA5 DEFINED AT LINE 1934 IN MAIN.asm
ARGS1A1L:           0BA7 DEFINED AT LINE 1937 IN MAIN.asm
ARGS2A0L_:          0BA9 DEFINED AT LINE 1940 IN MAIN.asm
ARGS2A0L:           0BAB DEFINED AT LINE 1943 IN MAIN.asm
ARGS1A2L_:          0BAD DEFINED AT LINE 1946 IN MAIN.asm
ARGS1A2L:           0BAF DEFINED AT LINE 1949 IN MAIN.asm
                    > USED AT LINE 1421 IN MAIN.asm
JUMPTABLE:          0BB2 DEFINED AT LINE 1960 IN MAIN.asm
                    > USED AT LINE 730 IN MAIN.asm
                    > USED AT LINE 1236 IN MAIN.asm
                    > USED AT LINE 1323 IN MAIN.asm
                    > USED AT LINE 1381 IN MAIN.asm
                    > USED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 1784 IN MAIN.asm
JUMPTABLE0:         0BB4 DEFINED AT LINE 1963 IN MAIN.asm
                    > USED AT LINE 1973 IN MAIN.asm
JUMPTABLE1:         0BC1 DEFINED AT LINE 1974 IN MAIN.asm
                    > USED AT LINE 1966 IN MAIN.asm
JUMPTABLE2:         0BC2 DEFINED AT LINE 1976 IN MAIN.asm
                    > USED AT LINE 1969 IN MAIN.asm
PRTSTR0:            0BC8 DEFINED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
PRTSTR:             0BCC DEFINED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
NESTING:            0BD1 DEFINED AT LINE 2003 IN MAIN.asm
                    > USED AT LINE 2099 IN MAIN.asm
                    > USED AT LINE 2154 IN MAIN.asm
NESTING0:           0BDB DEFINED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 2005 IN MAIN.asm
                    > USED AT LINE 2007 IN MAIN.asm
NESTING1A:          0BE2 DEFINED AT LINE 2014 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
NESTING1:           0BE5 DEFINED AT LINE 2017 IN MAIN.asm
                    > USED AT LINE 2008 IN MAIN.asm
NESTING2:           0BF4 DEFINED AT LINE 2026 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
                    > USED AT LINE 2023 IN MAIN.asm
NESTING3:           0BF6 DEFINED AT LINE 2029 IN MAIN.asm
                    > USED AT LINE 2025 IN MAIN.asm
NESTING4:           0C01 DEFINED AT LINE 2036 IN MAIN.asm
                    > USED AT LINE 2031 IN MAIN.asm
                    > USED AT LINE 2033 IN MAIN.asm
PROMPT:             0C03 DEFINED AT LINE 2040 IN MAIN.asm
                    > USED AT LINE 2082 IN MAIN.asm
CRLF:               0C0C DEFINED AT LINE 2045 IN MAIN.asm
                    > USED AT LINE 2166 IN MAIN.asm
PRINTSTR:           0C13 DEFINED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
                    > USED AT LINE 2046 IN MAIN.asm
                    > USED AT LINE 2078 IN MAIN.asm
                    > USED AT LINE 2214 IN MAIN.asm
INIT:               0C1A DEFINED AT LINE 2059 IN MAIN.asm
                    > USED AT LINE 7
                    > USED AT LINE 2077 IN MAIN.asm
INIT0:              0C33 DEFINED AT LINE 2069 IN MAIN.asm
                    > USED AT LINE 2072 IN MAIN.asm
START:              0C38 DEFINED AT LINE 2075 IN MAIN.asm
                    > USED AT LINE 8
INTERPRET:          0C4E DEFINED AT LINE 2081 IN MAIN.asm
                    > USED AT LINE 2194 IN MAIN.asm
                    > USED AT LINE 2207 IN MAIN.asm
                    > USED AT LINE 2222 IN MAIN.asm
                    > USED AT LINE 2225 IN MAIN.asm
                    > USED AT LINE 2230 IN MAIN.asm
INTERPRET2:         0C5A DEFINED AT LINE 2088 IN MAIN.asm
                    > USED AT LINE 2146 IN MAIN.asm
                    > USED AT LINE 2212 IN MAIN.asm
                    > USED AT LINE 2216 IN MAIN.asm
INTERPRET3:         0C62 DEFINED AT LINE 2095 IN MAIN.asm
                    > USED AT LINE 2104 IN MAIN.asm
INTERPRET4:         0C68 DEFINED AT LINE 2101 IN MAIN.asm
                    > USED AT LINE 2093 IN MAIN.asm
INTERPRET5:         0C6D DEFINED AT LINE 2107 IN MAIN.asm
                    > USED AT LINE 2155 IN MAIN.asm
                    > USED AT LINE 2169 IN MAIN.asm
INTERPRET5A:        0C90 DEFINED AT LINE 2143 IN MAIN.asm
INTERPRET6:         0C92 DEFINED AT LINE 2148 IN MAIN.asm
                    > USED AT LINE 2110 IN MAIN.asm
INTERPRET7:         0CA0 DEFINED AT LINE 2157 IN MAIN.asm
                    > USED AT LINE 2115 IN MAIN.asm
INTERPRET8:         0CB3 DEFINED AT LINE 2171 IN MAIN.asm
                    > USED AT LINE 2113 IN MAIN.asm
NEXT:               0CBE DEFINED AT LINE 2179 IN MAIN.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 2183 IN MAIN.asm
NEXT1:              0CCF DEFINED AT LINE 2191 IN MAIN.asm
                    > USED AT LINE 2184 IN MAIN.asm
EXIT:               0CD6 DEFINED AT LINE 2195 IN MAIN.asm
                    > USED AT LINE 2193 IN MAIN.asm
RUN:                0CDA DEFINED AT LINE 2199 IN MAIN.asm
                    > USED AT LINE 2205 IN MAIN.asm
                    > USED AT LINE 2220 IN MAIN.asm
                    > USED AT LINE 2228 IN MAIN.asm
ERROR:              0CDE DEFINED AT LINE 2204 IN MAIN.asm
                    > USED AT LINE 1312 IN MAIN.asm
BACKSPACE_:         0CF1 DEFINED AT LINE 2209 IN MAIN.asm
                    > USED AT LINE 2120 IN MAIN.asm
EDIT_:              0D01 DEFINED AT LINE 2219 IN MAIN.asm
                    > USED AT LINE 2118 IN MAIN.asm
REEDIT_:            0D19 DEFINED AT LINE 2224 IN MAIN.asm
                    > USED AT LINE 2122 IN MAIN.asm
PRINTSTACK_:        0D1C DEFINED AT LINE 2227 IN MAIN.asm
                    > USED AT LINE 2124 IN MAIN.asm
STACK:              2080 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 872 IN MAIN.asm
                    > USED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 2076 IN MAIN.asm
VARS:               2100 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 1370 IN MAIN.asm
                    > USED AT LINE 2066 IN MAIN.asm
RESTARTS:           21D0 DEFINED AT LINE 10 IN ram.asm
RST08:              21D0 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              21D2 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              21D4 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              21D6 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              21D8 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              21DA DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               21DC DEFINED AT LINE 18 IN ram.asm
INTVEC:             21DE DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             21E0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            21E2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            21E4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            21E6 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 2063 IN MAIN.asm
VDATAWIDTH:         21E6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 429 IN MAIN.asm
                    > USED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 1851 IN MAIN.asm
VNUMBASE:           21E8 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 1857 IN MAIN.asm
VTIBPTR:            21EA DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1837 IN MAIN.asm
                    > USED AT LINE 1838 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
                    > USED AT LINE 2174 IN MAIN.asm
VBUFPTR:            21EC DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1429 IN MAIN.asm
                    > USED AT LINE 1436 IN MAIN.asm
                    > USED AT LINE 1464 IN MAIN.asm
                    > USED AT LINE 1471 IN MAIN.asm
                    > USED AT LINE 1480 IN MAIN.asm
                    > USED AT LINE 1483 IN MAIN.asm
                    > USED AT LINE 1491 IN MAIN.asm
                    > USED AT LINE 1496 IN MAIN.asm
                    > USED AT LINE 1497 IN MAIN.asm
                    > USED AT LINE 1563 IN MAIN.asm
                    > USED AT LINE 1569 IN MAIN.asm
                    > USED AT LINE 1570 IN MAIN.asm
                    > USED AT LINE 1617 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1628 IN MAIN.asm
                    > USED AT LINE 1640 IN MAIN.asm
                    > USED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 1827 IN MAIN.asm
                    > USED AT LINE 1828 IN MAIN.asm
VNEXT:              21EE DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2060 IN MAIN.asm
VHEAPPTR:           21F0 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 413 IN MAIN.asm
                    > USED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 544 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
                    > USED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 1129 IN MAIN.asm
                    > USED AT LINE 1131 IN MAIN.asm
                    > USED AT LINE 1174 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
                    > USED AT LINE 1699 IN MAIN.asm
                    > USED AT LINE 1704 IN MAIN.asm
                    > USED AT LINE 1705 IN MAIN.asm
                    > USED AT LINE 1832 IN MAIN.asm
                    > USED AT LINE 1833 IN MAIN.asm
VPOINTER:           21F2 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 295 IN MAIN.asm
                    > USED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 379 IN MAIN.asm
                    > USED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 1008 IN MAIN.asm
                    > USED AT LINE 1842 IN MAIN.asm
VREMAIN:            21F4 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 725 IN MAIN.asm
                    > USED AT LINE 1102 IN MAIN.asm
VSAVEDIP:           21F6 DEFINED AT LINE 40 IN ram.asm
VSAVEDSP:           21F8 DEFINED AT LINE 41 IN ram.asm
VSAVEDBP:           21FA DEFINED AT LINE 42 IN ram.asm
VCHECKSUM:          21FC DEFINED AT LINE 43 IN ram.asm
VTEMP1:             21FE DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 406 IN MAIN.asm
                    > USED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 624 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
                    > USED AT LINE 871 IN MAIN.asm
                    > USED AT LINE 877 IN MAIN.asm
                    > USED AT LINE 905 IN MAIN.asm
                    > USED AT LINE 930 IN MAIN.asm
                    > USED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
                    > USED AT LINE 1427 IN MAIN.asm
                    > USED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 1700 IN MAIN.asm
                    > USED AT LINE 1703 IN MAIN.asm
VTEMP2:             2200 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 931 IN MAIN.asm
                    > USED AT LINE 1428 IN MAIN.asm
                    > USED AT LINE 1473 IN MAIN.asm
VLASTDEF:           2202 DEFINED AT LINE 49 IN ram.asm
VHASHSTR:           2204 DEFINED AT LINE 50 IN ram.asm
TBPTR:              2206 DEFINED AT LINE 51 IN ram.asm
TIB:                2300 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 1823 IN MAIN.asm
                    > USED AT LINE 2085 IN MAIN.asm
                    > USED AT LINE 2092 IN MAIN.asm
                    > USED AT LINE 2149 IN MAIN.asm
                    > USED AT LINE 2158 IN MAIN.asm
                    > USED AT LINE 2172 IN MAIN.asm
                    > USED AT LINE 2175 IN MAIN.asm
BUF:                2400 DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 1815 IN MAIN.asm
PAD:                2500 DEFINED AT LINE 58 IN ram.asm
HEAP:               2600 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 65 IN MAIN.asm
                    > USED AT LINE 599 IN MAIN.asm
                    > USED AT LINE 1819 IN MAIN.asm
