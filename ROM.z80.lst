0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 F4 0E               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQ:       EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of Monty code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num_locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
00C9                .macro PERFORM,name
00C9                             ; 
00C9                 ld ix,perform%%M
00C9                 jp name
00C9                perform%%M:
00C9                .endm
00C9                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   04                     DB   lsb(bang_)   ; !     1
0181   41                     DB   lsb(dquote_)   ; "     2
0182   44                     DB   lsb(hash_)   ; #     1
0183   5C                     DB   lsb(dollar_)   ; $     1
0184   5F                     DB   lsb(percent_)   ; %     1
0185   62                     DB   lsb(amper_)   ; &     1
0186   6D                     DB   lsb(quote_)   ; '     2
0187   70                     DB   lsb(lparen_)   ; (     1
0188   73                     DB   lsb(rparen_)   ; )     1
0189   7B                     DB   lsb(star_)   ; *     1
018A   97                     DB   lsb(plus_)   ; +     1
018B   B3                     DB   lsb(comma_)   ; ,     2
018C   B6                     DB   lsb(minus_)   ; -     1
018D   D4                     DB   lsb(dot_)   ; .     2
018E   D7                     DB   lsb(slash_)   ; /	    1
018F   DA                     DB   lsb(num_)   ; 0     1
0190   DA                     DB   lsb(num_)   ; 1
0191   DA                     DB   lsb(num_)   ; 2
0192   DA                     DB   lsb(num_)   ; 3
0193   DA                     DB   lsb(num_)   ; 4
0194   DA                     DB   lsb(num_)   ; 5
0195   DA                     DB   lsb(num_)   ; 6
0196   DA                     DB   lsb(num_)   ; 7
0197   DA                     DB   lsb(num_)   ; 8
0198   DA                     DB   lsb(num_)   ; 9
0199   DD                     DB   lsb(colon_)   ; :     2
019A   F6                     DB   lsb(semicolon_)   ; ;     2
019B   2F                     DB   lsb(lt_)   ; <     1
019C   15                     DB   lsb(eq_)   ; =     1
019D   24                     DB   lsb(gt_)   ; >     1
019E   F9                     DB   lsb(question_)   ; ?     1
019F   75                     DB   lsb(at_)   ; @     2
01A0   FC                     DB   lsb(upcase_)   ; A     1
01A1   FC                     DB   lsb(upcase_)   ; B
01A2   FC                     DB   lsb(upcase_)   ; C
01A3   FC                     DB   lsb(upcase_)   ; D
01A4   FC                     DB   lsb(upcase_)   ; E
01A5   FC                     DB   lsb(upcase_)   ; F
01A6   FC                     DB   lsb(upcase_)   ; G
01A7   FC                     DB   lsb(upcase_)   ; h
01A8   FC                     DB   lsb(upcase_)   ; I
01A9   FC                     DB   lsb(upcase_)   ; J
01AA   FC                     DB   lsb(upcase_)   ; K
01AB   FC                     DB   lsb(upcase_)   ; L
01AC   FC                     DB   lsb(upcase_)   ; M
01AD   FC                     DB   lsb(upcase_)   ; N
01AE   FC                     DB   lsb(upcase_)   ; O
01AF   FC                     DB   lsb(upcase_)   ; p
01B0   FC                     DB   lsb(upcase_)   ; Q
01B1   FC                     DB   lsb(upcase_)   ; R
01B2   FC                     DB   lsb(upcase_)   ; S
01B3   FC                     DB   lsb(upcase_)   ; T
01B4   FC                     DB   lsb(upcase_)   ; U
01B5   FC                     DB   lsb(upcase_)   ; V
01B6   FC                     DB   lsb(upcase_)   ; W
01B7   FC                     DB   lsb(upcase_)   ; X
01B8   FC                     DB   lsb(upcase_)   ; Y
01B9   FC                     DB   lsb(upcase_)   ; Z
01BA   13                     DB   lsb(lbrack_)   ; [     2
01BB   2F                     DB   lsb(backslash_)   ; \     2
01BC   50                     DB   lsb(rbrack_)   ; ]     2
01BD   A0                     DB   lsb(caret_)   ; ^     1
01BE   B6                     DB   lsb(underscore_)   ; _     2
01BF   B9                     DB   lsb(grave_)   ; `     2   	
01C0   01                     DB   lsb(lowcase_)   ; a     1
01C1   01                     DB   lsb(lowcase_)   ; b
01C2   01                     DB   lsb(lowcase_)   ; c
01C3   01                     DB   lsb(lowcase_)   ; d
01C4   01                     DB   lsb(lowcase_)   ; e
01C5   01                     DB   lsb(lowcase_)   ; f
01C6   01                     DB   lsb(lowcase_)   ; g
01C7   01                     DB   lsb(lowcase_)   ; h
01C8   01                     DB   lsb(lowcase_)   ; i
01C9   01                     DB   lsb(lowcase_)   ; j
01CA   01                     DB   lsb(lowcase_)   ; k
01CB   01                     DB   lsb(lowcase_)   ; l
01CC   01                     DB   lsb(lowcase_)   ; m
01CD   01                     DB   lsb(lowcase_)   ; n
01CE   01                     DB   lsb(lowcase_)   ; o
01CF   01                     DB   lsb(lowcase_)   ; p
01D0   01                     DB   lsb(lowcase_)   ; q
01D1   01                     DB   lsb(lowcase_)   ; r
01D2   01                     DB   lsb(lowcase_)   ; s
01D3   01                     DB   lsb(lowcase_)   ; t
01D4   01                     DB   lsb(lowcase_)   ; u
01D5   01                     DB   lsb(lowcase_)   ; v
01D6   01                     DB   lsb(lowcase_)   ; w
01D7   01                     DB   lsb(lowcase_)   ; x
01D8   01                     DB   lsb(lowcase_)   ; y
01D9   01                     DB   lsb(lowcase_)   ; z
01DA   CF                     DB   lsb(lbrace_)   ; {     1
01DB   D4                     DB   lsb(pipe_)   ; |     1
01DC   DE                     DB   lsb(rbrace_)   ; }     1
01DD   E1                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 22                  DW   BUFFER   ; vBufPtr pointer into BUF
01E6   80 0F                  DW   next   ; nNext
01E8   22 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; vStrMode
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                BANG_:       
0204                BANG:        ; logical invert, any non zero value
0204   03                     INC   bc   
0205   0A                     LD   a,(bc)   
0206   FE 3D                  CP   "="   
0208   20 05                  JR   nz,not   
020A   E1                     POP   hl   
020B   D1                     POP   de   
020C   C3 0B 0C               JP   notequals   
020F                NOT:         
020F   0B                     DEC   bc   
0210   21 00 00               LD   hl,0   ; is considered true
0213   18 0B                  JR   eq1   
0215                EQ_:         
0215                EQ:          
0215   03                     INC   bc   
0216   0A                     LD   a,(bc)   
0217   FE 3D                  CP   "="   
0219   28 04                  JR   z,eq0   
021B   0B                     DEC   bc   
021C   C3 DF 0B               JP   assign   
021F                EQ0:         
021F   E1                     POP   hl   
0220                EQ1:         
0220   D1                     POP   de   
0221   C3 04 0C               JP   equals   
0224                GT_:         
0224                GT:          
0224   03                     INC   bc   
0225   0A                     LD   a,(bc)   
0226   FE 3E                  CP   ">"   
0228   CA 3B 0C               JP   z,shiftRight   
022B   D1                     POP   de   
022C   E1                     POP   hl   
022D   18 09                  JR   lt1   
022F                LT_:         
022F                LT:          
022F   03                     INC   bc   
0230   0A                     LD   a,(bc)   
0231   FE 3C                  CP   "<"   
0233   CA 2B 0C               JP   z,shiftLeft   
0236   E1                     POP   hl   
0237   D1                     POP   de   
0238                LT1:         
0238   FE 3D                  CP   "="   
023A   CA 12 0C               JP   z,lessthaneq   
023D   0B                     DEC   bc   
023E   C3 17 0C               JP   lessthan   
0241                DQUOTE_:      
0241   C3 C3 0C               JP   dquote   
0244                             ; index of an array, based on vDataWidth 22
0244                             ; array* num -- value    ; also sets vPointer to address
0244                HASH_:       
0244                HASH:        
0244                ARRAYINDEX:      
0244   E1                     POP   hl   ; hl = index
0245   D1                     POP   de   ; de = array
0246   3A E6 23               LD   a,(vDataWidth)   ; a = data width
0249   3D                     DEC   a   
024A   28 01                  JR   z,arrayIndex1   
024C                ARRAYINDEX0:      
024C   29                     ADD   hl,hl   ; if data width = 2 then double
024D                ARRAYINDEX1:      
024D   19                     ADD   hl,de   ; add addr
024E   22 F8 23               LD   (vPointer),hl   ; store address in setter
0251   16 00                  LD   d,0   
0253   5E                     LD   e,(hl)   
0254   B7                     OR   a   ; check data width again
0255   28 02                  JR   z,arrayIndex2   
0257   23                     INC   hl   
0258   56                     LD   d,(hl)   
0259                ARRAYINDEX2:      
0259   D5                     PUSH   de   
025A   DD E9                  JP   (ix)   
025C                DOLLAR_:      
025C   C3 7F 0A               JP   dollar   
025F                PERCENT_:      
025F   C3 68 0C               JP   percent   
0262                             ; & and                          14
0262                             ; a b -- c
0262                AMPER_:      
0262                AMPER:       
0262                AND:         
0262   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0263   E1                     POP   hl   
0264   7B                     LD   a,e   
0265   A5                     AND   l   
0266   6F                     LD   l,a   
0267   7A                     LD   a,d   
0268   A4                     AND   h   
0269                AND1:        
0269   67                     LD   h,a   
026A   E5                     PUSH   hl   
026B   DD E9                  JP   (ix)   
026D                QUOTE_:      
026D   C3 4E 0C               JP   quote   
0270                             ; { block start                 ; 4
0270                             ; -- block*
0270                LPAREN_:      
0270   C3 CF 03               JP   lbrace   
0273                             ;                               4
0273                RPAREN_:      
0273                RPAREN:      
0273   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0276   FD 46 09               LD   b,(iy+9)   
0279   DD E9                  JP   (ix)   
027B                STAR_:       ; 21
027B                STAR:        
027B                MUL:         
027B   D1                     POP   de   ; get first value
027C   E1                     POP   hl   
027D                MUL2:        
027D   C5                     PUSH   bc   ; Preserve the IP
027E   44 4D                  LD   bc,hl   ; bc = 2nd value
0280   21 00 00               LD   hl,0   
0283   3E 10                  LD   a,16   
0285                MUL3:        
0285   29                     ADD   hl,hl   
0286   CB 13                  RL   e   
0288   CB 12                  RL   d   
028A   30 04                  JR   nc,$+6   
028C   09                     ADD   hl,bc   
028D   30 01                  JR   nc,$+3   
028F   13                     INC   de   
0290   3D                     DEC   a   
0291   20 F2                  JR   nz,mul3   
0293   C1                     POP   bc   ; Restore the IP
0294   C3 A6 02               JP   add3   
0297                             ; + add                         25
0297                             ; a b -- c
0297                PLUS_:       
0297                PLUS:        
0297                ADD:         
0297   03                     INC   bc   
0298   0A                     LD   a,(bc)   
0299   FE 2B                  CP   "+"   ; ++ increment variable
029B   20 05                  JR   nz,add1   
029D   E1                     POP   hl   
029E   23                     INC   hl   
029F   C3 E1 0B               JP   assign0   
02A2                ADD1:        
02A2   0B                     DEC   bc   
02A3   D1                     POP   de   ; second term
02A4   E1                     POP   hl   ; first term
02A5   19                     ADD   hl,de   
02A6                ADD3:        
02A6   03                     INC   bc   
02A7   0A                     LD   a,(bc)   
02A8   FE 3D                  CP   "="   
02AA   28 04                  JR   z,add4   
02AC   0B                     DEC   bc   
02AD   E5                     PUSH   hl   
02AE   DD E9                  JP   (ix)   
02B0                ADD4:        
02B0   C3 E1 0B               JP   assign0   
02B3                COMMA_:      
02B3   C3 C3 0C               JP   comma   
02B6                             ; - sub                          23
02B6                             ; a b -- c
02B6                MINUS_:      
02B6                MINUS:       
02B6   03                     INC   bc   ; check if sign of a number
02B7   0A                     LD   a,(bc)   
02B8   0B                     DEC   bc   
02B9   FE 30                  CP   "0"   
02BB   38 05                  JR   c,sub   
02BD   FE 3A                  CP   "9"+1   
02BF   DA B5 0A               JP   c,num   
02C2                SUB:         ; Subtract the value 2nd on stack from top of stack
02C2   03                     INC   bc   
02C3   FE 2D                  CP   "-"   
02C5   20 05                  JR   nz,sub1   
02C7   E1                     POP   hl   
02C8   2B                     DEC   hl   
02C9   C3 E1 0B               JP   assign0   
02CC                SUB1:        
02CC   0B                     DEC   bc   
02CD   D1                     POP   de   
02CE   E1                     POP   hl   
02CF   B7                     OR   a   
02D0   ED 52                  SBC   hl,de   
02D2   18 D2                  JR   add3   
02D4                DOT_:        
02D4   C3 00 04               JP   dot   
02D7                SLASH_:      
02D7   C3 00 05               JP   slash   
02DA                NUM_:        
02DA   C3 B5 0A               JP   num   
02DD                COLON_:      
02DD   C3 E0 02               JP   colon   
02E0                COLON:       
02E0   03                     INC   bc   ; arg_list must ve immediately followed by {
02E1   0A                     LD   a,(bc)   
02E2   FE 3D                  CP   "="   ; := definition
02E4   28 07                  JR   z,defineStart   
02E6   0B                     DEC   bc   
02E7   21 01 00               LD   hl,1   
02EA   C3 A4 0F               JP   error   
02ED                DEFINESTART:      
02ED   E1                     POP   hl   ; discard variable value
02EE   2A F8 23               LD   hl,(vPointer)   ; vDefine = vPointer
02F1   22 F4 23               LD   (vDefine),hl   
02F4   DD E9                  JP   (ix)   
02F6                SEMICOLON_:      
02F6   C3 F0 0B               JP   semicolon   
02F9                QUESTION_:      
02F9   C3 9C 0A               JP   question   
02FC                             ;                               18
02FC                UPCASE_:      
02FC                UPCASE:      
02FC   0A                     LD   a,(bc)   ; a = identifier char
02FD   D6 41                  SUB   "A"   ; "A" = 0
02FF   18 05                  JR   ident1   
0301                             ;********************** PAGE 2 END *********************************************
0301                             ;********************** PAGE 3 BEGIN *********************************************
0301                LOWCASE_:      
0301                LOWCASE:      
0301   0A                     LD   a,(bc)   
0302   D6 61                  SUB   "a"   
0304   C6 1A                  ADD   a,26   
0306                IDENT1:      
0306   87                     ADD   a,a   ; l = a * 2
0307   6F                     LD   l,a   
0308   26 23                  LD   h,msb(vars)   
030A   22 F8 23               LD   (vPointer),hl   ; store address in setter
030D   5E                     LD   e,(hl)   
030E   23                     INC   hl   
030F   56                     LD   d,(hl)   
0310   D5                     PUSH   de   
0311   DD E9                  JP   (ix)   
0313                             ; [                             14
0313                LBRACK_:      
0313                LBRACK:      
0313                ARRAYSTART:      
0313   11 00 00               LD   de,0   ; create stack frame
0316   D5                     PUSH   de   ; push null for IP
0317   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
031A   FD 56 05               LD   d,(iy+5)   ; 
031D   D5                     PUSH   de   ; 
031E   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0321   FD 56 03               LD   d,(iy+3)   ; 
0324   D5                     PUSH   de   ; 
0325   FD E5                  PUSH   iy   ; push BP
0327   FD 21 00 00            LD   iy,0   ; BP = SP
032B   FD 39                  ADD   iy,sp   
032D   DD E9                  JP   (ix)   
032F                             ; \                             19
032F                BACKSLASH_:      
032F                BACKSLASH:      
032F                LAMBDA:      
032F   DD E5                  PUSH   ix   
0331   CD DE 0C               CALL   parseArgs   
0334                LAMBDA1:      
0334   03                     INC   bc   ; arg_list must ve immediately followed by {
0335   0A                     LD   a,(bc)   
0336   FE 21                  CP   " "+1   ; skip white space
0338   38 FA                  JR   c,lambda1   
033A   FE 7B                  CP   "{"   
033C   28 06                  JR   z,lambda2   
033E   21 02 00               LD   hl,2   ; error 2: parse error
0341   C3 A4 0F               JP   error   
0344                LAMBDA2:      
0344   CD 14 0D               CALL   parseBlock   
0347   CD 7E 0D               CALL   createFunc   
034A   E1                     POP   hl   
034B   DD E1                  POP   ix   
034D   E5                     PUSH   hl   
034E   DD E9                  JP   (ix)   
0350                RBRACK_:      
0350                RBRACK:      
0350                ARRAYEND:      ; 53
0350   FD 54                  LD   d,iyh   ; de = BP
0352   FD 5D                  LD   e,iyl   
0354   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0358   62 6B                  LD   hl,de   ; hl = de = BP
035A   B7                     OR   a   
035B   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
035D   CB 3C                  SRL   h   ; 
035F   CB 1D                  RR   l   
0361   44 4D                  LD   bc,hl   ; bc = count
0363   2A F0 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
0366   71                     LD   (hl),c   ; write num items in length word
0367   23                     INC   hl   
0368   70                     LD   (hl),b   
0369   23                     INC   hl   ; hl = array[0], bc = count
036A                             ; de = BP, hl = array[0], bc = count
036A   18 15                  JR   arrayEnd3   
036C                ARRAYEND1:      
036C   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
036F   77                     LD   (hl),a   ; write lsb of array item
0370   23                     INC   hl   ; move to msb of array item
0371   3A E6 23               LD   a,(vDataWidth)   ; vDataWidth=1?
0374   3D                     DEC   a   
0375   28 05                  JR   z,arrayEnd2   
0377   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
037A   77                     LD   (hl),a   ; write msb of array item
037B   23                     INC   hl   ; move to next word in array
037C                ARRAYEND2:      
037C   FD 2B                  DEC   iy   ; move to next word on stack
037E   FD 2B                  DEC   iy   
0380   0B                     DEC   bc   ; dec items count
0381                ARRAYEND3:      
0381   79                     LD   a,c   ; if not zero loop
0382   B0                     OR   b   
0383   20 E7                  JR   nz,arrayEnd1   
0385   EB                     EX   de,hl   ; de = end of array, hl = BP
0386   F9                     LD   sp,hl   ; sp = BP
0387   E1                     POP   hl   ; de = end of array, hl = old BP
0388   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0389   FD 62                  LD   iyh,d   
038B   FD 6B                  LD   iyl,e   
038D   D1                     POP   de   ; pop arg_list (discard)
038E   D1                     POP   de   ; pop first_arg* (discard)
038F   D1                     POP   de   ; pop IP (discard)
0390   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = array[-2]
0394   13                     INC   de   
0395   13                     INC   de   
0396   D5                     PUSH   de   ; return array[0]
0397   22 F0 23               LD   (vHeapPtr),hl   ; move heap* to end of array
039A   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
039E   DD E9                  JP   (ix)   
03A0                CARET_:      
03A0                             ; execute a block of code which ends with } 116
03A0                             ; creates a root scope if BP == stack
03A0                             ; else uses outer scope
03A0                CARET:       
03A0                GO:          
03A0   D1                     POP   de   ; de = block*
03A1                GO1:         
03A1   7B                     LD   a,e   ; if block* == null, exit
03A2   B2                     OR   d   
03A3   20 02                  JR   nz,go2   
03A5   DD E9                  JP   (ix)   
03A7                GO2:         
03A7   1A                     LD   a,(de)   
03A8   FE 7B                  CP   "{"   
03AA   CA 52 0B               JP   z,goBlock   
03AD   FE 28                  CP   "("   
03AF   C2 85 0B               JP   nz,goFunc   
03B2   D5                     PUSH   de   ; push de just before stack frame
03B3   CA 52 0B               JP   z,goBlock   
03B6                UNDERSCORE_:      
03B6   C3 C3 0C               JP   underscore   
03B9                GRAVE_:      
03B9                GRAVE:       
03B9                PRINTLITERAL:      
03B9   03                     INC   bc   ; move to first char
03BA   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
03BE   18 03                  JR   printLiteral1   
03C0                PRINTLITERAL0:      
03C0   12                     LD   (de),a   ; a -> buffer*
03C1   13                     INC   de   ; string*++,
03C2   03                     INC   bc   
03C3                PRINTLITERAL1:      
03C3   0A                     LD   a,(bc)   ; a <- string*
03C4   FE 60                  CP   "`"   ; if ` exit loop
03C6   20 F8                  JR   nz,printLiteral0   
03C8   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
03CC   C3 9D 0C               JP   dotNext   
03CF                LBRACE_:      
03CF                LBRACE:      
03CF   CD 14 0D               CALL   parseBlock   
03D2   DD E9                  JP   (ix)   
03D4                             ; | or                          11
03D4                             ; a b -- c
03D4                PIPE_:       
03D4                PIPE:        
03D4                OR:          
03D4   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03D5   E1                     POP   hl   
03D6   7B                     LD   a,e   
03D7   B5                     OR   l   
03D8   6F                     LD   l,a   
03D9   7A                     LD   a,d   
03DA   B4                     OR   h   
03DB   C3 69 02               JP   and1   
03DE                RBRACE_:      
03DE   C3 E5 0A               JP   rbrace   
03E1                             ; ~ char                        8
03E1                TILDE_:      
03E1                TILDE:       
03E1                CHAR:        
03E1   03                     INC   bc   ; point to next char
03E2   0A                     LD   a,(bc)   
03E3   6F                     LD   l,a   
03E4   26 00                  LD   h,0   
03E6   E5                     PUSH   hl   
03E7   DD E9                  JP   (ix)   
03E9                             ;********************** PAGE 3 END *********************************************
03E9                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   CD 36 0E               CALL   jumpTable   
0403   61                     DB   "a"   ; .a print array
0404   2D 0A                  DW   printArray   
0406   63                     DB   "c"   ; .c print char
0407   0F 04                  DW   printChar   
0409   73                     DB   "s"   ; .s print string
040A   1E 04                  DW   printString   
040C   00                     DB   NUL   ; .  print number, fall through
040D   33 04                  DW   printNumber   
040F                             ; .c print char
040F                             ; char --
040F                PRINTCHAR:      
040F   E1                     POP   hl   ; a = char
0410   7D                     LD   a,l   
0411   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
0415   12                     LD   (de),a   
0416   13                     INC   de   
0417   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*'
041B   C3 9D 0C               JP   dotNext   
041E                             ; .s print string
041E                             ; string* --
041E                PRINTSTRING:      
041E   E1                     POP   hl   ; hl = string*
041F   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
0423   18 03                  JR   dotString1   
0425                DOTSTRING0:      
0425   12                     LD   (de),a   ; a -> buffer*
0426   13                     INC   de   ; string*++,
0427   23                     INC   hl   
0428                DOTSTRING1:      
0428   7E                     LD   a,(hl)   ; a <- string*
0429   B7                     OR   a   ; if NUL exit loop
042A   20 F9                  JR   nz,dotString0   
042C   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
0430   C3 9D 0C               JP   dotNext   
0433                             ; . print decimal
0433                             ; value --
0433                PRINTNUMBER:      
0433   3A E8 23               LD   a,(vNumBase)   
0436   FE 10                  CP   16   
0438   CA A4 04               JP   z,dotHex   ; else falls through
043B   C3 3E 04               JP   dotDec   
043E                             ; print decimal                 ; 70
043E                             ; value --
043E                DOTDEC:      
043E   ED 5B EC 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0442   D9                     EXX      
0443   E1                     POP   hl   ; hl = value
0444   3A E6 23               LD   a,(vDataWidth)   
0447   3D                     DEC   a   
0448   20 02                  JR   nz,dotDecX   
044A   26 00                  LD   h,0   
044C                DOTDECX:      
044C   CD 5B 04               CALL   dotDec0   
044F   D9                     EXX      ; de = buffer*' bc = IP
0450   3E 20                  LD   a," "   ; append space to buffer
0452   12                     LD   (de),a   
0453   13                     INC   de   ; string*++,
0454   ED 53 EC 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
0458   C3 9D 0C               JP   dotNext   
045B                             ; hl = value
045B                             ; de' = buffer*
045B                             ; a, bc, de, hl destroyed
045B                DOTDEC0:      
045B   CB 7C                  BIT   7,h   
045D   28 0C                  JR   z,dotDec1   
045F   D9                     EXX      
0460   3E 2D                  LD   a,"-"   
0462   12                     LD   (de),a   
0463   13                     INC   de   
0464   D9                     EXX      
0465   AF                     XOR   a   
0466   95                     SUB   l   
0467   6F                     LD   l,a   
0468   9F                     SBC   a,a   
0469   94                     SUB   h   
046A   67                     LD   h,a   
046B                DOTDEC1:      
046B   0E 00                  LD   c,0   ; leading zeros flag = false
046D   11 F0 D8               LD   de,-10000   
0470   CD 8B 04               CALL   dotDec2   
0473   11 18 FC               LD   de,-1000   
0476   CD 8B 04               CALL   dotDec2   
0479   11 9C FF               LD   de,-100   
047C   CD 8B 04               CALL   dotDec2   
047F   1E F6                  LD   e,-10   
0481   CD 8B 04               CALL   dotDec2   
0484   0C                     INC   c   ; flag = true for at least digit
0485   1E FF                  LD   e,-1   
0487   CD 8B 04               CALL   dotDec2   
048A   C9                     RET      
048B                DOTDEC2:      
048B   06 2F                  LD   b,"0"-1   
048D                DOTDEC3:      
048D   04                     INC   b   
048E   19                     ADD   hl,de   
048F   38 FC                  JR   c,dotDec3   
0491   ED 52                  SBC   hl,de   
0493   3E 30                  LD   a,"0"   
0495   B8                     CP   b   
0496   20 05                  JR   nz,dotDec4   
0498   AF                     XOR   a   
0499   B1                     OR   c   
049A   C8                     RET   z   
049B   18 01                  JR   dotDec5   
049D                DOTDEC4:      
049D   0C                     INC   c   
049E                DOTDEC5:      
049E   78                     LD   a,b   
049F   D9                     EXX      
04A0   12                     LD   (de),a   
04A1   13                     INC   de   
04A2   D9                     EXX      
04A3   C9                     RET      
04A4                             ; buffer hex                    37
04A4                             ; value --
04A4                DOTHEX:      
04A4   E1                     POP   hl   ; hl = value
04A5   ED 5B EC 23            LD   de,(vBufPtr)   
04A9   3E 24                  LD   a,"$"   ; # prefix
04AB   12                     LD   (de),a   
04AC   13                     INC   de   ; string*++,
04AD   3A E6 23               LD   a,(vDataWidth)   
04B0   3D                     DEC   a   
04B1   28 04                  JR   z,dotHex0   
04B3   7C                     LD   a,h   
04B4   CD C6 04               CALL   dotHex1   
04B7                DOTHEX0:      
04B7   7D                     LD   a,l   
04B8   CD C6 04               CALL   dotHex1   
04BB   3E 20                  LD   a," "   ; append space to buffer
04BD   12                     LD   (de),a   
04BE   13                     INC   de   ; string*++,
04BF   ED 53 EC 23            LD   (vBufPtr),de   
04C3   C3 9D 0C               JP   dotNext   
04C6                DOTHEX1:      
04C6   F5                     PUSH   af   
04C7   1F                     RRA      
04C8   1F                     RRA      
04C9   1F                     RRA      
04CA   1F                     RRA      
04CB   CD CF 04               CALL   dotHex2   
04CE   F1                     POP   af   
04CF                DOTHEX2:      
04CF   E6 0F                  AND   0x0F   
04D1   C6 90                  ADD   a,0x90   
04D3   27                     DAA      
04D4   CE 40                  ADC   a,0x40   
04D6   27                     DAA      
04D7   12                     LD   (de),a   
04D8   13                     INC   de   ; string*++,
04D9   C9                     RET      
04DA                             ;********************** PAGE 4 END *********************************************
04DA                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA 4B 06               JP   z,comment   
0507   0B                     DEC   bc   
0508   CD 20 0E               CALL   commandTable   
050B   26                     DB   lsb(command_a_)   
050C   38                     DB   lsb(command_b_)   
050D   C5                     DB   lsb(command_nop_)   
050E   44                     DB   lsb(command_d_)   
050F   C5                     DB   lsb(command_nop_)   
0510   4A                     DB   lsb(command_f_)   
0511   C5                     DB   lsb(command_nop_)   
0512   65                     DB   lsb(command_h_)   
0513   6B                     DB   lsb(command_i_)   
0514   C5                     DB   lsb(command_nop_)   
0515   71                     DB   lsb(key_)   
0516   C5                     DB   lsb(command_nop_)   
0517   74                     DB   lsb(command_m_)   
0518   C5                     DB   lsb(command_nop_)   
0519   7A                     DB   lsb(output_)   
051A   7D                     DB   lsb(command_p_)   
051B   80                     DB   lsb(command_q_)   
051C   86                     DB   lsb(command_r_)   
051D   92                     DB   lsb(command_s_)   
051E   A4                     DB   lsb(true_)   
051F   C5                     DB   lsb(command_nop_)   
0520   A7                     DB   lsb(command_v_)   
0521   BC                     DB   lsb(command_w_)   
0522   C2                     DB   lsb(xor_)   
0523   C5                     DB   lsb(command_nop_)   
0524   C5                     DB   lsb(command_nop_)   
0525   C8                     DB   lsb(command_default_)   
0526                             ; 12
0526                COMMAND_A_:      
0526   62                     DB   "b"   ; /ab absolute
0527   DE 05                  DW   absolute   
0529   64                     DB   "d"   ; /ad address of
052A   EB 05                  DW   addrOf   
052C   69                     DB   "i"   ; /ad address of
052D   AD 07                  DW   arrayIter   
052F   6C                     DB   "l"   ; /al array length
0530   0C 06                  DW   arrayLength   
0532   73                     DB   "s"   ; /as array size
0533   15 06                  DW   arraySize   
0535   00                     DB   NUL   
0536   6E 06                  DW   error1   
0538                COMMAND_B_:      
0538   62                     DB   "b"   ; /bb bye bye cold boot
0539   EB 0E                  DW   coldStart   
053B   6D                     DB   "m"   ; /bm byte mode
053C   43 06                  DW   byteMode   
053E   72                     DB   "r"   ; /br break from loop
053F   29 06                  DW   break   
0541   00                     DB   NUL   
0542   6E 06                  DW   error1   
0544                COMMAND_D_:      
0544   62                     DB   "b"   ; /db decimal base
0545   66 06                  DW   decBase   
0547   00                     DB   NUL   
0548   66 06                  DW   decBase   ; /d decimal
054A                COMMAND_F_:      
054A   64                     DB   "d"   ; /fd fold
054B   56 09                  DW   fold   
054D   65                     DB   "e"   ; /fe forEach
054E   A8 09                  DW   forEach   
0550   73                     DB   "s"   ; /fs funcSrc
0551   F4 09                  DW   funcSrc   
0553   74                     DB   "t"   ; /ft filter
0554   F8 08                  DW   filter   
0556   31                     DB   "1"   
0557   E9 0F                  DW   f1   
0559   32                     DB   "2"   
055A   E9 0F                  DW   f2   
055C   33                     DB   "3"   
055D   E9 0F                  DW   f3   
055F   34                     DB   "4"   
0560   E9 0F                  DW   f4   
0562   00                     DB   NUL   
0563   25 0C                  DW   false1   
0565                COMMAND_H_:      
0565   62                     DB   "b"   ; /hb hex base
0566   74 06                  DW   hexBase   
0568   00                     DB   NUL   
0569   6E 06                  DW   error1   
056B                             ; 6
056B                COMMAND_I_:      
056B   6E                     DB   "n"   ; /in input
056C   7A 06                  DW   input   
056E   00                     DB   NUL   
056F   6E 06                  DW   error1   
0571                KEY_:        
0571   00                     DB   NUL   
0572   85 06                  DW   key   
0574                COMMAND_M_:      
0574   70                     DB   "p"   ; /mp map
0575   B6 08                  DW   map   
0577   00                     DB   NUL   
0578   6E 06                  DW   error1   
057A                OUTPUT_:      
057A   00                     DB   NUL   
057B   8E 06                  DW   output   
057D                             ; 4
057D                COMMAND_P_:      
057D   00                     DB   NUL   
057E   6E 06                  DW   error1   
0580                             ; 6
0580                COMMAND_Q_:      
0580   74                     DB   "t"   ; /qt quit
0581   97 06                  DW   quit   
0583   00                     DB   NUL   
0584   6E 06                  DW   error1   
0586                COMMAND_R_:      
0586   63                     DB   "c"   ; /rc tail call optimisation
0587   A1 06                  DW   recur   
0589   65                     DB   "e"   ; /re remainder
058A   A7 06                  DW   remain   
058C   67                     DB   "g"   ; /rg range src
058D   31 07                  DW   rangeSrc   
058F   00                     DB   NUL   
0590   6E 06                  DW   error1   
0592                COMMAND_S_:      
0592   62                     DB   "b"   
0593   AD 06                  DW   stringBegin   
0595   65                     DB   "e"   
0596   B5 06                  DW   stringEnd   
0598   69                     DB   "i"   
0599   2E 08                  DW   stringIter   
059B   6C                     DB   "l"   
059C   E4 06                  DW   stringLength   
059E   73                     DB   "s"   
059F   F3 06                  DW   stringSize   
05A1   00                     DB   NUL   
05A2   6E 06                  DW   error1   
05A4                TRUE_:       
05A4   00                     DB   NUL   
05A5   1F 0C                  DW   true1   
05A7                COMMAND_V_:      
05A7   62                     DB   "b"   
05A8   FF 06                  DW   varBufPtr   
05AA   68                     DB   "h"   
05AB   08 07                  DW   varHeapPtr   
05AD   74                     DB   "t"   
05AE   11 07                  DW   varTIBPtr   
05B0   42                     DB   "B"   
05B1   60 06                  DW   constBufStart   
05B3   48                     DB   "H"   
05B4   54 06                  DW   constHeapStart   
05B6   54                     DB   "T"   
05B7   5A 06                  DW   constTIBStart   
05B9   00                     DB   NUL   
05BA   6E 06                  DW   error1   
05BC                COMMAND_W_:      
05BC   6D                     DB   "m"   ; /wm word mode
05BD   20 07                  DW   wordMode   
05BF   00                     DB   NUL   
05C0   6E 06                  DW   error1   
05C2                XOR_:        
05C2   00                     DB   NUL   
05C3   26 07                  DW   xor   
05C5                             ; 2
05C5                COMMAND_NOP_:      
05C5   00                     DB   NUL   
05C6   CB 05                  DW   nop   
05C8                             ; 3
05C8                COMMAND_DEFAULT_:      
05C8   00                     DB   NUL   
05C9   CD 05                  DW   div   
05CB                             ;********************** PAGE 5 END *********************************************
05CB                NOP:         
05CB   DD E9                  JP   (ix)   
05CD                             ;                               32
05CD                DIV:         
05CD   D1                     POP   de   
05CE   E1                     POP   hl   
05CF   C5                     PUSH   bc   ; preserve the IP
05D0   44 4D                  LD   bc,hl   
05D2   CD C5 0C               CALL   divide   
05D5   EB                     EX   de,hl   
05D6   ED 53 FA 23            LD   (vRemain),de   
05DA   C1                     POP   bc   
05DB   C3 A6 02               JP   add3   
05DE                             ; /ab absolute
05DE                             ; num -- num
05DE                ABSOLUTE:      
05DE   E1                     POP   hl   
05DF   CB 7C                  BIT   7,h   
05E1   C8                     RET   z   
05E2   AF                     XOR   a   
05E3   95                     SUB   l   
05E4   6F                     LD   l,a   
05E5   9F                     SBC   a,a   
05E6   94                     SUB   h   
05E7   67                     LD   h,a   
05E8   E5                     PUSH   hl   
05E9   DD E9                  JP   (ix)   
05EB                             ; /ad addrOf                    24
05EB                             ; char -- addr
05EB                ADDROF:      
05EB   E1                     POP   hl   ; a = char
05EC   7D                     LD   a,l   
05ED   FE 7B                  CP   "z"+1   ; if a > z then exit
05EF   30 19                  JR   nc,addrOf2   
05F1   D6 41                  SUB   "A"   ; a - 65
05F3   38 15                  JR   c,addrOf2   ; if < A then exit
05F5   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
05F7   38 06                  JR   c,addrOf1   
05F9   D6 06                  SUB   "a"-("Z"+1)   
05FB   FE 1A                  CP   "Z"-"A"+1   
05FD   38 0B                  JR   c,addrOf2   ; if < a then exit
05FF                ADDROF1:      
05FF   87                     ADD   a,a   ; double a
0600   21 00 23               LD   hl,VARS   ; hl = VARS + a
0603   85                     ADD   a,l   
0604   6F                     LD   l,a   
0605   3E 00                  LD   a,0   
0607   8C                     ADC   a,h   
0608   67                     LD   h,a   
0609   E5                     PUSH   hl   
060A                ADDROF2:      
060A   DD E9                  JP   (ix)   
060C                             ; /al length of an array, num elements
060C                             ; array* -- num
060C                ARRAYLENGTH:      
060C   E1                     POP   hl   
060D   2B                     DEC   hl   ; msb size
060E   56                     LD   d,(hl)   
060F   2B                     DEC   hl   ; lsb size
0610   5E                     LD   e,(hl)   
0611   EB                     EX   de,hl   
0612                ARRAYLENGTH1:      
0612   E5                     PUSH   hl   
0613   DD E9                  JP   (ix)   
0615                             ; /as size in bytes of an array, based on current data width
0615                             ; array* -- num
0615                ARRAYSIZE:      
0615                          ;*Macro unroll:  PERFORM arrayLength
0615   DD 21 1C 06            LD   ix,performM_1479S1030   
0619   C3 0C 06               JP   arrayLength   
061C                PERFORMM_1479S1030:      
061C   E1                     POP   hl   
061D   3A E6 23               LD   a,(vDataWidth)   
0620   3D                     DEC   a   
0621   28 EF                  JR   z,arrayLength1   
0623   CB 3C                  SRL   h   
0625   CB 1D                  RR   l   
0627   18 E9                  JR   arrayLength1   
0629                             ; 13
0629                             ; /br break from loop
0629                             ; --
0629                BREAK:       
0629   E1                     POP   hl   ; hl = condition, break if false
062A   7D                     LD   a,l   
062B   B4                     OR   h   
062C   28 02                  JR   z,break1   
062E   DD E9                  JP   (ix)   
0630                BREAK1:      
0630   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0632   FD 54                  LD   d,iyh   
0634   21 08 00               LD   hl,8   
0637   19                     ADD   hl,de   
0638   23                     INC   hl   
0639   23                     INC   hl   
063A   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
063D   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0640   C3 E5 0A               JP   blockEnd   
0643                             ; /b
0643                BYTEMODE:      
0643   21 01 00               LD   hl,1   
0646                BYTEMODE1:      
0646   22 E6 23               LD   (vDataWidth),hl   
0649   DD E9                  JP   (ix)   
064B                             ; //
064B                COMMENT:      
064B   03                     INC   bc   ; point to next char
064C   0A                     LD   a,(bc)   
064D   FE 20                  CP   " "   ; terminate on any char less than SP
064F   30 FA                  JR   nc,comment   
0651   0B                     DEC   bc   
0652   DD E9                  JP   (ix)   
0654                CONSTHEAPSTART:      
0654   11 22 24               LD   de,HEAP   
0657   C3 1D 07               JP   constant   
065A                CONSTTIBSTART:      
065A   11 00 21               LD   de,TIB   
065D   C3 1D 07               JP   constant   
0660                CONSTBUFSTART:      
0660   11 00 22               LD   de,BUFFER   
0663   C3 1D 07               JP   constant   
0666                DECBASE:      
0666   21 0A 00               LD   hl,10   
0669                DECBASE1:      
0669   22 E8 23               LD   (vNumBase),hl   
066C   DD E9                  JP   (ix)   
066E                ERROR1:      
066E   21 01 00               LD   hl,1   ; error 1: unknown command
0671   C3 A4 0F               JP   error   
0674                HEXBASE:      
0674   21 10 00               LD   hl,16   
0677   C3 69 06               JP   decBase1   
067A                             ; Z80 port input
067A                             ; port -- value
067A                INPUT:       
067A   E1                     POP   hl   
067B   59                     LD   e,c   ; save IP
067C   4D                     LD   c,l   
067D   ED 68                  IN   l,(c)   
067F   26 00                  LD   h,0   
0681   4B                     LD   c,e   ; restore IP
0682   E5                     PUSH   hl   
0683   DD E9                  JP   (ix)   
0685                             ; /k                              6
0685                KEY:         
0685   CD 81 00               CALL   getchar   
0688   26 00                  LD   h,0   
068A   6F                     LD   l,a   
068B   E5                     PUSH   hl   
068C   DD E9                  JP   (ix)   
068E                             ; /o Z80 port output
068E                             ; value port --
068E                OUTPUT:      
068E   E1                     POP   hl   
068F   59                     LD   e,c   ; save IP
0690   4D                     LD   c,l   
0691   E1                     POP   hl   
0692   ED 69                  OUT   (c),l   
0694   4B                     LD   c,e   ; restore IP
0695   DD E9                  JP   (ix)   
0697                             ; /qt
0697                             ; bool --
0697                QUIT:        
0697   E1                     POP   hl   ; hl = condition, exit if true
0698   7D                     LD   a,l   
0699   B4                     OR   h   
069A   20 02                  JR   nz,quit1   
069C   DD E9                  JP   (ix)   
069E                QUIT1:       
069E   C3 E5 0A               JP   blockEnd   
06A1                RECUR:       
06A1   E1                     POP   hl   
06A2   22 F2 23               LD   (vRecur),hl   
06A5   DD E9                  JP   (ix)   
06A7                REMAIN:      
06A7   2A FA 23               LD   hl,(vRemain)   
06AA   E5                     PUSH   hl   
06AB   DD E9                  JP   (ix)   
06AD                STRINGBEGIN:      
06AD   21 FF FF               LD   hl,TRUE   ; string mode = true
06B0   22 F6 23               LD   (vStrMode),hl   
06B3   18 27                  JR   stringEnd1   ; save hl in vBufPtr
06B5                STRINGEND:      
06B5   21 00 00               LD   hl,FALSE   ; string mode = false
06B8   22 F6 23               LD   (vStrMode),hl   
06BB   2A EC 23               LD   hl,(vBufPtr)   ; append NUL to string
06BE   AF                     XOR   a   
06BF   77                     LD   (hl),a   
06C0   23                     INC   hl   ; hl = string_end*
06C1   ED 43 04 24            LD   (vTemp1),bc   ; save IP
06C5   11 00 22               LD   de,BUFFER   ; de = string*
06C8   B7                     OR   a   ; bc = size
06C9   ED 52                  SBC   hl,de   
06CB   44 4D                  LD   bc,hl   
06CD   2A F0 23               LD   hl,(vHeapPtr)   ; hl = hstring*
06D0   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
06D1   D5                     PUSH   de   ; return hstring*
06D2   ED B0                  LDIR      ; copy size bytes from string* to hstring*
06D4   ED 53 F0 23            LD   (vHeapPtr),de   ; bump heap to hstring* += size
06D8   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
06DC                STRINGEND1:      
06DC   21 00 22               LD   hl,BUFFER   ; reset vBufPtr
06DF   22 EC 23               LD   (vBufPtr),hl   
06E2   DD E9                  JP   (ix)   
06E4                STRINGLENGTH:      
06E4   D1                     POP   de   
06E5   21 00 00               LD   hl,0   
06E8   18 02                  JR   stringLength2   
06EA                STRINGLENGTH1:      
06EA   13                     INC   de   
06EB   23                     INC   hl   
06EC                STRINGLENGTH2:      
06EC   1A                     LD   a,(de)   
06ED   B7                     OR   a   
06EE   20 FA                  JR   nz,stringLength1   
06F0                STRINGLENGTH3:      
06F0   E5                     PUSH   hl   
06F1   DD E9                  JP   (ix)   
06F3                STRINGSIZE:      
06F3                          ;*Macro unroll:  PERFORM stringLength
06F3   DD 21 FA 06            LD   ix,performM_1627S1198   
06F7   C3 E4 06               JP   stringLength   
06FA                PERFORMM_1627S1198:      
06FA   E1                     POP   hl   
06FB   23                     INC   hl   
06FC   C3 F0 06               JP   stringLength3   
06FF                VARBUFPTR:      
06FF   ED 5B EC 23            LD   de,(vBufPtr)   
0703   21 EC 23               LD   hl,vBufPtr   
0706   18 12                  JR   variable   
0708                VARHEAPPTR:      
0708   ED 5B F0 23            LD   de,(vHeapPtr)   
070C   21 F0 23               LD   hl,vHeapPtr   
070F   18 09                  JR   variable   
0711                VARTIBPTR:      
0711   ED 5B EA 23            LD   de,(vTIBPtr)   
0715   21 EA 23               LD   hl,vTIBPtr   
0718   18 00                  JR   variable   
071A                VARIABLE:      
071A   22 F8 23               LD   (vPointer),hl   
071D                CONSTANT:      
071D   D5                     PUSH   de   
071E   DD E9                  JP   (ix)   
0720                             ; /wm
0720                WORDMODE:      
0720   21 02 00               LD   hl,2   
0723   C3 46 06               JP   byteMode1   
0726                XOR:         
0726   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0727                XOR1:        
0727   E1                     POP   hl   
0728   7B                     LD   a,e   
0729   AD                     XOR   l   
072A   6F                     LD   l,a   
072B   7A                     LD   a,d   
072C   AC                     XOR   h   
072D   67                     LD   h,a   
072E   E5                     PUSH   hl   
072F   DD E9                  JP   (ix)   
0731                             ;*******************************************************************
0731                             ; Monty implementations
0731                             ;*******************************************************************
0731                             ; /rg rangeSrc
0731                             ; begin end step -- src
0731                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
0731                RANGESRC:      ; range source: begin, end, step, local: L
0731   CD A0 03               CALL   go   
0734   00 00                  DW   NUL   
0736   40 07                  DW   rangeSrcM_1669S1248   
0738   3A 07                  DW   $+2   
073A   01                     DB   1   
073B   04 62 65 73 4C         .PSTR   "besL"   
0740                RANGESRCM_1669S1248:      
0740   7B                     DB   "{"   
0741   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
074C   5C 6B 74 7B            DB   "\\kt{"   
0750   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0758   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
075E   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0766   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
076E   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
0778   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0780   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
0787   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
079B   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
07A3   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
07AA   7D                     DB   "}"   
07AB   7D                     DB   "}"   
07AC   00                     DB   0   
07AD                             ; /ai arrayIter
07AD                             ; array* -- src
07AD                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
07AD                ARRAYITER:      
07AD   CD A0 03               CALL   go   
07B0   00 00                  DW   NUL   
07B2   BA 07                  DW   arrayIterM_1688S1268   
07B4   B6 07                  DW   $+2   
07B6   01                     DB   1   
07B7   02 61 4C               .PSTR   "aL"   
07BA                ARRAYITERM_1688S1268:      
07BA   7B                     DB   "{"   
07BB   5B 30 20 2F 74 20 25 61 2F 61 6C 5D 20 25 4C 3D DB   "[0 /t %a/al] %L="   ; init mutable L [index active size]
07CB   5C 6B 74 7B            DB   "\\kt{"   
07CF   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
07D7   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
07DD   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
07E5   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
07ED   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
07F4   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
07FC   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
0805   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
081C   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
0824   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
082B   7D                     DB   "}"   
082C   7D                     DB   "}"   
082D   00                     DB   0   
082E                             ; /si stringIter
082E                             ; string* -- src
082E                          ;*Macro unroll: FUNC stringIter, 1, "sL"
082E                STRINGITER:      
082E   CD A0 03               CALL   go   
0831   00 00                  DW   NUL   
0833   3B 08                  DW   stringIterM_1707S1288   
0835   37 08                  DW   $+2   
0837   01                     DB   1   
0838   02 73 4C               .PSTR   "sL"   
083B                STRINGITERM_1707S1288:      
083B   7B                     DB   "{"   
083C   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
0846   5C 6B 74 7B            DB   "\\kt{"   
084A   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0852   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
0859   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0861   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
0869   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
0870   2F 62 6D 20 25 73 25 69 23 20 2F 77 6D 20 25 63 3D DB   "/bm %s%i# /wm %c="   ; read byte at i, store in c as word
0881   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0889   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
0890   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
08A4   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
08AC   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08B3   7D                     DB   "}"   
08B4   7D                     DB   "}"   
08B5   00                     DB   0   
08B6                             ; /mp map
08B6                             ; src func -- src1
08B6                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
08B6                MAP:         ; map: source, function
08B6   CD A0 03               CALL   go   
08B9   00 00                  DW   NUL   
08BB   C3 08                  DW   mapM_1727S1310   
08BD   BF 08                  DW   $+2   
08BF   00                     DB   0   
08C0   02 73 66               .PSTR   "sf"   
08C3                MAPM_1727S1310:      
08C3   7B                     DB   "{"   
08C4   5C 6B 74 7B            DB   "\\kt{"   
08C8   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
08D0   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
08D4   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
08D9   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
08E5   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
08EE   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
08F5   7D                     DB   "}"   
08F6   7D                     DB   "}"   
08F7   00                     DB   0   
08F8                             ; /ft filter
08F8                             ; src pred -- src1
08F8                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
08F8                FILTER:      ; filter: source, predicate, local: T
08F8   CD A0 03               CALL   go   
08FB   00 00                  DW   NUL   
08FD   06 09                  DW   filterM_1741S1325   
08FF   01 09                  DW   $+2   
0901   01                     DB   1   
0902   03 73 70 54            .PSTR   "spT"   
0906                FILTERM_1741S1325:      
0906   7B                     DB   "{"   
0907   5B 30 5D 25 54 3D      DB   "[0]%T="   
090D   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0911   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0915   5B                     DB   "["   
0916   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
0923   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
092B   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
092F   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
0934   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
094A   3F 3F                  DB   "??"   
094C   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0953   7D                     DB   "}"   
0954   7D                     DB   "}"   
0955   00                     DB   0   
0956                             ; /fd fold
0956                             ; reducer is a function like: \\da00bbLi4u
0956                             ; src init reducer -- src1
0956                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
0956                FOLD:        ; src, init, reducer
0956   CD A0 03               CALL   go   
0959   00 00                  DW   NUL   
095B   65 09                  DW   foldM_1760S1345   
095D   5F 09                  DW   $+2   
095F   01                     DB   1   
0960   04 73 69 72 41         .PSTR   "sirA"   
0965                FOLDM_1760S1345:      
0965   7B                     DB   "{"   ; reducer: \\da00bbLi4u
0966   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
096D   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0971   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0975   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
097A   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
0995   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
099E   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09A5   7D                     DB   "}"   
09A6   7D                     DB   "}"   
09A7   00                     DB   0   
09A8                             ; /fe forEach
09A8                             ; src proc --
09A8                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
09A8                FOREACH:      ; forEach: source, procedure, local: T
09A8   CD A0 03               CALL   go   
09AB   00 00                  DW   NUL   
09AD   B6 09                  DW   forEachM_1774S1360   
09AF   B1 09                  DW   $+2   
09B1   01                     DB   1   
09B2   03 73 70 54            .PSTR   "spT"   
09B6                FOREACHM_1774S1360:      
09B6   7B                     DB   "{"   
09B7   5B 30 5D 25 54 3D      DB   "[0]%T="   
09BD   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
09C1   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
09C9   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
09CE   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
09E0   3F 3F                  DB   "??"   ; ifte:
09E2   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
09EB   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09F2   7D                     DB   "}"   
09F3   00                     DB   0   
09F4                             ; ; /fs funcSrc
09F4                             ; ; func -- src
09F4                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
09F4                FUNCSRC:      ; :f func or block
09F4   CD A0 03               CALL   go   
09F7   00 00                  DW   NUL   
09F9   00 0A                  DW   funcSrcM_1788S1375   
09FB   FD 09                  DW   $+2   
09FD   00                     DB   0   
09FE   01 66                  .PSTR   "f"   
0A00                FUNCSRCM_1788S1375:      
0A00   7B                     DB   "{"   
0A01   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0A05   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0A0D   5C 64 74 7B            DB   "\\dt{"   
0A11   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0A23   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0A2A   7D                     DB   "}"   
0A2B   7D                     DB   "}"   
0A2C   00                     DB   0   
0A2D                          ;*Macro unroll: FUNC printArray, 2, "abc"
0A2D                PRINTARRAY:      
0A2D   CD A0 03               CALL   go   
0A30   00 00                  DW   NUL   
0A32   3B 0A                  DW   printArrayM_1798S1386   
0A34   36 0A                  DW   $+2   
0A36   02                     DB   2   
0A37   03 61 62 63            .PSTR   "abc"   
0A3B                PRINTARRAYM_1798S1386:      
0A3B   7B                     DB   "{"   
0A3C   27 5B 20 27 2E 73 20 25 61 2F 61 6C 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/al%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0A73   7D                     DB   "}"   
0A74   00                     DB   0   
0A75                             ;*******************************************************************
0A75                             ; implementations continued
0A75                             ;*******************************************************************
0A75                AT_:         
0A75                AT:          
0A75                ADDR:        
0A75   ED 5B F8 23            LD   de,(vPointer)   
0A79   21 F8 23               LD   hl,vPointer   
0A7C   C3 1A 07               JP   variable   
0A7F                             ; $ hex                         ; 22
0A7F                DOLLAR:      
0A7F                HEXNUM:      
0A7F   21 00 00               LD   hl,0   ; Clear hl to accept the number
0A82                HEXNUM1:      
0A82   03                     INC   bc   
0A83   0A                     LD   a,(bc)   ; Get the character which is a numeral
0A84   CB 77                  BIT   6,a   ; is it uppercase alpha?
0A86   28 02                  JR   z,hexnum2   ; no a decimal
0A88   D6 07                  SUB   7   ; sub 7  to make $a - $F
0A8A                HEXNUM2:      
0A8A   D6 30                  SUB   $30   ; form decimal digit
0A8C   DA D7 0A               JP   c,num2   
0A8F   FE 10                  CP   $0F+1   
0A91   D2 D7 0A               JP   nc,num2   
0A94   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0A95   29                     ADD   hl,hl   ; 4X
0A96   29                     ADD   hl,hl   ; 8X
0A97   29                     ADD   hl,hl   ; 16X
0A98   85                     ADD   a,l   ; add into bottom of hl
0A99   6F                     LD   l,a   
0A9A   18 E6                  JR   hexnum1   
0A9C                             ; if                            23
0A9C                             ; condition then -- value
0A9C                QUESTION:      
0A9C                IF:          
0A9C   03                     INC   bc   
0A9D   0A                     LD   a,(bc)   
0A9E   FE 3F                  CP   "?"   
0AA0   28 06                  JR   z,ifte   
0AA2   0B                     DEC   bc   
0AA3   11 00 00               LD   de,NUL   ; NUL pointer for else
0AA6   18 01                  JR   ifte1   
0AA8                             ; ifte
0AA8                             ; condition then else -- value
0AA8                IFTE:        
0AA8   D1                     POP   de   ; de = else
0AA9                IFTE1:       
0AA9   E1                     POP   hl   ; hl = then
0AAA   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0AAB   7C                     LD   a,h   
0AAC   B5                     OR   l   
0AAD   E1                     POP   hl   ; hl = then
0AAE   CA A1 03               JP   z,go1   ; if z de = else
0AB1   EB                     EX   de,hl   ; condition = false, de = then
0AB2   C3 A1 03               JP   go1   
0AB5                             ; 0..9 number                   37
0AB5                NUM:         
0AB5   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0AB8   0A                     LD   a,(bc)   ; Get numeral or -
0AB9   FE 2D                  CP   "-"   
0ABB   20 01                  JR   nz,num0   
0ABD   03                     INC   bc   ; move to next char, no flags affected
0ABE                NUM0:        
0ABE   08                     EX   af,af'   ; save zero flag = 0 for later
0ABF                NUM1:        
0ABF   0A                     LD   a,(bc)   ; read digit
0AC0   D6 30                  SUB   "0"   ; less than 0?
0AC2   38 13                  JR   c,num2   ; not a digit, exit loop
0AC4   FE 0A                  CP   10   ; greater that 9?
0AC6   30 0F                  JR   nc,num2   ; not a digit, exit loop
0AC8   03                     INC   bc   ; inc IP
0AC9   54 5D                  LD   de,hl   ; multiply hl * 10
0ACB   29                     ADD   hl,hl   
0ACC   29                     ADD   hl,hl   
0ACD   19                     ADD   hl,de   
0ACE   29                     ADD   hl,hl   
0ACF   85                     ADD   a,l   ; add digit in a to hl
0AD0   6F                     LD   l,a   
0AD1   3E 00                  LD   a,0   
0AD3   8C                     ADC   a,h   
0AD4   67                     LD   h,a   
0AD5   18 E8                  JR   num1   
0AD7                NUM2:        
0AD7   0B                     DEC   bc   
0AD8   08                     EX   af,af'   ; restore zero flag
0AD9   20 07                  JR   nz,num3   
0ADB   EB                     EX   de,hl   ; negate the value of hl
0ADC   21 00 00               LD   hl,0   
0ADF   B7                     OR   a   ; jump to sub2
0AE0   ED 52                  SBC   hl,de   
0AE2                NUM3:        
0AE2   E5                     PUSH   hl   ; Put the number on the stack
0AE3   DD E9                  JP   (ix)   ; and process the next character
0AE5                             ;                               58
0AE5                RBRACE:      
0AE5                BLOCKEND:      
0AE5   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0AE8   FD 56 01               LD   d,(iy+1)   
0AEB   ED 53 04 24            LD   (vTemp1),de   
0AEF   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0AF2   FD 56 07               LD   d,(iy+7)   
0AF5   ED 53 06 24            LD   (vTemp2),de   
0AF9   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0AFC   FD 56 03               LD   d,(iy+3)   
0AFF   EB                     EX   de,hl   
0B00   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0B03   FD 56 01               LD   d,(iy+1)   
0B06   13                     INC   de   ; for carry flag <=
0B07   B7                     OR   a   
0B08   ED 52                  SBC   hl,de   
0B0A   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0B0C   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0B0E   FD 5D                  LD   e,iyl   
0B10   21 08 00               LD   hl,8   
0B13   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0B14   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0B15   18 0C                  JR   blockEnd2   
0B17                BLOCKEND1:      ; same scope
0B17   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0B1A   FD 56 03               LD   d,(iy+3)   
0B1D   EB                     EX   de,hl   
0B1E   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0B20   FD 5D                  LD   e,iyl   
0B22   EB                     EX   de,hl   
0B23                BLOCKEND2:      
0B23   44 4D                  LD   bc,hl   ; bc = hl = BP
0B25   B7                     OR   a   ; hl = BP - SP = count
0B26   ED 72                  SBC   hl,sp   
0B28   7D                     LD   a,l   
0B29   B4                     OR   h   
0B2A   28 09                  JR   z,blockEnd3   
0B2C   C5                     PUSH   bc   ; bc = count, hl = BP
0B2D   44 4D                  LD   bc,hl   
0B2F   E1                     POP   hl   
0B30   2B                     DEC   hl   ; hl = BP-1
0B31   1B                     DEC   de   ; de = args*-1
0B32   ED B8                  LDDR      
0B34   13                     INC   de   
0B35                BLOCKEND3:      
0B35   EB                     EX   de,hl   ; sp = de = new tos*
0B36   F9                     LD   sp,hl   
0B37   ED 4B 06 24            LD   bc,(vTemp2)   
0B3B   FD 2A 04 24            LD   iy,(vTemp1)   
0B3F   ED 5B F2 23            LD   de,(vRecur)   ; de = recur vector
0B43   7B                     LD   a,e   ; check for NUL
0B44   B2                     OR   d   
0B45   20 02                  JR   nz,blockEnd4   
0B47   DD E9                  JP   (ix)   
0B49                BLOCKEND4:      
0B49   21 00 00               LD   hl,0   ; clear recur vector
0B4C   22 F2 23               LD   (vRecur),hl   
0B4F   C3 A1 03               JP   go1   ; execute de
0B52                GOBLOCK:      
0B52   ED 53 04 24            LD   (vTemp1),de   ; save de
0B56   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0B59   FD 54                  LD   d,iyh   
0B5B   FD 5D                  LD   e,iyl   
0B5D   B7                     OR   a   ; if stack* == BP then this is the root_scope
0B5E   ED 52                  SBC   hl,de   
0B60   ED 5B 04 24            LD   de,(vTemp1)   ; restore de
0B64   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0B65   B4                     OR   h   
0B66   3E 00                  LD   a,0   
0B68   28 6A                  JR   z,goFunc8   
0B6A   C5                     PUSH   bc   ; push IP
0B6B   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0B6E   FD 46 05               LD   b,(iy+5)   
0B71   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0B74   FD 66 03               LD   h,(iy+3)   
0B77                GOBLOCK2:      
0B77   C5                     PUSH   bc   ; arg_list*
0B78   E5                     PUSH   hl   ; first_arg*
0B79   FD E5                  PUSH   iy   ; push BP
0B7B   FD 21 00 00            LD   iy,0   ; BP = SP
0B7F   FD 39                  ADD   iy,sp   
0B81                GOBLOCK3:      
0B81   42 4B                  LD   bc,de   ; bc = de = block*-1
0B83   DD E9                  JP   (ix)   
0B85                GOFUNC:      ; execute func
0B85   EB                     EX   de,hl   ; hl = func*
0B86   5E                     LD   e,(hl)   ; de = partial_array*
0B87   23                     INC   hl   
0B88   56                     LD   d,(hl)   
0B89   23                     INC   hl   
0B8A   7B                     LD   a,e   ; if partial_array* == null skip
0B8B   B2                     OR   d   
0B8C   28 21                  JR   z,goFunc3   
0B8E   ED 43 04 24            LD   (vTemp1),bc   
0B92   22 06 24               LD   (vTemp2),hl   ; save bc,hl
0B95   EB                     EX   de,hl   ; hl = partial_array*
0B96   2B                     DEC   hl   ; bc = count
0B97   46                     LD   b,(hl)   
0B98   2B                     DEC   hl   
0B99   4E                     LD   c,(hl)   
0B9A   23                     INC   hl   ; hl = array data*
0B9B   23                     INC   hl   
0B9C   18 06                  JR   goFunc2   ; push each item on stack
0B9E                GOFUNC1:      
0B9E   5E                     LD   e,(hl)   ; de = partial item
0B9F   23                     INC   hl   
0BA0   56                     LD   d,(hl)   
0BA1   23                     INC   hl   
0BA2   D5                     PUSH   de   ; push on stack
0BA3   0B                     DEC   bc   
0BA4                GOFUNC2:      
0BA4   79                     LD   a,c   ; if count != 0 then loop
0BA5   B0                     OR   b   
0BA6   20 F6                  JR   nz,goFunc1   
0BA8   ED 4B 04 24            LD   bc,(vTemp1)   ; restore bc
0BAC   2A 06 24               LD   hl,(vTemp2)   ; restore hl
0BAF                GOFUNC3:      
0BAF   5E                     LD   e,(hl)   ; de = block*
0BB0   23                     INC   hl   
0BB1   56                     LD   d,(hl)   
0BB2   23                     INC   hl   
0BB3   ED 53 04 24            LD   (vTemp1),de   ; save block*
0BB7   5E                     LD   e,(hl)   ; de = arg_list*
0BB8   23                     INC   hl   
0BB9   56                     LD   d,(hl)   
0BBA   23                     INC   hl   
0BBB   EB                     EX   de,hl   ; hl = arg_list*
0BBC   ED 5B 04 24            LD   de,(vTemp1)   ; restore de = block*
0BC0   7D                     LD   a,l   ; if arg_list* == null a = 0
0BC1   B4                     OR   h   
0BC2   20 03                  JR   nz,goFunc4   
0BC4   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0BC5   18 0D                  JR   goFunc8   
0BC7                GOFUNC4:      ; allocate locals
0BC7   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0BC8   18 03                  JR   goFunc6   
0BCA                GOFUNC5:      ; loop
0BCA   3B                     DEC   sp   
0BCB   3B                     DEC   sp   
0BCC   3D                     DEC   a   
0BCD                GOFUNC6:      
0BCD   B7                     OR   a   
0BCE   20 FA                  JR   nz,goFunc5   ; end loop
0BD0                GOFUNC7:      
0BD0   23                     INC   hl   ; a = num_args* x 2
0BD1   7E                     LD   a,(hl)   
0BD2   2B                     DEC   hl   
0BD3   87                     ADD   a,a   ; a *= 2
0BD4                GOFUNC8:      
0BD4   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0BD5   44 4D                  LD   bc,hl   
0BD7   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0BDA   85                     ADD   a,l   
0BDB   6F                     LD   l,a   
0BDC   39                     ADD   hl,sp   
0BDD   18 98                  JR   goBlock2   
0BDF                             ;                               21
0BDF                             ; value _oldValue --            ; uses address in vPointer 15
0BDF                ASSIGN:      
0BDF   E1                     POP   hl   ; discard last accessed value
0BE0   E1                     POP   hl   ; hl = new value
0BE1                ASSIGN0:      
0BE1   EB                     EX   de,hl   ; de = new value
0BE2   2A F8 23               LD   hl,(vPointer)   
0BE5                ASSIGN1:      ; entry point from defineEnd
0BE5   73                     LD   (hl),e   
0BE6   3A E6 23               LD   a,(vDataWidth)   
0BE9   3D                     DEC   a   ; is it byte?
0BEA   28 02                  JR   z,assign2   
0BEC   23                     INC   hl   
0BED   72                     LD   (hl),d   
0BEE                ASSIGN2:      
0BEE   DD E9                  JP   (ix)   
0BF0                SEMICOLON:      
0BF0                DEFINEEND:      
0BF0   2A F4 23               LD   hl,(vDefine)   ; hl = define*
0BF3   7D                     LD   a,l   
0BF4   B4                     OR   h   
0BF5   28 0B                  JR   z,defineEnd1   
0BF7   11 00 00               LD   de,NUL   ; set vDefine=NUL
0BFA   ED 53 F4 23            LD   (vDefine),de   
0BFE   D1                     POP   de   ; de = value
0BFF   C3 E5 0B               JP   assign1   
0C02                DEFINEEND1:      
0C02   DD E9                  JP   (ix)   
0C04                             ; hl = value1, de = value2
0C04                             ; hl = result
0C04                EQUALS:      
0C04   B7                     OR   a   ; reset the carry flag
0C05   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0C07   28 16                  JR   z,true1   
0C09   18 1A                  JR   false1   
0C0B                NOTEQUALS:      
0C0B   B7                     OR   a   ; reset the carry flag
0C0C   ED 52                  SBC   hl,de   
0C0E   20 0F                  JR   nz,true1   
0C10   18 13                  JR   false1   
0C12                             ; hl = value1 de = value2
0C12                             ; hl = result
0C12                LESSTHANEQ:      
0C12   B7                     OR   a   
0C13   ED 52                  SBC   hl,de   
0C15   18 05                  JR   lessthan1   
0C17                             ; hl = value1 de = value2
0C17                             ; hl = result
0C17                LESSTHAN:      
0C17   B7                     OR   a   
0C18   ED 52                  SBC   hl,de   
0C1A   28 09                  JR   z,false1   
0C1C                LESSTHAN1:      
0C1C   FA 25 0C               JP   m,false1   
0C1F                TRUE1:       
0C1F   21 FF FF               LD   hl,TRUE   
0C22   E5                     PUSH   hl   
0C23   DD E9                  JP   (ix)   
0C25                NULL1:       
0C25                FALSE1:      
0C25   21 00 00               LD   hl,FALSE   
0C28   E5                     PUSH   hl   
0C29   DD E9                  JP   (ix)   
0C2B                             ; shiftLeft                     15
0C2B                             ; value count -- value2          shift left count places
0C2B                SHIFTLEFT:      
0C2B   50 59                  LD   de,bc   ; save IP
0C2D   C1                     POP   bc   ; bc = count
0C2E   41                     LD   b,c   ; b = loop counter
0C2F   E1                     POP   hl   
0C30   04                     INC   b   ; test for counter=0 case
0C31   18 01                  JR   shiftLeft2   
0C33                SHIFTLEFT1:      
0C33   29                     ADD   hl,hl   ; left shift hl
0C34                SHIFTLEFT2:      
0C34   10 FD                  DJNZ   shiftLeft1   
0C36   E5                     PUSH   hl   
0C37   42 4B                  LD   bc,de   ; restore IP
0C39   DD E9                  JP   (ix)   
0C3B                             ; shiftRight                    16
0C3B                             ; value count -- value2          shift left count places
0C3B                SHIFTRIGHT:      
0C3B   50 59                  LD   de,bc   ; save IP
0C3D   C1                     POP   bc   ; bc = count
0C3E   41                     LD   b,c   ; b = loop counter
0C3F   E1                     POP   hl   
0C40   04                     INC   b   ; test for counter=0 case
0C41   18 04                  JR   shiftRight2   
0C43                SHIFTRIGHT1:      
0C43   CB 3C                  SRL   h   ; right shift hl
0C45   CB 1D                  RR   l   
0C47                SHIFTRIGHT2:      
0C47   10 FA                  DJNZ   shiftRight1   
0C49   E5                     PUSH   hl   
0C4A   42 4B                  LD   bc,de   ; restore IP
0C4C   DD E9                  JP   (ix)   
0C4E                             ; string                        ;38
0C4E                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0C4E                QUOTE:       
0C4E                STRING:      
0C4E   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0C51   E5                     PUSH   hl   ; save start of string
0C52   0A                     LD   a,(bc)   
0C53   5F                     LD   e,a   ; e = matching terminator
0C54   03                     INC   bc   ; point to next char
0C55   18 03                  JR   string2   
0C57                STRING1:      
0C57   77                     LD   (hl),a   
0C58   23                     INC   hl   ; increase count
0C59   03                     INC   bc   ; point to next char
0C5A                STRING2:      
0C5A   0A                     LD   a,(bc)   
0C5B   BB                     CP   e   ; is it the string terminator
0C5C   28 02                  JR   z,string3   
0C5E   18 F7                  JR   string1   
0C60                STRING3:      
0C60   AF                     XOR   a   ; write NUL to terminate string
0C61   77                     LD   (hl),a   ; hl = end of string
0C62   23                     INC   hl   
0C63   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0C66   DD E9                  JP   (ix)   
0C68                             ; %a .. %z                      43
0C68                             ; -- value
0C68                             ; returns value of arg
0C68                PERCENT:      
0C68                ARG:         
0C68   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0C6B   FD 56 05               LD   d,(iy+5)   
0C6E   EB                     EX   de,hl   
0C6F   7D                     LD   a,l   ; arg_list* == null, skip
0C70   B4                     OR   h   
0C71   28 1A                  JR   z,arg0a   
0C73   23                     INC   hl   ; a = num_args, hl = arg_list*
0C74   7E                     LD   a,(hl)   
0C75   23                     INC   hl   
0C76   B7                     OR   a   
0C77   28 14                  JR   z,arg0a   ; num_args == 0, skip
0C79   5F                     LD   e,a   ; e = a = num_args
0C7A   03                     INC   bc   ; a = next char = dollar_name
0C7B   0A                     LD   a,(bc)   
0C7C   C5                     PUSH   bc   ; save IP
0C7D   43                     LD   b,e   ; b = e = num_args
0C7E   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0C81   FD 56 03               LD   d,(iy+3)   
0C84                ARG0:        
0C84   1B                     DEC   de   ; a = dollar_name, de = next arg*
0C85   1B                     DEC   de   
0C86   BE                     CP   (hl)   
0C87   28 09                  JR   z,arg1   
0C89   23                     INC   hl   ; hl = next arg_list*
0C8A   10 F8                  DJNZ   arg0   
0C8C   C1                     POP   bc   ; no match, restore IP
0C8D                ARG0A:       
0C8D   11 00 00               LD   de,0   ; return 0
0C90   18 08                  JR   arg1a   
0C92                ARG1:        
0C92   C1                     POP   bc   ; restore IP
0C93   EB                     EX   de,hl   ; hl = arg*
0C94   22 F8 23               LD   (vPointer),hl   ; store arg* in setter
0C97   5E                     LD   e,(hl)   
0C98   23                     INC   hl   
0C99   56                     LD   d,(hl)   ; de = arg
0C9A                ARG1A:       
0C9A   D5                     PUSH   de   ; push arg
0C9B   DD E9                  JP   (ix)   
0C9D                DOTNEXT:      
0C9D   3A F6 23               LD   a,(vStrMode)   ; if string mode then exit
0CA0   3C                     INC   a   
0CA1   20 02                  JR   nz,dotNext1   
0CA3   DD E9                  JP   (ix)   
0CA5                DOTNEXT1:      
0CA5   11 00 22               LD   de,BUFFER   
0CA8   2A EC 23               LD   hl,(vBufPtr)   
0CAB   B7                     OR   a   ; hl = count, de = vHeapPtr
0CAC   ED 52                  SBC   hl,de   
0CAE   C3 B7 0C               JP   dotNext3   
0CB1                DOTNEXT2:      
0CB1   1A                     LD   a,(de)   ; print char at char*
0CB2   CD 85 00               CALL   putchar   
0CB5   13                     INC   de   ; char*++
0CB6   2B                     DEC   hl   ; count--
0CB7                DOTNEXT3:      
0CB7   7D                     LD   a,l   ; count == 0?
0CB8   B4                     OR   h   
0CB9   20 F6                  JR   nz,dotNext2   ; if not loop
0CBB   21 00 22               LD   hl,BUFFER   ; reset vBufPtr to vHeapPtr
0CBE   22 EC 23               LD   (vBufPtr),hl   
0CC1   DD E9                  JP   (ix)   
0CC3                             ; unused
0CC3                DQUOTE:      
0CC3                UNDERSCORE:      
0CC3                COMMA:       
0CC3   DD E9                  JP   (ix)   
0CC5                             ; division subroutine.
0CC5                             ; bc: divisor, de: dividend, hl: remainder
0CC5                DIVIDE:      
0CC5   21 00 00               LD   hl,0   ; zero the remainder
0CC8   3E 10                  LD   a,16   ; loop counter
0CCA                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0CCA   CB 21                  SLA   c   
0CCC   CB 10                  RL   b   
0CCE   ED 6A                  ADC   hl,hl   
0CD0   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0CD2   38 03                  JR   c,divide2   
0CD4   0C                     INC   c   
0CD5   18 01                  JR   divide3   
0CD7                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0CD7   19                     ADD   hl,de   
0CD8                DIVIDE3:      
0CD8   3D                     DEC   a   
0CD9   20 EF                  JR   nz,divide1   
0CDB   50 59                  LD   de,bc   ; result from bc to de
0CDD   C9                     RET      
0CDE                             ; arg_list - parses arg_list e.g. ab:c
0CDE                             ; -- arg_list*
0CDE                PARSEARGS:      
0CDE   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0CE1   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0CE4   E5                     PUSH   hl   ; save start of arg_list
0CE5   23                     INC   hl   ; skip length fields to start of string
0CE6   23                     INC   hl   
0CE7   03                     INC   bc   ; point to next char
0CE8                PARSEARGS1:      
0CE8   0A                     LD   a,(bc)   
0CE9   FE 3A                  CP   ":"   ; ":" switches from args to locals
0CEB   20 03                  JR   nz,parseArgs1a   
0CED   14                     INC   d   ; non zero value local count acts as flag
0CEE   18 10                  JR   parseArgs3   
0CF0                PARSEARGS1A:      
0CF0   FE 61                  CP   "a"   ; < "a" terminates arg_list
0CF2   38 0F                  JR   c,parseArgs4   
0CF4   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0CF6   30 0B                  JR   nc,parseArgs4   
0CF8                PARSEARGS2:      
0CF8   77                     LD   (hl),a   
0CF9   23                     INC   hl   
0CFA   1C                     INC   e   ; increase arg count
0CFB   AF                     XOR   a   
0CFC   B2                     OR   d   
0CFD   28 01                  JR   z,parseArgs3   
0CFF   14                     INC   d   ; if d > 0 increase local count
0D00                PARSEARGS3:      
0D00   03                     INC   bc   ; point to next char
0D01   18 E5                  JR   parseArgs1   
0D03                PARSEARGS4:      
0D03   0B                     DEC   bc   
0D04   AF                     XOR   a   
0D05   B2                     OR   d   
0D06   28 01                  JR   z,parseArgs5   
0D08   15                     DEC   d   ; remove initial inc
0D09                PARSEARGS5:      
0D09   23                     INC   hl   
0D0A   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0D0D   E1                     POP   hl   ; hl = start of arg_list
0D0E   72                     LD   (hl),d   ; write number of locals at start - 1
0D0F   23                     INC   hl   
0D10   73                     LD   (hl),e   ; write number of args + locals at start - 2
0D11   2B                     DEC   hl   
0D12   E3                     EX   (sp),hl   
0D13   E9                     JP   (hl)   
0D14                             ; create block: parses block e.g. 00bbIC4uLi4g
0D14                             ; -- block*
0D14                PARSEBLOCK:      
0D14   C5                     PUSH   bc   ; return pointer to first { of block
0D15   03                     INC   bc   
0D16   16 01                  LD   d,1   ; nesting: count first parenthesis
0D18                PARSEBLOCK1:      ; Skip to end of definition
0D18   0A                     LD   a,(bc)   ; Get the next character
0D19   03                     INC   bc   ; Point to next character
0D1A   FE 21                  CP   " " + 1   ; ignore whitespace
0D1C   38 FA                  JR   c,parseBlock1   
0D1E   FE 29                  CP   ")"   
0D20   28 2D                  JR   z,parseBlock4   
0D22   FE 7D                  CP   "}"   
0D24   28 29                  JR   z,parseBlock4   
0D26   FE 5D                  CP   "]"   
0D28   28 25                  JR   z,parseBlock4   
0D2A   FE 28                  CP   "("   
0D2C   28 16                  JR   z,parseBlock2   
0D2E   FE 7B                  CP   "{"   
0D30   28 12                  JR   z,parseBlock2   
0D32   FE 5B                  CP   "["   
0D34   28 0E                  JR   z,parseBlock2   
0D36   FE 27                  CP   "'"   
0D38   28 0D                  JR   z,parseBlock3   
0D3A   FE 60                  CP   "`"   
0D3C   28 09                  JR   z,parseBlock3   
0D3E   FE 22                  CP   DQ   
0D40   28 05                  JR   z,parseBlock3   
0D42   18 D4                  JR   parseBlock1   
0D44                PARSEBLOCK2:      
0D44   14                     INC   d   
0D45   18 D1                  JR   parseBlock1   
0D47                PARSEBLOCK3:      
0D47   3E 80                  LD   a,$80   
0D49   AA                     XOR   d   
0D4A   57                     LD   d,a   
0D4B   20 CB                  JR   nz,parseBlock1   
0D4D   18 03                  JR   parseBlock5   
0D4F                PARSEBLOCK4:      
0D4F   15                     DEC   d   
0D50   20 C6                  JR   nz,parseBlock1   ; get the next element
0D52                PARSEBLOCK5:      
0D52   60 69                  LD   hl,bc   ; hl = IP
0D54   11 22 24               LD   de,HEAP   ; is IP pointing to object in heap
0D57   B7                     OR   a   ; IP - HEAP
0D58   ED 52                  SBC   hl,de   
0D5A   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0D5C   28 1C                  JR   z,parseBlock6   
0D5E   60 69                  LD   hl,bc   ; hl = IP
0D60   D1                     POP   de   ; de = block*
0D61   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0D65   B7                     OR   a   ; bc = size
0D66   ED 52                  SBC   hl,de   
0D68   44 4D                  LD   bc,hl   
0D6A   EB                     EX   de,hl   ; hl = block* de = heap*
0D6B   ED 5B F0 23            LD   de,(vHeapPtr)   
0D6F   D5                     PUSH   de   ; return hblock*
0D70   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0D72   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += size
0D76   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0D7A                PARSEBLOCK6:      
0D7A   0B                     DEC   bc   ; balanced, exit
0D7B   E1                     POP   hl   ; hl = block*
0D7C   E3                     EX   (sp),hl   ; return to caller
0D7D   E9                     JP   (hl)   
0D7E                             ; create function
0D7E                             ; arg_list* block* -- func*
0D7E                CREATEFUNC:      
0D7E   E1                     POP   hl   ; save retrn address
0D7F   22 08 24               LD   (vTemp3),hl   
0D82   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0D86   E1                     POP   hl   ; hl = block*
0D87   22 06 24               LD   (vTemp2),hl   ; save block*
0D8A   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0D8D   FD 56 05               LD   d,(iy+5)   
0D90   7B                     LD   a,e   ; if arg_list == null then make a func
0D91   B2                     OR   d   
0D92   20 09                  JR   nz,createFunc0   
0D94   21 00 00               LD   hl,0   ; partial_array = null
0D97   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0D9B   18 65                  JR   createFunc5   
0D9D                CREATEFUNC0:      
0D9D   E1                     POP   hl   ; hl = inner_arg_list*
0D9E   E5                     PUSH   hl   ; save inner_arg_list
0D9F   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0DA3   7E                     LD   a,(hl)   ; compile inner_num_locals
0DA4   4F                     LD   c,a   ; b = inner_num_locals
0DA5   12                     LD   (de),a   
0DA6   23                     INC   hl   
0DA7   13                     INC   de   
0DA8   7E                     LD   a,(hl)   ; compile inner_length
0DA9   12                     LD   (de),a   
0DAA   91                     SUB   c   ; a = inner_num args
0DAB   23                     INC   hl   
0DAC   13                     INC   de   
0DAD   B7                     OR   a   ; compile args if inner_length > 0
0DAE   28 05                  JR   z,createFunc1   
0DB0   4F                     LD   c,a   ; bc = a
0DB1   06 00                  LD   b,0   
0DB3   ED B0                  LDIR      
0DB5                CREATEFUNC1:      
0DB5   EB                     EX   de,hl   ; hl = outer_arg_list
0DB6   FD 5E 04               LD   e,(iy+4)   
0DB9   FD 56 05               LD   d,(iy+5)   
0DBC   EB                     EX   de,hl   
0DBD   23                     INC   hl   ; a = outer_length
0DBE   7E                     LD   a,(hl)   
0DBF   23                     INC   hl   
0DC0   B7                     OR   a   
0DC1   28 05                  JR   z,createFunc2   
0DC3   4F                     LD   c,a   
0DC4   06 00                  LD   b,0   
0DC6   ED B0                  LDIR      ; append outer_args
0DC8                CREATEFUNC2:      ; a = outer_length
0DC8   47                     LD   b,a   ; b = a = outer_length
0DC9   2A F0 23               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0DCC   23                     INC   hl   
0DCD   7E                     LD   a,(hl)   ; add outer_length to new length
0DCE   80                     ADD   a,b   
0DCF   77                     LD   (hl),a   
0DD0   2B                     DEC   hl   
0DD1   78                     LD   a,b   ; save outer_length in a'
0DD2   08                     EX   af,af'   
0DD3   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0DD4   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0DD5   B7                     OR   a   
0DD6   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0DD8   4F                     LD   c,a   ; c = inner_num_locals
0DD9   06 00                  LD   b,0   ; bc = inner_num_locals
0DDB   23                     INC   hl   ; a = inner_length
0DDC   7E                     LD   a,(hl)   
0DDD   91                     SUB   c   ; a = inner_num_args
0DDE   23                     INC   hl   ; hl = inner_arg_chars
0DDF   85                     ADD   a,l   ; hl += a
0DE0   6F                     LD   l,a   
0DE1   3E 00                  LD   a,0   
0DE3   84                     ADD   a,h   
0DE4   67                     LD   h,a   
0DE5   ED B0                  LDIR      ; append inner_locals
0DE7                CREATEFUNC2A:      
0DE7   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0DE8   12                     LD   (de),a   ; compile partial_array length field
0DE9   13                     INC   de   
0DEA   AF                     XOR   a   
0DEB   12                     LD   (de),a   
0DEC   13                     INC   de   
0DED   D5                     PUSH   de   ; push partial_array*
0DEE   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0DEF   FD 5E 02               LD   e,(iy+2)   
0DF2   FD 56 03               LD   d,(iy+3)   
0DF5   EB                     EX   de,hl   
0DF6                CREATEFUNC3:      
0DF6   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0DF7   4E                     LD   c,(hl)   
0DF8   2B                     DEC   hl   
0DF9   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0DFA   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0DFB   13                     INC   de   
0DFC   79                     LD   a,c   
0DFD   12                     LD   (de),a   
0DFE   13                     INC   de   
0DFF   10 F5                  DJNZ   createFunc3   ; b = outer_length
0E01                CREATEFUNC4:      
0E01   E1                     POP   hl   ; hl = partial_array*
0E02                CREATEFUNC5:      
0E02   C1                     POP   bc   ; bc = new_arg_list*
0E03   D5                     PUSH   de   ; return new func*
0E04   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0E05   73                     LD   (hl),e   ; compile partial_array* to func
0E06   23                     INC   hl   
0E07   72                     LD   (hl),d   
0E08   23                     INC   hl   
0E09   ED 5B 06 24            LD   de,(vTemp2)   ; de = block*
0E0D   73                     LD   (hl),e   ; compile block* to func
0E0E   23                     INC   hl   
0E0F   72                     LD   (hl),d   
0E10   23                     INC   hl   
0E11   71                     LD   (hl),c   ; compile new_arg_list* to func
0E12   23                     INC   hl   
0E13   70                     LD   (hl),b   
0E14   23                     INC   hl   
0E15   22 F0 23               LD   (vHeapPtr),hl   ; bump heap ptr
0E18   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0E1C   2A 08 24               LD   hl,(vTemp3)   ; jump to return address
0E1F   E9                     JP   (hl)   
0E20                             ;*******************************************************************
0E20                             ; general routines
0E20                             ;*******************************************************************
0E20                             ; followed by a table
0E20                             ; indexed on the 0-25 lowercase letter
0E20                             ; db lsb(addr)
0E20                             ; the final item index 26 matches any other char
0E20                COMMANDTABLE:      
0E20   03                     INC   bc   
0E21   0A                     LD   a,(bc)   
0E22   FE 7B                  CP   "z"+1   
0E24   30 0B                  JR   nc,commandTable2   
0E26   D6 61                  SUB   "a"   
0E28   38 07                  JR   c,commandTable2   
0E2A                COMMANDTABLE1:      
0E2A   E1                     POP   hl   
0E2B   85                     ADD   a,l   
0E2C   6F                     LD   l,a   
0E2D   6E                     LD   l,(hl)   ; must have the same msb as the table
0E2E   C3 37 0E               JP   jumpTable1   
0E31                COMMANDTABLE2:      
0E31   3E 1A                  LD   a,26   
0E33   0B                     DEC   bc   
0E34   18 F4                  JR   commandTable1   
0E36                             ; followed by a table
0E36                             ; db char
0E36                             ; dw addr
0E36                             ; the final item must have char == NUL
0E36                JUMPTABLE:      
0E36   E1                     POP   hl   
0E37                JUMPTABLE1:      
0E37   03                     INC   bc   
0E38                JUMPTABLE2:      
0E38   AF                     XOR   a   
0E39   BE                     CP   (hl)   
0E3A   20 03                  JR   nz,jumpTable3   
0E3C   0B                     DEC   bc   
0E3D   18 09                  JR   jumpTable4   
0E3F                JUMPTABLE3:      
0E3F   0A                     LD   a,(bc)   
0E40   BE                     CP   (hl)   
0E41   28 05                  JR   z,jumpTable4   
0E43   23                     INC   hl   
0E44   23                     INC   hl   
0E45   23                     INC   hl   
0E46   18 F0                  JR   jumpTable2   
0E48                JUMPTABLE4:      
0E48   23                     INC   hl   
0E49   5E                     LD   e,(hl)   
0E4A   23                     INC   hl   
0E4B   56                     LD   d,(hl)   
0E4C   EB                     EX   de,hl   
0E4D   E9                     JP   (hl)   
0E4E                PRTSTR0:      
0E4E   CD 85 00               CALL   putchar   
0E51   23                     INC   hl   
0E52                PRTSTR:      
0E52   7E                     LD   a,(hl)   
0E53   B7                     OR   a   
0E54   20 F8                  JR   nz,prtstr0   
0E56   C9                     RET      
0E57                             ; **************************************************************************
0E57                             ; calculate nesting value
0E57                             ; a is char to be tested,
0E57                             ; e is the nesting value (initially 0)
0E57                             ; e is increased by ( and [
0E57                             ; e is decreased by ) and ]
0E57                             ; e has its bit 7 toggled by `
0E57                             ; limited to 127 levels
0E57                             ; **************************************************************************
0E57                NESTING:      
0E57   FE 22                  CP   DQ   ; quote char
0E59   28 06                  JR   z,nesting0   
0E5B   FE 60                  CP   "`"   ; quote char
0E5D   28 02                  JR   z,nesting0   
0E5F   18 0A                  JR   nesting1   
0E61                NESTING0:      
0E61   CB 7B                  BIT   7,e   
0E63   28 03                  JR   z,nesting1a   
0E65   CB BB                  RES   7,e   
0E67   C9                     RET      
0E68                NESTING1A:      
0E68   CB FB                  SET   7,e   
0E6A   C9                     RET      
0E6B                NESTING1:      
0E6B   CB 7B                  BIT   7,e   
0E6D   C0                     RET   nz   
0E6E   FE 7B                  CP   "{"   
0E70   28 08                  JR   z,nesting2   
0E72   FE 5B                  CP   "["   
0E74   28 04                  JR   z,nesting2   
0E76   FE 28                  CP   "("   
0E78   20 02                  JR   nz,nesting3   
0E7A                NESTING2:      
0E7A   1C                     INC   e   
0E7B   C9                     RET      
0E7C                NESTING3:      
0E7C   FE 7D                  CP   "}"   
0E7E   28 07                  JR   z,nesting4   
0E80   FE 5D                  CP   "]"   
0E82   28 03                  JR   z,nesting4   
0E84   FE 29                  CP   ")"   
0E86   C0                     RET   nz   
0E87                NESTING4:      
0E87   1D                     DEC   e   
0E88   C9                     RET      
0E89                PROMPT:      
0E89   CD 99 0E               CALL   printStr   
0E8C   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0E91   C9                     RET      
0E92                CRLF:        
0E92   CD 99 0E               CALL   printStr   
0E95   0D 0A 00               .CSTR   "\r\n"   
0E98   C9                     RET      
0E99                             ; prints a null teminated string
0E99                             ; the string should be immediately following the call
0E99                PRINTSTR:      
0E99   E3                     EX   (sp),hl   ; swap			
0E9A   CD 52 0E               CALL   prtstr   
0E9D   23                     INC   hl   ; inc past NUL
0E9E   E3                     EX   (sp),hl   ; put it back	
0E9F   C9                     RET      
0EA0                INIT:        
0EA0   21 F0 01               LD   hl,titleStr   
0EA3   11 0E 24               LD   de,titleBuf   
0EA6   06 14                  LD   b,20   
0EA8                INIT1:       
0EA8   1A                     LD   a,(de)   
0EA9   BE                     CP   (hl)   
0EAA   20 17                  JR   nz,coldBoot0   
0EAC   13                     INC   de   
0EAD   23                     INC   hl   
0EAE   10 F8                  DJNZ   init1   
0EB0                WARMINIT:      
0EB0   ED 4B FC 23            LD   bc,(vSavedIP)   ; restore IP
0EB4   ED 7B FE 23            LD   sp,(vSavedSP)   ; restore SP
0EB8   DD 2A 00 24            LD   ix,(vSavedNext)   ; restore Next
0EBC   FD 2A 02 24            LD   iy,(vSavedBP)   ; restore BP
0EC0   C3 FA 0E               JP   start1   
0EC3                COLDBOOT0:      
0EC3   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0EC6   11 0E 24               LD   de,titleBuf   
0EC9   06 14                  LD   b,20   
0ECB   ED B0                  LDIR      
0ECD                COLDINIT:      
0ECD   21 DE 01               LD   hl,isysVars   
0ED0   11 E6 23               LD   de,sysVars   
0ED3   01 12 00               LD   bc,9 * 2   
0ED6   ED B0                  LDIR      
0ED8   21 00 23               LD   hl,vars   ; 52 vars LO HI
0EDB   06 34                  LD   b,26*2   
0EDD   AF                     XOR   a   
0EDE                COLDBOOT1:      
0EDE   77                     LD   (hl),a   
0EDF   23                     INC   hl   
0EE0   10 FC                  DJNZ   coldBoot1   
0EE2   DD 2A EE 23            LD   ix,(vNext)   
0EE6   FD 21 00 21            LD   iy,STACK   
0EEA   C9                     RET      
0EEB                COLDSTART:      
0EEB   31 00 21               LD   sp,STACK   
0EEE   CD C3 0E               CALL   coldBoot0   
0EF1   C3 FA 0E               JP   start1   
0EF4                START:       
0EF4   31 00 21               LD   sp,STACK   ; start Monty
0EF7   CD A0 0E               CALL   init   ; setups
0EFA                START1:      
0EFA   21 0E 24               LD   hl,titleBuf   
0EFD   CD 52 0E               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0F00                INTERPRET:      
0F00   CD 89 0E               CALL   prompt   
0F03   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0F06   21 00 21               LD   hl,TIB   
0F09   22 EA 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0F0C                INTERPRET2:      ; calculate nesting
0F0C   1E 00                  LD   e,0   ; initilize nesting value
0F0E   C5                     PUSH   bc   ; save offset into TIB,
0F0F                             ; bc is also the count of chars in TIB
0F0F   21 00 21               LD   hl,TIB   ; hl is start of TIB
0F12   18 0B                  JR   interpret4   
0F14                INTERPRET3:      
0F14   3E 33                  LD   a,"3"   
0F16   CD 85 00               CALL   putchar   
0F19   7E                     LD   a,(hl)   ; a = char in TIB
0F1A   23                     INC   hl   ; inc pointer into TIB
0F1B   0B                     DEC   bc   ; dec count of chars in TIB
0F1C   CD 57 0E               CALL   nesting   ; update nesting value
0F1F                INTERPRET4:      
0F1F   79                     LD   a,c   ; is count zero?
0F20   B0                     OR   b   
0F21   20 F1                  JR   nz,interpret3   ; if not loop
0F23   C1                     POP   bc   ; restore offset into TIB
0F24                INTERPRET5:      
0F24   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0F27   FE 20                  CP   $20   ; compare to space
0F29   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0F2B   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0F2D                             ; ???? NEEDED?
0F2D   28 36                  JR   z,interpret8   
0F2F   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0F31   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0F33   FE 05                  CP   CTRL_E   
0F35   CA C6 0F               JP   z,edit_   
0F38   FE 08                  CP   CTRL_H   
0F3A   CA B6 0F               JP   z,backSpace_   
0F3D   FE 0A                  CP   CTRL_J   
0F3F   CA DC 0F               JP   z,reEdit_   
0F42                             ; cp CTRL_S
0F42                             ; jp z,printStack_
0F42                             ; DB     lsb(edit_)       ; ENQ ^E  5
0F42                             ; DB     lsb(reedit_)     ; LF  ^J 10
0F42                             ; DB     lsb(list_)       ; FF  ^L 12
0F42                             ; DB     lsb(printStack_) ; DLE ^P 16
0F42                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0F42                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0F42                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0F42                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0F42                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0F42                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0F42                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0F42                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0F42                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0F42                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0F42                INTERPRET5A:      
0F42                             ; ld (vTIBPtr),bc
0F42                             ; ld bc,(vTIBPtr)
0F42   18 C8                  JR   interpret2   
0F44                INTERPRET6:      
0F44   21 00 21               LD   hl,TIB   
0F47   09                     ADD   hl,bc   
0F48   77                     LD   (hl),a   ; store the character in textbuf
0F49   03                     INC   bc   
0F4A   CD 85 00               CALL   putchar   ; echo character to screen
0F4D   CD 57 0E               CALL   nesting   
0F50   18 D2                  JR   interpret5   ; wait for next character
0F52                INTERPRET7:      
0F52   21 00 21               LD   hl,TIB   
0F55   09                     ADD   hl,bc   
0F56   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0F58   23                     INC   hl   
0F59   36 0A                  LD   (hl),"\n"   
0F5B   23                     INC   hl   
0F5C   03                     INC   bc   
0F5D   03                     INC   bc   
0F5E   CD 92 0E               CALL   crlf   ; echo character to screen
0F61   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0F62   B7                     OR   a   
0F63   20 BF                  JR   nz,interpret5   
0F65                INTERPRET8:      
0F65   21 00 21               LD   hl,TIB   
0F68   09                     ADD   hl,bc   
0F69   22 EA 23               LD   (vTIBPtr),hl   
0F6C   01 00 21               LD   bc,TIB   
0F6F   ED 43 FC 23            LD   (vSavedIP),bc   ; save IP
0F73   ED 73 FE 23            LD   (vSavedSP),sp   ; save SP
0F77   DD 22 00 24            LD   (vSavedNext),ix   ; save Next
0F7B   FD 22 02 24            LD   (vSavedBP),iy   ; save BP
0F7F   0B                     DEC   bc   
0F80                NEXT:        
0F80   03                     INC   bc   ; Increment the IP
0F81   0A                     LD   a,(bc)   ; Get the next character and dispatch
0F82   FE 20                  CP   " "   ; whitespace?
0F84   28 FA                  JR   z,next   ; space? ignore
0F86   38 0D                  JR   c,next1   
0F88   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0F8A   6F                     LD   l,a   ; index into table
0F8B   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0F8D   6E                     LD   l,(hl)   ; get low jump address
0F8E   24                     INC   h   ; page 2
0F8F   FE BA                  CP   "Z" - "!" + 1 + $80   
0F91   38 01                  JR   c,next0   
0F93   24                     INC   h   ; page 3
0F94                NEXT0:       
0F94   E9                     JP   (hl)   ; Jump to routine
0F95                NEXT1:       
0F95   FE 00                  CP   NUL   ; end of input string?
0F97   28 03                  JR   z,exit   
0F99   C3 00 0F               JP   interpret   ; no, other whitespace, macros?
0F9C                EXIT:        
0F9C   03                     INC   bc   
0F9D   60 69                  LD   hl,bc   
0F9F   E9                     JP   (hl)   
0FA0                RUN:         
0FA0   C1                     POP   bc   
0FA1   0B                     DEC   bc   
0FA2   DD E9                  JP   (ix)   
0FA4                ERROR:       
0FA4   E5                     PUSH   hl   
0FA5   CD A0 0F               CALL   run   
0FA8   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
0FB3   C3 00 0F               JP   interpret   
0FB6                BACKSPACE_:      
0FB6   79                     LD   a,c   
0FB7   B0                     OR   b   
0FB8   CA 0C 0F               JP   z,interpret2   
0FBB   0B                     DEC   bc   
0FBC   CD 99 0E               CALL   printStr   
0FBF   08 20 08 00            .CSTR   "\b \b"   
0FC3   C3 0C 0F               JP   interpret2   
0FC6                             ; edit
0FC6                EDIT_:       
0FC6   CD A0 0F               CALL   run   
0FC9   60 76 61 72 3F 60 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?` /k/ad .h",0   
0FD9   C3 00 0F               JP   interpret   
0FDC                REEDIT_:      
0FDC   C3 00 0F               JP   interpret   
0FDF                PRINTSTACK_:      
0FDF   CD A0 0F               CALL   run   
0FE2   2F 70 6B 00            .CSTR   "/pk"   
0FE6   C3 00 0F               JP   interpret   
0FE9                             ; editDef:
0FE9                             ;     pop hl                      ; pop ret address
0FE9                             ;     ex (sp),hl                  ; swap with TOS
0FE9                             ;     push hl                     ; dup TOS
0FE9                             ;     ld a,l                      ; a = ident
0FE9                             ;     ld de,TIB                   ; de = start of TIB
0FE9                             ;     ld (vTIBPtr),de             ; update TIB*
0FE9                             ;     push ix                     ; save NEXT
0FE9                             ;     ld ix,editDef0              ; NEXT = editDef0
0FE9                             ;     jp lookupRef                ; convert letter into address
0FE9                             ; editDef0:
0FE9                             ;     ld e,(hl)                   ; de = (hl++)
0FE9                             ;     inc hl
0FE9                             ;     ld d,(hl)
0FE9                             ;     ld a,d                      ; de == 0 ?
0FE9                             ;     or e
0FE9                             ;     jr z,editDef4
0FE9                             ;     ld ix,editDef3              ; NEXT = editDef3
0FE9                             ;     ex de,hl
0FE9                             ;     ld a,(hl)
0FE9                             ;     cp "{"
0FE9                             ;     jr nz,editDef1
0FE9                             ;     jp editBlock0               ; convert letter into address
0FE9                             ; editDef1:
0FE9                             ;     cp "("
0FE9                             ;     jr nz,editDef2
0FE9                             ;     jp editBlock0               ; convert letter into address
0FE9                             ; editDef2:
0FE9                             ;     jp editFunc
0FE9                             ; editDef3:
0FE9                             ;     ld a," "                    ; write assign
0FE9                             ;     call writeChar
0FE9                             ;     pop hl                      ; a = ident
0FE9                             ;     ld a,l
0FE9                             ;     call writeChar
0FE9                             ;     ld a,"="                    ; write assign
0FE9                             ;     call writeChar
0FE9                             ;     ld ix,editDef4              ; NEXT = editDef4
0FE9                             ;     jp printTIB
0FE9                             ; editDef4:
0FE9                             ;     pop ix                      ; restore NEXT
0FE9                             ;     jp (ix)
0FE9                             ; writeChar:
0FE9                             ;     ld de,(vTIBPtr)             ; de = TIB*
0FE9                             ;     ld (de),a                   ; write ident
0FE9                             ;     inc de
0FE9                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0FE9                             ;     ret
0FE9                             ; ; printTIB
0FE9                             ; printTIB:
0FE9                             ;     ld hl,(vTIBPtr)
0FE9                             ;     ld de,TIB
0FE9                             ;     or a
0FE9                             ;     sbc hl,de
0FE9                             ;     jp printTIB2
0FE9                             ; printTIB1:
0FE9                             ;     ld a,(de)
0FE9                             ;     call putchar
0FE9                             ; printTIB2:
0FE9                             ;     ld a,l
0FE9                             ;     or h
0FE9                             ;     jr nz,printTIB1
0FE9                             ;     jp (ix)
0FE9                             ; editBlock:
0FE9                             ;     pop hl                      ; hl = block*
0FE9                             ; editBlock0:
0FE9                             ;     push ix                     ; save next
0FE9                             ;     push hl                     ; push block*
0FE9                             ;     push hl                     ; push block*
0FE9                             ;     ld ix,(editBlock2)
0FE9                             ;     jp blockLength
0FE9                             ; editBlock1:
0FE9                             ;     pop hl                      ; bc = length, (sp) = IP
0FE9                             ;     pop de                      ; de = block*
0FE9                             ;     ld a,l
0FE9                             ;     or h
0FE9                             ;     jr z,editBlock2
0FE9                             ;     push bc
0FE9                             ;     ld bc,hl
0FE9                             ;     ex de,hl                    ; hl = block*
0FE9                             ;     ld de,(vTIBPtr)              ; de = TIB*
0FE9                             ;     ldir                        ; copy block to TIB
0FE9                             ;     ld (vTIBPtr),de              ; save TIB*
0FE9                             ;     pop bc
0FE9                             ; editBlock2:
0FE9                             ;     pop ix                      ; restore next
0FE9                             ;     jp (ix)
0FE9                             ; editFunc:
0FE9                             ;     jp (ix)
0FE9                             ; editArray:
0FE9                             ;     jp (ix)
0FE9                             ; editparseArgs:
0FE9                             ;     jp (ix)
0FE9                             ; ; blockLength
0FE9                             ; ; addr1 -- length
0FE9                             ; blockLength:
0FE9                             ;     pop hl                      ; block*
0FE9                             ;     push hl                     ; save block*
0FE9                             ;     inc hl                      ; skip first char
0FE9                             ;     ld d,1                      ; increase nesting
0FE9                             ; blockLength1:                   ; Skip to end of definition
0FE9                             ;     ld a,(hl)                   ; Get the next character
0FE9                             ;     inc hl                      ; Point to next character
0FE9                             ;     cp " " + 1                  ; ignore whitespace
0FE9                             ;     jr c,blockLength1
0FE9                             ;     cp ")"
0FE9                             ;     jr z,blockLength4
0FE9                             ;     cp "}"
0FE9                             ;     jr z,blockLength4
0FE9                             ;     cp "]"
0FE9                             ;     jr z,blockLength4
0FE9                             ;     cp "("
0FE9                             ;     jr z,blockLength2
0FE9                             ;     cp "{"
0FE9                             ;     jr z,blockLength2
0FE9                             ;     cp "["
0FE9                             ;     jr z,blockLength2
0FE9                             ;     cp "'"
0FE9                             ;     jr z,blockLength3
0FE9                             ;     cp "`"
0FE9                             ;     jr z,blockLength3
0FE9                             ;     cp DQ
0FE9                             ;     jr z,blockLength3
0FE9                             ;     jr blockLength1
0FE9                             ; blockLength2:
0FE9                             ;     inc d
0FE9                             ;     jr blockLength1
0FE9                             ; blockLength4:
0FE9                             ;     dec d
0FE9                             ;     jr nz, blockLength1         ; get the next element
0FE9                             ; blockLength3:
0FE9                             ;     ld a,$80
0FE9                             ;     xor d
0FE9                             ;     ld d,a
0FE9                             ;     jr nz, blockLength1
0FE9                             ;     pop hl                      ; hl = block*
0FE9                             ;     or a
0FE9                             ;     sbc hl,de
0FE9                             ;     push hl
0FE9                             ;     jp (ix)
0FE9                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0FE9                             ; \a start of stack \#3 depth \b base \$ prompt
0FE9                             ; DW dStack               ; a vS0 start of datastack			
0FE9                             ; DW FALSE                ; b vBase16
0FE9                             ; DW 0                    ; c vTIBPtr an offset to the tib
0FE9                             ; DW 0                    ; d
0FE9                             ; DW 65                   ; e vLastDef "A" last command u defined
0FE9                             ; DW 0                    ; f
0FE9                             ; DW page6                ; g 256 bytes limits
0FE9                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0FE9                F1:          
0FE9                F2:          
0FE9                F3:          
0FE9                F4:          
0FE9                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VDATAWIDTH:   DS   2   ; 
23E8                VNUMBASE:   DS   2   ; 
23EA                VTIBPTR:   DS   2   ; 
23EC                VBUFPTR:   DS   2   ; 
23EE                VNEXT:    DS   2   ; 
23F0                VHEAPPTR:   DS   2   ; 
23F2                VRECUR:   DS   2   ; 
23F4                VDEFINE:   DS   2   ; 
23F6                VSTRMODE:   DS   2   ; 
23F8                             ; uninitialised sys variables (preserved)
23F8                VPOINTER:   DS   2   ; 
23FA                VREMAIN:   DS   2   ; 
23FC                VSAVEDIP:   DS   2   ; 
23FE                VSAVEDSP:   DS   2   ; 
2400                VSAVEDNEXT:   DS   2   ; 
2402                VSAVEDBP:   DS   2   ; 
2404                             ; uninitialised sys variables (unpreserved)
2404                VTEMP1:   DS   2   ; 
2406                VTEMP2:   DS   2   ; 
2408                VTEMP3:   DS   2   ; 
240A                VLASTDEF:   DS   2   ; 
240C                TBPTR:    DS   2   ; reserved for tests
240E                TITLEBUF:   DS   20   
2422                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 15
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 2340 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1842 IN MAIN.asm
                    > USED AT LINE 2178 IN MAIN.asm
                    > USED AT LINE 2324 IN MAIN.asm
                    > USED AT LINE 2386 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1155 IN MAIN.asm
                    > USED AT LINE 1714 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1160 IN MAIN.asm
                    > USED AT LINE 1719 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
                    > USED AT LINE 825 IN MAIN.asm
                    > USED AT LINE 831 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
                    > USED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 864 IN MAIN.asm
                    > USED AT LINE 868 IN MAIN.asm
                    > USED AT LINE 874 IN MAIN.asm
                    > USED AT LINE 878 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 889 IN MAIN.asm
                    > USED AT LINE 899 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 917 IN MAIN.asm
                    > USED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 953 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1436 IN MAIN.asm
                    > USED AT LINE 1675 IN MAIN.asm
                    > USED AT LINE 2343 IN MAIN.asm
                    > USED AT LINE 2435 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
                    > USED AT LINE 2197 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2349 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2351 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2353 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2278 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2253 IN MAIN.asm
                    > USED AT LINE 2272 IN MAIN.asm
BANG_:              0204 DEFINED AT LINE 174 IN MAIN.asm
BANG:               0204 DEFINED AT LINE 175 IN MAIN.asm
NOT:                020F DEFINED AT LINE 183 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
EQ_:                0215 DEFINED AT LINE 187 IN MAIN.asm
EQ:                 0215 DEFINED AT LINE 188 IN MAIN.asm
EQ0:                021F DEFINED AT LINE 195 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
EQ1:                0220 DEFINED AT LINE 197 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
GT_:                0224 DEFINED AT LINE 201 IN MAIN.asm
GT:                 0224 DEFINED AT LINE 202 IN MAIN.asm
LT_:                022F DEFINED AT LINE 210 IN MAIN.asm
LT:                 022F DEFINED AT LINE 211 IN MAIN.asm
LT1:                0238 DEFINED AT LINE 218 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
DQUOTE_:            0241 DEFINED AT LINE 224 IN MAIN.asm
HASH_:              0244 DEFINED AT LINE 229 IN MAIN.asm
HASH:               0244 DEFINED AT LINE 230 IN MAIN.asm
ARRAYINDEX:         0244 DEFINED AT LINE 231 IN MAIN.asm
ARRAYINDEX0:        024C DEFINED AT LINE 237 IN MAIN.asm
ARRAYINDEX1:        024D DEFINED AT LINE 239 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
ARRAYINDEX2:        0259 DEFINED AT LINE 248 IN MAIN.asm
                    > USED AT LINE 245 IN MAIN.asm
DOLLAR_:            025C DEFINED AT LINE 252 IN MAIN.asm
PERCENT_:           025F DEFINED AT LINE 255 IN MAIN.asm
AMPER_:             0262 DEFINED AT LINE 260 IN MAIN.asm
AMPER:              0262 DEFINED AT LINE 261 IN MAIN.asm
AND:                0262 DEFINED AT LINE 262 IN MAIN.asm
AND1:               0269 DEFINED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 579 IN MAIN.asm
QUOTE_:             026D DEFINED AT LINE 275 IN MAIN.asm
LPAREN_:            0270 DEFINED AT LINE 280 IN MAIN.asm
RPAREN_:            0273 DEFINED AT LINE 284 IN MAIN.asm
RPAREN:             0273 DEFINED AT LINE 285 IN MAIN.asm
STAR_:              027B DEFINED AT LINE 290 IN MAIN.asm
STAR:               027B DEFINED AT LINE 291 IN MAIN.asm
MUL:                027B DEFINED AT LINE 292 IN MAIN.asm
MUL2:               027D DEFINED AT LINE 295 IN MAIN.asm
MUL3:               0285 DEFINED AT LINE 300 IN MAIN.asm
                    > USED AT LINE 309 IN MAIN.asm
PLUS_:              0297 DEFINED AT LINE 315 IN MAIN.asm
PLUS:               0297 DEFINED AT LINE 316 IN MAIN.asm
ADD:                0297 DEFINED AT LINE 317 IN MAIN.asm
ADD1:               02A2 DEFINED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 321 IN MAIN.asm
ADD3:               02A6 DEFINED AT LINE 330 IN MAIN.asm
                    > USED AT LINE 311 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
                    > USED AT LINE 971 IN MAIN.asm
ADD4:               02B0 DEFINED AT LINE 338 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
COMMA_:             02B3 DEFINED AT LINE 341 IN MAIN.asm
MINUS_:             02B6 DEFINED AT LINE 346 IN MAIN.asm
MINUS:              02B6 DEFINED AT LINE 347 IN MAIN.asm
SUB:                02C2 DEFINED AT LINE 355 IN MAIN.asm
                    > USED AT LINE 352 IN MAIN.asm
SUB1:               02CC DEFINED AT LINE 362 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
DOT_:               02D4 DEFINED AT LINE 370 IN MAIN.asm
SLASH_:             02D7 DEFINED AT LINE 373 IN MAIN.asm
NUM_:               02DA DEFINED AT LINE 376 IN MAIN.asm
COLON_:             02DD DEFINED AT LINE 379 IN MAIN.asm
COLON:              02E0 DEFINED AT LINE 381 IN MAIN.asm
                    > USED AT LINE 380 IN MAIN.asm
DEFINESTART:        02ED DEFINED AT LINE 389 IN MAIN.asm
                    > USED AT LINE 385 IN MAIN.asm
SEMICOLON_:         02F6 DEFINED AT LINE 395 IN MAIN.asm
QUESTION_:          02F9 DEFINED AT LINE 398 IN MAIN.asm
UPCASE_:            02FC DEFINED AT LINE 402 IN MAIN.asm
UPCASE:             02FC DEFINED AT LINE 403 IN MAIN.asm
LOWCASE_:           0301 DEFINED AT LINE 411 IN MAIN.asm
LOWCASE:            0301 DEFINED AT LINE 412 IN MAIN.asm
IDENT1:             0306 DEFINED AT LINE 416 IN MAIN.asm
                    > USED AT LINE 406 IN MAIN.asm
LBRACK_:            0313 DEFINED AT LINE 428 IN MAIN.asm
LBRACK:             0313 DEFINED AT LINE 429 IN MAIN.asm
ARRAYSTART:         0313 DEFINED AT LINE 430 IN MAIN.asm
BACKSLASH_:         032F DEFINED AT LINE 445 IN MAIN.asm
BACKSLASH:          032F DEFINED AT LINE 446 IN MAIN.asm
LAMBDA:             032F DEFINED AT LINE 447 IN MAIN.asm
LAMBDA1:            0334 DEFINED AT LINE 450 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
LAMBDA2:            0344 DEFINED AT LINE 459 IN MAIN.asm
                    > USED AT LINE 456 IN MAIN.asm
RBRACK_:            0350 DEFINED AT LINE 467 IN MAIN.asm
RBRACK:             0350 DEFINED AT LINE 468 IN MAIN.asm
ARRAYEND:           0350 DEFINED AT LINE 469 IN MAIN.asm
ARRAYEND1:          036C DEFINED AT LINE 486 IN MAIN.asm
                    > USED AT LINE 503 IN MAIN.asm
ARRAYEND2:          037C DEFINED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 492 IN MAIN.asm
ARRAYEND3:          0381 DEFINED AT LINE 500 IN MAIN.asm
                    > USED AT LINE 485 IN MAIN.asm
CARET_:             03A0 DEFINED AT LINE 521 IN MAIN.asm
CARET:              03A0 DEFINED AT LINE 525 IN MAIN.asm
GO:                 03A0 DEFINED AT LINE 526 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03A1 DEFINED AT LINE 528 IN MAIN.asm
                    > USED AT LINE 1448 IN MAIN.asm
                    > USED AT LINE 1450 IN MAIN.asm
                    > USED AT LINE 1549 IN MAIN.asm
GO2:                03A7 DEFINED AT LINE 533 IN MAIN.asm
                    > USED AT LINE 531 IN MAIN.asm
UNDERSCORE_:        03B6 DEFINED AT LINE 542 IN MAIN.asm
GRAVE_:             03B9 DEFINED AT LINE 545 IN MAIN.asm
GRAVE:              03B9 DEFINED AT LINE 546 IN MAIN.asm
PRINTLITERAL:       03B9 DEFINED AT LINE 547 IN MAIN.asm
PRINTLITERAL0:      03C0 DEFINED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
PRINTLITERAL1:      03C3 DEFINED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 550 IN MAIN.asm
LBRACE_:            03CF DEFINED AT LINE 562 IN MAIN.asm
LBRACE:             03CF DEFINED AT LINE 563 IN MAIN.asm
                    > USED AT LINE 281 IN MAIN.asm
PIPE_:              03D4 DEFINED AT LINE 569 IN MAIN.asm
PIPE:               03D4 DEFINED AT LINE 570 IN MAIN.asm
OR:                 03D4 DEFINED AT LINE 571 IN MAIN.asm
RBRACE_:            03DE DEFINED AT LINE 581 IN MAIN.asm
TILDE_:             03E1 DEFINED AT LINE 585 IN MAIN.asm
TILDE:              03E1 DEFINED AT LINE 586 IN MAIN.asm
CHAR:               03E1 DEFINED AT LINE 587 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 600 IN MAIN.asm
                    > USED AT LINE 371 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 601 IN MAIN.asm
PRINTCHAR:          040F DEFINED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 606 IN MAIN.asm
PRINTSTRING:        041E DEFINED AT LINE 625 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
DOTSTRING0:         0425 DEFINED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
DOTSTRING1:         0428 DEFINED AT LINE 633 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
PRINTNUMBER:        0433 DEFINED AT LINE 642 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
DOTDEC:             043E DEFINED AT LINE 650 IN MAIN.asm
                    > USED AT LINE 646 IN MAIN.asm
DOTDECX:            044C DEFINED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
DOTDEC0:            045B DEFINED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 659 IN MAIN.asm
DOTDEC1:            046B DEFINED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 672 IN MAIN.asm
DOTDEC2:            048B DEFINED AT LINE 698 IN MAIN.asm
                    > USED AT LINE 687 IN MAIN.asm
                    > USED AT LINE 689 IN MAIN.asm
                    > USED AT LINE 691 IN MAIN.asm
                    > USED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 696 IN MAIN.asm
DOTDEC3:            048D DEFINED AT LINE 700 IN MAIN.asm
                    > USED AT LINE 703 IN MAIN.asm
DOTDEC4:            049D DEFINED AT LINE 712 IN MAIN.asm
                    > USED AT LINE 707 IN MAIN.asm
DOTDEC5:            049E DEFINED AT LINE 714 IN MAIN.asm
                    > USED AT LINE 711 IN MAIN.asm
DOTHEX:             04A4 DEFINED AT LINE 724 IN MAIN.asm
                    > USED AT LINE 645 IN MAIN.asm
DOTHEX0:            04B7 DEFINED AT LINE 735 IN MAIN.asm
                    > USED AT LINE 732 IN MAIN.asm
DOTHEX1:            04C6 DEFINED AT LINE 744 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 737 IN MAIN.asm
DOTHEX2:            04CF DEFINED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 750 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 768 IN MAIN.asm
COMMAND_A_:         0526 DEFINED AT LINE 804 IN MAIN.asm
COMMAND_B_:         0538 DEFINED AT LINE 818 IN MAIN.asm
COMMAND_D_:         0544 DEFINED AT LINE 828 IN MAIN.asm
COMMAND_F_:         054A DEFINED AT LINE 834 IN MAIN.asm
COMMAND_H_:         0565 DEFINED AT LINE 854 IN MAIN.asm
COMMAND_I_:         056B DEFINED AT LINE 861 IN MAIN.asm
KEY_:               0571 DEFINED AT LINE 867 IN MAIN.asm
COMMAND_M_:         0574 DEFINED AT LINE 871 IN MAIN.asm
OUTPUT_:            057A DEFINED AT LINE 877 IN MAIN.asm
COMMAND_P_:         057D DEFINED AT LINE 881 IN MAIN.asm
COMMAND_Q_:         0580 DEFINED AT LINE 886 IN MAIN.asm
COMMAND_R_:         0586 DEFINED AT LINE 892 IN MAIN.asm
COMMAND_S_:         0592 DEFINED AT LINE 902 IN MAIN.asm
TRUE_:              05A4 DEFINED AT LINE 916 IN MAIN.asm
COMMAND_V_:         05A7 DEFINED AT LINE 920 IN MAIN.asm
COMMAND_W_:         05BC DEFINED AT LINE 936 IN MAIN.asm
XOR_:               05C2 DEFINED AT LINE 942 IN MAIN.asm
COMMAND_NOP_:       05C5 DEFINED AT LINE 947 IN MAIN.asm
COMMAND_DEFAULT_:   05C8 DEFINED AT LINE 952 IN MAIN.asm
NOP:                05CB DEFINED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
DIV:                05CD DEFINED AT LINE 962 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
ABSOLUTE:           05DE DEFINED AT LINE 975 IN MAIN.asm
                    > USED AT LINE 806 IN MAIN.asm
ADDROF:             05EB DEFINED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 808 IN MAIN.asm
ADDROF1:            05FF DEFINED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
ADDROF2:            060A DEFINED AT LINE 1011 IN MAIN.asm
                    > USED AT LINE 994 IN MAIN.asm
                    > USED AT LINE 996 IN MAIN.asm
                    > USED AT LINE 1001 IN MAIN.asm
ARRAYLENGTH:        060C DEFINED AT LINE 1016 IN MAIN.asm
                    > USED AT LINE 812 IN MAIN.asm
                    > USED AT LINE 44
ARRAYLENGTH1:       0612 DEFINED AT LINE 1023 IN MAIN.asm
                    > USED AT LINE 1034 IN MAIN.asm
                    > USED AT LINE 1037 IN MAIN.asm
ARRAYSIZE:          0615 DEFINED AT LINE 1029 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
PERFORMM_1479S1030: 061C DEFINED AT LINE 45
                    > USED AT LINE 43
BREAK:              0629 DEFINED AT LINE 1042 IN MAIN.asm
                    > USED AT LINE 824 IN MAIN.asm
BREAK1:             0630 DEFINED AT LINE 1048 IN MAIN.asm
                    > USED AT LINE 1046 IN MAIN.asm
BYTEMODE:           0643 DEFINED AT LINE 1060 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
BYTEMODE1:          0646 DEFINED AT LINE 1062 IN MAIN.asm
                    > USED AT LINE 1227 IN MAIN.asm
COMMENT:            064B DEFINED AT LINE 1067 IN MAIN.asm
                    > USED AT LINE 772 IN MAIN.asm
                    > USED AT LINE 1071 IN MAIN.asm
CONSTHEAPSTART:     0654 DEFINED AT LINE 1075 IN MAIN.asm
                    > USED AT LINE 930 IN MAIN.asm
CONSTTIBSTART:      065A DEFINED AT LINE 1079 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
CONSTBUFSTART:      0660 DEFINED AT LINE 1083 IN MAIN.asm
                    > USED AT LINE 928 IN MAIN.asm
DECBASE:            0666 DEFINED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
DECBASE1:           0669 DEFINED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 1099 IN MAIN.asm
ERROR1:             066E DEFINED AT LINE 1093 IN MAIN.asm
                    > USED AT LINE 816 IN MAIN.asm
                    > USED AT LINE 826 IN MAIN.asm
                    > USED AT LINE 858 IN MAIN.asm
                    > USED AT LINE 865 IN MAIN.asm
                    > USED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
HEXBASE:            0674 DEFINED AT LINE 1097 IN MAIN.asm
                    > USED AT LINE 856 IN MAIN.asm
INPUT:              067A DEFINED AT LINE 1103 IN MAIN.asm
                    > USED AT LINE 863 IN MAIN.asm
KEY:                0685 DEFINED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 869 IN MAIN.asm
OUTPUT:             068E DEFINED AT LINE 1124 IN MAIN.asm
                    > USED AT LINE 879 IN MAIN.asm
QUIT:               0697 DEFINED AT LINE 1135 IN MAIN.asm
                    > USED AT LINE 888 IN MAIN.asm
QUIT1:              069E DEFINED AT LINE 1141 IN MAIN.asm
                    > USED AT LINE 1139 IN MAIN.asm
RECUR:              06A1 DEFINED AT LINE 1144 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
REMAIN:             06A7 DEFINED AT LINE 1149 IN MAIN.asm
                    > USED AT LINE 896 IN MAIN.asm
STRINGBEGIN:        06AD DEFINED AT LINE 1154 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
STRINGEND:          06B5 DEFINED AT LINE 1159 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
STRINGEND1:         06DC DEFINED AT LINE 1177 IN MAIN.asm
                    > USED AT LINE 1157 IN MAIN.asm
STRINGLENGTH:       06E4 DEFINED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
                    > USED AT LINE 44
STRINGLENGTH1:      06EA DEFINED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 1192 IN MAIN.asm
STRINGLENGTH2:      06EC DEFINED AT LINE 1189 IN MAIN.asm
                    > USED AT LINE 1185 IN MAIN.asm
STRINGLENGTH3:      06F0 DEFINED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1201 IN MAIN.asm
STRINGSIZE:         06F3 DEFINED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
PERFORMM_1627S1198: 06FA DEFINED AT LINE 45
                    > USED AT LINE 43
VARBUFPTR:          06FF DEFINED AT LINE 1203 IN MAIN.asm
                    > USED AT LINE 922 IN MAIN.asm
VARHEAPPTR:         0708 DEFINED AT LINE 1208 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
VARTIBPTR:          0711 DEFINED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 926 IN MAIN.asm
VARIABLE:           071A DEFINED AT LINE 1218 IN MAIN.asm
                    > USED AT LINE 1206 IN MAIN.asm
                    > USED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 1216 IN MAIN.asm
                    > USED AT LINE 1401 IN MAIN.asm
CONSTANT:           071D DEFINED AT LINE 1220 IN MAIN.asm
                    > USED AT LINE 1077 IN MAIN.asm
                    > USED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 1085 IN MAIN.asm
WORDMODE:           0720 DEFINED AT LINE 1225 IN MAIN.asm
                    > USED AT LINE 938 IN MAIN.asm
XOR:                0726 DEFINED AT LINE 1229 IN MAIN.asm
                    > USED AT LINE 944 IN MAIN.asm
XOR1:               0727 DEFINED AT LINE 1231 IN MAIN.asm
RANGESRC:           0731 DEFINED AT LINE 32
                    > USED AT LINE 898 IN MAIN.asm
RANGESRCM_1669S1248: 0740 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          07AD DEFINED AT LINE 32
                    > USED AT LINE 810 IN MAIN.asm
ARRAYITERM_1688S1268: 07BA DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         082E DEFINED AT LINE 32
                    > USED AT LINE 908 IN MAIN.asm
STRINGITERM_1707S1288: 083B DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                08B6 DEFINED AT LINE 32
                    > USED AT LINE 873 IN MAIN.asm
MAPM_1727S1310:     08C3 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             08F8 DEFINED AT LINE 32
                    > USED AT LINE 842 IN MAIN.asm
FILTERM_1741S1325:  0906 DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               0956 DEFINED AT LINE 32
                    > USED AT LINE 836 IN MAIN.asm
FOLDM_1760S1345:    0965 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            09A8 DEFINED AT LINE 32
                    > USED AT LINE 838 IN MAIN.asm
FOREACHM_1774S1360: 09B6 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            09F4 DEFINED AT LINE 32
                    > USED AT LINE 840 IN MAIN.asm
FUNCSRCM_1788S1375: 0A00 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0A2D DEFINED AT LINE 32
                    > USED AT LINE 604 IN MAIN.asm
PRINTARRAYM_1798S1386: 0A3B DEFINED AT LINE 39
                    > USED AT LINE 35
AT_:                0A75 DEFINED AT LINE 1396 IN MAIN.asm
AT:                 0A75 DEFINED AT LINE 1397 IN MAIN.asm
ADDR:               0A75 DEFINED AT LINE 1398 IN MAIN.asm
DOLLAR:             0A7F DEFINED AT LINE 1404 IN MAIN.asm
                    > USED AT LINE 253 IN MAIN.asm
HEXNUM:             0A7F DEFINED AT LINE 1405 IN MAIN.asm
HEXNUM1:            0A82 DEFINED AT LINE 1407 IN MAIN.asm
                    > USED AT LINE 1424 IN MAIN.asm
HEXNUM2:            0A8A DEFINED AT LINE 1413 IN MAIN.asm
                    > USED AT LINE 1411 IN MAIN.asm
QUESTION:           0A9C DEFINED AT LINE 1429 IN MAIN.asm
                    > USED AT LINE 399 IN MAIN.asm
IF:                 0A9C DEFINED AT LINE 1430 IN MAIN.asm
IFTE:               0AA8 DEFINED AT LINE 1440 IN MAIN.asm
                    > USED AT LINE 1434 IN MAIN.asm
IFTE1:              0AA9 DEFINED AT LINE 1442 IN MAIN.asm
                    > USED AT LINE 1437 IN MAIN.asm
NUM:                0AB5 DEFINED AT LINE 1453 IN MAIN.asm
                    > USED AT LINE 354 IN MAIN.asm
                    > USED AT LINE 377 IN MAIN.asm
NUM0:               0ABE DEFINED AT LINE 1459 IN MAIN.asm
                    > USED AT LINE 1457 IN MAIN.asm
NUM1:               0ABF DEFINED AT LINE 1461 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
NUM2:               0AD7 DEFINED AT LINE 1479 IN MAIN.asm
                    > USED AT LINE 1415 IN MAIN.asm
                    > USED AT LINE 1417 IN MAIN.asm
                    > USED AT LINE 1464 IN MAIN.asm
                    > USED AT LINE 1466 IN MAIN.asm
NUM3:               0AE2 DEFINED AT LINE 1487 IN MAIN.asm
                    > USED AT LINE 1482 IN MAIN.asm
RBRACE:             0AE5 DEFINED AT LINE 1492 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
BLOCKEND:           0AE5 DEFINED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 1057 IN MAIN.asm
                    > USED AT LINE 1142 IN MAIN.asm
BLOCKEND1:          0B17 DEFINED AT LINE 1515 IN MAIN.asm
                    > USED AT LINE 1508 IN MAIN.asm
BLOCKEND2:          0B23 DEFINED AT LINE 1522 IN MAIN.asm
                    > USED AT LINE 1514 IN MAIN.asm
BLOCKEND3:          0B35 DEFINED AT LINE 1536 IN MAIN.asm
                    > USED AT LINE 1528 IN MAIN.asm
BLOCKEND4:          0B49 DEFINED AT LINE 1546 IN MAIN.asm
                    > USED AT LINE 1544 IN MAIN.asm
GOBLOCK:            0B52 DEFINED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 536 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
GOBLOCK2:           0B77 DEFINED AT LINE 1568 IN MAIN.asm
                    > USED AT LINE 1649 IN MAIN.asm
GOBLOCK3:           0B81 DEFINED AT LINE 1574 IN MAIN.asm
GOFUNC:             0B85 DEFINED AT LINE 1578 IN MAIN.asm
                    > USED AT LINE 538 IN MAIN.asm
GOFUNC1:            0B9E DEFINED AT LINE 1597 IN MAIN.asm
                    > USED AT LINE 1607 IN MAIN.asm
GOFUNC2:            0BA4 DEFINED AT LINE 1604 IN MAIN.asm
                    > USED AT LINE 1596 IN MAIN.asm
GOFUNC3:            0BAF DEFINED AT LINE 1610 IN MAIN.asm
                    > USED AT LINE 1586 IN MAIN.asm
GOFUNC4:            0BC7 DEFINED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1624 IN MAIN.asm
GOFUNC5:            0BCA DEFINED AT LINE 1630 IN MAIN.asm
                    > USED AT LINE 1636 IN MAIN.asm
GOFUNC6:            0BCD DEFINED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
GOFUNC7:            0BD0 DEFINED AT LINE 1637 IN MAIN.asm
GOFUNC8:            0BD4 DEFINED AT LINE 1642 IN MAIN.asm
                    > USED AT LINE 1562 IN MAIN.asm
                    > USED AT LINE 1626 IN MAIN.asm
ASSIGN:             0BDF DEFINED AT LINE 1653 IN MAIN.asm
                    > USED AT LINE 194 IN MAIN.asm
ASSIGN0:            0BE1 DEFINED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 324 IN MAIN.asm
                    > USED AT LINE 339 IN MAIN.asm
                    > USED AT LINE 361 IN MAIN.asm
ASSIGN1:            0BE5 DEFINED AT LINE 1659 IN MAIN.asm
                    > USED AT LINE 1678 IN MAIN.asm
ASSIGN2:            0BEE DEFINED AT LINE 1666 IN MAIN.asm
                    > USED AT LINE 1663 IN MAIN.asm
SEMICOLON:          0BF0 DEFINED AT LINE 1669 IN MAIN.asm
                    > USED AT LINE 396 IN MAIN.asm
DEFINEEND:          0BF0 DEFINED AT LINE 1670 IN MAIN.asm
DEFINEEND1:         0C02 DEFINED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 1674 IN MAIN.asm
EQUALS:             0C04 DEFINED AT LINE 1684 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
NOTEQUALS:          0C0B DEFINED AT LINE 1690 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
LESSTHANEQ:         0C12 DEFINED AT LINE 1698 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
LESSTHAN:           0C17 DEFINED AT LINE 1705 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
LESSTHAN1:          0C1C DEFINED AT LINE 1710 IN MAIN.asm
                    > USED AT LINE 1701 IN MAIN.asm
TRUE1:              0C1F DEFINED AT LINE 1713 IN MAIN.asm
                    > USED AT LINE 918 IN MAIN.asm
                    > USED AT LINE 1687 IN MAIN.asm
                    > USED AT LINE 1693 IN MAIN.asm
NULL1:              0C25 DEFINED AT LINE 1717 IN MAIN.asm
FALSE1:             0C25 DEFINED AT LINE 1718 IN MAIN.asm
                    > USED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 1688 IN MAIN.asm
                    > USED AT LINE 1694 IN MAIN.asm
                    > USED AT LINE 1708 IN MAIN.asm
                    > USED AT LINE 1711 IN MAIN.asm
SHIFTLEFT:          0C2B DEFINED AT LINE 1725 IN MAIN.asm
                    > USED AT LINE 215 IN MAIN.asm
SHIFTLEFT1:         0C33 DEFINED AT LINE 1732 IN MAIN.asm
                    > USED AT LINE 1735 IN MAIN.asm
SHIFTLEFT2:         0C34 DEFINED AT LINE 1734 IN MAIN.asm
                    > USED AT LINE 1731 IN MAIN.asm
SHIFTRIGHT:         0C3B DEFINED AT LINE 1742 IN MAIN.asm
                    > USED AT LINE 206 IN MAIN.asm
SHIFTRIGHT1:        0C43 DEFINED AT LINE 1749 IN MAIN.asm
                    > USED AT LINE 1753 IN MAIN.asm
SHIFTRIGHT2:        0C47 DEFINED AT LINE 1752 IN MAIN.asm
                    > USED AT LINE 1748 IN MAIN.asm
QUOTE:              0C4E DEFINED AT LINE 1760 IN MAIN.asm
                    > USED AT LINE 276 IN MAIN.asm
STRING:             0C4E DEFINED AT LINE 1761 IN MAIN.asm
STRING1:            0C57 DEFINED AT LINE 1768 IN MAIN.asm
                    > USED AT LINE 1776 IN MAIN.asm
STRING2:            0C5A DEFINED AT LINE 1772 IN MAIN.asm
                    > USED AT LINE 1767 IN MAIN.asm
STRING3:            0C60 DEFINED AT LINE 1777 IN MAIN.asm
                    > USED AT LINE 1775 IN MAIN.asm
PERCENT:            0C68 DEFINED AT LINE 1787 IN MAIN.asm
                    > USED AT LINE 256 IN MAIN.asm
ARG:                0C68 DEFINED AT LINE 1788 IN MAIN.asm
ARG0:               0C84 DEFINED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 1813 IN MAIN.asm
ARG0A:              0C8D DEFINED AT LINE 1815 IN MAIN.asm
                    > USED AT LINE 1794 IN MAIN.asm
                    > USED AT LINE 1799 IN MAIN.asm
ARG1:               0C92 DEFINED AT LINE 1818 IN MAIN.asm
                    > USED AT LINE 1811 IN MAIN.asm
ARG1A:              0C9A DEFINED AT LINE 1825 IN MAIN.asm
                    > USED AT LINE 1817 IN MAIN.asm
DOTNEXT:            0C9D DEFINED AT LINE 1829 IN MAIN.asm
                    > USED AT LINE 560 IN MAIN.asm
                    > USED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
                    > USED AT LINE 665 IN MAIN.asm
                    > USED AT LINE 742 IN MAIN.asm
DOTNEXT1:           0CA5 DEFINED AT LINE 1834 IN MAIN.asm
                    > USED AT LINE 1832 IN MAIN.asm
DOTNEXT2:           0CB1 DEFINED AT LINE 1840 IN MAIN.asm
                    > USED AT LINE 1848 IN MAIN.asm
DOTNEXT3:           0CB7 DEFINED AT LINE 1845 IN MAIN.asm
                    > USED AT LINE 1839 IN MAIN.asm
DQUOTE:             0CC3 DEFINED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 225 IN MAIN.asm
UNDERSCORE:         0CC3 DEFINED AT LINE 1856 IN MAIN.asm
                    > USED AT LINE 543 IN MAIN.asm
COMMA:              0CC3 DEFINED AT LINE 1857 IN MAIN.asm
                    > USED AT LINE 342 IN MAIN.asm
DIVIDE:             0CC5 DEFINED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
DIVIDE1:            0CCA DEFINED AT LINE 1866 IN MAIN.asm
                    > USED AT LINE 1878 IN MAIN.asm
DIVIDE2:            0CD7 DEFINED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 1871 IN MAIN.asm
DIVIDE3:            0CD8 DEFINED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 1873 IN MAIN.asm
PARSEARGS:          0CDE DEFINED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 449 IN MAIN.asm
PARSEARGS1:         0CE8 DEFINED AT LINE 1891 IN MAIN.asm
                    > USED AT LINE 1912 IN MAIN.asm
PARSEARGS1A:        0CF0 DEFINED AT LINE 1897 IN MAIN.asm
                    > USED AT LINE 1894 IN MAIN.asm
PARSEARGS2:         0CF8 DEFINED AT LINE 1902 IN MAIN.asm
PARSEARGS3:         0D00 DEFINED AT LINE 1910 IN MAIN.asm
                    > USED AT LINE 1896 IN MAIN.asm
                    > USED AT LINE 1908 IN MAIN.asm
PARSEARGS4:         0D03 DEFINED AT LINE 1913 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 1901 IN MAIN.asm
PARSEARGS5:         0D09 DEFINED AT LINE 1919 IN MAIN.asm
                    > USED AT LINE 1917 IN MAIN.asm
PARSEBLOCK:         0D14 DEFINED AT LINE 1932 IN MAIN.asm
                    > USED AT LINE 460 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
PARSEBLOCK1:        0D18 DEFINED AT LINE 1936 IN MAIN.asm
                    > USED AT LINE 1940 IN MAIN.asm
                    > USED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 1965 IN MAIN.asm
                    > USED AT LINE 1970 IN MAIN.asm
                    > USED AT LINE 1974 IN MAIN.asm
PARSEBLOCK2:        0D44 DEFINED AT LINE 1963 IN MAIN.asm
                    > USED AT LINE 1950 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
                    > USED AT LINE 1954 IN MAIN.asm
PARSEBLOCK3:        0D47 DEFINED AT LINE 1966 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
                    > USED AT LINE 1959 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
PARSEBLOCK4:        0D4F DEFINED AT LINE 1972 IN MAIN.asm
                    > USED AT LINE 1943 IN MAIN.asm
                    > USED AT LINE 1945 IN MAIN.asm
                    > USED AT LINE 1947 IN MAIN.asm
PARSEBLOCK5:        0D52 DEFINED AT LINE 1975 IN MAIN.asm
                    > USED AT LINE 1971 IN MAIN.asm
PARSEBLOCK6:        0D7A DEFINED AT LINE 1994 IN MAIN.asm
                    > USED AT LINE 1981 IN MAIN.asm
CREATEFUNC:         0D7E DEFINED AT LINE 2002 IN MAIN.asm
                    > USED AT LINE 461 IN MAIN.asm
CREATEFUNC0:        0D9D DEFINED AT LINE 2016 IN MAIN.asm
                    > USED AT LINE 2012 IN MAIN.asm
CREATEFUNC1:        0DB5 DEFINED AT LINE 2035 IN MAIN.asm
                    > USED AT LINE 2031 IN MAIN.asm
CREATEFUNC2:        0DC8 DEFINED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2044 IN MAIN.asm
CREATEFUNC2A:       0DE7 DEFINED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 2061 IN MAIN.asm
CREATEFUNC3:        0DF6 DEFINED AT LINE 2086 IN MAIN.asm
                    > USED AT LINE 2096 IN MAIN.asm
CREATEFUNC4:        0E01 DEFINED AT LINE 2097 IN MAIN.asm
CREATEFUNC5:        0E02 DEFINED AT LINE 2099 IN MAIN.asm
                    > USED AT LINE 2015 IN MAIN.asm
COMMANDTABLE:       0E20 DEFINED AT LINE 2129 IN MAIN.asm
                    > USED AT LINE 774 IN MAIN.asm
COMMANDTABLE1:      0E2A DEFINED AT LINE 2136 IN MAIN.asm
                    > USED AT LINE 2145 IN MAIN.asm
COMMANDTABLE2:      0E31 DEFINED AT LINE 2142 IN MAIN.asm
                    > USED AT LINE 2133 IN MAIN.asm
                    > USED AT LINE 2135 IN MAIN.asm
JUMPTABLE:          0E36 DEFINED AT LINE 2151 IN MAIN.asm
                    > USED AT LINE 602 IN MAIN.asm
JUMPTABLE1:         0E37 DEFINED AT LINE 2153 IN MAIN.asm
                    > USED AT LINE 2141 IN MAIN.asm
JUMPTABLE2:         0E38 DEFINED AT LINE 2155 IN MAIN.asm
                    > USED AT LINE 2168 IN MAIN.asm
JUMPTABLE3:         0E3F DEFINED AT LINE 2161 IN MAIN.asm
                    > USED AT LINE 2158 IN MAIN.asm
JUMPTABLE4:         0E48 DEFINED AT LINE 2169 IN MAIN.asm
                    > USED AT LINE 2160 IN MAIN.asm
                    > USED AT LINE 2164 IN MAIN.asm
PRTSTR0:            0E4E DEFINED AT LINE 2177 IN MAIN.asm
                    > USED AT LINE 2183 IN MAIN.asm
PRTSTR:             0E52 DEFINED AT LINE 2180 IN MAIN.asm
                    > USED AT LINE 2247 IN MAIN.asm
                    > USED AT LINE 2304 IN MAIN.asm
NESTING:            0E57 DEFINED AT LINE 2196 IN MAIN.asm
                    > USED AT LINE 2329 IN MAIN.asm
                    > USED AT LINE 2387 IN MAIN.asm
NESTING0:           0E61 DEFINED AT LINE 2202 IN MAIN.asm
                    > USED AT LINE 2198 IN MAIN.asm
                    > USED AT LINE 2200 IN MAIN.asm
NESTING1A:          0E68 DEFINED AT LINE 2207 IN MAIN.asm
                    > USED AT LINE 2204 IN MAIN.asm
NESTING1:           0E6B DEFINED AT LINE 2210 IN MAIN.asm
                    > USED AT LINE 2201 IN MAIN.asm
NESTING2:           0E7A DEFINED AT LINE 2219 IN MAIN.asm
                    > USED AT LINE 2214 IN MAIN.asm
                    > USED AT LINE 2216 IN MAIN.asm
NESTING3:           0E7C DEFINED AT LINE 2222 IN MAIN.asm
                    > USED AT LINE 2218 IN MAIN.asm
NESTING4:           0E87 DEFINED AT LINE 2229 IN MAIN.asm
                    > USED AT LINE 2224 IN MAIN.asm
                    > USED AT LINE 2226 IN MAIN.asm
PROMPT:             0E89 DEFINED AT LINE 2233 IN MAIN.asm
                    > USED AT LINE 2308 IN MAIN.asm
CRLF:               0E92 DEFINED AT LINE 2238 IN MAIN.asm
                    > USED AT LINE 2400 IN MAIN.asm
PRINTSTR:           0E99 DEFINED AT LINE 2245 IN MAIN.asm
                    > USED AT LINE 2234 IN MAIN.asm
                    > USED AT LINE 2239 IN MAIN.asm
                    > USED AT LINE 2461 IN MAIN.asm
INIT:               0EA0 DEFINED AT LINE 2252 IN MAIN.asm
                    > USED AT LINE 2301 IN MAIN.asm
INIT1:              0EA8 DEFINED AT LINE 2256 IN MAIN.asm
                    > USED AT LINE 2262 IN MAIN.asm
WARMINIT:           0EB0 DEFINED AT LINE 2264 IN MAIN.asm
COLDBOOT0:          0EC3 DEFINED AT LINE 2271 IN MAIN.asm
                    > USED AT LINE 2259 IN MAIN.asm
                    > USED AT LINE 2297 IN MAIN.asm
COLDINIT:           0ECD DEFINED AT LINE 2277 IN MAIN.asm
COLDBOOT1:          0EDE DEFINED AT LINE 2286 IN MAIN.asm
                    > USED AT LINE 2289 IN MAIN.asm
COLDSTART:          0EEB DEFINED AT LINE 2295 IN MAIN.asm
                    > USED AT LINE 820 IN MAIN.asm
START:              0EF4 DEFINED AT LINE 2299 IN MAIN.asm
                    > USED AT LINE 7
START1:             0EFA DEFINED AT LINE 2302 IN MAIN.asm
                    > USED AT LINE 2269 IN MAIN.asm
                    > USED AT LINE 2298 IN MAIN.asm
INTERPRET:          0F00 DEFINED AT LINE 2306 IN MAIN.asm
                    > USED AT LINE 2437 IN MAIN.asm
                    > USED AT LINE 2452 IN MAIN.asm
                    > USED AT LINE 2469 IN MAIN.asm
                    > USED AT LINE 2472 IN MAIN.asm
                    > USED AT LINE 2477 IN MAIN.asm
INTERPRET2:         0F0C DEFINED AT LINE 2314 IN MAIN.asm
                    > USED AT LINE 2378 IN MAIN.asm
                    > USED AT LINE 2459 IN MAIN.asm
                    > USED AT LINE 2463 IN MAIN.asm
INTERPRET3:         0F14 DEFINED AT LINE 2322 IN MAIN.asm
                    > USED AT LINE 2335 IN MAIN.asm
INTERPRET4:         0F1F DEFINED AT LINE 2331 IN MAIN.asm
                    > USED AT LINE 2320 IN MAIN.asm
INTERPRET5:         0F24 DEFINED AT LINE 2338 IN MAIN.asm
                    > USED AT LINE 2388 IN MAIN.asm
                    > USED AT LINE 2403 IN MAIN.asm
INTERPRET5A:        0F42 DEFINED AT LINE 2375 IN MAIN.asm
INTERPRET6:         0F44 DEFINED AT LINE 2380 IN MAIN.asm
                    > USED AT LINE 2342 IN MAIN.asm
INTERPRET7:         0F52 DEFINED AT LINE 2390 IN MAIN.asm
                    > USED AT LINE 2347 IN MAIN.asm
INTERPRET8:         0F65 DEFINED AT LINE 2405 IN MAIN.asm
                    > USED AT LINE 2345 IN MAIN.asm
NEXT:               0F80 DEFINED AT LINE 2418 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2422 IN MAIN.asm
NEXT0:              0F94 DEFINED AT LINE 2432 IN MAIN.asm
                    > USED AT LINE 2430 IN MAIN.asm
NEXT1:              0F95 DEFINED AT LINE 2434 IN MAIN.asm
                    > USED AT LINE 2423 IN MAIN.asm
EXIT:               0F9C DEFINED AT LINE 2439 IN MAIN.asm
                    > USED AT LINE 2436 IN MAIN.asm
RUN:                0FA0 DEFINED AT LINE 2443 IN MAIN.asm
                    > USED AT LINE 2450 IN MAIN.asm
                    > USED AT LINE 2467 IN MAIN.asm
                    > USED AT LINE 2475 IN MAIN.asm
ERROR:              0FA4 DEFINED AT LINE 2448 IN MAIN.asm
                    > USED AT LINE 388 IN MAIN.asm
                    > USED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
BACKSPACE_:         0FB6 DEFINED AT LINE 2456 IN MAIN.asm
                    > USED AT LINE 2352 IN MAIN.asm
EDIT_:              0FC6 DEFINED AT LINE 2466 IN MAIN.asm
                    > USED AT LINE 2350 IN MAIN.asm
REEDIT_:            0FDC DEFINED AT LINE 2471 IN MAIN.asm
                    > USED AT LINE 2354 IN MAIN.asm
PRINTSTACK_:        0FDF DEFINED AT LINE 2474 IN MAIN.asm
F1:                 0FE9 DEFINED AT LINE 10
                    > USED AT LINE 844 IN MAIN.asm
F2:                 0FE9 DEFINED AT LINE 11
                    > USED AT LINE 846 IN MAIN.asm
F3:                 0FE9 DEFINED AT LINE 12
                    > USED AT LINE 848 IN MAIN.asm
F4:                 0FE9 DEFINED AT LINE 13
                    > USED AT LINE 850 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1553 IN MAIN.asm
                    > USED AT LINE 2292 IN MAIN.asm
                    > USED AT LINE 2296 IN MAIN.asm
                    > USED AT LINE 2300 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1080 IN MAIN.asm
                    > USED AT LINE 2311 IN MAIN.asm
                    > USED AT LINE 2319 IN MAIN.asm
                    > USED AT LINE 2382 IN MAIN.asm
                    > USED AT LINE 2392 IN MAIN.asm
                    > USED AT LINE 2407 IN MAIN.asm
                    > USED AT LINE 2410 IN MAIN.asm
BUFFER:             2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 1084 IN MAIN.asm
                    > USED AT LINE 1167 IN MAIN.asm
                    > USED AT LINE 1178 IN MAIN.asm
                    > USED AT LINE 1835 IN MAIN.asm
                    > USED AT LINE 1849 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1004 IN MAIN.asm
                    > USED AT LINE 2283 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2279 IN MAIN.asm
VDATAWIDTH:         23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 490 IN MAIN.asm
                    > USED AT LINE 654 IN MAIN.asm
                    > USED AT LINE 730 IN MAIN.asm
                    > USED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1063 IN MAIN.asm
                    > USED AT LINE 1661 IN MAIN.asm
VNUMBASE:           23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 1090 IN MAIN.asm
VTIBPTR:            23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 2312 IN MAIN.asm
                    > USED AT LINE 2409 IN MAIN.asm
VBUFPTR:            23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 549 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
                    > USED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 620 IN MAIN.asm
                    > USED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
                    > USED AT LINE 726 IN MAIN.asm
                    > USED AT LINE 741 IN MAIN.asm
                    > USED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1836 IN MAIN.asm
                    > USED AT LINE 1850 IN MAIN.asm
VNEXT:              23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2291 IN MAIN.asm
VHEAPPTR:           23F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 479 IN MAIN.asm
                    > USED AT LINE 513 IN MAIN.asm
                    > USED AT LINE 517 IN MAIN.asm
                    > USED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 1175 IN MAIN.asm
                    > USED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 1210 IN MAIN.asm
                    > USED AT LINE 1762 IN MAIN.asm
                    > USED AT LINE 1781 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
                    > USED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 1989 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 2014 IN MAIN.asm
                    > USED AT LINE 2019 IN MAIN.asm
                    > USED AT LINE 2050 IN MAIN.asm
                    > USED AT LINE 2116 IN MAIN.asm
VRECUR:             23F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 1541 IN MAIN.asm
                    > USED AT LINE 1548 IN MAIN.asm
VDEFINE:            23F4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 392 IN MAIN.asm
                    > USED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 1676 IN MAIN.asm
VSTRMODE:           23F6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1156 IN MAIN.asm
                    > USED AT LINE 1161 IN MAIN.asm
                    > USED AT LINE 1830 IN MAIN.asm
VPOINTER:           23F8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 241 IN MAIN.asm
                    > USED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 420 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
                    > USED AT LINE 1399 IN MAIN.asm
                    > USED AT LINE 1400 IN MAIN.asm
                    > USED AT LINE 1658 IN MAIN.asm
                    > USED AT LINE 1821 IN MAIN.asm
VREMAIN:            23FA DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 969 IN MAIN.asm
                    > USED AT LINE 1150 IN MAIN.asm
VSAVEDIP:           23FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2265 IN MAIN.asm
                    > USED AT LINE 2412 IN MAIN.asm
VSAVEDSP:           23FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2266 IN MAIN.asm
                    > USED AT LINE 2413 IN MAIN.asm
VSAVEDNEXT:         2400 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2267 IN MAIN.asm
                    > USED AT LINE 2414 IN MAIN.asm
VSAVEDBP:           2402 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 2268 IN MAIN.asm
                    > USED AT LINE 2415 IN MAIN.asm
VTEMP1:             2404 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 518 IN MAIN.asm
                    > USED AT LINE 1166 IN MAIN.asm
                    > USED AT LINE 1176 IN MAIN.asm
                    > USED AT LINE 1496 IN MAIN.asm
                    > USED AT LINE 1540 IN MAIN.asm
                    > USED AT LINE 1552 IN MAIN.asm
                    > USED AT LINE 1558 IN MAIN.asm
                    > USED AT LINE 1587 IN MAIN.asm
                    > USED AT LINE 1608 IN MAIN.asm
                    > USED AT LINE 1615 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
                    > USED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
                    > USED AT LINE 2005 IN MAIN.asm
                    > USED AT LINE 2117 IN MAIN.asm
VTEMP2:             2406 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 1499 IN MAIN.asm
                    > USED AT LINE 1539 IN MAIN.asm
                    > USED AT LINE 1588 IN MAIN.asm
                    > USED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 2007 IN MAIN.asm
                    > USED AT LINE 2107 IN MAIN.asm
VTEMP3:             2408 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 2004 IN MAIN.asm
                    > USED AT LINE 2118 IN MAIN.asm
VLASTDEF:           240A DEFINED AT LINE 61 IN ram.asm
TBPTR:              240C DEFINED AT LINE 62 IN ram.asm
TITLEBUF:           240E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 2254 IN MAIN.asm
                    > USED AT LINE 2273 IN MAIN.asm
                    > USED AT LINE 2303 IN MAIN.asm
HEAP:               2422 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 1076 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
